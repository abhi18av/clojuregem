s(:begin,
  s(:send, nil, :require,
    s(:str, "parser")),
  s(:send, nil, :require,
    s(:str, "unparser")),
  s(:lvasgn, :text1,
    s(:str, "def add9(x) x + 9 end")),
  s(:send, nil, :p,
    s(:send,
      s(:const,
        s(:const, nil, :Parser), :Ruby23), :parse,
      s(:lvar, :text1))),
  s(:module,
    s(:const, nil, :SExp),
    s(:def, :s,
      s(:args,
        s(:arg, :type),
        s(:restarg, :children)),
      s(:send,
        s(:const,
          s(:const,
            s(:const, nil, :Parser), :AST), :Node), :new,
        s(:lvar, :type),
        s(:lvar, :children)))),
  s(:send, nil, :include,
    s(:const, nil, :SExp)),
  s(:lvasgn, :node1,
    s(:send, nil, :s,
      s(:sym, :def),
      s(:sym, :add9),
      s(:send, nil, :s,
        s(:sym, :args),
        s(:send, nil, :s,
          s(:sym, :arg),
          s(:sym, :x))),
      s(:send, nil, :s,
        s(:sym, :send),
        s(:send, nil, :s,
          s(:sym, :lvar),
          s(:sym, :x)),
        s(:sym, :+),
        s(:send, nil, :s,
          s(:sym, :int),
          s(:int, 9))))),
  s(:send, nil, :puts,
    s(:send,
      s(:const, nil, :Unparser), :unparse,
      s(:lvar, :node1))),
  s(:lvasgn, :text2,
    s(:dstr,
      s(:str, "  def test_many_clients\n"),
      s(:str, "             with_puma_server do |port|\n"),
      s(:str, "               clients = concurrently(100.times) { websocket_client(port) }\n"),
      s(:str, "\n"),
      s(:str, "               concurrently(clients) do |c|\n"),
      s(:str, "                 assert_equal({ \"type\" => \"welcome\" }, c.read_message)  # pop the first welcome message off the stack\n"),
      s(:str, "                 c.send_message command: \"subscribe\", identifier: JSON.generate(channel: \"ClientTest::EchoChannel\")\n"),
      s(:str, "                 assert_equal({ \"identifier\" => '{\"channel\":\"ClientTest::EchoChannel\"}', \"type\" => \"confirm_subscription\" }, c.read_message)\n"),
      s(:str, "                 c.send_message command: \"message\", identifier: JSON.generate(channel: \"ClientTest::EchoChannel\"), data: JSON.generate(action: \"ding\", message: \"hello\")\n"),
      s(:str, "                 assert_equal({ \"identifier\" => '{\"channel\":\"ClientTest::EchoChannel\"}', \"message\" => { \"dong\" => \"hello\" } }, c.read_message)\n"),
      s(:str, "               end\n"),
      s(:str, "\n"),
      s(:str, "               concurrently(clients, &:close)\n"),
      s(:str, "             end\n"),
      s(:str, "           end "))),
  s(:send, nil, :p,
    s(:send,
      s(:const,
        s(:const, nil, :Parser), :Ruby23), :parse,
      s(:lvar, :text2))),
  s(:lvasgn, :node2,
    s(:send, nil, :s,
      s(:sym, :def),
      s(:sym, :test_many_clients),
      s(:send, nil, :s,
        s(:sym, :args)),
      s(:send, nil, :s,
        s(:sym, :block),
        s(:send, nil, :s,
          s(:sym, :send),
          s(:nil),
          s(:sym, :with_puma_server)),
        s(:send, nil, :s,
          s(:sym, :args),
          s(:send, nil, :s,
            s(:sym, :arg),
            s(:sym, :port))),
        s(:send, nil, :s,
          s(:sym, :begin),
          s(:send, nil, :s,
            s(:sym, :lvasgn),
            s(:sym, :clients),
            s(:send, nil, :s,
              s(:sym, :block),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:nil),
                s(:sym, :concurrently),
                s(:send, nil, :s,
                  s(:sym, :send),
                  s(:send, nil, :s,
                    s(:sym, :int),
                    s(:int, 100)),
                  s(:sym, :times))),
              s(:send, nil, :s,
                s(:sym, :args)),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:nil),
                s(:sym, :websocket_client),
                s(:send, nil, :s,
                  s(:sym, :lvar),
                  s(:sym, :port))))),
          s(:send, nil, :s,
            s(:sym, :block),
            s(:send, nil, :s,
              s(:sym, :send),
              s(:nil),
              s(:sym, :concurrently),
              s(:send, nil, :s,
                s(:sym, :lvar),
                s(:sym, :clients))),
            s(:send, nil, :s,
              s(:sym, :args),
              s(:send, nil, :s,
                s(:sym, :arg),
                s(:sym, :c))),
            s(:send, nil, :s,
              s(:sym, :begin),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:nil),
                s(:sym, :assert_equal),
                s(:send, nil, :s,
                  s(:sym, :hash),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "type")),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "welcome")))),
                s(:send, nil, :s,
                  s(:sym, :send),
                  s(:send, nil, :s,
                    s(:sym, :lvar),
                    s(:sym, :c)),
                  s(:sym, :read_message))),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:send, nil, :s,
                  s(:sym, :lvar),
                  s(:sym, :c)),
                s(:sym, :send_message),
                s(:send, nil, :s,
                  s(:sym, :hash),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :sym),
                      s(:sym, :command)),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "subscribe"))),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :sym),
                      s(:sym, :identifier)),
                    s(:send, nil, :s,
                      s(:sym, :send),
                      s(:send, nil, :s,
                        s(:sym, :const),
                        s(:nil),
                        s(:sym, :JSON)),
                      s(:sym, :generate),
                      s(:send, nil, :s,
                        s(:sym, :hash),
                        s(:send, nil, :s,
                          s(:sym, :pair),
                          s(:send, nil, :s,
                            s(:sym, :sym),
                            s(:sym, :channel)),
                          s(:send, nil, :s,
                            s(:sym, :str),
                            s(:str, "ClientTest::EchoChannel")))))))),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:nil),
                s(:sym, :assert_equal),
                s(:send, nil, :s,
                  s(:sym, :hash),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "identifier")),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "{\"channel\":\"ClientTest::EchoChannel\"}"))),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "type")),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "confirm_subscription")))),
                s(:send, nil, :s,
                  s(:sym, :send),
                  s(:send, nil, :s,
                    s(:sym, :lvar),
                    s(:sym, :c)),
                  s(:sym, :read_message))),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:send, nil, :s,
                  s(:sym, :lvar),
                  s(:sym, :c)),
                s(:sym, :send_message),
                s(:send, nil, :s,
                  s(:sym, :hash),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :sym),
                      s(:sym, :command)),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "message"))),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :sym),
                      s(:sym, :identifier)),
                    s(:send, nil, :s,
                      s(:sym, :send),
                      s(:send, nil, :s,
                        s(:sym, :const),
                        s(:nil),
                        s(:sym, :JSON)),
                      s(:sym, :generate),
                      s(:send, nil, :s,
                        s(:sym, :hash),
                        s(:send, nil, :s,
                          s(:sym, :pair),
                          s(:send, nil, :s,
                            s(:sym, :sym),
                            s(:sym, :channel)),
                          s(:send, nil, :s,
                            s(:sym, :str),
                            s(:str, "ClientTest::EchoChannel")))))),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :sym),
                      s(:sym, :data)),
                    s(:send, nil, :s,
                      s(:sym, :send),
                      s(:send, nil, :s,
                        s(:sym, :const),
                        s(:nil),
                        s(:sym, :JSON)),
                      s(:sym, :generate),
                      s(:send, nil, :s,
                        s(:sym, :hash),
                        s(:send, nil, :s,
                          s(:sym, :pair),
                          s(:send, nil, :s,
                            s(:sym, :sym),
                            s(:sym, :action)),
                          s(:send, nil, :s,
                            s(:sym, :str),
                            s(:str, "ding"))),
                        s(:send, nil, :s,
                          s(:sym, :pair),
                          s(:send, nil, :s,
                            s(:sym, :sym),
                            s(:sym, :message)),
                          s(:send, nil, :s,
                            s(:sym, :str),
                            s(:str, "hello")))))))),
              s(:send, nil, :s,
                s(:sym, :send),
                s(:nil),
                s(:sym, :assert_equal),
                s(:send, nil, :s,
                  s(:sym, :hash),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "identifier")),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "{\"channel\":\"ClientTest::EchoChannel\"}"))),
                  s(:send, nil, :s,
                    s(:sym, :pair),
                    s(:send, nil, :s,
                      s(:sym, :str),
                      s(:str, "message")),
                    s(:send, nil, :s,
                      s(:sym, :hash),
                      s(:send, nil, :s,
                        s(:sym, :pair),
                        s(:send, nil, :s,
                          s(:sym, :str),
                          s(:str, "dong")),
                        s(:send, nil, :s,
                          s(:sym, :str),
                          s(:str, "hello")))))),
                s(:send, nil, :s,
                  s(:sym, :send),
                  s(:send, nil, :s,
                    s(:sym, :lvar),
                    s(:sym, :c)),
                  s(:sym, :read_message))))),
          s(:send, nil, :s,
            s(:sym, :send),
            s(:nil),
            s(:sym, :concurrently),
            s(:send, nil, :s,
              s(:sym, :lvar),
              s(:sym, :clients)),
            s(:send, nil, :s,
              s(:sym, :block_pass),
              s(:send, nil, :s,
                s(:sym, :sym),
                s(:sym, :close)))))))),
  s(:send, nil, :puts,
    s(:send,
      s(:const, nil, :Unparser), :unparse,
      s(:lvar, :node2))))
