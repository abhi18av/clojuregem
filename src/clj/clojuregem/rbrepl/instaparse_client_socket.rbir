s(:begin,
  s(:send, nil, :require,
    s(:str, "websocket/driver")),
  s(:module,
    s(:const, nil, :ActionCable),
    s(:module,
      s(:const, nil, :Connection),
      s(:class,
        s(:const, nil, :ClientSocket), nil,
        s(:begin,
          s(:defs,
            s(:self), :determine_url,
            s(:args,
              s(:arg, :env)),
            s(:begin,
              s(:lvasgn, :scheme,
                s(:if,
                  s(:send, nil, :secure_request?,
                    s(:lvar, :env)),
                  s(:str, "wss:"),
                  s(:str, "ws:"))),
              s(:dstr,
                s(:begin,
                  s(:lvar, :scheme)),
                s(:str, "//"),
                s(:begin,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "HTTP_HOST"))),
                s(:begin,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "REQUEST_URI")))))),
          s(:defs,
            s(:self), :secure_request?,
            s(:args,
              s(:arg, :env)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "HTTPS")), :==,
                  s(:str, "on")),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "HTTP_X_FORWARDED_SSL")), :==,
                  s(:str, "on")),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "HTTP_X_FORWARDED_SCHEME")), :==,
                  s(:str, "https")),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "HTTP_X_FORWARDED_PROTO")), :==,
                  s(:str, "https")),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :env), :[],
                    s(:str, "rack.url_scheme")), :==,
                  s(:str, "https")),
                s(:return,
                  s(:true)), nil),
              s(:return,
                s(:false)))),
          s(:casgn, nil, :CONNECTING,
            s(:int, 0)),
          s(:casgn, nil, :OPEN,
            s(:int, 1)),
          s(:casgn, nil, :CLOSING,
            s(:int, 2)),
          s(:casgn, nil, :CLOSED,
            s(:int, 3)),
          s(:send, nil, :attr_reader,
            s(:sym, :env),
            s(:sym, :url)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :env),
              s(:arg, :event_target),
              s(:arg, :event_loop),
              s(:arg, :protocols)),
            s(:begin,
              s(:ivasgn, :@env,
                s(:lvar, :env)),
              s(:ivasgn, :@event_target,
                s(:lvar, :event_target)),
              s(:ivasgn, :@event_loop,
                s(:lvar, :event_loop)),
              s(:ivasgn, :@url,
                s(:send,
                  s(:const, nil, :ClientSocket), :determine_url,
                  s(:ivar, :@env))),
              s(:ivasgn, :@driver,
                s(:ivasgn, :@driver_started,
                  s(:nil))),
              s(:ivasgn, :@close_params,
                s(:array,
                  s(:str, ""),
                  s(:int, 1006))),
              s(:ivasgn, :@ready_state,
                s(:const, nil, :CONNECTING)),
              s(:ivasgn, :@driver,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:cbase), :WebSocket), :Driver), :rack,
                  s(:self),
                  s(:hash,
                    s(:pair,
                      s(:sym, :protocols),
                      s(:lvar, :protocols))))),
              s(:block,
                s(:send,
                  s(:ivar, :@driver), :on,
                  s(:sym, :open)),
                s(:args,
                  s(:arg, :e)),
                s(:send, nil, :open)),
              s(:block,
                s(:send,
                  s(:ivar, :@driver), :on,
                  s(:sym, :message)),
                s(:args,
                  s(:arg, :e)),
                s(:send, nil, :receive_message,
                  s(:send,
                    s(:lvar, :e), :data))),
              s(:block,
                s(:send,
                  s(:ivar, :@driver), :on,
                  s(:sym, :close)),
                s(:args,
                  s(:arg, :e)),
                s(:send, nil, :begin_close,
                  s(:send,
                    s(:lvar, :e), :reason),
                  s(:send,
                    s(:lvar, :e), :code))),
              s(:block,
                s(:send,
                  s(:ivar, :@driver), :on,
                  s(:sym, :error)),
                s(:args,
                  s(:arg, :e)),
                s(:send, nil, :emit_error,
                  s(:send,
                    s(:lvar, :e), :message))),
              s(:ivasgn, :@stream,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :ActionCable), :Connection), :Stream), :new,
                  s(:ivar, :@event_loop),
                  s(:self))))),
          s(:def, :start_driver,
            s(:args),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send,
                    s(:ivar, :@driver), :nil?),
                  s(:ivar, :@driver_started)),
                s(:return), nil),
              s(:send,
                s(:ivar, :@stream), :hijack_rack_socket),
              s(:if,
                s(:lvasgn, :callback,
                  s(:send,
                    s(:ivar, :@env), :[],
                    s(:str, "async.callback"))),
                s(:send,
                  s(:lvar, :callback), :call,
                  s(:array,
                    s(:int, 101),
                    s(:hash),
                    s(:ivar, :@stream))), nil),
              s(:ivasgn, :@driver_started,
                s(:true)),
              s(:send,
                s(:ivar, :@driver), :start))),
          s(:def, :rack_response,
            s(:args),
            s(:begin,
              s(:send, nil, :start_driver),
              s(:array,
                s(:int, -1),
                s(:hash),
                s(:array)))),
          s(:def, :write,
            s(:args,
              s(:arg, :data)),
            s(:rescue,
              s(:send,
                s(:ivar, :@stream), :write,
                s(:lvar, :data)),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:send, nil, :emit_error,
                  s(:send,
                    s(:lvar, :e), :message))), nil)),
          s(:def, :transmit,
            s(:args,
              s(:arg, :message)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :>,
                  s(:const, nil, :OPEN)),
                s(:return,
                  s(:false)), nil),
              s(:case,
                s(:lvar, :message),
                s(:when,
                  s(:const, nil, :Numeric),
                  s(:send,
                    s(:ivar, :@driver), :text,
                    s(:send,
                      s(:lvar, :message), :to_s))),
                s(:when,
                  s(:const, nil, :String),
                  s(:send,
                    s(:ivar, :@driver), :text,
                    s(:lvar, :message))),
                s(:when,
                  s(:const, nil, :Array),
                  s(:send,
                    s(:ivar, :@driver), :binary,
                    s(:lvar, :message))),
                s(:false)))),
          s(:def, :close,
            s(:args,
              s(:optarg, :code,
                s(:nil)),
              s(:optarg, :reason,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :code),
                s(:int, 1000)),
              s(:or_asgn,
                s(:lvasgn, :reason),
                s(:str, "")),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :code), :==,
                    s(:int, 1000)),
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:lvar, :code), :>=,
                        s(:int, 3000)),
                      s(:send,
                        s(:lvar, :code), :<=,
                        s(:int, 4999))))), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "Failed to execute 'close' on WebSocket: "),
                    s(:str, "The code must be either 1000, or between 3000 and 4999. "),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :code)),
                      s(:str, " is neither."))))),
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :==,
                  s(:const, nil, :CLOSED)), nil,
                s(:ivasgn, :@ready_state,
                  s(:const, nil, :CLOSING))),
              s(:send,
                s(:ivar, :@driver), :close,
                s(:lvar, :reason),
                s(:lvar, :code)))),
          s(:def, :parse,
            s(:args,
              s(:arg, :data)),
            s(:send,
              s(:ivar, :@driver), :parse,
              s(:lvar, :data))),
          s(:def, :client_gone,
            s(:args),
            s(:send, nil, :finalize_close)),
          s(:def, :alive?,
            s(:args),
            s(:send,
              s(:ivar, :@ready_state), :==,
              s(:const, nil, :OPEN))),
          s(:def, :protocol,
            s(:args),
            s(:send,
              s(:ivar, :@driver), :protocol)),
          s(:send, nil, :private),
          s(:def, :open,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :==,
                  s(:const, nil, :CONNECTING)), nil,
                s(:return)),
              s(:ivasgn, :@ready_state,
                s(:const, nil, :OPEN)),
              s(:send,
                s(:ivar, :@event_target), :on_open))),
          s(:def, :receive_message,
            s(:args,
              s(:arg, :data)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :==,
                  s(:const, nil, :OPEN)), nil,
                s(:return)),
              s(:send,
                s(:ivar, :@event_target), :on_message,
                s(:lvar, :data)))),
          s(:def, :emit_error,
            s(:args,
              s(:arg, :message)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :>=,
                  s(:const, nil, :CLOSING)),
                s(:return), nil),
              s(:send,
                s(:ivar, :@event_target), :on_error,
                s(:lvar, :message)))),
          s(:def, :begin_close,
            s(:args,
              s(:arg, :reason),
              s(:arg, :code)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :==,
                  s(:const, nil, :CLOSED)),
                s(:return), nil),
              s(:ivasgn, :@ready_state,
                s(:const, nil, :CLOSING)),
              s(:ivasgn, :@close_params,
                s(:array,
                  s(:lvar, :reason),
                  s(:lvar, :code))),
              s(:if,
                s(:ivar, :@stream),
                s(:send,
                  s(:ivar, :@stream), :shutdown), nil),
              s(:send, nil, :finalize_close))),
          s(:def, :finalize_close,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@ready_state), :==,
                  s(:const, nil, :CLOSED)),
                s(:return), nil),
              s(:ivasgn, :@ready_state,
                s(:const, nil, :CLOSED)),
              s(:send,
                s(:ivar, :@event_target), :on_close,
                s(:splat,
                  s(:ivar, :@close_params))))))))))
