s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "nacl-config"))),
  s(:send, nil, :include,
    s(:const, nil, :NaClConfig)),
  s(:gvasgn, :$verbosity,
    s(:int, 0)),
  s(:def, :usage_and_exit,
    s(:args),
    s(:begin,
      s(:send,
        s(:gvar, :$stderr), :puts,
        s(:dstr,
          s(:str, "Usage: "),
          s(:begin,
            s(:gvar, :$PROGRAM_NAME)),
          s(:str, " [--verbose=N] path/to/input.nexe path/to/output.nmf"))),
      s(:send, nil, :exit,
        s(:false)))),
  s(:def, :create_dynamically_linked,
    s(:args,
      s(:arg, :nmf),
      s(:arg, :exe)),
    s(:begin,
      s(:lvasgn, :cmd,
        s(:array,
          s(:const, nil, :PYTHON),
          s(:const, nil, :CREATE_NMF),
          s(:str, "-o"),
          s(:lvar, :nmf),
          s(:str, "-D"),
          s(:const, nil, :OBJDUMP),
          s(:str, "-L"),
          s(:const, nil, :HOST_LIB),
          s(:lvar, :exe))),
      s(:if,
        s(:send,
          s(:gvar, :$verbosity), :>,
          s(:int, 0)),
        s(:send, nil, :puts,
          s(:send,
            s(:lvar, :cmd), :join,
            s(:str, " "))), nil),
      s(:send, nil, :exec,
        s(:splat,
          s(:lvar, :cmd))))),
  s(:def, :create_statically_linked,
    s(:args,
      s(:arg, :nmf),
      s(:arg, :exe)),
    s(:block,
      s(:send,
        s(:const, nil, :File), :open,
        s(:lvar, :nmf),
        s(:str, "w")),
      s(:args,
        s(:arg, :f)),
      s(:send,
        s(:lvar, :f), :write,
        s(:send,
          s(:dstr,
            s(:str, "      {\n"),
            s(:str, "        \"program\": {\n"),
            s(:str, "          \""),
            s(:begin,
              s(:const, nil, :ARCH)),
            s(:str, "\": {\n"),
            s(:str, "            \"url\": \""),
            s(:begin,
              s(:lvar, :exe)),
            s(:str, "\"\n"),
            s(:str, "          }\n"),
            s(:str, "        }\n"),
            s(:str, "      }\n")), :gsub,
          s(:regexp,
            s(:str, "^ {6}"),
            s(:regopt)),
          s(:str, ""))))),
  s(:def, :main,
    s(:args),
    s(:begin,
      s(:while,
        s(:lvasgn, :m,
          s(:send,
            s(:send,
              s(:const, nil, :ARGV), :first), :match,
            s(:regexp,
              s(:str, "--([a-z-]+)(?:=(\\S+))?"),
              s(:regopt)))),
        s(:begin,
          s(:case,
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 1)),
            s(:when,
              s(:str, "verbose"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 2)), :[],
                    s(:regexp,
                      s(:str, "\\A[0-9]+\\z"),
                      s(:regopt))), nil,
                  s(:send, nil, :usage_and_exit)),
                s(:gvasgn, :$verbosity,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 2)), :to_i)))),
            s(:when,
              s(:str, "help"),
              s(:send, nil, :usage_end_exit)), nil),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :ARGV), :size), :<,
          s(:int, 2)),
        s(:send, nil, :usage_and_exit), nil),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :exe),
          s(:lvasgn, :nmf)),
        s(:array,
          s(:send,
            s(:const, nil, :ARGV), :[],
            s(:int, 0)),
          s(:send,
            s(:const, nil, :ARGV), :[],
            s(:int, 1)))),
      s(:if,
        s(:send, nil, :newlib?),
        s(:send, nil, :create_statically_linked,
          s(:lvar, :nmf),
          s(:lvar, :exe)),
        s(:send, nil, :create_dynamically_linked,
          s(:lvar, :nmf),
          s(:lvar, :exe))))),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:send, nil, :main), nil))
