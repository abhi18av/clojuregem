s(:begin,
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:module,
    s(:const, nil, :NaClConfig),
    s(:begin,
      s(:lvasgn, :config,
        s(:const,
          s(:const, nil, :RbConfig), :CONFIG)),
      s(:lvasgn, :cpu_nick,
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :config), :[],
                s(:str, "host_alias")), :sub,
              s(:regexp,
                s(:str, "-gnu$|-newlib$"),
                s(:regopt)),
              s(:str, "")), :sub,
            s(:regexp,
              s(:str, "-nacl$"),
              s(:regopt)),
            s(:str, "")), :sub,
          s(:regexp,
            s(:str, "i.86"),
            s(:regopt)),
          s(:str, "x86_32"))),
      s(:casgn, nil, :ARCH,
        s(:send,
          s(:send,
            s(:lvar, :cpu_nick), :sub,
            s(:str, "x86_64"),
            s(:str, "x86-64")), :sub,
          s(:str, "x86_32"),
          s(:str, "x86-32"))),
      s(:casgn, nil, :HOST,
        s(:send,
          s(:send,
            s(:const, nil, :ARCH), :sub,
            s(:regexp,
              s(:str, "x86-.."),
              s(:regopt)),
            s(:str, "x86_64")), :+,
          s(:str, "-nacl"))),
      s(:lvasgn, :lib_suffix,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :config), :[],
              s(:str, "host_cpu")), :[],
            s(:regexp,
              s(:str, "i.86"),
              s(:regopt))),
          s(:str, "32"),
          s(:str, ""))),
      s(:casgn, nil, :PYTHON,
        s(:send,
          s(:lvar, :config), :[],
          s(:str, "PYTHON"))),
      s(:casgn, nil, :OBJDUMP,
        s(:send,
          s(:lvar, :config), :[],
          s(:str, "OBJDUMP"))),
      s(:casgn, nil, :SDK_ROOT,
        s(:send,
          s(:lvar, :config), :[],
          s(:str, "NACL_SDK_ROOT"))),
      s(:or,
        s(:casgn, nil, :CREATE_NMF,
          s(:block,
            s(:send,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:const, nil, :SDK_ROOT),
                  s(:str, "build_tools"),
                  s(:str, "nacl_sdk_scons"),
                  s(:str, "site_tools"),
                  s(:str, "create_nmf.py")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:const, nil, :SDK_ROOT),
                  s(:str, "tools"),
                  s(:str, "create_nmf.py"))), :find),
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :path)))),
        s(:send, nil, :raise,
          s(:str, "No create_nmf found"))),
      s(:casgn, nil, :HOST_LIB,
        s(:send,
          s(:const, nil, :File), :join,
          s(:const, nil, :SDK_ROOT),
          s(:str, "toolchain"),
          s(:send,
            s(:lvar, :config), :[],
            s(:str, "NACL_TOOLCHAIN")),
          s(:const, nil, :HOST),
          s(:dstr,
            s(:str, "lib"),
            s(:begin,
              s(:lvar, :lib_suffix))))),
      s(:casgn, nil, :NACL_LIB,
        s(:send,
          s(:const, nil, :File), :join,
          s(:const, nil, :SDK_ROOT),
          s(:str, "lib"),
          s(:send,
            s(:lvar, :config), :[],
            s(:str, "NACL_LIB_PATH")),
          s(:str, "Release"))),
      s(:casgn, nil, :INSTALL_PROGRAM,
        s(:send,
          s(:lvar, :config), :[],
          s(:str, "INSTALL_PROGRAM"))),
      s(:casgn, nil, :INSTALL_LIBRARY,
        s(:send,
          s(:lvar, :config), :[],
          s(:str, "INSTALL_DATA"))),
      s(:if,
        s(:or,
          s(:send,
            s(:lvar, :cpu_nick), :==,
            s(:str, "x86_64")),
          s(:send,
            s(:lvar, :cpu_nick), :==,
            s(:str, "x86_32"))),
        s(:begin,
          s(:casgn, nil, :SEL_LDR,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :SDK_ROOT),
              s(:str, "tools"),
              s(:dstr,
                s(:str, "sel_ldr_"),
                s(:begin,
                  s(:lvar, :cpu_nick))))),
          s(:casgn, nil, :IRT_CORE,
            s(:send,
              s(:const, nil, :File), :join,
              s(:const, nil, :SDK_ROOT),
              s(:str, "tools"),
              s(:dstr,
                s(:str, "irt_core_"),
                s(:begin,
                  s(:lvar, :cpu_nick)),
                s(:str, ".nexe")))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :executable?,
                s(:const, nil, :SEL_LDR)), :!),
            s(:send, nil, :raise,
              s(:str, "No sel_ldr found")), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exists?,
                s(:const, nil, :IRT_CORE)), :!),
            s(:send, nil, :raise,
              s(:str, "No irt_core found")), nil)), nil),
      s(:casgn, nil, :RUNNABLE_LD,
        s(:send,
          s(:const, nil, :File), :join,
          s(:const, nil, :HOST_LIB),
          s(:str, "runnable-ld.so"))),
      s(:send, nil, :module_function),
      s(:def, :newlib?,
        s(:args),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[],
            s(:str, "NACL_SDK_VARIANT")), :==,
          s(:str, "newlib"))),
      s(:defs,
        s(:self), :config,
        s(:args,
          s(:arg, :name)),
        s(:if,
          s(:send,
            s(:const, nil, :NaClConfig), :const_defined?,
            s(:send,
              s(:lvar, :name), :upcase)),
          s(:send,
            s(:const, nil, :NaClConfig), :const_get,
            s(:send,
              s(:lvar, :name), :upcase)),
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :NaClConfig), :respond_to?,
                s(:lvar, :name)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :NaClConfig), :method,
                    s(:lvar, :name)), :arity), :==,
                s(:int, 0))),
            s(:send,
              s(:const, nil, :NaClConfig), :send,
              s(:lvar, :name)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "No such config: "),
                s(:begin,
                  s(:lvar, :name))))))))),
  s(:if,
    s(:send,
      s(:gvar, :$0), :==,
      s(:str, "(string)")),
    s(:block,
      s(:send,
        s(:const, nil, :ARGV), :each),
      s(:args,
        s(:arg, :arg)),
      s(:send, nil, :puts,
        s(:send,
          s(:const, nil, :NaClConfig), :config,
          s(:lvar, :arg)))), nil))
