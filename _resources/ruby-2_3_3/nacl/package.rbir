s(:begin,
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "nacl-config"))),
  s(:send, nil, :require,
    s(:str, "json")),
  s(:send, nil, :require,
    s(:str, "find")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :include,
    s(:const, nil, :NaClConfig)),
  s(:class,
    s(:const, nil, :Installation), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :NaClConfig)),
      s(:casgn, nil, :SRC_DIRS,
        s(:array,
          s(:send,
            s(:const, nil, :Dir), :pwd),
          s(:const, nil, :HOST_LIB),
          s(:const, nil, :NACL_LIB))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :destdir)),
        s(:begin,
          s(:ivasgn, :@destdir,
            s(:lvar, :destdir)),
          s(:ivasgn, :@manifest,
            s(:hash,
              s(:pair,
                s(:str, "files"),
                s(:hash)))),
          s(:block,
            s(:send,
              s(:send, nil, :ruby_libs), :each),
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@manifest), :[],
                    s(:str, "files")), :key?,
                  s(:lvar, :path)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Collision of "),
                    s(:begin,
                      s(:lvar, :path)))), nil),
              s(:send,
                s(:send,
                  s(:ivar, :@manifest), :[],
                  s(:str, "files")), :[]=,
                s(:lvar, :path),
                s(:hash,
                  s(:pair,
                    s(:const, nil, :ARCH),
                    s(:hash,
                      s(:pair,
                        s(:str, "url"),
                        s(:lvar, :path)))))),
              s(:if,
                s(:send,
                  s(:lvar, :path), :[],
                  s(:regexp,
                    s(:str, "\\.so$"),
                    s(:regopt))),
                s(:begin,
                  s(:lvasgn, :alternate_path,
                    s(:send,
                      s(:lvar, :path), :gsub,
                      s(:str, "/"),
                      s(:str, "_"))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@manifest), :[],
                        s(:str, "files")), :key?,
                      s(:lvar, :alternate_path)),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "Collision of "),
                        s(:begin,
                          s(:lvar, :alternate_path)))), nil),
                  s(:send,
                    s(:send,
                      s(:ivar, :@manifest), :[],
                      s(:str, "files")), :[]=,
                    s(:lvar, :alternate_path),
                    s(:hash,
                      s(:pair,
                        s(:const, nil, :ARCH),
                        s(:hash,
                          s(:pair,
                            s(:str, "url"),
                            s(:lvar, :path))))))), nil))))),
      s(:def, :manifest,
        s(:args),
        s(:send,
          s(:ivar, :@manifest), :dup)),
      s(:def, :install_program,
        s(:args,
          s(:arg, :basename)),
        s(:begin,
          s(:send, nil, :do_install_binary,
            s(:lvar, :basename),
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destdir),
              s(:str, "bin"),
              s(:const, nil, :ARCH))),
          s(:send,
            s(:ivar, :@manifest), :[]=,
            s(:str, "program"),
            s(:hash,
              s(:pair,
                s(:const, nil, :ARCH),
                s(:hash,
                  s(:pair,
                    s(:str, "url"),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:str, "bin"),
                      s(:const, nil, :ARCH),
                      s(:lvar, :basename))))))))),
      s(:def, :install_library,
        s(:args,
          s(:arg, :name),
          s(:arg, :basename)),
        s(:begin,
          s(:send, nil, :do_install_binary,
            s(:lvar, :basename),
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@destdir),
              s(:str, "lib"),
              s(:const, nil, :ARCH))),
          s(:send,
            s(:send,
              s(:ivar, :@manifest), :[],
              s(:str, "files")), :[]=,
            s(:lvar, :name),
            s(:hash,
              s(:pair,
                s(:const, nil, :ARCH),
                s(:hash,
                  s(:pair,
                    s(:str, "url"),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:str, "lib"),
                      s(:const, nil, :ARCH),
                      s(:lvar, :basename))))))))),
      s(:send, nil, :private),
      s(:def, :do_install_binary,
        s(:args,
          s(:arg, :basename),
          s(:arg, :dest_dir)),
        s(:begin,
          s(:lvasgn, :full_path,
            s(:nil)),
          s(:block,
            s(:send, nil, :catch,
              s(:sym, :found)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:const, nil, :SRC_DIRS), :each),
                s(:args,
                  s(:arg, :path)),
                s(:begin,
                  s(:lvasgn, :full_path,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :path),
                      s(:lvar, :basename))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :full_path)),
                    s(:send, nil, :throw,
                      s(:sym, :found)), nil))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT),
                s(:send,
                  s(:str, "No such file to install: %s"), :%,
                  s(:lvar, :basename))))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dest_dir)),
          s(:send, nil, :system,
            s(:dstr,
              s(:begin,
                s(:const, nil, :INSTALL_PROGRAM)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :full_path)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :dest_dir)))))),
      s(:def, :ruby_libs,
        s(:args),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Find), :find,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "rubylibdir"))), :select),
              s(:args,
                s(:arg, :path)),
              s(:send,
                s(:const, nil, :File), :file?,
                s(:lvar, :path))), :map),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:lvar, :path), :sub,
            s(:dstr,
              s(:begin,
                s(:ivar, :@destdir)),
              s(:str, "/")),
            s(:str, "")))))),
  s(:def, :install,
    s(:args,
      s(:arg, :destdir)),
    s(:begin,
      s(:lvasgn, :inst,
        s(:send,
          s(:const, nil, :Installation), :new,
          s(:lvar, :destdir))),
      s(:lvasgn, :manifest,
        s(:send,
          s(:const, nil, :JSON), :parse,
          s(:send,
            s(:const, nil, :File), :read,
            s(:str, "pepper-ruby.nmf")))),
      s(:lvasgn, :program,
        s(:send,
          s(:const, nil, :File), :basename,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :manifest), :[],
                s(:str, "program")), :[],
              s(:const, nil, :ARCH)), :[],
            s(:str, "url")))),
      s(:send,
        s(:lvar, :inst), :install_program,
        s(:lvar, :program)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :manifest), :[],
            s(:str, "files")), :each),
        s(:args,
          s(:arg, :name),
          s(:arg, :attr)),
        s(:send,
          s(:lvar, :inst), :install_library,
          s(:lvar, :name),
          s(:send,
            s(:const, nil, :File), :basename,
            s(:send,
              s(:send,
                s(:lvar, :attr), :[],
                s(:const, nil, :ARCH)), :[],
              s(:str, "url"))))),
      s(:block,
        s(:send,
          s(:const, nil, :File), :open,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :destdir),
            s(:str, "ruby.nmf")),
          s(:str, "w")),
        s(:args,
          s(:arg, :f)),
        s(:send,
          s(:lvar, :f), :puts,
          s(:send,
            s(:const, nil, :JSON), :pretty_generate,
            s(:send,
              s(:lvar, :inst), :manifest)))))),
  s(:def, :main,
    s(:args),
    s(:send, nil, :install,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)))),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:send, nil, :main), nil))
