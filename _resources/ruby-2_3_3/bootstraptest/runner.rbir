s(:begin,
  s(:or,
    s(:dstr,
      s(:str, "exec"),
      s(:str, "${RUBY-ruby}"),
      s(:str, "-x"),
      s(:str, "$0"),
      s(:str, "$@")),
    s(:true)),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "fileutils")),
        s(:send, nil, :require,
          s(:str, "tmpdir"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:begin,
          s(:send,
            s(:gvar, :$:), :unshift,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:str, "(string)")),
              s(:str, "../lib"))),
          s(:retry))), nil)),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :Dir), :respond_to?,
        s(:sym, :mktmpdir)), :!),
    s(:defs,
      s(:const, nil, :Dir), :mktmpdir,
      s(:args,
        s(:optarg, :prefix_suffix,
          s(:nil)),
        s(:optarg, :tmpdir,
          s(:nil))),
      s(:begin,
        s(:case,
          s(:lvar, :prefix_suffix),
          s(:when,
            s(:nil),
            s(:begin,
              s(:lvasgn, :prefix,
                s(:str, "d")),
              s(:lvasgn, :suffix,
                s(:str, "")))),
          s(:when,
            s(:const, nil, :String),
            s(:begin,
              s(:lvasgn, :prefix,
                s(:lvar, :prefix_suffix)),
              s(:lvasgn, :suffix,
                s(:str, "")))),
          s(:when,
            s(:const, nil, :Array),
            s(:begin,
              s(:lvasgn, :prefix,
                s(:send,
                  s(:lvar, :prefix_suffix), :[],
                  s(:int, 0))),
              s(:lvasgn, :suffix,
                s(:send,
                  s(:lvar, :prefix_suffix), :[],
                  s(:int, 1))))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "unexpected prefix_suffix: "),
              s(:begin,
                s(:send,
                  s(:lvar, :prefix_suffix), :inspect))))),
        s(:or_asgn,
          s(:lvasgn, :tmpdir),
          s(:send,
            s(:const, nil, :Dir), :tmpdir)),
        s(:lvasgn, :t,
          s(:send,
            s(:send,
              s(:const, nil, :Time), :now), :strftime,
            s(:str, "%Y%m%d"))),
        s(:lvasgn, :n,
          s(:nil)),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:lvasgn, :path,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :tmpdir)),
                  s(:str, "/"),
                  s(:begin,
                    s(:lvar, :prefix)),
                  s(:begin,
                    s(:lvar, :t)),
                  s(:str, "-"),
                  s(:begin,
                    s(:gvar, :$$)),
                  s(:str, "-"),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :rand,
                        s(:int, 4294967296)), :to_s,
                      s(:int, 36))))),
              s(:if,
                s(:lvar, :n),
                s(:send,
                  s(:lvar, :path), :<<,
                  s(:dstr,
                    s(:str, "-"),
                    s(:begin,
                      s(:lvar, :n)))), nil),
              s(:send,
                s(:lvar, :path), :<<,
                s(:lvar, :suffix)),
              s(:send,
                s(:const, nil, :Dir), :mkdir,
                s(:lvar, :path),
                s(:int, 448))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Errno), :EEXIST)), nil,
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :n),
                  s(:int, 0)),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:int, 1)),
                s(:retry))), nil)),
        s(:if,
          s(:send, nil, :block_given?),
          s(:kwbegin,
            s(:ensure,
              s(:yield,
                s(:lvar, :path)),
              s(:send,
                s(:const, nil, :FileUtils), :remove_entry_secure,
                s(:lvar, :path)))),
          s(:lvar, :path)))), nil),
  s(:def, :main,
    s(:args),
    s(:begin,
      s(:ivasgn, :@ruby,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "miniruby"))),
      s(:ivasgn, :@verbose,
        s(:false)),
      s(:gvasgn, :$stress,
        s(:false)),
      s(:ivasgn, :@color,
        s(:nil)),
      s(:ivasgn, :@tty,
        s(:nil)),
      s(:ivasgn, :@quiet,
        s(:false)),
      s(:lvasgn, :dir,
        s(:nil)),
      s(:lvasgn, :quiet,
        s(:false)),
      s(:lvasgn, :tests,
        s(:nil)),
      s(:block,
        s(:send,
          s(:const, nil, :ARGV), :delete_if),
        s(:args,
          s(:arg, :arg)),
        s(:case,
          s(:lvar, :arg),
          s(:when,
            s(:regexp,
              s(:str, "\\A--ruby=(.*)"),
              s(:regopt)),
            s(:begin,
              s(:ivasgn, :@ruby,
                s(:nth_ref, 1)),
              s(:block,
                s(:send,
                  s(:ivar, :@ruby), :gsub!,
                  s(:regexp,
                    s(:str, "^([^ ]*)"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:nth_ref, 1))),
              s(:block,
                s(:send,
                  s(:ivar, :@ruby), :gsub!,
                  s(:regexp,
                    s(:str, "(\\s+-I\\s*)((?!(?:\\./)*-(?:\\s|\\z))\\S+)"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:nth_ref, 1), :+,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:nth_ref, 2)))),
              s(:block,
                s(:send,
                  s(:ivar, :@ruby), :gsub!,
                  s(:regexp,
                    s(:str, "(\\s+-r\\s*)(\\.\\.?/\\S+)"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:nth_ref, 1), :+,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:nth_ref, 2)))),
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A--sets=(.*)"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :tests,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:gvar, :$0))),
                      s(:str, "/test_{"),
                      s(:begin,
                        s(:nth_ref, 1)),
                      s(:str, "}*.rb"))), :sort)),
              s(:send, nil, :puts,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :tests), :map),
                    s(:args,
                      s(:arg, :path)),
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :path))), :inspect)),
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A--dir=(.*)"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :dir,
                s(:nth_ref, 1)),
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A(--stress|-s)"),
              s(:regopt)),
            s(:gvasgn, :$stress,
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A--color(?:=(?:always|(auto)|(never)|(.*)))?\\z"),
              s(:regopt)),
            s(:begin,
              s(:if,
                s(:nth_ref, 3),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "unknown --color argument: "),
                    s(:nth_ref, 3))), nil),
              s(:ivasgn, :@color,
                s(:if,
                  s(:nth_ref, 1),
                  s(:nil),
                  s(:send,
                    s(:nth_ref, 2), :!))),
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A--tty(=(?:yes|(no)|(.*)))?\\z"),
              s(:regopt)),
            s(:begin,
              s(:if,
                s(:nth_ref, 3),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "unknown --tty argument: "),
                    s(:nth_ref, 3))), nil),
              s(:ivasgn, :@tty,
                s(:or,
                  s(:send,
                    s(:nth_ref, 1), :!),
                  s(:send,
                    s(:nth_ref, 2), :!))),
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A(-q|--q(uiet))\\z"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :quiet,
                s(:true)),
              s(:ivasgn, :@quiet,
                s(:true)),
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A(-v|--v(erbose))\\z"),
              s(:regopt)),
            s(:ivasgn, :@verbose,
              s(:true))),
          s(:when,
            s(:regexp,
              s(:str, "\\A(-h|--h(elp)?)\\z"),
              s(:regopt)),
            s(:begin,
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Usage: "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:gvar, :$0),
                      s(:str, ".*"))),
                  s(:str, " --ruby=PATH [--sets=NAME,NAME,...]\n"),
                  s(:str, "        --sets=NAME,NAME,...        Name of test sets.\n"),
                  s(:str, "        --dir=DIRECTORY             Working directory.\n"),
                  s(:str, "                                    default: /tmp/bootstraptestXXXXX.tmpwd\n"),
                  s(:str, "        --color[=WHEN]              Colorize the output.  WHEN defaults to 'always'\n"),
                  s(:str, "                                    or can be 'never' or 'auto'.\n"),
                  s(:str, "    -s, --stress                    stress test.\n"),
                  s(:str, "    -v, --verbose                   Output test name before exec.\n"),
                  s(:str, "    -q, --quiet                     Don't print header message.\n"),
                  s(:str, "    -h, --help                      Print this message and quit.\n"))),
              s(:send, nil, :exit,
                s(:true)))),
          s(:when,
            s(:regexp,
              s(:str, "\\A-j"),
              s(:regopt)),
            s(:true)),
          s(:false))),
      s(:if,
        s(:and,
          s(:lvar, :tests),
          s(:send,
            s(:send,
              s(:const, nil, :ARGV), :empty?), :!)),
        s(:begin,
          s(:send,
            s(:gvar, :$stderr), :puts,
            s(:str, "--tests and arguments are exclusive")),
          s(:send, nil, :exit,
            s(:false))), nil),
      s(:or_asgn,
        s(:lvasgn, :tests),
        s(:const, nil, :ARGV)),
      s(:if,
        s(:send,
          s(:lvar, :tests), :empty?),
        s(:lvasgn, :tests,
          s(:send,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:gvar, :$0))),
                s(:str, "/test_*.rb"))), :sort)), nil),
      s(:lvasgn, :pathes,
        s(:block,
          s(:send,
            s(:lvar, :tests), :map),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :path)))),
      s(:ivasgn, :@progress,
        s(:array,
          s(:str, "-"),
          s(:str, "\\"),
          s(:str, "|"),
          s(:str, "/"))),
      s(:ivasgn, :@progress_bs,
        s(:send,
          s(:str, "\b"), :*,
          s(:send,
            s(:send,
              s(:ivar, :@progress), :[],
              s(:int, 0)), :size))),
      s(:if,
        s(:send,
          s(:ivar, :@tty), :nil?),
        s(:ivasgn, :@tty,
          s(:send,
            s(:gvar, :$stderr), :tty?)), nil),
      s(:case,
        s(:ivar, :@color),
        s(:when,
          s(:nil),
          s(:ivasgn, :@color,
            s(:and,
              s(:ivar, :@tty),
              s(:send,
                s(:regexp,
                  s(:str, "dumb"),
                  s(:regopt)), :!~,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "TERM")))))), nil),
      s(:and_asgn,
        s(:ivasgn, :@tty),
        s(:send,
          s(:ivar, :@verbose), :!)),
      s(:if,
        s(:ivar, :@color),
        s(:begin,
          s(:lvasgn, :colors,
            s(:if,
              s(:begin,
                s(:lvasgn, :colors,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "TEST_COLORS")))),
              s(:send,
                s(:const, nil, :Hash), :[],
                s(:send,
                  s(:lvar, :colors), :scan,
                  s(:regexp,
                    s(:str, "(\\w+)=([^:\\n]*)"),
                    s(:regopt)))),
              s(:hash))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send, nil, :__dir__),
                      s(:str, "../test/colors"))), :scan,
                  s(:regexp,
                    s(:str, "(\\w+)=([^:\\n]*)"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :c)),
                s(:or_asgn,
                  s(:send,
                    s(:lvar, :colors), :[],
                    s(:lvar, :n)),
                  s(:lvar, :c))),
              s(:resbody, nil, nil, nil), nil)),
          s(:ivasgn, :@passed,
            s(:dstr,
              s(:str, "\e[;"),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:lvar, :colors), :[],
                    s(:str, "pass")),
                  s(:str, "32"))),
              s(:str, "m"))),
          s(:ivasgn, :@failed,
            s(:dstr,
              s(:str, "\e[;"),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:lvar, :colors), :[],
                    s(:str, "fail")),
                  s(:str, "31"))),
              s(:str, "m"))),
          s(:ivasgn, :@reset,
            s(:str, "\e[m"))),
        s(:ivasgn, :@passed,
          s(:ivasgn, :@failed,
            s(:ivasgn, :@reset,
              s(:str, ""))))),
      s(:if,
        s(:lvar, :quiet), nil,
        s(:begin,
          s(:send, nil, :puts,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_DESCRIPTION)),
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "Driver is "),
                s(:begin,
                  s(:const, nil, :RUBY_DESCRIPTION)))),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_PATCHLEVEL)),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Driver is ruby "),
                  s(:begin,
                    s(:const, nil, :RUBY_VERSION)),
                  s(:str, " ("),
                  s(:begin,
                    s(:const, nil, :RUBY_RELEASE_DATE)),
                  s(:begin,
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:str, ") ["),
                  s(:begin,
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:str, "]"))),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "Driver is ruby "),
                  s(:begin,
                    s(:const, nil, :RUBY_VERSION)),
                  s(:str, " ("),
                  s(:begin,
                    s(:const, nil, :RUBY_RELEASE_DATE)),
                  s(:str, ") ["),
                  s(:begin,
                    s(:const, nil, :RUBY_PLATFORM)),
                  s(:str, "]"))))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "Target is "),
              s(:begin,
                s(:send,
                  s(:xstr,
                    s(:begin,
                      s(:ivar, :@ruby)),
                    s(:str, " -v")), :chomp)))),
          s(:send, nil, :puts),
          s(:send,
            s(:gvar, :$stdout), :flush))),
      s(:block,
        s(:send, nil, :in_temporary_working_directory,
          s(:lvar, :dir)),
        s(:args),
        s(:send, nil, :exec_test,
          s(:lvar, :pathes))))),
  s(:def, :erase,
    s(:args,
      s(:optarg, :e,
        s(:true))),
    s(:if,
      s(:and,
        s(:and,
          s(:lvar, :e),
          s(:send,
            s(:ivar, :@columns), :>,
            s(:int, 0))),
        s(:send,
          s(:ivar, :@verbose), :!)),
      s(:dstr,
        s(:str, "\r"),
        s(:begin,
          s(:send,
            s(:str, " "), :*,
            s(:ivar, :@columns))),
        s(:str, "\r")),
      s(:str, ""))),
  s(:def, :exec_test,
    s(:args,
      s(:arg, :pathes)),
    s(:begin,
      s(:ivasgn, :@count,
        s(:int, 0)),
      s(:ivasgn, :@error,
        s(:int, 0)),
      s(:ivasgn, :@errbuf,
        s(:array)),
      s(:ivasgn, :@location,
        s(:nil)),
      s(:ivasgn, :@columns,
        s(:int, 0)),
      s(:ivasgn, :@width,
        s(:send,
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :pathes), :map),
              s(:args,
                s(:arg, :path)),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :path)), :size)), :max), :+,
          s(:int, 2))),
      s(:block,
        s(:send,
          s(:lvar, :pathes), :each),
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:ivasgn, :@basename,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :path))),
          s(:send,
            s(:gvar, :$stderr), :printf,
            s(:str, "%s%-*s "),
            s(:send, nil, :erase,
              s(:ivar, :@quiet)),
            s(:ivar, :@width),
            s(:ivar, :@basename)),
          s(:send,
            s(:gvar, :$stderr), :flush),
          s(:ivasgn, :@columns,
            s(:send,
              s(:ivar, :@width), :+,
              s(:int, 1))),
          s(:if,
            s(:ivar, :@verbose),
            s(:send,
              s(:gvar, :$stderr), :puts), nil),
          s(:lvasgn, :count,
            s(:ivar, :@count)),
          s(:lvasgn, :error,
            s(:ivar, :@error)),
          s(:send, nil, :load,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :path))),
          s(:if,
            s(:ivar, :@tty),
            s(:if,
              s(:send,
                s(:ivar, :@error), :==,
                s(:lvar, :error)),
              s(:begin,
                s(:lvasgn, :msg,
                  s(:dstr,
                    s(:str, "PASS "),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@count), :-,
                        s(:lvar, :count))))),
                s(:op_asgn,
                  s(:ivasgn, :@columns), :+,
                  s(:send,
                    s(:send,
                      s(:lvar, :msg), :size), :-,
                    s(:int, 1))),
                s(:send,
                  s(:gvar, :$stderr), :print,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@progress_bs)),
                    s(:begin,
                      s(:ivar, :@passed)),
                    s(:begin,
                      s(:lvar, :msg)),
                    s(:begin,
                      s(:ivar, :@reset))))),
              s(:begin,
                s(:lvasgn, :msg,
                  s(:dstr,
                    s(:str, "FAIL "),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@error), :-,
                        s(:lvar, :error))),
                    s(:str, "/"),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@count), :-,
                        s(:lvar, :count))))),
                s(:send,
                  s(:gvar, :$stderr), :print,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@progress_bs)),
                    s(:begin,
                      s(:ivar, :@failed)),
                    s(:begin,
                      s(:lvar, :msg)),
                    s(:begin,
                      s(:ivar, :@reset)))),
                s(:ivasgn, :@columns,
                  s(:int, 0)))), nil),
          s(:if,
            s(:and,
              s(:and,
                s(:ivar, :@quiet),
                s(:ivar, :@tty)),
              s(:send,
                s(:ivar, :@error), :==,
                s(:lvar, :error))), nil,
            s(:send,
              s(:gvar, :$stderr), :puts)))),
      s(:if,
        s(:ivar, :@quiet),
        s(:send,
          s(:gvar, :$stderr), :print,
          s(:send, nil, :erase)), nil),
      s(:if,
        s(:send,
          s(:ivar, :@error), :==,
          s(:int, 0)),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@count), :==,
              s(:int, 0)),
            s(:send,
              s(:gvar, :$stderr), :puts,
              s(:str, "No tests, no problem")),
            s(:send,
              s(:gvar, :$stderr), :puts,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@passed)),
                s(:str, "PASS"),
                s(:begin,
                  s(:ivar, :@reset)),
                s(:str, " all "),
                s(:begin,
                  s(:ivar, :@count)),
                s(:str, " tests")))),
          s(:send, nil, :exit,
            s(:true))),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@errbuf), :each),
            s(:args,
              s(:arg, :msg)),
            s(:send,
              s(:gvar, :$stderr), :puts,
              s(:lvar, :msg))),
          s(:send,
            s(:gvar, :$stderr), :puts,
            s(:dstr,
              s(:begin,
                s(:ivar, :@failed)),
              s(:str, "FAIL"),
              s(:begin,
                s(:ivar, :@reset)),
              s(:str, " "),
              s(:begin,
                s(:ivar, :@error)),
              s(:str, "/"),
              s(:begin,
                s(:ivar, :@count)),
              s(:str, " tests failed"))),
          s(:send, nil, :exit,
            s(:false)))))),
  s(:def, :show_progress,
    s(:args,
      s(:optarg, :message,
        s(:str, ""))),
    s(:rescue,
      s(:begin,
        s(:if,
          s(:ivar, :@verbose),
          s(:send,
            s(:gvar, :$stderr), :print,
            s(:dstr,
              s(:str, "#"),
              s(:begin,
                s(:ivar, :@count)),
              s(:str, " "),
              s(:begin,
                s(:ivar, :@location)),
              s(:str, " "))),
          s(:if,
            s(:ivar, :@tty),
            s(:send,
              s(:gvar, :$stderr), :print,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@progress_bs)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@progress), :[],
                    s(:send,
                      s(:ivar, :@count), :%,
                      s(:send,
                        s(:ivar, :@progress), :size)))))), nil)),
        s(:if,
          s(:ivar, :@verbose),
          s(:lvasgn, :t,
            s(:send,
              s(:const, nil, :Time), :now)), nil),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :faildesc),
            s(:lvasgn, :errout)),
          s(:block,
            s(:send, nil, :with_stderr),
            s(:args),
            s(:yield))),
        s(:if,
          s(:ivar, :@verbose),
          s(:lvasgn, :t,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :-,
              s(:lvar, :t))), nil),
        s(:if,
          s(:send,
            s(:lvar, :faildesc), :!),
          s(:if,
            s(:ivar, :@tty),
            s(:send,
              s(:gvar, :$stderr), :print,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@progress_bs)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@progress), :[],
                    s(:send,
                      s(:ivar, :@count), :%,
                      s(:send,
                        s(:ivar, :@progress), :size)))))),
            s(:if,
              s(:ivar, :@verbose),
              s(:send,
                s(:gvar, :$stderr), :printf,
                s(:str, ". %.3f\n"),
                s(:lvar, :t)),
              s(:send,
                s(:gvar, :$stderr), :print,
                s(:str, ".")))),
          s(:begin,
            s(:send,
              s(:gvar, :$stderr), :print,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@failed)),
                s(:str, "F"))),
            s(:if,
              s(:ivar, :@verbose),
              s(:send,
                s(:gvar, :$stderr), :printf,
                s(:str, " %.3f"),
                s(:lvar, :t)), nil),
            s(:send,
              s(:gvar, :$stderr), :print,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@reset)))),
            s(:if,
              s(:ivar, :@verbose),
              s(:send,
                s(:gvar, :$stderr), :puts), nil),
            s(:send, nil, :error,
              s(:lvar, :faildesc),
              s(:lvar, :message)),
            s(:if,
              s(:send,
                s(:lvar, :errout), :empty?), nil,
              s(:send,
                s(:gvar, :$stderr), :print,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@failed)),
                  s(:str, "stderr output is not empty"),
                  s(:begin,
                    s(:ivar, :@reset)),
                  s(:str, "\n")),
                s(:send, nil, :adjust_indent,
                  s(:lvar, :errout)))),
            s(:if,
              s(:and,
                s(:ivar, :@tty),
                s(:send,
                  s(:ivar, :@verbose), :!)),
              s(:send,
                s(:gvar, :$stderr), :printf,
                s(:str, "%-*s%s"),
                s(:ivar, :@width),
                s(:ivar, :@basename),
                s(:send,
                  s(:ivar, :@progress), :[],
                  s(:send,
                    s(:ivar, :@count), :%,
                    s(:send,
                      s(:ivar, :@progress), :size)))), nil)))),
      s(:resbody,
        s(:array,
          s(:const, nil, :Interrupt)), nil,
        s(:send, nil, :raise,
          s(:const, nil, :Interrupt))),
      s(:resbody,
        s(:array,
          s(:const, nil, :Exception)),
        s(:lvasgn, :err),
        s(:begin,
          s(:send,
            s(:gvar, :$stderr), :print,
            s(:str, "E")),
          s(:if,
            s(:ivar, :@verbose),
            s(:send,
              s(:gvar, :$stderr), :puts), nil),
          s(:send, nil, :error,
            s(:send,
              s(:lvar, :err), :message),
            s(:lvar, :message)))), nil)),
  s(:def, :nacl?,
    s(:args),
    s(:and,
      s(:ivar, :@ruby),
      s(:send,
        s(:send,
          s(:const, nil, :File), :basename,
          s(:send,
            s(:send,
              s(:ivar, :@ruby), :split,
              s(:regexp,
                s(:str, "\\s"),
                s(:regopt))), :first)), :[],
        s(:str, "sel_ldr")))),
  s(:def, :assert_check,
    s(:args,
      s(:arg, :testsrc),
      s(:optarg, :message,
        s(:str, "")),
      s(:optarg, :opt,
        s(:str, ""))),
    s(:block,
      s(:send, nil, :show_progress,
        s(:lvar, :message)),
      s(:args),
      s(:begin,
        s(:lvasgn, :result,
          s(:send, nil, :get_result_string,
            s(:lvar, :testsrc),
            s(:lvar, :opt))),
        s(:send, nil, :check_coredump),
        s(:yield,
          s(:lvar, :result))))),
  s(:def, :assert_equal,
    s(:args,
      s(:arg, :expected),
      s(:arg, :testsrc),
      s(:optarg, :message,
        s(:str, ""))),
    s(:begin,
      s(:send, nil, :newtest),
      s(:block,
        s(:send, nil, :assert_check,
          s(:lvar, :testsrc),
          s(:lvar, :message)),
        s(:args,
          s(:arg, :result)),
        s(:if,
          s(:send,
            s(:lvar, :expected), :==,
            s(:lvar, :result)),
          s(:nil),
          s(:begin,
            s(:lvasgn, :desc,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :inspect)),
                s(:str, " (expected "),
                s(:begin,
                  s(:send,
                    s(:lvar, :expected), :inspect)),
                s(:str, ")"))),
            s(:send, nil, :pretty,
              s(:lvar, :testsrc),
              s(:lvar, :desc),
              s(:lvar, :result))))))),
  s(:def, :assert_match,
    s(:args,
      s(:arg, :expected_pattern),
      s(:arg, :testsrc),
      s(:optarg, :message,
        s(:str, ""))),
    s(:begin,
      s(:send, nil, :newtest),
      s(:block,
        s(:send, nil, :assert_check,
          s(:lvar, :testsrc),
          s(:lvar, :message)),
        s(:args,
          s(:arg, :result)),
        s(:if,
          s(:send,
            s(:lvar, :expected_pattern), :=~,
            s(:lvar, :result)),
          s(:nil),
          s(:begin,
            s(:lvasgn, :desc,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :expected_pattern), :inspect)),
                s(:str, " expected to be =~\n"),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :inspect)))),
            s(:send, nil, :pretty,
              s(:lvar, :testsrc),
              s(:lvar, :desc),
              s(:lvar, :result))))))),
  s(:def, :assert_not_match,
    s(:args,
      s(:arg, :unexpected_pattern),
      s(:arg, :testsrc),
      s(:optarg, :message,
        s(:str, ""))),
    s(:begin,
      s(:send, nil, :newtest),
      s(:block,
        s(:send, nil, :assert_check,
          s(:lvar, :testsrc),
          s(:lvar, :message)),
        s(:args,
          s(:arg, :result)),
        s(:if,
          s(:send,
            s(:lvar, :unexpected_pattern), :!~,
            s(:lvar, :result)),
          s(:nil),
          s(:begin,
            s(:lvasgn, :desc,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :unexpected_pattern), :inspect)),
                s(:str, " expected to be !~\n"),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :inspect)))),
            s(:send, nil, :pretty,
              s(:lvar, :testsrc),
              s(:lvar, :desc),
              s(:lvar, :result))))))),
  s(:def, :assert_valid_syntax,
    s(:args,
      s(:arg, :testsrc),
      s(:optarg, :message,
        s(:str, ""))),
    s(:begin,
      s(:send, nil, :newtest),
      s(:block,
        s(:send, nil, :assert_check,
          s(:lvar, :testsrc),
          s(:lvar, :message),
          s(:str, "-c")),
        s(:args,
          s(:arg, :result)),
        s(:if,
          s(:send,
            s(:regexp,
              s(:str, "Syntax OK"),
              s(:regopt)), :!~,
            s(:lvar, :result)),
          s(:lvar, :result), nil)))),
  s(:def, :assert_normal_exit,
    s(:args,
      s(:arg, :testsrc),
      s(:restarg, :rest)),
    s(:begin,
      s(:send, nil, :newtest),
      s(:lvasgn, :opt,
        s(:hash)),
      s(:if,
        s(:send,
          s(:const, nil, :Hash), :===,
          s(:send,
            s(:lvar, :rest), :last)),
        s(:lvasgn, :opt,
          s(:send,
            s(:lvar, :rest), :pop)), nil),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :message),
          s(:lvasgn, :ignore_signals)),
        s(:lvar, :rest)),
      s(:or_asgn,
        s(:lvasgn, :message),
        s(:str, "")),
      s(:lvasgn, :timeout,
        s(:send,
          s(:lvar, :opt), :[],
          s(:sym, :timeout))),
      s(:block,
        s(:send, nil, :show_progress,
          s(:lvar, :message)),
        s(:args),
        s(:begin,
          s(:lvasgn, :faildesc,
            s(:nil)),
          s(:lvasgn, :filename,
            s(:send, nil, :make_srcfile,
              s(:lvar, :testsrc))),
          s(:lvasgn, :old_stderr,
            s(:send,
              s(:gvar, :$stderr), :dup)),
          s(:lvasgn, :timeout_signaled,
            s(:false)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :reopen,
                  s(:str, "assert_normal_exit.log"),
                  s(:str, "w")),
                s(:lvasgn, :io,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@ruby)),
                      s(:str, " -W0 "),
                      s(:begin,
                        s(:lvar, :filename))))),
                s(:lvasgn, :pid,
                  s(:send,
                    s(:lvar, :io), :pid)),
                s(:lvasgn, :th,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Thread), :new),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :io), :read),
                      s(:send,
                        s(:lvar, :io), :close),
                      s(:gvar, :$?)))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :th), :join,
                      s(:lvar, :timeout)), :!),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Process), :kill,
                      s(:sym, :KILL),
                      s(:lvar, :pid)),
                    s(:lvasgn, :timeout_signaled,
                      s(:true))), nil),
                s(:lvasgn, :status,
                  s(:send,
                    s(:lvar, :th), :value))),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :reopen,
                  s(:lvar, :old_stderr)),
                s(:send,
                  s(:lvar, :old_stderr), :close)))),
          s(:if,
            s(:csend,
              s(:lvar, :status), :signaled?),
            s(:begin,
              s(:lvasgn, :signo,
                s(:send,
                  s(:lvar, :status), :termsig)),
              s(:lvasgn, :signame,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Signal), :list), :invert), :[],
                  s(:lvar, :signo))),
              s(:if,
                s(:and,
                  s(:lvar, :ignore_signals),
                  s(:send,
                    s(:lvar, :ignore_signals), :include?,
                    s(:lvar, :signame))), nil,
                s(:begin,
                  s(:lvasgn, :sigdesc,
                    s(:dstr,
                      s(:str, "signal "),
                      s(:begin,
                        s(:lvar, :signo)))),
                  s(:if,
                    s(:lvar, :signame),
                    s(:lvasgn, :sigdesc,
                      s(:dstr,
                        s(:str, "SIG"),
                        s(:begin,
                          s(:lvar, :signame)),
                        s(:str, " ("),
                        s(:begin,
                          s(:lvar, :sigdesc)),
                        s(:str, ")"))), nil),
                  s(:if,
                    s(:lvar, :timeout_signaled),
                    s(:send,
                      s(:lvar, :sigdesc), :<<,
                      s(:str, " (timeout)")), nil),
                  s(:lvasgn, :faildesc,
                    s(:send, nil, :pretty,
                      s(:lvar, :testsrc),
                      s(:dstr,
                        s(:str, "killed by "),
                        s(:begin,
                          s(:lvar, :sigdesc))),
                      s(:nil))),
                  s(:lvasgn, :stderr_log,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:str, "assert_normal_exit.log"))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :stderr_log), :empty?), :!),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:regexp,
                            s(:str, "\\n\\z"),
                            s(:regopt)), :!~,
                          s(:lvar, :faildesc)),
                        s(:send,
                          s(:lvar, :faildesc), :<<,
                          s(:str, "\n")), nil),
                      s(:if,
                        s(:send,
                          s(:regexp,
                            s(:str, "\\n\\z"),
                            s(:regopt)), :!~,
                          s(:lvar, :stderr_log)),
                        s(:send,
                          s(:lvar, :stderr_log), :<<,
                          s(:str, "\n")), nil),
                      s(:block,
                        s(:send,
                          s(:lvar, :stderr_log), :gsub!,
                          s(:regexp,
                            s(:str, "^.*\\n"),
                            s(:regopt))),
                        s(:args),
                        s(:send,
                          s(:str, "| "), :+,
                          s(:back_ref, :$&))),
                      s(:send,
                        s(:lvar, :faildesc), :<<,
                        s(:lvar, :stderr_log))), nil)))), nil),
          s(:lvar, :faildesc))))),
  s(:def, :assert_finish,
    s(:args,
      s(:arg, :timeout_seconds),
      s(:arg, :testsrc),
      s(:optarg, :message,
        s(:str, ""))),
    s(:begin,
      s(:send, nil, :newtest),
      s(:block,
        s(:send, nil, :show_progress,
          s(:lvar, :message)),
        s(:args),
        s(:begin,
          s(:lvasgn, :faildesc,
            s(:nil)),
          s(:lvasgn, :filename,
            s(:send, nil, :make_srcfile,
              s(:lvar, :testsrc))),
          s(:lvasgn, :io,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:dstr,
                s(:begin,
                  s(:ivar, :@ruby)),
                s(:str, " -W0 "),
                s(:begin,
                  s(:lvar, :filename))))),
          s(:lvasgn, :pid,
            s(:send,
              s(:lvar, :io), :pid)),
          s(:lvasgn, :waited,
            s(:false)),
          s(:lvasgn, :tlimit,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :+,
              s(:lvar, :timeout_seconds))),
          s(:while,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :<,
              s(:lvar, :tlimit)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Process), :waitpid,
                  s(:lvar, :pid),
                  s(:const,
                    s(:const, nil, :Process), :WNOHANG)),
                s(:begin,
                  s(:lvasgn, :waited,
                    s(:true)),
                  s(:break)), nil),
              s(:send, nil, :sleep,
                s(:float, 0.1)))),
          s(:if,
            s(:send,
              s(:lvar, :waited), :!),
            s(:begin,
              s(:send,
                s(:const, nil, :Process), :kill,
                s(:sym, :KILL),
                s(:lvar, :pid)),
              s(:send,
                s(:const, nil, :Process), :waitpid,
                s(:lvar, :pid)),
              s(:lvasgn, :faildesc,
                s(:send, nil, :pretty,
                  s(:lvar, :testsrc),
                  s(:dstr,
                    s(:str, "not finished in "),
                    s(:begin,
                      s(:lvar, :timeout_seconds)),
                    s(:str, " seconds")),
                  s(:nil)))), nil),
          s(:send,
            s(:lvar, :io), :close),
          s(:lvar, :faildesc))))),
  s(:def, :flunk,
    s(:args,
      s(:optarg, :message,
        s(:str, ""))),
    s(:begin,
      s(:send, nil, :newtest),
      s(:block,
        s(:send, nil, :show_progress,
          s(:str, "")),
        s(:args),
        s(:lvar, :message)))),
  s(:def, :pretty,
    s(:args,
      s(:arg, :src),
      s(:arg, :desc),
      s(:arg, :result)),
    s(:begin,
      s(:lvasgn, :src,
        s(:send,
          s(:lvar, :src), :sub,
          s(:regexp,
            s(:str, "\\A.*\\n"),
            s(:regopt)),
          s(:str, ""))),
      s(:send,
        s(:begin,
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\n"),
                s(:regopt)),
              s(:lvar, :src)),
            s(:dstr,
              s(:str, "\n"),
              s(:begin,
                s(:send, nil, :adjust_indent,
                  s(:lvar, :src)))),
            s(:lvar, :src))), :+,
        s(:dstr,
          s(:str, "  #=> "),
          s(:begin,
            s(:lvar, :desc)))))),
  s(:casgn, nil, :INDENT,
    s(:int, 27)),
  s(:def, :adjust_indent,
    s(:args,
      s(:arg, :src)),
    s(:send,
      s(:send,
        s(:send,
          s(:send, nil, :untabify,
            s(:lvar, :src)), :gsub,
          s(:regexp,
            s(:str, "^ {"),
            s(:begin,
              s(:const, nil, :INDENT)),
            s(:str, "}"),
            s(:regopt, :o)),
          s(:str, "")), :gsub,
        s(:regexp,
          s(:str, "^"),
          s(:regopt)),
        s(:str, "   ")), :sub,
      s(:regexp,
        s(:str, "\\s*\\z"),
        s(:regopt)),
      s(:str, "\n"))),
  s(:def, :untabify,
    s(:args,
      s(:arg, :str)),
    s(:block,
      s(:send,
        s(:lvar, :str), :gsub,
        s(:regexp,
          s(:str, "^\\t+"),
          s(:regopt))),
      s(:args),
      s(:send,
        s(:str, " "), :*,
        s(:begin,
          s(:send,
            s(:int, 8), :*,
            s(:send,
              s(:back_ref, :$&), :size)))))),
  s(:def, :make_srcfile,
    s(:args,
      s(:arg, :src)),
    s(:begin,
      s(:lvasgn, :filename,
        s(:str, "bootstraptest.tmp.rb")),
      s(:block,
        s(:send,
          s(:const, nil, :File), :open,
          s(:lvar, :filename),
          s(:str, "w")),
        s(:args,
          s(:arg, :f)),
        s(:begin,
          s(:if,
            s(:gvar, :$stress),
            s(:send,
              s(:lvar, :f), :puts,
              s(:str, "GC.stress = true")), nil),
          s(:send,
            s(:lvar, :f), :puts,
            s(:dstr,
              s(:str, "print(begin; "),
              s(:begin,
                s(:lvar, :src)),
              s(:str, "; end)"))))),
      s(:lvar, :filename))),
  s(:def, :get_result_string,
    s(:args,
      s(:arg, :src),
      s(:optarg, :opt,
        s(:str, ""))),
    s(:if,
      s(:ivar, :@ruby),
      s(:begin,
        s(:lvasgn, :filename,
          s(:send, nil, :make_srcfile,
            s(:lvar, :src))),
        s(:kwbegin,
          s(:ensure,
            s(:xstr,
              s(:begin,
                s(:ivar, :@ruby)),
              s(:str, " -W0 "),
              s(:begin,
                s(:lvar, :opt)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :filename))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:gvar, :$?),
                  s(:and,
                    s(:send,
                      s(:gvar, :$?), :signaled?),
                    s(:send,
                      s(:send,
                        s(:gvar, :$?), :termsig), :==,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Signal), :list), :[],
                        s(:str, "INT"))))),
                s(:send, nil, :raise,
                  s(:const, nil, :Interrupt)), nil),
              s(:if,
                s(:and,
                  s(:gvar, :$?),
                  s(:send,
                    s(:gvar, :$?), :coredump?)),
                s(:send, nil, :raise,
                  s(:const, nil, :CoreDumpError),
                  s(:str, "core dumped")), nil))))),
      s(:send,
        s(:send, nil, :eval,
          s(:lvar, :src)), :to_s))),
  s(:def, :with_stderr,
    s(:args),
    s(:begin,
      s(:lvasgn, :out,
        s(:lvasgn, :err,
          s(:nil))),
      s(:kwbegin,
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :r),
                s(:lvasgn, :w)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:lvasgn, :stderr,
              s(:send,
                s(:gvar, :$stderr), :dup)),
            s(:send,
              s(:gvar, :$stderr), :reopen,
              s(:lvar, :w)),
            s(:send,
              s(:lvar, :w), :close),
            s(:lvasgn, :reader,
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :start),
                s(:args),
                s(:send,
                  s(:lvar, :r), :read))),
            s(:kwbegin,
              s(:ensure,
                s(:lvasgn, :out,
                  s(:yield)),
                s(:begin,
                  s(:send,
                    s(:gvar, :$stderr), :reopen,
                    s(:lvar, :stderr)),
                  s(:lvasgn, :err,
                    s(:send,
                      s(:lvar, :reader), :value)))))),
          s(:begin,
            s(:rescue,
              s(:send,
                s(:lvar, :w), :close),
              s(:resbody, nil, nil,
                s(:nil)), nil),
            s(:rescue,
              s(:send,
                s(:lvar, :r), :close),
              s(:resbody, nil, nil,
                s(:nil)), nil)))),
      s(:return,
        s(:lvar, :out),
        s(:lvar, :err)))),
  s(:def, :newtest,
    s(:args),
    s(:begin,
      s(:ivasgn, :@location,
        s(:send,
          s(:const, nil, :File), :basename,
          s(:send,
            s(:send, nil, :caller,
              s(:int, 2)), :first))),
      s(:op_asgn,
        s(:ivasgn, :@count), :+,
        s(:int, 1)),
      s(:send, nil, :cleanup_coredump))),
  s(:def, :error,
    s(:args,
      s(:arg, :msg),
      s(:arg, :additional_message)),
    s(:begin,
      s(:lvasgn, :msg,
        s(:dstr,
          s(:begin,
            s(:ivar, :@failed)),
          s(:str, "#"),
          s(:begin,
            s(:ivar, :@count)),
          s(:str, " "),
          s(:begin,
            s(:ivar, :@location)),
          s(:begin,
            s(:ivar, :@reset)),
          s(:str, ": "),
          s(:begin,
            s(:lvar, :msg)),
          s(:str, "  "),
          s(:begin,
            s(:lvar, :additional_message)))),
      s(:if,
        s(:ivar, :@tty),
        s(:send,
          s(:gvar, :$stderr), :puts,
          s(:dstr,
            s(:begin,
              s(:send, nil, :erase)),
            s(:begin,
              s(:lvar, :msg)))),
        s(:send,
          s(:ivar, :@errbuf), :push,
          s(:lvar, :msg))),
      s(:op_asgn,
        s(:ivasgn, :@error), :+,
        s(:int, 1)))),
  s(:def, :in_temporary_working_directory,
    s(:args,
      s(:arg, :dir)),
    s(:if,
      s(:lvar, :dir),
      s(:begin,
        s(:send,
          s(:const, nil, :Dir), :mkdir,
          s(:lvar, :dir)),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :dir)),
          s(:args),
          s(:yield))),
      s(:block,
        s(:send,
          s(:const, nil, :Dir), :mktmpdir,
          s(:array,
            s(:str, "bootstraptest"),
            s(:str, ".tmpwd"))),
        s(:args,
          s(:arg, :d)),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :d)),
          s(:args),
          s(:yield))))),
  s(:def, :cleanup_coredump,
    s(:args),
    s(:begin,
      s(:send,
        s(:const, nil, :FileUtils), :rm_f,
        s(:str, "core")),
      s(:send,
        s(:const, nil, :FileUtils), :rm_f,
        s(:send,
          s(:const, nil, :Dir), :glob,
          s(:str, "core.*"))),
      s(:if,
        s(:ivar, :@ruby),
        s(:send,
          s(:const, nil, :FileUtils), :rm_f,
          s(:send,
            s(:ivar, :@ruby), :+,
            s(:str, ".stackdump"))), nil))),
  s(:class,
    s(:const, nil, :CoreDumpError),
    s(:const, nil, :StandardError), nil),
  s(:def, :check_coredump,
    s(:args),
    s(:if,
      s(:or,
        s(:or,
          s(:send,
            s(:const, nil, :File), :file?,
            s(:str, "core")),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:str, "core.*")), :empty?), :!)),
        s(:begin,
          s(:and,
            s(:ivar, :@ruby),
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send,
                s(:ivar, :@ruby), :+,
                s(:str, ".stackdump")))))),
      s(:send, nil, :raise,
        s(:const, nil, :CoreDumpError),
        s(:str, "core dumped")), nil)),
  s(:send, nil, :main))
