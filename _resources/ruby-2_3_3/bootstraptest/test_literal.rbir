s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, "")),
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, " ")),
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, "\n")),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:str, "true")),
  s(:send, nil, :assert_equal,
    s(:str, "TrueClass"),
    s(:str, "true.class")),
  s(:send, nil, :assert_equal,
    s(:str, "false"),
    s(:str, "false")),
  s(:send, nil, :assert_equal,
    s(:str, "FalseClass"),
    s(:str, "false.class")),
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, "nil")),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:str, "nil.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "NilClass"),
    s(:str, "nil.class")),
  s(:send, nil, :assert_equal,
    s(:str, "sym"),
    s(:str, ":sym")),
  s(:send, nil, :assert_equal,
    s(:str, ":sym"),
    s(:str, ":sym.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Symbol"),
    s(:str, ":sym.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1234"),
    s(:str, "1234")),
  s(:send, nil, :assert_equal,
    s(:str, "Fixnum"),
    s(:str, "1234.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1234"),
    s(:str, "1_2_3_4")),
  s(:send, nil, :assert_equal,
    s(:str, "Fixnum"),
    s(:str, "1_2_3_4.class")),
  s(:send, nil, :assert_equal,
    s(:str, "18"),
    s(:str, "0x12")),
  s(:send, nil, :assert_equal,
    s(:str, "Fixnum"),
    s(:str, "0x12.class")),
  s(:send, nil, :assert_equal,
    s(:str, "15"),
    s(:str, "0o17")),
  s(:send, nil, :assert_equal,
    s(:str, "Fixnum"),
    s(:str, "0o17.class")),
  s(:send, nil, :assert_equal,
    s(:str, "5"),
    s(:str, "0b101")),
  s(:send, nil, :assert_equal,
    s(:str, "Fixnum"),
    s(:str, "0b101.class")),
  s(:send, nil, :assert_equal,
    s(:str, "123456789012345678901234567890"),
    s(:str, "123456789012345678901234567890")),
  s(:send, nil, :assert_equal,
    s(:str, "Bignum"),
    s(:str, "123456789012345678901234567890.class")),
  s(:send, nil, :assert_equal,
    s(:str, "2.0"),
    s(:str, "2.0")),
  s(:send, nil, :assert_equal,
    s(:str, "Float"),
    s(:str, "1.3.class")),
  s(:send, nil, :assert_equal,
    s(:str, "main"),
    s(:str, "self")),
  s(:send, nil, :assert_equal,
    s(:str, "Object"),
    s(:str, "self.class")),
  s(:send, nil, :assert_equal,
    s(:str, "a"),
    s(:str, "?a")),
  s(:send, nil, :assert_equal,
    s(:str, "String"),
    s(:str, "?a.class")),
  s(:send, nil, :assert_equal,
    s(:str, "A"),
    s(:str, "?A")),
  s(:send, nil, :assert_equal,
    s(:str, "String"),
    s(:str, "?A.class")),
  s(:send, nil, :assert_equal,
    s(:str, "\n"),
    s(:str, "?\\n")),
  s(:send, nil, :assert_equal,
    s(:str, "String"),
    s(:str, "?\\n.class")),
  s(:send, nil, :assert_equal,
    s(:str, " "),
    s(:str, "?\\ ")),
  s(:send, nil, :assert_equal,
    s(:str, "String"),
    s(:str, "?\\ .class")),
  s(:send, nil, :assert_equal,
    s(:str, "string"),
    s(:str, "'string'")),
  s(:send, nil, :assert_equal,
    s(:str, "string"),
    s(:str, "\"string\"")),
  s(:send, nil, :assert_equal,
    s(:str, "string"),
    s(:str, "%(string)")),
  s(:send, nil, :assert_equal,
    s(:str, "string"),
    s(:str, "%q(string)")),
  s(:send, nil, :assert_equal,
    s(:str, "string"),
    s(:str, "%Q(string)")),
  s(:send, nil, :assert_equal,
    s(:str, "string string"),
    s(:str, "\"string string\"")),
  s(:send, nil, :assert_equal,
    s(:str, " "),
    s(:str, "\" \"")),
  s(:send, nil, :assert_equal,
    s(:str, "\u0000"),
    s(:str, "\"\\0\"")),
  s(:send, nil, :assert_equal,
    s(:str, "\u0001"),
    s(:str, "\"\\1\"")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "\"\\x33\"")),
  s(:send, nil, :assert_equal,
    s(:str, "\n"),
    s(:str, "\"\\n\"")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "\"\#{1 + 1}\"")),
  s(:send, nil, :assert_equal,
    s(:str, "16"),
    s(:str, "\"\#{2 ** 4}\"")),
  s(:send, nil, :assert_equal,
    s(:str, "string"),
    s(:str, "s = \"string\"; \"\#{s}\"")),
  s(:send, nil, :assert_equal,
    s(:str, "a3c"),
    s(:str, ":\"a\#{1+2}c\"")),
  s(:send, nil, :assert_equal,
    s(:str, ":a3c"),
    s(:str, ":\"a\#{1+2}c\".inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Symbol"),
    s(:str, ":\"a\#{1+2}c\".class")),
  s(:if,
    s(:send, nil, :nacl?), nil,
    s(:begin,
      s(:send, nil, :assert_equal,
        s(:str, "foo\n"),
        s(:str, "`echo foo`")),
      s(:send, nil, :assert_equal,
        s(:str, "foo\n"),
        s(:str, "s = \"foo\"; `echo \#{s}`")))),
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, "//.source")),
  s(:send, nil, :assert_equal,
    s(:str, "Regexp"),
    s(:str, "//.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "// =~ \"a\"")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "// =~ \"\"")),
  s(:send, nil, :assert_equal,
    s(:str, "a"),
    s(:str, "/a/.source")),
  s(:send, nil, :assert_equal,
    s(:str, "Regexp"),
    s(:str, "/a/.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "/a/ =~ \"a\"")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "/test/ =~ \"test\"")),
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, "/test/ =~ \"tes\"")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "re = /test/; re =~ \"test\"")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "str = \"test\"; /test/ =~ str")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "re = /test/; str = \"test\"; re =~ str")),
  s(:send, nil, :assert_equal,
    s(:str, "regexp"),
    s(:str, "/re\#{'ge'}xp/.source")),
  s(:send, nil, :assert_equal,
    s(:str, "Regexp"),
    s(:str, "/re\#{'ge'}xp/.class")),
  s(:send, nil, :assert_equal,
    s(:str, "Array"),
    s(:str, "[].class")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "[].size")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "[].length")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "[].inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Array"),
    s(:str, "[0].class")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "[3].size")),
  s(:send, nil, :assert_equal,
    s(:str, "[3]"),
    s(:str, "[3].inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "a = [3]; a[0]")),
  s(:send, nil, :assert_equal,
    s(:str, "Array"),
    s(:str, "[1,2].class")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "[1,2].size")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "[1,2].inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Array"),
    s(:str, "[1,2,3,4,5].class")),
  s(:send, nil, :assert_equal,
    s(:str, "5"),
    s(:str, "[1,2,3,4,5].size")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5]"),
    s(:str, "[1,2,3,4,5].inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "a = [1,2]; a[0]")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "a = [1,2]; a[1]")),
  s(:send, nil, :assert_equal,
    s(:str, "Array"),
    s(:str, "a = [1 + 2, 3 + 4, 5 + 6]; a.class")),
  s(:send, nil, :assert_equal,
    s(:str, "[3, 7, 11]"),
    s(:str, "a = [1 + 2, 3 + 4, 5 + 6]; a.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "7"),
    s(:str, "a = [1 + 2, 3 + 4, 5 + 6]; a[1]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "([0][0] += 1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "([2][0] -= 1)")),
  s(:send, nil, :assert_equal,
    s(:str, "Array"),
    s(:str, "a = [obj = Object.new]; a.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "a = [obj = Object.new]; a.size")),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:str, "a = [obj = Object.new]; a[0] == obj")),
  s(:send, nil, :assert_equal,
    s(:str, "5"),
    s(:str, "a = [1,2,3]; a[1] = 5; a[1]")),
  s(:send, nil, :assert_equal,
    s(:str, "bar"),
    s(:str, "[*:foo];:bar")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "def nil.to_a; [2]; end; [1, *nil]")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "def nil.to_a; [1, 2]; end; [*nil]")),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, {2=>3}]"),
    s(:str, "[0, *[1], 2=>3]"),
    s(:str, "[ruby-dev:31592]")),
  s(:send, nil, :assert_equal,
    s(:str, "Hash"),
    s(:str, "{}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "{}"),
    s(:str, "{}.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Hash"),
    s(:str, "{1=>2}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "{1=>2}"),
    s(:str, "{1=>2}.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "h = {1 => 2}; h[1]")),
  s(:send, nil, :assert_equal,
    s(:str, "0"),
    s(:str, "h = {1 => 2}; h.delete(1); h.size")),
  s(:send, nil, :assert_equal,
    s(:str, ""),
    s(:str, "h = {1 => 2}; h.delete(1); h[1]")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "h = {\"string\" => \"literal\", \"goto\" => \"hell\"}; h.size")),
  s(:send, nil, :assert_equal,
    s(:str, "literal"),
    s(:str, "h = {\"string\"=>\"literal\", \"goto\"=>\"hell\"}; h[\"string\"]")),
  s(:send, nil, :assert_equal,
    s(:str, "hell"),
    s(:str, "h = {\"string\"=>\"literal\", \"goto\"=>\"hell\"}; h[\"goto\"]")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "(1..2).class")),
  s(:send, nil, :assert_equal,
    s(:str, "1..2"),
    s(:str, "(1..2).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "(1..2).begin")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "(1..2).end")),
  s(:send, nil, :assert_equal,
    s(:str, "false"),
    s(:str, "(1..2).exclude_end?")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "r = 1..2; r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1..2"),
    s(:str, "r = 1..2; r.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "r = 1..2; r.begin")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "r = 1..2; r.end")),
  s(:send, nil, :assert_equal,
    s(:str, "false"),
    s(:str, "r = 1..2; r.exclude_end?")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "(1...3).class")),
  s(:send, nil, :assert_equal,
    s(:str, "1...3"),
    s(:str, "(1...3).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "(1...3).begin")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "(1...3).end")),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:str, "(1...3).exclude_end?")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "r = (1...3); r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1...3"),
    s(:str, "r = (1...3); r.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "r = (1...3); r.begin")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "r = (1...3); r.end")),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:str, "r = (1...3); r.exclude_end?")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "r = (1+2 .. 3+4); r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "3..7"),
    s(:str, "r = (1+2 .. 3+4); r.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "r = (1+2 .. 3+4); r.begin")),
  s(:send, nil, :assert_equal,
    s(:str, "7"),
    s(:str, "r = (1+2 .. 3+4); r.end")),
  s(:send, nil, :assert_equal,
    s(:str, "false"),
    s(:str, "r = (1+2 .. 3+4); r.exclude_end?")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "r = (1+2 ... 3+4); r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "3...7"),
    s(:str, "r = (1+2 ... 3+4); r.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "r = (1+2 ... 3+4); r.begin")),
  s(:send, nil, :assert_equal,
    s(:str, "7"),
    s(:str, "r = (1+2 ... 3+4); r.end")),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:str, "r = (1+2 ... 3+4); r.exclude_end?")),
  s(:send, nil, :assert_equal,
    s(:str, "Range"),
    s(:str, "r = (\"a\"..\"c\"); r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "\"a\"..\"c\""),
    s(:str, "r = (\"a\"..\"c\"); r.inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "a"),
    s(:str, "r = (\"a\"..\"c\"); r.begin")),
  s(:send, nil, :assert_equal,
    s(:str, "c"),
    s(:str, "r = (\"a\"..\"c\"); r.end")),
  s(:send, nil, :assert_equal,
    s(:str, "String"),
    s(:str, "__FILE__.class")),
  s(:send, nil, :assert_equal,
    s(:str, "Fixnum"),
    s(:str, "__LINE__.class")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  # this cause \"called on terminated object\".\n"),
      s(:str, "  ObjectSpace.each_object(Module) {|m| m.name.inspect }\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    r = 0**-1\n"),
      s(:str, "    r + r\n"),
      s(:str, "  rescue\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-dev:34524]")),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    r = Marshal.load(\"\\x04\\bU:\\rRational[\\ai\\x06i\\x05\")\n"),
      s(:str, "    r + r\n"),
      s(:str, "  rescue\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-dev:34536]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  \"\#{}\"\"\#{}ok\"\n")),
    s(:str, "[ruby-dev:38968]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  \"\#{}o\"\"\#{}k\"\"\#{}\"\n")),
    s(:str, "[ruby-core:25284]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, " #  long array literal\n"),
      s(:str, "  x = nil\n"),
      s(:str, "  eval \"a = [\#{(1..10_000).map{'x'}.join(\", \")}]\"\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, " #  long array literal (optimized)\n"),
      s(:str, "  eval \"a = [\#{(1..10_000).to_a.join(\", \")}]\"\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, " #  long hash literal\n"),
      s(:str, "  x = nil\n"),
      s(:str, "  eval \"a = {\#{(1..10_000).map{|n| \"\#{n} => x\"}.join(', ')}}\"\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, " #  long hash literal (optimized)\n"),
      s(:str, "  eval \"a = {\#{(1..10_000).map{|n| \"\#{n} => \#{n}\"}.join(', ')}}\"\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  [print(:ok), exit] # void literal with side-effect\n"),
      s(:str, "  :dummy\n"))))
