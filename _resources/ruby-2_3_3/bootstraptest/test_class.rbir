s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            Object.const_defined?(:C) "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            C.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            C.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            C.new.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            C.new.class.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            C.new.class.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:dstr,
      s(:str, " Object.__send__(:remove_const, :TrueClass)\n"),
      s(:str, "                            GC.start\n"),
      s(:str, "                            true.inspect"))),
  s(:send, nil, :assert_equal,
    s(:str, "false"),
    s(:dstr,
      s(:str, " Object.__send__(:remove_const, :FalseClass)\n"),
      s(:str, "                            GC.start\n"),
      s(:str, "                            false.inspect"))),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:dstr,
      s(:str, " Object.__send__(:remove_const, :NilClass)\n"),
      s(:str, "                            GC.start\n"),
      s(:str, "                            nil.inspect"))),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class C < A; end\n"),
      s(:str, "                            Object.const_defined?(:C) "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class C < A; end\n"),
      s(:str, "                            C.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class C < A; end\n"),
      s(:str, "                            C.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class C < A; end\n"),
      s(:str, "                            C.new.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class C < A; end\n"),
      s(:str, "                            C.new.class.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class C < A; end\n"),
      s(:str, "                            C.new.class.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:dstr,
      s(:str, " module M; end\n"),
      s(:str, "                            Object.const_defined?(:M) "))),
  s(:send, nil, :assert_equal,
    s(:str, "Module"),
    s(:dstr,
      s(:str, " module M; end\n"),
      s(:str, "                            M.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "M"),
    s(:dstr,
      s(:str, " module M; end\n"),
      s(:str, "                            M.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:dstr,
      s(:str, " module M; end\n"),
      s(:str, "                            class C; include M; end\n"),
      s(:str, "                            C.new.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            A::B "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            A::B.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            A::B.new.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            A::B.new.class.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B::C"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B::C; end\n"),
      s(:str, "                            A::B::C "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B::C"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B::C; end\n"),
      s(:str, "                            A::B::C.name "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B::C; end\n"),
      s(:str, "                            A::B::C.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B::C"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B::C; end\n"),
      s(:str, "                            A::B::C.new.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B::C; end\n"),
      s(:str, "                            A::B::C.new.class.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "A::B2"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B2 < A::B; end\n"),
      s(:str, "                            A::B2 "))),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:dstr,
      s(:str, " class A; end\n"),
      s(:str, "                            class A::B; end\n"),
      s(:str, "                            class A::B2 < A::B; end\n"),
      s(:str, "                            A::B2.class "))),
  s(:send, nil, :assert_equal,
    s(:str, "true"),
    s(:dstr,
      s(:str, " class C; end;  c1 = ::C\n"),
      s(:str, "                            class C; end;  c2 = ::C\n"),
      s(:str, "                            c1.equal?(c2) "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            class A; end\n"),
      s(:str, "                            begin class C < A; end; rescue TypeError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; end\n"),
      s(:str, "                            begin module C; end; rescue TypeError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " C = 1   # [yarv-dev:782]\n"),
      s(:str, "                            begin class C; end; rescue TypeError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " C = 1   # [yarv-dev:800]\n"),
      s(:str, "                            begin module C; end; rescue TypeError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, " class A; end;  A::C = 1;  A::C ")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, " A = 7;  begin A::C = 7; rescue TypeError; 1 end ")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, " begin 7::C = 7; rescue TypeError; 1 end ")),
  s(:send, nil, :assert_equal,
    s(:str, "C"),
    s(:str, " class A; class ::C; end end;  C ")),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:str, " class A; class ::C; end end;  C.class ")),
  s(:send, nil, :assert_equal,
    s(:str, "OK"),
    s(:str, " class A; ::C = \"OK\"; end;  C ")),
  s(:send, nil, :assert_equal,
    s(:str, "String"),
    s(:str, " class A; ::C = \"OK\"; end;  C.class ")),
  s(:send, nil, :assert_equal,
    s(:str, "Class"),
    s(:str, " class C; end;  C.dup.class ")),
  s(:send, nil, :assert_equal,
    s(:str, "Module"),
    s(:str, " module M; end;  M.dup.class ")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  module Foo\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    def foo(&b)\n"),
      s(:str, "      Foo.module_eval &b\n"),
      s(:str, "    end\n"),
      s(:str, "    foo{\n"),
      s(:str, "      def bar\n"),
      s(:str, "      end\n"),
      s(:str, "    }\n"),
      s(:str, "    bar()\n"),
      s(:str, "  rescue NameError\n"),
      s(:str, "    :ok\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-core:14378]")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $i = 0\n"),
      s(:str, "  class C\n"),
      s(:str, "    def self.const_missing *args\n"),
      s(:str, "      $i+=1\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  3.times{\n"),
      s(:str, "    C::FOO\n"),
      s(:str, "  }\n"),
      s(:str, "  $i\n"))),
  s(:send, nil, :assert_match,
    s(:regexp,
      s(:str, "::C\\z"),
      s(:regopt)),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  c = nil\n"),
      s(:str, "  Module.new{|m| c = class m::C; name; end}\n"),
      s(:str, "  c\n")),
    s(:str, "[ruby-dev:38456]")),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  s = Symbol.dup\n"),
      s(:str, "  class << s\n"),
      s(:str, "  end\n"),
      s(:str, "  s.allocate.to_s\n")),
    s(:str, "[ruby-core:30843]")))
