s(:begin,
  s(:send, nil, :assert_finish,
    s(:int, 5),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  r, w = IO.pipe\n"),
      s(:str, "  t1 = Thread.new { r.sysread(1) }\n"),
      s(:str, "  t2 = Thread.new { r.sysread(1) }\n"),
      s(:str, "  sleep 0.01 until t1.stop? and t2.stop?\n"),
      s(:str, "  w.write \"a\"\n"),
      s(:str, "  w.write \"a\"\n")),
    s(:str, "[ruby-dev:31866]")),
  s(:send, nil, :assert_finish,
    s(:int, 10),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    require \"io/nonblock\"\n"),
      s(:str, "    require \"timeout\"\n"),
      s(:str, "    timeout(3) do\n"),
      s(:str, "      r, w = IO.pipe\n"),
      s(:str, "      w.nonblock?\n"),
      s(:str, "      w.nonblock = true\n"),
      s(:str, "      w.write_nonblock(\"a\" * 100000)\n"),
      s(:str, "      w.nonblock = false\n"),
      s(:str, "      t1 = Thread.new { w.write(\"b\" * 4096) }\n"),
      s(:str, "      t2 = Thread.new { w.write(\"c\" * 4096) }\n"),
      s(:str, "      sleep 0.5\n"),
      s(:str, "      r.sysread(4096).length\n"),
      s(:str, "      sleep 0.5\n"),
      s(:str, "      r.sysread(4096).length\n"),
      s(:str, "      t1.join\n"),
      s(:str, "      t2.join\n"),
      s(:str, "    end\n"),
      s(:str, "  rescue LoadError, Timeout::Error, NotImplementedError\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-dev:32566]")),
  s(:send, nil, :assert_finish,
    s(:int, 1),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  r, w = IO.pipe\n"),
      s(:str, "  Thread.new {\n"),
      s(:str, "    w << \"ab\"\n"),
      s(:str, "    sleep 0.01\n"),
      s(:str, "    w << \"ab\"\n"),
      s(:str, "  }\n"),
      s(:str, "  r.gets(\"abab\")\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  require 'tmpdir'\n"),
      s(:str, "  begin\n"),
      s(:str, "    tmpname = \"\#{Dir.tmpdir}/ruby-btest-\#{$$}-\#{rand(0x100000000).to_s(36)}\"\n"),
      s(:str, "    rw = File.open(tmpname, File::RDWR|File::CREAT|File::EXCL)\n"),
      s(:str, "  rescue Errno::EEXIST\n"),
      s(:str, "    retry\n"),
      s(:str, "  end\n"),
      s(:str, "  save = STDIN.dup\n"),
      s(:str, "  STDIN.reopen(rw)\n"),
      s(:str, "  STDIN.reopen(save)\n"),
      s(:str, "  rw.close\n"),
      s(:str, "  File.unlink(tmpname) unless RUBY_PLATFORM['nacl']\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  require 'tmpdir'\n"),
      s(:str, "  begin\n"),
      s(:str, "    tmpname = \"\#{Dir.tmpdir}/ruby-btest-\#{$$}-\#{rand(0x100000000).to_s(36)}\"\n"),
      s(:str, "    rw = File.open(tmpname, File::RDWR|File::CREAT|File::EXCL)\n"),
      s(:str, "  rescue Errno::EEXIST\n"),
      s(:str, "    retry\n"),
      s(:str, "  end\n"),
      s(:str, "  save = STDIN.dup\n"),
      s(:str, "  STDIN.reopen(rw)\n"),
      s(:str, "  STDIN.print \"a\"\n"),
      s(:str, "  STDIN.reopen(save)\n"),
      s(:str, "  rw.close\n"),
      s(:str, "  File.unlink(tmpname) unless RUBY_PLATFORM['nacl']\n"),
      s(:str, "  :ok\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  dup = STDIN.dup\n"),
      s(:str, "  dupfd = dup.fileno\n"),
      s(:str, "  dupfd == STDIN.dup.fileno ? :ng : :ok\n")),
    s(:str, "[ruby-dev:46834]")),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  ARGF.set_encoding \"foo\"\n"))),
  s(:block,
    s(:send,
      s(:int, 10), :times),
    s(:args),
    s(:or,
      s(:send, nil, :assert_normal_exit,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "    at_exit { p :foo }\n"),
          s(:str, "\n"),
          s(:str, "    megacontent = \"abc\" * 12345678\n"),
          s(:str, "    #File.open(\"megasrc\", \"w\") {|f| f << megacontent }\n"),
          s(:str, "\n"),
          s(:str, "    t0 = Thread.main\n"),
          s(:str, "    Thread.new { sleep 0.001 until t0.stop?; Process.kill(:INT, $$) }\n"),
          s(:str, "\n"),
          s(:str, "    r1, w1 = IO.pipe\n"),
          s(:str, "    r2, w2 = IO.pipe\n"),
          s(:str, "    t1 = Thread.new { w1 << megacontent; w1.close }\n"),
          s(:str, "    t2 = Thread.new { r2.read; r2.close }\n"),
          s(:str, "    IO.copy_stream(r1, w2) rescue nil\n"),
          s(:str, "    w2.close\n"),
          s(:str, "    r1.close\n"),
          s(:str, "    t1.join\n"),
          s(:str, "    t2.join\n"),
          s(:str, "  ")),
        s(:str, "megacontent-copy_stream"),
        s(:array,
          s(:str, "INT")),
        s(:hash,
          s(:pair,
            s(:sym, :timeout),
            s(:int, 10)))),
      s(:break))),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  r, w = IO.pipe\n"),
      s(:str, "  STDOUT.reopen(w)\n"),
      s(:str, "  STDOUT.reopen(__FILE__, \"r\")\n")),
    s(:str, "[ruby-dev:38131]")))
