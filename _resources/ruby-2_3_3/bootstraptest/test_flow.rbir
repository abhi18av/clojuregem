s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 4, 5, 6, 7, 8]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each{; $a << 2\n"),
      s(:str, "    break; $a << 3\n"),
      s(:str, "  }; $a << 4\n"),
      s(:str, "  begin; $a << 5\n"),
      s(:str, "  ensure; $a << 6\n"),
      s(:str, "  end; $a << 7\n"),
      s(:str, "; $a << 8\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 6, 7, 8]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  begin; $a << 2\n"),
      s(:str, "    [1,2].each do; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    end; $a << 5\n"),
      s(:str, "  ensure; $a << 6\n"),
      s(:str, "  end; $a << 7\n"),
      s(:str, "; $a << 8\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  [\"a\"].inject(\"ng\"){|x,y|\n"),
      s(:str, "    break :ok\n"),
      s(:str, "  }\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  unless ''.respond_to? :lines\n"),
      s(:str, "    class String\n"),
      s(:str, "      def lines\n"),
      s(:str, "        self\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  ('a').lines.map{|e|\n"),
      s(:str, "    break :ok\n"),
      s(:str, "  }\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 4, 5]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  [\"a\"].inject(\"ng\"){|x,y|; $a << 2\n"),
      s(:str, "    break :ok; $a << 3\n"),
      s(:str, "  }; $a << 4\n"),
      s(:str, "; $a << 5\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 4, 5]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  ('a'..'b').map{|e|; $a << 2\n"),
      s(:str, "    break :ok; $a << 3\n"),
      s(:str, "  }; $a << 4\n"),
      s(:str, "; $a << 5\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 7, 8]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each do; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "    end; $a << 6\n"),
      s(:str, "  end; $a << 7\n"),
      s(:str, "; $a << 8\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 6, 9, 10]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i=0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    begin; $a << 5\n"),
      s(:str, "    ensure; $a << 6\n"),
      s(:str, "      break; $a << 7\n"),
      s(:str, "    end; $a << 8\n"),
      s(:str, "  end; $a << 9\n"),
      s(:str, "; $a << 10\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 7, 10, 11]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i=0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    begin; $a << 5\n"),
      s(:str, "      raise; $a << 6\n"),
      s(:str, "    ensure; $a << 7\n"),
      s(:str, "      break; $a << 8\n"),
      s(:str, "    end; $a << 9\n"),
      s(:str, "  end; $a << 10\n"),
      s(:str, "; $a << 11\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 7, 10, 11]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i=0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    begin; $a << 5\n"),
      s(:str, "      raise; $a << 6\n"),
      s(:str, "    rescue; $a << 7\n"),
      s(:str, "      break; $a << 8\n"),
      s(:str, "    end; $a << 9\n"),
      s(:str, "  end; $a << 10\n"),
      s(:str, "; $a << 11\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each do; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      raise StandardError; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "      break; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each do; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      raise StandardError; $a << 4\n"),
      s(:str, "    rescue; $a << 5\n"),
      s(:str, "      break; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 6, 8, 10, 11]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each do; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      begin; $a << 4\n"),
      s(:str, "        break; $a << 5\n"),
      s(:str, "      ensure; $a << 6\n"),
      s(:str, "      end; $a << 7\n"),
      s(:str, "    ensure; $a << 8\n"),
      s(:str, "    end; $a << 9\n"),
      s(:str, "  end; $a << 10\n"),
      s(:str, "; $a << 11\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i = 0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    j = 0; $a << 5\n"),
      s(:str, "    while j<3; $a << 6\n"),
      s(:str, "      j+=1; $a << 7\n"),
      s(:str, "      begin; $a << 8\n"),
      s(:str, "        raise; $a << 9\n"),
      s(:str, "      rescue; $a << 10\n"),
      s(:str, "        break; $a << 11\n"),
      s(:str, "      end; $a << 12\n"),
      s(:str, "    end; $a << 13\n"),
      s(:str, "  end; $a << 14\n"),
      s(:str, "; $a << 15\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 16, 17]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i = 0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    j = 0; $a << 5\n"),
      s(:str, "    while j<3; $a << 6\n"),
      s(:str, "      j+=1; $a << 7\n"),
      s(:str, "      1.times{; $a << 8\n"),
      s(:str, "        begin; $a << 9\n"),
      s(:str, "          raise; $a << 10\n"),
      s(:str, "        rescue; $a << 11\n"),
      s(:str, "          break; $a << 12\n"),
      s(:str, "        end; $a << 13\n"),
      s(:str, "      }; $a << 14\n"),
      s(:str, "    end; $a << 15\n"),
      s(:str, "  end; $a << 16\n"),
      s(:str, "; $a << 17\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 3, 4, 5, 6, 7, 8, 10, 13, 14, 15]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i = 0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    j = 0; $a << 5\n"),
      s(:str, "    while j<3; $a << 6\n"),
      s(:str, "      j+=1; $a << 7\n"),
      s(:str, "      begin; $a << 8\n"),
      s(:str, "        raise; $a << 9\n"),
      s(:str, "      ensure; $a << 10\n"),
      s(:str, "        break; $a << 11\n"),
      s(:str, "      end; $a << 12\n"),
      s(:str, "    end; $a << 13\n"),
      s(:str, "  end; $a << 14\n"),
      s(:str, "; $a << 15\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 3, 4, 5, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 6, 7, 8, 9, 11, 14, 15, 16, 17]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i = 0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    j = 0; $a << 5\n"),
      s(:str, "    while j<3; $a << 6\n"),
      s(:str, "      j+=1; $a << 7\n"),
      s(:str, "      1.times{; $a << 8\n"),
      s(:str, "        begin; $a << 9\n"),
      s(:str, "          raise; $a << 10\n"),
      s(:str, "        ensure; $a << 11\n"),
      s(:str, "          break; $a << 12\n"),
      s(:str, "        end; $a << 13\n"),
      s(:str, "      }; $a << 14\n"),
      s(:str, "    end; $a << 15\n"),
      s(:str, "  end; $a << 16\n"),
      s(:str, "; $a << 17\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  while true; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "      break; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 99]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "$a = [];\n"),
      s(:str, "begin; ; $a << 1\n"),
      s(:str, "  while true; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "      raise; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 6, 8, 9, 10, 11]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  begin; $a << 2\n"),
      s(:str, "    [1,2].each do; $a << 3\n"),
      s(:str, "      begin; $a << 4\n"),
      s(:str, "        break; $a << 5\n"),
      s(:str, "      ensure; $a << 6\n"),
      s(:str, "      end; $a << 7\n"),
      s(:str, "    end; $a << 8\n"),
      s(:str, "  ensure; $a << 9\n"),
      s(:str, "  end; $a << 10\n"),
      s(:str, "; $a << 11\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 4, 99]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  begin; $a << 2\n"),
      s(:str, "    raise StandardError; $a << 3\n"),
      s(:str, "  ensure; $a << 4\n"),
      s(:str, "  end; $a << 5\n"),
      s(:str, "; $a << 6\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  begin; $a << 2\n"),
      s(:str, "  ensure; $a << 3\n"),
      s(:str, "  end ; $a << 4\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 99]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each do; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "      raise StandardError; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m a, b\n"),
      s(:str, "    a + b\n"),
      s(:str, "  end\n"),
      s(:str, "  m(1,\n"),
      s(:str, "    while true\n"),
      s(:str, "      break 2\n"),
      s(:str, "    end\n"),
      s(:str, "    )\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "4"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m a, b\n"),
      s(:str, "    a + b\n"),
      s(:str, "  end\n"),
      s(:str, "  m(1,\n"),
      s(:str, "    (i=0; while i<2\n"),
      s(:str, "       i+=1\n"),
      s(:str, "       class C\n"),
      s(:str, "         next 2\n"),
      s(:str, "       end\n"),
      s(:str, "     end; 3)\n"),
      s(:str, "    )\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "34"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m a, b\n"),
      s(:str, "    a+b\n"),
      s(:str, "  end\n"),
      s(:str, "  m(1, 1.times{break 3}) +\n"),
      s(:str, "  m(10, (1.times{next 3}; 20))\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 6, 7]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  3.times{; $a << 2\n"),
      s(:str, "    class C; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    end; $a << 5\n"),
      s(:str, "  }; $a << 6\n"),
      s(:str, "; $a << 7\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  3.times{; $a << 2\n"),
      s(:str, "    class A; $a << 3\n"),
      s(:str, "      class B; $a << 4\n"),
      s(:str, "        break; $a << 5\n"),
      s(:str, "      end; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  }; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 2, 3, 2, 3, 6, 7]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  3.times{; $a << 2\n"),
      s(:str, "    class C; $a << 3\n"),
      s(:str, "      next; $a << 4\n"),
      s(:str, "    end; $a << 5\n"),
      s(:str, "  }; $a << 6\n"),
      s(:str, "; $a << 7\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 2, 3, 4, 2, 3, 4, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  3.times{; $a << 2\n"),
      s(:str, "    class C; $a << 3\n"),
      s(:str, "      class D; $a << 4\n"),
      s(:str, "        next; $a << 5\n"),
      s(:str, "      end; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  }; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 6, 7]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  while true; $a << 2\n"),
      s(:str, "    class C; $a << 3\n"),
      s(:str, "      break; $a << 4\n"),
      s(:str, "    end; $a << 5\n"),
      s(:str, "  end; $a << 6\n"),
      s(:str, "; $a << 7\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  while true; $a << 2\n"),
      s(:str, "    class C; $a << 3\n"),
      s(:str, "      class D; $a << 4\n"),
      s(:str, "        break; $a << 5\n"),
      s(:str, "      end; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  i=0; $a << 2\n"),
      s(:str, "  while i<3; $a << 3\n"),
      s(:str, "    i+=1; $a << 4\n"),
      s(:str, "    class C; $a << 5\n"),
      s(:str, "      next 10; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  1.times{\n"),
      s(:str, "    while true\n"),
      s(:str, "      class C\n"),
      s(:str, "        begin\n"),
      s(:str, "          break\n"),
      s(:str, "        ensure\n"),
      s(:str, "          break\n"),
      s(:str, "        end\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  }\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 5, 2, 3, 5, 7, 8]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  [1,2].each do; $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      next; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "    end; $a << 6\n"),
      s(:str, "  end; $a << 7\n"),
      s(:str, "; $a << 8\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 6, 3, 5, 7, 8]"),
    s(:dstr,
      s(:str, "$a = []; begin;  ; $a << 1\n"),
      s(:str, "  o = \"test\"; $a << 2\n"),
      s(:str, "  def o.test(a); $a << 3\n"),
      s(:str, "    return a; $a << 4\n"),
      s(:str, "  ensure; $a << 5\n"),
      s(:str, "  end; $a << 6\n"),
      s(:str, "  o.test(123); $a << 7\n"),
      s(:str, "; $a << 8\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 4, 7, 5, 8, 9]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  def m1 *args; $a << 2\n"),
      s(:str, "    ; $a << 3\n"),
      s(:str, "  end; $a << 4\n"),
      s(:str, "  def m2; $a << 5\n"),
      s(:str, "    m1(:a, :b, (return 1; :c)); $a << 6\n"),
      s(:str, "  end; $a << 7\n"),
      s(:str, "  m2; $a << 8\n"),
      s(:str, "; $a << 9\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 8, 2, 3, 4, 5, 9, 10]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  def m(); $a << 2\n"),
      s(:str, "    begin; $a << 3\n"),
      s(:str, "      2; $a << 4\n"),
      s(:str, "    ensure; $a << 5\n"),
      s(:str, "      return 3; $a << 6\n"),
      s(:str, "    end; $a << 7\n"),
      s(:str, "  end; $a << 8\n"),
      s(:str, "  m; $a << 9\n"),
      s(:str, "; $a << 10\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 3, 11, 4, 5, 6, 7, 12, 13]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  def m2; $a << 2\n"),
      s(:str, "  end; $a << 3\n"),
      s(:str, "  def m(); $a << 4\n"),
      s(:str, "    m2(begin; $a << 5\n"),
      s(:str, "         2; $a << 6\n"),
      s(:str, "       ensure; $a << 7\n"),
      s(:str, "         return 3; $a << 8\n"),
      s(:str, "       end); $a << 9\n"),
      s(:str, "    4; $a << 10\n"),
      s(:str, "  end; $a << 11\n"),
      s(:str, "  m(); $a << 12\n"),
      s(:str, "; $a << 13\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 16, 2, 3, 4, 5, 6, 7, 10, 11, 17, 18]"),
    s(:dstr,
      s(:str, "$a = []; begin; ; $a << 1\n"),
      s(:str, "  def m; $a << 2\n"),
      s(:str, "    1; $a << 3\n"),
      s(:str, "    1.times{; $a << 4\n"),
      s(:str, "      2; $a << 5\n"),
      s(:str, "      begin; $a << 6\n"),
      s(:str, "        3; $a << 7\n"),
      s(:str, "        return; $a << 8\n"),
      s(:str, "        4; $a << 9\n"),
      s(:str, "      ensure; $a << 10\n"),
      s(:str, "        5; $a << 11\n"),
      s(:str, "      end; $a << 12\n"),
      s(:str, "      6; $a << 13\n"),
      s(:str, "    }; $a << 14\n"),
      s(:str, "    7; $a << 15\n"),
      s(:str, "  end; $a << 16\n"),
      s(:str, "  m(); $a << 17\n"),
      s(:str, "; $a << 18\n"),
      s(:str, "; rescue Exception; $a << 99; end; $a"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:ok, :ok2, :last]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  a = []\n"),
      s(:str, "  i = 0\n"),
      s(:str, "  begin\n"),
      s(:str, "    while i < 1\n"),
      s(:str, "      i+=1\n"),
      s(:str, "      begin\n"),
      s(:str, "        begin\n"),
      s(:str, "          next\n"),
      s(:str, "        ensure\n"),
      s(:str, "          a << :ok\n"),
      s(:str, "        end\n"),
      s(:str, "      ensure\n"),
      s(:str, "        a << :ok2\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  ensure\n"),
      s(:str, "    a << :last\n"),
      s(:str, "  end\n"),
      s(:str, "  a\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:ok, :ok2, :last]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  a = []\n"),
      s(:str, "  i = 0\n"),
      s(:str, "  begin\n"),
      s(:str, "    while i < 1\n"),
      s(:str, "      i+=1\n"),
      s(:str, "      begin\n"),
      s(:str, "        begin\n"),
      s(:str, "          break\n"),
      s(:str, "        ensure\n"),
      s(:str, "          a << :ok\n"),
      s(:str, "        end\n"),
      s(:str, "      ensure\n"),
      s(:str, "        a << :ok2\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  ensure\n"),
      s(:str, "    a << :last\n"),
      s(:str, "  end\n"),
      s(:str, "  a\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:ok, :ok2, :last]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  a = []\n"),
      s(:str, "  i = 0\n"),
      s(:str, "  begin\n"),
      s(:str, "    while i < 1\n"),
      s(:str, "      if i>0\n"),
      s(:str, "        break\n"),
      s(:str, "      end\n"),
      s(:str, "      i+=1\n"),
      s(:str, "      begin\n"),
      s(:str, "        begin\n"),
      s(:str, "          redo\n"),
      s(:str, "        ensure\n"),
      s(:str, "          a << :ok\n"),
      s(:str, "        end\n"),
      s(:str, "      ensure\n"),
      s(:str, "        a << :ok2\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  ensure\n"),
      s(:str, "    a << :last\n"),
      s(:str, "  end\n"),
      s(:str, "  a\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ENSURE\n"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def test\n"),
      s(:str, "    while true\n"),
      s(:str, "      return\n"),
      s(:str, "    end\n"),
      s(:str, "  ensure\n"),
      s(:str, "    puts(\"ENSURE\")\n"),
      s(:str, "  end\n"),
      s(:str, "  test\n")),
    s(:str, "[ruby-dev:37967]")),
  s(:block,
    s(:send,
      s(:array,
        s(:array,
          s(:str, "[ruby-core:28129]"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "  class Bug2728\n"),
            s(:str, "    include Enumerable\n"),
            s(:str, "    define_method(:dynamic_method) do\n"),
            s(:str, "      \"dynamically defined method\"\n"),
            s(:str, "    end\n"),
            s(:str, "    def each\n"),
            s(:str, "      begin\n"),
            s(:str, "        yield :foo\n"),
            s(:str, "      ensure\n"),
            s(:str, "        dynamic_method\n"),
            s(:str, "      end\n"),
            s(:str, "    end\n"),
            s(:str, "  end\n"),
            s(:str, "  e = Bug2728.new\n"))),
        s(:array,
          s(:str, "[ruby-core:28132]"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "  class Bug2729\n"),
            s(:str, "    include Enumerable\n"),
            s(:str, "    def each\n"),
            s(:str, "      begin\n"),
            s(:str, "        yield :foo\n"),
            s(:str, "      ensure\n"),
            s(:str, "        proc {}.call\n"),
            s(:str, "      end\n"),
            s(:str, "    end\n"),
            s(:str, "  end\n"),
            s(:str, "  e = Bug2729.new\n"))),
        s(:array,
          s(:str, "[ruby-core:39125]"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "  class Bug5234\n"),
            s(:str, "    include Enumerable\n"),
            s(:str, "    def each\n"),
            s(:str, "      begin\n"),
            s(:str, "        yield :foo\n"),
            s(:str, "      ensure\n"),
            s(:str, "        proc\n"),
            s(:str, "      end\n"),
            s(:str, "    end\n"),
            s(:str, "  end\n"),
            s(:str, "  e = Bug5234.new\n"))),
        s(:array,
          s(:str, "[ruby-dev:45656]"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "  class Bug6460\n"),
            s(:str, "    include Enumerable\n"),
            s(:str, "    def each\n"),
            s(:str, "      begin\n"),
            s(:str, "        yield :foo\n"),
            s(:str, "      ensure\n"),
            s(:str, "        1.times { Proc.new }\n"),
            s(:str, "      end\n"),
            s(:str, "    end\n"),
            s(:str, "  end\n"),
            s(:str, "  e = Bug6460.new\n")))), :each),
    s(:args,
      s(:arg, :bug),
      s(:arg, :src)),
    s(:begin,
      s(:send, nil, :assert_equal,
        s(:str, "foo"),
        s(:send,
          s(:lvar, :src), :+,
          s(:str, "e.detect {true}")),
        s(:lvar, :bug)),
      s(:send, nil, :assert_equal,
        s(:str, "true"),
        s(:send,
          s(:lvar, :src), :+,
          s(:str, "e.any? {true}")),
        s(:lvar, :bug)),
      s(:send, nil, :assert_equal,
        s(:str, "false"),
        s(:send,
          s(:lvar, :src), :+,
          s(:str, "e.all? {false}")),
        s(:lvar, :bug)),
      s(:send, nil, :assert_equal,
        s(:str, "true"),
        s(:send,
          s(:lvar, :src), :+,
          s(:str, "e.include?(:foo)")),
        s(:lvar, :bug)))),
  s(:send, nil, :assert_equal,
    s(:str, "foo"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class Bug6460\n"),
      s(:str, "    def m1\n"),
      s(:str, "      m2 {|e|\n"),
      s(:str, "        return e\n"),
      s(:str, "      }\n"),
      s(:str, "    end\n"),
      s(:str, "\n"),
      s(:str, "    def m2\n"),
      s(:str, "      begin\n"),
      s(:str, "        yield :foo\n"),
      s(:str, "      ensure\n"),
      s(:str, "        begin\n"),
      s(:str, "          begin\n"),
      s(:str, "            yield :foo\n"),
      s(:str, "          ensure\n"),
      s(:str, "            Proc.new\n"),
      s(:str, "            raise ''\n"),
      s(:str, "          end\n"),
      s(:str, "        rescue\n"),
      s(:str, "        end\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  Bug6460.new.m1\n")),
    s(:str, "[ruby-dev:46372]")))
