s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, "[[1], 2, 3]"),
    s(:str, "*v1, (a, b) = [1,[2, 3]]; [v1, a, b]")),
  s(:send, nil, :assert_equal,
    s(:str, "[[1], 2, 3]"),
    s(:str, "*v1,(*), (a, b) = [1,:x,[2, 3]]; [v1, a, b]")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "*a = *nil; a")),
  s(:send, nil, :assert_equal,
    s(:str, "[nil]"),
    s(:str, "*a = nil; a")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "a, a = 1, 2; a"),
    s(:str, "[ruby-dev:31522]")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "a, b = 1, 2")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  ans = []\n"),
      s(:str, "  trace_var(:$a){|v| ans << v}\n"),
      s(:str, "  trace_var(:$b){|v| ans << v}\n"),
      s(:str, "  $a, $b = 1, 2\n"),
      s(:str, "  ans\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  r = :ok\n"),
      s(:str, "  :ng.tap {|(r)|}\n"),
      s(:str, "  r\n")),
    s(:str, "[ruby-dev:31507]")),
  s(:send, nil, :assert_equal,
    s(:str, "[[], nil, nil, nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = []\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[], 0, nil, nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[], 0, 1, nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[], 0, 1, 2, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[], 0, 1, 2, 3, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[], 0, 1, 2, 3, 4]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[0], 1, 2, 3, 4, 5]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4, 5]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[0, 1], 2, 3, 4, 5, 6]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4, 5, 6]\n"),
      s(:str, "        *a, b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[nil, [], nil, nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = []\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [], nil, nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [], 1, nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [], 1, 2, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [], 1, 2, 3, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [], 1, 2, 3, 4]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [1], 2, 3, 4, 5]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4, 5]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, [1, 2], 3, 4, 5, 6]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4, 5, 6]\n"),
      s(:str, "        a, *b, c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[nil, nil, [], nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = []\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, nil, [], nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, [], nil, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, [], 2, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, [], 2, 3, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, [], 2, 3, 4]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, [2], 3, 4, 5]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4, 5]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "[0, 1, [2, 3], 4, 5, 6]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "        ary = [0, 1, 2, 3, 4, 5, 6]\n"),
      s(:str, "        a, b, *c, d, e, f = *ary; [a, b, c, d, e, f]\n"),
      s(:str, "      "))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  a,s=[],\"aaa\"\n"),
      s(:str, "  300.times { a<<s; s=s.succ }\n"),
      s(:str, "  eval <<-END__\n"),
      s(:str, "  GC.stress=true\n"),
      s(:str, "  Fiber.new do\n"),
      s(:str, "    \#{ a.join(\",\") },*zzz=1\n"),
      s(:str, "  end.resume\n"),
      s(:str, "  END__\n"),
      s(:str, "  :ok\n")),
    s(:str, "[ruby-dev:32581]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  while true\n"),
      s(:str, "    *, z = 1\n"),
      s(:str, "    break\n"),
      s(:str, "  end\n"),
      s(:str, "  :ok\n")),
    s(:str, "[ruby-dev:32892]")))
