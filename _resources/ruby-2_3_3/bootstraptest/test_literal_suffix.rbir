s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, "0/1"),
    s(:str, "0r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "0r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1/1"),
    s(:str, "1r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "1r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "-1/1"),
    s(:str, "-1r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "(-1r).class")),
  s(:send, nil, :assert_equal,
    s(:str, "1/1"),
    s(:str, "0x1r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "0x1r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1/1"),
    s(:str, "0b1r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "0b1r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1/1"),
    s(:str, "0d1r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "0d1r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1/1"),
    s(:str, "0o1r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "0o1r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1/1"),
    s(:str, "01r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "01r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "6/5"),
    s(:str, "1.2r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "1.2r.class")),
  s(:send, nil, :assert_equal,
    s(:str, "-6/5"),
    s(:str, "-1.2r")),
  s(:send, nil, :assert_equal,
    s(:str, "Rational"),
    s(:str, "(-1.2r).class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+0i"),
    s(:str, "0i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "0i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1i"),
    s(:str, "1i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "1i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1i"),
    s(:str, "0x1i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "0x1i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1i"),
    s(:str, "0b1i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "0b1i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1i"),
    s(:str, "0d1i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "0d1i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1i"),
    s(:str, "0o1i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "0o1i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1i"),
    s(:str, "01i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "01i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1.2i"),
    s(:str, "1.2i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "1.2i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+1/1i"),
    s(:str, "1ri")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "1ri.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+6/5i"),
    s(:str, "1.2ri")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "1.2ri.class")),
  s(:send, nil, :assert_equal,
    s(:str, "0+10.0i"),
    s(:str, "1e1i")),
  s(:send, nil, :assert_equal,
    s(:str, "Complex"),
    s(:str, "1e1i.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "1if true")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "1rescue nil")),
  s(:send, nil, :assert_equal,
    s(:str, "10000000000000000001/10000000000000000000"),
    s(:str, "1.0000000000000000001r")),
  s(:send, nil, :assert_equal,
    s(:str, "syntax error, unexpected tIDENTIFIER, expecting end-of-input"),
    s(:str, "begin eval('1ir', nil, '', 0); rescue SyntaxError => e; e.message[/\\A:(?:\\d+:)? (.*)/, 1] end")),
  s(:send, nil, :assert_equal,
    s(:str, "syntax error, unexpected tIDENTIFIER, expecting end-of-input"),
    s(:str, "begin eval('1.2ir', nil, '', 0); rescue SyntaxError => e; e.message[/\\A:(?:\\d+:)? (.*)/, 1] end")),
  s(:send, nil, :assert_equal,
    s(:str, "syntax error, unexpected tIDENTIFIER, expecting end-of-input"),
    s(:str, "begin eval('1e1r', nil, '', 0); rescue SyntaxError => e; e.message[/\\A:(?:\\d+:)? (.*)/, 1] end")))
