s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1+1\n"),
      s(:str, "  ensure\n"),
      s(:str, "    2+2\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "4"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1+1\n"),
      s(:str, "    begin\n"),
      s(:str, "      2+2\n"),
      s(:str, "    ensure\n"),
      s(:str, "      3+3\n"),
      s(:str, "    end\n"),
      s(:str, "  ensure\n"),
      s(:str, "    4+4\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "4"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1+1\n"),
      s(:str, "    begin\n"),
      s(:str, "      2+2\n"),
      s(:str, "    ensure\n"),
      s(:str, "      3+3\n"),
      s(:str, "    end\n"),
      s(:str, "  ensure\n"),
      s(:str, "    4+4\n"),
      s(:str, "    begin\n"),
      s(:str, "      5+5\n"),
      s(:str, "    ensure\n"),
      s(:str, "      6+6\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "NilClass"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  a = nil\n"),
      s(:str, "  1.times{|e|\n"),
      s(:str, "    begin\n"),
      s(:str, "    rescue => err\n"),
      s(:str, "    end\n"),
      s(:str, "    a = err.class\n"),
      s(:str, "  }\n"),
      s(:str, "  a\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "RuntimeError"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  a = nil\n"),
      s(:str, "  1.times{|e|\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise\n"),
      s(:str, "    rescue => err\n"),
      s(:str, "    end\n"),
      s(:str, "    a = err.class\n"),
      s(:str, "  }\n"),
      s(:str, "  a\n"))),
  s(:send, nil, :assert_equal,
    s(:dstr),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $!\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "FOO"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise \"FOO\"\n"),
      s(:str, "  rescue\n"),
      s(:str, "    $!\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "FOO"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m\n"),
      s(:str, "    $!\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise \"FOO\"\n"),
      s(:str, "  rescue\n"),
      s(:str, "    m()\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[#<RuntimeError: BAR>, #<RuntimeError: FOO>]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $ans = []\n"),
      s(:str, "  def m\n"),
      s(:str, "    $!\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise \"FOO\"\n"),
      s(:str, "  rescue\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise \"BAR\"\n"),
      s(:str, "    rescue\n"),
      s(:str, "      $ans << m()\n"),
      s(:str, "    end\n"),
      s(:str, "    $ans << m()\n"),
      s(:str, "  end\n"),
      s(:str, "  $ans\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[#<RuntimeError: FOO>, #<RuntimeError: FOO>]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $ans = []\n"),
      s(:str, "  def m\n"),
      s(:str, "    $!\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise \"FOO\"\n"),
      s(:str, "    ensure\n"),
      s(:str, "      $ans << m()\n"),
      s(:str, "    end\n"),
      s(:str, "  rescue\n"),
      s(:str, "    $ans << m()\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $ans = []\n"),
      s(:str, "  def m\n"),
      s(:str, "    $!\n"),
      s(:str, "  end\n"),
      s(:str, "  def m2\n"),
      s(:str, "    1.times{\n"),
      s(:str, "      begin\n"),
      s(:str, "        return\n"),
      s(:str, "      ensure\n"),
      s(:str, "        $ans << m\n"),
      s(:str, "      end\n"),
      s(:str, "    }\n"),
      s(:str, "  end\n"),
      s(:str, "  m2\n"),
      s(:str, "  $ans\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise\n"),
      s(:str, "  rescue\n"),
      s(:str, "    :ok\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise\n"),
      s(:str, "  rescue\n"),
      s(:str, "    :ok\n"),
      s(:str, "  ensure\n"),
      s(:str, "    :ng\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "RuntimeError"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise\n"),
      s(:str, "  rescue => e\n"),
      s(:str, "    e.class\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ng"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    raise\n"),
      s(:str, "  rescue StandardError\n"),
      s(:str, "    :ng\n"),
      s(:str, "  rescue Exception\n"),
      s(:str, "    :ok\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "c"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise \"a\"\n"),
      s(:str, "    rescue\n"),
      s(:str, "      raise \"b\"\n"),
      s(:str, "    ensure\n"),
      s(:str, "      raise \"c\"\n"),
      s(:str, "    end\n"),
      s(:str, "  rescue => e\n"),
      s(:str, "    e.message\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "33"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m a, b\n"),
      s(:str, "    a + b\n"),
      s(:str, "  end\n"),
      s(:str, "  m(1, begin\n"),
      s(:str, "         raise\n"),
      s(:str, "       rescue\n"),
      s(:str, "         2\n"),
      s(:str, "       end) +\n"),
      s(:str, "  m(10, begin\n"),
      s(:str, "         raise\n"),
      s(:str, "       rescue\n"),
      s(:str, "         20\n"),
      s(:str, "       ensure\n"),
      s(:str, "         30\n"),
      s(:str, "       end)\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m a, b\n"),
      s(:str, "    a + b\n"),
      s(:str, "  end\n"),
      s(:str, "  m(begin\n"),
      s(:str, "      raise\n"),
      s(:str, "    rescue\n"),
      s(:str, "      1\n"),
      s(:str, "    end,\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise\n"),
      s(:str, "    rescue\n"),
      s(:str, "      2\n"),
      s(:str, "    end)\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok3"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class E1 < Exception\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  def m\n"),
      s(:str, "    yield\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    begin\n"),
      s(:str, "      begin\n"),
      s(:str, "        m{\n"),
      s(:str, "          raise\n"),
      s(:str, "        }\n"),
      s(:str, "      rescue E1\n"),
      s(:str, "        :ok2\n"),
      s(:str, "      ensure\n"),
      s(:str, "      end\n"),
      s(:str, "    rescue\n"),
      s(:str, "      :ok3\n"),
      s(:str, "    ensure\n"),
      s(:str, "    end\n"),
      s(:str, "  rescue E1\n"),
      s(:str, "    :ok\n"),
      s(:str, "  ensure\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "7"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $i = 0\n"),
      s(:str, "  def m\n"),
      s(:str, "    iter{\n"),
      s(:str, "      begin\n"),
      s(:str, "        $i += 1\n"),
      s(:str, "        begin\n"),
      s(:str, "          $i += 2\n"),
      s(:str, "          break\n"),
      s(:str, "        ensure\n"),
      s(:str, "\n"),
      s(:str, "        end\n"),
      s(:str, "      ensure\n"),
      s(:str, "        $i += 4\n"),
      s(:str, "      end\n"),
      s(:str, "      $i = 0\n"),
      s(:str, "    }\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  def iter\n"),
      s(:str, "    yield\n"),
      s(:str, "  end\n"),
      s(:str, "  m\n"),
      s(:str, "  $i\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "10"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $i = 0\n"),
      s(:str, "  def m\n"),
      s(:str, "    begin\n"),
      s(:str, "      $i += 1\n"),
      s(:str, "      begin\n"),
      s(:str, "        $i += 2\n"),
      s(:str, "        return\n"),
      s(:str, "      ensure\n"),
      s(:str, "        $i += 3\n"),
      s(:str, "      end\n"),
      s(:str, "    ensure\n"),
      s(:str, "      $i += 4\n"),
      s(:str, "    end\n"),
      s(:str, "    p :end\n"),
      s(:str, "  end\n"),
      s(:str, "  m\n"),
      s(:str, "  $i\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1\n"),
      s(:str, "  rescue\n"),
      s(:str, "    2\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "4"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1\n"),
      s(:str, "    begin\n"),
      s(:str, "      2\n"),
      s(:str, "    rescue\n"),
      s(:str, "      3\n"),
      s(:str, "    end\n"),
      s(:str, "    4\n"),
      s(:str, "  rescue\n"),
      s(:str, "    5\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1\n"),
      s(:str, "  rescue\n"),
      s(:str, "    2\n"),
      s(:str, "  else\n"),
      s(:str, "    3\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1+1\n"),
      s(:str, "  rescue\n"),
      s(:str, "    2+2\n"),
      s(:str, "  ensure\n"),
      s(:str, "    3+3\n"),
      s(:str, "  end\n"),
      s(:str, "   "))),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1+1\n"),
      s(:str, "  rescue\n"),
      s(:str, "    2+2\n"),
      s(:str, "  ensure\n"),
      s(:str, "    3+3\n"),
      s(:str, "  end\n"),
      s(:str, "   "))),
  s(:send, nil, :assert_equal,
    s(:str, "6"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    1+1\n"),
      s(:str, "  rescue\n"),
      s(:str, "    2+2\n"),
      s(:str, "  else\n"),
      s(:str, "    3+3\n"),
      s(:str, "  ensure\n"),
      s(:str, "    4+4\n"),
      s(:str, "  end\n"),
      s(:str, "   "))),
  s(:send, nil, :assert_equal,
    s(:str, "12"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, " begin\n"),
      s(:str, "   1+1\n"),
      s(:str, "   begin\n"),
      s(:str, "     2+2\n"),
      s(:str, "   rescue\n"),
      s(:str, "     3+3\n"),
      s(:str, "   else\n"),
      s(:str, "     4+4\n"),
      s(:str, "   end\n"),
      s(:str, " rescue\n"),
      s(:str, "   5+5\n"),
      s(:str, " else\n"),
      s(:str, "   6+6\n"),
      s(:str, " ensure\n"),
      s(:str, "   7+7\n"),
      s(:str, " end\n"),
      s(:str, "   "))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, " #\n"),
      s(:str, "  proc{\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise\n"),
      s(:str, "      break\n"),
      s(:str, "    rescue\n"),
      s(:str, "      :ok\n"),
      s(:str, "    end\n"),
      s(:str, "  }.call\n"))),
  s(:send, nil, :assert_equal,
    s(:dstr),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  proc do\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise StandardError\n"),
      s(:str, "      redo\n"),
      s(:str, "    rescue StandardError\n"),
      s(:str, "    end\n"),
      s(:str, "  end.call\n"))),
  s(:send, nil, :assert_match,
    s(:regexp,
      s(:str, "undefined method `foo\\'"),
      s(:regopt)),
    s(:dstr,
      s(:str, "#`\n"),
      s(:str, "  STDERR.reopen(STDOUT)\n"),
      s(:str, "  class C\n"),
      s(:str, "    def inspect\n"),
      s(:str, "      bar {}\n"),
      s(:str, "    end\n"),
      s(:str, "\n"),
      s(:str, "    def bar\n"),
      s(:str, "      raise\n"),
      s(:str, "    ensure\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  C.new.foo\n")),
    s(:str, "[ruby-dev:31407]")),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  doit = false\n"),
      s(:str, "  exc = nil\n"),
      s(:str, "  t = Thread.new {\n"),
      s(:str, "    begin\n"),
      s(:str, "      doit = true\n"),
      s(:str, "      sleep 10\n"),
      s(:str, "    ensure\n"),
      s(:str, "      exc = $!\n"),
      s(:str, "    end\n"),
      s(:str, "  }\n"),
      s(:str, "  Thread.pass until doit\n"),
      s(:str, "  t.kill\n"),
      s(:str, "  t.join\n"),
      s(:str, "  exc.inspect\n")),
    s(:str, "[ruby-dev:32608]")),
  s(:send, nil, :assert_equal,
    s(:str, "exception class/object expected"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class ZeroDivisionError\n"),
      s(:str, "    def self.new(message)\n"),
      s(:str, "      42\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    1/0\n"),
      s(:str, "  rescue Exception => e\n"),
      s(:str, "    e.message\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-core:24767]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    def ===(o)\n"),
      s(:str, "      true\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    begin\n"),
      s(:str, "      raise\n"),
      s(:str, "    rescue C.new\n"),
      s(:str, "    end\n"),
      s(:str, "  rescue TypeError\n"),
      s(:str, "    :ok\n"),
      s(:str, "  end\n"))))
