s(:begin,
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m() 1 end; m()")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a) a end; m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "def m(a,b) [a, b] end; m(1,2)")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3]"),
    s(:str, "def m(a,b,c) [a, b, c] end; m(1,2,3)")),
  s(:send, nil, :assert_match,
    s(:regexp,
      s(:str, "\\Awrong number of arguments \\(.*\\b1\\b.* 0\\)\\z"),
      s(:regopt)),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m; end\n"),
      s(:str, "  begin\n"),
      s(:str, "    m(1)\n"),
      s(:str, "  rescue => e\n"),
      s(:str, "    e.message\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_match,
    s(:regexp,
      s(:str, "\\Awrong number of arguments \\(.*\\b0\\b.* 1\\)\\z"),
      s(:regopt)),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m a; end\n"),
      s(:str, "  begin\n"),
      s(:str, "    m\n"),
      s(:str, "  rescue => e\n"),
      s(:str, "    e.message\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x=1) x end; m()")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x=7) x end; m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=1) x end; m(7)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=7) x end; m(7,1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b,x=1) x end; m(7,7)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b,x=7) x end; m(7,7,1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=1,y=1) x end; m(7)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=1,y=1) y end; m(7)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=7,y=1) x end; m(7,1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=7,y=1) y end; m(7,1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=7,y=7) x end; m(7,1,1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,x=7,y=7) y end; m(7,1,1)")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(*a) a end; m().inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "def m(*a) a end; m(1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "def m(*a) a end; m(1,2).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,*a) a end; m(7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "def m(x,*a) a end; m(7,1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "def m(x,*a) a end; m(7,1,2).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,y,*a) a end; m(7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "def m(x,y,*a) a end; m(7,7,1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:str, "def m(x,y,*a) a end; m(7,7,1,2).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,y=7,*a) a end; m(7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,y,z=7,*a) a end; m(7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,y,z=7,*a) a end; m(7,7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,y,z=7,zz=7,*a) a end; m(7,7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[]"),
    s(:str, "def m(x,y,z=7,zz=7,*a) a end; m(7,7,7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,z=7,zz=1,*a) zz end; m(7,7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,z=7,zz=1,*a) zz end; m(7,7,7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,z=7,zz=7,*a) zz end; m(7,7,7,1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Proc"),
    s(:str, "def m(&block) block end; m{}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:str, "def m(&block) block end; m().inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Proc"),
    s(:str, "def m(a,&block) block end; m(7){}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:str, "def m(a,&block) block end; m(7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,&block) a end; m(1){}")),
  s(:send, nil, :assert_equal,
    s(:str, "Proc"),
    s(:str, "def m(a,b=nil,&block) block end; m(7){}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:str, "def m(a,b=nil,&block) block end; m(7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "Proc"),
    s(:str, "def m(a,b=nil,&block) block end; m(7,7){}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b=nil,&block) b end; m(7,1){}")),
  s(:send, nil, :assert_equal,
    s(:str, "Proc"),
    s(:str, "def m(a,b=nil,*c,&block) block end; m(7){}.class")),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:str, "def m(a,b=nil,*c,&block) block end; m(7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b=nil,*c,&block) a end; m(1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b=1,*c,&block) b end; m(7).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b=7,*c,&block) b end; m(7,1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "def m(a,b=7,*c,&block) c end; m(7,7,1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a) a end; m(*[1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,a) a end; m(7,*[1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,a) a end; m(7,7,*[1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b) a end; m(*[1,7])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b) b end; m(*[7,1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,a,b) b end; m(7,*[7,1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,a,b) b end; m(7,7,*[7,1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b,c) a end; m(*[1,7,7])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b,c) b end; m(*[7,1,7])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(a,b,c) c end; m(*[7,7,1])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,a,b,c) a end; m(7,*[1,7,7])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,a,b,c) a end; m(7,7,*[1,7,7])")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(h) h end; m(7=>1)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(h) h end; m(7=>1).size")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(h) h end; m(7=>1, 8=>7)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "2"),
    s(:str, "def m(h) h end; m(7=>1, 8=>7).size")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(h) h end; m(7=>1, 8=>7, 9=>7)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:str, "def m(h) h end; m(7=>1, 8=>7, 9=>7).size")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,h) h end; m(7, 7=>1)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,h) h end; m(7, 7=>1, 8=>7)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,h) h end; m(7, 7=>1, 8=>7, 9=>7)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,h) h end; m(7,7, 7=>1)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,h) h end; m(7,7, 7=>1, 8=>7)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(x,y,h) h end; m(7,7, 7=>1, 8=>7, 9=>7)[7]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "def m(&block) mm(&block) end\n"),
      s(:str, "                           def mm() yield 1 end\n"),
      s(:str, "                           m {|a| a }"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "def m(x,&block) mm(x,&block) end\n"),
      s(:str, "                           def mm(x) yield 1 end\n"),
      s(:str, "                           m(7) {|a| a }"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "def m(x,y,&block) mm(x,y,&block) end\n"),
      s(:str, "                           def mm(x,y) yield 1 end\n"),
      s(:str, "                           m(7,7) {|a| a }"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "def m(n) n == 0 ? 1 : m(n-1) end; m(5)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def m() 1 end end;  C.new.m")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def m(a) a end end;  C.new.m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def m(a = 1) a end end;  C.new.m")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "class C; def m(*a) a end end;  C.new.m(1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def m() mm() end\n"),
      s(:str, "                              def mm() 1 end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def C.m() 1 end end;  C.m")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def C.m(a) a end end;  C.m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def C.m(a = 1) a end end;  C.m")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "class C; def C.m(*a) a end end;  C.m(1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; end; def C.m() 1 end;  C.m")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; end; def C.m(a) a end;  C.m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; end; def C.m(a = 1) a end;  C.m")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "class C; end; def C.m(*a) a end;  C.m(1).inspect")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "class C; def m() 7 end end; def C.m() 1 end;  C.m")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def C.m() mm() end\n"),
      s(:str, "                              def C.mm() 1 end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "obj = Object.new; def obj.m() 1 end;  obj.m")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "obj = Object.new; def obj.m(a) a end;  obj.m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:str, "obj = Object.new; def obj.m(a=1) a end;  obj.m")),
  s(:send, nil, :assert_equal,
    s(:str, "[1]"),
    s(:str, "obj = Object.new; def obj.m(*a) a end;  obj.m(1)")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "class C; def m() 7 end; end\n"),
      s(:str, "                           obj = C.new\n"),
      s(:str, "                           def obj.m() 1 end\n"),
      s(:str, "                           obj.m"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "class A; def m(a) a end end\n"),
      s(:str, "                           class B < A; end\n"),
      s(:str, "                           B.new.m(1)"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "class A; end\n"),
      s(:str, "                           class B < A; def m(a) a end end\n"),
      s(:str, "                           B.new.m(1)"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "class A; def m(a) a end end\n"),
      s(:str, "                           class B < A; end\n"),
      s(:str, "                           class C < B; end\n"),
      s(:str, "                           C.new.m(1)"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "class A; def m(a) a end end\n"),
      s(:str, "                           module M; end\n"),
      s(:str, "                           class B < A; include M; end\n"),
      s(:str, "                           B.new.m(1)"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "class A; end\n"),
      s(:str, "                           module M; def m(a) a end end\n"),
      s(:str, "                           class B < A; include M; end\n"),
      s(:str, "                           B.new.m(1)"))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " def a() 1 end\n"),
      s(:str, "                            alias m a\n"),
      s(:str, "                            m() "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def a() 1 end\n"),
      s(:str, "                              alias m a\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def a() 1 end\n"),
      s(:str, "                              alias :m a\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def a() 1 end\n"),
      s(:str, "                              alias m :a\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def a() 1 end\n"),
      s(:str, "                              alias :m :a\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def a() 1 end\n"),
      s(:str, "                              alias m a\n"),
      s(:str, "                              undef a\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def m() end\n"),
      s(:str, "                              undef m\n"),
      s(:str, "                            end\n"),
      s(:str, "                            begin C.new.m; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class A\n"),
      s(:str, "                              def m() end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            class C < A\n"),
      s(:str, "                              def m() end\n"),
      s(:str, "                              undef m\n"),
      s(:str, "                            end\n"),
      s(:str, "                            begin C.new.m; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class A; def a() end end   # [yarv-dev:999]\n"),
      s(:str, "                            class B < A\n"),
      s(:str, "                              def b() end\n"),
      s(:str, "                              undef a, b\n"),
      s(:str, "                            end\n"),
      s(:str, "                            begin B.new.a; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class A; def a() end end   # [yarv-dev:999]\n"),
      s(:str, "                            class B < A\n"),
      s(:str, "                              def b() end\n"),
      s(:str, "                              undef a, b\n"),
      s(:str, "                            end\n"),
      s(:str, "                            begin B.new.b; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "3"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def m1\n"),
      s(:str, "    1\n"),
      s(:str, "  end\n"),
      s(:str, "  alias m2 m1\n"),
      s(:str, "  alias :\"\#{'m3'}\" m1\n"),
      s(:str, "  m1 + m2 + m3\n")),
    s(:str, "[ruby-dev:32308]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def foobar\n"),
      s(:str, "  end\n"),
      s(:str, "  undef :\"foo\#{:bar}\"\n"),
      s(:str, "  1\n")),
    s(:str, "[ruby-dev:32308]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def foobar\n"),
      s(:str, "    1\n"),
      s(:str, "  end\n"),
      s(:str, "  alias :\"bar\#{:baz}\" :\"foo\#{:bar}\"\n"),
      s(:str, "  barbaz\n")),
    s(:str, "[ruby-dev:32308]")),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def m() mm() end\n"),
      s(:str, "                              def mm() 1 end\n"),
      s(:str, "                              private :mm\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def m() 7 end\n"),
      s(:str, "                              private :m\n"),
      s(:str, "                            end\n"),
      s(:str, "                            begin C.m; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def C.m() mm() end\n"),
      s(:str, "                              def C.mm() 1 end\n"),
      s(:str, "                              private_class_method :mm\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.m "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def C.m() 7 end\n"),
      s(:str, "                              private_class_method :m\n"),
      s(:str, "                            end\n"),
      s(:str, "                            begin C.m; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m() 1 end end\n"),
      s(:str, "                            C.new.m   # cache\n"),
      s(:str, "                            class C\n"),
      s(:str, "                              alias mm m; private :mm\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m\n"),
      s(:str, "                            begin C.new.mm; 7; rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def m\n"),
      s(:str, "                                def mm() 1 end\n"),
      s(:str, "                              end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m\n"),
      s(:str, "                            C.new.mm "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def m\n"),
      s(:str, "                                def mm() 1 end\n"),
      s(:str, "                              end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            instance_eval \"C.new.m; C.new.mm\" "))),
  s(:send, nil, :assert_equal,
    s(:str, ":m"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def method_missing(mid, *args) mid end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m.inspect "))),
  s(:send, nil, :assert_equal,
    s(:str, ":mm"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def method_missing(mid, *args) mid end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.mm.inspect "))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def method_missing(mid, *args) args end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m(1,2).inspect "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def method_missing(mid, *args) yield 1 end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m {|a| a }"))),
  s(:send, nil, :assert_equal,
    s(:str, "nil"),
    s(:dstr,
      s(:str, " class C\n"),
      s(:str, "                              def method_missing(mid, *args, &block) block end\n"),
      s(:str, "                            end\n"),
      s(:str, "                            C.new.m.inspect "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m() 1 end end;\n"),
      s(:str, "                            C.new.__send__(:m) "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m() 1 end end;\n"),
      s(:str, "                            C.new.send(:m) "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m(a) a end end;\n"),
      s(:str, "                            C.new.send(:m,1) "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m(a,b) a end end;\n"),
      s(:str, "                            C.new.send(:m,1,7) "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m(x,a=1) a end end;\n"),
      s(:str, "                            C.new.send(:m,7) "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m(x,a=7) a end end;\n"),
      s(:str, "                            C.new.send(:m,7,1) "))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2]"),
    s(:dstr,
      s(:str, " class C; def m(*a) a end end;\n"),
      s(:str, "                            C.new.send(:m,1,2).inspect "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m() 7 end; private :m end\n"),
      s(:str, "                            begin C.new.public_send(:m); rescue NoMethodError; 1 end "))),
  s(:send, nil, :assert_equal,
    s(:str, "1"),
    s(:dstr,
      s(:str, " class C; def m() 1 end; private :m end\n"),
      s(:str, "                            C.new.send(:m) "))),
  s(:send, nil, :assert_equal,
    s(:str, "[[:ok1, :foo], [:ok2, :foo, :bar]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    def [](a)\n"),
      s(:str, "      $ary << [yield, a]\n"),
      s(:str, "    end\n"),
      s(:str, "    def []=(a, b)\n"),
      s(:str, "      $ary << [yield, a, b]\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  $ary = []\n"),
      s(:str, "  C.new[:foo, &lambda{:ok1}]\n"),
      s(:str, "  C.new[:foo, &lambda{:ok2}] = :bar\n"),
      s(:str, "  $ary\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:ok1, [:ok2, 11]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    def []\n"),
      s(:str, "      $ary << :ok1\n"),
      s(:str, "      10\n"),
      s(:str, "    end\n"),
      s(:str, "    def []=(a)\n"),
      s(:str, "      $ary << [:ok2, a]\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  $ary = []\n"),
      s(:str, "  C.new[]+=1\n"),
      s(:str, "  $ary\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[[[:x, :y, :z], NilClass], [[1, :x, :y, :z], NilClass], [[1, 2, :x, :y, :z], NilClass], [[:obj], NilClass], [[1, :obj], NilClass], [[1, 2, :obj], NilClass], [[], Proc], [[1], Proc], [[1, 2], Proc], [[], Proc], [[1], Proc], [[1, 2], Proc], [[:x, :y, :z], Proc], [[1, :x, :y, :z], Proc], [[1, 2, :x, :y, :z], Proc]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(*args, &b)\n"),
      s(:str, "  $result << [args, b.class]\n"),
      s(:str, "end\n"),
      s(:str, "$result = []\n"),
      s(:str, "ary = [:x, :y, :z]\n"),
      s(:str, "obj = :obj\n"),
      s(:str, "b = Proc.new{}\n"),
      s(:str, "\n"),
      s(:str, "m(*ary)\n"),
      s(:str, "m(1,*ary)\n"),
      s(:str, "m(1,2,*ary)\n"),
      s(:str, "m(*obj)\n"),
      s(:str, "m(1,*obj)\n"),
      s(:str, "m(1,2,*obj)\n"),
      s(:str, "m(){}\n"),
      s(:str, "m(1){}\n"),
      s(:str, "m(1,2){}\n"),
      s(:str, "m(&b)\n"),
      s(:str, "m(1,&b)\n"),
      s(:str, "m(1,2,&b)\n"),
      s(:str, "m(*ary,&b)\n"),
      s(:str, "m(1,*ary,&b)\n"),
      s(:str, "m(1,2,*ary,&b)\n"),
      s(:str, "$result\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "4"),
    s(:str, "class Foo;def []=(a,b,c,d);end;end;Foo.new[1,*a=[2,3]]=4")),
  s(:send, nil, :assert_equal,
    s(:str, "4"),
    s(:str, "class Foo;def []=(a,b,c,d);end;end;def m(&blk)Foo.new[1,*a=[2,3],&blk]=4;end;m{}")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, :o1, :o2, [], 3, 4, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, :o2, [], 4, 5, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [], 5, 6, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5], 6, 7, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6], 7, 8, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6, 7], 8, 9, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8, 9)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6, 7, 8], 9, 10, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6, 7, 8, 9], 10, 11, NilClass, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, :o1, :o2, [], 3, 4, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, :o2, [], 4, 5, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [], 5, 6, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5], 6, 7, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6], 7, 8, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6, 7], 8, 9, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8, 9){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6, 7, 8], 9, 10, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [5, 6, 7, 8, 9], 10, 11, Proc, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2, &b)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, b.class, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, :o1, :o2, [], 3, 4, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, :o2, [], 4, 5, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, 3, 4, [], 5, 6, nil, nil]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2)\n"),
      s(:str, "  x, y = :x, :y if $foo\n"),
      s(:str, "  [m1, m2, o1, o2, r, p1, p2, x, y]\n"),
      s(:str, "end\n"),
      s(:str, "; m(1, 2, 3, 4, 5, 6)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, :o1, :o2, 3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, :o2, 4, 5]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :o]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2, 3"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2, 3, 4"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [:a]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a\n"),
      s(:str, "    a = :a; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6, 7]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6,7)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6, 7, 8]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6,7,8)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :o]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2, 3"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2, 3, 4"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :o]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m(1){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m(1, 2){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m(1, 2, 3){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o, *r, &b; super; end; end\n"),
      s(:str, "; C1.new.m(1, 2, 3, 4){}"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :x]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o\n"),
      s(:str, "    o = :x; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :x]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o\n"),
      s(:str, "    o = :x; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [:a, :o]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o\n"),
      s(:str, "    a = :a; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [:a, 2]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o\n"),
      s(:str, "    a = :a; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :x, :y]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, *r\n"),
      s(:str, "    r = [:x, :y]; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :x, :y]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, *r\n"),
      s(:str, "    r = [:x, :y]; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :x, :y]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, *r\n"),
      s(:str, "    r = [:x, :y]; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2, 3"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, :o1, :o2, 3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, :o2, 4, 5]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6, 7]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6,7)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6, 7, 8]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6,7,8)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3, 4, 5, 6, 7, 8, 9]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m(m1, m2, o1=:o1, o2=:o2, *r, p1, p2); super; end; end\n"),
      s(:str, "; C1.new.m(1,2,3,4,5,6,7,8,9)"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2, 3]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, *r; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2, 3"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, []]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m; super; end; end\n"),
      s(:str, "; C1.new.m"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, :o]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o; super; end; end\n"),
      s(:str, "; C1.new.m 1"))),
  s(:send, nil, :assert_equal,
    s(:str, "[:C0_m, [1, 2]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "class C0; def m *args; [:C0_m, args]; end; end\n"),
      s(:str, "class C1 < C0; def m a, o=:o; super; end; end\n"),
      s(:str, "; C1.new.m 1, 2"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    def x=(n)\n"),
      s(:str, "    end\n"),
      s(:str, "    def m\n"),
      s(:str, "      self.x = :ok\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  C.new.m\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  proc{\n"),
      s(:str, "    $SAFE = 1\n"),
      s(:str, "    class C\n"),
      s(:str, "      def m\n"),
      s(:str, "        :ok\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "  }.call\n"),
      s(:str, "  C.new.m\n")),
    s(:str, "[ruby-core:11998]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class B\n"),
      s(:str, "    def m() :fail end\n"),
      s(:str, "  end\n"),
      s(:str, "  class C < B\n"),
      s(:str, "    undef m\n"),
      s(:str, "    begin\n"),
      s(:str, "      remove_method :m\n"),
      s(:str, "    rescue NameError\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    C.new.m\n"),
      s(:str, "  rescue NameError\n"),
      s(:str, "    :ok\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-dev:31816], [ruby-dev:31817]")),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  begin\n"),
      s(:str, "    Process.setrlimit(Process::RLIMIT_STACK, 4_206_592)\n"),
      s(:str, "    # FreeBSD SEGVs this less than 4M + 12K bytes.\n"),
      s(:str, "  rescue Exception\n"),
      s(:str, "    exit\n"),
      s(:str, "  end\n"),
      s(:str, "  class C\n"),
      s(:str, "    attr \"a\" * (10*1024*1024)\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-dev:31818]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class Module\n"),
      s(:str, "    def define_method2(name, &block)\n"),
      s(:str, "      define_method(name, &block)\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  class C\n"),
      s(:str, "    define_method2(:m) {|x, y| :fail }\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    C.new.m([1,2])\n"),
      s(:str, "  rescue ArgumentError\n"),
      s(:str, "    :ok\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_not_match,
    s(:regexp,
      s(:str, "method_missing"),
      s(:regopt)),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  STDERR.reopen(STDOUT)\n"),
      s(:str, "  variable_or_mehtod_not_exist\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[false, false, false, false, true, true]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    define_method(:foo) {\n"),
      s(:str, "      block_given?\n"),
      s(:str, "    }\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  C.new.foo {}\n"),
      s(:str, "\n"),
      s(:str, "  class D\n"),
      s(:str, "    def foo\n"),
      s(:str, "      D.module_eval{\n"),
      s(:str, "        define_method(:m1){\n"),
      s(:str, "          block_given?\n"),
      s(:str, "        }\n"),
      s(:str, "      }\n"),
      s(:str, "    end\n"),
      s(:str, "    def bar\n"),
      s(:str, "      D.module_eval{\n"),
      s(:str, "        define_method(:m2){\n"),
      s(:str, "          block_given?\n"),
      s(:str, "        }\n"),
      s(:str, "      }\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  D.new.foo\n"),
      s(:str, "  D.new.bar{}\n"),
      s(:str, "  [C.new.foo, C.new.foo{}, D.new.m1, D.new.m1{}, D.new.m2, D.new.m2{}]\n")),
    s(:str, "[ruby-core:14813]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class Foo\n"),
      s(:str, "    define_method(:foo) do |&b|\n"),
      s(:str, "      b.call\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  Foo.new.foo do\n"),
      s(:str, "    break :ok\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-dev:36028]")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, 2, [3, 4]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def regular(a, b, *c)\n"),
      s(:str, "    [a, b, c]\n"),
      s(:str, "  end\n"),
      s(:str, "  regular(*[], 1, *[], *[2, 3], *[], 4)\n")),
    s(:str, "[ruby-core:19413]")),
  s(:send, nil, :assert_equal,
    s(:str, "[1, [:foo, 3, 4, :foo]]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  def regular(a, *b)\n"),
      s(:str, "    [a, b]\n"),
      s(:str, "  end\n"),
      s(:str, "  a = b = [:foo]\n"),
      s(:str, "  regular(1, *a, *[3, 4], *b)\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "[\"B\", \"A\"]"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class A\n"),
      s(:str, "    def m\n"),
      s(:str, "      'A'\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  class B < A\n"),
      s(:str, "    define_method(:m) do\n"),
      s(:str, "      ['B', super()]\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  class C < B\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  C.new.m\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  module Foo\n"),
      s(:str, "    def foo\n"),
      s(:str, "      begin\n"),
      s(:str, "        super\n"),
      s(:str, "      rescue NoMethodError\n"),
      s(:str, "        :ok\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "    module_function :foo\n"),
      s(:str, "  end\n"),
      s(:str, "  Foo.foo\n")),
    s(:str, "[ruby-dev:37587]")),
  s(:send, nil, :assert_equal,
    s(:str, "Object#foo"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class Object\n"),
      s(:str, "    def self.foo\n"),
      s(:str, "      \"Object.foo\"\n"),
      s(:str, "    end\n"),
      s(:str, "    def foo\n"),
      s(:str, "      \"Object#foo\"\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  module Foo\n"),
      s(:str, "    def foo\n"),
      s(:str, "      begin\n"),
      s(:str, "        super\n"),
      s(:str, "      rescue NoMethodError\n"),
      s(:str, "        :ok\n"),
      s(:str, "      end\n"),
      s(:str, "    end\n"),
      s(:str, "    module_function :foo\n"),
      s(:str, "  end\n"),
      s(:str, "  Foo.foo\n")),
    s(:str, "[ruby-dev:37587]")),
  s(:send, nil, :assert_normal_exit,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class BasicObject\n"),
      s(:str, "    remove_method :method_missing\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    \"a\".lalala!\n"),
      s(:str, "  rescue NoMethodError => e\n"),
      s(:str, "    e.message == \"undefined method `lalala!' for \\\"a\\\":String\" ? :ok : :ng\n"),
      s(:str, "  end\n")),
    s(:str, "[ruby-core:22298]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  \"hello\"[0] ||= \"H\"\n"),
      s(:str, "  \"ok\"\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  \"hello\"[0, 1] ||= \"H\"\n"),
      s(:str, "  \"ok\"\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    define_method(:foo) do\n"),
      s(:str, "      C.class_eval { remove_method(:foo) }\n"),
      s(:str, "      super()\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  begin\n"),
      s(:str, "    C.new.foo\n"),
      s(:str, "  rescue NoMethodError\n"),
      s(:str, "    'ok'\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  [0][0, &proc{}] += 21\n"),
      s(:str, "  'ok'\n")),
    s(:str, "[ruby-core:30534]")),
  s(:send, nil, :assert_equal,
    s(:str, "ok"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    attr_reader :a\n"),
      s(:str, "    def initialize\n"),
      s(:str, "      @a = 1\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  def m *args\n"),
      s(:str, "    C.new.a(*args)\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  m()\n"),
      s(:str, "  begin\n"),
      s(:str, "    m(1)\n"),
      s(:str, "  rescue ArgumentError\n"),
      s(:str, "    'ok'\n"),
      s(:str, "  end\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "DC"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $result = []\n"),
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    def foo *args\n"),
      s(:str, "      $result << 'C'\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  class D\n"),
      s(:str, "    def foo *args\n"),
      s(:str, "      $result << 'D'\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  o1 = $o1 = C.new\n"),
      s(:str, "  o2 = $o2 = D.new\n"),
      s(:str, "\n"),
      s(:str, "  args = Object.new\n"),
      s(:str, "  def args.to_a\n"),
      s(:str, "    test1 $o2, nil\n"),
      s(:str, "    []\n"),
      s(:str, "  end\n"),
      s(:str, "  def test1 o, args\n"),
      s(:str, "    o.foo(*args)\n"),
      s(:str, "  end\n"),
      s(:str, "  test1 o1, args\n"),
      s(:str, "  $result.join\n"))),
  s(:send, nil, :assert_equal,
    s(:str, "DC"),
    s(:dstr,
      s(:str, "\n"),
      s(:str, "  $result = []\n"),
      s(:str, "\n"),
      s(:str, "  class C\n"),
      s(:str, "    def foo *args\n"),
      s(:str, "      $result << 'C'\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "  class D\n"),
      s(:str, "    def foo *args\n"),
      s(:str, "      $result << 'D'\n"),
      s(:str, "    end\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  o1 = $o1 = C.new\n"),
      s(:str, "  o2 = $o2 = D.new\n"),
      s(:str, "\n"),
      s(:str, "  block = Object.new\n"),
      s(:str, "  def block.to_proc\n"),
      s(:str, "    test2 $o2, %w(a, b, c), nil\n"),
      s(:str, "    Proc.new{}\n"),
      s(:str, "  end\n"),
      s(:str, "  def test2 o, args, block\n"),
      s(:str, "    o.foo(*args, &block)\n"),
      s(:str, "  end\n"),
      s(:str, "  test2 o1, [], block\n"),
      s(:str, "  $result.join\n"))))
