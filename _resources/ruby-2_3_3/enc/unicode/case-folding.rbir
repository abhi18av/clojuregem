s(:begin,
  s(:class,
    s(:const, nil, :CaseFolding), nil,
    s(:begin,
      s(:module,
        s(:const, nil, :Util),
        s(:begin,
          s(:send, nil, :module_function),
          s(:def, :hex_seq,
            s(:args,
              s(:arg, :v)),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :v), :map),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:str, "0x%04x"), :%,
                  s(:lvar, :i))), :join,
              s(:str, ", "))),
          s(:def, :print_table_1,
            s(:args,
              s(:arg, :dest),
              s(:arg, :data)),
            s(:begin,
              s(:for,
                s(:mlhs,
                  s(:lvasgn, :k),
                  s(:lvasgn, :v)),
                s(:lvasgn, :data,
                  s(:send,
                    s(:lvar, :data), :sort)),
                s(:begin,
                  s(:lvasgn, :sk,
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:const, nil, :Array), :===,
                            s(:lvar, :k)),
                          s(:send,
                            s(:send,
                              s(:lvar, :k), :length), :>,
                            s(:int, 1)))),
                      s(:dstr,
                        s(:str, "{"),
                        s(:begin,
                          s(:send, nil, :hex_seq,
                            s(:lvar, :k))),
                        s(:str, "}")),
                      s(:begin,
                        s(:send,
                          s(:str, "0x%04x"), :%,
                          s(:lvar, :k))))),
                  s(:send,
                    s(:lvar, :dest), :print,
                    s(:dstr,
                      s(:str, "  {"),
                      s(:begin,
                        s(:lvar, :sk)),
                      s(:str, ", {"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :v), :length)),
                      s(:str, ", {"),
                      s(:begin,
                        s(:send, nil, :hex_seq,
                          s(:lvar, :v))),
                      s(:str, "}}},\n"))))),
              s(:lvar, :data))),
          s(:def, :print_table,
            s(:args,
              s(:arg, :dest),
              s(:arg, :type),
              s(:arg, :data)),
            s(:begin,
              s(:send,
                s(:lvar, :dest), :print,
                s(:dstr,
                  s(:str, "static const "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, "_Type "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, "_Table[] = {\n"))),
              s(:lvasgn, :i,
                s(:int, 0)),
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:lvar, :data), :inject,
                    s(:array)),
                  s(:args,
                    s(:arg, :a),
                    s(:mlhs,
                      s(:arg, :n),
                      s(:arg, :d))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :dest), :print,
                      s(:dstr,
                        s(:str, "#define "),
                        s(:begin,
                          s(:lvar, :n)),
                        s(:str, " (*("),
                        s(:begin,
                          s(:lvar, :type)),
                        s(:str, "_Type (*)["),
                        s(:begin,
                          s(:send,
                            s(:lvar, :d), :size)),
                        s(:str, "])("),
                        s(:begin,
                          s(:lvar, :type)),
                        s(:str, "_Table+"),
                        s(:begin,
                          s(:lvar, :i)),
                        s(:str, "))\n"))),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:send,
                        s(:lvar, :d), :size)),
                    s(:send,
                      s(:lvar, :a), :concat,
                      s(:send, nil, :print_table_1,
                        s(:lvar, :dest),
                        s(:lvar, :d)))))),
              s(:send,
                s(:lvar, :dest), :print,
                s(:str, "};\n\n")),
              s(:lvar, :ret))))),
      s(:send, nil, :include,
        s(:const, nil, :Util)),
      s(:send, nil, :attr_reader,
        s(:sym, :fold),
        s(:sym, :fold_locale),
        s(:sym, :unfold),
        s(:sym, :unfold_locale)),
      s(:def, :load,
        s(:args,
          s(:arg, :filename)),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:regexp,
              s(:str, "([0-9A-F]{4,6}); ([CFT]); ([0-9A-F]{4,6})(?: ([0-9A-F]{4,6}))?(?: ([0-9A-F]{4,6}))?;"),
              s(:regopt))),
          s(:ivasgn, :@fold,
            s(:lvasgn, :fold,
              s(:hash))),
          s(:ivasgn, :@unfold,
            s(:lvasgn, :unfold,
              s(:array,
                s(:hash),
                s(:hash),
                s(:hash)))),
          s(:lvasgn, :turkic,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :foreach,
              s(:lvar, :filename)),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:if,
                s(:lvasgn, :res,
                  s(:send,
                    s(:lvar, :pattern), :match,
                    s(:lvar, :line))), nil,
                s(:next)),
              s(:lvasgn, :ch_from,
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:int, 1)), :to_i,
                  s(:int, 16))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :res), :[],
                    s(:int, 2)), :==,
                  s(:str, "T")),
                s(:begin,
                  s(:send,
                    s(:lvar, :turkic), :<<,
                    s(:lvar, :ch_from)),
                  s(:next)), nil),
              s(:lvasgn, :ch_to,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:irange,
                        s(:int, 3),
                        s(:int, 6))), :inject,
                    s(:array)),
                  s(:args,
                    s(:arg, :a),
                    s(:arg, :i)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :i), nil,
                      s(:break,
                        s(:lvar, :a))),
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:send,
                        s(:lvar, :i), :to_i,
                        s(:int, 16)))))),
              s(:send,
                s(:lvar, :fold), :[]=,
                s(:lvar, :ch_from),
                s(:lvar, :ch_to)),
              s(:lvasgn, :i,
                s(:send,
                  s(:send,
                    s(:lvar, :ch_to), :length), :-,
                  s(:int, 1))),
              s(:send,
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:send,
                        s(:lvar, :unfold), :[],
                        s(:lvar, :i)), :[],
                      s(:lvar, :ch_to)),
                    s(:array))), :<<,
                s(:lvar, :ch_from)))),
          s(:ivasgn, :@fold_locale,
            s(:lvasgn, :fold_locale,
              s(:hash))),
          s(:ivasgn, :@unfold_locale,
            s(:lvasgn, :unfold_locale,
              s(:array,
                s(:hash),
                s(:hash)))),
          s(:for,
            s(:lvasgn, :ch_from),
            s(:lvar, :turkic),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :fold), :[],
                  s(:lvar, :ch_from))),
              s(:lvasgn, :i,
                s(:send,
                  s(:send,
                    s(:lvar, :key), :length), :-,
                  s(:int, 1))),
              s(:send,
                s(:send,
                  s(:lvar, :unfold_locale), :[],
                  s(:lvar, :i)), :[]=,
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :key), :[],
                    s(:int, 0)),
                  s(:lvar, :key)),
                s(:send,
                  s(:send,
                    s(:lvar, :unfold), :[],
                    s(:lvar, :i)), :delete,
                  s(:lvar, :key))),
              s(:send,
                s(:lvar, :fold_locale), :[]=,
                s(:lvar, :ch_from),
                s(:send,
                  s(:lvar, :fold), :delete,
                  s(:lvar, :ch_from))))),
          s(:self))),
      s(:def, :range_check,
        s(:args,
          s(:arg, :code)),
        s(:dstr,
          s(:begin,
            s(:lvar, :code)),
          s(:str, " <= MAX_CODE_VALUE && "),
          s(:begin,
            s(:lvar, :code)),
          s(:str, " >= MIN_CODE_VALUE"))),
      s(:def, :lookup_hash,
        s(:args,
          s(:arg, :key),
          s(:arg, :type),
          s(:arg, :data)),
        s(:begin,
          s(:lvasgn, :hash,
            s(:dstr,
              s(:str, "onigenc_unicode_"),
              s(:begin,
                s(:lvar, :key)),
              s(:str, "_hash"))),
          s(:lvasgn, :lookup,
            s(:dstr,
              s(:str, "onigenc_unicode_"),
              s(:begin,
                s(:lvar, :key)),
              s(:str, "_lookup"))),
          s(:lvasgn, :arity,
            s(:send,
              s(:send, nil, :Array,
                s(:send,
                  s(:send,
                    s(:lvar, :data), :[],
                    s(:int, 0)), :[],
                  s(:int, 0))), :size)),
          s(:lvasgn, :gperf,
            s(:array,
              s(:str, "gperf"),
              s(:str, "-7"),
              s(:dstr,
                s(:str, "-k"),
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:splat,
                        s(:irange,
                          s(:int, 1),
                          s(:begin,
                            s(:send,
                              s(:lvar, :arity), :*,
                              s(:int, 3)))))), :join,
                    s(:str, ",")))),
              s(:str, "-F,-1"),
              s(:str, "-c"),
              s(:str, "-j1"),
              s(:str, "-i1"),
              s(:str, "-t"),
              s(:str, "-T"),
              s(:str, "-E"),
              s(:str, "-C"),
              s(:str, "-H"),
              s(:dstr,
                s(:begin,
                  s(:lvar, :hash))),
              s(:str, "-N"),
              s(:dstr,
                s(:begin,
                  s(:lvar, :lookup))),
              s(:str, "-n"))),
          s(:lvasgn, :argname,
            s(:if,
              s(:send,
                s(:lvar, :arity), :>,
                s(:int, 1)),
              s(:str, "codes"),
              s(:str, "code"))),
          s(:lvasgn, :argdecl,
            s(:dstr,
              s(:str, "const OnigCodePoint "),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :arity), :>,
                    s(:int, 1)),
                  s(:str, "*"),
                  s(:str, ""))),
              s(:begin,
                s(:lvar, :argname)))),
          s(:lvasgn, :n,
            s(:int, 7)),
          s(:lvasgn, :m,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 1), :<<,
                  s(:lvar, :n))), :-,
              s(:int, 1))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :min),
              s(:lvasgn, :max)),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :data), :map),
                  s(:args,
                    s(:arg, :c),
                    s(:restarg)),
                  s(:lvar, :c)), :flatten), :minmax)),
          s(:lvasgn, :src,
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:lvar, :gperf),
                s(:str, "r+")),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:send,
                  s(:lvar, :f), :<<,
                  s(:str, "short\n%%\n")),
                s(:block,
                  s(:send,
                    s(:lvar, :data), :each_with_index),
                  s(:args,
                    s(:mlhs,
                      s(:arg, :k),
                      s(:arg, :_)),
                    s(:arg, :i)),
                  s(:begin,
                    s(:lvasgn, :k,
                      s(:send, nil, :Array,
                        s(:lvar, :k))),
                    s(:lvasgn, :ks,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:lvar, :k), :map),
                                s(:args,
                                  s(:arg, :j)),
                                s(:array,
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :j), :>>,
                                        s(:send,
                                          s(:lvar, :n), :*,
                                          s(:int, 2)))), :&,
                                    s(:lvar, :m)),
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:lvar, :j), :>>,
                                        s(:lvar, :n))), :&,
                                    s(:lvar, :m)),
                                  s(:send,
                                    s(:begin,
                                      s(:lvar, :j)), :&,
                                    s(:lvar, :m)))), :flatten), :map),
                          s(:args,
                            s(:arg, :c)),
                          s(:send,
                            s(:str, "\\x%.2x"), :%,
                            s(:lvar, :c))), :join,
                        s(:str, ""))),
                    s(:send,
                      s(:lvar, :f), :printf,
                      s(:str, "\"%s\", ::::/*%s*/ %d\n"),
                      s(:lvar, :ks),
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :k), :map),
                          s(:args,
                            s(:arg, :c)),
                          s(:send,
                            s(:str, "0x%.4x"), :%,
                            s(:lvar, :c))), :join,
                        s(:str, ",")),
                      s(:lvar, :i)))),
                s(:send,
                  s(:lvar, :f), :<<,
                  s(:str, "%%\n")),
                s(:send,
                  s(:lvar, :f), :close_write),
                s(:send,
                  s(:lvar, :f), :read)))),
          s(:block,
            s(:send,
              s(:lvar, :src), :sub!,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:lvar, :hash)),
                s(:str, ")\\s*\\(.*?\\).*?\\n\\{\\n(.*)^\\}"),
                s(:regopt, :m))),
            s(:args),
            s(:begin,
              s(:lvasgn, :name,
                s(:nth_ref, 1)),
              s(:lvasgn, :body,
                s(:nth_ref, 2)),
              s(:send,
                s(:lvar, :body), :gsub!,
                s(:regexp,
                  s(:str, "\\(unsigned char\\)str\\[(\\d+)\\]"),
                  s(:regopt)),
                s(:dstr,
                  s(:str, "bits_"),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :arity), :>,
                        s(:int, 1)),
                      s(:str, "at"),
                      s(:str, "of"))),
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :argname)),
                  s(:str, ", \\1)"))),
              s(:dstr,
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "("),
                s(:begin,
                  s(:lvar, :argdecl)),
                s(:str, ")\n{\n"),
                s(:begin,
                  s(:lvar, :body)),
                s(:str, "}")))),
          s(:block,
            s(:send,
              s(:lvar, :src), :sub!,
              s(:regexp,
                s(:str, "const short *\\*\\n^("),
                s(:begin,
                  s(:lvar, :lookup)),
                s(:str, ")\\s*\\(.*?\\).*?\\n\\{\\n(.*)^\\}"),
                s(:regopt, :m))),
            s(:args),
            s(:begin,
              s(:lvasgn, :name,
                s(:nth_ref, 1)),
              s(:lvasgn, :body,
                s(:nth_ref, 2)),
              s(:send,
                s(:lvar, :body), :sub!,
                s(:regexp,
                  s(:str, "\\benum\\s+\\{(\\n[ \\t]+)"),
                  s(:regopt)),
                s(:dstr,
                  s(:dstr,
                    s(:str, "\\&MIN_CODE_VALUE = 0x"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :min), :to_s,
                        s(:int, 16))),
                    s(:str, ",\\1")),
                  s(:dstr,
                    s(:str, "MAX_CODE_VALUE = 0x"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :max), :to_s,
                        s(:int, 16))),
                    s(:str, ",\\1")))),
              s(:send,
                s(:lvar, :body), :gsub!,
                s(:regexp,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :hash)),
                  s(:str, ")\\s*\\(.*?\\)"),
                  s(:regopt)),
                s(:dstr,
                  s(:str, "\\1("),
                  s(:begin,
                    s(:lvar, :argname)),
                  s(:str, ")"))),
              s(:send,
                s(:lvar, :body), :gsub!,
                s(:regexp,
                  s(:str, "\\{\"\",-1}"),
                  s(:regopt)),
                s(:str, "-1")),
              s(:send,
                s(:lvar, :body), :gsub!,
                s(:regexp,
                  s(:str, "\\{\"(?:[^\"]|\\\\\")+\", *::::(.*)\\}"),
                  s(:regopt)),
                s(:str, "\\1")),
              s(:block,
                s(:send,
                  s(:lvar, :body), :sub!,
                  s(:regexp,
                    s(:str, "(\\s+if\\s)\\(len\\b.*\\)"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:send,
                    s(:dstr,
                      s(:nth_ref, 1),
                      s(:str, "(")), :<<,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :arity), :>,
                          s(:int, 1)),
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:begin,
                                s(:erange,
                                  s(:int, 0),
                                  s(:lvar, :arity))), :map),
                            s(:args,
                              s(:arg, :i)),
                            s(:send, nil, :range_check,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :argname)),
                                s(:str, "["),
                                s(:begin,
                                  s(:lvar, :i)),
                                s(:str, "]")))), :join,
                          s(:str, " &&\n      ")),
                        s(:send, nil, :range_check,
                          s(:lvar, :argname))))), :<<,
                  s(:str, ")"))),
              s(:lvasgn, :v,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:lvar, :body), :sub!,
                  s(:regexp,
                    s(:str, "(if\\s*\\(.*MAX_HASH_VALUE.*\\)\\n([ \\t]*))\\{(.*?)\\n\\2\\}"),
                    s(:regopt, :m))),
                s(:args),
                s(:begin,
                  s(:lvasgn, :pre,
                    s(:nth_ref, 1)),
                  s(:lvasgn, :indent,
                    s(:nth_ref, 2)),
                  s(:lvasgn, :s,
                    s(:nth_ref, 3)),
                  s(:send,
                    s(:lvar, :s), :sub!,
                    s(:regexp,
                      s(:str, "const char *\\* *(\\w+)( *= *wordlist\\[\\w+\\]).\\w+"),
                      s(:regopt)),
                    s(:str, "short \\1 = wordlist[key]")),
                  s(:lvasgn, :v,
                    s(:nth_ref, 1)),
                  s(:send,
                    s(:lvar, :s), :sub!,
                    s(:regexp,
                      s(:str, "\\bif *\\(.*\\)"),
                      s(:regopt)),
                    s(:dstr,
                      s(:str, "if ("),
                      s(:begin,
                        s(:lvar, :v)),
                      s(:str, " >= 0 && code"),
                      s(:begin,
                        s(:lvar, :arity)),
                      s(:str, "_equal("),
                      s(:begin,
                        s(:lvar, :argname)),
                      s(:str, ", "),
                      s(:begin,
                        s(:lvar, :key)),
                      s(:str, "_Table["),
                      s(:begin,
                        s(:lvar, :v)),
                      s(:str, "].from))"))),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :pre)),
                    s(:str, "{"),
                    s(:begin,
                      s(:lvar, :s)),
                    s(:str, "\n"),
                    s(:begin,
                      s(:lvar, :indent)),
                    s(:str, "}")))),
              s(:send,
                s(:lvar, :body), :sub!,
                s(:regexp,
                  s(:str, "\\b(return\\s+&)([^;]+);"),
                  s(:regopt)),
                s(:dstr,
                  s(:str, "\\1"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :key)),
                    s(:str, "_Table["),
                    s(:begin,
                      s(:lvar, :v)),
                    s(:str, "].to;")))),
              s(:dstr,
                s(:str, "static const "),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, " *\n"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "("),
                s(:begin,
                  s(:lvar, :argdecl)),
                s(:str, ")\n{\n"),
                s(:begin,
                  s(:lvar, :body)),
                s(:str, "}")))),
          s(:lvar, :src))),
      s(:def, :display,
        s(:args,
          s(:arg, :dest)),
        s(:begin,
          s(:send,
            s(:lvar, :dest), :print,
            s(:str, "/* DO NOT EDIT THIS FILE. */\n")),
          s(:send,
            s(:lvar, :dest), :print,
            s(:str, "/* Generated by enc/unicode/case-folding.rb */\n\n")),
          s(:lvasgn, :name,
            s(:str, "CaseFold_11")),
          s(:lvasgn, :data,
            s(:send, nil, :print_table,
              s(:lvar, :dest),
              s(:lvar, :name),
              s(:hash,
                s(:pair,
                  s(:str, "CaseFold"),
                  s(:send, nil, :fold)),
                s(:pair,
                  s(:str, "CaseFold_Locale"),
                  s(:send, nil, :fold_locale))))),
          s(:send,
            s(:lvar, :dest), :print,
            s(:send, nil, :lookup_hash,
              s(:lvar, :name),
              s(:str, "CodePointList3"),
              s(:lvar, :data))),
          s(:lvasgn, :name,
            s(:str, "CaseUnfold_11")),
          s(:lvasgn, :data,
            s(:send, nil, :print_table,
              s(:lvar, :dest),
              s(:lvar, :name),
              s(:hash,
                s(:pair,
                  s(:lvar, :name),
                  s(:send,
                    s(:send, nil, :unfold), :[],
                    s(:int, 0))),
                s(:pair,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "_Locale")),
                  s(:send,
                    s(:send, nil, :unfold_locale), :[],
                    s(:int, 0)))))),
          s(:send,
            s(:lvar, :dest), :print,
            s(:send, nil, :lookup_hash,
              s(:lvar, :name),
              s(:str, "CodePointList3"),
              s(:lvar, :data))),
          s(:lvasgn, :name,
            s(:str, "CaseUnfold_12")),
          s(:lvasgn, :data,
            s(:send, nil, :print_table,
              s(:lvar, :dest),
              s(:lvar, :name),
              s(:hash,
                s(:pair,
                  s(:lvar, :name),
                  s(:send,
                    s(:send, nil, :unfold), :[],
                    s(:int, 1))),
                s(:pair,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "_Locale")),
                  s(:send,
                    s(:send, nil, :unfold_locale), :[],
                    s(:int, 1)))))),
          s(:send,
            s(:lvar, :dest), :print,
            s(:send, nil, :lookup_hash,
              s(:lvar, :name),
              s(:str, "CodePointList2"),
              s(:lvar, :data))),
          s(:lvasgn, :name,
            s(:str, "CaseUnfold_13")),
          s(:lvasgn, :data,
            s(:send, nil, :print_table,
              s(:lvar, :dest),
              s(:lvar, :name),
              s(:hash,
                s(:pair,
                  s(:lvar, :name),
                  s(:send,
                    s(:send, nil, :unfold), :[],
                    s(:int, 2)))))),
          s(:send,
            s(:lvar, :dest), :print,
            s(:send, nil, :lookup_hash,
              s(:lvar, :name),
              s(:str, "CodePointList2"),
              s(:lvar, :data))))),
      s(:defs,
        s(:self), :load,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:send, nil, :new), :load,
          s(:splat,
            s(:lvar, :args)))))),
  s(:if,
    s(:send,
      s(:gvar, :$0), :==,
      s(:str, "(string)")),
    s(:begin,
      s(:send, nil, :require,
        s(:str, "optparse")),
      s(:lvasgn, :dest,
        s(:nil)),
      s(:lvasgn, :fold_1,
        s(:false)),
      s(:block,
        s(:send,
          s(:const, nil, :ARGV), :options),
        s(:args,
          s(:arg, :opt)),
        s(:begin,
          s(:send,
            s(:send,
              s(:lvar, :opt), :banner), :<<,
            s(:str, " [INPUT]")),
          s(:block,
            s(:send,
              s(:lvar, :opt), :on,
              s(:str, "--output-file=FILE"),
              s(:str, "-o"),
              s(:str, "output to the FILE instead of STDOUT")),
            s(:args,
              s(:arg, :output)),
            s(:lvasgn, :dest,
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :output), :==,
                    s(:str, "-")), nil,
                  s(:lvar, :output))))),
          s(:send,
            s(:lvar, :opt), :parse!),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :ARGV), :size), :>,
              s(:int, 1)),
            s(:send, nil, :abort,
              s(:send,
                s(:lvar, :opt), :to_s)), nil))),
      s(:lvasgn, :filename,
        s(:or,
          s(:send,
            s(:const, nil, :ARGV), :[],
            s(:int, 0)),
          s(:str, "CaseFolding.txt"))),
      s(:lvasgn, :data,
        s(:send,
          s(:const, nil, :CaseFolding), :load,
          s(:lvar, :filename))),
      s(:if,
        s(:lvar, :dest),
        s(:block,
          s(:send, nil, :open,
            s(:lvar, :dest),
            s(:str, "wb")),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :data), :display,
            s(:lvar, :f))),
        s(:send,
          s(:lvar, :data), :display,
          s(:const, nil, :STDOUT)))), nil))
