s(:begin,
  s(:lvasgn, :dir,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../.."),
      s(:str, "(string)"))),
  s(:send,
    s(:gvar, :$:), :unshift,
    s(:lvar, :dir)),
  s(:send,
    s(:gvar, :$:), :unshift,
    s(:str, ".")),
  s(:if,
    s(:send,
      s(:send,
        s(:gvar, :$"), :grep,
        s(:regexp,
          s(:str, "mkmf"),
          s(:regopt))), :empty?),
    s(:begin,
      s(:send,
        s(:gvar, :$"), :<<,
        s(:str, "mkmf.rb")),
      s(:send, nil, :load,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "lib/mkmf.rb"),
          s(:lvar, :dir)))), nil),
  s(:send, nil, :require,
    s(:str, "erb")),
  s(:send,
    s(:const, nil, :CONFIG), :[]=,
    s(:str, "srcdir"),
    s(:send,
      s(:const,
        s(:const, nil, :RbConfig), :CONFIG), :[],
      s(:str, "srcdir"))),
  s(:or_asgn,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "MAKEDIRS")),
    s(:str, "$(MINIRUBY) -run -e mkdir -- -p")),
  s(:casgn, nil, :BUILTIN_ENCS,
    s(:array)),
  s(:casgn, nil, :BUILTIN_TRANSES,
    s(:array)),
  s(:casgn, nil, :ENC_PATTERNS,
    s(:array)),
  s(:casgn, nil, :NOENC_PATTERNS,
    s(:array)),
  s(:casgn, nil, :TRANS_PATTERNS,
    s(:array)),
  s(:casgn, nil, :NOTRANS_PATTERNS,
    s(:array)),
  s(:lvasgn, :module_type,
    s(:sym, :dynamic)),
  s(:until,
    s(:send,
      s(:const, nil, :ARGV), :empty?),
    s(:case,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)),
      s(:when,
        s(:regexp,
          s(:str, "\\A--builtin-encs="),
          s(:regopt)),
        s(:begin,
          s(:send,
            s(:const, nil, :BUILTIN_ENCS), :concat,
            s(:block,
              s(:send,
                s(:send,
                  s(:back_ref, :$'), :split), :map),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :e),
                  s(:str, ".*")), :<<,
                s(:str, ".c")))),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:when,
        s(:regexp,
          s(:str, "\\A--builtin-transes="),
          s(:regopt)),
        s(:begin,
          s(:send,
            s(:const, nil, :BUILTIN_TRANSES), :concat,
            s(:block,
              s(:send,
                s(:send,
                  s(:back_ref, :$'), :split), :map),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :e),
                s(:str, ".*")))),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:when,
        s(:regexp,
          s(:str, "\\A--encs="),
          s(:regopt)),
        s(:begin,
          s(:send,
            s(:const, nil, :ENC_PATTERNS), :concat,
            s(:send,
              s(:back_ref, :$'), :split)),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:when,
        s(:regexp,
          s(:str, "\\A--no-encs="),
          s(:regopt)),
        s(:begin,
          s(:send,
            s(:const, nil, :NOENC_PATTERNS), :concat,
            s(:send,
              s(:back_ref, :$'), :split)),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:when,
        s(:regexp,
          s(:str, "\\A--transes="),
          s(:regopt)),
        s(:begin,
          s(:send,
            s(:const, nil, :TRANS_PATTERNS), :concat,
            s(:send,
              s(:back_ref, :$'), :split)),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:when,
        s(:regexp,
          s(:str, "\\A--no-transes="),
          s(:regopt)),
        s(:begin,
          s(:send,
            s(:const, nil, :NOTRANS_PATTERNS), :concat,
            s(:send,
              s(:back_ref, :$'), :split)),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:when,
        s(:regexp,
          s(:str, "\\A--module$"),
          s(:regopt)),
        s(:send,
          s(:const, nil, :ARGV), :shift)),
      s(:when,
        s(:regexp,
          s(:str, "\\A--modulestatic$"),
          s(:regopt)),
        s(:begin,
          s(:lvasgn, :module_type,
            s(:sym, :static)),
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:break))),
  s(:casgn, nil, :ALPHANUMERIC_ORDER,
    s(:block,
      s(:send, nil, :proc),
      s(:args,
        s(:arg, :e)),
      s(:send,
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :e), :scan,
              s(:regexp,
                s(:str, "(\\d+)|(\\D+)"),
                s(:regopt))), :map),
          s(:args,
            s(:arg, :n),
            s(:arg, :a)),
          s(:or,
            s(:lvar, :a),
            s(:array,
              s(:send,
                s(:lvar, :n), :size),
              s(:send,
                s(:lvar, :n), :to_i)))), :flatten))),
  s(:def, :target_encodings,
    s(:args),
    s(:begin,
      s(:lvasgn, :encs,
        s(:send,
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:gvar, :$srcdir)),
              s(:args,
                s(:arg, :d)),
              s(:send,
                s(:lvar, :d), :grep,
                s(:regexp,
                  s(:str, ".+\\.c\\z"),
                  s(:regopt)))), :-,
            s(:const, nil, :BUILTIN_ENCS)), :-,
          s(:array,
            s(:str, "mktable.c"),
            s(:str, "encinit.c")))),
      s(:block,
        s(:send,
          s(:lvar, :encs), :each),
        s(:args,
          s(:arg, :e)),
        s(:send,
          s(:lvar, :e), :chomp!,
          s(:str, ".c"))),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :ENC_PATTERNS), :empty?), :!),
        s(:block,
          s(:send,
            s(:lvar, :encs), :reject!),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :ENC_PATTERNS), :any?),
              s(:args,
                s(:arg, :p)),
              s(:send,
                s(:const, nil, :File), :fnmatch?,
                s(:lvar, :p),
                s(:lvar, :e))), :!)), nil),
      s(:block,
        s(:send,
          s(:lvar, :encs), :reject!),
        s(:args,
          s(:arg, :e)),
        s(:block,
          s(:send,
            s(:const, nil, :NOENC_PATTERNS), :any?),
          s(:args,
            s(:arg, :p)),
          s(:send,
            s(:const, nil, :File), :fnmatch?,
            s(:lvar, :p),
            s(:lvar, :e)))),
      s(:lvasgn, :encs,
        s(:send,
          s(:lvar, :encs), :sort_by,
          s(:block_pass,
            s(:const, nil, :ALPHANUMERIC_ORDER)))),
      s(:lvasgn, :deps,
        s(:block,
          s(:send,
            s(:const, nil, :Hash), :new),
          s(:args),
          s(:array))),
      s(:lvasgn, :inc_srcs,
        s(:block,
          s(:send,
            s(:const, nil, :Hash), :new),
          s(:args),
          s(:array))),
      s(:lvasgn, :default_deps,
        s(:array,
          s(:str, "regenc.h"),
          s(:str, "oniguruma.h"),
          s(:str, "config.h"),
          s(:str, "defines.h"))),
      s(:send,
        s(:lvar, :encs), :delete,
        s(:lvasgn, :db,
          s(:str, "encdb"))),
      s(:block,
        s(:send,
          s(:lvar, :encs), :each),
        s(:args,
          s(:arg, :e)),
        s(:block,
          s(:send,
            s(:const, nil, :File), :foreach,
            s(:dstr,
              s(:gvar, :$srcdir),
              s(:str, "/"),
              s(:begin,
                s(:lvar, :e)),
              s(:str, ".c"))),
          s(:args,
            s(:arg, :l)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^\\s*#\\s*include\\s+(?:\"([^\\\"]+)\"|<(ruby/\\sw+.h)>)"),
                s(:regopt)),
              s(:lvar, :l)),
            s(:begin,
              s(:lvasgn, :n,
                s(:or,
                  s(:nth_ref, 1),
                  s(:nth_ref, 2))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\.c$"),
                    s(:regopt)),
                  s(:lvar, :n)),
                s(:begin,
                  s(:op_asgn,
                    s(:send,
                      s(:lvar, :inc_srcs), :[],
                      s(:lvar, :e)), :<<,
                    s(:back_ref, :$`)),
                  s(:lvasgn, :n,
                    s(:dstr,
                      s(:str, "enc/"),
                      s(:begin,
                        s(:lvar, :n))))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :default_deps), :include?,
                  s(:lvar, :n)), nil,
                s(:op_asgn,
                  s(:send,
                    s(:lvar, :deps), :[],
                    s(:lvar, :e)), :<<,
                  s(:lvar, :n)))), nil))),
      s(:block,
        s(:send,
          s(:sclass,
            s(:lvar, :inc_srcs),
            s(:self)), :class_eval),
        s(:args),
        s(:block,
          s(:send, nil, :define_method,
            s(:sym, :expand)),
          s(:args,
            s(:arg, :d)),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :d), :map),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:send,
                  s(:lvar, :deps), :[],
                  s(:lvar, :n)), :|,
                s(:send,
                  s(:self), :expand,
                  s(:send,
                    s(:self), :[],
                    s(:lvar, :n))))), :flatten))),
      s(:block,
        s(:send,
          s(:lvar, :inc_srcs), :each),
        s(:args,
          s(:arg, :e),
          s(:arg, :d)),
        s(:send,
          s(:send,
            s(:lvar, :deps), :[],
            s(:lvar, :e)), :concat,
          s(:send,
            s(:lvar, :inc_srcs), :expand,
            s(:lvar, :d)))),
      s(:send,
        s(:lvar, :encs), :unshift,
        s(:lvar, :db)),
      s(:return,
        s(:lvar, :encs),
        s(:lvar, :deps)))),
  s(:def, :target_transcoders,
    s(:args),
    s(:begin,
      s(:lvasgn, :atrans,
        s(:array)),
      s(:lvasgn, :trans,
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :open,
            s(:send,
              s(:gvar, :$srcdir), :+,
              s(:str, "/trans"))),
          s(:args,
            s(:arg, :d)),
          s(:block,
            s(:send,
              s(:lvar, :d), :select),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:lvar, :e), :chomp!,
                s(:str, ".trans")),
              s(:begin,
                s(:send,
                  s(:lvar, :atrans), :<<,
                  s(:lvar, :e)),
                s(:true)),
              s(:if,
                s(:send,
                  s(:lvar, :e), :chomp!,
                  s(:str, ".c")),
                s(:true), nil))))),
      s(:op_asgn,
        s(:lvasgn, :trans), :-,
        s(:const, nil, :BUILTIN_TRANSES)),
      s(:op_asgn,
        s(:lvasgn, :atrans), :-,
        s(:const, nil, :BUILTIN_TRANSES)),
      s(:send,
        s(:lvar, :trans), :uniq!),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :TRANS_PATTERNS), :empty?), :!),
        s(:block,
          s(:send,
            s(:lvar, :atrans), :reject!),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :TRANS_PATTERNS), :any?),
              s(:args,
                s(:arg, :p)),
              s(:send,
                s(:const, nil, :File), :fnmatch?,
                s(:lvar, :p),
                s(:lvar, :e))), :!)), nil),
      s(:block,
        s(:send,
          s(:lvar, :atrans), :reject!),
        s(:args,
          s(:arg, :e)),
        s(:block,
          s(:send,
            s(:const, nil, :NOTRANS_PATTERNS), :any?),
          s(:args,
            s(:arg, :p)),
          s(:send,
            s(:const, nil, :File), :fnmatch?,
            s(:lvar, :p),
            s(:lvar, :e)))),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :TRANS_PATTERNS), :empty?), :!),
        s(:block,
          s(:send,
            s(:lvar, :trans), :reject!),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:block,
              s(:send,
                s(:const, nil, :TRANS_PATTERNS), :any?),
              s(:args,
                s(:arg, :p)),
              s(:send,
                s(:const, nil, :File), :fnmatch?,
                s(:lvar, :p),
                s(:lvar, :e))), :!)), nil),
      s(:block,
        s(:send,
          s(:lvar, :trans), :reject!),
        s(:args,
          s(:arg, :e)),
        s(:block,
          s(:send,
            s(:const, nil, :NOTRANS_PATTERNS), :any?),
          s(:args,
            s(:arg, :p)),
          s(:send,
            s(:const, nil, :File), :fnmatch?,
            s(:lvar, :p),
            s(:lvar, :e)))),
      s(:lvasgn, :atrans,
        s(:send,
          s(:lvar, :atrans), :sort_by,
          s(:block_pass,
            s(:const, nil, :ALPHANUMERIC_ORDER)))),
      s(:lvasgn, :trans,
        s(:send,
          s(:lvar, :trans), :sort_by,
          s(:block_pass,
            s(:const, nil, :ALPHANUMERIC_ORDER)))),
      s(:send,
        s(:lvar, :trans), :delete,
        s(:lvasgn, :db,
          s(:str, "transdb"))),
      s(:send,
        s(:lvar, :trans), :unshift,
        s(:lvar, :db)),
      s(:send,
        s(:lvar, :trans), :compact!),
      s(:op_asgn,
        s(:lvasgn, :trans), :|,
        s(:lvar, :atrans)),
      s(:block,
        s(:send,
          s(:lvar, :trans), :map!),
        s(:args,
          s(:arg, :e)),
        s(:dstr,
          s(:str, "trans/"),
          s(:begin,
            s(:lvar, :e)))),
      s(:return,
        s(:lvar, :atrans),
        s(:lvar, :trans)))),
  s(:casgn, nil, :MODULE_TYPE,
    s(:lvar, :module_type)),
  s(:masgn,
    s(:mlhs,
      s(:casgn, nil, :ENCS),
      s(:casgn, nil, :ENC_DEPS)),
    s(:send, nil, :target_encodings)),
  s(:masgn,
    s(:mlhs,
      s(:casgn, nil, :ATRANS),
      s(:casgn, nil, :TRANS)),
    s(:send, nil, :target_transcoders)),
  s(:if,
    s(:send,
      s(:const, nil, :File), :exist?,
      s(:lvasgn, :depend,
        s(:send,
          s(:const, nil, :File), :join,
          s(:gvar, :$srcdir),
          s(:str, "depend")))),
    s(:begin,
      s(:lvasgn, :erb,
        s(:send,
          s(:const, nil, :ERB), :new,
          s(:send,
            s(:const, nil, :File), :read,
            s(:lvar, :depend)),
          s(:nil),
          s(:str, "%"))),
      s(:send,
        s(:lvar, :erb), :filename=,
        s(:lvar, :depend)),
      s(:lvasgn, :tmp,
        s(:send,
          s(:lvar, :erb), :result,
          s(:send, nil, :binding))),
      s(:lvasgn, :dep,
        s(:send,
          s(:str, "\n#### depend ####\n\n"), :<<,
          s(:send,
            s(:send, nil, :depend_rules,
              s(:lvar, :tmp)), :join)))),
    s(:lvasgn, :dep,
      s(:str, ""))),
  s(:lvasgn, :mkin,
    s(:send,
      s(:const, nil, :File), :read,
      s(:send,
        s(:const, nil, :File), :join,
        s(:gvar, :$srcdir),
        s(:str, "Makefile.in")))),
  s(:block,
    s(:send,
      s(:lvar, :mkin), :gsub!,
      s(:regexp,
        s(:str, "@("),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :keys), :join,
            s(:str, "|"))),
        s(:str, ")@"),
        s(:regopt))),
    s(:args),
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:nth_ref, 1))),
  s(:block,
    s(:send, nil, :open,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)),
      s(:str, "wb")),
    s(:args,
      s(:arg, :f)),
    s(:send,
      s(:lvar, :f), :puts,
      s(:lvar, :mkin),
      s(:lvar, :dep))),
  s(:if,
    s(:send,
      s(:const, nil, :MODULE_TYPE), :==,
      s(:sym, :static)),
    s(:begin,
      s(:lvasgn, :filename,
        s(:str, "encinit.c.erb")),
      s(:lvasgn, :erb,
        s(:send,
          s(:const, nil, :ERB), :new,
          s(:send,
            s(:const, nil, :File), :read,
            s(:send,
              s(:const, nil, :File), :join,
              s(:gvar, :$srcdir),
              s(:lvar, :filename))),
          s(:nil),
          s(:str, "%-"))),
      s(:send,
        s(:lvar, :erb), :filename=,
        s(:dstr,
          s(:str, "enc/"),
          s(:begin,
            s(:lvar, :filename)))),
      s(:lvasgn, :tmp,
        s(:send,
          s(:lvar, :erb), :result,
          s(:send, nil, :binding))),
      s(:kwbegin,
        s(:rescue,
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:str, "enc")),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :EEXIST)), nil, nil), nil)),
      s(:block,
        s(:send,
          s(:const, nil, :File), :open,
          s(:str, "enc/encinit.c"),
          s(:str, "w")),
        s(:args,
          s(:arg, :f)),
        s(:begin,
          s(:send,
            s(:lvar, :f), :puts,
            s(:str, "/* Automatically generated from enc/encinit.c.erb")),
          s(:send,
            s(:lvar, :f), :puts,
            s(:str, " * Do not edit.")),
          s(:send,
            s(:lvar, :f), :puts,
            s(:str, " */")),
          s(:send,
            s(:lvar, :f), :puts,
            s(:lvar, :tmp))))), nil))
