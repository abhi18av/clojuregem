s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:casgn, nil, :TkLib_Config,
    s(:hash)),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "search_versions"),
    s(:array,
      s(:str, "8.6"),
      s(:str, "8.5"),
      s(:str, "8.4"))),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "unsupported_versions"),
    s(:array,
      s(:str, "8.8"),
      s(:str, "8.7"))),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "major_nums"),
    s(:str, "87")),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "enable-shared"),
    s(:send, nil, :enable_config,
      s(:str, "shared"))),
  s(:if,
    s(:send, nil, :with_config,
      s(:str, "tk-old-extconf")),
    s(:begin,
      s(:send, nil, :require,
        s(:send,
          s(:const, nil, :File), :join,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")),
          s(:str, "old-extconf.rb"))),
      s(:send, nil, :exit)), nil),
  s(:send,
    s(:begin,
      s(:or_asgn,
        s(:gvasgn, :$cleanfiles),
        s(:str, ""))), :<<,
    s(:str, "config_list")),
  s(:lvasgn, :config_list_file,
    s(:str, "config_list")),
  s(:lvasgn, :config_list_file_source,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")),
      s(:str, "config_list.in"))),
  s(:if,
    s(:or,
      s(:send,
        s(:send,
          s(:const, nil, :File), :exist?,
          s(:lvar, :config_list_file)), :!),
      s(:send,
        s(:send,
          s(:const, nil, :File), :ctime,
          s(:lvar, :config_list_file_source)), :>,
        s(:send,
          s(:const, nil, :File), :ctime,
          s(:lvar, :config_list_file)))),
    s(:lvasgn, :old_config_list_file,
      s(:lvar, :config_list_file_source)),
    s(:lvasgn, :old_config_list_file,
      s(:lvar, :config_list_file))),
  s(:lvasgn, :current_configs,
    s(:hash,
      s(:pair,
        s(:str, "with"),
        s(:hash)),
      s(:pair,
        s(:str, "enable"),
        s(:hash)))),
  s(:block,
    s(:send,
      s(:const, nil, :IO), :foreach,
      s(:lvar, :config_list_file_source)),
    s(:args,
      s(:arg, :line)),
    s(:begin,
      s(:send,
        s(:lvar, :line), :chomp!),
      s(:send,
        s(:lvar, :line), :lstrip!),
      s(:if,
        s(:or,
          s(:send,
            s(:lvar, :line), :empty?),
          s(:send,
            s(:lvar, :line), :=~,
            s(:regexp,
              s(:str, "^\\#"),
              s(:regopt)))),
        s(:next), nil),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :mode),
          s(:lvasgn, :key),
          s(:lvasgn, :value)),
        s(:send,
          s(:lvar, :line), :split,
          s(:regexp,
            s(:str, "\\s+"),
            s(:regopt)),
          s(:int, 3))),
      s(:or_asgn,
        s(:lvasgn, :value),
        s(:str, "")),
      s(:send,
        s(:send,
          s(:lvar, :current_configs), :[],
          s(:lvar, :mode)), :[]=,
        s(:lvar, :key),
        s(:rescue,
          s(:lvar, :value),
          s(:resbody, nil, nil,
            s(:nil)), nil)))),
  s(:block,
    s(:send,
      s(:const, nil, :IO), :foreach,
      s(:lvar, :old_config_list_file)),
    s(:args,
      s(:arg, :line)),
    s(:begin,
      s(:send,
        s(:lvar, :line), :chomp!),
      s(:send,
        s(:lvar, :line), :lstrip!),
      s(:if,
        s(:or,
          s(:send,
            s(:lvar, :line), :empty?),
          s(:send,
            s(:lvar, :line), :=~,
            s(:regexp,
              s(:str, "^\\#"),
              s(:regopt)))),
        s(:next), nil),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :mode),
          s(:lvasgn, :key),
          s(:lvasgn, :value)),
        s(:send,
          s(:lvar, :line), :split,
          s(:regexp,
            s(:str, "\\s+"),
            s(:regopt)),
          s(:int, 3))),
      s(:or_asgn,
        s(:lvasgn, :value),
        s(:str, "")),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :current_configs), :[],
            s(:lvar, :mode)),
          s(:send,
            s(:send,
              s(:lvar, :current_configs), :[],
              s(:lvar, :mode)), :has_key?,
            s(:lvar, :key))),
        s(:send,
          s(:send,
            s(:lvar, :current_configs), :[],
            s(:lvar, :mode)), :[]=,
          s(:lvar, :key),
          s(:lvar, :value)), nil))),
  s(:lvasgn, :update_flag,
    s(:false)),
  s(:block,
    s(:send,
      s(:send,
        s(:lvar, :current_configs), :[],
        s(:str, "with")), :each_key),
    s(:args,
      s(:arg, :key)),
    s(:if,
      s(:send,
        s(:begin,
          s(:lvasgn, :value,
            s(:send,
              s(:send, nil, :with_config,
                s(:lvar, :key)), :to_s))), :!=,
        s(:send,
          s(:send,
            s(:lvar, :current_configs), :[],
            s(:str, "with")), :[],
          s(:lvar, :key))),
      s(:begin,
        s(:lvasgn, :update_flag,
          s(:true)),
        s(:send,
          s(:send,
            s(:lvar, :current_configs), :[],
            s(:str, "with")), :[]=,
          s(:lvar, :key),
          s(:lvar, :value))), nil)),
  s(:block,
    s(:send,
      s(:send,
        s(:lvar, :current_configs), :[],
        s(:str, "enable")), :each_key),
    s(:args,
      s(:arg, :key)),
    s(:if,
      s(:send,
        s(:begin,
          s(:lvasgn, :value,
            s(:send,
              s(:send, nil, :enable_config,
                s(:lvar, :key)), :to_s))), :!=,
        s(:send,
          s(:send,
            s(:lvar, :current_configs), :[],
            s(:str, "enable")), :[],
          s(:lvar, :key))),
      s(:begin,
        s(:lvasgn, :update_flag,
          s(:true)),
        s(:send,
          s(:send,
            s(:lvar, :current_configs), :[],
            s(:str, "enable")), :[]=,
          s(:lvar, :key),
          s(:lvar, :value))), nil)),
  s(:if,
    s(:or,
      s(:lvar, :update_flag),
      s(:send,
        s(:send,
          s(:const, nil, :File), :exist?,
          s(:lvar, :config_list_file)), :!)),
    s(:block,
      s(:send, nil, :open,
        s(:lvar, :config_list_file),
        s(:str, "w")),
      s(:args,
        s(:arg, :fobj)),
      s(:begin,
        s(:send,
          s(:lvar, :fobj), :print,
          s(:str, "# values of current configure options (generated by extconf.rb)\n")),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "with"),
              s(:str, "enable")), :each),
          s(:args,
            s(:arg, :mode)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :current_configs), :[],
                s(:lvar, :mode)), :each_key),
            s(:args,
              s(:arg, :key)),
            s(:send,
              s(:lvar, :fobj), :print,
              s(:dstr,
                s(:begin,
                  s(:lvar, :mode)),
                s(:str, " "),
                s(:begin,
                  s(:lvar, :key)),
                s(:str, " "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :current_configs), :[],
                      s(:lvar, :mode)), :[],
                    s(:lvar, :key))),
                s(:str, "\n"))))))), nil),
  s(:if,
    s(:lvar, :update_flag),
    s(:begin,
      s(:send, nil, :puts,
        s(:str, "Configure options for Ruby/Tk may be updated.")),
      s(:send, nil, :puts,
        s(:str, "So, delete files which depend on old configs.")),
      s(:send,
        s(:const, nil, :File), :delete,
        s(:splat,
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:dstr,
              s(:str, "*."),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "DLEXT")))),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)))),
      s(:send,
        s(:const, nil, :File), :delete,
        s(:splat,
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:dstr,
              s(:str, "*."),
              s(:begin,
                s(:gvar, :$OBJEXT))),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)))),
      s(:rescue,
        s(:send,
          s(:const, nil, :File), :delete,
          s(:str, "Makefile")),
        s(:resbody, nil, nil,
          s(:nil)), nil)),
    s(:begin,
      s(:lvasgn, :makefile,
        s(:str, "Makefile")),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:lvar, :makefile)),
          s(:send,
            s(:send,
              s(:const, nil, :File), :ctime,
              s(:lvar, :config_list_file)), :>,
            s(:send,
              s(:const, nil, :File), :ctime,
              s(:lvar, :makefile)))),
        s(:send, nil, :exit), nil))),
  s(:def, :is_win32?,
    s(:args),
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "mswin|mingw|cygwin|bccwin"),
        s(:regopt)),
      s(:const, nil, :RUBY_PLATFORM))),
  s(:def, :is_macosx?,
    s(:args),
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "darwin"),
        s(:regopt)),
      s(:const, nil, :RUBY_PLATFORM))),
  s(:def, :maybe_64bit?,
    s(:args),
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "64|universal|s390x"),
        s(:regopt)),
      s(:const, nil, :RUBY_PLATFORM))),
  s(:def, :check_tcltk_version,
    s(:args,
      s(:arg, :version)),
    s(:begin,
      s(:if,
        s(:send,
          s(:lvar, :version), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:return,
          s(:array,
            s(:nil),
            s(:nil)))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :tclver),
          s(:lvasgn, :tkver)),
        s(:send,
          s(:lvar, :version), :split,
          s(:str, ","))),
      s(:lvasgn, :tclver,
        s(:send,
          s(:lvar, :tclver), :strip)),
      s(:if,
        s(:lvar, :tkver),
        s(:return,
          s(:array,
            s(:lvar, :tclver),
            s(:send,
              s(:lvar, :tkver), :strip))), nil),
      s(:lvasgn, :dot,
        s(:lvasgn, :major,
          s(:lvasgn, :minor_dot,
            s(:lvasgn, :minor,
              s(:lvasgn, :plvl_dot,
                s(:lvasgn, :plvl,
                  s(:lvasgn, :ext,
                    s(:nil)))))))),
      s(:if,
        s(:send,
          s(:lvar, :tclver), :=~,
          s(:regexp,
            s(:str, "^(\\d)(\\.?)(\\d)(\\.?)(\\d*)(.*)$"),
            s(:regopt))),
        s(:begin,
          s(:lvasgn, :major,
            s(:nth_ref, 1)),
          s(:lvasgn, :minor_dot,
            s(:nth_ref, 2)),
          s(:lvasgn, :minor,
            s(:nth_ref, 3)),
          s(:lvasgn, :plvl_dot,
            s(:nth_ref, 4)),
          s(:lvasgn, :plvl,
            s(:nth_ref, 5)),
          s(:lvasgn, :ext,
            s(:nth_ref, 6)),
          s(:lvasgn, :dot,
            s(:send,
              s(:send,
                s(:lvar, :minor_dot), :empty?), :!)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :plvl_dot), :empty?),
              s(:send,
                s(:send,
                  s(:lvar, :plvl), :empty?), :!)),
            s(:send,
              s(:lvar, :minor), :<<,
              s(:lvar, :plvl)), nil)),
        s(:if,
          s(:send,
            s(:lvar, :tclver), :=~,
            s(:regexp,
              s(:str, "^(\\d)(\\.?)(\\d?)(.*)$"),
              s(:regopt))),
          s(:begin,
            s(:lvasgn, :major,
              s(:nth_ref, 1)),
            s(:lvasgn, :minor_dot,
              s(:nth_ref, 2)),
            s(:lvasgn, :minor,
              s(:nth_ref, 3)),
            s(:lvasgn, :ext,
              s(:nth_ref, 4)),
            s(:lvasgn, :dot,
              s(:send,
                s(:send,
                  s(:lvar, :minor_dot), :empty?), :!))),
          s(:return,
            s(:array,
              s(:lvar, :tclver),
              s(:lvar, :tkver))))),
      s(:if,
        s(:send,
          s(:lvar, :major), :==,
          s(:str, "7")),
        s(:lvasgn, :tkver,
          s(:send,
            s(:send,
              s(:send,
                s(:str, "4"), :+,
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:lvar, :dot)),
                    s(:str, "."),
                    s(:str, "")))), :+,
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :minor), :empty)),
                  s(:str, ""),
                  s(:str, "2")))), :+,
            s(:lvar, :ext))),
        s(:if,
          s(:send,
            s(:lvar, :major), :==,
            s(:str, "4")),
          s(:begin,
            s(:lvasgn, :tkver,
              s(:lvar, :tclver)),
            s(:lvasgn, :tclver,
              s(:send,
                s(:send,
                  s(:send,
                    s(:str, "7"), :+,
                    s(:begin,
                      s(:if,
                        s(:begin,
                          s(:lvar, :dot)),
                        s(:str, "."),
                        s(:str, "")))), :+,
                  s(:begin,
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:lvar, :minor), :empty)),
                      s(:str, ""),
                      s(:str, "6")))), :+,
                s(:lvar, :ext)))), nil)),
      s(:if,
        s(:lvar, :tkver), nil,
        s(:lvasgn, :tkver,
          s(:lvar, :tclver))),
      s(:array,
        s(:lvar, :tclver),
        s(:lvar, :tkver)))),
  s(:def, :get_shlib_versions,
    s(:args,
      s(:optarg, :major,
        s(:int, 8)),
      s(:optarg, :minor_max,
        s(:int, 9)),
      s(:optarg, :minor_min,
        s(:int, 0)),
      s(:optarg, :ext,
        s(:str, ""))),
    s(:begin,
      s(:if,
        s(:lvasgn, :tclcfg,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tclConfig_info"))),
        s(:begin,
          s(:lvasgn, :major,
            s(:send,
              s(:send,
                s(:lvar, :tclcfg), :[],
                s(:str, "TCL_MAJOR_VERSION")), :to_i)),
          s(:lvasgn, :minor_min,
            s(:send,
              s(:send,
                s(:lvar, :tclcfg), :[],
                s(:str, "TCL_MINOR_VERSION")), :to_i))),
        s(:if,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcltkversion")),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :tclver),
                s(:lvasgn, :tkver)),
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcltkversion"))),
            s(:if,
              s(:send,
                s(:lvar, :tclver), :=~,
                s(:regexp,
                  s(:str, "8\\.?(\\d)(.*)"),
                  s(:regopt))),
              s(:begin,
                s(:lvasgn, :minor_min,
                  s(:send,
                    s(:nth_ref, 1), :to_i)),
                s(:lvasgn, :ext,
                  s(:nth_ref, 2))),
              s(:return,
                s(:array,
                  s(:str, ""))))), nil)),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcltk-stubs")), nil,
        s(:lvasgn, :minor_max,
          s(:lvar, :minor_min))),
      s(:lvasgn, :vers,
        s(:array)),
      s(:block,
        s(:send,
          s(:lvar, :minor_max), :downto,
          s(:lvar, :minor_min)),
        s(:args,
          s(:arg, :minor)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :ext), :empty?), nil,
            s(:send,
              s(:lvar, :vers), :<<,
              s(:dstr,
                s(:begin,
                  s(:lvar, :major)),
                s(:str, "."),
                s(:begin,
                  s(:lvar, :minor)),
                s(:begin,
                  s(:lvar, :ext))))),
          s(:send,
            s(:lvar, :vers), :<<,
            s(:dstr,
              s(:begin,
                s(:lvar, :major)),
              s(:str, "."),
              s(:begin,
                s(:lvar, :minor)))))),
      s(:send,
        s(:lvar, :vers), :<<,
        s(:str, "")))),
  s(:def, :get_shlib_path_head,
    s(:args),
    s(:begin,
      s(:lvasgn, :path_head,
        s(:array)),
      s(:lvasgn, :path_dirs,
        s(:array)),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "ActiveTcl")), :kind_of?,
          s(:const, nil, :String)),
        s(:send,
          s(:lvar, :path_head), :concat,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "ActiveTcl")),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)), :sort), :reverse)), nil),
      s(:if,
        s(:const, nil, :CROSS_COMPILING), nil,
        s(:if,
          s(:send, nil, :is_win32?),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "ActiveTcl")),
              s(:send,
                s(:lvar, :path_head), :concat,
                s(:array,
                  s(:str, "c:/ActiveTcl"),
                  s(:str, "c:/Program Files/ActiveTcl"),
                  s(:str, "c:/Program Files (x86)/ActiveTcl"))), nil),
            s(:send,
              s(:lvar, :path_head), :concat,
              s(:array,
                s(:str, "c:/Tcl"),
                s(:str, "c:/Program Files/Tcl"),
                s(:str, "c:/Program Files (x86)/Tcl"),
                s(:str, "/Tcl"),
                s(:str, "/Program Files/Tcl"),
                s(:str, "/Program Files (x86)/Tcl"))),
            s(:send,
              s(:lvar, :path_head), :uniq!),
            s(:block,
              s(:send,
                s(:lvar, :path_head), :each),
              s(:args,
                s(:arg, :dir)),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :dir)),
                s(:send,
                  s(:lvar, :path_dirs), :<<,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :dir))), nil)),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "/usr/local/lib64"),
                  s(:str, "/usr/lib64"),
                  s(:str, "/usr/local/lib"),
                  s(:str, "/usr/lib")), :each),
              s(:args,
                s(:arg, :dir)),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :dir)),
                s(:send,
                  s(:lvar, :path_dirs), :<<,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :dir))), nil)),
            s(:if,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "LIBRARY_PATH")),
              s(:op_asgn,
                s(:lvasgn, :path_dirs), :|,
                s(:block,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :ENV), :[],
                            s(:str, "LIBRARY_PATH")), :split,
                          s(:str, ";")), :find_all),
                      s(:args,
                        s(:arg, :dir)),
                      s(:send,
                        s(:const, nil, :File), :directory?,
                        s(:lvar, :dir))), :map),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :dir)))), nil),
            s(:if,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PATH")),
              s(:op_asgn,
                s(:lvasgn, :path_dirs), :|,
                s(:block,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :ENV), :[],
                            s(:str, "PATH")), :split,
                          s(:str, ";")), :find_all),
                      s(:args,
                        s(:arg, :dir)),
                      s(:send,
                        s(:const, nil, :File), :directory?,
                        s(:lvar, :dir))), :map),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :dir)))), nil)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "/opt"),
                s(:str, "/pkg"),
                s(:str, "/share"),
                s(:str, "/usr/local/opt"),
                s(:str, "/usr/local/pkg"),
                s(:str, "/usr/local/share"),
                s(:str, "/usr/local"),
                s(:str, "/usr/opt"),
                s(:str, "/usr/pkg"),
                s(:str, "/usr/share"),
                s(:str, "/usr/contrib"),
                s(:str, "/usr")), :each),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :dir)), nil,
                s(:next)),
              s(:if,
                s(:send, nil, :maybe_64bit?),
                s(:send,
                  s(:lvar, :path_dirs), :<<,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dir)),
                    s(:str, "/lib64"))), nil),
              s(:send,
                s(:lvar, :path_dirs), :<<,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :dir)),
                  s(:str, "/lib"))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :dir)),
                      s(:str, "/lib*.*")),
                    s(:const,
                      s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), nil,
                s(:send,
                  s(:lvar, :path_dirs), :<<,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dir))))),
              s(:lvasgn, :dirnames,
                s(:array)),
              s(:if,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "ActiveTcl")),
                s(:send,
                  s(:lvar, :dirnames), :concat,
                  s(:array,
                    s(:str, "ActiveTcl"))), nil),
              s(:send,
                s(:lvar, :dirnames), :concat,
                s(:array,
                  s(:str, "TclTk"),
                  s(:str, "Tcl_Tk"),
                  s(:str, "Tcl-Tk"))),
              s(:block,
                s(:send,
                  s(:lvar, :dirnames), :each),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :dir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:lvar, :name)))),
                    s(:send,
                      s(:lvar, :path_dirs), :<<,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :dir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:lvar, :name)))), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Dir), :glob,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :dir)),
                          s(:str, "/"),
                          s(:begin,
                            s(:lvar, :name)),
                          s(:str, "[-89_]*")),
                        s(:const,
                          s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), nil,
                    s(:send,
                      s(:lvar, :path_head), :<<,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :dir)),
                        s(:str, "/"),
                        s(:begin,
                          s(:lvar, :name))))))))))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "space-on-tk-libpath")), nil,
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :path_head), :delete_if),
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:lvar, :path), :=~,
              s(:regexp,
                s(:str, " "),
                s(:regopt)))),
          s(:block,
            s(:send,
              s(:lvar, :path_dirs), :delete_if),
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:lvar, :path), :=~,
              s(:regexp,
                s(:str, " "),
                s(:regopt)))))),
      s(:array,
        s(:lvar, :path_head),
        s(:lvar, :path_dirs)))),
  s(:def, :find_macosx_framework,
    s(:args),
    s(:begin,
      s(:lvasgn, :use_framework,
        s(:and,
          s(:send, nil, :is_macosx?),
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "ActiveTcl")))),
      s(:or_asgn,
        s(:lvasgn, :use_framework),
        s(:begin,
          s(:lvasgn, :tcl_hdr,
            s(:send, nil, :with_config,
              s(:str, "tcl-framework-header"))))),
      s(:or_asgn,
        s(:lvasgn, :use_framework),
        s(:begin,
          s(:lvasgn, :tk_hdr,
            s(:send, nil, :with_config,
              s(:str, "tk-framework-header"))))),
      s(:if,
        s(:send,
          s(:lvar, :tcl_hdr), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tcl_hdr,
          s(:nil))),
      s(:if,
        s(:send,
          s(:lvar, :tk_hdr), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tk_hdr,
          s(:nil))),
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tcl-framework-header"),
        s(:lvar, :tcl_hdr)),
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tk-framework-header"),
        s(:lvar, :tk_hdr)),
      s(:or_asgn,
        s(:lvasgn, :use_framework),
        s(:begin,
          s(:lvasgn, :tcl_dir,
            s(:send, nil, :with_config,
              s(:str, "tcl-framework-dir"))))),
      s(:if,
        s(:send,
          s(:lvar, :tcl_dir), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tcl_dir,
          s(:nil))),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :tcl_dir), :!),
          s(:lvar, :tcl_hdr)),
        s(:lvasgn, :tcl_dir,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:send,
              s(:send,
                s(:lvar, :tcl_hdr), :strip), :chomp,
              s(:str, "/")))), nil),
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tcl-framework-dir"),
        s(:lvar, :tcl_dir)),
      s(:or_asgn,
        s(:lvasgn, :use_framework),
        s(:begin,
          s(:lvasgn, :tk_dir,
            s(:send, nil, :with_config,
              s(:str, "tk-framework-dir"))))),
      s(:if,
        s(:send,
          s(:lvar, :tk_dir), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tk_dir,
          s(:nil))),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :tk_dir), :!),
          s(:lvar, :tk_hdr)),
        s(:lvasgn, :tk_dir,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:send,
              s(:send,
                s(:lvar, :tk_hdr), :strip), :chomp,
              s(:str, "/")))), nil),
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tk-framework-dir"),
        s(:lvar, :tk_dir)),
      s(:if,
        s(:and,
          s(:lvar, :tcl_dir),
          s(:send,
            s(:lvar, :tk_dir), :!)),
        s(:begin,
          s(:lvasgn, :tk_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :tcl_dir)),
              s(:str, "Tk.framework"))),
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tk-framework-dir"),
            s(:lvar, :tk_dir))),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :tcl_dir), :!),
            s(:lvar, :tk_dir)),
          s(:begin,
            s(:lvasgn, :tcl_dir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :tk_dir)),
                s(:str, "Tcl.framework"))),
            s(:send,
              s(:const, nil, :TkLib_Config), :[]=,
              s(:str, "tcl-framework-dir"),
              s(:lvar, :tcl_dir))), nil)),
      s(:if,
        s(:and,
          s(:lvar, :tcl_dir),
          s(:lvar, :tk_dir)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tcltk-framework")), nil,
            s(:send,
              s(:const, nil, :TkLib_Config), :[]=,
              s(:str, "tcltk-framework"),
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :tcl_dir)))),
          s(:return,
            s(:array,
              s(:lvar, :tcl_dir),
              s(:lvar, :tk_dir)))), nil),
      s(:if,
        s(:or,
          s(:send,
            s(:send, nil, :with_config,
              s(:str, "tcltk-framework")), :==,
            s(:false)),
          s(:send,
            s(:send, nil, :enable_config,
              s(:str, "tcltk-framework")), :==,
            s(:false))),
        s(:return,
          s(:false)), nil),
      s(:or_asgn,
        s(:lvasgn, :use_framework),
        s(:begin,
          s(:lvasgn, :framework_dir,
            s(:send, nil, :with_config,
              s(:str, "tcltk-framework"))))),
      s(:if,
        s(:send,
          s(:lvar, :framework_dir), :kind_of?,
          s(:const, nil, :String)),
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tcltk-framework"),
            s(:send,
              s(:send,
                s(:lvar, :framework_dir), :strip), :chomp,
              s(:str, "/"))),
          s(:return,
            s(:array,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "tcltk-framework")),
                s(:str, "Tcl.framework")),
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "tcltk-framework")),
                s(:str, "Tk.framework"))))), nil),
      s(:if,
        s(:or,
          s(:send, nil, :enable_config,
            s(:str, "tcltk-framework"),
            s(:lvar, :use_framework)),
          s(:send, nil, :enable_config,
            s(:str, "mac-tcltk-framework"),
            s(:lvar, :use_framework))), nil,
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tcltk-framework"),
            s(:false)),
          s(:return,
            s(:false)))),
      s(:lvasgn, :paths,
        s(:array,
          s(:str, "/Library/Frameworks"),
          s(:str, "/Network/Library/Frameworks"),
          s(:str, "/System/Library/Frameworks"))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "ActiveTcl")), nil,
        s(:send,
          s(:lvar, :paths), :reverse!)),
      s(:block,
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :paths), :map),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:send,
                s(:lvar, :dir), :strip), :chomp,
              s(:str, "/"))), :each),
        s(:args,
          s(:arg, :dir)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dir),
                s(:str, "Tcl.framework"),
                s(:str, "Headers"))), nil,
            s(:next)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvasgn, :tcldir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:str, "Tcl.framework")))), nil,
            s(:next)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dir),
                s(:str, "Tk.framework"),
                s(:str, "Headers"))), nil,
            s(:next)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvasgn, :tkdir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:str, "Tk.framework")))), nil,
            s(:next)),
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tcltk-framework"),
            s(:lvar, :dir)),
          s(:return,
            s(:array,
              s(:lvar, :tcldir),
              s(:lvar, :tkdir))))),
      s(:nil))),
  s(:def, :collect_tcltk_defs,
    s(:args,
      s(:arg, :tcl_defs_str),
      s(:arg, :tk_defs_str)),
    s(:begin,
      s(:lvasgn, :conflicts,
        s(:array,
          s(:str, "PACKAGE_NAME"),
          s(:str, "PACKAGE_TARNAME"),
          s(:str, "PACKAGE_VERSION"),
          s(:str, "PACKAGE_STRING"),
          s(:str, "PACKAGE_BUGREPORT"))),
      s(:kwbegin,
        s(:rescue,
          s(:begin,
            s(:lvasgn, :arch_config_h,
              s(:send,
                s(:const, nil, :RbConfig), :expand,
                s(:send,
                  s(:gvar, :$arch_hdrdir), :+,
                  s(:str, "/ruby/config.h")))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :arch_config_h)),
              s(:begin,
                s(:lvasgn, :keys,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:const, nil, :IO), :foreach,
                    s(:lvar, :arch_config_h)),
                  s(:args,
                    s(:arg, :line)),
                  s(:if,
                    s(:send,
                      s(:lvar, :line), :=~,
                      s(:regexp,
                        s(:str, "^#define +([^ ]+)"),
                        s(:regopt))),
                    s(:send,
                      s(:lvar, :keys), :<<,
                      s(:nth_ref, 1)), nil)),
                s(:lvasgn, :conflicts,
                  s(:lvar, :keys))), nil)),
          s(:resbody, nil, nil, nil), nil)),
      s(:if,
        s(:lvar, :tcl_defs_str),
        s(:lvasgn, :tcl_defs,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :tcl_defs_str), :split,
                s(:regexp,
                  s(:str, " ?-D"),
                  s(:regopt))), :map),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :=~,
                s(:regexp,
                  s(:str, "^([^=]+)(.*)$"),
                  s(:regopt))),
              s(:array,
                s(:nth_ref, 1),
                s(:nth_ref, 2))))),
        s(:lvasgn, :tcl_defs,
          s(:array))),
      s(:if,
        s(:lvar, :tk_defs_str),
        s(:lvasgn, :tk_defs,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :tk_defs_str), :split,
                s(:regexp,
                  s(:str, " ?-D"),
                  s(:regopt))), :map),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :=~,
                s(:regexp,
                  s(:str, "^([^=]+)(.*)$"),
                  s(:regopt))),
              s(:array,
                s(:nth_ref, 1),
                s(:nth_ref, 2))))),
        s(:lvasgn, :tk_defs,
          s(:array))),
      s(:lvasgn, :defs,
        s(:send,
          s(:lvar, :tcl_defs), :|,
          s(:lvar, :tk_defs))),
      s(:block,
        s(:send,
          s(:lvar, :defs), :delete_if),
        s(:args,
          s(:arg, :name),
          s(:arg, :value)),
        s(:or,
          s(:send,
            s(:lvar, :conflicts), :include?,
            s(:lvar, :name)),
          s(:begin,
            s(:and,
              s(:and,
                s(:begin,
                  s(:lvasgn, :vtcl,
                    s(:send,
                      s(:lvar, :tcl_defs), :assoc,
                      s(:lvar, :name)))),
                s(:begin,
                  s(:lvasgn, :vtk,
                    s(:send,
                      s(:lvar, :tk_defs), :assoc,
                      s(:lvar, :name))))),
              s(:send,
                s(:lvar, :vtcl), :!=,
                s(:lvar, :vtk)))))),
      s(:block,
        s(:send,
          s(:lvar, :defs), :map),
        s(:args,
          s(:arg, :ary)),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :ary), :join,
              s(:str, ""))),
          s(:if,
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :s), :strip), :empty?)),
            s(:str, ""),
            s(:send,
              s(:str, "-D"), :<<,
              s(:lvar, :s))))))),
  s(:def, :parse_tclConfig,
    s(:args,
      s(:arg, :file)),
    s(:begin,
      s(:lvasgn, :tbl,
        s(:block,
          s(:send,
            s(:const, nil, :Hash), :new),
          s(:args,
            s(:arg, :h),
            s(:arg, :k)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:lvar, :k),
            s(:str, "")))),
      s(:if,
        s(:lvar, :file), nil,
        s(:return,
          s(:lvar, :tbl))),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:lvar, :file)),
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:send,
            s(:lvar, :line), :strip!),
          s(:if,
            s(:send,
              s(:lvar, :line), :!~,
              s(:regexp,
                s(:str, "^([^\\#=][^=]*)=(['\"]|)(.*)\\2$"),
                s(:regopt))),
            s(:next), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :key),
              s(:lvasgn, :val)),
            s(:array,
              s(:nth_ref, 1),
              s(:nth_ref, 3))),
          s(:send,
            s(:lvar, :tbl), :[]=,
            s(:lvar, :key),
            s(:rescue,
              s(:block,
                s(:send,
                  s(:lvar, :val), :gsub,
                  s(:regexp,
                    s(:str, "\\$\\{([^}]+)\\}"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:lvasgn, :subst,
                    s(:nth_ref, 1)),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :tbl), :[],
                        s(:lvar, :subst))),
                    s(:send,
                      s(:lvar, :tbl), :[],
                      s(:lvar, :subst)),
                    s(:lvar, :s)))),
              s(:resbody, nil, nil,
                s(:nil)), nil)))),
      s(:lvar, :tbl))),
  s(:def, :get_libpath,
    s(:args,
      s(:arg, :lib_flag),
      s(:arg, :lib_spec)),
    s(:send,
      s(:send,
        s(:lvar, :lib_spec), :gsub,
        s(:regexp,
          s(:str, "("),
          s(:begin,
            s(:lvar, :lib_flag)),
          s(:str, "|-L)"),
          s(:regopt)),
        s(:str, "")), :strip)),
  s(:def, :get_tclConfig_dirs,
    s(:args),
    s(:begin,
      s(:lvasgn, :config_dir,
        s(:array)),
      s(:if,
        s(:const, nil, :CROSS_COMPILING), nil,
        s(:if,
          s(:send, nil, :is_win32?),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "ActiveTcl")),
              s(:begin,
                s(:lvasgn, :dirs,
                  s(:array)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :TkLib_Config), :[],
                      s(:str, "ActiveTcl")), :kind_of?,
                    s(:const, nil, :String)),
                  s(:send,
                    s(:lvar, :dirs), :<<,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send,
                        s(:const, nil, :TkLib_Config), :[],
                        s(:str, "ActiveTcl")),
                      s(:str, "lib"))), nil),
                s(:send,
                  s(:lvar, :dirs), :concat,
                  s(:array,
                    s(:str, "c:/ActiveTcl*/lib"),
                    s(:str, "c:/Tcl*/lib"),
                    s(:str, "c:/Program Files*/ActiveTcl*/lib"),
                    s(:str, "c:/Program Files*/Tcl*/lib"),
                    s(:str, "/ActiveTcl*/lib"),
                    s(:str, "/Tcl*/lib"),
                    s(:str, "/Program Files*/ActiveTcl*/lib"),
                    s(:str, "/Program Files*/Tcl*/lib")))),
              s(:lvasgn, :dirs,
                s(:array,
                  s(:str, "c:/Tcl*/lib"),
                  s(:str, "c:/Program Files*/Tcl*/lib"),
                  s(:str, "/Tcl*/lib"),
                  s(:str, "/Program Files*/Tcl*/lib")))),
            s(:lvasgn, :dirs,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :dirs), :collect),
                    s(:args,
                      s(:arg, :d)),
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:lvar, :d),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD))), :flatten), :uniq)),
            s(:if,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "LIBRARY_PATH")),
              s(:op_asgn,
                s(:lvasgn, :dirs), :|,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "LIBRARY_PATH")), :split,
                  s(:str, ";"))), nil),
            s(:if,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PATH")),
              s(:op_asgn,
                s(:lvasgn, :dirs), :|,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "PATH")), :split,
                  s(:str, ";"))), nil),
            s(:lvasgn, :exeext,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "EXEEXT"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "PATH")), :split,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR)), :each),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:if,
                  s(:const,
                    s(:const, nil, :File), :ALT_SEPARATOR),
                  s(:send,
                    s(:lvar, :dir), :tr!,
                    s(:const,
                      s(:const, nil, :File), :ALT_SEPARATOR),
                    s(:const,
                      s(:const, nil, :File), :SEPARATOR)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :dir),
                        s(:dstr,
                          s(:str, "{tclsh,wish}*"),
                          s(:begin,
                            s(:lvar, :exeext)))),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD)), :empty?),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :dirs), :<<,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :dir),
                      s(:str, ".."),
                      s(:str, "lib")))),
                s(:send,
                  s(:lvar, :dirs), :<<,
                  s(:lvar, :dir)))),
            s(:if,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "space-on-tk-libpath")), nil,
              s(:block,
                s(:send,
                  s(:lvar, :dirs), :delete_if),
                s(:args,
                  s(:arg, :path)),
                s(:send,
                  s(:lvar, :path), :=~,
                  s(:regexp,
                    s(:str, " "),
                    s(:regopt))))),
            s(:send,
              s(:lvar, :config_dir), :concat,
              s(:send,
                s(:lvar, :dirs), :zip,
                s(:lvar, :dirs)))),
          s(:begin,
            s(:if,
              s(:lvasgn, :framework,
                s(:send, nil, :find_macosx_framework)),
              s(:send,
                s(:lvar, :config_dir), :unshift,
                s(:lvar, :framework)), nil),
            s(:if,
              s(:lvasgn, :activeTcl,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "ActiveTcl"))),
              s(:if,
                s(:send, nil, :is_macosx?),
                s(:begin,
                  s(:lvasgn, :base,
                    s(:send,
                      s(:const, nil, :File), :expand_path,
                      s(:lvar, :activeTcl))),
                  s(:send,
                    s(:lvar, :config_dir), :<<,
                    s(:array,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :base),
                        s(:str, "Tcl.framework")),
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :base),
                        s(:str, "Tk.framework")))),
                  s(:send,
                    s(:lvar, :config_dir), :<<,
                    s(:array,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :base),
                        s(:str, "Tcl.framework"),
                        s(:str, "Versions"),
                        s(:str, "Current")),
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :base),
                        s(:str, "Tk.framework"),
                        s(:str, "Versions"),
                        s(:str, "Current")))),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Dir), :glob,
                            s(:send,
                              s(:const, nil, :File), :join,
                              s(:lvar, :base),
                              s(:str, "Tcl.framework"),
                              s(:str, "Versions"),
                              s(:str, "*"))), :sort), :reverse), :each),
                    s(:args,
                      s(:arg, :dir)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :dir), :=~,
                          s(:regexp,
                            s(:str, "Current"),
                            s(:regopt))),
                        s(:next), nil),
                      s(:send,
                        s(:lvar, :config_dir), :<<,
                        s(:array,
                          s(:lvar, :dir),
                          s(:send,
                            s(:lvar, :dir), :gsub,
                            s(:regexp,
                              s(:str, "Tcl"),
                              s(:regopt)),
                            s(:str, "Tk"))))))),
                s(:send,
                  s(:lvar, :config_dir), :concat,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Dir), :glob,
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:lvar, :activeTcl),
                          s(:str, "lib")),
                        s(:const,
                          s(:const, nil, :File), :FNM_CASEFOLD)), :sort), :reverse))), nil),
            s(:send,
              s(:lvar, :config_dir), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "libdir"))),
            s(:block,
              s(:send,
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:send, nil, :maybe_64bit?)),
                    s(:array,
                      s(:str, "lib64"),
                      s(:str, "lib")),
                    s(:array,
                      s(:str, "lib")))), :each),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:lvar, :config_dir), :concat,
                s(:array,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "exec_prefix")),
                    s(:lvar, :dir)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "prefix")),
                    s(:lvar, :dir)),
                  s(:dstr,
                    s(:str, "/usr/local/opt/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/local/pkg/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/local/share/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/local/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/opt/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/pkg/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/share/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/contrib/"),
                    s(:begin,
                      s(:lvar, :dir))),
                  s(:dstr,
                    s(:str, "/usr/"),
                    s(:begin,
                      s(:lvar, :dir)))))),
            s(:send,
              s(:lvar, :config_dir), :concat,
              s(:send,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "/opt"),
                      s(:str, "/pkg"),
                      s(:str, "/share"),
                      s(:str, "/usr/local/opt"),
                      s(:str, "/usr/local/pkg"),
                      s(:str, "/usr/local/share"),
                      s(:str, "/usr/local"),
                      s(:str, "/usr/opt"),
                      s(:str, "/usr/pkg"),
                      s(:str, "/usr/share"),
                      s(:str, "/usr/contrib"),
                      s(:str, "/usr")), :map),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:send,
                        s(:lvar, :dir), :+,
                        s(:dstr,
                          s(:str, "/{tcltk,tcl,tk}["),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :TkLib_Config), :[],
                              s(:str, "major_nums"))),
                          s(:str, "*/lib"))),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD)),
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:send,
                        s(:lvar, :dir), :+,
                        s(:dstr,
                          s(:str, "/{tcltk,tcl,tk}["),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :TkLib_Config), :[],
                              s(:str, "major_nums"))),
                          s(:str, "*"))),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD)),
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:send,
                        s(:lvar, :dir), :+,
                        s(:str, "/{tcltk,tcl,tk}/lib")),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD)),
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:send,
                        s(:lvar, :dir), :+,
                        s(:str, "/{tcltk,tcl,tk}")),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD)))), :flatten!)),
            s(:lvasgn, :exeext,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "EXEEXT"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "PATH")), :split,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR)), :each),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:if,
                  s(:const,
                    s(:const, nil, :File), :ALT_SEPARATOR),
                  s(:send,
                    s(:lvar, :dir), :tr!,
                    s(:const,
                      s(:const, nil, :File), :ALT_SEPARATOR),
                    s(:const,
                      s(:const, nil, :File), :SEPARATOR)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :dir),
                        s(:dstr,
                          s(:str, "{tclsh,wish}*"),
                          s(:begin,
                            s(:lvar, :exeext)))),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD)), :empty?),
                  s(:next), nil),
                s(:send,
                  s(:lvar, :config_dir), :<<,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :dir),
                      s(:str, ".."),
                      s(:str, "lib")))))),
            s(:lvasgn, :paths,
              s(:array,
                s(:str, "/Library/Tcl"),
                s(:str, "/Network/Library/Tcl"),
                s(:str, "/System/Library/Tcl"))),
            s(:if,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "ActiveTcl")), nil,
              s(:send,
                s(:lvar, :paths), :reverse!)),
            s(:block,
              s(:send,
                s(:lvar, :paths), :each),
              s(:args,
                s(:arg, :path)),
              s(:begin,
                s(:send,
                  s(:lvar, :config_dir), :<<,
                  s(:lvar, :path)),
                s(:send,
                  s(:lvar, :config_dir), :concat,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Dir), :glob,
                            s(:send,
                              s(:const, nil, :File), :join,
                              s(:lvar, :path),
                              s(:str, "{tcl,tk}*")),
                            s(:const,
                              s(:const, nil, :File), :FNM_CASEFOLD)), :sort), :reverse), :find_all),
                    s(:args,
                      s(:arg, :d)),
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :d)))))),
            s(:lvasgn, :paths,
              s(:array,
                s(:str, "/Library/Frameworks"),
                s(:str, "/Network/Library/Frameworks"),
                s(:str, "/System/Library/Frameworks"))),
            s(:if,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "ActiveTcl")), nil,
              s(:send,
                s(:lvar, :paths), :reverse!)),
            s(:block,
              s(:send,
                s(:lvar, :paths), :each),
              s(:args,
                s(:arg, :frmwk)),
              s(:begin,
                s(:lvasgn, :base,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :frmwk))),
                s(:send,
                  s(:lvar, :config_dir), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :base),
                      s(:str, "Tcl.framework")),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :base),
                      s(:str, "Tk.framework")))),
                s(:send,
                  s(:lvar, :config_dir), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :base),
                      s(:str, "Tcl.framework"),
                      s(:str, "Versions"),
                      s(:str, "Current")),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :base),
                      s(:str, "Tk.framework"),
                      s(:str, "Versions"),
                      s(:str, "Current")))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Dir), :glob,
                          s(:send,
                            s(:const, nil, :File), :join,
                            s(:lvar, :base),
                            s(:str, "Tcl.framework"),
                            s(:str, "Versions"),
                            s(:str, "*"))), :sort), :reverse), :each),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :dir), :=~,
                        s(:regexp,
                          s(:str, "Current"),
                          s(:regopt))),
                      s(:next), nil),
                    s(:send,
                      s(:lvar, :config_dir), :<<,
                      s(:array,
                        s(:lvar, :dir),
                        s(:send,
                          s(:lvar, :dir), :gsub,
                          s(:regexp,
                            s(:str, "Tcl"),
                            s(:regopt)),
                          s(:str, "Tk"))))))))))),
      s(:lvar, :config_dir))),
  s(:def, :get_ext_list,
    s(:args),
    s(:begin,
      s(:lvasgn, :exts,
        s(:array,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "DLEXT")))),
      s(:if,
        s(:send, nil, :is_win32?),
        s(:send,
          s(:lvar, :exts), :concat,
          s(:array,
            s(:str, "dll"))), nil),
      s(:if,
        s(:send, nil, :is_macosx?),
        s(:send,
          s(:lvar, :exts), :concat,
          s(:array,
            s(:str, "bundle"),
            s(:str, "dylib"))), nil),
      s(:if,
        s(:or,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcltk-stubs")),
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "enable-shared")), :==,
            s(:false))),
        s(:begin,
          s(:if,
            s(:send, nil, :is_win32?),
            s(:send,
              s(:lvar, :exts), :unshift,
              s(:str, "lib")), nil),
          s(:send,
            s(:lvar, :exts), :unshift,
            s(:str, "a")),
          s(:send,
            s(:lvar, :exts), :unshift,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "LIBEXT")))), nil),
      s(:if,
        s(:send, nil, :is_win32?),
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :exts), :map!),
            s(:args,
              s(:arg, :ext)),
            s(:array,
              s(:send,
                s(:lvar, :ext), :downcase),
              s(:send,
                s(:lvar, :ext), :upcase))), :flatten!), nil),
      s(:lvar, :exts))),
  s(:def, :libcheck_for_tclConfig,
    s(:args,
      s(:arg, :tcldir),
      s(:arg, :tkdir),
      s(:arg, :tclconf),
      s(:arg, :tkconf)),
    s(:begin,
      s(:lvasgn, :tcllib_ok,
        s(:lvasgn, :tklib_ok,
          s(:false))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcltk-stubs")),
        s(:begin,
          s(:lvasgn, :stub,
            s(:str, "stub")),
          s(:lvasgn, :tclfunc,
            s(:str, "Tcl_InitStubs")),
          s(:lvasgn, :tkfunc,
            s(:str, "Tk_InitStubs"))),
        s(:begin,
          s(:lvasgn, :stub,
            s(:str, "")),
          s(:lvasgn, :tclfunc,
            s(:str, "Tcl_FindExecutable")),
          s(:lvasgn, :tkfunc,
            s(:str, "Tk_Init")))),
      s(:lvasgn, :incflags,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$INCFLAGS),
              s(:str, ""))), :dup)),
      s(:lvasgn, :libpath,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$LIBPATH),
              s(:array))), :dup)),
      s(:lvasgn, :libs_param,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$libs),
              s(:str, ""))), :dup)),
      s(:lvasgn, :tcllibs,
        s(:nil)),
      s(:lvasgn, :mkmf_param,
        s(:nil)),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :tclver),
          s(:lvasgn, :tkver)),
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcltkversion"))),
      s(:lvasgn, :exts,
        s(:send,
          s(:send,
            s(:str, "("), :+,
            s(:send,
              s(:send, nil, :get_ext_list), :join,
              s(:str, "|"))), :+,
          s(:str, ")"))),
      s(:if,
        s(:lvar, :tclver),
        s(:begin,
          s(:lvasgn, :tcl_glob,
            s(:dstr,
              s(:str, "*tcl"),
              s(:begin,
                s(:lvar, :stub)),
              s(:begin,
                s(:lvar, :tclver)),
              s(:str, ".*"))),
          s(:lvasgn, :tcl_regexp,
            s(:regexp,
              s(:str, "^.*(tcl"),
              s(:begin,
                s(:lvar, :stub)),
              s(:begin,
                s(:lvar, :tclver)),
              s(:str, ".*)\\.("),
              s(:begin,
                s(:lvar, :exts)),
              s(:str, ").*$"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :tclconf),
          s(:begin,
            s(:lvasgn, :tcl_glob,
              s(:dstr,
                s(:str, "*tcl"),
                s(:begin,
                  s(:lvar, :stub)),
                s(:begin,
                  s(:send,
                    s(:lvar, :tclconf), :[],
                    s(:str, "TCL_MAJOR_VERSION"))),
                s(:str, "{.,}"),
                s(:begin,
                  s(:send,
                    s(:lvar, :tclconf), :[],
                    s(:str, "TCL_MINOR_VERSION"))),
                s(:str, "*.*"))),
            s(:lvasgn, :tcl_regexp,
              s(:regexp,
                s(:str, "^.*(tcl"),
                s(:begin,
                  s(:lvar, :stub)),
                s(:begin,
                  s(:send,
                    s(:lvar, :tclconf), :[],
                    s(:str, "TCL_MAJOR_VERSION"))),
                s(:str, "(?:\\.|)"),
                s(:begin,
                  s(:send,
                    s(:lvar, :tclconf), :[],
                    s(:str, "TCL_MINOR_VERSION"))),
                s(:str, ".*)\\.("),
                s(:begin,
                  s(:lvar, :exts)),
                s(:str, ").*$"),
                s(:regopt)))), nil)),
      s(:if,
        s(:lvar, :tkver),
        s(:begin,
          s(:lvasgn, :tk_glob,
            s(:dstr,
              s(:str, "*tk"),
              s(:begin,
                s(:lvar, :stub)),
              s(:begin,
                s(:lvar, :tkver)),
              s(:str, ".*"))),
          s(:lvasgn, :tk_regexp,
            s(:regexp,
              s(:str, "^.*(tk"),
              s(:begin,
                s(:lvar, :stub)),
              s(:begin,
                s(:lvar, :tkver)),
              s(:str, ".*)\\.("),
              s(:begin,
                s(:lvar, :exts)),
              s(:str, ").*$"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :tkconf),
          s(:begin,
            s(:lvasgn, :tk_glob,
              s(:dstr,
                s(:str, "*tk"),
                s(:begin,
                  s(:lvar, :stub)),
                s(:begin,
                  s(:send,
                    s(:lvar, :tkconf), :[],
                    s(:str, "TK_MAJOR_VERSION"))),
                s(:str, "{.,}"),
                s(:begin,
                  s(:send,
                    s(:lvar, :tkconf), :[],
                    s(:str, "TK_MINOR_VERSION"))),
                s(:str, "*.*"))),
            s(:lvasgn, :tk_regexp,
              s(:regexp,
                s(:str, "^.*(tk"),
                s(:begin,
                  s(:lvar, :stub)),
                s(:begin,
                  s(:send,
                    s(:lvar, :tkconf), :[],
                    s(:str, "TK_MAJOR_VERSION"))),
                s(:str, "(?:\\.|)"),
                s(:begin,
                  s(:send,
                    s(:lvar, :tkconf), :[],
                    s(:str, "TK_MINOR_VERSION"))),
                s(:str, ".*)\\."),
                s(:begin,
                  s(:lvar, :exts)),
                s(:str, ".*$"),
                s(:regopt)))), nil)),
      s(:or_asgn,
        s(:lvasgn, :tcllib_ok),
        s(:or,
          s(:send,
            s(:lvar, :tclconf), :!),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tcldir),
                  s(:lvar, :tcl_glob)),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)), :find),
            s(:args,
              s(:arg, :file)),
            s(:if,
              s(:send,
                s(:lvar, :file), :=~,
                s(:lvar, :tcl_regexp)),
              s(:begin,
                s(:lvasgn, :libname,
                  s(:nth_ref, 1)),
                s(:lvasgn, :ext,
                  s(:send,
                    s(:nth_ref, 2), :downcase)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:gvasgn, :$INCFLAGS,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :incflags), :dup), :<<,
                            s(:str, " ")), :<<,
                          s(:send,
                            s(:lvar, :tclconf), :[],
                            s(:str, "TCL_INCLUDE_SPEC")))),
                      s(:if,
                        s(:or,
                          s(:or,
                            s(:begin,
                              s(:and,
                                s(:lvar, :tclconf),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :tclconf), :[],
                                    s(:str, "TCL_SHARED_BUILD")), :==,
                                  s(:str, "0")))),
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:lvar, :ext), :!=,
                                  s(:send,
                                    s(:const, nil, :CONFIG), :[],
                                    s(:str, "DLEXT"))),
                                s(:send,
                                  s(:lvar, :ext), :==,
                                  s(:send,
                                    s(:const, nil, :CONFIG), :[],
                                    s(:str, "LIBEXT")))))),
                          s(:send,
                            s(:lvar, :ext), :==,
                            s(:str, "a"))),
                        s(:begin,
                          s(:lvasgn, :tcllibs,
                            s(:send,
                              s(:send,
                                s(:gvar, :$libs), :+,
                                s(:str, " -DSTATIC_BUILD ")), :+,
                              s(:send,
                                s(:lvar, :file), :quote))),
                          s(:if,
                            s(:send, nil, :is_win32?),
                            s(:send,
                              s(:send,
                                s(:gvar, :$INCFLAGS), :<<,
                                s(:str, " -I")), :<<,
                              s(:send,
                                s(:const, nil, :File), :join,
                                s(:send,
                                  s(:const, nil, :File), :dirname,
                                  s(:send,
                                    s(:const, nil, :File), :dirname,
                                    s(:lvar, :file))),
                                s(:str, "include"))), nil)),
                        s(:begin,
                          s(:lvasgn, :tcllibs,
                            s(:send, nil, :append_library,
                              s(:gvar, :$libs),
                              s(:lvar, :libname))),
                          s(:lvasgn, :tcllibs,
                            s(:dstr,
                              s(:begin,
                                s(:send, nil, :libpathflag,
                                  s(:array,
                                    s(:lvar, :tcldir)))),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :tcllibs)))),
                          s(:if,
                            s(:send, nil, :is_win32?),
                            s(:send,
                              s(:send,
                                s(:gvar, :$INCFLAGS), :<<,
                                s(:str, " -I")), :<<,
                              s(:send,
                                s(:const, nil, :File), :join,
                                s(:send,
                                  s(:const, nil, :File), :dirname,
                                  s(:lvar, :tcldir)),
                                s(:str, "include"))), nil))),
                      s(:gvasgn, :$LIBPATH,
                        s(:send,
                          s(:lvar, :libpath), :|,
                          s(:array,
                            s(:lvar, :tcldir)))),
                      s(:or,
                        s(:send, nil, :try_func,
                          s(:lvar, :tclfunc),
                          s(:lvar, :tcllibs),
                          s(:array,
                            s(:str, "tcl.h"))),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :tclconf), :[],
                              s(:str, "TCL_LIBS")),
                            s(:send, nil, :try_func,
                              s(:lvar, :tclfunc),
                              s(:send,
                                s(:send,
                                  s(:lvar, :tcllibs), :<<,
                                  s(:str, " ")), :<<,
                                s(:send,
                                  s(:lvar, :tclconf), :[],
                                  s(:str, "TCL_LIBS"))),
                              s(:array,
                                s(:str, "tcl.h"))), nil)))),
                    s(:begin,
                      s(:lvasgn, :mkmf_param,
                        s(:hash,
                          s(:pair,
                            s(:str, "PATH"),
                            s(:lvar, :file)),
                          s(:pair,
                            s(:str, "LIBNAME"),
                            s(:lvar, :libname)),
                          s(:pair,
                            s(:str, "libs"),
                            s(:send,
                              s(:lvar, :tcllibs), :dup)),
                          s(:pair,
                            s(:str, "INCFLAGS"),
                            s(:send,
                              s(:gvar, :$INCFLAGS), :dup)),
                          s(:pair,
                            s(:str, "LIBPATH"),
                            s(:send,
                              s(:gvar, :$LIBPATH), :dup)))),
                      s(:gvasgn, :$LIBPATH,
                        s(:send,
                          s(:lvar, :libpath), :dup)),
                      s(:gvasgn, :$libs,
                        s(:send,
                          s(:lvar, :libs_param), :dup)))))), nil)))),
      s(:if,
        s(:and,
          s(:lvar, :tclconf),
          s(:lvar, :tcllib_ok)),
        s(:send,
          s(:lvar, :tclconf), :[]=,
          s(:str, "MKMF_PARAMS"),
          s(:lvar, :mkmf_param)), nil),
      s(:or_asgn,
        s(:lvasgn, :tklib_ok),
        s(:or,
          s(:send,
            s(:lvar, :tkconf), :!),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :tkdir),
                  s(:lvar, :tk_glob)),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)), :find),
            s(:args,
              s(:arg, :file)),
            s(:if,
              s(:send,
                s(:lvar, :file), :=~,
                s(:lvar, :tk_regexp)),
              s(:begin,
                s(:lvasgn, :libname,
                  s(:nth_ref, 1)),
                s(:lvasgn, :ext,
                  s(:send,
                    s(:nth_ref, 2), :downcase)),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:if,
                        s(:or,
                          s(:or,
                            s(:begin,
                              s(:and,
                                s(:lvar, :tkconf),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :tkconf), :[],
                                    s(:str, "TCL_SHARED_BUILD")), :==,
                                  s(:str, "0")))),
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:lvar, :ext), :!=,
                                  s(:send,
                                    s(:const, nil, :CONFIG), :[],
                                    s(:str, "DLEXT"))),
                                s(:send,
                                  s(:lvar, :ext), :==,
                                  s(:send,
                                    s(:const, nil, :CONFIG), :[],
                                    s(:str, "LIBEXT")))))),
                          s(:send,
                            s(:lvar, :ext), :==,
                            s(:str, "a"))),
                        s(:begin,
                          s(:lvasgn, :tklibs,
                            s(:send,
                              s(:str, " -DSTATIC_BUILD "), :+,
                              s(:send,
                                s(:lvar, :file), :quote))),
                          s(:if,
                            s(:send, nil, :is_win32?),
                            s(:send,
                              s(:send,
                                s(:gvar, :$INCFLAGS), :<<,
                                s(:str, " -I")), :<<,
                              s(:send,
                                s(:const, nil, :File), :join,
                                s(:send,
                                  s(:const, nil, :File), :dirname,
                                  s(:send,
                                    s(:const, nil, :File), :dirname,
                                    s(:lvar, :file))),
                                s(:str, "include"))), nil)),
                        s(:begin,
                          s(:lvasgn, :tklibs,
                            s(:send, nil, :append_library,
                              s(:str, ""),
                              s(:lvar, :libname))),
                          s(:lvasgn, :tklibs,
                            s(:dstr,
                              s(:begin,
                                s(:send, nil, :libpathflag,
                                  s(:array,
                                    s(:lvar, :tkdir)))),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :tklibs)))),
                          s(:if,
                            s(:send, nil, :is_win32?),
                            s(:send,
                              s(:send,
                                s(:gvar, :$INCFLAGS), :<<,
                                s(:str, " -I")), :<<,
                              s(:send,
                                s(:const, nil, :File), :join,
                                s(:send,
                                  s(:const, nil, :File), :dirname,
                                  s(:lvar, :tcldir)),
                                s(:str, "include"))), nil))),
                      s(:if,
                        s(:lvar, :tcllibs),
                        s(:send,
                          s(:send,
                            s(:lvar, :tklibs), :<<,
                            s(:str, " ")), :<<,
                          s(:lvar, :tcllibs)), nil),
                      s(:lvasgn, :tmp_tklibs,
                        s(:send,
                          s(:lvar, :tklibs), :dup)),
                      s(:gvasgn, :$LIBPATH,
                        s(:send,
                          s(:lvar, :libpath), :|,
                          s(:array,
                            s(:lvar, :tkdir)))),
                      s(:or,
                        s(:or,
                          s(:or,
                            s(:send, nil, :try_func,
                              s(:lvar, :tkfunc),
                              s(:lvar, :tklibs),
                              s(:array,
                                s(:str, "tcl.h"),
                                s(:str, "tk.h"))),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:lvar, :tkconf), :[],
                                  s(:str, "TK_LIBS")),
                                s(:send, nil, :try_func,
                                  s(:lvar, :tkfunc),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :tklibs), :<<,
                                      s(:str, " ")), :<<,
                                    s(:send,
                                      s(:lvar, :tkconf), :[],
                                      s(:str, "TK_LIBS"))),
                                  s(:array,
                                    s(:str, "tcl.h"),
                                    s(:str, "tk.h"))), nil))),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :tkconf), :[],
                                s(:str, "TK_XLIBSW")),
                              s(:send, nil, :try_func,
                                s(:lvar, :tkfunc),
                                s(:send,
                                  s(:send,
                                    s(:begin,
                                      s(:lvasgn, :tklibs,
                                        s(:send,
                                          s(:lvar, :tmp_tklibs), :dup))), :<<,
                                    s(:str, " ")), :<<,
                                  s(:send,
                                    s(:lvar, :tkconf), :[],
                                    s(:str, "TK_XLIBSW"))),
                                s(:array,
                                  s(:str, "tcl.h"),
                                  s(:str, "tk.h"))), nil))),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :tkconf), :[],
                              s(:str, "TK_LIBS")),
                            s(:send, nil, :try_func,
                              s(:lvar, :tkfunc),
                              s(:send,
                                s(:send,
                                  s(:lvar, :tklibs), :<<,
                                  s(:str, " ")), :<<,
                                s(:send,
                                  s(:lvar, :tkconf), :[],
                                  s(:str, "TK_LIBS"))),
                              s(:array,
                                s(:str, "tcl.h"),
                                s(:str, "tk.h"))), nil)))),
                    s(:begin,
                      s(:lvasgn, :mkmf_param,
                        s(:hash,
                          s(:pair,
                            s(:str, "PATH"),
                            s(:lvar, :file)),
                          s(:pair,
                            s(:str, "LIBNAME"),
                            s(:lvar, :libname)),
                          s(:pair,
                            s(:str, "libs"),
                            s(:send,
                              s(:lvar, :tklibs), :dup)),
                          s(:pair,
                            s(:str, "INCFLAGS"),
                            s(:send,
                              s(:gvar, :$INCFLAGS), :dup)),
                          s(:pair,
                            s(:str, "LIBPATH"),
                            s(:send,
                              s(:gvar, :$LIBPATH), :dup)))),
                      s(:gvasgn, :$LIBPATH,
                        s(:send,
                          s(:lvar, :libpath), :dup)),
                      s(:gvasgn, :$libs,
                        s(:send,
                          s(:lvar, :libs_param), :dup)))))), nil)))),
      s(:gvasgn, :$INCFLAGS,
        s(:send,
          s(:lvar, :incflags), :dup)),
      s(:if,
        s(:and,
          s(:lvar, :tkconf),
          s(:lvar, :tklib_ok)),
        s(:send,
          s(:lvar, :tkconf), :[]=,
          s(:str, "MKMF_PARAMS"),
          s(:lvar, :mkmf_param)), nil),
      s(:array,
        s(:lvar, :tcllib_ok),
        s(:lvar, :tklib_ok)))),
  s(:def, :search_tclConfig,
    s(:args,
      s(:restarg, :paths)),
    s(:begin,
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tclConfig_paths"),
        s(:array)),
      s(:send,
        s(:lvar, :paths), :compact!),
      s(:if,
        s(:send,
          s(:lvar, :paths), :empty?),
        s(:lvasgn, :config_dir,
          s(:send, nil, :get_tclConfig_dirs)),
        s(:if,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :paths), :length), :==,
                s(:int, 1)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :paths), :[],
                    s(:int, 0)), :[],
                  s(:int, 0)), :!)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :paths), :[],
                  s(:int, 0)), :[],
                s(:int, 1)), :!)),
          s(:lvasgn, :config_dir,
            s(:block,
              s(:send,
                s(:send, nil, :get_tclConfig_dirs), :map),
              s(:args,
                s(:arg, :dir)),
              s(:if,
                s(:send,
                  s(:lvar, :dir), :kind_of?,
                  s(:const, nil, :Array)),
                s(:array,
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :paths), :[],
                            s(:int, 0)), :[],
                          s(:int, 0)), :==,
                        s(:false))),
                    s(:nil),
                    s(:send,
                      s(:lvar, :dir), :[],
                      s(:int, 0))),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :paths), :[],
                            s(:int, 0)), :[],
                          s(:int, 1)), :==,
                        s(:false))),
                    s(:nil),
                    s(:send,
                      s(:lvar, :dir), :[],
                      s(:int, 1)))),
                s(:array,
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :paths), :[],
                            s(:int, 0)), :[],
                          s(:int, 0)), :==,
                        s(:false))),
                    s(:nil),
                    s(:lvar, :dir)),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :paths), :[],
                            s(:int, 0)), :[],
                          s(:int, 1)), :==,
                        s(:false))),
                    s(:nil),
                    s(:lvar, :dir)))))),
          s(:begin,
            s(:lvasgn, :config_dir,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :paths), :each),
              s(:args,
                s(:arg, :path)),
              s(:if,
                s(:send,
                  s(:lvar, :path), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:lvar, :config_dir), :<<,
                  s(:lvar, :path)),
                s(:begin,
                  s(:lvasgn, :dirs,
                    s(:send,
                      s(:const, nil, :Dir), :glob,
                      s(:lvar, :path),
                      s(:const,
                        s(:const, nil, :File), :FNM_CASEFOLD))),
                  s(:send,
                    s(:lvar, :config_dir), :concat,
                    s(:send,
                      s(:lvar, :dirs), :zip,
                      s(:lvar, :dirs))))))))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :tclver),
          s(:lvasgn, :tkver)),
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcltkversion"))),
      s(:if,
        s(:and,
          s(:lvar, :tclver),
          s(:send,
            s(:lvar, :tclver), :=~,
            s(:regexp,
              s(:str, "^\\D*(\\d)\\.?(\\d)?"),
              s(:regopt)))),
        s(:begin,
          s(:lvasgn, :tclver_major,
            s(:nth_ref, 1)),
          s(:lvasgn, :tclver_minor,
            s(:nth_ref, 2))),
        s(:begin,
          s(:lvasgn, :tclver_major,
            s(:nil)),
          s(:lvasgn, :tclver_minor,
            s(:nil)))),
      s(:if,
        s(:and,
          s(:lvar, :tkver),
          s(:send,
            s(:lvar, :tkver), :=~,
            s(:regexp,
              s(:str, "^\\D*(\\d)\\.?(\\d)?"),
              s(:regopt)))),
        s(:begin,
          s(:lvasgn, :tkver_major,
            s(:nth_ref, 1)),
          s(:lvasgn, :tkver_minor,
            s(:nth_ref, 2))),
        s(:begin,
          s(:lvasgn, :tkver_major,
            s(:nil)),
          s(:lvasgn, :tkver_minor,
            s(:nil)))),
      s(:lvasgn, :conf,
        s(:nil)),
      s(:lvasgn, :progress_flag,
        s(:false)),
      s(:send,
        s(:lvar, :config_dir), :uniq!),
      s(:block,
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :config_dir), :map),
            s(:args,
              s(:arg, :dir)),
            s(:if,
              s(:send,
                s(:lvar, :dir), :kind_of?,
                s(:const, nil, :Array)),
              s(:array,
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :dir), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dir), :[],
                        s(:int, 0)), :strip), :chomp,
                    s(:str, "/")),
                  s(:nil)),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :dir), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dir), :[],
                        s(:int, 1)), :strip), :chomp,
                    s(:str, "/")),
                  s(:nil))),
              s(:send,
                s(:send,
                  s(:lvar, :dir), :strip), :chomp,
                s(:str, "/")))), :each),
        s(:args,
          s(:arg, :dir)),
        s(:begin,
          s(:send, nil, :print,
            s(:str, ".")),
          s(:lvasgn, :progress_flag,
            s(:true)),
          s(:if,
            s(:send,
              s(:lvar, :dir), :kind_of?,
              s(:const, nil, :Array)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :tcldir),
                s(:lvasgn, :tkdir)),
              s(:lvar, :dir)),
            s(:lvasgn, :tcldir,
              s(:lvasgn, :tkdir,
                s(:lvar, :dir)))),
          s(:lvasgn, :tails,
            s(:array,
              s(:str, "Config-shared.sh"),
              s(:str, "config-shared.sh"),
              s(:str, "Config.sh"),
              s(:str, "config.sh"))),
          s(:if,
            s(:lvar, :tcldir),
            s(:if,
              s(:send,
                s(:const, nil, :File), :file?,
                s(:lvar, :tcldir)),
              s(:lvasgn, :tclcfg_files,
                s(:send,
                  s(:array,
                    s(:lvar, :tcldir)), :*,
                  s(:send,
                    s(:lvar, :tails), :length))),
              s(:lvasgn, :tclcfg_files,
                s(:block,
                  s(:send,
                    s(:lvar, :tails), :map),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :tcldir),
                    s(:send,
                      s(:str, "tcl"), :<<,
                      s(:lvar, :f)))))),
            s(:lvasgn, :tclcfg_files,
              s(:send,
                s(:array,
                  s(:nil)), :*,
                s(:send,
                  s(:lvar, :tails), :length)))),
          s(:if,
            s(:lvar, :tkdir),
            s(:if,
              s(:send,
                s(:const, nil, :File), :file?,
                s(:lvar, :tkdir)),
              s(:lvasgn, :tkcfg_files,
                s(:send,
                  s(:array,
                    s(:lvar, :tkdir)), :*,
                  s(:send,
                    s(:lvar, :tails), :length))),
              s(:lvasgn, :tkcfg_files,
                s(:block,
                  s(:send,
                    s(:lvar, :tails), :map),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :tkdir),
                    s(:send,
                      s(:str, "tk"), :<<,
                      s(:lvar, :f)))))),
            s(:lvasgn, :tkcfg_files,
              s(:send,
                s(:array,
                  s(:nil)), :*,
                s(:send,
                  s(:lvar, :tails), :length)))),
          s(:block,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :tclcfg_files), :zip,
                      s(:lvar, :tkcfg_files)), :map),
                  s(:args,
                    s(:arg, :tclpath),
                    s(:arg, :tkpath)),
                  s(:array,
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:lvar, :tclpath),
                          s(:send,
                            s(:const, nil, :File), :exist?,
                            s(:lvar, :tclpath)))),
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :tclpath)),
                      s(:lvar, :tclpath)),
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:lvar, :tkpath),
                          s(:send,
                            s(:const, nil, :File), :exist?,
                            s(:lvar, :tkpath)))),
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :tkpath)),
                      s(:lvar, :tkpath)))), :uniq), :each),
            s(:args,
              s(:arg, :tclpath),
              s(:arg, :tkpath)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :tclpath),
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :tclpath)), :!)),
                s(:next), nil),
              s(:if,
                s(:and,
                  s(:lvar, :tkpath),
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :tkpath)), :!)),
                s(:next), nil),
              s(:lvasgn, :tclconf,
                s(:if,
                  s(:begin,
                    s(:lvar, :tclpath)),
                  s(:send, nil, :parse_tclConfig,
                    s(:lvar, :tclpath)),
                  s(:nil))),
              s(:if,
                s(:lvar, :tclconf),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:lvar, :tclver),
                      s(:begin,
                        s(:or,
                          s(:begin,
                            s(:and,
                              s(:lvar, :tclver_major),
                              s(:send,
                                s(:lvar, :tclver_major), :!=,
                                s(:send,
                                  s(:lvar, :tclconf), :[],
                                  s(:str, "TCL_MAJOR_VERSION"))))),
                          s(:begin,
                            s(:and,
                              s(:lvar, :tclver_minor),
                              s(:send,
                                s(:lvar, :tclver_minor), :!=,
                                s(:send,
                                  s(:lvar, :tclconf), :[],
                                  s(:str, "TCL_MINOR_VERSION")))))))),
                    s(:begin,
                      s(:if,
                        s(:lvar, :progress_flag),
                        s(:send, nil, :print,
                          s(:str, "\n")), nil),
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "Ignore \""),
                          s(:begin,
                            s(:lvar, :tclpath)),
                          s(:str, "\" (unmatch with configured version)."))),
                      s(:lvasgn, :progress_flag,
                        s(:false)),
                      s(:next)), nil),
                  s(:if,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkLib_Config), :[],
                          s(:str, "unsupported_versions")), :find),
                      s(:args,
                        s(:arg, :ver)),
                      s(:send,
                        s(:lvar, :ver), :==,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :tclconf), :[],
                              s(:str, "TCL_MAJOR_VERSION"))),
                          s(:str, "."),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tclconf), :[],
                              s(:str, "TCL_MINOR_VERSION")))))),
                    s(:begin,
                      s(:if,
                        s(:lvar, :progress_flag),
                        s(:send, nil, :print,
                          s(:str, "\n")), nil),
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "Ignore \""),
                          s(:begin,
                            s(:lvar, :tclpath)),
                          s(:str, "\" (unsupported version of Tcl/Tk)."))),
                      s(:lvasgn, :progress_flag,
                        s(:false)),
                      s(:next)), nil)), nil),
              s(:lvasgn, :tkconf,
                s(:if,
                  s(:begin,
                    s(:lvar, :tkpath)),
                  s(:send, nil, :parse_tclConfig,
                    s(:lvar, :tkpath)),
                  s(:nil))),
              s(:if,
                s(:lvar, :tkconf),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:lvar, :tkver),
                      s(:begin,
                        s(:or,
                          s(:begin,
                            s(:and,
                              s(:lvar, :tkver_major),
                              s(:send,
                                s(:lvar, :tkver_major), :!=,
                                s(:send,
                                  s(:lvar, :tkconf), :[],
                                  s(:str, "TK_MAJOR_VERSION"))))),
                          s(:begin,
                            s(:and,
                              s(:lvar, :tkver_minor),
                              s(:send,
                                s(:lvar, :tkver_minor), :!=,
                                s(:send,
                                  s(:lvar, :tkconf), :[],
                                  s(:str, "TK_MINOR_VERSION")))))))),
                    s(:begin,
                      s(:if,
                        s(:lvar, :progress_flag),
                        s(:send, nil, :print,
                          s(:str, "\n")), nil),
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "Ignore \""),
                          s(:begin,
                            s(:lvar, :tkpath)),
                          s(:str, "\" (unmatch with configured version)."))),
                      s(:lvasgn, :progress_flag,
                        s(:false)),
                      s(:next)), nil),
                  s(:if,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkLib_Config), :[],
                          s(:str, "unsupported_versions")), :find),
                      s(:args,
                        s(:arg, :ver)),
                      s(:send,
                        s(:lvar, :ver), :==,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :tkconf), :[],
                              s(:str, "TK_MAJOR_VERSION"))),
                          s(:str, "."),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tkconf), :[],
                              s(:str, "TK_MINOR_VERSION")))))),
                    s(:begin,
                      s(:if,
                        s(:lvar, :progress_flag),
                        s(:send, nil, :print,
                          s(:str, "\n")), nil),
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "Ignore \""),
                          s(:begin,
                            s(:lvar, :tkpath)),
                          s(:str, "\" (unsupported version of Tcl/Tk)."))),
                      s(:lvasgn, :progress_flag,
                        s(:false)),
                      s(:next)), nil)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "ruby_with_thread")), :!),
                s(:if,
                  s(:lvar, :tclconf),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :tclconf), :[],
                        s(:str, "TCL_THREADS")), :==,
                      s(:str, "1")),
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "\nWARNING: found "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tclpath), :inspect)),
                          s(:str, ", but it WITH nativethread-support under ruby WITHOUT nativethread-support. So, ignore it."))),
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkLib_Config), :[],
                          s(:str, "tcl-NG-path")), :<<,
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:lvar, :tclpath))),
                      s(:next)), nil),
                  s(:send, nil, :puts,
                    s(:str, "\nWARNING: When not refer tclConfig.sh, cannot check native-thread support on Tcl/Tk libraries. Ruby, which is used now, does NOT support native-thread. So, if Tcl/Tk libraries support native-thread, it will NOT work properly."))), nil),
              s(:if,
                s(:lvar, :conf), nil,
                s(:lvasgn, :conf,
                  s(:array,
                    s(:lvar, :tclconf),
                    s(:lvar, :tkconf)))),
              s(:if,
                s(:and,
                  s(:send, nil, :is_macosx?),
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tcltk-framework"))),
                s(:lvasgn, :tcllib_ok,
                  s(:lvasgn, :tklib_ok,
                    s(:true))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :tcllib_ok),
                    s(:lvasgn, :tklib_ok)),
                  s(:send, nil, :libcheck_for_tclConfig,
                    s(:if,
                      s(:begin,
                        s(:lvar, :tclpath)),
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:lvar, :tclpath)),
                      s(:nil)),
                    s(:if,
                      s(:begin,
                        s(:lvar, :tkpath)),
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:lvar, :tkpath)),
                      s(:nil)),
                    s(:lvar, :tclconf),
                    s(:lvar, :tkconf)))),
              s(:if,
                s(:and,
                  s(:lvar, :tcllib_ok),
                  s(:lvar, :tklib_ok)), nil,
                s(:begin,
                  s(:if,
                    s(:lvar, :tcllib_ok), nil,
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "\nWARNING: found "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tclpath), :inspect)),
                          s(:str, ", but cannot find valid Tcl library for the tclConfig.sh. So, ignore it."))),
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkLib_Config), :[],
                          s(:str, "tcl-NG-path")), :<<,
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:lvar, :tclpath))))),
                  s(:if,
                    s(:lvar, :tklib_ok), nil,
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:str, "\nWARNING: found "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tkpath), :inspect)),
                          s(:str, ", but cannot find valid Tk library for the tkConfig.sh. So, ignore it."))),
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkLib_Config), :[],
                          s(:str, "tk-NG-path")), :<<,
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:lvar, :tkpath))))),
                  s(:next))),
              s(:send,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "tclConfig_paths")), :<<,
                s(:array,
                  s(:lvar, :tclpath),
                  s(:lvar, :tkpath))))))),
      s(:if,
        s(:and,
          s(:send, nil, :is_macosx?),
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcltk-stubs"))),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "LDSHARED")), :<<,
            s(:str, " -Xlinker -bind_at_load")),
          s(:if,
            s(:send, nil, :config_string,
              s(:str, "LDSHAREDXX")),
            s(:send,
              s(:send, nil, :config_string,
                s(:str, "LDSHAREDXX")), :<<,
              s(:str, " -Xlinker -bind_at_load")), nil)), nil),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tclConfig_paths")), :empty?),
        s(:array,
          s(:nil),
          s(:nil)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:send,
                s(:const, nil, :TkLib_Config), :[]=,
                s(:str, "tclConfig_info")),
              s(:send,
                s(:const, nil, :TkLib_Config), :[]=,
                s(:str, "tkConfig_info"))),
            s(:lvar, :conf)),
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tclConfig_paths")), :[],
            s(:int, 0)))))),
  s(:def, :get_tclConfig,
    s(:args,
      s(:arg, :tclConfig_file),
      s(:arg, :tkConfig_file),
      s(:arg, :tclConfig_dir),
      s(:arg, :tkConfig_dir)),
    s(:begin,
      s(:lvasgn, :use_tclConfig,
        s(:and,
          s(:send,
            s(:lvar, :tclConfig_file), :!=,
            s(:false)),
          s(:send,
            s(:lvar, :tclConfig_dir), :!=,
            s(:false)))),
      s(:lvasgn, :use_tkConfig,
        s(:and,
          s(:send,
            s(:lvar, :tkConfig_file), :!=,
            s(:false)),
          s(:send,
            s(:lvar, :tkConfig_dir), :!=,
            s(:false)))),
      s(:if,
        s(:or,
          s(:lvar, :use_tclConfig),
          s(:lvar, :use_tkConfig)), nil,
        s(:begin,
          s(:send, nil, :puts,
            s(:str, "Don't use [tclConfig.sh, tkConfig.sh]")),
          s(:return,
            s(:array,
              s(:nil),
              s(:nil))))),
      s(:if,
        s(:send,
          s(:lvar, :tclConfig_file), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tclConfig_file,
          s(:nil))),
      s(:if,
        s(:send,
          s(:lvar, :tkConfig_file), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tkConfig_file,
          s(:nil))),
      s(:if,
        s(:send,
          s(:lvar, :tclConfig_dir), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tclConfig_dir,
          s(:nil))),
      s(:if,
        s(:send,
          s(:lvar, :tkConfig_dir), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:lvasgn, :tkConfig_dir,
          s(:nil))),
      s(:if,
        s(:and,
          s(:lvar, :use_tclConfig),
          s(:send,
            s(:lvar, :tclConfig_dir), :!)),
        s(:if,
          s(:lvar, :tclConfig_file),
          s(:lvasgn, :tclConfig_dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :tclConfig_file))),
          s(:if,
            s(:lvar, :tkConfig_dir),
            s(:lvasgn, :tclConfig_dir,
              s(:lvar, :tkConfig_dir)), nil)), nil),
      s(:if,
        s(:and,
          s(:lvar, :use_tkConfig),
          s(:send,
            s(:lvar, :tkConfig_dir), :!)),
        s(:if,
          s(:lvar, :tkConfig_file),
          s(:lvasgn, :tkConfig_dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :tkConfig_file))),
          s(:if,
            s(:lvar, :tclConfig_dir),
            s(:lvasgn, :tkConfig_dir,
              s(:lvar, :tclConfig_dir)), nil)), nil),
      s(:or_asgn,
        s(:lvasgn, :tkConfig_dir),
        s(:lvar, :tclConfig_dir)),
      s(:if,
        s(:lvar, :use_tclConfig),
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tclConfig-file"),
            s(:lvar, :tclConfig_file)),
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tclConfig-dir"),
            s(:lvar, :tclConfig_dir))),
        s(:begin,
          s(:lvasgn, :tclConfig_file,
            s(:false)),
          s(:lvasgn, :tclConfig_dir,
            s(:false)))),
      s(:if,
        s(:lvar, :use_tkConfig),
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tkConfig-file"),
            s(:lvar, :tkConfig_file)),
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "tkConfig-dir"),
            s(:lvar, :tkConfig_dir))),
        s(:begin,
          s(:lvasgn, :tkConfig_file,
            s(:false)),
          s(:lvasgn, :tkConfig_dir,
            s(:false)))),
      s(:if,
        s(:lvar, :use_tclConfig), nil,
        s(:send, nil, :print,
          s(:begin,
            s(:str, "Don't use tclConfig.sh (specified by configure option).\n")))),
      s(:if,
        s(:lvar, :use_tkConfig), nil,
        s(:send, nil, :print,
          s(:begin,
            s(:str, "Don't use tkConfig.sh (specified by configure option).\n")))),
      s(:send, nil, :print,
        s(:str, "Search ")),
      s(:if,
        s(:lvar, :use_tclConfig),
        s(:send, nil, :print,
          s(:str, "tclConfig.sh"),
          s(:if,
            s(:begin,
              s(:lvar, :tclConfig_dir)),
            s(:dstr,
              s(:str, " (in "),
              s(:begin,
                s(:lvar, :tclConfig_dir)),
              s(:str, ")")),
            s(:str, ""))), nil),
      s(:if,
        s(:lvar, :use_tkConfig),
        s(:send, nil, :print,
          s(:if,
            s(:begin,
              s(:lvar, :use_tclConfig)),
            s(:str, " and "),
            s(:str, "")),
          s(:str, "tkConfig.sh"),
          s(:if,
            s(:begin,
              s(:lvar, :tkConfig_dir)),
            s(:dstr,
              s(:str, " (in "),
              s(:begin,
                s(:lvar, :tkConfig_dir)),
              s(:str, ")")),
            s(:str, ""))), nil),
      s(:send, nil, :print,
        s(:str, ".")),
      s(:if,
        s(:or,
          s(:or,
            s(:or,
              s(:lvar, :tclConfig_dir),
              s(:lvar, :tkConfig_dir)),
            s(:send,
              s(:lvar, :use_tclConfig), :!)),
          s(:send,
            s(:lvar, :use_tkConfig), :!)),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :tclConfig),
            s(:lvasgn, :tkConfig)),
          s(:send, nil, :search_tclConfig,
            s(:array,
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:lvar, :tclConfig_file)),
                  s(:lvar, :tclConfig_file),
                  s(:lvar, :tclConfig_dir))),
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:lvar, :tkConfig_file)),
                  s(:lvar, :tkConfig_file),
                  s(:lvar, :tkConfig_dir)))))),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :tclConfig),
            s(:lvasgn, :tkConfig)),
          s(:send, nil, :search_tclConfig))),
      s(:send, nil, :print,
        s(:str, "\n")),
      s(:if,
        s(:or,
          s(:lvar, :tclConfig),
          s(:lvar, :tkConfig)),
        s(:begin,
          s(:lvasgn, :dirs,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "tclConfig_paths")), :map),
              s(:args,
                s(:arg, :tclpath),
                s(:arg, :tkpath)),
              s(:array,
                s(:if,
                  s(:begin,
                    s(:lvar, :tclpath)),
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:lvar, :tclpath)),
                  s(:nil)),
                s(:if,
                  s(:begin,
                    s(:lvar, :tkpath)),
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:lvar, :tkpath)),
                  s(:nil))))),
          s(:op_asgn,
            s(:lvasgn, :dirs), :|,
            s(:lvar, :dirs)),
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "Valid [tclConfig.sh, tkConfig.sh] are found in "),
              s(:begin,
                s(:send,
                  s(:lvar, :dirs), :inspect)))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "Use [tclConfig.sh, tkConfig.sh] == "),
              s(:begin,
                s(:send,
                  s(:array,
                    s(:lvar, :tclConfig),
                    s(:lvar, :tkConfig)), :inspect)))),
          s(:or_asgn,
            s(:gvasgn, :$LIBPATH),
            s(:array)),
          s(:if,
            s(:lvar, :tclConfig),
            s(:op_asgn,
              s(:gvasgn, :$LIBPATH), :|,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :tclConfig)))), nil),
          s(:if,
            s(:lvar, :tkConfig),
            s(:op_asgn,
              s(:gvasgn, :$LIBPATH), :|,
              s(:array,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :tkConfig)))), nil)),
        s(:send, nil, :puts,
          s(:str, "Fail to find [tclConfig.sh, tkConfig.sh]"))),
      s(:array,
        s(:lvar, :tclConfig),
        s(:lvar, :tkConfig)))),
  s(:def, :check_tcl_NG_path,
    s(:args,
      s(:arg, :path_list)),
    s(:block,
      s(:send,
        s(:lvar, :path_list), :find_all),
      s(:args,
        s(:arg, :path)),
      s(:send,
        s(:send,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcl-NG-path")), :include?,
          s(:lvar, :path)), :!))),
  s(:def, :check_tk_NG_path,
    s(:args,
      s(:arg, :path_list)),
    s(:block,
      s(:send,
        s(:lvar, :path_list), :find_all),
      s(:args,
        s(:arg, :path)),
      s(:send,
        s(:send,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tk-NG-path")), :include?,
          s(:lvar, :path)), :!))),
  s(:def, :check_NG_path,
    s(:args,
      s(:arg, :path_list)),
    s(:block,
      s(:send,
        s(:lvar, :path_list), :find_all),
      s(:args,
        s(:arg, :path)),
      s(:send,
        s(:begin,
          s(:and,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcl-NG-path")), :include?,
              s(:lvar, :path)),
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tk-NG-path")), :include?,
              s(:lvar, :path)))), :!))),
  s(:def, :check_shlib_search_path,
    s(:args,
      s(:arg, :paths)),
    s(:begin,
      s(:if,
        s(:or,
          s(:send,
            s(:lvar, :paths), :!),
          s(:send,
            s(:lvar, :paths), :empty?)),
        s(:begin,
          s(:lvasgn, :path_list,
            s(:array)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "ActiveTcl")), :kind_of?,
              s(:const, nil, :String)),
            s(:send,
              s(:lvar, :path_list), :concat,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:send,
                      s(:const, nil, :TkLib_Config), :[],
                      s(:str, "ActiveTcl")),
                    s(:const,
                      s(:const, nil, :File), :FNM_CASEFOLD)), :sort), :reverse)), nil),
          s(:lvasgn, :vers,
            s(:send, nil, :get_shlib_versions)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :path_head),
              s(:lvasgn, :path_dirs)),
            s(:send, nil, :get_shlib_path_head)),
          s(:send,
            s(:lvar, :path_list), :concat,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :vers), :map),
                s(:args,
                  s(:arg, :ver)),
                s(:block,
                  s(:send,
                    s(:lvar, :path_head), :map),
                  s(:args,
                    s(:arg, :head)),
                  s(:if,
                    s(:send,
                      s(:lvar, :ver), :empty?),
                    s(:send,
                      s(:lvar, :head), :+,
                      s(:str, "/lib")),
                    s(:begin,
                      s(:lvasgn, :dirs,
                        s(:array)),
                      s(:if,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Dir), :glob,
                              s(:lvar, :head),
                              s(:const,
                                s(:const, nil, :File), :FNM_CASEFOLD)), :find),
                          s(:args,
                            s(:arg, :dir)),
                          s(:send,
                            s(:lvar, :dir), :==,
                            s(:lvar, :head))),
                        s(:send,
                          s(:lvar, :dirs), :<<,
                          s(:send,
                            s(:lvar, :head), :+,
                            s(:str, "/lib"))), nil),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Dir), :glob,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:str, "-*")),
                              s(:const,
                                s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Dir), :glob,
                                  s(:send,
                                    s(:lvar, :head), :+,
                                    s(:str, "-[89].*")),
                                  s(:const,
                                    s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                            s(:send,
                              s(:lvar, :dirs), :<<,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :ver)),
                                  s(:str, "/lib")))), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Dir), :glob,
                                  s(:send,
                                    s(:lvar, :head), :+,
                                    s(:str, "-[89][0-9]*")),
                                  s(:const,
                                    s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                            s(:send,
                              s(:lvar, :dirs), :<<,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :ver), :delete,
                                      s(:str, "."))),
                                  s(:str, "/lib")))), nil)), nil),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Dir), :glob,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:str, "[_-]*")),
                              s(:const,
                                s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Dir), :glob,
                                  s(:send,
                                    s(:lvar, :head), :+,
                                    s(:str, "_[89].*")),
                                  s(:const,
                                    s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                            s(:send,
                              s(:lvar, :dirs), :<<,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:dstr,
                                  s(:str, "_"),
                                  s(:begin,
                                    s(:lvar, :ver)),
                                  s(:str, "/lib")))), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Dir), :glob,
                                  s(:send,
                                    s(:lvar, :head), :+,
                                    s(:str, "-[89].*")),
                                  s(:const,
                                    s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                            s(:send,
                              s(:lvar, :dirs), :<<,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :ver)),
                                  s(:str, "/lib")))), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Dir), :glob,
                                  s(:send,
                                    s(:lvar, :head), :+,
                                    s(:str, "_[89][0-9]*")),
                                  s(:const,
                                    s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                            s(:send,
                              s(:lvar, :dirs), :<<,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:dstr,
                                  s(:str, "_"),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :ver), :delete,
                                      s(:str, "."))),
                                  s(:str, "/lib")))), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Dir), :glob,
                                  s(:send,
                                    s(:lvar, :head), :+,
                                    s(:str, "-[89][0-9]*")),
                                  s(:const,
                                    s(:const, nil, :File), :FNM_CASEFOLD)), :empty?), :!),
                            s(:send,
                              s(:lvar, :dirs), :<<,
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :ver), :delete,
                                      s(:str, "."))),
                                  s(:str, "/lib")))), nil)), nil),
                      s(:lvar, :dirs))))), :flatten!)),
          s(:send,
            s(:lvar, :path_list), :concat,
            s(:lvar, :path_dirs))),
        s(:lvasgn, :path_list,
          s(:send,
            s(:lvar, :paths), :split,
            s(:if,
              s(:begin,
                s(:send, nil, :is_win32?)),
              s(:str, ";"),
              s(:str, ":"))))),
      s(:lvasgn, :path_list,
        s(:send, nil, :check_NG_path,
          s(:lvar, :path_list))),
      s(:block,
        s(:send,
          s(:lvar, :path_list), :map!),
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:lvar, :path), :strip)),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :CROSS_COMPILING), :!),
          s(:begin,
            s(:or,
              s(:send, nil, :is_win32?),
              s(:send, nil, :is_macosx?)))),
        s(:block,
          s(:send,
            s(:lvar, :path_list), :delete_if),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :path),
                s(:str, "*.{a,so,dll,lib}"))), :empty?)), nil),
      s(:send,
        s(:lvar, :path_list), :uniq))),
  s(:def, :search_vers_on_path,
    s(:args,
      s(:arg, :vers),
      s(:arg, :path),
      s(:restarg, :heads)),
    s(:begin,
      s(:lvasgn, :exts,
        s(:send,
          s(:send, nil, :get_ext_list), :join,
          s(:str, ","))),
      s(:lvasgn, :files,
        s(:send,
          s(:const, nil, :Dir), :glob,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :path),
            s(:dstr,
              s(:str, "*{"),
              s(:begin,
                s(:send,
                  s(:lvar, :heads), :join,
                  s(:str, ","))),
              s(:str, "}*.{"),
              s(:begin,
                s(:lvar, :exts)),
              s(:str, "}"))),
          s(:const,
            s(:const, nil, :File), :FNM_CASEFOLD))),
      s(:block,
        s(:send,
          s(:lvar, :vers), :find_all),
        s(:args,
          s(:arg, :ver)),
        s(:block,
          s(:send,
            s(:lvar, :files), :find),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :f), :=~,
            s(:regexp,
              s(:str, "("),
              s(:begin,
                s(:lvar, :ver)),
              s(:str, "|"),
              s(:begin,
                s(:send,
                  s(:lvar, :ver), :delete,
                  s(:str, "."))),
              s(:str, ")"),
              s(:regopt))))))),
  s(:def, :find_tcl,
    s(:args,
      s(:arg, :tcllib),
      s(:arg, :stubs),
      s(:arg, :version),
      s(:restarg, :opt_paths)),
    s(:begin,
      s(:if,
        s(:send,
          s(:const, nil, :TclConfig_Info), :[],
          s(:str, "MKMF_PARAMS")),
        s(:begin,
          s(:send,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$INCFLAGS),
                  s(:str, ""))), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:send,
                s(:const, nil, :TclConfig_Info), :[],
                s(:str, "MKMF_PARAMS")), :[],
              s(:str, "INCFLAGS"))),
          s(:or_asgn,
            s(:gvasgn, :$LIBPATH),
            s(:array)),
          s(:op_asgn,
            s(:gvasgn, :$LIBPATH), :|,
            s(:send,
              s(:send,
                s(:const, nil, :TclConfig_Info), :[],
                s(:str, "MKMF_PARAMS")), :[],
              s(:str, "LIBPATH"))),
          s(:send,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$libs),
                  s(:str, ""))), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:send,
                s(:const, nil, :TclConfig_Info), :[],
                s(:str, "MKMF_PARAMS")), :[],
              s(:str, "libs"))),
          s(:return,
            s(:array,
              s(:true),
              s(:nil),
              s(:nil),
              s(:nil)))), nil),
      s(:send, nil, :print,
        s(:str, "Search Tcl library")),
      s(:if,
        s(:lvar, :stubs),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tcl_InitStubs")),
          s(:lvasgn, :lib,
            s(:str, "tclstub"))),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tcl_FindExecutable")),
          s(:lvasgn, :lib,
            s(:str, "tcl")))),
      s(:if,
        s(:and,
          s(:lvar, :version),
          s(:send,
            s(:send,
              s(:lvar, :version), :empty?), :!)),
        s(:lvasgn, :versions,
          s(:array,
            s(:lvar, :version))),
        s(:lvasgn, :versions,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "search_versions")))),
      s(:lvasgn, :default_paths,
        s(:array)),
      s(:if,
        s(:const, nil, :CROSS_COMPILING), nil,
        s(:send,
          s(:lvar, :default_paths), :concat,
          s(:block,
            s(:send,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "libdir")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "exec_prefix")),
                  s(:str, "lib")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "prefix")),
                  s(:str, "lib")),
                s(:str, "/usr/local/lib"),
                s(:str, "/usr/pkg/lib"),
                s(:str, "/usr/contrib/lib"),
                s(:str, "/usr/lib")), :find_all),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :dir))))),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "ActiveTcl")), :kind_of?,
          s(:const, nil, :String)),
        s(:send,
          s(:lvar, :default_paths), :concat,
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:send,
                      s(:const, nil, :TkLib_Config), :[],
                      s(:str, "ActiveTcl"))), :sort), :reverse), :map),
            s(:args,
              s(:arg, :d)),
            s(:send,
              s(:lvar, :d), :<<,
              s(:str, "/lib")))), nil),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :CROSS_COMPILING), :!),
          s(:send, nil, :is_win32?)),
        s(:begin,
          s(:send,
            s(:lvar, :default_paths), :concat,
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "c:/Tcl/lib"),
                      s(:str, "c:/Program Files/Tcl/lib"),
                      s(:str, "c:/Program Files (x86)/Tcl/lib"),
                      s(:str, "/Tcl/lib"),
                      s(:str, "/Program Files/Tcl/lib"),
                      s(:str, "/Program Files (x86)/Tcl/lib")), :find_all),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send,
                    s(:const, nil, :File), :directory?,
                    s(:lvar, :dir))), :map),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :dir)))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "/usr/local/lib64"),
                s(:str, "/usr/lib64"),
                s(:str, "/usr/local/lib"),
                s(:str, "/usr/lib")), :each),
            s(:args,
              s(:arg, :dir)),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :dir)),
              s(:send,
                s(:lvar, :default_paths), :<<,
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir))), nil)),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "LIBRARY_PATH")),
            s(:op_asgn,
              s(:lvasgn, :default_paths), :|,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "LIBRARY_PATH")), :split,
                        s(:str, ";")), :find_all),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :dir))), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir)))), nil),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "PATH")),
            s(:op_asgn,
              s(:lvasgn, :default_paths), :|,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "PATH")), :split,
                        s(:str, ";")), :find_all),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :dir))), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir)))), nil)), nil),
      s(:op_asgn,
        s(:lvasgn, :default_paths), :|,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "checked_shlib_dirs"))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "space-on-tk-libpath")), nil,
        s(:block,
          s(:send,
            s(:lvar, :default_paths), :delete_if),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:lvar, :path), :=~,
            s(:regexp,
              s(:str, " "),
              s(:regopt))))),
      s(:if,
        s(:send,
          s(:begin,
            s(:lvasgn, :paths,
              s(:send,
                s(:lvar, :opt_paths), :compact))), :empty?),
        s(:lvasgn, :paths,
          s(:send, nil, :check_tcl_NG_path,
            s(:lvar, :default_paths))), nil),
      s(:lvasgn, :incflags,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$INCFLAGS),
              s(:str, ""))), :dup)),
      s(:lvasgn, :libpath,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$LIBPATH),
              s(:array))), :dup)),
      s(:lvasgn, :libs_param,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$libs),
              s(:str, ""))), :dup)),
      s(:lvasgn, :tcllibs,
        s(:nil)),
      s(:lvasgn, :exts,
        s(:send,
          s(:send,
            s(:str, "("), :+,
            s(:send,
              s(:send, nil, :get_ext_list), :join,
              s(:str, "|"))), :+,
          s(:str, ")"))),
      s(:block,
        s(:send,
          s(:lvar, :paths), :map),
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :lib_w_sufx,
            s(:lvar, :lib)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:op_asgn,
                  s(:gvasgn, :$LIBPATH), :|,
                  s(:array,
                    s(:lvar, :path))),
                s(:lvasgn, :inc,
                  s(:array,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:lvar, :path)),
                      s(:str, "include")),
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :path)))),
                s(:block,
                  s(:send,
                    s(:lvar, :inc), :each),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:send,
                      s(:gvar, :$INCFLAGS), :<<,
                      s(:str, " -I")), :<<,
                    s(:lvar, :f))),
                s(:if,
                  s(:lvar, :tcllib),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:str, ".")),
                    s(:if,
                      s(:send, nil, :have_library,
                        s(:lvar, :tcllib),
                        s(:lvar, :func),
                        s(:array,
                          s(:str, "tcl.h"))),
                      s(:return,
                        s(:array,
                          s(:true),
                          s(:lvar, :path),
                          s(:lvar, :tcllib),
                          s(:nil),
                          s(:splat,
                            s(:lvar, :inc)))), nil)),
                  s(:begin,
                    s(:lvasgn, :sufx_list,
                      s(:array,
                        s(:str, ""),
                        s(:str, "t"),
                        s(:str, "g"),
                        s(:str, "s"),
                        s(:str, "x"))),
                    s(:block,
                      s(:send,
                        s(:send, nil, :search_vers_on_path,
                          s(:lvar, :versions),
                          s(:lvar, :path),
                          s(:lvar, :lib),
                          s(:str, "tcl")), :find),
                      s(:args,
                        s(:arg, :ver)),
                      s(:begin,
                        s(:lvasgn, :dir_enum,
                          s(:send,
                            s(:const, nil, :Dir), :foreach,
                            s(:lvar, :path))),
                        s(:lvasgn, :no_dot_ver,
                          s(:send,
                            s(:lvar, :ver), :delete,
                            s(:str, "."))),
                        s(:lvasgn, :libnames,
                          s(:array,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :lib)),
                              s(:begin,
                                s(:lvar, :ver))),
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :lib)),
                              s(:begin,
                                s(:lvar, :no_dot_ver))))),
                        s(:if,
                          s(:send,
                            s(:lvar, :lib), :!=,
                            s(:str, "tcl")),
                          s(:send,
                            s(:send,
                              s(:lvar, :libnames), :<<,
                              s(:dstr,
                                s(:str, "tcl"),
                                s(:begin,
                                  s(:lvar, :ver)))), :<<,
                            s(:dstr,
                              s(:str, "tcl"),
                              s(:begin,
                                s(:lvar, :no_dot_ver)))), nil),
                        s(:block,
                          s(:send,
                            s(:lvar, :libnames), :find),
                          s(:args,
                            s(:arg, :libname)),
                          s(:block,
                            s(:send,
                              s(:lvar, :sufx_list), :find),
                            s(:args,
                              s(:arg, :sufx)),
                            s(:begin,
                              s(:send, nil, :print,
                                s(:str, ".")),
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:block,
                                      s(:send,
                                        s(:lvar, :dir_enum), :map),
                                      s(:args,
                                        s(:arg, :fname)),
                                      s(:if,
                                        s(:send,
                                          s(:lvar, :fname), :=~,
                                          s(:regexp,
                                            s(:str, "^.*("),
                                            s(:begin,
                                              s(:lvar, :libname)),
                                            s(:str, ".*"),
                                            s(:begin,
                                              s(:lvar, :sufx)),
                                            s(:str, ")\\.("),
                                            s(:begin,
                                              s(:lvar, :exts)),
                                            s(:str, ").*$"),
                                            s(:regopt))),
                                        s(:array,
                                          s(:lvar, :fname),
                                          s(:nth_ref, 1),
                                          s(:nth_ref, 2)), nil)), :compact), :find),
                                s(:args,
                                  s(:arg, :fname),
                                  s(:arg, :lib_w_sufx),
                                  s(:arg, :ext)),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :ext), :downcase!),
                                  s(:if,
                                    s(:or,
                                      s(:begin,
                                        s(:and,
                                          s(:send,
                                            s(:lvar, :ext), :!=,
                                            s(:send,
                                              s(:const, nil, :CONFIG), :[],
                                              s(:str, "DLEXT"))),
                                          s(:send,
                                            s(:lvar, :ext), :==,
                                            s(:send,
                                              s(:const, nil, :CONFIG), :[],
                                              s(:str, "LIBEXT"))))),
                                      s(:send,
                                        s(:lvar, :ext), :==,
                                        s(:str, "a"))),
                                    s(:lvasgn, :tcllibs,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :libs_param), :+,
                                          s(:str, " -DSTATIC_BUILD ")), :+,
                                        s(:send,
                                          s(:lvar, :fname), :quote))),
                                    s(:begin,
                                      s(:lvasgn, :tcllibs,
                                        s(:send, nil, :append_library,
                                          s(:gvar, :$libs),
                                          s(:lvar, :lib_w_sufx))),
                                      s(:lvasgn, :tcllibs,
                                        s(:dstr,
                                          s(:begin,
                                            s(:send, nil, :libpathflag,
                                              s(:array,
                                                s(:lvar, :path)))),
                                          s(:str, " "),
                                          s(:begin,
                                            s(:lvar, :tcllibs)))))),
                                  s(:if,
                                    s(:send, nil, :try_func,
                                      s(:lvar, :func),
                                      s(:lvar, :tcllibs),
                                      s(:array,
                                        s(:str, "tcl.h"))),
                                    s(:return,
                                      s(:array,
                                        s(:true),
                                        s(:lvar, :path),
                                        s(:nil),
                                        s(:lvar, :tcllibs),
                                        s(:splat,
                                          s(:lvar, :inc)))), nil)))))))),
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :version), :!),
                          s(:begin,
                            s(:send, nil, :print,
                              s(:str, ".")),
                            s(:send, nil, :try_func,
                              s(:lvar, :func),
                              s(:lvar, :libs_param),
                              s(:array,
                                s(:str, "tcl.h")))))),
                      s(:return,
                        s(:array,
                          s(:true),
                          s(:lvar, :path),
                          s(:lvar, :lib_w_sufx),
                          s(:nil),
                          s(:splat,
                            s(:lvar, :inc)))), nil)))),
              s(:begin,
                s(:gvasgn, :$LIBPATH,
                  s(:send,
                    s(:lvar, :libpath), :dup)),
                s(:gvasgn, :$libs,
                  s(:send,
                    s(:lvar, :libs_param), :dup)),
                s(:gvasgn, :$INCFLAGS,
                  s(:send,
                    s(:lvar, :incflags), :dup))))))),
      s(:send, nil, :print,
        s(:str, "\n")),
      s(:array,
        s(:false),
        s(:nil),
        s(:nil),
        s(:nil)))),
  s(:def, :parse_TK_LIBS,
    s(:args,
      s(:arg, :tklibs)),
    s(:begin,
      s(:lvasgn, :sfx,
        s(:str, "lib|shlib|dll|so")),
      s(:lvasgn, :re,
        s(:regexp,
          s(:str, "((\"|')[^\"']+\\.("),
          s(:begin,
            s(:lvar, :sfx)),
          s(:str, ")\\2|[^\"' ]+\\.("),
          s(:begin,
            s(:lvar, :sfx)),
          s(:str, ")|-l(\"|')[^\"']+\\5|-l[^\" ]+)"),
          s(:regopt))),
      s(:send,
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :tklibs), :scan,
              s(:lvar, :re)), :map),
          s(:args,
            s(:arg, :lib)),
          s(:if,
            s(:send,
              s(:lvar, :lib), :=~,
              s(:regexp,
                s(:str, "^(\"|')([^\"]+)\\.("),
                s(:begin,
                  s(:lvar, :sfx)),
                s(:str, ")\\1"),
                s(:regopt))),
            s(:dstr,
              s(:str, "\"-l"),
              s(:begin,
                s(:nth_ref, 2)),
              s(:str, "\"")),
            s(:if,
              s(:send,
                s(:lvar, :lib), :=~,
                s(:regexp,
                  s(:str, "([^\" ]+)\\.("),
                  s(:begin,
                    s(:lvar, :sfx)),
                  s(:str, ")"),
                  s(:regopt))),
              s(:dstr,
                s(:str, "-l"),
                s(:begin,
                  s(:nth_ref, 1))),
              s(:lvar, :lib)))), :join,
        s(:str, " ")))),
  s(:def, :find_tk,
    s(:args,
      s(:arg, :tklib),
      s(:arg, :stubs),
      s(:arg, :version),
      s(:restarg, :opt_paths)),
    s(:begin,
      s(:if,
        s(:send,
          s(:const, nil, :TkConfig_Info), :[],
          s(:str, "MKMF_PARAMS")),
        s(:begin,
          s(:send,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$INCFLAGS),
                  s(:str, ""))), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:send,
                s(:const, nil, :TkConfig_Info), :[],
                s(:str, "MKMF_PARAMS")), :[],
              s(:str, "INCFLAGS"))),
          s(:or_asgn,
            s(:gvasgn, :$LIBPATH),
            s(:array)),
          s(:op_asgn,
            s(:gvasgn, :$LIBPATH), :|,
            s(:send,
              s(:send,
                s(:const, nil, :TkConfig_Info), :[],
                s(:str, "MKMF_PARAMS")), :[],
              s(:str, "LIBPATH"))),
          s(:send,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$libs),
                  s(:str, ""))), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:send,
                s(:const, nil, :TkConfig_Info), :[],
                s(:str, "MKMF_PARAMS")), :[],
              s(:str, "libs"))),
          s(:return,
            s(:array,
              s(:true),
              s(:nil),
              s(:nil),
              s(:nil)))), nil),
      s(:send, nil, :print,
        s(:str, "Search Tk library")),
      s(:if,
        s(:lvar, :stubs),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tk_InitStubs")),
          s(:lvasgn, :lib,
            s(:str, "tkstub"))),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tk_Init")),
          s(:lvasgn, :lib,
            s(:str, "tk")))),
      s(:if,
        s(:and,
          s(:lvar, :version),
          s(:send,
            s(:send,
              s(:lvar, :version), :empty?), :!)),
        s(:lvasgn, :versions,
          s(:array,
            s(:lvar, :version))),
        s(:lvasgn, :versions,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "search_versions")))),
      s(:lvasgn, :default_paths,
        s(:array)),
      s(:if,
        s(:const, nil, :CROSS_COMPILING), nil,
        s(:send,
          s(:lvar, :default_paths), :concat,
          s(:block,
            s(:send,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "libdir")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "exec_prefix")),
                  s(:str, "lib")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "prefix")),
                  s(:str, "lib")),
                s(:str, "/usr/local/lib"),
                s(:str, "/usr/pkg/lib"),
                s(:str, "/usr/contrib/lib"),
                s(:str, "/usr/lib")), :find_all),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :dir))))),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :CROSS_COMPILING), :!),
          s(:send, nil, :is_win32?)),
        s(:begin,
          s(:send,
            s(:lvar, :default_paths), :concat,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "c:/Tcl/lib"),
                  s(:str, "c:/Program Files/Tcl/lib"),
                  s(:str, "c:/Program Files (x86)/Tcl/lib"),
                  s(:str, "/Tcl/lib"),
                  s(:str, "/Program Files/Tcl/lib"),
                  s(:str, "/Program Files (x86)/Tcl/lib")), :find_all),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :dir)))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "/usr/local/lib64"),
                s(:str, "/usr/lib64"),
                s(:str, "/usr/local/lib"),
                s(:str, "/usr/lib")), :each),
            s(:args,
              s(:arg, :dir)),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :dir)),
              s(:send,
                s(:lvar, :default_paths), :<<,
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir))), nil)),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "LIBRARY_PATH")),
            s(:op_asgn,
              s(:lvasgn, :default_paths), :|,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "LIBRARY_PATH")), :split,
                        s(:str, ";")), :find_all),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :dir))), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir)))), nil),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "PATH")),
            s(:op_asgn,
              s(:lvasgn, :default_paths), :|,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "PATH")), :split,
                        s(:str, ";")), :find_all),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :dir))), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir)))), nil)), nil),
      s(:op_asgn,
        s(:lvasgn, :default_paths), :|,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "checked_shlib_dirs"))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "space-on-tk-libpath")), nil,
        s(:block,
          s(:send,
            s(:lvar, :default_paths), :delete_if),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:lvar, :path), :=~,
            s(:regexp,
              s(:str, " "),
              s(:regopt))))),
      s(:if,
        s(:send,
          s(:begin,
            s(:lvasgn, :paths,
              s(:send,
                s(:lvar, :opt_paths), :compact))), :empty?),
        s(:lvasgn, :paths,
          s(:send, nil, :check_tk_NG_path,
            s(:lvar, :default_paths))), nil),
      s(:lvasgn, :incflags,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$INCFLAGS),
              s(:str, ""))), :dup)),
      s(:lvasgn, :libpath,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$LIBPATH),
              s(:array))), :dup)),
      s(:lvasgn, :libs_param,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$libs),
              s(:str, ""))), :dup)),
      s(:lvasgn, :tcllibs,
        s(:nil)),
      s(:lvasgn, :exts,
        s(:send,
          s(:send,
            s(:str, "("), :+,
            s(:send,
              s(:send, nil, :get_ext_list), :join,
              s(:str, "|"))), :+,
          s(:str, ")"))),
      s(:block,
        s(:send,
          s(:lvar, :paths), :map),
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :lib_w_sufx,
            s(:lvar, :lib)),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:op_asgn,
                  s(:gvasgn, :$LIBPATH), :|,
                  s(:array,
                    s(:lvar, :path))),
                s(:lvasgn, :inc,
                  s(:array,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send,
                        s(:const, nil, :File), :dirname,
                        s(:lvar, :path)),
                      s(:str, "include")),
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :path)))),
                s(:block,
                  s(:send,
                    s(:lvar, :inc), :each),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:send,
                      s(:gvar, :$INCFLAGS), :<<,
                      s(:str, " -I")), :<<,
                    s(:lvar, :f))),
                s(:if,
                  s(:lvar, :tklib),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:str, ".")),
                    s(:if,
                      s(:send, nil, :have_library,
                        s(:lvar, :tklib),
                        s(:lvar, :func),
                        s(:array,
                          s(:str, "tcl.h"),
                          s(:str, "tk.h"))),
                      s(:return,
                        s(:array,
                          s(:true),
                          s(:lvar, :path),
                          s(:lvar, :tklib),
                          s(:nil),
                          s(:splat,
                            s(:lvar, :inc)))), nil)),
                  s(:begin,
                    s(:lvasgn, :sufx_list,
                      s(:array,
                        s(:str, ""),
                        s(:str, "t"),
                        s(:str, "g"),
                        s(:str, "s"),
                        s(:str, "x"))),
                    s(:block,
                      s(:send,
                        s(:send, nil, :search_vers_on_path,
                          s(:lvar, :versions),
                          s(:lvar, :path),
                          s(:lvar, :lib),
                          s(:str, "tk")), :find),
                      s(:args,
                        s(:arg, :ver)),
                      s(:begin,
                        s(:lvasgn, :dir_enum,
                          s(:send,
                            s(:const, nil, :Dir), :foreach,
                            s(:lvar, :path))),
                        s(:lvasgn, :no_dot_ver,
                          s(:send,
                            s(:lvar, :ver), :delete,
                            s(:str, "."))),
                        s(:lvasgn, :libnames,
                          s(:array,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :lib)),
                              s(:begin,
                                s(:lvar, :ver))),
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :lib)),
                              s(:begin,
                                s(:lvar, :no_dot_ver))))),
                        s(:if,
                          s(:send,
                            s(:lvar, :lib), :!=,
                            s(:str, "tk")),
                          s(:send,
                            s(:send,
                              s(:lvar, :libnames), :<<,
                              s(:dstr,
                                s(:str, "tk"),
                                s(:begin,
                                  s(:lvar, :ver)))), :<<,
                            s(:dstr,
                              s(:str, "tk"),
                              s(:begin,
                                s(:lvar, :no_dot_ver)))), nil),
                        s(:block,
                          s(:send,
                            s(:lvar, :libnames), :find),
                          s(:args,
                            s(:arg, :libname)),
                          s(:block,
                            s(:send,
                              s(:lvar, :sufx_list), :find),
                            s(:args,
                              s(:arg, :sufx)),
                            s(:begin,
                              s(:send, nil, :print,
                                s(:str, ".")),
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:block,
                                      s(:send,
                                        s(:lvar, :dir_enum), :map),
                                      s(:args,
                                        s(:arg, :fname)),
                                      s(:if,
                                        s(:send,
                                          s(:lvar, :fname), :=~,
                                          s(:regexp,
                                            s(:str, "^.*("),
                                            s(:begin,
                                              s(:lvar, :libname)),
                                            s(:str, ".*"),
                                            s(:begin,
                                              s(:lvar, :sufx)),
                                            s(:str, ")\\.("),
                                            s(:begin,
                                              s(:lvar, :exts)),
                                            s(:str, ").*$"),
                                            s(:regopt))),
                                        s(:array,
                                          s(:lvar, :fname),
                                          s(:nth_ref, 1),
                                          s(:nth_ref, 2)), nil)), :compact), :find),
                                s(:args,
                                  s(:arg, :fname),
                                  s(:arg, :lib_w_sufx),
                                  s(:arg, :ext)),
                                s(:begin,
                                  s(:if,
                                    s(:or,
                                      s(:begin,
                                        s(:and,
                                          s(:send,
                                            s(:lvar, :ext), :!=,
                                            s(:send,
                                              s(:const, nil, :CONFIG), :[],
                                              s(:str, "DLEXT"))),
                                          s(:send,
                                            s(:lvar, :ext), :==,
                                            s(:send,
                                              s(:const, nil, :CONFIG), :[],
                                              s(:str, "LIBEXT"))))),
                                      s(:send,
                                        s(:lvar, :ext), :==,
                                        s(:str, "a"))),
                                    s(:lvasgn, :tklibs,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :libs_param), :+,
                                          s(:str, " -DSTATIC_BUILD ")), :+,
                                        s(:send,
                                          s(:lvar, :fname), :quote))),
                                    s(:begin,
                                      s(:lvasgn, :tklibs,
                                        s(:send, nil, :append_library,
                                          s(:gvar, :$libs),
                                          s(:lvar, :lib_w_sufx))),
                                      s(:lvasgn, :tklibs,
                                        s(:dstr,
                                          s(:begin,
                                            s(:send, nil, :libpathflag,
                                              s(:array,
                                                s(:lvar, :path)))),
                                          s(:str, " "),
                                          s(:begin,
                                            s(:lvar, :tklibs)))))),
                                  s(:if,
                                    s(:send, nil, :try_func,
                                      s(:lvar, :func),
                                      s(:lvar, :tklibs),
                                      s(:array,
                                        s(:str, "tcl.h"),
                                        s(:str, "tk.h"))),
                                    s(:return,
                                      s(:array,
                                        s(:true),
                                        s(:lvar, :path),
                                        s(:nil),
                                        s(:lvar, :tklibs),
                                        s(:splat,
                                          s(:lvar, :inc)))), nil)))))))),
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :version), :!),
                          s(:begin,
                            s(:send, nil, :print,
                              s(:str, ".")),
                            s(:send, nil, :try_func,
                              s(:lvar, :func),
                              s(:lvar, :libs_param),
                              s(:array,
                                s(:str, "tcl.h"),
                                s(:str, "tk.h")))))),
                      s(:return,
                        s(:array,
                          s(:true),
                          s(:lvar, :path),
                          s(:lvar, :lib_w_sufx),
                          s(:nil),
                          s(:splat,
                            s(:lvar, :inc)))), nil)))),
              s(:begin,
                s(:gvasgn, :$LIBPATH,
                  s(:lvar, :libpath)),
                s(:gvasgn, :$libs,
                  s(:lvar, :libs_param)),
                s(:gvasgn, :$INCFLAGS,
                  s(:send,
                    s(:lvar, :incflags), :dup))))))),
      s(:send, nil, :print,
        s(:str, "\n")),
      s(:array,
        s(:false),
        s(:nil),
        s(:nil),
        s(:nil)))),
  s(:def, :find_tcltk_library,
    s(:args,
      s(:arg, :tcllib),
      s(:arg, :tklib),
      s(:arg, :stubs),
      s(:arg, :tclversion),
      s(:arg, :tkversion),
      s(:arg, :tcl_opt_paths),
      s(:arg, :tk_opt_paths)),
    s(:begin,
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :st),
          s(:lvasgn, :path),
          s(:lvasgn, :lib),
          s(:lvasgn, :libs),
          s(:splat,
            s(:lvasgn, :inc))),
        s(:send, nil, :find_tcl,
          s(:lvar, :tcllib),
          s(:lvar, :stubs),
          s(:lvar, :tclversion),
          s(:splat,
            s(:lvar, :tcl_opt_paths)))),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :st), :!),
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "enable-shared")), :==,
            s(:nil))),
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "enable-shared"),
            s(:false)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :st),
              s(:lvasgn, :path),
              s(:lvasgn, :lib),
              s(:lvasgn, :libs),
              s(:splat,
                s(:lvasgn, :inc))),
            s(:send, nil, :find_tcl,
              s(:lvar, :tcllib),
              s(:lvar, :stubs),
              s(:lvar, :tclversion),
              s(:splat,
                s(:lvar, :tcl_opt_paths))))), nil),
      s(:if,
        s(:lvar, :st),
        s(:begin,
          s(:if,
            s(:lvar, :path),
            s(:begin,
              s(:or_asgn,
                s(:gvasgn, :$LIBPATH),
                s(:array)),
              s(:op_asgn,
                s(:gvasgn, :$LIBPATH), :|,
                s(:array,
                  s(:lvar, :path)))), nil),
          s(:if,
            s(:lvar, :lib),
            s(:gvasgn, :$libs,
              s(:send, nil, :append_library,
                s(:gvar, :$libs),
                s(:lvar, :lib))), nil),
          s(:if,
            s(:lvar, :libs),
            s(:send,
              s(:send,
                s(:begin,
                  s(:or_asgn,
                    s(:gvasgn, :$libs),
                    s(:str, ""))), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :libs)), nil),
          s(:or_asgn,
            s(:gvasgn, :$INCFLAGS),
            s(:str, "")),
          s(:block,
            s(:send,
              s(:lvar, :inc), :each),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:send,
                s(:gvar, :$INCFLAGS), :<<,
                s(:str, " -I")), :<<,
              s(:lvar, :f)))),
        s(:begin,
          s(:send, nil, :puts,
            s(:str, "Warning:: cannot find Tcl library. tcltklib will not be compiled (tcltklib is disabled on your Ruby. That is, Ruby/Tk will not work). Please check configure options.")),
          s(:return,
            s(:false)))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :st),
          s(:lvasgn, :path),
          s(:lvasgn, :lib),
          s(:lvasgn, :libs),
          s(:splat,
            s(:lvasgn, :inc))),
        s(:send, nil, :find_tk,
          s(:lvar, :tklib),
          s(:lvar, :stubs),
          s(:lvar, :tkversion),
          s(:splat,
            s(:lvar, :tk_opt_paths)))),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :st), :!),
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "enable-shared")), :==,
            s(:nil))),
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[]=,
            s(:str, "enable-shared"),
            s(:false)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :st),
              s(:lvasgn, :path),
              s(:lvasgn, :lib),
              s(:lvasgn, :libs),
              s(:splat,
                s(:lvasgn, :inc))),
            s(:send, nil, :find_tk,
              s(:lvar, :tklib),
              s(:lvar, :stubs),
              s(:lvar, :tkversion),
              s(:splat,
                s(:lvar, :tk_opt_paths))))), nil),
      s(:if,
        s(:lvar, :st),
        s(:begin,
          s(:if,
            s(:lvar, :path),
            s(:begin,
              s(:or_asgn,
                s(:gvasgn, :$LIBPATH),
                s(:array)),
              s(:op_asgn,
                s(:gvasgn, :$LIBPATH), :|,
                s(:array,
                  s(:lvar, :path)))), nil),
          s(:if,
            s(:and,
              s(:lvar, :lib),
              s(:send,
                s(:send,
                  s(:lvar, :lib), :empty?), :!)),
            s(:gvasgn, :$libs,
              s(:send, nil, :append_library,
                s(:gvar, :$libs),
                s(:lvar, :lib))), nil),
          s(:if,
            s(:lvar, :libs),
            s(:send,
              s(:send,
                s(:begin,
                  s(:or_asgn,
                    s(:gvasgn, :$libs),
                    s(:str, ""))), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :libs)), nil),
          s(:or_asgn,
            s(:gvasgn, :$INCFLAGS),
            s(:str, "")),
          s(:block,
            s(:send,
              s(:lvar, :inc), :each),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:send,
                s(:gvar, :$INCFLAGS), :<<,
                s(:str, " -I")), :<<,
              s(:lvar, :f)))),
        s(:begin,
          s(:send, nil, :puts,
            s(:str, "Warning:: cannot find Tk library. tcltklib will not be compiled (tcltklib is disabled on your Ruby. That is, Ruby/Tk will not work). Please check configure options.")),
          s(:return,
            s(:false)))),
      s(:true))),
  s(:def, :find_tcltk_header,
    s(:args,
      s(:arg, :tclver),
      s(:arg, :tkver)),
    s(:begin,
      s(:lvasgn, :base_dir,
        s(:array)),
      s(:send,
        s(:lvar, :base_dir), :concat,
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:array,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "prefix")),
                    s(:str, "include")),
                  s(:str, "/usr/local/include"),
                  s(:str, "/usr/pkg/include"),
                  s(:str, "/usr/contrib/include"),
                  s(:str, "/usr/include")), :find_all),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :dir))), :map),
          s(:args,
            s(:arg, :dir)),
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :dir)))),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :CROSS_COMPILING), :!),
          s(:send, nil, :is_win32?)),
        s(:begin,
          s(:send,
            s(:lvar, :base_dir), :concat,
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "c:/Tcl/include"),
                      s(:str, "c:/Program Files/Tcl/include"),
                      s(:str, "c:/Program Files (x86)/Tcl/include"),
                      s(:str, "/Tcl/include"),
                      s(:str, "/Program Files/Tcl/include"),
                      s(:str, "/Program Files (x86)/Tcl/include")), :find_all),
                  s(:args,
                    s(:arg, :dir)),
                  s(:send,
                    s(:const, nil, :File), :directory?,
                    s(:lvar, :dir))), :map),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :dir)))),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "CPATH")),
            s(:op_asgn,
              s(:lvasgn, :base_dir), :|,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "CPATH")), :split,
                        s(:str, ";")), :find_all),
                    s(:args,
                      s(:arg, :dir)),
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :dir))), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:lvar, :dir)))), nil)), nil),
      s(:op_asgn,
        s(:lvasgn, :base_dir), :|,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "checked_shlib_dirs"))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "space-on-tk-libpath")), nil,
        s(:block,
          s(:send,
            s(:lvar, :base_dir), :delete_if),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:lvar, :path), :=~,
            s(:regexp,
              s(:str, " "),
              s(:regopt))))),
      s(:if,
        s(:send,
          s(:const, nil, :TclConfig_Info), :[],
          s(:str, "MKMF_PARAMS")),
        s(:lvasgn, :have_tcl_h,
          s(:true)),
        s(:begin,
          s(:send, nil, :print,
            s(:str, "\nSearch tcl.h")),
          s(:if,
            s(:and,
              s(:and,
                s(:send, nil, :enable_config,
                  s(:str, "tcl-h-ver-check"),
                  s(:true)),
                s(:lvar, :tclver)),
              s(:send,
                s(:lvar, :tclver), :=~,
                s(:regexp,
                  s(:str, "^\\D*(\\d)\\.?(\\d)"),
                  s(:regopt)))),
            s(:begin,
              s(:lvasgn, :major,
                s(:nth_ref, 1)),
              s(:lvasgn, :minor,
                s(:nth_ref, 2))),
            s(:lvasgn, :major,
              s(:lvasgn, :minor,
                s(:nil)))),
          s(:send, nil, :print,
            s(:str, ".")),
          s(:if,
            s(:and,
              s(:lvar, :major),
              s(:lvar, :minor)),
            s(:lvasgn, :version_check,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :code)),
                s(:send,
                  s(:lvar, :code), :<<,
                  s(:begin,
                    s(:dstr,
                      s(:dstr,
                        s(:str, "#if TCL_MAJOR_VERSION != "),
                        s(:begin,
                          s(:lvar, :major)),
                        s(:str, " || TCL_MINOR_VERSION != "),
                        s(:begin,
                          s(:lvar, :minor)),
                        s(:str, "\n")),
                      s(:str, "#error VERSION does not match\n"),
                      s(:str, "#endif")))))),
            s(:lvasgn, :version_check,
              s(:nil))),
          s(:lvasgn, :have_tcl_h,
            s(:send, nil, :have_header,
              s(:str, "tcl.h"),
              s(:block_pass,
                s(:lvar, :version_check)))),
          s(:if,
            s(:lvar, :have_tcl_h), nil,
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :tclver),
                  s(:send,
                    s(:send,
                      s(:lvar, :tclver), :empty?), :!)),
                s(:lvasgn, :versions,
                  s(:array,
                    s(:lvar, :tclver))),
                s(:lvasgn, :versions,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "search_versions")))),
              s(:lvasgn, :paths,
                s(:send,
                  s(:lvar, :base_dir), :dup)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :versions), :+,
                      s(:array,
                        s(:str, "")))), :each),
                s(:args,
                  s(:arg, :ver)),
                s(:send,
                  s(:lvar, :paths), :concat,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :base_dir), :map),
                      s(:args,
                        s(:arg, :dir)),
                      s(:array,
                        s(:send,
                          s(:send,
                            s(:lvar, :dir), :+,
                            s(:str, "/tcl")), :+,
                          s(:lvar, :ver)),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :dir), :+,
                              s(:str, "/tcl")), :+,
                            s(:lvar, :ver)), :+,
                          s(:str, "/include")),
                        s(:send,
                          s(:send,
                            s(:lvar, :dir), :+,
                            s(:str, "/tcl")), :+,
                          s(:send,
                            s(:lvar, :ver), :delete,
                            s(:str, "."))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :dir), :+,
                              s(:str, "/tcl")), :+,
                            s(:send,
                              s(:lvar, :ver), :delete,
                              s(:str, "."))), :+,
                          s(:str, "/include")))), :flatten))),
              s(:lvasgn, :paths,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :paths), :map),
                      s(:args,
                        s(:arg, :dir)),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:const, nil, :File), :directory?,
                            s(:lvar, :dir))),
                        s(:send,
                          s(:const, nil, :File), :expand_path,
                          s(:lvar, :dir)),
                        s(:nil))), :compact), :uniq)),
              s(:if,
                s(:or,
                  s(:lvar, :major),
                  s(:lvar, :minor)),
                s(:lvasgn, :version_check,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :code)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :major),
                        s(:send,
                          s(:lvar, :code), :<<,
                          s(:dstr,
                            s(:str, "#if TCL_MAJOR_VERSION != "),
                            s(:begin,
                              s(:lvar, :major)),
                            s(:str, "\n#error MAJOR_VERSION does not match\n#endif\n"))), nil),
                      s(:if,
                        s(:lvar, :minor),
                        s(:send,
                          s(:lvar, :code), :<<,
                          s(:dstr,
                            s(:str, "#if TCL_MINOR_VERSION != "),
                            s(:begin,
                              s(:lvar, :minor)),
                            s(:str, "\n#error MINOR_VERSION does not match\n#endif\n"))), nil),
                      s(:lvar, :code)))),
                s(:lvasgn, :version_check,
                  s(:nil))),
              s(:lvasgn, :have_tcl_h,
                s(:block,
                  s(:send,
                    s(:lvar, :paths), :find),
                  s(:args,
                    s(:arg, :path)),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:str, ".")),
                    s(:lvasgn, :inc_opt,
                      s(:dstr,
                        s(:str, " -I"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :path), :quote)))),
                    s(:if,
                      s(:send, nil, :try_header,
                        s(:str, "tcl"),
                        s(:lvar, :inc_opt),
                        s(:block_pass,
                          s(:lvar, :version_check))),
                      s(:begin,
                        s(:send,
                          s(:begin,
                            s(:or_asgn,
                              s(:gvasgn, :$INCFLAGS),
                              s(:str, ""))), :<<,
                          s(:lvar, :inc_opt)),
                        s(:true)),
                      s(:false))))))))),
      s(:if,
        s(:send,
          s(:const, nil, :TkConfig_Info), :[],
          s(:str, "MKMF_PARAMS")),
        s(:lvasgn, :have_tk_h,
          s(:true)),
        s(:begin,
          s(:send, nil, :print,
            s(:str, "\nSearch tk.h")),
          s(:if,
            s(:and,
              s(:and,
                s(:send, nil, :enable_config,
                  s(:str, "tk-h-ver-check"),
                  s(:true)),
                s(:lvar, :tkver)),
              s(:send,
                s(:lvar, :tkver), :=~,
                s(:regexp,
                  s(:str, "^\\D*(\\d)\\.?(\\d)"),
                  s(:regopt)))),
            s(:begin,
              s(:lvasgn, :major,
                s(:nth_ref, 1)),
              s(:lvasgn, :minor,
                s(:nth_ref, 2))),
            s(:lvasgn, :major,
              s(:lvasgn, :minor,
                s(:nil)))),
          s(:send, nil, :print,
            s(:str, ".")),
          s(:if,
            s(:and,
              s(:lvar, :major),
              s(:lvar, :minor)),
            s(:lvasgn, :version_check,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :code)),
                s(:send,
                  s(:lvar, :code), :<<,
                  s(:begin,
                    s(:dstr,
                      s(:dstr,
                        s(:str, "#if TK_MAJOR_VERSION != "),
                        s(:begin,
                          s(:lvar, :major)),
                        s(:str, " || TK_MINOR_VERSION != "),
                        s(:begin,
                          s(:lvar, :minor)),
                        s(:str, "\n")),
                      s(:str, "#error VERSION does not match\n"),
                      s(:str, "#endif")))))),
            s(:lvasgn, :version_check,
              s(:nil))),
          s(:lvasgn, :have_tk_h,
            s(:send, nil, :have_header,
              s(:str, "tk.h"))),
          s(:if,
            s(:lvar, :have_tk_h), nil,
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :tkver),
                  s(:send,
                    s(:send,
                      s(:lvar, :tkver), :empty?), :!)),
                s(:lvasgn, :versions,
                  s(:array,
                    s(:lvar, :tkver))),
                s(:lvasgn, :versions,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "search_versions")))),
              s(:lvasgn, :paths,
                s(:send,
                  s(:lvar, :base_dir), :dup)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :versions), :+,
                      s(:array,
                        s(:str, "")))), :each),
                s(:args,
                  s(:arg, :ver)),
                s(:send,
                  s(:lvar, :paths), :concat,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :base_dir), :map),
                      s(:args,
                        s(:arg, :dir)),
                      s(:array,
                        s(:send,
                          s(:send,
                            s(:lvar, :dir), :+,
                            s(:str, "/tk")), :+,
                          s(:lvar, :ver)),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :dir), :+,
                              s(:str, "/tk")), :+,
                            s(:lvar, :ver)), :+,
                          s(:str, "/include")),
                        s(:send,
                          s(:send,
                            s(:lvar, :dir), :+,
                            s(:str, "/tk")), :+,
                          s(:send,
                            s(:lvar, :ver), :delete,
                            s(:str, "."))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :dir), :+,
                              s(:str, "/tk")), :+,
                            s(:send,
                              s(:lvar, :ver), :delete,
                              s(:str, "."))), :+,
                          s(:str, "/include")))), :flatten))),
              s(:lvasgn, :paths,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :paths), :map),
                      s(:args,
                        s(:arg, :dir)),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:const, nil, :File), :directory?,
                            s(:lvar, :dir))),
                        s(:send,
                          s(:const, nil, :File), :expand_path,
                          s(:lvar, :dir)),
                        s(:nil))), :compact), :uniq)),
              s(:if,
                s(:or,
                  s(:lvar, :major),
                  s(:lvar, :minor)),
                s(:lvasgn, :version_check,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :code)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :major),
                        s(:send,
                          s(:lvar, :code), :<<,
                          s(:dstr,
                            s(:str, "#if TK_MAJOR_VERSION != "),
                            s(:begin,
                              s(:lvar, :major)),
                            s(:str, "\n#error MAJOR_VERSION does not match\n#endif\n"))), nil),
                      s(:if,
                        s(:lvar, :minor),
                        s(:send,
                          s(:lvar, :code), :<<,
                          s(:dstr,
                            s(:str, "#if TK_MINOR_VERSION != "),
                            s(:begin,
                              s(:lvar, :minor)),
                            s(:str, "\n#error MINOR_VERSION does not match\n#endif\n"))), nil),
                      s(:lvar, :code)))),
                s(:lvasgn, :version_check,
                  s(:nil))),
              s(:lvasgn, :have_tk_h,
                s(:block,
                  s(:send,
                    s(:lvar, :paths), :find),
                  s(:args,
                    s(:arg, :path)),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:str, ".")),
                    s(:lvasgn, :inc_opt,
                      s(:dstr,
                        s(:str, " -I"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :path), :quote)))),
                    s(:if,
                      s(:send, nil, :try_header,
                        s(:array,
                          s(:str, "tcl.h"),
                          s(:str, "tk.h")),
                        s(:lvar, :inc_opt),
                        s(:block_pass,
                          s(:lvar, :version_check))),
                      s(:begin,
                        s(:send,
                          s(:begin,
                            s(:or_asgn,
                              s(:gvasgn, :$INCFLAGS),
                              s(:str, ""))), :<<,
                          s(:lvar, :inc_opt)),
                        s(:true)),
                      s(:false))))))))),
      s(:if,
        s(:lvar, :have_tcl_h), nil,
        s(:send, nil, :puts,
          s(:str, "Can't find \"tcl.h\"."))),
      s(:if,
        s(:lvar, :have_tk_h), nil,
        s(:send, nil, :puts,
          s(:str, "Can't find \"tk.h\"."))),
      s(:and,
        s(:lvar, :have_tcl_h),
        s(:lvar, :have_tk_h)))),
  s(:def, :setup_for_macosx_framework,
    s(:args,
      s(:arg, :tclver),
      s(:arg, :tkver)),
    s(:begin,
      s(:if,
        s(:and,
          s(:gvar, :$LIBS),
          s(:send,
            s(:gvar, :$LIBS), :include?,
            s(:str, "-framework"))), nil,
        s(:send,
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$LIBS),
              s(:str, ""))), :<<,
          s(:str, " -framework Tk -framework Tcl"))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcl-framework-header")),
        s(:send,
          s(:send,
            s(:const, nil, :TclConfig_Info), :[],
            s(:str, "TCL_INCLUDE_SPEC")), :[]=,
          s(:int, 0),
          s(:int, 0),
          s(:dstr,
            s(:str, " -I"),
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "tcl-framework-header")), :quote)),
            s(:str, " "))),
        s(:begin,
          s(:lvasgn, :tcl_base,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcltk-framework")),
              s(:str, "Tcl.framework"))),
          s(:if,
            s(:lvar, :tclver),
            s(:send,
              s(:send,
                s(:const, nil, :TclConfig_Info), :[],
                s(:str, "TCL_INCLUDE_SPEC")), :<<,
              s(:dstr,
                s(:str, " -I"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :tcl_base),
                      s(:str, "Versions"),
                      s(:lvar, :tclver),
                      s(:str, "Headers")), :quote)),
                s(:str, " "))), nil),
          s(:send,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_INCLUDE_SPEC")), :<<,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :tcl_base),
              s(:str, "Headers"))),
          s(:if,
            s(:lvar, :tclver), nil,
            s(:begin,
              s(:lvasgn, :dir,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Dir), :glob,
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:lvar, :tcl_base),
                          s(:str, "Versions"),
                          s(:str, "*"),
                          s(:str, "Headers")),
                        s(:const,
                          s(:const, nil, :File), :FNM_CASEFOLD)), :sort), :reverse), :[],
                  s(:int, 0))),
              s(:if,
                s(:lvar, :dir),
                s(:send,
                  s(:send,
                    s(:const, nil, :TclConfig_Info), :[],
                    s(:str, "TCL_INCLUDE_SPEC")), :<<,
                  s(:dstr,
                    s(:str, "-I"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dir), :quote)),
                    s(:str, " "))), nil))))),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tk-framework-header")),
        s(:send,
          s(:send,
            s(:const, nil, :TkConfig_Info), :[],
            s(:str, "TK_INCLUDE_SPEC")), :[]=,
          s(:int, 0),
          s(:int, 0),
          s(:dstr,
            s(:str, " -I"),
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :TkLib_Config), :[],
                  s(:str, "tk-framework-header")), :quote)),
            s(:str, " "))),
        s(:begin,
          s(:lvasgn, :tk_base,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcltk-framework")),
              s(:str, "Tk.framework"))),
          s(:if,
            s(:lvar, :tkver),
            s(:send,
              s(:send,
                s(:const, nil, :TkConfig_Info), :[],
                s(:str, "TK_INCLUDE_SPEC")), :<<,
              s(:dstr,
                s(:str, " -I"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :tk_base),
                      s(:str, "Versions"),
                      s(:lvar, :tkver),
                      s(:str, "Headers")), :quote)),
                s(:str, " "))), nil),
          s(:send,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_INCLUDE_SPEC")), :<<,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :tk_base),
              s(:str, "Headers"))),
          s(:if,
            s(:lvar, :tkver), nil,
            s(:begin,
              s(:lvasgn, :dir,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Dir), :glob,
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:lvar, :tk_base),
                          s(:str, "Versions"),
                          s(:str, "*"),
                          s(:str, "Headers")),
                        s(:const,
                          s(:const, nil, :File), :FNM_CASEFOLD)), :sort), :reverse), :[],
                  s(:int, 0))),
              s(:if,
                s(:lvar, :dir),
                s(:send,
                  s(:send,
                    s(:const, nil, :TkConfig_Info), :[],
                    s(:str, "TK_INCLUDE_SPEC")), :<<,
                  s(:dstr,
                    s(:str, "-I"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dir), :quote)),
                    s(:str, " "))), nil))))))),
  s(:def, :find_X11,
    s(:args,
      s(:restarg, :opt_paths)),
    s(:begin,
      s(:lvasgn, :defaults,
        s(:array,
          s(:str, "/usr/X11*/lib"),
          s(:str, "/usr/lib/X11*"),
          s(:str, "/usr/local/X11*"),
          s(:str, "/usr/openwin/lib"))),
      s(:lvasgn, :paths,
        s(:array)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :opt_paths), :compact), :each),
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:lvar, :paths), :concat,
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:send,
              s(:send,
                s(:lvar, :path), :strip), :chomp,
              s(:str, "/")),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)))),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :defaults), :compact), :each),
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:lvar, :paths), :concat,
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:send,
              s(:send,
                s(:lvar, :path), :strip), :chomp,
              s(:str, "/")),
            s(:const,
              s(:const, nil, :File), :FNM_CASEFOLD)))),
      s(:lvasgn, :st,
        s(:send, nil, :find_library,
          s(:str, "X11"),
          s(:str, "XOpenDisplay"),
          s(:splat,
            s(:lvar, :paths)))),
      s(:if,
        s(:lvar, :st), nil,
        s(:send, nil, :puts,
          s(:str, "Warning:: cannot find X11 library. tcltklib will not be compiled (tcltklib is disabled on your Ruby. That is, Ruby/Tk will not work). Please check configure options. If your Tcl/Tk don't require X11, please try --without-X11."))),
      s(:lvar, :st))),
  s(:def, :search_X_libraries,
    s(:args),
    s(:begin,
      s(:lvasgn, :use_tkConfig,
        s(:false)),
      s(:if,
        s(:send,
          s(:const, nil, :TkConfig_Info), :[],
          s(:str, "config_file_path")),
        s(:if,
          s(:or,
            s(:begin,
              s(:and,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_XINCLUDES")),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TkConfig_Info), :[],
                        s(:str, "TK_XINCLUDES")), :strip), :empty?), :!))),
            s(:begin,
              s(:and,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_XLIBSW")),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TkConfig_Info), :[],
                        s(:str, "TK_XLIBSW")), :strip), :empty?), :!)))),
          s(:begin,
            s(:lvasgn, :use_tkConfig,
              s(:true)),
            s(:lvasgn, :use_X,
              s(:send, nil, :with_config,
                s(:str, "X11"),
                s(:true)))),
          s(:lvasgn, :use_X,
            s(:send, nil, :with_config,
              s(:str, "X11"),
              s(:false)))),
        s(:lvasgn, :use_X,
          s(:send, nil, :with_config,
            s(:str, "X11"),
            s(:send,
              s(:begin,
                s(:or,
                  s(:send, nil, :is_win32?),
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tcltk-framework")))), :!)))),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :TkConfig_Info), :[],
            s(:str, "TK_XINCLUDES")),
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_XINCLUDES")), :strip), :empty?), :!)),
        s(:send,
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:gvasgn, :$INCFLAGS),
                s(:str, ""))), :<<,
            s(:str, " ")), :<<,
          s(:send,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_XINCLUDES")), :strip)), nil),
      s(:if,
        s(:lvar, :use_X),
        s(:begin,
          s(:send, nil, :puts,
            s(:str, "Use X11 libraries (or use TK_XINCLUDES/TK_XLIBSW information on tkConfig.sh).")),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :x11_idir),
              s(:lvasgn, :x11_ldir)),
            s(:send, nil, :dir_config,
              s(:str, "X11"))),
          s(:lvasgn, :x11_ldir2,
            s(:send, nil, :with_config,
              s(:str, "X11-lib"))),
          s(:if,
            s(:send, nil, :find_X11,
              s(:lvar, :x11_ldir2),
              s(:lvar, :x11_ldir)), nil,
            s(:begin,
              s(:send, nil, :puts,
                s(:str, "Can't find X11 libraries. ")),
              s(:if,
                s(:and,
                  s(:and,
                    s(:lvar, :use_tkConfig),
                    s(:send,
                      s(:const, nil, :TkConfig_Info), :[],
                      s(:str, "TK_XLIBSW"))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkConfig_Info), :[],
                          s(:str, "TK_XLIBSW")), :strip), :empty?), :!)),
                s(:begin,
                  s(:send, nil, :puts,
                    s(:str, "But, try to use TK_XLIBSW information (believe tkCOnfig.sh).")),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:or_asgn,
                            s(:gvasgn, :$libs),
                            s(:str, ""))), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:const, nil, :TkConfig_Info), :[],
                        s(:str, "TK_XLIBSW"))), :<<,
                    s(:str, " "))),
                s(:begin,
                  s(:send, nil, :puts,
                    s(:str, "So, can't make tcltklib.so which is required by Ruby/Tk.")),
                  s(:send, nil, :exit)))))), nil),
      s(:lvar, :use_X))),
  s(:def, :pthread_check,
    s(:args),
    s(:begin,
      s(:lvasgn, :tcl_major_ver,
        s(:nil)),
      s(:lvasgn, :tcl_minor_ver,
        s(:nil)),
      s(:case,
        s(:send, nil, :enable_config,
          s(:str, "tcl-thread")),
        s(:when,
          s(:true),
          s(:lvasgn, :tcl_enable_thread,
            s(:true))),
        s(:when,
          s(:false),
          s(:lvasgn, :tcl_enable_thread,
            s(:false))),
        s(:lvasgn, :tcl_enable_thread,
          s(:nil))),
      s(:if,
        s(:send,
          s(:const, nil, :TclConfig_Info), :[],
          s(:str, "config_file_path")),
        s(:if,
          s(:send,
            s(:lvar, :tcl_enable_thread), :==,
            s(:true)),
          s(:send, nil, :puts,
            s(:str, "Warning: definition of tclConfig.sh is ignored, because --enable-tcl-thread option is given.")),
          s(:if,
            s(:send,
              s(:lvar, :tcl_enable_thread), :==,
              s(:false)),
            s(:send, nil, :puts,
              s(:str, "Warning: definition of tclConfig.sh is ignored, because --disable-tcl-thread option is given.")),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :TclConfig_Info), :[],
                  s(:str, "TCL_THREADS")),
                s(:lvasgn, :tcl_enable_thread,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TCL_THREADS")), :==,
                      s(:str, "1")))),
                s(:begin,
                  s(:lvasgn, :tcl_major_ver,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TCL_MAJOR_VERSION")), :to_i)),
                  s(:lvasgn, :tcl_minor_ver,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TCL_MINOR_VERSION")), :to_i)),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :tcl_major_ver), :<,
                        s(:int, 8)),
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :tcl_major_ver), :==,
                            s(:int, 8)),
                          s(:send,
                            s(:lvar, :tcl_minor_ver), :==,
                            s(:int, 0))))),
                    s(:lvasgn, :tcl_enable_thread,
                      s(:false)), nil))),
              s(:if,
                s(:send,
                  s(:lvar, :tcl_enable_thread), :==,
                  s(:nil)),
                s(:if,
                  s(:lvar, :tcl_major_ver),
                  s(:send, nil, :puts,
                    s(:dstr,
                      s(:str, "Warning: '"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :TclConfig_Info), :[],
                          s(:str, "config_file_path"))),
                      s(:str, "' doesn't include TCL_THREADS definition."))),
                  s(:send, nil, :puts,
                    s(:dstr,
                      s(:str, "Warning: '"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :TclConfig_Info), :[],
                          s(:str, "config_file_path"))),
                      s(:str, "' may not be a tclConfig file.")))), nil)))), nil),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :tcl_enable_thread), :==,
            s(:nil)),
          s(:send,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "config_file_path")), :!)),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :try_run,
              s(:str, "int main() { exit(0); }")),
            s(:resbody,
              s(:array,
                s(:const, nil, :Exception)), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "\n*****************************************************************************\n"),
                    s(:str, "**\n"),
                    s(:str, "** NATIVETHREAD SUPPORT CHECK WARNING:\n"),
                    s(:str, "**\n"),
                    s(:str, "**   We cannot check the consistency of nativethread support between\n"),
                    s(:str, "**   Ruby and the Tcl/Tk library in your environment (are you perhaps\n"),
                    s(:str, "**   cross-compiling?). If nativethread support for these 2 packages\n"),
                    s(:str, "**   is inconsistent you may find you get errors when running Ruby/Tk\n"),
                    s(:str, "**   (e.g. hangs or segmentation faults).  We strongly recommend\n"),
                    s(:str, "**   you to check the consistency manually.\n"),
                    s(:str, "**\n"),
                    s(:str, "*****************************************************************************\n"))),
                s(:return,
                  s(:true)))), nil)), nil),
      s(:if,
        s(:send,
          s(:lvar, :tcl_enable_thread), :==,
          s(:nil)),
        s(:if,
          s(:send, nil, :try_run,
            s(:dstr,
              s(:str, "#include <tcl.h>\n"),
              s(:str, "int main() {\n"),
              s(:str, "   Tcl_Interp *ip;\n"),
              s(:str, "   ip = Tcl_CreateInterp();\n"),
              s(:str, "   exit((Tcl_Eval(ip, \"set tcl_platform(threaded)\") == TCL_OK)? 0: 1);\n"),
              s(:str, "}\n"))),
          s(:lvasgn, :tcl_enable_thread,
            s(:true)),
          s(:if,
            s(:send, nil, :try_run,
              s(:dstr,
                s(:str, "#include <tcl.h>\n"),
                s(:str, "static Tcl_ThreadDataKey dataKey;\n"),
                s(:str, "int main() { exit((Tcl_GetThreadData(&dataKey, 1) == dataKey)? 1: 0); }\n"))),
            s(:lvasgn, :tcl_enable_thread,
              s(:true)),
            s(:lvasgn, :tcl_enable_thread,
              s(:false)))), nil),
      s(:if,
        s(:begin,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "ruby_with_thread"))),
        s(:begin,
          s(:or_asgn,
            s(:gvasgn, :$CPPFLAGS),
            s(:str, "")),
          s(:if,
            s(:lvar, :tcl_enable_thread), nil,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "\n*****************************************************************************\n"),
                s(:str, "**\n"),
                s(:str, "** NATIVETHREAD SUPPORT MODE WARNING:\n"),
                s(:str, "**\n"),
                s(:str, "**   Ruby is compiled with --enable-pthread, but your Tcl/Tk library\n"),
                s(:str, "**   seems to be compiled without nativethread support. Although you can\n"),
                s(:str, "**   create the tcltklib library, this combination may cause errors (e.g.\n"),
                s(:str, "**   hangs or segmentation faults). If you have no reason to keep the\n"),
                s(:str, "**   current nativethread support status, we recommend you reconfigure and\n"),
                s(:str, "**   recompile the libraries so that both or neither support nativethreads.\n"),
                s(:str, "**\n"),
                s(:str, "**   If you want change the status of nativethread support, please recompile\n"),
                s(:str, "**   Ruby without \"--enable-pthread\" configure option (If you use Ruby 1.9.x\n"),
                s(:str, "**   or later, you cannot remove this option, because it requires native-\n"),
                s(:str, "**   thread support.) or recompile Tcl/Tk with \"--enable-threads\" configure\n"),
                s(:str, "**   option (if your Tcl/Tk is later than or equal to Tcl/Tk 8.1).\n"),
                s(:str, "**\n"),
                s(:str, "*****************************************************************************\n")))),
          s(:if,
            s(:lvar, :tcl_enable_thread),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=1")),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=0"))),
          s(:return,
            s(:true))),
        s(:if,
          s(:lvar, :tcl_enable_thread),
          s(:begin,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "\n*****************************************************************************\n"),
                s(:str, "**\n"),
                s(:str, "** NATIVETHREAD SUPPORT MODE ERROR:\n"),
                s(:str, "**\n"),
                s(:str, "**   Ruby is not compiled with --enable-pthread, but your Tcl/Tk\n"),
                s(:str, "**   library seems to be compiled with nativethread support. This\n"),
                s(:str, "**   combination may cause frequent hang or segmentation fault\n"),
                s(:str, "**   errors when Ruby/Tk is working. We recommend that you NEVER\n"),
                s(:str, "**   create the library with such a combination of nativethread support.\n"),
                s(:str, "**\n"),
                s(:str, "**   Please recompile Ruby with the \"--enable-pthread\" configure option\n"),
                s(:str, "**   or recompile Tcl/Tk with the \"--disable-threads\" configure option.\n"),
                s(:str, "**\n"),
                s(:str, "*****************************************************************************\n"))),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=1")),
            s(:return,
              s(:false))),
          s(:begin,
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=0")),
            s(:return,
              s(:true))))))),
  s(:send, nil, :print,
    s(:str, "check functions.")),
  s(:block,
    s(:send,
      s(:array,
        s(:str, "ruby_native_thread_p"),
        s(:str, "rb_errinfo"),
        s(:str, "rb_safe_level"),
        s(:str, "rb_hash_lookup"),
        s(:str, "rb_proc_new"),
        s(:str, "rb_obj_untrust"),
        s(:str, "rb_obj_taint"),
        s(:str, "rb_set_safe_level_force"),
        s(:str, "rb_sourcefile"),
        s(:str, "rb_thread_alive_p"),
        s(:str, "rb_thread_check_trap_pending"),
        s(:str, "ruby_enc_find_basename")), :each),
    s(:args,
      s(:arg, :func)),
    s(:begin,
      s(:send, nil, :have_func,
        s(:lvar, :func),
        s(:str, "ruby.h")),
      s(:send, nil, :print,
        s(:str, ".")))),
  s(:send, nil, :print,
    s(:str, "\n")),
  s(:send, nil, :print,
    s(:str, "check struct members.")),
  s(:send, nil, :have_struct_member,
    s(:str, "struct RArray"),
    s(:str, "ptr"),
    s(:str, "ruby.h")),
  s(:send, nil, :print,
    s(:str, ".")),
  s(:send, nil, :have_struct_member,
    s(:str, "struct RArray"),
    s(:str, "len"),
    s(:str, "ruby.h")),
  s(:send, nil, :print,
    s(:str, "\n")),
  s(:if,
    s(:send, nil, :is_win32?), nil,
    s(:begin,
      s(:send, nil, :print,
        s(:str, "check libraries.")),
      s(:send, nil, :have_library,
        s(:str, "nsl"),
        s(:str, "t_open")),
      s(:send, nil, :print,
        s(:str, ".")),
      s(:send, nil, :have_library,
        s(:str, "socket"),
        s(:str, "socket")),
      s(:send, nil, :print,
        s(:str, ".")),
      s(:send, nil, :have_library,
        s(:str, "dl"),
        s(:str, "dlopen")),
      s(:send, nil, :print,
        s(:str, ".")),
      s(:send, nil, :have_library,
        s(:str, "m"),
        s(:str, "log"),
        s(:str, "math.h")),
      s(:send, nil, :print,
        s(:str, "\n")))),
  s(:or_asgn,
    s(:gvasgn, :$CPPFLAGS),
    s(:str, "")),
  s(:if,
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "cygwin"),
        s(:regopt)),
      s(:const, nil, :RUBY_PLATFORM)),
    s(:op_asgn,
      s(:gvasgn, :$CPPFLAGS), :+,
      s(:str, " -D_WIN32")), nil),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "ruby_with_thread"),
    s(:send, nil, :macro_defined?,
      s(:str, "HAVE_NATIVETHREAD"),
      s(:str, "#include \"ruby.h\""))),
  s(:casgn, nil, :TclConfig_Info,
    s(:hash)),
  s(:casgn, nil, :TkConfig_Info,
    s(:hash)),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "tcl-build-dir"),
    s(:send, nil, :with_config,
      s(:str, "tcl-build-dir"))),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "tk-build-dir"),
    s(:send, nil, :with_config,
      s(:str, "tk-build-dir"))),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tcl-build-dir")),
    s(:begin,
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "use Tcl build (pre-install) dir \""),
          s(:begin,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tcl-build-dir"))),
          s(:str, "\""))),
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tcl-build-dir"),
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcl-build-dir")))),
      s(:lvasgn, :base,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcl-build-dir")))),
      s(:send,
        s(:begin,
          s(:or_asgn,
            s(:gvasgn, :$INCFLAGS),
            s(:str, ""))), :<<,
        s(:dstr,
          s(:str, " -I"),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :base),
                s(:str, "generic")), :quote)),
          s(:str, " -I"),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcl-build-dir")), :quote)))),
      s(:or_asgn,
        s(:gvasgn, :$LIBPATH),
        s(:array)),
      s(:op_asgn,
        s(:gvasgn, :$LIBPATH), :|,
        s(:array,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcl-build-dir"))))), nil),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tk-build-dir")),
    s(:begin,
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "use Tk build (pre-install) dir \""),
          s(:begin,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tk-build-dir"))),
          s(:str, "\""))),
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tk-build-dir"),
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tk-build-dir")))),
      s(:lvasgn, :base,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tk-build-dir")))),
      s(:send,
        s(:begin,
          s(:or_asgn,
            s(:gvasgn, :$INCFLAGS),
            s(:str, ""))), :<<,
        s(:dstr,
          s(:str, " -I"),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :base),
                s(:str, "generic")), :quote)),
          s(:str, " -I"),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tk-build-dir")), :quote)))),
      s(:or_asgn,
        s(:gvasgn, :$LIBPATH),
        s(:array)),
      s(:op_asgn,
        s(:gvasgn, :$LIBPATH), :|,
        s(:array,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tk-build-dir"))))), nil),
  s(:lvasgn, :tcltk_version,
    s(:send, nil, :with_config,
      s(:str, "tcltkversion"))),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "tcltkversion"),
    s(:send, nil, :check_tcltk_version,
      s(:lvar, :tcltk_version))),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tcl-build-dir")),
    s(:if,
      s(:begin,
        s(:lvasgn, :cfgfile,
          s(:send, nil, :with_config,
            s(:str, "tclConfig-file"),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tcl-build-dir")),
                  s(:str, "tclConfig*.sh")),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)), :[],
              s(:int, 0))))),
      s(:begin,
        s(:send,
          s(:const, nil, :TclConfig_Info), :[]=,
          s(:str, "config_file_path"),
          s(:lvar, :cfgfile)),
        s(:send,
          s(:const, nil, :TkLib_Config), :[]=,
          s(:str, "tclConfig_info"),
          s(:lvasgn, :cfginfo,
            s(:send, nil, :parse_tclConfig,
              s(:lvar, :cfgfile)))),
        s(:if,
          s(:lvasgn, :tclver,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcltkversion")), :[],
              s(:int, 0))),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcltkversion")), :[],
              s(:int, 0)), :sub!,
            s(:regexp,
              s(:str, "\\d(\\.?)\\d"),
              s(:regopt)),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TCL_MAJOR_VERSION"))),
              s(:str, "\\1"),
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TCL_MINOR_VERSION"))))),
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tcltkversion")), :[]=,
            s(:int, 0),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TCL_MAJOR_VERSION"))),
              s(:str, "."),
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TCL_MINOR_VERSION"))))))), nil), nil),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tk-build-dir")),
    s(:if,
      s(:begin,
        s(:lvasgn, :cfgfile,
          s(:send, nil, :with_config,
            s(:str, "tkConfig-file"),
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tk-build-dir")),
                  s(:str, "tkConfig*.sh")),
                s(:const,
                  s(:const, nil, :File), :FNM_CASEFOLD)), :[],
              s(:int, 0))))),
      s(:begin,
        s(:send,
          s(:const, nil, :TkConfig_Info), :[]=,
          s(:str, "config_file_path"),
          s(:lvar, :cfgfile)),
        s(:send,
          s(:const, nil, :TkLib_Config), :[]=,
          s(:str, "tkConfig_info"),
          s(:lvasgn, :cfginfo,
            s(:send, nil, :parse_tclConfig,
              s(:lvar, :cfgfile)))),
        s(:if,
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tcltkversion")), :[],
            s(:int, 1)),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcltkversion")), :[],
              s(:int, 1)), :sub!,
            s(:regexp,
              s(:str, "\\d(\\.?)\\d"),
              s(:regopt)),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TK_MAJOR_VERSION"))),
              s(:str, "\\1"),
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TK_MINOR_VERSION"))))),
          s(:send,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tcltkversion")), :[]=,
            s(:int, 1),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TK_MAJOR_VERSION"))),
              s(:str, "."),
              s(:begin,
                s(:send,
                  s(:lvar, :cfginfo), :[],
                  s(:str, "TK_MINOR_VERSION"))))))), nil), nil),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :tclver),
      s(:lvasgn, :tkver)),
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tcltkversion"))),
  s(:if,
    s(:or,
      s(:lvar, :tclver),
      s(:lvar, :tkver)),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "Specified Tcl/Tk version is "),
        s(:begin,
          s(:send,
            s(:array,
              s(:lvar, :tclver),
              s(:lvar, :tkver)), :inspect)))), nil),
  s(:if,
    s(:lvasgn, :activeTcl,
      s(:send, nil, :with_config,
        s(:str, "ActiveTcl"),
        s(:send,
          s(:begin,
            s(:and,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcl-build-dir")),
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tk-build-dir")))), :!))),
    s(:begin,
      s(:send, nil, :puts,
        s(:str, "Use ActiveTcl libraries (if available).")),
      s(:if,
        s(:send,
          s(:lvar, :activeTcl), :kind_of?,
          s(:const, nil, :String)), nil,
        s(:if,
          s(:const, nil, :CROSS_COMPILING), nil,
          s(:if,
            s(:send, nil, :is_win32?),
            s(:lvasgn, :activeTcl,
              s(:str, "c:/Tcl*")),
            s(:if,
              s(:send, nil, :is_macosx?),
              s(:lvasgn, :activeTcl,
                s(:str, "/Library/Frameworks")),
              s(:lvasgn, :activeTcl,
                s(:str, "/opt/ActiveTcl*"))))))), nil),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "ActiveTcl"),
    s(:lvar, :activeTcl)),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "space-on-tk-libpath"),
    s(:send, nil, :enable_config,
      s(:str, "space-on-tk-libpath"),
      s(:send,
        s(:send, nil, :is_win32?), :!))),
  s(:lvasgn, :stubs,
    s(:or,
      s(:send, nil, :enable_config,
        s(:str, "tcltk-stubs")),
      s(:send, nil, :with_config,
        s(:str, "tcltk-stubs")))),
  s(:if,
    s(:begin,
      s(:send,
        s(:const, nil, :TkLib_Config), :[]=,
        s(:str, "tcltk-stubs"),
        s(:lvar, :stubs))),
    s(:begin,
      s(:send, nil, :puts,
        s(:str, "Compile with Tcl/Tk stubs.")),
      s(:or_asgn,
        s(:gvasgn, :$CPPFLAGS),
        s(:str, "")),
      s(:op_asgn,
        s(:gvasgn, :$CPPFLAGS), :+,
        s(:str, " -DUSE_TCL_STUBS -DUSE_TK_STUBS"))), nil),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tcl-build-dir")),
    s(:begin,
      s(:lvasgn, :tcl_idir,
        s(:send,
          s(:const, nil, :File), :join,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tcl-build-dir"))),
          s(:str, "generic"))),
      s(:lvasgn, :tcl_ldir,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcl-build-dir")))),
    s(:masgn,
      s(:mlhs,
        s(:lvasgn, :tcl_idir),
        s(:lvasgn, :tcl_ldir)),
      s(:send, nil, :dir_config,
        s(:str, "tcl")))),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tk-build-dir")),
    s(:begin,
      s(:lvasgn, :tk_idir,
        s(:send,
          s(:const, nil, :File), :join,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:send,
              s(:const, nil, :TkLib_Config), :[],
              s(:str, "tk-build-dir"))),
          s(:str, "generic"))),
      s(:lvasgn, :tk_ldir,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tk-build-dir")))),
    s(:masgn,
      s(:mlhs,
        s(:lvasgn, :tk_idir),
        s(:lvasgn, :tk_ldir)),
      s(:send, nil, :dir_config,
        s(:str, "tk")))),
  s(:if,
    s(:lvar, :tcl_idir), nil,
    s(:lvasgn, :tcl_idir,
      s(:lvar, :tk_idir))),
  s(:if,
    s(:lvar, :tcl_ldir), nil,
    s(:lvasgn, :tcl_ldir,
      s(:lvar, :tk_ldir))),
  s(:if,
    s(:lvar, :tk_idir), nil,
    s(:lvasgn, :tk_idir,
      s(:lvar, :tcl_idir))),
  s(:if,
    s(:lvar, :tk_ldir), nil,
    s(:lvasgn, :tk_ldir,
      s(:lvar, :tcl_ldir))),
  s(:or_asgn,
    s(:send,
      s(:const, nil, :TclConfig_Info), :[],
      s(:str, "TCL_INCLUDE_SPEC")),
    s(:str, "")),
  s(:or_asgn,
    s(:send,
      s(:const, nil, :TkConfig_Info), :[],
      s(:str, "TK_INCLUDE_SPEC")),
    s(:str, "")),
  s(:if,
    s(:lvar, :tcl_idir),
    s(:send,
      s(:send,
        s(:const, nil, :TclConfig_Info), :[],
        s(:str, "TCL_INCLUDE_SPEC")), :[]=,
      s(:int, 0),
      s(:int, 0),
      s(:dstr,
        s(:str, "-I"),
        s(:begin,
          s(:send,
            s(:lvar, :tcl_idir), :quote)),
        s(:str, " "))), nil),
  s(:if,
    s(:lvar, :tk_idir),
    s(:send,
      s(:send,
        s(:const, nil, :TkConfig_Info), :[],
        s(:str, "TK_INCLUDE_SPEC")), :[]=,
      s(:int, 0),
      s(:int, 0),
      s(:dstr,
        s(:str, "-I"),
        s(:begin,
          s(:send,
            s(:lvar, :tk_idir), :quote)),
        s(:str, " "))), nil),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "tcl-NG-path"),
    s(:array)),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "tk-NG-path"),
    s(:array)),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :tclcfg),
      s(:lvasgn, :tkcfg)),
    s(:send, nil, :get_tclConfig,
      s(:or,
        s(:send,
          s(:const, nil, :TclConfig_Info), :[],
          s(:str, "config_file_path")),
        s(:send, nil, :with_config,
          s(:str, "tclConfig-file"),
          s(:true))),
      s(:or,
        s(:send,
          s(:const, nil, :TkConfig_Info), :[],
          s(:str, "config_file_path")),
        s(:send, nil, :with_config,
          s(:str, "tkConfig-file"),
          s(:true))),
      s(:if,
        s(:begin,
          s(:send,
            s(:const, nil, :TclConfig_Info), :[],
            s(:str, "config_file_path"))),
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :TclConfig_Info), :[],
            s(:str, "config_file_path"))),
        s(:send, nil, :with_config,
          s(:str, "tclConfig-dir"),
          s(:or,
            s(:lvar, :tcl_ldir),
            s(:true)))),
      s(:if,
        s(:begin,
          s(:send,
            s(:const, nil, :TkConfig_Info), :[],
            s(:str, "config_file_path"))),
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :TkConfig_Info), :[],
            s(:str, "config_file_path"))),
        s(:send, nil, :with_config,
          s(:str, "tkConfig-dir"),
          s(:or,
            s(:lvar, :tk_ldir),
            s(:true)))))),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tclConfig_info")),
    s(:send,
      s(:const, nil, :TclConfig_Info), :merge!,
      s(:send,
        s(:const, nil, :TkLib_Config), :[],
        s(:str, "tclConfig_info"))), nil),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tkConfig_info")),
    s(:send,
      s(:const, nil, :TkConfig_Info), :merge!,
      s(:send,
        s(:const, nil, :TkLib_Config), :[],
        s(:str, "tkConfig_info"))), nil),
  s(:or_asgn,
    s(:send,
      s(:const, nil, :TclConfig_Info), :[],
      s(:str, "config_file_path")),
    s(:lvar, :tclcfg)),
  s(:or_asgn,
    s(:send,
      s(:const, nil, :TkConfig_Info), :[],
      s(:str, "config_file_path")),
    s(:lvar, :tkcfg)),
  s(:lvasgn, :tk_cfg_dir,
    s(:rescue,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:send,
          s(:const, nil, :TkConfig_Info), :[],
          s(:str, "config_file_path"))),
      s(:resbody, nil, nil,
        s(:nil)), nil)),
  s(:lvasgn, :tcl_cfg_dir,
    s(:rescue,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:send,
          s(:const, nil, :TclConfig_Info), :[],
          s(:str, "config_file_path"))),
      s(:resbody, nil, nil,
        s(:nil)), nil)),
  s(:lvasgn, :tk_ldir_list,
    s(:send,
      s(:array,
        s(:lvar, :tk_ldir),
        s(:lvar, :tk_cfg_dir)), :uniq)),
  s(:lvasgn, :tcl_ldir_list,
    s(:send,
      s(:array,
        s(:lvar, :tcl_ldir),
        s(:lvar, :tcl_cfg_dir)), :uniq)),
  s(:if,
    s(:send,
      s(:const, nil, :TkConfig_Info), :[],
      s(:str, "config_file_path")),
    s(:begin,
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tk-build-dir")),
        s(:lvasgn, :spec_dir,
          s(:send, nil, :get_libpath,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_LIB_FLAG")),
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_BUILD_LIB_SPEC")))),
        s(:lvasgn, :spec_dir,
          s(:send, nil, :get_libpath,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_LIB_FLAG")),
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_LIB_SPEC"))))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :directory?,
          s(:lvar, :spec_dir)),
        s(:send,
          s(:lvar, :tk_ldir_list), :<<,
          s(:lvar, :spec_dir)), nil)), nil),
  s(:if,
    s(:send,
      s(:const, nil, :TclConfig_Info), :[],
      s(:str, "config_file_path")),
    s(:begin,
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcl-build-dir")),
        s(:lvasgn, :spec_dir,
          s(:send, nil, :get_libpath,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_LIB_FLAG")),
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_BUILD_LIB_SPEC")))),
        s(:lvasgn, :spec_dir,
          s(:send, nil, :get_libpath,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_LIB_FLAG")),
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_LIB_SPEC"))))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :directory?,
          s(:lvar, :spec_dir)),
        s(:send,
          s(:lvar, :tcl_ldir_list), :<<,
          s(:lvar, :spec_dir)), nil)), nil),
  s(:send,
    s(:const, nil, :TkLib_Config), :[]=,
    s(:str, "checked_shlib_dirs"),
    s(:send, nil, :check_shlib_search_path,
      s(:send, nil, :with_config,
        s(:str, "tk-shlib-search-path")))),
  s(:or_asgn,
    s(:gvasgn, :$CPPFLAGS),
    s(:str, "")),
  s(:op_asgn,
    s(:gvasgn, :$defs), :+,
    s(:send, nil, :collect_tcltk_defs,
      s(:send,
        s(:const, nil, :TclConfig_Info), :[],
        s(:str, "TCL_DEFS")),
      s(:send,
        s(:const, nil, :TkConfig_Info), :[],
        s(:str, "TK_DEFS")))),
  s(:if,
    s(:send,
      s(:const, nil, :TkLib_Config), :[],
      s(:str, "tcltk-framework")),
    s(:begin,
      s(:send, nil, :puts,
        s(:str, "Use MacOS X Frameworks.")),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tcl-build-dir")),
        s(:send,
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:gvasgn, :$LDFLAGS),
                s(:str, ""))), :<<,
            s(:str, " ")), :<<,
          s(:send, nil, :libpathflag,
            s(:array,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tcl-build-dir"))))), nil),
      s(:lvasgn, :libs,
        s(:str, "")),
      s(:if,
        s(:lvar, :tcl_cfg_dir),
        s(:begin,
          s(:or_asgn,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_LIBS")),
            s(:str, "")),
          s(:send,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$INCFLAGS),
                  s(:str, ""))), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_INCLUDE_SPEC"))),
          s(:send,
            s(:send,
              s(:lvar, :libs), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:const, nil, :TclConfig_Info), :[],
              s(:str, "TCL_LIBS"))),
          s(:if,
            s(:lvar, :stubs),
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tcl-build-dir")),
                  s(:send,
                    s(:const, nil, :TclConfig_Info), :[],
                    s(:str, "TCL_BUILD_STUB_LIB_SPEC"))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TCL_BUILD_STUB_LIB_SPEC")), :strip), :empty?), :!)),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TclConfig_Info), :[],
                  s(:str, "TCL_BUILD_STUB_LIB_SPEC"))),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TclConfig_Info), :[],
                  s(:str, "TCL_STUB_LIB_SPEC")))),
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tcl-build-dir")),
                  s(:send,
                    s(:const, nil, :TclConfig_Info), :[],
                    s(:str, "TCL_BUILD_LIB_SPEC"))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TCL_BUILD_LIB_SPEC")), :strip), :empty?), :!)),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TclConfig_Info), :[],
                  s(:str, "TCL_BUILD_LIB_SPEC"))),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TclConfig_Info), :[],
                  s(:str, "TCL_LIB_SPEC")))))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :TkLib_Config), :[],
          s(:str, "tk-build-dir")),
        s(:send,
          s(:send,
            s(:lvar, :libs), :<<,
            s(:str, " ")), :<<,
          s(:send, nil, :libpathflag,
            s(:array,
              s(:send,
                s(:const, nil, :TkLib_Config), :[],
                s(:str, "tk-build-dir"))))), nil),
      s(:if,
        s(:lvar, :tk_cfg_dir),
        s(:begin,
          s(:or_asgn,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_LIBS")),
            s(:str, "")),
          s(:send,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$INCFLAGS),
                  s(:str, ""))), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_INCLUDE_SPEC"))),
          s(:send,
            s(:send,
              s(:lvar, :libs), :<<,
              s(:str, " ")), :<<,
            s(:send,
              s(:const, nil, :TkConfig_Info), :[],
              s(:str, "TK_LIBS"))),
          s(:if,
            s(:lvar, :stubs),
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tk-build-dir")),
                  s(:send,
                    s(:const, nil, :TclConfig_Info), :[],
                    s(:str, "TK_BUILD_STUB_LIB_SPEC"))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TK_BUILD_STUB_LIB_SPEC")), :strip), :empty?), :!)),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_BUILD_STUB_LIB_SPEC"))),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_STUB_LIB_SPEC")))),
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:const, nil, :TkLib_Config), :[],
                    s(:str, "tk-build-dir")),
                  s(:send,
                    s(:const, nil, :TclConfig_Info), :[],
                    s(:str, "TK_BUILD_LIB_SPEC"))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :TclConfig_Info), :[],
                        s(:str, "TK_BUILD_LIB_SPEC")), :strip), :empty?), :!)),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_BUILD_LIB_SPEC"))),
              s(:send,
                s(:send,
                  s(:lvar, :libs), :<<,
                  s(:str, " ")), :<<,
                s(:send,
                  s(:const, nil, :TkConfig_Info), :[],
                  s(:str, "TK_LIB_SPEC")))))), nil),
      s(:send,
        s(:send,
          s(:gvar, :$LDFLAGS), :<<,
          s(:str, " ")), :<<,
        s(:lvar, :libs)),
      s(:if,
        s(:and,
          s(:lvar, :tcl_cfg_dir),
          s(:lvar, :tk_cfg_dir)),
        s(:send, nil, :setup_for_macosx_framework,
          s(:lvar, :tclver),
          s(:lvar, :tkver)), nil)), nil),
  s(:lvasgn, :tklib,
    s(:send, nil, :with_config,
      s(:str, "tklib"))),
  s(:lvasgn, :tcllib,
    s(:send, nil, :with_config,
      s(:str, "tcllib"))),
  s(:lvasgn, :use_X,
    s(:send, nil, :search_X_libraries)),
  s(:if,
    s(:and,
      s(:begin,
        s(:or,
          s(:send,
            s(:const, nil, :TkLib_Config), :[],
            s(:str, "tcltk-framework")),
          s(:begin,
            s(:and,
              s(:send, nil, :find_tcltk_header,
                s(:lvar, :tclver),
                s(:lvar, :tkver)),
              s(:send, nil, :find_tcltk_library,
                s(:lvar, :tcllib),
                s(:lvar, :tklib),
                s(:lvar, :stubs),
                s(:lvar, :tclver),
                s(:lvar, :tkver),
                s(:lvar, :tcl_ldir_list),
                s(:lvar, :tk_ldir_list)))))),
      s(:begin,
        s(:or,
          s(:lvar, :stubs),
          s(:send, nil, :pthread_check)))),
    s(:begin,
      s(:or_asgn,
        s(:gvasgn, :$INSTALLFILES),
        s(:array)),
      s(:send,
        s(:gvar, :$INSTALLFILES), :<<,
        s(:array,
          s(:str, "lib/tkextlib/SUPPORT_STATUS"),
          s(:str, "$(RUBYLIBDIR)"),
          s(:str, "lib"))),
      s(:send,
        s(:gvar, :$defs), :<<,
        s(:dstr,
          s(:str, "-DRUBY_VERSION=\\\""),
          s(:begin,
            s(:const, nil, :RUBY_VERSION)),
          s(:str, "\\\""))),
      s(:send,
        s(:gvar, :$defs), :<<,
        s(:dstr,
          s(:str, "-DRUBY_RELEASE_DATE=\\\""),
          s(:begin,
            s(:const, nil, :RUBY_RELEASE_DATE)),
          s(:str, "\\\""))),
      s(:block,
        s(:send,
          s(:gvar, :$defs), :delete_if),
        s(:args,
          s(:arg, :x)),
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "^-Du?intptr_t="),
            s(:regopt)),
          s(:lvar, :x))),
      s(:send, nil, :create_makefile,
        s(:str, "tcltklib")),
      s(:send, nil, :puts,
        s(:str, "\nFind Tcl/Tk libraries. Make tcltklib.so which is required by Ruby/Tk."))),
    s(:begin,
      s(:send, nil, :puts,
        s(:str, "\nCan't find proper Tcl/Tk libraries. So, can't make tcltklib.so which is required by Ruby/Tk.")),
      s(:send, nil, :puts,
        s(:str, "If you have Tcl/Tk libraries on your environment, you may be able to use them with configure options (see ext/tk/README.tcltklib).")),
      s(:send, nil, :puts,
        s(:str, "At present, Tcl/Tk8.6 is not supported. Although you can try to use Tcl/Tk8.6 with configure options, it will not work correctly. I recommend you to use Tcl/Tk8.5 or 8.4.")))))
