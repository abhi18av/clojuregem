s(:begin,
  s(:send, nil, :require,
    s(:str, "multi-tk")),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "This is the Default Master Ipnterpreter")))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :padx),
        s(:int, 5)),
      s(:pair,
        s(:sym, :pady),
        s(:int, 3)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkButton), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "QUIT")),
        s(:pair,
          s(:sym, :command),
          s(:block,
            s(:send, nil, :proc),
            s(:args),
            s(:send, nil, :exit))))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :pady),
        s(:int, 3)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkFrame), :new,
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 2)),
        s(:pair,
          s(:sym, :height),
          s(:int, 3)),
        s(:pair,
          s(:sym, :relief),
          s(:sym, :sunken)))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :fill),
        s(:sym, :x)),
      s(:pair,
        s(:sym, :expand),
        s(:true)),
      s(:pair,
        s(:sym, :padx),
        s(:int, 10)),
      s(:pair,
        s(:sym, :pady),
        s(:int, 7)))),
  s(:lvasgn, :safe0_p,
    s(:block,
      s(:send, nil, :proc),
      s(:args,
        s(:restarg, :args)),
      s(:send, nil, :p,
        s(:lvar, :args)))),
  s(:send, nil, :puts,
    s(:str, "---- create a safe slave IP with Ruby's safe-level == 1 ----------")),
  s(:lvasgn, :ip,
    s(:block,
      s(:send,
        s(:const, nil, :MultiTkIp), :new_safe_slave,
        s(:int, 1)),
      s(:args,
        s(:restarg, :args)),
      s(:send,
        s(:lvar, :safe0_p), :[],
        s(:dstr,
          s(:str, "safe_slave safe_level == "),
          s(:begin,
            s(:gvar, :$SAFE))),
        s(:lvar, :args)))),
  s(:send, nil, :puts,
    s(:str, "\n---- create procs ----------")),
  s(:send, nil, :puts,
    s(:str, "x = proc{p ['proc x', \"$SAFE==\#{$SAFE}\"]; exit}")),
  s(:lvasgn, :x,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :p,
          s(:array,
            s(:str, "proc x"),
            s(:dstr,
              s(:str, "$SAFE=="),
              s(:begin,
                s(:gvar, :$SAFE))))),
        s(:send, nil, :exit)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "x = proc{p ['proc x', \"$SAFE==\#{$SAFE}\"]; exit}")),
        s(:pair,
          s(:sym, :anchor),
          s(:sym, :w)))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :fill),
        s(:sym, :x)))),
  s(:send, nil, :puts,
    s(:str, "y = proc{|label| p ['proc y', \"$SAFE==\#{$SAFE}\", label]; label.text($SAFE)}")),
  s(:lvasgn, :y,
    s(:block,
      s(:send, nil, :proc),
      s(:args,
        s(:arg, :label)),
      s(:begin,
        s(:send, nil, :p,
          s(:array,
            s(:str, "proc y"),
            s(:dstr,
              s(:str, "$SAFE=="),
              s(:begin,
                s(:gvar, :$SAFE))),
            s(:lvar, :label))),
        s(:send,
          s(:lvar, :label), :text,
          s(:gvar, :$SAFE))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "y = proc{|label| p ['proc y', \"$SAFE==\#{$SAFE}\", label]; label.text($SAFE)}")),
        s(:pair,
          s(:sym, :anchor),
          s(:sym, :w)))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :fill),
        s(:sym, :x)))),
  s(:send, nil, :puts,
    s(:str, "z = proc{p ['proc z', \"$SAFE==\#{$SAFE}\"]; exit}")),
  s(:lvasgn, :z,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :p,
          s(:array,
            s(:str, "proc z"),
            s(:dstr,
              s(:str, "$SAFE=="),
              s(:begin,
                s(:gvar, :$SAFE))))),
        s(:send, nil, :exit)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "z = proc{p ['proc z', \"$SAFE==\#{$SAFE}\"]; exit}")),
        s(:pair,
          s(:sym, :anchor),
          s(:sym, :w)))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :fill),
        s(:sym, :x)))),
  s(:send, nil, :puts,
    s(:str, "\n---- call 1st eval_proc ----------")),
  s(:send, nil, :print,
    s(:str, "lbl = ")),
  s(:send, nil, :p,
    s(:lvasgn, :lbl,
      s(:block,
        s(:send,
          s(:lvar, :ip), :eval_proc),
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :TkLabel), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:dstr,
                    s(:str, "1st eval_proc : $SAFE == "),
                    s(:begin,
                      s(:gvar, :$SAFE)))))), :pack),
          s(:lvasgn, :f,
            s(:send,
              s(:send,
                s(:const, nil, :TkFrame), :new), :pack)),
          s(:send,
            s(:send,
              s(:const, nil, :TkLabel), :new,
              s(:lvar, :f),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, "$SAFE == ")))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :side),
                s(:sym, :left)))),
          s(:lvasgn, :l,
            s(:send,
              s(:send,
                s(:const, nil, :TkLabel), :new,
                s(:lvar, :f)), :pack,
              s(:hash,
                s(:pair,
                  s(:sym, :side),
                  s(:sym, :right))))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{l.text($SAFE)}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send,
                      s(:lvar, :l), :text,
                      s(:gvar, :$SAFE)))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>x")),
                s(:pair,
                  s(:sym, :command),
                  s(:lvar, :x)))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{exit}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :safe0_p), :[],
                        s(:dstr,
                          s(:str, "'exit' is called at $SAFE="),
                          s(:begin,
                            s(:gvar, :$SAFE)))),
                      s(:send, nil, :exit)))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkFrame), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :borderwidth),
                  s(:int, 2)),
                s(:pair,
                  s(:sym, :height),
                  s(:int, 3)),
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :sunken)))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :expand),
                s(:true)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 10)),
              s(:pair,
                s(:sym, :pady),
                s(:int, 7)))),
          s(:lvar, :l))))),
  s(:send, nil, :puts,
    s(:str, "\n---- change the safe slave IP's safe-level ==> 3 ----------")),
  s(:send,
    s(:lvar, :ip), :safe_level=,
    s(:int, 3)),
  s(:send, nil, :puts,
    s(:str, "\n---- call 2nd eval_proc ----------")),
  s(:send, nil, :p,
    s(:send,
      s(:lvar, :ip), :eval_proc,
      s(:block,
        s(:send, nil, :proc),
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :TkLabel), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:dstr,
                    s(:str, "2nd eval_proc : $SAFE == "),
                    s(:begin,
                      s(:gvar, :$SAFE)))))), :pack),
          s(:lvasgn, :f,
            s(:send,
              s(:send,
                s(:const, nil, :TkFrame), :new), :pack)),
          s(:send,
            s(:send,
              s(:const, nil, :TkLabel), :new,
              s(:lvar, :f),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, "$SAFE == ")))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :side),
                s(:sym, :left)))),
          s(:lvasgn, :l,
            s(:send,
              s(:send,
                s(:const, nil, :TkLabel), :new,
                s(:lvar, :f),
                s(:hash,
                  s(:pair,
                    s(:sym, :text),
                    s(:gvar, :$SAFE)))), :pack,
              s(:hash,
                s(:pair,
                  s(:sym, :side),
                  s(:sym, :right))))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{l.text($SAFE)}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send,
                      s(:lvar, :l), :text,
                      s(:gvar, :$SAFE)))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{y.call(l)}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send,
                      s(:lvar, :y), :call,
                      s(:lvar, :l)))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{Proc.new(&y).call(l)}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Proc), :new,
                        s(:block_pass,
                          s(:lvar, :y))), :call,
                      s(:lvar, :l)))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{MultiTkIp._proc_on_current_safelevel(y).call(l)}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send,
                      s(:send,
                        s(:const, nil, :MultiTkIp), :_proc_on_current_safelevel,
                        s(:lvar, :y)), :call,
                      s(:lvar, :l)))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:if,
            s(:and,
              s(:and,
                s(:false),
                s(:send,
                  s(:const, nil, :Object), :const_defined?,
                  s(:sym, :RubyVM))),
              s(:send,
                s(:send,
                  s(:const,
                    s(:cbase), :RubyVM), :class), :==,
                s(:const, nil, :Class))),
            s(:send,
              s(:send,
                s(:const, nil, :TkButton), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :text),
                    s(:str, ":command=>proc{Thread.new(l, &y).value}")),
                  s(:pair,
                    s(:sym, :command),
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :new,
                          s(:lvar, :l),
                          s(:block_pass,
                            s(:lvar, :y))), :value))))), :pack,
              s(:hash,
                s(:pair,
                  s(:sym, :fill),
                  s(:sym, :x)),
                s(:pair,
                  s(:sym, :padx),
                  s(:int, 5)))), nil),
          s(:send,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, ":command=>proc{z.call}")),
                s(:pair,
                  s(:sym, :command),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args),
                    s(:send,
                      s(:lvar, :z), :call))))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 5)))),
          s(:send,
            s(:send,
              s(:const, nil, :TkFrame), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :borderwidth),
                  s(:int, 2)),
                s(:pair,
                  s(:sym, :height),
                  s(:int, 3)),
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :sunken)))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :x)),
              s(:pair,
                s(:sym, :expand),
                s(:true)),
              s(:pair,
                s(:sym, :padx),
                s(:int, 10)),
              s(:pair,
                s(:sym, :pady),
                s(:int, 7)))))))),
  s(:send, nil, :puts,
    s(:str, "\n---- call 1st and 2nd eval_str ----------")),
  s(:send, nil, :p,
    s(:lvasgn, :bind,
      s(:send,
        s(:lvar, :ip), :eval_str,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "  TkLabel.new(:text=>\"1st and 2nd eval_str : $SAFE == \#{$SAFE}\").pack\n"),
          s(:str, "  f = TkFrame.new.pack\n"),
          s(:str, "  TkLabel.new(f, :text=>\"$SAFE == \").pack(:side=>:left)\n"),
          s(:str, "  l = TkLabel.new(f, :text=>$SAFE).pack(:side=>:right)\n"),
          s(:str, "  TkButton.new(:text=>\":command=>proc{y.call(l)}\",\n"),
          s(:str, "               :command=>proc{y.call(l)}).pack(:fill=>:x, :padx=>5)\n"),
          s(:str, "  binding\n")),
        s(:send, nil, :binding)))),
  s(:send, nil, :p,
    s(:send,
      s(:lvar, :ip), :eval_str,
      s(:dstr,
        s(:str, "\n"),
        s(:str, "  TkButton.new(:text=>':command=>proc{ l.text = $SAFE }',\n"),
        s(:str, "               :command=>proc{ l.text = $SAFE }).pack(:fill=>:x, :padx=>5)\n"),
        s(:str, "  TkFrame.new(:borderwidth=>2, :height=>3,\n"),
        s(:str, "              :relief=>:sunken).pack(:fill=>:x, :expand=>true,\n"),
        s(:str, "                                     :padx=>10, :pady=>7)\n")),
      s(:lvar, :bind))),
  s(:send, nil, :puts,
    s(:str, "\n---- call 3rd and 4th eval_proc ----------")),
  s(:send, nil, :p,
    s(:block,
      s(:send,
        s(:lvar, :ip), :eval_proc),
      s(:args),
      s(:send,
        s(:send,
          s(:const, nil, :TkLabel), :new,
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:dstr,
                s(:str, "3rd and 4th eval_proc : $SAFE == "),
                s(:begin,
                  s(:gvar, :$SAFE)))))), :pack))),
  s(:send, nil, :p,
    s(:block,
      s(:send,
        s(:lvar, :ip), :eval_proc),
      s(:args),
      s(:send,
        s(:send,
          s(:const, nil, :TkButton), :new,
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:str, ":command=>proc{ lbl.text = $SAFE }")),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send,
                  s(:lvar, :lbl), :text=,
                  s(:gvar, :$SAFE)))))), :pack,
        s(:hash,
          s(:pair,
            s(:sym, :fill),
            s(:sym, :x)),
          s(:pair,
            s(:sym, :padx),
            s(:int, 5)))))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "\n---- start event-loop ( current $SAFE == "),
      s(:begin,
        s(:gvar, :$SAFE)),
      s(:str, " ) ----------"))),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
