s(:begin,
  s(:send, nil, :require,
    s(:str, "remote-tk")),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "This sample controls the other Tk interpreter (Ruby/Tk, Tcl/Tk, and so on)\n"),
      s(:str, "which running on the other process. For this purpose, Ruby/Tk uses Tcl/Tk's\n"),
      s(:str, "'send' command. Availability of the command depends on your GUI environment.\n"),
      s(:str, "If this script doesn't work, please check your environment (see Tcl/Tk FAQ).\n"))),
  s(:if,
    s(:begin,
      s(:lvasgn, :wish,
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :TkWinfo), :interps), :find),
          s(:args,
            s(:arg, :ip)),
          s(:send,
            s(:lvar, :ip), :=~,
            s(:regexp,
              s(:str, "^wish"),
              s(:regopt)))))), nil,
    s(:begin,
      s(:send, nil, :puts,
        s(:str, "")),
      s(:send, nil, :puts,
        s(:str, "Please start \"wish\" (Tcl/Tk shell) before running this sample script.")),
      s(:send, nil, :exit,
        s(:int, 1)))),
  s(:lvasgn, :ip,
    s(:send,
      s(:const, nil, :RemoteTkIp), :new,
      s(:lvar, :wish))),
  s(:block,
    s(:send,
      s(:lvar, :ip), :eval_proc),
    s(:args),
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :command),
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:send, nil, :puts,
                s(:str, "This procesure is on the controller-ip (Ruby/Tk)")))),
          s(:pair,
            s(:sym, :text),
            s(:str, "print on Ruby/Tk (controller-ip)")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x))))),
  s(:block,
    s(:send,
      s(:lvar, :ip), :eval_proc),
    s(:args),
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :command),
            s(:str, "puts {This procesure is on the remote-ip (wish)}")),
          s(:pair,
            s(:sym, :text),
            s(:str, "print on wish (remote-ip)")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x))))),
  s(:if,
    s(:send,
      s(:lvar, :ip), :is_rubytk?),
    s(:block,
      s(:send,
        s(:lvar, :ip), :eval_proc),
      s(:args),
      s(:send,
        s(:send,
          s(:const, nil, :TkButton), :new,
          s(:hash,
            s(:pair,
              s(:sym, :command),
              s(:str, "ruby {p 111; p Array.new(3,\"ruby\")}")),
            s(:pair,
              s(:sym, :text),
              s(:str, "ruby cmd on the remote-ip")))), :pack,
        s(:hash,
          s(:pair,
            s(:sym, :fill),
            s(:sym, :x))))), nil),
  s(:block,
    s(:send,
      s(:lvar, :ip), :eval_proc),
    s(:args),
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :command),
            s(:str, "exit")),
          s(:pair,
            s(:sym, :text),
            s(:str, "QUIT")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkButton), :new,
      s(:hash,
        s(:pair,
          s(:sym, :command),
          s(:block,
            s(:send, nil, :proc),
            s(:args),
            s(:send, nil, :exit))),
        s(:pair,
          s(:sym, :text),
          s(:str, "QUIT")),
        s(:pair,
          s(:sym, :padx),
          s(:int, 10)),
        s(:pair,
          s(:sym, :pady),
          s(:int, 7)))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :padx),
        s(:int, 10)),
      s(:pair,
        s(:sym, :pady),
        s(:int, 7)))),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
