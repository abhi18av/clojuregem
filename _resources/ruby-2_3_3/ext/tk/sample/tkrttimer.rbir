s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:lvasgn, :root,
    s(:send,
      s(:const, nil, :TkRoot), :new,
      s(:hash,
        s(:pair,
          s(:sym, :title),
          s(:str, "realtime timer sample"))))),
  s(:lvasgn, :f1,
    s(:send,
      s(:const, nil, :TkFrame), :new,
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 2)),
        s(:pair,
          s(:sym, :relief),
          s(:sym, :ridge))))),
  s(:send,
    s(:lvar, :f1), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :side),
        s(:sym, :bottom)),
      s(:pair,
        s(:sym, :fill),
        s(:sym, :both)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:lvar, :f1),
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "use TkTimer (TkAfter) class")))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :anchor),
        s(:sym, :center)))),
  s(:lvasgn, :label1,
    s(:send,
      s(:send,
        s(:const, nil, :TkLabel), :new,
        s(:hash,
          s(:pair,
            s(:sym, :parent),
            s(:lvar, :f1)),
          s(:pair,
            s(:sym, :relief),
            s(:sym, :raised)),
          s(:pair,
            s(:sym, :width),
            s(:int, 10)))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both))))),
  s(:lvasgn, :f2,
    s(:send,
      s(:const, nil, :TkFrame), :new,
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 2)),
        s(:pair,
          s(:sym, :relief),
          s(:sym, :ridge))))),
  s(:send,
    s(:lvar, :f2), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :side),
        s(:sym, :bottom)),
      s(:pair,
        s(:sym, :fill),
        s(:sym, :both)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:lvar, :f2),
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "use TkRTTimer class")))), :pack),
  s(:lvasgn, :label2,
    s(:send,
      s(:send,
        s(:const, nil, :TkLabel), :new,
        s(:hash,
          s(:pair,
            s(:sym, :parent),
            s(:lvar, :f2)),
          s(:pair,
            s(:sym, :relief),
            s(:sym, :raised)),
          s(:pair,
            s(:sym, :width),
            s(:int, 10)))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :padx),
          s(:int, 10)),
        s(:pair,
          s(:sym, :pady),
          s(:int, 5)),
        s(:pair,
          s(:sym, :justify),
          s(:str, "left")),
        s(:pair,
          s(:sym, :text),
          s(:dstr,
            s(:str, "Interval setting of each timer object is 10 ms.\n"),
            s(:str, "Each timer object counts up the value on each callback\n"),
            s(:str, "(the value is not the clock data).\n"),
            s(:str, "The count of the TkTimer object is delayed by execution\n"),
            s(:str, "time of callbacks and inaccuracy of interval.\n"),
            s(:str, "On the other hand, the count of the TkRTTimer object is\n"),
            s(:str, "not delayed. Its callback interval is not accurate too.\n"),
            s(:str, "But it can compute error correction about the time when\n"),
            s(:str, "a callback should start.\n"))))), :pack),
  s(:lvasgn, :tick,
    s(:block,
      s(:send, nil, :proc),
      s(:args,
        s(:arg, :aobj)),
      s(:begin,
        s(:lvasgn, :cnt,
          s(:send,
            s(:send,
              s(:lvar, :aobj), :return_value), :+,
            s(:int, 1))),
        s(:lvasgn, :label,
          s(:send,
            s(:send,
              s(:lvar, :aobj), :current_args), :[],
            s(:int, 0))),
        s(:send,
          s(:lvar, :label), :text,
          s(:send, nil, :format,
            s(:str, "%d.%02d"),
            s(:splat,
              s(:begin,
                s(:send,
                  s(:lvar, :cnt), :divmod,
                  s(:int, 100)))))),
        s(:lvar, :cnt)))),
  s(:lvasgn, :timer1,
    s(:send,
      s(:const, nil, :TkTimer), :new,
      s(:int, 10),
      s(:int, -1),
      s(:array,
        s(:lvar, :tick),
        s(:lvar, :label1)))),
  s(:lvasgn, :timer2,
    s(:send,
      s(:const, nil, :TkRTTimer), :new,
      s(:int, 10),
      s(:int, -1),
      s(:array,
        s(:lvar, :tick),
        s(:lvar, :label2)))),
  s(:send,
    s(:lvar, :timer1), :start,
    s(:int, 0),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send,
          s(:lvar, :label1), :text,
          s(:str, "0.00")),
        s(:int, 0)))),
  s(:send,
    s(:lvar, :timer2), :start,
    s(:int, 0),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send,
          s(:lvar, :label2), :text,
          s(:str, "0.00")),
        s(:int, 0)))),
  s(:lvasgn, :b_start,
    s(:block,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "Start")),
          s(:pair,
            s(:sym, :state),
            s(:sym, :disabled)))),
      s(:args),
      s(:send, nil, :pack,
        s(:hash,
          s(:pair,
            s(:sym, :side),
            s(:sym, :left)),
          s(:pair,
            s(:sym, :fill),
            s(:sym, :both)),
          s(:pair,
            s(:sym, :expand),
            s(:true)))))),
  s(:lvasgn, :b_stop,
    s(:block,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "Stop")),
          s(:pair,
            s(:sym, :state),
            s(:sym, :normal)))),
      s(:args),
      s(:send, nil, :pack,
        s(:hash,
          s(:pair,
            s(:str, "side"),
            s(:str, "left")),
          s(:pair,
            s(:str, "fill"),
            s(:str, "both")),
          s(:pair,
            s(:str, "expand"),
            s(:str, "yes")))))),
  s(:block,
    s(:send,
      s(:lvar, :b_start), :command),
    s(:args),
    s(:begin,
      s(:send,
        s(:lvar, :timer1), :continue),
      s(:send,
        s(:lvar, :timer2), :continue),
      s(:send,
        s(:lvar, :b_stop), :state,
        s(:sym, :normal)),
      s(:send,
        s(:lvar, :b_start), :state,
        s(:sym, :disabled)))),
  s(:block,
    s(:send,
      s(:lvar, :b_stop), :command),
    s(:args),
    s(:begin,
      s(:send,
        s(:lvar, :timer1), :stop),
      s(:send,
        s(:lvar, :timer2), :stop),
      s(:send,
        s(:lvar, :b_start), :state,
        s(:sym, :normal)),
      s(:send,
        s(:lvar, :b_stop), :state,
        s(:sym, :disabled)))),
  s(:block,
    s(:send,
      s(:const, nil, :TkButton), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "Reset")),
        s(:pair,
          s(:sym, :state),
          s(:sym, :normal)))),
    s(:args),
    s(:begin,
      s(:block,
        s(:send, nil, :command),
        s(:args),
        s(:begin,
          s(:send,
            s(:lvar, :timer1), :reset),
          s(:send,
            s(:lvar, :timer2), :reset))),
      s(:send, nil, :pack,
        s(:hash,
          s(:pair,
            s(:sym, :side),
            s(:sym, :right)),
          s(:pair,
            s(:sym, :fill),
            s(:sym, :both)),
          s(:pair,
            s(:sym, :expand),
            s(:sym, :yes)))))),
  s(:lvasgn, :ev_quit,
    s(:send,
      s(:const, nil, :TkVirtualEvent), :new,
      s(:str, "Control-c"),
      s(:str, "Control-q"))),
  s(:send,
    s(:send,
      s(:send,
        s(:const, nil, :Tk), :root), :bind,
      s(:lvar, :ev_quit),
      s(:block,
        s(:send, nil, :proc),
        s(:args),
        s(:send,
          s(:const, nil, :Tk), :exit))), :focus),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
