s(:begin,
  s(:lvasgn, :version,
    s(:str, "0.1.3")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:lvasgn, :opt,
    s(:send,
      s(:const, nil, :OptionParser), :new,
      s(:send,
        s(:send,
          s(:dstr,
            s(:str, "Usage: "),
            s(:begin,
              s(:gvar, :$0)),
            s(:str, " [options] rubytk_script")), :<<,
          s(:str, "\n    ")), :<<,
        s(:str, "Ruby/Tk script wrapper. Use Ttk widgets as default.")))),
  s(:send,
    s(:lvar, :opt), :version=,
    s(:lvar, :version)),
  s(:casgn, nil, :OPTS,
    s(:hash)),
  s(:send,
    s(:const, nil, :OPTS), :[]=,
    s(:sym, :themedir),
    s(:array)),
  s(:send,
    s(:const, nil, :OPTS), :[]=,
    s(:sym, :rb_theme),
    s(:array)),
  s(:send,
    s(:const, nil, :OPTS), :[]=,
    s(:sym, :theme),
    s(:str, "default")),
  s(:block,
    s(:send,
      s(:lvar, :opt), :on,
      s(:str, "-l"),
      s(:str, "--list"),
      s(:str, "list available theme names")),
    s(:args,
      s(:arg, :v)),
    s(:send,
      s(:const, nil, :OPTS), :[]=,
      s(:sym, :list),
      s(:true))),
  s(:block,
    s(:send,
      s(:lvar, :opt), :on,
      s(:str, "-t"),
      s(:str, "--theme theme"),
      s(:str, "theme name")),
    s(:args,
      s(:arg, :v)),
    s(:send,
      s(:const, nil, :OPTS), :[]=,
      s(:sym, :theme),
      s(:lvar, :v))),
  s(:block,
    s(:send,
      s(:lvar, :opt), :on,
      s(:str, "-d"),
      s(:str, "--themedir themes_dir"),
      s(:str, "directory of theme definitions")),
    s(:args,
      s(:arg, :v)),
    s(:send,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :themedir)), :<<,
      s(:lvar, :v))),
  s(:block,
    s(:send,
      s(:lvar, :opt), :on,
      s(:str, "-r"),
      s(:str, "--rubytheme rb_theme"),
      s(:str, "theme definition file (ruby script)")),
    s(:args,
      s(:arg, :v)),
    s(:send,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :rb_theme)), :<<,
      s(:lvar, :v))),
  s(:block,
    s(:send,
      s(:lvar, :opt), :on,
      s(:str, "-v"),
      s(:str, "--verbose"),
      s(:str, "print verbose messages")),
    s(:args,
      s(:arg, :v)),
    s(:send,
      s(:const, nil, :OPTS), :[]=,
      s(:sym, :verbose),
      s(:true))),
  s(:send,
    s(:lvar, :opt), :parse!,
    s(:const, nil, :ARGV)),
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "tkextlib/tile")),
        s(:send,
          s(:const, nil, :Tk), :default_widget_set=,
          s(:sym, :Ttk))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:if,
          s(:send,
            s(:const, nil, :OPTS), :[],
            s(:sym, :verbose)),
          s(:send, nil, :print,
            s(:str, "warning: fail to load 'Ttk' extension. use standard widgets.\n")), nil)), nil)),
  s(:if,
    s(:send,
      s(:const, nil, :OPTS), :[],
      s(:sym, :verbose)),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "current default widget set is '"),
        s(:begin,
          s(:send,
            s(:const, nil, :Tk), :default_widget_set)),
        s(:str, "'\n"))), nil),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :Tile), :__define_LoadImages_proc_for_compatibility__!),
  s(:send,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tile), :Style), :__define_wrapper_proc_for_compatibility__!),
  s(:lvasgn, :demodir,
    s(:send,
      s(:const, nil, :File), :dirname,
      s(:str, "(string)"))),
  s(:lvasgn, :demo_themesdir,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:send,
        s(:const, nil, :File), :join,
        s(:lvar, :demodir),
        s(:str, "tkextlib"),
        s(:str, "tile"),
        s(:str, "themes")))),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :themedir)), :empty?), nil,
    s(:send,
      s(:const,
        s(:const, nil, :Tk), :AUTO_PATH), :lappend,
      s(:splat,
        s(:send,
          s(:const, nil, :OPTS), :[],
          s(:sym, :themedir))))),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :AUTO_PATH), :lappend,
    s(:str, "."),
    s(:lvar, :demodir),
    s(:lvar, :demo_themesdir)),
  s(:send,
    s(:send,
      s(:const, nil, :OPTS), :[],
      s(:sym, :themedir)), :<<,
    s(:lvar, :demo_themesdir)),
  s(:if,
    s(:send,
      s(:const, nil, :OPTS), :[],
      s(:sym, :verbose)),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "theme-dirs: "),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :OPTS), :[],
              s(:sym, :themedir)), :inspect)),
        s(:str, "\n"))), nil),
  s(:block,
    s(:send,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :themedir)), :each),
    s(:args,
      s(:arg, :themesdir)),
    s(:if,
      s(:send,
        s(:const, nil, :File), :directory?,
        s(:lvar, :themesdir)),
      s(:block,
        s(:send,
          s(:const, nil, :Dir), :foreach,
          s(:lvar, :themesdir)),
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :name), :==,
                s(:str, ".")),
              s(:send,
                s(:lvar, :name), :==,
                s(:str, ".."))),
            s(:next), nil),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :themesdir),
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :path)),
            s(:send,
              s(:const,
                s(:const, nil, :Tk), :AUTO_PATH), :lappend,
              s(:lvar, :path)), nil))), nil)),
  s(:send,
    s(:const, nil, :Tk), :ip_eval,
    s(:dstr,
      s(:begin,
        s(:send,
          s(:const, nil, :TkPackage), :unknown_proc)),
      s(:str, "  Tcl "),
      s(:begin,
        s(:send,
          s(:const, nil, :TkPackage), :provide,
          s(:str, "Tcl"))))),
  s(:lvasgn, :themes_by_ruby,
    s(:array,
      s(:send,
        s(:const, nil, :File), :join,
        s(:lvar, :demo_themesdir),
        s(:str, "kroc.rb")))),
  s(:send,
    s(:lvar, :themes_by_ruby), :concat,
    s(:send,
      s(:const, nil, :OPTS), :[],
      s(:sym, :rb_theme))),
  s(:if,
    s(:send,
      s(:const, nil, :OPTS), :[],
      s(:sym, :verbose)),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "ruby-themes: "),
        s(:begin,
          s(:send,
            s(:lvar, :themes_by_ruby), :inspect)),
        s(:str, "\n"))), nil),
  s(:block,
    s(:send,
      s(:lvar, :themes_by_ruby), :each),
    s(:args,
      s(:arg, :f)),
    s(:kwbegin,
      s(:rescue,
        s(:send, nil, :load,
          s(:lvar, :f),
          s(:true)),
        s(:resbody,
          s(:array,
            s(:const, nil, :LoadError)), nil,
          s(:if,
            s(:send,
              s(:const, nil, :OPTS), :[],
              s(:sym, :verbose)),
            s(:send, nil, :print,
              s(:dstr,
                s(:str, "fail to load \""),
                s(:begin,
                  s(:lvar, :f)),
                s(:str, "\"\n"))), nil)), nil))),
  s(:send,
    s(:const, nil, :TkConfigMethod), :__set_IGNORE_UNKNOWN_CONFIGURE_OPTION__!,
    s(:true)),
  s(:send,
    s(:const, nil, :TkItemConfigMethod), :__set_IGNORE_UNKNOWN_CONFIGURE_OPTION__!,
    s(:true)),
  s(:if,
    s(:or,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :list)),
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :verbose))),
    s(:begin,
      s(:send, nil, :print,
        s(:dstr,
          s(:str, "supported theme names: "),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Tk), :Tile), :themes), :inspect)),
          s(:str, "\n"))),
      s(:if,
        s(:and,
          s(:send,
            s(:const, nil, :OPTS), :[],
            s(:sym, :list)),
          s(:send,
            s(:const, nil, :ARGV), :empty?)),
        s(:send, nil, :exit), nil)), nil),
  s(:if,
    s(:and,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :theme)),
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :verbose))),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "use theme: \""),
        s(:begin,
          s(:send,
            s(:const, nil, :OPTS), :[],
            s(:sym, :theme))),
        s(:str, "\"\n"))), nil),
  s(:if,
    s(:send,
      s(:const, nil, :OPTS), :[],
      s(:sym, :theme)),
    s(:send,
      s(:const,
        s(:const, nil, :Tk), :Tile), :set_theme,
      s(:send,
        s(:const, nil, :OPTS), :[],
        s(:sym, :theme))), nil),
  s(:lvasgn, :progname_obj,
    s(:send,
      s(:gvar, :$0), :dup)),
  s(:gvasgn, :$program_name,
    s(:lvar, :progname_obj)),
  s(:alias,
    s(:gvar, :$REAL_PROGRAM_NAME),
    s(:gvar, :$0)),
  s(:alias,
    s(:gvar, :$PROGRAM_NAME),
    s(:gvar, :$program_name)),
  s(:alias,
    s(:gvar, :$0),
    s(:gvar, :$program_name)),
  s(:block,
    s(:send, nil, :trace_var,
      s(:sym, :$program_name)),
    s(:args,
      s(:arg, :val)),
    s(:if,
      s(:send,
        s(:send,
          s(:lvar, :progname_obj), :object_id), :==,
        s(:send,
          s(:lvar, :val), :object_id)), nil,
      s(:begin,
        s(:send,
          s(:lvar, :progname_obj), :replace,
          s(:send,
            s(:lvar, :val), :to_s)),
        s(:gvasgn, :$program_name,
          s(:lvar, :progname_obj))))),
  s(:if,
    s(:and,
      s(:begin,
        s(:lvasgn, :path,
          s(:send,
            s(:const, nil, :ARGV), :shift))),
      s(:begin,
        s(:lvasgn, :script,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :path))))),
    s(:begin,
      s(:if,
        s(:send,
          s(:const, nil, :OPTS), :[],
          s(:sym, :verbose)),
        s(:send, nil, :print,
          s(:dstr,
            s(:str, "load script \""),
            s(:begin,
              s(:lvar, :script)),
            s(:str, "\"\n"))), nil),
      s(:gvasgn, :$0,
        s(:lvar, :script)),
      s(:send, nil, :load,
        s(:lvar, :script))),
    s(:begin,
      s(:send, nil, :print,
        s(:str, "Error: no script is given.\n")),
      s(:send, nil, :print,
        s(:send,
          s(:lvar, :opt), :help)),
      s(:send, nil, :exit,
        s(:int, 1)))))
