s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/blt")),
  s(:send, nil, :load,
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "(string)"))),
      s(:str, "scripts"),
      s(:str, "stipples.rb"))),
  s(:send,
    s(:const, nil, :TkOption), :add,
    s(:str, "*graph.x.Title"),
    s(:str, "X Axis Label")),
  s(:send,
    s(:const, nil, :TkOption), :add,
    s(:str, "*graph.y.Title"),
    s(:str, "Y Axis Label")),
  s(:send,
    s(:const, nil, :TkOption), :add,
    s(:str, "*graph.title"),
    s(:str, "A Simple Barchart")),
  s(:send,
    s(:const, nil, :TkOption), :add,
    s(:str, "*graph.x.Font"),
    s(:str, "Times 10")),
  s(:send,
    s(:const, nil, :TkOption), :add,
    s(:str, "*graph.Element.Relief"),
    s(:sym, :raised)),
  s(:lvasgn, :visual,
    s(:send,
      s(:send,
        s(:const, nil, :Tk), :root), :winfo_screenvisual)),
  s(:if,
    s(:and,
      s(:send,
        s(:lvar, :visual), :!=,
        s(:str, "staticgray")),
      s(:send,
        s(:lvar, :visual), :!=,
        s(:str, "grayscale"))),
    s(:begin,
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*graph.LineMarker.color"),
        s(:str, "yellow")),
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*graph.Element.Background"),
        s(:str, "white")),
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*graph.Legend.activeForeground"),
        s(:str, "pink")),
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*print.background"),
        s(:str, "yellow")),
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*quit.background"),
        s(:str, "red")),
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*graph.background"),
        s(:str, "palegreen")),
      s(:send,
        s(:const, nil, :TkOption), :add,
        s(:str, "*graph.plotBackground"),
        s(:str, "lightblue"))), nil),
  s(:lvasgn, :htext,
    s(:send,
      s(:const,
        s(:const,
          s(:const, nil, :Tk), :BLT), :Htext), :new,
      s(:hash,
        s(:pair,
          s(:sym, :widgetname),
          s(:str, ".htext")),
        s(:pair,
          s(:sym, :text),
          s(:dstr,
            s(:str, "    This is an example of the barchart widget.  The barchart has\n"),
            s(:str, "    many components; x and y axis, legend, crosshairs, elements, etc.\n"),
            s(:str, "    To create a postscript file \"bar.ps\", press the %%\n"),
            s(:str, "\n"),
            s(:str, "    ruby {\n"),
            s(:str, "    b = TkButton.new(Tk::BLT::Htext::Htext_Widget.window,\n"),
            s(:str, "                     :widgetname=>'print', :text=>'Print',\n"),
            s(:str, "                     :command=>proc{\n"),
            s(:str, "                        $graph.postsript(:output=>'bar.ps')\n"),
            s(:str, "                     })\n"),
            s(:str, "    Tk::BLT::Htext::Htext_Widget.window.append(b)\n"),
            s(:str, "    }\n"),
            s(:str, "\n"),
            s(:str, "%% button.\n"),
            s(:str, "%%\n"),
            s(:str, "\n"),
            s(:str, "    ruby {\n"),
            s(:str, "    $graph = Tk::BLT::Barchart.new(:widgetname=>'.htext.graph',\n"),
            s(:str, "                                   :relief=>:raised, :borderwidth=>2)\n"),
            s(:str, "    $graph.xaxis_configure(:rotate=>90, :stepsize=>0)\n"),
            s(:str, "    Tk::BLT::Htext::Htext_Widget.window.append($graph,\n"),
            s(:str, "                                               :fill=>:both, :padx=>4)\n"),
            s(:str, "    }\n"),
            s(:str, "\n"),
            s(:str, "%%\n"),
            s(:str, "    Hit the %%\n"),
            s(:str, "\n"),
            s(:str, "    ruby {\n"),
            s(:str, "    b = TkButton.new(Tk::BLT::Htext::Htext_Widget.window,\n"),
            s(:str, "                     :widgetname=>'quit', :text=>'Quit',\n"),
            s(:str, "                     :command=>proc{ exit })\n"),
            s(:str, "    Tk::BLT::Htext::Htext_Widget.window.append(b)\n"),
            s(:str, "    }\n"),
            s(:str, "\n"),
            s(:str, "%% button when you've seen enough.%%\n"),
            s(:str, "\n"),
            s(:str, "    ruby {\n"),
            s(:str, "    l = TkLabel.new(Tk::BLT::Htext::Htext_Widget.window, :bitmap=>'BLT')\n"),
            s(:str, "    Tk::BLT::Htext::Htext_Widget.window.append(l, :padx=>20)\n"),
            s(:str, "    }\n"),
            s(:str, "\n"),
            s(:str, "%%\n")))))),
  s(:lvasgn, :names,
    s(:array,
      s(:str, "One"),
      s(:str, "Two"),
      s(:str, "Three"),
      s(:str, "Four"),
      s(:str, "Five"),
      s(:str, "Six"),
      s(:str, "Seven"),
      s(:str, "Eight"))),
  s(:if,
    s(:or,
      s(:send,
        s(:lvar, :visual), :==,
        s(:str, "staticgray")),
      s(:send,
        s(:lvar, :visual), :==,
        s(:str, "grayscale"))),
    s(:begin,
      s(:lvasgn, :fgcolors,
        s(:array,
          s(:str, "white"),
          s(:str, "white"),
          s(:str, "white"),
          s(:str, "white"),
          s(:str, "white"),
          s(:str, "white"),
          s(:str, "white"),
          s(:str, "white"))),
      s(:lvasgn, :bgcolors,
        s(:array,
          s(:str, "black"),
          s(:str, "black"),
          s(:str, "black"),
          s(:str, "black"),
          s(:str, "black"),
          s(:str, "black"),
          s(:str, "black"),
          s(:str, "black")))),
    s(:begin,
      s(:lvasgn, :fgcolors,
        s(:array,
          s(:str, "yellow"),
          s(:str, "orange"),
          s(:str, "red"),
          s(:str, "magenta"),
          s(:str, "purple"),
          s(:str, "blue"),
          s(:str, "cyan"),
          s(:str, "green"))),
      s(:lvasgn, :bgcolors,
        s(:array,
          s(:str, "yellow4"),
          s(:str, "orange4"),
          s(:str, "red4"),
          s(:str, "magenta4"),
          s(:str, "purple4"),
          s(:str, "blue4"),
          s(:str, "cyan4"),
          s(:str, "green4"))))),
  s(:lvasgn, :numColors,
    s(:send,
      s(:lvar, :names), :length)),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :TCL_PRECISION), :value=,
    s(:int, 15)),
  s(:lvasgn, :x,
    s(:send,
      s(:const,
        s(:const,
          s(:const, nil, :Tk), :BLT), :Vector), :new)),
  s(:lvasgn, :y,
    s(:send,
      s(:const,
        s(:const,
          s(:const, nil, :Tk), :BLT), :Vector), :new)),
  s(:send,
    s(:lvar, :x), :seq,
    s(:float, -5.0),
    s(:float, 5.0),
    s(:float, 0.2)),
  s(:send,
    s(:lvar, :y), :expr,
    s(:dstr,
      s(:str, "sin("),
      s(:begin,
        s(:lvar, :x)),
      s(:str, ")"))),
  s(:lvasgn, :barWidth,
    s(:float, 0.19)),
  s(:send,
    s(:gvar, :$graph), :element_create,
    s(:str, "sin"),
    s(:hash,
      s(:pair,
        s(:sym, :relief),
        s(:sym, :raised)),
      s(:pair,
        s(:sym, :borderwidth),
        s(:int, 1)),
      s(:pair,
        s(:sym, :x),
        s(:lvar, :x)),
      s(:pair,
        s(:sym, :y),
        s(:lvar, :y)),
      s(:pair,
        s(:sym, :barwidth),
        s(:lvar, :barWidth)))),
  s(:send,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :BLT), :Table), :add,
    s(:send,
      s(:const, nil, :Tk), :root),
    s(:lvar, :htext),
    s(:hash,
      s(:pair,
        s(:sym, :fill),
        s(:sym, :both)))),
  s(:send,
    s(:send,
      s(:const, nil, :Tk), :root), :minsize,
    s(:int, 0),
    s(:int, 0)),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :BLT), :zoom_stack,
    s(:gvar, :$graph)),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :BLT), :crosshairs,
    s(:gvar, :$graph)),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :BLT), :active_legend,
    s(:gvar, :$graph)),
  s(:send,
    s(:const,
      s(:const, nil, :Tk), :BLT), :closest_point,
    s(:gvar, :$graph)),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
