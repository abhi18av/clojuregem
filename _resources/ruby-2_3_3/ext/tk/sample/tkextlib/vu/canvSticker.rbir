s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/vu/charts")),
  s(:send,
    s(:send,
      s(:const, nil, :Tk), :root), :geometry,
    s(:str, "+30+30")),
  s(:lvasgn, :delay,
    s(:int, 2000)),
  s(:lvasgn, :c,
    s(:send,
      s(:send,
        s(:const, nil, :TkCanvas), :new), :pack)),
  s(:kwbegin,
    s(:rescue,
      s(:lvasgn, :st,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :Vu), :TkcSticker), :new,
          s(:lvar, :c),
          s(:int, 0),
          s(:int, 0),
          s(:int, 10),
          s(:int, 10))),
      s(:resbody, nil, nil,
        s(:begin,
          s(:send,
            s(:const, nil, :Tk), :messageBox,
            s(:hash,
              s(:pair,
                s(:sym, :type),
                s(:str, "ok")),
              s(:pair,
                s(:sym, :title),
                s(:str, "No sticker Item")),
              s(:pair,
                s(:sym, :message),
                s(:str, "This build of vu does not include the sticker item")))),
          s(:send, nil, :exit))), nil)),
  s(:lvasgn, :steps,
    s(:array)),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "You'll see a small upright rectangle with \"He\" inside.")),
        s(:lvasgn, :st,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Vu), :TkcSticker), :new,
            s(:lvar, :c),
            s(:str, "6m"),
            s(:str, "10m"),
            s(:str, "13m"),
            s(:str, "27m"),
            s(:hash,
              s(:pair,
                s(:sym, :text),
                s(:str, "Hello")))))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "You'll see the whole \"Hello\" drawn rotated 90 degrees.")),
        s(:send,
          s(:lvar, :st), :[]=,
          s(:sym, :orient),
          s(:sym, :vertical))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "The rectangle shrinks and the text is clipped to \"Hell\"")),
        s(:send,
          s(:lvar, :st), :coords,
          s(:str, "6m"),
          s(:str, "10m"),
          s(:str, "13m"),
          s(:str, "17m"))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "Now you'll read \"ello\"")),
        s(:send,
          s(:lvar, :st), :[]=,
          s(:sym, :lefttrunc),
          s(:true))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "Enlarging the rectangle shows the complete \"Hello\" again")),
        s(:send,
          s(:lvar, :st), :scale,
          s(:int, 0),
          s(:int, 0),
          s(:int, 3),
          s(:int, 3))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "This time the text is repeated: \"Hello\", approx. 5mm space, \"Hello\"")),
        s(:send,
          s(:lvar, :st), :[]=,
          s(:sym, :space),
          s(:str, "5m"))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "A vertical bar appears in the lower right region and text jumps to the left.")),
        s(:send,
          s(:lvar, :st), :configure,
          s(:hash,
            s(:pair,
              s(:sym, :anchor),
              s(:sym, :n)),
            s(:pair,
              s(:sym, :relw),
              s(:float, 0.3)),
            s(:pair,
              s(:sym, :relh),
              s(:float, 0.7)),
            s(:pair,
              s(:sym, :relx),
              s(:float, 0.6)),
            s(:pair,
              s(:sym, :rely),
              s(:float, 0.3)),
            s(:pair,
              s(:sym, :bar),
              s(:str, "red"))))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "Paint the backgound.")),
        s(:send,
          s(:lvar, :st), :[]=,
          s(:sym, :fill),
          s(:str, "yellow"))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "Let's test stippling.")),
        s(:send,
          s(:lvar, :st), :[]=,
          s(:sym, :stipple),
          s(:str, "gray25"))))),
  s(:send,
    s(:lvar, :steps), :<<,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:begin,
        s(:send, nil, :puts,
          s(:str, "Finally a large outline forces a single \"Hello\" and shrinks the bar.")),
        s(:send,
          s(:lvar, :st), :[]=,
          s(:sym, :width),
          s(:str, "6m"))))),
  s(:send,
    s(:send,
      s(:const, nil, :Tk), :root), :bind,
    s(:str, "q"),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:send, nil, :exit))),
  s(:send,
    s(:send,
      s(:const, nil, :TkTimer), :new,
      s(:lvar, :delay),
      s(:int, 1),
      s(:splat,
        s(:lvar, :steps))), :start),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
