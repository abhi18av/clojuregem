s(:begin,
  s(:if,
    s(:send,
      s(:const, nil, :Object), :const_defined?,
      s(:str, "DemoVar")), nil,
    s(:send, nil, :fail,
      s(:const, nil, :RuntimeError),
      s(:str, "This is NOT a stand alone script. This script is called from 'demo.rb'. "))),
  s(:module,
    s(:const, nil, :DemoTree),
    s(:begin,
      s(:cvasgn, :@@count,
        s(:int, 0)),
      s(:cvasgn, :@@dblclick,
        s(:false)),
      s(:cvasgn, :@@top,
        s(:nil)),
      s(:defs,
        s(:self), :create,
        s(:args,
          s(:arg, :nb)),
        s(:begin,
          s(:lvasgn, :frame,
            s(:send,
              s(:lvar, :nb), :insert,
              s(:str, "end"),
              s(:str, "demoTree"),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, "Tree"))))),
          s(:lvasgn, :pw,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :PanedWindow), :new,
              s(:lvar, :frame),
              s(:hash,
                s(:pair,
                  s(:sym, :side),
                  s(:sym, :top))))),
          s(:lvasgn, :pane,
            s(:send,
              s(:lvar, :pw), :add,
              s(:hash,
                s(:pair,
                  s(:sym, :weight),
                  s(:int, 1))))),
          s(:lvasgn, :title,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :TitleFrame), :new,
              s(:lvar, :pane),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, "Directory tree"))))),
          s(:lvasgn, :sw,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :ScrolledWindow), :new,
              s(:send,
                s(:lvar, :title), :get_frame),
              s(:hash,
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :sunken)),
                s(:pair,
                  s(:sym, :borderwidth),
                  s(:int, 2))))),
          s(:lvasgn, :tree,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :Tree), :new,
              s(:lvar, :sw),
              s(:hash,
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :flat)),
                s(:pair,
                  s(:sym, :borderwidth),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :width),
                  s(:int, 15)),
                s(:pair,
                  s(:sym, :highlightthickness),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :redraw),
                  s(:false)),
                s(:pair,
                  s(:sym, :dropenabled),
                  s(:true)),
                s(:pair,
                  s(:sym, :dragenabled),
                  s(:true)),
                s(:pair,
                  s(:sym, :dragevent),
                  s(:int, 3)),
                s(:pair,
                  s(:sym, :droptypes),
                  s(:array,
                    s(:str, "TREE_NODE"),
                    s(:array,
                      s(:sym, :copy),
                      s(:array),
                      s(:sym, :move),
                      s(:array),
                      s(:sym, :link),
                      s(:array)),
                    s(:str, "LISTBOX_ITEM"),
                    s(:array,
                      s(:sym, :copy),
                      s(:array),
                      s(:sym, :move),
                      s(:array),
                      s(:sym, :link),
                      s(:array)))),
                s(:pair,
                  s(:sym, :opencmd),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :node)),
                    s(:send, nil, :moddir,
                      s(:int, 1),
                      s(:lvar, :tree),
                      s(:lvar, :node)))),
                s(:pair,
                  s(:sym, :closecmd),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :node)),
                    s(:send, nil, :moddir,
                      s(:int, 0),
                      s(:lvar, :tree),
                      s(:lvar, :node))))))),
          s(:send,
            s(:lvar, :sw), :set_widget,
            s(:lvar, :tree)),
          s(:send,
            s(:lvar, :sw), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :side),
                s(:sym, :top)),
              s(:pair,
                s(:sym, :expand),
                s(:true)),
              s(:pair,
                s(:sym, :fill),
                s(:sym, :both)))),
          s(:send,
            s(:lvar, :title), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :both)),
              s(:pair,
                s(:sym, :expand),
                s(:true)))),
          s(:lvasgn, :pane,
            s(:send,
              s(:lvar, :pw), :add,
              s(:hash,
                s(:pair,
                  s(:sym, :weight),
                  s(:int, 2))))),
          s(:lvasgn, :lf,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :TitleFrame), :new,
              s(:lvar, :pane),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:str, "Content"))))),
          s(:lvasgn, :sw,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :ScrolledWindow), :new,
              s(:send,
                s(:lvar, :lf), :get_frame),
              s(:hash,
                s(:pair,
                  s(:sym, :scrollbar),
                  s(:sym, :horizontal)),
                s(:pair,
                  s(:sym, :auto),
                  s(:sym, :none)),
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :sunken)),
                s(:pair,
                  s(:sym, :borderwidth),
                  s(:int, 2))))),
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :ListBox), :new,
              s(:lvar, :sw),
              s(:hash,
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :flat)),
                s(:pair,
                  s(:sym, :borderwidth),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :highlightthickness),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :width),
                  s(:int, 20)),
                s(:pair,
                  s(:sym, :multicolumn),
                  s(:true)),
                s(:pair,
                  s(:sym, :redraw),
                  s(:false)),
                s(:pair,
                  s(:sym, :dragevent),
                  s(:int, 3)),
                s(:pair,
                  s(:sym, :dropenabled),
                  s(:true)),
                s(:pair,
                  s(:sym, :dragenabled),
                  s(:true)),
                s(:pair,
                  s(:sym, :droptypes),
                  s(:array,
                    s(:str, "TREE_NODE"),
                    s(:array,
                      s(:sym, :copy),
                      s(:array),
                      s(:sym, :move),
                      s(:array),
                      s(:sym, :link),
                      s(:array)),
                    s(:str, "LISTBOX_ITEM"),
                    s(:array,
                      s(:sym, :copy),
                      s(:array),
                      s(:sym, :move),
                      s(:array),
                      s(:sym, :link),
                      s(:array))))))),
          s(:send,
            s(:lvar, :sw), :set_widget,
            s(:lvar, :list)),
          s(:send,
            s(:const, nil, :Tk), :pack,
            s(:lvar, :sw),
            s(:lvar, :lf),
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :both)),
              s(:pair,
                s(:sym, :expand),
                s(:true)))),
          s(:send,
            s(:lvar, :pw), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :both)),
              s(:pair,
                s(:sym, :expand),
                s(:true)))),
          s(:send,
            s(:lvar, :tree), :textbind,
            s(:str, "ButtonPress-1"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :node),
                s(:arg, :ev)),
              s(:send, nil, :select,
                s(:str, "tree"),
                s(:int, 1),
                s(:lvar, :tree),
                s(:lvar, :list),
                s(:lvar, :node)))),
          s(:send,
            s(:lvar, :tree), :textbind,
            s(:str, "Double-ButtonPress-1"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :node),
                s(:arg, :ev)),
              s(:send, nil, :select,
                s(:str, "tree"),
                s(:int, 2),
                s(:lvar, :tree),
                s(:lvar, :list),
                s(:lvar, :node)))),
          s(:send,
            s(:lvar, :list), :textbind,
            s(:str, "ButtonPress-1"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :node),
                s(:arg, :ev)),
              s(:send, nil, :select,
                s(:str, "list"),
                s(:int, 1),
                s(:lvar, :tree),
                s(:lvar, :list),
                s(:lvar, :node)))),
          s(:send,
            s(:lvar, :list), :textbind,
            s(:str, "Double-ButtonPress-1"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :node),
                s(:arg, :ev)),
              s(:send, nil, :select,
                s(:str, "list"),
                s(:int, 2),
                s(:lvar, :tree),
                s(:lvar, :list),
                s(:lvar, :node)))),
          s(:send,
            s(:lvar, :list), :imagebind,
            s(:str, "Double-ButtonPress-1"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :node),
                s(:arg, :ev)),
              s(:send, nil, :select,
                s(:str, "list"),
                s(:int, 2),
                s(:lvar, :tree),
                s(:lvar, :list),
                s(:lvar, :node)))),
          s(:send,
            s(:lvar, :nb), :itemconfigure,
            s(:str, "demoTree"),
            s(:hash,
              s(:pair,
                s(:sym, :createcmd),
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send, nil, :init,
                    s(:lvar, :tree),
                    s(:lvar, :list),
                    s(:splat,
                      s(:lvar, :args))))),
              s(:pair,
                s(:sym, :raisecmd),
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Tk), :root), :geometry), :=~,
                      s(:regexp,
                        s(:str, "\\d+x\\d+([+-]{1,2}\\d+)([+-]{1,2}\\d+)"),
                        s(:regopt))),
                    s(:lvasgn, :global_w,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:nth_ref, 1),
                            s(:int, 0))), :to_i)),
                    s(:lvasgn, :global_h,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:nth_ref, 2),
                            s(:int, 0))), :to_i)),
                    s(:if,
                      s(:cvar, :@@top),
                      s(:begin,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Tk), :BWidget), :place,
                          s(:cvar, :@@top),
                          s(:int, 0),
                          s(:int, 0),
                          s(:sym, :at),
                          s(:send,
                            s(:lvar, :global_w), :-,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Tk), :root), :winfo_screenwidth)),
                          s(:lvar, :global_h)),
                        s(:send,
                          s(:cvar, :@@top), :deiconify),
                        s(:send,
                          s(:send,
                            s(:const, nil, :Tk), :root), :bind,
                          s(:str, "Unmap"),
                          s(:block,
                            s(:send, nil, :proc),
                            s(:args),
                            s(:send,
                              s(:cvar, :@@top), :withdraw))),
                        s(:send,
                          s(:send,
                            s(:const, nil, :Tk), :root), :bind,
                          s(:str, "Map"),
                          s(:block,
                            s(:send, nil, :proc),
                            s(:args),
                            s(:send,
                              s(:cvar, :@@top), :deiconify))),
                        s(:send,
                          s(:send,
                            s(:const, nil, :Tk), :root), :bind,
                          s(:str, "Configure"),
                          s(:block,
                            s(:send, nil, :proc),
                            s(:args,
                              s(:arg, :w)),
                            s(:if,
                              s(:send,
                                s(:lvar, :w), :==,
                                s(:send,
                                  s(:const, nil, :Tk), :root)),
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:const, nil, :Tk), :root), :geometry), :=~,
                                  s(:regexp,
                                    s(:str, "\\d+x\\d+([+-]{1,2}\\d+)([+-]{1,2}\\d+)"),
                                    s(:regopt))),
                                s(:lvasgn, :global_w,
                                  s(:send,
                                    s(:begin,
                                      s(:or,
                                        s(:nth_ref, 1),
                                        s(:int, 0))), :to_i)),
                                s(:lvasgn, :global_h,
                                  s(:send,
                                    s(:begin,
                                      s(:or,
                                        s(:nth_ref, 2),
                                        s(:int, 0))), :to_i)),
                                s(:send,
                                  s(:const,
                                    s(:const, nil, :Tk), :BWidget), :place,
                                  s(:cvar, :@@top),
                                  s(:int, 0),
                                  s(:int, 0),
                                  s(:sym, :at),
                                  s(:send,
                                    s(:lvar, :global_w), :-,
                                    s(:send,
                                      s(:send,
                                        s(:const, nil, :Tk), :root), :winfo_screenwidth)),
                                  s(:lvar, :global_h))), nil)),
                          s(:str, "%W"))), nil)))),
              s(:pair,
                s(:sym, :leavecmd),
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:cvar, :@@top),
                      s(:send,
                        s(:cvar, :@@top), :withdraw), nil),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Tk), :root), :bind_remove,
                      s(:str, "Unmap")),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Tk), :root), :bind_remove,
                      s(:str, "Map")),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Tk), :root), :bind_remove,
                      s(:str, "Configure")),
                    s(:true)))))))),
      s(:defs,
        s(:self), :init,
        s(:args,
          s(:arg, :tree),
          s(:arg, :list),
          s(:restarg, :args)),
        s(:begin,
          s(:cvasgn, :@@count,
            s(:int, 0)),
          s(:if,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Tk), :PLATFORM), :[],
                s(:str, "platform")), :==,
              s(:str, "unix")),
            s(:lvasgn, :rootdir,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "~"))),
            s(:lvasgn, :rootdir,
              s(:str, "c:"))),
          s(:send,
            s(:lvar, :tree), :insert,
            s(:str, "end"),
            s(:str, "root"),
            s(:str, "home"),
            s(:hash,
              s(:pair,
                s(:sym, :text),
                s(:lvar, :rootdir)),
              s(:pair,
                s(:sym, :data),
                s(:lvar, :rootdir)),
              s(:pair,
                s(:sym, :open),
                s(:true)),
              s(:pair,
                s(:sym, :image),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                  s(:str, "openfold"))))),
          s(:send, nil, :getdir,
            s(:lvar, :tree),
            s(:str, "home"),
            s(:lvar, :rootdir)),
          s(:send, nil, :select,
            s(:str, "tree"),
            s(:int, 1),
            s(:lvar, :tree),
            s(:lvar, :list),
            s(:str, "home")),
          s(:send,
            s(:lvar, :tree), :redraw,
            s(:true)),
          s(:send,
            s(:lvar, :list), :redraw,
            s(:true)),
          s(:cvasgn, :@@top,
            s(:send,
              s(:const, nil, :TkToplevel), :new)),
          s(:send,
            s(:cvar, :@@top), :withdraw),
          s(:block,
            s(:send,
              s(:cvar, :@@top), :protocol,
              s(:str, "WM_DELETE_WINDOW")),
            s(:args), nil),
          s(:send,
            s(:cvar, :@@top), :resizable,
            s(:false),
            s(:false)),
          s(:send,
            s(:cvar, :@@top), :title,
            s(:str, "Drag rectangle to scroll directory tree")),
          s(:send,
            s(:cvar, :@@top), :transient,
            s(:send,
              s(:const, nil, :Tk), :root)),
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :BWidget), :ScrollView), :new,
              s(:cvar, :@@top),
              s(:hash,
                s(:pair,
                  s(:sym, :window),
                  s(:lvar, :tree)),
                s(:pair,
                  s(:sym, :fill),
                  s(:str, "white")),
                s(:pair,
                  s(:sym, :width),
                  s(:int, 300)),
                s(:pair,
                  s(:sym, :height),
                  s(:int, 300)),
                s(:pair,
                  s(:sym, :relief),
                  s(:sym, :sunken)),
                s(:pair,
                  s(:sym, :bd),
                  s(:int, 1)))), :pack,
            s(:hash,
              s(:pair,
                s(:sym, :fill),
                s(:sym, :both)),
              s(:pair,
                s(:sym, :expand),
                s(:true)))))),
      s(:defs,
        s(:self), :getdir,
        s(:args,
          s(:arg, :tree),
          s(:arg, :node),
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :lentries,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :path),
                  s(:str, "*"))), :sort)),
          s(:lvasgn, :lfiles,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :lentries), :each),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:lvasgn, :basename,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :f))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :f)),
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :BWidget), :Tree), :Node), :new,
                    s(:lvar, :tree),
                    s(:lvar, :node),
                    s(:hash,
                      s(:pair,
                        s(:sym, :index),
                        s(:str, "end")),
                      s(:pair,
                        s(:sym, :text),
                        s(:lvar, :basename)),
                      s(:pair,
                        s(:sym, :image),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                          s(:str, "folder"))),
                      s(:pair,
                        s(:sym, :drawcross),
                        s(:sym, :allways)),
                      s(:pair,
                        s(:sym, :data),
                        s(:lvar, :f)))),
                  s(:op_asgn,
                    s(:cvasgn, :@@count), :+,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :lfiles), :<<,
                  s(:lvar, :basename))))),
          s(:send,
            s(:lvar, :tree), :itemconfigure,
            s(:lvar, :node),
            s(:hash,
              s(:pair,
                s(:sym, :drawcross),
                s(:sym, :auto)),
              s(:pair,
                s(:sym, :data),
                s(:lvar, :lfiles)))))),
      s(:defs,
        s(:self), :moddir,
        s(:args,
          s(:arg, :idx),
          s(:arg, :tree),
          s(:arg, :node)),
        s(:if,
          s(:begin,
            s(:and,
              s(:send,
                s(:lvar, :idx), :!=,
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :tree), :itemcget,
                    s(:lvar, :node),
                    s(:sym, :drawcross)), :to_s), :==,
                s(:str, "allways")))),
          s(:begin,
            s(:send, nil, :getdir,
              s(:lvar, :tree),
              s(:lvar, :node),
              s(:send,
                s(:lvar, :tree), :itemcget,
                s(:lvar, :node),
                s(:sym, :data))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :tree), :nodes,
                  s(:lvar, :node)), :empty?),
              s(:send,
                s(:lvar, :tree), :itemconfigure,
                s(:lvar, :node),
                s(:hash,
                  s(:pair,
                    s(:sym, :image),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                      s(:str, "folder"))))),
              s(:send,
                s(:lvar, :tree), :itemconfigure,
                s(:lvar, :node),
                s(:hash,
                  s(:pair,
                    s(:sym, :image),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                      s(:str, "openfold"))))))),
          s(:begin,
            s(:lvasgn, :img,
              s(:or,
                s(:send,
                  s(:array,
                    s(:str, "folder"),
                    s(:str, "openfold")), :[],
                  s(:lvar, :idx)),
                s(:str, "openfold"))),
            s(:send,
              s(:lvar, :tree), :itemconfigure,
              s(:lvar, :node),
              s(:hash,
                s(:pair,
                  s(:sym, :image),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                    s(:lvar, :img)))))))),
      s(:defs,
        s(:self), :select,
        s(:args,
          s(:arg, :where),
          s(:arg, :num),
          s(:arg, :tree),
          s(:arg, :list),
          s(:arg, :node)),
        s(:begin,
          s(:cvasgn, :@@dblclick,
            s(:true)),
          s(:if,
            s(:send,
              s(:lvar, :num), :==,
              s(:int, 1)),
            s(:begin,
              s(:if,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:lvar, :where), :==,
                      s(:str, "tree")),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :tree), :selection_get), :find),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkUtil), :_get_eval_string,
                          s(:lvar, :x)), :==,
                        s(:send,
                          s(:const, nil, :TkUtil), :_get_eval_string,
                          s(:lvar, :node)))))),
                s(:begin,
                  s(:cvasgn, :@@dblclick,
                    s(:false)),
                  s(:send,
                    s(:const, nil, :Tk), :after,
                    s(:int, 500),
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args),
                      s(:send, nil, :edit,
                        s(:str, "tree"),
                        s(:lvar, :tree),
                        s(:lvar, :list),
                        s(:lvar, :node)))),
                  s(:return)), nil),
              s(:if,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:lvar, :where), :==,
                      s(:str, "list")),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :list), :selection_get), :find),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:send,
                          s(:const, nil, :TkUtil), :_get_eval_string,
                          s(:lvar, :x)), :==,
                        s(:send,
                          s(:const, nil, :TkUtil), :_get_eval_string,
                          s(:lvar, :node)))))),
                s(:begin,
                  s(:cvasgn, :@@dblclick,
                    s(:false)),
                  s(:send,
                    s(:const, nil, :Tk), :after,
                    s(:int, 500),
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args),
                      s(:send, nil, :edit,
                        s(:str, "list"),
                        s(:lvar, :tree),
                        s(:lvar, :list),
                        s(:lvar, :node)))),
                  s(:return)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :where), :==,
                  s(:str, "tree")),
                s(:send, nil, :select_node,
                  s(:lvar, :tree),
                  s(:lvar, :list),
                  s(:lvar, :node)),
                s(:send,
                  s(:lvar, :list), :selection_set,
                  s(:lvar, :node)))),
            s(:if,
              s(:begin,
                s(:and,
                  s(:send,
                    s(:lvar, :where), :==,
                    s(:str, "list")),
                  s(:send,
                    s(:lvar, :tree), :exist?,
                    s(:lvar, :node)))),
              s(:begin,
                s(:lvasgn, :parent,
                  s(:send,
                    s(:lvar, :tree), :parent,
                    s(:lvar, :node))),
                s(:while,
                  s(:send,
                    s(:send,
                      s(:const, nil, :TkUtil), :_get_eval_string,
                      s(:lvar, :parent)), :!=,
                    s(:str, "root")),
                  s(:begin,
                    s(:send,
                      s(:lvar, :tree), :itemconfigure,
                      s(:lvar, :parent),
                      s(:hash,
                        s(:pair,
                          s(:sym, :open),
                          s(:true)))),
                    s(:lvasgn, :parent,
                      s(:send,
                        s(:lvar, :tree), :parent,
                        s(:lvar, :parent))))),
                s(:send, nil, :select_node,
                  s(:lvar, :tree),
                  s(:lvar, :list),
                  s(:lvar, :node))), nil)))),
      s(:defs,
        s(:self), :select_node,
        s(:args,
          s(:arg, :tree),
          s(:arg, :list),
          s(:arg, :node)),
        s(:begin,
          s(:send,
            s(:lvar, :tree), :selection_set,
            s(:lvar, :node)),
          s(:send,
            s(:const, nil, :Tk), :update),
          s(:send,
            s(:lvar, :list), :delete,
            s(:splat,
              s(:begin,
                s(:send,
                  s(:lvar, :list), :items,
                  s(:int, 0),
                  s(:str, "end"))))),
          s(:lvasgn, :dir,
            s(:send,
              s(:lvar, :tree), :itemcget,
              s(:lvar, :node),
              s(:sym, :data))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :tree), :itemcget,
                  s(:lvar, :node),
                  s(:sym, :drawcross)), :to_s), :==,
              s(:str, "allways")),
            s(:begin,
              s(:send, nil, :getdir,
                s(:lvar, :tree),
                s(:lvar, :node),
                s(:lvar, :dir)),
              s(:lvasgn, :dir,
                s(:send,
                  s(:lvar, :tree), :itemcget,
                  s(:lvar, :node),
                  s(:sym, :data)))), nil),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :tree), :nodes,
                s(:lvar, :node)), :each),
            s(:args,
              s(:arg, :subnode)),
            s(:send,
              s(:lvar, :list), :insert,
              s(:str, "end"),
              s(:lvar, :subnode),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:send,
                    s(:lvar, :tree), :itemcget,
                    s(:lvar, :subnode),
                    s(:sym, :text))),
                s(:pair,
                  s(:sym, :image),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                    s(:str, "folder")))))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkComm), :simplelist,
                s(:lvar, :dir)), :each),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :BWidget), :ListBox), :Item), :new,
              s(:lvar, :list),
              s(:str, "end"),
              s(:hash,
                s(:pair,
                  s(:sym, :text),
                  s(:lvar, :f)),
                s(:pair,
                  s(:sym, :image),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :BWidget), :Bitmap), :new,
                    s(:str, "file")))))))),
      s(:defs,
        s(:self), :edit,
        s(:args,
          s(:arg, :where),
          s(:arg, :tree),
          s(:arg, :list),
          s(:arg, :node)),
        s(:begin,
          s(:if,
            s(:cvar, :@@dblclick),
            s(:return), nil),
          s(:if,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :where), :==,
                  s(:str, "tree")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :tree), :selection_get), :find),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :TkUtil), :_get_eval_string,
                      s(:lvar, :x)), :==,
                    s(:send,
                      s(:const, nil, :TkUtil), :_get_eval_string,
                      s(:lvar, :node)))))),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:lvar, :tree), :edit,
                  s(:lvar, :node),
                  s(:send,
                    s(:lvar, :tree), :itemcget,
                    s(:lvar, :node),
                    s(:sym, :text)))),
              s(:if,
                s(:send,
                  s(:lvar, :res), :!=,
                  s(:str, "")),
                s(:begin,
                  s(:send,
                    s(:lvar, :tree), :itemconfigure,
                    s(:lvar, :node),
                    s(:hash,
                      s(:pair,
                        s(:sym, :text),
                        s(:lvar, :res)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :list), :exist?,
                      s(:lvar, :node)),
                    s(:send,
                      s(:lvar, :list), :itemconfigure,
                      s(:lvar, :node),
                      s(:hash,
                        s(:pair,
                          s(:sym, :text),
                          s(:lvar, :res)))), nil),
                  s(:send,
                    s(:lvar, :tree), :selection_set,
                    s(:lvar, :node))), nil),
              s(:return)), nil),
          s(:if,
            s(:begin,
              s(:send,
                s(:lvar, :where), :==,
                s(:str, "list"))),
            s(:begin,
              s(:lvasgn, :res,
                s(:send,
                  s(:lvar, :list), :edit,
                  s(:lvar, :node),
                  s(:send,
                    s(:lvar, :list), :igemcget,
                    s(:lvar, :node),
                    s(:sym, :text)))),
              s(:if,
                s(:send,
                  s(:lvar, :res), :!=,
                  s(:str, "")),
                s(:begin,
                  s(:send,
                    s(:lvar, :list), :itemconfigure,
                    s(:lvar, :node),
                    s(:hash,
                      s(:pair,
                        s(:sym, :text),
                        s(:lvar, :res)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :tree), :exist?,
                      s(:lvar, :node)),
                    s(:send,
                      s(:lvar, :tree), :itemconfigure,
                      s(:lvar, :node),
                      s(:hash,
                        s(:pair,
                          s(:sym, :text),
                          s(:lvar, :res)))),
                    s(:begin,
                      s(:lvasgn, :cursel,
                        s(:send,
                          s(:send,
                            s(:lvar, :tree), :selection_get), :[],
                          s(:int, 0))),
                      s(:lvasgn, :index,
                        s(:send,
                          s(:send,
                            s(:lvar, :list), :index,
                            s(:lvar, :node)), :-,
                          s(:send,
                            s(:send,
                              s(:lvar, :tree), :nodes,
                              s(:lvar, :cursel)), :size))),
                      s(:lvasgn, :data,
                        s(:send,
                          s(:const, nil, :TkComm), :simplelist,
                          s(:send,
                            s(:lvar, :tree), :itemcget,
                            s(:lvar, :cursel),
                            s(:sym, :data)))),
                      s(:send,
                        s(:lvar, :data), :[]=,
                        s(:lvar, :index),
                        s(:lvar, :res)),
                      s(:send,
                        s(:lvar, :tree), :itemconfigure,
                        s(:lvar, :cursel),
                        s(:hash,
                          s(:pair,
                            s(:sym, :date),
                            s(:lvar, :data)))))),
                  s(:send,
                    s(:lvar, :list), :selection_set,
                    s(:lvar, :node))), nil)), nil))),
      s(:defs,
        s(:self), :expand,
        s(:args,
          s(:arg, :tree),
          s(:arg, :but)),
        s(:if,
          s(:send,
            s(:begin,
              s(:lvasgn, :cur,
                s(:send,
                  s(:lvar, :tree), :selection_get))), :empty?), nil,
          s(:if,
            s(:send,
              s(:const, nil, :TkComm), :bool,
              s(:lvar, :but)),
            s(:send,
              s(:lvar, :tree), :opentree,
              s(:lvar, :cur)),
            s(:send,
              s(:lvar, :tree), :closetree,
              s(:lvar, :cur))))))))
