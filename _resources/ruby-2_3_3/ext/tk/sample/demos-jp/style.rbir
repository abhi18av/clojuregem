s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:gvar, :$style_demo)),
      s(:gvar, :$style_demo)),
    s(:begin,
      s(:send,
        s(:gvar, :$style_demo), :destroy),
      s(:gvasgn, :$style_demo,
        s(:nil))), nil),
  s(:gvasgn, :$style_demo,
    s(:block,
      s(:send,
        s(:const, nil, :TkToplevel), :new),
      s(:args,
        s(:arg, :w)),
      s(:begin,
        s(:send, nil, :title,
          s(:str, "Text Demonstration - Display Styles")),
        s(:send, nil, :iconname,
          s(:str, "style")),
        s(:send, nil, :positionWindow,
          s(:lvar, :w))))),
  s(:lvasgn, :base_frame,
    s(:send,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:gvar, :$style_demo)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:send,
    s(:block,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:lvar, :base_frame)),
      s(:args,
        s(:arg, :frame)),
      s(:begin,
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "閉じる")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :tmppath,
                      s(:gvar, :$style_demo)),
                    s(:gvasgn, :$style_demo,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :tmppath), :destroy)))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))),
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "コード参照")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:send, nil, :showCode,
                    s(:str, "style")))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))))), :pack,
    s(:hash,
      s(:pair,
        s(:str, "side"),
        s(:str, "bottom")),
      s(:pair,
        s(:str, "fill"),
        s(:str, "x")),
      s(:pair,
        s(:str, "pady"),
        s(:str, "2m")))),
  s(:lvasgn, :txt,
    s(:block,
      s(:send,
        s(:const, nil, :TkText), :new,
        s(:lvar, :base_frame)),
      s(:args,
        s(:arg, :t)),
      s(:begin,
        s(:send, nil, :setgrid,
          s(:str, "true")),
        s(:send, nil, :wrap,
          s(:str, "word")),
        s(:send, nil, :font,
          s(:gvar, :$font)),
        s(:block,
          s(:send,
            s(:const, nil, :TkScrollbar), :new,
            s(:lvar, :base_frame)),
          s(:args,
            s(:arg, :s)),
          s(:begin,
            s(:send, nil, :pack,
              s(:hash,
                s(:pair,
                  s(:str, "side"),
                  s(:str, "right")),
                s(:pair,
                  s(:str, "fill"),
                  s(:str, "y")))),
            s(:send, nil, :command,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:restarg, :args)),
                s(:send,
                  s(:lvar, :t), :yview,
                  s(:splat,
                    s(:lvar, :args))))),
            s(:send,
              s(:lvar, :t), :yscrollcommand,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :first),
                  s(:arg, :last)),
                s(:send,
                  s(:lvar, :s), :set,
                  s(:lvar, :first),
                  s(:lvar, :last)))))),
        s(:send, nil, :pack,
          s(:hash,
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")),
            s(:pair,
              s(:str, "fill"),
              s(:str, "both")))),
        s(:lvasgn, :family,
          s(:str, "Courier")),
        s(:if,
          s(:send,
            s(:gvar, :$tk_version), :=~,
            s(:regexp,
              s(:str, "^4.*"),
              s(:regopt))),
          s(:begin,
            s(:lvasgn, :style_tag_bold,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-*-Courier-Bold-O-Normal--*-120-*-*-*-*-*-*"))))),
            s(:lvasgn, :style_tag_big,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-*-Courier-Bold-R-Normal--*-140-*-*-*-*-*-*")),
                  s(:pair,
                    s(:str, "kanjifont"),
                    s(:gvar, :$msg_kanji_font))))),
            s(:lvasgn, :style_tag_verybig,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-*-Helvetica-Bold-R-Normal--*-240-*-*-*-*-*-*"))))),
            s(:lvasgn, :style_tag_small,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-Adobe-Helvetica-Bold-R-Normal-*-100-*")))))),
          s(:begin,
            s(:lvasgn, :style_tag_bold,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 12),
                      s(:sym, :bold),
                      s(:sym, :italic)))))),
            s(:lvasgn, :style_tag_big,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 14),
                      s(:sym, :bold)))))),
            s(:lvasgn, :style_tag_verybig,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:str, "Helvetica"),
                      s(:int, 24),
                      s(:sym, :bold)))))),
            s(:lvasgn, :style_tag_small,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "Times 8 bold"))))))),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :TkWinfo), :depth,
                s(:gvar, :$root)), :to_i), :>,
            s(:int, 1)),
          s(:begin,
            s(:lvasgn, :style_tag_color1,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "#a0b7ce"))))),
            s(:lvasgn, :style_tag_color2,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "foreground"),
                    s(:str, "red"))))),
            s(:lvasgn, :style_tag_raised,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "raised")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1))))),
            s(:lvasgn, :style_tag_sunken,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "sunken")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1)))))),
          s(:begin,
            s(:lvasgn, :style_tag_color1,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "black")),
                  s(:pair,
                    s(:str, "foreground"),
                    s(:str, "white"))))),
            s(:lvasgn, :style_tag_color2,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "black")),
                  s(:pair,
                    s(:str, "foreground"),
                    s(:str, "white"))))),
            s(:lvasgn, :style_tag_raised,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "white")),
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "raised")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1))))),
            s(:lvasgn, :style_tag_sunken,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "white")),
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "sunken")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1))))))),
        s(:if,
          s(:send,
            s(:gvar, :$tk_version), :=~,
            s(:regexp,
              s(:str, "^4\\.[01]"),
              s(:regopt))),
          s(:lvasgn, :style_tag_bgstipple,
            s(:send,
              s(:const, nil, :TkTextTag), :new,
              s(:lvar, :t),
              s(:hash,
                s(:pair,
                  s(:str, "background"),
                  s(:str, "black")),
                s(:pair,
                  s(:str, "borderwidth"),
                  s(:int, 0)),
                s(:pair,
                  s(:str, "bgstipple"),
                  s(:str, "gray25"))))),
          s(:lvasgn, :style_tag_bgstipple,
            s(:send,
              s(:const, nil, :TkTextTag), :new,
              s(:lvar, :t),
              s(:hash,
                s(:pair,
                  s(:str, "background"),
                  s(:str, "black")),
                s(:pair,
                  s(:str, "borderwidth"),
                  s(:int, 0)),
                s(:pair,
                  s(:str, "bgstipple"),
                  s(:str, "gray12")))))),
        s(:lvasgn, :style_tag_fgstipple,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "fgstipple"),
                s(:str, "gray50"))))),
        s(:lvasgn, :style_tag_underline,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "underline"),
                s(:str, "on"))))),
        s(:lvasgn, :style_tag_overstrike,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "overstrike"),
                s(:str, "on"))))),
        s(:lvasgn, :style_tag_right,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "justify"),
                s(:str, "right"))))),
        s(:lvasgn, :style_tag_center,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "justify"),
                s(:str, "center"))))),
        s(:if,
          s(:send,
            s(:gvar, :$tk_version), :=~,
            s(:regexp,
              s(:str, "^4.*"),
              s(:regopt))),
          s(:begin,
            s(:lvasgn, :style_tag_super,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "4p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-Adobe-Courier-Medium-R-Normal--*-100-*-*-*-*-*-*"))))),
            s(:lvasgn, :style_tag_sub,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "-2p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-Adobe-Courier-Medium-R-Normal--*-100-*-*-*-*-*-*")))))),
          s(:begin,
            s(:lvasgn, :style_tag_super,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "4p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 10)))))),
            s(:lvasgn, :style_tag_sub,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "-2p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 10)))))))),
        s(:lvasgn, :style_tag_margins,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "lmargin1"),
                s(:str, "12m")),
              s(:pair,
                s(:str, "lmargin2"),
                s(:str, "6m")),
              s(:pair,
                s(:str, "rmargin"),
                s(:str, "10m"))))),
        s(:lvasgn, :style_tag_spacing,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "spacing1"),
                s(:str, "10p")),
              s(:pair,
                s(:str, "spacing2"),
                s(:str, "2p")),
              s(:pair,
                s(:str, "lmargin1"),
                s(:str, "12m")),
              s(:pair,
                s(:str, "lmargin2"),
                s(:str, "6m")),
              s(:pair,
                s(:str, "rmargin"),
                s(:str, "10m"))))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "このようにテキスト widget は情報を様々なスタイルで表示すること\n"),
            s(:str, "ができます。"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "タグ"),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "というメカニズムでコントロールされます。\n"),
            s(:str, "タグとはテキスト widget 内のある文字 (の範囲)に対して適用できる\n"),
            s(:str, "単なる名前のことです。タグは様々な表示スタイルに設定できます。\n"),
            s(:str, "設定すると、そのタグのついた文字は指定したスタイルで表示される\n"),
            s(:str, "ようになります。使用できる表示スタイルは次の通りです。\n"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "1. フォント")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "    どんな X のフォントでも使えます。")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "large"),
          s(:lvar, :style_tag_verybig)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "とか"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "small"),
          s(:lvar, :style_tag_small)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "とか。\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "2. 色")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "背景色"),
          s(:lvar, :style_tag_color1)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "も")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "前景色"),
          s(:lvar, :style_tag_color2)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "も")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "両方"),
          s(:lvar, :style_tag_color1),
          s(:lvar, :style_tag_color2)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "とも変えることができます。\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "3. 網かけ")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  このように描画の際に")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "背景も"),
          s(:lvar, :style_tag_bgstipple)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "文字も"),
          s(:lvar, :style_tag_fgstipple)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "単なる塗りつぶし\n"),
            s(:str, "でなく、網かけを使うことができます。\n"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "4. 下線")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  このように")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "文字に下線を引く"),
          s(:lvar, :style_tag_underline)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "ことができます。\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "5. 打ち消し線")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  このように")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "文字に重ねて線を引く"),
          s(:lvar, :style_tag_overstrike)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "ことができます。\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "6. 3D 効果")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  背景に枠をつけて、文字を")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "飛び出す"),
          s(:lvar, :style_tag_raised)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "ようにしたり")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "沈む"),
          s(:lvar, :style_tag_sunken)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "ようにできます。\n"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "7. 行揃え")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " このように行を\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "左に揃えたり\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "右に揃えたり\n"),
          s(:lvar, :style_tag_right)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "真中に揃えたりできます。\n"),
          s(:lvar, :style_tag_center)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "8. 肩付き文字と添字")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  10")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "n"),
          s(:lvar, :style_tag_super)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " のように肩付き文字の効果や、")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "X"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "i"),
          s(:lvar, :style_tag_sub)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "のように添字の効果を出すことができます。\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "9. マージン")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "テキストの左側に余分な空白を置くことができます:\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "この段落はマージンの使用例です。スクリーン"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "上で折り返されて表示されている1行のテキストです。"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "左側には2種類のマージンを持ちます。"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "1行目に対するものと、"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "2行目以降の連続したマージン"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "です。また右側にもマージンがあります。"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "行の折り返し位置を決めるために使用することができます。\n"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "\n"),
            s(:str, "10. スペーシング")),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "3つのパラメータで行のスペーシングを")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "制御す\n"),
            s(:str, "ることができます。Spacing1で、行の"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "上にどのくらいの空間を置くか、\n"),
            s(:str, "spacing3"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "で行の下にどのくらいの空間を置くか、")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "行が折り返されているなら\n"),
            s(:str, "ば、spacing2で、"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "テキスト行を生成している行の間にどのくらい")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "の空間を置\n"),
            s(:str, "くかを示します。\n"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "これらのインデントされた段落はどのように"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "スペーシングがが行われるのかを示します。"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "各段落は実際はテキストwidget"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "の1行で、widgetによって折り畳まれています。\n"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "Spacing1はこのテキストでは10pointに"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "設定されています。"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "これにより、段落の間に大きな間隔が"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "存在しています。"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "Spacing2は2pointに設定されています。"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "これで段落の中にほんの少し間隔が存在しています。"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "Spacing3はこの例では使用されていません。\n"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "間隔がどこにあるかを見たければ、これらの段落の"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "なかでテキストを選択してください。選択の"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "反転した部分には余分にとられた間隔が"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "含まれています。\n"),
          s(:lvar, :style_tag_spacing))))),
  s(:send,
    s(:lvar, :txt), :width,
    s(:int, 70)),
  s(:send,
    s(:lvar, :txt), :height,
    s(:int, 32)))
