s(:begin,
  s(:send, nil, :require,
    s(:str, "multi-tk")),
  s(:send,
    s(:send,
      s(:const, nil, :TkMessage), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:dstr,
            s(:str, "This is a sample of the safe-Tk slave interpreter. \nOn the slave interpreter, 'tkoptdb.rb' demo is running.\n"),
            s(:str, "( NOTE:: a safe-Tk interpreter can't read options \nfrom a file. Options are given by the master interpreter \nin this script. )\n"),
            s(:str, "The window shown this message is a root widget of \nthe default master interpreter. The other window \nis a toplevel widget of the master interpreter, and it \nhas a container frame of the safe-Tk slave interpreter.\n"),
            s(:str, "'exit' on the slave interpreter exits the slave only. \nYou can also delete the slave by the button on the toplevel widget.\n"))))), :pack),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :ENV), :[],
        s(:str, "LANG")), :=~,
      s(:regexp,
        s(:str, "^ja"),
        s(:regopt))),
    s(:lvasgn, :ent,
      s(:send,
        s(:const, nil, :TkOptionDB), :read_entries,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "resource.ja"),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)"))),
        s(:str, "utf-8"))),
    s(:lvasgn, :ent,
      s(:send,
        s(:const, nil, :TkOptionDB), :read_entries,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "resource.en"),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")))))),
  s(:lvasgn, :file,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "tkoptdb.rb"),
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")))),
  s(:lvasgn, :ip,
    s(:block,
      s(:send,
        s(:const, nil, :MultiTkIp), :new_safeTk),
      s(:args),
      s(:block,
        s(:send,
          s(:lvar, :ent), :each),
        s(:args,
          s(:arg, :pat),
          s(:arg, :val)),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "option"),
          s(:str, "add"),
          s(:lvar, :pat),
          s(:lvar, :val))))),
  s(:send, nil, :print,
    s(:str, "ip.eval_proc{$SAFE} ==> "),
    s(:block,
      s(:send,
        s(:lvar, :ip), :eval_proc),
      s(:args),
      s(:gvar, :$SAFE)),
    s(:str, "\n")),
  s(:send, nil, :print,
    s(:str, "\ncall 'ip.wait_on_mainloop = false'\n")),
  s(:send, nil, :print,
    s(:str, "If 'ip.wait_on_mainloop? == true', "),
    s(:str, "when 'mainloop' is called on 'ip.eval_proc', "),
    s(:str, "'ip.eval_proc' does't return while the root window exists.\n"),
    s(:str, "If you want to avoid that, set wait_on_mainloop to false. "),
    s(:str, "Then the mainloop in the eval_proc returns soon "),
    s(:str, "and the following steps are evaluated. \n"),
    s(:str, "If you hate the both of them, use 'ip.bg_eval_proc' or "),
    s(:str, "wrap 'ip.eval_proc' by a thread.\n")),
  s(:send,
    s(:lvar, :ip), :wait_on_mainloop=,
    s(:false)),
  s(:lvasgn, :ret,
    s(:block,
      s(:send,
        s(:lvar, :ip), :eval_proc),
      s(:args),
      s(:send, nil, :load,
        s(:lvar, :file)))),
  s(:send, nil, :print,
    s(:str, "\nip.eval_proc{}, which includes insecure operiation in the given block, returns an exception object: "),
    s(:send,
      s(:lvar, :ret), :inspect),
    s(:str, "\n")),
  s(:send, nil, :print,
    s(:str, "If a proc object is given, the proc is evaluated on the safe-level which is kept on the proc :: ip.eval_proc( proc{$SAFE} ) ==> "),
    s(:send,
      s(:lvar, :ip), :eval_proc,
      s(:block,
        s(:send, nil, :proc),
        s(:args),
        s(:gvar, :$SAFE))),
    s(:str, "\n")),
  s(:lvasgn, :safe0_cmd,
    s(:block,
      s(:send,
        s(:const, nil, :Proc), :new),
      s(:args),
      s(:begin,
        s(:send, nil, :print,
          s(:str, "safe0_cmd safe-level == "),
          s(:gvar, :$SAFE),
          s(:str, "\n")),
        s(:send, nil, :load,
          s(:lvar, :file))))),
  s(:block,
    s(:send,
      s(:lvar, :ip), :eval_proc),
    s(:args),
    s(:send,
      s(:lvar, :safe0_cmd), :call)),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
