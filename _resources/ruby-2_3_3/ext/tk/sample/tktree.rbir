s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:class,
    s(:const, nil, :TkTree),
    s(:const, nil, :TkCanvas),
    s(:begin,
      s(:casgn, nil, :TCL_SCRIPT_PATH,
        s(:send,
          s(:const, nil, :File), :join,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")),
          s(:str, "tktree.tcl"))),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:lvasgn, :args,
            s(:array,
              s(:ivar, :@path))),
          s(:if,
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :font,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "itemfont"))),
              s(:if,
                s(:lvar, :font),
                s(:send,
                  s(:lvar, :keys), :[]=,
                  s(:str, "font"),
                  s(:lvar, :font)), nil),
              s(:send,
                s(:lvar, :args), :<<,
                s(:lvar, :keys))), nil),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :tk_call,
                s(:str, "::tktree::treecreate"),
                s(:splat,
                  s(:lvar, :args))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError),
                  s(:const, nil, :RuntimeError)), nil,
                s(:begin,
                  s(:send,
                    s(:const, nil, :Tk), :load_tclscript,
                    s(:const,
                      s(:const, nil, :TkTree), :TCL_SCRIPT_PATH)),
                  s(:send, nil, :tk_call,
                    s(:str, "::tktree::treecreate"),
                    s(:splat,
                      s(:lvar, :args))))), nil)))),
      s(:def, :newitem,
        s(:args,
          s(:arg, :itempath),
          s(:optarg, :keys,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :keys), :kind_of?,
            s(:const, nil, :Hash)),
          s(:begin,
            s(:lvasgn, :keys,
              s(:send, nil, :_symbolkey2str,
                s(:lvar, :keys))),
            s(:lvasgn, :font,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "itemfont"))),
            s(:if,
              s(:lvar, :font),
              s(:send,
                s(:lvar, :keys), :[]=,
                s(:str, "font"),
                s(:lvar, :font)), nil),
            s(:send, nil, :tk_call,
              s(:str, "::tktree::newitem"),
              s(:ivar, :@path),
              s(:lvar, :itempath),
              s(:lvar, :keys))),
          s(:send, nil, :tk_call,
            s(:str, "::tktree::newitem"),
            s(:ivar, :@path),
            s(:lvar, :itempath)))),
      s(:def, :delitem,
        s(:args,
          s(:arg, :itempath)),
        s(:send, nil, :tk_call,
          s(:str, "::tktree::delitem"),
          s(:ivar, :@path),
          s(:lvar, :itempath))),
      s(:def, :labelat,
        s(:args,
          s(:arg, :xpos),
          s(:arg, :ypos)),
        s(:send, nil, :tk_call,
          s(:str, "::tktree::delitem"),
          s(:ivar, :@path),
          s(:lvar, :xpos),
          s(:lvar, :ypos))),
      s(:def, :getselection,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "::tktree::getselection"),
          s(:ivar, :@path))),
      s(:def, :setselection,
        s(:args,
          s(:arg, :itempath)),
        s(:send, nil, :tk_call,
          s(:str, "::tktree::getselection"),
          s(:ivar, :@path),
          s(:lvar, :itempath))))),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:begin,
      s(:send,
        s(:send,
          s(:const, nil, :TkLabel), :new,
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:dstr,
                s(:str, "\n"),
                s(:str, " This is a sample to use a Tcl library script on Ruby/Tk.\n"),
                s(:str, " This sample loads tktree.tcl (see <http://wiki.tcl.tk/10615>)\n"),
                s(:str, " and calls functions of the Tcl script.\n"))),
            s(:pair,
              s(:sym, :relief),
              s(:sym, :ridge)),
            s(:pair,
              s(:sym, :justify),
              s(:sym, :left)))), :pack),
      s(:lvasgn, :items,
        s(:array,
          s(:str, "/group1/item1"),
          s(:str, "/group1/item2"),
          s(:str, "/group1/subgroup/item1"),
          s(:str, "/group2/item1"),
          s(:str, "/item1"))),
      s(:lvasgn, :tr1,
        s(:send,
          s(:send,
            s(:const, nil, :TkTree), :new), :pack,
          s(:hash,
            s(:pair,
              s(:sym, :expand),
              s(:true)),
            s(:pair,
              s(:sym, :fill),
              s(:sym, :both))))),
      s(:send,
        s(:lvar, :tr1), :focus),
      s(:block,
        s(:send,
          s(:lvar, :items), :each),
        s(:args,
          s(:arg, :item)),
        s(:send,
          s(:lvar, :tr1), :newitem,
          s(:lvar, :item),
          s(:hash,
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send,
                  s(:const, nil, :Tk), :messageBox,
                  s(:hash,
                    s(:pair,
                      s(:sym, :message),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :item)),
                        s(:str, " executed")))))))))),
      s(:lvasgn, :f,
        s(:send,
          s(:send,
            s(:const, nil, :TkFrame), :new), :pack,
          s(:hash,
            s(:pair,
              s(:sym, :expand),
              s(:true)),
            s(:pair,
              s(:sym, :fill),
              s(:sym, :both))))),
      s(:lvasgn, :tr2,
        s(:block,
          s(:send,
            s(:const, nil, :TkTree), :new,
            s(:lvar, :f),
            s(:hash,
              s(:pair,
                s(:sym, :bg),
                s(:str, "black")),
              s(:pair,
                s(:sym, :textcolor),
                s(:str, "red")),
              s(:pair,
                s(:sym, :bd),
                s(:int, 4)),
              s(:pair,
                s(:sym, :relief),
                s(:sym, :ridge)),
              s(:pair,
                s(:sym, :selectbackground),
                s(:str, "darkBlue")),
              s(:pair,
                s(:sym, :selectforeground),
                s(:str, "yellow")),
              s(:pair,
                s(:sym, :selectborderwidth),
                s(:int, 3)),
              s(:pair,
                s(:sym, :linecolor),
                s(:str, "yellow")))),
          s(:args),
          s(:begin,
            s(:send, nil, :yscrollbar,
              s(:send,
                s(:send,
                  s(:const, nil, :TkScrollbar), :new,
                  s(:lvar, :f),
                  s(:hash,
                    s(:pair,
                      s(:sym, :width),
                      s(:int, 10)))), :pack,
                s(:hash,
                  s(:pair,
                    s(:sym, :side),
                    s(:sym, :right)),
                  s(:pair,
                    s(:sym, :fill),
                    s(:sym, :y))))),
            s(:send, nil, :xscrollbar,
              s(:send,
                s(:send,
                  s(:const, nil, :TkScrollbar), :new,
                  s(:lvar, :f),
                  s(:hash,
                    s(:pair,
                      s(:sym, :width),
                      s(:int, 10)))), :pack,
                s(:hash,
                  s(:pair,
                    s(:sym, :side),
                    s(:sym, :bottom)),
                  s(:pair,
                    s(:sym, :fill),
                    s(:sym, :x))))),
            s(:send, nil, :pack,
              s(:hash,
                s(:pair,
                  s(:sym, :expand),
                  s(:true)),
                s(:pair,
                  s(:sym, :fill),
                  s(:sym, :both))))))),
      s(:block,
        s(:send,
          s(:lvar, :items), :each),
        s(:args,
          s(:arg, :item)),
        s(:send,
          s(:lvar, :tr2), :newitem,
          s(:lvar, :item),
          s(:hash,
            s(:pair,
              s(:sym, :textcolor),
              s(:str, "green")),
            s(:pair,
              s(:sym, :image),
              s(:str, "")),
            s(:pair,
              s(:sym, :itemfont),
              s(:hash,
                s(:pair,
                  s(:sym, :family),
                  s(:str, "Times")),
                s(:pair,
                  s(:sym, :size),
                  s(:int, 10)))),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send,
                  s(:const, nil, :Tk), :messageBox,
                  s(:hash,
                    s(:pair,
                      s(:sym, :message),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :item)),
                        s(:str, " executed")))))))))),
      s(:send,
        s(:const, nil, :Tk), :mainloop)), nil))
