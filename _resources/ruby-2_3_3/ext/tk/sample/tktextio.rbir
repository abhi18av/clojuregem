s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/text")),
  s(:send, nil, :require,
    s(:str, "tk/textmark")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:class,
    s(:const, nil, :TkTextIO),
    s(:const, nil, :TkText),
    s(:begin,
      s(:cvasgn, :@@create_queues,
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:array,
            s(:send,
              s(:const, nil, :Queue), :new),
            s(:send,
              s(:const, nil, :Mutex), :new),
            s(:send,
              s(:const, nil, :Queue), :new),
            s(:send,
              s(:const, nil, :Mutex), :new)))),
      s(:casgn, nil, :OPT_DEFAULTS,
        s(:hash,
          s(:pair,
            s(:str, "mode"),
            s(:nil)),
          s(:pair,
            s(:str, "overwrite"),
            s(:false)),
          s(:pair,
            s(:str, "text"),
            s(:nil)),
          s(:pair,
            s(:str, "show"),
            s(:sym, :pos)),
          s(:pair,
            s(:str, "wrap"),
            s(:str, "char")),
          s(:pair,
            s(:str, "sync"),
            s(:true)),
          s(:pair,
            s(:str, "prompt"),
            s(:nil)),
          s(:pair,
            s(:str, "prompt_cmd"),
            s(:nil)),
          s(:pair,
            s(:str, "hist_size"),
            s(:int, 1000)))),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:send, nil, :_get_io_params,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :keys), :kind_of?,
                    s(:const, nil, :Hash))),
                s(:lvar, :keys),
                s(:hash)))),
          s(:super,
            s(:lvar, :keys)),
          s(:ivasgn, :@count_var,
            s(:send,
              s(:const, nil, :TkVariable), :new)),
          s(:ivasgn, :@write_buffer,
            s(:str, "")),
          s(:ivasgn, :@read_buffer,
            s(:str, "")),
          s(:ivasgn, :@buf_size,
            s(:int, 0)),
          s(:ivasgn, :@buf_max,
            s(:int, 1024)),
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@write_buf_queue),
              s(:ivasgn, :@write_buf_mutex),
              s(:ivasgn, :@read_buf_queue),
              s(:ivasgn, :@read_buf_mutex)),
            s(:send,
              s(:cvar, :@@create_queues), :call)),
          s(:ivasgn, :@idle_flush,
            s(:send,
              s(:const, nil, :TkTimer), :new,
              s(:sym, :idle),
              s(:int, 1),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:rescue,
                  s(:send,
                    s(:ivar, :@flusher), :run),
                  s(:resbody, nil, nil,
                    s(:nil)), nil)))),
          s(:ivasgn, :@timer_flush,
            s(:send,
              s(:const, nil, :TkTimer), :new,
              s(:int, 250),
              s(:int, -1),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:rescue,
                  s(:send,
                    s(:ivar, :@flusher), :run),
                  s(:resbody, nil, nil,
                    s(:nil)), nil)))),
          s(:ivasgn, :@flusher,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Thread), :stop),
                  s(:send, nil, :flush))))),
          s(:ivasgn, :@receiver,
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:block,
                    s(:send, nil, :loop),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :str,
                        s(:send,
                          s(:ivar, :@write_buf_queue), :deq)),
                      s(:block,
                        s(:send,
                          s(:ivar, :@write_buf_mutex), :synchronize),
                        s(:args),
                        s(:send,
                          s(:ivar, :@write_buffer), :<<,
                          s(:lvar, :str))),
                      s(:send,
                        s(:ivar, :@idle_flush), :start))),
                  s(:send,
                    s(:ivar, :@flusher), :kill))))),
          s(:send,
            s(:ivar, :@timer_flush), :start),
          s(:send, nil, :_setup_io,
            s(:lvar, :opts)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :destroy,
        s(:args),
        s(:begin,
          s(:rescue,
            s(:send,
              s(:ivar, :@flusher), :kill),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:rescue,
            s(:send,
              s(:ivar, :@idle_flush), :stop),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:rescue,
            s(:send,
              s(:ivar, :@timer_flush), :stop),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:rescue,
            s(:send,
              s(:ivar, :@receiver), :kill),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:super))),
      s(:def, :_get_io_params,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:hash)),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :const_get,
                s(:sym, :OPT_DEFAULTS)), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:if,
              s(:send,
                s(:lvar, :keys), :has_key?,
                s(:lvar, :k)),
              s(:send,
                s(:lvar, :opts), :[]=,
                s(:lvar, :k),
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:lvar, :k))),
              s(:send,
                s(:lvar, :opts), :[]=,
                s(:lvar, :k),
                s(:lvar, :v)))),
          s(:lvar, :opts))),
      s(:def, :_setup_io,
        s(:args,
          s(:arg, :opts)),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@txtpos)),
            s(:send,
              s(:ivar, :@txtpos), :set,
              s(:str, "1.0")),
            s(:ivasgn, :@txtpos,
              s(:send,
                s(:const, nil, :TkTextMark), :new,
                s(:self),
                s(:str, "1.0")))),
          s(:send,
            s(:ivar, :@txtpos), :gravity=,
            s(:sym, :left)),
          s(:ivasgn, :@lineno,
            s(:int, 0)),
          s(:ivasgn, :@line_offset,
            s(:int, 0)),
          s(:ivasgn, :@hist_max,
            s(:send,
              s(:send,
                s(:lvar, :opts), :[],
                s(:str, "hist_size")), :to_i)),
          s(:ivasgn, :@hist_index,
            s(:int, 0)),
          s(:ivasgn, :@history,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:ivar, :@hist_max))),
          s(:send,
            s(:ivar, :@history), :[]=,
            s(:int, 0),
            s(:str, "")),
          s(:send,
            s(:self), :[]=,
            s(:str, "wrap"),
            s(:send, nil, :wrap)),
          s(:send,
            s(:self), :show_mode=,
            s(:send,
              s(:lvar, :opts), :[],
              s(:str, "show"))),
          s(:if,
            s(:send,
              s(:lvar, :opts), :[],
              s(:str, "text")),
            s(:send,
              s(:self), :value=,
              s(:send,
                s(:lvar, :opts), :[],
                s(:str, "text"))), nil),
          s(:ivasgn, :@overwrite,
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:str, "overwrite"))),
              s(:true),
              s(:false))),
          s(:ivasgn, :@sync,
            s(:send,
              s(:lvar, :opts), :[],
              s(:str, "sync"))),
          s(:ivasgn, :@prompt,
            s(:send,
              s(:lvar, :opts), :[],
              s(:str, "prompt"))),
          s(:ivasgn, :@prompt_cmd,
            s(:send,
              s(:lvar, :opts), :[],
              s(:str, "prompt_cmd"))),
          s(:ivasgn, :@open,
            s(:hash,
              s(:pair,
                s(:sym, :r),
                s(:true)),
              s(:pair,
                s(:sym, :w),
                s(:true)))),
          s(:ivasgn, :@console_mode,
            s(:false)),
          s(:ivasgn, :@end_of_stream,
            s(:false)),
          s(:ivasgn, :@console_buffer,
            s(:nil)),
          s(:case,
            s(:send,
              s(:lvar, :opts), :[],
              s(:str, "mode")),
            s(:when,
              s(:nil), nil),
            s(:when,
              s(:sym, :console),
              s(:str, "console"),
              s(:begin,
                s(:ivasgn, :@console_mode,
                  s(:true)),
                s(:ivasgn, :@console_buffer,
                  s(:send,
                    s(:send,
                      s(:self), :class), :new,
                    s(:hash,
                      s(:pair,
                        s(:sym, :mode),
                        s(:str, "r"))))),
                s(:send,
                  s(:self), :show_mode=,
                  s(:sym, :insert)))),
            s(:when,
              s(:str, "r"),
              s(:str, "rb"),
              s(:begin,
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :r),
                  s(:true)),
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :w),
                  s(:nil)))),
            s(:when,
              s(:str, "r+"),
              s(:str, "rb+"),
              s(:str, "r+b"),
              s(:begin,
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :r),
                  s(:true)),
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :w),
                  s(:true)))),
            s(:when,
              s(:str, "w"),
              s(:str, "wb"),
              s(:begin,
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :r),
                  s(:nil)),
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :w),
                  s(:true)),
                s(:send,
                  s(:self), :value=,
                  s(:str, "")))),
            s(:when,
              s(:str, "w+"),
              s(:str, "wb+"),
              s(:str, "w+b"),
              s(:begin,
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :r),
                  s(:true)),
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :w),
                  s(:true)),
                s(:send,
                  s(:self), :value=,
                  s(:str, "")))),
            s(:when,
              s(:str, "a"),
              s(:str, "ab"),
              s(:begin,
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :r),
                  s(:nil)),
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :w),
                  s(:true)),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:str, "end - 1 char")),
                s(:send,
                  s(:ivar, :@txtpos), :gravity=,
                  s(:sym, :right)))),
            s(:when,
              s(:str, "a+"),
              s(:str, "ab+"),
              s(:str, "a+b"),
              s(:begin,
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :r),
                  s(:true)),
                s(:send,
                  s(:ivar, :@open), :[]=,
                  s(:sym, :w),
                  s(:true)),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:str, "end - 1 char")),
                s(:send,
                  s(:ivar, :@txtpos), :gravity=,
                  s(:sym, :right)))),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "unknown mode `"),
                s(:begin,
                  s(:send,
                    s(:lvar, :opts), :[],
                    s(:str, "mode"))),
                s(:str, "'")))),
          s(:if,
            s(:defined?,
              s(:ivar, :@ins_head)), nil,
            s(:begin,
              s(:ivasgn, :@ins_head,
                s(:send,
                  s(:const, nil, :TkTextMark), :new,
                  s(:self),
                  s(:str, "insert"))),
              s(:send,
                s(:ivar, :@ins_head), :gravity=,
                s(:sym, :left)))),
          s(:if,
            s(:defined?,
              s(:ivar, :@ins_tail)), nil,
            s(:begin,
              s(:ivasgn, :@ins_tail,
                s(:send,
                  s(:const, nil, :TkTextMark), :new,
                  s(:self),
                  s(:str, "insert"))),
              s(:send,
                s(:ivar, :@ins_tail), :gravity=,
                s(:sym, :right)))),
          s(:if,
            s(:defined?,
              s(:ivar, :@tmp_mark)), nil,
            s(:begin,
              s(:ivasgn, :@tmp_mark,
                s(:send,
                  s(:const, nil, :TkTextMark), :new,
                  s(:self),
                  s(:str, "insert"))),
              s(:send,
                s(:ivar, :@tmp_mark), :gravity=,
                s(:sym, :left)))),
          s(:if,
            s(:ivar, :@console_mode),
            s(:begin,
              s(:send, nil, :_set_console_line),
              s(:send, nil, :_setup_console_bindings)), nil))),
      s(:send, nil, :private,
        s(:sym, :_get_io_params),
        s(:sym, :_setup_io)),
      s(:def, :_set_console_line,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tmp_mark), :set,
            s(:ivar, :@ins_tail)),
          s(:send, nil, :mark_set,
            s(:str, "insert"),
            s(:str, "end")),
          s(:lvasgn, :prompt,
            s(:str, "")),
          s(:if,
            s(:ivar, :@prompt_cmd),
            s(:send,
              s(:lvar, :prompt), :<<,
              s(:send,
                s(:ivar, :@prompt_cmd), :call)), nil),
          s(:if,
            s(:ivar, :@prompt),
            s(:send,
              s(:lvar, :prompt), :<<,
              s(:ivar, :@prompt)), nil),
          s(:send, nil, :insert,
            s(:ivar, :@tmp_mark),
            s(:lvar, :prompt)),
          s(:send,
            s(:ivar, :@ins_head), :set,
            s(:ivar, :@ins_tail)),
          s(:send,
            s(:ivar, :@ins_tail), :set,
            s(:str, "insert")),
          s(:send,
            s(:ivar, :@txtpos), :set,
            s(:ivar, :@tmp_mark)),
          s(:send, nil, :_see_pos))),
      s(:def, :_replace_console_line,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:send,
            s(:self), :delete,
            s(:ivar, :@ins_head),
            s(:ivar, :@ins_tail)),
          s(:send,
            s(:self), :insert,
            s(:ivar, :@ins_head),
            s(:lvar, :str)))),
      s(:def, :_get_console_line,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tmp_mark), :set,
            s(:ivar, :@ins_tail)),
          s(:lvasgn, :s,
            s(:send,
              s(:self), :get,
              s(:ivar, :@ins_head),
              s(:ivar, :@tmp_mark))),
          s(:send, nil, :_set_console_line),
          s(:lvar, :s))),
      s(:send, nil, :private,
        s(:sym, :_set_console_line),
        s(:sym, :_replace_console_line),
        s(:sym, :_get_console_line)),
      s(:def, :_cb_up,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@history), :[],
              s(:ivar, :@hist_index)), :replace,
            s(:send,
              s(:self), :get,
              s(:ivar, :@ins_head),
              s(:ivar, :@ins_tail))),
          s(:op_asgn,
            s(:ivasgn, :@hist_index), :+,
            s(:int, 1)),
          s(:if,
            s(:or,
              s(:send,
                s(:ivar, :@hist_index), :>=,
                s(:ivar, :@hist_max)),
              s(:send,
                s(:send,
                  s(:ivar, :@history), :[],
                  s(:ivar, :@hist_index)), :!)),
            s(:op_asgn,
              s(:ivasgn, :@hist_index), :-,
              s(:int, 1)), nil),
          s(:if,
            s(:send,
              s(:ivar, :@history), :[],
              s(:ivar, :@hist_index)),
            s(:send, nil, :_replace_console_line,
              s(:send,
                s(:ivar, :@history), :[],
                s(:ivar, :@hist_index))), nil),
          s(:send,
            s(:const, nil, :Tk), :callback_break))),
      s(:def, :_cb_down,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@history), :[],
              s(:ivar, :@hist_index)), :replace,
            s(:send,
              s(:self), :get,
              s(:ivar, :@ins_head),
              s(:ivar, :@ins_tail))),
          s(:op_asgn,
            s(:ivasgn, :@hist_index), :-,
            s(:int, 1)),
          s(:if,
            s(:send,
              s(:ivar, :@hist_index), :<,
              s(:int, 0)),
            s(:ivasgn, :@hist_index,
              s(:int, 0)), nil),
          s(:if,
            s(:send,
              s(:ivar, :@history), :[],
              s(:ivar, :@hist_index)),
            s(:send, nil, :_replace_console_line,
              s(:send,
                s(:ivar, :@history), :[],
                s(:ivar, :@hist_index))), nil),
          s(:send,
            s(:const, nil, :Tk), :callback_break))),
      s(:def, :_cb_left,
        s(:args),
        s(:if,
          s(:and,
            s(:ivar, :@console_mode),
            s(:send, nil, :compare,
              s(:str, "insert"),
              s(:str, "<="),
              s(:ivar, :@ins_head))),
          s(:begin,
            s(:send, nil, :mark_set,
              s(:str, "insert"),
              s(:ivar, :@ins_head)),
            s(:send,
              s(:const, nil, :Tk), :callback_break)), nil)),
      s(:def, :_cb_backspace,
        s(:args),
        s(:if,
          s(:and,
            s(:ivar, :@console_mode),
            s(:send, nil, :compare,
              s(:str, "insert"),
              s(:str, "<="),
              s(:ivar, :@ins_head))),
          s(:send,
            s(:const, nil, :Tk), :callback_break), nil)),
      s(:def, :_cb_ctrl_a,
        s(:args),
        s(:if,
          s(:ivar, :@console_mode),
          s(:begin,
            s(:send, nil, :mark_set,
              s(:str, "insert"),
              s(:ivar, :@ins_head)),
            s(:send,
              s(:const, nil, :Tk), :callback_break)), nil)),
      s(:def, :_cb_ctrl_u,
        s(:args),
        s(:if,
          s(:ivar, :@console_mode),
          s(:begin,
            s(:send, nil, :mark_set,
              s(:str, "insert"),
              s(:ivar, :@ins_head)),
            s(:send, nil, :delete,
              s(:str, "insert"),
              s(:str, "insert lineend")),
            s(:send,
              s(:const, nil, :Tk), :callback_break)), nil)),
      s(:send, nil, :private,
        s(:sym, :_cb_up),
        s(:sym, :_cb_down),
        s(:sym, :_cb_left),
        s(:sym, :_cb_backspace),
        s(:sym, :_cb_ctrl_a),
        s(:sym, :_cb_ctrl_u)),
      s(:def, :_setup_console_bindings,
        s(:args),
        s(:begin,
          s(:ivasgn, :@bindtag,
            s(:send,
              s(:const, nil, :TkBindTag), :new)),
          s(:lvasgn, :tags,
            s(:send,
              s(:self), :bindtags)),
          s(:send,
            s(:lvar, :tags), :[]=,
            s(:send,
              s(:send,
                s(:lvar, :tags), :index,
                s(:self)), :+,
              s(:int, 1)),
            s(:int, 0),
            s(:ivar, :@bindtag)),
          s(:send,
            s(:self), :bindtags=,
            s(:lvar, :tags)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Return")),
            s(:args),
            s(:begin,
              s(:send, nil, :insert,
                s(:str, "end - 1 char"),
                s(:str, "\n")),
              s(:if,
                s(:begin,
                  s(:lvasgn, :str,
                    s(:send, nil, :_get_console_line))),
                s(:begin,
                  s(:send,
                    s(:ivar, :@read_buf_queue), :push,
                    s(:lvar, :str)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@history), :[],
                      s(:int, 0)), :replace,
                    s(:send,
                      s(:lvar, :str), :chomp)),
                  s(:send,
                    s(:ivar, :@history), :pop),
                  s(:send,
                    s(:ivar, :@history), :unshift,
                    s(:str, "")),
                  s(:ivasgn, :@hist_index,
                    s(:int, 0))), nil),
              s(:send,
                s(:const, nil, :Tk), :update),
              s(:send,
                s(:const, nil, :Tk), :callback_break))),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Alt-Return")),
            s(:args),
            s(:send,
              s(:const, nil, :Tk), :callback_continue)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "FocusIn")),
            s(:args),
            s(:if,
              s(:ivar, :@console_mode),
              s(:begin,
                s(:send, nil, :mark_set,
                  s(:str, "insert"),
                  s(:ivar, :@ins_tail)),
                s(:send,
                  s(:const, nil, :Tk), :callback_break)), nil)),
          s(:lvasgn, :ins_mark,
            s(:send,
              s(:const, nil, :TkTextMark), :new,
              s(:self),
              s(:str, "insert"))),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "ButtonPress")),
            s(:args),
            s(:if,
              s(:ivar, :@console_mode),
              s(:send,
                s(:lvar, :ins_mark), :set,
                s(:str, "insert")), nil)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "ButtonRelease-1")),
            s(:args),
            s(:if,
              s(:and,
                s(:ivar, :@console_mode),
                s(:send, nil, :compare,
                  s(:str, "insert"),
                  s(:str, "<="),
                  s(:ivar, :@ins_head))),
              s(:begin,
                s(:send, nil, :mark_set,
                  s(:str, "insert"),
                  s(:lvar, :ins_mark)),
                s(:send,
                  s(:const, nil, :Tk), :callback_break)), nil)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "ButtonRelease-2"),
              s(:str, "%x %y")),
            s(:args,
              s(:arg, :x),
              s(:arg, :y)),
            s(:if,
              s(:ivar, :@console_mode),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :x1),
                    s(:lvasgn, :y1),
                    s(:lvasgn, :x2),
                    s(:lvasgn, :y2)),
                  s(:send, nil, :bbox,
                    s(:lvar, :ins_mark))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :x), :==,
                      s(:lvar, :x1)),
                    s(:send,
                      s(:lvar, :y), :==,
                      s(:lvar, :y1))), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Tk), :event_generate,
                      s(:self),
                      s(:str, "ButtonRelease-2"),
                      s(:hash,
                        s(:pair,
                          s(:sym, :x),
                          s(:lvar, :x1)),
                        s(:pair,
                          s(:sym, :y),
                          s(:lvar, :y1)))),
                    s(:send,
                      s(:const, nil, :Tk), :callback_break)))), nil)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Up")),
            s(:args),
            s(:send, nil, :_cb_up)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Control-p")),
            s(:args),
            s(:send, nil, :_cb_up)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Down")),
            s(:args),
            s(:send, nil, :_cb_down)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Control-n")),
            s(:args),
            s(:send, nil, :_cb_down)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Left")),
            s(:args),
            s(:send, nil, :_cb_left)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Control-b")),
            s(:args),
            s(:send, nil, :_cb_left)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "BackSpace")),
            s(:args),
            s(:send, nil, :_cb_backspace)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Control-h")),
            s(:args),
            s(:send, nil, :_cb_backspace)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Home")),
            s(:args),
            s(:send, nil, :_cb_ctrl_a)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Control-a")),
            s(:args),
            s(:send, nil, :_cb_ctrl_a)),
          s(:block,
            s(:send,
              s(:ivar, :@bindtag), :bind,
              s(:str, "Control-u")),
            s(:args),
            s(:send, nil, :_cb_ctrl_u)))),
      s(:send, nil, :private,
        s(:sym, :_setup_console_bindings)),
      s(:def, :_block_read,
        s(:args,
          s(:optarg, :size,
            s(:nil)),
          s(:optarg, :ret,
            s(:str, "")),
          s(:optarg, :block_mode,
            s(:true))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :size), :==,
              s(:int, 0)),
            s(:return,
              s(:str, "")), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@read_buf_queue), :!),
              s(:send,
                s(:ivar, :@read_buffer), :empty?)),
            s(:return,
              s(:nil)), nil),
          s(:if,
            s(:send,
              s(:lvar, :ret), :kind_of?,
              s(:const, nil, :String)), nil,
            s(:lvasgn, :ret,
              s(:str, ""))),
          s(:if,
            s(:send,
              s(:lvar, :ret), :empty?), nil,
            s(:send,
              s(:lvar, :ret), :replace,
              s(:str, ""))),
          s(:if,
            s(:send,
              s(:lvar, :block_mode), :==,
              s(:nil)),
            s(:if,
              s(:send,
                s(:ivar, :@read_buffer), :empty?),
              s(:begin,
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:send,
                    s(:ivar, :@read_buffer), :slice!,
                    s(:irange,
                      s(:int, 0),
                      s(:int, -1)))),
                s(:return,
                  s(:lvar, :ret))), nil), nil),
          s(:if,
            s(:send,
              s(:lvar, :size), :kind_of?,
              s(:const, nil, :Numeric)),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@read_buf_mutex), :synchronize),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :buf_len,
                      s(:send,
                        s(:ivar, :@read_buffer), :length)),
                    s(:if,
                      s(:send,
                        s(:lvar, :buf_len), :>=,
                        s(:lvar, :size)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :ret), :<<,
                          s(:send,
                            s(:ivar, :@read_buffer), :slice!,
                            s(:int, 0),
                            s(:lvar, :size))),
                        s(:return,
                          s(:lvar, :ret))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :ret), :<<,
                          s(:send,
                            s(:ivar, :@read_buffer), :slice!,
                            s(:irange,
                              s(:int, 0),
                              s(:int, -1)))),
                        s(:op_asgn,
                          s(:lvasgn, :size), :-,
                          s(:lvar, :buf_len)),
                        s(:if,
                          s(:ivar, :@read_buf_queue), nil,
                          s(:return,
                            s(:lvar, :ret))))))),
                s(:send,
                  s(:ivar, :@read_buffer), :<<,
                  s(:send,
                    s(:ivar, :@read_buf_queue), :pop)))),
            s(:begin,
              s(:lvasgn, :rs,
                s(:if,
                  s(:begin,
                    s(:lvar, :size)),
                  s(:lvar, :size),
                  s(:gvar, :$/))),
              s(:if,
                s(:send,
                  s(:lvar, :rs), :kind_of?,
                  s(:const, nil, :Regexp)),
                s(:lvasgn, :rs,
                  s(:send,
                    s(:lvar, :rs), :to_s)), nil),
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:ivar, :@read_buf_mutex), :synchronize),
                    s(:args),
                    s(:if,
                      s(:begin,
                        s(:lvasgn, :str,
                          s(:send,
                            s(:ivar, :@read_buffer), :slice!,
                            s(:regexp,
                              s(:str, "\\A(.*)("),
                              s(:begin,
                                s(:lvar, :rs)),
                              s(:str, ")"),
                              s(:regopt, :m))))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :ret), :<<,
                          s(:lvar, :str)),
                        s(:return,
                          s(:lvar, :ret))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :ret), :<<,
                          s(:send,
                            s(:ivar, :@read_buffer), :slice!,
                            s(:irange,
                              s(:int, 0),
                              s(:int, -1)))),
                        s(:if,
                          s(:ivar, :@read_buf_queue), nil,
                          s(:return,
                            s(:lvar, :ret)))))),
                  s(:send,
                    s(:ivar, :@read_buffer), :<<,
                    s(:send,
                      s(:ivar, :@read_buf_queue), :pop)))))))),
      s(:def, :_block_write,
        s(:args), nil),
      s(:send, nil, :private,
        s(:sym, :_block_read),
        s(:sym, :_block_write)),
      s(:def, :<<,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:send, nil, :_write,
            s(:lvar, :obj)),
          s(:self))),
      s(:def, :binmode,
        s(:args),
        s(:self)),
      s(:def, :clone,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :NotImplementedError),
          s(:str, "cannot clone TkTextIO"))),
      s(:def, :dup,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :NotImplementedError),
          s(:str, "cannot duplicate TkTextIO"))),
      s(:def, :close,
        s(:args),
        s(:begin,
          s(:send, nil, :close_read),
          s(:send, nil, :close_write),
          s(:nil))),
      s(:def, :close_read,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@open), :[],
              s(:sym, :r)),
            s(:send,
              s(:ivar, :@open), :[]=,
              s(:sym, :r),
              s(:false)), nil),
          s(:nil))),
      s(:def, :close_write,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@opne), :[],
              s(:sym, :w)),
            s(:send,
              s(:ivar, :@open), :[]=,
              s(:sym, :w),
              s(:false)), nil),
          s(:nil))),
      s(:def, :closed?,
        s(:args,
          s(:optarg, :dir,
            s(:nil))),
        s(:case,
          s(:lvar, :dir),
          s(:when,
            s(:sym, :r),
            s(:str, "r"),
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :r)), :!)),
          s(:when,
            s(:sym, :w),
            s(:str, "w"),
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :w)), :!)),
          s(:and,
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :r)), :!),
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :w)), :!)))),
      s(:def, :_check_readable,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :r)), :nil?),
            s(:send, nil, :fail,
              s(:const, nil, :IOError),
              s(:str, "not opened for reading")), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :r)), :!),
            s(:send, nil, :fail,
              s(:const, nil, :IOError),
              s(:str, "closed stream")), nil))),
      s(:def, :_check_writable,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :w)), :nil?),
            s(:send, nil, :fail,
              s(:const, nil, :IOError),
              s(:str, "not opened for writing")), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :w)), :!),
            s(:send, nil, :fail,
              s(:const, nil, :IOError),
              s(:str, "closed stream")), nil))),
      s(:send, nil, :private,
        s(:sym, :_check_readable),
        s(:sym, :_check_writable)),
      s(:def, :each_line,
        s(:args,
          s(:optarg, :rs,
            s(:gvar, :$/))),
        s(:begin,
          s(:send, nil, :_check_readable),
          s(:while,
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:self), :gets,
                  s(:lvar, :rs)))),
            s(:yield,
              s(:lvar, :s))),
          s(:self))),
      s(:alias,
        s(:sym, :each),
        s(:sym, :each_line)),
      s(:def, :each_char,
        s(:args),
        s(:begin,
          s(:send, nil, :_check_readable),
          s(:while,
            s(:begin,
              s(:lvasgn, :c,
                s(:send,
                  s(:self), :getc))),
            s(:yield,
              s(:lvar, :c))),
          s(:self))),
      s(:alias,
        s(:sym, :each_byte),
        s(:sym, :each_char)),
      s(:def, :eof?,
        s(:args),
        s(:send, nil, :compare,
          s(:ivar, :@txtpos),
          s(:str, "=="),
          s(:str, "end - 1 char"))),
      s(:alias,
        s(:sym, :eof),
        s(:sym, :eof?)),
      s(:def, :fcntl,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :NotImplementedError),
          s(:dstr,
            s(:str, "fcntl is not implemented on "),
            s(:begin,
              s(:send,
                s(:self), :class))))),
      s(:def, :fsync,
        s(:args),
        s(:int, 0)),
      s(:def, :fileno,
        s(:args),
        s(:nil)),
      s(:def, :flush,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Thread), :pass),
          s(:if,
            s(:or,
              s(:send,
                s(:ivar, :@open), :[],
                s(:sym, :w)),
              s(:send,
                s(:send,
                  s(:ivar, :@write_buffer), :empty?), :!)),
            s(:block,
              s(:send,
                s(:ivar, :@write_buf_mutex), :synchronize),
              s(:args),
              s(:begin,
                s(:send, nil, :_sync_write_buf,
                  s(:ivar, :@write_buffer)),
                s(:send,
                  s(:ivar, :@write_buffer), :[]=,
                  s(:irange,
                    s(:int, 0),
                    s(:int, -1)),
                  s(:str, "")))), nil),
          s(:self))),
      s(:def, :getc,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_read,
                s(:int, 1))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send, nil, :eof?),
            s(:return,
              s(:nil)), nil),
          s(:lvasgn, :c,
            s(:send, nil, :get,
              s(:ivar, :@txtpos))),
          s(:send,
            s(:ivar, :@txtpos), :set,
            s(:send,
              s(:ivar, :@txtpos), :+,
              s(:str, "1 char"))),
          s(:send, nil, :_see_pos),
          s(:lvar, :c))),
      s(:def, :gets,
        s(:args,
          s(:optarg, :rs,
            s(:gvar, :$/))),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_read,
                s(:lvar, :rs))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send, nil, :eof?),
            s(:return,
              s(:nil)), nil),
          s(:send, nil, :_readline,
            s(:lvar, :rs)))),
      s(:def, :ioctrl,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :NotImplementedError),
          s(:str, "iocntl is not implemented on TkTextIO"))),
      s(:def, :isatty,
        s(:args),
        s(:false)),
      s(:def, :tty?,
        s(:args),
        s(:false)),
      s(:def, :lineno,
        s(:args),
        s(:send,
          s(:ivar, :@lineno), :+,
          s(:ivar, :@line_offset))),
      s(:def, :lineno=,
        s(:args,
          s(:arg, :num)),
        s(:begin,
          s(:ivasgn, :@line_offset,
            s(:send,
              s(:lvar, :num), :-,
              s(:ivar, :@lineno))),
          s(:lvar, :num))),
      s(:def, :overwrite?,
        s(:args),
        s(:ivar, :@overwrite)),
      s(:def, :overwrite=,
        s(:args,
          s(:arg, :ovwt)),
        s(:ivasgn, :@overwrite,
          s(:if,
            s(:begin,
              s(:lvar, :ovwt)),
            s(:true),
            s(:false)))),
      s(:def, :pid,
        s(:args),
        s(:nil)),
      s(:def, :index_pos,
        s(:args),
        s(:send, nil, :index,
          s(:ivar, :@txtpos))),
      s(:alias,
        s(:sym, :tell_index),
        s(:sym, :index_pos)),
      s(:def, :index_pos=,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send,
            s(:ivar, :@txtpos), :set,
            s(:lvar, :idx)),
          s(:if,
            s(:send, nil, :compare,
              s(:ivar, :@txtpos),
              s(:str, ">="),
              s(:sym, :end)),
            s(:send,
              s(:ivar, :@txtpos), :set,
              s(:str, "end - 1 char")), nil),
          s(:send, nil, :_see_pos),
          s(:lvar, :idx))),
      s(:def, :pos,
        s(:args),
        s(:begin,
          s(:lvasgn, :s,
            s(:send, nil, :get,
              s(:str, "1.0"),
              s(:ivar, :@txtpos))),
          s(:send, nil, :number,
            s(:send, nil, :tk_call,
              s(:str, "string"),
              s(:str, "length"),
              s(:lvar, :s))))),
      s(:alias,
        s(:sym, :tell),
        s(:sym, :pos)),
      s(:def, :pos=,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :seek,
            s(:lvar, :idx),
            s(:const,
              s(:const, nil, :IO), :SEEK_SET)),
          s(:lvar, :idx))),
      s(:def, :pos_gravity,
        s(:args),
        s(:send,
          s(:ivar, :@txtpos), :gravity)),
      s(:def, :pos_gravity=,
        s(:args,
          s(:arg, :side)),
        s(:begin,
          s(:send,
            s(:ivar, :@txtpos), :gravity=,
            s(:lvar, :side)),
          s(:lvar, :side))),
      s(:def, :print,
        s(:args,
          s(:optarg, :arg,
            s(:gvar, :$_)),
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :_check_writable),
          s(:send,
            s(:lvar, :args), :unshift,
            s(:lvar, :arg)),
          s(:block,
            s(:send,
              s(:lvar, :args), :map!),
            s(:args,
              s(:arg, :val)),
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :val), :==,
                  s(:nil))),
              s(:str, "nil"),
              s(:send,
                s(:lvar, :val), :to_s))),
          s(:lvasgn, :str,
            s(:send,
              s(:lvar, :args), :join,
              s(:gvar, :$,))),
          s(:if,
            s(:gvar, :$\),
            s(:send,
              s(:lvar, :str), :<<,
              s(:gvar, :$\)), nil),
          s(:send, nil, :_write,
            s(:lvar, :str)),
          s(:nil))),
      s(:def, :printf,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :_check_writable),
          s(:send, nil, :_write,
            s(:send, nil, :sprintf,
              s(:splat,
                s(:lvar, :args)))),
          s(:nil))),
      s(:def, :putc,
        s(:args,
          s(:arg, :c)),
        s(:begin,
          s(:send, nil, :_check_writable),
          s(:if,
            s(:send,
              s(:lvar, :c), :kind_of?,
              s(:const, nil, :Fixnum)),
            s(:lvasgn, :c,
              s(:send,
                s(:lvar, :c), :chr)), nil),
          s(:send, nil, :_write,
            s(:lvar, :c)),
          s(:lvar, :c))),
      s(:def, :puts,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :_check_writable),
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?),
            s(:begin,
              s(:send, nil, :_write,
                s(:str, "\n")),
              s(:return,
                s(:nil))), nil),
          s(:block,
            s(:send,
              s(:lvar, :args), :each),
            s(:args,
              s(:arg, :arg)),
            s(:if,
              s(:send,
                s(:lvar, :arg), :==,
                s(:nil)),
              s(:send, nil, :_write,
                s(:str, "nil\n")),
              s(:if,
                s(:send,
                  s(:lvar, :arg), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send, nil, :puts,
                  s(:splat,
                    s(:lvar, :arg))),
                s(:if,
                  s(:send,
                    s(:lvar, :arg), :kind_of?,
                    s(:const, nil, :String)),
                  s(:begin,
                    s(:send, nil, :_write,
                      s(:send,
                        s(:lvar, :arg), :chomp)),
                    s(:send, nil, :_write,
                      s(:str, "\n"))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :arg,
                          s(:send,
                            s(:lvar, :arg), :to_ary)),
                        s(:send, nil, :puts,
                          s(:splat,
                            s(:lvar, :arg)))),
                      s(:resbody, nil, nil,
                        s(:send, nil, :puts,
                          s(:send,
                            s(:lvar, :arg), :to_s))), nil)))))),
          s(:nil))),
      s(:def, :_read,
        s(:args,
          s(:arg, :len)),
        s(:begin,
          s(:lvasgn, :epos,
            s(:send,
              s(:ivar, :@txtpos), :+,
              s(:dstr,
                s(:begin,
                  s(:lvar, :len)),
                s(:str, " char")))),
          s(:lvasgn, :s,
            s(:send, nil, :get,
              s(:ivar, :@txtpos),
              s(:lvar, :epos))),
          s(:send,
            s(:ivar, :@txtpos), :set,
            s(:lvar, :epos)),
          s(:if,
            s(:send, nil, :compare,
              s(:ivar, :@txtpos),
              s(:str, ">="),
              s(:sym, :end)),
            s(:send,
              s(:ivar, :@txtpos), :set,
              s(:str, "end - 1 char")), nil),
          s(:send, nil, :_see_pos),
          s(:lvar, :s))),
      s(:send, nil, :private,
        s(:sym, :_read)),
      s(:def, :read,
        s(:args,
          s(:optarg, :len,
            s(:nil)),
          s(:optarg, :buf,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_read,
                s(:lvar, :len),
                s(:lvar, :buf))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:lvar, :len),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :len), :==,
                  s(:int, 0)),
                s(:return,
                  s(:str, "")), nil),
              s(:if,
                s(:send, nil, :eof?),
                s(:return,
                  s(:nil)), nil),
              s(:lvasgn, :s,
                s(:send, nil, :_read,
                  s(:lvar, :len)))),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :get,
                  s(:ivar, :@txtpos),
                  s(:str, "end - 1 char"))),
              s(:send,
                s(:ivar, :@txtpos), :set,
                s(:str, "end - 1 char")),
              s(:send, nil, :_see_pos))),
          s(:if,
            s(:send,
              s(:lvar, :buf), :kind_of?,
              s(:const, nil, :String)),
            s(:send,
              s(:lvar, :buf), :replace,
              s(:lvar, :s)), nil),
          s(:lvar, :s))),
      s(:def, :readchar,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_read,
                s(:int, 1))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send, nil, :eof?),
            s(:send, nil, :fail,
              s(:const, nil, :EOFError)), nil),
          s(:lvasgn, :c,
            s(:send, nil, :get,
              s(:ivar, :@txtpos))),
          s(:send,
            s(:ivar, :@txtpos), :set,
            s(:send,
              s(:ivar, :@txtpos), :+,
              s(:str, "1 char"))),
          s(:send, nil, :_see_pos),
          s(:lvar, :c))),
      s(:def, :_readline,
        s(:args,
          s(:optarg, :rs,
            s(:gvar, :$/))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :rs), :==,
              s(:nil)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :get,
                  s(:ivar, :@txtpos),
                  s(:str, "end - 1 char"))),
              s(:send,
                s(:ivar, :@txtpos), :set,
                s(:str, "end - 1 char"))),
            s(:if,
              s(:send,
                s(:lvar, :rs), :==,
                s(:str, "")),
              s(:begin,
                s(:send,
                  s(:ivar, :@count_var), :value),
                s(:lvasgn, :idx,
                  s(:send, nil, :tksearch_with_count,
                    s(:array,
                      s(:sym, :regexp)),
                    s(:ivar, :@count_var),
                    s(:str, "\n(\n)+"),
                    s(:ivar, :@txtpos),
                    s(:str, "end - 1 char"))),
                s(:if,
                  s(:lvar, :idx),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:send, nil, :get,
                          s(:ivar, :@txtpos),
                          s(:lvar, :idx)), :<<,
                        s(:str, "\n"))),
                    s(:send,
                      s(:ivar, :@txtpos), :set,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :idx)),
                        s(:str, " + "),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@count_var), :value)),
                        s(:str, " char"))),
                    s(:if,
                      s(:send, nil, :compare,
                        s(:ivar, :@txtpos),
                        s(:str, ">="),
                        s(:sym, :end)),
                      s(:send,
                        s(:ivar, :@txtpos), :set,
                        s(:str, "end - 1 char")), nil)),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send, nil, :get,
                        s(:ivar, :@txtpos),
                        s(:str, "end - 1 char"))),
                    s(:send,
                      s(:ivar, :@txtpos), :set,
                      s(:str, "end - 1 char"))))),
              s(:begin,
                s(:send,
                  s(:ivar, :@count_var), :value),
                s(:lvasgn, :idx,
                  s(:send, nil, :tksearch_with_count,
                    s(:ivar, :@count_var),
                    s(:lvar, :rs),
                    s(:ivar, :@txtpos),
                    s(:str, "end - 1 char"))),
                s(:if,
                  s(:lvar, :idx),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send, nil, :get,
                        s(:ivar, :@txtpos),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :idx)),
                          s(:str, " + "),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@count_var), :value)),
                          s(:str, " char")))),
                    s(:send,
                      s(:ivar, :@txtpos), :set,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :idx)),
                        s(:str, " + "),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@count_var), :value)),
                        s(:str, " char"))),
                    s(:if,
                      s(:send, nil, :compare,
                        s(:ivar, :@txtpos),
                        s(:str, ">="),
                        s(:sym, :end)),
                      s(:send,
                        s(:ivar, :@txtpos), :set,
                        s(:str, "end - 1 char")), nil)),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send, nil, :get,
                        s(:ivar, :@txtpos),
                        s(:str, "end - 1 char"))),
                    s(:send,
                      s(:ivar, :@txtpos), :set,
                      s(:str, "end - 1 char"))))))),
          s(:send, nil, :_see_pos),
          s(:op_asgn,
            s(:ivasgn, :@lineno), :+,
            s(:int, 1)),
          s(:gvasgn, :$_,
            s(:lvar, :s)))),
      s(:send, nil, :private,
        s(:sym, :_readline)),
      s(:def, :readline,
        s(:args,
          s(:optarg, :rs,
            s(:gvar, :$/))),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_readline,
                s(:lvar, :rs))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send, nil, :eof?),
            s(:send, nil, :fail,
              s(:const, nil, :EOFError)), nil),
          s(:send, nil, :_readline,
            s(:lvar, :rs)))),
      s(:def, :readlines,
        s(:args,
          s(:optarg, :rs,
            s(:gvar, :$/))),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:begin,
              s(:lvasgn, :lines,
                s(:array)),
              s(:while,
                s(:begin,
                  s(:lvasgn, :line,
                    s(:send, nil, :_block_readline,
                      s(:lvar, :rs)))),
                s(:send,
                  s(:lvar, :lines), :<<,
                  s(:lvar, :line))),
              s(:return,
                s(:lvar, :lines))), nil),
          s(:send, nil, :_check_readable),
          s(:lvasgn, :lines,
            s(:array)),
          s(:until,
            s(:begin,
              s(:send, nil, :eof?)),
            s(:send,
              s(:lvar, :lines), :<<,
              s(:send, nil, :_readline,
                s(:lvar, :rs)))),
          s(:gvasgn, :$_,
            s(:nil)),
          s(:lvar, :lines))),
      s(:def, :readpartial,
        s(:args,
          s(:arg, :maxlen),
          s(:optarg, :buf,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_read,
                s(:lvar, :maxlen),
                s(:lvar, :buf),
                s(:nil))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send, nil, :eof?),
            s(:send, nil, :fail,
              s(:const, nil, :EOFError)), nil),
          s(:lvasgn, :s,
            s(:send, nil, :_read,
              s(:lvar, :maxlen))),
          s(:if,
            s(:send,
              s(:lvar, :buf), :kind_of?,
              s(:const, nil, :String)),
            s(:send,
              s(:lvar, :buf), :replace,
              s(:lvar, :s)), nil),
          s(:lvar, :s))),
      s(:def, :reopen,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :NotImplementedError),
          s(:str, "reopen is not implemented on TkTextIO"))),
      s(:def, :rewind,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@txtpos), :set,
            s(:str, "1.0")),
          s(:send, nil, :_see_pos),
          s(:ivasgn, :@lineno,
            s(:int, 0)),
          s(:ivasgn, :@line_offset,
            s(:int, 0)),
          s(:self))),
      s(:def, :seek,
        s(:args,
          s(:arg, :offset),
          s(:optarg, :whence,
            s(:const,
              s(:const, nil, :IO), :SEEK_SET))),
        s(:begin,
          s(:case,
            s(:lvar, :whence),
            s(:when,
              s(:const,
                s(:const, nil, :IO), :SEEK_SET),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :offset), :kind_of?,
                    s(:const, nil, :Numeric)),
                  s(:lvasgn, :offset,
                    s(:dstr,
                      s(:str, "1.0 + "),
                      s(:begin,
                        s(:lvar, :offset)),
                      s(:str, " char"))), nil),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:lvar, :offset)))),
            s(:when,
              s(:const,
                s(:const, nil, :IO), :SEEK_CUR),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :offset), :kind_of?,
                    s(:const, nil, :Numeric)),
                  s(:lvasgn, :offset,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :offset)),
                      s(:str, " char"))), nil),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:send,
                    s(:ivar, :@txtpos), :+,
                    s(:lvar, :offset))))),
            s(:when,
              s(:const,
                s(:const, nil, :IO), :SEEK_END),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :offset), :kind_of?,
                    s(:const, nil, :Numeric)),
                  s(:lvasgn, :offset,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :offset)),
                      s(:str, " char"))), nil),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:dstr,
                    s(:str, "end - 1 char + "),
                    s(:begin,
                      s(:lvar, :offset)))))),
            s(:send, nil, :fail,
              s(:const,
                s(:const, nil, :Errno), :EINVAL),
              s(:str, "invalid whence argument"))),
          s(:if,
            s(:send, nil, :compare,
              s(:ivar, :@txtpos),
              s(:str, ">="),
              s(:sym, :end)),
            s(:send,
              s(:ivar, :@txtpos), :set,
              s(:str, "end - 1 char")), nil),
          s(:send, nil, :_see_pos),
          s(:int, 0))),
      s(:alias,
        s(:sym, :sysseek),
        s(:sym, :seek)),
      s(:def, :_see_pos,
        s(:args),
        s(:if,
          s(:ivar, :@show),
          s(:send, nil, :see,
            s(:ivar, :@show)), nil)),
      s(:send, nil, :private,
        s(:sym, :_see_pos)),
      s(:def, :show_mode,
        s(:args),
        s(:if,
          s(:begin,
            s(:send,
              s(:ivar, :@show), :==,
              s(:ivar, :@txtpos))),
          s(:sym, :pos),
          s(:ivar, :@show))),
      s(:def, :show_mode=,
        s(:args,
          s(:arg, :mode)),
        s(:begin,
          s(:case,
            s(:lvar, :mode),
            s(:when,
              s(:sym, :pos),
              s(:str, "pos"),
              s(:true),
              s(:ivasgn, :@show,
                s(:ivar, :@txtpos))),
            s(:when,
              s(:sym, :insert),
              s(:str, "insert"),
              s(:ivasgn, :@show,
                s(:sym, :insert))),
            s(:when,
              s(:nil),
              s(:false),
              s(:ivasgn, :@show,
                s(:false))),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :index,
                    s(:lvar, :mode)),
                  s(:resbody, nil, nil,
                    s(:send, nil, :fail,
                      s(:const, nil, :ArgumentError),
                      s(:str, "invalid show-position"))), nil)),
              s(:ivasgn, :@show,
                s(:lvar, :mode)))),
          s(:send, nil, :_see_pos),
          s(:lvar, :mode))),
      s(:def, :stat,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :NotImplementedError),
          s(:str, "stat is not implemented on TkTextIO"))),
      s(:def, :sync,
        s(:args),
        s(:ivar, :@sync)),
      s(:def, :sync=,
        s(:args,
          s(:arg, :mode)),
        s(:ivasgn, :@sync,
          s(:lvar, :mode))),
      s(:def, :sysread,
        s(:args,
          s(:arg, :len),
          s(:optarg, :buf,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:return,
              s(:send, nil, :_block_read,
                s(:lvar, :len),
                s(:lvar, :buf))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send, nil, :eof?),
            s(:send, nil, :fail,
              s(:const, nil, :EOFError)), nil),
          s(:lvasgn, :s,
            s(:send, nil, :_read,
              s(:lvar, :len))),
          s(:if,
            s(:send,
              s(:lvar, :buf), :kind_of?,
              s(:const, nil, :String)),
            s(:send,
              s(:lvar, :buf), :replace,
              s(:lvar, :s)), nil),
          s(:lvar, :s))),
      s(:def, :syswrite,
        s(:args,
          s(:arg, :obj)),
        s(:send, nil, :_write,
          s(:lvar, :obj))),
      s(:def, :to_io,
        s(:args),
        s(:self)),
      s(:def, :trancate,
        s(:args,
          s(:arg, :len)),
        s(:begin,
          s(:send, nil, :delete,
            s(:dstr,
              s(:str, "1.0 + "),
              s(:begin,
                s(:lvar, :len)),
              s(:str, " char")),
            s(:sym, :end)),
          s(:int, 0))),
      s(:def, :ungetc,
        s(:args,
          s(:arg, :c)),
        s(:begin,
          s(:if,
            s(:ivar, :@console_mode),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@read_buf_mutex), :synchronize),
                s(:args),
                s(:send,
                  s(:ivar, :@read_buffer), :[]=,
                  s(:int, 0),
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :c), :chr))),
              s(:return,
                s(:nil))), nil),
          s(:send, nil, :_check_readable),
          s(:if,
            s(:send,
              s(:lvar, :c), :kind_of?,
              s(:const, nil, :Fixnum)),
            s(:lvasgn, :c,
              s(:send,
                s(:lvar, :c), :chr)), nil),
          s(:if,
            s(:send, nil, :compare,
              s(:ivar, :@txtpos),
              s(:str, ">"),
              s(:str, "1.0")),
            s(:begin,
              s(:send,
                s(:ivar, :@txtpos), :set,
                s(:send,
                  s(:ivar, :@txtpos), :-,
                  s(:str, "1 char"))),
              s(:send, nil, :delete,
                s(:ivar, :@txtpos)),
              s(:send, nil, :insert,
                s(:ivar, :@txtpos),
                s(:send, nil, :tk_call,
                  s(:str, "string"),
                  s(:str, "range"),
                  s(:lvar, :c),
                  s(:int, 0),
                  s(:int, 1))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@txtpos), :gravity), :==,
                  s(:str, "right")),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:send,
                    s(:ivar, :@txtpos), :-,
                    s(:str, "1 char"))), nil),
              s(:send, nil, :_see_pos)),
            s(:send, nil, :fail,
              s(:const, nil, :IOError),
              s(:str, "cannot ungetc at head of stream"))),
          s(:nil))),
      s(:def, :_sync_write_buf,
        s(:args,
          s(:arg, :s)),
        s(:begin,
          s(:if,
            s(:send,
              s(:begin,
                s(:lvasgn, :n,
                  s(:send, nil, :number,
                    s(:send, nil, :tk_call,
                      s(:str, "string"),
                      s(:str, "length"),
                      s(:lvar, :s))))), :>,
              s(:int, 0)),
            s(:begin,
              s(:if,
                s(:ivar, :@overwrite),
                s(:send, nil, :delete,
                  s(:ivar, :@txtpos),
                  s(:send,
                    s(:ivar, :@txtpos), :+,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :n)),
                      s(:str, " char")))), nil),
              s(:send,
                s(:self), :insert,
                s(:ivar, :@txtpos),
                s(:lvar, :s)),
              s(:send,
                s(:ivar, :@txtpos), :set,
                s(:send,
                  s(:ivar, :@txtpos), :+,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, " char")))),
              s(:if,
                s(:send, nil, :compare,
                  s(:ivar, :@txtpos),
                  s(:str, ">="),
                  s(:sym, :end)),
                s(:send,
                  s(:ivar, :@txtpos), :set,
                  s(:str, "end - 1 char")), nil),
              s(:if,
                s(:send, nil, :compare,
                  s(:ivar, :@txtpos),
                  s(:str, ">"),
                  s(:ivar, :@ins_head)),
                s(:send,
                  s(:ivar, :@ins_head), :set,
                  s(:ivar, :@txtpos)), nil),
              s(:send, nil, :_see_pos)), nil),
          s(:self))),
      s(:send, nil, :private,
        s(:sym, :_sync_write_buf)),
      s(:def, :_write,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:lvasgn, :s,
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :obj), :kind_of?,
                  s(:const, nil, :String))),
              s(:lvar, :obj),
              s(:send,
                s(:lvar, :obj), :to_s))),
          s(:lvasgn, :n,
            s(:send, nil, :number,
              s(:send, nil, :tk_call,
                s(:str, "string"),
                s(:str, "length"),
                s(:lvar, :s)))),
          s(:send,
            s(:ivar, :@write_buf_queue), :enq,
            s(:lvar, :s)),
          s(:if,
            s(:ivar, :@sync),
            s(:begin,
              s(:send,
                s(:const, nil, :Thread), :pass),
              s(:send,
                s(:const, nil, :Tk), :update)), nil),
          s(:lvar, :n))),
      s(:send, nil, :private,
        s(:sym, :_write)),
      s(:def, :write,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:send, nil, :_check_writable),
          s(:send, nil, :_write,
            s(:lvar, :obj)))))),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:begin,
      s(:lvasgn, :ev_loop,
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :new),
          s(:args),
          s(:send,
            s(:const, nil, :Tk), :mainloop))),
      s(:lvasgn, :f,
        s(:send,
          s(:send,
            s(:const, nil, :TkFrame), :new), :pack)),
      s(:lvasgn, :tio,
        s(:block,
          s(:send,
            s(:const, nil, :TkTextIO), :new,
            s(:lvar, :f),
            s(:hash,
              s(:pair,
                s(:sym, :show),
                s(:sym, :insert)),
              s(:pair,
                s(:sym, :text),
                s(:str, ">>> This is an initial text line. <<<\n\n")))),
          s(:args),
          s(:send, nil, :pack,
            s(:hash,
              s(:pair,
                s(:sym, :side),
                s(:sym, :left)),
              s(:pair,
                s(:sym, :fill),
                s(:sym, :both)),
              s(:pair,
                s(:sym, :expand),
                s(:true)))))),
      s(:send,
        s(:const, nil, :Tk), :update),
      s(:gvasgn, :$stdin,
        s(:lvar, :tio)),
      s(:gvasgn, :$stdout,
        s(:lvar, :tio)),
      s(:gvasgn, :$stderr,
        s(:lvar, :tio)),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n========= TkTextIO#gets for initial text ========\n\n")),
      s(:while,
        s(:begin,
          s(:lvasgn, :s,
            s(:send, nil, :gets))),
        s(:send,
          s(:const, nil, :STDOUT), :print,
          s(:lvar, :s))),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n============ put strings to TkTextIO ===========\n\n")),
      s(:send, nil, :puts,
        s(:str, "On this sample, a text widget works as if it is a I/O stream.")),
      s(:send, nil, :puts,
        s(:str, "Please see the code.")),
      s(:send, nil, :puts),
      s(:send, nil, :printf,
        s(:str, "printf message: %d %X\n"),
        s(:int, 123456),
        s(:int, 255)),
      s(:send, nil, :puts),
      s(:send, nil, :printf,
        s(:str, "(output by 'p' method) This TkTextIO object is ...\n")),
      s(:send, nil, :p,
        s(:lvar, :tio)),
      s(:send, nil, :print,
        s(:str, " [ Current wrap mode of this object is 'char'. ]\n")),
      s(:send, nil, :puts),
      s(:send, nil, :warn,
        s(:str, "This is a warning message generated by 'warn' method.")),
      s(:send, nil, :puts),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "current show_mode is "),
          s(:begin,
            s(:send,
              s(:lvar, :tio), :show_mode)),
          s(:str, "."))),
      s(:if,
        s(:send,
          s(:send,
            s(:lvar, :tio), :show_mode), :==,
          s(:sym, :pos)),
        s(:send, nil, :puts,
          s(:str, "So, you can see the current file position on this text widget.")),
        s(:send, nil, :puts,
          s(:dstr,
            s(:str, "So, you can see the position '"),
            s(:begin,
              s(:send,
                s(:lvar, :tio), :show_mode)),
            s(:str, "' on this text widget.")))),
      s(:send, nil, :print,
        s(:str, "Please scroll up this text widget to see the head of lines.\n")),
      s(:send, nil, :print,
        s(:str, "---------------------------------------------------------\n")),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n=============== TkTextIO#readlines =============\n\n")),
      s(:send,
        s(:lvar, :tio), :seek,
        s(:int, 0)),
      s(:lvasgn, :lines,
        s(:send, nil, :readlines)),
      s(:send,
        s(:const, nil, :STDOUT), :puts,
        s(:send,
          s(:lvar, :lines), :inspect)),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n================== TkTextIO#each ===============\n\n")),
      s(:send,
        s(:lvar, :tio), :rewind),
      s(:block,
        s(:send,
          s(:lvar, :tio), :each),
        s(:args,
          s(:arg, :line)),
        s(:send,
          s(:const, nil, :STDOUT), :printf,
          s(:str, "%2d: %s\n"),
          s(:send,
            s(:lvar, :tio), :lineno),
          s(:send,
            s(:lvar, :line), :chomp))),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n================================================\n\n")),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n========= reverse order (seek by lines) ========\n\n")),
      s(:send,
        s(:lvar, :tio), :seek,
        s(:int, -1),
        s(:const,
          s(:const, nil, :IO), :SEEK_END)),
      s(:while_post,
        s(:begin,
          s(:send,
            s(:send,
              s(:lvar, :tio), :pos), :>,
            s(:int, 0))),
        s(:kwbegin,
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :tio), :seek,
                s(:sym, :linestart),
                s(:const,
                  s(:const, nil, :IO), :SEEK_CUR)),
              s(:resbody, nil, nil,
                s(:send,
                  s(:lvar, :tio), :seek,
                  s(:str, "0 char linestart"),
                  s(:const,
                    s(:const, nil, :IO), :SEEK_CUR))), nil)),
          s(:send,
            s(:const, nil, :STDOUT), :print,
            s(:send, nil, :gets)),
          s(:send,
            s(:lvar, :tio), :seek,
            s(:str, "-1 char linestart -1 char"),
            s(:const,
              s(:const, nil, :IO), :SEEK_CUR)))),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:str, "\n================================================\n\n")),
      s(:send,
        s(:lvar, :tio), :seek,
        s(:int, 0),
        s(:const,
          s(:const, nil, :IO), :SEEK_END)),
      s(:send,
        s(:const, nil, :STDOUT), :print,
        s(:dstr,
          s(:str, "tio.sync ==  "),
          s(:begin,
            s(:send,
              s(:lvar, :tio), :sync)),
          s(:str, "\n"))),
      s(:block,
        s(:send,
          s(:begin,
            s(:irange,
              s(:int, 0),
              s(:int, 10))), :each),
        s(:args,
          s(:arg, :i)),
        s(:begin,
          s(:send,
            s(:const, nil, :STDOUT), :print,
            s(:dstr,
              s(:begin,
                s(:lvar, :i)),
              s(:str, "\n"))),
          s(:lvasgn, :s,
            s(:str, "")),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1000))), :each),
            s(:args),
            s(:send,
              s(:lvar, :s), :<<,
              s(:str, "*"))),
          s(:send, nil, :print,
            s(:lvar, :s)))),
      s(:send, nil, :print,
        s(:str, "\n")),
      s(:send, nil, :print,
        s(:str, "\n=========================================================\n\n")),
      s(:lvasgn, :s,
        s(:str, "")),
      s(:lvasgn, :timer,
        s(:send,
          s(:send,
            s(:const, nil, :TkTimer), :new,
            s(:sym, :idle),
            s(:int, -1),
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:if,
                s(:send,
                  s(:lvar, :s), :empty?), nil,
                s(:begin,
                  s(:send, nil, :print,
                    s(:lvar, :s)),
                  s(:lvasgn, :s,
                    s(:str, "")))))), :start)),
      s(:block,
        s(:send,
          s(:begin,
            s(:irange,
              s(:int, 0),
              s(:int, 10))), :each),
        s(:args,
          s(:arg, :i)),
        s(:begin,
          s(:send,
            s(:const, nil, :STDOUT), :print,
            s(:dstr,
              s(:begin,
                s(:lvar, :i)),
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1000))), :each),
            s(:args),
            s(:send,
              s(:lvar, :s), :<<,
              s(:str, "*"))))),
      s(:until,
        s(:send,
          s(:lvar, :s), :empty?),
        s(:send, nil, :sleep,
          s(:float, 0.1))),
      s(:send,
        s(:lvar, :timer), :stop),
      s(:lvasgn, :num,
        s(:int, 0)),
      s(:lvasgn, :io,
        s(:send,
          s(:send,
            s(:const, nil, :TkTextIO), :new,
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:sym, :console)),
              s(:pair,
                s(:sym, :prompt_cmd),
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:dstr,
                        s(:str, "["),
                        s(:begin,
                          s(:lvar, :num)),
                        s(:str, "]"))),
                    s(:op_asgn,
                      s(:lvasgn, :num), :+,
                      s(:int, 1)),
                    s(:lvar, :s)))),
              s(:pair,
                s(:sym, :prompt),
                s(:str, "-> ")))), :pack)),
      s(:block,
        s(:send,
          s(:const, nil, :Thread), :new),
        s(:args),
        s(:block,
          s(:send, nil, :loop),
          s(:args),
          s(:begin,
            s(:send, nil, :sleep,
              s(:int, 2)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "hoge"))))),
      s(:block,
        s(:send,
          s(:const, nil, :Thread), :new),
        s(:args),
        s(:block,
          s(:send, nil, :loop),
          s(:args),
          s(:send, nil, :p,
            s(:send,
              s(:lvar, :io), :gets)))),
      s(:send,
        s(:lvar, :ev_loop), :join)), nil))
