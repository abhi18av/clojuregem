s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:gvar, :$anilabel_demo)),
      s(:gvar, :$anilabel_demo)),
    s(:begin,
      s(:send,
        s(:gvar, :$anilabel_demo), :destroy),
      s(:gvasgn, :$anilabel_demo,
        s(:nil))), nil),
  s(:gvasgn, :$anilabel_demo,
    s(:block,
      s(:send,
        s(:const, nil, :TkToplevel), :new),
      s(:args,
        s(:arg, :w)),
      s(:begin,
        s(:send, nil, :title,
          s(:str, "Animated Label Demonstration")),
        s(:send, nil, :iconname,
          s(:str, "anilabel")),
        s(:send, nil, :positionWindow,
          s(:lvar, :w))))),
  s(:lvasgn, :base_frame,
    s(:send,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:gvar, :$anilabel_demo)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:lvasgn, :msg,
    s(:block,
      s(:send,
        s(:const, nil, :TkLabel), :new,
        s(:lvar, :base_frame)),
      s(:args),
      s(:begin,
        s(:send, nil, :font,
          s(:gvar, :$font)),
        s(:send, nil, :wraplength,
          s(:str, "4i")),
        s(:send, nil, :justify,
          s(:str, "left")),
        s(:send, nil, :text,
          s(:str, "Four animated labels are displayed below; each of the labels on the left is animated by making the text message inside it appear to scroll, and the label on the right is animated by animating the image that it displays."))))),
  s(:send,
    s(:lvar, :msg), :pack,
    s(:hash,
      s(:pair,
        s(:str, "side"),
        s(:str, "top")))),
  s(:send,
    s(:block,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:lvar, :base_frame)),
      s(:args,
        s(:arg, :frame)),
      s(:begin,
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "Dismiss")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :tmppath,
                      s(:gvar, :$anilabel_demo)),
                    s(:gvasgn, :$anilabel_demo,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :tmppath), :destroy)))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))),
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "See Code")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:send, nil, :showCode,
                    s(:str, "anilabel")))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))))), :pack,
    s(:hash,
      s(:pair,
        s(:str, "side"),
        s(:str, "bottom")),
      s(:pair,
        s(:str, "fill"),
        s(:str, "x")),
      s(:pair,
        s(:str, "pady"),
        s(:str, "2m")))),
  s(:lvasgn, :f_left,
    s(:send,
      s(:const, nil, :TkLabelFrame), :new,
      s(:lvar, :base_frame),
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "Scrolling Texts"))))),
  s(:lvasgn, :f_right,
    s(:send,
      s(:const, nil, :TkLabelFrame), :new,
      s(:lvar, :base_frame),
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "GIF Image"))))),
  s(:send,
    s(:const, nil, :Tk), :pack,
    s(:lvar, :f_left),
    s(:lvar, :f_right),
    s(:hash,
      s(:pair,
        s(:str, "side"),
        s(:str, "left")),
      s(:pair,
        s(:str, "expand"),
        s(:str, "yes")),
      s(:pair,
        s(:str, "fill"),
        s(:str, "both")),
      s(:pair,
        s(:str, "padx"),
        s(:int, 10)),
      s(:pair,
        s(:str, "pady"),
        s(:int, 10)))),
  s(:class,
    s(:const, nil, :AnimatedTextLabel),
    s(:const, nil, :TkLabel),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@timer,
            s(:block,
              s(:send,
                s(:const, nil, :TkTimer), :new),
              s(:args),
              s(:send, nil, :_animation_callback))),
          s(:send,
            s(:ivar, :@timer), :loop_exec=,
            s(:int, -1)),
          s(:ivasgn, :@btag,
            s(:block,
              s(:send,
                s(:const, nil, :TkBindTag), :new,
                s(:str, "Destroy")),
              s(:args),
              s(:send,
                s(:ivar, :@timer), :stop))),
          s(:send,
            s(:self), :bindtags_unshift,
            s(:ivar, :@btag)))),
      s(:def, :_animation_callback,
        s(:args),
        s(:begin,
          s(:lvasgn, :txt,
            s(:send,
              s(:self), :text)),
          s(:send,
            s(:self), :text=,
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :txt), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1))), :<<,
                s(:send,
                  s(:lvar, :txt), :[],
                  s(:int, 0))))))),
      s(:send, nil, :private,
        s(:sym, :_animation_callback)),
      s(:def, :start,
        s(:args,
          s(:arg, :interval)),
        s(:begin,
          s(:send,
            s(:ivar, :@timer), :set_interval,
            s(:lvar, :interval)),
          s(:send,
            s(:ivar, :@timer), :start))),
      s(:def, :stop,
        s(:args),
        s(:send,
          s(:ivar, :@timer), :stop)))),
  s(:class,
    s(:const, nil, :AnimatedImageLabel),
    s(:const, nil, :AnimatedTextLabel),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args))),
          s(:ivasgn, :@destroy_image,
            s(:false)),
          s(:block,
            s(:send,
              s(:ivar, :@btag), :bind_append,
              s(:str, "Destroy")),
            s(:args),
            s(:if,
              s(:ivar, :@destroy_image),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:send,
                      s(:self), :image), :delete),
                  s(:resbody, nil, nil, nil), nil)), nil)))),
      s(:send, nil, :attr_accessor,
        s(:sym, :destroy_image)),
      s(:def, :_animation_callback,
        s(:args),
        s(:begin,
          s(:lvasgn, :img,
            s(:send,
              s(:self), :image)),
          s(:lvasgn, :fmt,
            s(:send,
              s(:lvar, :img), :format)),
          s(:if,
            s(:send,
              s(:lvar, :fmt), :kind_of?,
              s(:const, nil, :Array)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :fmt), :[],
                  s(:int, 1)), :kind_of?,
                s(:const, nil, :Hash)),
              s(:lvasgn, :idx,
                s(:send,
                  s(:send,
                    s(:lvar, :fmt), :[],
                    s(:int, 1)), :[],
                  s(:str, "index"))),
              s(:lvasgn, :idx,
                s(:send,
                  s(:lvar, :fmt), :[],
                  s(:int, 2)))),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :fmt), :kind_of?,
                  s(:const, nil, :String)),
                s(:send,
                  s(:lvar, :fmt), :=~,
                  s(:regexp,
                    s(:str, "GIF -index (\\d+)"),
                    s(:regopt)))),
              s(:lvasgn, :idx,
                s(:send,
                  s(:nth_ref, 1), :to_i)),
              s(:lvasgn, :idx,
                s(:int, -1)))),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :img), :format,
                s(:dstr,
                  s(:str, "GIF -index "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :idx), :+,
                      s(:int, 1))))),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:send,
                  s(:lvar, :img), :format,
                  s(:str, "GIF -index 0"))), nil)))),
      s(:send, nil, :private,
        s(:sym, :_animation_callback)))),
  s(:lvasgn, :l1,
    s(:send,
      s(:const, nil, :AnimatedTextLabel), :new,
      s(:lvar, :f_left),
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 4)),
        s(:pair,
          s(:sym, :relief),
          s(:sym, :ridge)),
        s(:pair,
          s(:sym, :font),
          s(:hash,
            s(:pair,
              s(:sym, :family),
              s(:str, "Courier")),
            s(:pair,
              s(:sym, :size),
              s(:int, 10))))))),
  s(:lvasgn, :l2,
    s(:send,
      s(:const, nil, :AnimatedTextLabel), :new,
      s(:lvar, :f_left),
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 4)),
        s(:pair,
          s(:sym, :relief),
          s(:sym, :groove)),
        s(:pair,
          s(:sym, :font),
          s(:hash,
            s(:pair,
              s(:sym, :family),
              s(:str, "Courier")),
            s(:pair,
              s(:sym, :size),
              s(:int, 10))))))),
  s(:lvasgn, :l3,
    s(:send,
      s(:const, nil, :AnimatedTextLabel), :new,
      s(:lvar, :f_left),
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 4)),
        s(:pair,
          s(:sym, :relief),
          s(:sym, :flat)),
        s(:pair,
          s(:sym, :font),
          s(:hash,
            s(:pair,
              s(:sym, :family),
              s(:str, "Courier")),
            s(:pair,
              s(:sym, :size),
              s(:int, 10)))),
        s(:pair,
          s(:sym, :width),
          s(:int, 18))))),
  s(:send,
    s(:const, nil, :Tk), :pack,
    s(:lvar, :l1),
    s(:lvar, :l2),
    s(:lvar, :l3),
    s(:hash,
      s(:pair,
        s(:sym, :side),
        s(:sym, :top)),
      s(:pair,
        s(:sym, :expand),
        s(:true)),
      s(:pair,
        s(:sym, :anchor),
        s(:sym, :w)),
      s(:pair,
        s(:sym, :padx),
        s(:int, 10)),
      s(:pair,
        s(:sym, :pady),
        s(:int, 10)))),
  s(:lvasgn, :limg,
    s(:send,
      s(:const, nil, :AnimatedImageLabel), :new,
      s(:lvar, :f_right),
      s(:hash,
        s(:pair,
          s(:sym, :borderwidth),
          s(:int, 0))))),
  s(:send,
    s(:lvar, :limg), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :side),
        s(:sym, :top)),
      s(:pair,
        s(:sym, :expand),
        s(:true)),
      s(:pair,
        s(:sym, :padx),
        s(:int, 10)),
      s(:pair,
        s(:sym, :pady),
        s(:int, 10)))),
  s(:lvasgn, :tclPowerdData,
    s(:dstr,
      s(:str, "    R0lGODlhKgBAAPQAAP//////zP//AP/MzP/Mmf/MAP+Zmf+ZZv+ZAMz//8zM\n"),
      s(:str, "    zMyZmcyZZsxmZsxmAMwzAJnMzJmZzJmZmZlmmZlmZplmM5kzM2aZzGZmzGZm\n"),
      s(:str, "    mWZmZmYzZmYzMzNmzDMzZgAzmSH+IE1hZGUgd2l0aCBHSU1QIGJ5IExARGVt\n"),
      s(:str, "    YWlsbHkuY29tACH5BAVkAAEALAAAAAAqAEAAAAX+YCCOZEkyTKM2jOm66yPP\n"),
      s(:str, "    dF03bx7YcuHIDkGBR7SZeIyhTID4FZ+4Es8nQyCe2EeUNJ0peY2s9mi7PhAM\n"),
      s(:str, "    ngEAMGRbUpvzSxskLh1J+Hkg134OdDIDEB+GHxtYMEQMTjMGEYeGFoomezaC\n"),
      s(:str, "    DZGSHFmLXTQKkh8eNQVpZ2afmDQGHaOYSoEyhhcklzVmMpuHnaZmDqiGJbg0\n"),
      s(:str, "    qFqvh6UNAwB7VA+OwydEjgujkgrPNhbTI8dFvNgEYcHcHx0lB1kX2IYeA2G6\n"),
      s(:str, "    NN0YfkXJ2BsAMuAzHB9cZMk3qoEbRzUACsRCUBK5JxsC3iMiKd8GN088SIyT\n"),
      s(:str, "    0RAFSROyeEg38caDiB/+JEgqxsODrZJ1BkT0oHKSmI0ceQxo94HDpg0qsuDk\n"),
      s(:str, "    UmRAMgu8OgwQ+uIJgUMVeGXA+IQkzEeHGvD8cIGlDXsLiRjQ+EHroQhea7xY\n"),
      s(:str, "    8IQBSgYYDi1IS+OFBCgaDMGVS3fGi5BPJpBaENdQ0EomKGD56IHwO39EXiSC\n"),
      s(:str, "    Ysgxor5+Xfgq0qByYUpiXmwuoredB2aYH4gWWda0B7SeNENpEJHC1ghi+pS4\n"),
      s(:str, "    AJpIAwWvKPBi+8YEht5EriEqpFfMlhEdkBNpx0HUhwypx5T4IB1MBg/Ws2sn\n"),
      s(:str, "    wV3MSQOkzI8fUd48Aw3dOZto71x85hHtHijYv18Gf/3GqCdDCXHNoICBobSo\n"),
      s(:str, "    IqBqJLyCoH8JPrLgdh88CKCFD0CGmAiGYPgffwceZh6FC2ohIIklnkhehTNY\n"),
      s(:str, "    4CIHHGzgwYw01ujBBhvAqKOLLq5AAk9kuSPkkKO40NB+h1gnypJIIvkBf09a\n"),
      s(:str, "    N5QIRz5p5ZJXJpmlIVhOGQA2TmIJZZhKKmmll2BqyWSXWUrZpQtpatlmk1c2\n"),
      s(:str, "    KaWRHeTZEJF8SqLDn/hhsOeQgBbqAh6DGqronxeARUIIACH5BAUeAAAALAUA\n"),
      s(:str, "    LgAFAAUAAAUM4CeKz/OV5YmqaRkCACH5BAUeAAEALAUALgAKAAUAAAUUICCK\n"),
      s(:str, "    z/OdJVCaa7p+7aOWcDvTZwgAIfkEBR4AAQAsCwAuAAkABQAABRPgA4zP95zA\n"),
      s(:str, "    eZqoWqqpyqLkZ38hACH5BAUKAAEALAcALgANAA4AAAU7ICA+jwiUJEqeKau+\n"),
      s(:str, "    r+vGaTmac63v/GP9HM7GQyx+jsgkkoRUHJ3Qx0cK/VQVTKtWwbVKn9suNunc\n"),
      s(:str, "    WkMAIfkEBQoAAAAsBwA3AAcABQAABRGgIHzk842j+Yjlt5KuO8JmCAAh+QQF\n"),
      s(:str, "    CgAAACwLADcABwAFAAAFEeAnfN9TjqP5oOWziq05lmUIACH5BAUKAAAALA8A\n"),
      s(:str, "    NwAHAAUAAAUPoPCJTymS3yiQj4qOcPmEACH5BAUKAAAALBMANwAHAAUAAAUR\n"),
      s(:str, "    oCB+z/MJX2o+I2miKimiawgAIfkEBQoAAAAsFwA3AAcABQAABRGgIHzfY47j\n"),
      s(:str, "    Q4qk+aHl+pZmCAAh+QQFCgAAACwbADcABwAFAAAFEaAgfs/zCV9qPiNJouo7\n"),
      s(:str, "    ll8IACH5BAUKAAAALB8ANwADAAUAAAUIoCB8o0iWZggAOw==\n"))),
  s(:send,
    s(:send,
      s(:lvar, :l1), :text,
      s(:str, "* Slow Animation *")), :start,
    s(:int, 300)),
  s(:send,
    s(:send,
      s(:lvar, :l2), :text,
      s(:str, "* Fast Animation *")), :start,
    s(:int, 80)),
  s(:send,
    s(:send,
      s(:lvar, :l3), :text,
      s(:str, "This is a longer scrolling text in a widget that will not show the whole message at once. ")), :start,
    s(:int, 150)),
  s(:send,
    s(:lvar, :limg), :destroy_image=,
    s(:true)),
  s(:send,
    s(:send,
      s(:lvar, :limg), :image,
      s(:send,
        s(:const, nil, :TkPhotoImage), :new,
        s(:hash,
          s(:pair,
            s(:sym, :format),
            s(:str, "GIF")),
          s(:pair,
            s(:sym, :data),
            s(:lvar, :tclPowerdData))))), :start,
    s(:int, 100)))
