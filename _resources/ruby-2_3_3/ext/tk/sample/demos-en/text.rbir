s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:gvar, :$text_demo)),
      s(:gvar, :$text_demo)),
    s(:begin,
      s(:send,
        s(:gvar, :$text_demo), :destroy),
      s(:gvasgn, :$text_demo,
        s(:nil))), nil),
  s(:gvasgn, :$text_demo,
    s(:block,
      s(:send,
        s(:const, nil, :TkToplevel), :new),
      s(:args,
        s(:arg, :w)),
      s(:begin,
        s(:send, nil, :title,
          s(:str, "Text Demonstration - Basic Facilities")),
        s(:send, nil, :iconname,
          s(:str, "text")),
        s(:send, nil, :positionWindow,
          s(:lvar, :w))))),
  s(:lvasgn, :base_frame,
    s(:send,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:gvar, :$text_demo)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:if,
    s(:begin,
      s(:send,
        s(:begin,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Tk), :TK_VERSION), :split,
                  s(:str, ".")), :collect),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:lvar, :n), :to_i)), :<=>,
            s(:array,
              s(:int, 8),
              s(:int, 4)))), :<,
        s(:int, 0))),
    s(:lvasgn, :undo_support,
      s(:false)),
    s(:lvasgn, :undo_support,
      s(:true))),
  s(:send,
    s(:block,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:lvar, :base_frame)),
      s(:args,
        s(:arg, :frame)),
      s(:begin,
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "Dismiss")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :tmppath,
                      s(:gvar, :$text_demo)),
                    s(:gvasgn, :$text_demo,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :tmppath), :destroy)))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))),
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "Show Code")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:send, nil, :showCode,
                    s(:str, "text")))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))))), :pack,
    s(:hash,
      s(:pair,
        s(:str, "side"),
        s(:str, "bottom")),
      s(:pair,
        s(:str, "fill"),
        s(:str, "x")),
      s(:pair,
        s(:str, "pady"),
        s(:str, "2m")))),
  s(:block,
    s(:send,
      s(:const, nil, :TkText), :new,
      s(:lvar, :base_frame)),
    s(:args,
      s(:arg, :t)),
    s(:begin,
      s(:send, nil, :relief,
        s(:str, "sunken")),
      s(:send, nil, :bd,
        s(:int, 2)),
      s(:send, nil, :setgrid,
        s(:int, 1)),
      s(:send, nil, :height,
        s(:int, 30)),
      s(:if,
        s(:lvar, :undo_support),
        s(:begin,
          s(:send, nil, :undo,
            s(:true)),
          s(:send, nil, :autoseparators,
            s(:true))), nil),
      s(:block,
        s(:send,
          s(:const, nil, :TkScrollbar), :new,
          s(:lvar, :base_frame)),
        s(:args,
          s(:arg, :s)),
        s(:begin,
          s(:send, nil, :pack,
            s(:hash,
              s(:pair,
                s(:str, "side"),
                s(:str, "right")),
              s(:pair,
                s(:str, "fill"),
                s(:str, "y")))),
          s(:send, nil, :command,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:restarg, :args)),
              s(:send,
                s(:lvar, :t), :yview,
                s(:splat,
                  s(:lvar, :args))))),
          s(:send,
            s(:lvar, :t), :yscrollcommand,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :first),
                s(:arg, :last)),
              s(:send,
                s(:lvar, :s), :set,
                s(:lvar, :first),
                s(:lvar, :last)))))),
      s(:send, nil, :pack,
        s(:hash,
          s(:pair,
            s(:str, "expand"),
            s(:str, "yes")),
          s(:pair,
            s(:str, "fill"),
            s(:str, "both")))),
      s(:send, nil, :insert,
        s(:str, "0.0"),
        s(:dstr,
          s(:str, "This window is a text widget.  It displays one or more lines of text\n"),
          s(:str, "and allows you to edit the text.  Here is a summary of the things you\n"),
          s(:str, "can do to a text widget:\n"),
          s(:str, "\n"),
          s(:str, "1. Scrolling. Use the scrollbar to adjust the view in the text window.\n"),
          s(:str, "\n"),
          s(:str, "2. Scanning. Press mouse button 2 in the text window and drag up or down.\n"),
          s(:str, "This will drag the text at high speed to allow you to scan its contents.\n"),
          s(:str, "\n"),
          s(:str, "3. Insert text. Press mouse button 1 to set the insertion cursor, then\n"),
          s(:str, "type text.  What you type will be added to the widget.\n"),
          s(:str, "\n"),
          s(:str, "4. Select. Press mouse button 1 and drag to select a range of characters.\n"),
          s(:str, "Once you've released the button, you can adjust the selection by pressing\n"),
          s(:str, "button 1 with the shift key down.  This will reset the end of the\n"),
          s(:str, "selection nearest the mouse cursor and you can drag that end of the\n"),
          s(:str, "selection by dragging the mouse before releasing the mouse button.\n"),
          s(:str, "You can double-click to select whole words or triple-click to select\n"),
          s(:str, "whole lines.\n"),
          s(:str, "\n"),
          s(:str, "5. Delete and replace. To delete text, select the characters you'd like\n"),
          s(:str, "to delete and type Backspace or Delete.  Alternatively, you can type new\n"),
          s(:str, "text, in which case it will replace the selected text.\n"),
          s(:str, "\n"),
          s(:str, "6. Copy the selection. To copy the selection into this window, select\n"),
          s(:str, "what you want to copy (either here or in another application), then\n"),
          s(:str, "click button 2 to copy the selection to the point of the mouse cursor.\n"),
          s(:str, "\n"),
          s(:str, "7. Edit.  Text widgets support the standard Motif editing characters\n"),
          s(:str, "plus many Emacs editing characters.  Backspace and Control-h erase the\n"),
          s(:str, "character to the left of the insertion cursor.  Delete and Control-d\n"),
          s(:str, "erase the character to the right of the insertion cursor.  Meta-backspace\n"),
          s(:str, "deletes the word to the left of the insertion cursor, and Meta-d deletes\n"),
          s(:str, "the word to the right of the insertion cursor.  Control-k deletes from\n"),
          s(:str, "the insertion cursor to the end of the line, or it deletes the newline\n"),
          s(:str, "character if that is the only thing left on the line.  Control-o opens\n"),
          s(:str, "a new line by inserting a newline character to the right of the insertion\n"),
          s(:str, "cursor.  Control-t transposes the two characters on either side of the\n"),
          s(:str, "insertion cursor. "),
          s(:begin,
            s(:if,
              s(:lvar, :undo_support),
              s(:begin,
                s(:lvasgn, :undo_text,
                  s(:str, "Control-z undoes the last editing action performed,\nand ")),
                s(:case,
                  s(:send,
                    s(:gvar, :$tk_platform), :[],
                    s(:str, "platform")),
                  s(:when,
                    s(:str, "unix"),
                    s(:str, "macintosh"),
                    s(:send,
                      s(:lvar, :undo_text), :<<,
                      s(:str, "Control-Shift-z"))),
                  s(:send,
                    s(:lvar, :undo_text), :<<,
                    s(:str, "Control-y"))),
                s(:send,
                  s(:lvar, :undo_text), :<<,
                  s(:str, "redoes undone edits."))),
              s(:str, ""))),
          s(:str, "\n"),
          s(:str, "\n"),
          s(:str, "8. Resize the window.  This widget has been configured with the \"setGrid\"\n"),
          s(:str, "option on, so that if you resize the window it will always resize to an\n"),
          s(:str, "even number of characters high and wide.  Also, if you make the window\n"),
          s(:str, "narrow you can see that long lines automatically wrap around onto\n"),
          s(:str, "additional lines so that all the information is always visible.\n"))),
      s(:send, nil, :set_insert,
        s(:str, "0.0")))))
