s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:gvar, :$textpeer_demo)),
      s(:gvar, :$textpeer_demo)),
    s(:begin,
      s(:send,
        s(:gvar, :$textpeer_demo), :destroy),
      s(:gvasgn, :$textpeer_demo,
        s(:nil))), nil),
  s(:gvasgn, :$textpeer_demo,
    s(:block,
      s(:send,
        s(:const, nil, :TkToplevel), :new),
      s(:args,
        s(:arg, :w)),
      s(:begin,
        s(:send, nil, :title,
          s(:str, "Text Wdget Peering Demonstration")),
        s(:send, nil, :iconname,
          s(:str, "textpeer")),
        s(:send, nil, :positionWindow,
          s(:lvar, :w))))),
  s(:lvasgn, :base_frame,
    s(:send,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:gvar, :$textpeer_demo)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:lvasgn, :count,
    s(:array,
      s(:int, 0))),
  s(:lvasgn, :first,
    s(:send,
      s(:const, nil, :TkText), :new,
      s(:lvar, :base_frame),
      s(:hash,
        s(:pair,
          s(:sym, :widgetname),
          s(:dstr,
            s(:str, "text"),
            s(:begin,
              s(:op_asgn,
                s(:send,
                  s(:lvar, :count), :[],
                  s(:int, 0)), :+,
                s(:int, 1)))))))),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "This is a coupled pair of text widgets; they are peers to ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "each other. They have the same underlying data model, but ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "can show different locations, have different current edit ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "locations, and have different selections. You can also ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "create additional peers of any of these text widgets using ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "the Make Peer button beside the text widget to clone, and ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "delete a particular peer widget using the Delete Peer ")),
  s(:send,
    s(:lvar, :first), :insert,
    s(:sym, :end),
    s(:str, "button.")),
  s(:send,
    s(:const, nil, :Tk), :update_idletasks),
  s(:def, :makeClone,
    s(:args,
      s(:arg, :count),
      s(:arg, :win),
      s(:arg, :txt)),
    s(:begin,
      s(:lvasgn, :cnt,
        s(:begin,
          s(:op_asgn,
            s(:send,
              s(:lvar, :count), :[],
              s(:int, 0)), :+,
            s(:int, 1)))),
      s(:lvasgn, :peer,
        s(:send,
          s(:const,
            s(:const, nil, :TkText), :Peer), :new,
          s(:lvar, :txt),
          s(:lvar, :win),
          s(:hash,
            s(:pair,
              s(:sym, :widgetname),
              s(:dstr,
                s(:str, "text"),
                s(:begin,
                  s(:lvar, :cnt))))))),
      s(:lvasgn, :sbar,
        s(:send,
          s(:const, nil, :TkScrollbar), :new,
          s(:lvar, :win),
          s(:hash,
            s(:pair,
              s(:sym, :widgetname),
              s(:dstr,
                s(:str, "sb"),
                s(:begin,
                  s(:lvar, :cnt))))))),
      s(:send,
        s(:lvar, :peer), :yscrollbar,
        s(:lvar, :sbar)),
      s(:lvasgn, :b1,
        s(:send,
          s(:const, nil, :TkButton), :new,
          s(:lvar, :win),
          s(:hash,
            s(:pair,
              s(:sym, :widgetname),
              s(:dstr,
                s(:str, "clone"),
                s(:begin,
                  s(:lvar, :cnt)))),
            s(:pair,
              s(:sym, :text),
              s(:str, "Make Peer")),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :makeClone,
                  s(:lvar, :count),
                  s(:lvar, :win),
                  s(:lvar, :peer))))))),
      s(:lvasgn, :b2,
        s(:send,
          s(:const, nil, :TkButton), :new,
          s(:lvar, :win),
          s(:hash,
            s(:pair,
              s(:sym, :widgetname),
              s(:dstr,
                s(:str, "kill"),
                s(:begin,
                  s(:lvar, :cnt)))),
            s(:pair,
              s(:sym, :text),
              s(:str, "Delete Peer")),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :killClone,
                  s(:lvar, :win),
                  s(:lvar, :cnt))))))),
      s(:lvasgn, :row,
        s(:send,
          s(:lvar, :cnt), :*,
          s(:int, 2))),
      s(:send,
        s(:const, nil, :TkGrid), :configure,
        s(:lvar, :peer),
        s(:lvar, :sbar),
        s(:lvar, :b1),
        s(:hash,
          s(:pair,
            s(:sym, :sticky),
            s(:str, "nsew")),
          s(:pair,
            s(:sym, :row),
            s(:lvar, :row)))),
      s(:send,
        s(:const, nil, :TkGrid), :configure,
        s(:str, "^"),
        s(:str, "^"),
        s(:lvar, :b2),
        s(:hash,
          s(:pair,
            s(:sym, :sticky),
            s(:str, "nsew")),
          s(:pair,
            s(:sym, :row),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :row), :+,
                s(:int, 1)))))),
      s(:send,
        s(:const, nil, :TkGrid), :configure,
        s(:lvar, :b1),
        s(:lvar, :b2),
        s(:hash,
          s(:pair,
            s(:sym, :sticky),
            s(:str, "new")))),
      s(:send,
        s(:const, nil, :TkGrid), :rowconfigure,
        s(:lvar, :win),
        s(:lvar, :b2),
        s(:hash,
          s(:pair,
            s(:sym, :weight),
            s(:int, 1)))))),
  s(:def, :killClone,
    s(:args,
      s(:arg, :win),
      s(:arg, :cnt)),
    s(:send,
      s(:const, nil, :Tk), :destroy,
      s(:dstr,
        s(:begin,
          s(:send,
            s(:lvar, :win), :path)),
        s(:str, ".text"),
        s(:begin,
          s(:lvar, :cnt))),
      s(:dstr,
        s(:begin,
          s(:send,
            s(:lvar, :win), :path)),
        s(:str, ".sb"),
        s(:begin,
          s(:lvar, :cnt))),
      s(:dstr,
        s(:begin,
          s(:send,
            s(:lvar, :win), :path)),
        s(:str, ".clone"),
        s(:begin,
          s(:lvar, :cnt))),
      s(:dstr,
        s(:begin,
          s(:send,
            s(:lvar, :win), :path)),
        s(:str, ".kill"),
        s(:begin,
          s(:lvar, :cnt))))),
  s(:send, nil, :makeClone,
    s(:lvar, :count),
    s(:lvar, :base_frame),
    s(:lvar, :first)),
  s(:send, nil, :makeClone,
    s(:lvar, :count),
    s(:lvar, :base_frame),
    s(:lvar, :first)),
  s(:send,
    s(:lvar, :first), :destroy),
  s(:block,
    s(:send,
      s(:const, nil, :TkFrame), :new,
      s(:lvar, :base_frame)),
    s(:args,
      s(:arg, :f)),
    s(:begin,
      s(:send,
        s(:send,
          s(:const, nil, :TkButton), :new,
          s(:lvar, :f),
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:str, "Dismiss")),
            s(:pair,
              s(:sym, :width),
              s(:int, 15)),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:gvar, :$textpeer_demo), :destroy),
                  s(:gvasgn, :$textpeer_demo,
                    s(:nil))))))), :pack,
        s(:hash,
          s(:pair,
            s(:sym, :side),
            s(:sym, :left)),
          s(:pair,
            s(:sym, :expand),
            s(:true)))),
      s(:send,
        s(:send,
          s(:const, nil, :TkButton), :new,
          s(:lvar, :f),
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:str, "See Code")),
            s(:pair,
              s(:sym, :width),
              s(:int, 15)),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :showCode,
                  s(:str, "textpeer")))))), :pack,
        s(:hash,
          s(:pair,
            s(:sym, :side),
            s(:sym, :left)),
          s(:pair,
            s(:sym, :expand),
            s(:true)))),
      s(:send,
        s(:const, nil, :TkGrid), :configure,
        s(:lvar, :f),
        s(:str, "-"),
        s(:str, "-"),
        s(:hash,
          s(:pair,
            s(:sym, :sticky),
            s(:str, "ew")),
          s(:pair,
            s(:sym, :row),
            s(:int, 5000)))))),
  s(:send,
    s(:const, nil, :TkGrid), :columnconfigure,
    s(:lvar, :base_frame),
    s(:int, 0),
    s(:hash,
      s(:pair,
        s(:sym, :weight),
        s(:int, 1)))))
