s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:gvar, :$tree_demo)),
      s(:gvar, :$tree_demo)),
    s(:begin,
      s(:send,
        s(:gvar, :$tree_demo), :destroy),
      s(:gvasgn, :$tree_demo,
        s(:nil))), nil),
  s(:gvasgn, :$tree_demo,
    s(:block,
      s(:send,
        s(:const, nil, :TkToplevel), :new),
      s(:args,
        s(:arg, :w)),
      s(:begin,
        s(:send, nil, :title,
          s(:str, "Directory Browser")),
        s(:send, nil, :iconname,
          s(:str, "tree")),
        s(:send, nil, :positionWindow,
          s(:lvar, :w))))),
  s(:lvasgn, :base_frame,
    s(:send,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:gvar, :$tree_demo)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:send,
    s(:send,
      s(:const,
        s(:const, nil, :Ttk), :Label), :new,
      s(:lvar, :base_frame),
      s(:hash,
        s(:pair,
          s(:sym, :font),
          s(:gvar, :$font)),
        s(:pair,
          s(:sym, :wraplength),
          s(:str, "4i")),
        s(:pair,
          s(:sym, :justify),
          s(:sym, :left)),
        s(:pair,
          s(:sym, :anchor),
          s(:str, "n")),
        s(:pair,
          s(:sym, :padding),
          s(:array,
            s(:int, 10),
            s(:int, 2),
            s(:int, 10),
            s(:int, 6))),
        s(:pair,
          s(:sym, :text),
          s(:str, "Ttk is the new Tk themed widget set. \nOne of the widgets it includes is a tree widget, \nwhich allows the user to browse a hierarchical data-set such as a filesystem. \nThe tree widget not only allows for the tree part itself, \nbut it also supports an arbitrary number of additional columns \nwhich can show additional data (in this case, the size of the files \nfound in your filesystem). \nYou can also change the width of the columns \nby dragging the boundary between them.\n")))), :pack,
    s(:hash,
      s(:pair,
        s(:sym, :fill),
        s(:sym, :x)))),
  s(:block,
    s(:send,
      s(:const,
        s(:const, nil, :Ttk), :Frame), :new,
      s(:lvar, :base_frame)),
    s(:args,
      s(:arg, :frame)),
    s(:begin,
      s(:lvasgn, :sep,
        s(:send,
          s(:const,
            s(:const, nil, :Ttk), :Separator), :new,
          s(:lvar, :frame))),
      s(:send,
        s(:const, nil, :Tk), :grid,
        s(:lvar, :sep),
        s(:hash,
          s(:pair,
            s(:sym, :columnspan),
            s(:int, 4)),
          s(:pair,
            s(:sym, :row),
            s(:int, 0)),
          s(:pair,
            s(:sym, :sticky),
            s(:str, "ew")),
          s(:pair,
            s(:sym, :pady),
            s(:int, 2)))),
      s(:send, nil, :TkGrid,
        s(:str, "x"),
        s(:send,
          s(:const,
            s(:const, nil, :Ttk), :Button), :new,
          s(:lvar, :frame),
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:str, "See Code")),
            s(:pair,
              s(:sym, :image),
              s(:send,
                s(:gvar, :$image), :[],
                s(:str, "view"))),
            s(:pair,
              s(:sym, :compound),
              s(:sym, :left)),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :showCode,
                  s(:str, "tree")))))),
        s(:send,
          s(:const,
            s(:const, nil, :Ttk), :Button), :new,
          s(:lvar, :frame),
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:str, "Dismiss")),
            s(:pair,
              s(:sym, :image),
              s(:send,
                s(:gvar, :$image), :[],
                s(:str, "delete"))),
            s(:pair,
              s(:sym, :compound),
              s(:sym, :left)),
            s(:pair,
              s(:sym, :command),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:gvar, :$tree_demo), :destroy),
                  s(:gvasgn, :$tree_demo,
                    s(:nil))))))),
        s(:hash,
          s(:pair,
            s(:sym, :padx),
            s(:int, 4)),
          s(:pair,
            s(:sym, :pady),
            s(:int, 4)))),
      s(:send, nil, :grid_columnconfigure,
        s(:int, 0),
        s(:hash,
          s(:pair,
            s(:sym, :weight),
            s(:int, 1)))),
      s(:send, nil, :pack,
        s(:hash,
          s(:pair,
            s(:sym, :side),
            s(:sym, :bottom)),
          s(:pair,
            s(:sym, :fill),
            s(:sym, :x)))))),
  s(:def, :populate_roots,
    s(:args,
      s(:arg, :tree)),
    s(:block,
      s(:send,
        s(:send,
          s(:send,
            s(:const, nil, :TkComm), :simplelist,
            s(:send,
              s(:const, nil, :Tk), :tk_call,
              s(:str, "file"),
              s(:str, "volumes"))), :sort), :each),
      s(:args,
        s(:arg, :dir)),
      s(:send, nil, :populate_tree,
        s(:lvar, :tree),
        s(:send,
          s(:lvar, :tree), :insert,
          s(:nil),
          s(:sym, :end),
          s(:hash,
            s(:pair,
              s(:sym, :text),
              s(:lvar, :dir)),
            s(:pair,
              s(:sym, :values),
              s(:array,
                s(:lvar, :dir),
                s(:str, "directory")))))))),
  s(:def, :populate_tree,
    s(:args,
      s(:arg, :tree),
      s(:arg, :node)),
    s(:begin,
      s(:if,
        s(:send,
          s(:send,
            s(:lvar, :tree), :get,
            s(:lvar, :node),
            s(:sym, :type)), :!=,
          s(:str, "directory")),
        s(:return), nil),
      s(:lvasgn, :path,
        s(:send,
          s(:lvar, :tree), :get,
          s(:lvar, :node),
          s(:sym, :fullpath))),
      s(:send,
        s(:lvar, :tree), :delete,
        s(:send,
          s(:lvar, :tree), :children,
          s(:lvar, :node))),
      s(:block,
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:dstr,
                s(:begin,
                  s(:lvar, :path)),
                s(:str, "/*"))), :sort), :each),
        s(:args,
          s(:arg, :f)),
        s(:begin,
          s(:lvasgn, :type,
            s(:rescue,
              s(:send,
                s(:const, nil, :File), :ftype,
                s(:lvar, :f)),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:lvasgn, :id,
            s(:send,
              s(:send,
                s(:lvar, :tree), :insert,
                s(:lvar, :node),
                s(:sym, :end),
                s(:hash,
                  s(:pair,
                    s(:sym, :text),
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :f))),
                  s(:pair,
                    s(:sym, :values),
                    s(:array,
                      s(:lvar, :f),
                      s(:lvar, :type))))), :id)),
          s(:if,
            s(:send,
              s(:lvar, :type), :==,
              s(:str, "directory")),
            s(:begin,
              s(:send,
                s(:lvar, :tree), :insert,
                s(:lvar, :id),
                s(:int, 0),
                s(:hash,
                  s(:pair,
                    s(:sym, :text),
                    s(:str, "dummy")))),
              s(:send,
                s(:lvar, :tree), :itemconfigure,
                s(:lvar, :id),
                s(:hash,
                  s(:pair,
                    s(:sym, :text),
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :f)))))),
            s(:if,
              s(:send,
                s(:lvar, :type), :==,
                s(:str, "file")),
              s(:begin,
                s(:lvasgn, :size,
                  s(:send,
                    s(:const, nil, :File), :size,
                    s(:lvar, :f))),
                s(:if,
                  s(:send,
                    s(:lvar, :size), :>=,
                    s(:send,
                      s(:send,
                        s(:int, 1024), :*,
                        s(:int, 1024)), :*,
                      s(:int, 1024))),
                  s(:lvasgn, :size,
                    s(:send,
                      s(:str, "%.1f GB"), :%,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :size), :to_f), :/,
                              s(:int, 1024)), :/,
                            s(:int, 1024)), :/,
                          s(:int, 1024))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :size), :>=,
                      s(:send,
                        s(:int, 1024), :*,
                        s(:int, 1024))),
                    s(:lvasgn, :size,
                      s(:send,
                        s(:str, "%.1f MB"), :%,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :size), :to_f), :/,
                              s(:int, 1024)), :/,
                            s(:int, 1024))))),
                    s(:if,
                      s(:send,
                        s(:lvar, :size), :>=,
                        s(:int, 1024)),
                      s(:lvasgn, :size,
                        s(:send,
                          s(:str, "%.1f KB"), :%,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :size), :to_f), :/,
                              s(:int, 1024))))),
                      s(:lvasgn, :size,
                        s(:send,
                          s(:str, "%.1f bytes"), :%,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :size), :to_f), :/,
                              s(:int, 1024)))))))),
                s(:send,
                  s(:lvar, :tree), :set,
                  s(:lvar, :id),
                  s(:sym, :size),
                  s(:lvar, :size))), nil)))),
      s(:send,
        s(:lvar, :tree), :set,
        s(:lvar, :node),
        s(:sym, :type),
        s(:str, "processed_directory")))),
  s(:lvasgn, :tree,
    s(:send,
      s(:const,
        s(:const, nil, :Ttk), :Treeview), :new,
      s(:lvar, :base_frame),
      s(:hash,
        s(:pair,
          s(:sym, :columns),
          s(:array,
            s(:str, "fullpath"),
            s(:str, "type"),
            s(:str, "size"))),
        s(:pair,
          s(:sym, :displaycolumns),
          s(:array,
            s(:str, "size")))))),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :Tk), :windowingsystem), :!=,
      s(:str, "aqua")),
    s(:begin,
      s(:lvasgn, :vsb,
        s(:send,
          s(:lvar, :tree), :yscrollbar,
          s(:send,
            s(:const,
              s(:const, nil, :Ttk), :Scrollbar), :new,
            s(:lvar, :base_frame)))),
      s(:lvasgn, :hsb,
        s(:send,
          s(:lvar, :tree), :xscrollbar,
          s(:send,
            s(:const,
              s(:const, nil, :Ttk), :Scrollbar), :new,
            s(:lvar, :base_frame))))),
    s(:begin,
      s(:lvasgn, :vsb,
        s(:send,
          s(:lvar, :tree), :yscrollbar,
          s(:send,
            s(:const,
              s(:const, nil, :Tk), :Scrollbar), :new,
            s(:lvar, :base_frame)))),
      s(:lvasgn, :hsb,
        s(:send,
          s(:lvar, :tree), :xscrollbar,
          s(:send,
            s(:const,
              s(:const, nil, :Tk), :Scrollbar), :new,
            s(:lvar, :base_frame)))))),
  s(:send,
    s(:lvar, :tree), :heading_configure,
    s(:str, "#0"),
    s(:hash,
      s(:pair,
        s(:sym, :text),
        s(:str, "Directory Structure")))),
  s(:send,
    s(:lvar, :tree), :heading_configure,
    s(:str, "size"),
    s(:hash,
      s(:pair,
        s(:sym, :text),
        s(:str, "File Size")))),
  s(:send,
    s(:lvar, :tree), :column_configure,
    s(:str, "size"),
    s(:hash,
      s(:pair,
        s(:sym, :stretch),
        s(:int, 0)),
      s(:pair,
        s(:sym, :width),
        s(:int, 70)))),
  s(:send, nil, :populate_roots,
    s(:lvar, :tree)),
  s(:block,
    s(:send,
      s(:lvar, :tree), :bind,
      s(:str, "<TreeviewOpen>"),
      s(:str, "%W")),
    s(:args,
      s(:arg, :w)),
    s(:send, nil, :populate_tree,
      s(:lvar, :w),
      s(:send,
        s(:lvar, :w), :focus_item))),
  s(:lvasgn, :container,
    s(:send,
      s(:send,
        s(:const,
          s(:const, nil, :Ttk), :Frame), :new,
        s(:lvar, :base_frame)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:send,
    s(:lvar, :container), :lower),
  s(:send,
    s(:const, nil, :Tk), :grid,
    s(:lvar, :tree),
    s(:lvar, :vsb),
    s(:hash,
      s(:pair,
        s(:sym, :in),
        s(:lvar, :container)),
      s(:pair,
        s(:sym, :sticky),
        s(:str, "nsew")))),
  s(:send,
    s(:const, nil, :Tk), :grid,
    s(:lvar, :hsb),
    s(:hash,
      s(:pair,
        s(:sym, :in),
        s(:lvar, :container)),
      s(:pair,
        s(:sym, :sticky),
        s(:str, "nsew")))),
  s(:send,
    s(:lvar, :container), :grid_columnconfigure,
    s(:int, 0),
    s(:hash,
      s(:pair,
        s(:sym, :weight),
        s(:int, 1)))),
  s(:send,
    s(:lvar, :container), :grid_rowconfigure,
    s(:int, 0),
    s(:hash,
      s(:pair,
        s(:sym, :weight),
        s(:int, 1)))))
