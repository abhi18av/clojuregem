s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:gvar, :$style_demo)),
      s(:gvar, :$style_demo)),
    s(:begin,
      s(:send,
        s(:gvar, :$style_demo), :destroy),
      s(:gvasgn, :$style_demo,
        s(:nil))), nil),
  s(:gvasgn, :$style_demo,
    s(:block,
      s(:send,
        s(:const, nil, :TkToplevel), :new),
      s(:args,
        s(:arg, :w)),
      s(:begin,
        s(:send, nil, :title,
          s(:str, "Text Demonstration - Display Styles")),
        s(:send, nil, :iconname,
          s(:str, "style")),
        s(:send, nil, :positionWindow,
          s(:lvar, :w))))),
  s(:lvasgn, :base_frame,
    s(:send,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:gvar, :$style_demo)), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :both)),
        s(:pair,
          s(:sym, :expand),
          s(:true))))),
  s(:send,
    s(:block,
      s(:send,
        s(:const, nil, :TkFrame), :new,
        s(:lvar, :base_frame)),
      s(:args,
        s(:arg, :frame)),
      s(:begin,
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "Dismiss")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :tmppath,
                      s(:gvar, :$style_demo)),
                    s(:gvasgn, :$style_demo,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :tmppath), :destroy)))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))),
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :TkButton), :new,
              s(:lvar, :frame)),
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, "Show Code")),
              s(:send, nil, :command,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:send, nil, :showCode,
                    s(:str, "style")))))), :pack,
          s(:hash,
            s(:pair,
              s(:str, "side"),
              s(:str, "left")),
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")))))), :pack,
    s(:hash,
      s(:pair,
        s(:str, "side"),
        s(:str, "bottom")),
      s(:pair,
        s(:str, "fill"),
        s(:str, "x")),
      s(:pair,
        s(:str, "pady"),
        s(:str, "2m")))),
  s(:lvasgn, :txt,
    s(:block,
      s(:send,
        s(:const, nil, :TkText), :new,
        s(:lvar, :base_frame)),
      s(:args,
        s(:arg, :t)),
      s(:begin,
        s(:send, nil, :setgrid,
          s(:str, "true")),
        s(:send, nil, :wrap,
          s(:str, "word")),
        s(:send, nil, :font,
          s(:gvar, :$font)),
        s(:block,
          s(:send,
            s(:const, nil, :TkScrollbar), :new,
            s(:lvar, :base_frame)),
          s(:args,
            s(:arg, :s)),
          s(:begin,
            s(:send, nil, :pack,
              s(:hash,
                s(:pair,
                  s(:str, "side"),
                  s(:str, "right")),
                s(:pair,
                  s(:str, "fill"),
                  s(:str, "y")))),
            s(:send, nil, :command,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:restarg, :args)),
                s(:send,
                  s(:lvar, :t), :yview,
                  s(:splat,
                    s(:lvar, :args))))),
            s(:send,
              s(:lvar, :t), :yscrollcommand,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :first),
                  s(:arg, :last)),
                s(:send,
                  s(:lvar, :s), :set,
                  s(:lvar, :first),
                  s(:lvar, :last)))))),
        s(:send, nil, :pack,
          s(:hash,
            s(:pair,
              s(:str, "expand"),
              s(:str, "yes")),
            s(:pair,
              s(:str, "fill"),
              s(:str, "both")))),
        s(:lvasgn, :family,
          s(:str, "Courier")),
        s(:if,
          s(:send,
            s(:gvar, :$tk_version), :=~,
            s(:regexp,
              s(:str, "^4.*"),
              s(:regopt))),
          s(:begin,
            s(:lvasgn, :style_tag_bold,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-*-Courier-Bold-O-Normal--*-120-*-*-*-*-*-*"))))),
            s(:lvasgn, :style_tag_big,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-*-Courier-Bold-R-Normal--*-140-*-*-*-*-*-*")),
                  s(:pair,
                    s(:str, "kanjifont"),
                    s(:gvar, :$msg_kanji_font))))),
            s(:lvasgn, :style_tag_verybig,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-*-Helvetica-Bold-R-Normal--*-240-*-*-*-*-*-*"))))),
            s(:lvasgn, :style_tag_small,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-Adobe-Helvetica-Bold-R-Normal-*-100-*")))))),
          s(:begin,
            s(:lvasgn, :style_tag_bold,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 12),
                      s(:sym, :bold),
                      s(:sym, :italic)))))),
            s(:lvasgn, :style_tag_big,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 14),
                      s(:sym, :bold)))))),
            s(:lvasgn, :style_tag_verybig,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:str, "Helvetica"),
                      s(:int, 24),
                      s(:sym, :bold)))))),
            s(:lvasgn, :style_tag_small,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "Times 8 bold"))))))),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :TkWinfo), :depth,
                s(:gvar, :$root)), :to_i), :>,
            s(:int, 1)),
          s(:begin,
            s(:lvasgn, :style_tag_color1,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "#a0b7ce"))))),
            s(:lvasgn, :style_tag_color2,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "foreground"),
                    s(:str, "red"))))),
            s(:lvasgn, :style_tag_raised,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "raised")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1))))),
            s(:lvasgn, :style_tag_sunken,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "sunken")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1)))))),
          s(:begin,
            s(:lvasgn, :style_tag_color1,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "black")),
                  s(:pair,
                    s(:str, "foreground"),
                    s(:str, "white"))))),
            s(:lvasgn, :style_tag_color2,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "black")),
                  s(:pair,
                    s(:str, "foreground"),
                    s(:str, "white"))))),
            s(:lvasgn, :style_tag_raised,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "white")),
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "raised")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1))))),
            s(:lvasgn, :style_tag_sunken,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "background"),
                    s(:str, "white")),
                  s(:pair,
                    s(:str, "relief"),
                    s(:str, "sunken")),
                  s(:pair,
                    s(:str, "borderwidth"),
                    s(:int, 1))))))),
        s(:if,
          s(:send,
            s(:gvar, :$tk_version), :=~,
            s(:regexp,
              s(:str, "^4\\.[01]"),
              s(:regopt))),
          s(:lvasgn, :style_tag_bgstipple,
            s(:send,
              s(:const, nil, :TkTextTag), :new,
              s(:lvar, :t),
              s(:hash,
                s(:pair,
                  s(:str, "background"),
                  s(:str, "black")),
                s(:pair,
                  s(:str, "borderwidth"),
                  s(:int, 0)),
                s(:pair,
                  s(:str, "bgstipple"),
                  s(:str, "gray25"))))),
          s(:lvasgn, :style_tag_bgstipple,
            s(:send,
              s(:const, nil, :TkTextTag), :new,
              s(:lvar, :t),
              s(:hash,
                s(:pair,
                  s(:str, "background"),
                  s(:str, "black")),
                s(:pair,
                  s(:str, "borderwidth"),
                  s(:int, 0)),
                s(:pair,
                  s(:str, "bgstipple"),
                  s(:str, "gray12")))))),
        s(:lvasgn, :style_tag_fgstipple,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "fgstipple"),
                s(:str, "gray50"))))),
        s(:lvasgn, :style_tag_underline,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "underline"),
                s(:str, "on"))))),
        s(:lvasgn, :style_tag_overstrike,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "overstrike"),
                s(:str, "on"))))),
        s(:lvasgn, :style_tag_right,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "justify"),
                s(:str, "right"))))),
        s(:lvasgn, :style_tag_center,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "justify"),
                s(:str, "center"))))),
        s(:if,
          s(:send,
            s(:gvar, :$tk_version), :=~,
            s(:regexp,
              s(:str, "^4.*"),
              s(:regopt))),
          s(:begin,
            s(:lvasgn, :style_tag_super,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "4p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-Adobe-Courier-Medium-R-Normal--*-100-*-*-*-*-*-*"))))),
            s(:lvasgn, :style_tag_sub,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "-2p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:str, "-Adobe-Courier-Medium-R-Normal--*-100-*-*-*-*-*-*")))))),
          s(:begin,
            s(:lvasgn, :style_tag_super,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "4p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 10)))))),
            s(:lvasgn, :style_tag_sub,
              s(:send,
                s(:const, nil, :TkTextTag), :new,
                s(:lvar, :t),
                s(:hash,
                  s(:pair,
                    s(:str, "offset"),
                    s(:str, "-2p")),
                  s(:pair,
                    s(:str, "font"),
                    s(:array,
                      s(:lvar, :family),
                      s(:int, 10)))))))),
        s(:lvasgn, :style_tag_margins,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "lmargin1"),
                s(:str, "12m")),
              s(:pair,
                s(:str, "lmargin2"),
                s(:str, "6m")),
              s(:pair,
                s(:str, "rmargin"),
                s(:str, "10m"))))),
        s(:lvasgn, :style_tag_spacing,
          s(:send,
            s(:const, nil, :TkTextTag), :new,
            s(:lvar, :t),
            s(:hash,
              s(:pair,
                s(:str, "spacing1"),
                s(:str, "10p")),
              s(:pair,
                s(:str, "spacing2"),
                s(:str, "2p")),
              s(:pair,
                s(:str, "lmargin1"),
                s(:str, "12m")),
              s(:pair,
                s(:str, "lmargin2"),
                s(:str, "6m")),
              s(:pair,
                s(:str, "rmargin"),
                s(:str, "10m"))))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, "Text widgets like this one allow you to display information in a\n"),
            s(:str, "variety of styles.  Display styles are controlled using a mechanism\n"),
            s(:str, "called "))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "tags"),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:dstr,
            s(:str, ". Tags are just textual names that you can apply to one\n"),
            s(:str, "or more ranges of characters within a text widget.  You can configure\n"),
            s(:str, "tags with various display styles.  If you do this, then the tagged\n"),
            s(:str, "characters will be displayed with the styles you chose.  The\n"),
            s(:str, "available display styles are:\n"))),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n1. Font."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  You can choose any X font, ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "large"),
          s(:lvar, :style_tag_verybig)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " or ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "small"),
          s(:lvar, :style_tag_small)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, ".\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n2. Color."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  You can change either the ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "background"),
          s(:lvar, :style_tag_color1)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " or ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "foreground"),
          s(:lvar, :style_tag_color2)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\ncolor, or ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "both"),
          s(:lvar, :style_tag_color1),
          s(:lvar, :style_tag_color2)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, ".\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n3. Stippling."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  You can cause either the ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "background"),
          s(:lvar, :style_tag_bgstipple)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " or ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "foreground"),
          s(:lvar, :style_tag_fgstipple)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\ninformation to be drawn with a stipple fill instead of a solid fill.\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n4. Underlining."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  You can ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "underline"),
          s(:lvar, :style_tag_underline)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " ranges of text.\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n5. Overstrikes."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  You can ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "draw lines through"),
          s(:lvar, :style_tag_overstrike)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " ranges of text.\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n6. 3-D effects."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "  You can arrange for the background to be drawn\nwith a border that makes characters appear either\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "raised"),
          s(:lvar, :style_tag_raised)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " or ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "sunken"),
          s(:lvar, :style_tag_sunken)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, ".\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n7. Justification."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " You can arrange for lines to be displayed\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "left-justified,\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "right-justified, or\n"),
          s(:lvar, :style_tag_right)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "centered.\n"),
          s(:lvar, :style_tag_center)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n8. Superscripts and subscripts."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " You can control the vertical\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "position of text to generate superscript effects like 10")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "n"),
          s(:lvar, :style_tag_super)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " or\nsubscript effects like X")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "i"),
          s(:lvar, :style_tag_sub)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, ".\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n9. Margins."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " You can control the amount of extra space left")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " on\neach side of the text:\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "This paragraph is an example of the use of "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "margins.  It consists of a single line of text "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "that wraps around on the screen.  There are two "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "separate left margin values, one for the first "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "display line associated with the text line, "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "and one for the subsequent display lines, which "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "occur because of wrapping.  There is also a "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "separate specification for the right margin, "),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "which is used to choose wrap points for lines.\n"),
          s(:lvar, :style_tag_margins)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "\n10. Spacing."),
          s(:lvar, :style_tag_big)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, " You can control the spacing of lines with three\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "separate parameters.  \"Spacing1\" tells how much ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "extra space to leave\nabove a line, \"spacing3\" ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "tells how much space to leave below a line,\nand ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "if a text line wraps, \"spacing2\" tells how much ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "space to leave\nbetween the display lines that ")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "make up the text line.\n")),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "These indented paragraphs illustrate how spacing "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "can be used.  Each paragraph is actually a "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "single line in the text widget, which is "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "word-wrapped by the widget.\n"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "Spacing1 is set to 10 points for this text, "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "which results in relatively large gaps between "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "the paragraphs.  Spacing2 is set to 2 points, "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "which results in just a bit of extra space "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "within a pararaph.  Spacing3 isn't used "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "in this example.\n"),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "To see where the space is, select ranges of "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "text within these paragraphs.  The selection "),
          s(:lvar, :style_tag_spacing)),
        s(:send, nil, :insert,
          s(:str, "end"),
          s(:str, "highlight will cover the extra space."),
          s(:lvar, :style_tag_spacing))))),
  s(:send,
    s(:lvar, :txt), :width,
    s(:int, 70)),
  s(:send,
    s(:lvar, :txt), :height,
    s(:int, 32)))
