s(:begin,
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)), :!=,
      s(:str, "-d")),
    s(:if,
      s(:gvar, :$DEBUG), nil,
      s(:if,
        s(:send, nil, :fork),
        s(:send, nil, :exit), nil)),
    s(:send,
      s(:const, nil, :ARGV), :shift)),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :ARGV), :length), :==,
      s(:int, 0)),
    s(:if,
      s(:send,
        s(:const, nil, :ENV), :[],
        s(:str, "MAIL")),
      s(:gvasgn, :$spool,
        s(:send,
          s(:const, nil, :ENV), :[],
          s(:str, "MAIL"))),
      s(:gvasgn, :$spool,
        s(:send,
          s(:str, "/var/spool/mail/"), :+,
          s(:send,
            s(:const, nil, :ENV), :[],
            s(:str, "USER"))))),
    s(:gvasgn, :$spool,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)))),
  s(:send, nil, :require,
    s(:str, "parsedate")),
  s(:send, nil, :require,
    s(:str, "base64")),
  s(:send, nil, :include,
    s(:const, nil, :ParseDate)),
  s(:class,
    s(:const, nil, :Mail), nil,
    s(:begin,
      s(:defs,
        s(:const, nil, :Mail), :new,
        s(:args,
          s(:arg, :f)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :f), :kind_of?,
                s(:const, nil, :IO)), :!),
            s(:begin,
              s(:lvasgn, :f,
                s(:send, nil, :open,
                  s(:lvar, :f),
                  s(:str, "r"))),
              s(:lvasgn, :me,
                s(:zsuper)),
              s(:send,
                s(:lvar, :f), :close)),
            s(:lvasgn, :me,
              s(:zsuper))),
          s(:return,
            s(:lvar, :me)))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :f)),
        s(:begin,
          s(:ivasgn, :@header,
            s(:hash)),
          s(:ivasgn, :@body,
            s(:array)),
          s(:while,
            s(:lvasgn, :line,
              s(:send,
                s(:lvar, :f), :gets)),
            s(:begin,
              s(:send,
                s(:lvar, :line), :chop!),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^From "),
                    s(:regopt)),
                  s(:lvar, :line)),
                s(:next), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^$"),
                    s(:regopt)),
                  s(:lvar, :line)),
                s(:break), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^(\\S+):\\s*(.*)"),
                    s(:regopt)),
                  s(:lvar, :line)),
                s(:send,
                  s(:ivar, :@header), :[]=,
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:nth_ref, 1), :capitalize)),
                  s(:nth_ref, 2)),
                s(:if,
                  s(:lvar, :attr),
                  s(:begin,
                    s(:send, nil, :sub,
                      s(:regexp,
                        s(:str, "^\\s*"),
                        s(:regopt)),
                      s(:str, "")),
                    s(:op_asgn,
                      s(:send,
                        s(:ivar, :@header), :[],
                        s(:lvar, :attr)), :+,
                      s(:send,
                        s(:str, "\n"), :+,
                        s(:gvar, :$_)))), nil)))),
          s(:if,
            s(:gvar, :$_), nil,
            s(:return)),
          s(:while,
            s(:lvasgn, :line,
              s(:send,
                s(:lvar, :f), :gets)),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^From "),
                    s(:regopt)),
                  s(:lvar, :line)),
                s(:break), nil),
              s(:send,
                s(:ivar, :@body), :push,
                s(:gvar, :$_)))))),
      s(:def, :header,
        s(:args),
        s(:return,
          s(:ivar, :@header))),
      s(:def, :body,
        s(:args),
        s(:return,
          s(:ivar, :@body))))),
  s(:send, nil, :require,
    s(:str, "tkscrollbox")),
  s(:lvasgn, :my_appname,
    s(:send,
      s(:const, nil, :Tk), :appname,
      s(:str, "tkbiff"))),
  s(:gvasgn, :$top,
    s(:send,
      s(:const, nil, :TkRoot), :new)),
  s(:if,
    s(:begin,
      s(:block,
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :TkWinfo), :interps,
                s(:gvar, :$top)), :-,
              s(:array,
                s(:lvar, :my_appname)))), :find),
        s(:args,
          s(:arg, :ip)),
        s(:send,
          s(:lvar, :ip), :=~,
          s(:regexp,
            s(:str, "^tkbiff"),
            s(:regopt))))),
    s(:begin,
      s(:send,
        s(:const, nil, :STDERR), :print,
        s(:str, "Probably other 'tkbiff's are running. Bye.\n")),
      s(:send, nil, :exit)), nil),
  s(:send,
    s(:gvar, :$top), :withdraw),
  s(:gvasgn, :$list,
    s(:block,
      s(:send,
        s(:const, nil, :TkScrollbox), :new,
        s(:gvar, :$top)),
      s(:args),
      s(:begin,
        s(:send, nil, :relief,
          s(:str, "raised")),
        s(:send, nil, :width,
          s(:int, 80)),
        s(:send, nil, :height,
          s(:int, 8)),
        s(:send, nil, :setgrid,
          s(:str, "yes")),
        s(:send, nil, :pack)))),
  s(:block,
    s(:send,
      s(:const, nil, :TkButton), :new,
      s(:gvar, :$top)),
    s(:args),
    s(:begin,
      s(:send, nil, :text,
        s(:str, "Dismiss")),
      s(:send, nil, :command,
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:send,
            s(:gvar, :$top), :withdraw))),
      s(:send, nil, :pack,
        s(:hash,
          s(:pair,
            s(:str, "fill"),
            s(:str, "both")),
          s(:pair,
            s(:str, "expand"),
            s(:str, "yes")))))),
  s(:send,
    s(:gvar, :$top), :bind,
    s(:str, "Control-c"),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:send, nil, :exit))),
  s(:send,
    s(:gvar, :$top), :bind,
    s(:str, "Control-q"),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:send, nil, :exit))),
  s(:send,
    s(:gvar, :$top), :bind,
    s(:str, "space"),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:send, nil, :exit))),
  s(:gvasgn, :$spool_size,
    s(:int, 0)),
  s(:gvasgn, :$check_time,
    s(:send,
      s(:const, nil, :Time), :now)),
  s(:def, :check,
    s(:args),
    s(:begin,
      s(:gvasgn, :$check_time,
        s(:send,
          s(:const, nil, :Time), :now)),
      s(:lvasgn, :size,
        s(:send,
          s(:const, nil, :File), :size,
          s(:gvar, :$spool))),
      s(:if,
        s(:and,
          s(:lvar, :size),
          s(:send,
            s(:lvar, :size), :!=,
            s(:gvar, :$spool_size))),
        s(:begin,
          s(:gvasgn, :$spool_size,
            s(:lvar, :size)),
          s(:if,
            s(:send,
              s(:lvar, :size), :>,
              s(:int, 0)),
            s(:send, nil, :pop_up), nil)), nil),
      s(:send,
        s(:const, nil, :Tk), :after,
        s(:int, 5000),
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:send, nil, :check))))),
  s(:if,
    s(:defined?,
      s(:const, nil, :Thread)),
    s(:block,
      s(:send,
        s(:const, nil, :Thread), :start),
      s(:args),
      s(:block,
        s(:send, nil, :loop),
        s(:args),
        s(:begin,
          s(:send, nil, :sleep,
            s(:int, 600)),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :-,
                s(:gvar, :$check_time)), :>,
              s(:int, 200)),
            s(:send,
              s(:const, nil, :Tk), :after,
              s(:int, 5000),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:send, nil, :check))), nil)))), nil),
  s(:def, :pop_up,
    s(:args),
    s(:begin,
      s(:lvasgn, :outcount,
        s(:int, 0)),
      s(:send,
        s(:gvar, :$list), :delete,
        s(:int, 0),
        s(:str, "end")),
      s(:lvasgn, :f,
        s(:send, nil, :open,
          s(:gvar, :$spool),
          s(:str, "r"))),
      s(:while,
        s(:send,
          s(:send,
            s(:lvar, :f), :eof?), :!),
        s(:begin,
          s(:lvasgn, :mail,
            s(:send,
              s(:const, nil, :Mail), :new,
              s(:lvar, :f))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :date),
              s(:lvasgn, :from),
              s(:lvasgn, :subj)),
            s(:array,
              s(:send,
                s(:send,
                  s(:lvar, :mail), :header), :[],
                s(:str, "Date")),
              s(:send,
                s(:send,
                  s(:lvar, :mail), :header), :[],
                s(:str, "From")),
              s(:send,
                s(:send,
                  s(:lvar, :mail), :header), :[],
                s(:str, "Subject")))),
          s(:if,
            s(:send,
              s(:lvar, :date), :!),
            s(:next), nil),
          s(:lvasgn, :y,
            s(:lvasgn, :m,
              s(:lvasgn, :d,
                s(:int, 0)))),
          s(:if,
            s(:lvar, :date),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :y),
                s(:lvasgn, :m),
                s(:lvasgn, :d)),
              s(:send, nil, :parsedate,
                s(:lvar, :date))), nil),
          s(:if,
            s(:send,
              s(:lvar, :from), :!),
            s(:lvasgn, :from,
              s(:str, "sombody@somewhere")), nil),
          s(:if,
            s(:send,
              s(:lvar, :subj), :!),
            s(:lvasgn, :subj,
              s(:str, "(nil)")), nil),
          s(:lvasgn, :from,
            s(:send, nil, :decode_b,
              s(:lvar, :from))),
          s(:lvasgn, :subj,
            s(:send, nil, :decode_b,
              s(:lvar, :subj))),
          s(:send,
            s(:gvar, :$list), :insert,
            s(:str, "end"),
            s(:send, nil, :format,
              s(:str, "%-02d/%02d/%02d [%-28.28s] %s"),
              s(:lvar, :y),
              s(:lvar, :m),
              s(:lvar, :d),
              s(:lvar, :from),
              s(:lvar, :subj))),
          s(:op_asgn,
            s(:lvasgn, :outcount), :+,
            s(:int, 1)))),
      s(:send,
        s(:lvar, :f), :close),
      s(:if,
        s(:send,
          s(:lvar, :outcount), :==,
          s(:int, 0)),
        s(:send,
          s(:gvar, :$list), :insert,
          s(:str, "end"),
          s(:str, "You have no mail.")),
        s(:send,
          s(:gvar, :$list), :see,
          s(:str, "end"))),
      s(:send,
        s(:gvar, :$top), :deiconify),
      s(:send,
        s(:const, nil, :Tk), :after,
        s(:int, 2000),
        s(:block,
          s(:send, nil, :proc),
          s(:args),
          s(:send,
            s(:gvar, :$top), :iconify))))),
  s(:send,
    s(:gvar, :$list), :insert,
    s(:str, "end"),
    s(:str, "You have no mail.")),
  s(:send, nil, :check),
  s(:send,
    s(:const, nil, :Tk), :after,
    s(:int, 2000),
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:send,
        s(:gvar, :$top), :iconify))),
  s(:kwbegin,
    s(:rescue,
      s(:send,
        s(:const, nil, :Tk), :mainloop),
      s(:resbody, nil, nil,
        s(:xstr,
          s(:str, "echo "),
          s(:gvar, :$!),
          s(:str, " > /tmp/tkbiff"))), nil)))
