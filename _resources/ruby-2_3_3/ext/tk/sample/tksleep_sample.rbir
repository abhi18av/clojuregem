s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:lvasgn, :v,
    s(:send,
      s(:const, nil, :TkVariable), :new,
      s(:int, 0))),
  s(:lvasgn, :l,
    s(:send,
      s(:send,
        s(:const, nil, :TkLabel), :new,
        s(:hash,
          s(:pair,
            s(:sym, :textvariable),
            s(:lvar, :v)))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :pady),
          s(:array,
            s(:int, 1),
            s(:int, 10)))))),
  s(:lvasgn, :a,
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "button A :: proc{p ['AAA', v.value]}")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x)),
        s(:pair,
          s(:sym, :pady),
          s(:array,
            s(:int, 1),
            s(:int, 15))),
        s(:pair,
          s(:sym, :padx),
          s(:int, 15))))),
  s(:block,
    s(:send,
      s(:lvar, :a), :command),
    s(:args),
    s(:send, nil, :p,
      s(:array,
        s(:str, "AAA"),
        s(:send,
          s(:lvar, :v), :value)))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "Callback of the button B returns LIFO order")))), :pack),
  s(:lvasgn, :b,
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "button B :: proc{n = v.value; p ['B:start', n]; Tk.sleep(10000); p ['B:end', n]}")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x)),
        s(:pair,
          s(:sym, :pady),
          s(:array,
            s(:int, 1),
            s(:int, 15))),
        s(:pair,
          s(:sym, :padx),
          s(:int, 15))))),
  s(:block,
    s(:send,
      s(:lvar, :b), :command),
    s(:args),
    s(:begin,
      s(:lvasgn, :n,
        s(:send,
          s(:lvar, :v), :value)),
      s(:send, nil, :p,
        s(:array,
          s(:str, "B:start"),
          s(:lvar, :n))),
      s(:send,
        s(:const, nil, :Tk), :sleep,
        s(:int, 10000)),
      s(:send, nil, :p,
        s(:array,
          s(:str, "B:end"),
          s(:lvar, :n))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "Callback of the button C returns FIFO order")))), :pack),
  s(:lvasgn, :c,
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "button C :: proc{n = v.value; Thread.new{p ['C:start', n]; Tk.sleep(10000); p ['C:end', n]}}")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x)),
        s(:pair,
          s(:sym, :pady),
          s(:array,
            s(:int, 1),
            s(:int, 15))),
        s(:pair,
          s(:sym, :padx),
          s(:int, 15))))),
  s(:block,
    s(:send,
      s(:lvar, :c), :command),
    s(:args),
    s(:begin,
      s(:lvasgn, :n,
        s(:send,
          s(:lvar, :v), :value)),
      s(:block,
        s(:send,
          s(:const, nil, :Thread), :new),
        s(:args),
        s(:begin,
          s(:send, nil, :p,
            s(:array,
              s(:str, "C:start"),
              s(:lvar, :n))),
          s(:send,
            s(:const, nil, :Tk), :sleep,
            s(:int, 10000)),
          s(:send, nil, :p,
            s(:array,
              s(:str, "C:end"),
              s(:lvar, :n))))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "Callback of the button D blocks eventloop (no respond to event)")))), :pack),
  s(:lvasgn, :d,
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "button D :: proc{n = v.value; p ['D:start', n]; sleep(10); p ['D:end', n]}")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x)),
        s(:pair,
          s(:sym, :pady),
          s(:array,
            s(:int, 1),
            s(:int, 15))),
        s(:pair,
          s(:sym, :padx),
          s(:int, 15))))),
  s(:block,
    s(:send,
      s(:lvar, :d), :command),
    s(:args),
    s(:begin,
      s(:lvasgn, :n,
        s(:send,
          s(:lvar, :v), :value)),
      s(:send, nil, :p,
        s(:array,
          s(:str, "D:start"),
          s(:lvar, :n))),
      s(:send, nil, :sleep,
        s(:int, 10)),
      s(:send, nil, :p,
        s(:array,
          s(:str, "D:end"),
          s(:lvar, :n))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkLabel), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "Callback of the button E is another way to avoid eventloop blocking")))), :pack),
  s(:lvasgn, :e,
    s(:send,
      s(:send,
        s(:const, nil, :TkButton), :new,
        s(:hash,
          s(:pair,
            s(:sym, :text),
            s(:str, "button E :: proc{n = v.value; Thread.new{p ['D:start', n]; sleep(10); p ['D:end', n]}}")))), :pack,
      s(:hash,
        s(:pair,
          s(:sym, :fill),
          s(:sym, :x)),
        s(:pair,
          s(:sym, :pady),
          s(:array,
            s(:int, 1),
            s(:int, 15))),
        s(:pair,
          s(:sym, :padx),
          s(:int, 15))))),
  s(:block,
    s(:send,
      s(:lvar, :e), :command),
    s(:args),
    s(:begin,
      s(:lvasgn, :n,
        s(:send,
          s(:lvar, :v), :value)),
      s(:block,
        s(:send,
          s(:const, nil, :Thread), :new),
        s(:args),
        s(:begin,
          s(:send, nil, :p,
            s(:array,
              s(:str, "D:start"),
              s(:lvar, :n))),
          s(:send, nil, :sleep,
            s(:int, 10)),
          s(:send, nil, :p,
            s(:array,
              s(:str, "D:end"),
              s(:lvar, :n))))))),
  s(:send,
    s(:send,
      s(:const, nil, :TkButton), :new,
      s(:hash,
        s(:pair,
          s(:sym, :text),
          s(:str, "QUIT")),
        s(:pair,
          s(:sym, :command),
          s(:block,
            s(:send, nil, :proc),
            s(:args),
            s(:send, nil, :exit))))), :pack),
  s(:send,
    s(:block,
      s(:send,
        s(:const, nil, :TkTimer), :new,
        s(:int, 500),
        s(:int, -1)),
      s(:args),
      s(:op_asgn,
        s(:send,
          s(:lvar, :v), :numeric), :+,
        s(:int, 1))), :start),
  s(:send,
    s(:const, nil, :Tk), :mainloop))
