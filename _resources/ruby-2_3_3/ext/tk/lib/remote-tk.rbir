s(:begin,
  s(:if,
    s(:defined?,
      s(:const, nil, :MultiTkIp)),
    s(:send, nil, :fail,
      s(:const, nil, :RuntimeError),
      s(:str, "'remote-tk' library must be required before requiring 'multi-tk'")), nil),
  s(:class,
    s(:const, nil, :MultiTkIp), nil, nil),
  s(:class,
    s(:const, nil, :RemoteTkIp),
    s(:const, nil, :MultiTkIp), nil),
  s(:class,
    s(:const, nil, :MultiTkIp), nil,
    s(:begin,
      s(:if,
        s(:defined?,
          s(:cvar, :@@IP_TABLE)), nil,
        s(:cvasgn, :@@IP_TABLE,
          s(:send,
            s(:const, nil, :TkUtil), :untrust,
            s(:hash)))),
      s(:if,
        s(:defined?,
          s(:cvar, :@@TK_TABLE_LIST)), nil,
        s(:cvasgn, :@@TK_TABLE_LIST,
          s(:send,
            s(:const, nil, :TkUtil), :untrust,
            s(:array)))),
      s(:defs,
        s(:self), :_IP_TABLE,
        s(:args),
        s(:cvar, :@@IP_TABLE)),
      s(:defs,
        s(:self), :_TK_TABLE_LIST,
        s(:args),
        s(:cvar, :@@TK_TABLE_LIST)),
      s(:ivasgn, :@flag,
        s(:true)),
      s(:defs,
        s(:self), :_DEFAULT_MASTER,
        s(:args),
        s(:if,
          s(:ivar, :@flag),
          s(:begin,
            s(:ivasgn, :@flag,
              s(:nil)),
            s(:cvar, :@@DEFAULT_MASTER)),
          s(:nil))))),
  s(:class,
    s(:const, nil, :RemoteTkIp), nil,
    s(:begin,
      s(:if,
        s(:defined?,
          s(:cvar, :@@IP_TABLE)), nil,
        s(:cvasgn, :@@IP_TABLE,
          s(:send,
            s(:const, nil, :MultiTkIp), :_IP_TABLE))),
      s(:if,
        s(:defined?,
          s(:cvar, :@@TK_TABLE_LIST)), nil,
        s(:cvasgn, :@@TK_TABLE_LIST,
          s(:send,
            s(:const, nil, :MultiTkIp), :_TK_TABLE_LIST))))),
  s(:sclass,
    s(:const, nil, :MultiTkIp),
    s(:begin,
      s(:undef,
        s(:sym, :_IP_TABLE)),
      s(:undef,
        s(:sym, :_TK_TABLE_LIST)))),
  s(:send, nil, :require,
    s(:str, "multi-tk")),
  s(:class,
    s(:const, nil, :RemoteTkIp), nil,
    s(:if,
      s(:defined?,
        s(:cvar, :@@DEFAULT_MASTER)),
      s(:send,
        s(:const, nil, :MultiTkIp), :_DEFAULT_MASTER),
      s(:cvasgn, :@@DEFAULT_MASTER,
        s(:send,
          s(:const, nil, :MultiTkIp), :_DEFAULT_MASTER)))),
  s(:sclass,
    s(:const, nil, :RemoteTkIp),
    s(:begin,
      s(:undef,
        s(:sym, :new_master),
        s(:sym, :new_slave),
        s(:sym, :new_safe_slave)),
      s(:undef,
        s(:sym, :new_trusted_slave),
        s(:sym, :new_safeTk)),
      s(:def, :new,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :ip,
            s(:send, nil, :__new,
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:lvar, :b),
            s(:send,
              s(:lvar, :ip), :eval_proc,
              s(:block_pass,
                s(:lvar, :b))), nil),
          s(:lvar, :ip))))),
  s(:class,
    s(:const, nil, :RemoteTkIp), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :remote_ip),
          s(:optarg, :displayof,
            s(:nil)),
          s(:optarg, :timeout,
            s(:int, 5))),
        s(:begin,
          s(:ivasgn, :@interp,
            s(:send,
              s(:const, nil, :MultiTkIp), :__getip)),
          s(:if,
            s(:send,
              s(:ivar, :@interp), :safe?),
            s(:send, nil, :fail,
              s(:const, nil, :SecurityError),
              s(:str, "safe-IP cannot create RemoteTkIp")), nil),
          s(:send,
            s(:ivar, :@interp), :allow_ruby_exit=,
            s(:false)),
          s(:ivasgn, :@appname,
            s(:send,
              s(:ivar, :@interp), :_invoke,
              s(:str, "tk"),
              s(:str, "appname"))),
          s(:ivasgn, :@remote,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :remote_ip), :to_s), :dup), :freeze)),
          s(:if,
            s(:send,
              s(:lvar, :displayof), :kind_of?,
              s(:const, nil, :TkWindow)),
            s(:ivasgn, :@displayof,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :displayof), :path), :dup), :freeze)),
            s(:ivasgn, :@displayof,
              s(:nil))),
          s(:if,
            s(:send,
              s(:self), :deleted?),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:dstr,
                s(:str, "no Tk application named \""),
                s(:begin,
                  s(:ivar, :@remote)),
                s(:str, "\""))), nil),
          s(:ivasgn, :@tk_windows,
            s(:hash)),
          s(:ivasgn, :@tk_table_list,
            s(:array)),
          s(:ivasgn, :@slave_ip_tbl,
            s(:hash)),
          s(:ivasgn, :@slave_ip_top,
            s(:hash)),
          s(:or_asgn,
            s(:ivasgn, :@force_default_encoding),
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:array,
                s(:false)))),
          s(:or_asgn,
            s(:ivasgn, :@encoding),
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:array,
                s(:nil)))),
          s(:defs,
            s(:ivar, :@encoding), :to_s,
            s(:args),
            s(:send,
              s(:self), :join,
              s(:nil))),
          s(:if,
            s(:send,
              s(:ivar, :@tk_windows), :tainted?), nil,
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:ivar, :@tk_windows))),
          s(:if,
            s(:send,
              s(:ivar, :@tk_table_list), :tainted?), nil,
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:ivar, :@tk_table_list))),
          s(:if,
            s(:send,
              s(:ivar, :@slave_ip_tbl), :tainted?), nil,
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:ivar, :@slave_ip_tbl))),
          s(:if,
            s(:send,
              s(:ivar, :@slave_ip_top), :tainted?), nil,
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:ivar, :@slave_ip_top))),
          s(:ivasgn, :@system,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:ivasgn, :@threadgroup,
            s(:send,
              s(:const, nil, :ThreadGroup), :new)),
          s(:ivasgn, :@safe_level,
            s(:array,
              s(:gvar, :$SAFE))),
          s(:ivasgn, :@wait_on_mainloop,
            s(:array,
              s(:true),
              s(:int, 0))),
          s(:ivasgn, :@cmd_queue,
            s(:send,
              s(:const, nil, :Queue), :new)),
          s(:send,
            s(:cvar, :@@DEFAULT_MASTER), :assign_receiver_and_watchdog,
            s(:self)),
          s(:send,
            s(:cvar, :@@IP_TABLE), :[]=,
            s(:ivar, :@threadgroup),
            s(:self)),
          s(:block,
            s(:send,
              s(:send,
                s(:cvar, :@@TK_TABLE_LIST), :size), :times),
            s(:args),
            s(:begin,
              s(:or,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :tbl,
                      s(:hash))), :tainted?),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:lvar, :tbl))),
              s(:send,
                s(:ivar, :@tk_table_list), :<<,
                s(:lvar, :tbl)))),
          s(:ivasgn, :@ret_val,
            s(:send,
              s(:const, nil, :TkVariable), :new)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :timeout), :>,
                s(:int, 0)),
              s(:send,
                s(:send, nil, :_available_check,
                  s(:lvar, :timeout)), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "cannot create connection")), nil),
          s(:ivasgn, :@ip_id,
            s(:send, nil, :_create_connection)),
          s(:sclass,
            s(:self),
            s(:undef,
              s(:sym, :instance_eval))),
          s(:send,
            s(:self), :freeze))),
      s(:def, :manipulable?,
        s(:args),
        s(:begin,
          s(:if,
            s(:begin,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :group), :==,
                s(:const,
                  s(:const, nil, :ThreadGroup), :Default))),
            s(:return,
              s(:true)), nil),
          s(:and,
            s(:send,
              s(:send,
                s(:const, nil, :MultiTkIp), :__getip), :==,
              s(:ivar, :@interp)),
            s(:send,
              s(:send,
                s(:ivar, :@interp), :safe?), :!)))),
      s(:defs,
        s(:self), :manipulable?,
        s(:args),
        s(:true)),
      s(:def, :_is_master_of?,
        s(:args,
          s(:arg, :tcltkip_obj)),
        s(:send,
          s(:lvar, :tcltkip_obj), :==,
          s(:ivar, :@interp))),
      s(:send, nil, :protected,
        s(:sym, :_is_master_of?)),
      s(:def, :_ip_id_,
        s(:args),
        s(:ivar, :@ip_id)),
      s(:def, :_available_check,
        s(:args,
          s(:optarg, :timeout,
            s(:int, 5))),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:if,
            s(:send,
              s(:lvar, :timeout), :<,
              s(:int, 1)),
            s(:return,
              s(:nil)), nil),
          s(:send,
            s(:ivar, :@ret_val), :value=,
            s(:str, "")),
          s(:send,
            s(:ivar, :@interp), :_invoke,
            s(:str, "send"),
            s(:str, "-async"),
            s(:ivar, :@remote),
            s(:str, "send"),
            s(:str, "-async"),
            s(:send,
              s(:const, nil, :Tk), :appname),
            s(:dstr,
              s(:str, "set "),
              s(:begin,
                s(:send,
                  s(:ivar, :@ret_val), :id)),
              s(:str, " ready"))),
          s(:send,
            s(:const, nil, :Tk), :update),
          s(:if,
            s(:send,
              s(:ivar, :@ret_val), :!=,
              s(:str, "ready")),
            s(:block,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:int, 1),
                    s(:begin,
                      s(:send,
                        s(:lvar, :timeout), :*,
                        s(:int, 5))))), :each),
              s(:args),
              s(:begin,
                s(:send, nil, :sleep,
                  s(:float, 0.2)),
                s(:send,
                  s(:const, nil, :Tk), :update),
                s(:if,
                  s(:send,
                    s(:ivar, :@ret_val), :==,
                    s(:str, "ready")),
                  s(:break), nil))), nil),
          s(:send,
            s(:send,
              s(:ivar, :@ret_val), :value), :==,
            s(:str, "ready")))),
      s(:send, nil, :private,
        s(:sym, :_available_check)),
      s(:def, :_create_connection,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:lvasgn, :ip_id,
            s(:send,
              s(:send,
                s(:str, "_"), :+,
                s(:send,
                  s(:ivar, :@interp), :_invoke,
                  s(:str, "send"),
                  s(:ivar, :@remote),
                  s(:dstr,
                    s(:str, "      if {[catch {set _rubytk_control_ip_id_} ret] != 0} {\n"),
                    s(:str, "        set _rubytk_control_ip_id_ 0\n"),
                    s(:str, "      } else {\n"),
                    s(:str, "        set _rubytk_control_ip_id_ [expr $ret + 1]\n"),
                    s(:str, "      }\n"),
                    s(:str, "      return $_rubytk_control_ip_id_\n")))), :+,
              s(:str, "_"))),
          s(:send,
            s(:ivar, :@interp), :_invoke,
            s(:str, "send"),
            s(:ivar, :@remote),
            s(:dstr,
              s(:str, "      proc rb_out"),
              s(:begin,
                s(:lvar, :ip_id)),
              s(:str, " args {\n"),
              s(:str, "        send "),
              s(:begin,
                s(:ivar, :@appname)),
              s(:str, " rb_out $args\n"),
              s(:str, "      }\n"))),
          s(:lvar, :ip_id))),
      s(:send, nil, :private,
        s(:sym, :_create_connection)),
      s(:def, :_appsend,
        s(:args,
          s(:arg, :enc_mode),
          s(:arg, :async),
          s(:restarg, :cmds)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:if,
            s(:gvar, :$DEBUG),
            s(:send, nil, :p,
              s(:array,
                s(:str, "_appsend"),
                s(:array,
                  s(:ivar, :@remote),
                  s(:ivar, :@displayof)),
                s(:lvar, :enc_mode),
                s(:lvar, :async),
                s(:lvar, :cmds))), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:gvar, :$SAFE), :>=,
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :cmds), :find),
                s(:args,
                  s(:arg, :obj)),
                s(:send,
                  s(:lvar, :obj), :tainted?))),
            s(:send, nil, :fail,
              s(:const, nil, :SecurityError),
              s(:dstr,
                s(:str, "cannot send tainted commands at level "),
                s(:begin,
                  s(:gvar, :$SAFE)))), nil),
          s(:lvasgn, :cmds,
            s(:send,
              s(:ivar, :@interp), :_merge_tklist,
              s(:splat,
                s(:send,
                  s(:const, nil, :TkUtil), :_conv_args,
                  s(:array),
                  s(:lvar, :enc_mode),
                  s(:splat,
                    s(:lvar, :cmds)))))),
          s(:if,
            s(:ivar, :@displayof),
            s(:if,
              s(:lvar, :async),
              s(:send,
                s(:ivar, :@interp), :__invoke,
                s(:str, "send"),
                s(:str, "-async"),
                s(:str, "-displayof"),
                s(:ivar, :@displayof),
                s(:str, "--"),
                s(:ivar, :@remote),
                s(:splat,
                  s(:lvar, :cmds))),
              s(:send,
                s(:ivar, :@interp), :__invoke,
                s(:str, "send"),
                s(:str, "-displayof"),
                s(:ivar, :@displayof),
                s(:str, "--"),
                s(:ivar, :@remote),
                s(:splat,
                  s(:lvar, :cmds)))),
            s(:if,
              s(:lvar, :async),
              s(:send,
                s(:ivar, :@interp), :__invoke,
                s(:str, "send"),
                s(:str, "-async"),
                s(:str, "--"),
                s(:ivar, :@remote),
                s(:splat,
                  s(:lvar, :cmds))),
              s(:send,
                s(:ivar, :@interp), :__invoke,
                s(:str, "send"),
                s(:str, "--"),
                s(:ivar, :@remote),
                s(:splat,
                  s(:lvar, :cmds))))))),
      s(:send, nil, :private,
        s(:sym, :_appsend)),
      s(:def, :ready?,
        s(:args,
          s(:optarg, :timeout,
            s(:int, 5))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :timeout), :<,
              s(:int, 0)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "timeout must be positive number")), nil),
          s(:send, nil, :_available_check,
            s(:lvar, :timeout)))),
      s(:def, :is_rubytk?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :_appsend,
                s(:false),
                s(:false),
                s(:str, "info"),
                s(:str, "command"),
                s(:str, "ruby")), :==,
              s(:str, "")),
            s(:return,
              s(:false)), nil),
          s(:array,
            s(:send, nil, :_appsend,
              s(:false),
              s(:false),
              s(:str, "ruby"),
              s(:str, "RUBY_VERSION")),
            s(:send, nil, :_appsend,
              s(:false),
              s(:false),
              s(:str, "set"),
              s(:str, "tk_patchLevel"))))),
      s(:def, :appsend,
        s(:args,
          s(:arg, :async),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:true)),
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:false))),
              s(:send,
                s(:lvar, :async), :!=,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :async)),
              s(:lvasgn, :async,
                s(:false))), nil),
          s(:if,
            s(:ivar, :@displayof),
            s(:send,
              s(:const, nil, :Tk), :appsend_displayof,
              s(:ivar, :@remote),
              s(:ivar, :@displayof),
              s(:lvar, :async),
              s(:splat,
                s(:lvar, :args))),
            s(:send,
              s(:const, nil, :Tk), :appsend,
              s(:ivar, :@remote),
              s(:lvar, :async),
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :rb_appsend,
        s(:args,
          s(:arg, :async),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:true)),
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:false))),
              s(:send,
                s(:lvar, :async), :!=,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :async)),
              s(:lvasgn, :async,
                s(:false))), nil),
          s(:if,
            s(:ivar, :@displayof),
            s(:send,
              s(:const, nil, :Tk), :rb_appsend_displayof,
              s(:ivar, :@remote),
              s(:ivar, :@displayof),
              s(:lvar, :async),
              s(:splat,
                s(:lvar, :args))),
            s(:send,
              s(:const, nil, :Tk), :rb_appsend,
              s(:ivar, :@remote),
              s(:lvar, :async),
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :create_slave,
        s(:args,
          s(:arg, :name),
          s(:optarg, :safe,
            s(:false))),
        s(:begin,
          s(:if,
            s(:lvar, :safe),
            s(:lvasgn, :safe_opt,
              s(:str, "")),
            s(:lvasgn, :safe_opt,
              s(:str, "-safe"))),
          s(:send, nil, :_appsend,
            s(:false),
            s(:false),
            s(:dstr,
              s(:str, "interp create "),
              s(:begin,
                s(:lvar, :safe_opt)),
              s(:str, " -- "),
              s(:begin,
                s(:lvar, :name)))))),
      s(:def, :make_safe,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "cannot change safe mode of the remote interpreter"))),
      s(:def, :safe?,
        s(:args),
        s(:send, nil, :_appsend,
          s(:false),
          s(:false),
          s(:str, "interp issafe"))),
      s(:def, :safe_base?,
        s(:args),
        s(:false)),
      s(:def, :allow_ruby_exit?,
        s(:args),
        s(:false)),
      s(:def, :allow_ruby_exit=,
        s(:args,
          s(:arg, :mode)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "cannot change mode of the remote interpreter"))),
      s(:def, :delete,
        s(:args),
        s(:send, nil, :_appsend,
          s(:false),
          s(:true),
          s(:str, "exit"))),
      s(:def, :deleted?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:if,
            s(:ivar, :@displayof),
            s(:lvasgn, :lst,
              s(:send,
                s(:ivar, :@interp), :_invoke_without_enc,
                s(:str, "winfo"),
                s(:str, "interps"),
                s(:str, "-displayof"),
                s(:ivar, :@displayof))),
            s(:lvasgn, :lst,
              s(:send,
                s(:ivar, :@interp), :_invoke_without_enc,
                s(:str, "winfo"),
                s(:str, "interps")))),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@interp), :_split_tklist,
                s(:lvar, :lst)), :index,
              s(:send, nil, :_toUTF8,
                s(:ivar, :@remote))),
            s(:false),
            s(:true)))),
      s(:def, :has_mainwindow?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :inf,
                s(:send,
                  s(:ivar, :@interp), :_invoke_without_enc,
                  s(:str, "info"),
                  s(:str, "command"),
                  s(:str, "."))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:return,
                  s(:nil))), nil)),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :inf), :kind_of?,
                  s(:const, nil, :String)), :!),
              s(:send,
                s(:lvar, :inf), :!=,
                s(:str, "."))),
            s(:false),
            s(:true)))),
      s(:def, :invalid_namespace?,
        s(:args),
        s(:false)),
      s(:def, :restart,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "cannot restart the remote interpreter"))),
      s(:def, :__eval,
        s(:args,
          s(:arg, :str)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:false),
          s(:lvar, :str))),
      s(:def, :_eval,
        s(:args,
          s(:arg, :str)),
        s(:send, nil, :_appsend,
          s(:nil),
          s(:false),
          s(:lvar, :str))),
      s(:def, :_eval_without_enc,
        s(:args,
          s(:arg, :str)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:false),
          s(:lvar, :str))),
      s(:def, :_eval_with_enc,
        s(:args,
          s(:arg, :str)),
        s(:send, nil, :_appsend,
          s(:true),
          s(:false),
          s(:lvar, :str))),
      s(:def, :_invoke,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_appsend,
          s(:nil),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :__invoke,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_invoke,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_appsend,
          s(:nil),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_invoke_without_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_invoke_with_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_appsend,
          s(:true),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_toUTF8,
        s(:args,
          s(:arg, :str),
          s(:optarg, :encoding,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:send,
            s(:ivar, :@interp), :_toUTF8,
            s(:lvar, :str),
            s(:lvar, :encoding)))),
      s(:def, :_fromUTF8,
        s(:args,
          s(:arg, :str),
          s(:optarg, :encoding,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:send,
            s(:ivar, :@interp), :_fromUTF8,
            s(:lvar, :str),
            s(:lvar, :encoding)))),
      s(:def, :_thread_vwait,
        s(:args,
          s(:arg, :var_name)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "thread_vwait"),
          s(:send, nil, :varname))),
      s(:def, :_thread_tkwait,
        s(:args,
          s(:arg, :mode),
          s(:arg, :target)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "thread_tkwait"),
          s(:lvar, :mode),
          s(:lvar, :target))),
      s(:def, :_return_value,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:send,
            s(:ivar, :@interp), :_return_value))),
      s(:def, :_get_variable,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :flag)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :var_name)))),
      s(:def, :_get_variable2,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :index_name),
          s(:arg, :flag)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :var_name))),
            s(:str, "("),
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :index_name))),
            s(:str, ")")))),
      s(:def, :_set_variable,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :value),
          s(:arg, :flag)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :var_name)),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :value)))),
      s(:def, :_set_variable2,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :index_name),
          s(:arg, :value),
          s(:arg, :flag)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :var_name))),
            s(:str, "("),
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :index_name))),
            s(:str, ")")),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :value)))),
      s(:def, :_unset_variable,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :flag)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "unset"),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :var_name)))),
      s(:def, :_unset_variable2,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :index_name),
          s(:arg, :flag)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "unset"),
          s(:dstr,
            s(:begin,
              s(:lvar, :var_name)),
            s(:str, "("),
            s(:begin,
              s(:lvar, :index_name)),
            s(:str, ")")))),
      s(:def, :_get_global_var,
        s(:args,
          s(:arg, :var_name)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :var_name)))),
      s(:def, :_get_global_var2,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :index_name)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :var_name))),
            s(:str, "("),
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :index_name))),
            s(:str, ")")))),
      s(:def, :_set_global_var,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :value)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :var_name)),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :value)))),
      s(:def, :_set_global_var2,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :index_name),
          s(:arg, :value)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "set"),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :var_name))),
            s(:str, "("),
            s(:begin,
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :index_name))),
            s(:str, ")")),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :value)))),
      s(:def, :_unset_global_var,
        s(:args,
          s(:arg, :var_name)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "unset"),
          s(:send,
            s(:const, nil, :TkComm), :_get_eval_string,
            s(:lvar, :var_name)))),
      s(:def, :_unset_global_var2,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :index_name)),
        s(:send, nil, :_appsend,
          s(:false),
          s(:str, "unset"),
          s(:dstr,
            s(:begin,
              s(:lvar, :var_name)),
            s(:str, "("),
            s(:begin,
              s(:lvar, :index_name)),
            s(:str, ")")))),
      s(:def, :_split_tklist,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:send,
            s(:ivar, :@interp), :_split_tklist,
            s(:lvar, :str)))),
      s(:def, :_merge_tklist,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:send,
            s(:ivar, :@interp), :_merge_tklist,
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :_conv_listelement,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :manipulable?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :SecurityError),
              s(:str, "no permission to manipulate"))),
          s(:send,
            s(:ivar, :@interp), :_conv_listelement,
            s(:lvar, :str)))),
      s(:def, :_create_console,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"_create_console\" on the remote interpreter"))),
      s(:def, :mainloop,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop\" on the remote interpreter"))),
      s(:def, :mainloop_watchdog,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop_watchdog\" on the remote interpreter"))),
      s(:def, :do_one_event,
        s(:args,
          s(:optarg, :flag,
            s(:nil))),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"do_one_event\" on the remote interpreter"))),
      s(:def, :mainloop_abort_on_exception,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop_abort_on_exception\" on the remote interpreter"))),
      s(:def, :mainloop_abort_on_exception=,
        s(:args,
          s(:arg, :mode)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop_abort_on_exception=\" on the remote interpreter"))),
      s(:def, :set_eventloop_tick,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"set_eventloop_tick\" on the remote interpreter"))),
      s(:def, :get_eventloop_tick,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"get_eventloop_tick\" on the remote interpreter"))),
      s(:def, :set_no_event_wait,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"set_no_event_wait\" on the remote interpreter"))),
      s(:def, :get_no_event_wait,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"get_no_event_wait\" on the remote interpreter"))),
      s(:def, :set_eventloop_weight,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"set_eventloop_weight\" on the remote interpreter"))),
      s(:def, :get_eventloop_weight,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"get_eventloop_weight\" on the remote interpreter"))))),
  s(:sclass,
    s(:const, nil, :RemoteTkIp),
    s(:begin,
      s(:def, :mainloop,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop\" on the remote interpreter"))),
      s(:def, :mainloop_watchdog,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop_watchdog\" on the remote interpreter"))),
      s(:def, :do_one_event,
        s(:args,
          s(:optarg, :flag,
            s(:nil))),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"do_one_event\" on the remote interpreter"))),
      s(:def, :mainloop_abort_on_exception,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop_abort_on_exception\" on the remote interpreter"))),
      s(:def, :mainloop_abort_on_exception=,
        s(:args,
          s(:arg, :mode)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"mainloop_abort_on_exception=\" on the remote interpreter"))),
      s(:def, :set_eventloop_tick,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"set_eventloop_tick\" on the remote interpreter"))),
      s(:def, :get_eventloop_tick,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"get_eventloop_tick\" on the remote interpreter"))),
      s(:def, :set_no_event_wait,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"set_no_event_wait\" on the remote interpreter"))),
      s(:def, :get_no_event_wait,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"get_no_event_wait\" on the remote interpreter"))),
      s(:def, :set_eventloop_weight,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"set_eventloop_weight\" on the remote interpreter"))),
      s(:def, :get_eventloop_weight,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :RuntimeError),
          s(:str, "not support \"get_eventloop_weight\" on the remote interpreter"))))))
