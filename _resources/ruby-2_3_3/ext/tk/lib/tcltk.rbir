s(:begin,
  s(:send, nil, :require,
    s(:str, "tcltklib")),
  s(:module,
    s(:const, nil, :TclTk),
    s(:begin,
      s(:ivasgn, :@namecnt,
        s(:hash)),
      s(:ivasgn, :@callback,
        s(:hash)))),
  s(:defs,
    s(:const, nil, :TclTk), :mainloop,
    s(:args),
    s(:begin,
      s(:if,
        s(:gvar, :$DEBUG),
        s(:send, nil, :print,
          s(:str, "mainloop: start\n")), nil),
      s(:send,
        s(:const, nil, :TclTkLib), :mainloop),
      s(:if,
        s(:gvar, :$DEBUG),
        s(:send, nil, :print,
          s(:str, "mainloop: end\n")), nil))),
  s(:defs,
    s(:const, nil, :TclTk), :deletecallbackkey,
    s(:args,
      s(:arg, :ca)),
    s(:begin,
      s(:if,
        s(:gvar, :$DEBUG),
        s(:send, nil, :print,
          s(:str, "deletecallbackkey: "),
          s(:send,
            s(:lvar, :ca), :to_s),
          s(:str, "\n")), nil),
      s(:send,
        s(:ivar, :@callback), :delete,
        s(:send,
          s(:lvar, :ca), :to_s)))),
  s(:defs,
    s(:const, nil, :TclTk), :dcb,
    s(:args,
      s(:arg, :ca),
      s(:arg, :wid),
      s(:arg, :w)),
    s(:if,
      s(:send,
        s(:send,
          s(:lvar, :wid), :to_s), :==,
        s(:lvar, :w)),
      s(:block,
        s(:send,
          s(:lvar, :ca), :each),
        s(:args,
          s(:arg, :i)),
        s(:send,
          s(:const, nil, :TclTk), :deletecallbackkey,
          s(:lvar, :i))), nil)),
  s(:defs,
    s(:const, nil, :TclTk), :_addcallback,
    s(:args,
      s(:arg, :ca)),
    s(:begin,
      s(:if,
        s(:gvar, :$DEBUG),
        s(:send, nil, :print,
          s(:str, "_addcallback: "),
          s(:send,
            s(:lvar, :ca), :to_s),
          s(:str, "\n")), nil),
      s(:send,
        s(:ivar, :@callback), :[]=,
        s(:send,
          s(:lvar, :ca), :to_s),
        s(:lvar, :ca)))),
  s(:defs,
    s(:const, nil, :TclTk), :_callcallback,
    s(:args,
      s(:arg, :key),
      s(:arg, :arg)),
    s(:begin,
      s(:if,
        s(:gvar, :$DEBUG),
        s(:send, nil, :print,
          s(:str, "_callcallback: "),
          s(:send,
            s(:send,
              s(:ivar, :@callback), :[],
              s(:lvar, :key)), :inspect),
          s(:str, "\n")), nil),
      s(:send,
        s(:send,
          s(:ivar, :@callback), :[],
          s(:lvar, :key)), :_call,
        s(:lvar, :arg)),
      s(:return,
        s(:str, "")))),
  s(:defs,
    s(:const, nil, :TclTk), :_newname,
    s(:args,
      s(:arg, :prefix)),
    s(:begin,
      s(:if,
        s(:send,
          s(:send,
            s(:ivar, :@namecnt), :key?,
            s(:lvar, :prefix)), :!),
        s(:send,
          s(:ivar, :@namecnt), :[]=,
          s(:lvar, :prefix),
          s(:int, 1)),
        s(:op_asgn,
          s(:send,
            s(:ivar, :@namecnt), :[],
            s(:lvar, :prefix)), :+,
          s(:int, 1))),
      s(:return,
        s(:dstr,
          s(:begin,
            s(:lvar, :prefix)),
          s(:begin,
            s(:send,
              s(:ivar, :@namecnt), :[],
              s(:lvar, :prefix))))))),
  s(:class,
    s(:const, nil, :TclTkInterpreter), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@ip,
            s(:send,
              s(:const, nil, :TclTkIp), :new)),
          s(:if,
            s(:gvar, :$DEBUG),
            s(:send,
              s(:ivar, :@ip), :_eval,
              s(:str, "proc ruby_fmt {fmt args} { puts \"ruby_fmt: $fmt $args\" ; set cmd [list ruby [format $fmt $args]] ; uplevel $cmd }")),
            s(:send,
              s(:ivar, :@ip), :_eval,
              s(:str, "proc ruby_fmt {fmt args} { set cmd [list ruby [format $fmt $args]] ; uplevel $cmd }"))),
          s(:defs,
            s(:ivar, :@ip), :_get_eval_string,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :argstr,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :arg)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :argstr), :!=,
                      s(:str, "")),
                    s(:op_asgn,
                      s(:lvasgn, :argstr), :+,
                      s(:str, " ")), nil),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :arg), :respond_to?,
                        s(:sym, :to_eval))),
                    s(:op_asgn,
                      s(:lvasgn, :argstr), :+,
                      s(:send,
                        s(:lvar, :arg), :to_eval)),
                    s(:op_asgn,
                      s(:lvasgn, :argstr), :+,
                      s(:send,
                        s(:lvar, :arg), :to_s))))),
              s(:return,
                s(:lvar, :argstr)))),
          s(:defs,
            s(:ivar, :@ip), :_eval_args,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :argstr,
                s(:send, nil, :_get_eval_string,
                  s(:splat,
                    s(:lvar, :args)))),
              s(:if,
                s(:gvar, :$DEBUG),
                s(:send, nil, :print,
                  s(:str, "_eval: \""),
                  s(:lvar, :argstr),
                  s(:str, "\"")), nil),
              s(:lvasgn, :res,
                s(:send, nil, :_eval,
                  s(:lvar, :argstr))),
              s(:if,
                s(:gvar, :$DEBUG),
                s(:send, nil, :print,
                  s(:str, " -> \""),
                  s(:lvar, :res),
                  s(:str, "\"\n")),
                s(:if,
                  s(:send,
                    s(:send, nil, :_return_value), :!=,
                    s(:int, 0)),
                  s(:send, nil, :print,
                    s(:lvar, :res),
                    s(:str, "\n")), nil)),
              s(:if,
                s(:send,
                  s(:send, nil, :_return_value), :!=,
                  s(:int, 0)),
                s(:send, nil, :fail,
                  s(:dstr,
                    s(:str, "can't eval \""),
                    s(:begin,
                      s(:lvar, :argstr)),
                    s(:str, "\""))), nil),
              s(:return,
                s(:lvar, :res)))),
          s(:ivasgn, :@commands,
            s(:hash)),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@ip), :_eval,
                  s(:str, "info command")), :split,
                s(:regexp,
                  s(:str, " "),
                  s(:regopt))), :each),
            s(:args,
              s(:arg, :comname)),
            s(:if,
              s(:send,
                s(:lvar, :comname), :=~,
                s(:regexp,
                  s(:str, "^[.]"),
                  s(:regopt))),
              s(:send,
                s(:ivar, :@commands), :[]=,
                s(:lvar, :comname),
                s(:send,
                  s(:const, nil, :TclTkWidget), :new,
                  s(:ivar, :@ip),
                  s(:lvar, :comname))),
              s(:send,
                s(:ivar, :@commands), :[]=,
                s(:lvar, :comname),
                s(:send,
                  s(:const, nil, :TclTkCommand), :new,
                  s(:ivar, :@ip),
                  s(:lvar, :comname))))))),
      s(:def, :commands,
        s(:args),
        s(:return,
          s(:ivar, :@commands))),
      s(:def, :rootwidget,
        s(:args),
        s(:return,
          s(:send,
            s(:ivar, :@commands), :[],
            s(:str, ".")))),
      s(:def, :_tcltkip,
        s(:args),
        s(:return,
          s(:ivar, :@ip))),
      s(:def, :method_missing,
        s(:args,
          s(:arg, :id),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:ivar, :@commands), :key?,
            s(:send,
              s(:lvar, :id), :id2name)),
          s(:return,
            s(:send,
              s(:send,
                s(:ivar, :@commands), :[],
                s(:send,
                  s(:lvar, :id), :id2name)), :e,
              s(:splat,
                s(:lvar, :args)))),
          s(:zsuper))))),
  s(:class,
    s(:const, nil, :TclTkObject), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :ip),
          s(:arg, :exp)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :ip), :kind_of?,
                s(:const, nil, :TclTkIp)), :!),
            s(:send, nil, :fail,
              s(:str, "type is not TclTkIp")), nil),
          s(:ivasgn, :@ip,
            s(:lvar, :ip)),
          s(:ivasgn, :@exp,
            s(:lvar, :exp)))),
      s(:def, :to_s,
        s(:args),
        s(:return,
          s(:ivar, :@exp))))),
  s(:class,
    s(:const, nil, :TclTkCommand),
    s(:const, nil, :TclTkObject),
    s(:def, :e,
      s(:args,
        s(:restarg, :args)),
      s(:return,
        s(:send,
          s(:ivar, :@ip), :_eval_args,
          s(:send, nil, :to_s),
          s(:splat,
            s(:lvar, :args)))))),
  s(:class,
    s(:const, nil, :TclTkLibCommand),
    s(:const, nil, :TclTkCommand),
    s(:def, :initialize,
      s(:args,
        s(:arg, :ip),
        s(:arg, :name)),
      s(:super,
        s(:send,
          s(:lvar, :ip), :_tcltkip),
        s(:lvar, :name)))),
  s(:class,
    s(:const, nil, :TclTkVariable),
    s(:const, nil, :TclTkObject),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :interp),
          s(:arg, :dat)),
        s(:begin,
          s(:lvasgn, :exp,
            s(:send,
              s(:const, nil, :TclTk), :_newname,
              s(:str, "v_"))),
          s(:super,
            s(:send,
              s(:lvar, :interp), :_tcltkip),
            s(:lvar, :exp)),
          s(:ivasgn, :@set,
            s(:send,
              s(:send,
                s(:lvar, :interp), :commands), :[],
              s(:str, "set"))),
          s(:if,
            s(:lvar, :dat),
            s(:send, nil, :set,
              s(:lvar, :dat)), nil))),
      s(:def, :set,
        s(:args,
          s(:arg, :data)),
        s(:send,
          s(:ivar, :@set), :e,
          s(:send, nil, :to_s),
          s(:send,
            s(:lvar, :data), :to_s))),
      s(:def, :get,
        s(:args),
        s(:return,
          s(:send,
            s(:ivar, :@set), :e,
            s(:send, nil, :to_s)))))),
  s(:class,
    s(:const, nil, :TclTkWidget),
    s(:const, nil, :TclTkCommand),
    s(:def, :initialize,
      s(:args,
        s(:restarg, :args)),
      s(:if,
        s(:send,
          s(:send,
            s(:lvar, :args), :[],
            s(:int, 0)), :kind_of?,
          s(:const, nil, :TclTkIp)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :size), :!=,
              s(:int, 2)),
            s(:send, nil, :fail,
              s(:str, "invalid # of parameter")), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :ip),
              s(:lvasgn, :exp)),
            s(:lvar, :args)),
          s(:super,
            s(:lvar, :ip),
            s(:lvar, :exp))),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :args), :[],
              s(:int, 0)), :kind_of?,
            s(:const, nil, :TclTkInterpreter)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :interp),
                s(:lvasgn, :parent),
                s(:lvasgn, :command),
                s(:splat,
                  s(:lvasgn, :args))),
              s(:lvar, :args)),
            s(:lvasgn, :exp,
              s(:send,
                s(:lvar, :parent), :to_s)),
            s(:if,
              s(:send,
                s(:lvar, :exp), :!~,
                s(:regexp,
                  s(:str, "[.]$"),
                  s(:regopt))),
              s(:op_asgn,
                s(:lvasgn, :exp), :+,
                s(:str, ".")), nil),
            s(:op_asgn,
              s(:lvasgn, :exp), :+,
              s(:send,
                s(:const, nil, :TclTk), :_newname,
                s(:str, "w_"))),
            s(:super,
              s(:send,
                s(:lvar, :interp), :_tcltkip),
              s(:lvar, :exp)),
            s(:lvasgn, :res,
              s(:send,
                s(:ivar, :@ip), :_eval_args,
                s(:lvar, :command),
                s(:lvar, :exp),
                s(:splat,
                  s(:lvar, :args))))),
          s(:send, nil, :fail,
            s(:str, "first parameter is not TclTkInterpreter")))))),
  s(:class,
    s(:const, nil, :TclTkCallback),
    s(:const, nil, :TclTkObject),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :interp),
          s(:arg, :pr),
          s(:optarg, :arg,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :exp,
            s(:send,
              s(:const, nil, :TclTk), :_newname,
              s(:str, "c_"))),
          s(:super,
            s(:send,
              s(:lvar, :interp), :_tcltkip),
            s(:lvar, :exp)),
          s(:ivasgn, :@pr,
            s(:lvar, :pr)),
          s(:ivasgn, :@arg,
            s(:lvar, :arg)),
          s(:send,
            s(:const, nil, :TclTk), :_addcallback,
            s(:self)))),
      s(:def, :to_eval,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@arg),
            s(:lvasgn, :s,
              s(:dstr,
                s(:str, "{ruby_fmt {TclTk._callcallback(\""),
                s(:begin,
                  s(:send, nil, :to_s)),
                s(:str, "\", \"%%s\")} "),
                s(:begin,
                  s(:ivar, :@arg)),
                s(:str, "}"))),
            s(:lvasgn, :s,
              s(:dstr,
                s(:str, "{ruby_fmt {TclTk._callcallback(\""),
                s(:begin,
                  s(:send, nil, :to_s)),
                s(:str, "\", \"%s\")}}")))),
          s(:return,
            s(:lvar, :s)))),
      s(:def, :_call,
        s(:args,
          s(:arg, :arg)),
        s(:send,
          s(:ivar, :@pr), :call,
          s(:lvar, :arg))))),
  s(:class,
    s(:const, nil, :TclTkImage),
    s(:const, nil, :TclTkCommand),
    s(:def, :initialize,
      s(:args,
        s(:arg, :interp),
        s(:arg, :t),
        s(:restarg, :args)),
      s(:begin,
        s(:lvasgn, :exp,
          s(:send,
            s(:const, nil, :TclTk), :_newname,
            s(:str, "i_"))),
        s(:super,
          s(:send,
            s(:lvar, :interp), :_tcltkip),
          s(:lvar, :exp)),
        s(:lvasgn, :res,
          s(:send,
            s(:ivar, :@ip), :_eval_args,
            s(:str, "image create"),
            s(:lvar, :t),
            s(:lvar, :exp),
            s(:splat,
              s(:lvar, :args)))),
        s(:if,
          s(:send,
            s(:lvar, :res), :!=,
            s(:lvar, :exp)),
          s(:send, nil, :fail,
            s(:str, "can't create Image")), nil)))))
