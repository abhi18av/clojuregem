s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:module,
    s(:const, nil, :TkPackage),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkCore)),
      s(:send, nil, :extend,
        s(:const, nil, :TkPackage)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "package"), :freeze)), :freeze)),
      s(:def, :add_path,
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :AUTO_PATH), :value=,
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Tk), :AUTO_PATH), :to_a), :<<,
            s(:lvar, :path)))),
      s(:def, :forget,
        s(:args,
          s(:arg, :package)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "package"),
            s(:str, "forget"),
            s(:lvar, :package)),
          s(:nil))),
      s(:def, :if_needed,
        s(:args,
          s(:arg, :pkg),
          s(:arg, :ver),
          s(:restarg, :arg),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :size,
            s(:send,
              s(:lvar, :arg), :size)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :size), :==,
                s(:int, 0)),
              s(:send,
                s(:lvar, :b), :!)),
            s(:send, nil, :procedure,
              s(:send, nil, :tk_call,
                s(:str, "package"),
                s(:str, "ifneeded"),
                s(:lvar, :pkg),
                s(:lvar, :ver))),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :size), :==,
                  s(:int, 0)),
                s(:lvar, :b)),
              s(:begin,
                s(:lvasgn, :cmd,
                  s(:send, nil, :proc,
                    s(:block_pass,
                      s(:lvar, :b)))),
                s(:send, nil, :tk_call,
                  s(:str, "package"),
                  s(:str, "ifneeded"),
                  s(:lvar, :pkg),
                  s(:lvar, :ver),
                  s(:lvar, :cmd)),
                s(:lvar, :cmd)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :size), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :b), :!)),
                s(:begin,
                  s(:lvasgn, :cmd,
                    s(:send,
                      s(:lvar, :arg), :[],
                      s(:int, 0))),
                  s(:if,
                    s(:lvar, :cmd),
                    s(:begin,
                      s(:send, nil, :tk_call,
                        s(:str, "package"),
                        s(:str, "ifneeded"),
                        s(:lvar, :pkg),
                        s(:lvar, :ver),
                        s(:lvar, :cmd)),
                      s(:lvar, :cmd)),
                    s(:begin,
                      s(:send, nil, :tk_call,
                        s(:str, "package"),
                        s(:str, "ifneeded"),
                        s(:lvar, :pkg),
                        s(:lvar, :ver),
                        s(:str, "")),
                      s(:nil)))),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "too many arguments"))))))),
      s(:def, :names,
        s(:args),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :tk_call,
            s(:str, "package"),
            s(:str, "names")))),
      s(:def, :provide,
        s(:args,
          s(:arg, :package),
          s(:optarg, :version,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :version),
            s(:send, nil, :tk_call,
              s(:str, "package"),
              s(:str, "provide"),
              s(:lvar, :package),
              s(:lvar, :version)), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:lvasgn, :ret,
                  s(:send, nil, :tk_call,
                    s(:str, "package"),
                    s(:str, "provide"),
                    s(:lvar, :package)))), :==,
              s(:str, "")),
            s(:nil),
            s(:lvar, :ret)))),
      s(:def, :present,
        s(:args,
          s(:arg, :package),
          s(:optarg, :version,
            s(:const, nil, :None))),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :tk_call,
              s(:str, "package"),
              s(:str, "present"),
              s(:lvar, :package),
              s(:lvar, :version)),
            s(:resbody, nil,
              s(:lvasgn, :e),
              s(:send, nil, :fail,
                s(:send,
                  s(:lvar, :e), :class),
                s(:send,
                  s(:str, "TkPackage "), :<<,
                  s(:send,
                    s(:lvar, :e), :message)))), nil))),
      s(:def, :present_exact,
        s(:args,
          s(:arg, :package),
          s(:arg, :version)),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :tk_call,
              s(:str, "package"),
              s(:str, "present"),
              s(:str, "-exact"),
              s(:lvar, :package),
              s(:lvar, :version)),
            s(:resbody, nil,
              s(:lvasgn, :e),
              s(:send, nil, :fail,
                s(:send,
                  s(:lvar, :e), :class),
                s(:send,
                  s(:str, "TkPackage "), :<<,
                  s(:send,
                    s(:lvar, :e), :message)))), nil))),
      s(:def, :require,
        s(:args,
          s(:arg, :package),
          s(:optarg, :version,
            s(:const, nil, :None))),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :tk_call,
              s(:str, "package"),
              s(:str, "require"),
              s(:lvar, :package),
              s(:lvar, :version)),
            s(:resbody, nil,
              s(:lvasgn, :e),
              s(:send, nil, :fail,
                s(:send,
                  s(:lvar, :e), :class),
                s(:send,
                  s(:str, "TkPackage "), :<<,
                  s(:send,
                    s(:lvar, :e), :message)))), nil))),
      s(:def, :require_exact,
        s(:args,
          s(:arg, :package),
          s(:arg, :version)),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :tk_call,
              s(:str, "package"),
              s(:str, "require"),
              s(:str, "-exact"),
              s(:lvar, :package),
              s(:lvar, :version)),
            s(:resbody, nil,
              s(:lvasgn, :e),
              s(:send, nil, :fail,
                s(:send,
                  s(:lvar, :e), :class),
                s(:send,
                  s(:str, "TkPackage "), :<<,
                  s(:send,
                    s(:lvar, :e), :message)))), nil))),
      s(:def, :unknown_proc,
        s(:args,
          s(:restarg, :arg),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :size,
            s(:send,
              s(:lvar, :arg), :size)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :size), :==,
                s(:int, 0)),
              s(:send,
                s(:lvar, :b), :!)),
            s(:send, nil, :procedure,
              s(:send, nil, :tk_call,
                s(:str, "package"),
                s(:str, "unknown"))),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :size), :==,
                  s(:int, 0)),
                s(:lvar, :b)),
              s(:begin,
                s(:lvasgn, :cmd,
                  s(:send, nil, :proc,
                    s(:block_pass,
                      s(:lvar, :b)))),
                s(:send, nil, :tk_call,
                  s(:str, "package"),
                  s(:str, "unknown"),
                  s(:lvar, :cmd)),
                s(:lvar, :cmd)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :size), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :b), :!)),
                s(:begin,
                  s(:lvasgn, :cmd,
                    s(:send,
                      s(:lvar, :arg), :[],
                      s(:int, 0))),
                  s(:if,
                    s(:lvar, :cmd),
                    s(:begin,
                      s(:send, nil, :tk_call,
                        s(:str, "package"),
                        s(:str, "unknown"),
                        s(:lvar, :cmd)),
                      s(:lvar, :cmd)),
                    s(:begin,
                      s(:send, nil, :tk_call,
                        s(:str, "package"),
                        s(:str, "unknown"),
                        s(:str, "")),
                      s(:nil)))),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "too many arguments"))))))),
      s(:def, :versions,
        s(:args,
          s(:arg, :package)),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :tk_call,
            s(:str, "package"),
            s(:str, "versions"),
            s(:lvar, :package)))),
      s(:def, :vcompare,
        s(:args,
          s(:arg, :version1),
          s(:arg, :version2)),
        s(:send, nil, :number,
          s(:send, nil, :tk_call,
            s(:str, "package"),
            s(:str, "vcompare"),
            s(:lvar, :version1),
            s(:lvar, :version2)))),
      s(:def, :vsatisfies,
        s(:args,
          s(:arg, :version1),
          s(:arg, :version2)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call,
            s(:str, "package"),
            s(:str, "vsatisfies"),
            s(:lvar, :version1),
            s(:lvar, :version2)))),
      s(:def, :prefer,
        s(:args,
          s(:optarg, :setting,
            s(:const, nil, :None))),
        s(:send, nil, :tk_call,
          s(:str, "package"),
          s(:str, "prefer"),
          s(:lvar, :setting))))))
