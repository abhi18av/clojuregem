s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:class,
    s(:const, nil, :TkTimer), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkCore)),
      s(:send, nil, :extend,
        s(:const, nil, :TkCore)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "after"), :freeze)), :freeze)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :Tk_CBID,
              s(:array,
                s(:send,
                  s(:str, "a"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:casgn, nil, :Tk_CBTBL,
        s(:send,
          s(:const, nil, :TkUtil), :untrust,
          s(:hash))),
      s(:send,
        s(:const,
          s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
        s(:str, "rb_after"),
        s(:str, "id"),
        s(:dstr,
          s(:str, "    if {[set st [catch {eval {ruby_cmd TkTimer callback} $id} ret]] != 0} {\n"),
          s(:str, "        return -code $st $ret\n"),
          s(:str, "    } {\n"),
          s(:str, "        return $ret\n"),
          s(:str, "    }\n"))),
      s(:casgn, nil, :DEFAULT_IGNORE_EXCEPTIONS,
        s(:send,
          s(:array,
            s(:const, nil, :NameError),
            s(:const, nil, :RuntimeError)), :freeze)),
      s(:defs,
        s(:self), :start,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :b)),
        s(:send,
          s(:send,
            s(:self), :new,
            s(:splat,
              s(:lvar, :args)),
            s(:block_pass,
              s(:lvar, :b))), :start)),
      s(:defs,
        s(:self), :callback,
        s(:args,
          s(:arg, :obj_id)),
        s(:begin,
          s(:lvasgn, :ex_obj,
            s(:send,
              s(:const, nil, :Tk_CBTBL), :[],
              s(:lvar, :obj_id))),
          s(:if,
            s(:send,
              s(:lvar, :ex_obj), :==,
              s(:nil)),
            s(:return,
              s(:str, "")), nil),
          s(:send,
            s(:lvar, :ex_obj), :cb_call))),
      s(:defs,
        s(:self), :info,
        s(:args,
          s(:optarg, :obj,
            s(:nil))),
        s(:if,
          s(:lvar, :obj),
          s(:if,
            s(:send,
              s(:lvar, :obj), :kind_of?,
              s(:const, nil, :TkTimer)),
            s(:if,
              s(:send,
                s(:lvar, :obj), :after_id),
              s(:begin,
                s(:lvasgn, :inf,
                  s(:send, nil, :tk_split_list,
                    s(:send, nil, :tk_call_without_enc,
                      s(:str, "after"),
                      s(:str, "info"),
                      s(:send,
                        s(:lvar, :obj), :after_id)))),
                s(:array,
                  s(:send,
                    s(:const, nil, :Tk_CBTBL), :[],
                    s(:send,
                      s(:send,
                        s(:lvar, :inf), :[],
                        s(:int, 0)), :[],
                      s(:int, 1))),
                  s(:send,
                    s(:lvar, :inf), :[],
                    s(:int, 1)))),
              s(:nil)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "TkTimer object is expected"))),
          s(:block,
            s(:send,
              s(:send,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "after"),
                  s(:str, "info")), :split,
                s(:str, " ")), :collect!),
            s(:args,
              s(:arg, :id)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:const, nil, :Tk_CBTBL), :find),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:send,
                    s(:send,
                      s(:lvar, :val), :after_id), :==,
                    s(:lvar, :id)))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :ret), :==,
                    s(:nil))),
                s(:lvar, :id),
                s(:send,
                  s(:lvar, :ret), :[],
                  s(:int, 1))))))),
      s(:def, :do_callback,
        s(:args),
        s(:begin,
          s(:ivasgn, :@in_callback,
            s(:true)),
          s(:ivasgn, :@after_id,
            s(:nil)),
          s(:kwbegin,
            s(:rescue,
              s(:ivasgn, :@return_value,
                s(:send,
                  s(:ivar, :@current_proc), :call,
                  s(:self))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)), nil,
                s(:send, nil, :exit,
                  s(:int, 0))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Interrupt)), nil,
                s(:send, nil, :exit!,
                  s(:int, 1))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)),
                s(:lvasgn, :e),
                s(:if,
                  s(:and,
                    s(:ivar, :@cancel_on_exception),
                    s(:block,
                      s(:send,
                        s(:ivar, :@cancel_on_exception), :find),
                      s(:args,
                        s(:arg, :exc)),
                      s(:send,
                        s(:lvar, :e), :kind_of?,
                        s(:lvar, :exc)))),
                  s(:begin,
                    s(:send, nil, :cancel),
                    s(:ivasgn, :@return_value,
                      s(:lvar, :e)),
                    s(:ivasgn, :@in_callback,
                      s(:false)),
                    s(:return,
                      s(:lvar, :e))),
                  s(:send, nil, :fail,
                    s(:lvar, :e)))), nil)),
          s(:if,
            s(:ivar, :@set_next),
            s(:send, nil, :set_next_callback,
              s(:ivar, :@current_args)),
            s(:ivasgn, :@set_next,
              s(:true))),
          s(:ivasgn, :@in_callback,
            s(:false)),
          s(:ivar, :@return_value))),
      s(:def, :set_callback,
        s(:args,
          s(:arg, :sleep),
          s(:optarg, :args,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :deleted?),
            s(:begin,
              s(:send,
                s(:self), :cancel),
              s(:return,
                s(:self))), nil),
          s(:ivasgn, :@after_script,
            s(:dstr,
              s(:str, "rb_after "),
              s(:begin,
                s(:ivar, :@id)))),
          s(:ivasgn, :@current_args,
            s(:lvar, :args)),
          s(:ivasgn, :@current_script,
            s(:array,
              s(:lvar, :sleep),
              s(:ivar, :@after_script))),
          s(:ivasgn, :@after_id,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "after"),
              s(:lvar, :sleep),
              s(:ivar, :@after_script))),
          s(:self))),
      s(:def, :set_next_callback,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:or,
                s(:send,
                  s(:ivar, :@running), :==,
                  s(:false)),
                s(:send,
                  s(:ivar, :@proc_max), :==,
                  s(:int, 0))),
              s(:send,
                s(:ivar, :@do_loop), :==,
                s(:int, 0))),
            s(:begin,
              s(:send,
                s(:const, nil, :Tk_CBTBL), :delete,
                s(:ivar, :@id)),
              s(:ivasgn, :@running,
                s(:false)),
              s(:send, nil, :__at_end__),
              s(:return)), nil),
          s(:if,
            s(:send,
              s(:ivar, :@current_pos), :>=,
              s(:ivar, :@proc_max)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@do_loop), :<,
                  s(:int, 0)),
                s(:send,
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@do_loop), :-,
                      s(:int, 1))), :>,
                  s(:int, 0))),
              s(:ivasgn, :@current_pos,
                s(:int, 0)),
              s(:begin,
                s(:send,
                  s(:const, nil, :Tk_CBTBL), :delete,
                  s(:ivar, :@id)),
                s(:ivasgn, :@running,
                  s(:false)),
                s(:send, nil, :__at_end__),
                s(:return))), nil),
          s(:ivasgn, :@current_args,
            s(:lvar, :args)),
          s(:if,
            s(:send,
              s(:const, nil, :TkComm), :_callback_entry?,
              s(:ivar, :@sleep_time)),
            s(:lvasgn, :sleep,
              s(:send,
                s(:ivar, :@sleep_time), :call,
                s(:self))),
            s(:lvasgn, :sleep,
              s(:ivar, :@sleep_time))),
          s(:ivasgn, :@current_sleep,
            s(:lvar, :sleep)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :cmd),
              s(:splat,
                s(:lvasgn, :cmd_args))),
            s(:send,
              s(:ivar, :@loop_proc), :[],
              s(:ivar, :@current_pos))),
          s(:op_asgn,
            s(:ivasgn, :@current_pos), :+,
            s(:int, 1)),
          s(:ivasgn, :@current_proc,
            s(:lvar, :cmd)),
          s(:send, nil, :set_callback,
            s(:lvar, :sleep),
            s(:lvar, :cmd_args)))),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :b)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_CBID), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:ivasgn, :@id,
                s(:send,
                  s(:const, nil, :Tk_CBID), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :_ip_id_))),
              s(:send,
                s(:send,
                  s(:const, nil, :Tk_CBID), :[],
                  s(:int, 1)), :succ!))),
          s(:ivasgn, :@wait_var,
            s(:send,
              s(:const, nil, :TkVariable), :new,
              s(:int, 0))),
          s(:ivasgn, :@at_end_proc,
            s(:nil)),
          s(:ivasgn, :@cb_cmd,
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :get_cb_entry,
              s(:send,
                s(:self), :method,
                s(:sym, :do_callback)))),
          s(:ivasgn, :@set_next,
            s(:true)),
          s(:ivasgn, :@init_sleep,
            s(:int, 0)),
          s(:ivasgn, :@init_proc,
            s(:nil)),
          s(:ivasgn, :@init_args,
            s(:array)),
          s(:ivasgn, :@current_script,
            s(:array)),
          s(:ivasgn, :@current_proc,
            s(:nil)),
          s(:ivasgn, :@current_args,
            s(:nil)),
          s(:ivasgn, :@return_value,
            s(:nil)),
          s(:ivasgn, :@sleep_time,
            s(:int, 0)),
          s(:ivasgn, :@current_sleep,
            s(:int, 0)),
          s(:ivasgn, :@loop_exec,
            s(:int, 0)),
          s(:ivasgn, :@do_loop,
            s(:int, 0)),
          s(:ivasgn, :@loop_proc,
            s(:array)),
          s(:ivasgn, :@proc_max,
            s(:int, 0)),
          s(:ivasgn, :@current_pos,
            s(:int, 0)),
          s(:ivasgn, :@after_id,
            s(:nil)),
          s(:ivasgn, :@after_script,
            s(:nil)),
          s(:ivasgn, :@cancel_on_exception,
            s(:const, nil, :DEFAULT_IGNORE_EXCEPTIONS)),
          s(:if,
            s(:lvar, :b),
            s(:case,
              s(:send,
                s(:lvar, :args), :size),
              s(:when,
                s(:int, 0),
                s(:send, nil, :add_procs,
                  s(:lvar, :b))),
              s(:when,
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :args), :<<,
                    s(:int, -1)), :<<,
                  s(:lvar, :b))),
              s(:send,
                s(:lvar, :args), :<<,
                s(:lvar, :b))), nil),
          s(:if,
            s(:send,
              s(:lvar, :args), :!=,
              s(:array)),
            s(:send, nil, :set_procs,
              s(:splat,
                s(:lvar, :args))), nil),
          s(:ivasgn, :@running,
            s(:false)),
          s(:ivasgn, :@in_callback,
            s(:false)))),
      s(:send, nil, :attr,
        s(:sym, :after_id)),
      s(:send, nil, :attr,
        s(:sym, :after_script)),
      s(:send, nil, :attr,
        s(:sym, :current_proc)),
      s(:send, nil, :attr,
        s(:sym, :current_args)),
      s(:send, nil, :attr,
        s(:sym, :current_sleep)),
      s(:alias,
        s(:sym, :current_interval),
        s(:sym, :current_sleep)),
      s(:send, nil, :attr,
        s(:sym, :return_value)),
      s(:send, nil, :attr_accessor,
        s(:sym, :loop_exec)),
      s(:def, :__at_end__,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@at_end_proc),
            s(:send,
              s(:ivar, :@at_end_proc), :call,
              s(:self)), nil),
          s(:send,
            s(:ivar, :@wait_var), :value=,
            s(:int, 0)))),
      s(:send, nil, :private,
        s(:sym, :__at_end__)),
      s(:def, :cb_call,
        s(:args),
        s(:send,
          s(:ivar, :@cb_cmd), :call)),
      s(:def, :get_procs,
        s(:args),
        s(:array,
          s(:ivar, :@init_sleep),
          s(:ivar, :@init_proc),
          s(:ivar, :@init_args),
          s(:ivar, :@sleep_time),
          s(:ivar, :@loop_exec),
          s(:ivar, :@loop_proc))),
      s(:def, :current_status,
        s(:args),
        s(:array,
          s(:ivar, :@running),
          s(:ivar, :@current_sleep),
          s(:ivar, :@current_proc),
          s(:ivar, :@current_args),
          s(:ivar, :@do_loop),
          s(:ivar, :@cancel_on_exception))),
      s(:def, :cancel_on_exception?,
        s(:args),
        s(:ivar, :@cancel_on_exception)),
      s(:def, :cancel_on_exception=,
        s(:args,
          s(:arg, :mode)),
        s(:if,
          s(:send,
            s(:lvar, :mode), :kind_of?,
            s(:const, nil, :Array)),
          s(:ivasgn, :@cancel_on_exception,
            s(:lvar, :mode)),
          s(:if,
            s(:lvar, :mode),
            s(:ivasgn, :@cancel_on_exception,
              s(:const, nil, :DEFAULT_IGNORE_EXCEPTIONS)),
            s(:ivasgn, :@cancel_on_exception,
              s(:false))))),
      s(:def, :running?,
        s(:args),
        s(:ivar, :@running)),
      s(:def, :loop_rest,
        s(:args),
        s(:ivar, :@do_loop)),
      s(:def, :loop_rest=,
        s(:args,
          s(:arg, :rest)),
        s(:ivasgn, :@do_loop,
          s(:lvar, :rest))),
      s(:def, :set_interval,
        s(:args,
          s(:arg, :interval)),
        s(:begin,
          s(:if,
            s(:and,
              s(:and,
                s(:and,
                  s(:send,
                    s(:lvar, :interval), :!=,
                    s(:str, "idle")),
                  s(:send,
                    s(:lvar, :interval), :!=,
                    s(:sym, :idle))),
                s(:send,
                  s(:send,
                    s(:lvar, :interval), :kind_of?,
                    s(:const, nil, :Integer)), :!)),
              s(:send,
                s(:send,
                  s(:const, nil, :TkComm), :_callback_entry?,
                  s(:lvar, :interval)), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "expect Integer or Proc")), nil),
          s(:ivasgn, :@sleep_time,
            s(:lvar, :interval)))),
      s(:def, :set_procs,
        s(:args,
          s(:arg, :interval),
          s(:arg, :loop_exec),
          s(:restarg, :procs)),
        s(:begin,
          s(:if,
            s(:and,
              s(:and,
                s(:and,
                  s(:send,
                    s(:lvar, :interval), :!=,
                    s(:str, "idle")),
                  s(:send,
                    s(:lvar, :interval), :!=,
                    s(:sym, :idle))),
                s(:send,
                  s(:send,
                    s(:lvar, :interval), :kind_of?,
                    s(:const, nil, :Integer)), :!)),
              s(:send,
                s(:send,
                  s(:const, nil, :TkComm), :_callback_entry?,
                  s(:lvar, :interval)), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "expect Integer or Proc for 1st argument")), nil),
          s(:ivasgn, :@sleep_time,
            s(:lvar, :interval)),
          s(:ivasgn, :@loop_proc,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :procs), :each),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:lvar, :e)),
              s(:send,
                s(:ivar, :@loop_proc), :push,
                s(:array,
                  s(:lvar, :e))),
              s(:send,
                s(:ivar, :@loop_proc), :push,
                s(:lvar, :e)))),
          s(:ivasgn, :@proc_max,
            s(:send,
              s(:ivar, :@loop_proc), :size)),
          s(:ivasgn, :@current_pos,
            s(:int, 0)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :loop_exec), :kind_of?,
                s(:const, nil, :Integer)),
              s(:send,
                s(:lvar, :loop_exec), :<,
                s(:int, 0))),
            s(:ivasgn, :@loop_exec,
              s(:int, -1)),
            s(:if,
              s(:send,
                s(:lvar, :loop_exec), :==,
                s(:true)),
              s(:ivasgn, :@loop_exec,
                s(:int, -1)),
              s(:if,
                s(:or,
                  s(:or,
                    s(:send,
                      s(:lvar, :loop_exec), :==,
                      s(:nil)),
                    s(:send,
                      s(:lvar, :loop_exec), :==,
                      s(:false))),
                  s(:send,
                    s(:lvar, :loop_exec), :==,
                    s(:int, 0))),
                s(:ivasgn, :@loop_exec,
                  s(:int, 0)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :loop_exec), :kind_of?,
                        s(:const, nil, :Integer)), :!),
                    s(:send, nil, :fail,
                      s(:const, nil, :ArgumentError),
                      s(:str, "expect Integer for 2nd argument")), nil),
                  s(:ivasgn, :@loop_exec,
                    s(:lvar, :loop_exec)))))),
          s(:ivasgn, :@do_loop,
            s(:ivar, :@loop_exec)),
          s(:self))),
      s(:def, :add_procs,
        s(:args,
          s(:restarg, :procs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :procs), :each),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:lvar, :e)),
              s(:send,
                s(:ivar, :@loop_proc), :push,
                s(:array,
                  s(:lvar, :e))),
              s(:send,
                s(:ivar, :@loop_proc), :push,
                s(:lvar, :e)))),
          s(:ivasgn, :@proc_max,
            s(:send,
              s(:ivar, :@loop_proc), :size)),
          s(:self))),
      s(:def, :delete_procs,
        s(:args,
          s(:restarg, :procs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :procs), :each),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:lvar, :e)),
              s(:send,
                s(:ivar, :@loop_proc), :delete,
                s(:array,
                  s(:lvar, :e))),
              s(:send,
                s(:ivar, :@loop_proc), :delete,
                s(:lvar, :e)))),
          s(:ivasgn, :@proc_max,
            s(:send,
              s(:ivar, :@loop_proc), :size)),
          s(:if,
            s(:send,
              s(:ivar, :@proc_max), :==,
              s(:int, 0)),
            s(:send, nil, :cancel), nil),
          s(:self))),
      s(:def, :delete_at,
        s(:args,
          s(:arg, :n)),
        s(:begin,
          s(:send,
            s(:ivar, :@loop_proc), :delete_at,
            s(:lvar, :n)),
          s(:ivasgn, :@proc_max,
            s(:send,
              s(:ivar, :@loop_proc), :size)),
          s(:if,
            s(:send,
              s(:ivar, :@proc_max), :==,
              s(:int, 0)),
            s(:send, nil, :cancel), nil),
          s(:self))),
      s(:def, :set_start_proc,
        s(:args,
          s(:optarg, :sleep,
            s(:nil)),
          s(:optarg, :init_proc,
            s(:nil)),
          s(:restarg, :init_args),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:lvar, :sleep), nil,
            s(:lvasgn, :sleep,
              s(:ivar, :@init_sleep))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :sleep), :!=,
                  s(:str, "idle")),
                s(:send,
                  s(:lvar, :sleep), :!=,
                  s(:sym, :idle))),
              s(:send,
                s(:send,
                  s(:lvar, :sleep), :kind_of?,
                  s(:const, nil, :Integer)), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "expect Integer or 'idle' for 1st argument")), nil),
          s(:ivasgn, :@init_sleep,
            s(:lvar, :sleep)),
          s(:ivasgn, :@init_proc,
            s(:lvar, :init_proc)),
          s(:ivasgn, :@init_args,
            s(:lvar, :init_args)),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@init_proc), :!),
              s(:lvar, :b)),
            s(:ivasgn, :@init_proc,
              s(:lvar, :b)), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@init_sleep), :>,
                s(:int, 0)),
              s(:send,
                s(:ivar, :@init_proc), :!)),
            s(:ivasgn, :@init_proc,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:restarg, :args)), nil)), nil),
          s(:self))),
      s(:def, :start,
        s(:args,
          s(:restarg, :init_args),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:ivar, :@running),
            s(:return,
              s(:nil)), nil),
          s(:send,
            s(:const, nil, :Tk_CBTBL), :[]=,
            s(:ivar, :@id),
            s(:self)),
          s(:ivasgn, :@do_loop,
            s(:ivar, :@loop_exec)),
          s(:ivasgn, :@current_pos,
            s(:int, 0)),
          s(:ivasgn, :@return_value,
            s(:nil)),
          s(:ivasgn, :@after_id,
            s(:nil)),
          s(:ivasgn, :@init_sleep,
            s(:int, 0)),
          s(:ivasgn, :@init_proc,
            s(:nil)),
          s(:ivasgn, :@init_args,
            s(:nil)),
          s(:lvasgn, :argc,
            s(:send,
              s(:lvar, :init_args), :size)),
          s(:if,
            s(:send,
              s(:lvar, :argc), :>,
              s(:int, 0)),
            s(:begin,
              s(:lvasgn, :sleep,
                s(:send,
                  s(:lvar, :init_args), :shift)),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :sleep), :!=,
                      s(:str, "idle")),
                    s(:send,
                      s(:lvar, :sleep), :!=,
                      s(:sym, :idle))),
                  s(:send,
                    s(:send,
                      s(:lvar, :sleep), :kind_of?,
                      s(:const, nil, :Integer)), :!)),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer or 'idle' for 1st argument")), nil),
              s(:ivasgn, :@init_sleep,
                s(:lvar, :sleep))), nil),
          s(:if,
            s(:send,
              s(:lvar, :argc), :>,
              s(:int, 1)),
            s(:ivasgn, :@init_proc,
              s(:send,
                s(:lvar, :init_args), :shift)), nil),
          s(:if,
            s(:send,
              s(:lvar, :argc), :>,
              s(:int, 2)),
            s(:ivasgn, :@init_args,
              s(:lvar, :init_args)), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@init_proc), :!),
              s(:lvar, :b)),
            s(:ivasgn, :@init_proc,
              s(:lvar, :b)), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@init_sleep), :>,
                s(:int, 0)),
              s(:send,
                s(:ivar, :@init_proc), :!)),
            s(:ivasgn, :@init_proc,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:restarg, :args)), nil)), nil),
          s(:ivasgn, :@current_sleep,
            s(:ivar, :@init_sleep)),
          s(:ivasgn, :@running,
            s(:true)),
          s(:if,
            s(:ivar, :@init_proc),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :TkComm), :_callback_entry?,
                    s(:ivar, :@init_proc)), :!),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "Argument '"),
                    s(:begin,
                      s(:ivar, :@init_proc)),
                    s(:str, "' need to be Proc"))), nil),
              s(:ivasgn, :@current_proc,
                s(:ivar, :@init_proc)),
              s(:send, nil, :set_callback,
                s(:ivar, :@init_sleep),
                s(:ivar, :@init_args)),
              s(:if,
                s(:ivar, :@in_callback),
                s(:ivasgn, :@set_next,
                  s(:false)), nil)),
            s(:send, nil, :set_next_callback,
              s(:ivar, :@init_args))),
          s(:self))),
      s(:def, :reset,
        s(:args,
          s(:restarg, :reset_args)),
        s(:begin,
          s(:if,
            s(:ivar, :@running),
            s(:send, nil, :restart), nil),
          s(:if,
            s(:ivar, :@init_proc),
            s(:ivasgn, :@return_value,
              s(:send,
                s(:ivar, :@init_proc), :call,
                s(:self))),
            s(:ivasgn, :@return_value,
              s(:nil))),
          s(:ivasgn, :@current_pos,
            s(:int, 0)),
          s(:ivasgn, :@current_args,
            s(:ivar, :@init_args)),
          s(:ivasgn, :@current_script,
            s(:array)),
          s(:if,
            s(:ivar, :@in_callback),
            s(:ivasgn, :@set_next,
              s(:false)), nil),
          s(:self))),
      s(:def, :restart,
        s(:args,
          s(:restarg, :restart_args),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:ivar, :@running),
            s(:send, nil, :cancel), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :restart_args), :empty?),
              s(:send,
                s(:lvar, :b), :!)),
            s(:send, nil, :start,
              s(:ivar, :@init_sleep),
              s(:ivar, :@init_proc),
              s(:splat,
                s(:ivar, :@init_args))),
            s(:send, nil, :start,
              s(:splat,
                s(:lvar, :restart_args)),
              s(:block_pass,
                s(:lvar, :b)))))),
      s(:def, :cancel,
        s(:args),
        s(:begin,
          s(:ivasgn, :@running,
            s(:false)),
          s(:send, nil, :__at_end__),
          s(:if,
            s(:ivar, :@after_id),
            s(:send, nil, :tk_call,
              s(:str, "after"),
              s(:str, "cancel"),
              s(:ivar, :@after_id)), nil),
          s(:ivasgn, :@after_id,
            s(:nil)),
          s(:send,
            s(:const, nil, :Tk_CBTBL), :delete,
            s(:ivar, :@id)),
          s(:self))),
      s(:alias,
        s(:sym, :stop),
        s(:sym, :cancel)),
      s(:def, :continue,
        s(:args,
          s(:optarg, :wait,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:ivar, :@running),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "is already running")), nil),
          s(:if,
            s(:send,
              s(:ivar, :@current_script), :empty?),
            s(:return,
              s(:send, nil, :restart)), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :sleep),
              s(:lvasgn, :cmd)),
            s(:ivar, :@current_script)),
          s(:if,
            s(:lvar, :cmd), nil,
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "no procedure to continue"))),
          s(:if,
            s(:lvar, :wait),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :wait), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer for 1st argument"))),
              s(:lvasgn, :sleep,
                s(:lvar, :wait))), nil),
          s(:send,
            s(:const, nil, :Tk_CBTBL), :[]=,
            s(:ivar, :@id),
            s(:self)),
          s(:ivasgn, :@running,
            s(:true)),
          s(:ivasgn, :@after_id,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "after"),
              s(:lvar, :sleep),
              s(:lvar, :cmd))),
          s(:self))),
      s(:def, :skip,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@running), nil,
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "is not running now"))),
          s(:send, nil, :cancel),
          s(:send,
            s(:const, nil, :Tk_CBTBL), :[]=,
            s(:ivar, :@id),
            s(:self)),
          s(:ivasgn, :@running,
            s(:true)),
          s(:send, nil, :set_next_callback,
            s(:ivar, :@current_args)),
          s(:self))),
      s(:def, :info,
        s(:args),
        s(:if,
          s(:ivar, :@after_id),
          s(:begin,
            s(:lvasgn, :inf,
              s(:send, nil, :tk_split_list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "after"),
                  s(:str, "info"),
                  s(:ivar, :@after_id)))),
            s(:array,
              s(:send,
                s(:const, nil, :Tk_CBTBL), :[],
                s(:send,
                  s(:send,
                    s(:lvar, :inf), :[],
                    s(:int, 0)), :[],
                  s(:int, 1))),
              s(:send,
                s(:lvar, :inf), :[],
                s(:int, 1)))),
          s(:nil))),
      s(:def, :at_end,
        s(:args,
          s(:restarg, :arg),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :arg), :empty?),
            s(:if,
              s(:lvar, :b),
              s(:ivasgn, :@at_end_proc,
                s(:lvar, :b)),
              s(:return,
                s(:ivar, :@at_end_proc))),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :arg), :length), :!=,
                    s(:int, 1)),
                  s(:lvar, :b)),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "wrong number of arguments")), nil),
              s(:ivasgn, :@at_end_proc,
                s(:send,
                  s(:lvar, :arg), :[],
                  s(:int, 0))))),
          s(:self))),
      s(:def, :wait,
        s(:args,
          s(:optarg, :on_thread,
            s(:true)),
          s(:optarg, :check_root,
            s(:false))),
        s(:begin,
          s(:if,
            s(:ivar, :@running), nil,
            s(:if,
              s(:send,
                s(:ivar, :@return_value), :kind_of?,
                s(:const, nil, :Exception)),
              s(:send, nil, :fail,
                s(:ivar, :@return_value)),
              s(:return,
                s(:ivar, :@return_value)))),
          s(:send,
            s(:ivar, :@wait_var), :wait,
            s(:lvar, :on_thread),
            s(:lvar, :check_root)),
          s(:if,
            s(:send,
              s(:ivar, :@return_value), :kind_of?,
              s(:const, nil, :Exception)),
            s(:send, nil, :fail,
              s(:ivar, :@return_value)),
            s(:ivar, :@return_value)))),
      s(:def, :eventloop_wait,
        s(:args,
          s(:optarg, :check_root,
            s(:false))),
        s(:send, nil, :wait,
          s(:false),
          s(:lvar, :check_root))),
      s(:def, :thread_wait,
        s(:args,
          s(:optarg, :check_root,
            s(:false))),
        s(:send, nil, :wait,
          s(:true),
          s(:lvar, :check_root))),
      s(:def, :tkwait,
        s(:args,
          s(:optarg, :on_thread,
            s(:true))),
        s(:send, nil, :wait,
          s(:lvar, :on_thread),
          s(:true))),
      s(:def, :eventloop_tkwait,
        s(:args),
        s(:send, nil, :wait,
          s(:false),
          s(:true))),
      s(:def, :thread_tkwait,
        s(:args),
        s(:send, nil, :wait,
          s(:true),
          s(:true))))),
  s(:casgn, nil, :TkAfter,
    s(:const, nil, :TkTimer)),
  s(:class,
    s(:const, nil, :TkRTTimer),
    s(:const, nil, :TkTimer),
    s(:begin,
      s(:casgn, nil, :DEFAULT_OFFSET_LIST_SIZE,
        s(:int, 5)),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :b)),
        s(:begin,
          s(:super,
            s(:splat,
              s(:lvar, :args)),
            s(:block_pass,
              s(:lvar, :b))),
          s(:ivasgn, :@offset_list,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:const, nil, :DEFAULT_OFFSET_LIST_SIZE)),
              s(:args),
              s(:array,
                s(:int, 0),
                s(:int, 0)))),
          s(:ivasgn, :@offset_s,
            s(:int, 0)),
          s(:ivasgn, :@offset_u,
            s(:int, 0)),
          s(:ivasgn, :@est_time,
            s(:nil)))),
      s(:def, :start,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:ivar, :@running),
            s(:return,
              s(:nil)), nil),
          s(:ivasgn, :@est_time,
            s(:nil)),
          s(:ivasgn, :@cb_start_time,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:super,
            s(:splat,
              s(:lvar, :args)),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :cancel,
        s(:args),
        s(:begin,
          s(:super),
          s(:ivasgn, :@est_time,
            s(:nil)),
          s(:ivasgn, :@cb_start_time,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:self))),
      s(:alias,
        s(:sym, :stop),
        s(:sym, :cancel)),
      s(:def, :continue,
        s(:args,
          s(:optarg, :wait,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:ivar, :@running),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "is already running")), nil),
          s(:ivasgn, :@cb_start_time,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:super,
            s(:lvar, :wait)))),
      s(:def, :set_interval,
        s(:args,
          s(:arg, :interval)),
        s(:begin,
          s(:super,
            s(:lvar, :interval)),
          s(:ivasgn, :@est_time,
            s(:nil)))),
      s(:def, :_offset_ave,
        s(:args),
        s(:begin,
          s(:lvasgn, :size,
            s(:int, 0)),
          s(:lvasgn, :d_sec,
            s(:int, 0)),
          s(:lvasgn, :d_usec,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:ivar, :@offset_list), :each_with_index),
            s(:args,
              s(:arg, :offset),
              s(:arg, :idx)),
            s(:begin,
              s(:lvasgn, :weight,
                s(:send,
                  s(:lvar, :idx), :+,
                  s(:int, 1))),
              s(:op_asgn,
                s(:lvasgn, :size), :+,
                s(:lvar, :weight)),
              s(:op_asgn,
                s(:lvasgn, :d_sec), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :offset), :[],
                    s(:int, 0)), :*,
                  s(:lvar, :weight))),
              s(:op_asgn,
                s(:lvasgn, :d_usec), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :offset), :[],
                    s(:int, 1)), :*,
                  s(:lvar, :weight))))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :offset_s),
              s(:lvasgn, :mod)),
            s(:send,
              s(:lvar, :d_sec), :divmod,
              s(:lvar, :size))),
          s(:lvasgn, :offset_u,
            s(:send,
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :mod), :*,
                        s(:int, 1000000)), :+,
                      s(:lvar, :d_usec))), :/,
                  s(:send,
                    s(:lvar, :size), :to_f))), :round)),
          s(:array,
            s(:lvar, :offset_s),
            s(:lvar, :offset_u)))),
      s(:send, nil, :private,
        s(:sym, :_offset_ave)),
      s(:def, :set_next_callback,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:or,
                s(:send,
                  s(:ivar, :@running), :==,
                  s(:false)),
                s(:send,
                  s(:ivar, :@proc_max), :==,
                  s(:int, 0))),
              s(:send,
                s(:ivar, :@do_loop), :==,
                s(:int, 0))),
            s(:begin,
              s(:send,
                s(:const, nil, :Tk_CBTBL), :delete,
                s(:ivar, :@id)),
              s(:ivasgn, :@running,
                s(:false)),
              s(:send, nil, :__at_end__),
              s(:return)), nil),
          s(:if,
            s(:send,
              s(:ivar, :@current_pos), :>=,
              s(:ivar, :@proc_max)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@do_loop), :<,
                  s(:int, 0)),
                s(:send,
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@do_loop), :-,
                      s(:int, 1))), :>,
                  s(:int, 0))),
              s(:ivasgn, :@current_pos,
                s(:int, 0)),
              s(:begin,
                s(:send,
                  s(:const, nil, :Tk_CBTBL), :delete,
                  s(:ivar, :@id)),
                s(:ivasgn, :@running,
                  s(:false)),
                s(:send, nil, :__at_end__),
                s(:return))), nil),
          s(:ivasgn, :@current_args,
            s(:lvar, :args)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :cmd),
              s(:splat,
                s(:lvasgn, :cmd_args))),
            s(:send,
              s(:ivar, :@loop_proc), :[],
              s(:ivar, :@current_pos))),
          s(:op_asgn,
            s(:ivasgn, :@current_pos), :+,
            s(:int, 1)),
          s(:ivasgn, :@current_proc,
            s(:lvar, :cmd)),
          s(:masgn,
            s(:mlhs,
              s(:ivasgn, :@offset_s),
              s(:ivasgn, :@offset_u)),
            s(:send, nil, :_offset_ave)),
          s(:if,
            s(:send,
              s(:const, nil, :TkComm), :_callback_entry?,
              s(:ivar, :@sleep_time)),
            s(:lvasgn, :sleep,
              s(:send,
                s(:ivar, :@sleep_time), :call,
                s(:self))),
            s(:lvasgn, :sleep,
              s(:ivar, :@sleep_time))),
          s(:if,
            s(:ivar, :@est_time),
            s(:ivasgn, :@est_time,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:send,
                  s(:ivar, :@est_time), :to_i),
                s(:send,
                  s(:send,
                    s(:ivar, :@est_time), :usec), :+,
                  s(:send,
                    s(:lvar, :sleep), :*,
                    s(:int, 1000))))),
            s(:ivasgn, :@est_time,
              s(:send,
                s(:const, nil, :Time), :at,
                s(:send,
                  s(:ivar, :@cb_start_time), :to_i),
                s(:send,
                  s(:send,
                    s(:ivar, :@cb_start_time), :usec), :+,
                  s(:send,
                    s(:lvar, :sleep), :*,
                    s(:int, 1000)))))),
          s(:lvasgn, :now,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :real_sleep,
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@est_time), :to_i), :-,
                          s(:send,
                            s(:lvar, :now), :to_i)), :+,
                        s(:ivar, :@offset_s))), :*,
                    s(:float, 1000.0)), :+,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@est_time), :usec), :-,
                          s(:send,
                            s(:lvar, :now), :usec)), :+,
                        s(:ivar, :@offset_u))), :/,
                    s(:float, 1000.0)))), :round)),
          s(:if,
            s(:send,
              s(:lvar, :real_sleep), :<=,
              s(:int, 0)),
            s(:begin,
              s(:lvasgn, :real_sleep,
                s(:int, 0)),
              s(:ivasgn, :@offset_s,
                s(:send,
                  s(:lvar, :now), :to_i)),
              s(:ivasgn, :@offset_u,
                s(:send,
                  s(:lvar, :now), :usec))), nil),
          s(:ivasgn, :@current_sleep,
            s(:lvar, :real_sleep)),
          s(:send, nil, :set_callback,
            s(:lvar, :real_sleep),
            s(:lvar, :cmd_args)))),
      s(:def, :cb_call,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@est_time),
            s(:begin,
              s(:send,
                s(:ivar, :@offset_list), :shift),
              s(:ivasgn, :@cb_start_time,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:if,
                s(:send,
                  s(:ivar, :@current_sleep), :==,
                  s(:int, 0)),
                s(:send,
                  s(:ivar, :@offset_list), :push,
                  s(:array,
                    s(:send,
                      s(:ivar, :@offset_s), :-,
                      s(:send,
                        s(:ivar, :@cb_start_time), :to_i)),
                    s(:send,
                      s(:ivar, :@offset_u), :-,
                      s(:send,
                        s(:ivar, :@cb_start_time), :usec)))),
                s(:send,
                  s(:ivar, :@offset_list), :push,
                  s(:array,
                    s(:send,
                      s(:ivar, :@offset_s), :+,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@est_time), :to_i), :-,
                          s(:send,
                            s(:ivar, :@cb_start_time), :to_i)))),
                    s(:send,
                      s(:ivar, :@offset_u), :+,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@est_time), :usec), :-,
                          s(:send,
                            s(:ivar, :@cb_start_time), :usec)))))))), nil),
          s(:send,
            s(:ivar, :@cb_cmd), :call))))))
