s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:class,
        s(:const, nil, :EncodedString),
        s(:const, nil, :String),
        s(:begin,
          s(:casgn, nil, :Encoding,
            s(:nil)),
          s(:defs,
            s(:self), :subst_utf_backslash,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:const, nil, :TclTkLib), :_subst_UTF_backslash,
              s(:lvar, :str))),
          s(:defs,
            s(:self), :utf_backslash,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:self), :subst_utf_backslash,
              s(:lvar, :str))),
          s(:defs,
            s(:self), :subst_tk_backslash,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:const, nil, :TclTkLib), :_subst_Tcl_backslash,
              s(:lvar, :str))),
          s(:defs,
            s(:self), :utf_to_backslash_sequence,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :unpack,
                    s(:str, "U*")), :collect),
                s(:args,
                  s(:arg, :c)),
                s(:if,
                  s(:send,
                    s(:lvar, :c), :<=,
                    s(:int, 255)),
                  s(:send,
                    s(:lvar, :c), :chr),
                  s(:send, nil, :format,
                    s(:str, "\\u%X"),
                    s(:lvar, :c)))), :join,
              s(:str, ""))),
          s(:defs,
            s(:self), :utf_to_backslash,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:self), :utf_to_backslash_sequence,
              s(:lvar, :str))),
          s(:defs,
            s(:self), :to_backslash_sequence,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :unpack,
                    s(:str, "U*")), :collect),
                s(:args,
                  s(:arg, :c)),
                s(:if,
                  s(:send,
                    s(:lvar, :c), :<=,
                    s(:int, 31)),
                  s(:case,
                    s(:lvar, :c),
                    s(:when,
                      s(:int, 7),
                      s(:str, "\\a")),
                    s(:when,
                      s(:int, 8),
                      s(:str, "\\b")),
                    s(:when,
                      s(:int, 9),
                      s(:str, "\\t")),
                    s(:when,
                      s(:int, 10),
                      s(:str, "\\n")),
                    s(:when,
                      s(:int, 11),
                      s(:str, "\\v")),
                    s(:when,
                      s(:int, 12),
                      s(:str, "\\f")),
                    s(:when,
                      s(:int, 13),
                      s(:str, "\\r")),
                    s(:send, nil, :format,
                      s(:str, "\\x%02X"),
                      s(:lvar, :c))),
                  s(:if,
                    s(:send,
                      s(:lvar, :c), :<=,
                      s(:int, 255)),
                    s(:send,
                      s(:lvar, :c), :chr),
                    s(:send, nil, :format,
                      s(:str, "\\u%X"),
                      s(:lvar, :c))))), :join,
              s(:str, ""))),
          s(:defs,
            s(:self), :new_with_utf_backslash,
            s(:args,
              s(:arg, :str),
              s(:optarg, :enc,
                s(:nil))),
            s(:send,
              s(:send,
                s(:self), :new,
                s(:str, ""),
                s(:lvar, :enc)), :replace,
              s(:send,
                s(:self), :subst_utf_backslash,
                s(:lvar, :str)))),
          s(:defs,
            s(:self), :new_without_utf_backslash,
            s(:args,
              s(:arg, :str),
              s(:optarg, :enc,
                s(:nil))),
            s(:send,
              s(:send,
                s(:self), :new,
                s(:str, ""),
                s(:lvar, :enc)), :replace,
              s(:lvar, :str))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :str),
              s(:optarg, :enc,
                s(:nil))),
            s(:begin,
              s(:super,
                s(:lvar, :str)),
              s(:or_asgn,
                s(:lvasgn, :enc),
                s(:if,
                  s(:begin,
                    s(:const,
                      s(:send,
                        s(:self), :class), :Encoding)),
                  s(:const,
                    s(:send,
                      s(:self), :class), :Encoding),
                  s(:begin,
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Tk), :encoding)),
                      s(:send,
                        s(:const, nil, :Tk), :encoding),
                      s(:send,
                        s(:const, nil, :Tk), :encoding_system))))),
              s(:if,
                s(:const,
                  s(:const, nil, :TkCore), :WITH_ENCODING),
                s(:begin,
                  s(:if,
                    s(:lvasgn, :encobj,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_obj,
                        s(:lvar, :enc))), nil,
                    s(:send, nil, :fail,
                      s(:const, nil, :ArgumentError),
                      s(:dstr,
                        s(:str, "unsupported Tk encoding '"),
                        s(:begin,
                          s(:lvar, :enc)),
                        s(:str, "'")))),
                  s(:send,
                    s(:self), :force_encoding,
                    s(:lvar, :encobj))),
                s(:ivasgn, :@encoding,
                  s(:lvar, :enc))))),
          s(:if,
            s(:const,
              s(:const, nil, :TkCore), :WITH_ENCODING),
            s(:begin,
              s(:alias,
                s(:sym, :encoding_obj),
                s(:sym, :encoding)),
              s(:alias,
                s(:sym, :__encoding),
                s(:sym, :encoding)),
              s(:def, :encoding,
                s(:args),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                  s(:super)))),
            s(:begin,
              s(:def, :encoding,
                s(:args),
                s(:ivar, :@encoding)),
              s(:alias,
                s(:sym, :encoding_obj),
                s(:sym, :encoding)))),
          s(:if,
            s(:const,
              s(:const, nil, :TkCore), :WITH_ENCODING),
            s(:begin,
              s(:alias,
                s(:sym, :__instance_variable_get),
                s(:sym, :instance_variable_get)),
              s(:alias,
                s(:sym, :__instance_variable_set),
                s(:sym, :instance_variable_set)),
              s(:alias,
                s(:sym, :__instance_eval),
                s(:sym, :instance_eval)),
              s(:alias,
                s(:sym, :__instance_variables),
                s(:sym, :instance_variables)),
              s(:def, :instance_variable_get,
                s(:args,
                  s(:arg, :key)),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :key), :to_s), :==,
                      s(:str, "@encoding"))),
                  s(:send,
                    s(:self), :encoding),
                  s(:super,
                    s(:lvar, :key)))),
              s(:def, :instance_variable_set,
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :key), :to_s), :==,
                      s(:str, "@encoding"))),
                  s(:begin,
                    s(:if,
                      s(:lvar, :value),
                      s(:send,
                        s(:self), :force_encoding,
                        s(:lvar, :value)),
                      s(:send,
                        s(:self), :force_encoding,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :UNKNOWN))),
                    s(:lvar, :value)),
                  s(:super,
                    s(:lvar, :key),
                    s(:lvar, :value)))),
              s(:def, :instance_eval,
                s(:args,
                  s(:restarg, :args),
                  s(:blockarg, :b)),
                s(:begin,
                  s(:lvasgn, :old_enc,
                    s(:ivasgn, :@encoding,
                      s(:send,
                        s(:self), :encoding))),
                  s(:lvasgn, :ret,
                    s(:super,
                      s(:splat,
                        s(:lvar, :args)),
                      s(:block_pass,
                        s(:lvar, :b)))),
                  s(:if,
                    s(:ivar, :@encoding),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:ivar, :@encoding), :!=,
                          s(:lvar, :old_enc)),
                        s(:send,
                          s(:self), :force_encoding,
                          s(:ivar, :@encoding)), nil),
                      s(:send, nil, :remove_instance_variable,
                        s(:sym, :@encoding))),
                    s(:kwbegin,
                      s(:rescue,
                        s(:begin,
                          s(:send, nil, :remove_instance_variable,
                            s(:sym, :@encoding)),
                          s(:send,
                            s(:self), :force_encoding,
                            s(:send,
                              s(:const, nil, :Tk), :encoding))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :NameError)), nil, nil), nil))),
                  s(:lvar, :ret)))), nil),
          s(:def, :instance_variables,
            s(:args),
            s(:begin,
              s(:lvasgn, :ret,
                s(:super)),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:sym, :@encoding)),
              s(:lvar, :ret))))),
      s(:class,
        s(:const, nil, :BinaryString),
        s(:const, nil, :EncodedString),
        s(:casgn, nil, :Encoding,
          s(:send,
            s(:str, "binary"), :freeze))),
      s(:class,
        s(:const, nil, :UTF8_String),
        s(:const, nil, :EncodedString),
        s(:begin,
          s(:casgn, nil, :Encoding,
            s(:send,
              s(:str, "utf-8"), :freeze)),
          s(:defs,
            s(:self), :new,
            s(:args,
              s(:arg, :str)),
            s(:super,
              s(:send,
                s(:self), :subst_utf_backslash,
                s(:lvar, :str)))),
          s(:def, :to_backslash_sequence,
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :Tk), :EncodedString), :utf_to_backslash_sequence,
              s(:self))),
          s(:alias,
            s(:sym, :to_backslash),
            s(:sym, :to_backslash_sequence)))))))
