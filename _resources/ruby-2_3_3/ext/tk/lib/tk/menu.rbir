s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/itemconfig")),
  s(:send, nil, :require,
    s(:str, "tk/menuspec")),
  s(:module,
    s(:const, nil, :TkMenuEntryConfig),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :__item_cget_cmd,
        s(:args,
          s(:arg, :id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:str, "entrycget"),
          s(:lvar, :id))),
      s(:send, nil, :private,
        s(:sym, :__item_cget_cmd)),
      s(:def, :__item_config_cmd,
        s(:args,
          s(:arg, :id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:str, "entryconfigure"),
          s(:lvar, :id))),
      s(:send, nil, :private,
        s(:sym, :__item_config_cmd)),
      s(:def, :__item_strval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:super,
            s(:lvar, :id)), :<<,
          s(:str, "selectcolor"))),
      s(:send, nil, :private,
        s(:sym, :__item_strval_optkeys)),
      s(:def, :__item_listval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:array)),
      s(:send, nil, :private,
        s(:sym, :__item_listval_optkeys)),
      s(:def, :__item_val2ruby_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:super,
            s(:lvar, :id)), :update,
          s(:hash,
            s(:pair,
              s(:str, "menu"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :i),
                  s(:arg, :v)),
                s(:send, nil, :window,
                  s(:lvar, :v))))))),
      s(:send, nil, :private,
        s(:sym, :__item_val2ruby_optkeys)),
      s(:alias,
        s(:sym, :entrycget_tkstring),
        s(:sym, :itemcget_tkstring)),
      s(:alias,
        s(:sym, :entrycget),
        s(:sym, :itemcget)),
      s(:alias,
        s(:sym, :entrycget_strict),
        s(:sym, :itemcget_strict)),
      s(:alias,
        s(:sym, :entryconfigure),
        s(:sym, :itemconfigure)),
      s(:alias,
        s(:sym, :entryconfiginfo),
        s(:sym, :itemconfiginfo)),
      s(:alias,
        s(:sym, :current_entryconfiginfo),
        s(:sym, :current_itemconfiginfo)),
      s(:send, nil, :private,
        s(:sym, :itemcget_tkstring),
        s(:sym, :itemcget),
        s(:sym, :itemcget_strict)),
      s(:send, nil, :private,
        s(:sym, :itemconfigure),
        s(:sym, :itemconfiginfo),
        s(:sym, :current_itemconfiginfo)))),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :Menu),
    s(:const, nil, :TkWindow),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Wm)),
      s(:send, nil, :include,
        s(:const, nil, :TkMenuEntryConfig)),
      s(:send, nil, :extend,
        s(:const, nil, :TkMenuSpec)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "menu"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Menu"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:super), :<<,
            s(:str, "selectcolor")), :<<,
          s(:str, "title"))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:super), :<<,
          s(:str, "tearoff"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:defs,
        s(:self), :new_menuspec,
        s(:args,
          s(:arg, :menu_spec),
          s(:optarg, :parent,
            s(:nil)),
          s(:optarg, :tearoff,
            s(:false)),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :parent), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:lvar, :parent))),
              s(:lvasgn, :parent,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "parent"))),
              s(:lvasgn, :tearoff,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "tearoff")))),
            s(:if,
              s(:send,
                s(:lvar, :tearoff), :kind_of?,
                s(:const, nil, :Hash)),
              s(:begin,
                s(:lvasgn, :keys,
                  s(:send, nil, :_symbolkey2str,
                    s(:lvar, :tearoff))),
                s(:lvasgn, :tearoff,
                  s(:send,
                    s(:lvar, :keys), :delete,
                    s(:str, "tearoff")))),
              s(:if,
                s(:lvar, :keys),
                s(:lvasgn, :keys,
                  s(:send, nil, :_symbolkey2str,
                    s(:lvar, :keys))),
                s(:lvasgn, :keys,
                  s(:hash))))),
          s(:lvasgn, :widgetname,
            s(:send,
              s(:lvar, :keys), :delete,
              s(:str, "widgetname"))),
          s(:send, nil, :_create_menu,
            s(:lvar, :parent),
            s(:lvar, :menu_spec),
            s(:lvar, :widgetname),
            s(:lvar, :tearoff),
            s(:lvar, :keys)))),
      s(:def, :tagid,
        s(:args,
          s(:arg, :id)),
        s(:send, nil, :_get_eval_string,
          s(:lvar, :id))),
      s(:def, :activate,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "activate"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :add,
        s(:args,
          s(:arg, :type),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "add"),
            s(:lvar, :type),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:self))),
      s(:def, :add_cascade,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :add,
          s(:str, "cascade"),
          s(:lvar, :keys))),
      s(:def, :add_checkbutton,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :add,
          s(:str, "checkbutton"),
          s(:lvar, :keys))),
      s(:def, :add_command,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :add,
          s(:str, "command"),
          s(:lvar, :keys))),
      s(:def, :add_radiobutton,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :add,
          s(:str, "radiobutton"),
          s(:lvar, :keys))),
      s(:def, :add_separator,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :add,
          s(:str, "separator"),
          s(:lvar, :keys))),
      s(:def, :clone_menu,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :TkWindow)),
            s(:lvasgn, :parent,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :parent,
              s(:self))),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :String)),
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :Symbol))),
            s(:lvasgn, :type,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :type,
              s(:const, nil, :None))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:lvasgn, :keys,
              s(:send, nil, :_symbolkey2str,
                s(:send,
                  s(:lvar, :args), :shift))),
            s(:lvasgn, :keys,
              s(:hash))),
          s(:if,
            s(:send,
              s(:lvar, :keys), :has_key?,
              s(:str, "parent")),
            s(:lvasgn, :parent,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "parent"))), nil),
          s(:if,
            s(:send,
              s(:lvar, :keys), :has_key?,
              s(:str, "type")),
            s(:lvasgn, :type,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "type"))), nil),
          s(:if,
            s(:send,
              s(:lvar, :keys), :empty?),
            s(:send,
              s(:const,
                s(:const, nil, :Tk), :MenuClone), :new,
              s(:self),
              s(:lvar, :parent),
              s(:lvar, :type)),
            s(:send,
              s(:const,
                s(:const, nil, :Tk), :MenuClone), :new,
              s(:self),
              s(:lvar, :parent),
              s(:lvar, :type),
              s(:lvar, :keys))))),
      s(:def, :index,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:lvasgn, :ret,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "index"),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :idx)))),
          s(:if,
            s(:begin,
              s(:send,
                s(:lvar, :ret), :==,
                s(:str, "none"))),
            s(:nil),
            s(:send, nil, :number,
              s(:lvar, :ret))))),
      s(:def, :invoke,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :_fromUTF8,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "invoke"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))),
      s(:def, :insert,
        s(:args,
          s(:arg, :index),
          s(:arg, :type),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "insert"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index)),
            s(:lvar, :type),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:self))),
      s(:def, :delete,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :last),
            s(:send, nil, :tk_send_without_enc,
              s(:str, "delete"),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :first)),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :last))),
            s(:send, nil, :tk_send_without_enc,
              s(:str, "delete"),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :first)))),
          s(:self))),
      s(:def, :popup,
        s(:args,
          s(:arg, :x),
          s(:arg, :y),
          s(:optarg, :index,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :index),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "tk_popup"),
              s(:send, nil, :path),
              s(:lvar, :x),
              s(:lvar, :y),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :index))),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "tk_popup"),
              s(:send, nil, :path),
              s(:lvar, :x),
              s(:lvar, :y))),
          s(:self))),
      s(:def, :post,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :_fromUTF8,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "post"),
            s(:lvar, :x),
            s(:lvar, :y)))),
      s(:def, :postcascade,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "postcascade"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :postcommand,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :configure_cmd,
            s(:str, "postcommand"),
            s(:lvar, :cmd)),
          s(:self))),
      s(:def, :set_focus,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk_menuSetFocus"),
            s(:send, nil, :path)),
          s(:self))),
      s(:def, :tearoffcommand,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :configure_cmd,
            s(:str, "tearoffcommand"),
            s(:lvar, :cmd)),
          s(:self))),
      s(:def, :menutype,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :tk_send_without_enc,
          s(:str, "type"),
          s(:send, nil, :_get_eval_enc_str,
            s(:lvar, :index)))),
      s(:def, :unpost,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "unpost")),
          s(:self))),
      s(:def, :xposition,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "xposition"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))),
      s(:def, :yposition,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "yposition"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))))),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :Menu),
    s(:sym, :TkMenu)),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Menu), :TkInternalFunction), nil),
  s(:sclass,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Menu), :TkInternalFunction),
    s(:begin,
      s(:def, :next_menu,
        s(:args,
          s(:arg, :menu),
          s(:optarg, :dir,
            s(:str, "next"))),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:lvar, :dir), :to_s)),
          s(:case,
            s(:lvar, :dir),
            s(:when,
              s(:str, "next"),
              s(:str, "forward"),
              s(:str, "down"),
              s(:lvasgn, :dir,
                s(:str, "right"))),
            s(:when,
              s(:str, "previous"),
              s(:str, "backward"),
              s(:str, "up"),
              s(:lvasgn, :dir,
                s(:str, "left"))), nil),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tk::MenuNextMenu"),
            s(:lvar, :menu),
            s(:lvar, :dir)))),
      s(:def, :next_entry,
        s(:args,
          s(:arg, :menu),
          s(:arg, :delta)),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tk::MenuNextEntry"),
          s(:lvar, :menu),
          s(:lvar, :delta))))),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :MenuClone),
    s(:const,
      s(:const, nil, :Tk), :Menu),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :src_menu),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :widgetname,
            s(:nil)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :TkWindow)),
            s(:lvasgn, :parent,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :parent,
              s(:lvar, :src_menu))),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :String)),
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :Symbol))),
            s(:lvasgn, :type,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :type,
              s(:const, nil, :None))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:send,
                    s(:lvar, :args), :shift))),
              s(:if,
                s(:send,
                  s(:lvar, :keys), :has_key?,
                  s(:str, "parent")),
                s(:lvasgn, :parent,
                  s(:send,
                    s(:lvar, :keys), :delete,
                    s(:str, "parent"))), nil),
              s(:lvasgn, :widgetname,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "widgetname"))),
              s(:if,
                s(:send,
                  s(:lvar, :keys), :has_key?,
                  s(:str, "type")),
                s(:lvasgn, :type,
                  s(:send,
                    s(:lvar, :keys), :delete,
                    s(:str, "type"))), nil)),
            s(:lvasgn, :keys,
              s(:nil))),
          s(:ivasgn, :@src_menu,
            s(:lvar, :src_menu)),
          s(:ivasgn, :@parent,
            s(:lvar, :parent)),
          s(:ivasgn, :@type,
            s(:lvar, :type)),
          s(:send, nil, :install_win,
            s(:send,
              s(:ivar, :@parent), :path),
            s(:lvar, :widgetname)),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:ivar, :@src_menu), :path),
            s(:str, "clone"),
            s(:ivar, :@path),
            s(:ivar, :@type)),
          s(:if,
            s(:and,
              s(:lvar, :keys),
              s(:send,
                s(:send,
                  s(:lvar, :keys), :empty?), :!)),
            s(:send, nil, :configure,
              s(:lvar, :keys)), nil))),
      s(:def, :source_menu,
        s(:args),
        s(:ivar, :@src_menu)))),
  s(:casgn,
    s(:const, nil, :Tk), :CloneMenu,
    s(:const,
      s(:const, nil, :Tk), :MenuClone)),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :MenuClone),
    s(:sym, :TkMenuClone),
    s(:sym, :TkCloneMenu)),
  s(:module,
    s(:const,
      s(:const, nil, :Tk), :SystemMenu),
    s(:def, :initialize,
      s(:args,
        s(:arg, :parent),
        s(:optarg, :keys,
          s(:nil))),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :parent), :kind_of?,
            s(:const, nil, :Hash)),
          s(:begin,
            s(:lvasgn, :keys,
              s(:send, nil, :_symbolkey2str,
                s(:lvar, :parent))),
            s(:lvasgn, :parent,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "parent")))), nil),
        s(:ivasgn, :@path,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :parent), :path), :+,
              s(:str, ".")), :+,
            s(:const,
              s(:send,
                s(:self), :class), :SYSMENU_NAME))),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :tk_windows), :[]=,
          s(:ivar, :@path),
          s(:self)),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:self), :method,
                s(:sym, :create_self)), :arity), :==,
            s(:int, 0)),
          s(:begin,
            s(:if,
              s(:gvar, :$DEBUG),
              s(:send, nil, :p,
                s(:str, "create_self has no arg")), nil),
            s(:send, nil, :create_self),
            s(:if,
              s(:lvar, :keys),
              s(:send, nil, :configure,
                s(:lvar, :keys)), nil)),
          s(:begin,
            s(:if,
              s(:gvar, :$DEBUG),
              s(:send, nil, :p,
                s(:str, "create_self has an arg")), nil),
            s(:send, nil, :create_self,
              s(:lvar, :keys))))))),
  s(:casgn, nil, :TkSystemMenu,
    s(:const,
      s(:const, nil, :Tk), :SystemMenu)),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :SysMenu_Help),
    s(:const,
      s(:const, nil, :Tk), :Menu),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :SystemMenu)),
      s(:casgn, nil, :SYSMENU_NAME,
        s(:str, "help")))),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :SysMenu_Help),
    s(:sym, :TkSysMenu_Help)),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :SysMenu_System),
    s(:const,
      s(:const, nil, :Tk), :Menu),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :SystemMenu)),
      s(:casgn, nil, :SYSMENU_NAME,
        s(:str, "system")))),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :SysMenu_System),
    s(:sym, :TkSysMenu_System)),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :SysMenu_Apple),
    s(:const,
      s(:const, nil, :Tk), :Menu),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :SystemMenu)),
      s(:casgn, nil, :SYSMENU_NAME,
        s(:str, "apple")))),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :SysMenu_Apple),
    s(:sym, :TkSysMenu_Apple)),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :Menubutton),
    s(:const,
      s(:const, nil, :Tk), :Label),
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "menubutton"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Menubutton"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:if,
            s(:send,
              s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :tk_call_without_enc,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:self), :class), :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:ivar, :@path),
                  s(:splat,
                    s(:send, nil, :hash_kv,
                      s(:lvar, :keys),
                      s(:true)))),
                s(:resbody, nil, nil,
                  s(:begin,
                    s(:send, nil, :tk_call_without_enc,
                      s(:send,
                        s(:const,
                          s(:send,
                            s(:self), :class), :TkCommandNames), :[],
                        s(:int, 0)),
                      s(:ivar, :@path)),
                    s(:lvasgn, :keys,
                      s(:send, nil, :__check_available_configure_options,
                        s(:lvar, :keys))),
                    s(:if,
                      s(:send,
                        s(:lvar, :keys), :empty?), nil,
                      s(:begin,
                        s(:rescue,
                          s(:send, nil, :tk_call_without_enc,
                            s(:str, "destroy"),
                            s(:ivar, :@path)),
                          s(:resbody, nil, nil,
                            s(:nil)), nil),
                        s(:send, nil, :tk_call_without_enc,
                          s(:send,
                            s(:const,
                              s(:send,
                                s(:self), :class), :TkCommandNames), :[],
                            s(:int, 0)),
                          s(:ivar, :@path),
                          s(:splat,
                            s(:send, nil, :hash_kv,
                              s(:lvar, :keys),
                              s(:true)))))))), nil)),
            s(:send, nil, :tk_call_without_enc,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :TkCommandNames), :[],
                s(:int, 0)),
              s(:ivar, :@path),
              s(:splat,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys),
                  s(:true))))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:super), :<<,
          s(:str, "indicatoron"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)))),
  s(:casgn,
    s(:const, nil, :Tk), :MenuButton,
    s(:const,
      s(:const, nil, :Tk), :Menubutton)),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :Menubutton),
    s(:sym, :TkMenubutton),
    s(:sym, :TkMenuButton)),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :OptionMenubutton),
    s(:const,
      s(:const, nil, :Tk), :Menubutton),
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "tk_optionMenu"), :freeze)), :freeze)),
      s(:class,
        s(:const, nil, :OptionMenu),
        s(:const, nil, :TkMenu),
        s(:def, :initialize,
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:ivasgn, :@path,
              s(:lvar, :path)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :tk_windows), :[]=,
              s(:ivar, :@path),
              s(:self))))),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :keys,
            s(:hash)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, -1)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:lvasgn, :keys,
              s(:send,
                s(:lvar, :args), :pop)), nil),
          s(:lvasgn, :keys,
            s(:send, nil, :_symbolkey2str,
              s(:lvar, :keys))),
          s(:lvasgn, :parent,
            s(:nil)),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :args), :empty?), :!),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)), :kind_of?,
                    s(:const, nil, :TkWindow)),
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)), :==,
                    s(:nil))))),
            s(:begin,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "parent")),
              s(:lvasgn, :parent,
                s(:send,
                  s(:lvar, :args), :shift))),
            s(:lvasgn, :parent,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "parent")))),
          s(:ivasgn, :@variable,
            s(:nil)),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :args), :empty?), :!),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)), :kind_of?,
                    s(:const, nil, :TkVariable)),
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)), :==,
                    s(:nil))))),
            s(:begin,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "variable")),
              s(:ivasgn, :@variable,
                s(:send,
                  s(:lvar, :args), :shift))),
            s(:ivasgn, :@variable,
              s(:send,
                s(:lvar, :keys), :delete,
                s(:str, "variable")))),
          s(:if,
            s(:ivar, :@variable), nil,
            s(:ivasgn, :@variable,
              s(:send,
                s(:const, nil, :TkVariable), :new))),
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?),
            s(:begin,
              s(:lvasgn, :args,
                s(:or,
                  s(:send,
                    s(:lvar, :keys), :delete,
                    s(:str, "values")),
                  s(:array)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?),
            s(:send,
              s(:lvar, :args), :<<,
              s(:send,
                s(:ivar, :@variable), :value)),
            s(:send,
              s(:ivar, :@variable), :value=,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)))),
          s(:send, nil, :install_win,
            s(:if,
              s(:lvar, :parent),
              s(:send,
                s(:lvar, :parent), :path), nil)),
          s(:ivasgn, :@menu,
            s(:send,
              s(:const, nil, :OptionMenu), :new,
              s(:send, nil, :tk_call,
                s(:str, "tk_optionMenu"),
                s(:ivar, :@path),
                s(:send,
                  s(:ivar, :@variable), :id),
                s(:splat,
                  s(:lvar, :args))))),
          s(:if,
            s(:lvar, :keys),
            s(:send, nil, :configure,
              s(:lvar, :keys)), nil))),
      s(:def, :value,
        s(:args),
        s(:send,
          s(:ivar, :@variable), :value)),
      s(:def, :value=,
        s(:args,
          s(:arg, :val)),
        s(:send,
          s(:ivar, :@variable), :value=,
          s(:lvar, :val))),
      s(:def, :activate,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send,
            s(:ivar, :@menu), :activate,
            s(:lvar, :index)),
          s(:self))),
      s(:def, :add,
        s(:args,
          s(:arg, :value)),
        s(:begin,
          s(:send,
            s(:ivar, :@menu), :add,
            s(:str, "radiobutton"),
            s(:hash,
              s(:pair,
                s(:str, "variable"),
                s(:ivar, :@variable)),
              s(:pair,
                s(:str, "label"),
                s(:lvar, :value)),
              s(:pair,
                s(:str, "value"),
                s(:lvar, :value)))),
          s(:self))),
      s(:def, :index,
        s(:args,
          s(:arg, :index)),
        s(:send,
          s(:ivar, :@menu), :index,
          s(:lvar, :index))),
      s(:def, :invoke,
        s(:args,
          s(:arg, :index)),
        s(:send,
          s(:ivar, :@menu), :invoke,
          s(:lvar, :index))),
      s(:def, :insert,
        s(:args,
          s(:arg, :index),
          s(:arg, :value)),
        s(:begin,
          s(:send,
            s(:ivar, :@menu), :insert,
            s(:lvar, :index),
            s(:str, "radiobutton"),
            s(:hash,
              s(:pair,
                s(:str, "variable"),
                s(:ivar, :@variable)),
              s(:pair,
                s(:str, "label"),
                s(:lvar, :value)),
              s(:pair,
                s(:str, "value"),
                s(:lvar, :value)))),
          s(:self))),
      s(:def, :delete,
        s(:args,
          s(:arg, :index),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:begin,
          s(:send,
            s(:ivar, :@menu), :delete,
            s(:lvar, :index),
            s(:lvar, :last)),
          s(:self))),
      s(:def, :xposition,
        s(:args,
          s(:arg, :index)),
        s(:send,
          s(:ivar, :@menu), :xposition,
          s(:lvar, :index))),
      s(:def, :yposition,
        s(:args,
          s(:arg, :index)),
        s(:send,
          s(:ivar, :@menu), :yposition,
          s(:lvar, :index))),
      s(:def, :menu,
        s(:args),
        s(:ivar, :@menu)),
      s(:def, :menucget,
        s(:args,
          s(:arg, :key)),
        s(:send,
          s(:ivar, :@menu), :cget,
          s(:lvar, :key))),
      s(:def, :menucget_strict,
        s(:args,
          s(:arg, :key)),
        s(:send,
          s(:ivar, :@menu), :cget_strict,
          s(:lvar, :key))),
      s(:def, :menuconfigure,
        s(:args,
          s(:arg, :key),
          s(:optarg, :val,
            s(:const, nil, :None))),
        s(:begin,
          s(:send,
            s(:ivar, :@menu), :configure,
            s(:lvar, :key),
            s(:lvar, :val)),
          s(:self))),
      s(:def, :menuconfiginfo,
        s(:args,
          s(:optarg, :key,
            s(:nil))),
        s(:send,
          s(:ivar, :@menu), :configinfo,
          s(:lvar, :key))),
      s(:def, :current_menuconfiginfo,
        s(:args,
          s(:optarg, :key,
            s(:nil))),
        s(:send,
          s(:ivar, :@menu), :current_configinfo,
          s(:lvar, :key))),
      s(:def, :entrycget,
        s(:args,
          s(:arg, :index),
          s(:arg, :key)),
        s(:send,
          s(:ivar, :@menu), :entrycget,
          s(:lvar, :index),
          s(:lvar, :key))),
      s(:def, :entrycget_strict,
        s(:args,
          s(:arg, :index),
          s(:arg, :key)),
        s(:send,
          s(:ivar, :@menu), :entrycget_strict,
          s(:lvar, :index),
          s(:lvar, :key))),
      s(:def, :entryconfigure,
        s(:args,
          s(:arg, :index),
          s(:arg, :key),
          s(:optarg, :val,
            s(:const, nil, :None))),
        s(:begin,
          s(:send,
            s(:ivar, :@menu), :entryconfigure,
            s(:lvar, :index),
            s(:lvar, :key),
            s(:lvar, :val)),
          s(:self))),
      s(:def, :entryconfiginfo,
        s(:args,
          s(:arg, :index),
          s(:optarg, :key,
            s(:nil))),
        s(:send,
          s(:ivar, :@menu), :entryconfiginfo,
          s(:lvar, :index),
          s(:lvar, :key))),
      s(:def, :current_entryconfiginfo,
        s(:args,
          s(:arg, :index),
          s(:optarg, :key,
            s(:nil))),
        s(:send,
          s(:ivar, :@menu), :current_entryconfiginfo,
          s(:lvar, :index),
          s(:lvar, :key))))),
  s(:casgn,
    s(:const, nil, :Tk), :OptionMenuButton,
    s(:const,
      s(:const, nil, :Tk), :OptionMenubutton)),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/menu.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :OptionMenubutton),
    s(:sym, :TkOptionMenubutton),
    s(:sym, :TkOptionMenuButton)))
