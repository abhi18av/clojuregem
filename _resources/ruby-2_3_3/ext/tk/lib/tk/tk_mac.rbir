s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Mac), nil)),
  s(:module,
    s(:const,
      s(:const, nil, :Tk), :Mac),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :TkCore)),
      s(:defs,
        s(:self), :def_ShowPreferences,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::ShowPreferences {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_OpenApplication,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::OpenApplication {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_ReopenApplication,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::ReopenApplication {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_OpenDocument,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::OpenDocument {args} { eval "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " $args }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_PrintDocument,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::PrintDocument {args} { eval "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " $args }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_Quit,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::Quit {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_OnHide,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::OnHide {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_OnShow,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::OnShow {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :def_ShowHelp,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :ip_eval,
            s(:dstr,
              s(:str, "proc ::tk::mac::ShowHelp {} { "),
              s(:begin,
                s(:send, nil, :install_cmd,
                  s(:lvar, :cmd))),
              s(:str, " }"))),
          s(:nil))),
      s(:defs,
        s(:self), :standardAboutPanel,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "::tk::mac::standardAboutPanel")),
          s(:nil))),
      s(:defs,
        s(:self), :useCompatibilityMetrics,
        s(:args,
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "::tk::mac::useCompatibilityMetrics"),
            s(:lvar, :mode)),
          s(:nil))),
      s(:defs,
        s(:self), :CGAntialiasLimit,
        s(:args,
          s(:arg, :limit)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "::tk::mac::CGAntialiasLimit"),
            s(:lvar, :limit)),
          s(:nil))),
      s(:defs,
        s(:self), :antialiasedtext,
        s(:args,
          s(:arg, :num)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "::tk::mac::antialiasedtext"),
            s(:lvar, :num)),
          s(:nil))),
      s(:defs,
        s(:self), :useThemedToplevel,
        s(:args,
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "::tk::mac::useThemedToplevel"),
            s(:lvar, :mode)),
          s(:nil))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Mac), :IconBitmap),
    s(:const, nil, :TkImage),
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:str, "::tk::mac::iconBitmap")), :freeze)),
      s(:defs,
        s(:self), :new,
        s(:args,
          s(:arg, :width),
          s(:arg, :height),
          s(:arg, :keys)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :name,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:lvar, :keys), :key?,
                  s(:sym, :imagename)),
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:sym, :imagename))),
                s(:if,
                  s(:send,
                    s(:lvar, :keys), :key?,
                    s(:str, "imagename")),
                  s(:lvasgn, :name,
                    s(:send,
                      s(:lvar, :keys), :[],
                      s(:str, "imagename"))), nil)),
              s(:if,
                s(:lvar, :name),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :name), :kind_of?,
                      s(:const, nil, :TkImage)),
                    s(:lvasgn, :obj,
                      s(:lvar, :name)),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:send, nil, :_get_eval_string,
                          s(:lvar, :name))),
                      s(:lvasgn, :obj,
                        s(:nil)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Tk_IMGTBL), :mutex), :synchronize),
                        s(:args),
                        s(:lvasgn, :obj,
                          s(:send,
                            s(:const, nil, :Tk_IMGTBL), :[],
                            s(:lvar, :name)))))),
                  s(:if,
                    s(:lvar, :obj),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:begin,
                            s(:or,
                              s(:send,
                                s(:lvar, :keys), :[],
                                s(:sym, :without_creating)),
                              s(:send,
                                s(:lvar, :keys), :[],
                                s(:str, "without_creating")))), :!),
                        s(:begin,
                          s(:lvasgn, :keys,
                            s(:send, nil, :_symbolkey2str,
                              s(:lvar, :keys))),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:str, "imagename")),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:str, "without_creating")),
                          s(:block,
                            s(:send,
                              s(:lvar, :obj), :instance_eval),
                            s(:args),
                            s(:send, nil, :tk_call_without_enc,
                              s(:str, "::tk::mac::iconBitmap"),
                              s(:ivar, :@path),
                              s(:lvar, :width),
                              s(:lvar, :height),
                              s(:splat,
                                s(:send, nil, :hash_kv,
                                  s(:lvar, :keys),
                                  s(:true)))))), nil),
                      s(:return,
                        s(:lvar, :obj))), nil)), nil)), nil),
          s(:block,
            s(:send,
              s(:begin,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:self), :allocate))), :instance_eval),
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Tk_IMGTBL), :mutex), :synchronize),
              s(:args),
              s(:begin,
                s(:send, nil, :initialize,
                  s(:lvar, :width),
                  s(:lvar, :height),
                  s(:lvar, :keys)),
                s(:send,
                  s(:const, nil, :Tk_IMGTBL), :[]=,
                  s(:ivar, :@path),
                  s(:self))))),
          s(:lvar, :obj))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :width),
          s(:arg, :height),
          s(:arg, :keys)),
        s(:begin,
          s(:ivasgn, :@path,
            s(:nil)),
          s(:lvasgn, :without_creating,
            s(:false)),
          s(:if,
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:lvar, :keys))),
              s(:ivasgn, :@path,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "imagename"))),
              s(:lvasgn, :without_creating,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "without_creating")))), nil),
          s(:if,
            s(:ivar, :@path), nil,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Tk_Image_ID), :mutex), :synchronize),
              s(:args),
              s(:begin,
                s(:ivasgn, :@path,
                  s(:send,
                    s(:const, nil, :Tk_Image_ID), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_ip_id_))),
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk_Image_ID), :[],
                    s(:int, 1)), :succ!)))),
          s(:if,
            s(:lvar, :without_creating), nil,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "::tk::mac::iconBitmap"),
              s(:ivar, :@path),
              s(:lvar, :width),
              s(:lvar, :height),
              s(:splat,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys),
                  s(:true))))))))))
