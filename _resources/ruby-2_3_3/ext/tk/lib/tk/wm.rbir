s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:module,
        s(:const, nil, :Wm),
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :TkCore)),
          s(:casgn, nil, :TkCommandNames,
            s(:send,
              s(:array,
                s(:send,
                  s(:str, "wm"), :freeze)), :freeze)),
          s(:casgn, nil, :TOPLEVEL_METHODCALL_OPTKEYS,
            s(:hash)),
          s(:defs,
            s(:const, nil, :Wm), :aspect,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :length), :==,
                s(:int, 0)),
              s(:send, nil, :list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "aspect"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "aspect"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :aspect,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :aspect,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:alias,
            s(:sym, :wm_aspect),
            s(:sym, :aspect)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "aspect"),
            s(:str, "aspect")),
          s(:defs,
            s(:const, nil, :Wm), :attributes,
            s(:args,
              s(:arg, :win),
              s(:optarg, :slot,
                s(:nil)),
              s(:optarg, :value,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:if,
              s(:send,
                s(:lvar, :slot), :==,
                s(:nil)),
              s(:begin,
                s(:lvasgn, :lst,
                  s(:send, nil, :tk_split_list,
                    s(:send, nil, :tk_call,
                      s(:str, "wm"),
                      s(:str, "attributes"),
                      s(:send,
                        s(:lvar, :win), :epath)))),
                s(:lvasgn, :info,
                  s(:hash)),
                s(:while,
                  s(:lvasgn, :key,
                    s(:send,
                      s(:lvar, :lst), :shift)),
                  s(:send,
                    s(:lvar, :info), :[]=,
                    s(:send,
                      s(:lvar, :key), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1))),
                    s(:send,
                      s(:lvar, :lst), :shift))),
                s(:lvar, :info)),
              s(:if,
                s(:send,
                  s(:lvar, :slot), :kind_of?,
                  s(:const, nil, :Hash)),
                s(:begin,
                  s(:send, nil, :tk_call,
                    s(:str, "wm"),
                    s(:str, "attributes"),
                    s(:send,
                      s(:lvar, :win), :epath),
                    s(:splat,
                      s(:send, nil, :hash_kv,
                        s(:lvar, :slot)))),
                  s(:lvar, :win)),
                s(:if,
                  s(:send,
                    s(:lvar, :value), :==,
                    s(:const,
                      s(:const, nil, :TkComm), :None)),
                  s(:send, nil, :tk_call,
                    s(:str, "wm"),
                    s(:str, "attributes"),
                    s(:send,
                      s(:lvar, :win), :epath),
                    s(:dstr,
                      s(:str, "-"),
                      s(:begin,
                        s(:lvar, :slot)))),
                  s(:begin,
                    s(:send, nil, :tk_call,
                      s(:str, "wm"),
                      s(:str, "attributes"),
                      s(:send,
                        s(:lvar, :win), :epath),
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :slot))),
                      s(:lvar, :value)),
                    s(:lvar, :win)))))),
          s(:def, :attributes,
            s(:args,
              s(:optarg, :slot,
                s(:nil)),
              s(:optarg, :value,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:send,
              s(:const, nil, :Wm), :attributes,
              s(:self),
              s(:lvar, :slot),
              s(:lvar, :value))),
          s(:alias,
            s(:sym, :wm_attributes),
            s(:sym, :attributes)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "attributes"),
            s(:str, "attributes")),
          s(:defs,
            s(:const, nil, :Wm), :client,
            s(:args,
              s(:arg, :win),
              s(:optarg, :name,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:if,
              s(:send,
                s(:lvar, :name), :==,
                s(:const,
                  s(:const, nil, :TkComm), :None)),
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "client"),
                s(:send,
                  s(:lvar, :win), :epath)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :name), :==,
                    s(:nil)),
                  s(:lvasgn, :name,
                    s(:str, "")), nil),
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "client"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :name)),
                s(:lvar, :win)))),
          s(:def, :client,
            s(:args,
              s(:optarg, :name,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:send,
              s(:const, nil, :Wm), :client,
              s(:self),
              s(:lvar, :name))),
          s(:alias,
            s(:sym, :wm_client),
            s(:sym, :client)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "client"),
            s(:str, "client")),
          s(:defs,
            s(:const, nil, :Wm), :colormapwindows,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :size), :==,
                s(:int, 0)),
              s(:send, nil, :list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "colormapwindows"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "colormapwindows"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :colormapwindows,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :colormapwindows,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:alias,
            s(:sym, :wm_colormapwindows),
            s(:sym, :colormapwindows)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "colormapwindows"),
            s(:str, "colormapwindows")),
          s(:defs,
            s(:const, nil, :Wm), :command,
            s(:args,
              s(:arg, :win),
              s(:optarg, :value,
                s(:nil))),
            s(:if,
              s(:lvar, :value),
              s(:begin,
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "command"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :value)),
                s(:lvar, :win)),
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "command"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :wm_command,
            s(:args,
              s(:optarg, :value,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :command,
              s(:self),
              s(:lvar, :value))),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "wm_command"),
            s(:str, "wm_command")),
          s(:defs,
            s(:const, nil, :Wm), :deiconify,
            s(:args,
              s(:arg, :win),
              s(:optarg, :ex,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :ex),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "deiconify"),
                  s(:send,
                    s(:lvar, :win), :epath)),
                s(:send,
                  s(:const, nil, :Wm), :iconify,
                  s(:lvar, :win))),
              s(:lvar, :win))),
          s(:def, :deiconify,
            s(:args,
              s(:optarg, :ex,
                s(:true))),
            s(:send,
              s(:const, nil, :Wm), :deiconify,
              s(:self),
              s(:lvar, :ex))),
          s(:alias,
            s(:sym, :wm_deiconify),
            s(:sym, :deiconify)),
          s(:defs,
            s(:const, nil, :Wm), :focusmodel,
            s(:args,
              s(:arg, :win),
              s(:optarg, :mode,
                s(:nil))),
            s(:if,
              s(:lvar, :mode),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "focusmodel"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :mode)),
                s(:lvar, :win)),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "focusmodel"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :focusmodel,
            s(:args,
              s(:optarg, :mode,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :focusmodel,
              s(:self),
              s(:lvar, :mode))),
          s(:alias,
            s(:sym, :wm_focusmodel),
            s(:sym, :focusmodel)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "focusmodel"),
            s(:str, "focusmodel")),
          s(:defs,
            s(:const, nil, :Wm), :forget,
            s(:args,
              s(:arg, :win)),
            s(:begin,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "forget"),
                s(:send,
                  s(:lvar, :win), :epath)),
              s(:lvar, :win))),
          s(:def, :wm_forget,
            s(:args),
            s(:send,
              s(:const, nil, :Wm), :forget,
              s(:self))),
          s(:defs,
            s(:const, nil, :Wm), :frame,
            s(:args,
              s(:arg, :win)),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "wm"),
              s(:str, "frame"),
              s(:send,
                s(:lvar, :win), :epath))),
          s(:def, :frame,
            s(:args),
            s(:send,
              s(:const, nil, :Wm), :frame,
              s(:self))),
          s(:alias,
            s(:sym, :wm_frame),
            s(:sym, :frame)),
          s(:defs,
            s(:const, nil, :Wm), :geometry,
            s(:args,
              s(:arg, :win),
              s(:optarg, :geom,
                s(:nil))),
            s(:if,
              s(:lvar, :geom),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "geometry"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :geom)),
                s(:lvar, :win)),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "geometry"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :geometry,
            s(:args,
              s(:optarg, :geom,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :geometry,
              s(:self),
              s(:lvar, :geom))),
          s(:alias,
            s(:sym, :wm_geometry),
            s(:sym, :geometry)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "geometry"),
            s(:str, "geometry")),
          s(:defs,
            s(:const, nil, :Wm), :grid,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :size), :==,
                s(:int, 0)),
              s(:send, nil, :list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "grid"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "grid"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :wm_grid,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :grid,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "wm_grid"),
            s(:str, "wm_grid")),
          s(:defs,
            s(:const, nil, :Wm), :group,
            s(:args,
              s(:arg, :win),
              s(:optarg, :leader,
                s(:nil))),
            s(:if,
              s(:lvar, :leader),
              s(:begin,
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "group"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :leader)),
                s(:lvar, :win)),
              s(:send, nil, :window,
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "group"),
                  s(:send,
                    s(:lvar, :win), :epath))))),
          s(:def, :group,
            s(:args,
              s(:optarg, :leader,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :group,
              s(:self),
              s(:lvar, :leader))),
          s(:alias,
            s(:sym, :wm_group),
            s(:sym, :group)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "group"),
            s(:str, "group")),
          s(:defs,
            s(:const, nil, :Wm), :iconbitmap,
            s(:args,
              s(:arg, :win),
              s(:optarg, :bmp,
                s(:nil))),
            s(:if,
              s(:lvar, :bmp),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconbitmap"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :bmp)),
                s(:lvar, :win)),
              s(:send, nil, :image_obj,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconbitmap"),
                  s(:send,
                    s(:lvar, :win), :epath))))),
          s(:def, :iconbitmap,
            s(:args,
              s(:optarg, :bmp,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :iconbitmap,
              s(:self),
              s(:lvar, :bmp))),
          s(:alias,
            s(:sym, :wm_iconbitmap),
            s(:sym, :iconbitmap)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "iconbitmap"),
            s(:str, "iconbitmap")),
          s(:defs,
            s(:const, nil, :Wm), :iconphoto,
            s(:args,
              s(:arg, :win),
              s(:restarg, :imgs)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :imgs), :empty?),
                s(:block,
                  s(:send,
                    s(:lvar, :win), :instance_eval),
                  s(:args),
                  s(:begin,
                    s(:if,
                      s(:defined?,
                        s(:ivar, :@wm_iconphoto)), nil,
                      s(:ivasgn, :@wm_iconphoto,
                        s(:nil))),
                    s(:return,
                      s(:ivar, :@wm_iconphoto)))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :imgs), :length), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:send,
                      s(:lvar, :imgs), :[],
                      s(:int, 0)), :kind_of?,
                    s(:const, nil, :Array))),
                s(:lvasgn, :imgs,
                  s(:send,
                    s(:lvar, :imgs), :[],
                    s(:int, 0))), nil),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "iconphoto"),
                s(:send,
                  s(:lvar, :win), :epath),
                s(:splat,
                  s(:lvar, :imgs))),
              s(:block,
                s(:send,
                  s(:lvar, :win), :instance_eval),
                s(:args),
                s(:ivasgn, :@wm_iconphoto,
                  s(:lvar, :imgs))),
              s(:lvar, :win))),
          s(:def, :iconphoto,
            s(:args,
              s(:restarg, :imgs)),
            s(:send,
              s(:const, nil, :Wm), :iconphoto,
              s(:self),
              s(:splat,
                s(:lvar, :imgs)))),
          s(:alias,
            s(:sym, :wm_iconphoto),
            s(:sym, :iconphoto)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "iconphoto"),
            s(:str, "iconphoto")),
          s(:defs,
            s(:const, nil, :Wm), :iconphoto_default,
            s(:args,
              s(:arg, :win),
              s(:restarg, :imgs)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :imgs), :length), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:send,
                      s(:lvar, :imgs), :[],
                      s(:int, 0)), :kind_of?,
                    s(:const, nil, :Array))),
                s(:lvasgn, :imgs,
                  s(:send,
                    s(:lvar, :imgs), :[],
                    s(:int, 0))), nil),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "iconphoto"),
                s(:send,
                  s(:lvar, :win), :epath),
                s(:str, "-default"),
                s(:splat,
                  s(:lvar, :imgs))),
              s(:lvar, :win))),
          s(:def, :iconphoto_default,
            s(:args,
              s(:restarg, :imgs)),
            s(:send,
              s(:const, nil, :Wm), :iconphoto_default,
              s(:self),
              s(:splat,
                s(:lvar, :imgs)))),
          s(:alias,
            s(:sym, :wm_iconphoto_default),
            s(:sym, :iconphoto_default)),
          s(:defs,
            s(:const, nil, :Wm), :iconify,
            s(:args,
              s(:arg, :win),
              s(:optarg, :ex,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :ex),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconify"),
                  s(:send,
                    s(:lvar, :win), :epath)),
                s(:send,
                  s(:const, nil, :Wm), :deiconify,
                  s(:lvar, :win))),
              s(:lvar, :win))),
          s(:def, :iconify,
            s(:args,
              s(:optarg, :ex,
                s(:true))),
            s(:send,
              s(:const, nil, :Wm), :iconify,
              s(:self),
              s(:lvar, :ex))),
          s(:alias,
            s(:sym, :wm_iconify),
            s(:sym, :iconify)),
          s(:defs,
            s(:const, nil, :Wm), :iconmask,
            s(:args,
              s(:arg, :win),
              s(:optarg, :bmp,
                s(:nil))),
            s(:if,
              s(:lvar, :bmp),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconmask"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :bmp)),
                s(:lvar, :win)),
              s(:send, nil, :image_obj,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconmask"),
                  s(:send,
                    s(:lvar, :win), :epath))))),
          s(:def, :iconmask,
            s(:args,
              s(:optarg, :bmp,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :iconmask,
              s(:self),
              s(:lvar, :bmp))),
          s(:alias,
            s(:sym, :wm_iconmask),
            s(:sym, :iconmask)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "iconmask"),
            s(:str, "iconmask")),
          s(:defs,
            s(:const, nil, :Wm), :iconname,
            s(:args,
              s(:arg, :win),
              s(:optarg, :name,
                s(:nil))),
            s(:if,
              s(:lvar, :name),
              s(:begin,
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "iconname"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :name)),
                s(:lvar, :win)),
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "iconname"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :iconname,
            s(:args,
              s(:optarg, :name,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :iconname,
              s(:self),
              s(:lvar, :name))),
          s(:alias,
            s(:sym, :wm_iconname),
            s(:sym, :iconname)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "iconname"),
            s(:str, "iconname")),
          s(:defs,
            s(:const, nil, :Wm), :iconposition,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :size), :==,
                s(:int, 0)),
              s(:send, nil, :list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconposition"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconposition"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :iconposition,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :iconposition,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:alias,
            s(:sym, :wm_iconposition),
            s(:sym, :iconposition)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "iconposition"),
            s(:str, "iconposition")),
          s(:defs,
            s(:const, nil, :Wm), :iconwindow,
            s(:args,
              s(:arg, :win),
              s(:optarg, :iconwin,
                s(:nil))),
            s(:if,
              s(:lvar, :iconwin),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "iconwindow"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :iconwin)),
                s(:lvar, :win)),
              s(:begin,
                s(:lvasgn, :w,
                  s(:send, nil, :tk_call_without_enc,
                    s(:str, "wm"),
                    s(:str, "iconwindow"),
                    s(:send,
                      s(:lvar, :win), :epath))),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :==,
                      s(:str, ""))),
                  s(:nil),
                  s(:send, nil, :window,
                    s(:lvar, :w)))))),
          s(:def, :iconwindow,
            s(:args,
              s(:optarg, :iconwin,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :iconwindow,
              s(:self),
              s(:lvar, :iconwin))),
          s(:alias,
            s(:sym, :wm_iconwindow),
            s(:sym, :iconwindow)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "iconwindow"),
            s(:str, "iconwindow")),
          s(:defs,
            s(:const, nil, :Wm), :manage,
            s(:args,
              s(:arg, :win)),
            s(:begin,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "manage"),
                s(:send,
                  s(:lvar, :win), :epath)),
              s(:lvar, :win))),
          s(:def, :wm_manage,
            s(:args),
            s(:send,
              s(:const, nil, :Wm), :manage,
              s(:self))),
          s(:defs,
            s(:const, nil, :Wm), :maxsize,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :size), :==,
                s(:int, 0)),
              s(:send, nil, :list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "maxsize"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "maxsize"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :maxsize,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :maxsize,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:alias,
            s(:sym, :wm_maxsize),
            s(:sym, :maxsize)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "maxsize"),
            s(:str, "maxsize")),
          s(:defs,
            s(:const, nil, :Wm), :minsize,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :size), :==,
                s(:int, 0)),
              s(:send, nil, :list,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "minsize"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "minsize"),
                  s(:send,
                    s(:lvar, :win), :path),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :minsize,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :minsize,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:alias,
            s(:sym, :wm_minsize),
            s(:sym, :minsize)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "minsize"),
            s(:str, "minsize")),
          s(:defs,
            s(:const, nil, :Wm), :overrideredirect,
            s(:args,
              s(:arg, :win),
              s(:optarg, :mode,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:if,
              s(:send,
                s(:lvar, :mode), :==,
                s(:const,
                  s(:const, nil, :TkComm), :None)),
              s(:send, nil, :bool,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "overrideredirect"),
                  s(:send,
                    s(:lvar, :win), :epath))),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "overrideredirect"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :mode)),
                s(:lvar, :win)))),
          s(:def, :overrideredirect,
            s(:args,
              s(:optarg, :mode,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:send,
              s(:const, nil, :Wm), :overrideredirect,
              s(:self),
              s(:lvar, :mode))),
          s(:alias,
            s(:sym, :wm_overrideredirect),
            s(:sym, :overrideredirect)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "overrideredirect"),
            s(:str, "overrideredirect")),
          s(:defs,
            s(:const, nil, :Wm), :positionfrom,
            s(:args,
              s(:arg, :win),
              s(:optarg, :who,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:if,
              s(:send,
                s(:lvar, :who), :==,
                s(:const,
                  s(:const, nil, :TkComm), :None)),
              s(:begin,
                s(:lvasgn, :r,
                  s(:send, nil, :tk_call_without_enc,
                    s(:str, "wm"),
                    s(:str, "positionfrom"),
                    s(:send,
                      s(:lvar, :win), :epath))),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :r), :==,
                      s(:str, ""))),
                  s(:nil),
                  s(:lvar, :r))),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "positionfrom"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :who)),
                s(:lvar, :win)))),
          s(:def, :positionfrom,
            s(:args,
              s(:optarg, :who,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:send,
              s(:const, nil, :Wm), :positionfrom,
              s(:self),
              s(:lvar, :who))),
          s(:alias,
            s(:sym, :wm_positionfrom),
            s(:sym, :positionfrom)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "positionfrom"),
            s(:str, "positionfrom")),
          s(:defs,
            s(:const, nil, :Wm), :protocol,
            s(:args,
              s(:arg, :win),
              s(:optarg, :name,
                s(:nil)),
              s(:optarg, :cmd,
                s(:nil)),
              s(:blockarg, :b)),
            s(:if,
              s(:lvar, :cmd),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "protocol"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(:lvar, :cmd)),
                s(:lvar, :win)),
              s(:if,
                s(:lvar, :b),
                s(:begin,
                  s(:send, nil, :tk_call_without_enc,
                    s(:str, "wm"),
                    s(:str, "protocol"),
                    s(:send,
                      s(:lvar, :win), :epath),
                    s(:lvar, :name),
                    s(:send, nil, :proc,
                      s(:block_pass,
                        s(:lvar, :b)))),
                  s(:lvar, :win)),
                s(:if,
                  s(:lvar, :name),
                  s(:begin,
                    s(:lvasgn, :result,
                      s(:send, nil, :tk_call_without_enc,
                        s(:str, "wm"),
                        s(:str, "protocol"),
                        s(:send,
                          s(:lvar, :win), :epath),
                        s(:lvar, :name))),
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:lvar, :result), :==,
                          s(:str, ""))),
                      s(:nil),
                      s(:send, nil, :tk_tcl2ruby,
                        s(:lvar, :result)))),
                  s(:send, nil, :tk_split_simplelist,
                    s(:send, nil, :tk_call_without_enc,
                      s(:str, "wm"),
                      s(:str, "protocol"),
                      s(:send,
                        s(:lvar, :win), :epath))))))),
          s(:def, :protocol,
            s(:args,
              s(:optarg, :name,
                s(:nil)),
              s(:optarg, :cmd,
                s(:nil)),
              s(:blockarg, :b)),
            s(:send,
              s(:const, nil, :Wm), :protocol,
              s(:self),
              s(:lvar, :name),
              s(:lvar, :cmd),
              s(:block_pass,
                s(:lvar, :b)))),
          s(:alias,
            s(:sym, :wm_protocol),
            s(:sym, :protocol)),
          s(:defs,
            s(:const, nil, :Wm), :protocols,
            s(:args,
              s(:arg, :win),
              s(:optarg, :kv,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :kv), nil,
                s(:begin,
                  s(:lvasgn, :ret,
                    s(:hash)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Wm), :protocol,
                        s(:lvar, :win)), :each),
                    s(:args,
                      s(:arg, :name)),
                    s(:send,
                      s(:lvar, :ret), :[]=,
                      s(:lvar, :name),
                      s(:send,
                        s(:const, nil, :Wm), :protocol,
                        s(:lvar, :win),
                        s(:lvar, :name)))),
                  s(:return,
                    s(:lvar, :ret)))),
              s(:if,
                s(:send,
                  s(:lvar, :kv), :kind_of?,
                  s(:const, nil, :Hash)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect a hash of protocol=>command"))),
              s(:block,
                s(:send,
                  s(:lvar, :kv), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:send,
                  s(:const, nil, :Wm), :protocol,
                  s(:lvar, :win),
                  s(:lvar, :k),
                  s(:lvar, :v))),
              s(:lvar, :win))),
          s(:def, :protocols,
            s(:args,
              s(:optarg, :kv,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :protocols,
              s(:self),
              s(:lvar, :kv))),
          s(:alias,
            s(:sym, :wm_protocols),
            s(:sym, :protocols)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "protocols"),
            s(:str, "protocols")),
          s(:defs,
            s(:const, nil, :Wm), :resizable,
            s(:args,
              s(:arg, :win),
              s(:restarg, :args)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :length), :==,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:send, nil, :list,
                    s(:send, nil, :tk_call_without_enc,
                      s(:str, "wm"),
                      s(:str, "resizable"),
                      s(:send,
                        s(:lvar, :win), :epath))), :map!),
                s(:args,
                  s(:arg, :e)),
                s(:send, nil, :bool,
                  s(:lvar, :e))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))), nil),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "resizable"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:splat,
                    s(:lvar, :args))),
                s(:lvar, :win)))),
          s(:def, :resizable,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :Wm), :resizable,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:alias,
            s(:sym, :wm_resizable),
            s(:sym, :resizable)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "resizable"),
            s(:str, "resizable")),
          s(:defs,
            s(:const, nil, :Wm), :sizefrom,
            s(:args,
              s(:arg, :win),
              s(:optarg, :who,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:if,
              s(:send,
                s(:lvar, :who), :==,
                s(:const,
                  s(:const, nil, :TkComm), :None)),
              s(:begin,
                s(:lvasgn, :r,
                  s(:send, nil, :tk_call_without_enc,
                    s(:str, "wm"),
                    s(:str, "sizefrom"),
                    s(:send,
                      s(:lvar, :win), :epath))),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :r), :==,
                      s(:str, ""))),
                  s(:nil),
                  s(:lvar, :r))),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "sizefrom"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :who)),
                s(:lvar, :win)))),
          s(:def, :sizefrom,
            s(:args,
              s(:optarg, :who,
                s(:const,
                  s(:const, nil, :TkComm), :None))),
            s(:send,
              s(:const, nil, :Wm), :sizefrom,
              s(:self),
              s(:lvar, :who))),
          s(:alias,
            s(:sym, :wm_sizefrom),
            s(:sym, :sizefrom)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "sizefrom"),
            s(:str, "sizefrom")),
          s(:defs,
            s(:const, nil, :Wm), :stackorder,
            s(:args,
              s(:arg, :win)),
            s(:send, nil, :list,
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "stackorder"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :stackorder,
            s(:args),
            s(:send,
              s(:const, nil, :Wm), :stackorder,
              s(:self))),
          s(:alias,
            s(:sym, :wm_stackorder),
            s(:sym, :stackorder)),
          s(:defs,
            s(:const, nil, :Wm), :stackorder_isabove,
            s(:args,
              s(:arg, :win),
              s(:arg, :target)),
            s(:send, nil, :bool,
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "stackorder"),
                s(:send,
                  s(:lvar, :win), :epath),
                s(:str, "isabove"),
                s(:lvar, :target)))),
          s(:defs,
            s(:const, nil, :Wm), :stackorder_is_above,
            s(:args,
              s(:arg, :win),
              s(:arg, :target)),
            s(:send,
              s(:const, nil, :Wm), :stackorder_isabove,
              s(:lvar, :win),
              s(:lvar, :target))),
          s(:def, :stackorder_isabove,
            s(:args,
              s(:arg, :target)),
            s(:send,
              s(:const, nil, :Wm), :stackorder_isabove,
              s(:self),
              s(:lvar, :target))),
          s(:alias,
            s(:sym, :stackorder_is_above),
            s(:sym, :stackorder_isabove)),
          s(:alias,
            s(:sym, :wm_stackorder_isabove),
            s(:sym, :stackorder_isabove)),
          s(:alias,
            s(:sym, :wm_stackorder_is_above),
            s(:sym, :stackorder_isabove)),
          s(:defs,
            s(:const, nil, :Wm), :stackorder_isbelow,
            s(:args,
              s(:arg, :win),
              s(:arg, :target)),
            s(:send, nil, :bool,
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "stackorder"),
                s(:send,
                  s(:lvar, :win), :epath),
                s(:str, "isbelow"),
                s(:lvar, :target)))),
          s(:defs,
            s(:const, nil, :Wm), :stackorder_is_below,
            s(:args,
              s(:arg, :win),
              s(:arg, :target)),
            s(:send,
              s(:const, nil, :Wm), :stackorder_isbelow,
              s(:lvar, :win),
              s(:lvar, :target))),
          s(:def, :stackorder_isbelow,
            s(:args,
              s(:arg, :target)),
            s(:send,
              s(:const, nil, :Wm), :stackorder_isbelow,
              s(:self),
              s(:lvar, :target))),
          s(:alias,
            s(:sym, :stackorder_is_below),
            s(:sym, :stackorder_isbelow)),
          s(:alias,
            s(:sym, :wm_stackorder_isbelow),
            s(:sym, :stackorder_isbelow)),
          s(:alias,
            s(:sym, :wm_stackorder_is_below),
            s(:sym, :stackorder_isbelow)),
          s(:defs,
            s(:const, nil, :Wm), :state,
            s(:args,
              s(:arg, :win),
              s(:optarg, :st,
                s(:nil))),
            s(:if,
              s(:lvar, :st),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "state"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :st)),
                s(:lvar, :win)),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "wm"),
                s(:str, "state"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :state,
            s(:args,
              s(:optarg, :st,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :state,
              s(:self),
              s(:lvar, :st))),
          s(:alias,
            s(:sym, :wm_state),
            s(:sym, :state)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "state"),
            s(:str, "state")),
          s(:defs,
            s(:const, nil, :Wm), :title,
            s(:args,
              s(:arg, :win),
              s(:optarg, :str,
                s(:nil))),
            s(:if,
              s(:lvar, :str),
              s(:begin,
                s(:send, nil, :tk_call,
                  s(:str, "wm"),
                  s(:str, "title"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :str)),
                s(:lvar, :win)),
              s(:send, nil, :tk_call,
                s(:str, "wm"),
                s(:str, "title"),
                s(:send,
                  s(:lvar, :win), :epath)))),
          s(:def, :title,
            s(:args,
              s(:optarg, :str,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :title,
              s(:self),
              s(:lvar, :str))),
          s(:alias,
            s(:sym, :wm_title),
            s(:sym, :title)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "title"),
            s(:str, "title")),
          s(:defs,
            s(:const, nil, :Wm), :transient,
            s(:args,
              s(:arg, :win),
              s(:optarg, :master,
                s(:nil))),
            s(:if,
              s(:lvar, :master),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "transient"),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :master)),
                s(:lvar, :win)),
              s(:send, nil, :window,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "transient"),
                  s(:send,
                    s(:lvar, :win), :epath))))),
          s(:def, :transient,
            s(:args,
              s(:optarg, :master,
                s(:nil))),
            s(:send,
              s(:const, nil, :Wm), :transient,
              s(:self),
              s(:lvar, :master))),
          s(:alias,
            s(:sym, :wm_transient),
            s(:sym, :transient)),
          s(:send,
            s(:const, nil, :TOPLEVEL_METHODCALL_OPTKEYS), :[]=,
            s(:str, "transient"),
            s(:str, "transient")),
          s(:defs,
            s(:const, nil, :Wm), :withdraw,
            s(:args,
              s(:arg, :win),
              s(:optarg, :ex,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :ex),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "wm"),
                  s(:str, "withdraw"),
                  s(:send,
                    s(:lvar, :win), :epath)),
                s(:send,
                  s(:const, nil, :Wm), :deiconify,
                  s(:lvar, :win))),
              s(:lvar, :win))),
          s(:def, :withdraw,
            s(:args,
              s(:optarg, :ex,
                s(:true))),
            s(:send,
              s(:const, nil, :Wm), :withdraw,
              s(:self),
              s(:lvar, :ex))),
          s(:alias,
            s(:sym, :wm_withdraw),
            s(:sym, :withdraw)))),
      s(:module,
        s(:const, nil, :Wm_for_General),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Wm), :instance_methods), :each),
          s(:args,
            s(:arg, :m)),
          s(:if,
            s(:send,
              s(:begin,
                s(:lvasgn, :m,
                  s(:send,
                    s(:lvar, :m), :to_s))), :=~,
              s(:regexp,
                s(:str, "^wm_(.*)$"),
                s(:regopt))),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "def "),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, "(*args, &b); Tk::Wm."),
                s(:begin,
                  s(:nth_ref, 1)),
                s(:str, "(self, *args, &b); end"))), nil))))))
