s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:class,
    s(:const, nil, :TkNamespace),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :Tk)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "namespace"), :freeze)), :freeze)),
      s(:casgn, nil, :Tk_Namespace_ID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :Tk_Namespace_ID,
              s(:array,
                s(:send,
                  s(:str, "ns"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:casgn, nil, :Tk_NsCode_RetObjID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const, nil, :Tk_Namespace_ID_TBL), :clear)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_NsCode_RetObjID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const, nil, :Tk_NsCode_RetObjID_TBL), :clear)))),
      s(:defs,
        s(:const, nil, :TkNamespace), :id2obj,
        s(:args,
          s(:arg, :id)),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
          s(:args),
          s(:if,
            s(:send,
              s(:const, nil, :Tk_Namespace_ID_TBL), :[],
              s(:lvar, :id)),
            s(:send,
              s(:const, nil, :Tk_Namespace_ID_TBL), :[],
              s(:lvar, :id)),
            s(:lvar, :id)))),
      s(:class,
        s(:const, nil, :Ensemble),
        s(:const, nil, :TkObject),
        s(:begin,
          s(:def, :__cget_cmd,
            s(:args),
            s(:array,
              s(:str, "namespace"),
              s(:str, "ensemble"),
              s(:str, "configure"),
              s(:send,
                s(:self), :path))),
          s(:send, nil, :private,
            s(:sym, :__cget_cmd)),
          s(:def, :__config_cmd,
            s(:args),
            s(:array,
              s(:str, "namespace"),
              s(:str, "ensemble"),
              s(:str, "configure"),
              s(:send,
                s(:self), :path))),
          s(:send, nil, :private,
            s(:sym, :__config_cmd)),
          s(:def, :__configinfo_struct,
            s(:args),
            s(:hash,
              s(:pair,
                s(:sym, :key),
                s(:int, 0)),
              s(:pair,
                s(:sym, :alias),
                s(:nil)),
              s(:pair,
                s(:sym, :db_name),
                s(:nil)),
              s(:pair,
                s(:sym, :db_class),
                s(:nil)),
              s(:pair,
                s(:sym, :default_value),
                s(:nil)),
              s(:pair,
                s(:sym, :current_value),
                s(:int, 2)))),
          s(:send, nil, :private,
            s(:sym, :__configinfo_struct)),
          s(:def, :__boolval_optkeys,
            s(:args),
            s(:array,
              s(:str, "prefixes"))),
          s(:send, nil, :private,
            s(:sym, :__boolval_optkeys)),
          s(:def, :__listval_optkeys,
            s(:args),
            s(:array,
              s(:str, "map"),
              s(:str, "subcommands"),
              s(:str, "unknown"))),
          s(:send, nil, :private,
            s(:sym, :__listval_optkeys)),
          s(:defs,
            s(:self), :exist?,
            s(:args,
              s(:arg, :ensemble)),
            s(:send, nil, :bool,
              s(:send, nil, :tk_call,
                s(:str, "namespace"),
                s(:str, "ensemble"),
                s(:str, "exists"),
                s(:lvar, :ensemble)))),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :keys,
                s(:hash))),
            s(:ivasgn, :@ensemble,
              s(:ivasgn, :@path,
                s(:send, nil, :tk_call,
                  s(:str, "namespace"),
                  s(:str, "ensemble"),
                  s(:str, "create"),
                  s(:lvar, :keys))))),
          s(:def, :cget,
            s(:args,
              s(:arg, :slot)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :slot), :==,
                  s(:sym, :namespace)),
                s(:send,
                  s(:lvar, :slot), :==,
                  s(:str, "namespace"))),
              s(:begin,
                s(:lvasgn, :ns,
                  s(:super,
                    s(:lvar, :slot))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
                  s(:args),
                  s(:if,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :key?,
                      s(:lvar, :ns)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :[],
                      s(:lvar, :ns)),
                    s(:lvar, :ns)))),
              s(:super,
                s(:lvar, :slot)))),
          s(:def, :cget_strict,
            s(:args,
              s(:arg, :slot)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :slot), :==,
                  s(:sym, :namespace)),
                s(:send,
                  s(:lvar, :slot), :==,
                  s(:str, "namespace"))),
              s(:begin,
                s(:lvasgn, :ns,
                  s(:super,
                    s(:lvar, :slot))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
                  s(:args),
                  s(:if,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :key?,
                      s(:lvar, :ns)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :[],
                      s(:lvar, :ns)),
                    s(:lvar, :ns)))),
              s(:super,
                s(:lvar, :slot)))),
          s(:def, :configinfo,
            s(:args,
              s(:optarg, :slot,
                s(:nil))),
            s(:if,
              s(:lvar, :slot),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :slot), :==,
                      s(:sym, :namespace)),
                    s(:send,
                      s(:lvar, :slot), :==,
                      s(:str, "namespace"))),
                  s(:begin,
                    s(:lvasgn, :val,
                      s(:super,
                        s(:lvar, :slot))),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
                      s(:args),
                      s(:if,
                        s(:send,
                          s(:const,
                            s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :key?,
                          s(:lvar, :val)),
                        s(:lvasgn, :val,
                          s(:send,
                            s(:const,
                              s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :[],
                            s(:lvar, :val))), nil))),
                  s(:lvasgn, :val,
                    s(:super,
                      s(:lvar, :slot)))),
                s(:if,
                  s(:const,
                    s(:const, nil, :TkComm), :GET_CONFIGINFO_AS_ARRAY),
                  s(:array,
                    s(:send,
                      s(:lvar, :slot), :to_s),
                    s(:lvar, :val)),
                  s(:hash,
                    s(:pair,
                      s(:send,
                        s(:lvar, :slot), :to_s),
                      s(:lvar, :val))))),
              s(:begin,
                s(:lvasgn, :info,
                  s(:super)),
                s(:if,
                  s(:const,
                    s(:const, nil, :TkComm), :GET_CONFIGINFO_AS_ARRAY),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:lvar, :info), :map!),
                      s(:args,
                        s(:arg, :inf)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:lvar, :inf), :[],
                              s(:int, 0)), :==,
                            s(:str, "namespace")),
                          s(:send,
                            s(:const,
                              s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :key?,
                            s(:send,
                              s(:lvar, :inf), :[],
                              s(:int, -1)))),
                        s(:array,
                          s(:send,
                            s(:lvar, :inf), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:const,
                              s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :[],
                            s(:send,
                              s(:lvar, :inf), :[],
                              s(:int, -1)))),
                        s(:lvar, :inf)))),
                  s(:begin,
                    s(:lvasgn, :val,
                      s(:send,
                        s(:lvar, :info), :[],
                        s(:str, "namespace"))),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
                      s(:args),
                      s(:if,
                        s(:send,
                          s(:const,
                            s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :key?,
                          s(:lvar, :val)),
                        s(:send,
                          s(:lvar, :info), :[]=,
                          s(:str, "namespace"),
                          s(:send,
                            s(:const,
                              s(:const, nil, :TkNamespace), :Tk_Namespace_ID_TBL), :[],
                            s(:lvar, :val))), nil)))),
                s(:lvar, :info)))),
          s(:def, :exists?,
            s(:args),
            s(:send, nil, :bool,
              s(:send, nil, :tk_call,
                s(:str, "namespace"),
                s(:str, "ensemble"),
                s(:str, "exists"),
                s(:ivar, :@path)))))),
      s(:class,
        s(:const, nil, :ScopeArgs),
        s(:const, nil, :Array),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Tk)),
          s(:def, :tk_call,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :args,
                s(:block,
                  s(:send,
                    s(:lvar, :args), :collect),
                  s(:args,
                    s(:arg, :arg)),
                  s(:if,
                    s(:begin,
                      s(:lvasgn, :s,
                        s(:send, nil, :_get_eval_string,
                          s(:lvar, :arg),
                          s(:true)))),
                    s(:lvar, :s),
                    s(:str, "")))),
              s(:super,
                s(:str, "namespace"),
                s(:str, "eval"),
                s(:ivar, :@namespace),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
                  s(:splat,
                    s(:lvar, :args)))))),
          s(:def, :tk_call_without_enc,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :args,
                s(:block,
                  s(:send,
                    s(:lvar, :args), :collect),
                  s(:args,
                    s(:arg, :arg)),
                  s(:if,
                    s(:begin,
                      s(:lvasgn, :s,
                        s(:send, nil, :_get_eval_string,
                          s(:lvar, :arg),
                          s(:true)))),
                    s(:lvar, :s),
                    s(:str, "")))),
              s(:super,
                s(:str, "namespace"),
                s(:str, "eval"),
                s(:ivar, :@namespace),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
                  s(:splat,
                    s(:lvar, :args)))))),
          s(:def, :tk_call_with_enc,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :args,
                s(:block,
                  s(:send,
                    s(:lvar, :args), :collect),
                  s(:args,
                    s(:arg, :arg)),
                  s(:if,
                    s(:begin,
                      s(:lvasgn, :s,
                        s(:send, nil, :_get_eval_string,
                          s(:lvar, :arg),
                          s(:true)))),
                    s(:lvar, :s),
                    s(:str, "")))),
              s(:super,
                s(:str, "namespace"),
                s(:str, "eval"),
                s(:ivar, :@namespace),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
                  s(:splat,
                    s(:lvar, :args)))))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :namespace),
              s(:restarg, :args)),
            s(:begin,
              s(:ivasgn, :@namespace,
                s(:lvar, :namespace)),
              s(:super,
                s(:send,
                  s(:lvar, :args), :size)),
              s(:send,
                s(:self), :replace,
                s(:lvar, :args)))))),
      s(:class,
        s(:const, nil, :NsCode),
        s(:const, nil, :TkObject),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :scope),
              s(:optarg, :use_obj_id,
                s(:false))),
            s(:begin,
              s(:ivasgn, :@scope,
                s(:send,
                  s(:lvar, :scope), :+,
                  s(:str, " "))),
              s(:ivasgn, :@use_obj_id,
                s(:lvar, :use_obj_id)))),
          s(:def, :path,
            s(:args),
            s(:ivar, :@scope)),
          s(:def, :to_eval,
            s(:args),
            s(:ivar, :@scope)),
          s(:def, :call,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_eval_without_enc,
                  s(:send,
                    s(:ivar, :@scope), :+,
                    s(:send, nil, :array2tk_list,
                      s(:lvar, :args))))),
              s(:if,
                s(:ivar, :@use_obj_id),
                s(:lvasgn, :ret,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkNamespace), :Tk_NsCode_RetObjID_TBL), :delete,
                    s(:send,
                      s(:lvar, :ret), :to_i))), nil),
              s(:lvar, :ret))))),
      s(:def, :install_cmd,
        s(:args,
          s(:arg, :cmd)),
        s(:begin,
          s(:lvasgn, :lst,
            s(:send, nil, :tk_split_simplelist,
              s(:super,
                s(:lvar, :cmd)),
              s(:false),
              s(:false))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :lst), :[],
                s(:int, 1)), :=~,
              s(:regexp,
                s(:str, "^::"),
                s(:regopt))),
            s(:send,
              s(:lvar, :lst), :[]=,
              s(:int, 1),
              s(:ivar, :@fullname)),
            s(:send,
              s(:lvar, :lst), :insert,
              s(:int, 1),
              s(:ivar, :@fullname))),
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
            s(:splat,
              s(:lvar, :lst))))),
      s(:alias,
        s(:sym, :__tk_call),
        s(:sym, :tk_call)),
      s(:alias,
        s(:sym, :__tk_call_without_enc),
        s(:sym, :tk_call_without_enc)),
      s(:alias,
        s(:sym, :__tk_call_with_enc),
        s(:sym, :tk_call_with_enc)),
      s(:def, :tk_call,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect),
              s(:args,
                s(:arg, :arg)),
              s(:if,
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :arg),
                      s(:true)))),
                s(:lvar, :s),
                s(:str, "")))),
          s(:super,
            s(:str, "namespace"),
            s(:str, "eval"),
            s(:ivar, :@fullname),
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :tk_call_without_enc,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect),
              s(:args,
                s(:arg, :arg)),
              s(:if,
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :arg),
                      s(:true)))),
                s(:lvar, :s),
                s(:str, "")))),
          s(:super,
            s(:str, "namespace"),
            s(:str, "eval"),
            s(:ivar, :@fullname),
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :tk_call_with_enc,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect),
              s(:args,
                s(:arg, :arg)),
              s(:if,
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :arg),
                      s(:true)))),
                s(:lvar, :s),
                s(:str, "")))),
          s(:super,
            s(:str, "namespace"),
            s(:str, "eval"),
            s(:ivar, :@fullname),
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
              s(:splat,
                s(:lvar, :args)))))),
      s(:alias,
        s(:sym, :ns_tk_call),
        s(:sym, :tk_call)),
      s(:alias,
        s(:sym, :ns_tk_call_without_enc),
        s(:sym, :tk_call_without_enc)),
      s(:alias,
        s(:sym, :ns_tk_call_with_enc),
        s(:sym, :tk_call_with_enc)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :name,
            s(:nil)),
          s(:optarg, :parent,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :name), nil,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Tk_Namespace_ID), :mutex), :synchronize),
              s(:args),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:const, nil, :Tk_Namespace_ID), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_ip_id_))),
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk_Namespace_ID), :[],
                    s(:int, 1)), :succ!)))),
          s(:if,
            s(:send,
              s(:lvar, :name), :==,
              s(:str, "")),
            s(:lvasgn, :name,
              s(:send, nil, :__tk_call,
                s(:str, "namespace"),
                s(:str, "current"))), nil),
          s(:if,
            s(:lvar, :parent),
            s(:if,
              s(:send,
                s(:lvar, :parent), :=~,
                s(:regexp,
                  s(:str, "^::"),
                  s(:regopt))),
              s(:if,
                s(:send,
                  s(:lvar, :name), :=~,
                  s(:regexp,
                    s(:str, "^::"),
                    s(:regopt))),
                s(:ivasgn, :@fullname,
                  s(:send,
                    s(:lvar, :parent), :+,
                    s(:lvar, :name))),
                s(:ivasgn, :@fullname,
                  s(:send,
                    s(:send,
                      s(:lvar, :parent), :+,
                      s(:str, "::")), :+,
                    s(:lvar, :name)))),
              s(:begin,
                s(:lvasgn, :ancestor,
                  s(:send, nil, :__tk_call,
                    s(:str, "namespace"),
                    s(:str, "current"))),
                s(:if,
                  s(:send,
                    s(:lvar, :ancestor), :==,
                    s(:str, "::")),
                  s(:lvasgn, :ancestor,
                    s(:str, "")), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :name), :=~,
                    s(:regexp,
                      s(:str, "^::"),
                      s(:regopt))),
                  s(:ivasgn, :@fullname,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :ancestor), :+,
                          s(:str, "::")), :+,
                        s(:lvar, :parent)), :+,
                      s(:lvar, :name))),
                  s(:ivasgn, :@fullname,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :ancestor), :+,
                            s(:str, "::")), :+,
                          s(:lvar, :parent)), :+,
                        s(:str, "::")), :+,
                      s(:lvar, :name)))))),
            s(:begin,
              s(:lvasgn, :ancestor,
                s(:send, nil, :__tk_call,
                  s(:str, "namespace"),
                  s(:str, "current"))),
              s(:if,
                s(:send,
                  s(:lvar, :ancestor), :==,
                  s(:str, "::")),
                s(:lvasgn, :ancestor,
                  s(:str, "")), nil),
              s(:if,
                s(:send,
                  s(:lvar, :name), :=~,
                  s(:regexp,
                    s(:str, "^::"),
                    s(:regopt))),
                s(:ivasgn, :@fullname,
                  s(:lvar, :name)),
                s(:ivasgn, :@fullname,
                  s(:send,
                    s(:send,
                      s(:lvar, :ancestor), :+,
                      s(:str, "::")), :+,
                    s(:lvar, :name)))))),
          s(:ivasgn, :@path,
            s(:ivar, :@fullname)),
          s(:ivasgn, :@parent,
            s(:send, nil, :__tk_call,
              s(:str, "namespace"),
              s(:str, "qualifiers"),
              s(:ivar, :@fullname))),
          s(:ivasgn, :@name,
            s(:send, nil, :__tk_call,
              s(:str, "namespace"),
              s(:str, "tail"),
              s(:ivar, :@fullname))),
          s(:send, nil, :__tk_call,
            s(:str, "namespace"),
            s(:str, "eval"),
            s(:ivar, :@fullname),
            s(:str, "")),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const, nil, :Tk_Namespace_ID_TBL), :[]=,
              s(:ivar, :@fullname),
              s(:self))))),
      s(:defs,
        s(:self), :children,
        s(:args,
          s(:restarg, :args)),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_call,
                s(:str, "namespace"),
                s(:str, "children"),
                s(:splat,
                  s(:lvar, :args)))), :collect),
          s(:args,
            s(:arg, :ns)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :key?,
                s(:lvar, :ns)),
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :[],
                s(:lvar, :ns)),
              s(:lvar, :ns))))),
      s(:def, :children,
        s(:args,
          s(:optarg, :pattern,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :TkNamespace), :children,
          s(:ivar, :@fullname),
          s(:lvar, :pattern))),
      s(:defs,
        s(:self), :code,
        s(:args,
          s(:optarg, :script,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:send,
          s(:send,
            s(:const, nil, :TkNamespace), :new,
            s(:str, "")), :code,
          s(:lvar, :script))),
      s(:def, :code,
        s(:args,
          s(:optarg, :script,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :script), :kind_of?,
              s(:const, nil, :String)),
            s(:lvasgn, :cmd,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:restarg, :args)),
                s(:begin,
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:send,
                        s(:const, nil, :ScopeArgs), :new,
                        s(:ivar, :@fullname),
                        s(:splat,
                          s(:lvar, :args))), :instance_eval,
                      s(:lvar, :script))),
                  s(:lvasgn, :id,
                    s(:send,
                      s(:lvar, :ret), :object_id)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkNamespace), :Tk_NsCode_RetObjID_TBL), :[]=,
                    s(:lvar, :id),
                    s(:lvar, :ret)),
                  s(:lvar, :id)))),
            s(:if,
              s(:send,
                s(:lvar, :script), :kind_of?,
                s(:const, nil, :Proc)),
              s(:lvasgn, :cmd,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:restarg, :args)),
                  s(:begin,
                    s(:if,
                      s(:const,
                        s(:const, nil, :TkCore), :WITH_RUBY_VM),
                      s(:begin,
                        s(:lvasgn, :obj,
                          s(:send,
                            s(:const, nil, :ScopeArgs), :new,
                            s(:ivar, :@fullname),
                            s(:splat,
                              s(:lvar, :args)))),
                        s(:lvasgn, :ret,
                          s(:send,
                            s(:lvar, :obj), :instance_exec,
                            s(:lvar, :obj),
                            s(:block_pass,
                              s(:lvar, :script))))),
                      s(:lvasgn, :ret,
                        s(:send,
                          s(:send,
                            s(:const, nil, :ScopeArgs), :new,
                            s(:ivar, :@fullname),
                            s(:splat,
                              s(:lvar, :args))), :instance_eval,
                          s(:block_pass,
                            s(:lvar, :script))))),
                    s(:lvasgn, :id,
                      s(:send,
                        s(:lvar, :ret), :object_id)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkNamespace), :Tk_NsCode_RetObjID_TBL), :[]=,
                      s(:lvar, :id),
                      s(:lvar, :ret)),
                    s(:lvar, :id)))),
              s(:send, nil, :fail,
                s(:const, nil, :ArgumentError),
                s(:str, "String or Proc is expected")))),
          s(:send,
            s(:const,
              s(:const, nil, :TkNamespace), :NsCode), :new,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "namespace"),
              s(:str, "code"),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :cmd),
                s(:false))),
            s(:true)))),
      s(:defs,
        s(:self), :current_path,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "current"))),
      s(:def, :current_path,
        s(:args),
        s(:ivar, :@fullname)),
      s(:defs,
        s(:self), :current,
        s(:args),
        s(:begin,
          s(:lvasgn, :ns,
            s(:send,
              s(:self), :current_path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :key?,
                s(:lvar, :ns)),
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :[],
                s(:lvar, :ns)),
              s(:lvar, :ns))))),
      s(:def, :current_namespace,
        s(:args),
        s(:self)),
      s(:alias,
        s(:sym, :current),
        s(:sym, :current_namespace)),
      s(:defs,
        s(:self), :delete,
        s(:args,
          s(:restarg, :ns_list)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "delete"),
            s(:splat,
              s(:lvar, :ns_list))),
          s(:block,
            s(:send,
              s(:lvar, :ns_list), :each),
            s(:args,
              s(:arg, :ns)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
              s(:args),
              s(:if,
                s(:send,
                  s(:lvar, :ns), :kind_of?,
                  s(:const, nil, :TkNamespace)),
                s(:send,
                  s(:const, nil, :Tk_Namespace_ID_TBL), :delete,
                  s(:send,
                    s(:lvar, :ns), :path)),
                s(:send,
                  s(:const, nil, :Tk_Namespace_ID_TBL), :delete,
                  s(:send,
                    s(:lvar, :ns), :to_s))))))),
      s(:def, :delete,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespece), :delete,
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :ensemble_create,
        s(:args,
          s(:restarg, :keys)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "ensemble"),
          s(:str, "create"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:defs,
        s(:self), :ensemble_configure,
        s(:args,
          s(:arg, :cmd),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :slot), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "ensemble"),
            s(:str, "configure"),
            s(:lvar, :cmd),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :slot)))),
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "ensemble"),
            s(:str, "configure"),
            s(:lvar, :cmd),
            s(:send,
              s(:str, "-"), :+,
              s(:send,
                s(:lvar, :slot), :to_s)),
            s(:lvar, :value)))),
      s(:defs,
        s(:self), :ensemble_configinfo,
        s(:args,
          s(:arg, :cmd),
          s(:optarg, :slot,
            s(:nil))),
        s(:if,
          s(:lvar, :slot),
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "ensemble"),
            s(:str, "configure"),
            s(:lvar, :cmd),
            s(:send,
              s(:str, "-"), :+,
              s(:send,
                s(:lvar, :slot), :to_s))),
          s(:begin,
            s(:lvasgn, :inf,
              s(:hash)),
            s(:block,
              s(:send,
                s(:send, nil, :Hash,
                  s(:splat,
                    s(:send, nil, :tk_split_simplelist,
                      s(:send, nil, :tk_call,
                        s(:str, "namespace"),
                        s(:str, "ensemble"),
                        s(:str, "configure"),
                        s(:lvar, :cmd))))), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :inf), :[]=,
                s(:send,
                  s(:lvar, :k), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1))),
                s(:lvar, :v))),
            s(:lvar, :inf)))),
      s(:defs,
        s(:self), :ensemble_exist?,
        s(:args,
          s(:arg, :cmd)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "ensemble"),
            s(:str, "exists"),
            s(:lvar, :cmd)))),
      s(:defs,
        s(:self), :eval,
        s(:args,
          s(:arg, :namespace),
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new)),
          s(:restarg, :args)),
        s(:send,
          s(:send,
            s(:const, nil, :TkNamespace), :new,
            s(:lvar, :namespace)), :eval,
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :eval,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new)),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :code_obj,
            s(:send, nil, :code,
              s(:lvar, :cmd))),
          s(:lvasgn, :ret,
            s(:send,
              s(:lvar, :code_obj), :call,
              s(:splat,
                s(:lvar, :args)))),
          s(:send, nil, :uninstall_cmd,
            s(:send, nil, :_fromUTF8,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                  s(:send, nil, :_toUTF8,
                    s(:send,
                      s(:lvar, :code_obj), :path))), :[],
                s(:int, -1)))),
          s(:lvar, :ret))),
      s(:defs,
        s(:self), :exist?,
        s(:args,
          s(:arg, :ns)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "exists"),
            s(:lvar, :ns)))),
      s(:def, :exist?,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespece), :exist?,
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :export,
        s(:args,
          s(:restarg, :patterns)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "export"),
          s(:splat,
            s(:lvar, :patterns)))),
      s(:defs,
        s(:self), :export_with_clear,
        s(:args,
          s(:restarg, :patterns)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "export"),
          s(:str, "-clear"),
          s(:splat,
            s(:lvar, :patterns)))),
      s(:def, :export,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespace), :export,
          s(:ivar, :@fullname))),
      s(:def, :export_with_clear,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespace), :export_with_clear,
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :forget,
        s(:args,
          s(:restarg, :patterns)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "forget"),
          s(:splat,
            s(:lvar, :patterns)))),
      s(:def, :forget,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespace), :forget,
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :import,
        s(:args,
          s(:restarg, :patterns)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "import"),
          s(:splat,
            s(:lvar, :patterns)))),
      s(:defs,
        s(:self), :force_import,
        s(:args,
          s(:restarg, :patterns)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "import"),
          s(:str, "-force"),
          s(:splat,
            s(:lvar, :patterns)))),
      s(:def, :import,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespace), :import,
          s(:ivar, :@fullname))),
      s(:def, :force_import,
        s(:args),
        s(:send,
          s(:const, nil, :TkNamespace), :force_import,
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :inscope,
        s(:args,
          s(:arg, :namespace),
          s(:arg, :script),
          s(:restarg, :args)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "inscope"),
          s(:lvar, :namespace),
          s(:lvar, :script),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :inscope,
        s(:args,
          s(:arg, :script),
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkNamespace), :inscope,
          s(:ivar, :@fullname),
          s(:lvar, :script),
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:self), :origin,
        s(:args,
          s(:arg, :cmd)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "origin"),
          s(:lvar, :cmd))),
      s(:defs,
        s(:self), :parent,
        s(:args,
          s(:optarg, :namespace,
            s(:const, nil, :None))),
        s(:begin,
          s(:lvasgn, :ns,
            s(:send, nil, :tk_call,
              s(:str, "namespace"),
              s(:str, "parent"),
              s(:lvar, :namespace))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :key?,
                s(:lvar, :ns)),
              s(:send,
                s(:const, nil, :Tk_Namespace_ID_TBL), :[],
                s(:lvar, :ns)),
              s(:lvar, :ns))))),
      s(:def, :parent,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "parent"),
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :get_path,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "path"))),
      s(:defs,
        s(:self), :set_path,
        s(:args,
          s(:restarg, :namespace_list)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "path"),
          s(:send, nil, :array2tk_list,
            s(:lvar, :namespace_list)))),
      s(:def, :set_path,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "path"),
          s(:ivar, :@fullname))),
      s(:defs,
        s(:self), :qualifiers,
        s(:args,
          s(:arg, :str)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "qualifiers"),
          s(:lvar, :str))),
      s(:defs,
        s(:self), :tail,
        s(:args,
          s(:arg, :str)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "tail"),
          s(:lvar, :str))),
      s(:defs,
        s(:self), :upvar,
        s(:args,
          s(:arg, :namespace),
          s(:restarg, :var_pairs)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "upvar"),
          s(:lvar, :namespace),
          s(:splat,
            s(:begin,
              s(:send,
                s(:lvar, :var_pairs), :flatten))))),
      s(:def, :upvar,
        s(:args,
          s(:restarg, :var_pairs)),
        s(:send,
          s(:const, nil, :TkNamespace), :inscope,
          s(:ivar, :@fullname),
          s(:splat,
            s(:begin,
              s(:send,
                s(:lvar, :var_pairs), :flatten))))),
      s(:defs,
        s(:self), :get_unknown_handler,
        s(:args),
        s(:send, nil, :tk_tcl2ruby,
          s(:send, nil, :tk_call,
            s(:str, "namespace"),
            s(:str, "unknown")))),
      s(:defs,
        s(:self), :set_unknown_handler,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "unknown"),
          s(:lvar, :cmd))),
      s(:defs,
        s(:self), :which,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "which"),
          s(:lvar, :name))),
      s(:defs,
        s(:self), :which_command,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "which"),
          s(:str, "-command"),
          s(:lvar, :name))),
      s(:defs,
        s(:self), :which_variable,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :tk_call,
          s(:str, "namespace"),
          s(:str, "which"),
          s(:str, "-variable"),
          s(:lvar, :name))))),
  s(:casgn,
    s(:const, nil, :TkNamespace), :Global,
    s(:send,
      s(:const, nil, :TkNamespace), :new,
      s(:str, "::"))))
