s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/itemfont")),
  s(:send, nil, :require,
    s(:str, "tk/itemconfig")),
  s(:send, nil, :require,
    s(:str, "tk/scrollable")),
  s(:send, nil, :require,
    s(:str, "tk/txtwin_abst")),
  s(:module,
    s(:const, nil, :TkTextTagConfig),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkTreatItemFont)),
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :__item_cget_cmd,
        s(:args,
          s(:arg, :id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:send,
            s(:lvar, :id), :[],
            s(:int, 0)),
          s(:str, "cget"),
          s(:send,
            s(:lvar, :id), :[],
            s(:int, 1)))),
      s(:send, nil, :private,
        s(:sym, :__item_cget_cmd)),
      s(:def, :__item_config_cmd,
        s(:args,
          s(:arg, :id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:send,
            s(:lvar, :id), :[],
            s(:int, 0)),
          s(:str, "configure"),
          s(:send,
            s(:lvar, :id), :[],
            s(:int, 1)))),
      s(:send, nil, :private,
        s(:sym, :__item_config_cmd)),
      s(:def, :__item_pathname,
        s(:args,
          s(:arg, :id)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :id), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :id,
              s(:send, nil, :tagid,
                s(:send,
                  s(:lvar, :id), :[],
                  s(:int, 1)))), nil),
          s(:send,
            s(:array,
              s(:send,
                s(:self), :path),
              s(:lvar, :id)), :join,
            s(:str, ";")))),
      s(:send, nil, :private,
        s(:sym, :__item_pathname)),
      s(:def, :tag_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "tag"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :tag_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "tag"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :tag_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "tag"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :tag_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "tag"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :tag_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "tag"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_tag_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "tag"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :window_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "window"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :window_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "window"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :window_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "window"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :window_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "window"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :window_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "window"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_window_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "window"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:send, nil, :private,
        s(:sym, :itemcget_tkstring),
        s(:sym, :itemcget),
        s(:sym, :itemcget_strict)),
      s(:send, nil, :private,
        s(:sym, :itemconfigure),
        s(:sym, :itemconfiginfo),
        s(:sym, :current_itemconfiginfo)))),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :Text),
    s(:const, nil, :TkTextWin),
    s(:begin,
      s(:casgn, nil, :ItemConfCMD,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "tag"), :freeze),
            s(:send,
              s(:str, "configure"), :freeze)), :freeze)),
      s(:send, nil, :include,
        s(:const, nil, :TkTextTagConfig)),
      s(:send, nil, :include,
        s(:const, nil, :Scrollable)),
      s(:module,
        s(:const, nil, :IndexModMethods),
        s(:begin,
          s(:def, :+,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Numeric)),
                s(:return,
                  s(:send, nil, :chars,
                    s(:lvar, :mod))), nil),
              s(:lvasgn, :mod,
                s(:send,
                  s(:lvar, :mod), :to_s)),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :=~,
                  s(:regexp,
                    s(:str, "^\\s*[+-]?\\d"),
                    s(:regopt))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :String), :new,
                        s(:send, nil, :id)), :<<,
                      s(:str, " + ")), :<<,
                    s(:lvar, :mod))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :String), :new,
                        s(:send, nil, :id)), :<<,
                      s(:str, " ")), :<<,
                    s(:lvar, :mod)))))),
          s(:def, :-,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Numeric)),
                s(:return,
                  s(:send, nil, :chars,
                    s(:send,
                      s(:lvar, :mod), :-@))), nil),
              s(:lvasgn, :mod,
                s(:send,
                  s(:lvar, :mod), :to_s)),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :=~,
                  s(:regexp,
                    s(:str, "^\\s*[+-]?\\d"),
                    s(:regopt))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :String), :new,
                        s(:send, nil, :id)), :<<,
                      s(:str, " - ")), :<<,
                    s(:lvar, :mod))),
                s(:if,
                  s(:send,
                    s(:lvar, :mod), :=~,
                    s(:regexp,
                      s(:str, "^\\s*[-]\\s+(\\d.*)$"),
                      s(:regopt))),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :Text), :IndexString), :new,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " - -")), :<<,
                      s(:nth_ref, 1))),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :Text), :IndexString), :new,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:lvar, :mod))))))),
          s(:def, :chars,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " chars"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " chars")))))),
          s(:alias,
            s(:sym, :char),
            s(:sym, :chars)),
          s(:def, :display_chars,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " display chars"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " display chars")))))),
          s(:alias,
            s(:sym, :display_char),
            s(:sym, :display_chars)),
          s(:def, :any_chars,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " any chars"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " any chars")))))),
          s(:alias,
            s(:sym, :any_char),
            s(:sym, :any_chars)),
          s(:def, :indices,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " indices"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " indices")))))),
          s(:def, :display_indices,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " display indices"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " display indices")))))),
          s(:def, :any_indices,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " any indices"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " any indices")))))),
          s(:def, :lines,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " lines"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " lines")))))),
          s(:alias,
            s(:sym, :line),
            s(:sym, :lines)),
          s(:def, :display_lines,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " display_lines"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " display lines")))))),
          s(:alias,
            s(:sym, :display_line),
            s(:sym, :display_lines)),
          s(:def, :any_lines,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :kind_of?,
                  s(:const, nil, :Integer)), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "expect Integer"))),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :<,
                  s(:int, 0)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " any_lines"))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :String), :new,
                          s(:send, nil, :id)), :<<,
                        s(:str, " + ")), :<<,
                      s(:send,
                        s(:lvar, :mod), :to_s)), :<<,
                    s(:str, " any lines")))))),
          s(:alias,
            s(:sym, :any_line),
            s(:sym, :any_lines)),
          s(:def, :linestart,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " linestart")))),
          s(:def, :lineend,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " lineend")))),
          s(:def, :display_linestart,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " display linestart")))),
          s(:def, :display_lineend,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " display lineend")))),
          s(:def, :wordstart,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " wordstart")))),
          s(:def, :wordend,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " wordend")))),
          s(:def, :display_wordstart,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " display wordstart")))),
          s(:def, :display_wordend,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:send,
                s(:send,
                  s(:const, nil, :String), :new,
                  s(:send, nil, :id)), :<<,
                s(:str, " display wordend")))))),
      s(:class,
        s(:const, nil, :IndexString),
        s(:const, nil, :String),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :IndexModMethods)),
          s(:defs,
            s(:self), :at,
            s(:args,
              s(:arg, :x),
              s(:arg, :y)),
            s(:send,
              s(:self), :new,
              s(:dstr,
                s(:str, "@"),
                s(:begin,
                  s(:lvar, :x)),
                s(:str, ","),
                s(:begin,
                  s(:lvar, :y))))),
          s(:defs,
            s(:self), :new,
            s(:args,
              s(:arg, :str)),
            s(:if,
              s(:send,
                s(:lvar, :str), :kind_of?,
                s(:const, nil, :String)),
              s(:super,
                s(:lvar, :str)),
              s(:if,
                s(:send,
                  s(:lvar, :str), :kind_of?,
                  s(:const, nil, :Symbol)),
                s(:super,
                  s(:send,
                    s(:lvar, :str), :to_s)),
                s(:lvar, :str)))),
          s(:def, :id,
            s(:args),
            s(:self)))),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "text"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Text"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:defs,
        s(:self), :new,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :obj,
            s(:block,
              s(:super,
                s(:splat,
                  s(:lvar, :args))),
              s(:args), nil)),
          s(:send,
            s(:lvar, :obj), :init_instance_variable),
          s(:if,
            s(:const,
              s(:const, nil, :TkCore), :WITH_RUBY_VM),
            s(:if,
              s(:defined?,
                s(:yield)),
              s(:send,
                s(:lvar, :obj), :instance_exec,
                s(:lvar, :obj),
                s(:block_pass,
                  s(:lvar, :block))), nil),
            s(:if,
              s(:defined?,
                s(:yield)),
              s(:send,
                s(:lvar, :obj), :instance_eval,
                s(:block_pass,
                  s(:lvar, :block))), nil)),
          s(:lvar, :obj))),
      s(:def, :init_instance_variable,
        s(:args),
        s(:begin,
          s(:ivasgn, :@cmdtbl,
            s(:array)),
          s(:ivasgn, :@tags,
            s(:hash)))),
      s(:def, :__destroy_hook__,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkTextTag), :TTagID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :TkTextTag), :TTagID_TBL), :delete,
              s(:ivar, :@path))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkTextTag), :TMarkID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const,
                s(:const, nil, :TkTextMark), :TMarkID_TBL), :delete,
              s(:ivar, :@path))))),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:super,
            s(:lvar, :keys)),
          s(:send, nil, :init_instance_variable))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:super), :<<,
          s(:str, "inactiveseletcionbackground"))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:defs,
        s(:self), :at,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :Text), :IndexString), :at,
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :at,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :Text), :IndexString), :at,
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :index,
        s(:args,
          s(:arg, :idx)),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :Text), :IndexString), :new,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "index"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :idx))))),
      s(:def, :get_displaychars,
        s(:args,
          s(:restarg, :index)),
        s(:send, nil, :get,
          s(:str, "-displaychars"),
          s(:splat,
            s(:lvar, :index)))),
      s(:def, :value,
        s(:args),
        s(:send, nil, :_fromUTF8,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "get"),
            s(:str, "1.0"),
            s(:str, "end - 1 char")))),
      s(:def, :value=,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "delete"),
            s(:str, "1.0"),
            s(:str, "end")),
          s(:send, nil, :tk_send_without_enc,
            s(:str, "insert"),
            s(:str, "1.0"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :val))),
          s(:lvar, :val))),
      s(:def, :clear,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "delete"),
            s(:str, "1.0"),
            s(:str, "end")),
          s(:self))),
      s(:alias,
        s(:sym, :erase),
        s(:sym, :clear)),
      s(:def, :_addcmd,
        s(:args,
          s(:arg, :cmd)),
        s(:send,
          s(:ivar, :@cmdtbl), :push,
          s(:lvar, :cmd))),
      s(:def, :_addtag,
        s(:args,
          s(:arg, :name),
          s(:arg, :obj)),
        s(:send,
          s(:ivar, :@tags), :[]=,
          s(:lvar, :name),
          s(:lvar, :obj))),
      s(:def, :tagid,
        s(:args,
          s(:arg, :tag)),
        s(:if,
          s(:or,
            s(:or,
              s(:or,
                s(:send,
                  s(:lvar, :tag), :kind_of?,
                  s(:const, nil, :TkTextTag)),
                s(:send,
                  s(:lvar, :tag), :kind_of?,
                  s(:const, nil, :TkTextMark))),
              s(:send,
                s(:lvar, :tag), :kind_of?,
                s(:const, nil, :TkTextImage))),
            s(:send,
              s(:lvar, :tag), :kind_of?,
              s(:const, nil, :TkTextWindow))),
          s(:send,
            s(:lvar, :tag), :id),
          s(:lvar, :tag))),
      s(:send, nil, :private,
        s(:sym, :tagid)),
      s(:def, :tagid2obj,
        s(:args,
          s(:arg, :tagid)),
        s(:if,
          s(:send,
            s(:ivar, :@tags), :[],
            s(:lvar, :tagid)),
          s(:send,
            s(:ivar, :@tags), :[],
            s(:lvar, :tagid)),
          s(:lvar, :tagid))),
      s(:def, :tag_names,
        s(:args,
          s(:optarg, :index,
            s(:const, nil, :None))),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "tag"),
                s(:str, "names"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :index))),
              s(:false),
              s(:true)), :collect),
          s(:args,
            s(:arg, :elt)),
          s(:send, nil, :tagid2obj,
            s(:lvar, :elt)))),
      s(:def, :mark_names,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "mark"),
                s(:str, "names")),
              s(:false),
              s(:true)), :collect),
          s(:args,
            s(:arg, :elt)),
          s(:send, nil, :tagid2obj,
            s(:lvar, :elt)))),
      s(:def, :mark_gravity,
        s(:args,
          s(:arg, :mark),
          s(:optarg, :direction,
            s(:nil))),
        s(:if,
          s(:lvar, :direction),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "mark"),
              s(:str, "gravity"),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :mark)),
              s(:lvar, :direction)),
            s(:self)),
          s(:send, nil, :tk_send_without_enc,
            s(:str, "mark"),
            s(:str, "gravity"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :mark))))),
      s(:def, :mark_set,
        s(:args,
          s(:arg, :mark),
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "mark"),
            s(:str, "set"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :mark)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:alias,
        s(:sym, :set_mark),
        s(:sym, :mark_set)),
      s(:def, :mark_unset,
        s(:args,
          s(:restarg, :marks)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "mark"),
            s(:str, "unset"),
            s(:splat,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :marks), :collect),
                  s(:args,
                    s(:arg, :mark)),
                  s(:send, nil, :_get_eval_enc_str,
                    s(:lvar, :mark)))))),
          s(:self))),
      s(:alias,
        s(:sym, :unset_mark),
        s(:sym, :mark_unset)),
      s(:def, :mark_next,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :tagid2obj,
          s(:send, nil, :_fromUTF8,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "mark"),
              s(:str, "next"),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :index)))))),
      s(:alias,
        s(:sym, :next_mark),
        s(:sym, :mark_next)),
      s(:def, :mark_previous,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :tagid2obj,
          s(:send, nil, :_fromUTF8,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "mark"),
              s(:str, "previous"),
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :index)))))),
      s(:alias,
        s(:sym, :previous_mark),
        s(:sym, :mark_previous)),
      s(:def, :image_cget_strict,
        s(:args,
          s(:arg, :index),
          s(:arg, :slot)),
        s(:case,
          s(:send,
            s(:lvar, :slot), :to_s),
          s(:when,
            s(:str, "text"),
            s(:str, "label"),
            s(:str, "show"),
            s(:str, "data"),
            s(:str, "file"),
            s(:send, nil, :_fromUTF8,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "image"),
                s(:str, "cget"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :index)),
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :slot)))))),
          s(:send, nil, :tk_tcl2ruby,
            s(:send, nil, :_fromUTF8,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "image"),
                s(:str, "cget"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :index)),
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :slot)))))))),
      s(:def, :image_cget,
        s(:args,
          s(:arg, :index),
          s(:arg, :slot)),
        s(:if,
          s(:send,
            s(:const, nil, :TkItemConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :image_cget_strict,
                s(:lvar, :index),
                s(:lvar, :slot)),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:kwbegin,
                  s(:rescue,
                    s(:if,
                      s(:send,
                        s(:send, nil, :current_image_configinfo,
                          s(:lvar, :index)), :has_key?,
                        s(:send,
                          s(:lvar, :slot), :to_s)),
                      s(:send, nil, :fail,
                        s(:lvar, :e)),
                      s(:nil)),
                    s(:resbody, nil, nil,
                      s(:send, nil, :fail,
                        s(:lvar, :e))), nil))), nil)),
          s(:send, nil, :image_cget_strict,
            s(:lvar, :index),
            s(:lvar, :slot)))),
      s(:def, :image_configure,
        s(:args,
          s(:arg, :index),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :slot), :kind_of?,
              s(:const, nil, :Hash)),
            s(:send, nil, :_fromUTF8,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "image"),
                s(:str, "configure"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :index)),
                s(:splat,
                  s(:send, nil, :hash_kv,
                    s(:lvar, :slot),
                    s(:true))))),
            s(:send, nil, :_fromUTF8,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "image"),
                s(:str, "configure"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :index)),
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :slot))),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :value))))),
          s(:self))),
      s(:def, :image_configinfo,
        s(:args,
          s(:arg, :index),
          s(:optarg, :slot,
            s(:nil))),
        s(:if,
          s(:const,
            s(:const, nil, :TkComm), :GET_CONFIGINFO_AS_ARRAY),
          s(:if,
            s(:lvar, :slot),
            s(:begin,
              s(:case,
                s(:send,
                  s(:lvar, :slot), :to_s),
                s(:when,
                  s(:str, "text"),
                  s(:str, "label"),
                  s(:str, "show"),
                  s(:str, "data"),
                  s(:str, "file"),
                  s(:lvasgn, :conf,
                    s(:send, nil, :tk_split_simplelist,
                      s(:send, nil, :tk_send_without_enc,
                        s(:str, "image"),
                        s(:str, "configure"),
                        s(:send, nil, :_get_eval_enc_str,
                          s(:lvar, :index)),
                        s(:dstr,
                          s(:str, "-"),
                          s(:begin,
                            s(:lvar, :slot)))),
                      s(:false),
                      s(:true)))),
                s(:lvasgn, :conf,
                  s(:send, nil, :tk_split_list,
                    s(:send, nil, :tk_send_without_enc,
                      s(:str, "image"),
                      s(:str, "configure"),
                      s(:send, nil, :_get_eval_enc_str,
                        s(:lvar, :index)),
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :slot)))),
                    s(:int, 0),
                    s(:false),
                    s(:true)))),
              s(:send,
                s(:lvar, :conf), :[]=,
                s(:int, 0),
                s(:send,
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:int, 0)), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1)))),
              s(:lvar, :conf)),
            s(:block,
              s(:send,
                s(:send, nil, :tk_split_simplelist,
                  s(:send, nil, :tk_send_without_enc,
                    s(:str, "image"),
                    s(:str, "configure"),
                    s(:send, nil, :_get_eval_enc_str,
                      s(:lvar, :index))),
                  s(:false),
                  s(:false)), :collect),
              s(:args,
                s(:arg, :conflist)),
              s(:begin,
                s(:lvasgn, :conf,
                  s(:send, nil, :tk_split_simplelist,
                    s(:lvar, :conflist),
                    s(:false),
                    s(:true))),
                s(:send,
                  s(:lvar, :conf), :[]=,
                  s(:int, 0),
                  s(:send,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:int, 0)), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1)))),
                s(:case,
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:int, 0)),
                  s(:when,
                    s(:str, "text"),
                    s(:str, "label"),
                    s(:str, "show"),
                    s(:str, "data"),
                    s(:str, "file"), nil),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :conf), :[],
                        s(:int, 3)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:int, 3)), :index,
                          s(:str, "{")),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:int, 3),
                          s(:send, nil, :tk_split_list,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:int, 3)))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:int, 3),
                          s(:send, nil, :tk_tcl2ruby,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:int, 3))))), nil),
                    s(:if,
                      s(:send,
                        s(:lvar, :conf), :[],
                        s(:int, 4)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:int, 4)), :index,
                          s(:str, "{")),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:int, 4),
                          s(:send, nil, :tk_split_list,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:int, 4)))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:int, 4),
                          s(:send, nil, :tk_tcl2ruby,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:int, 4))))), nil))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :conf), :size), :==,
                    s(:int, 2)),
                  s(:send,
                    s(:lvar, :conf), :[]=,
                    s(:int, 1),
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :[],
                        s(:int, 1)), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))), nil),
                s(:lvar, :conf)))),
          s(:if,
            s(:lvar, :slot),
            s(:begin,
              s(:case,
                s(:send,
                  s(:lvar, :slot), :to_s),
                s(:when,
                  s(:str, "text"),
                  s(:str, "label"),
                  s(:str, "show"),
                  s(:str, "data"),
                  s(:str, "file"),
                  s(:lvasgn, :conf,
                    s(:send, nil, :tk_split_simplelist,
                      s(:send, nil, :tk_send_without_enc,
                        s(:str, "image"),
                        s(:str, "configure"),
                        s(:send, nil, :_get_eval_enc_str,
                          s(:lvar, :index)),
                        s(:dstr,
                          s(:str, "-"),
                          s(:begin,
                            s(:lvar, :slot)))),
                      s(:false),
                      s(:true)))),
                s(:lvasgn, :conf,
                  s(:send, nil, :tk_split_list,
                    s(:send, nil, :tk_send_without_enc,
                      s(:str, "image"),
                      s(:str, "configure"),
                      s(:send, nil, :_get_eval_enc_str,
                        s(:lvar, :index)),
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :slot)))),
                    s(:int, 0),
                    s(:false),
                    s(:true)))),
              s(:lvasgn, :key,
                s(:send,
                  s(:send,
                    s(:lvar, :conf), :shift), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1)))),
              s(:hash,
                s(:pair,
                  s(:lvar, :key),
                  s(:lvar, :conf)))),
            s(:begin,
              s(:lvasgn, :ret,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send, nil, :tk_split_simplelist,
                    s(:send, nil, :tk_send_without_enc,
                      s(:str, "image"),
                      s(:str, "configure"),
                      s(:send, nil, :_get_eval_enc_str,
                        s(:lvar, :index))),
                    s(:false),
                    s(:false)), :each),
                s(:args,
                  s(:arg, :conflist)),
                s(:begin,
                  s(:lvasgn, :conf,
                    s(:send, nil, :tk_split_simplelist,
                      s(:lvar, :conflist),
                      s(:false),
                      s(:true))),
                  s(:lvasgn, :key,
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :shift), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))),
                  s(:case,
                    s(:lvar, :key),
                    s(:when,
                      s(:str, "text"),
                      s(:str, "label"),
                      s(:str, "show"),
                      s(:str, "data"),
                      s(:str, "file"), nil),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 2)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:int, 2)), :index,
                            s(:str, "{")),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:int, 2),
                            s(:send, nil, :tk_split_list,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:int, 2)))),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:int, 2),
                            s(:send, nil, :tk_tcl2ruby,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:int, 2))))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 3)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:int, 3)), :index,
                            s(:str, "{")),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:int, 3),
                            s(:send, nil, :tk_split_list,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:int, 3)))),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:int, 3),
                            s(:send, nil, :tk_tcl2ruby,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:int, 3))))), nil))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :size), :==,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :ret), :[]=,
                      s(:lvar, :key),
                      s(:send,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 0)), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1)))),
                    s(:send,
                      s(:lvar, :ret), :[]=,
                      s(:lvar, :key),
                      s(:lvar, :conf))))),
              s(:lvar, :ret))))),
      s(:def, :current_image_configinfo,
        s(:args,
          s(:arg, :index),
          s(:optarg, :slot,
            s(:nil))),
        s(:if,
          s(:const,
            s(:const, nil, :TkComm), :GET_CONFIGINFO_AS_ARRAY),
          s(:if,
            s(:lvar, :slot),
            s(:begin,
              s(:lvasgn, :conf,
                s(:send, nil, :image_configinfo,
                  s(:lvar, :index),
                  s(:lvar, :slot))),
              s(:hash,
                s(:pair,
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:int, 4))))),
            s(:begin,
              s(:lvasgn, :ret,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send, nil, :image_configinfo,
                    s(:lvar, :index)), :each),
                s(:args,
                  s(:arg, :conf)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :conf), :size), :>,
                    s(:int, 2)),
                  s(:send,
                    s(:lvar, :ret), :[]=,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:int, 0)),
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:int, 4))), nil)),
              s(:lvar, :ret))),
          s(:begin,
            s(:lvasgn, :ret,
              s(:hash)),
            s(:block,
              s(:send,
                s(:send, nil, :image_configinfo,
                  s(:lvar, :index),
                  s(:lvar, :slot)), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :conf)),
              s(:if,
                s(:send,
                  s(:lvar, :conf), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:lvar, :ret), :[]=,
                  s(:lvar, :k),
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:int, -1))), nil)),
            s(:lvar, :ret)))),
      s(:def, :image_names,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "image"),
                s(:str, "names")),
              s(:false),
              s(:true)), :collect),
          s(:args,
            s(:arg, :elt)),
          s(:send, nil, :tagid2obj,
            s(:lvar, :elt)))),
      s(:def, :set_insert,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "mark"),
            s(:str, "set"),
            s(:str, "insert"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :set_current,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "mark"),
            s(:str, "set"),
            s(:str, "current"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :insert,
        s(:args,
          s(:arg, :index),
          s(:arg, :chars),
          s(:restarg, :tags)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :tags), :[],
              s(:int, 0)), :kind_of?,
            s(:const, nil, :Array)),
          s(:begin,
            s(:lvasgn, :args,
              s(:array,
                s(:lvar, :chars))),
            s(:while,
              s(:send,
                s(:send,
                  s(:lvar, :tags), :size), :>,
                s(:int, 0)),
              s(:begin,
                s(:send,
                  s(:lvar, :args), :<<,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :tags), :shift), :collect),
                      s(:args,
                        s(:arg, :x)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :x))), :join,
                    s(:str, " "))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :tags), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :args), :<<,
                    s(:send,
                      s(:lvar, :tags), :shift)), nil))),
            s(:super,
              s(:lvar, :index),
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :tags), :size), :==,
              s(:int, 0)),
            s(:super,
              s(:lvar, :index),
              s(:lvar, :chars)),
            s(:super,
              s(:lvar, :index),
              s(:lvar, :chars),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :tags), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :x))), :join,
                s(:str, " ")))))),
      s(:def, :destroy,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@tags), nil,
            s(:ivasgn, :@tags,
              s(:hash))),
          s(:block,
            s(:send,
              s(:ivar, :@tags), :each_value),
            s(:args,
              s(:arg, :t)),
            s(:send,
              s(:lvar, :t), :destroy)),
          s(:super))),
      s(:def, :backspace,
        s(:args),
        s(:send,
          s(:self), :delete,
          s(:str, "insert"))),
      s(:def, :bbox,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "bbox"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))),
      s(:def, :compare,
        s(:args,
          s(:arg, :idx1),
          s(:arg, :op),
          s(:arg, :idx2)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "compare"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :idx1)),
            s(:lvar, :op),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :idx2))))),
      s(:def, :count,
        s(:args,
          s(:arg, :idx1),
          s(:arg, :idx2),
          s(:restarg, :opts)),
        s(:begin,
          s(:lvasgn, :cnt,
            s(:int, 0)),
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :opts), :collect),
              s(:args,
                s(:arg, :opt)),
              s(:begin,
                s(:lvasgn, :str,
                  s(:send,
                    s(:lvar, :opt), :to_s)),
                s(:if,
                  s(:send,
                    s(:lvar, :str), :!=,
                    s(:str, "update")),
                  s(:op_asgn,
                    s(:lvasgn, :cnt), :+,
                    s(:int, 1)), nil),
                s(:send,
                  s(:str, "-"), :+,
                  s(:lvar, :str))))),
          s(:send,
            s(:send,
              s(:lvar, :args), :<<,
              s(:send, nil, :_get_eval_enc_str,
                s(:lvar, :idx1))), :<<,
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :idx2))),
          s(:if,
            s(:send,
              s(:lvar, :cnt), :<=,
              s(:int, 1)),
            s(:send, nil, :number,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "count"),
                s(:splat,
                  s(:lvar, :opts)))),
            s(:send, nil, :list,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "count"),
                s(:splat,
                  s(:lvar, :opts))))))),
      s(:def, :count_info,
        s(:args,
          s(:arg, :idx1),
          s(:arg, :idx2),
          s(:optarg, :update,
            s(:true))),
        s(:begin,
          s(:lvasgn, :opts,
            s(:array,
              s(:sym, :chars),
              s(:sym, :displaychars),
              s(:sym, :displayindices),
              s(:sym, :displaylines),
              s(:sym, :indices),
              s(:sym, :lines),
              s(:sym, :xpixels),
              s(:sym, :ypixels))),
          s(:if,
            s(:lvar, :update),
            s(:lvasgn, :lst,
              s(:send, nil, :count,
                s(:lvar, :idx1),
                s(:lvar, :idx2),
                s(:sym, :update),
                s(:splat,
                  s(:lvar, :opts)))),
            s(:lvasgn, :lst,
              s(:send, nil, :count,
                s(:lvar, :idx1),
                s(:lvar, :idx2),
                s(:splat,
                  s(:lvar, :opts))))),
          s(:lvasgn, :info,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :opts), :each_with_index),
            s(:args,
              s(:arg, :key),
              s(:arg, :idx)),
            s(:send,
              s(:lvar, :info), :[]=,
              s(:lvar, :key),
              s(:send,
                s(:lvar, :lst), :[],
                s(:lvar, :idx)))),
          s(:lvar, :info))),
      s(:def, :peer_names,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "peer"),
            s(:str, "names")))),
      s(:def, :replace,
        s(:args,
          s(:arg, :idx1),
          s(:arg, :idx2),
          s(:restarg, :opts)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "replace"),
            s(:lvar, :idx1),
            s(:lvar, :idx2),
            s(:splat,
              s(:lvar, :opts))),
          s(:self))),
      s(:def, :debug,
        s(:args),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "debug")))),
      s(:def, :debug=,
        s(:args,
          s(:arg, :boolean)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "debug"),
            s(:lvar, :boolean)),
          s(:lvar, :boolean))),
      s(:def, :dlineinfo,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "dlineinfo"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))),
      s(:def, :modified?,
        s(:args),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "edit"),
            s(:str, "modified")))),
      s(:def, :modified,
        s(:args,
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "edit"),
            s(:str, "modified"),
            s(:lvar, :mode)),
          s(:self))),
      s(:def, :modified=,
        s(:args,
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :modified,
            s(:lvar, :mode)),
          s(:lvar, :mode))),
      s(:def, :edit_redo,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "edit"),
            s(:str, "redo")),
          s(:self))),
      s(:def, :edit_reset,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "edit"),
            s(:str, "reset")),
          s(:self))),
      s(:def, :edit_separator,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "edit"),
            s(:str, "separator")),
          s(:self))),
      s(:def, :edit_undo,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "edit"),
            s(:str, "undo")),
          s(:self))),
      s(:def, :xview_pickplace,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "xview"),
            s(:str, "-pickplace"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :yview_pickplace,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "yview"),
            s(:str, "-pickplace"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :text_copy,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk_textCopy"),
            s(:ivar, :@path)),
          s(:self))),
      s(:def, :text_cut,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk_textCut"),
            s(:ivar, :@path)),
          s(:self))),
      s(:def, :text_paste,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk_textPaste"),
            s(:ivar, :@path)),
          s(:self))),
      s(:def, :tag_add,
        s(:args,
          s(:arg, :tag),
          s(:arg, :index1),
          s(:optarg, :index2,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "tag"),
            s(:str, "add"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :tag)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index1)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index2))),
          s(:self))),
      s(:alias,
        s(:sym, :addtag),
        s(:sym, :tag_add)),
      s(:alias,
        s(:sym, :add_tag),
        s(:sym, :tag_add)),
      s(:def, :tag_delete,
        s(:args,
          s(:restarg, :tags)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "tag"),
            s(:str, "delete"),
            s(:splat,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :tags), :collect),
                  s(:args,
                    s(:arg, :tag)),
                  s(:send, nil, :_get_eval_enc_str,
                    s(:lvar, :tag)))))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkTextTag), :TTagID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :TkTextTag), :TTagID_TBL), :[],
                s(:ivar, :@path)),
              s(:block,
                s(:send,
                  s(:lvar, :tags), :each),
                s(:args,
                  s(:arg, :tag)),
                s(:if,
                  s(:send,
                    s(:lvar, :tag), :kind_of?,
                    s(:const, nil, :TkTextTag)),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkTextTag), :TTagID_TBL), :[],
                      s(:ivar, :@path)), :delete,
                    s(:send,
                      s(:lvar, :tag), :id)),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkTextTag), :TTagID_TBL), :[],
                      s(:ivar, :@path)), :delete,
                    s(:lvar, :tag)))), nil)),
          s(:self))),
      s(:alias,
        s(:sym, :deltag),
        s(:sym, :tag_delete)),
      s(:alias,
        s(:sym, :delete_tag),
        s(:sym, :tag_delete)),
      s(:def, :tag_bind,
        s(:args,
          s(:arg, :tag),
          s(:arg, :seq),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind,
            s(:array,
              s(:ivar, :@path),
              s(:str, "tag"),
              s(:str, "bind"),
              s(:lvar, :tag)),
            s(:lvar, :seq),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :tag_bind_append,
        s(:args,
          s(:arg, :tag),
          s(:arg, :seq),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind_append,
            s(:array,
              s(:ivar, :@path),
              s(:str, "tag"),
              s(:str, "bind"),
              s(:lvar, :tag)),
            s(:lvar, :seq),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :tag_bind_remove,
        s(:args,
          s(:arg, :tag),
          s(:arg, :seq)),
        s(:begin,
          s(:send, nil, :_bind_remove,
            s(:array,
              s(:ivar, :@path),
              s(:str, "tag"),
              s(:str, "bind"),
              s(:lvar, :tag)),
            s(:lvar, :seq)),
          s(:self))),
      s(:def, :tag_bindinfo,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :context,
            s(:nil))),
        s(:send, nil, :_bindinfo,
          s(:array,
            s(:ivar, :@path),
            s(:str, "tag"),
            s(:str, "bind"),
            s(:lvar, :tag)),
          s(:lvar, :context))),
      s(:def, :tag_raise,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :above,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "tag"),
            s(:str, "raise"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :tag)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :above))),
          s(:self))),
      s(:def, :tag_lower,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :below,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "tag"),
            s(:str, "lower"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :tag)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :below))),
          s(:self))),
      s(:def, :tag_remove,
        s(:args,
          s(:arg, :tag),
          s(:restarg, :indices)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "tag"),
            s(:str, "remove"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :tag)),
            s(:splat,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :indices), :collect),
                  s(:args,
                    s(:arg, :idx)),
                  s(:send, nil, :_get_eval_enc_str,
                    s(:lvar, :idx)))))),
          s(:self))),
      s(:def, :tag_ranges,
        s(:args,
          s(:arg, :tag)),
        s(:begin,
          s(:lvasgn, :l,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "tag"),
                s(:str, "ranges"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :tag))),
              s(:false),
              s(:true))),
          s(:lvasgn, :r,
            s(:array)),
          s(:while,
            s(:lvasgn, :key,
              s(:send,
                s(:lvar, :l), :shift)),
            s(:send,
              s(:lvar, :r), :push,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:lvar, :key)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Text), :IndexString), :new,
                  s(:send,
                    s(:lvar, :l), :shift))))),
          s(:lvar, :r))),
      s(:def, :tag_nextrange,
        s(:args,
          s(:arg, :tag),
          s(:arg, :first),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:block,
          s(:send,
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "tag"),
                s(:str, "nextrange"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :tag)),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :first)),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :last)))), :collect),
          s(:args,
            s(:arg, :idx)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Text), :IndexString), :new,
            s(:lvar, :idx)))),
      s(:def, :tag_prevrange,
        s(:args,
          s(:arg, :tag),
          s(:arg, :first),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:block,
          s(:send,
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "tag"),
                s(:str, "prevrange"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :tag)),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :first)),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :last)))), :collect),
          s(:args,
            s(:arg, :idx)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Text), :IndexString), :new,
            s(:lvar, :idx)))),
      s(:def, :window_names,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "window"),
                s(:str, "names")),
              s(:false),
              s(:true)), :collect),
          s(:args,
            s(:arg, :elt)),
          s(:send, nil, :tagid2obj,
            s(:lvar, :elt)))),
      s(:def, :_ktext_length,
        s(:args,
          s(:arg, :txt)),
        s(:begin,
          s(:if,
            s(:const,
              s(:const, nil, :TkCore), :WITH_ENCODING),
            s(:return,
              s(:send,
                s(:lvar, :txt), :length)), nil),
          s(:if,
            s(:send,
              s(:gvar, :$KCODE), :!~,
              s(:regexp,
                s(:str, "n"),
                s(:regopt, :i))),
            s(:return,
              s(:send,
                s(:send,
                  s(:lvar, :txt), :gsub,
                  s(:regexp,
                    s(:str, "[^\\Wa-zA-Z_\\d]"),
                    s(:regopt)),
                  s(:str, " ")), :length)), nil),
          s(:if,
            s(:const, nil, :JAPANIZED_TK),
            s(:send,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "kstring"),
                s(:str, "length"),
                s(:send, nil, :_get_eval_enc_str,
                  s(:lvar, :txt))), :to_i),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:send, nil, :tk_call_without_enc,
                    s(:str, "encoding"),
                    s(:str, "convertto"),
                    s(:str, "ascii"),
                    s(:send, nil, :_get_eval_enc_str,
                      s(:lvar, :txt))), :length),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :StandardError),
                    s(:const, nil, :NameError)), nil,
                  s(:send,
                    s(:lvar, :txt), :length)), nil))))),
      s(:send, nil, :private,
        s(:sym, :_ktext_length)),
      s(:def, :tksearch,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :nocase,
            s(:false)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :opts,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :shift), :collect),
                s(:args,
                  s(:arg, :opt)),
                s(:begin,
                  s(:lvasgn, :s_opt,
                    s(:send,
                      s(:lvar, :opt), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :s_opt), :==,
                      s(:str, "nocase")),
                    s(:lvasgn, :nocase,
                      s(:true)), nil),
                  s(:send,
                    s(:str, "-"), :+,
                    s(:lvar, :s_opt))))),
            s(:lvasgn, :opts,
              s(:array))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Regexp)),
            s(:begin,
              s(:lvasgn, :regexp,
                s(:send,
                  s(:lvar, :args), :shift)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :nocase), :!),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :regexp), :options), :&,
                        s(:const,
                          s(:const, nil, :Regexp), :IGNORECASE))), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :opts), :<<,
                  s(:str, "-nocase")), nil),
              s(:send,
                s(:lvar, :args), :unshift,
                s(:send,
                  s(:lvar, :regexp), :source))), nil),
          s(:send,
            s(:lvar, :opts), :<<,
            s(:str, "--")),
          s(:lvasgn, :ret,
            s(:send, nil, :tk_send,
              s(:str, "search"),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:lvar, :opts), :+,
                    s(:lvar, :args)))))),
          s(:if,
            s(:send,
              s(:lvar, :ret), :==,
              s(:str, "")),
            s(:nil),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:lvar, :ret))))),
      s(:def, :tksearch_with_count,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :nocase,
            s(:false)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :opts,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :shift), :collect),
                s(:args,
                  s(:arg, :opt)),
                s(:begin,
                  s(:lvasgn, :s_opt,
                    s(:send,
                      s(:lvar, :opt), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :s_opt), :==,
                      s(:str, "nocase")),
                    s(:lvasgn, :nocase,
                      s(:true)), nil),
                  s(:send,
                    s(:str, "-"), :+,
                    s(:lvar, :s_opt))))),
            s(:lvasgn, :opts,
              s(:array))),
          s(:send,
            s(:send,
              s(:lvar, :opts), :<<,
              s(:str, "-count")), :<<,
            s(:send,
              s(:lvar, :args), :shift)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Regexp)),
            s(:begin,
              s(:lvasgn, :regexp,
                s(:send,
                  s(:lvar, :args), :shift)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :nocase), :!),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :regexp), :options), :&,
                        s(:const,
                          s(:const, nil, :Regexp), :IGNORECASE))), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :opts), :<<,
                  s(:str, "-nocase")), nil),
              s(:send,
                s(:lvar, :args), :unshift,
                s(:send,
                  s(:lvar, :regexp), :source))), nil),
          s(:send,
            s(:lvar, :opts), :<<,
            s(:str, "--")),
          s(:lvasgn, :ret,
            s(:send, nil, :tk_send,
              s(:str, "search"),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:lvar, :opts), :+,
                    s(:lvar, :args)))))),
          s(:if,
            s(:send,
              s(:lvar, :ret), :==,
              s(:str, "")),
            s(:nil),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Text), :IndexString), :new,
              s(:lvar, :ret))))),
      s(:def, :search_with_length,
        s(:args,
          s(:arg, :pat),
          s(:arg, :start),
          s(:optarg, :stop,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :pat), :kind_of?,
              s(:const, nil, :Integer)),
            s(:lvasgn, :pat,
              s(:send,
                s(:lvar, :pat), :chr)), nil),
          s(:if,
            s(:send,
              s(:lvar, :stop), :!=,
              s(:const, nil, :None)),
            s(:begin,
              s(:if,
                s(:send, nil, :compare,
                  s(:lvar, :start),
                  s(:str, ">="),
                  s(:lvar, :stop)),
                s(:return,
                  s(:array,
                    s(:str, ""),
                    s(:int, 0))), nil),
              s(:lvasgn, :txt,
                s(:send, nil, :get,
                  s(:lvar, :start),
                  s(:lvar, :stop))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :pos,
                    s(:send,
                      s(:lvar, :txt), :index,
                      s(:lvar, :pat)))),
                s(:begin,
                  s(:lvasgn, :match,
                    s(:back_ref, :$&)),
                  s(:if,
                    s(:send,
                      s(:lvar, :pos), :>,
                      s(:int, 0)),
                    s(:lvasgn, :pos,
                      s(:send, nil, :_ktext_length,
                        s(:send,
                          s(:lvar, :txt), :[],
                          s(:irange,
                            s(:int, 0),
                            s(:begin,
                              s(:send,
                                s(:lvar, :pos), :-,
                                s(:int, 1))))))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :pat), :kind_of?,
                      s(:const, nil, :String)),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:send,
                            s(:lvar, :start), :+,
                            s(:dstr,
                              s(:str, " + "),
                              s(:begin,
                                s(:lvar, :pos)),
                              s(:str, " chars")))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :pat)),
                        s(:send,
                          s(:lvar, :pat), :dup))),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:send,
                            s(:lvar, :start), :+,
                            s(:dstr,
                              s(:str, " + "),
                              s(:begin,
                                s(:lvar, :pos)),
                              s(:str, " chars")))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :match)),
                        s(:lvar, :match))))),
                s(:return,
                  s(:array,
                    s(:str, ""),
                    s(:int, 0))))),
            s(:begin,
              s(:lvasgn, :txt,
                s(:send, nil, :get,
                  s(:lvar, :start),
                  s(:str, "end - 1 char"))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :pos,
                    s(:send,
                      s(:lvar, :txt), :index,
                      s(:lvar, :pat)))),
                s(:begin,
                  s(:lvasgn, :match,
                    s(:back_ref, :$&)),
                  s(:if,
                    s(:send,
                      s(:lvar, :pos), :>,
                      s(:int, 0)),
                    s(:lvasgn, :pos,
                      s(:send, nil, :_ktext_length,
                        s(:send,
                          s(:lvar, :txt), :[],
                          s(:irange,
                            s(:int, 0),
                            s(:begin,
                              s(:send,
                                s(:lvar, :pos), :-,
                                s(:int, 1))))))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :pat), :kind_of?,
                      s(:const, nil, :String)),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:send,
                            s(:lvar, :start), :+,
                            s(:dstr,
                              s(:str, " + "),
                              s(:begin,
                                s(:lvar, :pos)),
                              s(:str, " chars")))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :pat)),
                        s(:send,
                          s(:lvar, :pat), :dup))),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:send,
                            s(:lvar, :start), :+,
                            s(:dstr,
                              s(:str, " + "),
                              s(:begin,
                                s(:lvar, :pos)),
                              s(:str, " chars")))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :match)),
                        s(:lvar, :match))))),
                s(:begin,
                  s(:lvasgn, :txt,
                    s(:send, nil, :get,
                      s(:str, "1.0"),
                      s(:str, "end - 1 char"))),
                  s(:if,
                    s(:begin,
                      s(:lvasgn, :pos,
                        s(:send,
                          s(:lvar, :txt), :index,
                          s(:lvar, :pat)))),
                    s(:begin,
                      s(:lvasgn, :match,
                        s(:back_ref, :$&)),
                      s(:if,
                        s(:send,
                          s(:lvar, :pos), :>,
                          s(:int, 0)),
                        s(:lvasgn, :pos,
                          s(:send, nil, :_ktext_length,
                            s(:send,
                              s(:lvar, :txt), :[],
                              s(:irange,
                                s(:int, 0),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :pos), :-,
                                    s(:int, 1))))))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :pat), :kind_of?,
                          s(:const, nil, :String)),
                        s(:return,
                          s(:array,
                            s(:send, nil, :index,
                              s(:dstr,
                                s(:str, "1.0 + "),
                                s(:begin,
                                  s(:lvar, :pos)),
                                s(:str, " chars"))),
                            s(:send, nil, :_ktext_length,
                              s(:lvar, :pat)),
                            s(:send,
                              s(:lvar, :pat), :dup))),
                        s(:return,
                          s(:array,
                            s(:send, nil, :index,
                              s(:dstr,
                                s(:str, "1.0 + "),
                                s(:begin,
                                  s(:lvar, :pos)),
                                s(:str, " chars"))),
                            s(:send, nil, :_ktext_length,
                              s(:lvar, :match)),
                            s(:lvar, :match))))),
                    s(:return,
                      s(:array,
                        s(:str, ""),
                        s(:int, 0)))))))))),
      s(:def, :search,
        s(:args,
          s(:arg, :pat),
          s(:arg, :start),
          s(:optarg, :stop,
            s(:const, nil, :None))),
        s(:send,
          s(:send, nil, :search_with_length,
            s(:lvar, :pat),
            s(:lvar, :start),
            s(:lvar, :stop)), :[],
          s(:int, 0))),
      s(:def, :rsearch_with_length,
        s(:args,
          s(:arg, :pat),
          s(:arg, :start),
          s(:optarg, :stop,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :pat), :kind_of?,
              s(:const, nil, :Integer)),
            s(:lvasgn, :pat,
              s(:send,
                s(:lvar, :pat), :chr)), nil),
          s(:if,
            s(:send,
              s(:lvar, :stop), :!=,
              s(:const, nil, :None)),
            s(:begin,
              s(:if,
                s(:send, nil, :compare,
                  s(:lvar, :start),
                  s(:str, "<="),
                  s(:lvar, :stop)),
                s(:return,
                  s(:array,
                    s(:str, ""),
                    s(:int, 0))), nil),
              s(:lvasgn, :txt,
                s(:send, nil, :get,
                  s(:lvar, :stop),
                  s(:lvar, :start))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :pos,
                    s(:send,
                      s(:lvar, :txt), :rindex,
                      s(:lvar, :pat)))),
                s(:begin,
                  s(:lvasgn, :match,
                    s(:back_ref, :$&)),
                  s(:if,
                    s(:send,
                      s(:lvar, :pos), :>,
                      s(:int, 0)),
                    s(:lvasgn, :pos,
                      s(:send, nil, :_ktext_length,
                        s(:send,
                          s(:lvar, :txt), :[],
                          s(:irange,
                            s(:int, 0),
                            s(:begin,
                              s(:send,
                                s(:lvar, :pos), :-,
                                s(:int, 1))))))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :pat), :kind_of?,
                      s(:const, nil, :String)),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:send,
                            s(:lvar, :stop), :+,
                            s(:dstr,
                              s(:str, " + "),
                              s(:begin,
                                s(:lvar, :pos)),
                              s(:str, " chars")))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :pat)),
                        s(:send,
                          s(:lvar, :pat), :dup))),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:send,
                            s(:lvar, :stop), :+,
                            s(:dstr,
                              s(:str, " + "),
                              s(:begin,
                                s(:lvar, :pos)),
                              s(:str, " chars")))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :match)),
                        s(:lvar, :match))))),
                s(:return,
                  s(:array,
                    s(:str, ""),
                    s(:int, 0))))),
            s(:begin,
              s(:lvasgn, :txt,
                s(:send, nil, :get,
                  s(:str, "1.0"),
                  s(:lvar, :start))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :pos,
                    s(:send,
                      s(:lvar, :txt), :rindex,
                      s(:lvar, :pat)))),
                s(:begin,
                  s(:lvasgn, :match,
                    s(:back_ref, :$&)),
                  s(:if,
                    s(:send,
                      s(:lvar, :pos), :>,
                      s(:int, 0)),
                    s(:lvasgn, :pos,
                      s(:send, nil, :_ktext_length,
                        s(:send,
                          s(:lvar, :txt), :[],
                          s(:irange,
                            s(:int, 0),
                            s(:begin,
                              s(:send,
                                s(:lvar, :pos), :-,
                                s(:int, 1))))))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :pat), :kind_of?,
                      s(:const, nil, :String)),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:dstr,
                            s(:str, "1.0 + "),
                            s(:begin,
                              s(:lvar, :pos)),
                            s(:str, " chars"))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :pat)),
                        s(:send,
                          s(:lvar, :pat), :dup))),
                    s(:return,
                      s(:array,
                        s(:send, nil, :index,
                          s(:dstr,
                            s(:str, "1.0 + "),
                            s(:begin,
                              s(:lvar, :pos)),
                            s(:str, " chars"))),
                        s(:send, nil, :_ktext_length,
                          s(:lvar, :match)),
                        s(:lvar, :match))))),
                s(:begin,
                  s(:lvasgn, :txt,
                    s(:send, nil, :get,
                      s(:str, "1.0"),
                      s(:str, "end - 1 char"))),
                  s(:if,
                    s(:begin,
                      s(:lvasgn, :pos,
                        s(:send,
                          s(:lvar, :txt), :rindex,
                          s(:lvar, :pat)))),
                    s(:begin,
                      s(:lvasgn, :match,
                        s(:back_ref, :$&)),
                      s(:if,
                        s(:send,
                          s(:lvar, :pos), :>,
                          s(:int, 0)),
                        s(:lvasgn, :pos,
                          s(:send, nil, :_ktext_length,
                            s(:send,
                              s(:lvar, :txt), :[],
                              s(:irange,
                                s(:int, 0),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :pos), :-,
                                    s(:int, 1))))))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :pat), :kind_of?,
                          s(:const, nil, :String)),
                        s(:return,
                          s(:array,
                            s(:send, nil, :index,
                              s(:dstr,
                                s(:str, "1.0 + "),
                                s(:begin,
                                  s(:lvar, :pos)),
                                s(:str, " chars"))),
                            s(:send, nil, :_ktext_length,
                              s(:lvar, :pat)),
                            s(:send,
                              s(:lvar, :pat), :dup))),
                        s(:return,
                          s(:array,
                            s(:send, nil, :index,
                              s(:dstr,
                                s(:str, "1.0 + "),
                                s(:begin,
                                  s(:lvar, :pos)),
                                s(:str, " chars"))),
                            s(:send, nil, :_ktext_length,
                              s(:lvar, :match)),
                            s(:lvar, :match))))),
                    s(:return,
                      s(:array,
                        s(:str, ""),
                        s(:int, 0)))))))))),
      s(:def, :rsearch,
        s(:args,
          s(:arg, :pat),
          s(:arg, :start),
          s(:optarg, :stop,
            s(:const, nil, :None))),
        s(:send,
          s(:send, nil, :rsearch_with_length,
            s(:lvar, :pat),
            s(:lvar, :start),
            s(:lvar, :stop)), :[],
          s(:int, 0))),
      s(:def, :dump,
        s(:args,
          s(:arg, :type_info),
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :type_info), :kind_of?,
              s(:const, nil, :Symbol)),
            s(:lvasgn, :type_info,
              s(:array,
                s(:send,
                  s(:lvar, :type_info), :to_s))),
            s(:if,
              s(:send,
                s(:lvar, :type_info), :kind_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :type_info,
                s(:array,
                  s(:lvar, :type_info))), nil)),
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :type_info), :collect),
              s(:args,
                s(:arg, :inf)),
              s(:send,
                s(:str, "-"), :+,
                s(:lvar, :inf)))),
          s(:if,
            s(:lvar, :block),
            s(:send,
              s(:send,
                s(:lvar, :args), :<<,
                s(:str, "-command")), :<<,
              s(:lvar, :block)), nil),
          s(:lvasgn, :str,
            s(:send, nil, :tk_send,
              s(:str, "dump"),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:lvar, :args), :+,
                    s(:lvar, :index)))))),
          s(:lvasgn, :result,
            s(:array)),
          s(:lvasgn, :sel,
            s(:nil)),
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:while,
            s(:send,
              s(:lvar, :i), :<,
              s(:send,
                s(:lvar, :str), :size)),
            s(:begin,
              s(:lvasgn, :idx,
                s(:send,
                  s(:lvar, :str), :index,
                  s(:regexp,
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :i))),
              s(:send,
                s(:lvar, :result), :push,
                s(:send,
                  s(:lvar, :str), :[],
                  s(:irange,
                    s(:lvar, :i),
                    s(:begin,
                      s(:send,
                        s(:lvar, :idx), :-,
                        s(:int, 1)))))),
              s(:lvasgn, :i,
                s(:send,
                  s(:lvar, :idx), :+,
                  s(:int, 1))),
              s(:case,
                s(:send,
                  s(:lvar, :result), :[],
                  s(:int, -1)),
                s(:when,
                  s(:str, "text"),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:lvar, :i)), :==,
                      s(:str, "{")),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :val),
                          s(:lvasgn, :i)),
                        s(:send, nil, :_retrieve_braced_text,
                          s(:lvar, :str),
                          s(:lvar, :i))),
                      s(:send,
                        s(:lvar, :result), :push,
                        s(:lvar, :val))),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :val),
                          s(:lvasgn, :i)),
                        s(:send, nil, :_retrieve_backslashed_text,
                          s(:lvar, :str),
                          s(:lvar, :i))),
                      s(:send,
                        s(:lvar, :result), :push,
                        s(:lvar, :val))))),
                s(:begin,
                  s(:lvasgn, :idx,
                    s(:send,
                      s(:lvar, :str), :index,
                      s(:regexp,
                        s(:str, " "),
                        s(:regopt)),
                      s(:lvar, :i))),
                  s(:lvasgn, :val,
                    s(:send,
                      s(:lvar, :str), :[],
                      s(:irange,
                        s(:lvar, :i),
                        s(:begin,
                          s(:send,
                            s(:lvar, :idx), :-,
                            s(:int, 1)))))),
                  s(:case,
                    s(:send,
                      s(:lvar, :result), :[],
                      s(:int, -1)),
                    s(:when,
                      s(:str, "mark"),
                      s(:case,
                        s(:lvar, :val),
                        s(:when,
                          s(:str, "insert"),
                          s(:send,
                            s(:lvar, :result), :push,
                            s(:send,
                              s(:const, nil, :TkTextMarkInsert), :new,
                              s(:self)))),
                        s(:when,
                          s(:str, "current"),
                          s(:send,
                            s(:lvar, :result), :push,
                            s(:send,
                              s(:const, nil, :TkTextMarkCurrent), :new,
                              s(:self)))),
                        s(:when,
                          s(:str, "anchor"),
                          s(:send,
                            s(:lvar, :result), :push,
                            s(:send,
                              s(:const, nil, :TkTextMarkAnchor), :new,
                              s(:self)))),
                        s(:send,
                          s(:lvar, :result), :push,
                          s(:send, nil, :tk_tcl2ruby,
                            s(:lvar, :val))))),
                    s(:when,
                      s(:str, "tagon"),
                      s(:if,
                        s(:send,
                          s(:lvar, :val), :==,
                          s(:str, "sel")),
                        s(:if,
                          s(:lvar, :sel),
                          s(:send,
                            s(:lvar, :result), :push,
                            s(:lvar, :sel)),
                          s(:send,
                            s(:lvar, :result), :push,
                            s(:send,
                              s(:const, nil, :TkTextTagSel), :new,
                              s(:self)))),
                        s(:send,
                          s(:lvar, :result), :push,
                          s(:send, nil, :tk_tcl2ruby,
                            s(:lvar, :val))))),
                    s(:when,
                      s(:str, "tagoff"),
                      s(:send,
                        s(:lvar, :result), :push,
                        s(:send, nil, :tk_tcl2ruby,
                          s(:lvar, :val)))),
                    s(:when,
                      s(:str, "window"),
                      s(:send,
                        s(:lvar, :result), :push,
                        s(:send, nil, :tk_tcl2ruby,
                          s(:lvar, :val)))),
                    s(:when,
                      s(:str, "image"),
                      s(:send,
                        s(:lvar, :result), :push,
                        s(:send, nil, :tk_tcl2ruby,
                          s(:lvar, :val)))), nil),
                  s(:lvasgn, :i,
                    s(:send,
                      s(:lvar, :idx), :+,
                      s(:int, 1))))),
              s(:lvasgn, :idx,
                s(:send,
                  s(:lvar, :str), :index,
                  s(:regexp,
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :i))),
              s(:if,
                s(:lvar, :idx),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :push,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Text), :IndexString), :new,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:irange,
                          s(:lvar, :i),
                          s(:begin,
                            s(:send,
                              s(:lvar, :idx), :-,
                              s(:int, 1))))))),
                  s(:lvasgn, :i,
                    s(:send,
                      s(:lvar, :idx), :+,
                      s(:int, 1)))),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :push,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Text), :IndexString), :new,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:irange,
                          s(:lvar, :i),
                          s(:int, -1))))),
                  s(:break))))),
          s(:lvasgn, :kvis,
            s(:array)),
          s(:until,
            s(:send,
              s(:lvar, :result), :empty?),
            s(:send,
              s(:lvar, :kvis), :push,
              s(:array,
                s(:send,
                  s(:lvar, :result), :shift),
                s(:send,
                  s(:lvar, :result), :shift),
                s(:send,
                  s(:lvar, :result), :shift)))),
          s(:lvar, :kvis))),
      s(:def, :_retrieve_braced_text,
        s(:args,
          s(:arg, :str),
          s(:arg, :i)),
        s(:begin,
          s(:lvasgn, :cnt,
            s(:int, 0)),
          s(:lvasgn, :idx,
            s(:lvar, :i)),
          s(:while,
            s(:send,
              s(:lvar, :idx), :<,
              s(:send,
                s(:lvar, :str), :size)),
            s(:begin,
              s(:case,
                s(:send,
                  s(:lvar, :str), :[],
                  s(:lvar, :idx)),
                s(:when,
                  s(:str, "{"),
                  s(:op_asgn,
                    s(:lvasgn, :cnt), :+,
                    s(:int, 1))),
                s(:when,
                  s(:str, "}"),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :cnt), :-,
                      s(:int, 1)),
                    s(:if,
                      s(:send,
                        s(:lvar, :cnt), :==,
                        s(:int, 0)),
                      s(:break), nil))), nil),
              s(:op_asgn,
                s(:lvasgn, :idx), :+,
                s(:int, 1)))),
          s(:return,
            s(:send,
              s(:lvar, :str), :[],
              s(:irange,
                s(:send,
                  s(:lvar, :i), :+,
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :idx), :-,
                  s(:int, 1)))),
            s(:send,
              s(:lvar, :idx), :+,
              s(:int, 2))))),
      s(:send, nil, :private,
        s(:sym, :_retrieve_braced_text)),
      s(:def, :_retrieve_backslashed_text,
        s(:args,
          s(:arg, :str),
          s(:arg, :i)),
        s(:begin,
          s(:lvasgn, :j,
            s(:lvar, :i)),
          s(:lvasgn, :idx,
            s(:nil)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:lvasgn, :idx,
                s(:send,
                  s(:lvar, :str), :index,
                  s(:regexp,
                    s(:str, " "),
                    s(:regopt)),
                  s(:lvar, :j))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :[],
                    s(:send,
                      s(:lvar, :idx), :-,
                      s(:int, 1))), :==,
                  s(:str, "\\")),
                s(:op_asgn,
                  s(:lvasgn, :j), :+,
                  s(:int, 1)),
                s(:break)))),
          s(:lvasgn, :val,
            s(:send,
              s(:lvar, :str), :[],
              s(:irange,
                s(:lvar, :i),
                s(:begin,
                  s(:send,
                    s(:lvar, :idx), :-,
                    s(:int, 1)))))),
          s(:send,
            s(:lvar, :val), :gsub!,
            s(:regexp,
              s(:str, "\\\\( |\\{|\\})"),
              s(:regopt)),
            s(:str, "\\1")),
          s(:return,
            s(:lvar, :val),
            s(:send,
              s(:lvar, :idx), :+,
              s(:int, 1))))),
      s(:send, nil, :private,
        s(:sym, :_retrieve_backslashed_text)),
      s(:def, :dump_all,
        s(:args,
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:send, nil, :dump,
          s(:array,
            s(:str, "all")),
          s(:splat,
            s(:lvar, :index)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :dump_mark,
        s(:args,
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:send, nil, :dump,
          s(:array,
            s(:str, "mark")),
          s(:splat,
            s(:lvar, :index)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :dump_tag,
        s(:args,
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:send, nil, :dump,
          s(:array,
            s(:str, "tag")),
          s(:splat,
            s(:lvar, :index)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :dump_text,
        s(:args,
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:send, nil, :dump,
          s(:array,
            s(:str, "text")),
          s(:splat,
            s(:lvar, :index)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :dump_window,
        s(:args,
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:send, nil, :dump,
          s(:array,
            s(:str, "window")),
          s(:splat,
            s(:lvar, :index)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :dump_image,
        s(:args,
          s(:restarg, :index),
          s(:blockarg, :block)),
        s(:send, nil, :dump,
          s(:array,
            s(:str, "image")),
          s(:splat,
            s(:lvar, :index)),
          s(:block_pass,
            s(:lvar, :block)))))),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/text.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :Text),
    s(:sym, :TkText)),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Text), :Peer),
    s(:const,
      s(:const, nil, :Tk), :Text),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :text),
          s(:optarg, :parent,
            s(:nil)),
          s(:optarg, :keys,
            s(:hash))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :text), :kind_of?,
              s(:const,
                s(:const, nil, :Tk), :Text)), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "Tk::Text is expected for 1st argument"))),
          s(:ivasgn, :@src_text,
            s(:lvar, :text)),
          s(:super,
            s(:lvar, :parent),
            s(:lvar, :keys)))),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:ivar, :@src_text), :path),
            s(:str, "peer"),
            s(:str, "create"),
            s(:ivar, :@path),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:ivar, :@src_text), :path),
            s(:str, "peer"),
            s(:str, "create"),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)))))
