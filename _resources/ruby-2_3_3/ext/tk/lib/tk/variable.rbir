s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:class,
    s(:const, nil, :TkVariable), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Tk)),
      s(:send, nil, :extend,
        s(:const, nil, :TkCore)),
      s(:send, nil, :include,
        s(:const, nil, :Comparable)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "vwait"), :freeze)), :freeze)),
      s(:casgn, nil, :TkVar_CB_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:casgn, nil, :TkVar_ID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :Tk_VARIABLE_ID,
              s(:array,
                s(:send,
                  s(:str, "v"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkVar_CB_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const, nil, :TkVar_CB_TBL), :clear)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkVar_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const, nil, :TkVar_ID_TBL), :clear)))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :major),
          s(:lvasgn, :minor),
          s(:lvasgn, :type),
          s(:lvasgn, :patchlevel)),
        s(:send,
          s(:const, nil, :TclTkLib), :get_version)),
      s(:casgn, nil, :USE_OLD_TRACE_OPTION_STYLE,
        s(:or,
          s(:begin,
            s(:send,
              s(:lvar, :major), :<,
              s(:int, 8))),
          s(:begin,
            s(:and,
              s(:send,
                s(:lvar, :major), :==,
                s(:int, 8)),
              s(:send,
                s(:lvar, :minor), :<,
                s(:int, 4)))))),
      s(:send,
        s(:const,
          s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
        s(:str, "rb_var"),
        s(:str, "args"),
        s(:dstr,
          s(:str, "    if {[set st [catch {eval {ruby_cmd TkVariable callback} $args} ret]] != 0} {\n"),
          s(:str, "       set idx [string first \"\\n\\n\" $ret]\n"),
          s(:str, "       if {$idx > 0} {\n"),
          s(:str, "          global errorInfo\n"),
          s(:str, "          set tcl_backtrace $errorInfo\n"),
          s(:str, "          set errorInfo [string range $ret [expr $idx + 2] \\\n"),
          s(:str, "                                           [string length $ret]]\n"),
          s(:str, "          append errorInfo \"\\n\" $tcl_backtrace\n"),
          s(:str, "          bgerror [string range $ret 0 [expr $idx - 1]]\n"),
          s(:str, "       } else {\n"),
          s(:str, "          bgerror $ret\n"),
          s(:str, "       }\n"),
          s(:str, "       return \"\"\n"),
          s(:str, "       #return -code $st $ret\n"),
          s(:str, "    } else {\n"),
          s(:str, "        return $ret\n"),
          s(:str, "    }\n"))),
      s(:defs,
        s(:const, nil, :TkVariable), :callback,
        s(:args,
          s(:arg, :id),
          s(:arg, :name1),
          s(:arg, :name2),
          s(:arg, :op)),
        s(:if,
          s(:lvasgn, :cb_obj,
            s(:send,
              s(:const, nil, :TkVar_CB_TBL), :[],
              s(:lvar, :id))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :_get_eval_string,
                s(:send,
                  s(:lvar, :cb_obj), :trace_callback,
                  s(:lvar, :name2),
                  s(:lvar, :op))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)), nil,
                s(:send, nil, :exit,
                  s(:int, 0))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Interrupt)), nil,
                s(:send, nil, :exit!,
                  s(:int, 1))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)),
                s(:lvasgn, :e),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :msg,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send, nil, :_toUTF8,
                                        s(:send,
                                          s(:send,
                                            s(:lvar, :e), :class), :inspect)), :+,
                                      s(:str, ": ")), :+,
                                    s(:send, nil, :_toUTF8,
                                      s(:send,
                                        s(:lvar, :e), :message))), :+,
                                  s(:str, "\n")), :+,
                                s(:str, "\n---< backtrace of Ruby side >-----\n")), :+,
                              s(:send, nil, :_toUTF8,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :e), :backtrace), :join,
                                  s(:str, "\n")))), :+,
                            s(:str, "\n---< backtrace of Tk side >-------"))),
                        s(:if,
                          s(:const,
                            s(:const, nil, :TkCore), :WITH_ENCODING),
                          s(:send,
                            s(:lvar, :msg), :force_encoding,
                            s(:str, "utf-8")),
                          s(:send,
                            s(:lvar, :msg), :instance_variable_set,
                            s(:sym, :@encoding),
                            s(:str, "utf-8")))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Exception)), nil,
                        s(:lvasgn, :msg,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :e), :class), :inspect), :+,
                                      s(:str, ": ")), :+,
                                    s(:send,
                                      s(:lvar, :e), :message)), :+,
                                  s(:str, "\n")), :+,
                                s(:str, "\n---< backtrace of Ruby side >-----\n")), :+,
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :backtrace), :join,
                                s(:str, "\n"))), :+,
                            s(:str, "\n---< backtrace of Tk side >-------")))), nil)),
                  s(:send, nil, :fail,
                    s(:lvar, :e),
                    s(:lvar, :msg)))), nil)),
          s(:str, ""))),
      s(:defs,
        s(:self), :new_hash,
        s(:args,
          s(:optarg, :val,
            s(:hash))),
        s(:if,
          s(:send,
            s(:lvar, :val), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send,
            s(:self), :new,
            s(:lvar, :val)),
          s(:send, nil, :fail,
            s(:const, nil, :ArgumentError),
            s(:str, "Hash is expected")))),
      s(:def, :default_value,
        s(:args,
          s(:optarg, :val,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:lvar, :b),
            s(:begin,
              s(:ivasgn, :@def_default,
                s(:sym, :proc)),
              s(:ivasgn, :@default_val,
                s(:send, nil, :proc,
                  s(:block_pass,
                    s(:lvar, :b))))),
            s(:begin,
              s(:ivasgn, :@def_default,
                s(:sym, :val)),
              s(:ivasgn, :@default_val,
                s(:lvar, :val)))),
          s(:self))),
      s(:def, :set_default_value,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@def_default,
            s(:sym, :val)),
          s(:ivasgn, :@default_val,
            s(:lvar, :val)),
          s(:self))),
      s(:alias,
        s(:sym, :default_value=),
        s(:sym, :set_default_value)),
      s(:def, :default_proc,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:ivasgn, :@def_default,
            s(:sym, :proc)),
          s(:ivasgn, :@default_val,
            s(:lvar, :cmd)),
          s(:self))),
      s(:def, :undef_default,
        s(:args),
        s(:begin,
          s(:ivasgn, :@default_val,
            s(:nil)),
          s(:ivasgn, :@def_default,
            s(:false)),
          s(:self))),
      s(:def, :default_value_type,
        s(:args),
        s(:ivar, :@type)),
      s(:def, :default_element_value_type,
        s(:args,
          s(:arg, :idxs)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :index,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :idxs), :collect),
                  s(:args,
                    s(:arg, :idx)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :idx),
                    s(:true))), :join,
                s(:str, ","))),
            s(:lvasgn, :index,
              s(:send, nil, :_get_eval_string,
                s(:lvar, :idxs),
                s(:true)))),
          s(:send,
            s(:ivar, :@element_type), :[],
            s(:lvar, :index)))),
      s(:def, :_set_default_value_type_core,
        s(:args,
          s(:arg, :type),
          s(:arg, :idxs)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :type), :kind_of?,
              s(:const, nil, :Class)),
            s(:if,
              s(:send,
                s(:lvar, :type), :==,
                s(:const, nil, :NilClass)),
              s(:lvasgn, :type,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:lvar, :type), :==,
                  s(:const, nil, :Numeric)),
                s(:lvasgn, :type,
                  s(:sym, :numeric)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :type), :==,
                      s(:const, nil, :TrueClass)),
                    s(:send,
                      s(:lvar, :type), :==,
                      s(:const, nil, :FalseClass))),
                  s(:lvasgn, :type,
                    s(:sym, :bool)),
                  s(:if,
                    s(:send,
                      s(:lvar, :type), :==,
                      s(:const, nil, :String)),
                    s(:lvasgn, :type,
                      s(:sym, :string)),
                    s(:if,
                      s(:send,
                        s(:lvar, :type), :==,
                        s(:const, nil, :Symbol)),
                      s(:lvasgn, :type,
                        s(:sym, :symbol)),
                      s(:if,
                        s(:send,
                          s(:lvar, :type), :==,
                          s(:const, nil, :Array)),
                        s(:lvasgn, :type,
                          s(:sym, :list)),
                        s(:if,
                          s(:send,
                            s(:lvar, :type), :<=,
                            s(:const, nil, :TkVariable)),
                          s(:lvasgn, :type,
                            s(:sym, :variable)),
                          s(:if,
                            s(:send,
                              s(:lvar, :type), :<=,
                              s(:const, nil, :TkWindow)),
                            s(:lvasgn, :type,
                              s(:sym, :window)),
                            s(:if,
                              s(:send,
                                s(:const, nil, :TkComm), :_callback_entry_class?,
                                s(:lvar, :type)),
                              s(:lvasgn, :type,
                                s(:sym, :procedure)),
                              s(:lvasgn, :type,
                                s(:nil))))))))))),
            s(:case,
              s(:begin,
                s(:lvar, :type)),
              s(:when,
                s(:nil),
                s(:lvasgn, :type,
                  s(:nil))),
              s(:when,
                s(:sym, :numeric),
                s(:str, "numeric"),
                s(:lvasgn, :type,
                  s(:sym, :numeric))),
              s(:when,
                s(:true),
                s(:false),
                s(:sym, :bool),
                s(:str, "bool"),
                s(:lvasgn, :type,
                  s(:sym, :bool))),
              s(:when,
                s(:sym, :string),
                s(:str, "string"),
                s(:lvasgn, :type,
                  s(:sym, :string))),
              s(:when,
                s(:sym, :symbol),
                s(:str, "symbol"),
                s(:lvasgn, :type,
                  s(:sym, :symbol))),
              s(:when,
                s(:sym, :list),
                s(:str, "list"),
                s(:lvasgn, :type,
                  s(:sym, :list))),
              s(:when,
                s(:sym, :numlist),
                s(:str, "numlist"),
                s(:lvasgn, :type,
                  s(:sym, :numlist))),
              s(:when,
                s(:sym, :variable),
                s(:str, "variable"),
                s(:lvasgn, :type,
                  s(:sym, :variable))),
              s(:when,
                s(:sym, :window),
                s(:str, "window"),
                s(:lvasgn, :type,
                  s(:sym, :window))),
              s(:when,
                s(:sym, :procedure),
                s(:str, "procedure"),
                s(:lvasgn, :type,
                  s(:sym, :procedure))),
              s(:return,
                s(:send, nil, :_set_default_value_type_core,
                  s(:send,
                    s(:lvar, :type), :class),
                  s(:lvar, :idxs))))),
          s(:if,
            s(:lvar, :idxs),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :idxs), :kind_of?,
                  s(:const, nil, :Array)),
                s(:lvasgn, :index,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :idxs), :collect),
                      s(:args,
                        s(:arg, :idx)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :idx),
                        s(:true))), :join,
                    s(:str, ","))),
                s(:lvasgn, :index,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :idxs),
                    s(:true)))),
              s(:send,
                s(:ivar, :@element_type), :[]=,
                s(:lvar, :index),
                s(:lvar, :type))),
            s(:ivasgn, :@type,
              s(:lvar, :type))),
          s(:lvar, :type))),
      s(:send, nil, :private,
        s(:sym, :_set_default_value_type_core)),
      s(:def, :set_default_value_type,
        s(:args,
          s(:arg, :type)),
        s(:begin,
          s(:send, nil, :_set_default_value_type_core,
            s(:lvar, :type),
            s(:nil)),
          s(:self))),
      s(:alias,
        s(:sym, :default_value_type=),
        s(:sym, :set_default_value_type)),
      s(:def, :set_default_element_value_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :type)),
        s(:begin,
          s(:send, nil, :_set_default_value_type_core,
            s(:lvar, :type),
            s(:lvar, :idxs)),
          s(:self))),
      s(:def, :_to_default_type,
        s(:args,
          s(:arg, :val),
          s(:optarg, :idxs,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :idxs),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :idxs), :kind_of?,
                  s(:const, nil, :Array)),
                s(:lvasgn, :index,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :idxs), :collect),
                      s(:args,
                        s(:arg, :idx)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :idx),
                        s(:true))), :join,
                    s(:str, ","))),
                s(:lvasgn, :index,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :idxs),
                    s(:true)))),
              s(:lvasgn, :type,
                s(:send,
                  s(:ivar, :@element_type), :[],
                  s(:lvar, :index)))),
            s(:lvasgn, :type,
              s(:ivar, :@type))),
          s(:if,
            s(:lvar, :type), nil,
            s(:return,
              s(:lvar, :val))),
          s(:if,
            s(:send,
              s(:lvar, :val), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :val), :keys), :each),
                s(:args,
                  s(:arg, :k)),
                s(:send,
                  s(:lvar, :val), :[]=,
                  s(:lvar, :k),
                  s(:send, nil, :_to_default_type,
                    s(:send,
                      s(:lvar, :val), :[],
                      s(:lvar, :k)),
                    s(:lvar, :idxs)))),
              s(:lvar, :val)),
            s(:kwbegin,
              s(:rescue,
                s(:case,
                  s(:begin,
                    s(:lvar, :type)),
                  s(:when,
                    s(:sym, :numeric),
                    s(:send, nil, :number,
                      s(:lvar, :val))),
                  s(:when,
                    s(:sym, :bool),
                    s(:send,
                      s(:const, nil, :TkComm), :bool,
                      s(:lvar, :val))),
                  s(:when,
                    s(:sym, :string),
                    s(:lvar, :val)),
                  s(:when,
                    s(:sym, :symbol),
                    s(:send,
                      s(:lvar, :val), :intern)),
                  s(:when,
                    s(:sym, :list),
                    s(:send, nil, :tk_split_simplelist,
                      s(:lvar, :val))),
                  s(:when,
                    s(:sym, :numlist),
                    s(:block,
                      s(:send,
                        s(:send, nil, :tk_split_simplelist,
                          s(:lvar, :val)), :collect!),
                      s(:args,
                        s(:arg, :v)),
                      s(:send, nil, :number,
                        s(:lvar, :v)))),
                  s(:when,
                    s(:sym, :variable),
                    s(:send,
                      s(:const, nil, :TkVarAccess), :new,
                      s(:lvar, :val))),
                  s(:when,
                    s(:sym, :window),
                    s(:send,
                      s(:const, nil, :TkComm), :window,
                      s(:lvar, :val))),
                  s(:when,
                    s(:sym, :procedure),
                    s(:send,
                      s(:const, nil, :TkComm), :procedure,
                      s(:lvar, :val))),
                  s(:lvar, :val)),
                s(:resbody, nil, nil,
                  s(:lvar, :val)), nil))))),
      s(:send, nil, :private,
        s(:sym, :_to_default_type)),
      s(:def, :_to_default_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:send, nil, :_to_default_type,
          s(:lvar, :val),
          s(:lvar, :idxs))),
      s(:send, nil, :private,
        s(:sym, :_to_default_element_type)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :val,
            s(:str, "")),
          s(:optarg, :type,
            s(:nil))),
        s(:begin,
          s(:until_post,
            s(:send,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "info"),
                s(:str, "globals"),
                s(:ivar, :@id)), :empty?),
            s(:kwbegin,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk_VARIABLE_ID), :mutex), :synchronize),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@id,
                    s(:send,
                      s(:const, nil, :Tk_VARIABLE_ID), :join,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_ip_id_))),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk_VARIABLE_ID), :[],
                      s(:int, 1)), :succ!))))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkVar_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const, nil, :TkVar_ID_TBL), :[]=,
              s(:ivar, :@id),
              s(:self))),
          s(:ivasgn, :@var,
            s(:ivar, :@id)),
          s(:ivasgn, :@elem,
            s(:nil)),
          s(:ivasgn, :@def_default,
            s(:false)),
          s(:ivasgn, :@default_val,
            s(:nil)),
          s(:ivasgn, :@trace_var,
            s(:nil)),
          s(:ivasgn, :@trace_elem,
            s(:nil)),
          s(:ivasgn, :@trace_opts,
            s(:nil)),
          s(:ivasgn, :@type,
            s(:nil)),
          s(:lvasgn, :var,
            s(:self)),
          s(:ivasgn, :@element_type,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :var), :default_value_type))),
          s(:send,
            s(:self), :default_value_type=,
            s(:lvar, :type)),
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:ivar, :@id)),
          s(:if,
            s(:send,
              s(:lvar, :val), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:send,
                s(:self), :[]=,
                s(:str, ""),
                s(:int, 0)),
              s(:send,
                s(:self), :clear)), nil),
          s(:send,
            s(:self), :value=,
            s(:lvar, :val)))),
      s(:def, :wait,
        s(:args,
          s(:optarg, :on_thread,
            s(:false)),
          s(:optarg, :check_root,
            s(:false))),
        s(:begin,
          s(:op_asgn,
            s(:lvasgn, :on_thread), :&,
            s(:begin,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :list), :size), :!=,
                s(:int, 1)))),
          s(:if,
            s(:lvar, :on_thread),
            s(:if,
              s(:lvar, :check_root),
              s(:send,
                s(:const, nil, :INTERP), :_thread_tkwait,
                s(:str, "variable"),
                s(:ivar, :@id)),
              s(:send,
                s(:const, nil, :INTERP), :_thread_vwait,
                s(:ivar, :@id))),
            s(:if,
              s(:lvar, :check_root),
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "tkwait"),
                s(:str, "variable"),
                s(:ivar, :@id)),
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "vwait"),
                s(:ivar, :@id)))))),
      s(:def, :eventloop_wait,
        s(:args,
          s(:optarg, :check_root,
            s(:false))),
        s(:send, nil, :wait,
          s(:false),
          s(:lvar, :check_root))),
      s(:def, :thread_wait,
        s(:args,
          s(:optarg, :check_root,
            s(:false))),
        s(:send, nil, :wait,
          s(:true),
          s(:lvar, :check_root))),
      s(:def, :tkwait,
        s(:args,
          s(:optarg, :on_thread,
            s(:true))),
        s(:send, nil, :wait,
          s(:lvar, :on_thread),
          s(:true))),
      s(:def, :eventloop_tkwait,
        s(:args),
        s(:send, nil, :wait,
          s(:false),
          s(:true))),
      s(:def, :thread_tkwait,
        s(:args),
        s(:send, nil, :wait,
          s(:true),
          s(:true))),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :ref,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:dstr,
            s(:begin,
              s(:ivar, :@id)),
            s(:str, "("),
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :idxs), :collect),
                  s(:args,
                    s(:arg, :idx)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :idx))), :join,
                s(:str, ","))),
            s(:str, ")")))),
      s(:def, :is_hash?,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:ivar, :@id)),
          s(:send,
            s(:const, nil, :TkComm), :bool,
            s(:send,
              s(:const, nil, :INTERP), :_invoke_without_enc,
              s(:str, "array"),
              s(:str, "exist"),
              s(:ivar, :@id))))),
      s(:def, :is_scalar?,
        s(:args),
        s(:send,
          s(:send, nil, :is_hash?), :!)),
      s(:def, :exist?,
        s(:args,
          s(:restarg, :elems)),
        s(:begin,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:ivar, :@id)),
          s(:if,
            s(:send,
              s(:lvar, :elems), :empty?),
            s(:send,
              s(:const, nil, :TkComm), :bool,
              s(:send, nil, :tk_call,
                s(:str, "info"),
                s(:str, "exist"),
                s(:ivar, :@id))),
            s(:begin,
              s(:lvasgn, :index,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :elems), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :idx),
                      s(:true))), :join,
                  s(:str, ","))),
              s(:and,
                s(:send,
                  s(:const, nil, :TkComm), :bool,
                  s(:send, nil, :tk_call,
                    s(:str, "info"),
                    s(:str, "exist"),
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@id))))),
                s(:send,
                  s(:const, nil, :TkComm), :bool,
                  s(:send, nil, :tk_call,
                    s(:str, "info"),
                    s(:str, "exist"),
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@id)),
                      s(:str, "("),
                      s(:begin,
                        s(:lvar, :index)),
                      s(:str, ")"))))))))),
      s(:def, :keys,
        s(:args),
        s(:begin,
          s(:if,
            s(:begin,
              s(:send, nil, :is_scalar?)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "cannot get keys from a scalar variable")), nil),
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:ivar, :@id)),
          s(:send, nil, :tk_split_simplelist,
            s(:send,
              s(:const, nil, :INTERP), :_invoke_without_enc,
              s(:str, "array"),
              s(:str, "names"),
              s(:ivar, :@id)),
            s(:false),
            s(:true)))),
      s(:def, :size,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:ivar, :@id)),
          s(:send,
            s(:const, nil, :TkComm), :number,
            s(:send,
              s(:const, nil, :INTERP), :_invoke_without_enc,
              s(:str, "array"),
              s(:str, "size"),
              s(:ivar, :@id))))),
      s(:def, :clear,
        s(:args),
        s(:begin,
          s(:if,
            s(:begin,
              s(:send, nil, :is_scalar?)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "cannot clear a scalar variable")), nil),
          s(:block,
            s(:send,
              s(:send, nil, :keys), :each),
            s(:args,
              s(:arg, :k)),
            s(:send, nil, :unset,
              s(:lvar, :k))),
          s(:self))),
      s(:def, :update,
        s(:args,
          s(:arg, :hash)),
        s(:begin,
          s(:if,
            s(:begin,
              s(:send, nil, :is_scalar?)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "cannot update a scalar variable")), nil),
          s(:block,
            s(:send,
              s(:lvar, :hash), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :k),
              s(:lvar, :v))),
          s(:self))),
      s(:if,
        s(:send, nil, :const_defined?,
          s(:sym, :USE_TCLs_SET_VARIABLE_FUNCTIONS)), nil,
        s(:casgn, nil, :USE_TCLs_SET_VARIABLE_FUNCTIONS,
          s(:true))),
      s(:if,
        s(:const, nil, :USE_TCLs_SET_VARIABLE_FUNCTIONS),
        s(:begin,
          s(:def, :_value,
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:ivar, :@id)),
              s(:if,
                s(:send,
                  s(:const, nil, :TkComm), :bool,
                  s(:send,
                    s(:const, nil, :INTERP), :_invoke,
                    s(:str, "array"),
                    s(:str, "exist"),
                    s(:ivar, :@id))),
                s(:send,
                  s(:const, nil, :Hash), :[],
                  s(:splat,
                    s(:send, nil, :tk_split_simplelist,
                      s(:send,
                        s(:const, nil, :INTERP), :_invoke,
                        s(:str, "array"),
                        s(:str, "get"),
                        s(:ivar, :@id))))),
                s(:send, nil, :_fromUTF8,
                  s(:send,
                    s(:const, nil, :INTERP), :_get_global_var,
                    s(:ivar, :@id)))))),
          s(:def, :value=,
            s(:args,
              s(:arg, :val)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:ivar, :@type), :!),
                    s(:send,
                      s(:ivar, :@type), :!=,
                      s(:sym, :variable))),
                  s(:send,
                    s(:lvar, :val), :kind_of?,
                    s(:const, nil, :TkVariable))),
                s(:lvasgn, :val,
                  s(:send,
                    s(:lvar, :val), :_value)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :val), :kind_of?,
                  s(:const, nil, :Hash)),
                s(:begin,
                  s(:send,
                    s(:self), :clear),
                  s(:block,
                    s(:send,
                      s(:lvar, :val), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:const, nil, :INTERP), :_set_global_var2,
                      s(:ivar, :@id),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :k),
                        s(:true)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :v),
                        s(:true)))),
                  s(:send,
                    s(:self), :value)),
                s(:send, nil, :_fromUTF8,
                  s(:send,
                    s(:const, nil, :INTERP), :_set_global_var,
                    s(:ivar, :@id),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :val),
                      s(:true))))))),
          s(:def, :_element_value,
            s(:args,
              s(:restarg, :idxs)),
            s(:begin,
              s(:lvasgn, :index,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :idxs), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :idx),
                      s(:true))), :join,
                  s(:str, ","))),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :_fromUTF8,
                    s(:send,
                      s(:const, nil, :INTERP), :_get_global_var2,
                      s(:ivar, :@id),
                      s(:lvar, :index))),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:case,
                      s(:ivar, :@def_default),
                      s(:when,
                        s(:sym, :proc),
                        s(:send,
                          s(:ivar, :@default_val), :call,
                          s(:self),
                          s(:splat,
                            s(:lvar, :idxs)))),
                      s(:when,
                        s(:sym, :val),
                        s(:ivar, :@default_val)),
                      s(:send, nil, :fail,
                        s(:lvar, :e)))), nil)))),
          s(:def, :[]=,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :val,
                s(:send,
                  s(:lvar, :args), :pop)),
              s(:lvasgn, :type,
                s(:send, nil, :default_element_value_type,
                  s(:lvar, :args))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :type), :!),
                    s(:send,
                      s(:lvar, :type), :!=,
                      s(:sym, :variable))),
                  s(:send,
                    s(:lvar, :val), :kind_of?,
                    s(:const, nil, :TkVariable))),
                s(:lvasgn, :val,
                  s(:send,
                    s(:lvar, :val), :_value)), nil),
              s(:lvasgn, :index,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :args), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :idx),
                      s(:true))), :join,
                  s(:str, ","))),
              s(:send, nil, :_fromUTF8,
                s(:send,
                  s(:const, nil, :INTERP), :_set_global_var2,
                  s(:ivar, :@id),
                  s(:lvar, :index),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :val),
                    s(:true)))))),
          s(:def, :unset,
            s(:args,
              s(:restarg, :elems)),
            s(:if,
              s(:send,
                s(:lvar, :elems), :empty?),
              s(:send,
                s(:const, nil, :INTERP), :_unset_global_var,
                s(:ivar, :@id)),
              s(:begin,
                s(:lvasgn, :index,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :elems), :collect),
                      s(:args,
                        s(:arg, :idx)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :idx),
                        s(:true))), :join,
                    s(:str, ","))),
                s(:send,
                  s(:const, nil, :INTERP), :_unset_global_var2,
                  s(:ivar, :@id),
                  s(:lvar, :index))))),
          s(:alias,
            s(:sym, :remove),
            s(:sym, :unset))),
        s(:begin,
          s(:def, :_value,
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :INTERP), :_eval,
                  s(:send,
                    s(:const, nil, :Kernel), :format,
                    s(:str, "global %s; set %s"),
                    s(:ivar, :@id),
                    s(:ivar, :@id))),
                s(:resbody, nil, nil,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :INTERP), :_eval,
                        s(:send,
                          s(:const, nil, :Kernel), :format,
                          s(:str, "global %s; array exists %s"),
                          s(:ivar, :@id),
                          s(:ivar, :@id))), :!=,
                      s(:str, "1")),
                    s(:send, nil, :fail),
                    s(:send,
                      s(:const, nil, :Hash), :[],
                      s(:splat,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send,
                            s(:const, nil, :INTERP), :_eval,
                            s(:send,
                              s(:const, nil, :Kernel), :format,
                              s(:str, "global %s; array get %s"),
                              s(:ivar, :@id),
                              s(:ivar, :@id)))))))), nil))),
          s(:def, :value=,
            s(:args,
              s(:arg, :val)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:ivar, :@type), :!),
                    s(:send,
                      s(:ivar, :@type), :!=,
                      s(:sym, :variable))),
                  s(:send,
                    s(:lvar, :val), :kind_of?,
                    s(:const, nil, :TkVariable))),
                s(:lvasgn, :val,
                  s(:send,
                    s(:lvar, :val), :_value)), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:send,
                          s(:str, "\""), :+,
                          s(:send,
                            s(:send, nil, :_get_eval_string,
                              s(:lvar, :val)), :gsub,
                            s(:regexp,
                              s(:str, "[\\[\\]$\"\\\\]"),
                              s(:regopt)),
                            s(:str, "\\\\\\&"))), :+,
                        s(:str, "\""))),
                    s(:send,
                      s(:const, nil, :INTERP), :_eval,
                      s(:send,
                        s(:const, nil, :Kernel), :format,
                        s(:str, "global %s; set %s %s"),
                        s(:ivar, :@id),
                        s(:ivar, :@id),
                        s(:lvar, :s)))),
                  s(:resbody, nil, nil,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:const, nil, :INTERP), :_eval,
                          s(:send,
                            s(:const, nil, :Kernel), :format,
                            s(:str, "global %s; array exists %s"),
                            s(:ivar, :@id),
                            s(:ivar, :@id))), :!=,
                        s(:str, "1")),
                      s(:send, nil, :fail),
                      s(:if,
                        s(:send,
                          s(:lvar, :val), :==,
                          s(:array)),
                        s(:send,
                          s(:const, nil, :INTERP), :_eval,
                          s(:send,
                            s(:const, nil, :Kernel), :format,
                            s(:str, "global %s; unset %s; set %s(0) 0; unset %s(0)"),
                            s(:ivar, :@id),
                            s(:ivar, :@id),
                            s(:ivar, :@id),
                            s(:ivar, :@id))),
                        s(:if,
                          s(:send,
                            s(:lvar, :val), :kind_of?,
                            s(:const, nil, :Array)),
                          s(:begin,
                            s(:lvasgn, :a,
                              s(:array)),
                            s(:block,
                              s(:send,
                                s(:lvar, :val), :each_with_index),
                              s(:args,
                                s(:arg, :e),
                                s(:arg, :i)),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :a), :push,
                                  s(:lvar, :i)),
                                s(:send,
                                  s(:lvar, :a), :push,
                                  s(:send, nil, :array2tk_list,
                                    s(:lvar, :e),
                                    s(:true))))),
                            s(:lvasgn, :s,
                              s(:send,
                                s(:send,
                                  s(:str, "\""), :+,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :a), :join,
                                      s(:str, " ")), :gsub,
                                    s(:regexp,
                                      s(:str, "[\\[\\]$\"\\\\]"),
                                      s(:regopt)),
                                    s(:str, "\\\\\\&"))), :+,
                                s(:str, "\""))),
                            s(:send,
                              s(:const, nil, :INTERP), :_eval,
                              s(:send,
                                s(:const, nil, :Kernel), :format,
                                s(:str, "global %s; unset %s; array set %s %s"),
                                s(:ivar, :@id),
                                s(:ivar, :@id),
                                s(:ivar, :@id),
                                s(:lvar, :s)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :val), :kind_of?,
                              s(:const, nil, :Hash)),
                            s(:begin,
                              s(:lvasgn, :s,
                                s(:send,
                                  s(:send,
                                    s(:str, "\""), :+,
                                    s(:send,
                                      s(:send,
                                        s(:block,
                                          s(:send,
                                            s(:send,
                                              s(:lvar, :val), :to_a), :collect),
                                          s(:args,
                                            s(:arg, :e)),
                                          s(:send, nil, :array2tk_list,
                                            s(:lvar, :e),
                                            s(:true))), :join,
                                        s(:str, " ")), :gsub,
                                      s(:regexp,
                                        s(:str, "[\\[\\]$\\\\\"]"),
                                        s(:regopt)),
                                      s(:str, "\\\\\\&"))), :+,
                                  s(:str, "\""))),
                              s(:send,
                                s(:const, nil, :INTERP), :_eval,
                                s(:send,
                                  s(:const, nil, :Kernel), :format,
                                  s(:str, "global %s; unset %s; array set %s %s"),
                                  s(:ivar, :@id),
                                  s(:ivar, :@id),
                                  s(:ivar, :@id),
                                  s(:lvar, :s)))),
                            s(:send, nil, :fail)))))), nil)))),
          s(:def, :_element_value,
            s(:args,
              s(:restarg, :idxs)),
            s(:begin,
              s(:lvasgn, :index,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :idxs), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :idx))), :join,
                  s(:str, ","))),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :INTERP), :_eval,
                    s(:send,
                      s(:const, nil, :Kernel), :format,
                      s(:str, "global %s; set %s(%s)"),
                      s(:ivar, :@id),
                      s(:ivar, :@id),
                      s(:lvar, :index))),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:case,
                      s(:ivar, :@def_default),
                      s(:when,
                        s(:sym, :proc),
                        s(:send,
                          s(:ivar, :@default_val), :call,
                          s(:self),
                          s(:splat,
                            s(:lvar, :idxs)))),
                      s(:when,
                        s(:sym, :val),
                        s(:ivar, :@default_val)),
                      s(:send, nil, :fail,
                        s(:lvar, :e)))), nil)))),
          s(:def, :[]=,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :val,
                s(:send,
                  s(:lvar, :args), :pop)),
              s(:lvasgn, :type,
                s(:send, nil, :default_element_value_type,
                  s(:lvar, :args))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :type), :!),
                    s(:send,
                      s(:lvar, :type), :!=,
                      s(:sym, :variable))),
                  s(:send,
                    s(:lvar, :val), :kind_of?,
                    s(:const, nil, :TkVariable))),
                s(:lvasgn, :val,
                  s(:send,
                    s(:lvar, :val), :_value)), nil),
              s(:lvasgn, :index,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :args), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :idx))), :join,
                  s(:str, ","))),
              s(:send,
                s(:const, nil, :INTERP), :_eval,
                s(:send,
                  s(:const, nil, :Kernel), :format,
                  s(:str, "global %s; set %s(%s) %s"),
                  s(:ivar, :@id),
                  s(:ivar, :@id),
                  s(:lvar, :index),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :val)))))),
          s(:def, :unset,
            s(:args,
              s(:restarg, :elems)),
            s(:if,
              s(:send,
                s(:lvar, :elems), :empty?),
              s(:send,
                s(:const, nil, :INTERP), :_eval,
                s(:send,
                  s(:const, nil, :Kernel), :format,
                  s(:str, "global %s; unset %s"),
                  s(:ivar, :@id),
                  s(:ivar, :@id))),
              s(:begin,
                s(:lvasgn, :index,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :elems), :collect),
                      s(:args,
                        s(:arg, :idx)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :idx),
                        s(:true))), :join,
                    s(:str, ","))),
                s(:send,
                  s(:const, nil, :INTERP), :_eval,
                  s(:send,
                    s(:const, nil, :Kernel), :format,
                    s(:str, "global %s; unset %s(%s)"),
                    s(:ivar, :@id),
                    s(:ivar, :@id),
                    s(:lvar, :index)))))),
          s(:alias,
            s(:sym, :remove),
            s(:sym, :unset)))),
      s(:send, nil, :protected,
        s(:sym, :_value),
        s(:sym, :_element_value)),
      s(:def, :value,
        s(:args),
        s(:send, nil, :_to_default_type,
          s(:send, nil, :_value))),
      s(:def, :[],
        s(:args,
          s(:restarg, :idxs)),
        s(:send, nil, :_to_default_element_type,
          s(:lvar, :idxs),
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:def, :set_value,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :value=,
            s(:lvar, :val)),
          s(:self))),
      s(:def, :to_hash,
        s(:args),
        s(:begin,
          s(:lvasgn, :hash,
            s(:hash)),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :keys), :each),
            s(:args,
              s(:arg, :k)),
            s(:send,
              s(:lvar, :hash), :[]=,
              s(:lvar, :k),
              s(:send,
                s(:self), :[],
                s(:lvar, :k)))),
          s(:lvar, :hash))),
      s(:def, :set_element_value,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:def, :set_value_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :default_value_type=,
            s(:send,
              s(:lvar, :val), :class)),
          s(:send,
            s(:self), :value=,
            s(:lvar, :val)),
          s(:self))),
      s(:alias,
        s(:sym, :value_type=),
        s(:sym, :set_value_type)),
      s(:def, :set_element_value_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:send,
              s(:lvar, :val), :class)),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:def, :numeric,
        s(:args),
        s(:send, nil, :number,
          s(:send, nil, :_value))),
      s(:def, :numeric_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send, nil, :number,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:def, :set_numeric,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:const, nil, :Numeric),
              s(:send,
                s(:self), :value=,
                s(:begin,
                  s(:lvar, :val)))),
            s(:when,
              s(:const, nil, :TkVariable),
              s(:send,
                s(:self), :value=,
                s(:begin,
                  s(:send,
                    s(:lvar, :val), :numeric)))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Numeric is expected"))),
          s(:self))),
      s(:alias,
        s(:sym, :numeric=),
        s(:sym, :set_numeric)),
      s(:def, :set_numeric_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:const, nil, :Numeric),
              s(:lvar, :val)),
            s(:when,
              s(:const, nil, :TkVariable),
              s(:lvasgn, :val,
                s(:send,
                  s(:lvar, :val), :numeric))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Numeric is expected"))),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:def, :set_numeric_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :numeric)),
          s(:send,
            s(:self), :numeric=,
            s(:begin,
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :numeric_type=),
        s(:sym, :set_numeric_type)),
      s(:def, :set_numeric_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :numeric)),
          s(:send,
            s(:self), :set_numeric_element,
            s(:lvar, :idxs),
            s(:lvar, :val)))),
      s(:def, :bool,
        s(:args),
        s(:send,
          s(:const, nil, :TkComm), :bool,
          s(:send, nil, :_value))),
      s(:def, :bool_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:const, nil, :TkComm), :bool,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:def, :set_bool,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :!),
            s(:send,
              s(:self), :value=,
              s(:str, "0")),
            s(:case,
              s(:send,
                s(:send,
                  s(:lvar, :val), :to_s), :downcase),
              s(:when,
                s(:str, "false"),
                s(:str, "0"),
                s(:str, "no"),
                s(:str, "off"),
                s(:send,
                  s(:self), :value=,
                  s(:str, "0"))),
              s(:send,
                s(:self), :value=,
                s(:str, "1")))),
          s(:self))),
      s(:alias,
        s(:sym, :bool=),
        s(:sym, :set_bool)),
      s(:def, :set_bool_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :!),
            s(:lvasgn, :val,
              s(:str, "0")),
            s(:case,
              s(:send,
                s(:send,
                  s(:lvar, :val), :to_s), :downcase),
              s(:when,
                s(:str, "false"),
                s(:str, "0"),
                s(:str, "no"),
                s(:str, "off"),
                s(:lvasgn, :val,
                  s(:str, "0"))),
              s(:lvasgn, :val,
                s(:str, "1")))),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:def, :set_bool_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :bool)),
          s(:send,
            s(:self), :bool=,
            s(:begin,
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :bool_type=),
        s(:sym, :set_bool_type)),
      s(:def, :set_bool_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :bool)),
          s(:send,
            s(:self), :set_bool_element,
            s(:lvar, :idxs),
            s(:lvar, :val)))),
      s(:def, :variable,
        s(:args),
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:send,
            s(:self), :_value))),
      s(:def, :variable_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:def, :set_variable,
        s(:args,
          s(:arg, :var)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :var), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :var,
              s(:send,
                s(:lvar, :var), :id)), nil),
          s(:send,
            s(:self), :value=,
            s(:lvar, :var)),
          s(:self))),
      s(:alias,
        s(:sym, :variable=),
        s(:sym, :set_variable)),
      s(:def, :set_variable_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :var)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :var), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :var,
              s(:send,
                s(:lvar, :var), :id)), nil),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :var)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :var))),
          s(:self))),
      s(:def, :set_variable_type,
        s(:args,
          s(:arg, :var)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :variable)),
          s(:if,
            s(:send,
              s(:lvar, :var), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :var,
              s(:send,
                s(:lvar, :var), :id)), nil),
          s(:send,
            s(:self), :value=,
            s(:lvar, :var)),
          s(:self))),
      s(:alias,
        s(:sym, :variable_type=),
        s(:sym, :set_variable_type)),
      s(:def, :set_variable_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :var)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :variable)),
          s(:send,
            s(:self), :set_variable_element,
            s(:lvar, :idxs),
            s(:lvar, :var)))),
      s(:def, :window,
        s(:args),
        s(:send,
          s(:const, nil, :TkComm), :window,
          s(:send,
            s(:self), :_value))),
      s(:def, :window_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:const, nil, :TkComm), :window,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:def, :set_window,
        s(:args,
          s(:arg, :win)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :win), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :win,
              s(:send,
                s(:lvar, :win), :_value)), nil),
          s(:send,
            s(:self), :value=,
            s(:lvar, :win)),
          s(:self))),
      s(:alias,
        s(:sym, :window=),
        s(:sym, :set_window)),
      s(:def, :set_window_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :win)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :win), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :win,
              s(:send,
                s(:lvar, :win), :_value)), nil),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :win)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :win))),
          s(:self))),
      s(:def, :set_window_type,
        s(:args,
          s(:arg, :win)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :window)),
          s(:send,
            s(:self), :window=,
            s(:begin,
              s(:lvar, :win))),
          s(:self))),
      s(:alias,
        s(:sym, :window_type=),
        s(:sym, :set_window_type)),
      s(:def, :set_window_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :win)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :window)),
          s(:send,
            s(:self), :set_window_element,
            s(:lvar, :idxs),
            s(:lvar, :win)))),
      s(:def, :procedure,
        s(:args),
        s(:send,
          s(:const, nil, :TkComm), :procedure,
          s(:send,
            s(:self), :_value))),
      s(:def, :procedure_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:const, nil, :TkComm), :procedure,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:def, :set_procedure,
        s(:args,
          s(:arg, :cmd)),
        s(:begin,
          s(:send,
            s(:self), :value=,
            s(:lvar, :cmd)),
          s(:self))),
      s(:alias,
        s(:sym, :procedure=),
        s(:sym, :set_procedure)),
      s(:def, :set_procedure_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :cmd)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :cmd), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :cmd), :_value)), nil),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :cmd)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :cmd))),
          s(:self))),
      s(:def, :set_procedure_type,
        s(:args,
          s(:arg, :cmd)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :procedure)),
          s(:send,
            s(:self), :procedure=,
            s(:begin,
              s(:lvar, :cmd))),
          s(:self))),
      s(:alias,
        s(:sym, :procedure_type=),
        s(:sym, :set_procedure_type)),
      s(:def, :set_procedure_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :cmd)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :procedure)),
          s(:send,
            s(:self), :set_proceure_element,
            s(:lvar, :idxs),
            s(:lvar, :cmd)))),
      s(:def, :to_proc,
        s(:args),
        s(:begin,
          s(:lvasgn, :cmd,
            s(:send,
              s(:self), :procedure)),
          s(:if,
            s(:send,
              s(:lvar, :cmd), :respond_to?,
              s(:sym, :call)),
            s(:lvar, :cmd),
            s(:send,
              s(:send,
                s(:lvar, :cmd), :to_sym), :to_proc)))),
      s(:def, :to_i,
        s(:args),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :_value)), :to_i)),
      s(:alias,
        s(:sym, :to_int),
        s(:sym, :to_i)),
      s(:def, :element_to_i,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :_element_value,
              s(:splat,
                s(:lvar, :idxs)))), :to_i)),
      s(:def, :to_f,
        s(:args),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :_value)), :to_f)),
      s(:def, :element_to_f,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :_element_value,
              s(:splat,
                s(:lvar, :idxs)))), :to_f)),
      s(:def, :to_s,
        s(:args),
        s(:send, nil, :_value)),
      s(:alias,
        s(:sym, :string),
        s(:sym, :to_s)),
      s(:alias,
        s(:sym, :to_str),
        s(:sym, :to_s)),
      s(:def, :element_to_s,
        s(:args,
          s(:restarg, :idxs)),
        s(:send, nil, :_element_value,
          s(:splat,
            s(:lvar, :idxs)))),
      s(:def, :string_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send, nil, :_element_value,
          s(:splat,
            s(:lvar, :idxs)))),
      s(:def, :set_string,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :val,
              s(:send,
                s(:lvar, :val), :_value)), nil),
          s(:send,
            s(:self), :value=,
            s(:lvar, :val)),
          s(:self))),
      s(:alias,
        s(:sym, :string=),
        s(:sym, :set_string)),
      s(:def, :set_string_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :val,
              s(:send,
                s(:lvar, :val), :_value)), nil),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:def, :set_string_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :string)),
          s(:send,
            s(:self), :string=,
            s(:begin,
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :string_type=),
        s(:sym, :set_string_type)),
      s(:def, :set_string_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :string)),
          s(:send,
            s(:self), :set_string_element,
            s(:lvar, :idxs),
            s(:lvar, :val)))),
      s(:def, :to_sym,
        s(:args),
        s(:send,
          s(:send, nil, :_value), :intern)),
      s(:alias,
        s(:sym, :symbol),
        s(:sym, :to_sym)),
      s(:def, :element_to_sym,
        s(:args,
          s(:restarg, :idxs)),
        s(:send,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))), :intern)),
      s(:alias,
        s(:sym, :symbol_element),
        s(:sym, :element_to_sym)),
      s(:def, :set_symbol,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :val,
              s(:send,
                s(:lvar, :val), :_value)), nil),
          s(:send,
            s(:self), :value=,
            s(:lvar, :val)),
          s(:self))),
      s(:alias,
        s(:sym, :symbol=),
        s(:sym, :set_symbol)),
      s(:def, :set_symbol_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:lvasgn, :val,
              s(:send,
                s(:lvar, :val), :_value)), nil),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:def, :set_symbol_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :symbol)),
          s(:send,
            s(:self), :value=,
            s(:begin,
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :symbol_type=),
        s(:sym, :set_symbol_type)),
      s(:def, :set_symbol_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :symbol)),
          s(:send,
            s(:self), :set_symbol_element,
            s(:lvar, :idxs),
            s(:lvar, :val)))),
      s(:def, :list,
        s(:args),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :_value))),
      s(:alias,
        s(:sym, :to_a),
        s(:sym, :list)),
      s(:alias,
        s(:sym, :to_ary),
        s(:sym, :list)),
      s(:def, :list_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :_element_value,
            s(:splat,
              s(:lvar, :idxs))))),
      s(:alias,
        s(:sym, :element_to_a),
        s(:sym, :list_element)),
      s(:def, :numlist,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :list), :collect!),
          s(:args,
            s(:arg, :val)),
          s(:send, nil, :number,
            s(:lvar, :val)))),
      s(:def, :numlist_element,
        s(:args,
          s(:restarg, :idxs)),
        s(:block,
          s(:send,
            s(:send, nil, :list_element,
              s(:splat,
                s(:lvar, :idxs))), :collect!),
          s(:args,
            s(:arg, :val)),
          s(:send, nil, :number,
            s(:lvar, :val)))),
      s(:def, :set_list,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:const, nil, :Array),
              s(:send,
                s(:self), :value=,
                s(:begin,
                  s(:lvar, :val)))),
            s(:when,
              s(:const, nil, :TkVariable),
              s(:send,
                s(:self), :value=,
                s(:begin,
                  s(:send,
                    s(:lvar, :val), :list)))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Array is expected"))),
          s(:self))),
      s(:alias,
        s(:sym, :list=),
        s(:sym, :set_list)),
      s(:alias,
        s(:sym, :set_numlist),
        s(:sym, :set_list)),
      s(:alias,
        s(:sym, :numlist=),
        s(:sym, :set_numlist)),
      s(:def, :set_list_element,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:const, nil, :Array),
              s(:lvar, :val)),
            s(:when,
              s(:const, nil, :TkVariable),
              s(:lvasgn, :val,
                s(:send,
                  s(:lvar, :val), :list))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Array is expected"))),
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:self), :[]=,
              s(:splat,
                s(:lvar, :idxs)),
              s(:lvar, :val)),
            s(:send,
              s(:self), :[]=,
              s(:lvar, :idxs),
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :set_numlist_element),
        s(:sym, :set_list_element)),
      s(:def, :set_list_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :list)),
          s(:send,
            s(:self), :list=,
            s(:begin,
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :list_type=),
        s(:sym, :set_list_type)),
      s(:def, :set_list_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :list)),
          s(:send,
            s(:self), :set_list_element,
            s(:lvar, :idxs),
            s(:lvar, :val)))),
      s(:def, :set_numlist_type,
        s(:args,
          s(:arg, :val)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :numlist)),
          s(:send,
            s(:self), :numlist=,
            s(:begin,
              s(:lvar, :val))),
          s(:self))),
      s(:alias,
        s(:sym, :numlist_type=),
        s(:sym, :set_numlist_type)),
      s(:def, :set_numlist_element_type,
        s(:args,
          s(:arg, :idxs),
          s(:arg, :val)),
        s(:begin,
          s(:send,
            s(:self), :set_default_element_value_type,
            s(:lvar, :idxs),
            s(:sym, :numlist)),
          s(:send,
            s(:self), :set_numlist_element,
            s(:lvar, :idxs),
            s(:lvar, :val)))),
      s(:def, :lappend,
        s(:args,
          s(:restarg, :elems)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "lappend"),
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :elems))),
          s(:self))),
      s(:def, :element_lappend,
        s(:args,
          s(:arg, :idxs),
          s(:restarg, :elems)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :idxs,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :idxs), :collect),
                  s(:args,
                    s(:arg, :idx)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :idx),
                    s(:true))), :join,
                s(:str, ","))), nil),
          s(:send, nil, :tk_call,
            s(:str, "lappend"),
            s(:dstr,
              s(:begin,
                s(:ivar, :@id)),
              s(:str, "("),
              s(:begin,
                s(:lvar, :idxs)),
              s(:str, ")")),
            s(:splat,
              s(:lvar, :elems))),
          s(:self))),
      s(:def, :lindex,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :tk_call,
          s(:str, "lindex"),
          s(:send,
            s(:self), :_value),
          s(:lvar, :idx))),
      s(:alias,
        s(:sym, :lget),
        s(:sym, :lindex)),
      s(:def, :element_lindex,
        s(:args,
          s(:arg, :elem_idxs),
          s(:arg, :idx)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :elem_idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :val,
              s(:send, nil, :_element_value,
                s(:splat,
                  s(:lvar, :elem_idxs)))),
            s(:lvasgn, :val,
              s(:send, nil, :_element_value,
                s(:lvar, :elem_idxs)))),
          s(:send, nil, :tk_call,
            s(:str, "lindex"),
            s(:lvar, :val),
            s(:lvar, :idx)))),
      s(:alias,
        s(:sym, :element_lget),
        s(:sym, :element_lindex)),
      s(:def, :lget_i,
        s(:args,
          s(:arg, :idx)),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :lget,
              s(:lvar, :idx))), :to_i)),
      s(:def, :element_lget_i,
        s(:args,
          s(:arg, :elem_idxs),
          s(:arg, :idx)),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :element_lget,
              s(:lvar, :elem_idxs),
              s(:lvar, :idx))), :to_i)),
      s(:def, :lget_f,
        s(:args,
          s(:arg, :idx)),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :lget,
              s(:lvar, :idx))), :to_f)),
      s(:def, :element_lget_f,
        s(:args,
          s(:arg, :elem_idxs),
          s(:arg, :idx)),
        s(:send,
          s(:send, nil, :number,
            s(:send, nil, :element_lget,
              s(:lvar, :elem_idxs),
              s(:lvar, :idx))), :to_f)),
      s(:def, :lset,
        s(:args,
          s(:arg, :idx),
          s(:arg, :val)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "lset"),
            s(:ivar, :@id),
            s(:lvar, :idx),
            s(:lvar, :val)),
          s(:self))),
      s(:def, :element_lset,
        s(:args,
          s(:arg, :elem_idxs),
          s(:arg, :idx),
          s(:arg, :val)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :elem_idxs), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :idxs,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :elem_idxs), :collect),
                  s(:args,
                    s(:arg, :i)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :i),
                    s(:true))), :join,
                s(:str, ","))), nil),
          s(:send, nil, :tk_call,
            s(:str, "lset"),
            s(:dstr,
              s(:begin,
                s(:ivar, :@id)),
              s(:str, "("),
              s(:begin,
                s(:lvar, :idxs)),
              s(:str, ")")),
            s(:lvar, :idx),
            s(:lvar, :val)),
          s(:self))),
      s(:def, :inspect,
        s(:args),
        s(:send,
          s(:send,
            s(:str, "#<TkVariable: "), :+,
            s(:ivar, :@id)), :+,
          s(:str, ">"))),
      s(:def, :coerce,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :TkVariable),
            s(:array,
              s(:send,
                s(:lvar, :other), :_value),
              s(:send,
                s(:self), :_value))),
          s(:when,
            s(:const, nil, :String),
            s(:array,
              s(:lvar, :other),
              s(:send,
                s(:self), :to_s))),
          s(:when,
            s(:const, nil, :Symbol),
            s(:array,
              s(:lvar, :other),
              s(:send,
                s(:self), :to_sym))),
          s(:when,
            s(:const, nil, :Numeric),
            s(:array,
              s(:lvar, :other),
              s(:send,
                s(:self), :numeric))),
          s(:when,
            s(:const, nil, :Array),
            s(:array,
              s(:lvar, :other),
              s(:send,
                s(:self), :to_a))),
          s(:array,
            s(:lvar, :other),
            s(:send,
              s(:self), :_value)))),
      s(:def, :+@,
        s(:args),
        s(:send,
          s(:self), :numeric)),
      s(:def, :-@,
        s(:args),
        s(:send,
          s(:begin,
            s(:send,
              s(:self), :numeric)), :-@)),
      s(:def, :&,
        s(:args,
          s(:arg, :other)),
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :Array)),
          s(:send,
            s(:send,
              s(:self), :to_a), :&,
            s(:send,
              s(:lvar, :other), :to_a)),
          s(:send,
            s(:send,
              s(:self), :to_i), :&,
            s(:send,
              s(:lvar, :other), :to_i)))),
      s(:def, :|,
        s(:args,
          s(:arg, :other)),
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :Array)),
          s(:send,
            s(:send,
              s(:self), :to_a), :|,
            s(:send,
              s(:lvar, :other), :to_a)),
          s(:send,
            s(:send,
              s(:self), :to_i), :|,
            s(:send,
              s(:lvar, :other), :to_i)))),
      s(:def, :+,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :Array),
            s(:send,
              s(:send,
                s(:self), :to_a), :+,
              s(:lvar, :other))),
          s(:when,
            s(:const, nil, :String),
            s(:send,
              s(:send,
                s(:self), :_value), :+,
              s(:lvar, :other))),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:send, nil, :number,
                  s(:send,
                    s(:self), :_value)), :+,
                s(:lvar, :other)),
              s(:resbody, nil, nil,
                s(:send,
                  s(:send,
                    s(:self), :_value), :+,
                  s(:send,
                    s(:lvar, :other), :to_s))), nil)))),
      s(:def, :-,
        s(:args,
          s(:arg, :other)),
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :Array)),
          s(:send,
            s(:send,
              s(:self), :to_a), :-,
            s(:lvar, :other)),
          s(:send,
            s(:send, nil, :number,
              s(:send,
                s(:self), :_value)), :-,
            s(:lvar, :other)))),
      s(:def, :*,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send, nil, :num_or_str,
            s(:send,
              s(:self), :_value)), :*,
          s(:lvar, :other))),
      s(:def, :/,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send, nil, :number,
            s(:send,
              s(:self), :_value)), :/,
          s(:lvar, :other))),
      s(:def, :%,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send, nil, :num_or_str,
            s(:send,
              s(:self), :_value)), :%,
          s(:lvar, :other))),
      s(:def, :**,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send, nil, :number,
            s(:send,
              s(:self), :_value)), :**,
          s(:lvar, :other))),
      s(:def, :=~,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send,
            s(:self), :_value), :=~,
          s(:lvar, :other))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :TkVariable),
            s(:send,
              s(:send,
                s(:self), :_value), :==,
              s(:send,
                s(:lvar, :other), :_value))),
          s(:when,
            s(:const, nil, :String),
            s(:send,
              s(:send,
                s(:self), :to_s), :==,
              s(:lvar, :other))),
          s(:when,
            s(:const, nil, :Symbol),
            s(:send,
              s(:send,
                s(:self), :to_sym), :==,
              s(:lvar, :other))),
          s(:when,
            s(:const, nil, :Integer),
            s(:send,
              s(:send,
                s(:self), :to_i), :==,
              s(:lvar, :other))),
          s(:when,
            s(:const, nil, :Float),
            s(:send,
              s(:send,
                s(:self), :to_f), :==,
              s(:lvar, :other))),
          s(:when,
            s(:const, nil, :Array),
            s(:send,
              s(:send,
                s(:self), :to_a), :==,
              s(:lvar, :other))),
          s(:when,
            s(:const, nil, :Hash),
            s(:send,
              s(:send,
                s(:self), :_value), :==,
              s(:lvar, :other))),
          s(:send,
            s(:send,
              s(:self), :_value), :==,
            s(:send, nil, :_get_eval_string,
              s(:lvar, :other))))),
      s(:def, :===,
        s(:args,
          s(:arg, :other)),
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :TkVariable)),
          s(:send,
            s(:send,
              s(:self), :id), :==,
            s(:send,
              s(:lvar, :other), :id)),
          s(:zsuper))),
      s(:def, :zero?,
        s(:args),
        s(:send,
          s(:send, nil, :numeric), :zero?)),
      s(:def, :nonzero?,
        s(:args),
        s(:send,
          s(:begin,
            s(:send,
              s(:send, nil, :numeric), :zero?)), :!)),
      s(:def, :<=>,
        s(:args,
          s(:arg, :other)),
        s(:if,
          s(:send,
            s(:lvar, :other), :kind_of?,
            s(:const, nil, :TkVariable)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :val,
                  s(:send,
                    s(:lvar, :other), :numeric)),
                s(:lvasgn, :other,
                  s(:lvar, :val))),
              s(:resbody, nil, nil,
                s(:lvasgn, :other,
                  s(:send,
                    s(:lvar, :other), :_value))), nil)),
          s(:if,
            s(:send,
              s(:lvar, :other), :kind_of?,
              s(:const, nil, :Numeric)),
            s(:kwbegin,
              s(:rescue,
                s(:return,
                  s(:send,
                    s(:send,
                      s(:self), :numeric), :<=>,
                    s(:lvar, :other))),
                s(:resbody, nil, nil,
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:self), :_value), :<=>,
                      s(:send,
                        s(:lvar, :other), :to_s)))), nil)),
            s(:if,
              s(:send,
                s(:lvar, :other), :kind_of?,
                s(:const, nil, :Array)),
              s(:return,
                s(:send,
                  s(:send,
                    s(:self), :list), :<=>,
                  s(:lvar, :other))),
              s(:return,
                s(:send,
                  s(:send,
                    s(:self), :_value), :<=>,
                  s(:lvar, :other))))))),
      s(:def, :to_eval,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :trace_callback,
        s(:args,
          s(:arg, :elem),
          s(:arg, :op)),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@trace_var), :kind_of?,
              s(:const, nil, :Array)),
            s(:block,
              s(:send,
                s(:ivar, :@trace_var), :each),
              s(:args,
                s(:arg, :m),
                s(:arg, :e)),
              s(:if,
                s(:send,
                  s(:lvar, :m), :index,
                  s(:lvar, :op)),
                s(:send,
                  s(:lvar, :e), :call,
                  s(:self),
                  s(:lvar, :elem),
                  s(:lvar, :op)), nil)), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :elem), :kind_of?,
                s(:const, nil, :String)),
              s(:send,
                s(:lvar, :elem), :!=,
                s(:str, ""))),
            s(:if,
              s(:and,
                s(:send,
                  s(:ivar, :@trace_elem), :kind_of?,
                  s(:const, nil, :Hash)),
                s(:send,
                  s(:send,
                    s(:ivar, :@trace_elem), :[],
                    s(:lvar, :elem)), :kind_of?,
                  s(:const, nil, :Array))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@trace_elem), :[],
                    s(:lvar, :elem)), :each),
                s(:args,
                  s(:arg, :m),
                  s(:arg, :e)),
                s(:if,
                  s(:send,
                    s(:lvar, :m), :index,
                    s(:lvar, :op)),
                  s(:send,
                    s(:lvar, :e), :call,
                    s(:self),
                    s(:lvar, :elem),
                    s(:lvar, :op)), nil)), nil), nil))),
      s(:def, :_check_trace_opt,
        s(:args,
          s(:arg, :opts)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :opts), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :opt_str,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :map),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :s), :to_s)), :join,
                s(:str, " "))),
            s(:lvasgn, :opt_str,
              s(:send,
                s(:lvar, :opts), :to_s))),
          s(:if,
            s(:send,
              s(:lvar, :opt_str), :empty?),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "null trace option")), nil),
          s(:if,
            s(:send,
              s(:lvar, :opt_str), :=~,
              s(:regexp,
                s(:str, "[^arwu\\s]"),
                s(:regopt))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :opts), :kind_of?,
                  s(:const, nil, :Array)),
                s(:lvasgn, :opt_ary,
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :map),
                    s(:args,
                      s(:arg, :opt)),
                    s(:send,
                      s(:send,
                        s(:lvar, :opt), :to_s), :strip))),
                s(:begin,
                  s(:lvasgn, :opt_ary,
                    s(:send,
                      s(:lvar, :opt_str), :split,
                      s(:regexp,
                        s(:str, "\\s+|\\|"),
                        s(:regopt)))),
                  s(:send,
                    s(:lvar, :opt_ary), :delete,
                    s(:str, "")))),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :opt_ary), :uniq), :map),
                    s(:args,
                      s(:arg, :opt)),
                    s(:case,
                      s(:lvar, :opt),
                      s(:when,
                        s(:str, "array"),
                        s(:str, "a")),
                      s(:when,
                        s(:str, "read"),
                        s(:str, "r")),
                      s(:when,
                        s(:str, "write"),
                        s(:str, "w")),
                      s(:when,
                        s(:str, "unset"),
                        s(:str, "u")),
                      s(:send, nil, :fail,
                        s(:const, nil, :ArgumentError),
                        s(:dstr,
                          s(:str, "unsupported trace option '"),
                          s(:begin,
                            s(:lvar, :opt)),
                          s(:str, "' on Tcl/Tk"),
                          s(:begin,
                            s(:const,
                              s(:const, nil, :Tk), :TCL_PATCHLEVEL)))))), :join),
                s(:lvar, :opt_ary))),
            s(:begin,
              s(:lvasgn, :opt_ary,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :opt_str), :delete,
                      s(:str, "^arwu")), :split,
                    s(:regexp,
                      s(:regopt))), :uniq)),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:send,
                  s(:lvar, :opt_ary), :join),
                s(:block,
                  s(:send,
                    s(:lvar, :opt_ary), :map),
                  s(:args,
                    s(:arg, :c)),
                  s(:case,
                    s(:lvar, :c),
                    s(:when,
                      s(:str, "a"),
                      s(:str, "array")),
                    s(:when,
                      s(:str, "r"),
                      s(:str, "read")),
                    s(:when,
                      s(:str, "w"),
                      s(:str, "write")),
                    s(:when,
                      s(:str, "u"),
                      s(:str, "unset")), nil))))))),
      s(:send, nil, :private,
        s(:sym, :_check_trace_opt)),
      s(:def, :trace,
        s(:args,
          s(:arg, :opts),
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:lvasgn, :opts,
            s(:send, nil, :_check_trace_opt,
              s(:lvar, :opts))),
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:ivasgn, :@trace_var),
                s(:array))), :unshift,
            s(:array,
              s(:lvar, :opts),
              s(:lvar, :cmd))),
          s(:if,
            s(:send,
              s(:ivar, :@trace_opts), :==,
              s(:nil)),
            s(:begin,
              s(:send,
                s(:const, nil, :TkVar_CB_TBL), :[]=,
                s(:ivar, :@id),
                s(:self)),
              s(:ivasgn, :@trace_opts,
                s(:send,
                  s(:lvar, :opts), :dup)),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "trace"),
                  s(:str, "variable"),
                  s(:ivar, :@id),
                  s(:ivar, :@trace_opts),
                  s(:send,
                    s(:str, "rb_var "), :<<,
                    s(:ivar, :@id))),
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "trace"),
                  s(:str, "add"),
                  s(:str, "variable"),
                  s(:ivar, :@id),
                  s(:ivar, :@trace_opts),
                  s(:send,
                    s(:str, "rb_var "), :<<,
                    s(:ivar, :@id))))),
            s(:begin,
              s(:lvasgn, :newopts,
                s(:send,
                  s(:ivar, :@trace_opts), :dup)),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :each_byte),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:send,
                        s(:lvar, :newopts), :index,
                        s(:send,
                          s(:lvar, :c), :chr)), nil,
                      s(:send,
                        s(:lvar, :newopts), :concat,
                        s(:send,
                          s(:lvar, :c), :chr)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :newopts), :!=,
                      s(:ivar, :@trace_opts)),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "vdelete"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id))),
                      s(:send,
                        s(:ivar, :@trace_opts), :replace,
                        s(:lvar, :newopts)),
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "variable"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id)))), nil)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :newopts), :|,
                    s(:lvar, :opts)),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :newopts), :-,
                          s(:ivar, :@trace_opts))), :empty?), nil,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "remove"),
                        s(:str, "variable"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id))),
                      s(:send,
                        s(:ivar, :@trace_opts), :replace,
                        s(:lvar, :newopts)),
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "add"),
                        s(:str, "variable"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id))))))))),
          s(:self))),
      s(:def, :trace_element,
        s(:args,
          s(:arg, :elem),
          s(:arg, :opts),
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:if,
            s(:ivar, :@elem),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "invalid for a TkVariable which denotes an element of Tcl's array")), nil),
          s(:lvasgn, :opts,
            s(:send, nil, :_check_trace_opt,
              s(:lvar, :opts))),
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:begin,
                    s(:or_asgn,
                      s(:ivasgn, :@trace_elem),
                      s(:hash))), :[],
                  s(:lvar, :elem)),
                s(:array))), :unshift,
            s(:array,
              s(:lvar, :opts),
              s(:lvar, :cmd))),
          s(:if,
            s(:send,
              s(:ivar, :@trace_opts), :==,
              s(:nil)),
            s(:begin,
              s(:send,
                s(:const, nil, :TkVar_CB_TBL), :[]=,
                s(:ivar, :@id),
                s(:self)),
              s(:ivasgn, :@trace_opts,
                s(:send,
                  s(:lvar, :opts), :dup)),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "trace"),
                  s(:str, "add"),
                  s(:str, "variable"),
                  s(:ivar, :@id),
                  s(:ivar, :@trace_opts),
                  s(:send,
                    s(:str, "rb_var "), :<<,
                    s(:ivar, :@id))),
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "trace"),
                  s(:str, "variable"),
                  s(:ivar, :@id),
                  s(:ivar, :@trace_opts),
                  s(:send,
                    s(:str, "rb_var "), :<<,
                    s(:ivar, :@id))))),
            s(:begin,
              s(:lvasgn, :newopts,
                s(:send,
                  s(:ivar, :@trace_opts), :dup)),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :each_byte),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:send,
                        s(:lvar, :newopts), :index,
                        s(:send,
                          s(:lvar, :c), :chr)), nil,
                      s(:send,
                        s(:lvar, :newopts), :concat,
                        s(:send,
                          s(:lvar, :c), :chr)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :newopts), :!=,
                      s(:ivar, :@trace_opts)),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "vdelete"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id))),
                      s(:send,
                        s(:ivar, :@trace_opts), :replace,
                        s(:lvar, :newopts)),
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "variable"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id)))), nil)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :newopts), :|,
                    s(:lvar, :opts)),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :newopts), :-,
                          s(:ivar, :@trace_opts))), :empty?), nil,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "remove"),
                        s(:str, "variable"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id))),
                      s(:send,
                        s(:ivar, :@trace_opts), :replace,
                        s(:lvar, :newopts)),
                      s(:send,
                        s(:const, nil, :Tk), :tk_call_without_enc,
                        s(:str, "trace"),
                        s(:str, "add"),
                        s(:str, "variable"),
                        s(:ivar, :@id),
                        s(:ivar, :@trace_opts),
                        s(:send,
                          s(:str, "rb_var "), :<<,
                          s(:ivar, :@id))))))))),
          s(:self))),
      s(:def, :trace_info,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@trace_var), nil,
            s(:return,
              s(:array))),
          s(:send,
            s(:ivar, :@trace_var), :dup))),
      s(:alias,
        s(:sym, :trace_vinfo),
        s(:sym, :trace_info)),
      s(:def, :trace_info_for_element,
        s(:args,
          s(:arg, :elem)),
        s(:begin,
          s(:if,
            s(:ivar, :@elem),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "invalid for a TkVariable which denotes an element of Tcl's array")), nil),
          s(:if,
            s(:ivar, :@trace_elem), nil,
            s(:return,
              s(:array))),
          s(:if,
            s(:send,
              s(:ivar, :@trace_elem), :[],
              s(:lvar, :elem)), nil,
            s(:return,
              s(:array))),
          s(:send,
            s(:send,
              s(:ivar, :@trace_elem), :[],
              s(:lvar, :elem)), :dup))),
      s(:alias,
        s(:sym, :trace_vinfo_for_element),
        s(:sym, :trace_info_for_element)),
      s(:def, :trace_remove,
        s(:args,
          s(:arg, :opts),
          s(:arg, :cmd)),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@trace_var), :kind_of?,
              s(:const, nil, :Array)), nil,
            s(:return,
              s(:self))),
          s(:lvasgn, :opts,
            s(:send, nil, :_check_trace_opt,
              s(:lvar, :opts))),
          s(:lvasgn, :idx,
            s(:int, -1)),
          s(:if,
            s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
            s(:begin,
              s(:lvasgn, :newopts,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_var), :each_with_index),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :idx), :<,
                        s(:int, 0)),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 1)), :==,
                        s(:lvar, :cmd))),
                    s(:begin,
                      s(:lvasgn, :diff,
                        s(:false)),
                      s(:block,
                        s(:send,
                          s(:array,
                            s(:str, "a"),
                            s(:str, "r"),
                            s(:str, "w"),
                            s(:str, "u")), :each),
                        s(:args,
                          s(:arg, :c)),
                        s(:if,
                          s(:begin,
                            s(:lvasgn, :diff,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :e), :[],
                                    s(:int, 0)), :index,
                                  s(:lvar, :c)), :^,
                                s(:send,
                                  s(:lvar, :opts), :index,
                                  s(:lvar, :c))))),
                          s(:break), nil)),
                      s(:if,
                        s(:lvar, :diff), nil,
                        s(:begin,
                          s(:lvasgn, :idx,
                            s(:lvar, :i)),
                          s(:next)))), nil),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :[],
                        s(:int, 0)), :each_byte),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:send,
                        s(:lvar, :newopts), :index,
                        s(:send,
                          s(:lvar, :c), :chr)), nil,
                      s(:send,
                        s(:lvar, :newopts), :concat,
                        s(:send,
                          s(:lvar, :c), :chr))))))),
            s(:begin,
              s(:lvasgn, :newopts,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_var), :each_with_index),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:lvar, :idx), :<,
                            s(:int, 0)),
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :[],
                              s(:int, 1)), :==,
                            s(:lvar, :cmd))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :[],
                              s(:int, 0)), :size), :==,
                          s(:send,
                            s(:lvar, :opts), :size))),
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :[],
                              s(:int, 0)), :-,
                            s(:lvar, :opts))), :empty?)),
                    s(:begin,
                      s(:lvasgn, :idx,
                        s(:lvar, :i)),
                      s(:next)), nil),
                  s(:op_asgn,
                    s(:lvasgn, :newopts), :|,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 0))))))),
          s(:if,
            s(:send,
              s(:lvar, :idx), :>=,
              s(:int, 0)),
            s(:send,
              s(:ivar, :@trace_var), :delete_at,
              s(:lvar, :idx)),
            s(:return,
              s(:self))),
          s(:block,
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:ivasgn, :@trace_elem),
                  s(:hash))), :each),
            s(:args,
              s(:arg, :elem)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@trace_elem), :[],
                  s(:lvar, :elem)), :each),
              s(:args,
                s(:arg, :e)),
              s(:if,
                s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 0)), :each_byte),
                  s(:args,
                    s(:arg, :c)),
                  s(:if,
                    s(:send,
                      s(:lvar, :newopts), :index,
                      s(:send,
                        s(:lvar, :c), :chr)), nil,
                    s(:send,
                      s(:lvar, :newopts), :concat,
                      s(:send,
                        s(:lvar, :c), :chr)))),
                s(:op_asgn,
                  s(:lvasgn, :newopts), :|,
                  s(:send,
                    s(:lvar, :e), :[],
                    s(:int, 0)))))),
          s(:if,
            s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
            s(:begin,
              s(:lvasgn, :diff,
                s(:false)),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_opts), :each_byte),
                s(:args,
                  s(:arg, :c)),
                s(:if,
                  s(:begin,
                    s(:lvasgn, :diff,
                      s(:send,
                        s(:send,
                          s(:lvar, :newopts), :index,
                          s(:lvar, :c)), :!))),
                  s(:break), nil)),
              s(:if,
                s(:lvar, :diff),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call_without_enc,
                    s(:str, "trace"),
                    s(:str, "vdelete"),
                    s(:ivar, :@id),
                    s(:ivar, :@trace_opts),
                    s(:send,
                      s(:str, "rb_var "), :<<,
                      s(:ivar, :@id))),
                  s(:send,
                    s(:ivar, :@trace_opts), :replace,
                    s(:lvar, :newopts)),
                  s(:if,
                    s(:send,
                      s(:ivar, :@trace_opts), :empty?), nil,
                    s(:send,
                      s(:const, nil, :Tk), :tk_call_without_enc,
                      s(:str, "trace"),
                      s(:str, "variable"),
                      s(:ivar, :@id),
                      s(:ivar, :@trace_opts),
                      s(:send,
                        s(:str, "rb_var "), :<<,
                        s(:ivar, :@id))))), nil)),
            s(:if,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:ivar, :@trace_opts), :-,
                    s(:lvar, :newopts))), :empty?), nil,
              s(:begin,
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "trace"),
                  s(:str, "remove"),
                  s(:str, "variable"),
                  s(:ivar, :@id),
                  s(:ivar, :@trace_opts),
                  s(:send,
                    s(:str, "rb_var "), :<<,
                    s(:ivar, :@id))),
                s(:send,
                  s(:ivar, :@trace_opts), :replace,
                  s(:lvar, :newopts)),
                s(:if,
                  s(:send,
                    s(:ivar, :@trace_opts), :empty?), nil,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call_without_enc,
                    s(:str, "trace"),
                    s(:str, "add"),
                    s(:str, "variable"),
                    s(:ivar, :@id),
                    s(:ivar, :@trace_opts),
                    s(:send,
                      s(:str, "rb_var "), :<<,
                      s(:ivar, :@id))))))),
          s(:self))),
      s(:alias,
        s(:sym, :trace_delete),
        s(:sym, :trace_remove)),
      s(:alias,
        s(:sym, :trace_vdelete),
        s(:sym, :trace_remove)),
      s(:def, :trace_remove_for_element,
        s(:args,
          s(:arg, :elem),
          s(:arg, :opts),
          s(:arg, :cmd)),
        s(:begin,
          s(:if,
            s(:ivar, :@elem),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:str, "invalid for a TkVariable which denotes an element of Tcl's array")), nil),
          s(:if,
            s(:send,
              s(:ivar, :@trace_elem), :kind_of?,
              s(:const, nil, :Hash)), nil,
            s(:return,
              s(:self))),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@trace_elem), :[],
                s(:lvar, :elem)), :kind_of?,
              s(:const, nil, :Array)), nil,
            s(:return,
              s(:self))),
          s(:lvasgn, :opts,
            s(:send, nil, :_check_trace_opt,
              s(:lvar, :opts))),
          s(:lvasgn, :idx,
            s(:int, -1)),
          s(:if,
            s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@trace_elem), :[],
                  s(:lvar, :elem)), :each_with_index),
              s(:args,
                s(:arg, :e),
                s(:arg, :i)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :idx), :<,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 1)), :==,
                    s(:lvar, :cmd))),
                s(:begin,
                  s(:lvasgn, :diff,
                    s(:false)),
                  s(:block,
                    s(:send,
                      s(:array,
                        s(:str, "a"),
                        s(:str, "r"),
                        s(:str, "w"),
                        s(:str, "u")), :each),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:begin,
                        s(:lvasgn, :diff,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :e), :[],
                                s(:int, 0)), :index,
                              s(:lvar, :c)), :^,
                            s(:send,
                              s(:lvar, :opts), :index,
                              s(:lvar, :c))))),
                      s(:break), nil)),
                  s(:if,
                    s(:lvar, :diff), nil,
                    s(:begin,
                      s(:lvasgn, :idx,
                        s(:lvar, :i)),
                      s(:next)))), nil)),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@trace_elem), :[],
                  s(:lvar, :elem)), :each_with_index),
              s(:args,
                s(:arg, :e),
                s(:arg, :i)),
              s(:if,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:lvar, :idx), :<,
                        s(:int, 0)),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 1)), :==,
                        s(:lvar, :cmd))),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 0)), :size), :==,
                      s(:send,
                        s(:lvar, :opts), :size))),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 0)), :-,
                        s(:lvar, :opts))), :empty?)),
                s(:begin,
                  s(:lvasgn, :idx,
                    s(:lvar, :i)),
                  s(:next)), nil))),
          s(:if,
            s(:send,
              s(:lvar, :idx), :>=,
              s(:int, 0)),
            s(:send,
              s(:send,
                s(:ivar, :@trace_elem), :[],
                s(:lvar, :elem)), :delete_at,
              s(:lvar, :idx)),
            s(:return,
              s(:self))),
          s(:if,
            s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
            s(:begin,
              s(:lvasgn, :newopts,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_var), :each),
                s(:args,
                  s(:arg, :e)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 0)), :each_byte),
                  s(:args,
                    s(:arg, :c)),
                  s(:if,
                    s(:send,
                      s(:lvar, :newopts), :index,
                      s(:send,
                        s(:lvar, :c), :chr)), nil,
                    s(:send,
                      s(:lvar, :newopts), :concat,
                      s(:send,
                        s(:lvar, :c), :chr))))),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_elem), :each),
                s(:args,
                  s(:arg, :elem)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@trace_elem), :[],
                      s(:lvar, :elem)), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :[],
                        s(:int, 0)), :each_byte),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:send,
                        s(:lvar, :newopts), :index,
                        s(:send,
                          s(:lvar, :c), :chr)), nil,
                      s(:send,
                        s(:lvar, :newopts), :concat,
                        s(:send,
                          s(:lvar, :c), :chr))))))),
            s(:begin,
              s(:lvasgn, :newopts,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_var), :each),
                s(:args,
                  s(:arg, :e)),
                s(:op_asgn,
                  s(:lvasgn, :newopts), :|,
                  s(:send,
                    s(:lvar, :e), :[],
                    s(:int, 0)))),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_elem), :each),
                s(:args,
                  s(:arg, :elem)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@trace_elem), :[],
                      s(:lvar, :elem)), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :[],
                        s(:int, 0)), :each_byte),
                    s(:args,
                      s(:arg, :c)),
                    s(:if,
                      s(:send,
                        s(:lvar, :newopts), :index,
                        s(:send,
                          s(:lvar, :c), :chr)), nil,
                      s(:send,
                        s(:lvar, :newopts), :concat,
                        s(:send,
                          s(:lvar, :c), :chr)))))))),
          s(:if,
            s(:const, nil, :USE_OLD_TRACE_OPTION_STYLE),
            s(:begin,
              s(:lvasgn, :diff,
                s(:false)),
              s(:block,
                s(:send,
                  s(:ivar, :@trace_opts), :each_byte),
                s(:args,
                  s(:arg, :c)),
                s(:if,
                  s(:begin,
                    s(:lvasgn, :diff,
                      s(:send,
                        s(:send,
                          s(:lvar, :newopts), :index,
                          s(:lvar, :c)), :!))),
                  s(:break), nil)),
              s(:if,
                s(:lvar, :diff),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call_without_enc,
                    s(:str, "trace"),
                    s(:str, "vdelete"),
                    s(:ivar, :@id),
                    s(:ivar, :@trace_opts),
                    s(:send,
                      s(:str, "rb_var "), :<<,
                      s(:ivar, :@id))),
                  s(:send,
                    s(:ivar, :@trace_opts), :replace,
                    s(:lvar, :newopts)),
                  s(:if,
                    s(:send,
                      s(:ivar, :@trace_opts), :empty?), nil,
                    s(:send,
                      s(:const, nil, :Tk), :tk_call_without_enc,
                      s(:str, "trace"),
                      s(:str, "variable"),
                      s(:ivar, :@id),
                      s(:ivar, :@trace_opts),
                      s(:send,
                        s(:str, "rb_var "), :<<,
                        s(:ivar, :@id))))), nil)),
            s(:if,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:ivar, :@trace_opts), :-,
                    s(:lvar, :newopts))), :empty?), nil,
              s(:begin,
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "trace"),
                  s(:str, "remove"),
                  s(:str, "variable"),
                  s(:ivar, :@id),
                  s(:ivar, :@trace_opts),
                  s(:send,
                    s(:str, "rb_var "), :<<,
                    s(:ivar, :@id))),
                s(:send,
                  s(:ivar, :@trace_opts), :replace,
                  s(:lvar, :newopts)),
                s(:if,
                  s(:send,
                    s(:ivar, :@trace_opts), :empty?), nil,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call_without_enc,
                    s(:str, "trace"),
                    s(:str, "add"),
                    s(:str, "variable"),
                    s(:ivar, :@id),
                    s(:ivar, :@trace_opts),
                    s(:send,
                      s(:str, "rb_var "), :<<,
                      s(:ivar, :@id))))))),
          s(:self))),
      s(:alias,
        s(:sym, :trace_delete_for_element),
        s(:sym, :trace_remove_for_element)),
      s(:alias,
        s(:sym, :trace_vdelete_for_element),
        s(:sym, :trace_remove_for_element)))),
  s(:class,
    s(:const, nil, :TkVarAccess),
    s(:const, nil, :TkVariable),
    s(:begin,
      s(:defs,
        s(:self), :new,
        s(:args,
          s(:arg, :name),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :name), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :args), :empty?), nil,
                s(:send,
                  s(:lvar, :name), :value=,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0)))),
              s(:return,
                s(:lvar, :name))), nil),
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :name), :to_s)),
          s(:lvasgn, :v,
            s(:nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkVar_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :TkVar_ID_TBL), :[],
                  s(:lvar, :name))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :args), :empty?), nil,
                  s(:send,
                    s(:lvar, :v), :value=,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)))),
                s(:return,
                  s(:lvar, :v))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :v,
                      s(:send,
                        s(:self), :allocate))), :instance_eval),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@id,
                    s(:lvar, :name)),
                  s(:send,
                    s(:const, nil, :TkVar_ID_TBL), :[]=,
                    s(:ivar, :@id),
                    s(:self)),
                  s(:ivasgn, :@var,
                    s(:ivar, :@id)))))),
          s(:block,
            s(:send,
              s(:lvar, :v), :instance_eval),
            s(:args),
            s(:send, nil, :initialize,
              s(:lvar, :name),
              s(:splat,
                s(:lvar, :args)))),
          s(:lvar, :v))),
      s(:defs,
        s(:self), :new_hash,
        s(:args,
          s(:arg, :name),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :name), :kind_of?,
              s(:const, nil, :TkVariable)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :name), :is_hash?), nil,
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "already exist as a scalar variable"))),
              s(:if,
                s(:send,
                  s(:lvar, :args), :empty?), nil,
                s(:send,
                  s(:lvar, :name), :value=,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0)))),
              s(:return,
                s(:lvar, :name))), nil),
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :name), :to_s)),
          s(:lvasgn, :v,
            s(:nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkVar_ID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :TkVar_ID_TBL), :[],
                  s(:lvar, :name))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :v), :is_hash?), nil,
                  s(:send, nil, :fail,
                    s(:const, nil, :ArgumentError),
                    s(:str, "already exist as a scalar variable"))),
                s(:if,
                  s(:send,
                    s(:lvar, :args), :empty?), nil,
                  s(:send,
                    s(:lvar, :v), :value=,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)))),
                s(:return,
                  s(:lvar, :v))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :v,
                      s(:send,
                        s(:self), :allocate))), :instance_eval),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@id,
                    s(:lvar, :name)),
                  s(:send,
                    s(:const, nil, :TkVar_ID_TBL), :[]=,
                    s(:ivar, :@id),
                    s(:self)),
                  s(:ivasgn, :@var,
                    s(:ivar, :@id)))))),
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:lvar, :name)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :args), :empty?),
              s(:send,
                s(:send,
                  s(:const, nil, :INTERP), :_invoke_without_enc,
                  s(:str, "array"),
                  s(:str, "exist"),
                  s(:lvar, :name)), :==,
                s(:str, "0"))),
            s(:block,
              s(:send,
                s(:lvar, :v), :instance_eval),
              s(:args),
              s(:send, nil, :initialize,
                s(:lvar, :name),
                s(:hash))),
            s(:block,
              s(:send,
                s(:lvar, :v), :instance_eval),
              s(:args),
              s(:send, nil, :initialize,
                s(:lvar, :name),
                s(:splat,
                  s(:lvar, :args))))),
          s(:lvar, :v))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :varname),
          s(:optarg, :val,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@elem,
            s(:nil)),
          s(:ivasgn, :@def_default,
            s(:false)),
          s(:ivasgn, :@default_val,
            s(:nil)),
          s(:ivasgn, :@trace_var,
            s(:nil)),
          s(:ivasgn, :@trace_elem,
            s(:nil)),
          s(:ivasgn, :@trace_opts,
            s(:nil)),
          s(:ivasgn, :@type,
            s(:nil)),
          s(:lvasgn, :var,
            s(:self)),
          s(:ivasgn, :@element_type,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :var), :default_value_type))),
          s(:if,
            s(:send,
              s(:ivar, :@id), :=~,
              s(:regexp,
                s(:str, "^([^(]+)\\((.+)\\)$"),
                s(:regopt))),
            s(:begin,
              s(:ivasgn, :@var,
                s(:nth_ref, 1)),
              s(:ivasgn, :@elem,
                s(:nth_ref, 2))), nil),
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:ivar, :@var)),
          s(:if,
            s(:lvar, :val),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :val), :kind_of?,
                  s(:const, nil, :Hash)),
                s(:begin,
                  s(:send,
                    s(:self), :[]=,
                    s(:str, ""),
                    s(:int, 0)),
                  s(:send,
                    s(:self), :clear)), nil),
              s(:send,
                s(:self), :value=,
                s(:lvar, :val))), nil))))),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:kwbegin,
        s(:rescue,
          s(:begin,
            s(:send,
              s(:const, nil, :INTERP), :_invoke_without_enc,
              s(:str, "global"),
              s(:str, "auto_path")),
            s(:lvasgn, :auto_path,
              s(:send,
                s(:const, nil, :INTERP), :_invoke,
                s(:str, "set"),
                s(:str, "auto_path")))),
          s(:resbody, nil,
            s(:lvasgn, :e),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:send,
                    s(:const, nil, :INTERP), :_invoke_without_enc,
                    s(:str, "global"),
                    s(:str, "env")),
                  s(:lvasgn, :auto_path,
                    s(:send,
                      s(:const, nil, :INTERP), :_invoke,
                      s(:str, "set"),
                      s(:str, "env(TCLLIBPATH)")))),
                s(:resbody, nil,
                  s(:lvasgn, :e),
                  s(:lvasgn, :auto_path,
                    s(:const,
                      s(:const, nil, :Tk), :LIBRARY))), nil))), nil)),
      s(:casgn, nil, :AUTO_PATH,
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:str, "auto_path"),
          s(:lvar, :auto_path))),
      s(:casgn, nil, :TCL_PACKAGE_PATH,
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:str, "tcl_pkgPath"))),
      s(:casgn, nil, :PACKAGE_PATH,
        s(:const, nil, :TCL_PACKAGE_PATH)),
      s(:casgn, nil, :TCL_LIBRARY_PATH,
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:str, "tcl_libPath"))),
      s(:casgn, nil, :LIBRARY_PATH,
        s(:const, nil, :TCL_LIBRARY_PATH)),
      s(:casgn, nil, :TCL_PRECISION,
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:str, "tcl_precision"))))))
