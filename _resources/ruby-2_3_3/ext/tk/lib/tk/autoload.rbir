s(:begin,
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:send, nil, :autoload,
        s(:sym, :Grid),
        s(:str, "tk/grid")),
      s(:def, :Grid,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkGrid), :configure,
          s(:splat,
            s(:lvar, :args)))),
      s(:send, nil, :autoload,
        s(:sym, :Pack),
        s(:str, "tk/pack")),
      s(:def, :Pack,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPack), :configure,
          s(:splat,
            s(:lvar, :args)))),
      s(:send, nil, :autoload,
        s(:sym, :Place),
        s(:str, "tk/place")),
      s(:def, :Place,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPlace), :configure,
          s(:splat,
            s(:lvar, :args)))))),
  s(:send, nil, :autoload,
    s(:sym, :TkGrid),
    s(:str, "tk/grid")),
  s(:def, :TkGrid,
    s(:args,
      s(:restarg, :args)),
    s(:send,
      s(:const, nil, :TkGrid), :configure,
      s(:splat,
        s(:lvar, :args)))),
  s(:send, nil, :autoload,
    s(:sym, :TkPack),
    s(:str, "tk/pack")),
  s(:def, :TkPack,
    s(:args,
      s(:restarg, :args)),
    s(:send,
      s(:const, nil, :TkPack), :configure,
      s(:splat,
        s(:lvar, :args)))),
  s(:send, nil, :autoload,
    s(:sym, :TkPlace),
    s(:str, "tk/place")),
  s(:def, :TkPlace,
    s(:args,
      s(:restarg, :args)),
    s(:send,
      s(:const, nil, :TkPlace), :configure,
      s(:splat,
        s(:lvar, :args)))),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:send, nil, :autoload,
        s(:sym, :Busy),
        s(:str, "tk/busy")),
      s(:send, nil, :autoload,
        s(:sym, :Button),
        s(:str, "tk/button")),
      s(:send, nil, :autoload,
        s(:sym, :Canvas),
        s(:str, "tk/canvas")),
      s(:send, nil, :autoload,
        s(:sym, :CheckButton),
        s(:str, "tk/checkbutton")),
      s(:send, nil, :autoload,
        s(:sym, :Checkbutton),
        s(:str, "tk/checkbutton")),
      s(:send, nil, :autoload,
        s(:sym, :Entry),
        s(:str, "tk/entry")),
      s(:send, nil, :autoload,
        s(:sym, :Frame),
        s(:str, "tk/frame")),
      s(:send, nil, :autoload,
        s(:sym, :Label),
        s(:str, "tk/label")),
      s(:send, nil, :autoload,
        s(:sym, :LabelFrame),
        s(:str, "tk/labelframe")),
      s(:send, nil, :autoload,
        s(:sym, :Labelframe),
        s(:str, "tk/labelframe")),
      s(:send, nil, :autoload,
        s(:sym, :Listbox),
        s(:str, "tk/listbox")),
      s(:send, nil, :autoload,
        s(:sym, :Menu),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :MenuClone),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :CloneMenu),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :SystemMenu),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :SysMenu_Help),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :SysMenu_System),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :SysMenu_Apple),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :Menubutton),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :MenuButton),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :OptionMenubutton),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :OptionMenBbutton),
        s(:str, "tk/menu")),
      s(:send, nil, :autoload,
        s(:sym, :Message),
        s(:str, "tk/message")),
      s(:send, nil, :autoload,
        s(:sym, :PanedWindow),
        s(:str, "tk/panedwindow")),
      s(:send, nil, :autoload,
        s(:sym, :Panedwindow),
        s(:str, "tk/panedwindow")),
      s(:send, nil, :autoload,
        s(:sym, :RadioButton),
        s(:str, "tk/radiobutton")),
      s(:send, nil, :autoload,
        s(:sym, :Radiobutton),
        s(:str, "tk/radiobutton")),
      s(:send, nil, :autoload,
        s(:sym, :Root),
        s(:str, "tk/root")),
      s(:send, nil, :autoload,
        s(:sym, :Scale),
        s(:str, "tk/scale")),
      s(:send, nil, :autoload,
        s(:sym, :Scrollbar),
        s(:str, "tk/scrollbar")),
      s(:send, nil, :autoload,
        s(:sym, :XScrollbar),
        s(:str, "tk/scrollbar")),
      s(:send, nil, :autoload,
        s(:sym, :YScrollbar),
        s(:str, "tk/scrollbar")),
      s(:send, nil, :autoload,
        s(:sym, :Spinbox),
        s(:str, "tk/spinbox")),
      s(:send, nil, :autoload,
        s(:sym, :Text),
        s(:str, "tk/text")),
      s(:send, nil, :autoload,
        s(:sym, :Toplevel),
        s(:str, "tk/toplevel")))),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:send, nil, :autoload,
        s(:sym, :Clock),
        s(:str, "tk/clock")),
      s(:send, nil, :autoload,
        s(:sym, :OptionObj),
        s(:str, "tk/optionobj")),
      s(:send, nil, :autoload,
        s(:sym, :X_Scrollable),
        s(:str, "tk/scrollable")),
      s(:send, nil, :autoload,
        s(:sym, :Y_Scrollable),
        s(:str, "tk/scrollable")),
      s(:send, nil, :autoload,
        s(:sym, :Scrollable),
        s(:str, "tk/scrollable")),
      s(:send, nil, :autoload,
        s(:sym, :Fontchooser),
        s(:str, "tk/fontchooser")),
      s(:send, nil, :autoload,
        s(:sym, :Wm),
        s(:str, "tk/wm")),
      s(:send, nil, :autoload,
        s(:sym, :Wm_for_General),
        s(:str, "tk/wm")),
      s(:send, nil, :autoload,
        s(:sym, :MacResource),
        s(:str, "tk/macpkg")),
      s(:send, nil, :autoload,
        s(:sym, :WinDDE),
        s(:str, "tk/winpkg")),
      s(:send, nil, :autoload,
        s(:sym, :WinRegistry),
        s(:str, "tk/winpkg")),
      s(:send, nil, :autoload,
        s(:sym, :ValidateConfigure),
        s(:str, "tk/validation")),
      s(:send, nil, :autoload,
        s(:sym, :ItemValidateConfigure),
        s(:str, "tk/validation")),
      s(:send, nil, :autoload,
        s(:sym, :EncodedString),
        s(:str, "tk/encodedstr")),
      s(:defs,
        s(:const, nil, :Tk), :EncodedString,
        s(:args,
          s(:arg, :str),
          s(:optarg, :enc,
            s(:nil))),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :EncodedString), :new,
          s(:lvar, :str),
          s(:lvar, :enc))),
      s(:send, nil, :autoload,
        s(:sym, :BinaryString),
        s(:str, "tk/encodedstr")),
      s(:defs,
        s(:const, nil, :Tk), :BinaryString,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :BinaryString), :new,
          s(:lvar, :str))),
      s(:send, nil, :autoload,
        s(:sym, :UTF8_String),
        s(:str, "tk/encodedstr")),
      s(:defs,
        s(:const, nil, :Tk), :UTF8_String,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :UTF8_String), :new,
          s(:lvar, :str))))),
  s(:send, nil, :autoload,
    s(:sym, :TkBgError),
    s(:str, "tk/bgerror")),
  s(:send, nil, :autoload,
    s(:sym, :TkBindTag),
    s(:str, "tk/bindtag")),
  s(:send, nil, :autoload,
    s(:sym, :TkBindTagAll),
    s(:str, "tk/bindtag")),
  s(:send, nil, :autoload,
    s(:sym, :TkDatabaseClass),
    s(:str, "tk/bindtag")),
  s(:send, nil, :autoload,
    s(:sym, :TkConsole),
    s(:str, "tk/console")),
  s(:send, nil, :autoload,
    s(:sym, :TkcItem),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcArc),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcBitmap),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcImage),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcLine),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcOval),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcPolygon),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcRectangle),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcText),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcWindow),
    s(:str, "tk/canvas")),
  s(:send, nil, :autoload,
    s(:sym, :TkcTagAccess),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkcTag),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkcTagString),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkcNamedTag),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkcTagAll),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkcTagCurrent),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkcTagGroup),
    s(:str, "tk/canvastag")),
  s(:send, nil, :autoload,
    s(:sym, :TkClipboard),
    s(:str, "tk/clipboard")),
  s(:send, nil, :autoload,
    s(:sym, :TkComposite),
    s(:str, "tk/composite")),
  s(:send, nil, :autoload,
    s(:sym, :TkConsole),
    s(:str, "tk/console")),
  s(:send, nil, :autoload,
    s(:sym, :TkDialog),
    s(:str, "tk/dialog")),
  s(:send, nil, :autoload,
    s(:sym, :TkDialog2),
    s(:str, "tk/dialog")),
  s(:send, nil, :autoload,
    s(:sym, :TkDialogObj),
    s(:str, "tk/dialog")),
  s(:send, nil, :autoload,
    s(:sym, :TkWarning),
    s(:str, "tk/dialog")),
  s(:send, nil, :autoload,
    s(:sym, :TkWarning2),
    s(:str, "tk/dialog")),
  s(:send, nil, :autoload,
    s(:sym, :TkWarningObj),
    s(:str, "tk/dialog")),
  s(:send, nil, :autoload,
    s(:sym, :TkEvent),
    s(:str, "tk/event")),
  s(:send, nil, :autoload,
    s(:sym, :TkFont),
    s(:str, "tk/font")),
  s(:send, nil, :autoload,
    s(:sym, :TkNamedFont),
    s(:str, "tk/font")),
  s(:send, nil, :autoload,
    s(:sym, :TkImage),
    s(:str, "tk/image")),
  s(:send, nil, :autoload,
    s(:sym, :TkBitmapImage),
    s(:str, "tk/image")),
  s(:send, nil, :autoload,
    s(:sym, :TkPhotoImage),
    s(:str, "tk/image")),
  s(:send, nil, :autoload,
    s(:sym, :TkItemConfigMethod),
    s(:str, "tk/itemconfig")),
  s(:send, nil, :autoload,
    s(:sym, :TkTreatItemFont),
    s(:str, "tk/itemfont")),
  s(:send, nil, :autoload,
    s(:sym, :TkKinput),
    s(:str, "tk/kinput")),
  s(:send, nil, :autoload,
    s(:sym, :TkSystemMenu),
    s(:str, "tk/menu")),
  s(:send, nil, :autoload,
    s(:sym, :TkMenubar),
    s(:str, "tk/menubar")),
  s(:send, nil, :autoload,
    s(:sym, :TkMenuSpec),
    s(:str, "tk/menuspec")),
  s(:send, nil, :autoload,
    s(:sym, :TkManageFocus),
    s(:str, "tk/mngfocus")),
  s(:send, nil, :autoload,
    s(:sym, :TkMsgCatalog),
    s(:str, "tk/msgcat")),
  s(:send, nil, :autoload,
    s(:sym, :TkMsgCat),
    s(:str, "tk/msgcat")),
  s(:send, nil, :autoload,
    s(:sym, :TkNamespace),
    s(:str, "tk/namespace")),
  s(:send, nil, :autoload,
    s(:sym, :TkOptionDB),
    s(:str, "tk/optiondb")),
  s(:send, nil, :autoload,
    s(:sym, :TkOption),
    s(:str, "tk/optiondb")),
  s(:send, nil, :autoload,
    s(:sym, :TkResourceDB),
    s(:str, "tk/optiondb")),
  s(:send, nil, :autoload,
    s(:sym, :TkPackage),
    s(:str, "tk/package")),
  s(:send, nil, :autoload,
    s(:sym, :TkPalette),
    s(:str, "tk/palette")),
  s(:send, nil, :autoload,
    s(:sym, :TkRoot),
    s(:str, "tk/root")),
  s(:send, nil, :autoload,
    s(:sym, :TkScrollbox),
    s(:str, "tk/scrollbox")),
  s(:send, nil, :autoload,
    s(:sym, :TkSelection),
    s(:str, "tk/selection")),
  s(:send, nil, :autoload,
    s(:sym, :TkTreatTagFont),
    s(:str, "tk/tagfont")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextImage),
    s(:str, "tk/textimage")),
  s(:send, nil, :autoload,
    s(:sym, :TktImage),
    s(:str, "tk/textimage")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextMark),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextNamedMark),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextMarkInsert),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextMarkCurrent),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextMarkAnchor),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TktMark),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TktNamedMark),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TktMarkInsert),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TktMarkCurrent),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TktMarkAnchor),
    s(:str, "tk/textmark")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextTag),
    s(:str, "tk/texttag")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextNamedTag),
    s(:str, "tk/texttag")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextTagSel),
    s(:str, "tk/texttag")),
  s(:send, nil, :autoload,
    s(:sym, :TktTag),
    s(:str, "tk/texttag")),
  s(:send, nil, :autoload,
    s(:sym, :TktNamedTag),
    s(:str, "tk/texttag")),
  s(:send, nil, :autoload,
    s(:sym, :TktTagSel),
    s(:str, "tk/texttag")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextWindow),
    s(:str, "tk/textwindow")),
  s(:send, nil, :autoload,
    s(:sym, :TktWindow),
    s(:str, "tk/textwindow")),
  s(:send, nil, :autoload,
    s(:sym, :TkAfter),
    s(:str, "tk/timer")),
  s(:send, nil, :autoload,
    s(:sym, :TkTimer),
    s(:str, "tk/timer")),
  s(:send, nil, :autoload,
    s(:sym, :TkRTTimer),
    s(:str, "tk/timer")),
  s(:send, nil, :autoload,
    s(:sym, :TkTextWin),
    s(:str, "tk/txtwin_abst")),
  s(:send, nil, :autoload,
    s(:sym, :TkValidation),
    s(:str, "tk/validation")),
  s(:send, nil, :autoload,
    s(:sym, :TkValidateCommand),
    s(:str, "tk/validation")),
  s(:send, nil, :autoload,
    s(:sym, :TkVariable),
    s(:str, "tk/variable")),
  s(:send, nil, :autoload,
    s(:sym, :TkVarAccess),
    s(:str, "tk/variable")),
  s(:send, nil, :autoload,
    s(:sym, :TkVirtualEvent),
    s(:str, "tk/virtevent")),
  s(:send, nil, :autoload,
    s(:sym, :TkNamedVirtualEvent),
    s(:str, "tk/virtevent")),
  s(:send, nil, :autoload,
    s(:sym, :TkWinfo),
    s(:str, "tk/winfo")),
  s(:send, nil, :autoload,
    s(:sym, :TkXIM),
    s(:str, "tk/xim")),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:ivasgn, :@TOPLEVEL_ALIAS_TABLE,
        s(:hash)),
      s(:send,
        s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[]=,
        s(:sym, :Tk),
        s(:hash,
          s(:pair,
            s(:sym, :TkButton),
            s(:str, "tk/button")),
          s(:pair,
            s(:sym, :TkCanvas),
            s(:str, "tk/canvas")),
          s(:pair,
            s(:sym, :TkCheckButton),
            s(:str, "tk/checkbutton")),
          s(:pair,
            s(:sym, :TkCheckbutton),
            s(:str, "tk/checkbutton")),
          s(:pair,
            s(:sym, :TkEntry),
            s(:str, "tk/entry")),
          s(:pair,
            s(:sym, :TkFrame),
            s(:str, "tk/frame")),
          s(:pair,
            s(:sym, :TkLabel),
            s(:str, "tk/label")),
          s(:pair,
            s(:sym, :TkLabelFrame),
            s(:str, "tk/labelframe")),
          s(:pair,
            s(:sym, :TkLabelframe),
            s(:str, "tk/labelframe")),
          s(:pair,
            s(:sym, :TkListbox),
            s(:str, "tk/listbox")),
          s(:pair,
            s(:sym, :TkMacResource),
            s(:str, "tk/macpkg")),
          s(:pair,
            s(:sym, :TkMenu),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkMenuClone),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkCloneMenu),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkSysMenu_Help),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkSysMenu_System),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkSysMenu_Apple),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkMenubutton),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkMenuButton),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkOptionMenubutton),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkOptionMenuButton),
            s(:str, "tk/menu")),
          s(:pair,
            s(:sym, :TkMessage),
            s(:str, "tk/message")),
          s(:pair,
            s(:sym, :TkPanedWindow),
            s(:str, "tk/panedwindow")),
          s(:pair,
            s(:sym, :TkPanedwindow),
            s(:str, "tk/panedwindow")),
          s(:pair,
            s(:sym, :TkRadioButton),
            s(:str, "tk/radiobutton")),
          s(:pair,
            s(:sym, :TkRadiobutton),
            s(:str, "tk/radiobutton")),
          s(:pair,
            s(:sym, :TkScale),
            s(:str, "tk/scale")),
          s(:pair,
            s(:sym, :TkScrollbar),
            s(:str, "tk/scrollbar")),
          s(:pair,
            s(:sym, :TkXScrollbar),
            s(:str, "tk/scrollbar")),
          s(:pair,
            s(:sym, :TkYScrollbar),
            s(:str, "tk/scrollbar")),
          s(:pair,
            s(:sym, :TkSpinbox),
            s(:str, "tk/spinbox")),
          s(:pair,
            s(:sym, :TkText),
            s(:str, "tk/text")),
          s(:pair,
            s(:sym, :TkToplevel),
            s(:str, "tk/toplevel")),
          s(:pair,
            s(:sym, :TkWinDDE),
            s(:str, "tk/winpkg")),
          s(:pair,
            s(:sym, :TkWinRegistry),
            s(:str, "tk/winpkg")))),
      s(:ivasgn, :@TOPLEVEL_ALIAS_OWNER,
        s(:hash)),
      s(:ivasgn, :@TOPLEVEL_ALIAS_SETUP_PROC,
        s(:hash)),
      s(:ivasgn, :@AUTOLOAD_FILE_SYM_TABLE,
        s(:block,
          s(:send,
            s(:const, nil, :Hash), :new),
          s(:args,
            s(:arg, :h),
            s(:arg, :k)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:lvar, :k),
            s(:hash)))),
      s(:ivasgn, :@current_default_widget_set,
        s(:nil)),
      s(:module,
        s(:const, nil, :TOPLEVEL_ALIASES), nil))),
  s(:class,
    s(:const, nil, :Object), nil,
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :Tk), :TOPLEVEL_ALIASES))),
  s(:sclass,
    s(:const, nil, :Tk),
    s(:begin,
      s(:def, :default_widget_set,
        s(:args),
        s(:ivar, :@current_default_widget_set)),
      s(:def, :default_widget_set=,
        s(:args,
          s(:arg, :target)),
        s(:begin,
          s(:lvasgn, :target,
            s(:send,
              s(:lvar, :target), :to_sym)),
          s(:if,
            s(:send,
              s(:lvar, :target), :==,
              s(:ivar, :@current_default_widget_set)),
            s(:return,
              s(:lvar, :target)), nil),
          s(:if,
            s(:begin,
              s(:lvasgn, :cmd,
                s(:send,
                  s(:ivar, :@TOPLEVEL_ALIAS_SETUP_PROC), :[],
                  s(:lvar, :target)))),
            s(:send,
              s(:lvar, :cmd), :call,
              s(:lvar, :target)), nil),
          s(:send, nil, :_replace_toplevel_aliases,
            s(:lvar, :target)))),
      s(:def, :widget_set_symbols,
        s(:args),
        s(:send,
          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :keys)),
      s(:def, :toplevel_aliases_on_widget_set,
        s(:args,
          s(:arg, :widget_set)),
        s(:if,
          s(:begin,
            s(:lvasgn, :tbl,
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                s(:send,
                  s(:lvar, :widget_set), :to_sym)))),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :tbl), :collect),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :nil?)),
                s(:nil),
                s(:lvar, :k))), :compact),
          s(:send, nil, :fail,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "unknown widget_set "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :widget_set), :to_sym), :inspect)))))),
      s(:def, :__toplevel_alias_setup_proc__,
        s(:args,
          s(:restarg, :target_list),
          s(:blockarg, :cmd)),
        s(:block,
          s(:send,
            s(:lvar, :target_list), :each),
          s(:args,
            s(:arg, :target)),
          s(:send,
            s(:ivar, :@TOPLEVEL_ALIAS_SETUP_PROC), :[]=,
            s(:send,
              s(:lvar, :target), :to_sym),
            s(:lvar, :cmd)))),
      s(:def, :topobj_defined?,
        s(:args,
          s(:arg, :sym)),
        s(:or,
          s(:send,
            s(:const, nil, :Object), :autoload?,
            s(:lvar, :sym)),
          s(:begin,
            s(:and,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:lvar, :sym)),
              s(:send,
                s(:const, nil, :Object), :const_get,
                s(:lvar, :sym)))))),
      s(:def, :topalias_defined?,
        s(:args,
          s(:arg, :sym)),
        s(:or,
          s(:send,
            s(:const,
              s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :autoload?,
            s(:lvar, :sym)),
          s(:begin,
            s(:and,
              s(:send,
                s(:const,
                  s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :const_defined?,
                s(:lvar, :sym)),
              s(:send,
                s(:const,
                  s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :const_get,
                s(:lvar, :sym)))))),
      s(:def, :define_topobj,
        s(:args,
          s(:arg, :sym),
          s(:arg, :obj)),
        s(:if,
          s(:send,
            s(:lvar, :obj), :kind_of?,
            s(:const, nil, :String)),
          s(:begin,
            s(:send,
              s(:const, nil, :Object), :autoload,
              s(:lvar, :sym),
              s(:lvar, :obj)),
            s(:if,
              s(:send,
                s(:const, nil, :Object), :autoload?,
                s(:lvar, :sym)), nil,
              s(:if,
                s(:and,
                  s(:send,
                    s(:ivar, :@AUTOLOAD_FILE_SYM_TABLE), :has_key?,
                    s(:lvar, :obj)),
                  s(:begin,
                    s(:lvasgn, :loaded_obj,
                      s(:send,
                        s(:send,
                          s(:ivar, :@AUTOLOAD_FILE_SYM_TABLE), :[],
                          s(:lvar, :obj)), :[],
                        s(:lvar, :sym))))),
                s(:send,
                  s(:const, nil, :Object), :const_set,
                  s(:lvar, :sym),
                  s(:lvar, :loaded_obj)),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "cannot define autoload file (already loaded?)"))))),
          s(:send,
            s(:const, nil, :Object), :const_set,
            s(:lvar, :sym),
            s(:lvar, :obj)))),
      s(:def, :define_topalias,
        s(:args,
          s(:arg, :sym),
          s(:arg, :obj)),
        s(:if,
          s(:send,
            s(:lvar, :obj), :kind_of?,
            s(:const, nil, :String)),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :autoload,
              s(:lvar, :sym),
              s(:lvar, :obj)),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :autoload?,
                s(:lvar, :sym)), nil,
              s(:if,
                s(:and,
                  s(:send,
                    s(:ivar, :@AUTOLOAD_FILE_SYM_TABLE), :has_key?,
                    s(:lvar, :obj)),
                  s(:begin,
                    s(:lvasgn, :loaded_obj,
                      s(:send,
                        s(:send,
                          s(:ivar, :@AUTOLOAD_FILE_SYM_TABLE), :[],
                          s(:lvar, :obj)), :[],
                        s(:lvar, :sym))))),
                s(:send,
                  s(:const,
                    s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :const_set,
                  s(:lvar, :sym),
                  s(:lvar, :loaded_obj)),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:str, "cannot define autoload file (already loaded?)"))))),
          s(:send,
            s(:const,
              s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :const_set,
            s(:lvar, :sym),
            s(:lvar, :obj)))),
      s(:def, :replace_topobj,
        s(:args,
          s(:arg, :sym),
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:lvasgn, :old_obj,
              s(:send, nil, :topobj_defined?,
                s(:lvar, :sym))),
            s(:rescue,
              s(:block,
                s(:send,
                  s(:const, nil, :Object), :class_eval),
                s(:args),
                s(:send, nil, :remove_const,
                  s(:lvar, :sym))),
              s(:resbody, nil, nil,
                s(:nil)), nil), nil),
          s(:send, nil, :define_topobj,
            s(:lvar, :sym),
            s(:lvar, :obj)),
          s(:lvar, :old_obj))),
      s(:def, :replace_topalias,
        s(:args,
          s(:arg, :sym),
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:lvasgn, :old_obj,
              s(:send, nil, :topalias_defined?,
                s(:lvar, :sym))),
            s(:rescue,
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :module_eval),
                s(:args),
                s(:send, nil, :remove_const,
                  s(:lvar, :sym))),
              s(:resbody, nil, nil,
                s(:nil)), nil), nil),
          s(:send, nil, :define_topalias,
            s(:lvar, :sym),
            s(:lvar, :obj)),
          s(:lvar, :old_obj))),
      s(:send, nil, :private,
        s(:sym, :topobj_defined?),
        s(:sym, :topalias_defined?)),
      s(:send, nil, :private,
        s(:sym, :define_topobj),
        s(:sym, :define_topalias)),
      s(:send, nil, :private,
        s(:sym, :replace_topobj),
        s(:sym, :replace_topalias)),
      s(:def, :__regist_toplevel_aliases__,
        s(:args,
          s(:arg, :target),
          s(:arg, :obj),
          s(:restarg, :symbols)),
        s(:begin,
          s(:or_asgn,
            s(:send,
              s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
              s(:lvasgn, :target,
                s(:send,
                  s(:lvar, :target), :to_sym))),
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :each),
            s(:args,
              s(:arg, :sym)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                  s(:lvar, :target)), :[]=,
                s(:lvasgn, :sym,
                  s(:send,
                    s(:lvar, :sym), :to_sym)),
                s(:lvar, :obj)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send, nil, :topalias_defined?,
                      s(:lvar, :sym)), :!),
                  s(:send,
                    s(:lvar, :target), :==,
                    s(:ivar, :@current_default_widget_set))),
                s(:begin,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :target)),
                  s(:send, nil, :replace_topalias,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:if,
                    s(:send,
                      s(:lvar, :obj), :kind_of?,
                      s(:const, nil, :String)), nil,
                    s(:send, nil, :replace_topobj,
                      s(:lvar, :sym),
                      s(:lvar, :obj)))), nil))))),
      s(:def, :regist_sym_for_loaded_file,
        s(:args,
          s(:arg, :auto),
          s(:arg, :obj),
          s(:arg, :sym)),
        s(:begin,
          s(:send,
            s(:send,
              s(:ivar, :@AUTOLOAD_FILE_SYM_TABLE), :[],
              s(:lvar, :auto)), :[]=,
            s(:lvar, :sym),
            s(:lvar, :obj)),
          s(:lvasgn, :reg,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:lvar, :auto))),
              s(:str, "(\\.rb|\\.so|)$"),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :each_key),
            s(:args,
              s(:arg, :set)),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                    s(:lvar, :set)), :[],
                  s(:lvar, :sym)), :=~,
                s(:lvar, :reg)),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                    s(:lvar, :set)), :[]=,
                  s(:lvar, :sym),
                  s(:lvar, :obj)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
                        s(:lvar, :sym)), :nil?),
                    s(:send,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
                        s(:lvar, :sym)), :==,
                      s(:lvar, :set))),
                  s(:begin,
                    s(:send, nil, :replace_topalias,
                      s(:lvar, :sym),
                      s(:lvar, :obj)),
                    s(:if,
                      s(:send,
                        s(:lvar, :set), :==,
                        s(:ivar, :@current_default_widget_set)),
                      s(:send, nil, :replace_topobj,
                        s(:lvar, :sym),
                        s(:lvar, :obj)), nil)), nil)), nil)),
          s(:if,
            s(:and,
              s(:begin,
                s(:lvasgn, :f,
                  s(:send,
                    s(:const, nil, :Object), :autoload?,
                    s(:lvar, :sym)))),
              s(:send,
                s(:lvar, :f), :=~,
                s(:lvar, :reg))),
            s(:send, nil, :replace_topobj,
              s(:lvar, :sym),
              s(:lvar, :obj)), nil),
          s(:if,
            s(:and,
              s(:begin,
                s(:lvasgn, :f,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :autoload?,
                    s(:lvar, :sym)))),
              s(:send,
                s(:lvar, :f), :=~,
                s(:lvar, :reg))),
            s(:send, nil, :replace_topalias,
              s(:lvar, :sym),
              s(:lvar, :obj)), nil))),
      s(:send, nil, :private,
        s(:sym, :regist_sym_for_loaded_file)),
      s(:def, :set_topalias,
        s(:args,
          s(:arg, :target),
          s(:arg, :obj),
          s(:arg, :sym)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :target), :==,
              s(:ivar, :@current_default_widget_set)),
            s(:case,
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
                s(:lvar, :sym)),
              s(:when,
                s(:false),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                      s(:lvar, :target)), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topalias,
                    s(:lvar, :sym),
                    s(:lvar, :obj)))),
              s(:when,
                s(:lvar, :target),
                s(:if,
                  s(:lvasgn, :current_obj,
                    s(:send, nil, :topobj_defined?,
                      s(:lvar, :sym))),
                  s(:if,
                    s(:send,
                      s(:lvar, :current_obj), :==,
                      s(:lvar, :obj)),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                          s(:lvar, :target)), :[]=,
                        s(:lvar, :sym),
                        s(:lvar, :obj)),
                      s(:send, nil, :replace_topalias,
                        s(:lvar, :sym),
                        s(:lvar, :obj))),
                    s(:if,
                      s(:send,
                        s(:lvar, :current_obj), :==,
                        s(:send, nil, :topalias_defined?,
                          s(:lvar, :sym))),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                            s(:lvar, :target)), :[]=,
                          s(:lvar, :sym),
                          s(:lvar, :obj)),
                        s(:send, nil, :replace_topalias,
                          s(:lvar, :sym),
                          s(:lvar, :obj)),
                        s(:send, nil, :replace_topobj,
                          s(:lvar, :sym),
                          s(:lvar, :obj))),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                          s(:lvar, :sym),
                          s(:false)),
                        s(:send,
                          s(:send,
                            s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                            s(:lvar, :target)), :[]=,
                          s(:lvar, :sym),
                          s(:lvar, :obj)),
                        s(:send, nil, :replace_topalias,
                          s(:lvar, :sym),
                          s(:lvar, :obj))))),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                        s(:lvar, :target)), :[]=,
                      s(:lvar, :sym),
                      s(:lvar, :obj)),
                    s(:send, nil, :replace_topalias,
                      s(:lvar, :sym),
                      s(:lvar, :obj)),
                    s(:send, nil, :define_topobj,
                      s(:lvar, :sym),
                      s(:lvar, :obj))))),
              s(:when,
                s(:nil),
                s(:begin,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :target)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                      s(:lvar, :target)), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topalias,
                    s(:lvar, :sym),
                    s(:lvar, :obj)))),
              s(:begin,
                s(:send,
                  s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                  s(:lvar, :sym),
                  s(:lvar, :target)),
                s(:send,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                    s(:lvar, :target)), :[]=,
                  s(:lvar, :sym),
                  s(:lvar, :obj)),
                s(:send, nil, :replace_topalias,
                  s(:lvar, :sym),
                  s(:lvar, :obj)),
                s(:send, nil, :replace_topobj,
                  s(:lvar, :sym),
                  s(:lvar, :obj)))),
            s(:case,
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
                s(:lvar, :sym)),
              s(:when,
                s(:false),
                s(:if,
                  s(:send, nil, :topalias_defined?,
                    s(:lvar, :sym)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                      s(:lvar, :target)), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                        s(:lvar, :target)), :[]=,
                      s(:lvar, :sym),
                      s(:lvar, :obj)),
                    s(:send, nil, :define_topalias,
                      s(:lvar, :sym),
                      s(:lvar, :obj))))),
              s(:when,
                s(:lvar, :target),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                      s(:lvar, :target)), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topalias,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topobj,
                    s(:lvar, :sym),
                    s(:lvar, :obj)))),
              s(:when,
                s(:nil),
                s(:begin,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :target)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                      s(:lvar, :target)), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topalias,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topobj,
                    s(:lvar, :sym),
                    s(:lvar, :obj)))),
              s(:send,
                s(:send,
                  s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                  s(:lvar, :target)), :[]=,
                s(:lvar, :sym),
                s(:lvar, :obj)))),
          s(:lvar, :sym))),
      s(:send, nil, :private,
        s(:sym, :set_topalias)),
      s(:def, :__set_toplevel_aliases__,
        s(:args,
          s(:arg, :target),
          s(:arg, :obj),
          s(:restarg, :symbols)),
        s(:begin,
          s(:lvasgn, :target,
            s(:send,
              s(:lvar, :target), :to_sym)),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :each),
            s(:args,
              s(:arg, :sym)),
            s(:send, nil, :set_topalias,
              s(:lvar, :target),
              s(:lvar, :obj),
              s(:send,
                s(:lvar, :sym), :to_sym))))),
      s(:def, :__set_loaded_toplevel_aliases__,
        s(:args,
          s(:arg, :autopath),
          s(:arg, :target),
          s(:arg, :obj),
          s(:restarg, :symbols)),
        s(:begin,
          s(:lvasgn, :shortpath,
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :autopath), :=~,
                  s(:regexp,
                    s(:str, "^(.*)(.rb|.so)$"),
                    s(:regopt)))),
              s(:nth_ref, 1),
              s(:lvar, :autopath))),
          s(:lvasgn, :target,
            s(:send,
              s(:lvar, :target), :to_sym)),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :map!),
            s(:args,
              s(:arg, :sym)),
            s(:send,
              s(:lvar, :sym), :to_sym)),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :each),
            s(:args,
              s(:arg, :sym)),
            s(:send, nil, :regist_sym_for_loaded_file,
              s(:lvar, :shortpath),
              s(:lvar, :obj),
              s(:lvar, :sym))),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :each),
            s(:args,
              s(:arg, :sym)),
            s(:send, nil, :set_topalias,
              s(:lvar, :target),
              s(:lvar, :obj),
              s(:lvar, :sym))))),
      s(:def, :backup_current_topdef,
        s(:args,
          s(:arg, :sym)),
        s(:begin,
          s(:if,
            s(:send,
              s(:begin,
                s(:lvasgn, :current,
                  s(:ivar, :@current_default_widget_set))), :nil?),
            s(:return), nil),
          s(:case,
            s(:send,
              s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
              s(:lvar, :sym)),
            s(:when,
              s(:false),
              s(:if,
                s(:and,
                  s(:begin,
                    s(:lvasgn, :cur_alias,
                      s(:send, nil, :topalias_defined?,
                        s(:lvar, :sym)))),
                  s(:send,
                    s(:send,
                      s(:lvar, :cur_alias), :kind_of?,
                      s(:const, nil, :String)), :!)),
                s(:send,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                    s(:lvar, :current)), :[]=,
                  s(:lvar, :sym),
                  s(:lvar, :cur_alias)), nil)),
            s(:when,
              s(:lvar, :current),
              s(:if,
                s(:lvasgn, :cur_obj,
                  s(:send, nil, :topobj_defined?,
                    s(:lvar, :sym))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :cur_obj), :kind_of?,
                        s(:const, nil, :String)), :!),
                    s(:begin,
                      s(:lvasgn, :cur_alias,
                        s(:send, nil, :topalias_defined?,
                          s(:lvar, :sym))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :cur_alias), :kind_of?,
                      s(:const, nil, :String)),
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                      s(:lvar, :sym),
                      s(:false)),
                    s(:if,
                      s(:send,
                        s(:lvar, :cur_obj), :==,
                        s(:lvar, :cur_alias)),
                      s(:send,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                          s(:lvar, :current)), :[]=,
                        s(:lvar, :sym),
                        s(:lvar, :cur_alias)),
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                        s(:lvar, :sym),
                        s(:false)))), nil),
                s(:send,
                  s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                  s(:lvar, :sym),
                  s(:false)))),
            s(:when,
              s(:nil),
              s(:if,
                s(:and,
                  s(:begin,
                    s(:lvasgn, :cur_alias,
                      s(:send, nil, :topalias_defined?,
                        s(:lvar, :sym)))),
                  s(:send,
                    s(:send,
                      s(:lvar, :cur_alias), :kind_of?,
                      s(:const, nil, :String)), :!)),
                s(:send,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                    s(:lvar, :current)), :[]=,
                  s(:lvar, :sym),
                  s(:lvar, :cur_alias)), nil)), nil))),
      s(:send, nil, :private,
        s(:sym, :backup_current_topdef)),
      s(:def, :_replace_toplevel_aliases,
        s(:args,
          s(:arg, :target)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                s(:lvar, :target)), :each_key),
            s(:args,
              s(:arg, :sym)),
            s(:send, nil, :backup_current_topdef,
              s(:lvar, :sym))),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                s(:lvar, :target)), :each_key),
            s(:args,
              s(:arg, :sym)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :obj,
                      s(:send,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                          s(:lvar, :target)), :[],
                        s(:lvar, :sym)))), :nil?),
                s(:next), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
                    s(:lvar, :sym)), :==,
                  s(:false)),
                s(:send, nil, :replace_topalias,
                  s(:lvar, :sym),
                  s(:lvar, :obj)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                    s(:lvar, :sym),
                    s(:lvar, :target)),
                  s(:send, nil, :replace_topalias,
                    s(:lvar, :sym),
                    s(:lvar, :obj)),
                  s(:send, nil, :replace_topobj,
                    s(:lvar, :sym),
                    s(:lvar, :obj)))))),
          s(:ivasgn, :@current_default_widget_set,
            s(:lvar, :target)))),
      s(:send, nil, :private,
        s(:sym, :_replace_toplevel_aliases)),
      s(:def, :__import_toplevel_aliases__,
        s(:args,
          s(:arg, :target),
          s(:restarg, :symbols)),
        s(:begin,
          s(:lvasgn, :current,
            s(:ivar, :@current_default_widget_set)),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :each),
            s(:args,
              s(:arg, :sym)),
            s(:begin,
              s(:lvasgn, :sym,
                s(:send,
                  s(:lvar, :sym), :to_sym)),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :obj,
                      s(:send,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                          s(:lvar, :target)), :[],
                        s(:lvar, :sym)))), :nil?),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                      s(:lvar, :current)), :delete,
                    s(:lvar, :sym)),
                  s(:send,
                    s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :delete,
                    s(:lvar, :sym)),
                  s(:if,
                    s(:send, nil, :topalias_defined?,
                      s(:lvar, :sym)),
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :module_eval),
                      s(:args),
                      s(:send, nil, :remove_const,
                        s(:lvar, :sym))), nil),
                  s(:if,
                    s(:send, nil, :topobj_defined?,
                      s(:lvar, :sym)),
                    s(:block,
                      s(:send,
                        s(:const, nil, :Object), :class_eval),
                      s(:args),
                      s(:send, nil, :remove_const,
                        s(:lvar, :sym))), nil)),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :==,
                    s(:false)),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                        s(:lvar, :current)), :delete,
                      s(:lvar, :sym)),
                    s(:send,
                      s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                      s(:lvar, :sym),
                      s(:false)),
                    s(:if,
                      s(:send, nil, :topalias_defined?,
                        s(:lvar, :sym)),
                      s(:block,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :module_eval),
                        s(:args),
                        s(:send, nil, :remove_const,
                          s(:lvar, :sym))), nil)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[],
                        s(:lvar, :sym)), :==,
                      s(:false)),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                          s(:lvar, :current)), :[]=,
                        s(:lvar, :sym),
                        s(:lvar, :obj)),
                      s(:send, nil, :replace_topalias,
                        s(:lvar, :sym),
                        s(:lvar, :obj))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
                        s(:lvar, :sym),
                        s(:lvar, :current)),
                      s(:send,
                        s(:send,
                          s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                          s(:lvar, :current)), :[]=,
                        s(:lvar, :sym),
                        s(:lvar, :obj)),
                      s(:send, nil, :replace_topalias,
                        s(:lvar, :sym),
                        s(:lvar, :obj)),
                      s(:send, nil, :replace_topobj,
                        s(:lvar, :sym),
                        s(:lvar, :obj)))))))))),
      s(:def, :__remove_toplevel_aliases__,
        s(:args,
          s(:restarg, :symbols)),
        s(:begin,
          s(:lvasgn, :current,
            s(:ivar, :@current_default_widget_set)),
          s(:block,
            s(:send,
              s(:lvar, :symbols), :each),
            s(:args,
              s(:arg, :sym)),
            s(:begin,
              s(:lvasgn, :sym,
                s(:send,
                  s(:lvar, :sym), :to_sym)),
              s(:send,
                s(:send,
                  s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                  s(:lvar, :current)), :delete,
                s(:lvar, :sym)),
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :delete,
                s(:lvar, :sym)),
              s(:if,
                s(:send, nil, :topalias_defined?,
                  s(:lvar, :sym)),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :module_eval),
                  s(:args),
                  s(:send, nil, :remove_const,
                    s(:lvar, :sym))), nil),
              s(:if,
                s(:send, nil, :topobj_defined?,
                  s(:lvar, :sym)),
                s(:block,
                  s(:send,
                    s(:const, nil, :Object), :class_eval),
                  s(:args),
                  s(:send, nil, :remove_const,
                    s(:lvar, :sym))), nil))))),
      s(:def, :__reset_toplevel_owner__,
        s(:args,
          s(:restarg, :symbols)),
        s(:block,
          s(:send,
            s(:lvar, :symbols), :each),
          s(:args,
            s(:arg, :sym)),
          s(:send,
            s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :delete,
            s(:send,
              s(:lvar, :sym), :to_sym)))),
      s(:def, :__disable_toplevel_control__,
        s(:args,
          s(:restarg, :symbols)),
        s(:block,
          s(:send,
            s(:lvar, :symbols), :each),
          s(:args,
            s(:arg, :sym)),
          s(:send,
            s(:ivar, :@TOPLEVEL_ALIAS_OWNER), :[]=,
            s(:send,
              s(:lvar, :sym), :to_sym),
            s(:false)))),
      s(:def, :__create_widget_set__,
        s(:args,
          s(:arg, :new_set),
          s(:optarg, :src_set,
            s(:hash))),
        s(:begin,
          s(:lvasgn, :new_set,
            s(:send,
              s(:lvar, :new_set), :to_sym)),
          s(:if,
            s(:send,
              s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
              s(:lvar, :new_set)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:dstr,
                s(:str, "A widget-set "),
                s(:begin,
                  s(:send,
                    s(:lvar, :new_set), :inspect)),
                s(:str, " is already exist."))), nil),
          s(:if,
            s(:send,
              s(:lvar, :src_set), :kind_of?,
              s(:const, nil, :Symbol)),
            s(:send,
              s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[]=,
              s(:lvar, :new_set),
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[],
                s(:lvar, :src_set))),
            s(:begin,
              s(:send,
                s(:ivar, :@TOPLEVEL_ALIAS_TABLE), :[]=,
                s(:lvar, :new_set),
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :src_set), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :obj)),
                s(:send, nil, :set_topalias,
                  s(:lvar, :new_set),
                  s(:lvar, :obj),
                  s(:send,
                    s(:lvar, :sym), :to_sym))))))))),
  s(:send,
    s(:const, nil, :Tk), :default_widget_set=,
    s(:sym, :Tk)),
  s(:send,
    s(:const, nil, :Object), :autoload,
    s(:sym, :Ttk),
    s(:str, "tkextlib/tile")),
  s(:send,
    s(:const, nil, :Tk), :autoload,
    s(:sym, :Tile),
    s(:str, "tkextlib/tile")),
  s(:send, nil, :require,
    s(:str, "tk/ttk_selector")))
