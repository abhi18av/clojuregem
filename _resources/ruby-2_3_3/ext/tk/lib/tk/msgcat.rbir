s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:class,
    s(:const, nil, :TkMsgCatalog),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkCore)),
      s(:send, nil, :extend,
        s(:const, nil, :Tk)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::msgcat::mc"), :freeze),
            s(:send,
              s(:str, "::msgcat::mcmax"), :freeze),
            s(:send,
              s(:str, "::msgcat::mclocale"), :freeze),
            s(:send,
              s(:str, "::msgcat::mcpreferences"), :freeze),
            s(:send,
              s(:str, "::msgcat::mcload"), :freeze),
            s(:send,
              s(:str, "::msgcat::mcset"), :freeze),
            s(:send,
              s(:str, "::msgcat::mcmset"), :freeze),
            s(:send,
              s(:str, "::msgcat::mcunknown"), :freeze)), :freeze)),
      s(:send, nil, :tk_call_without_enc,
        s(:str, "package"),
        s(:str, "require"),
        s(:str, "Tcl"),
        s(:str, "8.2")),
      s(:casgn, nil, :PACKAGE_NAME,
        s(:send,
          s(:str, "msgcat"), :freeze)),
      s(:defs,
        s(:self), :package_name,
        s(:args),
        s(:const, nil, :PACKAGE_NAME)),
      s(:if,
        s(:send,
          s(:self), :const_defined?,
          s(:sym, :FORCE_VERSION)),
        s(:send, nil, :tk_call_without_enc,
          s(:str, "package"),
          s(:str, "require"),
          s(:str, "msgcat"),
          s(:const, nil, :FORCE_VERSION)),
        s(:send, nil, :tk_call_without_enc,
          s(:str, "package"),
          s(:str, "require"),
          s(:str, "msgcat"))),
      s(:casgn, nil, :MSGCAT_EXT,
        s(:str, ".msg")),
      s(:casgn, nil, :UNKNOWN_CBTBL,
        s(:send,
          s(:const, nil, :TkUtil), :untrust,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :hash),
              s(:arg, :key)),
            s(:send,
              s(:lvar, :hash), :[]=,
              s(:lvar, :key),
              s(:hash))))),
      s(:send,
        s(:const,
          s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
        s(:str, "::msgcat::mcunknown"),
        s(:str, "args"),
        s(:dstr,
          s(:str, "    if {[set st [catch {eval {ruby_cmd TkMsgCatalog callback} [namespace current] $args} ret]] != 0} {\n"),
          s(:str, "       #return -code $st $ret\n"),
          s(:str, "       set idx [string first \"\\n\\n\" $ret]\n"),
          s(:str, "       if {$idx > 0} {\n"),
          s(:str, "          return -code $st \\\n"),
          s(:str, "                 -errorinfo [string range $ret [expr $idx + 2] \\\n"),
          s(:str, "                                               [string length $ret]] \\\n"),
          s(:str, "                 [string range $ret 0 [expr $idx - 1]]\n"),
          s(:str, "       } else {\n"),
          s(:str, "          return -code $st $ret\n"),
          s(:str, "       }\n"),
          s(:str, "    } else {\n"),
          s(:str, "        return $ret\n"),
          s(:str, "    }\n"))),
      s(:defs,
        s(:self), :callback,
        s(:args,
          s(:arg, :namespace),
          s(:arg, :locale),
          s(:arg, :src_str),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?), nil,
            s(:lvasgn, :src_str,
              s(:send, nil, :sprintf,
                s(:lvar, :src_str),
                s(:splat,
                  s(:lvar, :args))))),
          s(:lvasgn, :cmd_tbl,
            s(:send,
              s(:const,
                s(:const, nil, :TkMsgCatalog), :UNKNOWN_CBTBL), :[],
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :__getip))),
          s(:lvasgn, :cmd,
            s(:send,
              s(:lvar, :cmd_tbl), :[],
              s(:lvar, :namespace))),
          s(:if,
            s(:lvar, :cmd), nil,
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :cmd_tbl), :[],
                s(:str, "::")))),
          s(:if,
            s(:lvar, :cmd), nil,
            s(:return,
              s(:lvar, :src_str))),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :cmd), :call,
                s(:lvar, :locale),
                s(:lvar, :src_str)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemExit)), nil,
                s(:send, nil, :exit,
                  s(:int, 0))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Interrupt)), nil,
                s(:send, nil, :exit!,
                  s(:int, 1))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)),
                s(:lvasgn, :e),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :msg,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send, nil, :_toUTF8,
                                        s(:send,
                                          s(:send,
                                            s(:lvar, :e), :class), :inspect)), :+,
                                      s(:str, ": ")), :+,
                                    s(:send, nil, :_toUTF8,
                                      s(:send,
                                        s(:lvar, :e), :message))), :+,
                                  s(:str, "\n")), :+,
                                s(:str, "\n---< backtrace of Ruby side >-----\n")), :+,
                              s(:send, nil, :_toUTF8,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :e), :backtrace), :join,
                                  s(:str, "\n")))), :+,
                            s(:str, "\n---< backtrace of Tk side >-------"))),
                        s(:if,
                          s(:const,
                            s(:const, nil, :TkCore), :WITH_ENCODING),
                          s(:send,
                            s(:lvar, :msg), :force_encoding,
                            s(:str, "utf-8")),
                          s(:send,
                            s(:lvar, :msg), :instance_variable_set,
                            s(:sym, :@encoding),
                            s(:str, "utf-8")))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Exception)), nil,
                        s(:lvasgn, :msg,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :e), :class), :inspect), :+,
                                      s(:str, ": ")), :+,
                                    s(:send,
                                      s(:lvar, :e), :message)), :+,
                                  s(:str, "\n")), :+,
                                s(:str, "\n---< backtrace of Ruby side >-----\n")), :+,
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :backtrace), :join,
                                s(:str, "\n"))), :+,
                            s(:str, "\n---< backtrace of Tk side >-------")))), nil)),
                  s(:send, nil, :fail,
                    s(:lvar, :e),
                    s(:lvar, :msg)))), nil)))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :namespace,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :namespace), :kind_of?,
              s(:const, nil, :TkNamespace)),
            s(:ivasgn, :@namespace,
              s(:lvar, :namespace)),
            s(:if,
              s(:send,
                s(:lvar, :namespace), :==,
                s(:nil)),
              s(:ivasgn, :@namespace,
                s(:send,
                  s(:const, nil, :TkNamespace), :new,
                  s(:str, "::"))),
              s(:ivasgn, :@namespace,
                s(:send,
                  s(:const, nil, :TkNamespace), :new,
                  s(:lvar, :namespace))))),
          s(:ivasgn, :@path,
            s(:send,
              s(:ivar, :@namespace), :path)),
          s(:ivasgn, :@msgcat_ext,
            s(:str, ".msg")))),
      s(:send, nil, :attr_accessor,
        s(:sym, :msgcat_ext)),
      s(:def, :method_missing,
        s(:args,
          s(:arg, :id),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :loc,
            s(:send,
              s(:lvar, :id), :id2name)),
          s(:case,
            s(:send,
              s(:lvar, :args), :length),
            s(:when,
              s(:int, 0),
              s(:send,
                s(:self), :locale=,
                s(:begin,
                  s(:lvar, :loc)))),
            s(:when,
              s(:int, 1),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0)), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:self), :set_translation_list,
                  s(:lvar, :loc),
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0))),
                s(:send,
                  s(:self), :set_translation,
                  s(:lvar, :loc),
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0))))),
            s(:when,
              s(:int, 2),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0)), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:self), :set_translation_list,
                  s(:lvar, :loc),
                  s(:splat,
                    s(:lvar, :args))),
                s(:send,
                  s(:self), :set_translation,
                  s(:lvar, :loc),
                  s(:splat,
                    s(:lvar, :args))))),
            s(:when,
              s(:int, 3),
              s(:send,
                s(:self), :set_translation,
                s(:lvar, :loc),
                s(:splat,
                  s(:lvar, :args)))),
            s(:super,
              s(:lvar, :id),
              s(:splat,
                s(:lvar, :args)))))),
      s(:defs,
        s(:self), :translate,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :dst,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect),
              s(:args,
                s(:arg, :src)),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "::msgcat::mc"),
                s(:send, nil, :_get_eval_string,
                  s(:lvar, :src),
                  s(:true))))),
          s(:send,
            s(:const, nil, :Tk), :UTF8_String,
            s(:send, nil, :sprintf,
              s(:splat,
                s(:lvar, :dst)))))),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:alias,
            s(:sym, :mc),
            s(:sym, :translate)),
          s(:alias,
            s(:sym, :[]),
            s(:sym, :translate)))),
      s(:def, :translate,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :dst,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect),
              s(:args,
                s(:arg, :src)),
              s(:block,
                s(:send,
                  s(:ivar, :@namespace), :eval),
                s(:args),
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "::msgcat::mc"),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :src),
                    s(:true)))))),
          s(:send,
            s(:const, nil, :Tk), :UTF8_String,
            s(:send, nil, :sprintf,
              s(:splat,
                s(:lvar, :dst)))))),
      s(:alias,
        s(:sym, :mc),
        s(:sym, :translate)),
      s(:alias,
        s(:sym, :[]),
        s(:sym, :translate)),
      s(:defs,
        s(:self), :maxlen,
        s(:args,
          s(:restarg, :src_strings)),
        s(:send,
          s(:send, nil, :tk_call,
            s(:str, "::msgcat::mcmax"),
            s(:splat,
              s(:lvar, :src_strings))), :to_i)),
      s(:def, :maxlen,
        s(:args,
          s(:restarg, :src_strings)),
        s(:block,
          s(:send,
            s(:ivar, :@namespace), :eval),
          s(:args),
          s(:send,
            s(:send, nil, :tk_call,
              s(:str, "::msgcat::mcmax"),
              s(:splat,
                s(:lvar, :src_strings))), :to_i))),
      s(:defs,
        s(:self), :locale,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "::msgcat::mclocale"))),
      s(:def, :locale,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@namespace), :eval),
          s(:args),
          s(:send, nil, :tk_call,
            s(:str, "::msgcat::mclocale")))),
      s(:defs,
        s(:self), :locale=,
        s(:args,
          s(:arg, :locale)),
        s(:send, nil, :tk_call,
          s(:str, "::msgcat::mclocale"),
          s(:lvar, :locale))),
      s(:def, :locale=,
        s(:args,
          s(:arg, :locale)),
        s(:block,
          s(:send,
            s(:ivar, :@namespace), :eval),
          s(:args),
          s(:send, nil, :tk_call,
            s(:str, "::msgcat::mclocale"),
            s(:lvar, :locale)))),
      s(:defs,
        s(:self), :preferences,
        s(:args),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :tk_call,
            s(:str, "::msgcat::mcpreferences")))),
      s(:def, :preferences,
        s(:args),
        s(:send, nil, :tk_split_simplelist,
          s(:block,
            s(:send,
              s(:ivar, :@namespace), :eval),
            s(:args),
            s(:send, nil, :tk_call,
              s(:str, "::msgcat::mcpreferences"))))),
      s(:defs,
        s(:self), :load_tk,
        s(:args,
          s(:arg, :dir)),
        s(:send, nil, :number,
          s(:send, nil, :tk_call,
            s(:str, "::msgcat::mcload"),
            s(:lvar, :dir)))),
      s(:defs,
        s(:self), :load_rb,
        s(:args,
          s(:arg, :dir)),
        s(:begin,
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send, nil, :preferences), :each),
            s(:args,
              s(:arg, :loc)),
            s(:begin,
              s(:lvasgn, :file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:send,
                    s(:lvar, :loc), :+,
                    s(:const,
                      s(:self), :MSGCAT_EXT)))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :readable?,
                  s(:lvar, :file)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :count), :+,
                    s(:int, 1)),
                  s(:if,
                    s(:const,
                      s(:const, nil, :TkCore), :WITH_ENCODING),
                    s(:send, nil, :eval,
                      s(:send,
                        s(:const, nil, :IO), :read,
                        s(:lvar, :file),
                        s(:hash,
                          s(:pair,
                            s(:sym, :encoding),
                            s(:str, "ASCII-8BIT"))))),
                    s(:send, nil, :eval,
                      s(:send,
                        s(:const, nil, :IO), :read,
                        s(:lvar, :file))))), nil))),
          s(:lvar, :count))),
      s(:def, :load_tk,
        s(:args,
          s(:arg, :dir)),
        s(:send, nil, :number,
          s(:block,
            s(:send,
              s(:ivar, :@namespace), :eval),
            s(:args),
            s(:send, nil, :tk_call,
              s(:str, "::msgcat::mcload"),
              s(:lvar, :dir))))),
      s(:def, :load_rb,
        s(:args,
          s(:arg, :dir)),
        s(:begin,
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send, nil, :preferences), :each),
            s(:args,
              s(:arg, :loc)),
            s(:begin,
              s(:lvasgn, :file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:send,
                    s(:lvar, :loc), :+,
                    s(:ivar, :@msgcat_ext)))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :readable?,
                  s(:lvar, :file)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :count), :+,
                    s(:int, 1)),
                  s(:if,
                    s(:const,
                      s(:const, nil, :TkCore), :WITH_ENCODING),
                    s(:send,
                      s(:ivar, :@namespace), :eval,
                      s(:send,
                        s(:const, nil, :IO), :read,
                        s(:lvar, :file),
                        s(:hash,
                          s(:pair,
                            s(:sym, :encoding),
                            s(:str, "ASCII-8BIT"))))),
                    s(:send,
                      s(:ivar, :@namespace), :eval,
                      s(:send,
                        s(:const, nil, :IO), :read,
                        s(:lvar, :file))))), nil))),
          s(:lvar, :count))),
      s(:defs,
        s(:self), :load,
        s(:args,
          s(:arg, :dir)),
        s(:send,
          s(:self), :load_rb,
          s(:lvar, :dir))),
      s(:alias,
        s(:sym, :load),
        s(:sym, :load_rb)),
      s(:defs,
        s(:self), :set_translation,
        s(:args,
          s(:arg, :locale),
          s(:arg, :src_str),
          s(:optarg, :trans_str,
            s(:const, nil, :None)),
          s(:optarg, :enc,
            s(:str, "utf-8"))),
        s(:if,
          s(:and,
            s(:lvar, :trans_str),
            s(:send,
              s(:lvar, :trans_str), :!=,
              s(:const, nil, :None))),
          s(:begin,
            s(:lvasgn, :trans_str,
              s(:send,
                s(:const, nil, :Tk), :UTF8_String,
                s(:send, nil, :_toUTF8,
                  s(:lvar, :trans_str),
                  s(:lvar, :enc)))),
            s(:send,
              s(:const, nil, :Tk), :UTF8_String,
              s(:send, nil, :ip_eval_without_enc,
                s(:dstr,
                  s(:str, "::msgcat::mcset {"),
                  s(:begin,
                    s(:lvar, :locale)),
                  s(:str, "} {"),
                  s(:begin,
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :src_str),
                      s(:true))),
                  s(:str, "} {"),
                  s(:begin,
                    s(:lvar, :trans_str)),
                  s(:str, "}"))))),
          s(:send,
            s(:const, nil, :Tk), :UTF8_String,
            s(:send, nil, :ip_eval_without_enc,
              s(:dstr,
                s(:str, "::msgcat::mcset {"),
                s(:begin,
                  s(:lvar, :locale)),
                s(:str, "} {"),
                s(:begin,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :src_str),
                    s(:true))),
                s(:str, "}")))))),
      s(:def, :set_translation,
        s(:args,
          s(:arg, :locale),
          s(:arg, :src_str),
          s(:optarg, :trans_str,
            s(:const, nil, :None)),
          s(:optarg, :enc,
            s(:str, "utf-8"))),
        s(:if,
          s(:and,
            s(:lvar, :trans_str),
            s(:send,
              s(:lvar, :trans_str), :!=,
              s(:const, nil, :None))),
          s(:begin,
            s(:lvasgn, :trans_str,
              s(:send,
                s(:const, nil, :Tk), :UTF8_String,
                s(:send, nil, :_toUTF8,
                  s(:lvar, :trans_str),
                  s(:lvar, :enc)))),
            s(:send,
              s(:const, nil, :Tk), :UTF8_String,
              s(:block,
                s(:send,
                  s(:ivar, :@namespace), :eval),
                s(:args),
                s(:send, nil, :ip_eval_without_enc,
                  s(:dstr,
                    s(:str, "::msgcat::mcset {"),
                    s(:begin,
                      s(:lvar, :locale)),
                    s(:str, "} {"),
                    s(:begin,
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :src_str),
                        s(:true))),
                    s(:str, "} {"),
                    s(:begin,
                      s(:lvar, :trans_str)),
                    s(:str, "}")))))),
          s(:send,
            s(:const, nil, :Tk), :UTF8_String,
            s(:block,
              s(:send,
                s(:ivar, :@namespace), :eval),
              s(:args),
              s(:send, nil, :ip_eval_without_enc,
                s(:dstr,
                  s(:str, "::msgcat::mcset {"),
                  s(:begin,
                    s(:lvar, :locale)),
                  s(:str, "} {"),
                  s(:begin,
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :src_str),
                      s(:true))),
                  s(:str, "}"))))))),
      s(:defs,
        s(:self), :set_translation_list,
        s(:args,
          s(:arg, :locale),
          s(:arg, :trans_list),
          s(:optarg, :enc,
            s(:str, "utf-8"))),
        s(:begin,
          s(:lvasgn, :list,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :trans_list), :each),
            s(:args,
              s(:arg, :src),
              s(:arg, :trans)),
            s(:if,
              s(:and,
                s(:lvar, :trans),
                s(:send,
                  s(:lvar, :trans), :!=,
                  s(:const, nil, :None))),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :src),
                    s(:true))),
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send,
                    s(:const, nil, :Tk), :UTF8_String,
                    s(:send, nil, :_toUTF8,
                      s(:lvar, :trans),
                      s(:lvar, :enc))))),
              s(:send,
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :src),
                    s(:true))), :<<,
                s(:str, "")))),
          s(:send, nil, :number,
            s(:send, nil, :ip_eval_without_enc,
              s(:dstr,
                s(:str, "::msgcat::mcmset {"),
                s(:begin,
                  s(:lvar, :locale)),
                s(:str, "} {"),
                s(:begin,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :list))),
                s(:str, "}")))))),
      s(:def, :set_translation_list,
        s(:args,
          s(:arg, :locale),
          s(:arg, :trans_list),
          s(:optarg, :enc,
            s(:str, "utf-8"))),
        s(:begin,
          s(:lvasgn, :list,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :trans_list), :each),
            s(:args,
              s(:arg, :src),
              s(:arg, :trans)),
            s(:if,
              s(:and,
                s(:lvar, :trans),
                s(:send,
                  s(:lvar, :trans), :!=,
                  s(:const, nil, :None))),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :src),
                    s(:true))),
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send,
                    s(:const, nil, :Tk), :UTF8_String,
                    s(:send, nil, :_toUTF8,
                      s(:lvar, :trans),
                      s(:lvar, :enc))))),
              s(:send,
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :src),
                    s(:true))), :<<,
                s(:str, "")))),
          s(:send, nil, :number,
            s(:block,
              s(:send,
                s(:ivar, :@namespace), :eval),
              s(:args),
              s(:send, nil, :ip_eval_without_enc,
                s(:dstr,
                  s(:str, "::msgcat::mcmset {"),
                  s(:begin,
                    s(:lvar, :locale)),
                  s(:str, "} {"),
                  s(:begin,
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :list))),
                  s(:str, "}"))))))),
      s(:defs,
        s(:self), :def_unknown_proc,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :TkMsgCatalog), :UNKNOWN_CBTBL), :[],
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :__getip)), :[]=,
          s(:str, "::"),
          s(:lvar, :cmd))),
      s(:def, :def_unknown_proc,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :TkMsgCatalog), :UNKNOWN_CBTBL), :[],
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :__getip)), :[]=,
          s(:send,
            s(:ivar, :@namespace), :path),
          s(:lvar, :cmd))))),
  s(:casgn, nil, :TkMsgCat,
    s(:const, nil, :TkMsgCatalog)))
