s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/canvastag")),
  s(:send, nil, :require,
    s(:str, "tk/itemconfig")),
  s(:send, nil, :require,
    s(:str, "tk/scrollable")),
  s(:module,
    s(:const, nil, :TkCanvasItemConfig),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :__item_strval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:super,
            s(:lvar, :id)), :+,
          s(:array,
            s(:str, "fill"),
            s(:str, "activefill"),
            s(:str, "disabledfill"),
            s(:str, "outline"),
            s(:str, "activeoutline"),
            s(:str, "disabledoutline")))),
      s(:send, nil, :private,
        s(:sym, :__item_strval_optkeys)),
      s(:def, :__item_methodcall_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:hash,
          s(:pair,
            s(:str, "coords"),
            s(:str, "coords")))),
      s(:send, nil, :private,
        s(:sym, :__item_methodcall_optkeys)),
      s(:def, :__item_val2ruby_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:super,
            s(:lvar, :id)), :update,
          s(:hash,
            s(:pair,
              s(:str, "window"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :i),
                  s(:arg, :v)),
                s(:send, nil, :window,
                  s(:lvar, :v)))),
            s(:pair,
              s(:str, "tags"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :i),
                  s(:arg, :v)),
                s(:block,
                  s(:send,
                    s(:send, nil, :simplelist,
                      s(:lvar, :v)), :collect),
                  s(:args,
                    s(:arg, :tag)),
                  s(:send,
                    s(:const, nil, :TkcTag), :id2obj,
                    s(:self),
                    s(:lvar, :tag)))))))),
      s(:send, nil, :private,
        s(:sym, :__item_val2ruby_optkeys)),
      s(:def, :__item_pathname,
        s(:args,
          s(:arg, :tagOrId)),
        s(:if,
          s(:or,
            s(:send,
              s(:lvar, :tagOrId), :kind_of?,
              s(:const, nil, :TkcItem)),
            s(:send,
              s(:lvar, :tagOrId), :kind_of?,
              s(:const, nil, :TkcTag))),
          s(:send,
            s(:send,
              s(:send,
                s(:self), :path), :+,
              s(:str, ";")), :+,
            s(:send,
              s(:send,
                s(:lvar, :tagOrId), :id), :to_s)),
          s(:send,
            s(:send,
              s(:send,
                s(:self), :path), :+,
              s(:str, ";")), :+,
            s(:send,
              s(:lvar, :tagOrId), :to_s)))),
      s(:send, nil, :private,
        s(:sym, :__item_pathname)))),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :Canvas),
    s(:const, nil, :TkWindow),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkCanvasItemConfig)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :Scrollable)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "canvas"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Canvas"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :__destroy_hook__,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :TkcItem), :CItemID_TBL), :delete,
          s(:ivar, :@path))),
      s(:def, :__numval_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "closeenough")))),
      s(:send, nil, :private,
        s(:sym, :__numval_optkeys)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "confine")))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :tagid,
        s(:args,
          s(:arg, :tag)),
        s(:if,
          s(:or,
            s(:send,
              s(:lvar, :tag), :kind_of?,
              s(:const, nil, :TkcItem)),
            s(:send,
              s(:lvar, :tag), :kind_of?,
              s(:const, nil, :TkcTag))),
          s(:send,
            s(:lvar, :tag), :id),
          s(:lvar, :tag))),
      s(:send, nil, :private,
        s(:sym, :tagid)),
      s(:def, :create,
        s(:args,
          s(:arg, :type),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :type), :kind_of?,
                s(:const, nil, :Class)),
              s(:send,
                s(:lvar, :type), :<,
                s(:const, nil, :TkcItem))), nil,
            s(:if,
              s(:send,
                s(:const, nil, :TkcItem), :type2class,
                s(:send,
                  s(:lvar, :type), :to_s)),
              s(:lvasgn, :type,
                s(:send,
                  s(:const, nil, :TkcItem), :type2class,
                  s(:send,
                    s(:lvar, :type), :to_s))),
              s(:send, nil, :fail,
                s(:const, nil, :ArgumentError),
                s(:str, "type must a subclass of TkcItem class, or a string in CItemTypeToClass")))),
          s(:send,
            s(:lvar, :type), :create,
            s(:self),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :addtag,
        s(:args,
          s(:arg, :tag),
          s(:arg, :mode),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :mode,
            s(:send,
              s(:lvar, :mode), :to_s)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)),
              s(:send,
                s(:lvar, :mode), :=~,
                s(:regexp,
                  s(:str, "^(above|below|with(tag)?)$"),
                  s(:regopt)))),
            s(:send,
              s(:lvar, :args), :[]=,
              s(:int, 0),
              s(:send, nil, :tagid,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)))), nil),
          s(:send, nil, :tk_send_without_enc,
            s(:str, "addtag"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:lvar, :mode),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :addtag_above,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :target)),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "above"),
          s(:send, nil, :tagid,
            s(:lvar, :target)))),
      s(:def, :addtag_all,
        s(:args,
          s(:arg, :tagOrId)),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "all"))),
      s(:def, :addtag_below,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :target)),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "below"),
          s(:send, nil, :tagid,
            s(:lvar, :target)))),
      s(:def, :addtag_closest,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :x),
          s(:arg, :y),
          s(:optarg, :halo,
            s(:const, nil, :None)),
          s(:optarg, :start,
            s(:const, nil, :None))),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "closest"),
          s(:lvar, :x),
          s(:lvar, :y),
          s(:lvar, :halo),
          s(:lvar, :start))),
      s(:def, :addtag_enclosed,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :x1),
          s(:arg, :y1),
          s(:arg, :x2),
          s(:arg, :y2)),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "enclosed"),
          s(:lvar, :x1),
          s(:lvar, :y1),
          s(:lvar, :x2),
          s(:lvar, :y2))),
      s(:def, :addtag_overlapping,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :x1),
          s(:arg, :y1),
          s(:arg, :x2),
          s(:arg, :y2)),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "overlapping"),
          s(:lvar, :x1),
          s(:lvar, :y1),
          s(:lvar, :x2),
          s(:lvar, :y2))),
      s(:def, :addtag_withtag,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :tag)),
        s(:send, nil, :addtag,
          s(:lvar, :tagOrId),
          s(:str, "withtag"),
          s(:send, nil, :tagid,
            s(:lvar, :tag)))),
      s(:def, :bbox,
        s(:args,
          s(:arg, :tagOrId),
          s(:restarg, :tags)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "bbox"),
            s(:send, nil, :tagid,
              s(:lvar, :tagOrId)),
            s(:splat,
              s(:block,
                s(:send,
                  s(:lvar, :tags), :collect),
                s(:args,
                  s(:arg, :t)),
                s(:send, nil, :tagid,
                  s(:lvar, :t))))))),
      s(:def, :itembind,
        s(:args,
          s(:arg, :tag),
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind,
            s(:array,
              s(:send, nil, :path),
              s(:str, "bind"),
              s(:send, nil, :tagid,
                s(:lvar, :tag))),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :itembind_append,
        s(:args,
          s(:arg, :tag),
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind_append,
            s(:array,
              s(:send, nil, :path),
              s(:str, "bind"),
              s(:send, nil, :tagid,
                s(:lvar, :tag))),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :itembind_remove,
        s(:args,
          s(:arg, :tag),
          s(:arg, :context)),
        s(:begin,
          s(:send, nil, :_bind_remove,
            s(:array,
              s(:send, nil, :path),
              s(:str, "bind"),
              s(:send, nil, :tagid,
                s(:lvar, :tag))),
            s(:lvar, :context)),
          s(:self))),
      s(:def, :itembindinfo,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :context,
            s(:nil))),
        s(:send, nil, :_bindinfo,
          s(:array,
            s(:send, nil, :path),
            s(:str, "bind"),
            s(:send, nil, :tagid,
              s(:lvar, :tag))),
          s(:lvar, :context))),
      s(:def, :canvasx,
        s(:args,
          s(:arg, :screen_x),
          s(:restarg, :args)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "canvasx"),
            s(:lvar, :screen_x),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :canvasy,
        s(:args,
          s(:arg, :screen_y),
          s(:restarg, :args)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "canvasy"),
            s(:lvar, :screen_y),
            s(:splat,
              s(:lvar, :args))))),
      s(:alias,
        s(:sym, :canvas_x),
        s(:sym, :canvasx)),
      s(:alias,
        s(:sym, :canvas_y),
        s(:sym, :canvasy)),
      s(:def, :coords,
        s(:args,
          s(:arg, :tag),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :tk_split_list,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "coords"),
              s(:send, nil, :tagid,
                s(:lvar, :tag)))),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "coords"),
              s(:send, nil, :tagid,
                s(:lvar, :tag)),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:lvar, :args), :flatten)))),
            s(:self)))),
      s(:def, :dchars,
        s(:args,
          s(:arg, :tag),
          s(:arg, :first),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "dchars"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :first)),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :last))),
          s(:self))),
      s(:def, :delete,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :tbl,
            s(:nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkcItem), :CItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:lvasgn, :tbl,
              s(:send,
                s(:const,
                  s(:const, nil, :TkcItem), :CItemID_TBL), :[],
                s(:send,
                  s(:self), :path)))),
          s(:if,
            s(:lvar, :tbl),
            s(:block,
              s(:send,
                s(:lvar, :args), :each),
              s(:args,
                s(:arg, :tag)),
              s(:block,
                s(:send,
                  s(:send, nil, :find,
                    s(:str, "withtag"),
                    s(:lvar, :tag)), :each),
                s(:args,
                  s(:arg, :item)),
                s(:if,
                  s(:send,
                    s(:lvar, :item), :kind_of?,
                    s(:const, nil, :TkcItem)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkcItem), :CItemID_TBL), :mutex), :synchronize),
                    s(:args),
                    s(:send,
                      s(:lvar, :tbl), :delete,
                      s(:send,
                        s(:lvar, :item), :id))), nil))), nil),
          s(:send, nil, :tk_send_without_enc,
            s(:str, "delete"),
            s(:splat,
              s(:block,
                s(:send,
                  s(:lvar, :args), :collect),
                s(:args,
                  s(:arg, :t)),
                s(:send, nil, :tagid,
                  s(:lvar, :t))))),
          s(:self))),
      s(:alias,
        s(:sym, :remove),
        s(:sym, :delete)),
      s(:def, :dtag,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :tag_to_del,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "dtag"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:send, nil, :tagid,
              s(:lvar, :tag_to_del))),
          s(:self))),
      s(:alias,
        s(:sym, :deltag),
        s(:sym, :dtag)),
      s(:def, :find,
        s(:args,
          s(:arg, :mode),
          s(:restarg, :args)),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "find"),
                s(:lvar, :mode),
                s(:splat,
                  s(:lvar, :args)))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const, nil, :TkcItem), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :find_above,
        s(:args,
          s(:arg, :target)),
        s(:send, nil, :find,
          s(:str, "above"),
          s(:send, nil, :tagid,
            s(:lvar, :target)))),
      s(:def, :find_all,
        s(:args),
        s(:send, nil, :find,
          s(:str, "all"))),
      s(:def, :find_below,
        s(:args,
          s(:arg, :target)),
        s(:send, nil, :find,
          s(:str, "below"),
          s(:send, nil, :tagid,
            s(:lvar, :target)))),
      s(:def, :find_closest,
        s(:args,
          s(:arg, :x),
          s(:arg, :y),
          s(:optarg, :halo,
            s(:const, nil, :None)),
          s(:optarg, :start,
            s(:const, nil, :None))),
        s(:send, nil, :find,
          s(:str, "closest"),
          s(:lvar, :x),
          s(:lvar, :y),
          s(:lvar, :halo),
          s(:lvar, :start))),
      s(:def, :find_enclosed,
        s(:args,
          s(:arg, :x1),
          s(:arg, :y1),
          s(:arg, :x2),
          s(:arg, :y2)),
        s(:send, nil, :find,
          s(:str, "enclosed"),
          s(:lvar, :x1),
          s(:lvar, :y1),
          s(:lvar, :x2),
          s(:lvar, :y2))),
      s(:def, :find_overlapping,
        s(:args,
          s(:arg, :x1),
          s(:arg, :y1),
          s(:arg, :x2),
          s(:arg, :y2)),
        s(:send, nil, :find,
          s(:str, "overlapping"),
          s(:lvar, :x1),
          s(:lvar, :y1),
          s(:lvar, :x2),
          s(:lvar, :y2))),
      s(:def, :find_withtag,
        s(:args,
          s(:arg, :tag)),
        s(:send, nil, :find,
          s(:str, "withtag"),
          s(:lvar, :tag))),
      s(:def, :itemfocus,
        s(:args,
          s(:optarg, :tagOrId,
            s(:nil))),
        s(:if,
          s(:lvar, :tagOrId),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "focus"),
              s(:send, nil, :tagid,
                s(:lvar, :tagOrId))),
            s(:self)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "focus"))),
            s(:if,
              s(:send,
                s(:lvar, :ret), :==,
                s(:str, "")),
              s(:nil),
              s(:send,
                s(:const, nil, :TkcItem), :id2obj,
                s(:self),
                s(:lvar, :ret)))))),
      s(:def, :gettags,
        s(:args,
          s(:arg, :tagOrId)),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send_without_enc,
                s(:str, "gettags"),
                s(:send, nil, :tagid,
                  s(:lvar, :tagOrId)))), :collect),
          s(:args,
            s(:arg, :tag)),
          s(:send,
            s(:const, nil, :TkcTag), :id2obj,
            s(:self),
            s(:lvar, :tag)))),
      s(:def, :icursor,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "icursor"),
            s(:send, nil, :tagid,
              s(:lvar, :tagOrId)),
            s(:lvar, :index)),
          s(:self))),
      s(:def, :imove,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :idx),
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "imove"),
            s(:send, nil, :tagid,
              s(:lvar, :tagOrId)),
            s(:lvar, :idx),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:alias,
        s(:sym, :i_move),
        s(:sym, :imove)),
      s(:def, :index,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :idx)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "index"),
            s(:send, nil, :tagid,
              s(:lvar, :tagOrId)),
            s(:lvar, :idx)))),
      s(:def, :insert,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :index),
          s(:arg, :string)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "insert"),
            s(:send, nil, :tagid,
              s(:lvar, :tagOrId)),
            s(:lvar, :index),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :string))),
          s(:self))),
      s(:def, :lower,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :below,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :below),
            s(:send, nil, :tk_send_without_enc,
              s(:str, "lower"),
              s(:send, nil, :tagid,
                s(:lvar, :tag)),
              s(:send, nil, :tagid,
                s(:lvar, :below))),
            s(:send, nil, :tk_send_without_enc,
              s(:str, "lower"),
              s(:send, nil, :tagid,
                s(:lvar, :tag)))),
          s(:self))),
      s(:def, :move,
        s(:args,
          s(:arg, :tag),
          s(:arg, :dx),
          s(:arg, :dy)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "move"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:lvar, :dx),
            s(:lvar, :dy)),
          s(:self))),
      s(:def, :moveto,
        s(:args,
          s(:arg, :tag),
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "moveto"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:alias,
        s(:sym, :move_to),
        s(:sym, :moveto)),
      s(:def, :postscript,
        s(:args,
          s(:arg, :keys)),
        s(:send, nil, :tk_send,
          s(:str, "postscript"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:def, :raise,
        s(:args,
          s(:arg, :tag),
          s(:optarg, :above,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :above),
            s(:send, nil, :tk_send_without_enc,
              s(:str, "raise"),
              s(:send, nil, :tagid,
                s(:lvar, :tag)),
              s(:send, nil, :tagid,
                s(:lvar, :above))),
            s(:send, nil, :tk_send_without_enc,
              s(:str, "raise"),
              s(:send, nil, :tagid,
                s(:lvar, :tag)))),
          s(:self))),
      s(:def, :rchars,
        s(:args,
          s(:arg, :tag),
          s(:arg, :first),
          s(:arg, :last),
          s(:arg, :str_or_coords)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :str_or_coords), :kinad_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :str_or_coords,
              s(:send,
                s(:lvar, :str_or_coords), :flatten)), nil),
          s(:send, nil, :tk_send_without_enc,
            s(:str, "rchars"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:lvar, :first),
            s(:lvar, :last),
            s(:lvar, :str_or_coords)),
          s(:self))),
      s(:alias,
        s(:sym, :replace_chars),
        s(:sym, :rchars)),
      s(:alias,
        s(:sym, :replace_coords),
        s(:sym, :rchars)),
      s(:def, :scale,
        s(:args,
          s(:arg, :tag),
          s(:arg, :x),
          s(:arg, :y),
          s(:arg, :xs),
          s(:arg, :ys)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "scale"),
            s(:send, nil, :tagid,
              s(:lvar, :tag)),
            s(:lvar, :x),
            s(:lvar, :y),
            s(:lvar, :xs),
            s(:lvar, :ys)),
          s(:self))),
      s(:def, :scan_mark,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "scan"),
            s(:str, "mark"),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:def, :scan_dragto,
        s(:args,
          s(:arg, :x),
          s(:arg, :y),
          s(:optarg, :gain,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "scan"),
            s(:str, "dragto"),
            s(:lvar, :x),
            s(:lvar, :y),
            s(:lvar, :gain)),
          s(:self))),
      s(:def, :select,
        s(:args,
          s(:arg, :mode),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :r,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "select"),
              s(:lvar, :mode),
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:begin,
              s(:send,
                s(:lvar, :mode), :==,
                s(:str, "item"))),
            s(:send,
              s(:const, nil, :TkcItem), :id2obj,
              s(:self),
              s(:lvar, :r)),
            s(:self)))),
      s(:def, :select_adjust,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :index)),
        s(:send, nil, :select,
          s(:str, "adjust"),
          s(:send, nil, :tagid,
            s(:lvar, :tagOrId)),
          s(:lvar, :index))),
      s(:def, :select_clear,
        s(:args),
        s(:send, nil, :select,
          s(:str, "clear"))),
      s(:def, :select_from,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :index)),
        s(:send, nil, :select,
          s(:str, "from"),
          s(:send, nil, :tagid,
            s(:lvar, :tagOrId)),
          s(:lvar, :index))),
      s(:def, :select_item,
        s(:args),
        s(:send, nil, :select,
          s(:str, "item"))),
      s(:def, :select_to,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :index)),
        s(:send, nil, :select,
          s(:str, "to"),
          s(:send, nil, :tagid,
            s(:lvar, :tagOrId)),
          s(:lvar, :index))),
      s(:def, :itemtype,
        s(:args,
          s(:arg, :tag)),
        s(:send,
          s(:const, nil, :TkcItem), :type2class,
          s(:send, nil, :tk_send,
            s(:str, "type"),
            s(:send, nil, :tagid,
              s(:lvar, :tag))))),
      s(:def, :create_itemobj_from_id,
        s(:args,
          s(:arg, :idnum)),
        s(:begin,
          s(:lvasgn, :id,
            s(:send,
              s(:const, nil, :TkcItem), :id2obj,
              s(:self),
              s(:send,
                s(:lvar, :idnum), :to_i))),
          s(:if,
            s(:send,
              s(:lvar, :id), :kind_of?,
              s(:const, nil, :TkcItem)),
            s(:return,
              s(:lvar, :id)), nil),
          s(:lvasgn, :typename,
            s(:send, nil, :tk_send,
              s(:str, "type"),
              s(:lvar, :id))),
          s(:if,
            s(:lvasgn, :type,
              s(:send,
                s(:const, nil, :TkcItem), :type2class,
                s(:lvar, :typename))), nil,
            s(:begin,
              s(:send,
                s(:begin,
                  s(:lvasgn, :itemclass,
                    s(:send,
                      s(:lvar, :typename), :dup))), :[]=,
                s(:int, 0),
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :typename), :[],
                    s(:int, 0),
                    s(:int, 1)), :upcase)),
              s(:lvasgn, :type,
                s(:send,
                  s(:const, nil, :TkcItem), :const_set,
                  s(:lvar, :itemclass),
                  s(:send,
                    s(:const, nil, :Class), :new,
                    s(:const, nil, :TkcItem)))),
              s(:send,
                s(:lvar, :type), :const_set,
                s(:str, "CItemTypeName"),
                s(:send,
                  s(:lvar, :typename), :freeze)),
              s(:send,
                s(:const,
                  s(:const, nil, :TkcItem), :CItemTypeToClass), :[]=,
                s(:lvar, :typename),
                s(:lvar, :type)))),
          s(:lvasgn, :canvas,
            s(:self)),
          s(:block,
            s(:send,
              s(:begin,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:lvar, :type), :allocate))), :instance_eval),
            s(:args),
            s(:begin,
              s(:ivasgn, :@parent,
                s(:ivasgn, :@c,
                  s(:lvar, :canvas))),
              s(:ivasgn, :@path,
                s(:send,
                  s(:lvar, :canvas), :path)),
              s(:ivasgn, :@id,
                s(:lvar, :id)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkcItem), :CItemID_TBL), :mutex), :synchronize),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkcItem), :CItemID_TBL), :[],
                      s(:ivar, :@path)), nil,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkcItem), :CItemID_TBL), :[]=,
                      s(:ivar, :@path),
                      s(:hash))),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkcItem), :CItemID_TBL), :[],
                      s(:ivar, :@path)), :[]=,
                    s(:ivar, :@id),
                    s(:self)))))))))),
  s(:send,
    s(:const, nil, :Tk), :__set_loaded_toplevel_aliases__,
    s(:str, "tk/canvas.rb"),
    s(:sym, :Tk),
    s(:const,
      s(:const, nil, :Tk), :Canvas),
    s(:sym, :TkCanvas)),
  s(:class,
    s(:const, nil, :TkcItem),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :Tk)),
      s(:send, nil, :include,
        s(:const, nil, :TkcTagAccess)),
      s(:send, nil, :extend,
        s(:const, nil, :TkItemFontOptkeys)),
      s(:send, nil, :extend,
        s(:const, nil, :TkItemConfigOptkeys)),
      s(:casgn, nil, :CItemTypeName,
        s(:nil)),
      s(:casgn, nil, :CItemTypeToClass,
        s(:hash)),
      s(:casgn, nil, :CItemID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :CItemID_TBL), :mutex), :synchronize),
          s(:args),
          s(:send,
            s(:const, nil, :CItemID_TBL), :clear))),
      s(:defs,
        s(:const, nil, :TkcItem), :type2class,
        s(:args,
          s(:arg, :type)),
        s(:send,
          s(:const, nil, :CItemTypeToClass), :[],
          s(:lvar, :type))),
      s(:defs,
        s(:const, nil, :TkcItem), :id2obj,
        s(:args,
          s(:arg, :canvas),
          s(:arg, :id)),
        s(:begin,
          s(:lvasgn, :cpath,
            s(:send,
              s(:lvar, :canvas), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :CItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :CItemID_TBL), :[],
                s(:lvar, :cpath)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :CItemID_TBL), :[],
                    s(:lvar, :cpath)), :[],
                  s(:lvar, :id)),
                s(:send,
                  s(:send,
                    s(:const, nil, :CItemID_TBL), :[],
                    s(:lvar, :cpath)), :[],
                  s(:lvar, :id)),
                s(:lvar, :id)),
              s(:lvar, :id))))),
      s(:defs,
        s(:self), :_parse_create_args,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:lvasgn, :fontkeys,
            s(:hash)),
          s(:lvasgn, :methodkeys,
            s(:hash)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, -1)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:send,
                    s(:lvar, :args), :pop))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :size), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :args,
                    s(:send,
                      s(:lvar, :keys), :delete,
                      s(:str, "coords"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :args), :kind_of?,
                      s(:const, nil, :Array)), nil,
                    s(:send, nil, :fail,
                      s(:str, "coords parameter must be given by an Array")))), nil),
              s(:block,
                s(:send,
                  s(:send, nil, :__item_font_optkeys,
                    s(:nil)), :each),
                s(:args,
                  s(:arg, :key)),
                s(:begin,
                  s(:lvasgn, :fkey,
                    s(:send,
                      s(:lvar, :key), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :key?,
                      s(:lvar, :fkey)),
                    s(:send,
                      s(:lvar, :fontkeys), :[]=,
                      s(:lvar, :fkey),
                      s(:send,
                        s(:lvar, :keys), :delete,
                        s(:lvar, :fkey))), nil),
                  s(:lvasgn, :fkey,
                    s(:dstr,
                      s(:str, "kanji"),
                      s(:begin,
                        s(:lvar, :key)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :key?,
                      s(:lvar, :fkey)),
                    s(:send,
                      s(:lvar, :fontkeys), :[]=,
                      s(:lvar, :fkey),
                      s(:send,
                        s(:lvar, :keys), :delete,
                        s(:lvar, :fkey))), nil),
                  s(:lvasgn, :fkey,
                    s(:dstr,
                      s(:str, "latin"),
                      s(:begin,
                        s(:lvar, :key)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :key?,
                      s(:lvar, :fkey)),
                    s(:send,
                      s(:lvar, :fontkeys), :[]=,
                      s(:lvar, :fkey),
                      s(:send,
                        s(:lvar, :keys), :delete,
                        s(:lvar, :fkey))), nil),
                  s(:lvasgn, :fkey,
                    s(:dstr,
                      s(:str, "ascii"),
                      s(:begin,
                        s(:lvar, :key)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :key?,
                      s(:lvar, :fkey)),
                    s(:send,
                      s(:lvar, :fontkeys), :[]=,
                      s(:lvar, :fkey),
                      s(:send,
                        s(:lvar, :keys), :delete,
                        s(:lvar, :fkey))), nil))),
              s(:block,
                s(:send,
                  s(:send, nil, :__item_optkey_aliases,
                    s(:nil)), :each),
                s(:args,
                  s(:arg, :alias_name),
                  s(:arg, :real_name)),
                s(:begin,
                  s(:lvasgn, :alias_name,
                    s(:send,
                      s(:lvar, :alias_name), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :has_key?,
                      s(:lvar, :alias_name)),
                    s(:send,
                      s(:lvar, :keys), :[]=,
                      s(:send,
                        s(:lvar, :real_name), :to_s),
                      s(:send,
                        s(:lvar, :keys), :delete,
                        s(:lvar, :alias_name))), nil))),
              s(:block,
                s(:send,
                  s(:send, nil, :__item_methodcall_optkeys,
                    s(:nil)), :each),
                s(:args,
                  s(:arg, :key)),
                s(:begin,
                  s(:lvasgn, :key,
                    s(:send,
                      s(:lvar, :key), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :key?,
                      s(:lvar, :key)),
                    s(:send,
                      s(:lvar, :methodkeys), :[]=,
                      s(:lvar, :key),
                      s(:send,
                        s(:lvar, :keys), :delete,
                        s(:lvar, :key))), nil))),
              s(:block,
                s(:send,
                  s(:send, nil, :__item_ruby2val_optkeys,
                    s(:nil)), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :method)),
                s(:begin,
                  s(:lvasgn, :key,
                    s(:send,
                      s(:lvar, :key), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :keys), :has_key?,
                      s(:lvar, :key)),
                    s(:send,
                      s(:lvar, :keys), :[]=,
                      s(:lvar, :key),
                      s(:send,
                        s(:lvar, :method), :call,
                        s(:send,
                          s(:lvar, :keys), :[],
                          s(:lvar, :key)))), nil))),
              s(:lvasgn, :args,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :flatten), :concat,
                  s(:send, nil, :itemconfig_hash_kv,
                    s(:nil),
                    s(:lvar, :keys))))),
            s(:lvasgn, :args,
              s(:send,
                s(:lvar, :args), :flatten))),
          s(:array,
            s(:lvar, :args),
            s(:lvar, :fontkeys),
            s(:lvar, :methodkeys)))),
      s(:send, nil, :private_class_method,
        s(:sym, :_parse_create_args)),
      s(:defs,
        s(:self), :create,
        s(:args,
          s(:arg, :canvas),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:const,
              s(:self), :CItemTypeName), nil,
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:dstr,
                s(:begin,
                  s(:self)),
                s(:str, " is an abstract class")))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :args),
              s(:lvasgn, :fontkeys),
              s(:lvasgn, :methodkeys)),
            s(:send, nil, :_parse_create_args,
              s(:lvar, :args))),
          s(:lvasgn, :idnum,
            s(:send, nil, :tk_call_without_enc,
              s(:send,
                s(:lvar, :canvas), :path),
              s(:str, "create"),
              s(:const,
                s(:self), :CItemTypeName),
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:send,
              s(:lvar, :fontkeys), :empty?), nil,
            s(:send,
              s(:lvar, :canvas), :itemconfigure,
              s(:lvar, :idnum),
              s(:lvar, :fontkeys))),
          s(:if,
            s(:send,
              s(:lvar, :methodkeys), :empty?), nil,
            s(:send,
              s(:lvar, :canvas), :itemconfigure,
              s(:lvar, :idnum),
              s(:lvar, :methodkeys))),
          s(:send,
            s(:lvar, :idnum), :to_i))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:restarg, :args)),
        s(:begin,
          s(:ivasgn, :@parent,
            s(:ivasgn, :@c,
              s(:lvar, :parent))),
          s(:ivasgn, :@path,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:ivasgn, :@id,
            s(:send, nil, :create_self,
              s(:splat,
                s(:lvar, :args)))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :CItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :CItemID_TBL), :[],
                  s(:ivar, :@path)), nil,
                s(:send,
                  s(:const, nil, :CItemID_TBL), :[]=,
                  s(:ivar, :@path),
                  s(:hash))),
              s(:send,
                s(:send,
                  s(:const, nil, :CItemID_TBL), :[],
                  s(:ivar, :@path)), :[]=,
                s(:ivar, :@id),
                s(:self)))))),
      s(:def, :create_self,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:send,
            s(:self), :class), :create,
          s(:ivar, :@c),
          s(:splat,
            s(:lvar, :args)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :exist?,
        s(:args),
        s(:if,
          s(:send,
            s(:ivar, :@c), :find_withtag,
            s(:ivar, :@id)),
          s(:true),
          s(:false))),
      s(:def, :delete,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@c), :delete,
            s(:ivar, :@id)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :CItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :CItemID_TBL), :[],
                s(:ivar, :@path)),
              s(:send,
                s(:send,
                  s(:const, nil, :CItemID_TBL), :[],
                  s(:ivar, :@path)), :delete,
                s(:ivar, :@id)), nil)),
          s(:self))),
      s(:alias,
        s(:sym, :remove),
        s(:sym, :delete)),
      s(:alias,
        s(:sym, :destroy),
        s(:sym, :delete)))),
  s(:class,
    s(:const, nil, :TkcArc),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "arc"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcBitmap),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "bitmap"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcImage),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "image"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcLine),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "line"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcOval),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "oval"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcPolygon),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "polygon"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcRectangle),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "rectangle"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)))),
  s(:class,
    s(:const, nil, :TkcText),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "text"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)),
      s(:defs,
        s(:self), :create,
        s(:args,
          s(:arg, :canvas),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, -1)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:send,
                    s(:lvar, :args), :pop))),
              s(:lvasgn, :txt,
                s(:send,
                  s(:lvar, :keys), :[],
                  s(:str, "text"))),
              s(:if,
                s(:lvar, :txt),
                s(:send,
                  s(:lvar, :keys), :[]=,
                  s(:str, "text"),
                  s(:send, nil, :_get_eval_enc_str,
                    s(:lvar, :txt))), nil),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :keys))), nil),
          s(:super,
            s(:lvar, :canvas),
            s(:splat,
              s(:lvar, :args))))))),
  s(:class,
    s(:const, nil, :TkcWindow),
    s(:const, nil, :TkcItem),
    s(:begin,
      s(:casgn, nil, :CItemTypeName,
        s(:send,
          s(:str, "window"), :freeze)),
      s(:send,
        s(:const, nil, :CItemTypeToClass), :[]=,
        s(:const, nil, :CItemTypeName),
        s(:self)),
      s(:defs,
        s(:self), :create,
        s(:args,
          s(:arg, :canvas),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, -1)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:send,
                    s(:lvar, :args), :pop))),
              s(:lvasgn, :win,
                s(:send,
                  s(:lvar, :keys), :[],
                  s(:str, "window"))),
              s(:if,
                s(:lvar, :win),
                s(:send,
                  s(:lvar, :keys), :[]=,
                  s(:str, "window"),
                  s(:send, nil, :_epath,
                    s(:lvar, :win))), nil),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :keys))), nil),
          s(:super,
            s(:lvar, :canvas),
            s(:splat,
              s(:lvar, :args))))))))
