s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:module,
    s(:const, nil, :TkPalette),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Tk)),
      s(:send, nil, :extend,
        s(:const, nil, :Tk)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "tk_setPalette"), :freeze),
            s(:send,
              s(:str, "tk_bisque"), :freeze),
            s(:send,
              s(:str, "tkDarken"), :freeze)), :freeze)),
      s(:defs,
        s(:const, nil, :TkPalette), :set,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:lvasgn, :args,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0)), :to_a), :flatten)), nil),
          s(:send, nil, :tk_call,
            s(:str, "tk_setPalette"),
            s(:splat,
              s(:lvar, :args))))),
      s(:defs,
        s(:const, nil, :TkPalette), :setPalette,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPalette), :set,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :TkPalette), :bisque,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "tk_bisque"))),
      s(:defs,
        s(:const, nil, :TkPalette), :darken,
        s(:args,
          s(:arg, :color),
          s(:arg, :percent)),
        s(:send, nil, :tk_call,
          s(:str, "tkDarken"),
          s(:lvar, :color),
          s(:lvar, :percent))),
      s(:defs,
        s(:const, nil, :TkPalette), :recolorTree,
        s(:args,
          s(:arg, :win),
          s(:arg, :colors)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :colors), :kind_of?,
                s(:const, nil, :Hash)), :!),
            s(:send, nil, :fail,
              s(:str, "2nd arg need to be Hash")), nil),
          s(:send, nil, :tk_call,
            s(:str, "global"),
            s(:str, "tkPalette")),
          s(:block,
            s(:send,
              s(:lvar, :colors), :each),
            s(:args,
              s(:arg, :key),
              s(:arg, :value)),
            s(:kwbegin,
              s(:rescue,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :win), :cget,
                      s(:lvar, :key)), :==,
                    s(:send, nil, :tk_call,
                      s(:str, "set"),
                      s(:dstr,
                        s(:str, "tkPalette("),
                        s(:begin,
                          s(:lvar, :key)),
                        s(:str, ")")))),
                  s(:send,
                    s(:lvar, :win), :[]=,
                    s(:lvar, :key),
                    s(:send,
                      s(:lvar, :colors), :[],
                      s(:lvar, :key))), nil),
                s(:resbody, nil, nil, nil), nil))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :TkWinfo), :children,
                s(:lvar, :win)), :each),
            s(:args,
              s(:arg, :w)),
            s(:send,
              s(:const, nil, :TkPalette), :recolorTree,
              s(:lvar, :w),
              s(:lvar, :colors))))),
      s(:def, :recolorTree,
        s(:args,
          s(:arg, :colors)),
        s(:send,
          s(:const, nil, :TkPalette), :recolorTree,
          s(:self),
          s(:lvar, :colors))))))
