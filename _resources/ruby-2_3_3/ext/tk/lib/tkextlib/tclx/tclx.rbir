s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/setup.rb")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tclx/setup.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "Tclx")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :TclX),
      s(:begin,
        s(:casgn, nil, :PACKAGE_NAME,
          s(:send,
            s(:str, "Tclx"), :freeze)),
        s(:defs,
          s(:self), :package_name,
          s(:args),
          s(:const, nil, :PACKAGE_NAME)),
        s(:defs,
          s(:self), :package_version,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :TkPackage), :require,
                s(:str, "Tclx")),
              s(:resbody, nil, nil,
                s(:str, "")), nil))),
        s(:defs,
          s(:self), :infox,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "infox"),
            s(:splat,
              s(:lvar, :args)))),
        s(:defs,
          s(:self), :signal,
          s(:args,
            s(:restarg, :args)),
          s(:begin,
            s(:send, nil, :warn,
              s(:str, "Warning: Don't recommend to use TclX's 'signal' command. Please use Ruby's 'Signal.trap' method")),
            s(:send,
              s(:const, nil, :Tk), :tk_call,
              s(:str, "signal"),
              s(:splat,
                s(:lvar, :args))))),
        s(:defs,
          s(:self), :signal_restart,
          s(:args,
            s(:restarg, :args)),
          s(:begin,
            s(:send, nil, :warn,
              s(:str, "Warning: Don't recommend to use TclX's 'signal' command. Please use Ruby's 'Signal.trap' method")),
            s(:send,
              s(:const, nil, :Tk), :tk_call,
              s(:str, "signal"),
              s(:str, "-restart"),
              s(:splat,
                s(:lvar, :args))))),
        s(:class,
          s(:const, nil, :XPG3_MsgCat), nil,
          s(:begin,
            s(:sclass,
              s(:self),
              s(:alias,
                s(:sym, :open),
                s(:sym, :new))),
            s(:def, :initialize,
              s(:args,
                s(:arg, :catname),
                s(:optarg, :fail_mode,
                  s(:false))),
              s(:if,
                s(:lvar, :fail_mode),
                s(:ivasgn, :@msgcat_id,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call,
                    s(:str, "catopen"),
                    s(:str, "-fail"),
                    s(:lvar, :catname))),
                s(:ivasgn, :@msgcat_id,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call,
                    s(:str, "catopen"),
                    s(:str, "-nofail"),
                    s(:lvar, :catname))))),
            s(:def, :close,
              s(:args,
                s(:optarg, :fail_mode,
                  s(:false))),
              s(:begin,
                s(:if,
                  s(:lvar, :fail_mode),
                  s(:send,
                    s(:const, nil, :Tk), :tk_call,
                    s(:str, "catclose"),
                    s(:str, "-fail"),
                    s(:ivar, :@msgcat_id)),
                  s(:send,
                    s(:const, nil, :Tk), :tk_call,
                    s(:str, "catclose"),
                    s(:str, "-nofail"),
                    s(:ivar, :@msgcat_id))),
                s(:self))),
            s(:def, :get,
              s(:args,
                s(:arg, :setnum),
                s(:arg, :msgnum),
                s(:arg, :defaultstr)),
              s(:send,
                s(:const, nil, :Tk), :tk_call,
                s(:str, "catgets"),
                s(:ivar, :@msgcat_id),
                s(:lvar, :setnum),
                s(:lvar, :msgnum),
                s(:lvar, :defaultstr)))))))))
