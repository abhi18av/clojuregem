s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send,
    s(:send,
      s(:const, nil, :TkRoot), :new), :withdraw),
  s(:lvasgn, :name,
    s(:send,
      s(:const, nil, :File), :basename,
      s(:str, "(string)"))),
  s(:lvasgn, :add_path,
    s(:false)),
  s(:lvasgn, :verbose,
    s(:false)),
  s(:def, :help_msg,
    s(:args),
    s(:begin,
      s(:send, nil, :print,
        s(:dstr,
          s(:str, "Usage: "),
          s(:begin,
            s(:gvar, :$0)),
          s(:str, " [-l] [-v] [-h] [--] [dir]\n"))),
      s(:send, nil, :print,
        s(:str, "\tIf dir is omitted, check the directory that this command exists.\n")),
      s(:send, nil, :print,
        s(:str, "\tAvailable options are \n")),
      s(:send, nil, :print,
        s(:str, "\t  -l : Add dir to $LOAD_PATH\n")),
      s(:send, nil, :print,
        s(:str, "\t       (If dir == '<parent>/tkextlib', add <parent> also.)\n")),
      s(:send, nil, :print,
        s(:str, "\t  -v : Verbose mode (show reason of fail)\n")),
      s(:send, nil, :print,
        s(:str, "\t  -h : Show this message\n")),
      s(:send, nil, :print,
        s(:str, "\t  -- : End of options\n")))),
  s(:while,
    s(:begin,
      s(:and,
        s(:send,
          s(:const, nil, :ARGV), :[],
          s(:int, 0)),
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :ARGV), :[],
              s(:int, 0)), :[],
            s(:int, 0)), :==,
          s(:str, "-")))),
    s(:case,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)),
      s(:when,
        s(:str, "--"),
        s(:begin,
          s(:send,
            s(:const, nil, :ARGV), :shift),
          s(:break))),
      s(:when,
        s(:str, "-l"),
        s(:begin,
          s(:send,
            s(:const, nil, :ARGV), :shift),
          s(:lvasgn, :add_path,
            s(:true)))),
      s(:when,
        s(:str, "-v"),
        s(:begin,
          s(:send,
            s(:const, nil, :ARGV), :shift),
          s(:lvasgn, :verbose,
            s(:true)))),
      s(:when,
        s(:str, "-h"),
        s(:begin,
          s(:send, nil, :help_msg),
          s(:send, nil, :exit,
            s(:int, 0)))),
      s(:begin,
        s(:send, nil, :print,
          s(:dstr,
            s(:str, "Argument Error!! : unknown option '"),
            s(:begin,
              s(:send,
                s(:const, nil, :ARGV), :[],
                s(:int, 0))),
            s(:str, "'\n"))),
        s(:send, nil, :help_msg),
        s(:send, nil, :exit,
          s(:int, 1))))),
  s(:if,
    s(:send,
      s(:const, nil, :ARGV), :[],
      s(:int, 0)),
    s(:lvasgn, :dir,
      s(:send,
        s(:const, nil, :File), :expand_path,
        s(:send,
          s(:const, nil, :ARGV), :[],
          s(:int, 0)))),
    s(:lvasgn, :dir,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "(string)"))))),
  s(:if,
    s(:lvar, :add_path),
    s(:begin,
      s(:send,
        s(:gvar, :$LOAD_PATH), :unshift,
        s(:lvar, :dir)),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :File), :basename,
            s(:lvar, :dir)), :==,
          s(:str, "tkextlib")),
        s(:send,
          s(:gvar, :$LOAD_PATH), :unshift,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:lvar, :dir))), nil)), nil),
  s(:send, nil, :print,
    s(:str, "\nRuby/Tk extension library checker\n")),
  s(:send, nil, :print,
    s(:str, "( Note:: This check is very simple one. Shown status may be wrong. )\n")),
  s(:send, nil, :print,
    s(:dstr,
      s(:str, "\n check directory :: "),
      s(:begin,
        s(:lvar, :dir)))),
  s(:send, nil, :print,
    s(:dstr,
      s(:str, "\n $LOAD_PATH :: "),
      s(:begin,
        s(:send,
          s(:gvar, :$LOAD_PATH), :inspect)),
      s(:str, "\n"))),
  s(:def, :get_pkg_list,
    s(:args,
      s(:arg, :file)),
    s(:begin,
      s(:lvasgn, :pkg_list,
        s(:array)),
      s(:block,
        s(:send,
          s(:const, nil, :File), :foreach,
          s(:lvar, :file)),
        s(:args,
          s(:arg, :l)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :l), :=~,
              s(:regexp,
                s(:str, "^(?:[^#]+\\s|\\s*)(?:|;\\s*)TkPackage\\s*\\.\\s*require\\s*\\(?\\s*([\"'])((\\w|:)+)\\1"),
                s(:regopt))),
            s(:begin,
              s(:lvasgn, :pkg,
                s(:array,
                  s(:nth_ref, 2),
                  s(:sym, :package))),
              s(:if,
                s(:send,
                  s(:lvar, :pkg_list), :member?,
                  s(:lvar, :pkg)), nil,
                s(:send,
                  s(:lvar, :pkg_list), :<<,
                  s(:lvar, :pkg)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :l), :=~,
              s(:regexp,
                s(:str, "^(?:[^#]+\\s|\\s*)(?:|;\\s*)Tk\\s*\\.\\s*load_tcllibrary\\s*\\(?\\s*([\"'])((\\w|:)+)\\1"),
                s(:regopt))),
            s(:begin,
              s(:lvasgn, :pkg,
                s(:array,
                  s(:nth_ref, 2),
                  s(:sym, :library))),
              s(:if,
                s(:send,
                  s(:lvar, :pkg_list), :member?,
                  s(:lvar, :pkg)), nil,
                s(:send,
                  s(:lvar, :pkg_list), :<<,
                  s(:lvar, :pkg)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :l), :=~,
              s(:regexp,
                s(:str, "^(?:[^#]+\\s|\\s*)(?:|;\\s*)Tk\\s*\\.\\s*load_tclscript\\s*\\(?\\s*([\"'])((\\w|:)+)\\1"),
                s(:regopt))),
            s(:begin,
              s(:lvasgn, :pkg,
                s(:array,
                  s(:nth_ref, 2),
                  s(:sym, :script))),
              s(:if,
                s(:send,
                  s(:lvar, :pkg_list), :member?,
                  s(:lvar, :pkg)), nil,
                s(:send,
                  s(:lvar, :pkg_list), :<<,
                  s(:lvar, :pkg)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :l), :=~,
              s(:regexp,
                s(:str, "^(?:[^#]+\\s|\\s*)(?:|;\\s*)require\\s*\\(?\\s*([\"'])((\\w|/|:)+)\\1"),
                s(:regopt))),
            s(:begin,
              s(:lvasgn, :pkg,
                s(:array,
                  s(:nth_ref, 2),
                  s(:sym, :require_ruby_lib))),
              s(:if,
                s(:send,
                  s(:lvar, :pkg_list), :member?,
                  s(:lvar, :pkg)), nil,
                s(:send,
                  s(:lvar, :pkg_list), :<<,
                  s(:lvar, :pkg)))), nil))),
      s(:lvar, :pkg_list))),
  s(:def, :check_pkg,
    s(:args,
      s(:arg, :file),
      s(:optarg, :verbose,
        s(:false))),
    s(:begin,
      s(:lvasgn, :pkg_list,
        s(:send, nil, :get_pkg_list,
          s(:lvar, :file))),
      s(:lvasgn, :error_list,
        s(:array)),
      s(:lvasgn, :success_list,
        s(:hash)),
      s(:block,
        s(:send,
          s(:lvar, :pkg_list), :each),
        s(:args,
          s(:arg, :name),
          s(:arg, :type)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :success_list), :[],
              s(:lvar, :name)),
            s(:next), nil),
          s(:kwbegin,
            s(:rescue,
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:sym, :package),
                  s(:begin,
                    s(:lvasgn, :ver,
                      s(:send,
                        s(:const, nil, :TkPackage), :require,
                        s(:lvar, :name))),
                    s(:send,
                      s(:lvar, :success_list), :[]=,
                      s(:lvar, :name),
                      s(:lvar, :ver)),
                    s(:block,
                      s(:send,
                        s(:lvar, :error_list), :delete_if),
                      s(:args,
                        s(:arg, :n),
                        s(:arg, :t)),
                      s(:send,
                        s(:lvar, :n), :==,
                        s(:lvar, :name))))),
                s(:when,
                  s(:sym, :library),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Tk), :load_tcllibrary,
                      s(:lvar, :name)),
                    s(:send,
                      s(:lvar, :success_list), :[]=,
                      s(:lvar, :name),
                      s(:sym, :library)),
                    s(:block,
                      s(:send,
                        s(:lvar, :error_list), :delete_if),
                      s(:args,
                        s(:arg, :n),
                        s(:arg, :t)),
                      s(:send,
                        s(:lvar, :n), :==,
                        s(:lvar, :name))))),
                s(:when,
                  s(:sym, :script),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Tk), :load_tclscript,
                      s(:lvar, :name)),
                    s(:send,
                      s(:lvar, :success_list), :[]=,
                      s(:lvar, :name),
                      s(:sym, :script)),
                    s(:block,
                      s(:send,
                        s(:lvar, :error_list), :delete_if),
                      s(:args,
                        s(:arg, :n),
                        s(:arg, :t)),
                      s(:send,
                        s(:lvar, :n), :==,
                        s(:lvar, :name))))),
                s(:when,
                  s(:sym, :require_ruby_lib),
                  s(:send, nil, :require,
                    s(:lvar, :name))), nil),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:if,
                  s(:lvar, :verbose),
                  s(:send,
                    s(:lvar, :error_list), :<<,
                    s(:array,
                      s(:lvar, :name),
                      s(:lvar, :type),
                      s(:send,
                        s(:lvar, :e), :message))),
                  s(:send,
                    s(:lvar, :error_list), :<<,
                    s(:array,
                      s(:lvar, :name),
                      s(:lvar, :type))))), nil)))),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :success_list), :dup), :each),
        s(:args,
          s(:arg, :name),
          s(:arg, :ver)),
        s(:if,
          s(:send,
            s(:lvar, :ver), :kind_of?,
            s(:const, nil, :String)), nil,
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :ver,
                  s(:send,
                    s(:const, nil, :TkPackage), :require,
                    s(:lvar, :name))),
                s(:send,
                  s(:send, nil, :sccess_list), :[]=,
                  s(:lvar, :name),
                  s(:lvar, :ver))),
              s(:resbody, nil, nil, nil), nil)))),
      s(:array,
        s(:lvar, :success_list),
        s(:lvar, :error_list)))),
  s(:def, :subdir_check,
    s(:args,
      s(:arg, :dir),
      s(:optarg, :verbose,
        s(:false))),
    s(:block,
      s(:send,
        s(:const, nil, :Dir), :foreach,
        s(:lvar, :dir)),
      s(:args,
        s(:arg, :f)),
      s(:begin,
        s(:if,
          s(:or,
            s(:send,
              s(:lvar, :f), :==,
              s(:str, ".")),
            s(:send,
              s(:lvar, :f), :==,
              s(:str, ".."))),
          s(:next), nil),
        s(:if,
          s(:send,
            s(:const, nil, :File), :directory?,
            s(:lvar, :f)),
          s(:send, nil, :subdir_check,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dir),
              s(:lvar, :f))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :extname,
                s(:lvar, :f)), :==,
              s(:str, ".rb")),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:lvar, :f))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :suc),
                  s(:lvasgn, :err)),
                s(:send, nil, :check_pkg,
                  s(:lvar, :path),
                  s(:lvar, :verbose))),
              s(:if,
                s(:send,
                  s(:lvar, :err), :empty?),
                s(:send, nil, :print,
                  s(:str, "Ready : "),
                  s(:lvar, :path),
                  s(:str, " : require->"),
                  s(:send,
                    s(:lvar, :suc), :inspect),
                  s(:str, "\n")),
                s(:send, nil, :print,
                  s(:str, "*LACK : "),
                  s(:lvar, :path),
                  s(:str, " : require->"),
                  s(:send,
                    s(:lvar, :suc), :inspect),
                  s(:str, "  FAIL->"),
                  s(:send,
                    s(:lvar, :err), :inspect),
                  s(:str, "\n")))), nil))))),
  s(:send,
    s(:const, nil, :Dir), :chdir,
    s(:lvar, :dir)),
  s(:block,
    s(:send,
      s(:begin,
        s(:send,
          s(:send,
            s(:const, nil, :Dir), :[],
            s(:str, "*.rb")), :-,
          s(:array,
            s(:str, "setup.rb"),
            s(:lvar, :name)))), :each),
    s(:args,
      s(:arg, :f)),
    s(:begin,
      s(:lvasgn, :subdir,
        s(:send,
          s(:const, nil, :File), :basename,
          s(:lvar, :f),
          s(:str, ".*"))),
      s(:send, nil, :print,
        s(:str, "\n")),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :suc),
          s(:lvasgn, :err)),
        s(:send, nil, :check_pkg,
          s(:lvar, :f),
          s(:lvar, :verbose))),
      s(:if,
        s(:send,
          s(:lvar, :err), :empty?),
        s(:send, nil, :print,
          s(:str, "Ready : "),
          s(:lvar, :f),
          s(:str, " : require->"),
          s(:send,
            s(:lvar, :suc), :inspect),
          s(:str, "\n")),
        s(:send, nil, :print,
          s(:str, "*LACK : "),
          s(:lvar, :f),
          s(:str, " : require->"),
          s(:send,
            s(:lvar, :suc), :inspect),
          s(:str, "  FAIL->"),
          s(:send,
            s(:lvar, :err), :inspect),
          s(:str, "\n"))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :directory?,
          s(:lvar, :subdir)),
        s(:send, nil, :subdir_check,
          s(:lvar, :subdir),
          s(:lvar, :verbose)), nil))))
