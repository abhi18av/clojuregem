s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/variable")),
  s(:send, nil, :require,
    s(:str, "tkextlib/setup.rb")),
  s(:send, nil, :require,
    s(:str, "tkextlib/blt/setup.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "BLT")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :BLT),
      s(:begin,
        s(:send,
          s(:const,
            s(:const, nil, :TkComm), :TkExtlibAutoloadModule), :unshift,
          s(:self)),
        s(:send, nil, :extend,
          s(:const, nil, :TkCore)),
        s(:casgn, nil, :VERSION,
          s(:send, nil, :tk_call,
            s(:str, "set"),
            s(:str, "blt_version"))),
        s(:casgn, nil, :PATCH_LEVEL,
          s(:send, nil, :tk_call,
            s(:str, "set"),
            s(:str, "blt_patchLevel"))),
        s(:kwbegin,
          s(:rescue,
            s(:lvasgn, :lib,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :_invoke,
                s(:str, "set"),
                s(:str, "blt_library"))),
            s(:resbody, nil, nil,
              s(:lvasgn, :lib,
                s(:str, ""))), nil)),
        s(:casgn, nil, :LIBRARY,
          s(:send,
            s(:const, nil, :TkVarAccess), :new,
            s(:str, "blt_library"),
            s(:lvar, :lib))),
        s(:kwbegin,
          s(:rescue,
            s(:lvasgn, :lib,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :_invoke,
                s(:str, "set"),
                s(:str, "blt_libPath"))),
            s(:resbody, nil, nil,
              s(:lvasgn, :lib,
                s(:str, ""))), nil)),
        s(:casgn, nil, :LIB_PATH,
          s(:send,
            s(:const, nil, :TkVarAccess), :new,
            s(:str, "blt_libPath"),
            s(:lvar, :lib))),
        s(:casgn, nil, :PACKAGE_NAME,
          s(:send,
            s(:str, "BLT"), :freeze)),
        s(:defs,
          s(:self), :package_name,
          s(:args),
          s(:const, nil, :PACKAGE_NAME)),
        s(:defs,
          s(:self), :package_version,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :TkPackage), :require,
                s(:str, "BLT")),
              s(:resbody, nil, nil,
                s(:str, "")), nil))),
        s(:defs,
          s(:self), :beep,
          s(:args,
            s(:optarg, :percent,
              s(:int, 50))),
          s(:send, nil, :tk_call,
            s(:str, "::blt::beep"),
            s(:lvar, :percent))),
        s(:defs,
          s(:self), :bgexec,
          s(:args,
            s(:restarg, :args)),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :TkVariable)),
              s(:lvasgn, :var,
                s(:send,
                  s(:lvar, :args), :shift)),
              s(:lvasgn, :var,
                s(:send,
                  s(:const, nil, :TkVariable), :new))),
            s(:lvasgn, :params,
              s(:array,
                s(:lvar, :var))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :Hash)),
              s(:send,
                s(:lvar, :params), :concat,
                s(:send, nil, :hash_kv,
                  s(:send,
                    s(:lvar, :args), :shift),
                  s(:true))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :=~,
                s(:regexp,
                  s(:str, "^\\s*-[^-]"),
                  s(:regopt))),
              s(:send,
                s(:lvar, :params), :<<,
                s(:str, "--")), nil),
            s(:send,
              s(:lvar, :params), :concat,
              s(:lvar, :args)),
            s(:send, nil, :tk_call,
              s(:str, "::blt::bgexec"),
              s(:splat,
                s(:lvar, :params))),
            s(:lvar, :var))),
        s(:defs,
          s(:self), :detach_bgexec,
          s(:args,
            s(:restarg, :args)),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :TkVariable)),
              s(:lvasgn, :var,
                s(:send,
                  s(:lvar, :args), :shift)),
              s(:lvasgn, :var,
                s(:send,
                  s(:const, nil, :TkVariable), :new))),
            s(:lvasgn, :params,
              s(:array,
                s(:lvar, :var))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :Hash)),
              s(:send,
                s(:lvar, :params), :concat,
                s(:send, nil, :hash_kv,
                  s(:send,
                    s(:lvar, :args), :shift),
                  s(:true))), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :=~,
                s(:regexp,
                  s(:str, "^\\s*-[^-]"),
                  s(:regopt))),
              s(:send,
                s(:lvar, :params), :<<,
                s(:str, "--")), nil),
            s(:send,
              s(:lvar, :params), :concat,
              s(:lvar, :args)),
            s(:send,
              s(:lvar, :params), :<<,
              s(:str, "&")),
            s(:array,
              s(:lvar, :var),
              s(:send, nil, :tk_split_list,
                s(:send, nil, :tk_call,
                  s(:str, "::blt::bgexec"),
                  s(:splat,
                    s(:lvar, :params))))))),
        s(:defs,
          s(:self), :bltdebug,
          s(:args,
            s(:optarg, :lvl,
              s(:nil))),
          s(:if,
            s(:lvar, :lvl),
            s(:send, nil, :tk_call,
              s(:str, "::blt::bltdebug"),
              s(:lvar, :lvl)),
            s(:send, nil, :number,
              s(:send, nil, :tk_call,
                s(:str, "::blt::bltdebug"))))),
        s(:defs,
          s(:self), :crc32_file,
          s(:args,
            s(:arg, :name)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "::blt::crc32"),
            s(:lvar, :name))),
        s(:defs,
          s(:self), :crc32_data,
          s(:args,
            s(:arg, :dat)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "::blt::crc32"),
            s(:str, "-data"),
            s(:lvar, :dat))),
        s(:defs,
          s(:self), :active_legend,
          s(:args,
            s(:arg, :graph)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "Blt_ActiveLegend"),
            s(:lvar, :graph))),
        s(:defs,
          s(:self), :crosshairs,
          s(:args,
            s(:arg, :graph)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "Blt_Crosshairs"),
            s(:lvar, :graph))),
        s(:defs,
          s(:self), :zoom_stack,
          s(:args,
            s(:arg, :graph)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "Blt_ZoomStack"),
            s(:lvar, :graph))),
        s(:defs,
          s(:self), :print_key,
          s(:args,
            s(:arg, :graph)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "Blt_PrintKey"),
            s(:lvar, :graph))),
        s(:defs,
          s(:self), :closest_point,
          s(:args,
            s(:arg, :graph)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "Blt_ClosestPoint"),
            s(:lvar, :graph))),
        s(:module,
          s(:const, nil, :GraphCommand),
          s(:begin,
            s(:def, :active_legend,
              s(:args),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "Blt_ActiveLegend"),
                  s(:ivar, :@path)),
                s(:self))),
            s(:def, :crosshairs,
              s(:args),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "Blt_Crosshairs"),
                  s(:ivar, :@path)),
                s(:self))),
            s(:def, :zoom_stack,
              s(:args),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "Blt_ZoomStack"),
                  s(:ivar, :@path)),
                s(:self))),
            s(:def, :print_key,
              s(:args),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "Blt_PrintKey"),
                  s(:ivar, :@path)),
                s(:self))),
            s(:def, :closest_point,
              s(:args),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "Blt_ClosestPoint"),
                  s(:ivar, :@path)),
                s(:self))))),
        s(:send, nil, :autoload,
          s(:sym, :PlotComponent),
          s(:str, "tkextlib/blt/component.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Barchart),
          s(:str, "tkextlib/blt/barchart.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Bitmap),
          s(:str, "tkextlib/blt/bitmap.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Busy),
          s(:str, "tkextlib/blt/busy.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Container),
          s(:str, "tkextlib/blt/container.rb")),
        s(:send, nil, :autoload,
          s(:sym, :CutBuffer),
          s(:str, "tkextlib/blt/cutbuffer.rb")),
        s(:send, nil, :autoload,
          s(:sym, :DragDrop),
          s(:str, "tkextlib/blt/dragdrop.rb")),
        s(:send, nil, :autoload,
          s(:sym, :EPS),
          s(:str, "tkextlib/blt/eps.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Htext),
          s(:str, "tkextlib/blt/htext.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Graph),
          s(:str, "tkextlib/blt/graph.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Spline),
          s(:str, "tkextlib/blt/spline.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Stripchart),
          s(:str, "tkextlib/blt/stripchart.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Table),
          s(:str, "tkextlib/blt/table.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Tabnotebook),
          s(:str, "tkextlib/blt/tabnotebook.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Tabset),
          s(:str, "tkextlib/blt/tabset.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Ted),
          s(:str, "tkextlib/blt/ted.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Tile),
          s(:str, "tkextlib/blt/tile.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Tree),
          s(:str, "tkextlib/blt/tree.rb")),
        s(:send, nil, :autoload,
          s(:sym, :TreeView),
          s(:str, "tkextlib/blt/treeview.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Hiertable),
          s(:str, "tkextlib/blt/treeview.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Vector),
          s(:str, "tkextlib/blt/vector.rb")),
        s(:send, nil, :autoload,
          s(:sym, :VectorAccess),
          s(:str, "tkextlib/blt/vector.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Watch),
          s(:str, "tkextlib/blt/watch.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Winop),
          s(:str, "tkextlib/blt/winop.rb")),
        s(:send, nil, :autoload,
          s(:sym, :WinOp),
          s(:str, "tkextlib/blt/winop.rb")),
        s(:send, nil, :autoload,
          s(:sym, :DnD),
          s(:str, "tkextlib/blt/unix_dnd.rb")),
        s(:send, nil, :autoload,
          s(:sym, :Printer),
          s(:str, "tkextlib/blt/win_printer.rb"))))))
