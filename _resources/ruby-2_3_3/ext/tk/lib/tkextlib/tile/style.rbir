s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tile.rb")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Tile),
      s(:module,
        s(:const, nil, :Style), nil))),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tile), :Style),
    s(:send, nil, :extend,
      s(:const, nil, :TkCore))),
  s(:sclass,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tile), :Style),
    s(:begin,
      s(:if,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :<,
          s(:int, 8)),
        s(:begin,
          s(:casgn, nil, :TkCommandNames,
            s(:send,
              s(:array,
                s(:send,
                  s(:str, "style"), :freeze)), :freeze)),
          s(:if,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :<,
              s(:int, 7)),
            s(:def, :__define_wrapper_proc_for_compatibility__!,
              s(:args),
              s(:begin,
                s(:send, nil, :__define_themes_and_setTheme_proc__!),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk), :info,
                      s(:sym, :commands),
                      s(:str, "::ttk::style")), :empty?), nil,
                  s(:begin,
                    s(:if,
                      s(:gvar, :$DEBUG),
                      s(:send, nil, :warn,
                        s(:str, "Warning: can't define '::ttk::style' command (already exist)")), nil),
                    s(:return))),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
                  s(:str, "::ttk::style"),
                  s(:str, "args"),
                  s(:dstr,
                    s(:str, "        if [string equal [lrange $args 0 1] {element create}] {\n"),
                    s(:str, "          if [string equal [lindex $args 3] image] {\n"),
                    s(:str, "            set spec [lindex $args 4]\n"),
                    s(:str, "            set map  [lrange $spec 1 end]\n"),
                    s(:str, "            if [llength $map] {\n"),
                    s(:str, "              # return [eval [concat [list ::style element create [lindex $args 2] image [lindex $spec 0] -map $map] [lrange $args 5 end]]]\n"),
                    s(:str, "              return [uplevel 1 [list ::style element create [lindex $args 2] image [lindex $spec 0] -map $map] [lrange $args 5 end]]\n"),
                    s(:str, "            }\n"),
                    s(:str, "          }\n"),
                    s(:str, "        }\n"),
                    s(:str, "        # return [eval \"::style $args\"]\n"),
                    s(:str, "        return [uplevel 1 ::style $args]\n"))))),
            s(:def, :__define_wrapper_proc_for_compatibility__!,
              s(:args),
              s(:begin,
                s(:send, nil, :__define_themes_and_setTheme_proc__!),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk), :info,
                      s(:sym, :commands),
                      s(:str, "::ttk::style")), :empty?), nil,
                  s(:begin,
                    s(:if,
                      s(:gvar, :$DEBUG),
                      s(:send, nil, :warn,
                        s(:str, "Warning: can't define '::ttk::style' command (already exist)")), nil),
                    s(:return))),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
                  s(:str, "::ttk::style"),
                  s(:str, "args"),
                  s(:dstr,
                    s(:str, "        if [string equal [lrange $args 0 1] {element create}] {\n"),
                    s(:str, "          if [string equal [lindex $args 3] image] {\n"),
                    s(:str, "            set spec [lindex $args 4]\n"),
                    s(:str, "            set map  [lrange $spec 1 end]\n"),
                    s(:str, "            if [llength $map] {\n"),
                    s(:str, "              # return [eval [concat [list ::style element create [lindex $args 2] image [lindex $spec 0] -map $map] [lrange $args 5 end]]]\n"),
                    s(:str, "              return [uplevel 1 [list ::style element create [lindex $args 2] image [lindex $spec 0] -map $map] [lrange $args 5 end]]]\n"),
                    s(:str, "            }\n"),
                    s(:str, "          }\n"),
                    s(:str, "        } elseif [string equal [lindex $args 0] default] {\n"),
                    s(:str, "          # return [eval \"::style [lreplace $args 0 0 configure]\"]\n"),
                    s(:str, "          return [uplevel 1 ::style [lreplace $args 0 0 configure]]\n"),
                    s(:str, "        }\n"),
                    s(:str, "        # return [eval \"::style $args\"]\n"),
                    s(:str, "        return [uplevel 1 ::style $args]\n"))))))),
        s(:begin,
          s(:casgn, nil, :TkCommandNames,
            s(:send,
              s(:array,
                s(:send,
                  s(:str, "::ttk::style"), :freeze)), :freeze)),
          s(:def, :__define_wrapper_proc_for_compatibility__!,
            s(:args),
            s(:begin,
              s(:send, nil, :__define_themes_and_setTheme_proc__!),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk), :info,
                    s(:sym, :commands),
                    s(:str, "::style")), :empty?), nil,
                s(:begin,
                  s(:if,
                    s(:gvar, :$DEBUG),
                    s(:send, nil, :warn,
                      s(:str, "Warning: can't define '::style' command (already exist)")), nil),
                  s(:return))),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
                s(:str, "::style"),
                s(:str, "args"),
                s(:dstr,
                  s(:str, "        if [string equal [lrange $args 0 1] {element create}] {\n"),
                  s(:str, "          if [string equal [lindex $args 3] image] {\n"),
                  s(:str, "            set name [lindex $args 4]\n"),
                  s(:str, "            set opts [lrange $args 5 end]\n"),
                  s(:str, "            set idx [lsearch $opts -map]\n"),
                  s(:str, "            if {$idx >= 0 && [expr $idx % 2 == 0]} {\n"),
                  s(:str, "             # return [eval [concat [list ::ttk::style element create [lindex $args 2] image [concat $name [lindex $opts [expr $idx + 1]]]] [lreplace $opts $idx [expr $idx + 1]]]]\n"),
                  s(:str, "              return [uplevel 1 [list ::ttk::style element create [lindex $args 2] image [concat $name [lindex $opts [expr $idx + 1]]]] [lreplace $opts $idx [expr $idx + 1]]]\n"),
                  s(:str, "            }\n"),
                  s(:str, "          }\n"),
                  s(:str, "        } elseif [string equal [lindex $args 0] default] {\n"),
                  s(:str, "          # return [eval \"::ttk::style [lreplace $args 0 0 configure]\"]\n"),
                  s(:str, "          return [uplevel 1 ::ttk::style [lreplace $args 0 0 configure]]\n"),
                  s(:str, "        }\n"),
                  s(:str, "        # return [eval \"::ttk::style $args\"]\n"),
                  s(:str, "        return [uplevel 1 ::ttk::style $args]\n"))))))),
      s(:def, :__define_themes_and_setTheme_proc__!,
        s(:args),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
            s(:str, "::ttk::themes"),
            s(:str, "{ptn *}"),
            s(:dstr,
              s(:str, "      #set themes [list]\n"),
              s(:str, "      set themes [::ttk::style theme names]\n"),
              s(:str, "      foreach pkg [lsearch -inline -all -glob [package names] ttk::theme::$ptn] {\n"),
              s(:str, "          set theme [namespace tail $pkg]\n"),
              s(:str, "          if {[lsearch -exact $themes $theme] < 0} {\n"),
              s(:str, "              lappend themes $theme\n"),
              s(:str, "          }\n"),
              s(:str, "      }\n"),
              s(:str, "      foreach pkg [lsearch -inline -all -glob [package names] tile::theme::$ptn] {\n"),
              s(:str, "          set theme [namespace tail $pkg]\n"),
              s(:str, "          if {[lsearch -exact $themes $theme] < 0} {\n"),
              s(:str, "              lappend themes $theme\n"),
              s(:str, "          }\n"),
              s(:str, "      }\n"),
              s(:str, "      return $themes\n"))),
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
            s(:str, "::ttk::setTheme"),
            s(:str, "theme"),
            s(:dstr,
              s(:str, "      variable currentTheme\n"),
              s(:str, "      if {[lsearch -exact [::ttk::style theme names] $theme] < 0} {\n"),
              s(:str, "          package require [lsearch -inline -regexp [package names] (ttk|tile)::theme::$theme]\n"),
              s(:str, "      }\n"),
              s(:str, "      ::ttk::style theme use $theme\n"),
              s(:str, "      set currentTheme $theme\n"))))),
      s(:send, nil, :private,
        s(:sym, :__define_themes_and_setTheme_proc__!)),
      s(:def, :configure,
        s(:args,
          s(:optarg, :style,
            s(:nil)),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :style), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:lvar, :style)),
              s(:lvasgn, :style,
                s(:nil))), nil),
          s(:if,
            s(:lvar, :style), nil,
            s(:lvasgn, :style,
              s(:str, "."))),
          s(:if,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :<,
              s(:int, 7)),
            s(:lvasgn, :sub_cmd,
              s(:str, "default")),
            s(:lvasgn, :sub_cmd,
              s(:str, "configure"))),
          s(:if,
            s(:and,
              s(:lvar, :keys),
              s(:send,
                s(:lvar, :keys), :!=,
                s(:const, nil, :None))),
            s(:send, nil, :tk_call,
              s(:send,
                s(:const, nil, :TkCommandNames), :[],
                s(:int, 0)),
              s(:lvar, :sub_cmd),
              s(:lvar, :style),
              s(:splat,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys)))),
            s(:send, nil, :tk_call,
              s(:send,
                s(:const, nil, :TkCommandNames), :[],
                s(:int, 0)),
              s(:lvar, :sub_cmd),
              s(:lvar, :style))))),
      s(:alias,
        s(:sym, :default),
        s(:sym, :configure)),
      s(:def, :map,
        s(:args,
          s(:optarg, :style,
            s(:nil)),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :style), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:lvar, :style)),
              s(:lvasgn, :style,
                s(:nil))), nil),
          s(:if,
            s(:lvar, :style), nil,
            s(:lvasgn, :style,
              s(:str, "."))),
          s(:if,
            s(:and,
              s(:lvar, :keys),
              s(:send,
                s(:lvar, :keys), :!=,
                s(:const, nil, :None))),
            s(:if,
              s(:send,
                s(:lvar, :keys), :kind_of?,
                s(:const, nil, :Hash)),
              s(:send, nil, :tk_call,
                s(:send,
                  s(:const, nil, :TkCommandNames), :[],
                  s(:int, 0)),
                s(:str, "map"),
                s(:lvar, :style),
                s(:splat,
                  s(:send, nil, :hash_kv,
                    s(:lvar, :keys)))),
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "map"),
                  s(:lvar, :style),
                  s(:send,
                    s(:str, "-"), :<<,
                    s(:send,
                      s(:lvar, :keys), :to_s))))),
            s(:begin,
              s(:lvasgn, :ret,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Hash), :[],
                    s(:splat,
                      s(:begin,
                        s(:send, nil, :simplelist,
                          s(:send, nil, :tk_call,
                            s(:send,
                              s(:const, nil, :TkCommandNames), :[],
                              s(:int, 0)),
                            s(:str, "map"),
                            s(:lvar, :style)))))), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :ret), :[]=,
                  s(:send,
                    s(:lvar, :k), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1))),
                  s(:send, nil, :list,
                    s(:lvar, :v)))),
              s(:lvar, :ret))))),
      s(:alias,
        s(:sym, :map_configure),
        s(:sym, :map)),
      s(:def, :map_configinfo,
        s(:args,
          s(:optarg, :style,
            s(:nil)),
          s(:optarg, :key,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:lvar, :style), nil,
            s(:lvasgn, :style,
              s(:str, "."))),
          s(:send, nil, :map,
            s(:lvar, :style),
            s(:lvar, :key)))),
      s(:def, :map_default_configinfo,
        s(:args,
          s(:optarg, :key,
            s(:const, nil, :None))),
        s(:send, nil, :map,
          s(:str, "."),
          s(:lvar, :key))),
      s(:def, :lookup,
        s(:args,
          s(:arg, :style),
          s(:arg, :opt),
          s(:optarg, :state,
            s(:const, nil, :None)),
          s(:optarg, :fallback_value,
            s(:const, nil, :None))),
        s(:send, nil, :tk_call,
          s(:send,
            s(:const, nil, :TkCommandNames), :[],
            s(:int, 0)),
          s(:str, "lookup"),
          s(:lvar, :style),
          s(:send,
            s(:str, "-"), :<<,
            s(:send,
              s(:lvar, :opt), :to_s)),
          s(:lvar, :state),
          s(:lvar, :fallback_value))),
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :Tile), :ParseStyleLayout)),
      s(:def, :layout,
        s(:args,
          s(:optarg, :style,
            s(:nil)),
          s(:optarg, :spec,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :style), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :spec,
                s(:lvar, :style)),
              s(:lvasgn, :style,
                s(:nil))), nil),
          s(:if,
            s(:lvar, :style), nil,
            s(:lvasgn, :style,
              s(:str, "."))),
          s(:if,
            s(:lvar, :spec),
            s(:send, nil, :tk_call,
              s(:send,
                s(:const, nil, :TkCommandNames), :[],
                s(:int, 0)),
              s(:str, "layout"),
              s(:lvar, :style),
              s(:lvar, :spec)),
            s(:send, nil, :_style_layout,
              s(:send, nil, :list,
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "layout"),
                  s(:lvar, :style))))))),
      s(:def, :element_create,
        s(:args,
          s(:arg, :name),
          s(:arg, :type),
          s(:restarg, :args)),
        s(:if,
          s(:or,
            s(:send,
              s(:lvar, :type), :==,
              s(:str, "image")),
            s(:send,
              s(:lvar, :type), :==,
              s(:sym, :image))),
          s(:send, nil, :element_create_image,
            s(:lvar, :name),
            s(:splat,
              s(:lvar, :args))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :type), :==,
                s(:str, "vsapi")),
              s(:send,
                s(:lvar, :type), :==,
                s(:sym, :vsapi))),
            s(:send, nil, :element_create_vsapi,
              s(:lvar, :name),
              s(:splat,
                s(:lvar, :args))),
            s(:send, nil, :tk_call,
              s(:send,
                s(:const, nil, :TkCommandNames), :[],
                s(:int, 0)),
              s(:str, "element"),
              s(:str, "create"),
              s(:lvar, :name),
              s(:lvar, :type),
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :element_create_image,
        s(:args,
          s(:arg, :name),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:begin,
              s(:lvasgn, :spec,
                s(:send,
                  s(:lvar, :args), :shift))), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "Must supply a base image"))),
          s(:if,
            s(:begin,
              s(:lvasgn, :opts,
                s(:send,
                  s(:lvar, :args), :shift))),
            s(:if,
              s(:send,
                s(:lvar, :opts), :kind_of?,
                s(:const, nil, :Hash)),
              s(:lvasgn, :opts,
                s(:send, nil, :_symbolkey2str,
                  s(:lvar, :opts))),
              s(:send, nil, :fail,
                s(:const, nil, :ArgumentError),
                s(:str, "bad option"))), nil),
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "too many arguments"))),
          s(:if,
            s(:send,
              s(:lvar, :spec), :kind_of?,
              s(:const, nil, :Array)),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :>=,
                s(:int, 8)),
              s(:if,
                s(:lvar, :opts),
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "element"),
                  s(:str, "create"),
                  s(:lvar, :name),
                  s(:str, "image"),
                  s(:lvar, :spec),
                  s(:lvar, :opts)),
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "element"),
                  s(:str, "create"),
                  s(:lvar, :name),
                  s(:str, "image"),
                  s(:lvar, :spec))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :opts), :key?,
                    s(:str, "map")),
                  s(:send, nil, :fail,
                    s(:const, nil, :ArgumentError),
                    s(:str, "illegal arguments")), nil),
                s(:lvasgn, :base,
                  s(:send,
                    s(:lvar, :spec), :shift)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:str, "map"),
                  s(:lvar, :spec)),
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "element"),
                  s(:str, "create"),
                  s(:lvar, :name),
                  s(:str, "image"),
                  s(:lvar, :base),
                  s(:lvar, :opts)))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :>=,
                  s(:int, 8)),
                s(:if,
                  s(:send,
                    s(:lvar, :opts), :key?,
                    s(:str, "map")),
                  s(:lvasgn, :spec,
                    s(:array,
                      s(:lvar, :spec),
                      s(:splat,
                        s(:begin,
                          s(:send,
                            s(:lvar, :opts), :delete,
                            s(:str, "map")))))), nil), nil),
              s(:if,
                s(:lvar, :opts),
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "element"),
                  s(:str, "create"),
                  s(:lvar, :name),
                  s(:str, "image"),
                  s(:lvar, :spec),
                  s(:lvar, :opts)),
                s(:send, nil, :tk_call,
                  s(:send,
                    s(:const, nil, :TkCommandNames), :[],
                    s(:int, 0)),
                  s(:str, "element"),
                  s(:str, "create"),
                  s(:lvar, :name),
                  s(:str, "image"),
                  s(:lvar, :spec))))))),
      s(:def, :element_create_vsapi,
        s(:args,
          s(:arg, :name),
          s(:arg, :class_name),
          s(:arg, :part_id),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:begin,
              s(:lvasgn, :state_map,
                s(:or,
                  s(:send,
                    s(:lvar, :args), :shift),
                  s(:const, nil, :None)))),
            s(:if,
              s(:send,
                s(:lvar, :state_map), :kind_of?,
                s(:const, nil, :Hash)),
              s(:begin,
                s(:lvasgn, :opts,
                  s(:send, nil, :_symbolkey2str,
                    s(:lvar, :state_map))),
                s(:lvasgn, :state_map,
                  s(:const, nil, :None))), nil), nil),
          s(:lvasgn, :opts,
            s(:or,
              s(:send,
                s(:lvar, :args), :shift),
              s(:const, nil, :None))),
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "too many arguments"))),
          s(:send, nil, :tk_call,
            s(:send,
              s(:const, nil, :TkCommandNames), :[],
              s(:int, 0)),
            s(:str, "element"),
            s(:str, "create"),
            s(:lvar, :name),
            s(:str, "vsapi"),
            s(:lvar, :class_name),
            s(:lvar, :part_id),
            s(:lvar, :state_map),
            s(:lvar, :opts)))),
      s(:def, :element_names,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_call,
            s(:send,
              s(:const, nil, :TkCommandNames), :[],
              s(:int, 0)),
            s(:str, "element"),
            s(:str, "names")))),
      s(:def, :element_options,
        s(:args,
          s(:arg, :elem)),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_call,
            s(:send,
              s(:const, nil, :TkCommandNames), :[],
              s(:int, 0)),
            s(:str, "element"),
            s(:str, "options"),
            s(:lvar, :elem)))),
      s(:def, :theme_create,
        s(:args,
          s(:arg, :name),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :name), :to_s)),
          s(:if,
            s(:and,
              s(:lvar, :keys),
              s(:send,
                s(:lvar, :keys), :!=,
                s(:const, nil, :None))),
            s(:send, nil, :tk_call,
              s(:send,
                s(:const, nil, :TkCommandNames), :[],
                s(:int, 0)),
              s(:str, "theme"),
              s(:str, "create"),
              s(:lvar, :name),
              s(:splat,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys)))),
            s(:send, nil, :tk_call,
              s(:send,
                s(:const, nil, :TkCommandNames), :[],
                s(:int, 0)),
              s(:str, "theme"),
              s(:str, "create"),
              s(:lvar, :name))),
          s(:lvar, :name))),
      s(:def, :theme_settings,
        s(:args,
          s(:arg, :name),
          s(:optarg, :cmd,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :name), :to_s)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :cmd), :!),
              s(:lvar, :b)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new,
                s(:block_pass,
                  s(:lvar, :b)))), nil),
          s(:send, nil, :tk_call,
            s(:send,
              s(:const, nil, :TkCommandNames), :[],
              s(:int, 0)),
            s(:str, "theme"),
            s(:str, "settings"),
            s(:lvar, :name),
            s(:lvar, :cmd)),
          s(:lvar, :name))),
      s(:def, :theme_names,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_call,
            s(:send,
              s(:const, nil, :TkCommandNames), :[],
              s(:int, 0)),
            s(:str, "theme"),
            s(:str, "names")))),
      s(:def, :theme_use,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :name), :to_s)),
          s(:send, nil, :tk_call,
            s(:send,
              s(:const, nil, :TkCommandNames), :[],
              s(:int, 0)),
            s(:str, "theme"),
            s(:str, "use"),
            s(:lvar, :name)),
          s(:lvar, :name))))))
