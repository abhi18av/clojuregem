s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/setup.rb")),
  s(:send, nil, :require,
    s(:str, "tkextlib/treectrl/setup.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "treectrl")),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:class,
        s(:const, nil, :TreeCtrl),
        s(:const, nil, :TkWindow),
        s(:begin,
          s(:casgn, nil, :BindTag_FileList,
            s(:send,
              s(:const, nil, :TkBindTag), :new_by_name,
              s(:str, "TreeCtrlFileList"))),
          s(:casgn, nil, :PACKAGE_NAME,
            s(:send,
              s(:str, "treectrl"), :freeze)),
          s(:defs,
            s(:self), :package_name,
            s(:args),
            s(:const, nil, :PACKAGE_NAME)),
          s(:defs,
            s(:self), :package_version,
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :TkPackage), :require,
                  s(:str, "treectrl")),
                s(:resbody, nil, nil,
                  s(:str, "")), nil))),
          s(:casgn, nil, :HasColumnCreateCommand,
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :TkPackage), :vcompare,
                  s(:send,
                    s(:self), :package_version),
                  s(:str, "1.1")), :>=,
                s(:int, 0)))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :tk_call,
                s(:str, "treectrl")),
              s(:resbody, nil, nil, nil), nil)),
          s(:defs,
            s(:self), :loupe,
            s(:args,
              s(:arg, :img),
              s(:arg, :x),
              s(:arg, :y),
              s(:arg, :w),
              s(:arg, :h),
              s(:arg, :zoom)),
            s(:send,
              s(:const, nil, :Tk), :tk_call_without_enc,
              s(:str, "loupe"),
              s(:lvar, :img),
              s(:lvar, :x),
              s(:lvar, :y),
              s(:lvar, :w),
              s(:lvar, :h),
              s(:lvar, :zoom))),
          s(:defs,
            s(:self), :text_layout,
            s(:args,
              s(:arg, :font),
              s(:arg, :text),
              s(:optarg, :keys,
                s(:hash))),
            s(:send,
              s(:const, nil, :TkComm), :list,
              s(:send,
                s(:const, nil, :Tk), :tk_call_without_enc,
                s(:str, "textlayout"),
                s(:lvar, :font),
                s(:lvar, :text),
                s(:lvar, :keys)))),
          s(:defs,
            s(:self), :image_tint,
            s(:args,
              s(:arg, :img),
              s(:arg, :color),
              s(:arg, :alpha)),
            s(:send,
              s(:const, nil, :Tk), :tk_call_without_enc,
              s(:str, "imagetint"),
              s(:lvar, :img),
              s(:lvar, :color),
              s(:lvar, :alpha))),
          s(:class,
            s(:const, nil, :NotifyEvent),
            s(:const,
              s(:const, nil, :TkUtil), :CallbackSubst), nil),
          s(:module,
            s(:const, nil, :ConfigMethod), nil))),
      s(:casgn, nil, :TreeCtrl_Widget,
        s(:const, nil, :TreeCtrl)))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :NotifyEvent), nil,
    s(:begin,
      s(:casgn, nil, :KEY_TBL,
        s(:array,
          s(:array,
            s(:str, "c"),
            s(:str, "n"),
            s(:sym, :item_num)),
          s(:array,
            s(:str, "d"),
            s(:str, "s"),
            s(:sym, :detail)),
          s(:array,
            s(:str, "D"),
            s(:str, "l"),
            s(:sym, :items)),
          s(:array,
            s(:str, "e"),
            s(:str, "e"),
            s(:sym, :event)),
          s(:array,
            s(:str, "I"),
            s(:str, "n"),
            s(:sym, :id)),
          s(:array,
            s(:str, "l"),
            s(:str, "n"),
            s(:sym, :lower_bound)),
          s(:array,
            s(:str, "p"),
            s(:str, "n"),
            s(:sym, :active_id)),
          s(:array,
            s(:str, "P"),
            s(:str, "e"),
            s(:sym, :pattern)),
          s(:array,
            s(:str, "S"),
            s(:str, "l"),
            s(:sym, :sel_items)),
          s(:array,
            s(:str, "T"),
            s(:str, "w"),
            s(:sym, :widget)),
          s(:array,
            s(:str, "u"),
            s(:str, "n"),
            s(:sym, :upper_bound)),
          s(:array,
            s(:str, "W"),
            s(:str, "o"),
            s(:sym, :object)),
          s(:array,
            s(:str, "?"),
            s(:str, "x"),
            s(:sym, :parm_info)),
          s(:nil))),
      s(:casgn, nil, :PROC_TBL,
        s(:array,
          s(:array,
            s(:str, "n"),
            s(:send,
              s(:const, nil, :TkComm), :method,
              s(:sym, :num_or_str))),
          s(:array,
            s(:str, "s"),
            s(:send,
              s(:const, nil, :TkComm), :method,
              s(:sym, :string))),
          s(:array,
            s(:str, "l"),
            s(:send,
              s(:const, nil, :TkComm), :method,
              s(:sym, :list))),
          s(:array,
            s(:str, "w"),
            s(:send,
              s(:const, nil, :TkComm), :method,
              s(:sym, :window))),
          s(:array,
            s(:str, "e"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :val)),
              s(:case,
                s(:lvar, :val),
                s(:when,
                  s(:regexp,
                    s(:str, "^<<[^<>]+>>$"),
                    s(:regopt)),
                  s(:send,
                    s(:const, nil, :TkVirtualEvent), :getobj,
                    s(:send,
                      s(:lvar, :val), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -2))))),
                s(:when,
                  s(:regexp,
                    s(:str, "^<[^<>]+>$"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :val), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -2)))),
                s(:lvar, :val)))),
          s(:array,
            s(:str, "o"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :val)),
              s(:send,
                s(:const, nil, :TkComm), :tk_tcl2ruby,
                s(:lvar, :val)))),
          s(:array,
            s(:str, "x"),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :val)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :inf,
                      s(:hash)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Hash), :[],
                          s(:splat,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :TkComm), :list,
                                s(:lvar, :val))))), :each),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v)),
                      s(:begin,
                        s(:if,
                          s(:lvasgn, :keyinfo,
                            s(:send,
                              s(:const, nil, :KEY_TBL), :assoc,
                              s(:send,
                                s(:lvar, :k), :[],
                                s(:int, 0)))),
                          s(:if,
                            s(:lvasgn, :cmd,
                              s(:send,
                                s(:const, nil, :PROC_TBL), :assoc,
                                s(:send,
                                  s(:lvar, :keyinfo), :[],
                                  s(:int, 1)))),
                            s(:kwbegin,
                              s(:rescue,
                                s(:begin,
                                  s(:lvasgn, :new_v,
                                    s(:send,
                                      s(:lvar, :cmd), :call,
                                      s(:lvar, :v))),
                                  s(:lvasgn, :v,
                                    s(:lvar, :new_v))),
                                s(:resbody, nil, nil, nil), nil)), nil), nil),
                        s(:send,
                          s(:lvar, :inf), :[]=,
                          s(:lvar, :k),
                          s(:lvar, :v)))),
                    s(:lvar, :inf)),
                  s(:resbody, nil, nil,
                    s(:lvar, :val)), nil)))),
          s(:nil))),
      s(:send, nil, :_setup_subst_table,
        s(:const, nil, :KEY_TBL),
        s(:const, nil, :PROC_TBL)))),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :ConfigMethod),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :treectrl_tagid,
        s(:args,
          s(:arg, :key),
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :key), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :key,
              s(:send,
                s(:lvar, :key), :join,
                s(:str, " "))),
            s(:lvasgn, :key,
              s(:send,
                s(:lvar, :key), :to_s))),
          s(:if,
            s(:begin,
              s(:or,
                s(:or,
                  s(:or,
                    s(:send,
                      s(:lvar, :obj), :kind_of?,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Column)),
                    s(:send,
                      s(:lvar, :obj), :kind_of?,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Element))),
                  s(:send,
                    s(:lvar, :obj), :kind_of?,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Item))),
                s(:send,
                  s(:lvar, :obj), :kind_of?,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style)))),
            s(:lvasgn, :obj,
              s(:send,
                s(:lvar, :obj), :id)), nil),
          s(:case,
            s(:lvar, :key),
            s(:when,
              s(:str, "column"),
              s(:lvar, :obj)),
            s(:when,
              s(:str, "debug"),
              s(:const, nil, :None)),
            s(:when,
              s(:str, "dragimage"),
              s(:const, nil, :None)),
            s(:when,
              s(:str, "element"),
              s(:lvar, :obj)),
            s(:when,
              s(:str, "item element"),
              s(:lvar, :obj)),
            s(:when,
              s(:str, "marquee"),
              s(:const, nil, :None)),
            s(:when,
              s(:str, "notify"),
              s(:lvar, :obj)),
            s(:when,
              s(:str, "style"),
              s(:lvar, :obj)),
            s(:lvar, :obj)))),
      s(:def, :tagid,
        s(:args,
          s(:arg, :mixed_id)),
        s(:if,
          s(:send,
            s(:lvar, :mixed_id), :==,
            s(:str, "debug")),
          s(:array,
            s(:str, "debug"),
            s(:const, nil, :None)),
          s(:if,
            s(:send,
              s(:lvar, :mixed_id), :==,
              s(:str, "dragimage")),
            s(:array,
              s(:str, "dragimage"),
              s(:const, nil, :None)),
            s(:if,
              s(:send,
                s(:lvar, :mixed_id), :==,
                s(:str, "marquee")),
              s(:array,
                s(:str, "marquee"),
                s(:const, nil, :None)),
              s(:if,
                s(:send,
                  s(:lvar, :mixed_id), :kind_of?,
                  s(:const, nil, :Array)),
                s(:array,
                  s(:send,
                    s(:lvar, :mixed_id), :[],
                    s(:int, 0)),
                  s(:send, nil, :treectrl_tagid,
                    s(:splat,
                      s(:lvar, :mixed_id)))),
                s(:send, nil, :tagid,
                  s(:send,
                    s(:lvar, :mixed_id), :split,
                    s(:str, ":")))))))),
      s(:def, :__item_cget_cmd,
        s(:args,
          s(:arg, :mixed_id)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 0)), :==,
                s(:str, "column")),
              s(:send,
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 1)), :==,
                s(:str, "drag"))),
            s(:return,
              s(:array,
                s(:send,
                  s(:self), :path),
                s(:str, "column"),
                s(:str, "dragcget"))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :mixed_id), :[],
                s(:int, 1)), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :id,
              s(:send,
                s(:lvar, :mixed_id), :[],
                s(:int, 1))),
            s(:lvasgn, :id,
              s(:array,
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 1))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :mixed_id), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:self), :path)), :concat,
                    s(:send,
                      s(:lvar, :mixed_id), :[],
                      s(:int, 0))), :<<,
                  s(:str, "cget"))), :concat,
              s(:lvar, :id)),
            s(:send,
              s(:array,
                s(:send,
                  s(:self), :path),
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 0)),
                s(:str, "cget")), :concat,
              s(:lvar, :id))))),
      s(:send, nil, :private,
        s(:sym, :__item_cget_cmd)),
      s(:def, :__item_config_cmd,
        s(:args,
          s(:arg, :mixed_id)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 0)), :==,
                s(:str, "column")),
              s(:send,
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 1)), :==,
                s(:str, "drag"))),
            s(:return,
              s(:array,
                s(:send,
                  s(:self), :path),
                s(:str, "column"),
                s(:str, "dragconfigure"))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :mixed_id), :[],
                s(:int, 1)), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :id,
              s(:send,
                s(:lvar, :mixed_id), :[],
                s(:int, 1))),
            s(:lvasgn, :id,
              s(:array,
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 1))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :mixed_id), :[],
                s(:int, 0)), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:self), :path)), :concat,
                    s(:send,
                      s(:lvar, :mixed_id), :[],
                      s(:int, 0))), :<<,
                  s(:str, "configure"))), :concat,
              s(:lvar, :id)),
            s(:send,
              s(:array,
                s(:send,
                  s(:self), :path),
                s(:send,
                  s(:lvar, :mixed_id), :[],
                  s(:int, 0)),
                s(:str, "configure")), :concat,
              s(:lvar, :id))))),
      s(:send, nil, :private,
        s(:sym, :__item_config_cmd)),
      s(:def, :__item_pathname,
        s(:args,
          s(:arg, :id)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :id), :kind_of?,
              s(:const, nil, :Array)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :id), :[],
                  s(:int, 0))),
              s(:if,
                s(:send,
                  s(:lvar, :key), :kind_of?,
                  s(:const, nil, :Array)),
                s(:lvasgn, :key,
                  s(:send,
                    s(:lvar, :key), :join,
                    s(:str, " "))), nil),
              s(:lvasgn, :tag,
                s(:send,
                  s(:lvar, :id), :[],
                  s(:int, 1))),
              s(:if,
                s(:send,
                  s(:lvar, :tag), :kind_of?,
                  s(:const, nil, :Array)),
                s(:lvasgn, :tag,
                  s(:send,
                    s(:lvar, :tag), :join,
                    s(:str, " "))), nil),
              s(:lvasgn, :id,
                s(:send,
                  s(:array,
                    s(:lvar, :key),
                    s(:lvar, :tag)), :join,
                  s(:str, ":")))), nil),
          s(:send,
            s(:array,
              s(:send,
                s(:self), :path),
              s(:lvar, :id)), :join,
            s(:str, ";")))),
      s(:send, nil, :private,
        s(:sym, :__item_pathname)),
      s(:def, :__item_configinfo_struct,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :id), :kind_of?,
              s(:const, nil, :Array)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :id), :[],
                  s(:int, 0)), :to_s), :==,
              s(:str, "notify"))),
          s(:hash,
            s(:pair,
              s(:sym, :key),
              s(:int, 0)),
            s(:pair,
              s(:sym, :alias),
              s(:nil)),
            s(:pair,
              s(:sym, :db_name),
              s(:nil)),
            s(:pair,
              s(:sym, :db_class),
              s(:nil)),
            s(:pair,
              s(:sym, :default_value),
              s(:nil)),
            s(:pair,
              s(:sym, :current_value),
              s(:int, 1))),
          s(:hash,
            s(:pair,
              s(:sym, :key),
              s(:int, 0)),
            s(:pair,
              s(:sym, :alias),
              s(:int, 1)),
            s(:pair,
              s(:sym, :db_name),
              s(:int, 1)),
            s(:pair,
              s(:sym, :db_class),
              s(:int, 2)),
            s(:pair,
              s(:sym, :default_value),
              s(:int, 3)),
            s(:pair,
              s(:sym, :current_value),
              s(:int, 4))))),
      s(:send, nil, :private,
        s(:sym, :__item_configinfo_struct)),
      s(:def, :__item_font_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :id), :kind_of?,
              s(:const, nil, :Array)),
            s(:begin,
              s(:or,
                s(:send,
                  s(:send,
                    s(:lvar, :id), :[],
                    s(:int, 0)), :==,
                  s(:str, "element")),
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :id), :[],
                        s(:int, 0)), :kind_of?,
                      s(:const, nil, :Array)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :id), :[],
                          s(:int, 0)), :[],
                        s(:int, 1)), :==,
                      s(:str, "element"))))))),
          s(:array),
          s(:array,
            s(:str, "font")))),
      s(:send, nil, :private,
        s(:sym, :__item_font_optkeys)),
      s(:def, :__item_numstrval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:lvar, :id), :==,
            s(:str, "debug")),
          s(:array,
            s(:str, "displaydelay")),
          s(:super,
            s(:lvar, :id)))),
      s(:send, nil, :private,
        s(:sym, :__item_numstrval_optkeys)),
      s(:def, :__item_boolval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:lvar, :id), :==,
            s(:str, "debug")),
          s(:array,
            s(:str, "data"),
            s(:str, "display"),
            s(:str, "enable"),
            s(:str, "span"),
            s(:str, "textlayout")),
          s(:if,
            s(:send,
              s(:lvar, :id), :==,
              s(:str, "dragimage")),
            s(:array,
              s(:str, "visible")),
            s(:if,
              s(:send,
                s(:lvar, :id), :==,
                s(:str, "marquee")),
              s(:array,
                s(:str, "visible")),
              s(:if,
                s(:send,
                  s(:lvar, :id), :kind_of?,
                  s(:const, nil, :Array)),
                s(:case,
                  s(:send,
                    s(:lvar, :id), :[],
                    s(:int, 0)),
                  s(:when,
                    s(:str, "item"),
                    s(:array,
                      s(:str, "visible"),
                      s(:str, "wrap"),
                      s(:str, "open"),
                      s(:str, "returnid"),
                      s(:str, "visible"))),
                  s(:when,
                    s(:str, "column"),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :id), :[],
                          s(:int, 1)), :==,
                        s(:str, "drag")),
                      s(:array,
                        s(:str, "enable")),
                      s(:array,
                        s(:str, "button"),
                        s(:str, "expand"),
                        s(:str, "resize"),
                        s(:str, "squeeze"),
                        s(:str, "sunken"),
                        s(:str, "visible"),
                        s(:str, "widthhack")))),
                  s(:when,
                    s(:str, "element"),
                    s(:array,
                      s(:str, "draw"),
                      s(:str, "filled"),
                      s(:str, "showfocus"),
                      s(:str, "clip"),
                      s(:str, "destroy"))),
                  s(:when,
                    s(:str, "notify"),
                    s(:array,
                      s(:str, "active"))),
                  s(:when,
                    s(:str, "style"),
                    s(:array,
                      s(:str, "detach"),
                      s(:str, "indent"),
                      s(:str, "visible"))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :id), :[],
                          s(:int, 0)), :kind_of?,
                        s(:const, nil, :Array)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :id), :[],
                            s(:int, 0)), :[],
                          s(:int, 1)), :==,
                        s(:str, "element"))),
                    s(:array,
                      s(:str, "filled"),
                      s(:str, "showfocus")),
                    s(:super,
                      s(:lvar, :id)))),
                s(:super,
                  s(:lvar, :id))))))),
      s(:send, nil, :private,
        s(:sym, :__item_boolval_optkeys)),
      s(:def, :__item_strval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:lvar, :id), :==,
            s(:str, "debug")),
          s(:array,
            s(:str, "erasecolor")),
          s(:if,
            s(:send,
              s(:lvar, :id), :kind_of?,
              s(:const, nil, :Array)),
            s(:case,
              s(:send,
                s(:lvar, :id), :[],
                s(:int, 0)),
              s(:when,
                s(:str, "column"),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :id), :[],
                      s(:int, 1)), :==,
                    s(:str, "drag")),
                  s(:array,
                    s(:str, "indicatorcolor")),
                  s(:send,
                    s(:super,
                      s(:lvar, :id)), :<<,
                    s(:str, "textcolor")))),
              s(:when,
                s(:str, "element"),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:super,
                        s(:lvar, :id)), :<<,
                      s(:str, "fill")), :<<,
                    s(:str, "outline")), :<<,
                  s(:str, "format"))),
              s(:super,
                s(:lvar, :id))),
            s(:super,
              s(:lvar, :id))))),
      s(:send, nil, :private,
        s(:sym, :__item_strval_optkeys)),
      s(:def, :__item_listval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:lvar, :id), :kind_of?,
            s(:const, nil, :Array)),
          s(:case,
            s(:send,
              s(:lvar, :id), :[],
              s(:int, 0)),
            s(:when,
              s(:str, "column"),
              s(:array,
                s(:str, "itembackground"))),
            s(:when,
              s(:str, "element"),
              s(:array,
                s(:str, "relief"))),
            s(:when,
              s(:str, "style"),
              s(:array,
                s(:str, "union"))),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :id), :[],
                    s(:int, 0)), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :id), :[],
                      s(:int, 0)), :[],
                    s(:int, 1)), :==,
                  s(:str, "element"))),
              s(:array,
                s(:str, "relief")),
              s(:array))),
          s(:array))),
      s(:send, nil, :private,
        s(:sym, :__item_listval_optkeys)),
      s(:def, :__item_val2ruby_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:lvar, :id), :kind_of?,
            s(:const, nil, :Array)),
          s(:case,
            s(:send,
              s(:lvar, :id), :[],
              s(:int, 0)),
            s(:when,
              s(:str, "item"),
              s(:hash,
                s(:pair,
                  s(:str, "button"),
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :id),
                      s(:arg, :val)),
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:lvar, :val), :==,
                          s(:str, "auto"))),
                      s(:lvar, :val),
                      s(:send,
                        s(:const, nil, :TkComm), :bool,
                        s(:lvar, :val))))))),
            s(:array)),
          s(:array))),
      s(:send, nil, :private,
        s(:sym, :__item_val2ruby_optkeys)),
      s(:def, :__item_keyonly_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:hash,
          s(:pair,
            s(:str, "notreally"),
            s(:nil)),
          s(:pair,
            s(:str, "increasing"),
            s(:str, "decreasing")),
          s(:pair,
            s(:str, "decreasing"),
            s(:str, "increasing")),
          s(:pair,
            s(:str, "ascii"),
            s(:nil)),
          s(:pair,
            s(:str, "dictionary"),
            s(:nil)),
          s(:pair,
            s(:str, "integer"),
            s(:nil)),
          s(:pair,
            s(:str, "real"),
            s(:nil)))),
      s(:send, nil, :private,
        s(:sym, :__item_keyonly_optkeys)),
      s(:def, :column_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :column_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :column_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :column_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :column_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_column_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :column_dragcget_tkstring,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "column"),
            s(:str, "drag")),
          s(:lvar, :option))),
      s(:def, :column_dragcget,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "column"),
            s(:str, "drag")),
          s(:lvar, :option))),
      s(:def, :column_dragcget_strict,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "column"),
            s(:str, "drag")),
          s(:lvar, :option))),
      s(:def, :column_dragconfigure,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "column"),
            s(:str, "drag")),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :column_dragconfiginfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "column"),
            s(:str, "drag")),
          s(:lvar, :slot))),
      s(:def, :current_column_dragconfiginfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "column"),
            s(:str, "drag")),
          s(:lvar, :slot))),
      s(:def, :debug_cget_tkstring,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:str, "debug"),
          s(:lvar, :option))),
      s(:def, :debug_cget,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:str, "debug"),
          s(:lvar, :option))),
      s(:def, :debug_cget_strict,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:str, "debug"),
          s(:lvar, :option))),
      s(:def, :debug_configure,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:str, "debug"),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :debug_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:str, "debug"),
          s(:lvar, :slot))),
      s(:def, :current_debug_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:str, "debug"),
          s(:lvar, :slot))),
      s(:def, :dragimage_cget_tkstring,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:str, "dragimage"),
          s(:lvar, :option))),
      s(:def, :dragimage_cget,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:str, "dragimage"),
          s(:lvar, :option))),
      s(:def, :dragimage_cget_strict,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:str, "dragimage"),
          s(:lvar, :option))),
      s(:def, :dragimage_configure,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:str, "dragimage"),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :dragimage_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:str, "dragimage"),
          s(:lvar, :slot))),
      s(:def, :current_dragimage_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:str, "dragimage"),
          s(:lvar, :slot))),
      s(:def, :element_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "element"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :element_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "element"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :element_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "element"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :element_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "element"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :element_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "element"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_element_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "element"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :item_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "item"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :item_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "item"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :item_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "item"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :item_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "item"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :item_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "item"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_item_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "item"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :item_element_cget_tkstring,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:array,
              s(:str, "item"),
              s(:str, "element")),
            s(:array,
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :elem))),
          s(:lvar, :option))),
      s(:def, :item_element_cget,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:array,
              s(:str, "item"),
              s(:str, "element")),
            s(:array,
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :elem))),
          s(:lvar, :option))),
      s(:def, :item_element_cget_strict,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:array,
              s(:str, "item"),
              s(:str, "element")),
            s(:array,
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :elem))),
          s(:lvar, :option))),
      s(:def, :item_element_configure,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:array,
              s(:str, "item"),
              s(:str, "element")),
            s(:array,
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :elem))),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :item_element_configinfo,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:array,
              s(:str, "item"),
              s(:str, "element")),
            s(:array,
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :elem))),
          s(:lvar, :slot))),
      s(:def, :current_item_element_configinfo,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:array,
              s(:str, "item"),
              s(:str, "element")),
            s(:array,
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :elem))),
          s(:lvar, :slot))),
      s(:def, :marquee_cget_tkstring,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:str, "marquee"),
          s(:lvar, :option))),
      s(:def, :marquee_cget,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:str, "marquee"),
          s(:lvar, :option))),
      s(:def, :marquee_cget_strict,
        s(:args,
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:str, "marquee"),
          s(:lvar, :option))),
      s(:def, :marquee_configure,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:str, "marquee"),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :marquee_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:str, "marquee"),
          s(:lvar, :slot))),
      s(:def, :current_marquee_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:str, "marquee"),
          s(:lvar, :slot))),
      s(:def, :notify_cget_tkstring,
        s(:args,
          s(:arg, :win),
          s(:arg, :pattern),
          s(:arg, :option)),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_call_without_enc,
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :__item_confinfo_cmd,
                        s(:send, nil, :tagid,
                          s(:array,
                            s(:str, "notify"),
                            s(:array,
                              s(:lvar, :win),
                              s(:lvar, :pattern))))), :<<,
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :option))))))),
              s(:false),
              s(:true)), :[],
            s(:int, -1)))),
      s(:def, :notify_cget,
        s(:args,
          s(:arg, :win),
          s(:arg, :pattern),
          s(:arg, :option)),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send,
            s(:send, nil, :current_itemconfiginfo,
              s(:array,
                s(:str, "notify"),
                s(:array,
                  s(:lvar, :win),
                  s(:lvar, :pattern)))), :[],
            s(:send,
              s(:lvar, :option), :to_s)))),
      s(:def, :notify_cget_strict,
        s(:args,
          s(:arg, :win),
          s(:arg, :pattern),
          s(:arg, :option)),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:lvasgn, :info,
            s(:send, nil, :current_itemconfiginfo,
              s(:array,
                s(:str, "notify"),
                s(:array,
                  s(:lvar, :win),
                  s(:lvar, :pattern))))),
          s(:lvasgn, :option,
            s(:send,
              s(:lvar, :option), :to_s)),
          s(:if,
            s(:send,
              s(:lvar, :info), :has_key?,
              s(:lvar, :option)),
            s(:send,
              s(:lvar, :info), :[],
              s(:lvar, :option)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:dstr,
                s(:str, "unknown option \""),
                s(:begin,
                  s(:lvar, :option)),
                s(:str, "\"")))))),
      s(:def, :notify_configure,
        s(:args,
          s(:arg, :win),
          s(:arg, :pattern),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send, nil, :itemconfigure,
            s(:array,
              s(:str, "notify"),
              s(:array,
                s(:lvar, :win),
                s(:lvar, :pattern))),
            s(:lvar, :slot),
            s(:lvar, :value)))),
      s(:def, :notify_configinfo,
        s(:args,
          s(:arg, :win),
          s(:arg, :pattern),
          s(:optarg, :slot,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send, nil, :itemconfiginfo,
            s(:array,
              s(:str, "notify"),
              s(:array,
                s(:lvar, :win),
                s(:lvar, :pattern))),
            s(:lvar, :slot)))),
      s(:def, :current_notify_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send, nil, :current_itemconfiginfo,
            s(:array,
              s(:str, "notify"),
              s(:array,
                s(:send, nil, :win),
                s(:lvar, :pattern))),
            s(:lvar, :slot)))),
      s(:def, :style_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "style"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :style_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "style"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :style_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "style"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :style_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "style"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :style_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "style"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_style_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "style"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:send, nil, :private,
        s(:sym, :itemcget_tkstring),
        s(:sym, :itemcget),
        s(:sym, :itemcget_strict)),
      s(:send, nil, :private,
        s(:sym, :itemconfigure),
        s(:sym, :itemconfiginfo),
        s(:sym, :current_itemconfiginfo)))),
  s(:class,
    s(:const,
      s(:const, nil, :Tk), :TreeCtrl), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :TreeCtrl), :ConfigMethod)),
      s(:send, nil, :include,
        s(:const, nil, :Scrollable)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "treectrl"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "TreeCtrl"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :__destroy_hook__,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :delete,
              s(:ivar, :@path))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :delete,
              s(:ivar, :@path))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :delete,
              s(:ivar, :@path))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :mutex), :synchronize),
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :delete,
              s(:ivar, :@path))))),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "buttoncolor"),
            s(:str, "columnprefix"),
            s(:str, "itemprefix"),
            s(:str, "linecolor")))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:array,
          s(:str, "itemwidthequal"),
          s(:str, "usetheme"),
          s(:str, "showbuttons"),
          s(:str, "showheader"),
          s(:str, "showlines"),
          s(:str, "showroot"),
          s(:str, "showrootbutton"),
          s(:str, "showrootlines"),
          s(:str, "showrootchildbuttons"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :__listval_optkeys,
        s(:args),
        s(:array,
          s(:str, "defaultstyle"))),
      s(:send, nil, :private,
        s(:sym, :__listval_optkeys)),
      s(:def, :install_bind,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:send, nil, :install_bind_for_event_class,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :TreeCtrl), :NotifyEvent),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :activate,
        s(:args,
          s(:arg, :desc)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "activate"),
            s(:lvar, :desc)),
          s(:self))),
      s(:def, :canvasx,
        s(:args,
          s(:arg, :x)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "canvasx"),
            s(:lvar, :x)))),
      s(:def, :canvasy,
        s(:args,
          s(:arg, :y)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "canvasy"),
            s(:lvar, :y)))),
      s(:def, :collapse,
        s(:args,
          s(:restarg, :dsc)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "collapse"),
            s(:splat,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :dsc), :map!),
                  s(:args,
                    s(:arg, :d)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :d),
                    s(:true)))))),
          s(:self))),
      s(:def, :collapse_recurse,
        s(:args,
          s(:restarg, :dsc)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "collapse"),
            s(:str, "-recurse"),
            s(:splat,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :dsc), :map!),
                  s(:args,
                    s(:arg, :d)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :d),
                    s(:true)))))),
          s(:self))),
      s(:def, :column_bbox,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "bbox"),
            s(:lvar, :idx)))),
      s(:def, :column_compare,
        s(:args,
          s(:arg, :column1),
          s(:arg, :op),
          s(:arg, :column2)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "compare"),
            s(:lvar, :column1),
            s(:lvar, :op),
            s(:lvar, :column2)))),
      s(:def, :column_count,
        s(:args),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "count")))),
      s(:def, :column_create,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash))),
          s(:send, nil, :num_or_str,
            s(:send, nil, :tk_send,
              s(:str, "column"),
              s(:str, "create"),
              s(:splat,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys))))),
          s(:send, nil, :num_or_str,
            s(:send, nil, :tk_send,
              s(:str, "column"),
              s(:str, "create"))))),
      s(:def, :column_delete,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                s(:send,
                  s(:self), :path)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                  s(:send,
                    s(:self), :path)), :delete,
                s(:lvar, :idx)), nil)),
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "delete"),
            s(:lvar, :idx)),
          s(:self))),
      s(:def, :column_index,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "index"),
            s(:lvar, :idx)))),
      s(:def, :column_id,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :tk_send,
          s(:str, "column"),
          s(:str, "id"),
          s(:lvar, :idx))),
      s(:def, :column_list,
        s(:args,
          s(:optarg, :visible,
            s(:false))),
        s(:if,
          s(:lvar, :visible),
          s(:send, nil, :simplelist,
            s(:send, nil, :tk_send,
              s(:str, "column"),
              s(:str, "list"),
              s(:str, "-visible"))),
          s(:send, nil, :simplelist,
            s(:send, nil, :tk_send,
              s(:str, "column"),
              s(:str, "list"))))),
      s(:def, :column_visible_list,
        s(:args),
        s(:send, nil, :column_list,
          s(:true))),
      s(:def, :column_move,
        s(:args,
          s(:arg, :idx),
          s(:arg, :before)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "move"),
            s(:lvar, :idx),
            s(:lvar, :before)),
          s(:self))),
      s(:def, :column_needed_width,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "neededwidth"),
            s(:lvar, :idx)))),
      s(:alias,
        s(:sym, :column_neededwidth),
        s(:sym, :column_needed_width)),
      s(:def, :column_order,
        s(:args,
          s(:arg, :column),
          s(:optarg, :visible,
            s(:false))),
        s(:if,
          s(:lvar, :visible),
          s(:send, nil, :num_or_str,
            s(:send, nil, :tk_send,
              s(:str, "column"),
              s(:str, "order"),
              s(:lvar, :column),
              s(:str, "-visible"))),
          s(:send, nil, :num_or_str,
            s(:send, nil, :tk_send,
              s(:str, "column"),
              s(:str, "order"),
              s(:lvar, :column))))),
      s(:def, :column_visible_order,
        s(:args,
          s(:arg, :column)),
        s(:send, nil, :column_order,
          s(:lvar, :column),
          s(:true))),
      s(:def, :column_width,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "column"),
            s(:str, "width"),
            s(:lvar, :idx)))),
      s(:def, :compare,
        s(:args,
          s(:arg, :item1),
          s(:arg, :op),
          s(:arg, :item2)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "compare"),
            s(:lvar, :item1),
            s(:lvar, :op),
            s(:lvar, :item2)))),
      s(:def, :contentbox,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "contentbox")))),
      s(:def, :depth,
        s(:args,
          s(:optarg, :item,
            s(:const, nil, :None))),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "depth"),
            s(:send, nil, :_get_eval_string,
              s(:lvar, :item),
              s(:true))))),
      s(:def, :dragimage_add,
        s(:args,
          s(:arg, :item),
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "dragimage"),
            s(:str, "add"),
            s(:lvar, :item),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :dragimage_clear,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "dragimage"),
            s(:str, "clear")),
          s(:self))),
      s(:def, :dragimage_offset,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :list,
            s(:send, nil, :tk_send,
              s(:str, "dragimage"),
              s(:str, "offset"))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "dragimage"),
              s(:str, "offset"),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :dragimage_visible,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:iflipflop,
            s(:lvar, :args),
            s(:send, nil, :empty?)),
          s(:send, nil, :bool,
            s(:send, nil, :tk_send,
              s(:str, "dragimage"),
              s(:str, "visible"))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "dragimage"),
              s(:str, "visible"),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :dragimage_visible?,
        s(:args),
        s(:send, nil, :dragimage_visible)),
      s(:def, :debug_dinfo,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "debug"),
            s(:str, "dinfo")),
          s(:self))),
      s(:def, :debug_scroll,
        s(:args),
        s(:send, nil, :tk_send,
          s(:str, "debug"),
          s(:str, "scroll"))),
      s(:def, :element_create,
        s(:args,
          s(:arg, :elem),
          s(:arg, :type),
          s(:optarg, :keys,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash))),
          s(:send, nil, :tk_send,
            s(:str, "element"),
            s(:str, "create"),
            s(:lvar, :elem),
            s(:lvar, :type),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))),
          s(:send, nil, :tk_send,
            s(:str, "element"),
            s(:str, "create"),
            s(:lvar, :elem),
            s(:lvar, :type)))),
      s(:def, :element_delete,
        s(:args,
          s(:restarg, :elems)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                s(:send,
                  s(:self), :path)),
              s(:block,
                s(:send,
                  s(:lvar, :elems), :each),
                s(:args,
                  s(:arg, :elem)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                    s(:send,
                      s(:self), :path)), :delete,
                  s(:lvar, :elem))), nil)),
          s(:send, nil, :tk_send,
            s(:str, "element"),
            s(:str, "delete"),
            s(:splat,
              s(:lvar, :elems))),
          s(:self))),
      s(:def, :element_names,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "element"),
                s(:str, "names"))), :collect!),
          s(:args,
            s(:arg, :elem)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Element), :id2obj,
            s(:self),
            s(:lvar, :elem)))),
      s(:def, :_conv_element_perstate_val,
        s(:args,
          s(:arg, :opt),
          s(:arg, :val)),
        s(:case,
          s(:lvar, :opt),
          s(:when,
            s(:str, "background"),
            s(:str, "foreground"),
            s(:str, "fill"),
            s(:str, "outline"),
            s(:str, "format"),
            s(:lvar, :val)),
          s(:when,
            s(:str, "draw"),
            s(:str, "filled"),
            s(:str, "showfocus"),
            s(:str, "destroy"),
            s(:send, nil, :bool,
              s(:lvar, :val))),
          s(:send, nil, :tk_tcl2ruby,
            s(:lvar, :val)))),
      s(:send, nil, :private,
        s(:sym, :_conv_element_perstate_val)),
      s(:def, :element_perstate,
        s(:args,
          s(:arg, :elem),
          s(:arg, :opt),
          s(:arg, :st_list)),
        s(:send, nil, :tk_send,
          s(:str, "element"),
          s(:str, "perstate"),
          s(:lvar, :elem),
          s(:str, "-{opt}"),
          s(:lvar, :st_list))),
      s(:def, :element_type,
        s(:args,
          s(:arg, :elem)),
        s(:send, nil, :tk_send,
          s(:str, "element"),
          s(:str, "type"),
          s(:lvar, :elem))),
      s(:def, :element_class,
        s(:args,
          s(:arg, :elem)),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Tk), :TreeCtrl), :Element), :type2class,
          s(:send, nil, :element_type,
            s(:lvar, :elem)))),
      s(:def, :expand,
        s(:args,
          s(:restarg, :dsc)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "expand"),
            s(:splat,
              s(:lvar, :dsc))),
          s(:self))),
      s(:def, :expand_recurse,
        s(:args,
          s(:restarg, :dsc)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "expand"),
            s(:str, "-recurse"),
            s(:splat,
              s(:lvar, :dsc))),
          s(:self))),
      s(:def, :identify,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:lvasgn, :lst,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "identify"),
                s(:lvar, :x),
                s(:lvar, :y)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :lst), :[],
                s(:int, 0)), :==,
              s(:str, "item")),
            s(:begin,
              s(:send,
                s(:lvar, :lst), :[]=,
                s(:int, 1),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
                  s(:self),
                  s(:send,
                    s(:lvar, :lst), :[],
                    s(:int, 1)))),
              s(:lvasgn, :size,
                s(:send,
                  s(:lvar, :lst), :size)),
              s(:lvasgn, :i,
                s(:int, 2)),
              s(:while,
                s(:send,
                  s(:lvar, :i), :<,
                  s(:lvar, :size)),
                s(:case,
                  s(:send,
                    s(:lvar, :lst), :[],
                    s(:lvar, :i)),
                  s(:when,
                    s(:str, "line"),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :lst), :[]=,
                        s(:lvar, :i),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
                          s(:self),
                          s(:send,
                            s(:lvar, :lst), :[],
                            s(:lvar, :i)))),
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1)))),
                  s(:when,
                    s(:str, "button"),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 1))),
                  s(:when,
                    s(:str, "column"),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 2))),
                  s(:when,
                    s(:str, "elem"),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :lst), :[]=,
                        s(:lvar, :i),
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Tk), :TreeCtrl), :Element), :id2obj,
                          s(:self),
                          s(:send,
                            s(:lvar, :lst), :[],
                            s(:lvar, :i)))),
                      s(:op_asgn,
                        s(:lvasgn, :i), :+,
                        s(:int, 1)))),
                  s(:op_asgn,
                    s(:lvasgn, :i), :+,
                    s(:int, 1))))), nil),
          s(:lvar, :lst))),
      s(:def, :index,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "index"),
            s(:lvar, :idx)))),
      s(:def, :item_ancestors,
        s(:args,
          s(:arg, :item)),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "ancestors"),
                s(:lvar, :item))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :item_bbox,
        s(:args,
          s(:arg, :item),
          s(:restarg, :args)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "bbox"),
            s(:lvar, :item),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :item_children,
        s(:args,
          s(:arg, :item)),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "children"),
                s(:lvar, :item))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :item_collapse,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "item"),
            s(:str, "collapse"),
            s(:send, nil, :_get_eval_string,
              s(:lvar, :item),
              s(:true))),
          s(:self))),
      s(:def, :item_collapse_recurse,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "item"),
            s(:str, "collapse"),
            s(:send, nil, :_get_eval_string,
              s(:lvar, :item),
              s(:true)),
            s(:str, "-recurse")),
          s(:self))),
      s(:def, :item_compare,
        s(:args,
          s(:arg, :item1),
          s(:arg, :op),
          s(:arg, :item2)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "compare"),
            s(:lvar, :item1),
            s(:lvar, :op),
            s(:lvar, :item2)))),
      s(:def, :item_complex,
        s(:args,
          s(:arg, :item),
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "item"),
            s(:str, "complex"),
            s(:send, nil, :_get_eval_string,
              s(:lvar, :item),
              s(:true)),
            s(:splat,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :args), :map!),
                  s(:args,
                    s(:arg, :arg)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :arg),
                    s(:true)))))),
          s(:self))),
      s(:def, :item_count,
        s(:args),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "count")))),
      s(:def, :item_create,
        s(:args,
          s(:optarg, :keys,
            s(:hash))),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "item"),
            s(:str, "create"),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))))),
      s(:def, :_erase_children,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send, nil, :item_children,
                s(:lvar, :item)), :each),
            s(:args,
              s(:arg, :i)),
            s(:send, nil, :_erase_children,
              s(:lvar, :i))),
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
              s(:send,
                s(:self), :path)), :delete,
            s(:lvar, :item)))),
      s(:send, nil, :private,
        s(:sym, :_erase_children)),
      s(:def, :item_delete,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                s(:send,
                  s(:self), :path)),
              s(:if,
                s(:or,
                  s(:or,
                    s(:or,
                      s(:send,
                        s(:lvar, :first), :==,
                        s(:str, "all")),
                      s(:send,
                        s(:lvar, :first), :==,
                        s(:sym, :all))),
                    s(:send,
                      s(:lvar, :last), :==,
                      s(:str, "all"))),
                  s(:send,
                    s(:lvar, :last), :==,
                    s(:sym, :all))),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                    s(:send,
                      s(:self), :path)), :clear),
                s(:if,
                  s(:send,
                    s(:lvar, :last), :==,
                    s(:const, nil, :None)),
                  s(:send, nil, :_erase_children,
                    s(:lvar, :first)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:self), :range,
                        s(:lvar, :first),
                        s(:lvar, :last)), :each),
                    s(:args,
                      s(:arg, :id)),
                    s(:send, nil, :_erase_children,
                      s(:lvar, :id))))), nil)),
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "delete"),
            s(:lvar, :first),
            s(:lvar, :last)),
          s(:self))),
      s(:def, :item_dump,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "dump"),
            s(:lvar, :item)))),
      s(:def, :item_dump_hash,
        s(:args,
          s(:arg, :item)),
        s(:send,
          s(:const, nil, :Hash), :[],
          s(:splat,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "dump"),
                s(:lvar, :item)))))),
      s(:def, :item_element_actual,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :elem),
          s(:arg, :key)),
        s(:send, nil, :tk_send,
          s(:str, "item"),
          s(:str, "element"),
          s(:str, "actual"),
          s(:lvar, :item),
          s(:lvar, :column),
          s(:lvar, :elem),
          s(:dstr,
            s(:str, "-"),
            s(:begin,
              s(:lvar, :key))))),
      s(:def, :item_element_perstate,
        s(:args,
          s(:arg, :elem),
          s(:arg, :opt),
          s(:arg, :st_list)),
        s(:send, nil, :tk_send,
          s(:str, "item"),
          s(:str, "element"),
          s(:str, "perstate"),
          s(:lvar, :elem),
          s(:str, "-{opt}"),
          s(:lvar, :st_list))),
      s(:def, :item_expand,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "expand"),
            s(:lvar, :item)),
          s(:self))),
      s(:def, :item_expand_recurse,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "expand"),
            s(:lvar, :item),
            s(:str, "-recurse")),
          s(:self))),
      s(:def, :item_firstchild,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :child,
            s(:nil))),
        s(:if,
          s(:lvar, :child),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "item"),
              s(:str, "firstchild"),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :parent),
                s(:true)),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :child),
                s(:true))),
            s(:self)),
          s(:begin,
            s(:lvasgn, :id,
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_send_without_enc,
                  s(:str, "item"),
                  s(:str, "firstchild"),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :parent),
                    s(:true))))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
              s(:self),
              s(:lvar, :id))))),
      s(:alias,
        s(:sym, :item_first_child),
        s(:sym, :item_firstchild)),
      s(:def, :item_hasbutton,
        s(:args,
          s(:arg, :item),
          s(:optarg, :st,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :st), :==,
            s(:const, nil, :None)),
          s(:send, nil, :bool,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "item"),
              s(:str, "hasbutton"),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :item),
                s(:true)))),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "item"),
              s(:str, "hasbutton"),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :item),
                s(:true)),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :st))),
            s(:self)))),
      s(:alias,
        s(:sym, :item_has_button),
        s(:sym, :item_hasbutton)),
      s(:def, :item_hasbutton?,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :item_hasbutton,
          s(:lvar, :item))),
      s(:alias,
        s(:sym, :item_has_button?),
        s(:sym, :item_hasbutton?)),
      s(:def, :item_id,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :tk_send,
          s(:str, "item"),
          s(:str, "id"),
          s(:lvar, :item))),
      s(:def, :item_image,
        s(:args,
          s(:arg, :item),
          s(:optarg, :column,
            s(:nil)),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:if,
            s(:lvar, :column),
            s(:begin,
              s(:lvasgn, :img,
                s(:send, nil, :tk_send,
                  s(:str, "item"),
                  s(:str, "image"),
                  s(:lvar, :item),
                  s(:lvar, :column))),
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                  s(:lvar, :img)),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                  s(:lvar, :img)),
                s(:lvar, :img))),
            s(:block,
              s(:send,
                s(:send, nil, :simplelist,
                  s(:send, nil, :tk_send,
                    s(:str, "item"),
                    s(:str, "image"),
                    s(:lvar, :item))), :collect!),
              s(:args,
                s(:arg, :img)),
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                  s(:lvar, :img)),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                  s(:lvar, :img)),
                s(:lvar, :img)))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "image"),
              s(:lvar, :item),
              s(:lvar, :column),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :get_item_image,
        s(:args,
          s(:arg, :item),
          s(:optarg, :column,
            s(:nil))),
        s(:send, nil, :item_image,
          s(:lvar, :item),
          s(:lvar, :column))),
      s(:def, :set_item_image,
        s(:args,
          s(:arg, :item),
          s(:arg, :col),
          s(:arg, :img),
          s(:restarg, :args)),
        s(:send, nil, :item_image,
          s(:lvar, :item),
          s(:lvar, :col),
          s(:lvar, :img),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :item_index,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "index"),
            s(:lvar, :item)))),
      s(:def, :item_isancestor,
        s(:args,
          s(:arg, :item),
          s(:arg, :des)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "isancestor"),
            s(:lvar, :item),
            s(:lvar, :des)))),
      s(:alias,
        s(:sym, :item_is_ancestor),
        s(:sym, :item_isancestor)),
      s(:alias,
        s(:sym, :item_isancestor?),
        s(:sym, :item_isancestor)),
      s(:alias,
        s(:sym, :item_is_ancestor?),
        s(:sym, :item_isancestor)),
      s(:def, :item_isopen,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "isopen"),
            s(:lvar, :item)))),
      s(:alias,
        s(:sym, :item_is_open),
        s(:sym, :item_isopen)),
      s(:alias,
        s(:sym, :item_isopen?),
        s(:sym, :item_isopen)),
      s(:alias,
        s(:sym, :item_is_open?),
        s(:sym, :item_isopen)),
      s(:alias,
        s(:sym, :item_isopened?),
        s(:sym, :item_isopen)),
      s(:alias,
        s(:sym, :item_is_opened?),
        s(:sym, :item_isopen)),
      s(:def, :item_lastchild,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :child,
            s(:nil))),
        s(:if,
          s(:lvar, :child),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "item"),
              s(:str, "lastchild"),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :parent),
                s(:true)),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :child),
                s(:true))),
            s(:self)),
          s(:begin,
            s(:lvasgn, :id,
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_send_without_enc,
                  s(:str, "item"),
                  s(:str, "lastchild"),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :parent),
                    s(:true))))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
              s(:self),
              s(:lvar, :id))))),
      s(:alias,
        s(:sym, :item_last_child),
        s(:sym, :item_lastchild)),
      s(:def, :item_nextsibling,
        s(:args,
          s(:arg, :sibling),
          s(:optarg, :nxt,
            s(:nil))),
        s(:if,
          s(:lvar, :nxt),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "nextsibling"),
              s(:lvar, :sibling),
              s(:lvar, :nxt)),
            s(:self)),
          s(:begin,
            s(:lvasgn, :id,
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_send,
                  s(:str, "item"),
                  s(:str, "nextsibling"),
                  s(:lvar, :sibling)))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
              s(:self),
              s(:lvar, :id))))),
      s(:alias,
        s(:sym, :item_next_sibling),
        s(:sym, :item_nextsibling)),
      s(:def, :item_numchildren,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "item"),
            s(:str, "numchildren"),
            s(:send, nil, :_get_eval_string,
              s(:lvar, :item),
              s(:true))))),
      s(:alias,
        s(:sym, :item_num_children),
        s(:sym, :item_numchildren)),
      s(:alias,
        s(:sym, :item_children_size),
        s(:sym, :item_numchildren)),
      s(:def, :item_order,
        s(:args,
          s(:arg, :item),
          s(:optarg, :visible,
            s(:false))),
        s(:begin,
          s(:if,
            s(:lvar, :visible),
            s(:lvasgn, :ret,
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_send,
                  s(:str, "item"),
                  s(:str, "order"),
                  s(:lvar, :item),
                  s(:str, "-visible")))),
            s(:lvasgn, :ret,
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_send,
                  s(:str, "item"),
                  s(:str, "order"),
                  s(:lvar, :item))))),
          s(:if,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :ret), :kind_of?,
                  s(:const, nil, :Fixnum)),
                s(:send,
                  s(:lvar, :ret), :<,
                  s(:int, 0)))),
            s(:nil),
            s(:lvar, :ret)))),
      s(:def, :item_visible_order,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :item_order,
          s(:lvar, :item),
          s(:true))),
      s(:def, :item_parent,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:lvasgn, :id,
            s(:send, nil, :num_or_str,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "parent"),
                s(:lvar, :item)))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :item_prevsibling,
        s(:args,
          s(:arg, :sibling),
          s(:optarg, :prev,
            s(:nil))),
        s(:if,
          s(:lvar, :prev),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "prevsibling"),
              s(:lvar, :sibling),
              s(:lvar, :prev)),
            s(:self)),
          s(:begin,
            s(:lvasgn, :id,
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_send,
                  s(:str, "item"),
                  s(:str, "prevsibling"),
                  s(:lvar, :sibling)))),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
              s(:self),
              s(:lvar, :id))))),
      s(:alias,
        s(:sym, :item_prev_sibling),
        s(:sym, :item_prevsibling)),
      s(:def, :item_range,
        s(:args,
          s(:arg, :first),
          s(:arg, :last)),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "range"),
            s(:lvar, :first),
            s(:lvar, :last)))),
      s(:def, :item_remove,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "remove"),
            s(:lvar, :item)),
          s(:self))),
      s(:def, :item_rnc,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "rnc"),
            s(:lvar, :item)))),
      s(:def, :_item_sort_core,
        s(:args,
          s(:arg, :real_sort),
          s(:arg, :item),
          s(:restarg, :opts)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :opts), :collect),
                s(:args,
                  s(:arg, :param)),
                s(:if,
                  s(:send,
                    s(:lvar, :param), :kind_of?,
                    s(:const, nil, :Hash)),
                  s(:begin,
                    s(:lvasgn, :param,
                      s(:send, nil, :_symbolkey2str,
                        s(:lvar, :param))),
                    s(:if,
                      s(:send,
                        s(:lvar, :param), :key?,
                        s(:str, "column")),
                      s(:begin,
                        s(:lvasgn, :key,
                          s(:str, "-column")),
                        s(:lvasgn, :desc,
                          s(:send,
                            s(:lvar, :param), :delete,
                            s(:str, "column")))),
                      s(:if,
                        s(:send,
                          s(:lvar, :param), :key?,
                          s(:str, "element")),
                        s(:begin,
                          s(:lvasgn, :key,
                            s(:str, "-element")),
                          s(:lvasgn, :desc,
                            s(:send,
                              s(:lvar, :param), :delete,
                              s(:str, "element")))),
                        s(:lvasgn, :key,
                          s(:nil)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :param), :empty?),
                      s(:lvasgn, :param,
                        s(:const, nil, :None)),
                      s(:lvasgn, :param,
                        s(:send, nil, :hash_kv,
                          s(:send, nil, :__conv_item_keyonly_opts,
                            s(:lvar, :item),
                            s(:lvar, :param))))),
                    s(:if,
                      s(:lvar, :key),
                      s(:send,
                        s(:array,
                          s(:lvar, :key),
                          s(:lvar, :desc)), :concat,
                        s(:lvar, :param)),
                      s(:lvar, :param))),
                  s(:if,
                    s(:send,
                      s(:lvar, :param), :kind_of?,
                      s(:const, nil, :Array)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :param), :[],
                            s(:int, 2)), :kind_of?,
                          s(:const, nil, :Hash)),
                        s(:send,
                          s(:lvar, :param), :[]=,
                          s(:int, 2),
                          s(:send, nil, :hash_kv,
                            s(:send, nil, :__conv_item_keyonly_opts,
                              s(:lvar, :item),
                              s(:send,
                                s(:lvar, :param), :[],
                                s(:int, 2))))), nil),
                      s(:lvar, :param)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :param), :kind_of?,
                          s(:const, nil, :String)),
                        s(:send,
                          s(:lvar, :param), :=~,
                          s(:regexp,
                            s(:str, "\\A[a-z]+\\Z"),
                            s(:regopt)))),
                      s(:send,
                        s(:str, "-"), :<<,
                        s(:lvar, :param)),
                      s(:if,
                        s(:send,
                          s(:lvar, :param), :kind_of?,
                          s(:const, nil, :Symbol)),
                        s(:send,
                          s(:str, "-"), :<<,
                          s(:send,
                            s(:lvar, :param), :to_s)),
                        s(:lvar, :param)))))), :flatten)),
          s(:if,
            s(:lvar, :real_sort),
            s(:begin,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "sort"),
                s(:lvar, :item),
                s(:splat,
                  s(:lvar, :opts))),
              s(:self)),
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "sort"),
                s(:lvar, :item),
                s(:str, "-notreally"),
                s(:splat,
                  s(:lvar, :opts))))))),
      s(:send, nil, :private,
        s(:sym, :_item_sort_core)),
      s(:def, :item_sort,
        s(:args,
          s(:arg, :item),
          s(:restarg, :opts)),
        s(:send, nil, :_item_sort_core,
          s(:true),
          s(:lvar, :item),
          s(:splat,
            s(:lvar, :opts)))),
      s(:def, :item_sort_not_really,
        s(:args,
          s(:arg, :item),
          s(:restarg, :opts)),
        s(:send, nil, :_item_sort_core,
          s(:false),
          s(:lvar, :item),
          s(:splat,
            s(:lvar, :opts)))),
      s(:def, :item_span,
        s(:args,
          s(:arg, :item),
          s(:optarg, :column,
            s(:nil)),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:if,
            s(:lvar, :column),
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "span"),
                s(:lvar, :item),
                s(:lvar, :column))),
            s(:block,
              s(:send,
                s(:send, nil, :simplelist,
                  s(:send, nil, :tk_send,
                    s(:str, "item"),
                    s(:str, "span"),
                    s(:lvar, :item))), :collect!),
              s(:args,
                s(:arg, :elem)),
              s(:send, nil, :list,
                s(:lvar, :elem)))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "span"),
              s(:lvar, :item),
              s(:lvar, :column),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :get_item_span,
        s(:args,
          s(:arg, :item),
          s(:optarg, :column,
            s(:nil))),
        s(:send, nil, :item_span,
          s(:lvar, :item),
          s(:lvar, :column))),
      s(:def, :set_item_span,
        s(:args,
          s(:arg, :item),
          s(:arg, :col),
          s(:arg, :num),
          s(:restarg, :args)),
        s(:send, nil, :item_span,
          s(:lvar, :item),
          s(:lvar, :col),
          s(:lvar, :num),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :item_state_forcolumn,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "item"),
          s(:str, "state"),
          s(:str, "forcolumn"),
          s(:lvar, :item),
          s(:lvar, :column),
          s(:splat,
            s(:lvar, :args)))),
      s(:alias,
        s(:sym, :item_state_for_column),
        s(:sym, :item_state_forcolumn)),
      s(:def, :item_state_get,
        s(:args,
          s(:arg, :item),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :list,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "state"),
              s(:str, "get"),
              s(:send,
                s(:lvar, :item), :*,
                s(:lvar, :args)))),
          s(:send, nil, :bool,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "state"),
              s(:str, "get"),
              s(:lvar, :item))))),
      s(:def, :item_state_set,
        s(:args,
          s(:arg, :item),
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "item"),
          s(:str, "state"),
          s(:str, "set"),
          s(:lvar, :item),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :item_style_elements,
        s(:args,
          s(:arg, :item),
          s(:arg, :column)),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "style"),
                s(:str, "elements"),
                s(:lvar, :item),
                s(:lvar, :column))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Style), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :item_style_map,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:arg, :style),
          s(:arg, :map)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "style"),
            s(:str, "map"),
            s(:lvar, :item),
            s(:lvar, :column),
            s(:lvar, :style),
            s(:lvar, :map)),
          s(:self))),
      s(:def, :item_style_set,
        s(:args,
          s(:arg, :item),
          s(:optarg, :column,
            s(:nil)),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:if,
            s(:lvar, :column),
            s(:begin,
              s(:lvasgn, :id,
                s(:send, nil, :tk_send_without_enc,
                  s(:str, "item"),
                  s(:str, "style"),
                  s(:str, "set"),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :item),
                    s(:true)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :column),
                    s(:true)))),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Style), :id2obj,
                s(:self),
                s(:lvar, :id))),
            s(:block,
              s(:send,
                s(:send, nil, :list,
                  s(:send, nil, :tk_send_without_enc,
                    s(:str, "item"),
                    s(:str, "style"),
                    s(:str, "set"),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :item),
                      s(:true)))), :collect!),
              s(:args,
                s(:arg, :id)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Style), :id2obj,
                s(:self),
                s(:lvar, :id)))),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "item"),
              s(:str, "style"),
              s(:str, "set"),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :item),
                s(:true)),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :column),
                s(:true)),
              s(:splat,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :flatten), :map!),
                    s(:args,
                      s(:arg, :arg)),
                    s(:send, nil, :_get_eval_string,
                      s(:lvar, :arg),
                      s(:true)))))),
            s(:self)))),
      s(:def, :item_text,
        s(:args,
          s(:arg, :item),
          s(:arg, :column),
          s(:optarg, :txt,
            s(:nil)),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:if,
            s(:lvar, :txt),
            s(:begin,
              s(:send, nil, :tk_send,
                s(:str, "item"),
                s(:str, "text"),
                s(:lvar, :item),
                s(:lvar, :column),
                s(:lvar, :txt)),
              s(:self)),
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "text"),
              s(:lvar, :item),
              s(:lvar, :column))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "text"),
              s(:lvar, :item),
              s(:lvar, :column),
              s(:lvar, :txt),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :item_toggle,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "toggle"),
            s(:lvar, :item)),
          s(:self))),
      s(:def, :item_toggle_recurse,
        s(:args,
          s(:arg, :item)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "item"),
            s(:str, "toggle"),
            s(:lvar, :item),
            s(:str, "-recurse")),
          s(:self))),
      s(:def, :item_visible,
        s(:args,
          s(:arg, :item),
          s(:optarg, :st,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :st), :==,
            s(:const, nil, :None)),
          s(:send, nil, :bool,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "visible"),
              s(:lvar, :item))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "item"),
              s(:str, "visible"),
              s(:lvar, :item),
              s(:lvar, :st)),
            s(:self)))),
      s(:def, :item_visible?,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :item_visible,
          s(:lvar, :item))),
      s(:def, :marquee_anchor,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :list,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "anchor"))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "anchor"),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :marquee_coords,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :list,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "coords"))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "coords"),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :marquee_corner,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :tk_send,
            s(:str, "marquee"),
            s(:str, "corner")),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "corner"),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :marquee_identify,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "marquee"),
                s(:str, "identify"))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :marquee_visible,
        s(:args,
          s(:optarg, :st,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :st), :==,
            s(:const, nil, :None)),
          s(:send, nil, :bool,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "visible"))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "marquee"),
              s(:str, "visible"),
              s(:lvar, :st)),
            s(:self)))),
      s(:def, :marquee_visible?,
        s(:args),
        s(:send, nil, :marquee_visible)),
      s(:def, :notify_bind,
        s(:args,
          s(:arg, :obj),
          s(:arg, :event),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind,
            s(:array,
              s(:ivar, :@path),
              s(:str, "notify"),
              s(:str, "bind"),
              s(:lvar, :obj)),
            s(:lvar, :event),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :notify_bind_append,
        s(:args,
          s(:arg, :obj),
          s(:arg, :event),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind_append,
            s(:array,
              s(:ivar, :@path),
              s(:str, "notify"),
              s(:str, "bind"),
              s(:lvar, :obj)),
            s(:lvar, :event),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :notify_bind_remove,
        s(:args,
          s(:arg, :obj),
          s(:arg, :event)),
        s(:begin,
          s(:send, nil, :_bind_remove,
            s(:array,
              s(:ivar, :@path),
              s(:str, "notify"),
              s(:str, "bind"),
              s(:lvar, :obj)),
            s(:lvar, :event)),
          s(:self))),
      s(:def, :notify_bindinfo,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :event,
            s(:nil))),
        s(:send, nil, :_bindinfo,
          s(:array,
            s(:ivar, :@path),
            s(:str, "notify"),
            s(:str, "bind"),
            s(:lvar, :obj)),
          s(:lvar, :event))),
      s(:def, :notify_detailnames,
        s(:args,
          s(:arg, :event)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "detailnames"),
            s(:lvar, :event)))),
      s(:def, :notify_eventnames,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "eventnames")))),
      s(:def, :notify_generate,
        s(:args,
          s(:arg, :pattern),
          s(:optarg, :char_map,
            s(:const, nil, :None)),
          s(:optarg, :percents_cmd,
            s(:const, nil, :None))),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "generate"),
            s(:lvar, :pattern),
            s(:lvar, :char_map),
            s(:lvar, :percents_cmd)),
          s(:self))),
      s(:def, :notify_install,
        s(:args,
          s(:arg, :pattern),
          s(:optarg, :percents_cmd,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :percents_cmd), :!),
              s(:lvar, :b)),
            s(:lvasgn, :percents_cmd,
              s(:send,
                s(:const, nil, :Proc), :new,
                s(:block_pass,
                  s(:lvar, :b)))), nil),
          s(:if,
            s(:lvar, :percents_cmd),
            s(:send, nil, :procedure,
              s(:send, nil, :tk_send,
                s(:str, "notify"),
                s(:str, "install"),
                s(:lvar, :pattern),
                s(:lvar, :percents_cmd))),
            s(:send, nil, :procedure,
              s(:send, nil, :tk_send,
                s(:str, "notify"),
                s(:str, "install"),
                s(:lvar, :pattern)))))),
      s(:def, :notify_install_detail,
        s(:args,
          s(:arg, :event),
          s(:arg, :detail),
          s(:optarg, :percents_cmd,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :percents_cmd), :!),
              s(:lvar, :b)),
            s(:lvasgn, :percents_cmd,
              s(:send,
                s(:const, nil, :Proc), :new,
                s(:block_pass,
                  s(:lvar, :b)))), nil),
          s(:if,
            s(:lvar, :percents_cmd),
            s(:send, nil, :tk_send,
              s(:str, "notify"),
              s(:str, "install"),
              s(:str, "detail"),
              s(:lvar, :event),
              s(:lvar, :detail),
              s(:lvar, :percents_cmd)),
            s(:send, nil, :tk_send,
              s(:str, "notify"),
              s(:str, "install"),
              s(:str, "detail"),
              s(:lvar, :event),
              s(:lvar, :detail))))),
      s(:def, :notify_install_event,
        s(:args,
          s(:arg, :event),
          s(:optarg, :percents_cmd,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :percents_cmd), :!),
              s(:lvar, :b)),
            s(:lvasgn, :percents_cmd,
              s(:send,
                s(:const, nil, :Proc), :new,
                s(:block_pass,
                  s(:lvar, :b)))), nil),
          s(:if,
            s(:lvar, :percents_cmd),
            s(:send, nil, :tk_send,
              s(:str, "notify"),
              s(:str, "install"),
              s(:str, "event"),
              s(:lvar, :event),
              s(:lvar, :percents_cmd)),
            s(:send, nil, :tk_send,
              s(:str, "notify"),
              s(:str, "install"),
              s(:str, "event"),
              s(:lvar, :event))))),
      s(:def, :notify_linkage,
        s(:args,
          s(:arg, :pattern),
          s(:optarg, :detail,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :detail), :!=,
            s(:const, nil, :None)),
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "linkage"),
            s(:lvar, :pattern),
            s(:lvar, :detail)),
          s(:kwbegin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :pattern), :to_s), :index,
                s(:str, "-")),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :tk_send,
                    s(:str, "notify"),
                    s(:str, "linkage"),
                    s(:dstr,
                      s(:str, "<"),
                      s(:begin,
                        s(:lvar, :pattern)),
                      s(:str, ">"))),
                  s(:resbody, nil, nil,
                    s(:send, nil, :tk_send,
                      s(:str, "notify"),
                      s(:str, "linkage"),
                      s(:lvar, :pattern))), nil)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :tk_send,
                    s(:str, "notify"),
                    s(:str, "linkage"),
                    s(:lvar, :pattern)),
                  s(:resbody, nil, nil,
                    s(:send, nil, :tk_send,
                      s(:str, "notify"),
                      s(:str, "linkage"),
                      s(:dstr,
                        s(:str, "<"),
                        s(:begin,
                          s(:lvar, :pattern)),
                        s(:str, ">")))), nil)))))),
      s(:def, :notify_unbind,
        s(:args,
          s(:optarg, :pattern,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :pattern),
            s(:send, nil, :tk_send,
              s(:str, "notify"),
              s(:str, "unbind"),
              s(:dstr,
                s(:str, "<"),
                s(:begin,
                  s(:lvar, :pattern)),
                s(:str, ">"))),
            s(:send, nil, :tk_send,
              s(:str, "notify"),
              s(:str, "unbind"))),
          s(:self))),
      s(:def, :notify_uninstall,
        s(:args,
          s(:arg, :pattern)),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:lvar, :pattern)),
              s(:str, ">"))),
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "uninstall"),
            s(:lvar, :pattern)),
          s(:self))),
      s(:def, :notify_uninstall_detail,
        s(:args,
          s(:arg, :event),
          s(:arg, :detail)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "uninstall"),
            s(:str, "detail"),
            s(:lvar, :event),
            s(:lvar, :detail)),
          s(:self))),
      s(:def, :notify_uninstall_event,
        s(:args,
          s(:arg, :event)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "notify"),
            s(:str, "uninstall"),
            s(:str, "event"),
            s(:lvar, :event)),
          s(:self))),
      s(:def, :numcolumns,
        s(:args),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "numcolumns")))),
      s(:alias,
        s(:sym, :num_columns),
        s(:sym, :numcolumns)),
      s(:alias,
        s(:sym, :columns_size),
        s(:sym, :numcolumns)),
      s(:def, :numitems,
        s(:args),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_send,
            s(:str, "numitems")))),
      s(:alias,
        s(:sym, :num_items),
        s(:sym, :numitems)),
      s(:alias,
        s(:sym, :items_size),
        s(:sym, :numitems)),
      s(:def, :orphans,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "orphans"))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :range,
        s(:args,
          s(:arg, :first),
          s(:arg, :last)),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "range"),
                s(:lvar, :first),
                s(:lvar, :last))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :state_define,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "state"),
            s(:str, "define"),
            s(:lvar, :name)),
          s(:self))),
      s(:def, :state_linkage,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :tk_send,
          s(:str, "state"),
          s(:str, "linkage"),
          s(:lvar, :name))),
      s(:def, :state_names,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "state"),
            s(:str, "names")))),
      s(:def, :state_undefine,
        s(:args,
          s(:restarg, :names)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "state"),
            s(:str, "undefine"),
            s(:splat,
              s(:lvar, :names))),
          s(:self))),
      s(:def, :see,
        s(:args,
          s(:arg, :item),
          s(:optarg, :column,
            s(:const, nil, :None)),
          s(:optarg, :keys,
            s(:hash))),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "see"),
            s(:lvar, :item),
            s(:lvar, :column),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))),
          s(:self))),
      s(:def, :selection_add,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "add"),
            s(:lvar, :first),
            s(:lvar, :last)),
          s(:self))),
      s(:def, :selection_anchor,
        s(:args,
          s(:optarg, :item,
            s(:const, nil, :None))),
        s(:begin,
          s(:lvasgn, :id,
            s(:send, nil, :num_or_str,
              s(:send, nil, :tk_send,
                s(:str, "selection"),
                s(:str, "anchor"),
                s(:lvar, :item)))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :selection_clear,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "clear"),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :selection_count,
        s(:args),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "count")))),
      s(:def, :selection_get,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "selection"),
                s(:str, "get"))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Item), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :selection_includes,
        s(:args,
          s(:arg, :item)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "includes"),
            s(:lvar, :item)))),
      s(:def, :selection_modify,
        s(:args,
          s(:arg, :sel),
          s(:arg, :desel)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "modify"),
            s(:lvar, :sel),
            s(:lvar, :desel)),
          s(:self))),
      s(:def, :style_create,
        s(:args,
          s(:arg, :style),
          s(:optarg, :keys,
            s(:const, nil, :None))),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_send,
            s(:str, "style"),
            s(:str, "create"),
            s(:lvar, :style),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))),
          s(:send, nil, :tk_send,
            s(:str, "style"),
            s(:str, "create"),
            s(:lvar, :style)))),
      s(:def, :style_delete,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                s(:send,
                  s(:self), :path)),
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :sty)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                    s(:send,
                      s(:self), :path)), :delete,
                  s(:lvar, :sty))), nil)),
          s(:send, nil, :tk_send,
            s(:str, "style"),
            s(:str, "delete"),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :style_elements,
        s(:args,
          s(:arg, :style),
          s(:restarg, :elems)),
        s(:if,
          s(:send,
            s(:lvar, :elems), :empty?),
          s(:block,
            s(:send,
              s(:send, nil, :list,
                s(:send, nil, :tk_send,
                  s(:str, "style"),
                  s(:str, "elements"),
                  s(:lvar, :style))), :collect!),
            s(:args,
              s(:arg, :id)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Element), :id2obj,
              s(:self),
              s(:lvar, :id))),
          s(:begin,
            s(:send, nil, :tk_send,
              s(:str, "style"),
              s(:str, "elements"),
              s(:lvar, :style),
              s(:send,
                s(:lvar, :elems), :flatten)),
            s(:self)))),
      s(:def, :_conv_style_layout_val,
        s(:args,
          s(:arg, :sty),
          s(:arg, :val)),
        s(:case,
          s(:send,
            s(:lvar, :sty), :to_s),
          s(:when,
            s(:str, "padx"),
            s(:str, "pady"),
            s(:str, "ipadx"),
            s(:str, "ipady"),
            s(:begin,
              s(:lvasgn, :lst,
                s(:send, nil, :list,
                  s(:lvar, :val))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :lst), :size), :==,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :lst), :[],
                  s(:int, 0)),
                s(:lvar, :lst)))),
          s(:when,
            s(:str, "detach"),
            s(:str, "indent"),
            s(:send, nil, :bool,
              s(:lvar, :val))),
          s(:when,
            s(:str, "union"),
            s(:block,
              s(:send,
                s(:send, nil, :simplelist,
                  s(:lvar, :val)), :collect!),
              s(:args,
                s(:arg, :elem)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Element), :id2obj,
                s(:self),
                s(:lvar, :elem)))),
          s(:lvar, :val))),
      s(:send, nil, :private,
        s(:sym, :_conv_style_layout_val)),
      s(:def, :style_layout,
        s(:args,
          s(:arg, :style),
          s(:arg, :elem),
          s(:optarg, :keys,
            s(:const, nil, :None))),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:if,
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:send, nil, :tk_send,
                s(:str, "style"),
                s(:str, "layout"),
                s(:lvar, :style),
                s(:lvar, :elem),
                s(:splat,
                  s(:send, nil, :hash_kv,
                    s(:lvar, :keys)))),
              s(:self)),
            s(:send, nil, :_conv_style_layout_val,
              s(:lvar, :keys),
              s(:send, nil, :tk_send,
                s(:str, "style"),
                s(:str, "layout"),
                s(:lvar, :style),
                s(:lvar, :elem),
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :keys)))))),
          s(:begin,
            s(:lvasgn, :ret,
              s(:send,
                s(:const, nil, :Hash), :new)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Hash), :[],
                  s(:splat,
                    s(:send, nil, :simplelist,
                      s(:send, nil, :tk_send,
                        s(:str, "style"),
                        s(:str, "layout"),
                        s(:lvar, :style),
                        s(:lvar, :elem))))), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:begin,
                s(:lvasgn, :k,
                  s(:send,
                    s(:lvar, :k), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1)))),
                s(:send,
                  s(:lvar, :ret), :[]=,
                  s(:lvar, :k),
                  s(:send, nil, :_conv_style_layout_val,
                    s(:lvar, :k),
                    s(:lvar, :v))))),
            s(:lvar, :ret)))),
      s(:def, :get_style_layout,
        s(:args,
          s(:arg, :style),
          s(:arg, :elem),
          s(:optarg, :opt,
            s(:const, nil, :None))),
        s(:send, nil, :style_layout,
          s(:lvar, :style),
          s(:lvar, :elem),
          s(:lvar, :opt))),
      s(:def, :set_style_layout,
        s(:args,
          s(:arg, :style),
          s(:arg, :elem),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :slot), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send, nil, :style_layout,
            s(:lvar, :style),
            s(:lvar, :elem),
            s(:lvar, :slot)),
          s(:send, nil, :style_layout,
            s(:lvar, :style),
            s(:lvar, :elem),
            s(:hash,
              s(:pair,
                s(:lvar, :slot),
                s(:lvar, :value)))))),
      s(:def, :style_names,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :list,
              s(:send, nil, :tk_send,
                s(:str, "style"),
                s(:str, "names"))), :collect!),
          s(:args,
            s(:arg, :id)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :TreeCtrl), :Style), :id2obj,
            s(:self),
            s(:lvar, :id)))),
      s(:def, :toggle,
        s(:args,
          s(:restarg, :items)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "toggle"),
            s(:splat,
              s(:lvar, :items))),
          s(:self))),
      s(:def, :toggle_recurse,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "toggle"),
            s(:str, "-recurse"),
            s(:splat,
              s(:send, nil, :items))),
          s(:self))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Column),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:casgn, nil, :TreeCtrlColumnID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :TreeCtrlColumnID,
              s(:array,
                s(:send,
                  s(:str, "treectrl_column"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :mutex), :synchronize),
          s(:args),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :clear))),
      s(:defs,
        s(:self), :id2obj,
        s(:args,
          s(:arg, :tree),
          s(:arg, :id)),
        s(:begin,
          s(:lvasgn, :tpath,
            s(:send,
              s(:lvar, :tree), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                s(:lvar, :tpath)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:lvar, :id)),
              s(:lvar, :id))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@tree,
            s(:lvar, :parent)),
          s(:ivasgn, :@tpath,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:lvasgn, :keys,
            s(:send, nil, :_symbolkey2str,
              s(:lvar, :keys))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:ivasgn, :@path,
                s(:ivasgn, :@id,
                  s(:or,
                    s(:send,
                      s(:lvar, :keys), :delete,
                      s(:str, "tag")),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID), :join,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_ip_id_))))),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID), :[],
                  s(:int, 1)), :succ!))),
          s(:send,
            s(:lvar, :keys), :[]=,
            s(:str, "tag"),
            s(:ivar, :@id)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                  s(:ivar, :@tpath)),
                s(:hash)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Column), :TreeCtrlColumnID_TBL), :[],
                  s(:ivar, :@tpath)), :[]=,
                s(:ivar, :@id),
                s(:self)))),
          s(:send,
            s(:ivar, :@tree), :column_create,
            s(:lvar, :keys)))),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:send,
            s(:ivar, :@id), :to_s), :dup)),
      s(:def, :cget_tkstring,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :column_cget_tkstring,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)),
          s(:lvar, :opt))),
      s(:def, :cget,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :column_cget,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)),
          s(:lvar, :opt))),
      s(:def, :cget_strict,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :column_cget_strict,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)),
          s(:lvar, :opt))),
      s(:def, :configure,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :column_configure,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :column_configinfo,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :current_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :current_column_configinfo,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :delete,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :column_delete,
            s(:send,
              s(:ivar, :@tree), :column_index,
              s(:ivar, :@id))),
          s(:self))),
      s(:def, :index,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :column_index,
          s(:ivar, :@id))),
      s(:def, :move,
        s(:args,
          s(:arg, :before)),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :column_move,
            s(:send,
              s(:ivar, :@tree), :column_index,
              s(:ivar, :@id)),
            s(:lvar, :before)),
          s(:self))),
      s(:def, :needed_width,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :column_needed_width,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)))),
      s(:alias,
        s(:sym, :neededwidth),
        s(:sym, :needed_width)),
      s(:def, :current_width,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :column_width,
          s(:send,
            s(:ivar, :@tree), :column_index,
            s(:ivar, :@id)))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Element),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:casgn, nil, :TreeCtrlElementID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :TreeCtrlElementID,
              s(:array,
                s(:send,
                  s(:str, "treectrl_element"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:casgn, nil, :TreeCtrlElemTypeToClass,
        s(:hash)),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :mutex), :synchronize),
          s(:args),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :clear))),
      s(:defs,
        s(:self), :type2class,
        s(:args,
          s(:arg, :type)),
        s(:or,
          s(:send,
            s(:const, nil, :TreeCtrlElemTypeToClass), :[],
            s(:lvar, :type)),
          s(:lvar, :type))),
      s(:defs,
        s(:self), :id2obj,
        s(:args,
          s(:arg, :tree),
          s(:arg, :id)),
        s(:begin,
          s(:lvasgn, :tpath,
            s(:send,
              s(:lvar, :tree), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                s(:lvar, :tpath)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:lvar, :id)),
              s(:lvar, :id))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:arg, :type),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@tree,
            s(:lvar, :parent)),
          s(:ivasgn, :@tpath,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:ivasgn, :@type,
            s(:send,
              s(:lvar, :type), :to_s)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:ivasgn, :@path,
                s(:ivasgn, :@id,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_ip_id_)))),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID), :[],
                  s(:int, 1)), :succ!))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                  s(:ivar, :@tpath)),
                s(:hash)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Element), :TreeCtrlElementID_TBL), :[],
                  s(:ivar, :@tpath)), :[]=,
                s(:ivar, :@id),
                s(:self)))),
          s(:send,
            s(:ivar, :@tree), :element_create,
            s(:ivar, :@id),
            s(:ivar, :@type),
            s(:lvar, :keys)))),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:ivar, :@id), :dup)),
      s(:def, :cget_tkstring,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :element_cget_tkstring,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :cget,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :element_cget,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :cget_strict,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :element_cget_strict,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :configure,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :element_configure,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :element_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :current_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :current_element_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :delete,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :element_delete,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :element_type,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :element_type,
          s(:ivar, :@id))),
      s(:def, :element_class,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :element_class,
          s(:ivar, :@id))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :BitmapElement),
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Element),
    s(:begin,
      s(:send,
        s(:const, nil, :TreeCtrlElemTypeToClass), :[]=,
        s(:str, "bitmap"),
        s(:self)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:nil))),
        s(:super,
          s(:lvar, :parent),
          s(:str, "bitmap"),
          s(:lvar, :keys))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :BorderElement),
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Element),
    s(:begin,
      s(:send,
        s(:const, nil, :TreeCtrlElemTypeToClass), :[]=,
        s(:str, "border"),
        s(:self)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:nil))),
        s(:super,
          s(:lvar, :parent),
          s(:str, "border"),
          s(:lvar, :keys))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :ImageElement),
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Element),
    s(:begin,
      s(:send,
        s(:const, nil, :TreeCtrlElemTypeToClass), :[]=,
        s(:str, "image"),
        s(:self)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:nil))),
        s(:super,
          s(:lvar, :parent),
          s(:str, "image"),
          s(:lvar, :keys))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :RectangleElement),
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Element),
    s(:begin,
      s(:send,
        s(:const, nil, :TreeCtrlElemTypeToClass), :[]=,
        s(:str, "rect"),
        s(:self)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:nil))),
        s(:super,
          s(:lvar, :parent),
          s(:str, "rect"),
          s(:lvar, :keys))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Item),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:casgn, nil, :TreeCtrlItemID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :mutex), :synchronize),
          s(:args),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :clear))),
      s(:defs,
        s(:self), :id2obj,
        s(:args,
          s(:arg, :tree),
          s(:arg, :id)),
        s(:begin,
          s(:lvasgn, :tpath,
            s(:send,
              s(:lvar, :tree), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                s(:lvar, :tpath)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:lvar, :id)),
              s(:lvar, :id))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@tree,
            s(:lvar, :parent)),
          s(:ivasgn, :@tpath,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:ivasgn, :@path,
            s(:ivasgn, :@id,
              s(:send,
                s(:ivar, :@tree), :item_create,
                s(:lvar, :keys)))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                  s(:ivar, :@tpath)),
                s(:hash)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Item), :TreeCtrlItemID_TBL), :[],
                  s(:ivar, :@tpath)), :[]=,
                s(:ivar, :@id),
                s(:self)))))),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:send,
            s(:ivar, :@id), :to_s), :dup)),
      s(:def, :ancestors,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_ancestors,
          s(:ivar, :@id))),
      s(:def, :bbox,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :item_bbox,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :children,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_children,
          s(:ivar, :@id))),
      s(:def, :collapse,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_collapse,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :collapse_recurse,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_collapse_recurse,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :complex,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_complex,
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :cget_tkstring,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :item_cget_tkstring,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :cget,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :item_cget,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :cget_strict,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :item_cget_strict,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :configure,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :item_configure,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :item_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :current_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :current_item_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :delete,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_delete,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :element_dump,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_dump,
          s(:ivar, :@id))),
      s(:def, :element_dump_hash,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_dump_hash,
          s(:ivar, :@id))),
      s(:def, :element_actual,
        s(:args,
          s(:arg, :column),
          s(:arg, :elem),
          s(:arg, :key)),
        s(:send,
          s(:ivar, :@tree), :item_element_actual,
          s(:ivar, :@id),
          s(:lvar, :column),
          s(:lvar, :elem),
          s(:lvar, :key))),
      s(:def, :element_cget_tkstring,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :item_element_cget,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :element_cget_tkstring,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :item_element_cget,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :element_cget_strict,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :item_element_cget_strict,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :element_configure,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :item_element_configure,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :element_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :item_element_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :current_element_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :current_item_element_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :expand,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_expand,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :expand_recurse,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_expand_recurse,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :firstchild,
        s(:args,
          s(:optarg, :child,
            s(:nil))),
        s(:if,
          s(:lvar, :child),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_firstchild,
              s(:ivar, :@id),
              s(:lvar, :child)),
            s(:self)),
          s(:send,
            s(:ivar, :@tree), :item_firstchild,
            s(:ivar, :@id)))),
      s(:alias,
        s(:sym, :first_child),
        s(:sym, :firstchild)),
      s(:def, :hasbutton,
        s(:args,
          s(:optarg, :st,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :st), :==,
            s(:const, nil, :None)),
          s(:send,
            s(:ivar, :@tree), :item_hasbutton,
            s(:ivar, :@id)),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_hasbutton,
              s(:ivar, :@id),
              s(:lvar, :st)),
            s(:self)))),
      s(:alias,
        s(:sym, :has_button),
        s(:sym, :hasbutton)),
      s(:def, :hasbutton?,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_hasbutton,
          s(:ivar, :@id))),
      s(:alias,
        s(:sym, :has_button?),
        s(:sym, :hasbutton?)),
      s(:def, :index,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_index,
          s(:ivar, :@id))),
      s(:def, :isancestor,
        s(:args,
          s(:arg, :des)),
        s(:send,
          s(:ivar, :@tree), :item_isancestor,
          s(:ivar, :@id),
          s(:lvar, :des))),
      s(:alias,
        s(:sym, :is_ancestor),
        s(:sym, :isancestor)),
      s(:alias,
        s(:sym, :isancestor?),
        s(:sym, :isancestor)),
      s(:alias,
        s(:sym, :is_ancestor?),
        s(:sym, :isancestor)),
      s(:alias,
        s(:sym, :ancestor?),
        s(:sym, :isancestor)),
      s(:def, :isopen,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_isopen,
          s(:ivar, :@id))),
      s(:alias,
        s(:sym, :is_open),
        s(:sym, :isopen)),
      s(:alias,
        s(:sym, :isopen?),
        s(:sym, :isopen)),
      s(:alias,
        s(:sym, :is_open?),
        s(:sym, :isopen)),
      s(:alias,
        s(:sym, :isopened?),
        s(:sym, :isopen)),
      s(:alias,
        s(:sym, :is_opened?),
        s(:sym, :isopen)),
      s(:alias,
        s(:sym, :open?),
        s(:sym, :isopen)),
      s(:def, :lastchild,
        s(:args,
          s(:optarg, :child,
            s(:nil))),
        s(:if,
          s(:lvar, :child),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_lastchild,
              s(:ivar, :@id),
              s(:lvar, :child)),
            s(:self)),
          s(:send,
            s(:ivar, :@tree), :item_lastchild,
            s(:ivar, :@id)))),
      s(:alias,
        s(:sym, :last_child),
        s(:sym, :lastchild)),
      s(:def, :nextsibling,
        s(:args,
          s(:optarg, :nxt,
            s(:nil))),
        s(:if,
          s(:lvar, :nxt),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_nextsibling,
              s(:ivar, :@id),
              s(:lvar, :nxt)),
            s(:self)),
          s(:send,
            s(:ivar, :@tree), :item_nextsibling,
            s(:ivar, :@id)))),
      s(:alias,
        s(:sym, :next_sibling),
        s(:sym, :nextsibling)),
      s(:def, :numchildren,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_numchildren,
          s(:ivar, :@id))),
      s(:alias,
        s(:sym, :num_children),
        s(:sym, :numchildren)),
      s(:alias,
        s(:sym, :children_size),
        s(:sym, :numchildren)),
      s(:def, :parent_index,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_parent,
          s(:ivar, :@id))),
      s(:def, :prevsibling,
        s(:args,
          s(:optarg, :nxt,
            s(:nil))),
        s(:if,
          s(:lvar, :nxt),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_prevsibling,
              s(:ivar, :@id),
              s(:lvar, :nxt)),
            s(:self)),
          s(:send,
            s(:ivar, :@tree), :item_prevsibling,
            s(:ivar, :@id)))),
      s(:alias,
        s(:sym, :prev_sibling),
        s(:sym, :prevsibling)),
      s(:def, :remove,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_remove,
          s(:ivar, :@id))),
      s(:def, :rnc,
        s(:args),
        s(:send,
          s(:ivar, :@tree), :item_rnc,
          s(:ivar, :@id))),
      s(:def, :sort,
        s(:args,
          s(:restarg, :opts)),
        s(:send,
          s(:ivar, :@tree), :item_sort,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :opts)))),
      s(:def, :sort_not_really,
        s(:args,
          s(:restarg, :opts)),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_sort_not_really,
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :opts))),
          s(:self))),
      s(:def, :state_forcolumn,
        s(:args,
          s(:arg, :column),
          s(:restarg, :args)),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_state_forcolumn,
            s(:ivar, :@id),
            s(:lvar, :column),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:alias,
        s(:sym, :state_for_column),
        s(:sym, :state_forcolumn)),
      s(:def, :state_get,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :item_state_get,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :state_set,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_state_set,
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :style_elements,
        s(:args,
          s(:arg, :column)),
        s(:send,
          s(:ivar, :@tree), :item_style_elements,
          s(:ivar, :@id),
          s(:lvar, :column))),
      s(:def, :style_map,
        s(:args,
          s(:arg, :column),
          s(:arg, :style),
          s(:arg, :map)),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_style_map,
            s(:ivar, :@id),
            s(:lvar, :column),
            s(:lvar, :style),
            s(:lvar, :map)),
          s(:self))),
      s(:def, :style_set,
        s(:args,
          s(:optarg, :column,
            s(:nil)),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send,
            s(:ivar, :@tree), :item_style_set,
            s(:ivar, :@id),
            s(:lvar, :column)),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_style_set,
              s(:ivar, :@id),
              s(:lvar, :column),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :item_text,
        s(:args,
          s(:arg, :column),
          s(:optarg, :txt,
            s(:nil)),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:if,
            s(:lvar, :txt),
            s(:begin,
              s(:send,
                s(:ivar, :@tree), :item_text,
                s(:ivar, :@id),
                s(:lvar, :column),
                s(:lvar, :txt)),
              s(:self)),
            s(:send,
              s(:ivar, :@tree), :item_text,
              s(:ivar, :@id),
              s(:lvar, :column))),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_text,
              s(:ivar, :@id),
              s(:lvar, :column),
              s(:lvar, :txt),
              s(:splat,
                s(:lvar, :args))),
            s(:self)))),
      s(:def, :toggle,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_toggle,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :toggle_recurse,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :item_toggle_recurse,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :visible,
        s(:args,
          s(:optarg, :st,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :st), :==,
            s(:const, nil, :None)),
          s(:send,
            s(:ivar, :@tree), :item_visible,
            s(:ivar, :@id)),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :item_visible,
              s(:ivar, :@id),
              s(:lvar, :st)),
            s(:self)))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :Style),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:casgn, nil, :TreeCtrlStyleID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :TreeCtrlStyleID,
              s(:array,
                s(:send,
                  s(:str, "treectrl_style"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :mutex), :synchronize),
          s(:args),
          s(:send,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :clear))),
      s(:defs,
        s(:self), :id2obj,
        s(:args,
          s(:arg, :tree),
          s(:arg, :id)),
        s(:begin,
          s(:lvasgn, :tpath,
            s(:send,
              s(:lvar, :tree), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                s(:lvar, :tpath)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                    s(:lvar, :tpath)), :[],
                  s(:lvar, :id)),
                s(:lvar, :id)),
              s(:lvar, :id))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@tree,
            s(:lvar, :parent)),
          s(:ivasgn, :@tpath,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:ivasgn, :@path,
                s(:ivasgn, :@id,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_ip_id_)))),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID), :[],
                  s(:int, 1)), :succ!))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                  s(:ivar, :@tpath)),
                s(:hash)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :TreeCtrl), :Style), :TreeCtrlStyleID_TBL), :[],
                  s(:ivar, :@tpath)), :[]=,
                s(:ivar, :@id),
                s(:self)))),
          s(:send,
            s(:ivar, :@tree), :style_create,
            s(:ivar, :@id),
            s(:lvar, :keys)))),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:ivar, :@id), :dup)),
      s(:def, :cget_tkstring,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :style_cget_tkstring,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :cget,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :style_cget,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :cget_strict,
        s(:args,
          s(:arg, :opt)),
        s(:send,
          s(:ivar, :@tree), :style_cget_strict,
          s(:ivar, :@id),
          s(:lvar, :opt))),
      s(:def, :configure,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :style_configure,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :style_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :current_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@tree), :current_style_configinfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :delete,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@tree), :style_delete,
            s(:ivar, :@id)),
          s(:self))),
      s(:def, :elements,
        s(:args,
          s(:restarg, :elems)),
        s(:if,
          s(:send,
            s(:lvar, :elems), :empty?),
          s(:send,
            s(:ivar, :@tree), :style_elements,
            s(:ivar, :@id)),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :style_elements,
              s(:ivar, :@id),
              s(:splat,
                s(:lvar, :elems))),
            s(:self)))),
      s(:def, :layout,
        s(:args,
          s(:arg, :elem),
          s(:optarg, :keys,
            s(:const, nil, :None))),
        s(:if,
          s(:and,
            s(:and,
              s(:lvar, :keys),
              s(:send,
                s(:lvar, :keys), :!=,
                s(:const, nil, :None))),
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash))),
          s(:begin,
            s(:send,
              s(:ivar, :@tree), :style_layout,
              s(:ivar, :@id),
              s(:lvar, :elem),
              s(:lvar, :keys)),
            s(:self)),
          s(:send,
            s(:ivar, :@tree), :style_layout,
            s(:ivar, :@id),
            s(:lvar, :elem),
            s(:lvar, :keys)))))),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :BindCallback),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Tk)),
      s(:send, nil, :extend,
        s(:const, nil, :Tk)))),
  s(:sclass,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :TreeCtrl), :BindCallback),
    s(:begin,
      s(:def, :percentsCmd,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::PercentsCmd"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :cursorCheck,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::CursorCheck"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :cursorCheckAux,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::CursorCheckAux"),
          s(:lvar, :w))),
      s(:def, :cursorCancel,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::CursorCancel"),
          s(:lvar, :w))),
      s(:def, :buttonPress1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::ButtonPress1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :doubleButton1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::DoubleButton1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :motion1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::Motion1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :leave1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::Leave1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :release1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::Release1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :beginSelect,
        s(:args,
          s(:arg, :w),
          s(:arg, :el)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::BeginSelect"),
          s(:lvar, :w),
          s(:lvar, :el))),
      s(:def, :motion,
        s(:args,
          s(:arg, :w),
          s(:arg, :le)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::Motion"),
          s(:lvar, :w),
          s(:send, nil, :el))),
      s(:def, :beginExtend,
        s(:args,
          s(:arg, :w),
          s(:arg, :el)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::BeginExtend"),
          s(:lvar, :w),
          s(:lvar, :el))),
      s(:def, :beginToggle,
        s(:args,
          s(:arg, :w),
          s(:arg, :el)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::BeginToggle"),
          s(:lvar, :w),
          s(:lvar, :el))),
      s(:def, :cancelRepeat,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::CancelRepeat"))),
      s(:def, :autoScanCheck,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::AutoScanCheck"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :autoScanCheckAux,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::AutoScanCheckAux"),
          s(:lvar, :w))),
      s(:def, :autoScanCancel,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::AutoScanCancel"),
          s(:lvar, :w))),
      s(:def, :up_down,
        s(:args,
          s(:arg, :w),
          s(:arg, :n)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::UpDown"),
          s(:lvar, :w),
          s(:lvar, :n))),
      s(:def, :left_right,
        s(:args,
          s(:arg, :w),
          s(:arg, :n)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::LeftRight"),
          s(:lvar, :w),
          s(:lvar, :n))),
      s(:def, :setActiveItem,
        s(:args,
          s(:arg, :w),
          s(:arg, :idx)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::SetActiveItem"),
          s(:lvar, :w),
          s(:lvar, :idx))),
      s(:def, :extendUpDown,
        s(:args,
          s(:arg, :w),
          s(:arg, :amount)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::ExtendUpDown"),
          s(:lvar, :w),
          s(:lvar, :amount))),
      s(:def, :dataExtend,
        s(:args,
          s(:arg, :w),
          s(:arg, :el)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::DataExtend"),
          s(:lvar, :w),
          s(:lvar, :el))),
      s(:def, :cancel,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::Cancel"),
          s(:lvar, :w))),
      s(:def, :selectAll,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::selectAll"),
          s(:lvar, :w))),
      s(:def, :marqueeBegin,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::MarqueeBegin"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :marqueeUpdate,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::MarqueeUpdate"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :marqueeEnd,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::MarqueeEnd"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :scanMark,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::ScanMark"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :scanDrag,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::ScanDrag"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_button1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListButton1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_motion1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListMotion1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_motion,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListMotion"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_leave1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListLeave1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_release1,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListRelease1"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_edit,
        s(:args,
          s(:arg, :w),
          s(:arg, :i),
          s(:arg, :s),
          s(:arg, :e)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListEdit"),
          s(:lvar, :w),
          s(:lvar, :i),
          s(:lvar, :s),
          s(:lvar, :e))),
      s(:def, :fileList_editCancel,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListEditCancel"),
          s(:lvar, :w))),
      s(:def, :fileList_autoScanCheck,
        s(:args,
          s(:arg, :w),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListAutoScanCheck"),
          s(:lvar, :w),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :fileList_autoScanCheckAux,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::FileListAutoScanCheckAux"),
          s(:lvar, :w))),
      s(:def, :entryOpen,
        s(:args,
          s(:arg, :w),
          s(:arg, :item),
          s(:arg, :col),
          s(:arg, :elem)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::EntryOpen"),
          s(:lvar, :w),
          s(:lvar, :item),
          s(:lvar, :col),
          s(:lvar, :elem))),
      s(:def, :entryExpanderOpen,
        s(:args,
          s(:arg, :w),
          s(:arg, :item),
          s(:arg, :col),
          s(:arg, :elem)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::EntryExpanderOpen"),
          s(:lvar, :w),
          s(:lvar, :item),
          s(:lvar, :col),
          s(:lvar, :elem))),
      s(:def, :entryClose,
        s(:args,
          s(:arg, :w),
          s(:arg, :accept)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::EntryClose"),
          s(:lvar, :w),
          s(:lvar, :accept))),
      s(:def, :entryExpanderKeypress,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::EntryExpanderKeypress"),
          s(:lvar, :w))),
      s(:def, :textOpen,
        s(:args,
          s(:arg, :w),
          s(:arg, :item),
          s(:arg, :col),
          s(:arg, :elem),
          s(:optarg, :width,
            s(:int, 0)),
          s(:optarg, :height,
            s(:int, 0))),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::TextOpen"),
          s(:lvar, :w),
          s(:lvar, :item),
          s(:lvar, :col),
          s(:lvar, :elem),
          s(:lvar, :width),
          s(:lvar, :height))),
      s(:def, :textExpanderOpen,
        s(:args,
          s(:arg, :w),
          s(:arg, :item),
          s(:arg, :col),
          s(:arg, :elem),
          s(:arg, :width)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::TextOpen"),
          s(:lvar, :w),
          s(:lvar, :item),
          s(:lvar, :col),
          s(:lvar, :elem),
          s(:lvar, :width))),
      s(:def, :textClose,
        s(:args,
          s(:arg, :w),
          s(:arg, :accept)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::TextClose"),
          s(:lvar, :w),
          s(:lvar, :accept))),
      s(:def, :textExpanderKeypress,
        s(:args,
          s(:arg, :w)),
        s(:send, nil, :tk_call,
          s(:str, "::TreeCtrl::TextExpanderKeypress"),
          s(:lvar, :w))))))
