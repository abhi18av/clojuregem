s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Vu),
      s(:begin,
        s(:module,
          s(:const, nil, :PieSliceConfigMethod), nil),
        s(:class,
          s(:const, nil, :Pie),
          s(:const, nil, :TkWindow), nil),
        s(:class,
          s(:const, nil, :PieSlice),
          s(:const, nil, :TkObject), nil),
        s(:class,
          s(:const, nil, :NamedPieSlice),
          s(:const, nil, :PieSlice), nil)))),
  s(:send, nil, :require,
    s(:str, "tkextlib/vu.rb")),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Vu), :PieSliceConfigMethod),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :__item_pathname,
        s(:args,
          s(:arg, :tagOrId)),
        s(:if,
          s(:send,
            s(:lvar, :tagOrId), :kind_of?,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Vu), :PieSlice)),
          s(:send,
            s(:send,
              s(:send,
                s(:self), :path), :+,
              s(:str, ";")), :+,
            s(:send,
              s(:send,
                s(:lvar, :tagOrId), :id), :to_s)),
          s(:send,
            s(:send,
              s(:send,
                s(:self), :path), :+,
              s(:str, ";")), :+,
            s(:send,
              s(:lvar, :tagOrId), :to_s)))),
      s(:send, nil, :private,
        s(:sym, :__item_pathname)))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Vu), :Pie),
    s(:const, nil, :TkWindow),
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::vu::pie"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Pie"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :__destroy_hook__,
        s(:args),
        s(:send,
          s(:const,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Vu), :PieSlice), :SliceID_TBL), :delete,
          s(:ivar, :@path))),
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :Vu), :PieSliceConfigMethod)),
      s(:def, :tagid,
        s(:args,
          s(:arg, :tag)),
        s(:if,
          s(:send,
            s(:lvar, :tag), :kind_of?,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Vu), :PieSlice)),
          s(:send,
            s(:lvar, :tag), :id),
          s(:send, nil, :_get_eval_string,
            s(:lvar, :tag)))),
      s(:def, :delete,
        s(:args,
          s(:restarg, :glob_pats)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "delete"),
            s(:splat,
              s(:lvar, :glob_pats))),
          s(:self))),
      s(:def, :explode,
        s(:args,
          s(:arg, :slice),
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "explode"),
            s(:lvar, :slice),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :explode_value,
        s(:args,
          s(:arg, :slice)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "explode"),
            s(:lvar, :slice)))),
      s(:def, :lower,
        s(:args,
          s(:arg, :slice),
          s(:optarg, :below,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "lower"),
            s(:lvar, :slice),
            s(:lvar, :below)),
          s(:self))),
      s(:def, :names,
        s(:args,
          s(:restarg, :glob_pats)),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "names"),
            s(:splat,
              s(:lvar, :glob_pats))))),
      s(:alias,
        s(:sym, :slices),
        s(:sym, :names)),
      s(:def, :order,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "order"),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :raise,
        s(:args,
          s(:arg, :slice),
          s(:optarg, :above,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "raise"),
            s(:lvar, :slice),
            s(:lvar, :above)),
          s(:self))),
      s(:def, :swap,
        s(:args,
          s(:arg, :slice1),
          s(:arg, :slice2)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "swap"),
            s(:lvar, :slice1),
            s(:lvar, :slice2)),
          s(:self))),
      s(:def, :set,
        s(:args,
          s(:arg, :slice),
          s(:restarg, :args)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "set"),
            s(:lvar, :slice),
            s(:splat,
              s(:lvar, :args))))),
      s(:alias,
        s(:sym, :set_value),
        s(:sym, :set)),
      s(:alias,
        s(:sym, :set_values),
        s(:sym, :set)),
      s(:alias,
        s(:sym, :create),
        s(:sym, :set)),
      s(:def, :slice_value,
        s(:args,
          s(:arg, :slice)),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "set"),
            s(:lvar, :slice)))),
      s(:def, :value,
        s(:args,
          s(:optarg, :val,
            s(:const, nil, :None))),
        s(:send, nil, :num_or_str,
          s(:send, nil, :tk_call_without_enc,
            s(:ivar, :@path),
            s(:str, "value")))),
      s(:alias,
        s(:sym, :sum_value),
        s(:sym, :value)))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Vu), :PieSlice), nil,
    s(:begin,
      s(:casgn, nil, :SliceID_TBL,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :create_table)),
      s(:block,
        s(:send,
          s(:begin,
            s(:casgn, nil, :Pie_Slice_ID,
              s(:array,
                s(:send,
                  s(:str, "vu:pie"), :freeze),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:str, "00000"))))), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :init_ip_env),
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :SliceID_TBL), :mutex), :synchronize),
          s(:args),
          s(:send,
            s(:const, nil, :SliceID_TBL), :clear))),
      s(:defs,
        s(:self), :id2obj,
        s(:args,
          s(:arg, :pie),
          s(:arg, :id)),
        s(:begin,
          s(:lvasgn, :pie_path,
            s(:send,
              s(:lvar, :pie), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :SliceID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :SliceID_TBL), :[],
                s(:lvar, :pie_path)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :SliceID_TBL), :[],
                    s(:lvar, :pie_path)), :[],
                  s(:lvar, :id)),
                s(:send,
                  s(:send,
                    s(:const, nil, :SliceID_TBL), :[],
                    s(:lvar, :pie_path)), :[],
                  s(:lvar, :id)),
                s(:lvar, :id)),
              s(:lvar, :id))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :parent), :kind_of?,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Vu), :Pie)), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "expect a Tk::Vu::Pie instance for 1st argument"))),
          s(:ivasgn, :@parent,
            s(:ivasgn, :@pie,
              s(:lvar, :parent))),
          s(:ivasgn, :@ppath,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Pie_Slice_ID), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:ivasgn, :@path,
                s(:ivasgn, :@id,
                  s(:send,
                    s(:const, nil, :Pie_Slice_ID), :join,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_ip_id_)))),
              s(:send,
                s(:send,
                  s(:const, nil, :Pie_Slice_ID), :[],
                  s(:int, 1)), :succ!))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :SliceID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[],
                  s(:ivar, :@ppath)), nil,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[]=,
                  s(:ivar, :@ppath),
                  s(:hash))),
              s(:send,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[],
                  s(:ivar, :@ppath)), :[]=,
                s(:ivar, :@id),
                s(:self)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, -1)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:lvasgn, :keys,
              s(:send,
                s(:lvar, :args), :unshift)), nil),
          s(:send,
            s(:ivar, :@pie), :set,
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :args))),
          s(:send, nil, :configure,
            s(:lvar, :keys)))),
      s(:def, :id,
        s(:args),
        s(:ivar, :@id)),
      s(:def, :[],
        s(:args,
          s(:arg, :key)),
        s(:send, nil, :cget,
          s(:lvar, :key))),
      s(:def, :[]=,
        s(:args,
          s(:arg, :key),
          s(:arg, :val)),
        s(:begin,
          s(:send, nil, :configure,
            s(:lvar, :key),
            s(:lvar, :val)),
          s(:lvar, :val))),
      s(:def, :cget_tkstring,
        s(:args,
          s(:arg, :slot)),
        s(:send,
          s(:ivar, :@pie), :itemcget_tkstring,
          s(:ivar, :@id),
          s(:lvar, :slot))),
      s(:def, :cget,
        s(:args,
          s(:arg, :slot)),
        s(:send,
          s(:ivar, :@pie), :itemcget,
          s(:ivar, :@id),
          s(:lvar, :slot))),
      s(:def, :cget_strict,
        s(:args,
          s(:arg, :slot)),
        s(:send,
          s(:ivar, :@pie), :itemcget_strict,
          s(:ivar, :@id),
          s(:lvar, :slot))),
      s(:def, :configure,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send,
            s(:ivar, :@pie), :itemconfigure,
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:def, :configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@pie), :itemconfiginfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :current_configinfo,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:ivar, :@pie), :current_itemconfiginfo,
          s(:ivar, :@id),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :delete,
        s(:args),
        s(:send,
          s(:ivar, :@pie), :delete,
          s(:ivar, :@id))),
      s(:def, :explode,
        s(:args,
          s(:arg, :value)),
        s(:begin,
          s(:send,
            s(:ivar, :@pie), :explode,
            s(:ivar, :@id),
            s(:lvar, :value)),
          s(:self))),
      s(:def, :explode_value,
        s(:args),
        s(:send,
          s(:ivar, :@pie), :explode_value,
          s(:ivar, :@id))),
      s(:def, :lower,
        s(:args,
          s(:optarg, :other,
            s(:const, nil, :None))),
        s(:begin,
          s(:send,
            s(:ivar, :@pie), :lower,
            s(:ivar, :@id),
            s(:lvar, :other)),
          s(:self))),
      s(:def, :raise,
        s(:args,
          s(:optarg, :other,
            s(:const, nil, :None))),
        s(:begin,
          s(:send,
            s(:ivar, :@pie), :raise,
            s(:ivar, :@id),
            s(:lvar, :other)),
          s(:self))),
      s(:def, :set,
        s(:args,
          s(:arg, :value)),
        s(:begin,
          s(:send,
            s(:ivar, :@pie), :set,
            s(:ivar, :@id),
            s(:lvar, :value)),
          s(:self))),
      s(:alias,
        s(:sym, :set_value),
        s(:sym, :set)),
      s(:def, :value,
        s(:args),
        s(:send,
          s(:ivar, :@pie), :set,
          s(:ivar, :@id))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Vu), :NamedPieSlice), nil,
    s(:begin,
      s(:defs,
        s(:self), :new,
        s(:args,
          s(:arg, :parent),
          s(:arg, :name),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :obj,
            s(:nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :SliceID_TBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[],
                  s(:send,
                    s(:lvar, :parent), :path)),
                s(:send,
                  s(:send,
                    s(:const, nil, :SliceID_TBL), :[],
                    s(:send,
                      s(:lvar, :parent), :path)), :[],
                  s(:lvar, :name))),
              s(:lvasgn, :obj,
                s(:send,
                  s(:send,
                    s(:const, nil, :SliceID_TBL), :[],
                    s(:send,
                      s(:lvar, :parent), :path)), :[],
                  s(:lvar, :name))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :parent), :kind_of?,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :Vu), :Pie)), nil,
                  s(:send, nil, :fail,
                    s(:const, nil, :ArgumentError),
                    s(:str, "expect a Tk::Vu::Pie instance for 1st argument"))),
                s(:lvasgn, :obj,
                  s(:send,
                    s(:self), :allocate)),
                s(:block,
                  s(:send,
                    s(:lvar, :obj), :instance_eval),
                  s(:args),
                  s(:begin,
                    s(:ivasgn, :@parent,
                      s(:ivasgn, :@pie,
                        s(:lvar, :parent))),
                    s(:ivasgn, :@ppath,
                      s(:send,
                        s(:lvar, :parent), :path)),
                    s(:ivasgn, :@path,
                      s(:ivasgn, :@id,
                        s(:send,
                          s(:lvar, :name), :to_s))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :SliceID_TBL), :[],
                        s(:ivar, :@ppath)), nil,
                      s(:send,
                        s(:const, nil, :SliceID_TBL), :[]=,
                        s(:ivar, :@ppath),
                        s(:hash))),
                    s(:send,
                      s(:send,
                        s(:const, nil, :SliceID_TBL), :[],
                        s(:ivar, :@ppath)), :[]=,
                      s(:ivar, :@id),
                      s(:self))))))),
          s(:block,
            s(:send,
              s(:lvar, :obj), :instance_eval),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, -1)), :kind_of?,
                  s(:const, nil, :Hash)),
                s(:lvasgn, :keys,
                  s(:send,
                    s(:lvar, :args), :unshift)), nil),
              s(:send,
                s(:ivar, :@pie), :set,
                s(:ivar, :@id),
                s(:splat,
                  s(:lvar, :args))),
              s(:send, nil, :configure,
                s(:lvar, :keys)))),
          s(:lvar, :obj))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :parent),
          s(:arg, :name),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :parent), :kind_of?,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Vu), :Pie)), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "expect a Tk::Vu::Pie instance for 1st argument"))),
          s(:ivasgn, :@parent,
            s(:ivasgn, :@pie,
              s(:lvar, :parent))),
          s(:ivasgn, :@ppath,
            s(:send,
              s(:lvar, :parent), :path)),
          s(:ivasgn, :@path,
            s(:ivasgn, :@id,
              s(:send,
                s(:lvar, :name), :to_s))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :SliceID_TBL), :mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[],
                  s(:ivar, :@ppath)), nil,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[]=,
                  s(:ivar, :@ppath),
                  s(:hash))),
              s(:send,
                s(:send,
                  s(:const, nil, :SliceID_TBL), :[],
                  s(:ivar, :@ppath)), :[]=,
                s(:ivar, :@id),
                s(:self)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :[],
                s(:int, -1)), :kind_of?,
              s(:const, nil, :Hash)),
            s(:lvasgn, :keys,
              s(:send,
                s(:lvar, :args), :unshift)), nil),
          s(:send,
            s(:ivar, :@pie), :set,
            s(:ivar, :@id),
            s(:splat,
              s(:lvar, :args))),
          s(:send, nil, :configure,
            s(:lvar, :keys)))))))
