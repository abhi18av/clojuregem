s(:begin,
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Tcllib),
      s(:begin,
        s(:class,
          s(:const, nil, :Tablelist),
          s(:const, nil, :TkWindow),
          s(:begin,
            s(:if,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Tcllib), :Tablelist_usingTile),
              s(:casgn, nil, :PACKAGE_NAME,
                s(:send,
                  s(:str, "Tablelist_tile"), :freeze)),
              s(:casgn, nil, :PACKAGE_NAME,
                s(:send,
                  s(:str, "Tablelist"), :freeze))),
            s(:defs,
              s(:self), :package_name,
              s(:args),
              s(:const, nil, :PACKAGE_NAME)),
            s(:defs,
              s(:self), :package_version,
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :TkPackage), :require,
                    s(:send,
                      s(:self), :package_name)),
                  s(:resbody, nil, nil,
                    s(:str, "")), nil))),
            s(:defs,
              s(:self), :use_Tile?,
              s(:args),
              s(:if,
                s(:begin,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Tcllib), :Tablelist_usingTile)),
                s(:true),
                s(:false))))),
        s(:casgn, nil, :TableList,
          s(:const, nil, :Tablelist))))),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tcllib), :TablelistItemConfig),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :_to_idx,
        s(:args,
          s(:arg, :idx)),
        s(:if,
          s(:send,
            s(:lvar, :idx), :kind_of?,
            s(:const, nil, :Array)),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :idx), :collect),
              s(:args,
                s(:arg, :elem)),
              s(:send, nil, :_get_eval_string,
                s(:lvar, :elem))), :join,
            s(:str, ",")),
          s(:lvar, :idx))),
      s(:def, :_from_idx,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :idx), :kind_of?,
              s(:const, nil, :String)), nil,
            s(:return,
              s(:lvar, :idx))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :idx), :[],
                s(:int, 0)), :==,
              s(:str, "@")),
            s(:lvar, :idx),
            s(:if,
              s(:send,
                s(:lvar, :idx), :=~,
                s(:regexp,
                  s(:str, "([^,]+),([^,]+)"),
                  s(:regopt))),
              s(:begin,
                s(:lvasgn, :row,
                  s(:array,
                    s(:nth_ref, 1),
                    s(:lvasgn, :column,
                      s(:nth_ref, 2)))),
                s(:array,
                  s(:send, nil, :num_or_str,
                    s(:lvar, :row)),
                  s(:send, nil, :num_or_str,
                    s(:lvar, :column)))),
              s(:send, nil, :num_or_str,
                s(:lvar, :idx)))))),
      s(:send, nil, :private,
        s(:sym, :_to_idx),
        s(:sym, :_from_idx)),
      s(:def, :__item_cget_cmd,
        s(:args,
          s(:arg, :mixed_id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:send,
            s(:send,
              s(:lvar, :mixed_id), :[],
              s(:int, 0)), :+,
            s(:str, "cget")),
          s(:send, nil, :_to_idx,
            s(:send,
              s(:lvar, :mixed_id), :[],
              s(:int, 1))))),
      s(:def, :__item_config_cmd,
        s(:args,
          s(:arg, :mixed_id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:send,
            s(:send,
              s(:lvar, :mixed_id), :[],
              s(:int, 0)), :+,
            s(:str, "configure")),
          s(:send, nil, :_to_idx,
            s(:send,
              s(:lvar, :mixed_id), :[],
              s(:int, 1))))),
      s(:def, :cell_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "cell"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :cell_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "cell"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :cell_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "cell"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :cell_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "cell"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :cell_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "cell"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_cell_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "cell"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:alias,
        s(:sym, :cellcget_tkstring),
        s(:sym, :cell_cget_tkstring)),
      s(:alias,
        s(:sym, :cellcget),
        s(:sym, :cell_cget)),
      s(:alias,
        s(:sym, :cellcget_strict),
        s(:sym, :cell_cget_strict)),
      s(:alias,
        s(:sym, :cellconfigure),
        s(:sym, :cell_configure)),
      s(:alias,
        s(:sym, :cellconfiginfo),
        s(:sym, :cell_configinfo)),
      s(:alias,
        s(:sym, :current_cellconfiginfo),
        s(:sym, :current_cell_configinfo)),
      s(:def, :column_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :column_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :column_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :column_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :column_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_column_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "column"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:alias,
        s(:sym, :columncget_tkstring),
        s(:sym, :column_cget_tkstring)),
      s(:alias,
        s(:sym, :columncget),
        s(:sym, :column_cget)),
      s(:alias,
        s(:sym, :columncget_strict),
        s(:sym, :column_cget_strict)),
      s(:alias,
        s(:sym, :columnconfigure),
        s(:sym, :column_configure)),
      s(:alias,
        s(:sym, :columnconfiginfo),
        s(:sym, :column_configinfo)),
      s(:alias,
        s(:sym, :current_columnconfiginfo),
        s(:sym, :current_column_configinfo)),
      s(:def, :row_cget_tkstring,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_tkstring,
          s(:array,
            s(:str, "row"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :row_cget,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget,
          s(:array,
            s(:str, "row"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :row_cget_strict,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :option)),
        s(:send, nil, :itemcget_strict,
          s(:array,
            s(:str, "row"),
            s(:lvar, :tagOrId)),
          s(:lvar, :option))),
      s(:def, :row_configure,
        s(:args,
          s(:arg, :tagOrId),
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send, nil, :itemconfigure,
          s(:array,
            s(:str, "row"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:def, :row_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :itemconfiginfo,
          s(:array,
            s(:str, "row"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:def, :current_row_configinfo,
        s(:args,
          s(:arg, :tagOrId),
          s(:optarg, :slot,
            s(:nil))),
        s(:send, nil, :current_itemconfiginfo,
          s(:array,
            s(:str, "row"),
            s(:lvar, :tagOrId)),
          s(:lvar, :slot))),
      s(:alias,
        s(:sym, :rowcget_tkstring),
        s(:sym, :row_cget_tkstring)),
      s(:alias,
        s(:sym, :rowcget),
        s(:sym, :row_cget)),
      s(:alias,
        s(:sym, :rowcget_strict),
        s(:sym, :row_cget_strict)),
      s(:alias,
        s(:sym, :rowconfigure),
        s(:sym, :row_configure)),
      s(:alias,
        s(:sym, :rowconfiginfo),
        s(:sym, :row_configinfo)),
      s(:alias,
        s(:sym, :current_rowconfiginfo),
        s(:sym, :current_row_configinfo)),
      s(:send, nil, :private,
        s(:sym, :itemcget_tkstring),
        s(:sym, :itemcget),
        s(:sym, :itemcget_strict)),
      s(:send, nil, :private,
        s(:sym, :itemconfigure),
        s(:sym, :itemconfiginfo),
        s(:sym, :current_itemconfiginfo)))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tcllib), :Tablelist), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :Tcllib), :TablelistItemConfig)),
      s(:send, nil, :include,
        s(:const, nil, :Scrollable)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::tablelist::tablelist"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Tablelist"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :__numval_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "titlecolumns")))),
      s(:send, nil, :private,
        s(:sym, :__numval_optkeys)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "snipstring")))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:super), :-,
            s(:array,
              s(:str, "takefocus"))), :+,
          s(:array,
            s(:str, "forceeditendcommand"),
            s(:str, "movablecolumns"),
            s(:str, "movablerows"),
            s(:str, "protecttitlecolumns"),
            s(:str, "resizablecolumns"),
            s(:str, "setfocus"),
            s(:str, "showarrow"),
            s(:str, "showlabels"),
            s(:str, "showseparators")))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :__listval_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "columns"),
            s(:str, "columntitles")))),
      s(:send, nil, :private,
        s(:sym, :__listval_optkeys)),
      s(:def, :__tkvariable_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "listvariable")))),
      s(:send, nil, :private,
        s(:sym, :__tkvariable_optkeys)),
      s(:def, :__val2ruby_optkeys,
        s(:args),
        s(:send,
          s(:super), :update,
          s(:hash,
            s(:pair,
              s(:str, "stretch"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :v)),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :v), :==,
                      s(:str, "all"))),
                  s(:lvar, :v),
                  s(:send, nil, :simplelist,
                    s(:lvar, :v))))),
            s(:pair,
              s(:str, "takefocus"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :v)),
                s(:case,
                  s(:lvar, :v),
                  s(:when,
                    s(:str, "1"),
                    s(:true)),
                  s(:when,
                    s(:str, "0"),
                    s(:false)),
                  s(:when,
                    s(:str, ""),
                    s(:nil)),
                  s(:send, nil, :tk_tcl2ruby,
                    s(:send, nil, :cmd)))))))),
      s(:send, nil, :private,
        s(:sym, :__val2ruby_optkeys)),
      s(:def, :__ruby2val_optkeys,
        s(:args),
        s(:send,
          s(:super), :update,
          s(:hash,
            s(:pair,
              s(:str, "stretch"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :v)),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :v), :kind_of?,
                      s(:const, nil, :Array))),
                  s(:block,
                    s(:send,
                      s(:lvar, :v), :collect),
                    s(:args,
                      s(:arg, :e)),
                    s(:send, nil, :_to_idx,
                      s(:lvar, :e))),
                  s(:lvar, :v)))),
            s(:pair,
              s(:str, "takefocus"),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :v)),
                s(:case,
                  s(:lvar, :v),
                  s(:when,
                    s(:true),
                    s(:str, "1")),
                  s(:when,
                    s(:false),
                    s(:str, "0")),
                  s(:when,
                    s(:nil),
                    s(:str, "")),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :v)))))))),
      s(:send, nil, :private,
        s(:sym, :__ruby2val_optkeys)),
      s(:def, :__font_optkeys,
        s(:args),
        s(:send,
          s(:super), :+,
          s(:array,
            s(:str, "labelfont")))),
      s(:send, nil, :private,
        s(:sym, :__font_optkeys)),
      s(:def, :__item_strval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :id), :[],
              s(:int, 0)), :==,
            s(:str, "cell")),
          s(:send,
            s(:super,
              s(:lvar, :id)), :+,
            s(:array,
              s(:str, "title"))),
          s(:send,
            s(:send,
              s(:super,
                s(:lvar, :id)), :-,
              s(:array,
                s(:str, "text"))), :+,
            s(:array,
              s(:str, "title"),
              s(:str, "name"))))),
      s(:send, nil, :private,
        s(:sym, :__item_strval_optkeys)),
      s(:def, :__item_boolval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:super,
            s(:lvar, :id)), :+,
          s(:array,
            s(:str, "changesnipside"),
            s(:str, "editable"),
            s(:str, "hide"),
            s(:str, "resizable"),
            s(:str, "selectable"),
            s(:str, "showarrow"),
            s(:str, "showlinenumbers"),
            s(:str, "stretchable"),
            s(:str, "stretchwindow"),
            s(:str, "wrap")))),
      s(:send, nil, :private,
        s(:sym, :__item_boolval_optkeys)),
      s(:def, :__item_listval_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :id), :[],
              s(:int, 0)), :==,
            s(:str, "cell")),
          s(:super,
            s(:lvar, :id)),
          s(:send,
            s(:super,
              s(:lvar, :id)), :+,
            s(:array,
              s(:str, "text"))))),
      s(:send, nil, :private,
        s(:sym, :__item_listval_optkeys)),
      s(:def, :__item_font_optkeys,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:super,
            s(:lvar, :id)), :+,
          s(:array,
            s(:str, "labelfont")))),
      s(:send, nil, :private,
        s(:sym, :__item_font_optkeys)),
      s(:def, :activate,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "activate"),
            s(:send, nil, :_to_idx,
              s(:lvar, :index))),
          s(:self))),
      s(:def, :activate_cell,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "activatecell"),
            s(:send, nil, :_to_idx,
              s(:lvar, :index))),
          s(:self))),
      s(:alias,
        s(:sym, :activatecell),
        s(:sym, :activate_cell)),
      s(:def, :get_attrib,
        s(:args,
          s(:optarg, :name,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :name), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_send,
            s(:str, "attrib"),
            s(:lvar, :name)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:array)),
            s(:lvasgn, :lst,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "attrib")))),
            s(:until,
              s(:send,
                s(:lvar, :lst), :empty?),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:lvar, :lst), :shift)), :<<,
                    s(:send,
                      s(:lvar, :lst), :shift))))),
            s(:lvar, :ret)))),
      s(:def, :set_attrib,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "attrib"),
            s(:splat,
              s(:begin,
                s(:send,
                  s(:lvar, :args), :flatten)))),
          s(:self))),
      s(:def, :bbox,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "bbox"),
            s(:send, nil, :_to_idx,
              s(:lvar, :index))))),
      s(:def, :bodypath,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "bodypath")))),
      s(:def, :bodytag,
        s(:args),
        s(:send,
          s(:const, nil, :TkBindTag), :new_by_name,
          s(:send, nil, :tk_send,
            s(:str, "bodytag")))),
      s(:def, :cancel_editing,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "cancelediting")),
          s(:self))),
      s(:alias,
        s(:sym, :cancelediting),
        s(:sym, :cancel_editing)),
      s(:def, :get_cellattrib,
        s(:args,
          s(:optarg, :name,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :name), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_send,
            s(:str, "cellattrib"),
            s(:lvar, :name)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:array)),
            s(:lvasgn, :lst,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "cellattrib")))),
            s(:until,
              s(:send,
                s(:lvar, :lst), :empty?),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:lvar, :lst), :shift)), :<<,
                    s(:send,
                      s(:lvar, :lst), :shift))))),
            s(:lvar, :ret)))),
      s(:def, :set_cellattrib,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "cellattrib"),
            s(:splat,
              s(:begin,
                s(:send,
                  s(:lvar, :args), :flatten)))),
          s(:self))),
      s(:def, :cellindex,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :_from_idx,
          s(:send, nil, :tk_send,
            s(:str, "cellindex"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :cellselection_anchor,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "cellselection"),
            s(:str, "anchor"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))),
          s(:self))),
      s(:def, :cellselection_clear,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "cellselection"),
              s(:str, "clear"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "cellselection"),
                s(:str, "clear"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:def, :cellselection_includes,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "cellselection"),
            s(:str, "includes"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :cellselection_set,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "cellselection"),
              s(:str, "set"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "cellselection"),
                s(:str, "set"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:def, :get_columnattrib,
        s(:args,
          s(:optarg, :name,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :name), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_send,
            s(:str, "columnattrib"),
            s(:lvar, :name)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:array)),
            s(:lvasgn, :lst,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "columnattrib")))),
            s(:until,
              s(:send,
                s(:lvar, :lst), :empty?),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:lvar, :lst), :shift)), :<<,
                    s(:send,
                      s(:lvar, :lst), :shift))))),
            s(:lvar, :ret)))),
      s(:def, :set_columnattrib,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "columnattrib"),
            s(:splat,
              s(:begin,
                s(:send,
                  s(:lvar, :args), :flatten)))),
          s(:self))),
      s(:def, :columncount,
        s(:args),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "columncount")))),
      s(:def, :columnindex,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "columnindex"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :columnwidth,
        s(:args,
          s(:arg, :idx),
          s(:optarg, :opt,
            s(:nil))),
        s(:if,
          s(:lvar, :opt),
          s(:send, nil, :number,
            s(:send, nil, :tk_send,
              s(:str, "columnwidth"),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)),
              s(:dstr,
                s(:str, "-"),
                s(:begin,
                  s(:lvar, :opt))))),
          s(:send, nil, :number,
            s(:send, nil, :tk_send,
              s(:str, "columnwidth"),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)))))),
      s(:def, :requested_columnwidth,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :columnwidth,
          s(:lvar, :idx),
          s(:str, "requested"))),
      s(:def, :stretched_columnwidth,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :columnwidth,
          s(:lvar, :idx),
          s(:str, "stretched"))),
      s(:def, :total_columnwidth,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :columnwidth,
          s(:lvar, :idx),
          s(:str, "total"))),
      s(:def, :configcelllist,
        s(:args,
          s(:arg, :lst)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :lst), :slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :idx),
              s(:arg, :opt),
              s(:arg, :val)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send, nil, :_to_idx,
                    s(:lvar, :idx))), :<<,
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :opt)))), :<<,
              s(:lvar, :val))),
          s(:send, nil, :tk_send,
            s(:str, "configcelllist"),
            s(:lvar, :ary)),
          s(:self))),
      s(:alias,
        s(:sym, :config_celllist),
        s(:sym, :configcelllist)),
      s(:def, :configcells,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :args), :slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :idx),
              s(:arg, :opt),
              s(:arg, :val)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send, nil, :_to_idx,
                    s(:lvar, :idx))), :<<,
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :opt)))), :<<,
              s(:lvar, :val))),
          s(:send, nil, :tk_send,
            s(:str, "configcells"),
            s(:splat,
              s(:lvar, :ary))),
          s(:self))),
      s(:alias,
        s(:sym, :config_cells),
        s(:sym, :configcells)),
      s(:def, :configcolumnlist,
        s(:args,
          s(:arg, :lst)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :lst), :slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :idx),
              s(:arg, :opt),
              s(:arg, :val)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send, nil, :_to_idx,
                    s(:lvar, :idx))), :<<,
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :opt)))), :<<,
              s(:lvar, :val))),
          s(:send, nil, :tk_send,
            s(:str, "configcolumnlist"),
            s(:lvar, :ary)),
          s(:self))),
      s(:alias,
        s(:sym, :config_columnlist),
        s(:sym, :configcolumnlist)),
      s(:def, :configcolumns,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :args), :slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :idx),
              s(:arg, :opt),
              s(:arg, :val)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send, nil, :_to_idx,
                    s(:lvar, :idx))), :<<,
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :opt)))), :<<,
              s(:lvar, :val))),
          s(:send, nil, :tk_send,
            s(:str, "configcolumns"),
            s(:splat,
              s(:lvar, :ary))),
          s(:self))),
      s(:alias,
        s(:sym, :config_columns),
        s(:sym, :configcolumns)),
      s(:def, :configrowlist,
        s(:args,
          s(:arg, :lst)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :lst), :slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :idx),
              s(:arg, :opt),
              s(:arg, :val)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send, nil, :_to_idx,
                    s(:lvar, :idx))), :<<,
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :opt)))), :<<,
              s(:lvar, :val))),
          s(:send, nil, :tk_send,
            s(:str, "configrowlist"),
            s(:lvar, :ary)),
          s(:self))),
      s(:alias,
        s(:sym, :config_rowlist),
        s(:sym, :configrowlist)),
      s(:def, :configrows,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :ary,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :args), :slice,
              s(:int, 3)),
            s(:args,
              s(:arg, :idx),
              s(:arg, :opt),
              s(:arg, :val)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:send, nil, :_to_idx,
                    s(:lvar, :idx))), :<<,
                s(:dstr,
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :opt)))), :<<,
              s(:lvar, :val))),
          s(:send, nil, :tk_send,
            s(:str, "configrows"),
            s(:splat,
              s(:lvar, :ary))),
          s(:self))),
      s(:alias,
        s(:sym, :config_rows),
        s(:sym, :configrows)),
      s(:def, :containing,
        s(:args,
          s(:arg, :y)),
        s(:begin,
          s(:lvasgn, :idx,
            s(:send, nil, :num_or_str,
              s(:send, nil, :tk_send,
                s(:str, "containing"),
                s(:lvar, :y)))),
          s(:if,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :idx), :kind_of?,
                  s(:const, nil, :Fixnum)),
                s(:send,
                  s(:lvar, :idx), :<,
                  s(:int, 0)))),
            s(:nil),
            s(:lvar, :idx)))),
      s(:def, :containing_cell,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:lvasgn, :idx,
            s(:send, nil, :_from_idx,
              s(:send, nil, :tk_send,
                s(:str, "containingcell"),
                s(:lvar, :x),
                s(:lvar, :y)))),
          s(:if,
            s(:send,
              s(:lvar, :idx), :kind_of?,
              s(:const, nil, :Array)),
            s(:array,
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :idx), :[],
                          s(:int, 0)), :kind_of?,
                        s(:const, nil, :Fixnum)),
                      s(:send,
                        s(:send,
                          s(:lvar, :idx), :[],
                          s(:int, 0)), :<,
                        s(:int, 0)))),
                  s(:nil),
                  s(:send,
                    s(:lvar, :idx), :[],
                    s(:int, 0)))),
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :idx), :[],
                          s(:int, 1)), :kind_of?,
                        s(:const, nil, :Fixnum)),
                      s(:send,
                        s(:send,
                          s(:lvar, :idx), :[],
                          s(:int, 1)), :<,
                        s(:int, 0)))),
                  s(:nil),
                  s(:send,
                    s(:lvar, :idx), :[],
                    s(:int, 1))))),
            s(:lvar, :idx)))),
      s(:alias,
        s(:sym, :containingcell),
        s(:sym, :containing_cell)),
      s(:def, :containing_column,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:lvasgn, :idx,
            s(:send, nil, :num_or_str,
              s(:send, nil, :tk_send,
                s(:str, "containingcolumn"),
                s(:lvar, :x)))),
          s(:if,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :idx), :kind_of?,
                  s(:const, nil, :Fixnum)),
                s(:send,
                  s(:lvar, :idx), :<,
                  s(:int, 0)))),
            s(:nil),
            s(:lvar, :idx)))),
      s(:alias,
        s(:sym, :containingcolumn),
        s(:sym, :containing_column)),
      s(:def, :curcellselection,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "curcellselection"))), :collect!),
          s(:args,
            s(:arg, :idx)),
          s(:send, nil, :_from_idx,
            s(:lvar, :idx)))),
      s(:def, :curselection,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_send,
            s(:str, "curselection")))),
      s(:def, :delete_items,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "delete"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "delete"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:alias,
        s(:sym, :delete),
        s(:sym, :delete_items)),
      s(:alias,
        s(:sym, :deleteitems),
        s(:sym, :delete_items)),
      s(:def, :delete_columns,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "deletecolumns"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "deletecolumns"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:alias,
        s(:sym, :deletecolumns),
        s(:sym, :delete_columns)),
      s(:def, :edit_cell,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "editcell"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))),
          s(:self))),
      s(:alias,
        s(:sym, :editcell),
        s(:sym, :edit_cell)),
      s(:def, :editwintag,
        s(:args),
        s(:send,
          s(:const, nil, :TkBindTag), :new_by_name,
          s(:send, nil, :tk_send,
            s(:str, "editwintag")))),
      s(:def, :editwinpath,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "editwinpath")))),
      s(:def, :entrypath,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "entrypath")))),
      s(:def, :fill_column,
        s(:args,
          s(:arg, :idx),
          s(:arg, :txt)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "fillcolumn"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :txt)),
          s(:self))),
      s(:alias,
        s(:sym, :fillcolumn),
        s(:sym, :fill_column)),
      s(:def, :finish_editing,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "finishediting")),
          s(:self))),
      s(:alias,
        s(:sym, :finishediting),
        s(:sym, :finish_editing)),
      s(:def, :formatinfo,
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :key),
              s(:lvasgn, :row),
              s(:lvasgn, :col)),
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "formatinfo")))),
          s(:array,
            s(:lvar, :key),
            s(:send, nil, :number,
              s(:lvar, :row)),
            s(:send, nil, :number,
              s(:lvar, :col))))),
      s(:def, :get,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :first), :kind_of?,
            s(:const, nil, :Array)),
          s(:block,
            s(:send,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "get"),
                  s(:block,
                    s(:send,
                      s(:lvar, :first), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_to_idx,
                      s(:lvar, :idx))))), :collect!),
            s(:args,
              s(:arg, :elem)),
            s(:send, nil, :simplelist,
              s(:lvar, :elem))),
          s(:begin,
            s(:lvasgn, :first,
              s(:send, nil, :_to_idx,
                s(:lvar, :first))),
            s(:lvasgn, :last,
              s(:if,
                s(:begin,
                  s(:lvar, :last)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :last)),
                s(:lvar, :first))),
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "get"),
                s(:lvar, :first),
                s(:lvar, :last)))))),
      s(:def, :get_cells,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :first), :kind_of?,
            s(:const, nil, :Array)),
          s(:block,
            s(:send,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "getcells"),
                  s(:block,
                    s(:send,
                      s(:lvar, :first), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_to_idx,
                      s(:lvar, :idx))))), :collect!),
            s(:args,
              s(:arg, :elem)),
            s(:send, nil, :simplelist,
              s(:lvar, :elem))),
          s(:begin,
            s(:lvasgn, :first,
              s(:send, nil, :_to_idx,
                s(:lvar, :first))),
            s(:lvasgn, :last,
              s(:if,
                s(:begin,
                  s(:lvar, :last)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :last)),
                s(:lvar, :first))),
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "getcells"),
                s(:lvar, :first),
                s(:lvar, :last)))))),
      s(:alias,
        s(:sym, :getcells),
        s(:sym, :get_cells)),
      s(:def, :get_columns,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :first), :kind_of?,
            s(:const, nil, :Array)),
          s(:block,
            s(:send,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "getcolumns"),
                  s(:block,
                    s(:send,
                      s(:lvar, :first), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_to_idx,
                      s(:lvar, :idx))))), :collect!),
            s(:args,
              s(:arg, :elem)),
            s(:send, nil, :simplelist,
              s(:lvar, :elem))),
          s(:begin,
            s(:lvasgn, :first,
              s(:send, nil, :_to_idx,
                s(:lvar, :first))),
            s(:lvasgn, :last,
              s(:if,
                s(:begin,
                  s(:lvar, :last)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :last)),
                s(:lvar, :first))),
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "getcolumns"),
                s(:lvar, :first),
                s(:lvar, :last)))))),
      s(:alias,
        s(:sym, :getcolumns),
        s(:sym, :get_columns)),
      s(:def, :get_keys,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :first), :kind_of?,
            s(:const, nil, :Array)),
          s(:block,
            s(:send,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "getkeys"),
                  s(:block,
                    s(:send,
                      s(:lvar, :first), :collect),
                    s(:args,
                      s(:arg, :idx)),
                    s(:send, nil, :_to_idx,
                      s(:lvar, :idx))))), :collect!),
            s(:args,
              s(:arg, :elem)),
            s(:send, nil, :simplelist,
              s(:lvar, :elem))),
          s(:begin,
            s(:lvasgn, :first,
              s(:send, nil, :_to_idx,
                s(:lvar, :first))),
            s(:lvasgn, :last,
              s(:if,
                s(:begin,
                  s(:lvar, :last)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :last)),
                s(:lvar, :first))),
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "getkeys"),
                s(:lvar, :first),
                s(:lvar, :last)))))),
      s(:alias,
        s(:sym, :getkeys),
        s(:sym, :get_keys)),
      s(:def, :has_attrib?,
        s(:args,
          s(:arg, :name)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "hasattrib"),
            s(:lvar, :name)))),
      s(:def, :has_cellattrib?,
        s(:args,
          s(:arg, :idx),
          s(:arg, :name)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "hascellattrib"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :name)))),
      s(:def, :has_columnattrib?,
        s(:args,
          s(:arg, :idx),
          s(:arg, :name)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "hascolumnattrib"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :name)))),
      s(:def, :has_rowattrib?,
        s(:args,
          s(:arg, :idx),
          s(:arg, :name)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "hasrowattrib"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :name)))),
      s(:def, :imagelabelpath,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "imagelabelpath"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :index,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "index"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :insert,
        s(:args,
          s(:arg, :idx),
          s(:restarg, :items)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "insert"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:splat,
              s(:lvar, :items))),
          s(:self))),
      s(:def, :insert_columnlist,
        s(:args,
          s(:arg, :idx),
          s(:arg, :columnlist)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "insertcolumnlist"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :columnlist)),
          s(:self))),
      s(:alias,
        s(:sym, :insertcolumnlist),
        s(:sym, :insert_columnlist)),
      s(:def, :insert_columns,
        s(:args,
          s(:arg, :idx),
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "insertcolums"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:splat,
              s(:lvar, :args))),
          s(:self))),
      s(:alias,
        s(:sym, :insertcolumns),
        s(:sym, :insert_columns)),
      s(:def, :insert_list,
        s(:args,
          s(:arg, :idx),
          s(:arg, :list)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "insertlist"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :list)),
          s(:self))),
      s(:alias,
        s(:sym, :insertlist),
        s(:sym, :insert_list)),
      s(:def, :is_elem_snipped?,
        s(:args,
          s(:arg, :cellidx),
          s(:arg, :tkvar)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "iselemsnipped"),
            s(:send, nil, :_to_idx,
              s(:lvar, :cellidx)),
            s(:lvar, :tkvar)))),
      s(:alias,
        s(:sym, :elem_snipped?),
        s(:sym, :is_elem_snipped?)),
      s(:def, :is_title_snipped?,
        s(:args,
          s(:arg, :colidx),
          s(:arg, :tkvar)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "istitlesnipped"),
            s(:send, nil, :_to_idx,
              s(:lvar, :colidx)),
            s(:lvar, :tkvar)))),
      s(:alias,
        s(:sym, :title_snipped?),
        s(:sym, :is_title_snipped?)),
      s(:def, :itemlistvar,
        s(:args),
        s(:send,
          s(:const, nil, :TkVarAccess), :new,
          s(:send, nil, :tk_send,
            s(:str, "itemlistvar")))),
      s(:def, :labelpath,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "labelpath"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :labels,
        s(:args),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_send,
            s(:str, "labels")))),
      s(:def, :labeltag,
        s(:args),
        s(:send,
          s(:const, nil, :TkBindTag), :new_by_name,
          s(:send, nil, :tk_send,
            s(:str, "labeltag")))),
      s(:def, :move,
        s(:args,
          s(:arg, :src),
          s(:arg, :target)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "move"),
            s(:send, nil, :_to_idx,
              s(:lvar, :src)),
            s(:send, nil, :_to_idx,
              s(:lvar, :target))),
          s(:self))),
      s(:def, :move_column,
        s(:args,
          s(:arg, :src),
          s(:arg, :target)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "movecolumn"),
            s(:send, nil, :_to_idx,
              s(:lvar, :src)),
            s(:send, nil, :_to_idx,
              s(:lvar, :target))),
          s(:self))),
      s(:alias,
        s(:sym, :movecolumn),
        s(:sym, :move_column)),
      s(:def, :nearest,
        s(:args,
          s(:arg, :y)),
        s(:send, nil, :_from_idx,
          s(:send, nil, :tk_send,
            s(:str, "nearest"),
            s(:lvar, :y)))),
      s(:def, :nearest_cell,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :_from_idx,
          s(:send, nil, :tk_send,
            s(:str, "nearestcell"),
            s(:lvar, :x),
            s(:lvar, :y)))),
      s(:alias,
        s(:sym, :nearestcell),
        s(:sym, :nearest_cell)),
      s(:def, :nearest_column,
        s(:args,
          s(:arg, :x)),
        s(:send, nil, :_from_idx,
          s(:send, nil, :tk_send,
            s(:str, "nearestcolumn"),
            s(:lvar, :x)))),
      s(:alias,
        s(:sym, :nearestcolumn),
        s(:sym, :nearest_column)),
      s(:def, :reject_input,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "rejectinput")),
          s(:self))),
      s(:alias,
        s(:sym, :rejectinput),
        s(:sym, :reject_input)),
      s(:def, :reset_sortinfo,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "resetsortinfo")),
          s(:self))),
      s(:alias,
        s(:sym, :resetsortinfo),
        s(:sym, :reset_sortinfo)),
      s(:def, :get_rowattrib,
        s(:args,
          s(:optarg, :name,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :name), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_send,
            s(:str, "rowattrib"),
            s(:lvar, :name)),
          s(:begin,
            s(:lvasgn, :ret,
              s(:array)),
            s(:lvasgn, :lst,
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_send,
                  s(:str, "rowattrib")))),
            s(:until,
              s(:send,
                s(:lvar, :lst), :empty?),
              s(:send,
                s(:lvar, :ret), :<<,
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:lvar, :lst), :shift)), :<<,
                    s(:send,
                      s(:lvar, :lst), :shift))))),
            s(:lvar, :ret)))),
      s(:def, :set_rowattrib,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "rowattrib"),
            s(:splat,
              s(:begin,
                s(:send,
                  s(:lvar, :args), :flatten)))),
          s(:self))),
      s(:def, :scan_mark,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "scan"),
            s(:str, "mark"),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:def, :scan_dragto,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "scan"),
            s(:str, "dragto"),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:def, :see,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "see"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))),
          s(:self))),
      s(:def, :see_cell,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "seecell"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))),
          s(:self))),
      s(:alias,
        s(:sym, :seecell),
        s(:sym, :see_cell)),
      s(:def, :see_column,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "seecolumn"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))),
          s(:self))),
      s(:alias,
        s(:sym, :seecolumn),
        s(:sym, :see_column)),
      s(:def, :selection_anchor,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "anchor"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))),
          s(:self))),
      s(:def, :selection_clear,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "selection"),
              s(:str, "clear"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "selection"),
                s(:str, "clear"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:def, :selection_includes,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send,
            s(:str, "selection"),
            s(:str, "includes"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))),
      s(:def, :selection_set,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "selection"),
              s(:str, "set"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "selection"),
                s(:str, "set"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:def, :separatorpath,
        s(:args,
          s(:optarg, :idx,
            s(:nil))),
        s(:if,
          s(:lvar, :idx),
          s(:send, nil, :window,
            s(:send, nil, :tk_send,
              s(:str, "separatorpath"),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)))),
          s(:send, nil, :window,
            s(:send, nil, :tk_send,
              s(:str, "separatorpath"))))),
      s(:def, :separators,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "separators"))), :collect!),
          s(:args,
            s(:arg, :w)),
          s(:send, nil, :window,
            s(:lvar, :w)))),
      s(:def, :size,
        s(:args),
        s(:send, nil, :number,
          s(:send, nil, :tk_send,
            s(:str, "size")))),
      s(:def, :sort,
        s(:args,
          s(:optarg, :order,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :order),
            s(:begin,
              s(:lvasgn, :order,
                s(:send,
                  s(:lvar, :order), :to_s)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :order), :[],
                    s(:int, 0)), :!=,
                  s(:str, "-")),
                s(:lvasgn, :order,
                  s(:send,
                    s(:str, "-"), :<<,
                    s(:lvar, :order))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :order), :length), :<,
                  s(:int, 2)),
                s(:lvasgn, :order,
                  s(:nil)), nil)), nil),
          s(:if,
            s(:lvar, :order),
            s(:send, nil, :tk_send,
              s(:str, "sort"),
              s(:lvar, :order)),
            s(:send, nil, :tk_send,
              s(:str, "sort"))),
          s(:self))),
      s(:def, :sort_increasing,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "sort"),
            s(:str, "-increasing")),
          s(:self))),
      s(:def, :sort_decreasing,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "sort"),
            s(:str, "-decreasing")),
          s(:self))),
      s(:casgn, nil, :DEFAULT_labelcommand_value,
        s(:casgn, nil, :DEFAULT_sortByColumn_cmd,
          s(:str, "::tablelist::sortByColumn"))),
      s(:casgn, nil, :DEFAULT_labelcommand2_value,
        s(:casgn, nil, :DEFAULT_addToSortColumns_cmd,
          s(:str, "::tablelist::addToSortColumns"))),
      s(:def, :sortByColumn_with_event_generate,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :tk_call,
          s(:str, "::tablelist::sortByColumn"),
          s(:ivar, :@path),
          s(:send, nil, :_to_idx,
            s(:lvar, :idx)))),
      s(:def, :addToSortColumns_with_event_generate,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :tk_call,
          s(:str, "::tablelist::addToSortColumns"),
          s(:ivar, :@path),
          s(:send, nil, :_to_idx,
            s(:lvar, :idx)))),
      s(:def, :sort_by_column,
        s(:args,
          s(:arg, :idx),
          s(:optarg, :order,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :order),
            s(:begin,
              s(:lvasgn, :order,
                s(:send,
                  s(:lvar, :order), :to_s)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :order), :[],
                    s(:int, 0)), :!=,
                  s(:str, "-")),
                s(:lvasgn, :order,
                  s(:send,
                    s(:str, "-"), :<<,
                    s(:lvar, :order))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :order), :length), :<,
                  s(:int, 2)),
                s(:lvasgn, :order,
                  s(:nil)), nil)), nil),
          s(:if,
            s(:lvar, :order),
            s(:send, nil, :tk_send,
              s(:str, "sortbycolumn"),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)),
              s(:lvar, :order)),
            s(:send, nil, :tk_send,
              s(:str, "sortbycolumn"),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)))),
          s(:self))),
      s(:def, :sort_by_column_increasing,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "sortbycolumn"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:str, "-increasing")),
          s(:self))),
      s(:def, :sort_by_column_decreasing,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "sortbycolumn"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:str, "-decreasing")),
          s(:self))),
      s(:def, :sort_by_columnlist,
        s(:args,
          s(:arg, :idxlist),
          s(:optarg, :orderlist,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "sortbycolumnlist"),
            s(:block,
              s(:send,
                s(:lvar, :idxlist), :map),
              s(:args,
                s(:arg, :idx)),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx))),
            s(:lvar, :orderlist)),
          s(:self))),
      s(:def, :sortcolumn,
        s(:args),
        s(:begin,
          s(:lvasgn, :idx,
            s(:send, nil, :num_or_str,
              s(:send, nil, :tk_send,
                s(:str, "sortcolum")))),
          s(:if,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :idx), :kind_of?,
                  s(:const, nil, :Fixnum)),
                s(:send,
                  s(:lvar, :idx), :<,
                  s(:int, 0)))),
            s(:nil),
            s(:lvar, :idx)))),
      s(:def, :sortcolumnlist,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :simplelist,
              s(:send, nil, :tk_send,
                s(:str, "sortcolumlist"))), :map),
          s(:args,
            s(:arg, :col)),
          s(:send, nil, :num_or_str,
            s(:lvar, :col)))),
      s(:def, :sortorder,
        s(:args),
        s(:send, nil, :tk_send,
          s(:str, "sortorder"))),
      s(:def, :sortorderlist,
        s(:args),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_send,
            s(:str, "sortorderlist")))),
      s(:def, :toggle_columnhide,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :first), :kind_of?,
            s(:const, nil, :Array)),
          s(:send, nil, :tk_send,
            s(:str, "togglecolumnhide"),
            s(:block,
              s(:send,
                s(:lvar, :first), :collect),
              s(:args,
                s(:arg, :idx)),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)))),
          s(:begin,
            s(:lvasgn, :first,
              s(:send, nil, :_to_idx,
                s(:lvar, :first))),
            s(:lvasgn, :last,
              s(:if,
                s(:begin,
                  s(:lvar, :last)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :last)),
                s(:lvar, :first))),
            s(:send, nil, :tk_send,
              s(:str, "togglecolumnhide"),
              s(:lvar, :first),
              s(:lvar, :last))))),
      s(:def, :toggle_rowhide,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :first), :kind_of?,
            s(:const, nil, :Array)),
          s(:send, nil, :tk_send,
            s(:str, "togglerowhide"),
            s(:block,
              s(:send,
                s(:lvar, :first), :collect),
              s(:args,
                s(:arg, :idx)),
              s(:send, nil, :_to_idx,
                s(:lvar, :idx)))),
          s(:begin,
            s(:lvasgn, :first,
              s(:send, nil, :_to_idx,
                s(:lvar, :first))),
            s(:lvasgn, :last,
              s(:if,
                s(:begin,
                  s(:lvar, :last)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :last)),
                s(:lvar, :first))),
            s(:send, nil, :tk_send,
              s(:str, "togglerowhide"),
              s(:lvar, :first),
              s(:lvar, :last))))),
      s(:def, :toggle_visibility,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :first), :kind_of?,
              s(:const, nil, :Array)),
            s(:send, nil, :tk_send,
              s(:str, "togglevisibility"),
              s(:block,
                s(:send,
                  s(:lvar, :first), :collect),
                s(:args,
                  s(:arg, :idx)),
                s(:send, nil, :_to_idx,
                  s(:lvar, :idx)))),
            s(:begin,
              s(:lvasgn, :first,
                s(:send, nil, :_to_idx,
                  s(:lvar, :first))),
              s(:lvasgn, :last,
                s(:if,
                  s(:begin,
                    s(:lvar, :last)),
                  s(:send, nil, :_to_idx,
                    s(:lvar, :last)),
                  s(:lvar, :first))),
              s(:send, nil, :tk_send,
                s(:str, "togglevisibility"),
                s(:lvar, :first),
                s(:lvar, :last)))),
          s(:self))),
      s(:alias,
        s(:sym, :togglevisibility),
        s(:sym, :toggle_visibility)),
      s(:def, :unset_attrib,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "unsetattrib"),
            s(:lvar, :name)),
          s(:self))),
      s(:def, :unset_cellattrib,
        s(:args,
          s(:arg, :idx),
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "unsetcellattrib"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :name)),
          s(:self))),
      s(:def, :unset_columnattrib,
        s(:args,
          s(:arg, :idx),
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "unsetcolumnattrib"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :name)),
          s(:self))),
      s(:def, :unset_rowattrib,
        s(:args,
          s(:arg, :idx),
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "unsetrowattrib"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx)),
            s(:lvar, :name)),
          s(:self))),
      s(:def, :windowpath,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "windowpath"),
            s(:send, nil, :_to_idx,
              s(:lvar, :idx))))))),
  s(:sclass,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tcllib), :Tablelist),
    s(:begin,
      s(:def, :getTablelistPath,
        s(:args,
          s(:arg, :descendant)),
        s(:send, nil, :window,
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::getTablelistPath"),
            s(:lvar, :descendant)))),
      s(:def, :getTablelistColumn,
        s(:args,
          s(:arg, :descendant)),
        s(:send, nil, :num_or_str,
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::getTablelistColumn"),
            s(:send, nil, :headerlabel)))),
      s(:def, :convEventFields,
        s(:args,
          s(:arg, :descendant),
          s(:arg, :x),
          s(:arg, :y)),
        s(:send, nil, :window,
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::convEventFields"),
            s(:lvar, :descendant),
            s(:lvar, :x),
            s(:lvar, :y)))),
      s(:def, :addBWidgetEntry,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addBWidgetEntry"),
          s(:lvar, :name))),
      s(:def, :addBWidgetSpinBox,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addBWidgetSpinBox"),
          s(:lvar, :name))),
      s(:def, :addBWidgetComboBox,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addBWidgetComboBox"),
          s(:lvar, :name))),
      s(:def, :addIncrEntryfield,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addIncrEntry"),
          s(:lvar, :name))),
      s(:def, :addIncrDateTimeWidget,
        s(:args,
          s(:arg, :type),
          s(:optarg, :seconds,
            s(:false)),
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :seconds),
              s(:send,
                s(:lvar, :seconds), :!=,
                s(:const, nil, :None))),
            s(:lvasgn, :seconds,
              s(:str, "-seconds")),
            s(:lvasgn, :seconds,
              s(:const, nil, :None))),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::addDateTimeWidget"),
            s(:lvar, :type),
            s(:lvar, :seconds),
            s(:lvar, :name)))),
      s(:def, :addIncrSpinner,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addIncrSpinner"),
          s(:lvar, :name))),
      s(:def, :addIncrSpinint,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addIncrSpinint"),
          s(:lvar, :name))),
      s(:def, :addIncrCombobox,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addIncrCombobox"),
          s(:lvar, :name))),
      s(:def, :addOakleyCombobox,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addOakleyCombobox"),
          s(:lvar, :name))),
      s(:def, :addDateMentry,
        s(:args,
          s(:arg, :format),
          s(:arg, :separator),
          s(:optarg, :gmt,
            s(:false)),
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :gmt),
              s(:send,
                s(:lvar, :gmt), :!=,
                s(:const, nil, :None))),
            s(:lvasgn, :gmt,
              s(:str, "-gmt")),
            s(:lvasgn, :gmt,
              s(:const, nil, :None))),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::addDateMentry"),
            s(:lvar, :format),
            s(:lvar, :separator),
            s(:lvar, :gmt),
            s(:lvar, :name)))),
      s(:def, :addTimeMentry,
        s(:args,
          s(:arg, :format),
          s(:arg, :separator),
          s(:optarg, :gmt,
            s(:false)),
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :gmt),
              s(:send,
                s(:lvar, :gmt), :!=,
                s(:const, nil, :None))),
            s(:lvasgn, :gmt,
              s(:str, "-gmt")),
            s(:lvasgn, :gmt,
              s(:const, nil, :None))),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::addTimeMentry"),
            s(:lvar, :format),
            s(:lvar, :separator),
            s(:lvar, :gmt),
            s(:lvar, :name)))),
      s(:def, :addDateTimeMentry,
        s(:args,
          s(:arg, :format),
          s(:arg, :date_sep),
          s(:arg, :time_sep),
          s(:optarg, :gmt,
            s(:false)),
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :gmt),
              s(:send,
                s(:lvar, :gmt), :!=,
                s(:const, nil, :None))),
            s(:lvasgn, :gmt,
              s(:str, "-gmt")),
            s(:lvasgn, :gmt,
              s(:const, nil, :None))),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::addDateTimeMentry"),
            s(:lvar, :format),
            s(:lvar, :date_sep),
            s(:lvar, :time_sep),
            s(:lvar, :gmt),
            s(:lvar, :name)))),
      s(:def, :addFixedPointMentry,
        s(:args,
          s(:arg, :count1),
          s(:arg, :count2),
          s(:optarg, :comma,
            s(:false)),
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :comma),
              s(:send,
                s(:lvar, :comma), :!=,
                s(:const, nil, :None))),
            s(:lvasgn, :comma,
              s(:str, "-comma")),
            s(:lvasgn, :comma,
              s(:const, nil, :None))),
          s(:send,
            s(:const, nil, :Tk), :tk_call,
            s(:str, "::tablelist::addFixedPoingMentry"),
            s(:lvar, :count1),
            s(:lvar, :count2),
            s(:lvar, :comma),
            s(:lvar, :name)))),
      s(:def, :addIPAddrMentry,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :Tk), :tk_call,
          s(:str, "::tablelist::addIPAddrMentry"),
          s(:lvar, :name))))))
