s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tcllib.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "widget::screenruler")),
  s(:module,
    s(:const,
      s(:const, nil, :Tk), :Tcllib),
    s(:module,
      s(:const, nil, :Widget),
      s(:begin,
        s(:class,
          s(:const, nil, :ScreenRuler),
          s(:const, nil, :TkWindow),
          s(:begin,
            s(:casgn, nil, :PACKAGE_NAME,
              s(:send,
                s(:str, "widget::ruler"), :freeze)),
            s(:defs,
              s(:self), :package_name,
              s(:args),
              s(:const, nil, :PACKAGE_NAME)),
            s(:defs,
              s(:self), :package_version,
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :TkPackage), :require,
                    s(:str, "widget::screenruler")),
                  s(:resbody, nil, nil,
                    s(:str, "")), nil))))),
        s(:casgn, nil, :Screenruler,
          s(:const, nil, :ScreenRuler))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const,
          s(:const, nil, :Tk), :Tcllib), :Widget), :ScreenRuler), nil,
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::widget::screenruler"), :freeze)), :freeze)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:array,
          s(:str, "topmost"),
          s(:str, "reflect"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :__numlistval_optkeys,
        s(:args),
        s(:array,
          s(:str, "alpha"))),
      s(:send, nil, :private,
        s(:sym, :__numlistval_optkeys)),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :display,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "display")),
          s(:self))),
      s(:alias,
        s(:sym, :show),
        s(:sym, :display)),
      s(:def, :hide,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "hide")),
          s(:self))))))
