s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tcllib.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "widget::statusbar")),
  s(:module,
    s(:const,
      s(:const, nil, :Tk), :Tcllib),
    s(:module,
      s(:const, nil, :Widget),
      s(:class,
        s(:const, nil, :Statusbar),
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :Tile), :TFrame),
        s(:begin,
          s(:casgn, nil, :PACKAGE_NAME,
            s(:send,
              s(:str, "widget::statusbar"), :freeze)),
          s(:defs,
            s(:self), :package_name,
            s(:args),
            s(:const, nil, :PACKAGE_NAME)),
          s(:defs,
            s(:self), :package_version,
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :TkPackage), :require,
                  s(:str, "widget::statusbar")),
                s(:resbody, nil, nil,
                  s(:str, "")), nil))))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const,
          s(:const, nil, :Tk), :Tcllib), :Widget), :Statusbar), nil,
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::widget::statusbar"), :freeze)), :freeze)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:super), :<<,
              s(:str, "separator")), :<<,
            s(:str, "resize")), :<<,
          s(:str, "resizeseparator"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :getframe,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "getframe")))),
      s(:alias,
        s(:sym, :get_frame),
        s(:sym, :getframe)),
      s(:def, :add,
        s(:args,
          s(:arg, :w),
          s(:optarg, :keys,
            s(:hash))),
        s(:send, nil, :window,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "setwidget"),
            s(:splat,
              s(:begin,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys))))))),
      s(:def, :remove,
        s(:args,
          s(:restarg, :wins)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "remove"),
            s(:splat,
              s(:lvar, :wins))),
          s(:self))),
      s(:def, :remove_with_destroy,
        s(:args,
          s(:restarg, :wins)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "remove"),
            s(:str, "-destroy"),
            s(:splat,
              s(:lvar, :wins))),
          s(:self))),
      s(:def, :delete,
        s(:args,
          s(:restarg, :wins)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "delete"),
            s(:splat,
              s(:lvar, :wins))),
          s(:self))),
      s(:def, :items,
        s(:args,
          s(:optarg, :pat,
            s(:const, nil, :None))),
        s(:send, nil, :tk_split_list,
          s(:send, nil, :tk_send,
            s(:str, "items"),
            s(:lvar, :pat)))))))
