s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/text")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tcllib.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "ctext")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Tcllib),
      s(:class,
        s(:const, nil, :CText),
        s(:const,
          s(:const, nil, :Tk), :Text),
        s(:begin,
          s(:casgn, nil, :PACKAGE_NAME,
            s(:send,
              s(:str, "ctext"), :freeze)),
          s(:defs,
            s(:self), :package_name,
            s(:args),
            s(:const, nil, :PACKAGE_NAME)),
          s(:defs,
            s(:self), :package_version,
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :TkPackage), :require,
                  s(:str, "ctext")),
                s(:resbody, nil, nil,
                  s(:str, "")), nil))))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tcllib), :CText), nil,
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "ctext"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Ctext"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:if,
          s(:and,
            s(:lvar, :keys),
            s(:send,
              s(:lvar, :keys), :!=,
              s(:const, nil, :None))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys),
                s(:true)))),
          s(:send, nil, :tk_call_without_enc,
            s(:send,
              s(:const,
                s(:send,
                  s(:self), :class), :TkCommandNames), :[],
              s(:int, 0)),
            s(:ivar, :@path)))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:super), :<<,
                s(:str, "linemapfg")), :<<,
              s(:str, "linemapbg")), :<<,
            s(:str, "linemap_select_fg")), :<<,
          s(:str, "linemap_select_bg"))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:super), :<<,
            s(:str, "highlight")), :<<,
          s(:str, "linemap_markable"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :append,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "append"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :copy,
        s(:args),
        s(:send, nil, :tk_send,
          s(:str, "copy"))),
      s(:def, :cut,
        s(:args),
        s(:send, nil, :tk_send,
          s(:str, "cut"))),
      s(:def, :fast_delete,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "fastdelete"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :fast_insert,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "fastinsert"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :highlight,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "highlight"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :paste,
        s(:args),
        s(:send, nil, :tk_send,
          s(:str, "paste"))),
      s(:def, :edit,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_send,
          s(:str, "edit"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :add_highlight_class,
        s(:args,
          s(:arg, :klass),
          s(:arg, :col),
          s(:restarg, :keywords)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::addHighlightClass"),
            s(:ivar, :@path),
            s(:lvar, :klass),
            s(:lvar, :col),
            s(:send,
              s(:lvar, :keywords), :flatten)),
          s(:self))),
      s(:def, :add_highlight_class_for_special_chars,
        s(:args,
          s(:arg, :klass),
          s(:arg, :col),
          s(:restarg, :chrs)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::addHighlightClassForSpecialChars"),
            s(:ivar, :@path),
            s(:lvar, :klass),
            s(:lvar, :col),
            s(:send,
              s(:lvar, :chrs), :join,
              s(:str, ""))),
          s(:self))),
      s(:def, :add_highlight_class_for_regexp,
        s(:args,
          s(:arg, :klass),
          s(:arg, :col),
          s(:arg, :tcl_regexp)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::addHighlightClassForRegexp"),
            s(:ivar, :@path),
            s(:lvar, :klass),
            s(:lvar, :col),
            s(:lvar, :tcl_regexp)),
          s(:self))),
      s(:def, :add_highlight_class_with_only_char_start,
        s(:args,
          s(:arg, :klass),
          s(:arg, :col),
          s(:arg, :chr)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::addHighlightClassWithOnlyCharStart"),
            s(:ivar, :@path),
            s(:lvar, :klass),
            s(:lvar, :col),
            s(:lvar, :chr)),
          s(:self))),
      s(:def, :clear_highlight_classes,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::clearHighlightClasses"),
            s(:ivar, :@path)),
          s(:self))),
      s(:def, :get_highlight_classes,
        s(:args),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :tk_call,
            s(:str, "ctext::getHighlightClasses"),
            s(:ivar, :@path)))),
      s(:def, :delete_highlight_class,
        s(:args,
          s(:arg, :klass)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::deleteHighlightClass"),
            s(:ivar, :@path),
            s(:lvar, :klass)),
          s(:self))),
      s(:def, :enable_C_comments,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::enableComments"),
            s(:ivar, :@path)),
          s(:self))),
      s(:def, :disable_C_comments,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "ctext::disableComments"),
            s(:ivar, :@path)),
          s(:self))),
      s(:def, :find_next_char,
        s(:args,
          s(:arg, :idx),
          s(:arg, :chr)),
        s(:send, nil, :tk_call,
          s(:str, "ctext::findNextChar"),
          s(:ivar, :@path),
          s(:lvar, :idx),
          s(:lvar, :chr))),
      s(:def, :find_next_space,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :tk_call,
          s(:str, "ctext::findNextSpace"),
          s(:ivar, :@path),
          s(:lvar, :idx))),
      s(:def, :find_previous_space,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :tk_call,
          s(:str, "ctext::findPreviousSpace"),
          s(:ivar, :@path),
          s(:lvar, :idx))),
      s(:def, :set_update_proc,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "proc"),
            s(:str, "ctext::update"),
            s(:str, ""),
            s(:lvar, :cmd)),
          s(:self))),
      s(:def, :modified?,
        s(:args,
          s(:arg, :mode)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call,
            s(:str, "ctext::modified"),
            s(:ivar, :@path),
            s(:lvar, :mode)))))))
