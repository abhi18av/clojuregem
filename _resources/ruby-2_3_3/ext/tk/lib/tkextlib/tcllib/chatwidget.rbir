s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tcllib.rb")),
  s(:send,
    s(:const, nil, :TkPackage), :require,
    s(:str, "chatwidget")),
  s(:module,
    s(:const,
      s(:const, nil, :Tk), :Tcllib),
    s(:class,
      s(:const, nil, :ChatWidget),
      s(:const, nil, :TkText),
      s(:begin,
        s(:casgn, nil, :PACKAGE_NAME,
          s(:send,
            s(:str, "chatwidget"), :freeze)),
        s(:defs,
          s(:self), :package_name,
          s(:args),
          s(:const, nil, :PACKAGE_NAME)),
        s(:defs,
          s(:self), :package_version,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :TkPackage), :require,
                s(:str, "chatwidget")),
              s(:resbody, nil, nil,
                s(:str, "")), nil)))))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Tcllib), :ChatWidget), nil,
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::chatwidget::chatwidget"), :freeze)), :freeze)),
      s(:def, :show_topic,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "topic"),
            s(:str, "show")),
          s(:self))),
      s(:def, :hide_topic,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "topic"),
            s(:str, "hide")),
          s(:self))),
      s(:def, :set_topic,
        s(:args,
          s(:arg, :topic)),
        s(:send, nil, :tk_send,
          s(:str, "topic"),
          s(:str, "set"),
          s(:lvar, :topic))),
      s(:def, :list_name,
        s(:args),
        s(:send, nil, :tk_split_simplelist,
          s(:send, nil, :tk_send,
            s(:str, "name"),
            s(:str, "list")))),
      s(:def, :list_name_full,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:send, nil, :tk_send,
                s(:str, "name"),
                s(:str, "list"))), :map),
          s(:args,
            s(:arg, :lst)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :nick),
                s(:splat,
                  s(:lvasgn, :opts))),
              s(:send, nil, :tk_split_simplelist,
                s(:lvar, :lst))),
            s(:lvasgn, :h_opt,
              s(:hash)),
            s(:block,
              s(:send,
                s(:lvar, :opts), :slice,
                s(:int, 2)),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :h_opt), :[]=,
                s(:send,
                  s(:lvar, :k), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1))),
                s(:send, nil, :tk_tcl2ruby,
                  s(:lvar, :v)))),
            s(:array,
              s(:lvar, :nick),
              s(:lvar, :h_opt))))),
      s(:def, :add_name,
        s(:args,
          s(:arg, :nick),
          s(:optarg, :opts,
            s(:hash))),
        s(:send, nil, :tk_send,
          s(:str, "name"),
          s(:str, "add"),
          s(:lvar, :nick),
          s(:splat,
            s(:begin,
              s(:send, nil, :hash_kv,
                s(:lvar, :opts)))))),
      s(:def, :delete_name,
        s(:args,
          s(:arg, :nick)),
        s(:send, nil, :tk_send,
          s(:str, "name"),
          s(:str, "delete"),
          s(:lvar, :nick))),
      s(:def, :get_name,
        s(:args,
          s(:arg, :nick)),
        s(:begin,
          s(:lvasgn, :lst,
            s(:send, nil, :tk_send,
              s(:str, "name"),
              s(:str, "get"),
              s(:lvar, :nick))),
          s(:if,
            s(:send,
              s(:lvar, :lst), :empty?),
            s(:return,
              s(:nil)), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :nick),
              s(:splat,
                s(:lvasgn, :opts))),
            s(:send, nil, :tk_split_simplelist,
              s(:lvar, :lst))),
          s(:lvasgn, :h_opt,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :opts), :slice,
              s(:int, 2)),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :h_opt), :[]=,
              s(:send,
                s(:lvar, :k), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1))),
              s(:send, nil, :tk_tcl2ruby,
                s(:lvar, :v)))),
          s(:array,
            s(:lvar, :nick),
            s(:lvar, :h_opt)))),
      s(:def, :message,
        s(:args,
          s(:arg, :msg),
          s(:optarg, :opts,
            s(:hash))),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "message"),
            s(:lvar, :msg),
            s(:splat,
              s(:begin,
                s(:send, nil, :hash_kv,
                  s(:lvar, :opts))))),
          s(:self))),
      s(:def, :_parse_hook_list,
        s(:args,
          s(:arg, :lst)),
        s(:block,
          s(:send,
            s(:send, nil, :tk_split_simplelist,
              s(:lvar, :lst)), :map),
          s(:args,
            s(:arg, :hook)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :cmd),
                s(:lvasgn, :prior)),
              s(:send, nil, :tk_split_simplelist,
                s(:lvar, :hook))),
            s(:array,
              s(:send, nil, :procedure,
                s(:lvar, :cmd)),
              s(:send, nil, :number,
                s(:lvar, :prior)))))),
      s(:send, nil, :private,
        s(:sym, :_parse_hook_list)),
      s(:def, :hook_add,
        s(:args,
          s(:arg, :type),
          s(:restarg, :args),
          s(:blockarg, :blk)),
        s(:begin,
          s(:if,
            s(:lvasgn, :prior,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :prior), :kind_of?,
                    s(:const, nil, :Numeric)), :!),
                s(:begin,
                  s(:lvasgn, :cmd,
                    s(:lvar, :prior)),
                  s(:if,
                    s(:and,
                      s(:begin,
                        s(:lvasgn, :prior,
                          s(:send,
                            s(:lvar, :args), :shift))),
                      s(:send,
                        s(:send,
                          s(:lvar, :prior), :kind_of?,
                          s(:const, nil, :Numeric)), :!)),
                    s(:send,
                      s(:lvar, :args), :unshift,
                      s(:lvar, :prior)), nil),
                  s(:send,
                    s(:lvar, :args), :unshift,
                    s(:lvar, :cmd))), nil),
              s(:or_asgn,
                s(:lvasgn, :prior),
                s(:int, 50))), nil),
          s(:lvasgn, :cmd,
            s(:or,
              s(:send,
                s(:lvar, :args), :shift),
              s(:lvar, :blk))),
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "invalid arguments"))),
          s(:if,
            s(:lvar, :cmd), nil,
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:str, "no callback is given"))),
          s(:send, nil, :_parse_hook_list,
            s(:send, nil, :tk_send,
              s(:str, "hook"),
              s(:str, "add"),
              s(:lvar, :type),
              s(:lvar, :cmd),
              s(:lvar, :prior))))),
      s(:def, :hook_remove,
        s(:args,
          s(:arg, :type),
          s(:arg, :cmd)),
        s(:send, nil, :_parse_hook_list,
          s(:send, nil, :tk_send,
            s(:str, "hook"),
            s(:str, "remove"),
            s(:lvar, :type),
            s(:lvar, :cmd)))),
      s(:def, :hook_run,
        s(:args,
          s(:arg, :type),
          s(:restarg, :cmd_args)),
        s(:send, nil, :tk_send,
          s(:str, "hook"),
          s(:str, "run"),
          s(:lvar, :type),
          s(:splat,
            s(:lvar, :cmd_args)))),
      s(:def, :hook_list,
        s(:args,
          s(:arg, :type)),
        s(:send, nil, :_parse_hook_list,
          s(:send, nil, :tk_send,
            s(:str, "hook"),
            s(:str, "list"),
            s(:lvar, :type)))),
      s(:def, :show_names,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "names"),
            s(:str, "show")),
          s(:self))),
      s(:def, :hide_names,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_send,
            s(:str, "names"),
            s(:str, "hide")),
          s(:self))),
      s(:def, :names_widget,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "names")))),
      s(:def, :entry_widget,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "entry")))),
      s(:def, :chat_widget,
        s(:args),
        s(:send, nil, :window,
          s(:send, nil, :tk_send,
            s(:str, "chat")))))))
