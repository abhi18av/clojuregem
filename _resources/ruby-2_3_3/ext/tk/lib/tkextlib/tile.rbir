s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/ttk_selector")),
  s(:send, nil, :require,
    s(:str, "tkextlib/setup.rb")),
  s(:send, nil, :require,
    s(:str, "tkextlib/tile/setup.rb")),
  s(:if,
    s(:or,
      s(:send,
        s(:const,
          s(:const, nil, :Tk), :TK_MAJOR_VERSION), :>,
        s(:int, 8)),
      s(:begin,
        s(:and,
          s(:send,
            s(:const,
              s(:const, nil, :Tk), :TK_MAJOR_VERSION), :==,
            s(:int, 8)),
          s(:send,
            s(:const,
              s(:const, nil, :Tk), :TK_MINOR_VERSION), :>=,
            s(:int, 5))))),
    s(:begin,
      s(:kwbegin,
        s(:rescue,
          s(:send,
            s(:const, nil, :TkPackage), :require,
            s(:str, "tile")),
          s(:resbody,
            s(:array,
              s(:const, nil, :RuntimeError)), nil, nil), nil)),
      s(:lvasgn, :pkgname,
        s(:str, "Ttk"))),
    s(:lvasgn, :pkgname,
      s(:str, "tile"))),
  s(:kwbegin,
    s(:rescue,
      s(:lvasgn, :verstr,
        s(:send,
          s(:const, nil, :TkPackage), :require,
          s(:lvar, :pkgname))),
      s(:resbody,
        s(:array,
          s(:const, nil, :RuntimeError)), nil,
        s(:begin,
          s(:module,
            s(:const, nil, :Tk),
            s(:module,
              s(:const, nil, :Tile),
              s(:begin,
                s(:casgn, nil, :CANNOT_FIND_PACKAGE,
                  s(:true)),
                s(:defs,
                  s(:self), :const_missing,
                  s(:args,
                    s(:arg, :sym)),
                  s(:send,
                    s(:const, nil, :TkPackage), :require,
                    s(:const, nil, :PACKAGE_NAME))),
                s(:defs,
                  s(:self), :method_missing,
                  s(:args,
                    s(:restarg, :args)),
                  s(:send,
                    s(:const, nil, :TkPackage), :require,
                    s(:const, nil, :PACKAGE_NAME)))))),
          s(:send,
            s(:const, nil, :Tk), :__cannot_find_tk_package_for_widget_set__,
            s(:sym, :Ttk),
            s(:lvar, :pkgname)),
          s(:if,
            s(:send,
              s(:lvar, :pkgname), :==,
              s(:str, "Ttk")),
            s(:lvasgn, :verstr,
              s(:const,
                s(:const, nil, :Tk), :TK_PATCHLEVEL)),
            s(:lvasgn, :verstr,
              s(:str, "0.7"))))), nil)),
  s(:lvasgn, :ver,
    s(:send,
      s(:lvar, :verstr), :split,
      s(:str, "."))),
  s(:if,
    s(:send,
      s(:send,
        s(:send,
          s(:lvar, :ver), :[],
          s(:int, 0)), :to_i), :==,
      s(:int, 0)),
    s(:begin,
      s(:if,
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :ver), :[],
              s(:int, 1)), :to_i), :<=,
          s(:int, 4)),
        s(:module,
          s(:const, nil, :Tk),
          s(:module,
            s(:const, nil, :Tile),
            s(:begin,
              s(:casgn, nil, :USE_TILE_NAMESPACE,
                s(:true)),
              s(:casgn, nil, :USE_TTK_NAMESPACE,
                s(:false)),
              s(:casgn, nil, :TILE_SPEC_VERSION_ID,
                s(:int, 0))))),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :ver), :[],
                s(:int, 1)), :to_i), :<=,
            s(:int, 6)),
          s(:module,
            s(:const, nil, :Tk),
            s(:module,
              s(:const, nil, :Tile),
              s(:begin,
                s(:casgn, nil, :USE_TILE_NAMESPACE,
                  s(:true)),
                s(:casgn, nil, :USE_TTK_NAMESPACE,
                  s(:true)),
                s(:casgn, nil, :TILE_SPEC_VERSION_ID,
                  s(:int, 5))))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :ver), :[],
                  s(:int, 1)), :to_i), :<=,
              s(:int, 7)),
            s(:module,
              s(:const, nil, :Tk),
              s(:module,
                s(:const, nil, :Tile),
                s(:begin,
                  s(:casgn, nil, :USE_TILE_NAMESPACE,
                    s(:false)),
                  s(:casgn, nil, :USE_TTK_NAMESPACE,
                    s(:true)),
                  s(:casgn, nil, :TILE_SPEC_VERSION_ID,
                    s(:int, 7))))),
            s(:module,
              s(:const, nil, :Tk),
              s(:module,
                s(:const, nil, :Tile),
                s(:begin,
                  s(:casgn, nil, :USE_TILE_NAMESPACE,
                    s(:false)),
                  s(:casgn, nil, :USE_TTK_NAMESPACE,
                    s(:true)),
                  s(:casgn, nil, :TILE_SPEC_VERSION_ID,
                    s(:int, 8)))))))),
      s(:module,
        s(:const,
          s(:const, nil, :Tk), :Tile),
        s(:casgn, nil, :PACKAGE_NAME,
          s(:send,
            s(:str, "tile"), :freeze)))),
    s(:module,
      s(:const, nil, :Tk),
      s(:module,
        s(:const, nil, :Tile),
        s(:begin,
          s(:casgn, nil, :USE_TILE_NAMESPACE,
            s(:false)),
          s(:casgn, nil, :USE_TTK_NAMESPACE,
            s(:true)),
          s(:casgn, nil, :TILE_SPEC_VERSION_ID,
            s(:int, 8)),
          s(:casgn, nil, :PACKAGE_NAME,
            s(:send,
              s(:str, "Ttk"), :freeze)))))),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Tile),
      s(:begin,
        s(:send,
          s(:const,
            s(:const, nil, :TkComm), :TkExtlibAutoloadModule), :unshift,
          s(:self)),
        s(:defs,
          s(:self), :package_name,
          s(:args),
          s(:const, nil, :PACKAGE_NAME)),
        s(:defs,
          s(:self), :package_version,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :TkPackage), :require,
                s(:const, nil, :PACKAGE_NAME)),
              s(:resbody, nil, nil,
                s(:str, "")), nil))),
        s(:defs,
          s(:self), :__Import_Tile_Widgets__!,
          s(:args),
          s(:begin,
            s(:send, nil, :warn,
              s(:send,
                s(:str, "Warning: \"Tk::Tile::__Import_Tile_Widgets__!\" is obsolete."), :<<,
                s(:str, " To control default widget set, use \"Tk.default_widget_set = :Ttk\""))),
            s(:send,
              s(:const, nil, :Tk), :tk_call,
              s(:str, "namespace"),
              s(:str, "import"),
              s(:str, "-force"),
              s(:str, "ttk::*")))),
        s(:defs,
          s(:self), :__define_LoadImages_proc_for_compatibility__!,
          s(:args),
          s(:begin,
            s(:lvasgn, :klass_name,
              s(:send,
                s(:self), :name)),
            s(:lvasgn, :proc_name,
              s(:str, "LoadImages")),
            s(:if,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Tile), :USE_TTK_NAMESPACE),
              s(:begin,
                s(:lvasgn, :ns_list,
                  s(:array,
                    s(:str, "::tile"))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk), :info,
                      s(:sym, :commands),
                      s(:dstr,
                        s(:str, "::ttk::"),
                        s(:begin,
                          s(:lvar, :proc_name)))), :empty?),
                  s(:send,
                    s(:lvar, :ns_list), :<<,
                    s(:str, "::ttk")), nil)),
              s(:begin,
                s(:lvasgn, :ns_list,
                  s(:array,
                    s(:str, "::ttk"))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk), :info,
                      s(:sym, :commands),
                      s(:dstr,
                        s(:str, "::tile::"),
                        s(:begin,
                          s(:lvar, :proc_name)))), :empty?),
                  s(:send,
                    s(:lvar, :ns_list), :<<,
                    s(:str, "::tile")), nil))),
            s(:block,
              s(:send,
                s(:lvar, :ns_list), :each),
              s(:args,
                s(:arg, :ns)),
              s(:begin,
                s(:lvasgn, :cmd,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :ns)),
                    s(:str, "::"),
                    s(:begin,
                      s(:lvar, :proc_name)))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk), :info,
                      s(:sym, :commands),
                      s(:lvar, :cmd)), :empty?), nil,
                  s(:begin,
                    s(:if,
                      s(:gvar, :$DEBUG),
                      s(:send, nil, :warn,
                        s(:dstr,
                          s(:str, "Warning: can't define '"),
                          s(:begin,
                            s(:lvar, :cmd)),
                          s(:str, "' command (already exist)"))), nil),
                    s(:next))),
                s(:block,
                  s(:send,
                    s(:const, nil, :TkNamespace), :eval,
                    s(:lvar, :ns)),
                  s(:args),
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :add_tk_procs,
                    s(:lvar, :proc_name),
                    s(:str, "imgdir {patterns {*.gif}}"),
                    s(:dstr,
                      s(:str, "            foreach pattern $patterns {\n"),
                      s(:str, "              foreach file [glob -directory $imgdir $pattern] {\n"),
                      s(:str, "                set img [file tail [file rootname $file]]\n"),
                      s(:str, "                if {![info exists images($img)]} {\n"),
                      s(:str, "                  set images($img) [image create photo -file $file]\n"),
                      s(:str, "                }\n"),
                      s(:str, "              }\n"),
                      s(:str, "            }\n"),
                      s(:str, "            return [array get images]\n")))))))),
        s(:defs,
          s(:self), :load_images,
          s(:args,
            s(:arg, :imgdir),
            s(:optarg, :pat,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :<,
                s(:int, 8)),
              s(:begin,
                s(:if,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Tile), :USE_TTK_NAMESPACE),
                  s(:lvasgn, :cmd,
                    s(:str, "::ttk::LoadImages")),
                  s(:lvasgn, :cmd,
                    s(:str, "::tile::LoadImages"))),
                s(:or_asgn,
                  s(:lvasgn, :pat),
                  s(:const,
                    s(:const, nil, :TkComm), :None)),
                s(:lvasgn, :images,
                  s(:send,
                    s(:const, nil, :Hash), :[],
                    s(:splat,
                      s(:send,
                        s(:const, nil, :TkComm), :simplelist,
                        s(:send,
                          s(:const, nil, :Tk), :tk_call,
                          s(:lvar, :cmd),
                          s(:lvar, :imgdir),
                          s(:lvar, :pat)))))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :images), :keys), :each),
                  s(:args,
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :images), :[]=,
                    s(:lvar, :k),
                    s(:send,
                      s(:const, nil, :TkPhotoImage), :new,
                      s(:hash,
                        s(:pair,
                          s(:sym, :imagename),
                          s(:send,
                            s(:lvar, :images), :[],
                            s(:lvar, :k))),
                        s(:pair,
                          s(:sym, :without_creating),
                          s(:true))))))),
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :pat),
                  s(:str, "*.gif")),
                s(:if,
                  s(:send,
                    s(:lvar, :pat), :kind_of?,
                    s(:const, nil, :Array)),
                  s(:lvasgn, :pat_list,
                    s(:lvar, :pat)),
                  s(:lvasgn, :pat_list,
                    s(:array,
                      s(:lvar, :pat)))),
                s(:block,
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:lvar, :imgdir)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :pat_list), :each),
                    s(:args,
                      s(:arg, :pat)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Dir), :glob,
                          s(:lvar, :pat)), :each),
                      s(:args,
                        s(:arg, :f)),
                      s(:begin,
                        s(:lvasgn, :img,
                          s(:send,
                            s(:const, nil, :File), :basename,
                            s(:lvar, :f),
                            s(:str, ".*"))),
                        s(:if,
                          s(:send,
                            s(:const, nil, :TkComm), :bool,
                            s(:send,
                              s(:const, nil, :Tk), :info,
                              s(:str, "exists"),
                              s(:dstr,
                                s(:str, "images("),
                                s(:begin,
                                  s(:lvar, :img)),
                                s(:str, ")")))), nil,
                          s(:send,
                            s(:const, nil, :Tk), :tk_call,
                            s(:str, "set"),
                            s(:dstr,
                              s(:str, "images("),
                              s(:begin,
                                s(:lvar, :img)),
                              s(:str, ")")),
                            s(:send,
                              s(:const, nil, :Tk), :tk_call,
                              s(:str, "image"),
                              s(:str, "create"),
                              s(:str, "photo"),
                              s(:str, "-file"),
                              s(:lvar, :f)))))))),
                s(:lvasgn, :images,
                  s(:send,
                    s(:const, nil, :Hash), :[],
                    s(:splat,
                      s(:send,
                        s(:const, nil, :TkComm), :simplelist,
                        s(:send,
                          s(:const, nil, :Tk), :tk_call,
                          s(:str, "array"),
                          s(:str, "get"),
                          s(:str, "images")))))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :images), :keys), :each),
                  s(:args,
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :images), :[]=,
                    s(:lvar, :k),
                    s(:send,
                      s(:const, nil, :TkPhotoImage), :new,
                      s(:hash,
                        s(:pair,
                          s(:sym, :imagename),
                          s(:send,
                            s(:lvar, :images), :[],
                            s(:lvar, :k))),
                        s(:pair,
                          s(:sym, :without_creating),
                          s(:true)))))))),
            s(:lvar, :images))),
        s(:defs,
          s(:self), :style,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :args), :map!),
              s(:args,
                s(:arg, :arg)),
              s(:send,
                s(:const, nil, :TkComm), :_get_eval_string,
                s(:lvar, :arg))), :join,
            s(:str, "."))),
        s(:defs,
          s(:self), :themes,
          s(:args,
            s(:optarg, :glob_ptn,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :TILE_SPEC_VERSION_ID), :<,
                  s(:int, 8)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk), :info,
                    s(:sym, :commands),
                    s(:str, "::ttk::themes")), :empty?)),
              s(:begin,
                s(:if,
                  s(:lvar, :glob_ptn),
                  s(:send, nil, :fail,
                    s(:const, nil, :RuntimeError),
                    s(:str, "not support glob option")), nil),
                s(:lvasgn, :cmd,
                  s(:array,
                    s(:str, "::tile::availableThemes")))),
              s(:begin,
                s(:if,
                  s(:lvar, :glob_ptn), nil,
                  s(:lvasgn, :glob_ptn,
                    s(:str, "*"))),
                s(:lvasgn, :cmd,
                  s(:array,
                    s(:str, "::ttk::themes"),
                    s(:lvar, :glob_ptn))))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :TkComm), :simplelist,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call_without_enc,
                    s(:splat,
                      s(:lvar, :cmd)))),
                s(:resbody, nil, nil,
                  s(:send,
                    s(:const, nil, :TkComm), :simplelist,
                    s(:send,
                      s(:const, nil, :Tk), :tk_call,
                      s(:str, "lsearch"),
                      s(:str, "-all"),
                      s(:str, "-inline"),
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Tile), :Style), :theme_names),
                      s(:lvar, :glob_ptn)))), nil)))),
        s(:defs,
          s(:self), :set_theme,
          s(:args,
            s(:arg, :theme)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :TILE_SPEC_VERSION_ID), :<,
                  s(:int, 8)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk), :info,
                    s(:sym, :commands),
                    s(:str, "::ttk::setTheme")), :empty?)),
              s(:lvasgn, :cmd,
                s(:str, "::tile::setTheme")),
              s(:lvasgn, :cmd,
                s(:str, "::ttk::setTheme"))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:lvar, :cmd),
                  s(:lvar, :theme)),
                s(:resbody, nil, nil,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :Tile), :Style), :theme_use,
                    s(:lvar, :theme))), nil)))),
        s(:module,
          s(:const, nil, :KeyNav),
          s(:if,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Tile), :TILE_SPEC_VERSION_ID), :<,
              s(:int, 8)),
            s(:begin,
              s(:defs,
                s(:self), :enableMnemonics,
                s(:args,
                  s(:arg, :w)),
                s(:send,
                  s(:const, nil, :Tk), :tk_call,
                  s(:str, "::keynav::enableMnemonics"),
                  s(:lvar, :w))),
              s(:defs,
                s(:self), :defaultButton,
                s(:args,
                  s(:arg, :w)),
                s(:send,
                  s(:const, nil, :Tk), :tk_call,
                  s(:str, "::keynav::defaultButton"),
                  s(:lvar, :w)))),
            s(:begin,
              s(:defs,
                s(:self), :enableMnemonics,
                s(:args,
                  s(:arg, :w)),
                s(:str, "")),
              s(:defs,
                s(:self), :defaultButton,
                s(:args,
                  s(:arg, :w)),
                s(:str, ""))))),
        s(:module,
          s(:const, nil, :Font),
          s(:begin,
            s(:casgn, nil, :Default,
              s(:str, "TkDefaultFont")),
            s(:casgn, nil, :Text,
              s(:str, "TkTextFont")),
            s(:casgn, nil, :Heading,
              s(:str, "TkHeadingFont")),
            s(:casgn, nil, :Caption,
              s(:str, "TkCaptionFont")),
            s(:casgn, nil, :Tooltip,
              s(:str, "TkTooltipFont")),
            s(:casgn, nil, :Fixed,
              s(:str, "TkFixedFont")),
            s(:casgn, nil, :Menu,
              s(:str, "TkMenuFont")),
            s(:casgn, nil, :SmallCaption,
              s(:str, "TkSmallCaptionFont")),
            s(:casgn, nil, :Icon,
              s(:str, "TkIconFont")),
            s(:send,
              s(:const,
                s(:const, nil, :TkFont), :SYSTEM_FONT_NAMES), :add,
              s(:array,
                s(:str, "TkDefaultFont"),
                s(:str, "TkTextFont"),
                s(:str, "TkHeadingFont"),
                s(:str, "TkCaptionFont"),
                s(:str, "TkTooltipFont"),
                s(:str, "TkFixedFont"),
                s(:str, "TkMenuFont"),
                s(:str, "TkSmallCaptionFont"),
                s(:str, "TkIconFont"))))),
        s(:module,
          s(:const, nil, :ParseStyleLayout),
          s(:begin,
            s(:def, :_style_layout,
              s(:args,
                s(:arg, :lst)),
              s(:begin,
                s(:lvasgn, :ret,
                  s(:array)),
                s(:until,
                  s(:send,
                    s(:lvar, :lst), :empty?),
                  s(:begin,
                    s(:lvasgn, :sub,
                      s(:array,
                        s(:send,
                          s(:lvar, :lst), :shift))),
                    s(:lvasgn, :keys,
                      s(:hash)),
                    s(:until,
                      s(:send,
                        s(:lvar, :lst), :empty?),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :lst), :[],
                              s(:int, 0)), :[],
                            s(:int, 0)), :==,
                          s(:str, "-")),
                        s(:begin,
                          s(:lvasgn, :k,
                            s(:send,
                              s(:send,
                                s(:lvar, :lst), :shift), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1)))),
                          s(:lvasgn, :children,
                            s(:send,
                              s(:lvar, :lst), :shift)),
                          s(:if,
                            s(:send,
                              s(:lvar, :children), :kind_of?,
                              s(:const, nil, :Array)),
                            s(:lvasgn, :children,
                              s(:send, nil, :_style_layout,
                                s(:lvar, :children))), nil),
                          s(:send,
                            s(:lvar, :keys), :[]=,
                            s(:lvar, :k),
                            s(:lvar, :children))),
                        s(:break))),
                    s(:if,
                      s(:send,
                        s(:lvar, :keys), :empty?), nil,
                      s(:send,
                        s(:lvar, :sub), :<<,
                        s(:lvar, :keys))),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:lvar, :sub)))),
                s(:lvar, :ret))),
            s(:send, nil, :private,
              s(:sym, :_style_layout)))),
        s(:module,
          s(:const, nil, :TileWidget),
          s(:begin,
            s(:send, nil, :include,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Tile), :ParseStyleLayout)),
            s(:def, :__val2ruby_optkeys,
              s(:args),
              s(:send,
                s(:super), :update,
                s(:hash,
                  s(:pair,
                    s(:str, "style"),
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args,
                        s(:arg, :v)),
                      s(:send, nil, :_style_layout,
                        s(:send, nil, :list,
                          s(:lvar, :v)))))))),
            s(:send, nil, :private,
              s(:sym, :__val2ruby_optkeys)),
            s(:def, :ttk_instate,
              s(:args,
                s(:arg, :state),
                s(:optarg, :script,
                  s(:nil)),
                s(:blockarg, :b)),
              s(:if,
                s(:lvar, :script),
                s(:send, nil, :tk_send,
                  s(:str, "instate"),
                  s(:lvar, :state),
                  s(:lvar, :script)),
                s(:if,
                  s(:lvar, :b),
                  s(:send, nil, :tk_send,
                    s(:str, "instate"),
                    s(:lvar, :state),
                    s(:send,
                      s(:const, nil, :Proc), :new,
                      s(:block_pass,
                        s(:lvar, :b)))),
                  s(:send, nil, :bool,
                    s(:send, nil, :tk_send,
                      s(:str, "instate"),
                      s(:lvar, :state)))))),
            s(:alias,
              s(:sym, :tile_instate),
              s(:sym, :ttk_instate)),
            s(:def, :ttk_state,
              s(:args,
                s(:optarg, :state,
                  s(:nil))),
              s(:if,
                s(:lvar, :state),
                s(:send, nil, :tk_send,
                  s(:str, "state"),
                  s(:lvar, :state)),
                s(:send, nil, :list,
                  s(:send, nil, :tk_send,
                    s(:str, "state"))))),
            s(:alias,
              s(:sym, :tile_state),
              s(:sym, :ttk_state)),
            s(:def, :ttk_identify,
              s(:args,
                s(:arg, :x),
                s(:arg, :y)),
              s(:begin,
                s(:lvasgn, :ret,
                  s(:send, nil, :tk_send_without_enc,
                    s(:str, "identify"),
                    s(:lvar, :x),
                    s(:lvar, :y))),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :ret), :empty?)),
                  s(:nil),
                  s(:lvar, :ret)))),
            s(:alias,
              s(:sym, :tile_identify),
              s(:sym, :ttk_identify)),
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :Tk), :const_defined?,
                  s(:sym, :USE_OBSOLETE_TILE_STATE_METHOD)),
                s(:const,
                  s(:const, nil, :Tk), :USE_OBSOLETE_TILE_STATE_METHOD)),
              s(:begin,
                s(:alias,
                  s(:sym, :instate),
                  s(:sym, :ttk_instate)),
                s(:alias,
                  s(:sym, :state),
                  s(:sym, :ttk_state)),
                s(:alias,
                  s(:sym, :identify),
                  s(:sym, :ttk_identify))), nil))),
        s(:send, nil, :autoload,
          s(:sym, :TButton),
          s(:str, "tkextlib/tile/tbutton")),
        s(:send, nil, :autoload,
          s(:sym, :Button),
          s(:str, "tkextlib/tile/tbutton")),
        s(:send, nil, :autoload,
          s(:sym, :TCheckButton),
          s(:str, "tkextlib/tile/tcheckbutton")),
        s(:send, nil, :autoload,
          s(:sym, :CheckButton),
          s(:str, "tkextlib/tile/tcheckbutton")),
        s(:send, nil, :autoload,
          s(:sym, :TCheckbutton),
          s(:str, "tkextlib/tile/tcheckbutton")),
        s(:send, nil, :autoload,
          s(:sym, :Checkbutton),
          s(:str, "tkextlib/tile/tcheckbutton")),
        s(:send, nil, :autoload,
          s(:sym, :Dialog),
          s(:str, "tkextlib/tile/dialog")),
        s(:send, nil, :autoload,
          s(:sym, :TEntry),
          s(:str, "tkextlib/tile/tentry")),
        s(:send, nil, :autoload,
          s(:sym, :Entry),
          s(:str, "tkextlib/tile/tentry")),
        s(:send, nil, :autoload,
          s(:sym, :TCombobox),
          s(:str, "tkextlib/tile/tcombobox")),
        s(:send, nil, :autoload,
          s(:sym, :Combobox),
          s(:str, "tkextlib/tile/tcombobox")),
        s(:send, nil, :autoload,
          s(:sym, :TFrame),
          s(:str, "tkextlib/tile/tframe")),
        s(:send, nil, :autoload,
          s(:sym, :Frame),
          s(:str, "tkextlib/tile/tframe")),
        s(:send, nil, :autoload,
          s(:sym, :TLabelframe),
          s(:str, "tkextlib/tile/tlabelframe")),
        s(:send, nil, :autoload,
          s(:sym, :Labelframe),
          s(:str, "tkextlib/tile/tlabelframe")),
        s(:send, nil, :autoload,
          s(:sym, :TLabelFrame),
          s(:str, "tkextlib/tile/tlabelframe")),
        s(:send, nil, :autoload,
          s(:sym, :LabelFrame),
          s(:str, "tkextlib/tile/tlabelframe")),
        s(:send, nil, :autoload,
          s(:sym, :TLabel),
          s(:str, "tkextlib/tile/tlabel")),
        s(:send, nil, :autoload,
          s(:sym, :Label),
          s(:str, "tkextlib/tile/tlabel")),
        s(:send, nil, :autoload,
          s(:sym, :TMenubutton),
          s(:str, "tkextlib/tile/tmenubutton")),
        s(:send, nil, :autoload,
          s(:sym, :Menubutton),
          s(:str, "tkextlib/tile/tmenubutton")),
        s(:send, nil, :autoload,
          s(:sym, :TMenuButton),
          s(:str, "tkextlib/tile/tmenubutton")),
        s(:send, nil, :autoload,
          s(:sym, :MenuButton),
          s(:str, "tkextlib/tile/tmenubutton")),
        s(:send, nil, :autoload,
          s(:sym, :TNotebook),
          s(:str, "tkextlib/tile/tnotebook")),
        s(:send, nil, :autoload,
          s(:sym, :Notebook),
          s(:str, "tkextlib/tile/tnotebook")),
        s(:send, nil, :autoload,
          s(:sym, :TPaned),
          s(:str, "tkextlib/tile/tpaned")),
        s(:send, nil, :autoload,
          s(:sym, :Paned),
          s(:str, "tkextlib/tile/tpaned")),
        s(:send, nil, :autoload,
          s(:sym, :PanedWindow),
          s(:str, "tkextlib/tile/tpaned")),
        s(:send, nil, :autoload,
          s(:sym, :Panedwindow),
          s(:str, "tkextlib/tile/tpaned")),
        s(:send, nil, :autoload,
          s(:sym, :TProgressbar),
          s(:str, "tkextlib/tile/tprogressbar")),
        s(:send, nil, :autoload,
          s(:sym, :Progressbar),
          s(:str, "tkextlib/tile/tprogressbar")),
        s(:send, nil, :autoload,
          s(:sym, :TRadioButton),
          s(:str, "tkextlib/tile/tradiobutton")),
        s(:send, nil, :autoload,
          s(:sym, :RadioButton),
          s(:str, "tkextlib/tile/tradiobutton")),
        s(:send, nil, :autoload,
          s(:sym, :TRadiobutton),
          s(:str, "tkextlib/tile/tradiobutton")),
        s(:send, nil, :autoload,
          s(:sym, :Radiobutton),
          s(:str, "tkextlib/tile/tradiobutton")),
        s(:send, nil, :autoload,
          s(:sym, :TScale),
          s(:str, "tkextlib/tile/tscale")),
        s(:send, nil, :autoload,
          s(:sym, :Scale),
          s(:str, "tkextlib/tile/tscale")),
        s(:send, nil, :autoload,
          s(:sym, :TProgress),
          s(:str, "tkextlib/tile/tscale")),
        s(:send, nil, :autoload,
          s(:sym, :Progress),
          s(:str, "tkextlib/tile/tscale")),
        s(:send, nil, :autoload,
          s(:sym, :TScrollbar),
          s(:str, "tkextlib/tile/tscrollbar")),
        s(:send, nil, :autoload,
          s(:sym, :Scrollbar),
          s(:str, "tkextlib/tile/tscrollbar")),
        s(:send, nil, :autoload,
          s(:sym, :XScrollbar),
          s(:str, "tkextlib/tile/tscrollbar")),
        s(:send, nil, :autoload,
          s(:sym, :YScrollbar),
          s(:str, "tkextlib/tile/tscrollbar")),
        s(:send, nil, :autoload,
          s(:sym, :TSeparator),
          s(:str, "tkextlib/tile/tseparator")),
        s(:send, nil, :autoload,
          s(:sym, :Separator),
          s(:str, "tkextlib/tile/tseparator")),
        s(:send, nil, :autoload,
          s(:sym, :TSpinbox),
          s(:str, "tkextlib/tile/tspinbox")),
        s(:send, nil, :autoload,
          s(:sym, :Spinbox),
          s(:str, "tkextlib/tile/tspinbox")),
        s(:send, nil, :autoload,
          s(:sym, :TSquare),
          s(:str, "tkextlib/tile/tsquare")),
        s(:send, nil, :autoload,
          s(:sym, :Square),
          s(:str, "tkextlib/tile/tsquare")),
        s(:send, nil, :autoload,
          s(:sym, :SizeGrip),
          s(:str, "tkextlib/tile/sizegrip")),
        s(:send, nil, :autoload,
          s(:sym, :Sizegrip),
          s(:str, "tkextlib/tile/sizegrip")),
        s(:send, nil, :autoload,
          s(:sym, :Treeview),
          s(:str, "tkextlib/tile/treeview")),
        s(:send, nil, :autoload,
          s(:sym, :Style),
          s(:str, "tkextlib/tile/style"))))),
  s(:casgn, nil, :Ttk,
    s(:const,
      s(:const, nil, :Tk), :Tile)))
