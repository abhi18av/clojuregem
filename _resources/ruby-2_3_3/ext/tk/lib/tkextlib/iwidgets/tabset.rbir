s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tkextlib/iwidgets.rb")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Iwidgets),
      s(:class,
        s(:const, nil, :Tabset),
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :Itk), :Widget), nil))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Iwidgets), :Tabset), nil,
    s(:begin,
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::iwidgets::tabset"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Tabset"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:send, nil, :include,
        s(:const, nil, :TkItemConfigMethod)),
      s(:def, :__item_cget_cmd,
        s(:args,
          s(:arg, :id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:str, "tabcget"),
          s(:lvar, :id))),
      s(:send, nil, :private,
        s(:sym, :__item_cget_cmd)),
      s(:def, :__item_config_cmd,
        s(:args,
          s(:arg, :id)),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:str, "tabconfigure"),
          s(:lvar, :id))),
      s(:send, nil, :private,
        s(:sym, :__item_config_cmd)),
      s(:def, :tagid,
        s(:args,
          s(:arg, :tagOrId)),
        s(:if,
          s(:send,
            s(:lvar, :tagOrId), :kind_of?,
            s(:const,
              s(:const,
                s(:const, nil, :Tk), :Itk), :Component)),
          s(:send,
            s(:lvar, :tagOrId), :name),
          s(:lvar, :tagOrId))),
      s(:alias,
        s(:sym, :tabcget_tkstring),
        s(:sym, :itemcget_tkstring)),
      s(:alias,
        s(:sym, :tabcget),
        s(:sym, :itemcget)),
      s(:alias,
        s(:sym, :tabcget_strict),
        s(:sym, :itemcget_strict)),
      s(:alias,
        s(:sym, :tabconfigure),
        s(:sym, :itemconfigure)),
      s(:alias,
        s(:sym, :tabconfiginfo),
        s(:sym, :itemconfiginfo)),
      s(:alias,
        s(:sym, :current_tabconfiginfo),
        s(:sym, :current_itemconfiginfo)),
      s(:send, nil, :private,
        s(:sym, :itemcget_tkstring),
        s(:sym, :itemcget),
        s(:sym, :itemcget_strict)),
      s(:send, nil, :private,
        s(:sym, :itemconfigure),
        s(:sym, :itemconfiginfo),
        s(:sym, :current_itemconfiginfo)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:super), :<<,
              s(:str, "equaltabs")), :<<,
            s(:str, "raiseselect")), :<<,
          s(:str, "tabborders"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:super), :<<,
          s(:str, "backdrop"))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :add,
        s(:args,
          s(:optarg, :keys,
            s(:hash))),
        s(:send, nil, :window,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "add"),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))))),
      s(:def, :delete,
        s(:args,
          s(:arg, :idx1),
          s(:optarg, :idx2,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :idx2),
            s(:send, nil, :tk_call,
              s(:ivar, :@path),
              s(:str, "delete"),
              s(:send, nil, :index,
                s(:lvar, :idx1)),
              s(:send, nil, :index,
                s(:lvar, :idx2))),
            s(:send, nil, :tk_call,
              s(:ivar, :@path),
              s(:str, "delete"),
              s(:send, nil, :index,
                s(:lvar, :idx1)))),
          s(:self))),
      s(:def, :index,
        s(:args,
          s(:arg, :idx)),
        s(:send, nil, :number,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "index"),
            s(:send, nil, :tagid,
              s(:lvar, :idx))))),
      s(:def, :insert,
        s(:args,
          s(:arg, :idx),
          s(:optarg, :keys,
            s(:hash))),
        s(:send, nil, :window,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "insert"),
            s(:send, nil, :index,
              s(:lvar, :idx)),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))))),
      s(:def, :next,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "next")),
          s(:self))),
      s(:def, :prev,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "prev")),
          s(:self))),
      s(:def, :select,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "select"),
            s(:send, nil, :index,
              s(:lvar, :idx))),
          s(:self))),
      s(:def, :show_tab,
        s(:args,
          s(:arg, :idx)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :index,
                s(:lvar, :idx)), :==,
              s(:int, 0)),
            s(:begin,
              s(:send,
                s(:self), :start=,
                s(:int, 0)),
              s(:return)), nil),
          s(:if,
            s(:or_asgn,
              s(:ivasgn, :@canvas),
              s(:send,
                s(:send,
                  s(:self), :winfo_children), :[],
                s(:int, 0))), nil,
            s(:send, nil, :reutrn)),
          s(:if,
            s(:or,
              s(:send,
                s(:begin,
                  s(:lvasgn, :delta,
                    s(:send, nil, :cget,
                      s(:sym, :gap)))), :==,
                s(:str, "overlap")),
              s(:send,
                s(:begin,
                  s(:lvasgn, :delta,
                    s(:send,
                      s(:send,
                        s(:self), :winfo_pixels,
                        s(:lvar, :delta)), :+,
                      s(:int, 1)))), :<=,
                s(:int, 0))),
            s(:lvasgn, :delta,
              s(:int, 1)), nil),
          s(:case,
            s(:send, nil, :cget,
              s(:sym, :tabpos)),
            s(:when,
              s(:str, "s"),
              s(:str, "n"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:begin,
                      s(:lvasgn, :head,
                        s(:send, nil, :tabcget,
                          s(:lvar, :idx),
                          s(:sym, :left)))), :<,
                    s(:int, 0)),
                  s(:begin,
                    s(:op_asgn,
                      s(:send,
                        s(:self), :start), :-,
                      s(:lvar, :head)),
                    s(:return)), nil),
                s(:lvasgn, :tabs_size,
                  s(:send,
                    s(:ivar, :@canvas), :winfo_width)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :tab_start),
                    s(:lvasgn, :tab_end)),
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:ivar, :@canvas), :find_overlapping,
                              s(:lvar, :head),
                              s(:int, 0),
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:lvar, :delta)),
                              s(:send,
                                s(:ivar, :@canvas), :winfo_height)), :find_all),
                          s(:args,
                            s(:arg, :id)),
                          s(:send,
                            s(:send,
                              s(:ivar, :@canvas), :itemtype,
                              s(:lvar, :id)), :==,
                            s(:const, nil, :TkcPolygon))), :map!),
                      s(:args,
                        s(:arg, :id)),
                      s(:begin,
                        s(:lvasgn, :bbox,
                          s(:send,
                            s(:ivar, :@canvas), :bbox,
                            s(:lvar, :id))),
                        s(:array,
                          s(:send,
                            s(:lvar, :bbox), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :bbox), :[],
                            s(:int, 2))))), :max)))),
            s(:when,
              s(:str, "e"),
              s(:str, "w"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:begin,
                      s(:lvasgn, :head,
                        s(:send, nil, :tabcget,
                          s(:lvar, :idx),
                          s(:sym, :top)))), :<,
                    s(:int, 0)),
                  s(:begin,
                    s(:op_asgn,
                      s(:send,
                        s(:self), :start), :-,
                      s(:lvar, :head)),
                    s(:return)), nil),
                s(:lvasgn, :tabs_size,
                  s(:send,
                    s(:ivar, :@canvas), :winfo_height)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :tab_start),
                    s(:lvasgn, :tab_end)),
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:ivar, :@canvas), :find_overlapping,
                              s(:int, 0),
                              s(:lvar, :head),
                              s(:send,
                                s(:ivar, :@canvas), :winfo_width),
                              s(:send,
                                s(:lvar, :head), :+,
                                s(:lvar, :delta))), :find_all),
                          s(:args,
                            s(:arg, :id)),
                          s(:send,
                            s(:send,
                              s(:ivar, :@canvas), :itemtype,
                              s(:lvar, :id)), :==,
                            s(:const, nil, :TkcPolygon))), :map!),
                      s(:args,
                        s(:arg, :id)),
                      s(:begin,
                        s(:lvasgn, :bbox,
                          s(:send,
                            s(:ivar, :@canvas), :bbox,
                            s(:lvar, :id))),
                        s(:array,
                          s(:send,
                            s(:lvar, :bbox), :[],
                            s(:int, 1)),
                          s(:send,
                            s(:lvar, :bbox), :[],
                            s(:int, 3))))), :max)))), nil),
          s(:if,
            s(:send,
              s(:begin,
                s(:lvasgn, :size,
                  s(:send,
                    s(:send,
                      s(:lvar, :tab_end), :-,
                      s(:lvar, :tab_start)), :+,
                    s(:int, 1)))), :>,
              s(:lvar, :tabs_size)),
            s(:op_asgn,
              s(:send,
                s(:self), :start), :-,
              s(:lvar, :tab_start)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :head), :+,
                  s(:lvar, :size)), :>,
                s(:lvar, :tabs_size)),
              s(:op_asgn,
                s(:send,
                  s(:self), :start), :-,
                s(:send,
                  s(:send,
                    s(:lvar, :head), :+,
                    s(:lvar, :size)), :-,
                  s(:lvar, :tabs_size))), nil)),
          s(:self))))))
