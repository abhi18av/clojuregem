s(:begin,
  s(:send, nil, :require,
    s(:str, "tk")),
  s(:send, nil, :require,
    s(:str, "tk/text")),
  s(:send, nil, :require,
    s(:str, "tkextlib/iwidgets.rb")),
  s(:module,
    s(:const, nil, :Tk),
    s(:module,
      s(:const, nil, :Iwidgets),
      s(:class,
        s(:const, nil, :Hierarchy),
        s(:const,
          s(:const,
            s(:const, nil, :Tk), :Iwidgets), :Scrolledwidget), nil))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Tk), :Iwidgets), :Hierarchy), nil,
    s(:begin,
      s(:casgn, nil, :ItemConfCMD,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "tag"), :freeze),
            s(:send,
              s(:str, "configure"), :freeze)), :freeze)),
      s(:send, nil, :include,
        s(:const, nil, :TkTextTagConfig)),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array,
            s(:send,
              s(:str, "::iwidgets::hierarchy"), :freeze)), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, "Hierarchy"), :freeze)),
      s(:or_asgn,
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const, nil, :WidgetClassName)),
        s(:self)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :ValidateConfigure)),
      s(:class,
        s(:const, nil, :QueryCommand),
        s(:const, nil, :TkValidateCommand),
        s(:begin,
          s(:class,
            s(:const, nil, :ValidateArgs),
            s(:const,
              s(:const, nil, :TkUtil), :CallbackSubst),
            s(:begin,
              s(:casgn, nil, :KEY_TBL,
                s(:array,
                  s(:array,
                    s(:str, "n"),
                    s(:str, "s"),
                    s(:sym, :node)),
                  s(:nil))),
              s(:casgn, nil, :PROC_TBL,
                s(:array,
                  s(:array,
                    s(:str, "s"),
                    s(:send,
                      s(:const, nil, :TkComm), :method,
                      s(:sym, :string))),
                  s(:nil))),
              s(:send, nil, :_setup_subst_table,
                s(:const, nil, :KEY_TBL),
                s(:const, nil, :PROC_TBL)),
              s(:defs,
                s(:self), :ret_val,
                s(:args,
                  s(:arg, :val)),
                s(:lvar, :val)))),
          s(:defs,
            s(:self), :_config_keys,
            s(:args),
            s(:array,
              s(:str, "querycommand"))))),
      s(:class,
        s(:const, nil, :IndicatorCommand),
        s(:const, nil, :TkValidateCommand),
        s(:begin,
          s(:class,
            s(:const, nil, :ValidateArgs),
            s(:const,
              s(:const, nil, :TkUtil), :CallbackSubst),
            s(:begin,
              s(:casgn, nil, :KEY_TBL,
                s(:array,
                  s(:array,
                    s(:str, "n"),
                    s(:str, "s"),
                    s(:sym, :node)),
                  s(:array,
                    s(:str, "s"),
                    s(:str, "b"),
                    s(:sym, :status)),
                  s(:nil))),
              s(:casgn, nil, :PROC_TBL,
                s(:array,
                  s(:array,
                    s(:str, "s"),
                    s(:send,
                      s(:const, nil, :TkComm), :method,
                      s(:sym, :string))),
                  s(:array,
                    s(:str, "b"),
                    s(:send,
                      s(:const, nil, :TkComm), :method,
                      s(:sym, :bool))),
                  s(:nil))),
              s(:send, nil, :_setup_subst_table,
                s(:const, nil, :KEY_TBL),
                s(:const, nil, :PROC_TBL)),
              s(:defs,
                s(:self), :ret_val,
                s(:args,
                  s(:arg, :val)),
                s(:lvar, :val)))),
          s(:defs,
            s(:self), :_config_keys,
            s(:args),
            s(:array,
              s(:str, "iconcommand"),
              s(:str, "icondblcommand"),
              s(:str, "imagedblcommand"))))),
      s(:class,
        s(:const, nil, :IconCommand),
        s(:const, nil, :TkValidateCommand),
        s(:begin,
          s(:class,
            s(:const, nil, :ValidateArgs),
            s(:const,
              s(:const, nil, :TkUtil), :CallbackSubst),
            s(:begin,
              s(:casgn, nil, :KEY_TBL,
                s(:array,
                  s(:array,
                    s(:str, "n"),
                    s(:str, "s"),
                    s(:sym, :node)),
                  s(:array,
                    s(:str, "i"),
                    s(:str, "s"),
                    s(:sym, :icon)),
                  s(:nil))),
              s(:casgn, nil, :PROC_TBL,
                s(:array,
                  s(:array,
                    s(:str, "s"),
                    s(:send,
                      s(:const, nil, :TkComm), :method,
                      s(:sym, :string))),
                  s(:nil))),
              s(:send, nil, :_setup_subst_table,
                s(:const, nil, :KEY_TBL),
                s(:const, nil, :PROC_TBL)),
              s(:defs,
                s(:self), :ret_val,
                s(:args,
                  s(:arg, :val)),
                s(:lvar, :val)))),
          s(:defs,
            s(:self), :_config_keys,
            s(:args),
            s(:array,
              s(:str, "dblclickcommand"),
              s(:str, "imagecommand"),
              s(:str, "selectcommand"))))),
      s(:def, :__validation_class_list,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:super), :<<,
              s(:const, nil, :QueryCommand)), :<<,
            s(:const, nil, :IndicatorCommand)), :<<,
          s(:const, nil, :IconCommand))),
      s(:send,
        s(:const,
          s(:const, nil, :Tk), :ValidateConfigure), :__def_validcmd,
        s(:send, nil, :binding),
        s(:const, nil, :QueryCommand)),
      s(:send,
        s(:const,
          s(:const, nil, :Tk), :ValidateConfigure), :__def_validcmd,
        s(:send, nil, :binding),
        s(:const, nil, :IndicatorCommand)),
      s(:send,
        s(:const,
          s(:const, nil, :Tk), :ValidateConfigure), :__def_validcmd,
        s(:send, nil, :binding),
        s(:const, nil, :IconCommand)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:super), :<<,
              s(:str, "alwaysquery")), :<<,
            s(:str, "expanded")), :<<,
          s(:str, "filter"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:super), :<<,
              s(:str, "markbackground")), :<<,
            s(:str, "markforeground")), :<<,
          s(:str, "textbackground"))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :__font_optkeys,
        s(:args),
        s(:send,
          s(:super), :<<,
          s(:str, "textfont"))),
      s(:send, nil, :private,
        s(:sym, :__font_optkeys)),
      s(:def, :clear,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "clear")),
          s(:self))),
      s(:def, :collapse,
        s(:args,
          s(:arg, :node)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "collapse")),
          s(:self))),
      s(:def, :current,
        s(:args),
        s(:send, nil, :tk_call,
          s(:ivar, :@path),
          s(:str, "current"))),
      s(:def, :draw,
        s(:args,
          s(:optarg, :mode,
            s(:const, nil, :None))),
        s(:begin,
          s(:case,
            s(:lvar, :mode),
            s(:when,
              s(:const, nil, :None), nil),
            s(:when,
              s(:str, "now"),
              s(:sym, :now),
              s(:lvasgn, :mode,
                s(:str, "-now"))),
            s(:when,
              s(:str, "eventually"),
              s(:sym, :eventually),
              s(:lvasgn, :mode,
                s(:str, "-eventually"))),
            s(:when,
              s(:const, nil, :String),
              s(:const, nil, :Symbol),
              s(:begin,
                s(:lvasgn, :mode,
                  s(:send,
                    s(:lvar, :mode), :to_s)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :mode), :[],
                      s(:int, 0)), :!=,
                    s(:str, "-")),
                  s(:lvasgn, :mode,
                    s(:send,
                      s(:str, "-"), :<<,
                      s(:lvar, :mode))), nil))), nil),
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "draw"),
            s(:lvar, :mode)))),
      s(:def, :expand,
        s(:args,
          s(:arg, :node)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "expand"),
            s(:lvar, :node)),
          s(:self))),
      s(:def, :expanded?,
        s(:args,
          s(:arg, :node)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "expanded"),
            s(:lvar, :node)))),
      s(:def, :exp_state,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "expState")))),
      s(:alias,
        s(:sym, :expand_state),
        s(:sym, :exp_state)),
      s(:alias,
        s(:sym, :expanded_list),
        s(:sym, :exp_state)),
      s(:def, :mark_clear,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "mark"),
            s(:str, "clear")),
          s(:self))),
      s(:def, :mark_add,
        s(:args,
          s(:restarg, :nodes)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "mark"),
            s(:str, "add"),
            s(:splat,
              s(:lvar, :nodes))),
          s(:self))),
      s(:def, :mark_remove,
        s(:args,
          s(:restarg, :nodes)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "mark"),
            s(:str, "remove"),
            s(:splat,
              s(:lvar, :nodes))),
          s(:self))),
      s(:def, :mark_get,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "mark"),
            s(:str, "get")))),
      s(:def, :refresh,
        s(:args,
          s(:arg, :node)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "refresh"),
            s(:lvar, :node)),
          s(:self))),
      s(:def, :prune,
        s(:args,
          s(:arg, :node)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "prune"),
            s(:lvar, :node)),
          s(:self))),
      s(:def, :selection_clear,
        s(:args),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "selection"),
            s(:str, "clear")),
          s(:self))),
      s(:def, :selection_add,
        s(:args,
          s(:restarg, :nodes)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "selection"),
            s(:str, "add"),
            s(:splat,
              s(:lvar, :nodes))),
          s(:self))),
      s(:def, :selection_remove,
        s(:args,
          s(:restarg, :nodes)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "selection"),
            s(:str, "remove"),
            s(:splat,
              s(:lvar, :nodes))),
          s(:self))),
      s(:def, :selection_get,
        s(:args),
        s(:send, nil, :list,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "selection"),
            s(:str, "get")))),
      s(:def, :toggle,
        s(:args,
          s(:arg, :node)),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:ivar, :@path),
            s(:str, "toggle"),
            s(:lvar, :node)),
          s(:self))),
      s(:def, :bbox,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "bbox"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))),
      s(:def, :compare,
        s(:args,
          s(:arg, :idx1),
          s(:arg, :op),
          s(:arg, :idx2)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "compare"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :idx1)),
            s(:lvar, :op),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :idx2))))),
      s(:def, :debug,
        s(:args),
        s(:send, nil, :bool,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "debug")))),
      s(:def, :debug=,
        s(:args,
          s(:arg, :boolean)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "debug"),
            s(:lvar, :boolean)),
          s(:lvar, :boolean))),
      s(:def, :delete,
        s(:args,
          s(:arg, :first),
          s(:optarg, :last,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "delete"),
            s(:lvar, :first),
            s(:lvar, :last)),
          s(:self))),
      s(:def, :dlineinfo,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :list,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "dlineinfo"),
            s(:send, nil, :_get_eval_enc_str,
              s(:lvar, :index))))),
      s(:def, :get,
        s(:args,
          s(:restarg, :index)),
        s(:send, nil, :_fromUTF8,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "get"),
            s(:splat,
              s(:lvar, :index))))),
      s(:def, :index,
        s(:args,
          s(:arg, :index)),
        s(:send, nil, :tk_send_without_enc,
          s(:str, "index"),
          s(:send, nil, :_get_eval_enc_str,
            s(:lvar, :index)))),
      s(:def, :insert,
        s(:args,
          s(:arg, :index),
          s(:arg, :chars),
          s(:restarg, :tags)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :tags), :[],
              s(:int, 0)), :kind_of?,
            s(:const, nil, :Array)),
          s(:begin,
            s(:lvasgn, :args,
              s(:array,
                s(:lvar, :chars))),
            s(:while,
              s(:send,
                s(:send,
                  s(:lvar, :tags), :size), :>,
                s(:int, 0)),
              s(:begin,
                s(:send,
                  s(:lvar, :args), :<<,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :tags), :shift), :collect),
                      s(:args,
                        s(:arg, :x)),
                      s(:send, nil, :_get_eval_string,
                        s(:lvar, :x))), :join,
                    s(:str, " "))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :tags), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :args), :<<,
                    s(:send,
                      s(:lvar, :tags), :shift)), nil))),
            s(:super,
              s(:lvar, :index),
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :tags), :size), :==,
              s(:int, 0)),
            s(:super,
              s(:lvar, :index),
              s(:lvar, :chars)),
            s(:super,
              s(:lvar, :index),
              s(:lvar, :chars),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :tags), :collect),
                  s(:args,
                    s(:arg, :x)),
                  s(:send, nil, :_get_eval_string,
                    s(:lvar, :x))), :join,
                s(:str, " ")))))),
      s(:def, :scan_mark,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "scan"),
            s(:str, "mark"),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:def, :scan_dragto,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "scan"),
            s(:str, "dragto"),
            s(:lvar, :x),
            s(:lvar, :y)),
          s(:self))),
      s(:def, :see,
        s(:args,
          s(:arg, :index)),
        s(:begin,
          s(:send, nil, :tk_send_without_enc,
            s(:str, "see"),
            s(:lvar, :index)),
          s(:self))),
      s(:def, :xview,
        s(:args,
          s(:restarg, :index)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :index), :size), :==,
            s(:int, 0)),
          s(:send, nil, :list,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "xview"))),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "xview"),
              s(:splat,
                s(:lvar, :index))),
            s(:self)))),
      s(:def, :xview_moveto,
        s(:args,
          s(:restarg, :index)),
        s(:send, nil, :xview,
          s(:str, "moveto"),
          s(:splat,
            s(:lvar, :index)))),
      s(:def, :xview_scroll,
        s(:args,
          s(:restarg, :index)),
        s(:send, nil, :xview,
          s(:str, "scroll"),
          s(:splat,
            s(:lvar, :index)))),
      s(:def, :yview,
        s(:args,
          s(:restarg, :index)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :index), :size), :==,
            s(:int, 0)),
          s(:send, nil, :list,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "yview"))),
          s(:begin,
            s(:send, nil, :tk_send_without_enc,
              s(:str, "yview"),
              s(:splat,
                s(:lvar, :index))),
            s(:self)))),
      s(:def, :yview_moveto,
        s(:args,
          s(:restarg, :index)),
        s(:send, nil, :yview,
          s(:str, "moveto"),
          s(:splat,
            s(:lvar, :index)))),
      s(:def, :yview_scroll,
        s(:args,
          s(:restarg, :index)),
        s(:send, nil, :yview,
          s(:str, "scroll"),
          s(:splat,
            s(:lvar, :index)))))))
