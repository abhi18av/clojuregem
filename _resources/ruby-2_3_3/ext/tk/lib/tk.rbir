s(:begin,
  s(:send, nil, :require,
    s(:str, "tcltklib")),
  s(:send, nil, :require,
    s(:str, "tkutil")),
  s(:send, nil, :require,
    s(:str, "tk/autoload")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:class,
    s(:const, nil, :TclTkIp), nil,
    s(:begin,
      s(:alias,
        s(:sym, :_eval_without_enc),
        s(:sym, :_eval)),
      s(:alias,
        s(:sym, :__eval__),
        s(:sym, :_eval)),
      s(:alias,
        s(:sym, :_invoke_without_enc),
        s(:sym, :_invoke)),
      s(:alias,
        s(:sym, :__invoke__),
        s(:sym, :_invoke)),
      s(:def, :_ip_id_,
        s(:args),
        s(:str, "")),
      s(:alias,
        s(:sym, :__initialize__),
        s(:sym, :initialize)),
      s(:send, nil, :private,
        s(:sym, :__initialize__)),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :__initialize__,
            s(:splat,
              s(:lvar, :args))),
          s(:or_asgn,
            s(:ivasgn, :@force_default_encoding),
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:array,
                s(:false)))),
          s(:or_asgn,
            s(:ivasgn, :@encoding),
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:array,
                s(:nil)))),
          s(:defs,
            s(:ivar, :@encoding), :to_s,
            s(:args),
            s(:send,
              s(:self), :join,
              s(:nil))))))),
  s(:module,
    s(:const, nil, :TkComm),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkUtil)),
      s(:send, nil, :extend,
        s(:const, nil, :TkUtil)),
      s(:casgn, nil, :WidgetClassNames,
        s(:send,
          s(:const, nil, :TkUtil), :untrust,
          s(:hash))),
      s(:casgn, nil, :TkExtlibAutoloadModule,
        s(:send,
          s(:const, nil, :TkUtil), :untrust,
          s(:array))),
      s(:casgn, nil, :Tk_IDs,
        s(:array,
          s(:send,
            s(:const, nil, :TkUtil), :untrust,
            s(:str, "00000")),
          s(:send,
            s(:const, nil, :TkUtil), :untrust,
            s(:str, "00000")))),
      s(:block,
        s(:send,
          s(:const, nil, :Tk_IDs), :instance_eval),
        s(:args),
        s(:begin,
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:def, :mutex,
            s(:args),
            s(:ivar, :@mutex)),
          s(:send, nil, :freeze))),
      s(:casgn, nil, :Tk_CMDTBL,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:defs,
        s(:const, nil, :Tk_CMDTBL), :method_missing,
        s(:args,
          s(:arg, :id),
          s(:restarg, :args)),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :__send__,
          s(:lvar, :id),
          s(:splat,
            s(:lvar, :args)))),
      s(:send,
        s(:const, nil, :Tk_CMDTBL), :freeze),
      s(:casgn, nil, :Tk_WINDOWS,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:defs,
        s(:const, nil, :Tk_WINDOWS), :method_missing,
        s(:args,
          s(:arg, :id),
          s(:restarg, :args)),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :tk_windows), :__send__,
          s(:lvar, :id),
          s(:splat,
            s(:lvar, :args)))),
      s(:send,
        s(:const, nil, :Tk_WINDOWS), :freeze),
      s(:block,
        s(:send,
          s(:self), :instance_eval),
        s(:args),
        s(:ivasgn, :@cmdtbl,
          s(:send,
            s(:const, nil, :TkUtil), :untrust,
            s(:array)))),
      s(:if,
        s(:send, nil, :const_defined?,
          s(:sym, :GET_CONFIGINFO_AS_ARRAY)), nil,
        s(:casgn, nil, :GET_CONFIGINFO_AS_ARRAY,
          s(:true))),
      s(:if,
        s(:send, nil, :const_defined?,
          s(:sym, :GET_CONFIGINFOwoRES_AS_ARRAY)), nil,
        s(:casgn, nil, :GET_CONFIGINFOwoRES_AS_ARRAY,
          s(:true))),
      s(:def, :error_at,
        s(:args),
        s(:begin,
          s(:lvasgn, :frames,
            s(:send, nil, :caller)),
          s(:block,
            s(:send,
              s(:lvar, :frames), :delete_if),
            s(:args,
              s(:arg, :c)),
            s(:send,
              s(:lvar, :c), :=~,
              s(:regexp,
                s(:str, "/tk(|core|thcore|canvas|text|entry|scrollbox)\\.rb:\\d+"),
                s(:regopt)))),
          s(:lvar, :frames))),
      s(:send, nil, :private,
        s(:sym, :error_at)),
      s(:def, :_genobj_for_tkwidget,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :path), :==,
              s(:str, ".")),
            s(:return,
              s(:send,
                s(:const, nil, :TkRoot), :new)), nil),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :tk_class,
                s(:send,
                  s(:const, nil, :Tk), :ip_invoke_without_enc,
                  s(:str, "winfo"),
                  s(:str, "class"),
                  s(:lvar, :path))),
              s(:resbody, nil, nil,
                s(:return,
                  s(:lvar, :path))), nil)),
          s(:if,
            s(:lvasgn, :ruby_class,
              s(:send,
                s(:const, nil, :WidgetClassNames), :[],
                s(:lvar, :tk_class))),
            s(:begin,
              s(:lvasgn, :ruby_class_name,
                s(:send,
                  s(:lvar, :ruby_class), :name)),
              s(:lvasgn, :gen_class_name,
                s(:lvar, :ruby_class_name)),
              s(:lvasgn, :classname_def,
                s(:str, ""))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Tk), :const_defined?,
                  s(:lvar, :tk_class)),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Tk), :const_get,
                    s(:lvar, :tk_class)),
                  s(:lvasgn, :ruby_class,
                    s(:send,
                      s(:const, nil, :WidgetClassNames), :[],
                      s(:lvar, :tk_class)))), nil),
              s(:if,
                s(:lvar, :ruby_class), nil,
                s(:begin,
                  s(:lvasgn, :mods,
                    s(:block,
                      s(:send,
                        s(:const, nil, :TkExtlibAutoloadModule), :find_all),
                      s(:args,
                        s(:arg, :m)),
                      s(:send,
                        s(:lvar, :m), :const_defined?,
                        s(:lvar, :tk_class)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :mods), :each),
                    s(:args,
                      s(:arg, :mod)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:begin,
                          s(:send,
                            s(:lvar, :mod), :const_get,
                            s(:lvar, :tk_class)),
                          s(:if,
                            s(:begin,
                              s(:lvasgn, :ruby_class,
                                s(:send,
                                  s(:const, nil, :WidgetClassNames), :[],
                                  s(:lvar, :tk_class)))),
                            s(:break), nil)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :LoadError)), nil, nil), nil))))),
              s(:if,
                s(:lvar, :ruby_class), nil,
                s(:begin,
                  s(:lvasgn, :std_class,
                    s(:send,
                      s(:str, "Tk"), :<<,
                      s(:lvar, :tk_class))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :Object), :const_defined?,
                      s(:lvar, :std_class)),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Object), :const_get,
                        s(:lvar, :std_class)),
                      s(:lvasgn, :ruby_class,
                        s(:send,
                          s(:const, nil, :WidgetClassNames), :[],
                          s(:lvar, :tk_class)))), nil))),
              s(:if,
                s(:lvar, :ruby_class), nil,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:const, nil, :Tk), :const_defined?,
                      s(:str, "TOPLEVEL_ALIASES")),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :const_defined?,
                      s(:lvar, :std_class))),
                  s(:begin,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Tk), :TOPLEVEL_ALIASES), :const_get,
                      s(:lvar, :std_class)),
                    s(:lvasgn, :ruby_class,
                      s(:send,
                        s(:const, nil, :WidgetClassNames), :[],
                        s(:lvar, :tk_class)))), nil)),
              s(:if,
                s(:lvar, :ruby_class),
                s(:begin,
                  s(:lvasgn, :ruby_class_name,
                    s(:send,
                      s(:lvar, :ruby_class), :name)),
                  s(:lvasgn, :gen_class_name,
                    s(:lvar, :ruby_class_name)),
                  s(:lvasgn, :classname_def,
                    s(:str, ""))),
                s(:begin,
                  s(:lvasgn, :ruby_class_name,
                    s(:str, "TkWindow")),
                  s(:lvasgn, :gen_class_name,
                    s(:send,
                      s(:str, "TkWidget_"), :+,
                      s(:lvar, :tk_class))),
                  s(:lvasgn, :classname_def,
                    s(:dstr,
                      s(:str, "WidgetClassName = '"),
                      s(:begin,
                        s(:lvar, :tk_class)),
                      s(:str, "'.freeze"))))))),
          s(:lvasgn, :base,
            s(:const, nil, :Object)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :gen_class_name), :split,
                s(:str, "::")), :each),
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :klass), :==,
                  s(:str, "")),
                s(:next), nil),
              s(:if,
                s(:send,
                  s(:lvar, :base), :const_defined?,
                  s(:lvar, :klass)),
                s(:lvasgn, :base,
                  s(:send,
                    s(:lvar, :base), :class_eval,
                    s(:lvar, :klass))),
                s(:lvasgn, :base,
                  s(:send,
                    s(:lvar, :base), :class_eval,
                    s(:dstr,
                      s(:str, "class "),
                      s(:begin,
                        s(:lvar, :klass)),
                      s(:str, "<"),
                      s(:begin,
                        s(:lvar, :ruby_class_name)),
                      s(:str, "\n"),
                      s(:str, "                                  "),
                      s(:begin,
                        s(:lvar, :classname_def)),
                      s(:str, "\n"),
                      s(:str, "                                end\n"),
                      s(:str, "                                "),
                      s(:begin,
                        s(:lvar, :klass)))))))),
          s(:send,
            s(:lvar, :base), :class_eval,
            s(:dstr,
              s(:begin,
                s(:lvar, :gen_class_name)),
              s(:str, ".new('widgetname'=>'"),
              s(:begin,
                s(:lvar, :path)),
              s(:str, "',\n"),
              s(:str, "                                           'without_creating'=>true)"))))),
      s(:send, nil, :private,
        s(:sym, :_genobj_for_tkwidget)),
      s(:send, nil, :module_function,
        s(:sym, :_genobj_for_tkwidget)),
      s(:def, :_at,
        s(:args,
          s(:arg, :x),
          s(:optarg, :y,
            s(:nil))),
        s(:if,
          s(:lvar, :y),
          s(:dstr,
            s(:str, "@"),
            s(:begin,
              s(:send, nil, :Integer,
                s(:lvar, :x))),
            s(:str, ","),
            s(:begin,
              s(:send, nil, :Integer,
                s(:lvar, :y)))),
          s(:dstr,
            s(:str, "@"),
            s(:begin,
              s(:send, nil, :Integer,
                s(:lvar, :x)))))),
      s(:send, nil, :module_function,
        s(:sym, :_at)),
      s(:def, :tk_tcl2ruby,
        s(:args,
          s(:arg, :val),
          s(:optarg, :enc_mode,
            s(:false)),
          s(:optarg, :listobj,
            s(:true))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :val), :=~,
              s(:regexp,
                s(:str, "rb_out\\S*(?:\\s+(::\\S*|[{](::.*)[}]|[\"](::.*)[\"]))? (c(_\\d+_)?(\\d+))"),
                s(:regopt))),
            s(:return,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :[],
                s(:nth_ref, 4))), nil),
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:regexp,
                s(:str, "\\A@font\\S+\\z"),
                s(:regopt)),
              s(:send,
                s(:const, nil, :TkFont), :get_obj,
                s(:lvar, :val))),
            s(:when,
              s(:regexp,
                s(:str, "\\A-?\\d+\\z"),
                s(:regopt)),
              s(:send,
                s(:lvar, :val), :to_i)),
            s(:when,
              s(:regexp,
                s(:str, "\\A\\.\\S*\\z"),
                s(:regopt)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :tk_windows), :[],
                  s(:lvar, :val)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :tk_windows), :[],
                  s(:lvar, :val)),
                s(:send, nil, :_genobj_for_tkwidget,
                  s(:lvar, :val)))),
            s(:when,
              s(:regexp,
                s(:str, "\\Ai(_\\d+_)?\\d+\\z"),
                s(:regopt)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkImage), :Tk_IMGTBL), :mutex), :synchronize),
                s(:args),
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                    s(:lvar, :val)),
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                    s(:lvar, :val)),
                  s(:lvar, :val)))),
            s(:when,
              s(:regexp,
                s(:str, "\\A-?\\d+\\.?\\d*(e[-+]?\\d+)?\\z"),
                s(:regopt)),
              s(:send,
                s(:lvar, :val), :to_f)),
            s(:when,
              s(:regexp,
                s(:str, "\\\\ "),
                s(:regopt)),
              s(:send,
                s(:lvar, :val), :gsub,
                s(:regexp,
                  s(:str, "\\\\ "),
                  s(:regopt)),
                s(:str, " "))),
            s(:when,
              s(:regexp,
                s(:str, "[^\\\\] "),
                s(:regopt)),
              s(:if,
                s(:lvar, :listobj),
                s(:begin,
                  s(:if,
                    s(:lvar, :enc_mode), nil,
                    s(:lvasgn, :val,
                      s(:send, nil, :_toUTF8,
                        s(:lvar, :val)))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :tk_split_escstr,
                        s(:lvar, :val),
                        s(:false),
                        s(:false)), :collect),
                    s(:args,
                      s(:arg, :elt)),
                    s(:send, nil, :tk_tcl2ruby,
                      s(:lvar, :elt),
                      s(:true),
                      s(:lvar, :listobj)))),
                s(:if,
                  s(:lvar, :enc_mode),
                  s(:send, nil, :_fromUTF8,
                    s(:lvar, :val)),
                  s(:lvar, :val)))),
            s(:if,
              s(:lvar, :enc_mode),
              s(:send, nil, :_fromUTF8,
                s(:lvar, :val)),
              s(:lvar, :val))))),
      s(:send, nil, :private,
        s(:sym, :tk_tcl2ruby)),
      s(:send, nil, :module_function,
        s(:sym, :tk_tcl2ruby)),
      s(:if,
        s(:send, nil, :const_defined?,
          s(:sym, :USE_TCLs_LIST_FUNCTIONS)), nil,
        s(:casgn, nil, :USE_TCLs_LIST_FUNCTIONS,
          s(:true))),
      s(:if,
        s(:const, nil, :USE_TCLs_LIST_FUNCTIONS),
        s(:begin,
          s(:def, :tk_split_escstr,
            s(:args,
              s(:arg, :str),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :src_enc),
                s(:lvasgn, :str,
                  s(:send, nil, :_toUTF8,
                    s(:lvar, :str))), nil),
              s(:if,
                s(:lvar, :dst_enc),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                      s(:lvar, :str)), :map!),
                  s(:args,
                    s(:arg, :s)),
                  s(:send, nil, :_fromUTF8,
                    s(:lvar, :s))),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                  s(:lvar, :str))))),
          s(:def, :tk_split_sublist,
            s(:args,
              s(:arg, :str),
              s(:optarg, :depth,
                s(:int, -1)),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :src_enc),
                s(:lvasgn, :str,
                  s(:send, nil, :_toUTF8,
                    s(:lvar, :str))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :depth), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :str), :==,
                      s(:str, "")),
                    s(:return,
                      s(:str, "")), nil),
                  s(:lvasgn, :list,
                    s(:array,
                      s(:lvar, :str)))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :str), :==,
                      s(:str, "")),
                    s(:return,
                      s(:array)), nil),
                  s(:lvasgn, :list,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                      s(:lvar, :str))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :list), :size), :==,
                  s(:int, 1)),
                s(:send, nil, :tk_tcl2ruby,
                  s(:send,
                    s(:lvar, :list), :[],
                    s(:int, 0)),
                  s(:lvar, :dst_enc),
                  s(:false)),
                s(:block,
                  s(:send,
                    s(:lvar, :list), :collect),
                  s(:args,
                    s(:arg, :token)),
                  s(:send, nil, :tk_split_sublist,
                    s(:lvar, :token),
                    s(:send,
                      s(:lvar, :depth), :-,
                      s(:int, 1)),
                    s(:false),
                    s(:lvar, :dst_enc)))))),
          s(:def, :tk_split_list,
            s(:args,
              s(:arg, :str),
              s(:optarg, :depth,
                s(:int, 0)),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :str), :==,
                  s(:str, "")),
                s(:return,
                  s(:array)), nil),
              s(:if,
                s(:lvar, :src_enc),
                s(:lvasgn, :str,
                  s(:send, nil, :_toUTF8,
                    s(:lvar, :str))), nil),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                    s(:lvar, :str)), :map!),
                s(:args,
                  s(:arg, :token)),
                s(:send, nil, :tk_split_sublist,
                  s(:lvar, :token),
                  s(:send,
                    s(:lvar, :depth), :-,
                    s(:int, 1)),
                  s(:false),
                  s(:lvar, :dst_enc))))),
          s(:def, :tk_split_simplelist,
            s(:args,
              s(:arg, :str),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :src_enc),
                s(:lvasgn, :str,
                  s(:send, nil, :_toUTF8,
                    s(:lvar, :str))), nil),
              s(:if,
                s(:lvar, :dst_enc),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                      s(:lvar, :str)), :map!),
                  s(:args,
                    s(:arg, :s)),
                  s(:send, nil, :_fromUTF8,
                    s(:lvar, :s))),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_split_tklist,
                  s(:lvar, :str))))),
          s(:def, :array2tk_list,
            s(:args,
              s(:arg, :ary),
              s(:optarg, :enc,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :size), :==,
                  s(:int, 0)),
                s(:return,
                  s(:str, "")), nil),
              s(:lvasgn, :sys_enc,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :encoding)),
              s(:if,
                s(:lvar, :sys_enc), nil,
                s(:lvasgn, :sys_enc,
                  s(:send,
                    s(:const, nil, :TclTkLib), :encoding_system))),
              s(:lvasgn, :dst_enc,
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :enc), :==,
                      s(:nil))),
                  s(:lvar, :sys_enc),
                  s(:lvar, :enc))),
              s(:lvasgn, :dst,
                s(:block,
                  s(:send,
                    s(:lvar, :ary), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :e), :kind_of?,
                        s(:const, nil, :Array)),
                      s(:lvasgn, :s,
                        s(:send, nil, :array2tk_list,
                          s(:lvar, :e),
                          s(:lvar, :enc))),
                      s(:if,
                        s(:send,
                          s(:lvar, :e), :kind_of?,
                          s(:const, nil, :Hash)),
                        s(:begin,
                          s(:lvasgn, :tmp_ary,
                            s(:array)),
                          s(:block,
                            s(:send,
                              s(:lvar, :e), :each),
                            s(:args,
                              s(:arg, :k),
                              s(:arg, :v)),
                            s(:send,
                              s(:send,
                                s(:lvar, :tmp_ary), :<<,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:send, nil, :_get_eval_string,
                                      s(:lvar, :k))))), :<<,
                              s(:lvar, :v))),
                          s(:lvasgn, :s,
                            s(:send, nil, :array2tk_list,
                              s(:lvar, :tmp_ary),
                              s(:lvar, :enc)))),
                        s(:lvasgn, :s,
                          s(:send, nil, :_get_eval_string,
                            s(:lvar, :e),
                            s(:lvar, :enc))))),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :dst_enc), :!=,
                          s(:true)),
                        s(:send,
                          s(:lvar, :dst_enc), :!=,
                          s(:false))),
                      s(:begin,
                        s(:if,
                          s(:begin,
                            s(:lvasgn, :s_enc,
                              s(:send,
                                s(:lvar, :s), :instance_variable_get,
                                s(:sym, :@encoding)))),
                          s(:lvasgn, :s_enc,
                            s(:send,
                              s(:lvar, :s_enc), :to_s)),
                          s(:if,
                            s(:const,
                              s(:const, nil, :TkCore), :WITH_ENCODING),
                            s(:lvasgn, :s_enc,
                              s(:send,
                                s(:send,
                                  s(:lvar, :s), :encoding), :name)),
                            s(:lvasgn, :s_enc,
                              s(:lvar, :sys_enc)))),
                        s(:if,
                          s(:send,
                            s(:lvar, :s_enc), :!=,
                            s(:lvar, :dst_enc)),
                          s(:lvasgn, :dst_enc,
                            s(:true)), nil)), nil),
                    s(:lvar, :s)))),
              s(:if,
                s(:and,
                  s(:lvar, :sys_enc),
                  s(:lvar, :dst_enc)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :dst), :map!),
                    s(:args,
                      s(:arg, :s)),
                    s(:send, nil, :_toUTF8,
                      s(:lvar, :s))),
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
                      s(:splat,
                        s(:lvar, :dst)))),
                  s(:if,
                    s(:const,
                      s(:const, nil, :TkCore), :WITH_ENCODING),
                    s(:if,
                      s(:send,
                        s(:lvar, :dst_enc), :kind_of?,
                        s(:const, nil, :String)),
                      s(:begin,
                        s(:lvasgn, :ret,
                          s(:send, nil, :_fromUTF8,
                            s(:lvar, :ret),
                            s(:lvar, :dst_enc))),
                        s(:send,
                          s(:lvar, :ret), :force_encoding,
                          s(:lvar, :dst_enc))),
                      s(:send,
                        s(:lvar, :ret), :force_encoding,
                        s(:str, "utf-8"))),
                    s(:if,
                      s(:send,
                        s(:lvar, :dst_enc), :kind_of?,
                        s(:const, nil, :String)),
                      s(:begin,
                        s(:lvasgn, :ret,
                          s(:send, nil, :_fromUTF8,
                            s(:lvar, :ret),
                            s(:lvar, :dst_enc))),
                        s(:send,
                          s(:lvar, :ret), :instance_variable_set,
                          s(:sym, :@encoding),
                          s(:lvar, :dst_enc))),
                      s(:send,
                        s(:lvar, :ret), :instance_variable_set,
                        s(:sym, :@encoding),
                        s(:str, "utf-8")))),
                  s(:lvar, :ret)),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :_merge_tklist,
                  s(:splat,
                    s(:lvar, :dst))))))),
        s(:begin,
          s(:def, :tk_split_escstr,
            s(:args,
              s(:arg, :str),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :str), :==,
                  s(:str, "")),
                s(:return,
                  s(:array)), nil),
              s(:lvasgn, :list,
                s(:array)),
              s(:lvasgn, :token,
                s(:nil)),
              s(:lvasgn, :escape,
                s(:false)),
              s(:lvasgn, :brace,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :split,
                    s(:str, "")), :each),
                s(:args,
                  s(:arg, :c)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :c), :==,
                        s(:str, "{")),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:op_asgn,
                      s(:lvasgn, :brace), :+,
                      s(:int, 1)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :c), :==,
                        s(:str, "}")),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:op_asgn,
                      s(:lvasgn, :brace), :-,
                      s(:int, 1)), nil),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:lvar, :brace), :==,
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :c), :==,
                          s(:str, " "))),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :token),
                        s(:send,
                          s(:lvar, :list), :<<,
                          s(:send,
                            s(:lvar, :token), :gsub,
                            s(:regexp,
                              s(:str, "^\\{(.*)\\}$"),
                              s(:regopt)),
                            s(:str, "\\1"))), nil),
                      s(:lvasgn, :token,
                        s(:nil))),
                    s(:lvasgn, :token,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:lvar, :token),
                            s(:str, ""))), :<<,
                        s(:lvar, :c)))),
                  s(:lvasgn, :escape,
                    s(:begin,
                      s(:and,
                        s(:send,
                          s(:lvar, :c), :==,
                          s(:str, "\\")),
                        s(:send,
                          s(:lvar, :escape), :!)))))),
              s(:if,
                s(:lvar, :token),
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send,
                    s(:lvar, :token), :gsub,
                    s(:regexp,
                      s(:str, "^\\{(.*)\\}$"),
                      s(:regopt)),
                    s(:str, "\\1"))), nil),
              s(:lvar, :list))),
          s(:def, :tk_split_sublist,
            s(:args,
              s(:arg, :str),
              s(:optarg, :depth,
                s(:int, -1)),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :depth), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :str), :==,
                      s(:str, "")),
                    s(:return,
                      s(:str, "")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :str), :=~,
                      s(:regexp,
                        s(:str, "^\\{.*\\}$"),
                        s(:regopt))),
                    s(:lvasgn, :str,
                      s(:send,
                        s(:lvar, :str), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -2)))), nil),
                  s(:lvasgn, :list,
                    s(:array,
                      s(:lvar, :str)))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :str), :==,
                      s(:array)),
                    s(:return,
                      s(:array)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :str), :=~,
                      s(:regexp,
                        s(:str, "^\\{.*\\}$"),
                        s(:regopt))),
                    s(:return,
                      s(:array,
                        s(:send, nil, :tk_split_sublist,
                          s(:send,
                            s(:lvar, :str), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -2))),
                          s(:send,
                            s(:lvar, :depth), :-,
                            s(:int, 1))))), nil),
                  s(:lvasgn, :list,
                    s(:send, nil, :tk_split_escstr,
                      s(:lvar, :str))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :list), :size), :==,
                  s(:int, 1)),
                s(:send, nil, :tk_tcl2ruby,
                  s(:send,
                    s(:lvar, :list), :[],
                    s(:int, 0)),
                  s(:nil),
                  s(:false)),
                s(:block,
                  s(:send,
                    s(:lvar, :list), :collect),
                  s(:args,
                    s(:arg, :token)),
                  s(:send, nil, :tk_split_sublist,
                    s(:lvar, :token),
                    s(:send,
                      s(:lvar, :depth), :-,
                      s(:int, 1))))))),
          s(:def, :tk_split_list,
            s(:args,
              s(:arg, :str),
              s(:optarg, :depth,
                s(:int, 0)),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :str), :==,
                  s(:str, "")),
                s(:return,
                  s(:array)), nil),
              s(:block,
                s(:send,
                  s(:send, nil, :tk_split_escstr,
                    s(:lvar, :str)), :collect),
                s(:args,
                  s(:arg, :token)),
                s(:send, nil, :tk_split_sublist,
                  s(:lvar, :token),
                  s(:send,
                    s(:lvar, :depth), :-,
                    s(:int, 1)))))),
          s(:def, :tk_split_simplelist,
            s(:args,
              s(:arg, :str),
              s(:optarg, :src_enc,
                s(:true)),
              s(:optarg, :dst_enc,
                s(:true))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :str), :==,
                  s(:str, "")),
                s(:return,
                  s(:array)), nil),
              s(:lvasgn, :list,
                s(:array)),
              s(:lvasgn, :token,
                s(:nil)),
              s(:lvasgn, :escape,
                s(:false)),
              s(:lvasgn, :brace,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :split,
                    s(:str, "")), :each),
                s(:args,
                  s(:arg, :c)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :c), :==,
                        s(:str, "\\")),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:begin,
                      s(:lvasgn, :escape,
                        s(:true)),
                      s(:if,
                        s(:send,
                          s(:lvar, :brace), :>,
                          s(:int, 0)),
                        s(:lvasgn, :token,
                          s(:send,
                            s(:begin,
                              s(:or,
                                s(:lvar, :token),
                                s(:str, ""))), :<<,
                            s(:lvar, :c))), nil),
                      s(:next)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :c), :==,
                        s(:str, "{")),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:op_asgn,
                      s(:lvasgn, :brace), :+,
                      s(:int, 1)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :c), :==,
                        s(:str, "}")),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:op_asgn,
                      s(:lvasgn, :brace), :-,
                      s(:int, 1)), nil),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:lvar, :brace), :==,
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :c), :==,
                          s(:str, " "))),
                      s(:send,
                        s(:lvar, :escape), :!)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :token),
                        s(:send,
                          s(:lvar, :list), :<<,
                          s(:send,
                            s(:lvar, :token), :gsub,
                            s(:regexp,
                              s(:str, "^\\{(.*)\\}$"),
                              s(:regopt)),
                            s(:str, "\\1"))), nil),
                      s(:lvasgn, :token,
                        s(:nil))),
                    s(:lvasgn, :token,
                      s(:send,
                        s(:begin,
                          s(:or,
                            s(:lvar, :token),
                            s(:str, ""))), :<<,
                        s(:lvar, :c)))),
                  s(:lvasgn, :escape,
                    s(:false)))),
              s(:if,
                s(:lvar, :token),
                s(:send,
                  s(:lvar, :list), :<<,
                  s(:send,
                    s(:lvar, :token), :gsub,
                    s(:regexp,
                      s(:str, "^\\{(.*)\\}$"),
                      s(:regopt)),
                    s(:str, "\\1"))), nil),
              s(:lvar, :list))),
          s(:def, :array2tk_list,
            s(:args,
              s(:arg, :ary),
              s(:optarg, :enc,
                s(:nil))),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :ary), :collect),
                s(:args,
                  s(:arg, :e)),
                s(:if,
                  s(:send,
                    s(:lvar, :e), :kind_of?,
                    s(:const, nil, :Array)),
                  s(:dstr,
                    s(:str, "{"),
                    s(:begin,
                      s(:send, nil, :array2tk_list,
                        s(:lvar, :e),
                        s(:lvar, :enc))),
                    s(:str, "}")),
                  s(:if,
                    s(:send,
                      s(:lvar, :e), :kind_of?,
                      s(:const, nil, :Hash)),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:lvar, :e), :each),
                        s(:args,
                          s(:arg, :k),
                          s(:arg, :v)),
                        s(:send,
                          s(:send,
                            s(:send, nil, :tmp_ary), :<<,
                            s(:dstr,
                              s(:str, "-"),
                              s(:begin,
                                s(:send, nil, :_get_eval_string,
                                  s(:lvar, :k))))), :<<,
                          s(:lvar, :v))),
                      s(:send, nil, :array2tk_list,
                        s(:send, nil, :tmp_ary),
                        s(:lvar, :enc))),
                    s(:begin,
                      s(:lvasgn, :s,
                        s(:send, nil, :_get_eval_string,
                          s(:lvar, :e),
                          s(:lvar, :enc))),
                      s(:if,
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :s), :index,
                              s(:regexp,
                                s(:str, "\\s"),
                                s(:regopt))),
                            s(:send,
                              s(:send,
                                s(:lvar, :s), :size), :==,
                              s(:int, 0)))),
                        s(:dstr,
                          s(:str, "{"),
                          s(:begin,
                            s(:lvar, :s)),
                          s(:str, "}")),
                        s(:lvar, :s)))))), :join,
              s(:str, " "))))),
      s(:send, nil, :private,
        s(:sym, :tk_split_escstr),
        s(:sym, :tk_split_sublist)),
      s(:send, nil, :private,
        s(:sym, :tk_split_list),
        s(:sym, :tk_split_simplelist)),
      s(:send, nil, :private,
        s(:sym, :array2tk_list)),
      s(:send, nil, :module_function,
        s(:sym, :tk_split_escstr),
        s(:sym, :tk_split_sublist)),
      s(:send, nil, :module_function,
        s(:sym, :tk_split_list),
        s(:sym, :tk_split_simplelist)),
      s(:send, nil, :module_function,
        s(:sym, :array2tk_list)),
      s(:send, nil, :private_class_method,
        s(:sym, :tk_split_escstr),
        s(:sym, :tk_split_sublist)),
      s(:send, nil, :private_class_method,
        s(:sym, :tk_split_list),
        s(:sym, :tk_split_simplelist)),
      s(:def, :list,
        s(:args,
          s(:arg, :val),
          s(:optarg, :depth,
            s(:int, 0)),
          s(:optarg, :enc,
            s(:true))),
        s(:send, nil, :tk_split_list,
          s(:lvar, :val),
          s(:lvar, :depth),
          s(:lvar, :enc),
          s(:lvar, :enc))),
      s(:def, :simplelist,
        s(:args,
          s(:arg, :val),
          s(:optarg, :src_enc,
            s(:true)),
          s(:optarg, :dst_enc,
            s(:true))),
        s(:send, nil, :tk_split_simplelist,
          s(:lvar, :val),
          s(:lvar, :src_enc),
          s(:lvar, :dst_enc))),
      s(:def, :window,
        s(:args,
          s(:arg, :val)),
        s(:if,
          s(:send,
            s(:lvar, :val), :=~,
            s(:regexp,
              s(:str, "^\\."),
              s(:regopt))),
          s(:if,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :tk_windows), :[],
              s(:lvar, :val)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :tk_windows), :[],
              s(:lvar, :val)),
            s(:send, nil, :_genobj_for_tkwidget,
              s(:lvar, :val))),
          s(:nil))),
      s(:def, :image_obj,
        s(:args,
          s(:arg, :val)),
        s(:if,
          s(:send,
            s(:lvar, :val), :=~,
            s(:regexp,
              s(:str, "^i(_\\d+_)?\\d+$"),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkImage), :Tk_IMGTBL), :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                s(:lvar, :val)),
              s(:send,
                s(:const,
                  s(:const, nil, :TkImage), :Tk_IMGTBL), :[],
                s(:lvar, :val)),
              s(:lvar, :val))),
          s(:lvar, :val))),
      s(:def, :procedure,
        s(:args,
          s(:arg, :val)),
        s(:if,
          s(:send,
            s(:lvar, :val), :=~,
            s(:regexp,
              s(:str, "rb_out\\S*(?:\\s+(::\\S*|[{](::.*)[}]|[\"](::.*)[\"]))? (c(_\\d+_)?(\\d+))"),
              s(:regopt))),
          s(:return,
            s(:send,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :[],
                s(:nth_ref, 4)), :cmd)),
          s(:lvar, :val))),
      s(:send, nil, :private,
        s(:sym, :bool),
        s(:sym, :number),
        s(:sym, :num_or_str),
        s(:sym, :num_or_nil),
        s(:sym, :string)),
      s(:send, nil, :private,
        s(:sym, :list),
        s(:sym, :simplelist),
        s(:sym, :window),
        s(:sym, :image_obj),
        s(:sym, :procedure)),
      s(:send, nil, :module_function,
        s(:sym, :bool),
        s(:sym, :number),
        s(:sym, :num_or_str),
        s(:sym, :num_or_nil),
        s(:sym, :string)),
      s(:send, nil, :module_function,
        s(:sym, :list),
        s(:sym, :simplelist),
        s(:sym, :window),
        s(:sym, :image_obj),
        s(:sym, :procedure)),
      s(:if,
        s(:send,
          s(:begin,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :RUBY_VERSION), :split,
                    s(:str, ".")), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :n), :to_i)), :<=>,
              s(:array,
                s(:int, 1),
                s(:int, 8),
                s(:int, 7)))), :<,
          s(:int, 0)),
        s(:def, :slice_ary,
          s(:args,
            s(:arg, :ary),
            s(:arg, :size)),
          s(:begin,
            s(:lvasgn, :sliced,
              s(:array)),
            s(:lvasgn, :wk_ary,
              s(:send,
                s(:lvar, :ary), :dup)),
            s(:until,
              s(:send,
                s(:send,
                  s(:lvar, :wk_ary), :size), :zero?),
              s(:begin,
                s(:lvasgn, :sub_ary,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:lvar, :size), :times),
                  s(:args),
                  s(:send,
                    s(:lvar, :sub_ary), :<<,
                    s(:send,
                      s(:lvar, :wk_ary), :shift))),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :sub_ary)), nil),
                s(:send,
                  s(:lvar, :sliced), :<<,
                  s(:lvar, :sub_ary)))),
            s(:if,
              s(:begin,
                s(:send, nil, :block_given?)),
              s(:lvar, :ary),
              s(:lvar, :sliced)))),
        s(:def, :slice_ary,
          s(:args,
            s(:arg, :ary),
            s(:arg, :size),
            s(:blockarg, :b)),
          s(:if,
            s(:lvar, :b),
            s(:send,
              s(:lvar, :ary), :each_slice,
              s(:lvar, :size),
              s(:block_pass,
                s(:lvar, :b))),
            s(:send,
              s(:send,
                s(:lvar, :ary), :each_slice,
                s(:lvar, :size)), :to_a)))),
      s(:send, nil, :private,
        s(:sym, :slice_ary)),
      s(:send, nil, :module_function,
        s(:sym, :slice_ary)),
      s(:def, :subst,
        s(:args,
          s(:arg, :str),
          s(:restarg, :opts)),
        s(:send, nil, :tk_call,
          s(:str, "subst"),
          s(:splat,
            s(:begin,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :collect),
                  s(:args,
                    s(:arg, :opt)),
                  s(:begin,
                    s(:lvasgn, :opt,
                      s(:send,
                        s(:lvar, :opt), :to_s)),
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :opt), :[],
                            s(:int, 0)), :==,
                          s(:str, "-"))),
                      s(:lvar, :opt),
                      s(:send,
                        s(:str, "-"), :<<,
                        s(:lvar, :opt))))), :<<,
                s(:lvar, :str)))))),
      s(:def, :_toUTF8,
        s(:args,
          s(:arg, :str),
          s(:optarg, :encoding,
            s(:nil))),
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :_toUTF8,
          s(:lvar, :str),
          s(:lvar, :encoding))),
      s(:def, :_fromUTF8,
        s(:args,
          s(:arg, :str),
          s(:optarg, :encoding,
            s(:nil))),
        s(:send,
          s(:const,
            s(:const, nil, :TkCore), :INTERP), :_fromUTF8,
          s(:lvar, :str),
          s(:lvar, :encoding))),
      s(:send, nil, :private,
        s(:sym, :_toUTF8),
        s(:sym, :_fromUTF8)),
      s(:send, nil, :module_function,
        s(:sym, :_toUTF8),
        s(:sym, :_fromUTF8)),
      s(:def, :_callback_entry_class?,
        s(:args,
          s(:arg, :cls)),
        s(:or,
          s(:or,
            s(:send,
              s(:lvar, :cls), :<=,
              s(:const, nil, :Proc)),
            s(:send,
              s(:lvar, :cls), :<=,
              s(:const, nil, :Method))),
          s(:send,
            s(:lvar, :cls), :<=,
            s(:const, nil, :TkCallbackEntry)))),
      s(:send, nil, :private,
        s(:sym, :_callback_entry_class?)),
      s(:send, nil, :module_function,
        s(:sym, :_callback_entry_class?)),
      s(:def, :_callback_entry?,
        s(:args,
          s(:arg, :obj)),
        s(:or,
          s(:or,
            s(:send,
              s(:lvar, :obj), :kind_of?,
              s(:const, nil, :Proc)),
            s(:send,
              s(:lvar, :obj), :kind_of?,
              s(:const, nil, :Method))),
          s(:send,
            s(:lvar, :obj), :kind_of?,
            s(:const, nil, :TkCallbackEntry)))),
      s(:send, nil, :private,
        s(:sym, :_callback_entry?)),
      s(:send, nil, :module_function,
        s(:sym, :_callback_entry?)),
      s(:def, :_curr_cmd_id,
        s(:args),
        s(:lvasgn, :id,
          s(:send,
            s(:send,
              s(:str, "c"), :+,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :_ip_id_)), :+,
            s(:send,
              s(:const,
                s(:const, nil, :TkComm), :Tk_IDs), :[],
              s(:int, 0))))),
      s(:def, :_next_cmd_id,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :TkComm), :Tk_IDs), :mutex), :synchronize),
          s(:args),
          s(:begin,
            s(:lvasgn, :id,
              s(:send, nil, :_curr_cmd_id)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkComm), :Tk_IDs), :[],
                s(:int, 0)), :succ!),
            s(:lvar, :id)))),
      s(:send, nil, :private,
        s(:sym, :_curr_cmd_id),
        s(:sym, :_next_cmd_id)),
      s(:send, nil, :module_function,
        s(:sym, :_curr_cmd_id),
        s(:sym, :_next_cmd_id)),
      s(:defs,
        s(:const, nil, :TkComm), :install_cmd,
        s(:args,
          s(:arg, :cmd),
          s(:optarg, :local_cmdtbl,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :cmd), :==,
              s(:str, "")),
            s(:return,
              s(:str, "")), nil),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :ns,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :_invoke_without_enc,
                    s(:str, "namespace"),
                    s(:str, "current"))),
                s(:if,
                  s(:send,
                    s(:lvar, :ns), :==,
                    s(:str, "::")),
                  s(:lvasgn, :ns,
                    s(:nil)), nil)),
              s(:resbody, nil, nil,
                s(:lvasgn, :ns,
                  s(:nil))), nil)),
          s(:lvasgn, :id,
            s(:send, nil, :_next_cmd_id)),
          s(:if,
            s(:send,
              s(:lvar, :cmd), :kind_of?,
              s(:const, nil, :TkCallbackEntry)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :[]=,
              s(:lvar, :id),
              s(:lvar, :cmd)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :[]=,
              s(:lvar, :id),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :get_cb_entry,
                s(:lvar, :cmd)))),
          s(:if,
            s(:defined?,
              s(:ivar, :@cmdtbl)), nil,
            s(:ivasgn, :@cmdtbl,
              s(:array))),
          s(:if,
            s(:send,
              s(:ivar, :@cmdtbl), :tainted?), nil,
            s(:send,
              s(:const, nil, :TkUtil), :untrust,
              s(:ivar, :@cmdtbl))),
          s(:send,
            s(:ivar, :@cmdtbl), :push,
            s(:lvar, :id)),
          s(:if,
            s(:and,
              s(:lvar, :local_cmdtbl),
              s(:send,
                s(:lvar, :local_cmdtbl), :kind_of?,
                s(:const, nil, :Array))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :local_cmdtbl), :<<,
                  s(:lvar, :id)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)), nil, nil), nil)), nil),
          s(:if,
            s(:lvar, :ns),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "rb_out"), :<<,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_ip_id_)), :<<,
                    s(:str, " ")), :<<,
                  s(:lvar, :ns)), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :id)),
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "rb_out"), :<<,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :_ip_id_)), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :id))))),
      s(:defs,
        s(:const, nil, :TkComm), :uninstall_cmd,
        s(:args,
          s(:arg, :id),
          s(:optarg, :local_cmdtbl,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :id), :=~,
              s(:regexp,
                s(:str, "rb_out\\S*(?:\\s+(::\\S*|[{](::.*)[}]|[\"](::.*)[\"]))? (c(_\\d+_)?(\\d+))"),
                s(:regopt))),
            s(:lvasgn, :id,
              s(:nth_ref, 4)), nil),
          s(:if,
            s(:and,
              s(:lvar, :local_cmdtbl),
              s(:send,
                s(:lvar, :local_cmdtbl), :kind_of?,
                s(:const, nil, :Array))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :local_cmdtbl), :delete,
                  s(:lvar, :id)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)), nil, nil), nil)), nil),
          s(:send,
            s(:ivar, :@cmdtbl), :delete,
            s(:lvar, :id)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :delete,
            s(:lvar, :id)))),
      s(:def, :install_cmd,
        s(:args,
          s(:arg, :cmd)),
        s(:send,
          s(:const, nil, :TkComm), :install_cmd,
          s(:lvar, :cmd),
          s(:ivar, :@cmdtbl))),
      s(:def, :uninstall_cmd,
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:const, nil, :TkComm), :uninstall_cmd,
          s(:lvar, :id),
          s(:ivar, :@cmdtbl))),
      s(:def, :install_win,
        s(:args,
          s(:arg, :ppath),
          s(:optarg, :name,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :name),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :name), :==,
                  s(:str, "")),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "invalid wiget-name '"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "'"))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :name), :[],
                    s(:int, 0)), :==,
                  s(:str, ".")),
                s(:begin,
                  s(:ivasgn, :@path,
                    s(:send,
                      s(:str, ""), :+,
                      s(:lvar, :name))),
                  s(:send,
                    s(:ivar, :@path), :freeze),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :tk_windows), :[]=,
                      s(:ivar, :@path),
                      s(:self)))), nil)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Tk_IDs), :mutex), :synchronize),
              s(:args),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:str, "w"), :+,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_ip_id_)), :+,
                    s(:send,
                      s(:const, nil, :Tk_IDs), :[],
                      s(:int, 1)))),
                s(:send,
                  s(:send,
                    s(:const, nil, :Tk_IDs), :[],
                    s(:int, 1)), :succ!)))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :ppath), :!),
              s(:send,
                s(:lvar, :ppath), :==,
                s(:str, "."))),
            s(:ivasgn, :@path,
              s(:send,
                s(:str, "."), :+,
                s(:lvar, :name))),
            s(:ivasgn, :@path,
              s(:send,
                s(:send,
                  s(:lvar, :ppath), :+,
                  s(:str, ".")), :+,
                s(:lvar, :name)))),
          s(:send,
            s(:ivar, :@path), :freeze),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :INTERP), :tk_windows), :[]=,
            s(:ivar, :@path),
            s(:self)))),
      s(:def, :uninstall_win,
        s(:args),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :tk_windows), :delete,
          s(:ivar, :@path))),
      s(:send, nil, :private,
        s(:sym, :install_win),
        s(:sym, :uninstall_win)),
      s(:def, :_epath,
        s(:args,
          s(:arg, :win)),
        s(:if,
          s(:send,
            s(:lvar, :win), :kind_of?,
            s(:const, nil, :TkObject)),
          s(:send,
            s(:lvar, :win), :epath),
          s(:if,
            s(:send,
              s(:lvar, :win), :respond_to?,
              s(:sym, :epath)),
            s(:send,
              s(:lvar, :win), :epath),
            s(:lvar, :win)))),
      s(:send, nil, :private,
        s(:sym, :_epath)))),
  s(:module,
    s(:const, nil, :TkComm),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkEvent)),
      s(:send, nil, :extend,
        s(:const, nil, :TkEvent)),
      s(:def, :tk_event_sequence,
        s(:args,
          s(:arg, :context)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :context), :kind_of?,
              s(:const, nil, :TkVirtualEvent)),
            s(:lvasgn, :context,
              s(:send,
                s(:lvar, :context), :path)), nil),
          s(:if,
            s(:send,
              s(:lvar, :context), :kind_of?,
              s(:const, nil, :Array)),
            s(:lvasgn, :context,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :context), :collect),
                  s(:args,
                    s(:arg, :ev)),
                  s(:if,
                    s(:send,
                      s(:lvar, :ev), :kind_of?,
                      s(:const, nil, :TkVirtualEvent)),
                    s(:send,
                      s(:lvar, :ev), :path),
                    s(:lvar, :ev))), :join,
                s(:str, "><"))), nil),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, ","),
                s(:regopt)),
              s(:lvar, :context)),
            s(:lvasgn, :context,
              s(:send,
                s(:send,
                  s(:lvar, :context), :split,
                  s(:regexp,
                    s(:str, "\\s*,\\s*"),
                    s(:regopt))), :join,
                s(:str, "><"))),
            s(:lvar, :context)))),
      s(:def, :_bind_core,
        s(:args,
          s(:arg, :mode),
          s(:arg, :what),
          s(:arg, :context),
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:lvar, :cmd),
            s(:lvasgn, :id,
              s(:send, nil, :install_bind,
                s(:lvar, :cmd),
                s(:splat,
                  s(:lvar, :args)))), nil),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :tk_call_without_enc,
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:lvar, :what), :+,
                      s(:array,
                        s(:dstr,
                          s(:str, "<"),
                          s(:begin,
                            s(:send, nil, :tk_event_sequence,
                              s(:lvar, :context))),
                          s(:str, ">")),
                        s(:send,
                          s(:lvar, :mode), :+,
                          s(:lvar, :id))))))),
              s(:resbody, nil, nil,
                s(:begin,
                  s(:if,
                    s(:lvar, :cmd),
                    s(:send, nil, :uninstall_cmd,
                      s(:lvar, :id)), nil),
                  s(:send, nil, :fail))), nil)))),
      s(:def, :_bind,
        s(:args,
          s(:arg, :what),
          s(:arg, :context),
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:send, nil, :_bind_core,
          s(:str, ""),
          s(:lvar, :what),
          s(:lvar, :context),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_bind_append,
        s(:args,
          s(:arg, :what),
          s(:arg, :context),
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:send, nil, :_bind_core,
          s(:str, "+"),
          s(:lvar, :what),
          s(:lvar, :context),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_bind_remove,
        s(:args,
          s(:arg, :what),
          s(:arg, :context)),
        s(:send, nil, :tk_call_without_enc,
          s(:splat,
            s(:begin,
              s(:send,
                s(:lvar, :what), :+,
                s(:array,
                  s(:dstr,
                    s(:str, "<"),
                    s(:begin,
                      s(:send, nil, :tk_event_sequence,
                        s(:lvar, :context))),
                    s(:str, ">")),
                  s(:str, ""))))))),
      s(:def, :_bindinfo,
        s(:args,
          s(:arg, :what),
          s(:optarg, :context,
            s(:nil))),
        s(:if,
          s(:lvar, :context),
          s(:begin,
            s(:if,
              s(:const,
                s(:const, nil, :TkCore), :WITH_RUBY_VM),
              s(:lvasgn, :enum_obj,
                s(:send,
                  s(:send, nil, :tk_call_without_enc,
                    s(:splat,
                      s(:send,
                        s(:lvar, :what), :+,
                        s(:array,
                          s(:dstr,
                            s(:str, "<"),
                            s(:begin,
                              s(:send, nil, :tk_event_sequence,
                                s(:lvar, :context))),
                            s(:str, ">")))))), :each_line)),
              s(:lvasgn, :enum_obj,
                s(:send, nil, :tk_call_without_enc,
                  s(:splat,
                    s(:send,
                      s(:lvar, :what), :+,
                      s(:array,
                        s(:dstr,
                          s(:str, "<"),
                          s(:begin,
                            s(:send, nil, :tk_event_sequence,
                              s(:lvar, :context))),
                          s(:str, ">")))))))),
            s(:block,
              s(:send,
                s(:lvar, :enum_obj), :collect),
              s(:args,
                s(:arg, :cmdline)),
              s(:if,
                s(:send,
                  s(:lvar, :cmdline), :=~,
                  s(:regexp,
                    s(:str, "rb_out\\S*(?:\\s+(::\\S*|[{](::.*)[}]|[\"](::.*)[\"]))? (c(_\\d+_)?(\\d+))"),
                    s(:regopt))),
                s(:array,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :[],
                    s(:nth_ref, 4)),
                  s(:nth_ref, 5)),
                s(:lvar, :cmdline)))),
          s(:block,
            s(:send,
              s(:send, nil, :tk_split_simplelist,
                s(:send, nil, :tk_call_without_enc,
                  s(:splat,
                    s(:lvar, :what)))), :collect!),
            s(:args,
              s(:arg, :seq)),
            s(:begin,
              s(:lvasgn, :l,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :seq), :scan,
                        s(:regexp,
                          s(:str, "<*[^<>]+>*"),
                          s(:regopt))), :collect!),
                    s(:args,
                      s(:arg, :subseq)),
                    s(:case,
                      s(:begin,
                        s(:lvar, :subseq)),
                      s(:when,
                        s(:regexp,
                          s(:str, "^<<[^<>]+>>$"),
                          s(:regopt)),
                        s(:send,
                          s(:const, nil, :TkVirtualEvent), :getobj,
                          s(:send,
                            s(:lvar, :subseq), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -2))))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^<[^<>]+>$"),
                          s(:regopt)),
                        s(:send,
                          s(:lvar, :subseq), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -2)))),
                      s(:send,
                        s(:lvar, :subseq), :split,
                        s(:str, "")))), :flatten)),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :l), :size), :==,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :l), :[],
                  s(:int, 0)),
                s(:lvar, :l)))))),
      s(:def, :_bind_core_for_event_class,
        s(:args,
          s(:arg, :klass),
          s(:arg, :mode),
          s(:arg, :what),
          s(:arg, :context),
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:lvar, :cmd),
            s(:lvasgn, :id,
              s(:send, nil, :install_bind_for_event_class,
                s(:lvar, :klass),
                s(:lvar, :cmd),
                s(:splat,
                  s(:lvar, :args)))), nil),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :tk_call_without_enc,
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:lvar, :what), :+,
                      s(:array,
                        s(:dstr,
                          s(:str, "<"),
                          s(:begin,
                            s(:send, nil, :tk_event_sequence,
                              s(:lvar, :context))),
                          s(:str, ">")),
                        s(:send,
                          s(:lvar, :mode), :+,
                          s(:lvar, :id))))))),
              s(:resbody, nil, nil,
                s(:begin,
                  s(:if,
                    s(:lvar, :cmd),
                    s(:send, nil, :uninstall_cmd,
                      s(:lvar, :id)), nil),
                  s(:send, nil, :fail))), nil)))),
      s(:def, :_bind_for_event_class,
        s(:args,
          s(:arg, :klass),
          s(:arg, :what),
          s(:arg, :context),
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:send, nil, :_bind_core_for_event_class,
          s(:lvar, :klass),
          s(:str, ""),
          s(:lvar, :what),
          s(:lvar, :context),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_bind_append_for_event_class,
        s(:args,
          s(:arg, :klass),
          s(:arg, :what),
          s(:arg, :context),
          s(:arg, :cmd),
          s(:restarg, :args)),
        s(:send, nil, :_bind_core_for_event_class,
          s(:lvar, :klass),
          s(:str, "+"),
          s(:lvar, :what),
          s(:lvar, :context),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_bind_remove_for_event_class,
        s(:args,
          s(:arg, :klass),
          s(:arg, :what),
          s(:arg, :context)),
        s(:send, nil, :_bind_remove,
          s(:lvar, :what),
          s(:lvar, :context))),
      s(:def, :_bindinfo_for_event_class,
        s(:args,
          s(:arg, :klass),
          s(:arg, :what),
          s(:optarg, :context,
            s(:nil))),
        s(:send, nil, :_bindinfo,
          s(:lvar, :what),
          s(:lvar, :context))),
      s(:send, nil, :private,
        s(:sym, :tk_event_sequence)),
      s(:send, nil, :private,
        s(:sym, :_bind_core),
        s(:sym, :_bind),
        s(:sym, :_bind_append),
        s(:sym, :_bind_remove),
        s(:sym, :_bindinfo)),
      s(:send, nil, :private,
        s(:sym, :_bind_core_for_event_class),
        s(:sym, :_bind_for_event_class),
        s(:sym, :_bind_append_for_event_class),
        s(:sym, :_bind_remove_for_event_class),
        s(:sym, :_bindinfo_for_event_class)),
      s(:def, :bind,
        s(:args,
          s(:arg, :tagOrClass),
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind,
            s(:array,
              s(:str, "bind"),
              s(:lvar, :tagOrClass)),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:lvar, :tagOrClass))),
      s(:def, :bind_append,
        s(:args,
          s(:arg, :tagOrClass),
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind_append,
            s(:array,
              s(:str, "bind"),
              s(:lvar, :tagOrClass)),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:lvar, :tagOrClass))),
      s(:def, :bind_remove,
        s(:args,
          s(:arg, :tagOrClass),
          s(:arg, :context)),
        s(:begin,
          s(:send, nil, :_bind_remove,
            s(:array,
              s(:str, "bind"),
              s(:lvar, :tagOrClass)),
            s(:lvar, :context)),
          s(:lvar, :tagOrClass))),
      s(:def, :bindinfo,
        s(:args,
          s(:arg, :tagOrClass),
          s(:optarg, :context,
            s(:nil))),
        s(:send, nil, :_bindinfo,
          s(:array,
            s(:str, "bind"),
            s(:lvar, :tagOrClass)),
          s(:lvar, :context))),
      s(:def, :bind_all,
        s(:args,
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind,
            s(:array,
              s(:str, "bind"),
              s(:str, "all")),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:const,
            s(:const, nil, :TkBindTag), :ALL))),
      s(:def, :bind_append_all,
        s(:args,
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send, nil, :_bind_append,
            s(:array,
              s(:str, "bind"),
              s(:str, "all")),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))),
          s(:const,
            s(:const, nil, :TkBindTag), :ALL))),
      s(:def, :bind_remove_all,
        s(:args,
          s(:arg, :context)),
        s(:begin,
          s(:send, nil, :_bind_remove,
            s(:array,
              s(:str, "bind"),
              s(:str, "all")),
            s(:lvar, :context)),
          s(:const,
            s(:const, nil, :TkBindTag), :ALL))),
      s(:def, :bindinfo_all,
        s(:args,
          s(:optarg, :context,
            s(:nil))),
        s(:send, nil, :_bindinfo,
          s(:array,
            s(:str, "bind"),
            s(:str, "all")),
          s(:lvar, :context))))),
  s(:module,
    s(:const, nil, :TkCore),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkComm)),
      s(:send, nil, :extend,
        s(:const, nil, :TkComm)),
      s(:casgn, nil, :WITH_RUBY_VM,
        s(:and,
          s(:send,
            s(:const, nil, :Object), :const_defined?,
            s(:sym, :RubyVM)),
          s(:send,
            s(:send,
              s(:const,
                s(:cbase), :RubyVM), :class), :==,
            s(:const, nil, :Class)))),
      s(:casgn, nil, :WITH_ENCODING,
        s(:and,
          s(:defined?,
            s(:send,
              s(:const,
                s(:cbase), :Encoding), :default_external)),
          s(:true))),
      s(:if,
        s(:send,
          s(:self), :const_defined?,
          s(:sym, :INTERP)), nil,
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :const_defined?,
              s(:sym, :IP_NAME)),
            s(:lvasgn, :name,
              s(:send,
                s(:const, nil, :IP_NAME), :to_s)),
            s(:lvasgn, :name,
              s(:gvar, :$0))),
          s(:if,
            s(:send,
              s(:self), :const_defined?,
              s(:sym, :IP_OPTS)),
            s(:if,
              s(:send,
                s(:const, nil, :IP_OPTS), :kind_of?,
                s(:const, nil, :Hash)),
              s(:lvasgn, :opts,
                s(:send,
                  s(:send, nil, :hash_kv,
                    s(:const, nil, :IP_OPTS)), :join,
                  s(:str, " "))),
              s(:lvasgn, :opts,
                s(:send,
                  s(:const, nil, :IP_OPTS), :to_s))),
            s(:lvasgn, :opts,
              s(:str, ""))),
          s(:if,
            s(:send,
              s(:self), :const_defined?,
              s(:sym, :RUN_EVENTLOOP_ON_MAIN_THREAD)), nil,
            s(:if,
              s(:const, nil, :WITH_RUBY_VM),
              s(:case,
                s(:const, nil, :RUBY_PLATFORM),
                s(:when,
                  s(:regexp,
                    s(:str, "cygwin"),
                    s(:regopt)),
                  s(:casgn, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD,
                    s(:true))),
                s(:when,
                  s(:regexp,
                    s(:str, "darwin"),
                    s(:regopt)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TclTkLib), :WINDOWING_SYSTEM), :==,
                        s(:str, "aqua")),
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:const, nil, :TclTkLib), :get_version), :<=>,
                            s(:array,
                              s(:int, 8),
                              s(:int, 4),
                              s(:const,
                                s(:const,
                                  s(:const, nil, :TclTkLib), :RELEASE_TYPE), :FINAL),
                              s(:int, 6)))), :>,
                        s(:int, 0))),
                    s(:casgn, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD,
                      s(:true)),
                    s(:casgn, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD,
                      s(:false)))),
                s(:casgn, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD,
                  s(:false))),
              s(:casgn, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD,
                s(:false)))),
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :WITH_RUBY_VM), :!),
              s(:const, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD)),
            s(:if,
              s(:send,
                s(:self), :const_defined?,
                s(:sym, :INTERP)), nil,
              s(:casgn, nil, :INTERP,
                s(:send,
                  s(:const, nil, :TclTkIp), :new,
                  s(:lvar, :name),
                  s(:lvar, :opts)))),
            s(:begin,
              s(:casgn, nil, :INTERP_MUTEX,
                s(:send,
                  s(:const, nil, :Mutex), :new)),
              s(:casgn, nil, :INTERP_ROOT_CHECK,
                s(:send,
                  s(:const, nil, :ConditionVariable), :new)),
              s(:casgn, nil, :INTERP_THREAD,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:lvasgn, :interp,
                          s(:send,
                            s(:const, nil, :TclTkIp), :new,
                            s(:lvar, :name),
                            s(:lvar, :opts))),
                        s(:resbody, nil,
                          s(:lvasgn, :e),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Thread), :current), :[]=,
                              s(:sym, :interp),
                              s(:lvar, :e)),
                            s(:send, nil, :raise,
                              s(:lvar, :e)))), nil)),
                    s(:send,
                      s(:lvar, :interp), :mainloop_abort_on_exception=,
                      s(:true)),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :instance_variable_set,
                      s(:str, "@interp"),
                      s(:lvar, :interp)),
                    s(:lvasgn, :status,
                      s(:array,
                        s(:nil))),
                    s(:defs,
                      s(:lvar, :status), :value,
                      s(:args),
                      s(:send,
                        s(:self), :[],
                        s(:int, 0))),
                    s(:defs,
                      s(:lvar, :status), :value=,
                      s(:args,
                        s(:arg, :val)),
                      s(:send,
                        s(:self), :[]=,
                        s(:int, 0),
                        s(:lvar, :val))),
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[]=,
                      s(:sym, :status),
                      s(:lvar, :status)),
                    s(:send,
                      s(:lvar, :interp), :_eval,
                      s(:dstr,
                        s(:str, "wm withdraw .\n"),
                        s(:str, "rename wm __wm_orig__\n"),
                        s(:str, "proc wm {subcmd win args} {\n"),
                        s(:str, "  set val [eval [list __wm_orig__ $subcmd $win] $args]\n"),
                        s(:str, "  if {[string equal $subcmd withdraw] && [string equal $win .]} {\n"),
                        s(:str, "    rename wm {}\n"),
                        s(:str, "    rename __wm_orig__ wm\n"),
                        s(:str, "  }\n"),
                        s(:str, "  return $val\n"),
                        s(:str, "}\n"),
                        s(:str, "proc __startup_rbtk_mainloop__ {args} {\n"),
                        s(:str, "  rename __startup_rbtk_mainloop__ {}\n"),
                        s(:str, "  if {[info command __wm_orig__] == \"__wm_orig__\"} {\n"),
                        s(:str, "    rename wm {}\n"),
                        s(:str, "    rename __wm_orig__ wm\n"),
                        s(:str, "    if [string equal [wm state .] withdrawn] {\n"),
                        s(:str, "      wm deiconify .\n"),
                        s(:str, "    }\n"),
                        s(:str, "  }\n"),
                        s(:str, "}\n"),
                        s(:str, "set __initial_state_of_rubytk__ 1\n"),
                        s(:str, "trace add variable __initial_state_of_rubytk__ unset __startup_rbtk_mainloop__\n"),
                        s(:str, "\n"),
                        s(:str, "# complete initializing\n"),
                        s(:str, "ruby {TkCore::INTERP_THREAD[:interp] = TkCore::INTERP_THREAD.instance_variable_get('@interp')}\n"))),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:kwbegin,
                            s(:ensure,
                              s(:rescue,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:const, nil, :Thread), :current), :[],
                                    s(:sym, :status)), :value=,
                                  s(:send,
                                    s(:lvar, :interp), :mainloop,
                                    s(:true))),
                                s(:resbody,
                                  s(:array,
                                    s(:const, nil, :SystemExit)),
                                  s(:lvasgn, :e),
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:const, nil, :Thread), :current), :[],
                                      s(:sym, :status)), :value=,
                                    s(:lvar, :e))),
                                s(:resbody,
                                  s(:array,
                                    s(:const, nil, :Exception)),
                                  s(:lvasgn, :e),
                                  s(:begin,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:const, nil, :Thread), :current), :[],
                                        s(:sym, :status)), :value=,
                                      s(:lvar, :e)),
                                    s(:if,
                                      s(:gvar, :$DEBUG),
                                      s(:send, nil, :p,
                                        s(:lvar, :e)), nil),
                                    s(:if,
                                      s(:send,
                                        s(:lvar, :interp), :has_mainwindow?),
                                      s(:retry), nil))), nil),
                              s(:block,
                                s(:send,
                                  s(:const, nil, :INTERP_MUTEX), :synchronize),
                                s(:args),
                                s(:send,
                                  s(:const, nil, :INTERP_ROOT_CHECK), :broadcast)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :interp), :deleted?), nil,
                            s(:kwbegin,
                              s(:rescue,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:const, nil, :Thread), :current), :[],
                                    s(:sym, :status)), :value=,
                                  s(:send,
                                    s(:lvar, :interp), :mainloop,
                                    s(:false))),
                                s(:resbody,
                                  s(:array,
                                    s(:const, nil, :Exception)),
                                  s(:lvasgn, :e),
                                  s(:if,
                                    s(:gvar, :$DEBUG),
                                    s(:send, nil, :puts,
                                      s(:dstr,
                                        s(:str, "ignore exception on interp: "),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :e), :inspect)),
                                        s(:str, "\n"))), nil)), nil)))),
                        s(:send,
                          s(:lvar, :interp), :delete)))))),
              s(:until,
                s(:send,
                  s(:const, nil, :INTERP_THREAD), :[],
                  s(:sym, :interp)),
                s(:send,
                  s(:const, nil, :INTERP_THREAD), :run)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :INTERP_THREAD), :[],
                    s(:sym, :interp)), :kind_of?,
                  s(:const, nil, :Exception)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :INTERP_THREAD), :[],
                    s(:sym, :interp))), nil),
              s(:while,
                s(:and,
                  s(:send,
                    s(:const, nil, :INTERP_THREAD), :alive?),
                  s(:send,
                    s(:send,
                      s(:const, nil, :TclTkLib), :mainloop_thread?), :nil?)),
                s(:send,
                  s(:const, nil, :INTERP_THREAD), :run)),
              s(:casgn, nil, :INTERP,
                s(:send,
                  s(:const, nil, :INTERP_THREAD), :[],
                  s(:sym, :interp))),
              s(:casgn, nil, :INTERP_THREAD_STATUS,
                s(:send,
                  s(:const, nil, :INTERP_THREAD), :[],
                  s(:sym, :status))),
              s(:postexe,
                s(:if,
                  s(:send,
                    s(:const, nil, :INTERP_THREAD), :alive?),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :INTERP), :delete),
                    s(:send,
                      s(:const, nil, :INTERP_THREAD), :kill)), nil)),
              s(:send,
                s(:const, nil, :INTERP_THREAD), :run))),
          s(:defs,
            s(:const, nil, :INTERP), :__getip,
            s(:args),
            s(:self)),
          s(:defs,
            s(:const, nil, :INTERP), :default_master?,
            s(:args),
            s(:true)),
          s(:block,
            s(:send,
              s(:const, nil, :INTERP), :instance_eval),
            s(:args),
            s(:begin,
              s(:ivasgn, :@tk_cmd_tbl,
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Hash), :new),
                    s(:args,
                      s(:arg, :hash),
                      s(:arg, :key)),
                    s(:send, nil, :fail,
                      s(:const, nil, :IndexError),
                      s(:dstr,
                        s(:str, "unknown command ID '"),
                        s(:begin,
                          s(:lvar, :key)),
                        s(:str, "'")))))),
              s(:defs,
                s(:ivar, :@tk_cmd_tbl), :[]=,
                s(:args,
                  s(:arg, :idx),
                  s(:arg, :val)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:self), :has_key?,
                        s(:lvar, :idx)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Thread), :current), :group), :!=,
                        s(:const,
                          s(:const, nil, :ThreadGroup), :Default))),
                    s(:send, nil, :fail,
                      s(:const, nil, :SecurityError),
                      s(:str, "cannot change the entried command")), nil),
                  s(:super,
                    s(:lvar, :idx),
                    s(:lvar, :val)))),
              s(:ivasgn, :@tk_windows,
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:hash))),
              s(:ivasgn, :@tk_table_list,
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:array))),
              s(:ivasgn, :@init_ip_env,
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:array))),
              s(:ivasgn, :@add_tk_procs,
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:array))),
              s(:or_asgn,
                s(:ivasgn, :@force_default_encoding),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:array,
                    s(:false)))),
              s(:or_asgn,
                s(:ivasgn, :@encoding),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:array,
                    s(:nil)))),
              s(:defs,
                s(:ivar, :@encoding), :to_s,
                s(:args),
                s(:send,
                  s(:self), :join,
                  s(:nil))),
              s(:ivasgn, :@cb_entry_class,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new,
                      s(:const, nil, :TkCallbackEntry)),
                    s(:args),
                    s(:begin,
                      s(:sclass,
                        s(:self),
                        s(:begin,
                          s(:def, :inspect,
                            s(:args),
                            s(:send, nil, :sprintf,
                              s(:str, "#<Class(TkCallbackEntry):%0x>"),
                              s(:send,
                                s(:self), :__id__))),
                          s(:alias,
                            s(:sym, :to_s),
                            s(:sym, :inspect)))),
                      s(:def, :initialize,
                        s(:args,
                          s(:arg, :ip),
                          s(:arg, :cmd)),
                        s(:begin,
                          s(:ivasgn, :@ip,
                            s(:lvar, :ip)),
                          s(:ivasgn, :@cmd,
                            s(:lvar, :cmd)))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :ip),
                        s(:sym, :cmd)),
                      s(:def, :call,
                        s(:args,
                          s(:restarg, :args)),
                        s(:send,
                          s(:ivar, :@ip), :cb_eval,
                          s(:ivar, :@cmd),
                          s(:splat,
                            s(:lvar, :args)))),
                      s(:def, :inspect,
                        s(:args),
                        s(:send, nil, :sprintf,
                          s(:str, "#<cb_entry:%0x>"),
                          s(:send,
                            s(:self), :__id__))),
                      s(:alias,
                        s(:sym, :to_s),
                        s(:sym, :inspect)))), :freeze)))),
          s(:defs,
            s(:const, nil, :INTERP), :cb_entry_class,
            s(:args),
            s(:ivar, :@cb_entry_class)),
          s(:defs,
            s(:const, nil, :INTERP), :tk_cmd_tbl,
            s(:args),
            s(:ivar, :@tk_cmd_tbl)),
          s(:defs,
            s(:const, nil, :INTERP), :tk_windows,
            s(:args),
            s(:ivar, :@tk_windows)),
          s(:class,
            s(:const, nil, :Tk_OBJECT_TABLE), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :id)),
                s(:begin,
                  s(:ivasgn, :@id,
                    s(:lvar, :id)),
                  s(:ivasgn, :@mutex,
                    s(:send,
                      s(:const, nil, :Mutex), :new)))),
              s(:def, :mutex,
                s(:args),
                s(:ivar, :@mutex)),
              s(:def, :method_missing,
                s(:args,
                  s(:arg, :m),
                  s(:restarg, :args),
                  s(:blockarg, :b)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :tk_object_table,
                    s(:ivar, :@id)), :__send__,
                  s(:lvar, :m),
                  s(:splat,
                    s(:lvar, :args)),
                  s(:block_pass,
                    s(:lvar, :b)))))),
          s(:defs,
            s(:const, nil, :INTERP), :tk_object_table,
            s(:args,
              s(:arg, :id)),
            s(:send,
              s(:ivar, :@tk_table_list), :[],
              s(:lvar, :id))),
          s(:defs,
            s(:const, nil, :INTERP), :create_table,
            s(:args),
            s(:begin,
              s(:lvasgn, :id,
                s(:send,
                  s(:ivar, :@tk_table_list), :size)),
              s(:or,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :tbl,
                      s(:hash))), :tainted?),
                s(:send,
                  s(:const, nil, :TkUtil), :untrust,
                  s(:lvar, :tbl))),
              s(:send,
                s(:ivar, :@tk_table_list), :<<,
                s(:lvar, :tbl)),
              s(:send,
                s(:const, nil, :Tk_OBJECT_TABLE), :new,
                s(:lvar, :id)))),
          s(:defs,
            s(:const, nil, :INTERP), :get_cb_entry,
            s(:args,
              s(:arg, :cmd)),
            s(:send,
              s(:send,
                s(:ivar, :@cb_entry_class), :new,
                s(:send, nil, :__getip),
                s(:lvar, :cmd)), :freeze)),
          s(:defs,
            s(:const, nil, :INTERP), :cb_eval,
            s(:args,
              s(:arg, :cmd),
              s(:restarg, :args)),
            s(:send,
              s(:const, nil, :TkUtil), :_get_eval_string,
              s(:send,
                s(:const, nil, :TkUtil), :eval_cmd,
                s(:lvar, :cmd),
                s(:splat,
                  s(:lvar, :args))))),
          s(:defs,
            s(:const, nil, :INTERP), :init_ip_env,
            s(:args,
              s(:optarg, :script,
                s(:send,
                  s(:const, nil, :Proc), :new))),
            s(:begin,
              s(:send,
                s(:ivar, :@init_ip_env), :<<,
                s(:lvar, :script)),
              s(:send,
                s(:lvar, :script), :call,
                s(:self)))),
          s(:defs,
            s(:const, nil, :INTERP), :add_tk_procs,
            s(:args,
              s(:arg, :name),
              s(:optarg, :args,
                s(:nil)),
              s(:optarg, :body,
                s(:nil))),
            s(:if,
              s(:send,
                s(:lvar, :name), :kind_of?,
                s(:const, nil, :Array)),
              s(:block,
                s(:send,
                  s(:lvar, :name), :each),
                s(:args,
                  s(:arg, :param)),
                s(:send,
                  s(:self), :add_tk_procs,
                  s(:splat,
                    s(:lvar, :param)))),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :name), :to_s)),
                s(:send,
                  s(:ivar, :@add_tk_procs), :<<,
                  s(:array,
                    s(:lvar, :name),
                    s(:lvar, :args),
                    s(:lvar, :body))),
                s(:if,
                  s(:and,
                    s(:lvar, :args),
                    s(:lvar, :body)),
                  s(:send,
                    s(:self), :_invoke,
                    s(:str, "proc"),
                    s(:lvar, :name),
                    s(:lvar, :args),
                    s(:lvar, :body)), nil)))),
          s(:defs,
            s(:const, nil, :INTERP), :remove_tk_procs,
            s(:args,
              s(:restarg, :names)),
            s(:block,
              s(:send,
                s(:lvar, :names), :each),
              s(:args,
                s(:arg, :name)),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :name), :to_s)),
                s(:block,
                  s(:send,
                    s(:ivar, :@add_tk_procs), :delete_if),
                  s(:args,
                    s(:arg, :elem)),
                  s(:and,
                    s(:send,
                      s(:lvar, :elem), :kind_of?,
                      s(:const, nil, :Array)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :elem), :[],
                          s(:int, 0)), :to_s), :==,
                      s(:lvar, :name)))),
                s(:send,
                  s(:self), :__invoke__,
                  s(:str, "rename"),
                  s(:lvar, :name),
                  s(:str, ""))))),
          s(:defs,
            s(:const, nil, :INTERP), :init_ip_internal,
            s(:args),
            s(:begin,
              s(:lvasgn, :ip,
                s(:self)),
              s(:block,
                s(:send,
                  s(:ivar, :@init_ip_env), :each),
                s(:args,
                  s(:arg, :script)),
                s(:send,
                  s(:lvar, :script), :call,
                  s(:lvar, :ip))),
              s(:block,
                s(:send,
                  s(:ivar, :@add_tk_procs), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :args),
                  s(:arg, :body)),
                s(:send,
                  s(:lvar, :ip), :_invoke,
                  s(:str, "proc"),
                  s(:lvar, :name),
                  s(:lvar, :args),
                  s(:lvar, :body))))))),
      s(:if,
        s(:send,
          s(:self), :const_defined?,
          s(:sym, :RUN_EVENTLOOP_ON_MAIN_THREAD)), nil,
        s(:casgn, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD,
          s(:false))),
      s(:casgn, nil, :WIDGET_DESTROY_HOOK,
        s(:str, "<WIDGET_DESTROY_HOOK>")),
      s(:send,
        s(:const, nil, :INTERP), :_invoke_without_enc,
        s(:str, "event"),
        s(:str, "add"),
        s(:dstr,
          s(:str, "<"),
          s(:begin,
            s(:const, nil, :WIDGET_DESTROY_HOOK)),
          s(:str, ">")),
        s(:str, "<Destroy>")),
      s(:send,
        s(:const, nil, :INTERP), :_invoke_without_enc,
        s(:str, "bind"),
        s(:str, "all"),
        s(:dstr,
          s(:str, "<"),
          s(:begin,
            s(:const, nil, :WIDGET_DESTROY_HOOK)),
          s(:str, ">")),
        s(:send,
          s(:send, nil, :install_cmd,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :path)),
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :deleted?), nil,
                s(:kwbegin,
                  s(:rescue,
                    s(:if,
                      s(:begin,
                        s(:lvasgn, :widget,
                          s(:send,
                            s(:send,
                              s(:const,
                                s(:const, nil, :TkCore), :INTERP), :tk_windows), :[],
                            s(:lvar, :path)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :widget), :respond_to?,
                          s(:sym, :__destroy_hook__)),
                        s(:send,
                          s(:lvar, :widget), :__destroy_hook__), nil), nil),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :e),
                      s(:if,
                        s(:gvar, :$DEBUG),
                        s(:send, nil, :p,
                          s(:lvar, :e)), nil)), nil))))), :<<,
          s(:str, " %W"))),
      s(:send,
        s(:const, nil, :INTERP), :add_tk_procs,
        s(:const,
          s(:const, nil, :TclTkLib), :FINALIZE_PROC_NAME),
        s(:str, ""),
        s(:dstr,
          s(:str, "catch { bind all <"),
          s(:begin,
            s(:const, nil, :WIDGET_DESTROY_HOOK)),
          s(:str, "> {} }"))),
      s(:send,
        s(:const, nil, :INTERP), :add_tk_procs,
        s(:str, "rb_out"),
        s(:str, "ns args"),
        s(:dstr,
          s(:str, "    if [regexp {^::} $ns] {\n"),
          s(:str, "      set cmd {namespace eval $ns {ruby_cmd TkCore callback} $args}\n"),
          s(:str, "    } else {\n"),
          s(:str, "      set cmd {eval {ruby_cmd TkCore callback} $ns $args}\n"),
          s(:str, "    }\n"),
          s(:str, "    if {[set st [catch $cmd ret]] != 0} {\n"),
          s(:str, "       #return -code $st $ret\n"),
          s(:str, "       set idx [string first \"\\n\\n\" $ret]\n"),
          s(:str, "       if {$idx > 0} {\n"),
          s(:str, "          return -code $st \\\n"),
          s(:str, "                 -errorinfo [string range $ret [expr $idx + 2] \\\n"),
          s(:str, "                                               [string length $ret]] \\\n"),
          s(:str, "                 [string range $ret 0 [expr $idx - 1]]\n"),
          s(:str, "       } else {\n"),
          s(:str, "          return -code $st $ret\n"),
          s(:str, "       }\n"),
          s(:str, "    } else {\n"),
          s(:str, "        return $ret\n"),
          s(:str, "    }\n"))),
      s(:if,
        s(:or,
          s(:send,
            s(:const, nil, :WITH_RUBY_VM), :!),
          s(:const, nil, :RUN_EVENTLOOP_ON_MAIN_THREAD)),
        s(:block,
          s(:send, nil, :at_exit),
          s(:args),
          s(:send,
            s(:const, nil, :INTERP), :remove_tk_procs,
            s(:const,
              s(:const, nil, :TclTkLib), :FINALIZE_PROC_NAME))),
        s(:block,
          s(:send, nil, :at_exit),
          s(:args),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :Tk), :root), :destroy),
            s(:send,
              s(:const, nil, :INTERP), :remove_tk_procs,
              s(:const,
                s(:const, nil, :TclTkLib), :FINALIZE_PROC_NAME)),
            s(:send,
              s(:send,
                s(:const, nil, :INTERP_THREAD), :kill), :join)))),
      s(:casgn, nil, :EventFlag,
        s(:const,
          s(:const, nil, :TclTkLib), :EventFlag)),
      s(:def, :callback_break,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :TkCallbackBreak),
          s(:str, "Tk callback returns 'break' status"))),
      s(:def, :callback_continue,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :TkCallbackContinue),
          s(:str, "Tk callback returns 'continue' status"))),
      s(:def, :callback_return,
        s(:args),
        s(:send, nil, :fail,
          s(:const, nil, :TkCallbackReturn),
          s(:str, "Tk callback returns 'return' status"))),
      s(:defs,
        s(:const, nil, :TkCore), :callback,
        s(:args,
          s(:restarg, :arg)),
        s(:kwbegin,
          s(:rescue,
            s(:if,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :kind_of?,
                s(:const, nil, :Hash)),
              s(:begin,
                s(:lvasgn, :normal_ret,
                  s(:false)),
                s(:lvasgn, :ret,
                  s(:block,
                    s(:send, nil, :catch,
                      s(:sym, :IRB_EXIT)),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :retval,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const,
                                s(:const, nil, :TkCore), :INTERP), :tk_cmd_tbl), :[],
                            s(:send,
                              s(:lvar, :arg), :shift)), :call,
                          s(:splat,
                            s(:lvar, :arg)))),
                      s(:lvasgn, :normal_ret,
                        s(:true)),
                      s(:lvar, :retval)))),
                s(:if,
                  s(:lvar, :normal_ret), nil,
                  s(:send, nil, :exit,
                    s(:lvar, :ret))),
                s(:lvar, :ret)), nil),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemExit)),
              s(:lvasgn, :e),
              s(:send, nil, :exit,
                s(:send,
                  s(:lvar, :e), :status))),
            s(:resbody,
              s(:array,
                s(:const, nil, :Interrupt)),
              s(:lvasgn, :e),
              s(:send, nil, :fail,
                s(:lvar, :e))),
            s(:resbody,
              s(:array,
                s(:const, nil, :Exception)),
              s(:lvasgn, :e),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :msg,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :_toUTF8,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :e), :class), :inspect)), :+,
                                    s(:str, ": ")), :+,
                                  s(:send, nil, :_toUTF8,
                                    s(:send,
                                      s(:lvar, :e), :message))), :+,
                                s(:str, "\n")), :+,
                              s(:str, "\n---< backtrace of Ruby side >-----\n")), :+,
                            s(:send, nil, :_toUTF8,
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :backtrace), :join,
                                s(:str, "\n")))), :+,
                          s(:str, "\n---< backtrace of Tk side >-------"))),
                      s(:if,
                        s(:const,
                          s(:const, nil, :TkCore), :WITH_ENCODING),
                        s(:send,
                          s(:lvar, :msg), :force_encoding,
                          s(:str, "utf-8")),
                        s(:send,
                          s(:lvar, :msg), :instance_variable_set,
                          s(:sym, :@encoding),
                          s(:str, "utf-8")))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)), nil,
                      s(:lvasgn, :msg,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :e), :class), :inspect), :+,
                                    s(:str, ": ")), :+,
                                  s(:send,
                                    s(:lvar, :e), :message)), :+,
                                s(:str, "\n")), :+,
                              s(:str, "\n---< backtrace of Ruby side >-----\n")), :+,
                            s(:send,
                              s(:send,
                                s(:lvar, :e), :backtrace), :join,
                              s(:str, "\n"))), :+,
                          s(:str, "\n---< backtrace of Tk side >-------")))), nil)),
                s(:send, nil, :fail,
                  s(:lvar, :e),
                  s(:lvar, :msg)))), nil))),
      s(:def, :load_cmd_on_ip,
        s(:args,
          s(:arg, :tk_cmd)),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call,
            s(:str, "auto_load"),
            s(:lvar, :tk_cmd)))),
      s(:def, :after,
        s(:args,
          s(:arg, :ms),
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:lvasgn, :cmdid,
            s(:send, nil, :install_cmd,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:begin,
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:lvar, :cmd), :call)),
                  s(:send, nil, :uninstall_cmd,
                    s(:lvar, :cmdid)),
                  s(:lvar, :ret))))),
          s(:lvasgn, :after_id,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "after"),
              s(:lvar, :ms),
              s(:lvar, :cmdid))),
          s(:send,
            s(:lvar, :after_id), :instance_variable_set,
            s(:str, "@cmdid"),
            s(:lvar, :cmdid)),
          s(:lvar, :after_id))),
      s(:def, :after_idle,
        s(:args,
          s(:optarg, :cmd,
            s(:send,
              s(:const, nil, :Proc), :new))),
        s(:begin,
          s(:lvasgn, :cmdid,
            s(:send, nil, :install_cmd,
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:begin,
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:lvar, :cmd), :call)),
                  s(:send, nil, :uninstall_cmd,
                    s(:lvar, :cmdid)),
                  s(:lvar, :ret))))),
          s(:lvasgn, :after_id,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "after"),
              s(:str, "idle"),
              s(:lvar, :cmdid))),
          s(:send,
            s(:lvar, :after_id), :instance_variable_set,
            s(:str, "@cmdid"),
            s(:lvar, :cmdid)),
          s(:lvar, :after_id))),
      s(:def, :after_cancel,
        s(:args,
          s(:arg, :afterId)),
        s(:begin,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "after"),
            s(:str, "cancel"),
            s(:lvar, :afterId)),
          s(:if,
            s(:begin,
              s(:lvasgn, :cmdid,
                s(:send,
                  s(:lvar, :afterId), :instance_variable_get,
                  s(:str, "@cmdid")))),
            s(:begin,
              s(:send,
                s(:lvar, :afterId), :instance_variable_set,
                s(:str, "@cmdid"),
                s(:nil)),
              s(:send, nil, :uninstall_cmd,
                s(:lvar, :cmdid))), nil),
          s(:lvar, :afterId))),
      s(:def, :windowingsystem,
        s(:args),
        s(:send, nil, :tk_call_without_enc,
          s(:str, "tk"),
          s(:str, "windowingsystem"))),
      s(:def, :scaling,
        s(:args,
          s(:optarg, :scale,
            s(:nil))),
        s(:if,
          s(:lvar, :scale),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk"),
            s(:str, "scaling"),
            s(:lvar, :scale)),
          s(:send, nil, :Float,
            s(:send, nil, :number,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "tk"),
                s(:str, "scaling")))))),
      s(:def, :scaling_displayof,
        s(:args,
          s(:arg, :win),
          s(:optarg, :scale,
            s(:nil))),
        s(:if,
          s(:lvar, :scale),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk"),
            s(:str, "scaling"),
            s(:str, "-displayof"),
            s(:lvar, :win),
            s(:lvar, :scale)),
          s(:send, nil, :Float,
            s(:send, nil, :number,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "tk"),
                s(:str, "-displayof"),
                s(:lvar, :win),
                s(:str, "scaling")))))),
      s(:def, :inactive,
        s(:args),
        s(:send, nil, :Integer,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk"),
            s(:str, "inactive")))),
      s(:def, :inactive_displayof,
        s(:args,
          s(:arg, :win)),
        s(:send, nil, :Integer,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "tk"),
            s(:str, "inactive"),
            s(:str, "-displayof"),
            s(:lvar, :win)))),
      s(:def, :reset_inactive,
        s(:args),
        s(:send, nil, :tk_call_without_enc,
          s(:str, "tk"),
          s(:str, "inactive"),
          s(:str, "reset"))),
      s(:def, :reset_inactive_displayof,
        s(:args,
          s(:arg, :win)),
        s(:send, nil, :tk_call_without_enc,
          s(:str, "tk"),
          s(:str, "inactive"),
          s(:str, "-displayof"),
          s(:lvar, :win),
          s(:str, "reset"))),
      s(:def, :appname,
        s(:args,
          s(:optarg, :name,
            s(:const, nil, :None))),
        s(:send, nil, :tk_call,
          s(:str, "tk"),
          s(:str, "appname"),
          s(:lvar, :name))),
      s(:def, :appsend_deny,
        s(:args),
        s(:send, nil, :tk_call,
          s(:str, "rename"),
          s(:str, "send"),
          s(:str, ""))),
      s(:def, :appsend,
        s(:args,
          s(:arg, :interp),
          s(:arg, :async),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:gvar, :$SAFE), :>=,
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :args), :find),
                s(:args,
                  s(:arg, :obj)),
                s(:send,
                  s(:lvar, :obj), :tainted?))),
            s(:send, nil, :fail,
              s(:const, nil, :SecurityError),
              s(:dstr,
                s(:str, "cannot send tainted Tk commands at level "),
                s(:begin,
                  s(:gvar, :$SAFE)))), nil),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:true)),
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:false))),
              s(:send,
                s(:lvar, :async), :!=,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :async)),
              s(:lvasgn, :async,
                s(:false))), nil),
          s(:if,
            s(:lvar, :async),
            s(:send, nil, :tk_call,
              s(:str, "send"),
              s(:str, "-async"),
              s(:str, "--"),
              s(:lvar, :interp),
              s(:splat,
                s(:lvar, :args))),
            s(:send, nil, :tk_call,
              s(:str, "send"),
              s(:str, "--"),
              s(:lvar, :interp),
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :rb_appsend,
        s(:args,
          s(:arg, :interp),
          s(:arg, :async),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:gvar, :$SAFE), :>=,
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :args), :find),
                s(:args,
                  s(:arg, :obj)),
                s(:send,
                  s(:lvar, :obj), :tainted?))),
            s(:send, nil, :fail,
              s(:const, nil, :SecurityError),
              s(:dstr,
                s(:str, "cannot send tainted Ruby commands at level "),
                s(:begin,
                  s(:gvar, :$SAFE)))), nil),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:true)),
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:false))),
              s(:send,
                s(:lvar, :async), :!=,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :async)),
              s(:lvasgn, :async,
                s(:false))), nil),
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect!),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:send, nil, :_get_eval_string,
                  s(:lvar, :c)), :gsub,
                s(:regexp,
                  s(:str, "[\\[\\]$\"\\\\]"),
                  s(:regopt)),
                s(:str, "\\\\\\&")))),
          s(:send,
            s(:lvar, :args), :push,
            s(:str, "}.call)\"")),
          s(:send, nil, :appsend,
            s(:lvar, :interp),
            s(:lvar, :async),
            s(:str, "ruby \"TkComm._get_eval_string(proc{"),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :appsend_displayof,
        s(:args,
          s(:arg, :interp),
          s(:arg, :win),
          s(:arg, :async),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:gvar, :$SAFE), :>=,
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :args), :find),
                s(:args,
                  s(:arg, :obj)),
                s(:send,
                  s(:lvar, :obj), :tainted?))),
            s(:send, nil, :fail,
              s(:const, nil, :SecurityError),
              s(:dstr,
                s(:str, "cannot send tainted Tk commands at level "),
                s(:begin,
                  s(:gvar, :$SAFE)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :win), :==,
              s(:nil)),
            s(:lvasgn, :win,
              s(:str, ".")), nil),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:true)),
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:false))),
              s(:send,
                s(:lvar, :async), :!=,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :async)),
              s(:lvasgn, :async,
                s(:false))), nil),
          s(:if,
            s(:lvar, :async),
            s(:send, nil, :tk_call,
              s(:str, "send"),
              s(:str, "-async"),
              s(:str, "-displayof"),
              s(:lvar, :win),
              s(:str, "--"),
              s(:lvar, :interp),
              s(:splat,
                s(:lvar, :args))),
            s(:send, nil, :tk_call,
              s(:str, "send"),
              s(:str, "-displayor"),
              s(:lvar, :win),
              s(:str, "--"),
              s(:lvar, :interp),
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :rb_appsend_displayof,
        s(:args,
          s(:arg, :interp),
          s(:arg, :win),
          s(:arg, :async),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:gvar, :$SAFE), :>=,
                s(:int, 1)),
              s(:block,
                s(:send,
                  s(:lvar, :args), :find),
                s(:args,
                  s(:arg, :obj)),
                s(:send,
                  s(:lvar, :obj), :tainted?))),
            s(:send, nil, :fail,
              s(:const, nil, :SecurityError),
              s(:dstr,
                s(:str, "cannot send tainted Ruby commands at level "),
                s(:begin,
                  s(:gvar, :$SAFE)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :win), :==,
              s(:nil)),
            s(:lvasgn, :win,
              s(:str, ".")), nil),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:true)),
                s(:send,
                  s(:lvar, :async), :!=,
                  s(:false))),
              s(:send,
                s(:lvar, :async), :!=,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :async)),
              s(:lvasgn, :async,
                s(:false))), nil),
          s(:lvasgn, :args,
            s(:block,
              s(:send,
                s(:lvar, :args), :collect!),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:send, nil, :_get_eval_string,
                  s(:lvar, :c)), :gsub,
                s(:regexp,
                  s(:str, "[\\[\\]$\"\\\\]"),
                  s(:regopt)),
                s(:str, "\\\\\\&")))),
          s(:send,
            s(:lvar, :args), :push,
            s(:str, "}.call)\"")),
          s(:send, nil, :appsend,
            s(:lvar, :interp),
            s(:lvar, :win),
            s(:lvar, :async),
            s(:str, "ruby \"TkComm._get_eval_string(proc{"),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :info,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :tk_call,
          s(:str, "info"),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :mainloop,
        s(:args,
          s(:optarg, :check_root,
            s(:true))),
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :WITH_RUBY_VM), :!),
          s(:send,
            s(:const, nil, :TclTkLib), :mainloop,
            s(:lvar, :check_root)),
          s(:if,
            s(:const,
              s(:const, nil, :TkCore), :RUN_EVENTLOOP_ON_MAIN_THREAD),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :!=,
                  s(:send,
                    s(:const, nil, :Thread), :main)),
                s(:send, nil, :raise,
                  s(:const, nil, :RuntimeError),
                  s(:str, "Tk.mainloop is allowed on the main thread only")), nil),
              s(:send,
                s(:const, nil, :TclTkLib), :mainloop,
                s(:lvar, :check_root))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :default_master?), nil,
                s(:if,
                  s(:lvar, :check_root),
                  s(:return,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_thread_tkwait,
                      s(:str, "window"),
                      s(:str, "."))), nil)),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :_eval_without_enc,
                s(:str, "catch {unset __initial_state_of_rubytk__}")),
              s(:send,
                s(:const, nil, :INTERP_THREAD), :run),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :TclTkLib), :set_eventloop_window_mode,
                        s(:true)),
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_eval_without_enc,
                        s(:str, "update")),
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_eval_without_enc,
                        s(:str, "catch {set __initial_state_of_rubytk__}")),
                      s(:send,
                        s(:const, nil, :INTERP_THREAD), :run),
                      s(:if,
                        s(:lvar, :check_root),
                        s(:block,
                          s(:send,
                            s(:const, nil, :INTERP_MUTEX), :synchronize),
                          s(:args),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :INTERP_ROOT_CHECK), :wait,
                              s(:const, nil, :INTERP_MUTEX)),
                            s(:lvasgn, :status,
                              s(:send,
                                s(:const, nil, :INTERP_THREAD_STATUS), :value)),
                            s(:if,
                              s(:and,
                                s(:lvar, :status),
                                s(:send,
                                  s(:const,
                                    s(:const, nil, :TkCore), :INTERP), :default_master?)),
                              s(:begin,
                                s(:send,
                                  s(:const, nil, :INTERP_THREAD_STATUS), :value=,
                                  s(:nil)),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :status), :kind_of?,
                                    s(:const, nil, :Exception)),
                                  s(:send, nil, :raise,
                                    s(:lvar, :status)), nil)), nil))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:const, nil, :INTERP_THREAD), :value),
                            s(:resbody,
                              s(:array,
                                s(:const, nil, :Exception)),
                              s(:lvasgn, :e),
                              s(:send, nil, :raise,
                                s(:lvar, :e))), nil)))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :e),
                      s(:send, nil, :raise,
                        s(:lvar, :e))), nil),
                  s(:send,
                    s(:const, nil, :TclTkLib), :set_eventloop_window_mode,
                    s(:false)))))))),
      s(:def, :mainloop_thread?,
        s(:args),
        s(:if,
          s(:or,
            s(:send,
              s(:const,
                s(:const, nil, :TkCore), :WITH_RUBY_VM), :!),
            s(:const,
              s(:const, nil, :TkCore), :RUN_EVENTLOOP_ON_MAIN_THREAD)),
          s(:send,
            s(:const, nil, :TclTkLib), :mainloop_thread?),
          s(:send,
            s(:send,
              s(:const, nil, :Thread), :current), :==,
            s(:const, nil, :INTERP_THREAD)))),
      s(:def, :mainloop_exist?,
        s(:args),
        s(:send,
          s(:send,
            s(:const, nil, :TclTkLib), :mainloop_thread?), :!=,
          s(:nil))),
      s(:def, :is_mainloop?,
        s(:args),
        s(:send,
          s(:send,
            s(:const, nil, :TclTkLib), :mainloop_thread?), :==,
          s(:true))),
      s(:def, :mainloop_watchdog,
        s(:args,
          s(:optarg, :check_root,
            s(:true))),
        s(:send,
          s(:const, nil, :TclTkLib), :mainloop_watchdog,
          s(:lvar, :check_root))),
      s(:def, :do_one_event,
        s(:args,
          s(:optarg, :flag,
            s(:const,
              s(:const,
                s(:const, nil, :TclTkLib), :EventFlag), :ALL))),
        s(:send,
          s(:const, nil, :TclTkLib), :do_one_event,
          s(:lvar, :flag))),
      s(:def, :set_eventloop_tick,
        s(:args,
          s(:arg, :timer_tick)),
        s(:send,
          s(:const, nil, :TclTkLib), :set_eventloop_tick,
          s(:lvar, :timer_tick))),
      s(:def, :get_eventloop_tick,
        s(:args),
        s(:send,
          s(:const, nil, :TclTkLib), :get_eventloop_tick)),
      s(:def, :set_no_event_wait,
        s(:args,
          s(:arg, :wait)),
        s(:send,
          s(:const, nil, :TclTkLib), :set_no_even_wait,
          s(:lvar, :wait))),
      s(:def, :get_no_event_wait,
        s(:args),
        s(:send,
          s(:const, nil, :TclTkLib), :get_no_eventloop_wait)),
      s(:def, :set_eventloop_weight,
        s(:args,
          s(:arg, :loop_max),
          s(:arg, :no_event_tick)),
        s(:send,
          s(:const, nil, :TclTkLib), :set_eventloop_weight,
          s(:lvar, :loop_max),
          s(:lvar, :no_event_tick))),
      s(:def, :get_eventloop_weight,
        s(:args),
        s(:send,
          s(:const, nil, :TclTkLib), :get_eventloop_weight)),
      s(:def, :restart,
        s(:args,
          s(:optarg, :app_name,
            s(:nil)),
          s(:optarg, :keys,
            s(:hash))),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :init_ip_internal),
          s(:if,
            s(:lvar, :app_name),
            s(:send, nil, :tk_call,
              s(:str, "set"),
              s(:str, "argv0"),
              s(:lvar, :app_name)), nil),
          s(:if,
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash)),
            s(:send, nil, :tk_call,
              s(:str, "set"),
              s(:str, "argv"),
              s(:send,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys)), :join,
                s(:str, " "))), nil),
          s(:send,
            s(:const, nil, :INTERP), :restart),
          s(:nil))),
      s(:def, :event_generate,
        s(:args,
          s(:arg, :win),
          s(:arg, :context),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :context), :kind_of?,
              s(:const,
                s(:const, nil, :TkEvent), :Event)),
            s(:send,
              s(:lvar, :context), :generate,
              s(:lvar, :win),
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:lvar, :keys)),
                  s(:lvar, :keys),
                  s(:hash)))),
            s(:if,
              s(:lvar, :keys),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "event"),
                s(:str, "generate"),
                s(:lvar, :win),
                s(:dstr,
                  s(:str, "<"),
                  s(:begin,
                    s(:send, nil, :tk_event_sequence,
                      s(:lvar, :context))),
                  s(:str, ">")),
                s(:splat,
                  s(:send, nil, :hash_kv,
                    s(:lvar, :keys),
                    s(:true)))),
              s(:send, nil, :tk_call_without_enc,
                s(:str, "event"),
                s(:str, "generate"),
                s(:lvar, :win),
                s(:dstr,
                  s(:str, "<"),
                  s(:begin,
                    s(:send, nil, :tk_event_sequence,
                      s(:lvar, :context))),
                  s(:str, ">"))))),
          s(:nil))),
      s(:def, :messageBox,
        s(:args,
          s(:arg, :keys)),
        s(:send, nil, :tk_call,
          s(:str, "tk_messageBox"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:def, :getOpenFile,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :tk_call,
          s(:str, "tk_getOpenFile"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:def, :getMultipleOpenFile,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_call,
            s(:str, "tk_getOpenFile"),
            s(:str, "-multiple"),
            s(:str, "1"),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))))),
      s(:def, :getSaveFile,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :tk_call,
          s(:str, "tk_getSaveFile"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:def, :getMultipleSaveFile,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :simplelist,
          s(:send, nil, :tk_call,
            s(:str, "tk_getSaveFile"),
            s(:str, "-multiple"),
            s(:str, "1"),
            s(:splat,
              s(:send, nil, :hash_kv,
                s(:lvar, :keys)))))),
      s(:def, :chooseColor,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :tk_call,
          s(:str, "tk_chooseColor"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:def, :chooseDirectory,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send, nil, :tk_call,
          s(:str, "tk_chooseDirectory"),
          s(:splat,
            s(:send, nil, :hash_kv,
              s(:lvar, :keys))))),
      s(:def, :_ip_eval_core,
        s(:args,
          s(:arg, :enc_mode),
          s(:arg, :cmd_string)),
        s(:begin,
          s(:case,
            s(:lvar, :enc_mode),
            s(:when,
              s(:nil),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :INTERP), :_eval,
                  s(:lvar, :cmd_string)))),
            s(:when,
              s(:false),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :INTERP), :_eval_without_enc,
                  s(:lvar, :cmd_string)))),
            s(:when,
              s(:true),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :INTERP), :_eval_with_enc,
                  s(:lvar, :cmd_string)))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :INTERP), :_return_value), :!=,
              s(:int, 0)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:lvar, :res),
              s(:send, nil, :error_at)), nil),
          s(:return,
            s(:lvar, :res)))),
      s(:send, nil, :private,
        s(:sym, :_ip_eval_core)),
      s(:def, :ip_eval,
        s(:args,
          s(:arg, :cmd_string)),
        s(:send, nil, :_ip_eval_core,
          s(:nil),
          s(:lvar, :cmd_string))),
      s(:def, :ip_eval_without_enc,
        s(:args,
          s(:arg, :cmd_string)),
        s(:send, nil, :_ip_eval_core,
          s(:false),
          s(:lvar, :cmd_string))),
      s(:def, :ip_eval_with_enc,
        s(:args,
          s(:arg, :cmd_string)),
        s(:send, nil, :_ip_eval_core,
          s(:true),
          s(:lvar, :cmd_string))),
      s(:def, :_ip_invoke_core,
        s(:args,
          s(:arg, :enc_mode),
          s(:restarg, :args)),
        s(:begin,
          s(:case,
            s(:lvar, :enc_mode),
            s(:when,
              s(:false),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :INTERP), :_invoke_without_enc,
                  s(:splat,
                    s(:lvar, :args))))),
            s(:when,
              s(:nil),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :INTERP), :_invoke,
                  s(:splat,
                    s(:lvar, :args))))),
            s(:when,
              s(:true),
              s(:lvasgn, :res,
                s(:send,
                  s(:const, nil, :INTERP), :_invoke_with_enc,
                  s(:splat,
                    s(:lvar, :args))))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :INTERP), :_return_value), :!=,
              s(:int, 0)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:lvar, :res),
              s(:send, nil, :error_at)), nil),
          s(:return,
            s(:lvar, :res)))),
      s(:send, nil, :private,
        s(:sym, :_ip_invoke_core)),
      s(:def, :ip_invoke,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_ip_invoke_core,
          s(:nil),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :ip_invoke_without_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_ip_invoke_core,
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :ip_invoke_with_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_ip_invoke_core,
          s(:true),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_tk_call_core,
        s(:args,
          s(:arg, :enc_mode),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :args,
            s(:send, nil, :_conv_args,
              s(:array),
              s(:lvar, :enc_mode),
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:gvar, :$DEBUG),
            s(:send, nil, :puts,
              s(:send,
                s(:str, "invoke args => "), :+,
                s(:send,
                  s(:lvar, :args), :inspect))), nil),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :res,
                s(:send, nil, :_ip_invoke_core,
                  s(:lvar, :enc_mode),
                  s(:splat,
                    s(:lvar, :args)))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError)),
                s(:lvasgn, :err),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:lvar, :args), :unshift,
                        s(:str, "unknown")),
                      s(:lvasgn, :res,
                        s(:send, nil, :_ip_invoke_core,
                          s(:lvar, :enc_mode),
                          s(:splat,
                            s(:lvar, :args))))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :StandardError)),
                      s(:lvasgn, :err2),
                      s(:begin,
                        s(:if,
                          s(:match_with_lvasgn,
                            s(:regexp,
                              s(:str, "^invalid command"),
                              s(:regopt)),
                            s(:send,
                              s(:lvar, :err2), :message)), nil,
                          s(:send, nil, :fail,
                            s(:lvar, :err2))),
                        s(:send, nil, :fail,
                          s(:lvar, :err)))), nil))), nil)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :INTERP), :_return_value), :!=,
              s(:int, 0)),
            s(:send, nil, :fail,
              s(:const, nil, :RuntimeError),
              s(:lvar, :res),
              s(:send, nil, :error_at)), nil),
          s(:return,
            s(:lvar, :res)))),
      s(:send, nil, :private,
        s(:sym, :_tk_call_core)),
      s(:def, :tk_call,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_core,
          s(:nil),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_without_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_core,
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_with_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_core,
          s(:true),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :_tk_call_to_list_core,
        s(:args,
          s(:arg, :depth),
          s(:arg, :arg_enc),
          s(:arg, :val_enc),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :args,
            s(:send, nil, :_conv_args,
              s(:array),
              s(:lvar, :arg_enc),
              s(:splat,
                s(:lvar, :args)))),
          s(:lvasgn, :val,
            s(:send, nil, :_tk_call_core,
              s(:false),
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :depth), :kind_of?,
                  s(:const, nil, :Integer)), :!),
              s(:send,
                s(:lvar, :depth), :==,
                s(:int, 0))),
            s(:send, nil, :tk_split_simplelist,
              s(:lvar, :val),
              s(:false),
              s(:lvar, :val_enc)),
            s(:send, nil, :tk_split_list,
              s(:lvar, :val),
              s(:lvar, :depth),
              s(:false),
              s(:lvar, :val_enc))))),
      s(:def, :tk_call_to_list,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_to_list_core,
          s(:int, -1),
          s(:nil),
          s(:true),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_to_list_without_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_to_list_core,
          s(:int, -1),
          s(:false),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_to_list_with_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_to_list_core,
          s(:int, -1),
          s(:true),
          s(:true),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_to_simplelist,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_to_list_core,
          s(:int, 0),
          s(:nil),
          s(:true),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_to_simplelist_without_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_to_list_core,
          s(:int, 0),
          s(:false),
          s(:false),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :tk_call_to_simplelist_with_enc,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :_tk_call_to_list_core,
          s(:int, 0),
          s(:true),
          s(:true),
          s(:splat,
            s(:lvar, :args)))))),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkCore)),
      s(:send, nil, :extend,
        s(:const, nil, :Tk)),
      s(:casgn, nil, :TCL_VERSION,
        s(:send,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "info"),
            s(:str, "tclversion")), :freeze)),
      s(:casgn, nil, :TCL_PATCHLEVEL,
        s(:send,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "info"),
            s(:str, "patchlevel")), :freeze)),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :major),
          s(:lvasgn, :minor)),
        s(:send,
          s(:const, nil, :TCL_VERSION), :split,
          s(:str, "."))),
      s(:casgn, nil, :TCL_MAJOR_VERSION,
        s(:send,
          s(:lvar, :major), :to_i)),
      s(:casgn, nil, :TCL_MINOR_VERSION,
        s(:send,
          s(:lvar, :minor), :to_i)),
      s(:casgn, nil, :TK_VERSION,
        s(:send,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "set"),
            s(:str, "tk_version")), :freeze)),
      s(:casgn, nil, :TK_PATCHLEVEL,
        s(:send,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "set"),
            s(:str, "tk_patchLevel")), :freeze)),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :major),
          s(:lvasgn, :minor)),
        s(:send,
          s(:const, nil, :TK_VERSION), :split,
          s(:str, "."))),
      s(:casgn, nil, :TK_MAJOR_VERSION,
        s(:send,
          s(:lvar, :major), :to_i)),
      s(:casgn, nil, :TK_MINOR_VERSION,
        s(:send,
          s(:lvar, :minor), :to_i)),
      s(:casgn, nil, :JAPANIZED_TK,
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "info"),
                s(:str, "commands"),
                s(:str, "kanji")), :!=,
              s(:str, ""))), :freeze)),
      s(:defs,
        s(:const, nil, :Tk), :const_missing,
        s(:args,
          s(:arg, :sym)),
        s(:case,
          s(:begin,
            s(:lvar, :sym)),
          s(:when,
            s(:sym, :TCL_LIBRARY),
            s(:begin,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:str, "tcl_library")),
              s(:send,
                s(:send,
                  s(:const, nil, :INTERP), :_invoke,
                  s(:str, "set"),
                  s(:str, "tcl_library")), :freeze))),
          s(:when,
            s(:sym, :TK_LIBRARY),
            s(:begin,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:str, "tk_library")),
              s(:send,
                s(:send,
                  s(:const, nil, :INTERP), :_invoke,
                  s(:str, "set"),
                  s(:str, "tk_library")), :freeze))),
          s(:when,
            s(:sym, :LIBRARY),
            s(:send,
              s(:send,
                s(:const, nil, :INTERP), :_invoke,
                s(:str, "info"),
                s(:str, "library")), :freeze)),
          s(:when,
            s(:sym, :PLATFORM),
            s(:sym, :TCL_PLATFORM),
            s(:begin,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:str, "tcl_platform")),
              s(:send,
                s(:const, nil, :Hash), :[],
                s(:splat,
                  s(:send, nil, :tk_split_simplelist,
                    s(:send,
                      s(:const, nil, :INTERP), :_invoke_without_enc,
                      s(:str, "array"),
                      s(:str, "get"),
                      s(:str, "tcl_platform"))))))),
          s(:when,
            s(:sym, :ENV),
            s(:begin,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:str, "env")),
              s(:send,
                s(:const, nil, :Hash), :[],
                s(:splat,
                  s(:send, nil, :tk_split_simplelist,
                    s(:send,
                      s(:const, nil, :INTERP), :_invoke,
                      s(:str, "array"),
                      s(:str, "get"),
                      s(:str, "env"))))))),
          s(:when,
            s(:sym, :AUTO_INDEX),
            s(:begin,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:str, "auto_index")),
              s(:send,
                s(:const, nil, :Hash), :[],
                s(:splat,
                  s(:send, nil, :tk_split_simplelist,
                    s(:send,
                      s(:const, nil, :INTERP), :_invoke,
                      s(:str, "array"),
                      s(:str, "get"),
                      s(:str, "auto_index"))))))),
          s(:when,
            s(:sym, :PRIV),
            s(:sym, :PRIVATE),
            s(:sym, :TK_PRIV),
            s(:begin,
              s(:lvasgn, :priv,
                s(:hash)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :INTERP), :_invoke_without_enc,
                    s(:str, "info"),
                    s(:str, "vars"),
                    s(:str, "tk::Priv")), :!=,
                  s(:str, "")),
                s(:lvasgn, :var_nam,
                  s(:str, "tk::Priv")),
                s(:lvasgn, :var_nam,
                  s(:str, "tkPriv"))),
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "global"),
                s(:lvar, :var_nam)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Hash), :[],
                    s(:splat,
                      s(:send, nil, :tk_split_simplelist,
                        s(:send,
                          s(:const, nil, :INTERP), :_invoke,
                          s(:str, "array"),
                          s(:str, "get"),
                          s(:lvar, :var_nam))))), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:begin,
                  s(:send,
                    s(:lvar, :k), :freeze),
                  s(:case,
                    s(:lvar, :v),
                    s(:when,
                      s(:regexp,
                        s(:str, "^-?\\d+$"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :priv), :[]=,
                        s(:lvar, :k),
                        s(:send,
                          s(:lvar, :v), :to_i))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^-?\\d+\\.?\\d*(e[-+]?\\d+)?$"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :priv), :[]=,
                        s(:lvar, :k),
                        s(:send,
                          s(:lvar, :v), :to_f))),
                    s(:send,
                      s(:lvar, :priv), :[]=,
                      s(:lvar, :k),
                      s(:send,
                        s(:lvar, :v), :freeze))))),
              s(:lvar, :priv))),
          s(:send, nil, :raise,
            s(:const, nil, :NameError),
            s(:send,
              s(:str, "uninitialized constant Tk::"), :+,
              s(:send,
                s(:lvar, :sym), :id2name))))),
      s(:defs,
        s(:const, nil, :Tk), :errorInfo,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:str, "errorInfo")),
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "set"),
            s(:str, "errorInfo")))),
      s(:defs,
        s(:const, nil, :Tk), :errorCode,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :INTERP), :_invoke_without_enc,
            s(:str, "global"),
            s(:str, "errorCode")),
          s(:lvasgn, :code,
            s(:send, nil, :tk_split_simplelist,
              s(:send,
                s(:const, nil, :INTERP), :_invoke_without_enc,
                s(:str, "set"),
                s(:str, "errorCode")))),
          s(:case,
            s(:send,
              s(:lvar, :code), :[],
              s(:int, 0)),
            s(:when,
              s(:str, "CHILDKILLED"),
              s(:str, "CHILDSTATUS"),
              s(:str, "CHILDSUSP"),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :pid,
                      s(:send, nil, :Integer,
                        s(:send,
                          s(:lvar, :code), :[],
                          s(:int, 1)))),
                    s(:send,
                      s(:lvar, :code), :[]=,
                      s(:int, 1),
                      s(:lvar, :pid))),
                  s(:resbody, nil, nil, nil), nil))), nil),
          s(:lvar, :code))),
      s(:defs,
        s(:const, nil, :Tk), :has_mainwindow?,
        s(:args),
        s(:send,
          s(:const, nil, :INTERP), :has_mainwindow?)),
      s(:def, :root,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :Root), :new)),
      s(:defs,
        s(:const, nil, :Tk), :load_tclscript,
        s(:args,
          s(:arg, :file),
          s(:optarg, :enc,
            s(:nil))),
        s(:if,
          s(:lvar, :enc),
          s(:send, nil, :tk_call,
            s(:str, "source"),
            s(:str, "-encoding"),
            s(:lvar, :enc),
            s(:lvar, :file)),
          s(:send, nil, :tk_call,
            s(:str, "source"),
            s(:lvar, :file)))),
      s(:defs,
        s(:const, nil, :Tk), :load_tcllibrary,
        s(:args,
          s(:arg, :file),
          s(:optarg, :pkg_name,
            s(:const, nil, :None)),
          s(:optarg, :interp,
            s(:const, nil, :None))),
        s(:send, nil, :tk_call,
          s(:str, "load"),
          s(:lvar, :file),
          s(:lvar, :pkg_name),
          s(:lvar, :interp))),
      s(:defs,
        s(:const, nil, :Tk), :unload_tcllibrary,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :args), :[],
              s(:int, -1)), :kind_of?,
            s(:const, nil, :Hash)),
          s(:begin,
            s(:lvasgn, :keys,
              s(:send, nil, :_symbolkey2str,
                s(:send,
                  s(:lvar, :args), :pop))),
            s(:lvasgn, :nocomp,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:str, "nocomplain"))),
                s(:str, "-nocomplain"),
                s(:const, nil, :None))),
            s(:lvasgn, :keeplib,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :keys), :[],
                    s(:str, "keeplibrary"))),
                s(:str, "-keeplibrary"),
                s(:const, nil, :None))),
            s(:send, nil, :tk_call,
              s(:str, "unload"),
              s(:lvar, :nocomp),
              s(:lvar, :keeplib),
              s(:str, "--"),
              s(:splat,
                s(:lvar, :args)))),
          s(:send, nil, :tk_call,
            s(:str, "unload"),
            s(:splat,
              s(:lvar, :args))))),
      s(:defs,
        s(:const, nil, :Tk), :pkgconfig_list,
        s(:args,
          s(:arg, :mod)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :mod), :kind_of?,
              s(:const, nil, :Module)),
            s(:if,
              s(:send,
                s(:lvar, :mod), :respond_to?,
                s(:sym, :package_name)),
              s(:lvasgn, :pkgname,
                s(:send,
                  s(:lvar, :mod), :package_name)),
              s(:if,
                s(:send,
                  s(:lvar, :mod), :const_defined?,
                  s(:sym, :PACKAGE_NAME)),
                s(:lvasgn, :pkgname,
                  s(:const,
                    s(:lvar, :mod), :PACKAGE_NAME)),
                s(:send, nil, :fail,
                  s(:const, nil, :NotImplementedError),
                  s(:str, "may not be a module for a Tcl extension")))),
            s(:lvasgn, :pkgname,
              s(:send,
                s(:lvar, :mod), :to_s))),
          s(:if,
            s(:send,
              s(:lvar, :pkgname), :=~,
              s(:regexp,
                s(:str, "^::"),
                s(:regopt))), nil,
            s(:lvasgn, :pkgname,
              s(:send,
                s(:str, "::"), :<<,
                s(:lvar, :pkgname)))),
          s(:send, nil, :tk_split_list,
            s(:send, nil, :tk_call,
              s(:send,
                s(:lvar, :pkgname), :+,
                s(:str, "::pkgconfig")),
              s(:str, "list"))))),
      s(:defs,
        s(:const, nil, :Tk), :pkgconfig_get,
        s(:args,
          s(:arg, :mod),
          s(:arg, :key)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :mod), :kind_of?,
              s(:const, nil, :Module)),
            s(:if,
              s(:send,
                s(:lvar, :mod), :respond_to?,
                s(:sym, :package_name)),
              s(:lvasgn, :pkgname,
                s(:send,
                  s(:lvar, :mod), :package_name)),
              s(:send, nil, :fail,
                s(:const, nil, :NotImplementedError),
                s(:str, "may not be a module for a Tcl extension"))),
            s(:lvasgn, :pkgname,
              s(:send,
                s(:lvar, :mod), :to_s))),
          s(:if,
            s(:send,
              s(:lvar, :pkgname), :=~,
              s(:regexp,
                s(:str, "^::"),
                s(:regopt))), nil,
            s(:lvasgn, :pkgname,
              s(:send,
                s(:str, "::"), :<<,
                s(:lvar, :pkgname)))),
          s(:send, nil, :tk_call,
            s(:send,
              s(:lvar, :pkgname), :+,
              s(:str, "::pkgconfig")),
            s(:str, "get"),
            s(:lvar, :key)))),
      s(:defs,
        s(:const, nil, :Tk), :tcl_pkgconfig_list,
        s(:args),
        s(:send,
          s(:const, nil, :Tk), :pkgconfig_list,
          s(:str, "::tcl"))),
      s(:defs,
        s(:const, nil, :Tk), :tcl_pkgconfig_get,
        s(:args,
          s(:arg, :key)),
        s(:send,
          s(:const, nil, :Tk), :pkgconfig_get,
          s(:str, "::tcl"),
          s(:lvar, :key))),
      s(:defs,
        s(:const, nil, :Tk), :tk_pkgconfig_list,
        s(:args),
        s(:send,
          s(:const, nil, :Tk), :pkgconfig_list,
          s(:str, "::tk"))),
      s(:defs,
        s(:const, nil, :Tk), :tk_pkgconfig_get,
        s(:args,
          s(:arg, :key)),
        s(:send,
          s(:const, nil, :Tk), :pkgconfig_get,
          s(:str, "::tk"),
          s(:lvar, :key))),
      s(:defs,
        s(:const, nil, :Tk), :bell,
        s(:args,
          s(:optarg, :nice,
            s(:false))),
        s(:begin,
          s(:if,
            s(:lvar, :nice),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "bell"),
              s(:str, "-nice")),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "bell"))),
          s(:nil))),
      s(:defs,
        s(:const, nil, :Tk), :bell_on_display,
        s(:args,
          s(:arg, :win),
          s(:optarg, :nice,
            s(:false))),
        s(:begin,
          s(:if,
            s(:lvar, :nice),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "bell"),
              s(:str, "-displayof"),
              s(:lvar, :win),
              s(:str, "-nice")),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "bell"),
              s(:str, "-displayof"),
              s(:lvar, :win))),
          s(:nil))),
      s(:defs,
        s(:const, nil, :Tk), :destroy,
        s(:args,
          s(:restarg, :wins)),
        s(:send, nil, :tk_call_without_enc,
          s(:str, "destroy"),
          s(:splat,
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :wins), :collect),
                s(:args,
                  s(:arg, :win)),
                s(:if,
                  s(:send,
                    s(:lvar, :win), :kind_of?,
                    s(:const, nil, :TkWindow)),
                  s(:send,
                    s(:lvar, :win), :epath),
                  s(:lvar, :win))))))),
      s(:defs,
        s(:const, nil, :Tk), :exit,
        s(:args),
        s(:and,
          s(:send,
            s(:const,
              s(:const, nil, :TkCore), :INTERP), :has_mainwindow?),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "destroy"),
            s(:str, ".")))),
      s(:defs,
        s(:const, nil, :Tk), :sleep,
        s(:args,
          s(:optarg, :ms,
            s(:nil)),
          s(:optarg, :id,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :id),
            s(:lvasgn, :var,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :id), :kind_of?,
                    s(:const, nil, :TkVariable))),
                s(:lvar, :id),
                s(:send,
                  s(:const, nil, :TkVarAccess), :new,
                  s(:send,
                    s(:lvar, :id), :to_s)))),
            s(:lvasgn, :var,
              s(:send,
                s(:const, nil, :TkVariable), :new))),
          s(:if,
            s(:lvar, :ms),
            s(:send,
              s(:lvar, :var), :value=,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "after"),
                s(:lvar, :ms),
                s(:block,
                  s(:send, nil, :proc),
                  s(:args),
                  s(:send,
                    s(:lvar, :var), :value=,
                    s(:int, 0))))), nil),
          s(:send,
            s(:lvar, :var), :thread_wait),
          s(:lvar, :ms))),
      s(:defs,
        s(:const, nil, :Tk), :wakeup,
        s(:args,
          s(:arg, :id)),
        s(:begin,
          s(:send,
            s(:begin,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :id), :kind_of?,
                    s(:const, nil, :TkVariable))),
                s(:lvar, :id),
                s(:send,
                  s(:const, nil, :TkVarAccess), :new,
                  s(:send,
                    s(:lvar, :id), :to_s)))), :value=,
            s(:int, 0)),
          s(:nil))),
      s(:defs,
        s(:const, nil, :Tk), :pack,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPack), :configure,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :pack_forget,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPack), :forget,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :unpack,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPack), :forget,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :grid,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkGrid), :configure,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :grid_forget,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkGrid), :forget,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :ungrid,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkGrid), :forget,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :place,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPlace), :configure,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :place_forget,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPlace), :forget,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :unplace,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkPlace), :forget,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:const, nil, :Tk), :update,
        s(:args,
          s(:optarg, :idle,
            s(:nil))),
        s(:if,
          s(:lvar, :idle),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "update"),
            s(:str, "idletasks")),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "update")))),
      s(:defs,
        s(:const, nil, :Tk), :update_idletasks,
        s(:args),
        s(:send, nil, :update,
          s(:true))),
      s(:def, :update,
        s(:args,
          s(:optarg, :idle,
            s(:nil))),
        s(:begin,
          s(:send,
            s(:const, nil, :Tk), :update,
            s(:lvar, :idle)),
          s(:self))),
      s(:defs,
        s(:const, nil, :Tk), :thread_update,
        s(:args,
          s(:optarg, :idle,
            s(:nil))),
        s(:if,
          s(:lvar, :idle),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "thread_update"),
            s(:str, "idletasks")),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "thread_update")))),
      s(:defs,
        s(:const, nil, :Tk), :thread_update_idletasks,
        s(:args),
        s(:send, nil, :thread_update,
          s(:true))),
      s(:defs,
        s(:const, nil, :Tk), :lower_window,
        s(:args,
          s(:arg, :win),
          s(:optarg, :below,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "lower"),
            s(:send, nil, :_epath,
              s(:lvar, :win)),
            s(:send, nil, :_epath,
              s(:lvar, :below))),
          s(:nil))),
      s(:defs,
        s(:const, nil, :Tk), :raise_window,
        s(:args,
          s(:arg, :win),
          s(:optarg, :above,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "raise"),
            s(:send, nil, :_epath,
              s(:lvar, :win)),
            s(:send, nil, :_epath,
              s(:lvar, :above))),
          s(:nil))),
      s(:defs,
        s(:const, nil, :Tk), :current_grabs,
        s(:args,
          s(:optarg, :win,
            s(:nil))),
        s(:if,
          s(:lvar, :win),
          s(:send, nil, :window,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "grab"),
              s(:str, "current"),
              s(:lvar, :win))),
          s(:send, nil, :tk_split_list,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "grab"),
              s(:str, "current"))))),
      s(:defs,
        s(:const, nil, :Tk), :focus,
        s(:args,
          s(:optarg, :display,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :display), :==,
            s(:nil)),
          s(:send, nil, :window,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "focus"))),
          s(:send, nil, :window,
            s(:send, nil, :tk_call_without_enc,
              s(:str, "focus"),
              s(:str, "-displayof"),
              s(:lvar, :display))))),
      s(:defs,
        s(:const, nil, :Tk), :focus_to,
        s(:args,
          s(:arg, :win),
          s(:optarg, :force,
            s(:false))),
        s(:if,
          s(:lvar, :force),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "focus"),
            s(:str, "-force"),
            s(:lvar, :win)),
          s(:send, nil, :tk_call_without_enc,
            s(:str, "focus"),
            s(:lvar, :win)))),
      s(:defs,
        s(:const, nil, :Tk), :focus_lastfor,
        s(:args,
          s(:arg, :win)),
        s(:send, nil, :window,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "focus"),
            s(:str, "-lastfor"),
            s(:lvar, :win)))),
      s(:defs,
        s(:const, nil, :Tk), :focus_next,
        s(:args,
          s(:arg, :win)),
        s(:send,
          s(:const, nil, :TkManageFocus), :next,
          s(:lvar, :win))),
      s(:defs,
        s(:const, nil, :Tk), :focus_prev,
        s(:args,
          s(:arg, :win)),
        s(:send,
          s(:const, nil, :TkManageFocus), :prev,
          s(:lvar, :win))),
      s(:defs,
        s(:const, nil, :Tk), :strictMotif,
        s(:args,
          s(:optarg, :mode,
            s(:const, nil, :None))),
        s(:send, nil, :bool,
          s(:send, nil, :tk_call_without_enc,
            s(:str, "set"),
            s(:str, "tk_strictMotif"),
            s(:lvar, :mode)))),
      s(:defs,
        s(:const, nil, :Tk), :show_kinsoku,
        s(:args,
          s(:optarg, :mode,
            s(:str, "both"))),
        s(:kwbegin,
          s(:rescue,
            s(:if,
              s(:and,
                s(:send,
                  s(:regexp,
                    s(:str, "^8\\.*"),
                    s(:regopt)), :===,
                  s(:const, nil, :TK_VERSION)),
                s(:const, nil, :JAPANIZED_TK)),
              s(:send, nil, :tk_split_simplelist,
                s(:send, nil, :tk_call,
                  s(:str, "kinsoku"),
                  s(:str, "show"),
                  s(:lvar, :mode))), nil),
            s(:resbody, nil, nil, nil), nil))),
      s(:defs,
        s(:const, nil, :Tk), :add_kinsoku,
        s(:args,
          s(:arg, :chars),
          s(:optarg, :mode,
            s(:str, "both"))),
        s(:kwbegin,
          s(:rescue,
            s(:if,
              s(:and,
                s(:send,
                  s(:regexp,
                    s(:str, "^8\\.*"),
                    s(:regopt)), :===,
                  s(:const, nil, :TK_VERSION)),
                s(:const, nil, :JAPANIZED_TK)),
              s(:send, nil, :tk_split_simplelist,
                s(:send, nil, :tk_call,
                  s(:str, "kinsoku"),
                  s(:str, "add"),
                  s(:lvar, :mode),
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:lvar, :chars), :split,
                        s(:str, "")))))),
              s(:array)),
            s(:resbody, nil, nil,
              s(:array)), nil))),
      s(:defs,
        s(:const, nil, :Tk), :delete_kinsoku,
        s(:args,
          s(:arg, :chars),
          s(:optarg, :mode,
            s(:str, "both"))),
        s(:kwbegin,
          s(:rescue,
            s(:if,
              s(:and,
                s(:send,
                  s(:regexp,
                    s(:str, "^8\\.*"),
                    s(:regopt)), :===,
                  s(:const, nil, :TK_VERSION)),
                s(:const, nil, :JAPANIZED_TK)),
              s(:send, nil, :tk_split_simplelist,
                s(:send, nil, :tk_call,
                  s(:str, "kinsoku"),
                  s(:str, "delete"),
                  s(:lvar, :mode),
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:lvar, :chars), :split,
                        s(:str, "")))))), nil),
            s(:resbody, nil, nil, nil), nil))),
      s(:defs,
        s(:const, nil, :Tk), :toUTF8,
        s(:args,
          s(:arg, :str),
          s(:optarg, :encoding,
            s(:nil))),
        s(:send, nil, :_toUTF8,
          s(:lvar, :str),
          s(:lvar, :encoding))),
      s(:defs,
        s(:const, nil, :Tk), :fromUTF8,
        s(:args,
          s(:arg, :str),
          s(:optarg, :encoding,
            s(:nil))),
        s(:send, nil, :_fromUTF8,
          s(:lvar, :str),
          s(:lvar, :encoding))))),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:defs,
        s(:const, nil, :Tk), :subst_utf_backslash,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :EncodedString), :subst_utf_backslash,
          s(:lvar, :str))),
      s(:defs,
        s(:const, nil, :Tk), :subst_tk_backslash,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :EncodedString), :subst_tk_backslash,
          s(:lvar, :str))),
      s(:defs,
        s(:const, nil, :Tk), :utf_to_backslash_sequence,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :EncodedString), :utf_to_backslash_sequence,
          s(:lvar, :str))),
      s(:defs,
        s(:const, nil, :Tk), :utf_to_backslash,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :EncodedString), :utf_to_backslash_sequence,
          s(:lvar, :str))),
      s(:defs,
        s(:const, nil, :Tk), :to_backslash_sequence,
        s(:args,
          s(:arg, :str)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :EncodedString), :to_backslash_sequence,
          s(:lvar, :str))))),
  s(:if,
    s(:begin,
      s(:and,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "^(8\\.[1-9]|9\\.|[1-9][0-9])"),
            s(:regopt)),
          s(:const,
            s(:const, nil, :Tk), :TCL_VERSION)),
        s(:send,
          s(:const,
            s(:const, nil, :Tk), :JAPANIZED_TK), :!))),
    s(:begin,
      s(:module,
        s(:const, nil, :Tk),
        s(:begin,
          s(:module,
            s(:const, nil, :Encoding),
            s(:begin,
              s(:send, nil, :extend,
                s(:const, nil, :Encoding)),
              s(:casgn, nil, :TkCommandNames,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:str, "encoding"), :freeze)), :freeze)),
              s(:if,
                s(:const,
                  s(:const, nil, :TkCore), :WITH_ENCODING),
                s(:begin,
                  s(:casgn, nil, :RubyEncoding,
                    s(:const,
                      s(:cbase), :Encoding)),
                  s(:casgn, nil, :BINARY_NAME,
                    s(:send,
                      s(:str, "binary"), :freeze)),
                  s(:casgn, nil, :UTF8_NAME,
                    s(:send,
                      s(:str, "utf-8"), :freeze)),
                  s(:casgn, nil, :DEFAULT_EXTERNAL_NAME,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :RubyEncoding), :default_external), :name), :freeze)),
                  s(:casgn, nil, :DEFAULT_INTERNAL_NAME,
                    s(:rescue,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :RubyEncoding), :default_internal), :name), :freeze),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:casgn, nil, :BINARY,
                    s(:send,
                      s(:const, nil, :RubyEncoding), :find,
                      s(:const, nil, :BINARY_NAME))),
                  s(:casgn, nil, :UNKNOWN,
                    s(:send,
                      s(:const, nil, :RubyEncoding), :find,
                      s(:str, "ASCII-8BIT"))),
                  s(:casgn, nil, :ENCODING_TABLE,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :encoding_table))), nil),
              s(:if,
                s(:const,
                  s(:const, nil, :TkCore), :WITH_ENCODING),
                s(:begin,
                  s(:def, :force_default_encoding,
                    s(:args,
                      s(:arg, :mode)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :force_default_encoding=,
                      s(:lvar, :mode))),
                  s(:def, :force_default_encoding?,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :force_default_encoding?)),
                  s(:def, :default_encoding=,
                    s(:args,
                      s(:arg, :enc)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :default_encoding=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:lvar, :enc)))),
                  s(:def, :encoding=,
                    s(:args,
                      s(:arg, :enc)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :encoding=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:lvar, :enc)))),
                  s(:def, :encoding_name,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :encoding))),
                  s(:def, :encoding_obj,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_obj,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :encoding))),
                  s(:alias,
                    s(:sym, :encoding),
                    s(:sym, :encoding_name)),
                  s(:alias,
                    s(:sym, :default_encoding),
                    s(:sym, :encoding_name)),
                  s(:def, :tk_encoding_names,
                    s(:args),
                    s(:send,
                      s(:const, nil, :TkComm), :simplelist,
                      s(:send,
                        s(:const,
                          s(:const, nil, :TkCore), :INTERP), :_invoke_without_enc,
                        s(:str, "encoding"),
                        s(:str, "names")))),
                  s(:def, :encoding_names,
                    s(:args),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:self), :tk_encoding_names), :find_all),
                      s(:args,
                        s(:arg, :name)),
                      s(:rescue,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                          s(:lvar, :name)),
                        s(:resbody, nil, nil,
                          s(:false)), nil))),
                  s(:def, :encoding_objs,
                    s(:args),
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:self), :tk_encoding_names), :map!),
                        s(:args,
                          s(:arg, :name)),
                        s(:rescue,
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_obj,
                            s(:lvar, :name)),
                          s(:resbody, nil, nil,
                            s(:nil)), nil)), :compact)),
                  s(:def, :encoding_system=,
                    s(:args,
                      s(:arg, :enc)),
                    s(:send,
                      s(:const, nil, :TclTkLib), :encoding_system=,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:lvar, :enc)))),
                  s(:def, :encoding_system_name,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                      s(:send,
                        s(:const, nil, :TclTkLib), :encoding_system))),
                  s(:def, :encoding_system_obj,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_obj,
                      s(:send,
                        s(:const, nil, :TclTkLib), :encoding_system))),
                  s(:alias,
                    s(:sym, :encoding_system),
                    s(:sym, :encoding_system_name))),
                s(:begin,
                  s(:def, :force_default_encoding=,
                    s(:args,
                      s(:arg, :mode)),
                    s(:true)),
                  s(:def, :force_default_encoding?,
                    s(:args),
                    s(:true)),
                  s(:def, :default_encoding=,
                    s(:args,
                      s(:arg, :enc)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :default_encoding=,
                      s(:lvar, :enc))),
                  s(:def, :encoding=,
                    s(:args,
                      s(:arg, :enc)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :encoding=,
                      s(:lvar, :enc))),
                  s(:def, :encoding_obj,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :encoding)),
                  s(:def, :encoding_name,
                    s(:args),
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :encoding)),
                  s(:alias,
                    s(:sym, :encoding),
                    s(:sym, :encoding_name)),
                  s(:alias,
                    s(:sym, :default_encoding),
                    s(:sym, :encoding_name)),
                  s(:def, :tk_encoding_names,
                    s(:args),
                    s(:send,
                      s(:const, nil, :TkComm), :simplelist,
                      s(:send,
                        s(:const, nil, :Tk), :tk_call,
                        s(:str, "encoding"),
                        s(:str, "names")))),
                  s(:def, :encoding_objs,
                    s(:args),
                    s(:send,
                      s(:self), :tk_encoding_names)),
                  s(:def, :encoding_names,
                    s(:args),
                    s(:send,
                      s(:self), :tk_encoding_names)),
                  s(:def, :encoding_system=,
                    s(:args,
                      s(:arg, :enc)),
                    s(:send,
                      s(:const, nil, :TclTkLib), :encoding_system=,
                      s(:lvar, :enc))),
                  s(:def, :encoding_system_name,
                    s(:args),
                    s(:send,
                      s(:const, nil, :TclTkLib), :encoding_system)),
                  s(:def, :encoding_system_obj,
                    s(:args),
                    s(:send,
                      s(:const, nil, :TclTkLib), :encoding_system)),
                  s(:alias,
                    s(:sym, :encoding_system),
                    s(:sym, :encoding_system_name)))),
              s(:def, :encoding_convertfrom,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :enc,
                    s(:nil))),
                s(:begin,
                  s(:if,
                    s(:lvar, :enc), nil,
                    s(:lvasgn, :enc,
                      s(:send, nil, :encoding_system_name))),
                  s(:lvasgn, :str,
                    s(:send,
                      s(:lvar, :str), :dup)),
                  s(:if,
                    s(:const,
                      s(:const, nil, :TkCore), :WITH_ENCODING),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :str), :kind_of?,
                          s(:const,
                            s(:const, nil, :Tk), :EncodedString)),
                        s(:send,
                          s(:lvar, :str), :__instance_variable_set,
                          s(:str, "@encoding"),
                          s(:nil)),
                        s(:send,
                          s(:lvar, :str), :instance_variable_set,
                          s(:str, "@encoding"),
                          s(:nil))),
                      s(:send,
                        s(:lvar, :str), :force_encoding,
                        s(:str, "binary"))),
                    s(:send,
                      s(:lvar, :str), :instance_variable_set,
                      s(:str, "@encoding"),
                      s(:str, "binary"))),
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_invoke_without_enc,
                      s(:str, "encoding"),
                      s(:str, "convertfrom"),
                      s(:lvar, :enc),
                      s(:lvar, :str))),
                  s(:if,
                    s(:const,
                      s(:const, nil, :TkCore), :WITH_ENCODING),
                    s(:send,
                      s(:lvar, :ret), :force_encoding,
                      s(:str, "utf-8")),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Tk), :UTF8_String), :new,
                      s(:lvar, :ret))),
                  s(:lvar, :ret))),
              s(:alias,
                s(:sym, :encoding_convert_from),
                s(:sym, :encoding_convertfrom)),
              s(:def, :encoding_convertto,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :enc,
                    s(:nil))),
                s(:begin,
                  s(:if,
                    s(:lvar, :enc), nil,
                    s(:lvasgn, :enc,
                      s(:send, nil, :encoding_system_name))),
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:const,
                        s(:const, nil, :TkCore), :INTERP), :_invoke_without_enc,
                      s(:str, "encoding"),
                      s(:str, "convertto"),
                      s(:lvar, :enc),
                      s(:lvar, :str))),
                  s(:if,
                    s(:const,
                      s(:const, nil, :TkCore), :WITH_ENCODING),
                    s(:send,
                      s(:lvar, :ret), :force_encoding,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_obj,
                        s(:lvar, :enc))), nil),
                  s(:lvar, :ret))),
              s(:alias,
                s(:sym, :encoding_convert_to),
                s(:sym, :encoding_convertto)),
              s(:def, :encoding_dirs,
                s(:args),
                s(:send,
                  s(:const, nil, :TkComm), :simplelist,
                  s(:send,
                    s(:const, nil, :Tk), :tk_call_without_enc,
                    s(:str, "encoding"),
                    s(:str, "dirs")))),
              s(:def, :encoding_dirs=,
                s(:args,
                  s(:arg, :dir_list)),
                s(:send,
                  s(:const, nil, :Tk), :tk_call_without_enc,
                  s(:str, "encoding"),
                  s(:str, "dirs"),
                  s(:lvar, :dir_list))))),
          s(:send, nil, :extend,
            s(:const, nil, :Encoding)))),
      s(:class,
        s(:const, nil, :TclTkIp), nil,
        s(:begin,
          s(:def, :force_default_encoding=,
            s(:args,
              s(:arg, :mode)),
            s(:send,
              s(:ivar, :@force_default_encoding), :[]=,
              s(:int, 0),
              s(:if,
                s(:begin,
                  s(:lvar, :mode)),
                s(:true),
                s(:false)))),
          s(:def, :force_default_encoding?,
            s(:args),
            s(:or_asgn,
              s(:send,
                s(:ivar, :@force_default_encoding), :[],
                s(:int, 0)),
              s(:false))),
          s(:def, :default_encoding=,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:const,
                    s(:const, nil, :Tk), :WITH_ENCODING),
                  s(:send,
                    s(:lvar, :name), :kind_of?,
                    s(:const,
                      s(:cbase), :Encoding))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :name), :name)), nil),
              s(:send,
                s(:ivar, :@encoding), :[]=,
                s(:int, 0),
                s(:send,
                  s(:send,
                    s(:lvar, :name), :to_s), :dup)))),
          s(:def, :encoding=,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:send,
                s(:self), :force_default_encoding=,
                s(:true)),
              s(:send,
                s(:self), :default_encoding=,
                s(:lvar, :name)))),
          s(:def, :encoding_name,
            s(:args),
            s(:if,
              s(:begin,
                s(:send,
                  s(:ivar, :@encoding), :[],
                  s(:int, 0))),
              s(:send,
                s(:send,
                  s(:ivar, :@encoding), :[],
                  s(:int, 0)), :dup),
              s(:nil))),
          s(:alias,
            s(:sym, :encoding),
            s(:sym, :encoding_name)),
          s(:alias,
            s(:sym, :default_encoding),
            s(:sym, :encoding_name)),
          s(:def, :encoding_obj,
            s(:args),
            s(:if,
              s(:const,
                s(:const, nil, :Tk), :WITH_ENCODING),
              s(:send,
                s(:const,
                  s(:const, nil, :Tk), :Encoding), :tcl2rb_encoding,
                s(:send,
                  s(:ivar, :@encoding), :[],
                  s(:int, 0))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:ivar, :@encoding), :[],
                    s(:int, 0))),
                s(:send,
                  s(:send,
                    s(:ivar, :@encoding), :[],
                    s(:int, 0)), :dup),
                s(:nil)))),
          s(:alias,
            s(:sym, :__toUTF8),
            s(:sym, :_toUTF8)),
          s(:alias,
            s(:sym, :__fromUTF8),
            s(:sym, :_fromUTF8)),
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Encoding)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:cbase), :Encoding), :class), :==,
                s(:const, nil, :Class))),
            s(:begin,
              s(:def, :_toUTF8,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :enc,
                    s(:nil))),
                s(:begin,
                  s(:if,
                    s(:lvar, :enc),
                    s(:kwbegin,
                      s(:rescue,
                        s(:lvasgn, :enc_name,
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                            s(:lvar, :enc))),
                        s(:resbody, nil, nil,
                          s(:begin,
                            s(:lvasgn, :str,
                              s(:send,
                                s(:send,
                                  s(:lvar, :str), :dup), :force_encoding,
                                s(:lvar, :enc))),
                            s(:send,
                              s(:lvar, :str), :encode!,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :Tk), :Encoding), :UTF8_NAME)),
                            s(:return,
                              s(:lvar, :str)))), nil)), nil),
                  s(:or_asgn,
                    s(:lvasgn, :enc_name),
                    s(:send,
                      s(:lvar, :str), :instance_variable_get,
                      s(:sym, :@encoding))),
                  s(:or_asgn,
                    s(:lvasgn, :enc_name),
                    s(:rescue,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:send,
                          s(:lvar, :str), :encoding)),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:if,
                    s(:lvar, :enc_name),
                    s(:begin,
                      s(:lvasgn, :encstr,
                        s(:send, nil, :__toUTF8,
                          s(:lvar, :str),
                          s(:lvar, :enc_name))),
                      s(:send,
                        s(:lvar, :encstr), :force_encoding,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :UTF8_NAME)),
                      s(:return,
                        s(:lvar, :encstr))),
                    s(:kwbegin,
                      s(:rescue,
                        s(:return,
                          s(:send,
                            s(:lvar, :str), :encode,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Tk), :Encoding), :UTF8_NAME))),
                        s(:resbody, nil, nil, nil), nil))),
                  s(:or_asgn,
                    s(:lvasgn, :enc_name),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                      s(:nil))),
                  s(:if,
                    s(:send,
                      s(:lvar, :enc_name), :==,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :BINARY_NAME)),
                    s(:return,
                      s(:send,
                        s(:send,
                          s(:lvar, :str), :dup), :force_encoding,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :BINARY_NAME))), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :str), :kind_of?,
                          s(:const,
                            s(:const, nil, :Tk), :EncodedString)), :!),
                      s(:send,
                        s(:self), :force_default_encoding?)),
                    s(:lvasgn, :enc_name,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:send,
                          s(:const, nil, :Tk), :default_encoding))), nil),
                  s(:lvasgn, :encstr,
                    s(:send, nil, :__toUTF8,
                      s(:lvar, :str),
                      s(:lvar, :enc_name))),
                  s(:send,
                    s(:lvar, :encstr), :force_encoding,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :Encoding), :UTF8_NAME)),
                  s(:lvar, :encstr))),
              s(:def, :_fromUTF8,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :enc,
                    s(:nil))),
                s(:begin,
                  s(:lvasgn, :enc_name,
                    s(:send,
                      s(:lvar, :str), :instance_variable_get,
                      s(:sym, :@encoding))),
                  s(:or_asgn,
                    s(:lvasgn, :enc_name),
                    s(:rescue,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:send,
                          s(:lvar, :str), :encoding)),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:if,
                    s(:send,
                      s(:lvar, :enc_name), :==,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :BINARY_NAME)),
                    s(:return,
                      s(:send,
                        s(:send,
                          s(:lvar, :str), :dup), :force_encoding,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :BINARY_NAME))), nil),
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :enc_name,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                          s(:lvar, :enc))),
                      s(:resbody, nil, nil,
                        s(:begin,
                          s(:lvasgn, :str,
                            s(:send,
                              s(:send,
                                s(:lvar, :str), :dup), :force_encoding,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :Tk), :Encoding), :UTF8_NAME))),
                          s(:send,
                            s(:lvar, :str), :encode!,
                            s(:lvar, :enc)),
                          s(:return,
                            s(:lvar, :str)))), nil)),
                  s(:lvasgn, :encstr,
                    s(:send, nil, :__fromUTF8,
                      s(:lvar, :str),
                      s(:lvar, :enc_name))),
                  s(:send,
                    s(:lvar, :encstr), :force_encoding,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_obj,
                      s(:lvar, :enc_name))),
                  s(:lvar, :encstr)))),
            s(:begin,
              s(:def, :_toUTF8,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :encoding,
                    s(:nil))),
                s(:send, nil, :__toUTF8,
                  s(:lvar, :str),
                  s(:lvar, :encoding))),
              s(:def, :_fromUTF8,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :encoding,
                    s(:nil))),
                s(:send, nil, :__fromUTF8,
                  s(:lvar, :str),
                  s(:lvar, :encoding))))),
          s(:alias,
            s(:sym, :__eval),
            s(:sym, :_eval)),
          s(:alias,
            s(:sym, :__invoke),
            s(:sym, :_invoke)),
          s(:def, :_eval,
            s(:args,
              s(:arg, :cmd)),
            s(:send, nil, :_fromUTF8,
              s(:send, nil, :__eval,
                s(:send, nil, :_toUTF8,
                  s(:lvar, :cmd))))),
          s(:def, :_invoke,
            s(:args,
              s(:restarg, :cmds)),
            s(:send, nil, :_fromUTF8,
              s(:send, nil, :__invoke,
                s(:splat,
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :cmds), :collect),
                      s(:args,
                        s(:arg, :cmd)),
                      s(:send, nil, :_toUTF8,
                        s(:lvar, :cmd)))))))),
          s(:alias,
            s(:sym, :_eval_with_enc),
            s(:sym, :_eval)),
          s(:alias,
            s(:sym, :_invoke_with_enc),
            s(:sym, :_invoke)))),
      s(:module,
        s(:const, nil, :TclTkLib),
        s(:sclass,
          s(:self),
          s(:begin,
            s(:def, :force_default_encoding=,
              s(:args,
                s(:arg, :mode)),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :force_default_encoding=,
                s(:lvar, :mode))),
            s(:def, :force_default_encoding?,
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :force_default_encoding?)),
            s(:def, :default_encoding=,
              s(:args,
                s(:arg, :name)),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :default_encoding=,
                s(:lvar, :name))),
            s(:alias,
              s(:sym, :_encoding),
              s(:sym, :encoding)),
            s(:alias,
              s(:sym, :_encoding=),
              s(:sym, :encoding=)),
            s(:def, :encoding=,
              s(:args,
                s(:arg, :name)),
              s(:begin,
                s(:if,
                  s(:const,
                    s(:const, nil, :Tk), :WITH_ENCODING),
                  s(:if,
                    s(:send,
                      s(:lvar, :name), :kind_of?,
                      s(:const,
                        s(:cbase), :Encoding)),
                    s(:lvasgn, :name,
                      s(:send,
                        s(:lvar, :name), :name)), nil), nil),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :encoding=,
                  s(:lvar, :name)))),
            s(:def, :encoding_name,
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :encoding)),
            s(:alias,
              s(:sym, :encoding),
              s(:sym, :encoding_name)),
            s(:alias,
              s(:sym, :default_encoding),
              s(:sym, :encoding_name)),
            s(:def, :encoding_obj,
              s(:args),
              s(:if,
                s(:const,
                  s(:const, nil, :Tk), :WITH_ENCODING),
                s(:send,
                  s(:const,
                    s(:const, nil, :Tk), :Encoding), :tcl2rb_encoding,
                  s(:send,
                    s(:const,
                      s(:const, nil, :TkCore), :INTERP), :encoding)),
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :encoding)))))),
      s(:if,
        s(:const,
          s(:const, nil, :TkCore), :WITH_ENCODING),
        s(:begin,
          s(:lvasgn, :loc_enc_obj,
            s(:send,
              s(:const,
                s(:cbase), :Encoding), :find,
              s(:str, "locale"))),
          s(:lvasgn, :ext_enc_obj,
            s(:send,
              s(:const,
                s(:cbase), :Encoding), :default_external)),
          s(:lvasgn, :int_enc_obj,
            s(:or,
              s(:send,
                s(:const,
                  s(:cbase), :Encoding), :default_internal),
              s(:lvar, :ext_enc_obj))),
          s(:lvasgn, :tksys_enc_name,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
              s(:send,
                s(:const, nil, :Tk), :encoding_system))),
          s(:if,
            s(:send,
              s(:lvar, :ext_enc_obj), :==,
              s(:const,
                s(:const,
                  s(:const, nil, :Tk), :Encoding), :UNKNOWN)),
            s(:if,
              s(:send,
                s(:lvar, :loc_enc_obj), :==,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :Encoding), :UNKNOWN)), nil,
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :loc_enc_name,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:lvar, :loc_enc_obj))),
                    s(:if,
                      s(:and,
                        s(:lvar, :loc_enc_name),
                        s(:send,
                          s(:lvar, :loc_enc_name), :!=,
                          s(:lvar, :tksys_enc_name))),
                      s(:send,
                        s(:const, nil, :Tk), :encoding_system=,
                        s(:lvar, :loc_enc_name)), nil)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :ArgumentError)), nil, nil), nil))),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :ext_enc_name,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                      s(:lvar, :ext_enc_obj))),
                  s(:if,
                    s(:and,
                      s(:lvar, :ext_enc_name),
                      s(:send,
                        s(:lvar, :ext_enc_name), :!=,
                        s(:lvar, :tksys_enc_name))),
                    s(:send,
                      s(:const, nil, :Tk), :encoding_system=,
                      s(:lvar, :ext_enc_name)), nil)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :ArgumentError)), nil, nil), nil))),
          s(:lvasgn, :enc_name,
            s(:nil)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :default_def,
                  s(:const, nil, :DEFAULT_TK_ENCODING)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:cbase), :Encoding), :find,
                      s(:send,
                        s(:lvar, :default_def), :to_s)), :!=,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Tk), :Encoding), :UNKNOWN)),
                  s(:lvasgn, :enc_name,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                      s(:lvar, :default_def))), nil)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError)), nil,
                s(:lvasgn, :enc_name,
                  s(:nil))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)), nil,
                s(:begin,
                  s(:lvasgn, :enc_name,
                    s(:nil)),
                  s(:send, nil, :fail,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "DEFAULT_TK_ENCODING has an unknown encoding "),
                      s(:begin,
                        s(:lvar, :default_def)))))), nil)),
          s(:if,
            s(:lvar, :enc_name), nil,
            s(:if,
              s(:send,
                s(:lvar, :int_enc_obj), :==,
                s(:const,
                  s(:const,
                    s(:const, nil, :Tk), :Encoding), :UNKNOWN)),
              s(:if,
                s(:send,
                  s(:lvar, :loc_enc_obj), :==,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Tk), :Encoding), :UNKNOWN)),
                s(:lvasgn, :enc_name,
                  s(:lvar, :tksys_enc_name)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :loc_enc_name,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                          s(:lvar, :loc_enc_obj))),
                      s(:if,
                        s(:lvar, :loc_enc_name),
                        s(:lvasgn, :enc_name,
                          s(:lvar, :loc_enc_name)),
                        s(:lvasgn, :enc_name,
                          s(:lvar, :tksys_enc_name)))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ArgumentError)), nil,
                      s(:lvasgn, :enc_name,
                        s(:lvar, :tksys_enc_name))), nil))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :int_enc_name,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Tk), :Encoding), :ENCODING_TABLE), :get_name,
                        s(:lvar, :int_enc_obj))),
                    s(:if,
                      s(:lvar, :int_enc_name),
                      s(:lvasgn, :enc_name,
                        s(:lvar, :int_enc_name)),
                      s(:lvasgn, :enc_name,
                        s(:lvar, :tksys_enc_name)))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :ArgumentError)), nil,
                    s(:lvasgn, :enc_name,
                      s(:lvar, :tksys_enc_name))), nil)))),
          s(:send,
            s(:const, nil, :Tk), :default_encoding=,
            s(:if,
              s(:begin,
                s(:lvar, :enc_name)),
              s(:lvar, :enc_name),
              s(:lvar, :tksys_enc_name)))),
        s(:case,
          s(:gvar, :$KCODE),
          s(:when,
            s(:regexp,
              s(:str, "^e"),
              s(:regopt, :i)),
            s(:begin,
              s(:send,
                s(:const, nil, :Tk), :encoding=,
                s(:str, "euc-jp")),
              s(:send,
                s(:const, nil, :Tk), :encoding_system=,
                s(:str, "euc-jp")))),
          s(:when,
            s(:regexp,
              s(:str, "^s"),
              s(:regopt, :i)),
            s(:kwbegin,
              s(:rescue,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Tk), :encoding_system), :==,
                    s(:str, "cp932")),
                  s(:send,
                    s(:const, nil, :Tk), :encoding=,
                    s(:str, "cp932")),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Tk), :encoding=,
                      s(:str, "shiftjis")),
                    s(:send,
                      s(:const, nil, :Tk), :encoding_system=,
                      s(:str, "shiftjis")))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :StandardError),
                    s(:const, nil, :NameError)), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Tk), :encoding=,
                      s(:str, "shiftjis")),
                    s(:send,
                      s(:const, nil, :Tk), :encoding_system=,
                      s(:str, "shiftjis")))), nil))),
          s(:when,
            s(:regexp,
              s(:str, "^u"),
              s(:regopt, :i)),
            s(:begin,
              s(:send,
                s(:const, nil, :Tk), :encoding=,
                s(:str, "utf-8")),
              s(:send,
                s(:const, nil, :Tk), :encoding_system=,
                s(:str, "utf-8")))),
          s(:begin,
            s(:if,
              s(:defined?,
                s(:const, nil, :DEFAULT_TK_ENCODING)),
              s(:send,
                s(:const, nil, :Tk), :encoding_system=,
                s(:const, nil, :DEFAULT_TK_ENCODING)), nil),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :Tk), :encoding=,
                  s(:send,
                    s(:const, nil, :Tk), :encoding_system)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :StandardError),
                    s(:const, nil, :NameError)), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Tk), :encoding=,
                      s(:str, "utf-8")),
                    s(:send,
                      s(:const, nil, :Tk), :encoding_system=,
                      s(:str, "utf-8")))), nil)))))),
    s(:begin,
      s(:module,
        s(:const, nil, :Tk),
        s(:begin,
          s(:module,
            s(:const, nil, :Encoding),
            s(:begin,
              s(:send, nil, :extend,
                s(:const, nil, :Encoding)),
              s(:def, :force_default_encoding=,
                s(:args,
                  s(:arg, :mode)),
                s(:nil)),
              s(:def, :force_default_encoding?,
                s(:args),
                s(:nil)),
              s(:def, :default_encoding=,
                s(:args,
                  s(:arg, :enc)),
                s(:nil)),
              s(:def, :default_encoding,
                s(:args),
                s(:nil)),
              s(:def, :encoding=,
                s(:args,
                  s(:arg, :name)),
                s(:nil)),
              s(:def, :encoding,
                s(:args),
                s(:nil)),
              s(:def, :encoding_names,
                s(:args),
                s(:nil)),
              s(:def, :encoding_system,
                s(:args),
                s(:nil)),
              s(:def, :encoding_system=,
                s(:args,
                  s(:arg, :enc)),
                s(:nil)),
              s(:def, :encoding_convertfrom,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :enc,
                    s(:const, nil, :None))),
                s(:lvar, :str)),
              s(:alias,
                s(:sym, :encoding_convert_from),
                s(:sym, :encoding_convertfrom)),
              s(:def, :encoding_convertto,
                s(:args,
                  s(:arg, :str),
                  s(:optarg, :enc,
                    s(:const, nil, :None))),
                s(:lvar, :str)),
              s(:alias,
                s(:sym, :encoding_convert_to),
                s(:sym, :encoding_convertto)),
              s(:def, :encoding_dirs,
                s(:args),
                s(:nil)),
              s(:def, :encoding_dirs=,
                s(:args,
                  s(:arg, :dir_array)),
                s(:nil)))),
          s(:send, nil, :extend,
            s(:const, nil, :Encoding)))),
      s(:class,
        s(:const, nil, :TclTkIp), nil,
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :encoding)),
          s(:alias,
            s(:sym, :__eval),
            s(:sym, :_eval)),
          s(:alias,
            s(:sym, :__invoke),
            s(:sym, :_invoke)),
          s(:alias,
            s(:sym, :_eval_with_enc),
            s(:sym, :_eval)),
          s(:alias,
            s(:sym, :_invoke_with_enc),
            s(:sym, :_invoke)))))),
  s(:module,
    s(:const, nil, :TkBindCore),
    s(:begin,
      s(:def, :bind,
        s(:args,
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send,
            s(:const, nil, :Tk), :bind,
            s(:self),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :bind_append,
        s(:args,
          s(:arg, :context),
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :TkComm), :_callback_entry?,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:send,
                s(:send, nil, :block_given?), :!)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:lvar, :args), :shift)),
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send,
            s(:const, nil, :Tk), :bind_append,
            s(:self),
            s(:lvar, :context),
            s(:lvar, :cmd),
            s(:splat,
              s(:lvar, :args))))),
      s(:def, :bind_remove,
        s(:args,
          s(:arg, :context)),
        s(:send,
          s(:const, nil, :Tk), :bind_remove,
          s(:self),
          s(:lvar, :context))),
      s(:def, :bindinfo,
        s(:args,
          s(:optarg, :context,
            s(:nil))),
        s(:send,
          s(:const, nil, :Tk), :bindinfo,
          s(:self),
          s(:lvar, :context))))),
  s(:module,
    s(:const, nil, :TkTreatFont),
    s(:begin,
      s(:def, :__font_optkeys,
        s(:args),
        s(:array,
          s(:str, "font"))),
      s(:send, nil, :private,
        s(:sym, :__font_optkeys)),
      s(:def, :__pathname,
        s(:args),
        s(:send,
          s(:self), :path)),
      s(:send, nil, :private,
        s(:sym, :__pathname)),
      s(:def, :font_configinfo,
        s(:args,
          s(:optarg, :key,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :optkeys,
            s(:send, nil, :__font_optkeys)),
          s(:if,
            s(:and,
              s(:lvar, :key),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :optkeys), :find),
                  s(:args,
                    s(:arg, :opt)),
                  s(:send,
                    s(:send,
                      s(:lvar, :opt), :to_s), :==,
                    s(:send,
                      s(:lvar, :key), :to_s))), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "unknown font option name `"),
                s(:begin,
                  s(:lvar, :key)),
                s(:str, "'"))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :win),
              s(:lvasgn, :tag)),
            s(:send,
              s(:send, nil, :__pathname), :split,
              s(:str, ":"))),
          s(:if,
            s(:lvar, :key),
            s(:begin,
              s(:lvasgn, :pathname,
                s(:send,
                  s(:array,
                    s(:lvar, :win),
                    s(:lvar, :tag),
                    s(:lvar, :key)), :join,
                  s(:str, ";"))),
              s(:or,
                s(:send,
                  s(:const, nil, :TkFont), :used_on,
                  s(:lvar, :pathname)),
                s(:send,
                  s(:const, nil, :TkFont), :init_widget_font,
                  s(:lvar, :pathname),
                  s(:splat,
                    s(:send, nil, :__confinfo_cmd))))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :optkeys), :size), :==,
                s(:int, 1)),
              s(:begin,
                s(:lvasgn, :pathname,
                  s(:send,
                    s(:array,
                      s(:lvar, :win),
                      s(:lvar, :tag),
                      s(:send,
                        s(:lvar, :optkeys), :[],
                        s(:int, 0))), :join,
                    s(:str, ";"))),
                s(:or,
                  s(:send,
                    s(:const, nil, :TkFont), :used_on,
                    s(:lvar, :pathname)),
                  s(:send,
                    s(:const, nil, :TkFont), :init_widget_font,
                    s(:lvar, :pathname),
                    s(:splat,
                      s(:send, nil, :__confinfo_cmd))))),
              s(:begin,
                s(:lvasgn, :fonts,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :optkeys), :each),
                  s(:args,
                    s(:arg, :k)),
                  s(:begin,
                    s(:lvasgn, :k,
                      s(:send,
                        s(:lvar, :k), :to_s)),
                    s(:lvasgn, :pathname,
                      s(:send,
                        s(:array,
                          s(:lvar, :win),
                          s(:lvar, :tag),
                          s(:lvar, :k)), :join,
                        s(:str, ";"))),
                    s(:send,
                      s(:lvar, :fonts), :[]=,
                      s(:lvar, :k),
                      s(:or,
                        s(:send,
                          s(:const, nil, :TkFont), :used_on,
                          s(:lvar, :pathname)),
                        s(:send,
                          s(:const, nil, :TkFont), :init_widget_font,
                          s(:lvar, :pathname),
                          s(:splat,
                            s(:send, nil, :__confinfo_cmd))))))),
                s(:lvar, :fonts)))))),
      s(:alias,
        s(:sym, :fontobj),
        s(:sym, :font_configinfo)),
      s(:def, :font_configure,
        s(:args,
          s(:arg, :slot)),
        s(:begin,
          s(:lvasgn, :pathname,
            s(:send, nil, :__pathname)),
          s(:lvasgn, :slot,
            s(:send, nil, :_symbolkey2str,
              s(:lvar, :slot))),
          s(:block,
            s(:send,
              s(:send, nil, :__font_optkeys), :each),
            s(:args,
              s(:arg, :optkey)),
            s(:begin,
              s(:lvasgn, :optkey,
                s(:send,
                  s(:lvar, :optkey), :to_s)),
              s(:lvasgn, :l_optkey,
                s(:send,
                  s(:str, "latin"), :<<,
                  s(:lvar, :optkey))),
              s(:lvasgn, :a_optkey,
                s(:send,
                  s(:str, "ascii"), :<<,
                  s(:lvar, :optkey))),
              s(:lvasgn, :k_optkey,
                s(:send,
                  s(:str, "kanji"), :<<,
                  s(:lvar, :optkey))),
              s(:if,
                s(:send,
                  s(:lvar, :slot), :key?,
                  s(:lvar, :optkey)),
                s(:begin,
                  s(:lvasgn, :fnt,
                    s(:send,
                      s(:lvar, :slot), :delete,
                      s(:lvar, :optkey))),
                  s(:if,
                    s(:send,
                      s(:lvar, :fnt), :kind_of?,
                      s(:const, nil, :TkFont)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :slot), :delete,
                        s(:lvar, :l_optkey)),
                      s(:send,
                        s(:lvar, :slot), :delete,
                        s(:lvar, :a_optkey)),
                      s(:send,
                        s(:lvar, :slot), :delete,
                        s(:lvar, :k_optkey)),
                      s(:send,
                        s(:lvar, :fnt), :call_font_configure,
                        s(:array,
                          s(:lvar, :pathname),
                          s(:lvar, :optkey)),
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__config_cmd), :<<,
                              s(:hash))))),
                      s(:next)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :fnt),
                        s(:if,
                          s(:begin,
                            s(:or,
                              s(:or,
                                s(:send,
                                  s(:lvar, :slot), :key?,
                                  s(:lvar, :l_optkey)),
                                s(:send,
                                  s(:lvar, :slot), :key?,
                                  s(:lvar, :a_optkey))),
                              s(:send,
                                s(:lvar, :slot), :key?,
                                s(:lvar, :k_optkey)))),
                          s(:begin,
                            s(:lvasgn, :fnt,
                              s(:send,
                                s(:const, nil, :TkFont), :new,
                                s(:lvar, :fnt))),
                            s(:lvasgn, :lfnt,
                              s(:send,
                                s(:lvar, :slot), :delete,
                                s(:lvar, :l_optkey))),
                            s(:if,
                              s(:send,
                                s(:lvar, :slot), :key?,
                                s(:lvar, :a_optkey)),
                              s(:lvasgn, :lfnt,
                                s(:send,
                                  s(:lvar, :slot), :delete,
                                  s(:lvar, :a_optkey))), nil),
                            s(:lvasgn, :kfnt,
                              s(:send,
                                s(:lvar, :slot), :delete,
                                s(:lvar, :k_optkey))),
                            s(:if,
                              s(:lvar, :lfnt),
                              s(:send,
                                s(:lvar, :fnt), :latin_replace,
                                s(:lvar, :lfnt)), nil),
                            s(:if,
                              s(:lvar, :kfnt),
                              s(:send,
                                s(:lvar, :fnt), :kanji_replace,
                                s(:lvar, :kfnt)), nil),
                            s(:send,
                              s(:lvar, :fnt), :call_font_configure,
                              s(:array,
                                s(:lvar, :pathname),
                                s(:lvar, :optkey)),
                              s(:splat,
                                s(:begin,
                                  s(:send,
                                    s(:send, nil, :__config_cmd), :<<,
                                    s(:hash))))),
                            s(:next)),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :fnt), :kind_of?,
                                s(:const, nil, :Hash)),
                              s(:lvasgn, :fnt,
                                s(:send, nil, :hash_kv,
                                  s(:lvar, :fnt))), nil),
                            s(:if,
                              s(:send,
                                s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send, nil, :tk_call,
                                    s(:splat,
                                      s(:begin,
                                        s(:send,
                                          s(:send,
                                            s(:send, nil, :__config_cmd), :<<,
                                            s(:dstr,
                                              s(:str, "-"),
                                              s(:begin,
                                                s(:lvar, :optkey)))), :<<,
                                          s(:lvar, :fnt))))),
                                  s(:resbody, nil, nil, nil), nil)),
                              s(:send, nil, :tk_call,
                                s(:splat,
                                  s(:begin,
                                    s(:send,
                                      s(:send,
                                        s(:send, nil, :__config_cmd), :<<,
                                        s(:dstr,
                                          s(:str, "-"),
                                          s(:begin,
                                            s(:lvar, :optkey)))), :<<,
                                      s(:lvar, :fnt)))))))), nil),
                      s(:next)))), nil),
              s(:lvasgn, :lfnt,
                s(:send,
                  s(:lvar, :slot), :delete,
                  s(:lvar, :l_optkey))),
              s(:if,
                s(:send,
                  s(:lvar, :slot), :key?,
                  s(:lvar, :a_optkey)),
                s(:lvasgn, :lfnt,
                  s(:send,
                    s(:lvar, :slot), :delete,
                    s(:lvar, :a_optkey))), nil),
              s(:lvasgn, :kfnt,
                s(:send,
                  s(:lvar, :slot), :delete,
                  s(:lvar, :k_optkey))),
              s(:if,
                s(:and,
                  s(:lvar, :lfnt),
                  s(:lvar, :kfnt)),
                s(:send,
                  s(:send,
                    s(:const, nil, :TkFont), :new,
                    s(:lvar, :lfnt),
                    s(:lvar, :kfnt)), :call_font_configure,
                  s(:array,
                    s(:lvar, :pathname),
                    s(:lvar, :optkey)),
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__config_cmd), :<<,
                        s(:hash))))),
                s(:if,
                  s(:lvar, :lfnt),
                  s(:send, nil, :latinfont_configure,
                    s(:array,
                      s(:lvar, :lfnt),
                      s(:lvar, :optkey))),
                  s(:if,
                    s(:lvar, :kfnt),
                    s(:send, nil, :kanjifont_configure,
                      s(:array,
                        s(:lvar, :kfnt),
                        s(:lvar, :optkey))), nil))))),
          s(:if,
            s(:send,
              s(:lvar, :slot), :!=,
              s(:hash)),
            s(:send, nil, :tk_call,
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :concat,
                    s(:send, nil, :hash_kv,
                      s(:lvar, :slot)))))), nil),
          s(:self))),
      s(:def, :latinfont_configure,
        s(:args,
          s(:arg, :ltn),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :ltn), :kind_of?,
              s(:const, nil, :Array)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :ltn), :[],
                  s(:int, 1))),
              s(:lvasgn, :ltn,
                s(:send,
                  s(:lvar, :ltn), :[],
                  s(:int, 0)))),
            s(:lvasgn, :key,
              s(:nil))),
          s(:lvasgn, :optkeys,
            s(:send, nil, :__font_optkeys)),
          s(:if,
            s(:and,
              s(:lvar, :key),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :optkeys), :find),
                  s(:args,
                    s(:arg, :opt)),
                  s(:send,
                    s(:send,
                      s(:lvar, :opt), :to_s), :==,
                    s(:send,
                      s(:lvar, :key), :to_s))), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "unknown font option name `"),
                s(:begin,
                  s(:lvar, :key)),
                s(:str, "'"))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :win),
              s(:lvasgn, :tag)),
            s(:send,
              s(:send, nil, :__pathname), :split,
              s(:str, ":"))),
          s(:if,
            s(:lvar, :key),
            s(:lvasgn, :optkeys,
              s(:array,
                s(:lvar, :key))), nil),
          s(:block,
            s(:send,
              s(:lvar, :optkeys), :each),
            s(:args,
              s(:arg, :optkey)),
            s(:begin,
              s(:lvasgn, :optkey,
                s(:send,
                  s(:lvar, :optkey), :to_s)),
              s(:lvasgn, :pathname,
                s(:send,
                  s(:array,
                    s(:lvar, :win),
                    s(:lvar, :tag),
                    s(:lvar, :optkey)), :join,
                  s(:str, ";"))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :fobj,
                    s(:send,
                      s(:const, nil, :TkFont), :used_on,
                      s(:lvar, :pathname)))),
                s(:lvasgn, :fobj,
                  s(:send,
                    s(:const, nil, :TkFont), :new,
                    s(:lvar, :fobj))),
                s(:if,
                  s(:const,
                    s(:const, nil, :Tk), :JAPANIZED_TK),
                  s(:lvasgn, :fobj,
                    s(:send, nil, :fontobj)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :ltn), :kind_of?,
                        s(:const, nil, :Hash)),
                      s(:lvasgn, :ltn,
                        s(:send, nil, :hash_kv,
                          s(:lvar, :ltn))), nil),
                    s(:if,
                      s(:send,
                        s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
                      s(:kwbegin,
                        s(:rescue,
                          s(:send, nil, :tk_call,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :__config_cmd), :<<,
                                    s(:dstr,
                                      s(:str, "-"),
                                      s(:begin,
                                        s(:lvar, :optkey)))), :<<,
                                  s(:lvar, :ltn))))),
                          s(:resbody, nil,
                            s(:lvasgn, :e), nil), nil)),
                      s(:send, nil, :tk_call,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:send, nil, :__config_cmd), :<<,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :optkey)))), :<<,
                              s(:lvar, :ltn)))))),
                    s(:next)))),
              s(:if,
                s(:send,
                  s(:lvar, :fobj), :kind_of?,
                  s(:const, nil, :TkFont)),
                s(:if,
                  s(:send,
                    s(:lvar, :ltn), :kind_of?,
                    s(:const, nil, :TkFont)),
                  s(:begin,
                    s(:lvasgn, :conf,
                      s(:hash)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :ltn), :latin_configinfo), :each),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :val)),
                      s(:send,
                        s(:lvar, :conf), :[]=,
                        s(:lvar, :k),
                        s(:lvar, :val))),
                    s(:if,
                      s(:lvar, :keys),
                      s(:send,
                        s(:lvar, :fobj), :latin_configure,
                        s(:send,
                          s(:lvar, :conf), :update,
                          s(:lvar, :keys))),
                      s(:send,
                        s(:lvar, :fobj), :latin_configure,
                        s(:lvar, :conf)))),
                  s(:send,
                    s(:lvar, :fobj), :latin_replace,
                    s(:lvar, :ltn))), nil),
              s(:send,
                s(:lvar, :fobj), :call_font_configure,
                s(:array,
                  s(:lvar, :pathname),
                  s(:lvar, :optkey)),
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :__config_cmd), :<<,
                      s(:hash))))))),
          s(:self))),
      s(:alias,
        s(:sym, :asciifont_configure),
        s(:sym, :latinfont_configure)),
      s(:def, :kanjifont_configure,
        s(:args,
          s(:arg, :knj),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :knj), :kind_of?,
              s(:const, nil, :Array)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :knj), :[],
                  s(:int, 1))),
              s(:lvasgn, :knj,
                s(:send,
                  s(:lvar, :knj), :[],
                  s(:int, 0)))),
            s(:lvasgn, :key,
              s(:nil))),
          s(:lvasgn, :optkeys,
            s(:send, nil, :__font_optkeys)),
          s(:if,
            s(:and,
              s(:lvar, :key),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :optkeys), :find),
                  s(:args,
                    s(:arg, :opt)),
                  s(:send,
                    s(:send,
                      s(:lvar, :opt), :to_s), :==,
                    s(:send,
                      s(:lvar, :key), :to_s))), :!)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "unknown font option name `"),
                s(:begin,
                  s(:lvar, :key)),
                s(:str, "'"))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :win),
              s(:lvasgn, :tag)),
            s(:send,
              s(:send, nil, :__pathname), :split,
              s(:str, ":"))),
          s(:if,
            s(:lvar, :key),
            s(:lvasgn, :optkeys,
              s(:array,
                s(:lvar, :key))), nil),
          s(:block,
            s(:send,
              s(:lvar, :optkeys), :each),
            s(:args,
              s(:arg, :optkey)),
            s(:begin,
              s(:lvasgn, :optkey,
                s(:send,
                  s(:lvar, :optkey), :to_s)),
              s(:lvasgn, :pathname,
                s(:send,
                  s(:array,
                    s(:lvar, :win),
                    s(:lvar, :tag),
                    s(:lvar, :optkey)), :join,
                  s(:str, ";"))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :fobj,
                    s(:send,
                      s(:const, nil, :TkFont), :used_on,
                      s(:lvar, :pathname)))),
                s(:lvasgn, :fobj,
                  s(:send,
                    s(:const, nil, :TkFont), :new,
                    s(:lvar, :fobj))),
                s(:if,
                  s(:const,
                    s(:const, nil, :Tk), :JAPANIZED_TK),
                  s(:lvasgn, :fobj,
                    s(:send, nil, :fontobj)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :knj), :kind_of?,
                        s(:const, nil, :Hash)),
                      s(:lvasgn, :knj,
                        s(:send, nil, :hash_kv,
                          s(:lvar, :knj))), nil),
                    s(:if,
                      s(:send,
                        s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
                      s(:kwbegin,
                        s(:rescue,
                          s(:send, nil, :tk_call,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :__config_cmd), :<<,
                                    s(:dstr,
                                      s(:str, "-"),
                                      s(:begin,
                                        s(:lvar, :optkey)))), :<<,
                                  s(:lvar, :knj))))),
                          s(:resbody, nil,
                            s(:lvasgn, :e), nil), nil)),
                      s(:send, nil, :tk_call,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:send, nil, :__config_cmd), :<<,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :optkey)))), :<<,
                              s(:lvar, :knj)))))),
                    s(:next)))),
              s(:if,
                s(:send,
                  s(:lvar, :fobj), :kind_of?,
                  s(:const, nil, :TkFont)),
                s(:if,
                  s(:send,
                    s(:lvar, :knj), :kind_of?,
                    s(:const, nil, :TkFont)),
                  s(:begin,
                    s(:lvasgn, :conf,
                      s(:hash)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :knj), :kanji_configinfo), :each),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :val)),
                      s(:send,
                        s(:lvar, :conf), :[]=,
                        s(:lvar, :k),
                        s(:lvar, :val))),
                    s(:if,
                      s(:lvar, :keys),
                      s(:send,
                        s(:lvar, :fobj), :kanji_configure,
                        s(:send,
                          s(:lvar, :conf), :update,
                          s(:lvar, :keys))),
                      s(:send,
                        s(:lvar, :fobj), :kanji_configure,
                        s(:lvar, :conf)))),
                  s(:send,
                    s(:lvar, :fobj), :kanji_replace,
                    s(:lvar, :knj))), nil),
              s(:send,
                s(:lvar, :fobj), :call_font_configure,
                s(:array,
                  s(:lvar, :pathname),
                  s(:lvar, :optkey)),
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :__config_cmd), :<<,
                      s(:hash))))))),
          s(:self))),
      s(:def, :font_copy,
        s(:args,
          s(:arg, :win),
          s(:optarg, :wintag,
            s(:nil)),
          s(:optarg, :winkey,
            s(:nil)),
          s(:optarg, :targetkey,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :wintag),
            s(:if,
              s(:lvar, :winkey),
              s(:lvasgn, :fnt,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :tagfontobj,
                    s(:lvar, :wintag),
                    s(:lvar, :winkey)), :dup)),
              s(:lvasgn, :fnt,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :tagfontobj,
                    s(:lvar, :wintag)), :dup))),
            s(:if,
              s(:lvar, :winkey),
              s(:lvasgn, :fnt,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :fontobj,
                    s(:lvar, :winkey)), :dup)),
              s(:lvasgn, :fnt,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :fontobj), :dup)))),
          s(:if,
            s(:lvar, :targetkey),
            s(:send,
              s(:lvar, :fnt), :call_font_configure,
              s(:array,
                s(:send, nil, :__pathname),
                s(:lvar, :targetkey)),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :<<,
                    s(:hash))))),
            s(:send,
              s(:lvar, :fnt), :call_font_configure,
              s(:send, nil, :__pathname),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :<<,
                    s(:hash)))))),
          s(:self))),
      s(:def, :latinfont_copy,
        s(:args,
          s(:arg, :win),
          s(:optarg, :wintag,
            s(:nil)),
          s(:optarg, :winkey,
            s(:nil)),
          s(:optarg, :targetkey,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :targetkey),
            s(:send,
              s(:send,
                s(:send, nil, :fontobj,
                  s(:lvar, :targetkey)), :dup), :call_font_configure,
              s(:array,
                s(:send, nil, :__pathname),
                s(:lvar, :targetkey)),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :<<,
                    s(:hash))))),
            s(:send,
              s(:send,
                s(:send, nil, :fontobj), :dup), :call_font_configure,
              s(:send, nil, :__pathname),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :<<,
                    s(:hash)))))),
          s(:if,
            s(:lvar, :wintag),
            s(:if,
              s(:lvar, :winkey),
              s(:send,
                s(:send, nil, :fontobj), :latin_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :tagfontobj,
                    s(:lvar, :wintag),
                    s(:lvar, :winkey)), :latin_font_id)),
              s(:send,
                s(:send, nil, :fontobj), :latin_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :tagfontobj,
                    s(:lvar, :wintag)), :latin_font_id))),
            s(:if,
              s(:lvar, :winkey),
              s(:send,
                s(:send, nil, :fontobj), :latin_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :fontobj,
                    s(:lvar, :winkey)), :latin_font_id)),
              s(:send,
                s(:send, nil, :fontobj), :latin_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :fontobj), :latin_font_id)))),
          s(:self))),
      s(:alias,
        s(:sym, :asciifont_copy),
        s(:sym, :latinfont_copy)),
      s(:def, :kanjifont_copy,
        s(:args,
          s(:arg, :win),
          s(:optarg, :wintag,
            s(:nil)),
          s(:optarg, :winkey,
            s(:nil)),
          s(:optarg, :targetkey,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :targetkey),
            s(:send,
              s(:send,
                s(:send, nil, :fontobj,
                  s(:lvar, :targetkey)), :dup), :call_font_configure,
              s(:array,
                s(:send, nil, :__pathname),
                s(:lvar, :targetkey)),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :<<,
                    s(:hash))))),
            s(:send,
              s(:send,
                s(:send, nil, :fontobj), :dup), :call_font_configure,
              s(:send, nil, :__pathname),
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:send, nil, :__config_cmd), :<<,
                    s(:hash)))))),
          s(:if,
            s(:lvar, :wintag),
            s(:if,
              s(:lvar, :winkey),
              s(:send,
                s(:send, nil, :fontobj), :kanji_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :tagfontobj,
                    s(:lvar, :wintag),
                    s(:lvar, :winkey)), :kanji_font_id)),
              s(:send,
                s(:send, nil, :fontobj), :kanji_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :tagfontobj,
                    s(:lvar, :wintag)), :kanji_font_id))),
            s(:if,
              s(:lvar, :winkey),
              s(:send,
                s(:send, nil, :fontobj), :kanji_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :fontobj,
                    s(:lvar, :winkey)), :kanji_font_id)),
              s(:send,
                s(:send, nil, :fontobj), :kanji_replace,
                s(:send,
                  s(:send,
                    s(:lvar, :win), :fontobj), :kanji_font_id)))),
          s(:self))))),
  s(:module,
    s(:const, nil, :TkConfigMethod),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkUtil)),
      s(:send, nil, :include,
        s(:const, nil, :TkTreatFont)),
      s(:defs,
        s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__,
        s(:args),
        s(:or,
          s(:ivar, :@mode),
          s(:false))),
      s(:defs,
        s(:const, nil, :TkConfigMethod), :__set_IGNORE_UNKNOWN_CONFIGURE_OPTION__!,
        s(:args,
          s(:arg, :mode)),
        s(:ivasgn, :@mode,
          s(:if,
            s(:begin,
              s(:lvar, :mode)),
            s(:true),
            s(:false)))),
      s(:def, :__cget_cmd,
        s(:args),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:str, "cget"))),
      s(:send, nil, :private,
        s(:sym, :__cget_cmd)),
      s(:def, :__config_cmd,
        s(:args),
        s(:array,
          s(:send,
            s(:self), :path),
          s(:str, "configure"))),
      s(:send, nil, :private,
        s(:sym, :__config_cmd)),
      s(:def, :__confinfo_cmd,
        s(:args),
        s(:send, nil, :__config_cmd)),
      s(:send, nil, :private,
        s(:sym, :__confinfo_cmd)),
      s(:def, :__configinfo_struct,
        s(:args),
        s(:hash,
          s(:pair,
            s(:sym, :key),
            s(:int, 0)),
          s(:pair,
            s(:sym, :alias),
            s(:int, 1)),
          s(:pair,
            s(:sym, :db_name),
            s(:int, 1)),
          s(:pair,
            s(:sym, :db_class),
            s(:int, 2)),
          s(:pair,
            s(:sym, :default_value),
            s(:int, 3)),
          s(:pair,
            s(:sym, :current_value),
            s(:int, 4)))),
      s(:send, nil, :private,
        s(:sym, :__configinfo_struct)),
      s(:def, :__optkey_aliases,
        s(:args),
        s(:hash)),
      s(:send, nil, :private,
        s(:sym, :__optkey_aliases)),
      s(:def, :__numval_optkeys,
        s(:args),
        s(:array)),
      s(:send, nil, :private,
        s(:sym, :__numval_optkeys)),
      s(:def, :__numstrval_optkeys,
        s(:args),
        s(:array)),
      s(:send, nil, :private,
        s(:sym, :__numstrval_optkeys)),
      s(:def, :__boolval_optkeys,
        s(:args),
        s(:array,
          s(:str, "exportselection"),
          s(:str, "jump"),
          s(:str, "setgrid"),
          s(:str, "takefocus"))),
      s(:send, nil, :private,
        s(:sym, :__boolval_optkeys)),
      s(:def, :__strval_optkeys,
        s(:args),
        s(:array,
          s(:str, "text"),
          s(:str, "label"),
          s(:str, "show"),
          s(:str, "data"),
          s(:str, "file"),
          s(:str, "activebackground"),
          s(:str, "activeforeground"),
          s(:str, "background"),
          s(:str, "disabledforeground"),
          s(:str, "disabledbackground"),
          s(:str, "foreground"),
          s(:str, "highlightbackground"),
          s(:str, "highlightcolor"),
          s(:str, "insertbackground"),
          s(:str, "selectbackground"),
          s(:str, "selectforeground"),
          s(:str, "troughcolor"))),
      s(:send, nil, :private,
        s(:sym, :__strval_optkeys)),
      s(:def, :__listval_optkeys,
        s(:args),
        s(:array)),
      s(:send, nil, :private,
        s(:sym, :__listval_optkeys)),
      s(:def, :__numlistval_optkeys,
        s(:args),
        s(:array)),
      s(:send, nil, :private,
        s(:sym, :__numlistval_optkeys)),
      s(:def, :__tkvariable_optkeys,
        s(:args),
        s(:array,
          s(:str, "variable"),
          s(:str, "textvariable"))),
      s(:send, nil, :private,
        s(:sym, :__tkvariable_optkeys)),
      s(:def, :__val2ruby_optkeys,
        s(:args),
        s(:hash)),
      s(:send, nil, :private,
        s(:sym, :__val2ruby_optkeys)),
      s(:def, :__ruby2val_optkeys,
        s(:args),
        s(:hash)),
      s(:send, nil, :private,
        s(:sym, :__ruby2val_optkeys)),
      s(:def, :__methodcall_optkeys,
        s(:args),
        s(:hash)),
      s(:send, nil, :private,
        s(:sym, :__methodcall_optkeys)),
      s(:def, :__keyonly_optkeys,
        s(:args),
        s(:hash)),
      s(:send, nil, :private,
        s(:sym, :__keyonly_optkeys)),
      s(:def, :__conv_keyonly_opts,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :keys), :kind_of?,
              s(:const, nil, :Hash)), nil,
            s(:return,
              s(:lvar, :keys))),
          s(:lvasgn, :keyonly,
            s(:send, nil, :__keyonly_optkeys)),
          s(:lvasgn, :keys2,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :keys), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:begin,
              s(:lvasgn, :optkey,
                s(:block,
                  s(:send,
                    s(:lvar, :keyonly), :find),
                  s(:args,
                    s(:arg, :kk),
                    s(:arg, :vv)),
                  s(:send,
                    s(:send,
                      s(:lvar, :kk), :to_s), :==,
                    s(:send,
                      s(:lvar, :k), :to_s)))),
              s(:if,
                s(:lvar, :optkey),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :defkey),
                      s(:lvasgn, :undefkey)),
                    s(:lvar, :optkey)),
                  s(:if,
                    s(:lvar, :v),
                    s(:send,
                      s(:lvar, :keys2), :[]=,
                      s(:send,
                        s(:lvar, :defkey), :to_s),
                      s(:const, nil, :None)),
                    s(:if,
                      s(:lvar, :undefkey),
                      s(:send,
                        s(:lvar, :keys2), :[]=,
                        s(:send,
                          s(:lvar, :undefkey), :to_s),
                        s(:const, nil, :None)), nil))),
                s(:send,
                  s(:lvar, :keys2), :[]=,
                  s(:send,
                    s(:lvar, :k), :to_s),
                  s(:lvar, :v))))),
          s(:lvar, :keys2))),
      s(:send, nil, :private,
        s(:sym, :__conv_keyonly_opts)),
      s(:def, :config_hash_kv,
        s(:args,
          s(:arg, :keys),
          s(:optarg, :enc_mode,
            s(:nil)),
          s(:optarg, :conf,
            s(:nil))),
        s(:send, nil, :hash_kv,
          s(:send, nil, :__conv_keyonly_opts,
            s(:lvar, :keys)),
          s(:lvar, :enc_mode),
          s(:lvar, :conf))),
      s(:def, :[],
        s(:args,
          s(:arg, :id)),
        s(:send, nil, :cget,
          s(:lvar, :id))),
      s(:def, :[]=,
        s(:args,
          s(:arg, :id),
          s(:arg, :val)),
        s(:begin,
          s(:send, nil, :configure,
            s(:lvar, :id),
            s(:lvar, :val)),
          s(:lvar, :val))),
      s(:def, :cget_tkstring,
        s(:args,
          s(:arg, :option)),
        s(:begin,
          s(:lvasgn, :opt,
            s(:send,
              s(:lvar, :option), :to_s)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :opt), :length), :==,
              s(:int, 0)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "Invalid option `"),
                s(:begin,
                  s(:send,
                    s(:lvar, :option), :inspect)),
                s(:str, "'"))), nil),
          s(:send, nil, :tk_call_without_enc,
            s(:splat,
              s(:begin,
                s(:send,
                  s(:send, nil, :__cget_cmd), :<<,
                  s(:dstr,
                    s(:str, "-"),
                    s(:begin,
                      s(:lvar, :opt))))))))),
      s(:def, :__cget_core,
        s(:args,
          s(:arg, :slot)),
        s(:begin,
          s(:lvasgn, :orig_slot,
            s(:lvar, :slot)),
          s(:lvasgn, :slot,
            s(:send,
              s(:lvar, :slot), :to_s)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :slot), :length), :==,
              s(:int, 0)),
            s(:send, nil, :fail,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "Invalid option `"),
                s(:begin,
                  s(:send,
                    s(:lvar, :orig_slot), :inspect)),
                s(:str, "'"))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :alias_name),
              s(:lvasgn, :real_name)),
            s(:block,
              s(:send,
                s(:send, nil, :__optkey_aliases), :find),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:send,
                  s(:lvar, :k), :to_s), :==,
                s(:lvar, :slot)))),
          s(:if,
            s(:lvar, :real_name),
            s(:lvasgn, :slot,
              s(:send,
                s(:lvar, :real_name), :to_s)), nil),
          s(:if,
            s(:begin,
              s(:lvasgn, :method,
                s(:send,
                  s(:send, nil, :_symbolkey2str,
                    s(:send, nil, :__val2ruby_optkeys)), :[],
                  s(:lvar, :slot)))),
            s(:begin,
              s(:lvasgn, :optval,
                s(:send, nil, :tk_call_without_enc,
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__cget_cmd), :<<,
                        s(:dstr,
                          s(:str, "-"),
                          s(:begin,
                            s(:lvar, :slot)))))))),
              s(:kwbegin,
                s(:rescue,
                  s(:return,
                    s(:send,
                      s(:lvar, :method), :call,
                      s(:lvar, :optval))),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:if,
                        s(:gvar, :$DEBUG),
                        s(:send, nil, :warn,
                          s(:dstr,
                            s(:str, "Warning:: "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :e), :message)),
                            s(:str, " (when "),
                            s(:begin,
                              s(:lvar, :method)),
                            s(:str, ".call("),
                            s(:begin,
                              s(:send,
                                s(:lvar, :optval), :inspect)),
                            s(:str, ")"))), nil),
                      s(:return,
                        s(:lvar, :optval)))), nil))), nil),
          s(:if,
            s(:begin,
              s(:lvasgn, :method,
                s(:send,
                  s(:send, nil, :_symbolkey2str,
                    s(:send, nil, :__methodcall_optkeys)), :[],
                  s(:lvar, :slot)))),
            s(:return,
              s(:send,
                s(:self), :__send__,
                s(:lvar, :method))), nil),
          s(:case,
            s(:lvar, :slot),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__numval_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :number,
                    s(:send, nil, :tk_call_without_enc,
                      s(:splat,
                        s(:begin,
                          s(:send,
                            s(:send, nil, :__cget_cmd), :<<,
                            s(:dstr,
                              s(:str, "-"),
                              s(:begin,
                                s(:lvar, :slot)))))))),
                  s(:resbody, nil, nil,
                    s(:nil)), nil))),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__numstrval_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:send, nil, :num_or_str,
                s(:send, nil, :tk_call_without_enc,
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__cget_cmd), :<<,
                        s(:dstr,
                          s(:str, "-"),
                          s(:begin,
                            s(:lvar, :slot))))))))),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__boolval_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :bool,
                    s(:send, nil, :tk_call_without_enc,
                      s(:splat,
                        s(:begin,
                          s(:send,
                            s(:send, nil, :__cget_cmd), :<<,
                            s(:dstr,
                              s(:str, "-"),
                              s(:begin,
                                s(:lvar, :slot)))))))),
                  s(:resbody, nil, nil,
                    s(:nil)), nil))),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__listval_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:send, nil, :simplelist,
                s(:send, nil, :tk_call_without_enc,
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__cget_cmd), :<<,
                        s(:dstr,
                          s(:str, "-"),
                          s(:begin,
                            s(:lvar, :slot))))))))),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__numlistval_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :conf,
                  s(:send, nil, :tk_call_without_enc,
                    s(:splat,
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__cget_cmd), :<<,
                          s(:dstr,
                            s(:str, "-"),
                            s(:begin,
                              s(:lvar, :slot)))))))),
                s(:if,
                  s(:send,
                    s(:lvar, :conf), :=~,
                    s(:regexp,
                      s(:str, "^[0-9+-]"),
                      s(:regopt))),
                  s(:send, nil, :list,
                    s(:lvar, :conf)),
                  s(:lvar, :conf)))),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__strval_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:send, nil, :_fromUTF8,
                s(:send, nil, :tk_call_without_enc,
                  s(:splat,
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__cget_cmd), :<<,
                        s(:dstr,
                          s(:str, "-"),
                          s(:begin,
                            s(:lvar, :slot))))))))),
            s(:when,
              s(:regexp,
                s(:str, "^(|latin|ascii|kanji)("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__font_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :fontcode,
                  s(:nth_ref, 1)),
                s(:lvasgn, :fontkey,
                  s(:nth_ref, 2)),
                s(:lvasgn, :fnt,
                  s(:send, nil, :tk_tcl2ruby,
                    s(:send, nil, :tk_call_without_enc,
                      s(:splat,
                        s(:begin,
                          s(:send,
                            s(:send, nil, :__cget_cmd), :<<,
                            s(:dstr,
                              s(:str, "-"),
                              s(:begin,
                                s(:lvar, :fontkey))))))),
                    s(:true))),
                s(:if,
                  s(:send,
                    s(:lvar, :fnt), :kind_of?,
                    s(:const, nil, :TkFont)), nil,
                  s(:lvasgn, :fnt,
                    s(:send, nil, :fontobj,
                      s(:lvar, :fontkey)))),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:lvar, :fontcode), :==,
                        s(:str, "kanji")),
                      s(:const, nil, :JAPANIZED_TK)),
                    s(:send,
                      s(:const, nil, :TK_VERSION), :=~,
                      s(:regexp,
                        s(:str, "^4\\.*"),
                        s(:regopt)))),
                  s(:send,
                    s(:lvar, :fnt), :kanji_font),
                  s(:lvar, :fnt)))),
            s(:when,
              s(:regexp,
                s(:str, "^("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :__tkvariable_optkeys), :join,
                    s(:str, "|"))),
                s(:str, ")$"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send, nil, :tk_call_without_enc,
                    s(:splat,
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__cget_cmd), :<<,
                          s(:dstr,
                            s(:str, "-"),
                            s(:begin,
                              s(:lvar, :slot)))))))),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :v), :empty?)),
                  s(:nil),
                  s(:send,
                    s(:const, nil, :TkVarAccess), :new,
                    s(:lvar, :v))))),
            s(:send, nil, :tk_tcl2ruby,
              s(:send, nil, :tk_call_without_enc,
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :__cget_cmd), :<<,
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :slot))))))),
              s(:true))))),
      s(:send, nil, :private,
        s(:sym, :__cget_core)),
      s(:def, :cget,
        s(:args,
          s(:arg, :slot)),
        s(:if,
          s(:send,
            s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :__cget_core,
                s(:lvar, :slot)),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:if,
                  s(:send,
                    s(:send, nil, :current_configinfo), :has_key?,
                    s(:send,
                      s(:lvar, :slot), :to_s)),
                  s(:send, nil, :fail,
                    s(:lvar, :e)),
                  s(:nil))), nil)),
          s(:send, nil, :__cget_core,
            s(:lvar, :slot)))),
      s(:def, :cget_strict,
        s(:args,
          s(:arg, :slot)),
        s(:send, nil, :__cget_core,
          s(:lvar, :slot))),
      s(:def, :__configure_core,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :slot), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :slot,
                s(:send, nil, :_symbolkey2str,
                  s(:lvar, :slot))),
              s(:block,
                s(:send,
                  s(:send, nil, :__optkey_aliases), :each),
                s(:args,
                  s(:arg, :alias_name),
                  s(:arg, :real_name)),
                s(:begin,
                  s(:lvasgn, :alias_name,
                    s(:send,
                      s(:lvar, :alias_name), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :slot), :has_key?,
                      s(:lvar, :alias_name)),
                    s(:send,
                      s(:lvar, :slot), :[]=,
                      s(:send,
                        s(:lvar, :real_name), :to_s),
                      s(:send,
                        s(:lvar, :slot), :delete,
                        s(:lvar, :alias_name))), nil))),
              s(:block,
                s(:send,
                  s(:send, nil, :__methodcall_optkeys), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :method)),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :slot), :delete,
                      s(:send,
                        s(:lvar, :key), :to_s))),
                  s(:if,
                    s(:lvar, :value),
                    s(:send,
                      s(:self), :__send__,
                      s(:lvar, :method),
                      s(:lvar, :value)), nil))),
              s(:block,
                s(:send,
                  s(:send, nil, :__ruby2val_optkeys), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :method)),
                s(:begin,
                  s(:lvasgn, :key,
                    s(:send,
                      s(:lvar, :key), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :slot), :has_key?,
                      s(:lvar, :key)),
                    s(:send,
                      s(:lvar, :slot), :[]=,
                      s(:lvar, :key),
                      s(:send,
                        s(:lvar, :method), :call,
                        s(:send,
                          s(:lvar, :slot), :[],
                          s(:lvar, :key)))), nil))),
              s(:block,
                s(:send,
                  s(:send, nil, :__keyonly_optkeys), :each),
                s(:args,
                  s(:arg, :defkey),
                  s(:arg, :undefkey)),
                s(:begin,
                  s(:lvasgn, :conf,
                    s(:block,
                      s(:send,
                        s(:lvar, :slot), :find),
                      s(:args,
                        s(:arg, :kk),
                        s(:arg, :vv)),
                      s(:send,
                        s(:lvar, :kk), :==,
                        s(:send,
                          s(:lvar, :defkey), :to_s)))),
                  s(:if,
                    s(:lvar, :conf),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :k),
                          s(:lvasgn, :v)),
                        s(:lvar, :conf)),
                      s(:if,
                        s(:lvar, :v),
                        s(:send,
                          s(:lvar, :slot), :[]=,
                          s(:lvar, :k),
                          s(:const, nil, :None)),
                        s(:begin,
                          s(:if,
                            s(:lvar, :undefkey),
                            s(:send,
                              s(:lvar, :slot), :[]=,
                              s(:send,
                                s(:lvar, :undefkey), :to_s),
                              s(:const, nil, :None)), nil),
                          s(:send,
                            s(:lvar, :slot), :delete,
                            s(:lvar, :k))))), nil))),
              s(:if,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :slot), :find),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:lvar, :k), :=~,
                      s(:regexp,
                        s(:str, "^(|latin|ascii|kanji)("),
                        s(:begin,
                          s(:send,
                            s(:send, nil, :__font_optkeys), :join,
                            s(:str, "|"))),
                        s(:str, ")$"),
                        s(:regopt))))),
                s(:send, nil, :font_configure,
                  s(:lvar, :slot)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :slot), :size), :>,
                    s(:int, 0)),
                  s(:send, nil, :tk_call,
                    s(:splat,
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__config_cmd), :concat,
                          s(:send, nil, :hash_kv,
                            s(:lvar, :slot)))))), nil))),
            s(:begin,
              s(:lvasgn, :orig_slot,
                s(:lvar, :slot)),
              s(:lvasgn, :slot,
                s(:send,
                  s(:lvar, :slot), :to_s)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :slot), :length), :==,
                  s(:int, 0)),
                s(:send, nil, :fail,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "Invalid option `"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :orig_slot), :inspect)),
                    s(:str, "'"))), nil),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :alias_name),
                  s(:lvasgn, :real_name)),
                s(:block,
                  s(:send,
                    s(:send, nil, :__optkey_aliases), :find),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v)),
                  s(:send,
                    s(:send,
                      s(:lvar, :k), :to_s), :==,
                    s(:lvar, :slot)))),
              s(:if,
                s(:lvar, :real_name),
                s(:lvasgn, :slot,
                  s(:send,
                    s(:lvar, :real_name), :to_s)), nil),
              s(:if,
                s(:begin,
                  s(:lvasgn, :conf,
                    s(:block,
                      s(:send,
                        s(:send, nil, :__keyonly_optkeys), :find),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v)),
                      s(:send,
                        s(:send,
                          s(:lvar, :k), :to_s), :==,
                        s(:lvar, :slot))))),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :defkey),
                      s(:lvasgn, :undefkey)),
                    s(:lvar, :conf)),
                  s(:if,
                    s(:lvar, :value),
                    s(:send, nil, :tk_call,
                      s(:splat,
                        s(:begin,
                          s(:send,
                            s(:send, nil, :__config_cmd), :<<,
                            s(:dstr,
                              s(:str, "-"),
                              s(:begin,
                                s(:lvar, :defkey))))))),
                    s(:if,
                      s(:lvar, :undefkey),
                      s(:send, nil, :tk_call,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__config_cmd), :<<,
                              s(:dstr,
                                s(:str, "-"),
                                s(:begin,
                                  s(:lvar, :undefkey))))))), nil))),
                s(:if,
                  s(:begin,
                    s(:lvasgn, :method,
                      s(:send,
                        s(:send, nil, :_symbolkey2str,
                          s(:send, nil, :__ruby2val_optkeys)), :[],
                        s(:lvar, :slot)))),
                  s(:send, nil, :tk_call,
                    s(:splat,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__config_cmd), :<<,
                            s(:dstr,
                              s(:str, "-"),
                              s(:begin,
                                s(:lvar, :slot)))), :<<,
                          s(:send,
                            s(:lvar, :method), :call,
                            s(:lvar, :value)))))),
                  s(:if,
                    s(:begin,
                      s(:lvasgn, :method,
                        s(:send,
                          s(:send, nil, :_symbolkey2str,
                            s(:send, nil, :__methodcall_optkeys)), :[],
                          s(:lvar, :slot)))),
                    s(:send,
                      s(:self), :__send__,
                      s(:lvar, :method),
                      s(:lvar, :value)),
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:lvar, :slot), :=~,
                          s(:regexp,
                            s(:str, "^(|latin|ascii|kanji)("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__font_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :value), :==,
                          s(:const, nil, :None)),
                        s(:send, nil, :fontobj,
                          s(:nth_ref, 2)),
                        s(:send, nil, :font_configure,
                          s(:hash,
                            s(:pair,
                              s(:lvar, :slot),
                              s(:lvar, :value))))),
                      s(:send, nil, :tk_call,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:send, nil, :__config_cmd), :<<,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :slot)))), :<<,
                              s(:lvar, :value))))))))))),
          s(:self))),
      s(:send, nil, :private,
        s(:sym, :__configure_core)),
      s(:def, :__check_available_configure_options,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:lvasgn, :availables,
            s(:send,
              s(:send,
                s(:self), :current_configinfo), :keys)),
          s(:op_asgn,
            s(:lvasgn, :availables), :|,
            s(:send,
              s(:block,
                s(:send,
                  s(:send, nil, :__font_optkeys), :map),
                s(:args,
                  s(:arg, :k)),
                s(:array,
                  s(:send,
                    s(:lvar, :k), :to_s),
                  s(:dstr,
                    s(:str, "latin"),
                    s(:begin,
                      s(:lvar, :k))),
                  s(:dstr,
                    s(:str, "ascii"),
                    s(:begin,
                      s(:lvar, :k))),
                  s(:dstr,
                    s(:str, "kanji"),
                    s(:begin,
                      s(:lvar, :k))))), :flatten)),
          s(:op_asgn,
            s(:lvasgn, :availables), :|,
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :__methodcall_optkeys), :keys), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :to_s))),
          s(:op_asgn,
            s(:lvasgn, :availables), :|,
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :__keyonly_optkeys), :keys), :map),
              s(:args,
                s(:arg, :k)),
              s(:send,
                s(:lvar, :k), :to_s))),
          s(:lvasgn, :keys,
            s(:send, nil, :_symbolkey2str,
              s(:lvar, :keys))),
          s(:block,
            s(:send,
              s(:lvar, :keys), :delete_if),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :availables), :include?,
                  s(:lvar, :k))), :!)))),
      s(:def, :configure,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
            s(:if,
              s(:send,
                s(:lvar, :slot), :kind_of?,
                s(:const, nil, :Hash)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :__configure_core,
                    s(:lvar, :slot)),
                  s(:resbody, nil, nil,
                    s(:begin,
                      s(:lvasgn, :slot,
                        s(:send, nil, :__check_available_configure_options,
                          s(:lvar, :slot))),
                      s(:if,
                        s(:send,
                          s(:lvar, :slot), :empty?), nil,
                        s(:send, nil, :__configure_core,
                          s(:lvar, :slot))))), nil)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :__configure_core,
                    s(:lvar, :slot),
                    s(:lvar, :value)),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:if,
                      s(:send,
                        s(:send, nil, :current_configinfo), :has_key?,
                        s(:send,
                          s(:lvar, :slot), :to_s)),
                      s(:send, nil, :fail,
                        s(:lvar, :e)),
                      s(:nil))), nil))),
            s(:send, nil, :__configure_core,
              s(:lvar, :slot),
              s(:lvar, :value))),
          s(:self))),
      s(:def, :configure_cmd,
        s(:args,
          s(:arg, :slot),
          s(:arg, :value)),
        s(:send, nil, :configure,
          s(:lvar, :slot),
          s(:send, nil, :install_cmd,
            s(:lvar, :value)))),
      s(:def, :__configinfo_core,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:if,
          s(:const,
            s(:const, nil, :TkComm), :GET_CONFIGINFO_AS_ARRAY),
          s(:if,
            s(:begin,
              s(:and,
                s(:lvar, :slot),
                s(:send,
                  s(:send,
                    s(:lvar, :slot), :to_s), :=~,
                  s(:regexp,
                    s(:str, "^(|latin|ascii|kanji)("),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__font_optkeys), :join,
                        s(:str, "|"))),
                    s(:str, ")$"),
                    s(:regopt))))),
            s(:begin,
              s(:lvasgn, :fontkey,
                s(:nth_ref, 2)),
              s(:lvasgn, :conf,
                s(:send, nil, :tk_split_simplelist,
                  s(:send, nil, :tk_call_without_enc,
                    s(:splat,
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__confinfo_cmd), :<<,
                          s(:dstr,
                            s(:str, "-"),
                            s(:begin,
                              s(:lvar, :fontkey))))))),
                  s(:false),
                  s(:true))),
              s(:send,
                s(:lvar, :conf), :[]=,
                s(:send,
                  s(:send, nil, :__configinfo_struct), :[],
                  s(:sym, :key)),
                s(:send,
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:send,
                      s(:send, nil, :__configinfo_struct), :[],
                      s(:sym, :key))), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1)))),
              s(:if,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :alias)), :!),
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :size), :>,
                      s(:send,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)), :+,
                        s(:int, 1))))),
                s(:begin,
                  s(:lvasgn, :fnt,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :default_value)))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :TkFont), :is_system_font?,
                      s(:lvar, :fnt)),
                    s(:send,
                      s(:lvar, :conf), :[]=,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :default_value)),
                      s(:send,
                        s(:const, nil, :TkNamedFont), :new,
                        s(:lvar, :fnt))), nil),
                  s(:send,
                    s(:lvar, :conf), :[]=,
                    s(:send,
                      s(:send, nil, :__configinfo_struct), :[],
                      s(:sym, :current_value)),
                    s(:send, nil, :fontobj,
                      s(:lvar, :fontkey)))),
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)),
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :size), :==,
                          s(:send,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias)), :+,
                            s(:int, 1)))),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias))), :[],
                          s(:int, 0)), :==,
                        s(:str, "-")))),
                  s(:send,
                    s(:lvar, :conf), :[]=,
                    s(:send,
                      s(:send, nil, :__configinfo_struct), :[],
                      s(:sym, :alias)),
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :[],
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias))), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))), nil)),
              s(:lvar, :conf)),
            s(:if,
              s(:lvar, :slot),
              s(:begin,
                s(:lvasgn, :slot,
                  s(:send,
                    s(:lvar, :slot), :to_s)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :alias_name),
                    s(:lvasgn, :real_name)),
                  s(:block,
                    s(:send,
                      s(:send, nil, :__optkey_aliases), :find),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:send,
                        s(:lvar, :k), :to_s), :==,
                      s(:lvar, :slot)))),
                s(:if,
                  s(:lvar, :real_name),
                  s(:lvasgn, :slot,
                    s(:send,
                      s(:lvar, :real_name), :to_s)), nil),
                s(:case,
                  s(:lvar, :slot),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__val2ruby_optkeys), :keys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :method,
                        s(:send,
                          s(:send, nil, :_symbolkey2str,
                            s(:send, nil, :__val2ruby_optkeys)), :[],
                          s(:lvar, :slot))),
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:begin,
                          s(:lvasgn, :optval,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)))),
                          s(:kwbegin,
                            s(:rescue,
                              s(:lvasgn, :val,
                                s(:send,
                                  s(:lvar, :method), :call,
                                  s(:lvar, :optval))),
                              s(:resbody, nil,
                                s(:lvasgn, :e),
                                s(:begin,
                                  s(:if,
                                    s(:gvar, :$DEBUG),
                                    s(:send, nil, :warn,
                                      s(:dstr,
                                        s(:str, "Warning:: "),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :e), :message)),
                                        s(:str, " (when "),
                                        s(:begin,
                                          s(:lvar, :method)),
                                        s(:str, ".call("),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :optval), :inspect)),
                                        s(:str, ")"))), nil),
                                  s(:lvasgn, :val,
                                    s(:lvar, :optval)))), nil)),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:lvar, :val))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:begin,
                          s(:lvasgn, :optval,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)))),
                          s(:kwbegin,
                            s(:rescue,
                              s(:lvasgn, :val,
                                s(:send,
                                  s(:lvar, :method), :call,
                                  s(:lvar, :optval))),
                              s(:resbody, nil,
                                s(:lvasgn, :e),
                                s(:begin,
                                  s(:if,
                                    s(:gvar, :$DEBUG),
                                    s(:send, nil, :warn,
                                      s(:dstr,
                                        s(:str, "Warning:: "),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :e), :message)),
                                        s(:str, " (when "),
                                        s(:begin,
                                          s(:lvar, :method)),
                                        s(:str, ".call("),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :optval), :inspect)),
                                        s(:str, ")"))), nil),
                                  s(:lvasgn, :val,
                                    s(:lvar, :optval)))), nil)),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)),
                            s(:lvar, :val))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__methodcall_optkeys), :keys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :method,
                        s(:send,
                          s(:send, nil, :_symbolkey2str,
                            s(:send, nil, :__methodcall_optkeys)), :[],
                          s(:lvar, :slot))),
                      s(:return,
                        s(:array,
                          s(:lvar, :slot),
                          s(:str, ""),
                          s(:str, ""),
                          s(:str, ""),
                          s(:send,
                            s(:self), :__send__,
                            s(:lvar, :method)))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__numval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :number,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:nil))), nil)), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :number,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:nil))), nil)), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__numstrval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :default_value)),
                          s(:send, nil, :num_or_str,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :num_or_str,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__boolval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :bool,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:nil))), nil)), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :bool,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:nil))), nil)), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__listval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :default_value)),
                          s(:send, nil, :simplelist,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :simplelist,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__numlistval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:and,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)))),
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value))), :=~,
                              s(:regexp,
                                s(:str, "^[0-9]"),
                                s(:regopt))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :default_value)),
                          s(:send, nil, :list,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))), nil),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))),
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value))), :=~,
                              s(:regexp,
                                s(:str, "^[0-9]"),
                                s(:regopt))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :list,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__strval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:lvasgn, :conf,
                      s(:send, nil, :tk_split_simplelist,
                        s(:send, nil, :tk_call_without_enc,
                          s(:splat,
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__confinfo_cmd), :<<,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :slot))))))),
                        s(:false),
                        s(:true)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__tkvariable_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:begin,
                          s(:lvasgn, :v,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :v), :empty?),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:nil)),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send,
                                s(:const, nil, :TkVarAccess), :new,
                                s(:lvar, :v))))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:begin,
                          s(:lvasgn, :v,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :v), :empty?),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:nil)),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send,
                                s(:const, nil, :TkVarAccess), :new,
                                s(:lvar, :v))))), nil))),
                  s(:lvasgn, :conf,
                    s(:send, nil, :tk_split_list,
                      s(:send, nil, :tk_call_without_enc,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__confinfo_cmd), :<<,
                              s(:dstr,
                                s(:str, "-"),
                                s(:begin,
                                  s(:lvar, :slot))))))),
                      s(:int, 1),
                      s(:false),
                      s(:true)))),
                s(:send,
                  s(:lvar, :conf), :[]=,
                  s(:send,
                    s(:send, nil, :__configinfo_struct), :[],
                    s(:sym, :key)),
                  s(:send,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :key))), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1)))),
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)),
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :size), :==,
                          s(:send,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias)), :+,
                            s(:int, 1)))),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias))), :[],
                          s(:int, 0)), :==,
                        s(:str, "-")))),
                  s(:send,
                    s(:lvar, :conf), :[]=,
                    s(:send,
                      s(:send, nil, :__configinfo_struct), :[],
                      s(:sym, :alias)),
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :[],
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias))), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))), nil),
                s(:lvar, :conf)),
              s(:begin,
                s(:lvasgn, :ret,
                  s(:block,
                    s(:send,
                      s(:send, nil, :tk_split_simplelist,
                        s(:send, nil, :tk_call_without_enc,
                          s(:splat,
                            s(:send, nil, :__confinfo_cmd))),
                        s(:false),
                        s(:false)), :collect),
                    s(:args,
                      s(:arg, :conflist)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:lvar, :conflist),
                          s(:false),
                          s(:true))),
                      s(:send,
                        s(:lvar, :conf), :[]=,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :key)),
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :key))), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))),
                      s(:lvasgn, :optkey,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :key)))),
                      s(:case,
                        s(:lvar, :optkey),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:send, nil, :__val2ruby_optkeys), :keys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:lvasgn, :method,
                              s(:send,
                                s(:send, nil, :_symbolkey2str,
                                  s(:send, nil, :__val2ruby_optkeys)), :[],
                                s(:lvar, :optkey))),
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:begin,
                                s(:lvasgn, :optval,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)))),
                                s(:kwbegin,
                                  s(:rescue,
                                    s(:lvasgn, :val,
                                      s(:send,
                                        s(:lvar, :method), :call,
                                        s(:lvar, :optval))),
                                    s(:resbody, nil,
                                      s(:lvasgn, :e),
                                      s(:begin,
                                        s(:if,
                                          s(:gvar, :$DEBUG),
                                          s(:send, nil, :warn,
                                            s(:dstr,
                                              s(:str, "Warning:: "),
                                              s(:begin,
                                                s(:send,
                                                  s(:lvar, :e), :message)),
                                              s(:str, " (when "),
                                              s(:begin,
                                                s(:lvar, :method)),
                                              s(:str, ".call("),
                                              s(:begin,
                                                s(:send,
                                                  s(:lvar, :optval), :inspect)),
                                              s(:str, ")"))), nil),
                                        s(:lvasgn, :val,
                                          s(:lvar, :optval)))), nil)),
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:lvar, :val))), nil),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:begin,
                                s(:lvasgn, :optval,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)))),
                                s(:kwbegin,
                                  s(:rescue,
                                    s(:lvasgn, :val,
                                      s(:send,
                                        s(:lvar, :method), :call,
                                        s(:lvar, :optval))),
                                    s(:resbody, nil,
                                      s(:lvasgn, :e),
                                      s(:begin,
                                        s(:if,
                                          s(:gvar, :$DEBUG),
                                          s(:send, nil, :warn,
                                            s(:dstr,
                                              s(:str, "Warning:: "),
                                              s(:begin,
                                                s(:send,
                                                  s(:lvar, :e), :message)),
                                              s(:str, " (when "),
                                              s(:begin,
                                                s(:lvar, :method)),
                                              s(:str, ".call("),
                                              s(:begin,
                                                s(:send,
                                                  s(:lvar, :optval), :inspect)),
                                              s(:str, ")"))), nil),
                                        s(:lvasgn, :val,
                                          s(:lvar, :optval)))), nil)),
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)),
                                  s(:lvar, :val))), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__strval_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)), nil),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__numval_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:send, nil, :number,
                                      s(:send,
                                        s(:lvar, :conf), :[],
                                        s(:send,
                                          s(:send, nil, :__configinfo_struct), :[],
                                          s(:sym, :default_value))))),
                                  s(:resbody, nil, nil,
                                    s(:send,
                                      s(:lvar, :conf), :[]=,
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :default_value)),
                                      s(:nil))), nil)), nil),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)),
                                    s(:send, nil, :number,
                                      s(:send,
                                        s(:lvar, :conf), :[],
                                        s(:send,
                                          s(:send, nil, :__configinfo_struct), :[],
                                          s(:sym, :current_value))))),
                                  s(:resbody, nil, nil,
                                    s(:send,
                                      s(:lvar, :conf), :[]=,
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :current_value)),
                                      s(:nil))), nil)), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__numstrval_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send, nil, :num_or_str,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))), nil),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:send, nil, :num_or_str,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value))))), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__boolval_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:send, nil, :bool,
                                      s(:send,
                                        s(:lvar, :conf), :[],
                                        s(:send,
                                          s(:send, nil, :__configinfo_struct), :[],
                                          s(:sym, :default_value))))),
                                  s(:resbody, nil, nil,
                                    s(:send,
                                      s(:lvar, :conf), :[]=,
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :default_value)),
                                      s(:nil))), nil)), nil),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)),
                                    s(:send, nil, :bool,
                                      s(:send,
                                        s(:lvar, :conf), :[],
                                        s(:send,
                                          s(:send, nil, :__configinfo_struct), :[],
                                          s(:sym, :current_value))))),
                                  s(:resbody, nil, nil,
                                    s(:send,
                                      s(:lvar, :conf), :[]=,
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :current_value)),
                                      s(:nil))), nil)), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__listval_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send, nil, :simplelist,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))), nil),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:send, nil, :simplelist,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value))))), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__numlistval_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:and,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :default_value)))),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :default_value))), :=~,
                                    s(:regexp,
                                      s(:str, "^[0-9]"),
                                      s(:regopt))))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send, nil, :list,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))), nil),
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value))),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :current_value))), :=~,
                                    s(:regexp,
                                      s(:str, "^[0-9]"),
                                      s(:regopt))))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:send, nil, :list,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value))))), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^("),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__tkvariable_optkeys), :join,
                                s(:str, "|"))),
                            s(:str, ")$"),
                            s(:regopt)),
                          s(:begin,
                            s(:if,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:begin,
                                s(:lvasgn, :v,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)))),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :v), :empty?),
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:nil)),
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:send,
                                      s(:const, nil, :TkVarAccess), :new,
                                      s(:lvar, :v))))), nil),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:begin,
                                s(:lvasgn, :v,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)))),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :v), :empty?),
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)),
                                    s(:nil)),
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)),
                                    s(:send,
                                      s(:const, nil, :TkVarAccess), :new,
                                      s(:lvar, :v))))), nil))),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))), :index,
                                s(:str, "{")),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send, nil, :tk_split_list,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send, nil, :tk_tcl2ruby,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)))))), nil),
                          s(:if,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))), :index,
                                s(:str, "{")),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:send, nil, :tk_split_list,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value))))),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:send, nil, :tk_tcl2ruby,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)))))), nil))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:and,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :alias)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :conf), :size), :==,
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :alias)), :+,
                                  s(:int, 1)))),
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :alias))), :[],
                                s(:int, 0)), :==,
                              s(:str, "-")))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :alias)),
                          s(:send,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :alias))), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1)))), nil),
                      s(:lvar, :conf)))),
                s(:block,
                  s(:send,
                    s(:send, nil, :__font_optkeys), :each),
                  s(:args,
                    s(:arg, :optkey)),
                  s(:begin,
                    s(:lvasgn, :optkey,
                      s(:send,
                        s(:lvar, :optkey), :to_s)),
                    s(:lvasgn, :fontconf,
                      s(:send,
                        s(:lvar, :ret), :assoc,
                        s(:lvar, :optkey))),
                    s(:if,
                      s(:and,
                        s(:lvar, :fontconf),
                        s(:send,
                          s(:send,
                            s(:lvar, :fontconf), :size), :>,
                          s(:int, 2))),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:lvar, :ret), :delete_if),
                          s(:args,
                            s(:arg, :inf)),
                          s(:send,
                            s(:send,
                              s(:lvar, :inf), :[],
                              s(:int, 0)), :=~,
                            s(:regexp,
                              s(:str, "^(|latin|ascii|kanji)"),
                              s(:begin,
                                s(:lvar, :optkey)),
                              s(:str, "$"),
                              s(:regopt)))),
                        s(:lvasgn, :fnt,
                          s(:send,
                            s(:lvar, :fontconf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)))),
                        s(:if,
                          s(:send,
                            s(:const, nil, :TkFont), :is_system_font?,
                            s(:lvar, :fnt)),
                          s(:send,
                            s(:lvar, :fontconf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:const, nil, :TkNamedFont), :new,
                              s(:lvar, :fnt))), nil),
                        s(:send,
                          s(:lvar, :fontconf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :fontobj,
                            s(:lvar, :optkey))),
                        s(:send,
                          s(:lvar, :ret), :push,
                          s(:lvar, :fontconf))), nil))),
                s(:block,
                  s(:send,
                    s(:send, nil, :__methodcall_optkeys), :each),
                  s(:args,
                    s(:arg, :optkey),
                    s(:arg, :m)),
                  s(:send,
                    s(:lvar, :ret), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :optkey), :to_s),
                      s(:str, ""),
                      s(:str, ""),
                      s(:str, ""),
                      s(:send,
                        s(:self), :__send__,
                        s(:lvar, :m))))),
                s(:lvar, :ret)))),
          s(:if,
            s(:begin,
              s(:and,
                s(:lvar, :slot),
                s(:send,
                  s(:send,
                    s(:lvar, :slot), :to_s), :=~,
                  s(:regexp,
                    s(:str, "^(|latin|ascii|kanji)("),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :__font_optkeys), :join,
                        s(:str, "|"))),
                    s(:str, ")$"),
                    s(:regopt))))),
            s(:begin,
              s(:lvasgn, :fontkey,
                s(:nth_ref, 2)),
              s(:lvasgn, :conf,
                s(:send, nil, :tk_split_simplelist,
                  s(:send, nil, :tk_call_without_enc,
                    s(:splat,
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__confinfo_cmd), :<<,
                          s(:dstr,
                            s(:str, "-"),
                            s(:begin,
                              s(:lvar, :fontkey))))))),
                  s(:false),
                  s(:true))),
              s(:send,
                s(:lvar, :conf), :[]=,
                s(:send,
                  s(:send, nil, :__configinfo_struct), :[],
                  s(:sym, :key)),
                s(:send,
                  s(:send,
                    s(:lvar, :conf), :[],
                    s(:send,
                      s(:send, nil, :__configinfo_struct), :[],
                      s(:sym, :key))), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1)))),
              s(:if,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :alias)), :!),
                    s(:send,
                      s(:send,
                        s(:lvar, :conf), :size), :>,
                      s(:send,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)), :+,
                        s(:int, 1))))),
                s(:begin,
                  s(:lvasgn, :fnt,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :default_value)))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :TkFont), :is_system_font?,
                      s(:lvar, :fnt)),
                    s(:send,
                      s(:lvar, :conf), :[]=,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :default_value)),
                      s(:send,
                        s(:const, nil, :TkNamedFont), :new,
                        s(:lvar, :fnt))), nil),
                  s(:send,
                    s(:lvar, :conf), :[]=,
                    s(:send,
                      s(:send, nil, :__configinfo_struct), :[],
                      s(:sym, :current_value)),
                    s(:send, nil, :fontobj,
                      s(:lvar, :fontkey))),
                  s(:hash,
                    s(:pair,
                      s(:send,
                        s(:lvar, :conf), :shift),
                      s(:lvar, :conf)))),
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :alias)),
                      s(:send,
                        s(:send,
                          s(:lvar, :conf), :size), :==,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :alias)), :+,
                          s(:int, 1))))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias))), :[],
                          s(:int, 0)), :==,
                        s(:str, "-")),
                      s(:send,
                        s(:lvar, :conf), :[]=,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)),
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias))), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))), nil),
                    s(:hash,
                      s(:pair,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 1))))),
                  s(:hash,
                    s(:pair,
                      s(:send,
                        s(:lvar, :conf), :shift),
                      s(:lvar, :conf)))))),
            s(:if,
              s(:lvar, :slot),
              s(:begin,
                s(:lvasgn, :slot,
                  s(:send,
                    s(:lvar, :slot), :to_s)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :alias_name),
                    s(:lvasgn, :real_name)),
                  s(:block,
                    s(:send,
                      s(:send, nil, :__optkey_aliases), :find),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :var)),
                    s(:send,
                      s(:send,
                        s(:lvar, :k), :to_s), :==,
                      s(:lvar, :slot)))),
                s(:if,
                  s(:lvar, :real_name),
                  s(:lvasgn, :slot,
                    s(:send,
                      s(:lvar, :real_name), :to_s)), nil),
                s(:case,
                  s(:lvar, :slot),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__val2ruby_optkeys), :keys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :method,
                        s(:send,
                          s(:send, nil, :_symbolkey2str,
                            s(:send, nil, :__val2ruby_optkeys)), :[],
                          s(:lvar, :slot))),
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:begin,
                          s(:lvasgn, :optval,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)))),
                          s(:kwbegin,
                            s(:rescue,
                              s(:lvasgn, :val,
                                s(:send,
                                  s(:lvar, :method), :call,
                                  s(:lvar, :optval))),
                              s(:resbody, nil,
                                s(:lvasgn, :e),
                                s(:begin,
                                  s(:if,
                                    s(:gvar, :$DEBUG),
                                    s(:send, nil, :warn,
                                      s(:dstr,
                                        s(:str, "Warning:: "),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :e), :message)),
                                        s(:str, " (when "),
                                        s(:begin,
                                          s(:lvar, :method)),
                                        s(:str, ".call("),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :optval), :inspect)),
                                        s(:str, ")"))), nil),
                                  s(:lvasgn, :val,
                                    s(:lvar, :optval)))), nil)),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:lvar, :val))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:begin,
                          s(:lvasgn, :optval,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)))),
                          s(:kwbegin,
                            s(:rescue,
                              s(:lvasgn, :val,
                                s(:send,
                                  s(:lvar, :method), :call,
                                  s(:lvar, :optval))),
                              s(:resbody, nil,
                                s(:lvasgn, :e),
                                s(:begin,
                                  s(:if,
                                    s(:gvar, :$DEBUG),
                                    s(:send, nil, :warn,
                                      s(:dstr,
                                        s(:str, "Warning:: "),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :e), :message)),
                                        s(:str, " (when "),
                                        s(:begin,
                                          s(:lvar, :method)),
                                        s(:str, ".call("),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :optval), :inspect)),
                                        s(:str, ")"))), nil),
                                  s(:lvasgn, :val,
                                    s(:lvar, :optval)))), nil)),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)),
                            s(:lvar, :val))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__methodcall_optkeys), :keys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :method,
                        s(:send,
                          s(:send, nil, :_symbolkey2str,
                            s(:send, nil, :__methodcall_optkeys)), :[],
                          s(:lvar, :slot))),
                      s(:return,
                        s(:hash,
                          s(:pair,
                            s(:lvar, :slot),
                            s(:array,
                              s(:str, ""),
                              s(:str, ""),
                              s(:str, ""),
                              s(:send,
                                s(:self), :__send__,
                                s(:lvar, :method)))))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__numval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :number,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:nil))), nil)), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :number,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:nil))), nil)), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__numstrval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :default_value)),
                          s(:send, nil, :num_or_str,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :num_or_str,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__boolval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :bool,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:nil))), nil)), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:kwbegin,
                          s(:rescue,
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :bool,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))),
                            s(:resbody, nil, nil,
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:nil))), nil)), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__listval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :default_value)),
                          s(:send, nil, :simplelist,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :simplelist,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__numlistval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:and,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)))),
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value))), :=~,
                              s(:regexp,
                                s(:str, "^[0-9]"),
                                s(:regopt))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :default_value)),
                          s(:send, nil, :list,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))), nil),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))),
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value))), :=~,
                              s(:regexp,
                                s(:str, "^[0-9]"),
                                s(:regopt))))),
                        s(:send,
                          s(:lvar, :conf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :list,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__tkvariable_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :conf,
                        s(:send, nil, :tk_split_simplelist,
                          s(:send, nil, :tk_call_without_enc,
                            s(:splat,
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :__confinfo_cmd), :<<,
                                  s(:dstr,
                                    s(:str, "-"),
                                    s(:begin,
                                      s(:lvar, :slot))))))),
                          s(:false),
                          s(:true))),
                      s(:if,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value))))),
                        s(:begin,
                          s(:lvasgn, :v,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :v), :empty?),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:nil)),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send,
                                s(:const, nil, :TkVarAccess), :new,
                                s(:lvar, :v))))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value)))),
                        s(:begin,
                          s(:lvasgn, :v,
                            s(:send,
                              s(:lvar, :conf), :[],
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)))),
                          s(:if,
                            s(:send,
                              s(:lvar, :v), :empty?),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:nil)),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send,
                                s(:const, nil, :TkVarAccess), :new,
                                s(:lvar, :v))))), nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :__strval_optkeys), :join,
                          s(:str, "|"))),
                      s(:str, ")$"),
                      s(:regopt)),
                    s(:lvasgn, :conf,
                      s(:send, nil, :tk_split_simplelist,
                        s(:send, nil, :tk_call_without_enc,
                          s(:splat,
                            s(:begin,
                              s(:send,
                                s(:send, nil, :__confinfo_cmd), :<<,
                                s(:dstr,
                                  s(:str, "-"),
                                  s(:begin,
                                    s(:lvar, :slot))))))),
                        s(:false),
                        s(:true)))),
                  s(:lvasgn, :conf,
                    s(:send, nil, :tk_split_list,
                      s(:send, nil, :tk_call_without_enc,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__confinfo_cmd), :<<,
                              s(:dstr,
                                s(:str, "-"),
                                s(:begin,
                                  s(:lvar, :slot))))))),
                      s(:int, 0),
                      s(:false),
                      s(:true)))),
                s(:send,
                  s(:lvar, :conf), :[]=,
                  s(:send,
                    s(:send, nil, :__configinfo_struct), :[],
                    s(:sym, :key)),
                  s(:send,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :key))), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1)))),
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :alias)),
                      s(:send,
                        s(:send,
                          s(:lvar, :conf), :size), :==,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :alias)), :+,
                          s(:int, 1))))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias))), :[],
                          s(:int, 0)), :==,
                        s(:str, "-")),
                      s(:send,
                        s(:lvar, :conf), :[]=,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)),
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias))), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))), nil),
                    s(:hash,
                      s(:pair,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:int, 1))))),
                  s(:hash,
                    s(:pair,
                      s(:send,
                        s(:lvar, :conf), :shift),
                      s(:lvar, :conf))))),
              s(:begin,
                s(:lvasgn, :ret,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:send, nil, :tk_split_simplelist,
                      s(:send, nil, :tk_call_without_enc,
                        s(:splat,
                          s(:send, nil, :__confinfo_cmd))),
                      s(:false),
                      s(:false)), :each),
                  s(:args,
                    s(:arg, :conflist)),
                  s(:begin,
                    s(:lvasgn, :conf,
                      s(:send, nil, :tk_split_simplelist,
                        s(:lvar, :conflist),
                        s(:false),
                        s(:true))),
                    s(:send,
                      s(:lvar, :conf), :[]=,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :key)),
                      s(:send,
                        s(:send,
                          s(:lvar, :conf), :[],
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :key))), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1)))),
                    s(:lvasgn, :optkey,
                      s(:send,
                        s(:lvar, :conf), :[],
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :key)))),
                    s(:case,
                      s(:lvar, :optkey),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:send, nil, :__val2ruby_optkeys), :keys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:lvasgn, :method,
                            s(:send,
                              s(:send, nil, :_symbolkey2str,
                                s(:send, nil, :__val2ruby_optkeys)), :[],
                              s(:lvar, :optkey))),
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:begin,
                              s(:lvasgn, :optval,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)))),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:lvasgn, :val,
                                    s(:send,
                                      s(:lvar, :method), :call,
                                      s(:lvar, :optval))),
                                  s(:resbody, nil,
                                    s(:lvasgn, :e),
                                    s(:begin,
                                      s(:if,
                                        s(:gvar, :$DEBUG),
                                        s(:send, nil, :warn,
                                          s(:dstr,
                                            s(:str, "Warning:: "),
                                            s(:begin,
                                              s(:send,
                                                s(:lvar, :e), :message)),
                                            s(:str, " (when "),
                                            s(:begin,
                                              s(:lvar, :method)),
                                            s(:str, ".call("),
                                            s(:begin,
                                              s(:send,
                                                s(:lvar, :optval), :inspect)),
                                            s(:str, ")"))), nil),
                                      s(:lvasgn, :val,
                                        s(:lvar, :optval)))), nil)),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:lvar, :val))), nil),
                          s(:if,
                            s(:begin,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)))),
                            s(:begin,
                              s(:lvasgn, :optval,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:kwbegin,
                                s(:rescue,
                                  s(:lvasgn, :val,
                                    s(:send,
                                      s(:lvar, :method), :call,
                                      s(:lvar, :optval))),
                                  s(:resbody, nil,
                                    s(:lvasgn, :e),
                                    s(:begin,
                                      s(:if,
                                        s(:gvar, :$DEBUG),
                                        s(:send, nil, :warn,
                                          s(:dstr,
                                            s(:str, "Warning:: "),
                                            s(:begin,
                                              s(:send,
                                                s(:lvar, :e), :message)),
                                            s(:str, " (when "),
                                            s(:begin,
                                              s(:lvar, :method)),
                                            s(:str, ".call("),
                                            s(:begin,
                                              s(:send,
                                                s(:lvar, :optval), :inspect)),
                                            s(:str, ")"))), nil),
                                      s(:lvasgn, :val,
                                        s(:lvar, :optval)))), nil)),
                              s(:send,
                                s(:lvar, :conf), :[]=,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)),
                                s(:lvar, :val))), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__strval_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)), nil),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__numval_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:kwbegin,
                              s(:rescue,
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send, nil, :number,
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :default_value))))),
                                s(:resbody, nil, nil,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:nil))), nil)), nil),
                          s(:if,
                            s(:begin,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)))),
                            s(:kwbegin,
                              s(:rescue,
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)),
                                  s(:send, nil, :number,
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :current_value))))),
                                s(:resbody, nil, nil,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)),
                                    s(:nil))), nil)), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__numstrval_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :num_or_str,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))), nil),
                          s(:if,
                            s(:begin,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :num_or_str,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__boolval_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:kwbegin,
                              s(:rescue,
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send, nil, :bool,
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :default_value))))),
                                s(:resbody, nil, nil,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)),
                                    s(:nil))), nil)), nil),
                          s(:if,
                            s(:begin,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)))),
                            s(:kwbegin,
                              s(:rescue,
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)),
                                  s(:send, nil, :bool,
                                    s(:send,
                                      s(:lvar, :conf), :[],
                                      s(:send,
                                        s(:send, nil, :__configinfo_struct), :[],
                                        s(:sym, :current_value))))),
                                s(:resbody, nil, nil,
                                  s(:send,
                                    s(:lvar, :conf), :[]=,
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value)),
                                    s(:nil))), nil)), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__listval_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :simplelist,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))), nil),
                          s(:if,
                            s(:begin,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :simplelist,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__numlistval_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:and,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value)))),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :default_value))), :=~,
                                  s(:regexp,
                                    s(:str, "^[0-9]"),
                                    s(:regopt))))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :list,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))), nil),
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :conf), :[],
                                    s(:send,
                                      s(:send, nil, :__configinfo_struct), :[],
                                      s(:sym, :current_value))), :=~,
                                  s(:regexp,
                                    s(:str, "^[0-9]"),
                                    s(:regopt))))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :list,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))), nil))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^("),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :__tkvariable_optkeys), :join,
                              s(:str, "|"))),
                          s(:str, ")$"),
                          s(:regopt)),
                        s(:begin,
                          s(:if,
                            s(:begin,
                              s(:and,
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value)),
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:begin,
                              s(:lvasgn, :v,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :v), :empty?),
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:nil)),
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)),
                                  s(:send,
                                    s(:const, nil, :TkVarAccess), :new)))), nil),
                          s(:if,
                            s(:begin,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value)))),
                            s(:begin,
                              s(:lvasgn, :v,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :v), :empty?),
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)),
                                  s(:nil)),
                                s(:send,
                                  s(:lvar, :conf), :[]=,
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)),
                                  s(:send,
                                    s(:const, nil, :TkVarAccess), :new)))), nil))),
                      s(:begin,
                        s(:if,
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value))))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :default_value))), :index,
                              s(:str, "{")),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :tk_split_list,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value))))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :default_value)),
                              s(:send, nil, :tk_tcl2ruby,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :default_value)))))), nil),
                        s(:if,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :current_value))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :current_value))), :index,
                              s(:str, "{")),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :tk_split_list,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value))))),
                            s(:send,
                              s(:lvar, :conf), :[]=,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :current_value)),
                              s(:send, nil, :tk_tcl2ruby,
                                s(:send,
                                  s(:lvar, :conf), :[],
                                  s(:send,
                                    s(:send, nil, :__configinfo_struct), :[],
                                    s(:sym, :current_value)))))), nil))),
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :alias)),
                          s(:send,
                            s(:send,
                              s(:lvar, :conf), :size), :==,
                            s(:send,
                              s(:send,
                                s(:send, nil, :__configinfo_struct), :[],
                                s(:sym, :alias)), :+,
                              s(:int, 1))))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :alias))), :[],
                              s(:int, 0)), :==,
                            s(:str, "-")),
                          s(:send,
                            s(:lvar, :conf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias)),
                            s(:send,
                              s(:send,
                                s(:lvar, :conf), :[],
                                s(:send,
                                  s(:send, nil, :__configinfo_struct), :[],
                                  s(:sym, :alias))), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1)))), nil),
                        s(:send,
                          s(:lvar, :ret), :[]=,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:int, 1)))),
                      s(:send,
                        s(:lvar, :ret), :[]=,
                        s(:send,
                          s(:lvar, :conf), :shift),
                        s(:lvar, :conf))))),
                s(:block,
                  s(:send,
                    s(:send, nil, :__font_optkeys), :each),
                  s(:args,
                    s(:arg, :optkey)),
                  s(:begin,
                    s(:lvasgn, :optkey,
                      s(:send,
                        s(:lvar, :optkey), :to_s)),
                    s(:lvasgn, :fontconf,
                      s(:send,
                        s(:lvar, :ret), :[],
                        s(:lvar, :optkey))),
                    s(:if,
                      s(:send,
                        s(:lvar, :fontconf), :kind_of?,
                        s(:const, nil, :Array)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :ret), :delete,
                          s(:lvar, :optkey)),
                        s(:send,
                          s(:lvar, :ret), :delete,
                          s(:send,
                            s(:str, "latin"), :<<,
                            s(:lvar, :optkey))),
                        s(:send,
                          s(:lvar, :ret), :delete,
                          s(:send,
                            s(:str, "ascii"), :<<,
                            s(:lvar, :optkey))),
                        s(:send,
                          s(:lvar, :ret), :delete,
                          s(:send,
                            s(:str, "kanji"), :<<,
                            s(:lvar, :optkey))),
                        s(:lvasgn, :fnt,
                          s(:send,
                            s(:lvar, :fontconf), :[],
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)))),
                        s(:if,
                          s(:send,
                            s(:const, nil, :TkFont), :is_system_font?,
                            s(:lvar, :fnt)),
                          s(:send,
                            s(:lvar, :fontconf), :[]=,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :default_value)),
                            s(:send,
                              s(:const, nil, :TkNamedFont), :new,
                              s(:lvar, :fnt))), nil),
                        s(:send,
                          s(:lvar, :fontconf), :[]=,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :current_value)),
                          s(:send, nil, :fontobj,
                            s(:lvar, :optkey))),
                        s(:send,
                          s(:lvar, :ret), :[]=,
                          s(:lvar, :optkey),
                          s(:lvar, :fontconf))), nil))),
                s(:block,
                  s(:send,
                    s(:send, nil, :__methodcall_optkeys), :each),
                  s(:args,
                    s(:arg, :optkey),
                    s(:arg, :m)),
                  s(:send,
                    s(:lvar, :ret), :[]=,
                    s(:send,
                      s(:lvar, :optkey), :to_s),
                    s(:array,
                      s(:str, ""),
                      s(:str, ""),
                      s(:str, ""),
                      s(:send,
                        s(:self), :__send__,
                        s(:lvar, :m))))),
                s(:lvar, :ret)))))),
      s(:send, nil, :private,
        s(:sym, :__configinfo_core)),
      s(:def, :configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:if,
          s(:and,
            s(:lvar, :slot),
            s(:send,
              s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :__configinfo_core,
                s(:lvar, :slot)),
              s(:resbody, nil, nil,
                s(:send,
                  s(:send,
                    s(:const, nil, :Array), :new,
                    s(:send,
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :values), :max)), :unshift,
                  s(:send,
                    s(:lvar, :slot), :to_s))), nil)),
          s(:send, nil, :__configinfo_core,
            s(:lvar, :slot)))),
      s(:def, :current_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:if,
          s(:const,
            s(:const, nil, :TkComm), :GET_CONFIGINFO_AS_ARRAY),
          s(:if,
            s(:lvar, :slot),
            s(:begin,
              s(:lvasgn, :org_slot,
                s(:lvar, :slot)),
              s(:while_post,
                s(:begin,
                  s(:send,
                    s(:lvar, :org_slot), :!=,
                    s(:lvar, :slot))),
                s(:kwbegin,
                  s(:lvasgn, :conf,
                    s(:send, nil, :configinfo,
                      s(:lvar, :slot))),
                  s(:if,
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :alias)), :!),
                        s(:send,
                          s(:send,
                            s(:lvar, :conf), :size), :>,
                          s(:send,
                            s(:send,
                              s(:send, nil, :__configinfo_struct), :[],
                              s(:sym, :alias)), :+,
                            s(:int, 1))))),
                    s(:return,
                      s(:hash,
                        s(:pair,
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :conf), :[],
                            s(:int, -1))))), nil),
                  s(:lvasgn, :slot,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:send,
                        s(:send, nil, :__configinfo_struct), :[],
                        s(:sym, :alias)))))),
              s(:send, nil, :fail,
                s(:const, nil, :RuntimeError),
                s(:dstr,
                  s(:str, "there is a configure alias loop about '"),
                  s(:begin,
                    s(:lvar, :org_slot)),
                  s(:str, "'")))),
            s(:begin,
              s(:lvasgn, :ret,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send, nil, :configinfo), :each),
                s(:args,
                  s(:arg, :cnf)),
                s(:if,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:send, nil, :__configinfo_struct), :[],
                          s(:sym, :alias)), :!),
                      s(:send,
                        s(:send,
                          s(:lvar, :cnf), :size), :>,
                        s(:send,
                          s(:send,
                            s(:send, nil, :__configinfo_struct), :[],
                            s(:sym, :alias)), :+,
                          s(:int, 1))))),
                  s(:send,
                    s(:lvar, :ret), :[]=,
                    s(:send,
                      s(:lvar, :cnf), :[],
                      s(:int, 0)),
                    s(:send,
                      s(:lvar, :cnf), :[],
                      s(:int, -1))), nil)),
              s(:lvar, :ret))),
          s(:begin,
            s(:lvasgn, :ret,
              s(:hash)),
            s(:block,
              s(:send,
                s(:send, nil, :configinfo,
                  s(:lvar, :slot)), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :cnf)),
              s(:if,
                s(:send,
                  s(:lvar, :cnf), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:lvar, :ret), :[]=,
                  s(:lvar, :key),
                  s(:send,
                    s(:lvar, :cnf), :[],
                    s(:int, -1))), nil)),
            s(:lvar, :ret)))))),
  s(:class,
    s(:const, nil, :TkObject),
    s(:const, nil, :TkKernel),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :TkCore)),
      s(:send, nil, :include,
        s(:const, nil, :Tk)),
      s(:send, nil, :include,
        s(:const, nil, :TkConfigMethod)),
      s(:send, nil, :include,
        s(:const, nil, :TkBindCore)),
      s(:def, :epath,
        s(:args),
        s(:ivar, :@path)),
      s(:def, :to_eval,
        s(:args),
        s(:ivar, :@path)),
      s(:def, :tk_send,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_without_enc,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_without_enc,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_with_enc,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_with_enc,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_to_list,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_to_list,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_to_list_without_enc,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_to_list_without_enc,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_to_list_with_enc,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_to_list_with_enc,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_to_simplelist,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_to_simplelist,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_to_simplelist_without_enc,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_to_simplelist_without_enc,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :tk_send_to_simplelist_with_enc,
        s(:args,
          s(:arg, :cmd),
          s(:restarg, :rest)),
        s(:send, nil, :tk_call_to_simplelist_with_enc,
          s(:send, nil, :path),
          s(:lvar, :cmd),
          s(:splat,
            s(:lvar, :rest)))),
      s(:def, :method_missing,
        s(:args,
          s(:arg, :id),
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :id), :id2name)),
          s(:case,
            s(:send,
              s(:lvar, :args), :length),
            s(:when,
              s(:int, 1),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :name), :[],
                    s(:int, -1)), :==,
                  s(:str, "=")),
                s(:begin,
                  s(:send, nil, :configure,
                    s(:send,
                      s(:lvar, :name), :[],
                      s(:irange,
                        s(:int, 0),
                        s(:int, -2))),
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0))),
                s(:begin,
                  s(:send, nil, :configure,
                    s(:lvar, :name),
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))),
                  s(:self)))),
            s(:when,
              s(:int, 0),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :cget,
                    s(:lvar, :name)),
                  s(:resbody, nil, nil,
                    s(:if,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:self), :kind_of?,
                            s(:const, nil, :TkWindow)),
                          s(:send,
                            s(:lvar, :name), :!=,
                            s(:str, "to_ary"))),
                        s(:send,
                          s(:lvar, :name), :!=,
                          s(:str, "to_str"))),
                      s(:send, nil, :fail,
                        s(:const, nil, :NameError),
                        s(:dstr,
                          s(:str, "unknown option '"),
                          s(:begin,
                            s(:lvar, :id)),
                          s(:str, "' for "),
                          s(:begin,
                            s(:send,
                              s(:self), :inspect)),
                          s(:str, " (deleted widget?)"))),
                      s(:super,
                        s(:lvar, :id),
                        s(:splat,
                          s(:lvar, :args))))), nil))),
            s(:super,
              s(:lvar, :id),
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :event_generate,
        s(:args,
          s(:arg, :context),
          s(:optarg, :keys,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :context), :kind_of?,
            s(:const,
              s(:const, nil, :TkEvent), :Event)),
          s(:send,
            s(:lvar, :context), :generate,
            s(:self),
            s(:begin,
              s(:if,
                s(:begin,
                  s(:lvar, :keys)),
                s(:lvar, :keys),
                s(:hash)))),
          s(:if,
            s(:lvar, :keys),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "event"),
              s(:str, "generate"),
              s(:send, nil, :path),
              s(:dstr,
                s(:str, "<"),
                s(:begin,
                  s(:send, nil, :tk_event_sequence,
                    s(:lvar, :context))),
                s(:str, ">")),
              s(:splat,
                s(:send, nil, :hash_kv,
                  s(:lvar, :keys),
                  s(:true)))),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "event"),
              s(:str, "generate"),
              s(:send, nil, :path),
              s(:dstr,
                s(:str, "<"),
                s(:begin,
                  s(:send, nil, :tk_event_sequence,
                    s(:lvar, :context))),
                s(:str, ">")))))),
      s(:def, :tk_trace_variable,
        s(:args,
          s(:arg, :v)),
        s(:lvar, :v)),
      s(:send, nil, :private,
        s(:sym, :tk_trace_variable)),
      s(:def, :destroy,
        s(:args), nil))),
  s(:class,
    s(:const, nil, :TkWindow),
    s(:const, nil, :TkObject),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :TkWinfo)),
      s(:send, nil, :extend,
        s(:const, nil, :TkBindCore)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :Wm_for_General)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Tk), :Busy)),
      s(:cvasgn, :@@WIDGET_INSPECT_FULL,
        s(:false)),
      s(:defs,
        s(:const, nil, :TkWindow), :_widget_inspect_full_?,
        s(:args),
        s(:cvar, :@@WIDGET_INSPECT_FULL)),
      s(:defs,
        s(:const, nil, :TkWindow), :_widget_inspect_full_=,
        s(:args,
          s(:arg, :mode)),
        s(:cvasgn, :@@WIDGET_INSPECT_FULL,
          s(:or,
            s(:begin,
              s(:and,
                s(:lvar, :mode),
                s(:true))),
            s(:false)))),
      s(:casgn, nil, :TkCommandNames,
        s(:send,
          s(:array), :freeze)),
      s(:casgn, nil, :WidgetClassName,
        s(:send,
          s(:str, ""), :freeze)),
      s(:defs,
        s(:self), :to_eval,
        s(:args),
        s(:const,
          s(:self), :WidgetClassName)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :parent,
            s(:nil)),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :parent), :kind_of?,
              s(:const, nil, :Hash)),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send, nil, :_symbolkey2str,
                  s(:lvar, :parent))),
              s(:lvasgn, :parent,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "parent"))),
              s(:lvasgn, :widgetname,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "widgetname"))),
              s(:send, nil, :install_win,
                s(:if,
                  s(:lvar, :parent),
                  s(:send,
                    s(:lvar, :parent), :path), nil),
                s(:lvar, :widgetname)),
              s(:lvasgn, :without_creating,
                s(:send,
                  s(:lvar, :keys), :delete,
                  s(:str, "without_creating")))),
            s(:if,
              s(:lvar, :keys),
              s(:begin,
                s(:lvasgn, :keys,
                  s(:send, nil, :_symbolkey2str,
                    s(:lvar, :keys))),
                s(:lvasgn, :widgetname,
                  s(:send,
                    s(:lvar, :keys), :delete,
                    s(:str, "widgetname"))),
                s(:send, nil, :install_win,
                  s(:if,
                    s(:lvar, :parent),
                    s(:send,
                      s(:lvar, :parent), :path), nil),
                  s(:lvar, :widgetname)),
                s(:lvasgn, :without_creating,
                  s(:send,
                    s(:lvar, :keys), :delete,
                    s(:str, "without_creating")))),
              s(:send, nil, :install_win,
                s(:if,
                  s(:lvar, :parent),
                  s(:send,
                    s(:lvar, :parent), :path), nil)))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :method,
                  s(:sym, :create_self)), :arity), :==,
              s(:int, 0)),
            s(:begin,
              s(:if,
                s(:gvar, :$DEBUG),
                s(:send, nil, :p,
                  s(:str, "create_self has no arg")), nil),
              s(:if,
                s(:lvar, :without_creating), nil,
                s(:send, nil, :create_self)),
              s(:if,
                s(:lvar, :keys),
                s(:send, nil, :configure,
                  s(:lvar, :keys)), nil)),
            s(:begin,
              s(:if,
                s(:gvar, :$DEBUG),
                s(:send, nil, :p,
                  s(:str, "create_self has args")), nil),
              s(:lvasgn, :fontkeys,
                s(:hash)),
              s(:lvasgn, :methodkeys,
                s(:hash)),
              s(:if,
                s(:lvar, :keys),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:send, nil, :__font_optkeys), :each),
                    s(:args,
                      s(:arg, :key)),
                    s(:begin,
                      s(:lvasgn, :fkey,
                        s(:send,
                          s(:lvar, :key), :to_s)),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :key?,
                          s(:lvar, :fkey)),
                        s(:send,
                          s(:lvar, :fontkeys), :[]=,
                          s(:lvar, :fkey),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:lvar, :fkey))), nil),
                      s(:lvasgn, :fkey,
                        s(:dstr,
                          s(:str, "kanji"),
                          s(:begin,
                            s(:lvar, :key)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :key?,
                          s(:lvar, :fkey)),
                        s(:send,
                          s(:lvar, :fontkeys), :[]=,
                          s(:lvar, :fkey),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:lvar, :fkey))), nil),
                      s(:lvasgn, :fkey,
                        s(:dstr,
                          s(:str, "latin"),
                          s(:begin,
                            s(:lvar, :key)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :key?,
                          s(:lvar, :fkey)),
                        s(:send,
                          s(:lvar, :fontkeys), :[]=,
                          s(:lvar, :fkey),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:lvar, :fkey))), nil),
                      s(:lvasgn, :fkey,
                        s(:dstr,
                          s(:str, "ascii"),
                          s(:begin,
                            s(:lvar, :key)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :key?,
                          s(:lvar, :fkey)),
                        s(:send,
                          s(:lvar, :fontkeys), :[]=,
                          s(:lvar, :fkey),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:lvar, :fkey))), nil))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :__optkey_aliases), :each),
                    s(:args,
                      s(:arg, :alias_name),
                      s(:arg, :real_name)),
                    s(:begin,
                      s(:lvasgn, :alias_name,
                        s(:send,
                          s(:lvar, :alias_name), :to_s)),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :has_key?,
                          s(:lvar, :alias_name)),
                        s(:send,
                          s(:lvar, :keys), :[]=,
                          s(:send,
                            s(:lvar, :real_name), :to_s),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:lvar, :alias_name))), nil))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :__methodcall_optkeys), :each),
                    s(:args,
                      s(:arg, :key)),
                    s(:begin,
                      s(:lvasgn, :key,
                        s(:send,
                          s(:lvar, :key), :to_s)),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :key?,
                          s(:lvar, :key)),
                        s(:send,
                          s(:lvar, :methodkeys), :[]=,
                          s(:lvar, :key),
                          s(:send,
                            s(:lvar, :keys), :delete,
                            s(:lvar, :key))), nil))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :__ruby2val_optkeys), :each),
                    s(:args,
                      s(:arg, :key),
                      s(:arg, :method)),
                    s(:begin,
                      s(:lvasgn, :key,
                        s(:send,
                          s(:lvar, :key), :to_s)),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :has_key?,
                          s(:lvar, :key)),
                        s(:send,
                          s(:lvar, :keys), :[]=,
                          s(:lvar, :key),
                          s(:send,
                            s(:lvar, :method), :call,
                            s(:send,
                              s(:lvar, :keys), :[],
                              s(:lvar, :key)))), nil)))), nil),
              s(:if,
                s(:and,
                  s(:lvar, :without_creating),
                  s(:lvar, :keys)),
                s(:send, nil, :configure,
                  s(:send, nil, :__conv_keyonly_opts,
                    s(:lvar, :keys))),
                s(:send, nil, :create_self,
                  s(:send, nil, :__conv_keyonly_opts,
                    s(:lvar, :keys)))),
              s(:if,
                s(:send,
                  s(:lvar, :fontkeys), :empty?), nil,
                s(:send, nil, :font_configure,
                  s(:lvar, :fontkeys))),
              s(:if,
                s(:send,
                  s(:lvar, :methodkeys), :empty?), nil,
                s(:send, nil, :configure,
                  s(:lvar, :methodkeys))))))),
      s(:def, :create_self,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :cmd,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:self), :class), :TkCommandNames), :[],
                    s(:int, 0))),
                s(:if,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:lvar, :cmd), :kind_of?,
                        s(:const, nil, :String)),
                      s(:send,
                        s(:send,
                          s(:lvar, :cmd), :length), :>,
                        s(:int, 0)))), nil,
                  s(:send, nil, :fail))),
              s(:resbody, nil, nil,
                s(:send, nil, :fail,
                  s(:const, nil, :RuntimeError),
                  s(:dstr,
                    s(:str, "class "),
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, " may be an abstract class")))), nil)),
          s(:if,
            s(:and,
              s(:lvar, :keys),
              s(:send,
                s(:lvar, :keys), :!=,
                s(:const, nil, :None))),
            s(:if,
              s(:send,
                s(:const, nil, :TkConfigMethod), :__IGNORE_UNKNOWN_CONFIGURE_OPTION__),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :tk_call_without_enc,
                    s(:lvar, :cmd),
                    s(:ivar, :@path),
                    s(:splat,
                      s(:send, nil, :hash_kv,
                        s(:lvar, :keys),
                        s(:true)))),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:send, nil, :tk_call_without_enc,
                        s(:lvar, :cmd),
                        s(:ivar, :@path)),
                      s(:lvasgn, :keys,
                        s(:send, nil, :__check_available_configure_options,
                          s(:lvar, :keys))),
                      s(:if,
                        s(:send,
                          s(:lvar, :keys), :empty?), nil,
                        s(:kwbegin,
                          s(:rescue,
                            s(:send, nil, :configure,
                              s(:lvar, :keys)),
                            s(:resbody, nil, nil,
                              s(:kwbegin,
                                s(:rescue,
                                  s(:send, nil, :tk_call_without_enc,
                                    s(:str, "destroy"),
                                    s(:ivar, :@path)),
                                  s(:resbody, nil, nil,
                                    s(:send, nil, :fail,
                                      s(:lvar, :e))),
                                  s(:send, nil, :tk_call_without_enc,
                                    s(:lvar, :cmd),
                                    s(:ivar, :@path),
                                    s(:splat,
                                      s(:send, nil, :hash_kv,
                                        s(:lvar, :keys),
                                        s(:true))))))), nil))))), nil)),
              s(:send, nil, :tk_call_without_enc,
                s(:lvar, :cmd),
                s(:ivar, :@path),
                s(:splat,
                  s(:send, nil, :hash_kv,
                    s(:lvar, :keys),
                    s(:true))))),
            s(:send, nil, :tk_call_without_enc,
              s(:lvar, :cmd),
              s(:ivar, :@path))))),
      s(:send, nil, :private,
        s(:sym, :create_self)),
      s(:def, :inspect,
        s(:args),
        s(:if,
          s(:cvar, :@@WIDGET_INSPECT_FULL),
          s(:zsuper),
          s(:begin,
            s(:lvasgn, :str,
              s(:zsuper)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :[],
                    s(:irange,
                      s(:int, 0),
                      s(:begin,
                        s(:send,
                          s(:lvar, :str), :index,
                          s(:str, " "))))), :<<,
                  s(:str, "@path=")), :<<,
                s(:send,
                  s(:ivar, :@path), :inspect)), :<<,
              s(:str, ">"))))),
      s(:def, :exist?,
        s(:args),
        s(:send,
          s(:const, nil, :TkWinfo), :exist?,
          s(:self))),
      s(:alias,
        s(:sym, :subcommand),
        s(:sym, :tk_send)),
      s(:def, :bind_class,
        s(:args),
        s(:or,
          s(:ivar, :@db_class),
          s(:send,
            s(:self), :class))),
      s(:def, :database_classname,
        s(:args),
        s(:send,
          s(:const, nil, :TkWinfo), :classname,
          s(:self))),
      s(:def, :database_class,
        s(:args),
        s(:begin,
          s(:lvasgn, :name,
            s(:send, nil, :database_classname)),
          s(:if,
            s(:send,
              s(:const, nil, :WidgetClassNames), :[],
              s(:lvar, :name)),
            s(:send,
              s(:const, nil, :WidgetClassNames), :[],
              s(:lvar, :name)),
            s(:send,
              s(:const, nil, :TkDatabaseClass), :new,
              s(:lvar, :name))))),
      s(:defs,
        s(:self), :database_classname,
        s(:args),
        s(:const,
          s(:self), :WidgetClassName)),
      s(:defs,
        s(:self), :database_class,
        s(:args),
        s(:send,
          s(:const, nil, :WidgetClassNames), :[],
          s(:const,
            s(:self), :WidgetClassName))),
      s(:def, :pack,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :keys),
            s(:send,
              s(:const, nil, :TkPack), :configure,
              s(:self),
              s(:lvar, :keys)),
            s(:send,
              s(:const, nil, :TkPack), :configure,
              s(:self))),
          s(:self))),
      s(:def, :pack_in,
        s(:args,
          s(:arg, :target),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :keys),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send,
                  s(:lvar, :keys), :dup)),
              s(:send,
                s(:lvar, :keys), :[]=,
                s(:str, "in"),
                s(:lvar, :target))),
            s(:lvasgn, :keys,
              s(:hash,
                s(:pair,
                  s(:str, "in"),
                  s(:lvar, :target))))),
          s(:send,
            s(:const, nil, :TkPack), :configure,
            s(:self),
            s(:lvar, :keys)),
          s(:self))),
      s(:def, :pack_forget,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :TkPack), :forget,
            s(:self)),
          s(:self))),
      s(:alias,
        s(:sym, :unpack),
        s(:sym, :pack_forget)),
      s(:def, :pack_config,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :slot), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send,
            s(:const, nil, :TkPack), :configure,
            s(:self),
            s(:lvar, :slot)),
          s(:send,
            s(:const, nil, :TkPack), :configure,
            s(:self),
            s(:hash,
              s(:pair,
                s(:lvar, :slot),
                s(:lvar, :value)))))),
      s(:alias,
        s(:sym, :pack_configure),
        s(:sym, :pack_config)),
      s(:def, :pack_info,
        s(:args),
        s(:send,
          s(:const, nil, :TkPack), :info,
          s(:self))),
      s(:def, :pack_propagate,
        s(:args,
          s(:optarg, :mode,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :mode), :==,
            s(:const, nil, :None)),
          s(:send,
            s(:const, nil, :TkPack), :propagate,
            s(:self)),
          s(:begin,
            s(:send,
              s(:const, nil, :TkPack), :propagate,
              s(:self),
              s(:lvar, :mode)),
            s(:self)))),
      s(:def, :pack_slaves,
        s(:args),
        s(:send,
          s(:const, nil, :TkPack), :slaves,
          s(:self))),
      s(:def, :grid,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :keys),
            s(:send,
              s(:const, nil, :TkGrid), :configure,
              s(:self),
              s(:lvar, :keys)),
            s(:send,
              s(:const, nil, :TkGrid), :configure,
              s(:self))),
          s(:self))),
      s(:def, :grid_in,
        s(:args,
          s(:arg, :target),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :keys),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send,
                  s(:lvar, :keys), :dup)),
              s(:send,
                s(:lvar, :keys), :[]=,
                s(:str, "in"),
                s(:lvar, :target))),
            s(:lvasgn, :keys,
              s(:hash,
                s(:pair,
                  s(:str, "in"),
                  s(:lvar, :target))))),
          s(:send,
            s(:const, nil, :TkGrid), :configure,
            s(:self),
            s(:lvar, :keys)),
          s(:self))),
      s(:def, :grid_anchor,
        s(:args,
          s(:optarg, :anchor,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :anchor), :==,
            s(:const, nil, :None)),
          s(:send,
            s(:const, nil, :TkGrid), :anchor,
            s(:self)),
          s(:begin,
            s(:send,
              s(:const, nil, :TkGrid), :anchor,
              s(:self),
              s(:lvar, :anchor)),
            s(:self)))),
      s(:def, :grid_forget,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :TkGrid), :forget,
            s(:self)),
          s(:self))),
      s(:alias,
        s(:sym, :ungrid),
        s(:sym, :grid_forget)),
      s(:def, :grid_bbox,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:const, nil, :TkGrid), :bbox,
          s(:self),
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :grid_config,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :slot), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send,
            s(:const, nil, :TkGrid), :configure,
            s(:self),
            s(:lvar, :slot)),
          s(:send,
            s(:const, nil, :TkGrid), :configure,
            s(:self),
            s(:hash,
              s(:pair,
                s(:lvar, :slot),
                s(:lvar, :value)))))),
      s(:alias,
        s(:sym, :grid_configure),
        s(:sym, :grid_config)),
      s(:def, :grid_columnconfig,
        s(:args,
          s(:arg, :index),
          s(:arg, :keys)),
        s(:send,
          s(:const, nil, :TkGrid), :columnconfigure,
          s(:self),
          s(:lvar, :index),
          s(:lvar, :keys))),
      s(:alias,
        s(:sym, :grid_columnconfigure),
        s(:sym, :grid_columnconfig)),
      s(:def, :grid_rowconfig,
        s(:args,
          s(:arg, :index),
          s(:arg, :keys)),
        s(:send,
          s(:const, nil, :TkGrid), :rowconfigure,
          s(:self),
          s(:lvar, :index),
          s(:lvar, :keys))),
      s(:alias,
        s(:sym, :grid_rowconfigure),
        s(:sym, :grid_rowconfig)),
      s(:def, :grid_columnconfiginfo,
        s(:args,
          s(:arg, :index),
          s(:optarg, :slot,
            s(:nil))),
        s(:send,
          s(:const, nil, :TkGrid), :columnconfiginfo,
          s(:self),
          s(:lvar, :index),
          s(:lvar, :slot))),
      s(:def, :grid_rowconfiginfo,
        s(:args,
          s(:arg, :index),
          s(:optarg, :slot,
            s(:nil))),
        s(:send,
          s(:const, nil, :TkGrid), :rowconfiginfo,
          s(:self),
          s(:lvar, :index),
          s(:lvar, :slot))),
      s(:def, :grid_column,
        s(:args,
          s(:arg, :index),
          s(:optarg, :keys,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :keys), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send, nil, :grid_columnconfigure,
            s(:lvar, :index),
            s(:lvar, :keys)),
          s(:send, nil, :grid_columnconfiginfo,
            s(:lvar, :index),
            s(:lvar, :keys)))),
      s(:def, :grid_row,
        s(:args,
          s(:arg, :index),
          s(:optarg, :keys,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :keys), :kind_of?,
            s(:const, nil, :Hash)),
          s(:send, nil, :grid_rowconfigure,
            s(:lvar, :index),
            s(:lvar, :keys)),
          s(:send, nil, :grid_rowconfiginfo,
            s(:lvar, :index),
            s(:lvar, :keys)))),
      s(:def, :grid_info,
        s(:args),
        s(:send,
          s(:const, nil, :TkGrid), :info,
          s(:self))),
      s(:def, :grid_location,
        s(:args,
          s(:arg, :x),
          s(:arg, :y)),
        s(:send,
          s(:const, nil, :TkGrid), :location,
          s(:self),
          s(:lvar, :x),
          s(:lvar, :y))),
      s(:def, :grid_propagate,
        s(:args,
          s(:optarg, :mode,
            s(:const, nil, :None))),
        s(:if,
          s(:send,
            s(:lvar, :mode), :==,
            s(:const, nil, :None)),
          s(:send,
            s(:const, nil, :TkGrid), :propagate,
            s(:self)),
          s(:begin,
            s(:send,
              s(:const, nil, :TkGrid), :propagate,
              s(:self),
              s(:lvar, :mode)),
            s(:self)))),
      s(:def, :grid_remove,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :TkGrid), :remove,
            s(:self)),
          s(:self))),
      s(:def, :grid_size,
        s(:args),
        s(:send,
          s(:const, nil, :TkGrid), :size,
          s(:self))),
      s(:def, :grid_slaves,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send,
          s(:const, nil, :TkGrid), :slaves,
          s(:self),
          s(:lvar, :keys))),
      s(:def, :place,
        s(:args,
          s(:arg, :keys)),
        s(:begin,
          s(:send,
            s(:const, nil, :TkPlace), :configure,
            s(:self),
            s(:lvar, :keys)),
          s(:self))),
      s(:def, :place_in,
        s(:args,
          s(:arg, :target),
          s(:optarg, :keys,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :keys),
            s(:begin,
              s(:lvasgn, :keys,
                s(:send,
                  s(:lvar, :keys), :dup)),
              s(:send,
                s(:lvar, :keys), :[]=,
                s(:str, "in"),
                s(:lvar, :target))),
            s(:lvasgn, :keys,
              s(:hash,
                s(:pair,
                  s(:str, "in"),
                  s(:lvar, :target))))),
          s(:send,
            s(:const, nil, :TkPlace), :configure,
            s(:self),
            s(:lvar, :keys)),
          s(:self))),
      s(:def, :place_forget,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :TkPlace), :forget,
            s(:self)),
          s(:self))),
      s(:alias,
        s(:sym, :unplace),
        s(:sym, :place_forget)),
      s(:def, :place_config,
        s(:args,
          s(:arg, :slot),
          s(:optarg, :value,
            s(:const, nil, :None))),
        s(:send,
          s(:const, nil, :TkPlace), :configure,
          s(:self),
          s(:lvar, :slot),
          s(:lvar, :value))),
      s(:alias,
        s(:sym, :place_configure),
        s(:sym, :place_config)),
      s(:def, :place_configinfo,
        s(:args,
          s(:optarg, :slot,
            s(:nil))),
        s(:send,
          s(:const, nil, :TkPlace), :configinfo,
          s(:self),
          s(:lvar, :slot))),
      s(:def, :place_info,
        s(:args),
        s(:send,
          s(:const, nil, :TkPlace), :info,
          s(:self))),
      s(:def, :place_slaves,
        s(:args),
        s(:send,
          s(:const, nil, :TkPlace), :slaves,
          s(:self))),
      s(:def, :set_focus,
        s(:args,
          s(:optarg, :force,
            s(:false))),
        s(:begin,
          s(:if,
            s(:lvar, :force),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "focus"),
              s(:str, "-force"),
              s(:send, nil, :path)),
            s(:send, nil, :tk_call_without_enc,
              s(:str, "focus"),
              s(:send, nil, :path))),
          s(:self))),
      s(:alias,
        s(:sym, :focus),
        s(:sym, :set_focus)),
      s(:def, :grab,
        s(:args,
          s(:optarg, :opt,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :opt), nil,
            s(:begin,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "grab"),
                s(:str, "set"),
                s(:send, nil, :path)),
              s(:return,
                s(:self)))),
          s(:case,
            s(:lvar, :opt),
            s(:when,
              s(:str, "set"),
              s(:sym, :set),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "grab"),
                  s(:str, "set"),
                  s(:send, nil, :path)),
                s(:return,
                  s(:self)))),
            s(:when,
              s(:str, "global"),
              s(:sym, :global),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "grab"),
                  s(:str, "set"),
                  s(:str, "-global"),
                  s(:send, nil, :path)),
                s(:return,
                  s(:self)))),
            s(:when,
              s(:str, "release"),
              s(:sym, :release),
              s(:begin,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "grab"),
                  s(:str, "release"),
                  s(:send, nil, :path)),
                s(:return,
                  s(:self)))),
            s(:when,
              s(:str, "current"),
              s(:sym, :current),
              s(:return,
                s(:send, nil, :window,
                  s(:send, nil, :tk_call_without_enc,
                    s(:str, "grab"),
                    s(:str, "current"),
                    s(:send, nil, :path))))),
            s(:when,
              s(:str, "status"),
              s(:sym, :status),
              s(:return,
                s(:send, nil, :tk_call_without_enc,
                  s(:str, "grab"),
                  s(:str, "status"),
                  s(:send, nil, :path)))),
            s(:return,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "grab"),
                s(:lvar, :opt),
                s(:send, nil, :path)))))),
      s(:def, :grab_current,
        s(:args),
        s(:send, nil, :grab,
          s(:str, "current"))),
      s(:alias,
        s(:sym, :current_grab),
        s(:sym, :grab_current)),
      s(:def, :grab_release,
        s(:args),
        s(:send, nil, :grab,
          s(:str, "release"))),
      s(:alias,
        s(:sym, :release_grab),
        s(:sym, :grab_release)),
      s(:def, :grab_set,
        s(:args),
        s(:send, nil, :grab,
          s(:str, "set"))),
      s(:alias,
        s(:sym, :set_grab),
        s(:sym, :grab_set)),
      s(:def, :grab_set_global,
        s(:args),
        s(:send, nil, :grab,
          s(:str, "global"))),
      s(:alias,
        s(:sym, :set_global_grab),
        s(:sym, :grab_set_global)),
      s(:def, :grab_status,
        s(:args),
        s(:send, nil, :grab,
          s(:str, "status"))),
      s(:def, :lower,
        s(:args,
          s(:optarg, :below,
            s(:const, nil, :None))),
        s(:begin,
          s(:lvasgn, :below,
            s(:send, nil, :_epath,
              s(:lvar, :below))),
          s(:send, nil, :tk_call,
            s(:str, "lower"),
            s(:send, nil, :epath),
            s(:lvar, :below)),
          s(:self))),
      s(:alias,
        s(:sym, :lower_window),
        s(:sym, :lower)),
      s(:def, :raise,
        s(:args,
          s(:optarg, :above,
            s(:const, nil, :None))),
        s(:begin,
          s(:lvasgn, :above,
            s(:send, nil, :_epath,
              s(:lvar, :above))),
          s(:send, nil, :tk_call,
            s(:str, "raise"),
            s(:send, nil, :epath),
            s(:lvar, :above)),
          s(:self))),
      s(:alias,
        s(:sym, :raise_window),
        s(:sym, :raise)),
      s(:def, :command,
        s(:args,
          s(:optarg, :cmd,
            s(:nil)),
          s(:blockarg, :b)),
        s(:if,
          s(:lvar, :cmd),
          s(:send, nil, :configure_cmd,
            s(:str, "command"),
            s(:lvar, :cmd)),
          s(:if,
            s(:lvar, :b),
            s(:send, nil, :configure_cmd,
              s(:str, "command"),
              s(:send,
                s(:const, nil, :Proc), :new,
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:send, nil, :cget,
              s(:str, "command"))))),
      s(:def, :colormodel,
        s(:args,
          s(:optarg, :model,
            s(:const, nil, :None))),
        s(:begin,
          s(:send, nil, :tk_call,
            s(:str, "tk"),
            s(:str, "colormodel"),
            s(:send, nil, :path),
            s(:lvar, :model)),
          s(:self))),
      s(:def, :caret,
        s(:args,
          s(:optarg, :keys,
            s(:nil))),
        s(:send,
          s(:const, nil, :TkXIM), :caret,
          s(:send, nil, :path),
          s(:lvar, :keys))),
      s(:def, :destroy,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:lvasgn, :children,
            s(:array)),
          s(:lvasgn, :rexp,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:send,
                  s(:self), :path)),
              s(:str, "\\.[^.]+$"),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :TkCore), :INTERP), :tk_windows), :each),
            s(:args,
              s(:arg, :path),
              s(:arg, :obj)),
            s(:if,
              s(:send,
                s(:lvar, :path), :=~,
                s(:lvar, :rexp)),
              s(:send,
                s(:lvar, :children), :<<,
                s(:array,
                  s(:lvar, :path),
                  s(:lvar, :obj))), nil)),
          s(:if,
            s(:defined?,
              s(:ivar, :@cmdtbl)),
            s(:for,
              s(:lvasgn, :id),
              s(:ivar, :@cmdtbl),
              s(:send, nil, :uninstall_cmd,
                s(:lvar, :id))), nil),
          s(:block,
            s(:send,
              s(:lvar, :children), :each),
            s(:args,
              s(:arg, :path),
              s(:arg, :obj)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :obj), :instance_eval),
                s(:args),
                s(:if,
                  s(:defined?,
                    s(:ivar, :@cmdtbl)),
                  s(:for,
                    s(:lvasgn, :id),
                    s(:ivar, :@cmdtbl),
                    s(:send, nil, :uninstall_cmd,
                      s(:lvar, :id))), nil)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :TkCore), :INTERP), :tk_windows), :delete,
                s(:lvar, :path)))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :tk_call_without_enc,
                s(:str, "destroy"),
                s(:send, nil, :epath)),
              s(:resbody, nil, nil, nil), nil)),
          s(:send, nil, :uninstall_win))),
      s(:def, :wait_visibility,
        s(:args,
          s(:optarg, :on_thread,
            s(:true))),
        s(:begin,
          s(:op_asgn,
            s(:lvasgn, :on_thread), :&,
            s(:begin,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :list), :size), :!=,
                s(:int, 1)))),
          s(:if,
            s(:lvar, :on_thread),
            s(:send,
              s(:const, nil, :INTERP), :_thread_tkwait,
              s(:str, "visibility"),
              s(:send, nil, :path)),
            s(:send,
              s(:const, nil, :INTERP), :_invoke,
              s(:str, "tkwait"),
              s(:str, "visibility"),
              s(:send, nil, :path))))),
      s(:def, :eventloop_wait_visibility,
        s(:args),
        s(:send, nil, :wait_visibility,
          s(:false))),
      s(:def, :thread_wait_visibility,
        s(:args),
        s(:send, nil, :wait_visibility,
          s(:true))),
      s(:alias,
        s(:sym, :wait),
        s(:sym, :wait_visibility)),
      s(:alias,
        s(:sym, :tkwait),
        s(:sym, :wait_visibility)),
      s(:alias,
        s(:sym, :eventloop_wait),
        s(:sym, :eventloop_wait_visibility)),
      s(:alias,
        s(:sym, :eventloop_tkwait),
        s(:sym, :eventloop_wait_visibility)),
      s(:alias,
        s(:sym, :eventloop_tkwait_visibility),
        s(:sym, :eventloop_wait_visibility)),
      s(:alias,
        s(:sym, :thread_wait),
        s(:sym, :thread_wait_visibility)),
      s(:alias,
        s(:sym, :thread_tkwait),
        s(:sym, :thread_wait_visibility)),
      s(:alias,
        s(:sym, :thread_tkwait_visibility),
        s(:sym, :thread_wait_visibility)),
      s(:def, :wait_destroy,
        s(:args,
          s(:optarg, :on_thread,
            s(:true))),
        s(:begin,
          s(:op_asgn,
            s(:lvasgn, :on_thread), :&,
            s(:begin,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :list), :size), :!=,
                s(:int, 1)))),
          s(:if,
            s(:lvar, :on_thread),
            s(:send,
              s(:const, nil, :INTERP), :_thread_tkwait,
              s(:str, "window"),
              s(:send, nil, :epath)),
            s(:send,
              s(:const, nil, :INTERP), :_invoke,
              s(:str, "tkwait"),
              s(:str, "window"),
              s(:send, nil, :epath))))),
      s(:alias,
        s(:sym, :wait_window),
        s(:sym, :wait_destroy)),
      s(:def, :eventloop_wait_destroy,
        s(:args),
        s(:send, nil, :wait_destroy,
          s(:false))),
      s(:alias,
        s(:sym, :eventloop_wait_window),
        s(:sym, :eventloop_wait_destroy)),
      s(:def, :thread_wait_destroy,
        s(:args),
        s(:send, nil, :wait_destroy,
          s(:true))),
      s(:alias,
        s(:sym, :thread_wait_window),
        s(:sym, :thread_wait_destroy)),
      s(:alias,
        s(:sym, :tkwait_destroy),
        s(:sym, :wait_destroy)),
      s(:alias,
        s(:sym, :tkwait_window),
        s(:sym, :wait_destroy)),
      s(:alias,
        s(:sym, :eventloop_tkwait_destroy),
        s(:sym, :eventloop_wait_destroy)),
      s(:alias,
        s(:sym, :eventloop_tkwait_window),
        s(:sym, :eventloop_wait_destroy)),
      s(:alias,
        s(:sym, :thread_tkwait_destroy),
        s(:sym, :thread_wait_destroy)),
      s(:alias,
        s(:sym, :thread_tkwait_window),
        s(:sym, :thread_wait_destroy)),
      s(:def, :bindtags,
        s(:args,
          s(:optarg, :taglist,
            s(:nil))),
        s(:if,
          s(:lvar, :taglist),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :taglist), :kind_of?,
                s(:const, nil, :Array)), nil,
              s(:send, nil, :fail,
                s(:const, nil, :ArgumentError),
                s(:str, "taglist must be Array"))),
            s(:send, nil, :tk_call,
              s(:str, "bindtags"),
              s(:send, nil, :path),
              s(:lvar, :taglist)),
            s(:lvar, :taglist)),
          s(:block,
            s(:send,
              s(:send, nil, :list,
                s(:send, nil, :tk_call,
                  s(:str, "bindtags"),
                  s(:send, nil, :path))), :collect),
            s(:args,
              s(:arg, :tag)),
            s(:if,
              s(:send,
                s(:lvar, :tag), :kind_of?,
                s(:const, nil, :String)),
              s(:if,
                s(:lvasgn, :cls,
                  s(:send,
                    s(:const, nil, :WidgetClassNames), :[],
                    s(:lvar, :tag))),
                s(:lvar, :cls),
                s(:if,
                  s(:lvasgn, :btag,
                    s(:send,
                      s(:const, nil, :TkBindTag), :id2obj,
                      s(:lvar, :tag))),
                  s(:lvar, :btag),
                  s(:lvar, :tag))),
              s(:lvar, :tag))))),
      s(:def, :bindtags=,
        s(:args,
          s(:arg, :taglist)),
        s(:begin,
          s(:send, nil, :bindtags,
            s(:lvar, :taglist)),
          s(:lvar, :taglist))),
      s(:def, :bindtags_shift,
        s(:args),
        s(:begin,
          s(:lvasgn, :taglist,
            s(:send, nil, :bindtags)),
          s(:lvasgn, :tag,
            s(:send,
              s(:lvar, :taglist), :shift)),
          s(:send, nil, :bindtags,
            s(:lvar, :taglist)),
          s(:lvar, :tag))),
      s(:def, :bindtags_unshift,
        s(:args,
          s(:arg, :tag)),
        s(:send, nil, :bindtags,
          s(:send,
            s(:send, nil, :bindtags), :unshift,
            s(:lvar, :tag)))))),
  s(:casgn, nil, :TkWidget,
    s(:const, nil, :TkWindow)),
  s(:module,
    s(:const, nil, :Tk),
    s(:begin,
      s(:casgn, nil, :RELEASE_DATE,
        s(:send,
          s(:str, "2014-10-19"), :freeze)),
      s(:send, nil, :autoload,
        s(:sym, :AUTO_PATH),
        s(:str, "tk/variable")),
      s(:send, nil, :autoload,
        s(:sym, :TCL_PACKAGE_PATH),
        s(:str, "tk/variable")),
      s(:send, nil, :autoload,
        s(:sym, :PACKAGE_PATH),
        s(:str, "tk/variable")),
      s(:send, nil, :autoload,
        s(:sym, :TCL_LIBRARY_PATH),
        s(:str, "tk/variable")),
      s(:send, nil, :autoload,
        s(:sym, :LIBRARY_PATH),
        s(:str, "tk/variable")),
      s(:send, nil, :autoload,
        s(:sym, :TCL_PRECISION),
        s(:str, "tk/variable")))),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "tkextlib/version.rb")),
        s(:send, nil, :require,
          s(:str, "tkextlib/setup.rb"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)))
