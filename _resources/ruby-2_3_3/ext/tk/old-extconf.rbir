s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:lvasgn, :is_win32,
    s(:begin,
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "mswin|mingw|cygwin|bccwin"),
          s(:regopt)),
        s(:const, nil, :RUBY_PLATFORM)))),
  s(:send, nil, :have_func,
    s(:str, "ruby_native_thread_p"),
    s(:str, "ruby.h")),
  s(:send, nil, :have_func,
    s(:str, "rb_errinfo"),
    s(:str, "ruby.h")),
  s(:send, nil, :have_func,
    s(:str, "rb_safe_level"),
    s(:str, "ruby.h")),
  s(:send, nil, :have_struct_member,
    s(:str, "struct RArray"),
    s(:str, "ptr"),
    s(:str, "ruby.h")),
  s(:send, nil, :have_struct_member,
    s(:str, "struct RArray"),
    s(:str, "len"),
    s(:str, "ruby.h")),
  s(:def, :find_framework,
    s(:args,
      s(:arg, :tcl_hdr),
      s(:arg, :tk_hdr)),
    s(:begin,
      s(:if,
        s(:lvasgn, :framework_dir,
          s(:send, nil, :with_config,
            s(:str, "tcltk-framework"))),
        s(:lvasgn, :paths,
          s(:array,
            s(:lvar, :framework_dir))),
        s(:begin,
          s(:if,
            s(:or,
              s(:or,
                s(:or,
                  s(:lvar, :tcl_hdr),
                  s(:lvar, :tk_hdr)),
                s(:send, nil, :enable_config,
                  s(:str, "tcltk-framework"),
                  s(:false))),
              s(:send, nil, :enable_config,
                s(:str, "mac-tcltk-framework"),
                s(:false))), nil,
            s(:return,
              s(:false))),
          s(:lvasgn, :paths,
            s(:array,
              s(:str, "/Library/Frameworks"),
              s(:str, "/System/Library/Frameworks"))))),
      s(:block,
        s(:send, nil, :checking_for,
          s(:str, "Tcl/Tk Framework")),
        s(:args),
        s(:block,
          s(:send,
            s(:lvar, :paths), :find),
          s(:args,
            s(:arg, :dir)),
          s(:begin,
            s(:send,
              s(:lvar, :dir), :strip!),
            s(:send,
              s(:lvar, :dir), :chomp!,
              s(:str, "/")),
            s(:and,
              s(:begin,
                s(:or,
                  s(:lvar, :tcl_hdr),
                  s(:send,
                    s(:const, nil, :FileTest), :directory?,
                    s(:send,
                      s(:lvar, :dir), :+,
                      s(:str, "/Tcl.framework/"))))),
              s(:begin,
                s(:or,
                  s(:lvar, :tk_hdr),
                  s(:send,
                    s(:const, nil, :FileTest), :directory?,
                    s(:send,
                      s(:lvar, :dir), :+,
                      s(:str, "/Tk.framework/"))))))))))),
  s(:lvasgn, :tcl_framework_header,
    s(:send, nil, :with_config,
      s(:str, "tcl-framework-header"))),
  s(:lvasgn, :tk_framework_header,
    s(:send, nil, :with_config,
      s(:str, "tk-framework-header"))),
  s(:lvasgn, :tcltk_framework,
    s(:send, nil, :find_framework,
      s(:lvar, :tcl_framework_header),
      s(:lvar, :tk_framework_header))),
  s(:if,
    s(:lvar, :is_win32), nil,
    s(:begin,
      s(:send, nil, :have_library,
        s(:str, "nsl"),
        s(:str, "t_open")),
      s(:send, nil, :have_library,
        s(:str, "socket"),
        s(:str, "socket")),
      s(:send, nil, :have_library,
        s(:str, "dl"),
        s(:str, "dlopen")),
      s(:send, nil, :have_library,
        s(:str, "m"),
        s(:str, "log")))),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :tk_idir),
      s(:lvasgn, :tk_ldir)),
    s(:send, nil, :dir_config,
      s(:str, "tk"))),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :tcl_idir),
      s(:lvasgn, :tcl_ldir)),
    s(:send, nil, :dir_config,
      s(:str, "tcl"))),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :x11_idir),
      s(:lvasgn, :x11_ldir)),
    s(:send, nil, :dir_config,
      s(:str, "X11"))),
  s(:lvasgn, :tk_ldir2,
    s(:send, nil, :with_config,
      s(:str, "tk-lib"))),
  s(:lvasgn, :tcl_ldir2,
    s(:send, nil, :with_config,
      s(:str, "tcl-lib"))),
  s(:lvasgn, :x11_ldir2,
    s(:send, nil, :with_config,
      s(:str, "X11-lib"))),
  s(:lvasgn, :tk_ldir_list,
    s(:array,
      s(:lvar, :tk_ldir2),
      s(:lvar, :tk_ldir))),
  s(:lvasgn, :tcl_ldir_list,
    s(:array,
      s(:lvar, :tcl_ldir2),
      s(:lvar, :tcl_ldir))),
  s(:lvasgn, :tklib,
    s(:send, nil, :with_config,
      s(:str, "tklib"))),
  s(:lvasgn, :tcllib,
    s(:send, nil, :with_config,
      s(:str, "tcllib"))),
  s(:lvasgn, :stubs,
    s(:or,
      s(:send, nil, :enable_config,
        s(:str, "tcltk_stubs")),
      s(:send, nil, :with_config,
        s(:str, "tcltk_stubs")))),
  s(:lvasgn, :tcltk_version,
    s(:send, nil, :with_config,
      s(:str, "tcltkversion"))),
  s(:lvasgn, :use_X,
    s(:send, nil, :with_config,
      s(:str, "X11"),
      s(:begin,
        s(:send,
          s(:lvar, :is_win32), :!)))),
  s(:def, :parse_tclConfig,
    s(:args,
      s(:arg, :file)),
    s(:begin,
      s(:lvasgn, :tbl,
        s(:hash)),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:lvar, :file)),
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:send,
            s(:lvar, :line), :strip!),
          s(:if,
            s(:send,
              s(:lvar, :line), :!~,
              s(:regexp,
                s(:str, "^([^\\#=][^=]*)=(['\"]|)(.*)\\2$"),
                s(:regopt))),
            s(:next), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :key),
              s(:lvasgn, :val)),
            s(:array,
              s(:nth_ref, 1),
              s(:nth_ref, 3))),
          s(:send,
            s(:lvar, :tbl), :[]=,
            s(:lvar, :key),
            s(:rescue,
              s(:block,
                s(:send,
                  s(:lvar, :val), :gsub,
                  s(:regexp,
                    s(:str, "\\$\\{([^}]+)\\}"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :tbl), :[],
                  s(:nth_ref, 1))),
              s(:resbody, nil, nil,
                s(:nil)), nil)))),
      s(:lvar, :tbl))),
  s(:def, :check_tcltk_version,
    s(:args,
      s(:arg, :version)),
    s(:begin,
      s(:if,
        s(:lvar, :version), nil,
        s(:return,
          s(:array,
            s(:nil),
            s(:nil)))),
      s(:lvasgn, :version,
        s(:send,
          s(:lvar, :version), :strip)),
      s(:lvasgn, :tclver,
        s(:send,
          s(:lvar, :version), :dup)),
      s(:lvasgn, :tkver,
        s(:send,
          s(:lvar, :version), :dup)),
      s(:lvasgn, :major,
        s(:lvasgn, :dot,
          s(:lvasgn, :minor,
            s(:lvasgn, :dot,
              s(:lvasgn, :plvl,
                s(:lvasgn, :ext,
                  s(:nil))))))),
      s(:if,
        s(:send,
          s(:lvar, :version), :=~,
          s(:regexp,
            s(:str, "^(\\d)(\\.?)(\\d)(\\.?)(\\d*)(.*)$"),
            s(:regopt))),
        s(:begin,
          s(:lvasgn, :major,
            s(:nth_ref, 1)),
          s(:lvasgn, :minor_dot,
            s(:nth_ref, 2)),
          s(:lvasgn, :minor,
            s(:nth_ref, 3)),
          s(:lvasgn, :plvl_dot,
            s(:nth_ref, 4)),
          s(:lvasgn, :plvl,
            s(:nth_ref, 5)),
          s(:lvasgn, :ext,
            s(:nth_ref, 6)),
          s(:lvasgn, :dot,
            s(:send,
              s(:send,
                s(:lvar, :minor_dot), :empty?), :!)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :plvl_dot), :empty?),
              s(:send,
                s(:send,
                  s(:lvar, :plvl), :empty?), :!)),
            s(:send,
              s(:lvar, :minor), :<<,
              s(:lvar, :plvl)), nil)),
        s(:if,
          s(:send,
            s(:lvar, :version), :=~,
            s(:regexp,
              s(:str, "^(\\d)(\\.?)(\\d?)(.*)$"),
              s(:regopt))),
          s(:begin,
            s(:lvasgn, :major,
              s(:nth_ref, 1)),
            s(:lvasgn, :minor_dot,
              s(:nth_ref, 2)),
            s(:lvasgn, :minor,
              s(:nth_ref, 3)),
            s(:lvasgn, :ext,
              s(:nth_ref, 4)),
            s(:lvasgn, :dot,
              s(:send,
                s(:send,
                  s(:lvar, :minor_dot), :empty?), :!))),
          s(:return,
            s(:array,
              s(:lvar, :tclver),
              s(:lvar, :tkver))))),
      s(:if,
        s(:send,
          s(:lvar, :major), :==,
          s(:str, "7")),
        s(:lvasgn, :tkver,
          s(:send,
            s(:send,
              s(:send,
                s(:str, "4"), :+,
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:lvar, :dot)),
                    s(:str, "."),
                    s(:str, "")))), :+,
              s(:begin,
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :minor), :empty)),
                  s(:str, ""),
                  s(:str, "2")))), :+,
            s(:lvar, :ext))),
        s(:if,
          s(:send,
            s(:lvar, :major), :==,
            s(:str, "4")),
          s(:lvasgn, :tclver,
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "7"), :+,
                  s(:begin,
                    s(:if,
                      s(:begin,
                        s(:lvar, :dot)),
                      s(:str, "."),
                      s(:str, "")))), :+,
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :minor), :empty)),
                    s(:str, ""),
                    s(:str, "6")))), :+,
              s(:lvar, :ext))), nil)),
      s(:array,
        s(:lvar, :tclver),
        s(:lvar, :tkver)))),
  s(:def, :find_tcl,
    s(:args,
      s(:arg, :tcllib),
      s(:arg, :stubs),
      s(:arg, :version),
      s(:restarg, :opt_paths)),
    s(:begin,
      s(:lvasgn, :default_paths,
        s(:array,
          s(:str, "/usr/local/lib"),
          s(:str, "/usr/pkg/lib"),
          s(:str, "/usr/lib"))),
      s(:send,
        s(:lvar, :default_paths), :<<,
        s(:str, "/Tcl/lib")),
      s(:if,
        s(:send,
          s(:begin,
            s(:lvasgn, :paths,
              s(:send,
                s(:lvar, :opt_paths), :compact))), :empty?),
        s(:lvasgn, :paths,
          s(:lvar, :default_paths)), nil),
      s(:if,
        s(:lvar, :stubs),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tcl_InitStubs")),
          s(:lvasgn, :lib,
            s(:str, "tclstub"))),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tcl_FindExecutable")),
          s(:lvasgn, :lib,
            s(:str, "tcl")))),
      s(:if,
        s(:and,
          s(:lvar, :version),
          s(:send,
            s(:send,
              s(:lvar, :version), :empty?), :!)),
        s(:lvasgn, :versions,
          s(:array,
            s(:lvar, :version))),
        s(:lvasgn, :versions,
          s(:array,
            s(:str, "8.7"),
            s(:str, "8.6"),
            s(:str, "8.5"),
            s(:str, "8.4"),
            s(:str, "8.3"),
            s(:str, "8.2"),
            s(:str, "8.1"),
            s(:str, "8.0"),
            s(:str, "7.6")))),
      s(:if,
        s(:lvar, :tcllib),
        s(:lvasgn, :st,
          s(:send, nil, :find_library,
            s(:lvar, :tcllib),
            s(:lvar, :func),
            s(:splat,
              s(:lvar, :paths)))),
        s(:lvasgn, :st,
          s(:or,
            s(:block,
              s(:send,
                s(:lvar, :versions), :find),
              s(:args,
                s(:arg, :ver)),
              s(:or,
                s(:or,
                  s(:or,
                    s(:or,
                      s(:or,
                        s(:or,
                          s(:or,
                            s(:send, nil, :find_library,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :lib)),
                                s(:begin,
                                  s(:lvar, :ver))),
                              s(:lvar, :func),
                              s(:splat,
                                s(:lvar, :paths))),
                            s(:send, nil, :find_library,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :lib)),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :ver), :delete,
                                    s(:str, ".")))),
                              s(:lvar, :func),
                              s(:splat,
                                s(:lvar, :paths)))),
                          s(:send, nil, :find_library,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :lib)),
                              s(:begin,
                                s(:lvar, :ver)),
                              s(:str, "g")),
                            s(:lvar, :func),
                            s(:splat,
                              s(:lvar, :paths)))),
                        s(:send, nil, :find_library,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :lib)),
                            s(:begin,
                              s(:send,
                                s(:lvar, :ver), :delete,
                                s(:str, "."))),
                            s(:str, "g")),
                          s(:lvar, :func),
                          s(:splat,
                            s(:lvar, :paths)))),
                      s(:send, nil, :find_library,
                        s(:dstr,
                          s(:str, "tcl"),
                          s(:begin,
                            s(:lvar, :ver))),
                        s(:lvar, :func),
                        s(:splat,
                          s(:lvar, :paths)))),
                    s(:send, nil, :find_library,
                      s(:dstr,
                        s(:str, "tcl"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :ver), :delete,
                            s(:str, ".")))),
                      s(:lvar, :func),
                      s(:splat,
                        s(:lvar, :paths)))),
                  s(:send, nil, :find_library,
                    s(:dstr,
                      s(:str, "tcl"),
                      s(:begin,
                        s(:lvar, :ver)),
                      s(:str, "g")),
                    s(:lvar, :func),
                    s(:splat,
                      s(:lvar, :paths)))),
                s(:send, nil, :find_library,
                  s(:dstr,
                    s(:str, "tcl"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ver), :delete,
                        s(:str, "."))),
                    s(:str, "g")),
                  s(:lvar, :func),
                  s(:splat,
                    s(:lvar, :paths))))),
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :version), :!),
                s(:send, nil, :find_library,
                  s(:lvar, :lib),
                  s(:lvar, :func),
                  s(:splat,
                    s(:lvar, :paths)))))))),
      s(:if,
        s(:lvar, :st), nil,
        s(:send, nil, :puts,
          s(:str, "Warning:: cannot find Tcl library. tcltklib will not be compiled (tcltklib is disabled on your Ruby == Ruby/Tk will not work). Please check configure options."))),
      s(:lvar, :st))),
  s(:def, :find_tk,
    s(:args,
      s(:arg, :tklib),
      s(:arg, :stubs),
      s(:arg, :version),
      s(:restarg, :opt_paths)),
    s(:begin,
      s(:lvasgn, :default_paths,
        s(:array,
          s(:str, "/usr/local/lib"),
          s(:str, "/usr/pkg/lib"),
          s(:str, "/usr/lib"))),
      s(:send,
        s(:lvar, :default_paths), :<<,
        s(:str, "/Tcl/lib")),
      s(:if,
        s(:send,
          s(:begin,
            s(:lvasgn, :paths,
              s(:send,
                s(:lvar, :opt_paths), :compact))), :empty?),
        s(:lvasgn, :paths,
          s(:lvar, :default_paths)), nil),
      s(:if,
        s(:lvar, :stubs),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tk_InitStubs")),
          s(:lvasgn, :lib,
            s(:str, "tkstub"))),
        s(:begin,
          s(:lvasgn, :func,
            s(:str, "Tk_Init")),
          s(:lvasgn, :lib,
            s(:str, "tk")))),
      s(:if,
        s(:and,
          s(:lvar, :version),
          s(:send,
            s(:send,
              s(:lvar, :version), :empty?), :!)),
        s(:lvasgn, :versions,
          s(:array,
            s(:lvar, :version))),
        s(:lvasgn, :versions,
          s(:array,
            s(:str, "8.7"),
            s(:str, "8.6"),
            s(:str, "8.5"),
            s(:str, "8.4"),
            s(:str, "8.3"),
            s(:str, "8.2"),
            s(:str, "8.1"),
            s(:str, "8.0"),
            s(:str, "4.2")))),
      s(:if,
        s(:lvar, :tklib),
        s(:lvasgn, :st,
          s(:send, nil, :find_library,
            s(:lvar, :tklib),
            s(:lvar, :func),
            s(:splat,
              s(:lvar, :paths)))),
        s(:lvasgn, :st,
          s(:or,
            s(:block,
              s(:send,
                s(:lvar, :versions), :find),
              s(:args,
                s(:arg, :ver)),
              s(:or,
                s(:or,
                  s(:or,
                    s(:or,
                      s(:or,
                        s(:or,
                          s(:or,
                            s(:send, nil, :find_library,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :lib)),
                                s(:begin,
                                  s(:lvar, :ver))),
                              s(:lvar, :func),
                              s(:splat,
                                s(:lvar, :paths))),
                            s(:send, nil, :find_library,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :lib)),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :ver), :delete,
                                    s(:str, ".")))),
                              s(:lvar, :func),
                              s(:splat,
                                s(:lvar, :paths)))),
                          s(:send, nil, :find_library,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :lib)),
                              s(:begin,
                                s(:lvar, :ver)),
                              s(:str, "g")),
                            s(:lvar, :func),
                            s(:splat,
                              s(:lvar, :paths)))),
                        s(:send, nil, :find_library,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :lib)),
                            s(:begin,
                              s(:send,
                                s(:lvar, :ver), :delete,
                                s(:str, "."))),
                            s(:str, "g")),
                          s(:lvar, :func),
                          s(:splat,
                            s(:lvar, :paths)))),
                      s(:send, nil, :find_library,
                        s(:dstr,
                          s(:str, "tk"),
                          s(:begin,
                            s(:lvar, :ver))),
                        s(:lvar, :func),
                        s(:splat,
                          s(:lvar, :paths)))),
                    s(:send, nil, :find_library,
                      s(:dstr,
                        s(:str, "tk"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :ver), :delete,
                            s(:str, ".")))),
                      s(:lvar, :func),
                      s(:splat,
                        s(:lvar, :paths)))),
                  s(:send, nil, :find_library,
                    s(:dstr,
                      s(:str, "tk"),
                      s(:begin,
                        s(:lvar, :ver)),
                      s(:str, "g")),
                    s(:lvar, :func),
                    s(:splat,
                      s(:lvar, :paths)))),
                s(:send, nil, :find_library,
                  s(:dstr,
                    s(:str, "tk"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ver), :delete,
                        s(:str, "."))),
                    s(:str, "g")),
                  s(:lvar, :func),
                  s(:splat,
                    s(:lvar, :paths))))),
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :version), :!),
                s(:send, nil, :find_library,
                  s(:lvar, :lib),
                  s(:lvar, :func),
                  s(:splat,
                    s(:lvar, :paths)))))))),
      s(:if,
        s(:lvar, :st), nil,
        s(:send, nil, :puts,
          s(:str, "Warning:: cannot find Tk library. tcltklib will not be compiled (tcltklib is disabled on your Ruby == Ruby/Tk will not work). Please check configure options."))),
      s(:lvar, :st))),
  s(:def, :find_tcltk_header,
    s(:args,
      s(:arg, :tclver),
      s(:arg, :tkver)),
    s(:begin,
      s(:lvasgn, :base_dir,
        s(:array,
          s(:str, "/usr/local/include"),
          s(:str, "/usr/pkg/include"),
          s(:str, "/usr/include"))),
      s(:send,
        s(:lvar, :base_dir), :<<,
        s(:str, "/Tcl/include")),
      s(:if,
        s(:lvasgn, :have_tcl_h,
          s(:send, nil, :have_header,
            s(:str, "tcl.h"))), nil,
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :tclver),
              s(:send,
                s(:send,
                  s(:lvar, :tclver), :empty?), :!)),
            s(:lvasgn, :versions,
              s(:array,
                s(:lvar, :tclver))),
            s(:lvasgn, :versions,
              s(:array,
                s(:str, "8.7"),
                s(:str, "8.6"),
                s(:str, "8.5"),
                s(:str, "8.4"),
                s(:str, "8.3"),
                s(:str, "8.2"),
                s(:str, "8.1"),
                s(:str, "8.0"),
                s(:str, "7.6")))),
          s(:lvasgn, :paths,
            s(:send,
              s(:lvar, :base_dir), :dup)),
          s(:block,
            s(:send,
              s(:lvar, :versions), :each),
            s(:args,
              s(:arg, :ver)),
            s(:send,
              s(:lvar, :paths), :concat,
              s(:block,
                s(:send,
                  s(:lvar, :base_dir), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:send,
                    s(:lvar, :dir), :+,
                    s(:str, "/tcl")), :+,
                  s(:lvar, :ver))))),
          s(:lvasgn, :have_tcl_h,
            s(:send, nil, :find_header,
              s(:str, "tcl.h"),
              s(:splat,
                s(:lvar, :paths)))))),
      s(:if,
        s(:lvasgn, :have_tk_h,
          s(:send, nil, :have_header,
            s(:str, "tk.h"))), nil,
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :tkver),
              s(:send,
                s(:send,
                  s(:lvar, :tkver), :empty?), :!)),
            s(:lvasgn, :versions,
              s(:array,
                s(:lvar, :tkver))),
            s(:lvasgn, :versions,
              s(:array,
                s(:str, "8.7"),
                s(:str, "8.6"),
                s(:str, "8.5"),
                s(:str, "8.4"),
                s(:str, "8.3"),
                s(:str, "8.2"),
                s(:str, "8.1"),
                s(:str, "8.0"),
                s(:str, "4.2")))),
          s(:lvasgn, :paths,
            s(:send,
              s(:lvar, :base_dir), :dup)),
          s(:block,
            s(:send,
              s(:lvar, :versions), :each),
            s(:args,
              s(:arg, :ver)),
            s(:send,
              s(:lvar, :paths), :concat,
              s(:block,
                s(:send,
                  s(:lvar, :base_dir), :map),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:send,
                    s(:lvar, :dir), :+,
                    s(:str, "/tk")), :+,
                  s(:lvar, :ver))))),
          s(:lvasgn, :have_tk_h,
            s(:send, nil, :find_header,
              s(:str, "tk.h"),
              s(:splat,
                s(:lvar, :paths)))))),
      s(:and,
        s(:lvar, :have_tcl_h),
        s(:lvar, :have_tk_h)))),
  s(:def, :find_X11,
    s(:args,
      s(:restarg, :opt_paths)),
    s(:begin,
      s(:lvasgn, :default_paths,
        s(:array,
          s(:str, "/usr/X11/lib"),
          s(:str, "/usr/lib/X11"),
          s(:str, "/usr/X11R6/lib"),
          s(:str, "/usr/openwin/lib"))),
      s(:lvasgn, :paths,
        s(:send,
          s(:send,
            s(:lvar, :opt_paths), :compact), :concat,
          s(:lvar, :default_paths))),
      s(:lvasgn, :st,
        s(:send, nil, :find_library,
          s(:str, "X11"),
          s(:str, "XOpenDisplay"),
          s(:splat,
            s(:lvar, :paths)))),
      s(:if,
        s(:lvar, :st), nil,
        s(:send, nil, :puts,
          s(:str, "Warning:: cannot find X11 library. tcltklib will not be compiled (tcltklib is disabled on your Ruby == Ruby/Tk will not work). Please check configure options. If your Tcl/Tk don't require X11, please try --without-X11."))),
      s(:lvar, :st))),
  s(:def, :pthread_check,
    s(:args),
    s(:begin,
      s(:lvasgn, :tcl_major_ver,
        s(:nil)),
      s(:lvasgn, :tcl_minor_ver,
        s(:nil)),
      s(:case,
        s(:send, nil, :enable_config,
          s(:str, "tcl-thread")),
        s(:when,
          s(:true),
          s(:lvasgn, :tcl_enable_thread,
            s(:true))),
        s(:when,
          s(:false),
          s(:lvasgn, :tcl_enable_thread,
            s(:false))),
        s(:lvasgn, :tcl_enable_thread,
          s(:nil))),
      s(:if,
        s(:begin,
          s(:lvasgn, :tclConfig,
            s(:send, nil, :with_config,
              s(:str, "tclConfig-file")))),
        s(:if,
          s(:send,
            s(:lvar, :tcl_enable_thread), :==,
            s(:true)),
          s(:send, nil, :puts,
            s(:str, "Warning: --with-tclConfig-file option is ignored, because --enable-tcl-thread option is given.")),
          s(:if,
            s(:send,
              s(:lvar, :tcl_enable_thread), :==,
              s(:false)),
            s(:send, nil, :puts,
              s(:str, "Warning: --with-tclConfig-file option is ignored, because --disable-tcl-thread option is given.")),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :tbl,
                    s(:send, nil, :parse_tclConfig,
                      s(:lvar, :tclConfig))),
                  s(:if,
                    s(:send,
                      s(:lvar, :tbl), :[],
                      s(:str, "TCL_THREADS")),
                    s(:lvasgn, :tcl_enable_thread,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :tbl), :[],
                            s(:str, "TCL_THREADS")), :==,
                          s(:str, "1")))),
                    s(:begin,
                      s(:lvasgn, :tcl_major_ver,
                        s(:send,
                          s(:send,
                            s(:lvar, :tbl), :[],
                            s(:str, "TCL_MAJOR_VERSION")), :to_i)),
                      s(:lvasgn, :tcl_minor_ver,
                        s(:send,
                          s(:send,
                            s(:lvar, :tbl), :[],
                            s(:str, "TCL_MINOR_VERSION")), :to_i)),
                      s(:if,
                        s(:or,
                          s(:send,
                            s(:lvar, :tcl_major_ver), :<,
                            s(:int, 8)),
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:lvar, :tcl_major_ver), :==,
                                s(:int, 8)),
                              s(:send,
                                s(:lvar, :tcl_minor_ver), :==,
                                s(:int, 0))))),
                        s(:lvasgn, :tcl_enable_thread,
                          s(:false)), nil))),
                  s(:if,
                    s(:send,
                      s(:lvar, :tcl_enable_thread), :==,
                      s(:nil)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :tcl_major_ver),
                        s(:send, nil, :puts,
                          s(:dstr,
                            s(:str, "Warning: '"),
                            s(:begin,
                              s(:lvar, :tclConfig)),
                            s(:str, "' doesn't include TCL_THREADS definition."))),
                        s(:send, nil, :puts,
                          s(:dstr,
                            s(:str, "Warning: '"),
                            s(:begin,
                              s(:lvar, :tclConfig)),
                            s(:str, "' may not be a tclConfig file.")))),
                      s(:lvasgn, :tclConfig,
                        s(:false))), nil)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)), nil,
                  s(:begin,
                    s(:send, nil, :puts,
                      s(:dstr,
                        s(:str, "Warning: fail to read '"),
                        s(:begin,
                          s(:lvar, :tclConfig)),
                        s(:str, "'!! --> ignore the file"))),
                    s(:lvasgn, :tclConfig,
                      s(:false)))), nil)))), nil),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :tcl_enable_thread), :==,
            s(:nil)),
          s(:send,
            s(:lvar, :tclConfig), :!)),
        s(:kwbegin,
          s(:rescue,
            s(:lvasgn, :try_run_available,
              s(:send, nil, :try_run,
                s(:str, "int main() { exit(0); }"))),
            s(:resbody,
              s(:array,
                s(:const, nil, :Exception)), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "\n*****************************************************************************\n"),
                    s(:str, "**\n"),
                    s(:str, "** PTHREAD SUPPORT CHECK WARNING:\n"),
                    s(:str, "**\n"),
                    s(:str, "**   We cannot check the consistency of pthread support between Ruby\n"),
                    s(:str, "**   and the Tcl/Tk library in your environment (are you perhaps\n"),
                    s(:str, "**   cross-compiling?). If pthread support for these 2 packages is\n"),
                    s(:str, "**   inconsistent you may find you get errors when running Ruby/Tk\n"),
                    s(:str, "**   (e.g. hangs or segmentation faults).  We strongly recommend\n"),
                    s(:str, "**   you to check the consistency manually.\n"),
                    s(:str, "**\n"),
                    s(:str, "*****************************************************************************\n"))),
                s(:return,
                  s(:true)))), nil)), nil),
      s(:if,
        s(:send,
          s(:lvar, :tcl_enable_thread), :==,
          s(:nil)),
        s(:if,
          s(:send, nil, :try_run,
            s(:dstr,
              s(:str, "#include <tcl.h>\n"),
              s(:str, "int main() {\n"),
              s(:str, "   Tcl_Interp *ip;\n"),
              s(:str, "   ip = Tcl_CreateInterp();\n"),
              s(:str, "   exit((Tcl_Eval(ip, \"set tcl_platform(threaded)\") == TCL_OK)? 0: 1);\n"),
              s(:str, "}\n"))),
          s(:lvasgn, :tcl_enable_thread,
            s(:true)),
          s(:if,
            s(:send, nil, :try_run,
              s(:dstr,
                s(:str, "#include <tcl.h>\n"),
                s(:str, "static Tcl_ThreadDataKey dataKey;\n"),
                s(:str, "int main() { exit((Tcl_GetThreadData(&dataKey, 1) == dataKey)? 1: 0); }\n"))),
            s(:lvasgn, :tcl_enable_thread,
              s(:true)),
            s(:lvasgn, :tcl_enable_thread,
              s(:false)))), nil),
      s(:if,
        s(:begin,
          s(:send, nil, :macro_defined?,
            s(:str, "HAVE_NATIVETHREAD"),
            s(:str, "#include \"ruby.h\""))),
        s(:begin,
          s(:if,
            s(:lvar, :tcl_enable_thread), nil,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "\n*****************************************************************************\n"),
                s(:str, "**\n"),
                s(:str, "** PTHREAD SUPPORT MODE WARNING:\n"),
                s(:str, "**\n"),
                s(:str, "**   Ruby is compiled with --enable-pthread, but your Tcl/Tk library\n"),
                s(:str, "**   seems to be compiled without pthread support. Although you can\n"),
                s(:str, "**   create the tcltklib library, this combination may cause errors\n"),
                s(:str, "**   (e.g. hangs or segmentation faults). If you have no reason to\n"),
                s(:str, "**   keep the current pthread support status, we recommend you reconfigure\n"),
                s(:str, "**   and recompile the libraries so that both or neither support pthreads.\n"),
                s(:str, "**\n"),
                s(:str, "**   If you want change the status of pthread support, please recompile\n"),
                s(:str, "**   Ruby without \"--enable-pthread\" configure option or recompile Tcl/Tk\n"),
                s(:str, "**   with \"--enable-threads\" configure option (if your Tcl/Tk is later\n"),
                s(:str, "**   than or equal to Tcl/Tk 8.1).\n"),
                s(:str, "**\n"),
                s(:str, "*****************************************************************************\n")))),
          s(:if,
            s(:lvar, :tcl_enable_thread),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=1")),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=0"))),
          s(:return,
            s(:true))),
        s(:if,
          s(:lvar, :tcl_enable_thread),
          s(:begin,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "\n*****************************************************************************\n"),
                s(:str, "**\n"),
                s(:str, "** PTHREAD SUPPORT MODE ERROR:\n"),
                s(:str, "**\n"),
                s(:str, "**   Ruby is not compiled with --enable-pthread, but your Tcl/Tk\n"),
                s(:str, "**   library seems to be compiled with pthread support. This\n"),
                s(:str, "**   combination may cause frequent hang or segmentation fault\n"),
                s(:str, "**   errors when Ruby/Tk is working. We recommend that you NEVER\n"),
                s(:str, "**   create the library with such a combination of pthread support.\n"),
                s(:str, "**\n"),
                s(:str, "**   Please recompile Ruby with the \"--enable-pthread\" configure option\n"),
                s(:str, "**   or recompile Tcl/Tk with the \"--disable-threads\" configure option.\n"),
                s(:str, "**\n"),
                s(:str, "*****************************************************************************\n"))),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=1")),
            s(:return,
              s(:false))),
          s(:begin,
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:str, " -DWITH_TCL_ENABLE_THREAD=0")),
            s(:return,
              s(:true))))))),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :tclver),
      s(:lvasgn, :tkver)),
    s(:send, nil, :check_tcltk_version,
      s(:lvar, :tcltk_version))),
  s(:if,
    s(:begin,
      s(:or,
        s(:lvar, :tcltk_framework),
        s(:begin,
          s(:and,
            s(:and,
              s(:and,
                s(:send, nil, :find_tcltk_header,
                  s(:lvar, :tclver),
                  s(:lvar, :tkver)),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :use_X), :!),
                    s(:send, nil, :find_X11,
                      s(:lvar, :x11_ldir2),
                      s(:lvar, :x11_ldir))))),
              s(:send, nil, :find_tcl,
                s(:lvar, :tcllib),
                s(:lvar, :stubs),
                s(:lvar, :tclver),
                s(:splat,
                  s(:lvar, :tcl_ldir_list)))),
            s(:send, nil, :find_tk,
              s(:lvar, :tklib),
              s(:lvar, :stubs),
              s(:lvar, :tkver),
              s(:splat,
                s(:lvar, :tk_ldir_list))))))),
    s(:begin,
      s(:if,
        s(:lvar, :stubs),
        s(:op_asgn,
          s(:gvasgn, :$CPPFLAGS), :+,
          s(:str, " -DUSE_TCL_STUBS -DUSE_TK_STUBS")), nil),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "cygwin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM)),
        s(:op_asgn,
          s(:gvasgn, :$CPPFLAGS), :+,
          s(:str, " -D_WIN32")), nil),
      s(:if,
        s(:lvar, :tcltk_framework),
        s(:begin,
          s(:if,
            s(:lvar, :tcl_framework_header),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:dstr,
                s(:str, " -I"),
                s(:begin,
                  s(:lvar, :tcl_framework_header)))),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:dstr,
                s(:str, " -I"),
                s(:begin,
                  s(:lvar, :tcltk_framework)),
                s(:str, "/Tcl.framework/Headers")))),
          s(:if,
            s(:lvar, :tk_framework_header),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:dstr,
                s(:str, " -I"),
                s(:begin,
                  s(:lvar, :tk_framework_header)))),
            s(:op_asgn,
              s(:gvasgn, :$CPPFLAGS), :+,
              s(:dstr,
                s(:str, " -I"),
                s(:begin,
                  s(:lvar, :tcltk_framework)),
                s(:str, "/Tk.framework/Headers")))),
          s(:op_asgn,
            s(:gvasgn, :$LDFLAGS), :+,
            s(:str, " -framework Tk -framework Tcl"))), nil),
      s(:if,
        s(:or,
          s(:lvar, :stubs),
          s(:send, nil, :pthread_check)),
        s(:begin,
          s(:or_asgn,
            s(:gvasgn, :$INSTALLFILES),
            s(:array)),
          s(:send,
            s(:gvar, :$INSTALLFILES), :<<,
            s(:array,
              s(:str, "lib/tkextlib/SUPPORT_STATUS"),
              s(:str, "$(RUBYLIBDIR)"),
              s(:str, "lib"))),
          s(:send, nil, :have_func,
            s(:str, "rb_hash_lookup"),
            s(:str, "ruby.h")),
          s(:send,
            s(:gvar, :$defs), :<<,
            s(:dstr,
              s(:str, "-DRUBY_VERSION=\\\""),
              s(:begin,
                s(:const, nil, :RUBY_VERSION)),
              s(:str, "\\\""))),
          s(:send,
            s(:gvar, :$defs), :<<,
            s(:dstr,
              s(:str, "-DRUBY_RELEASE_DATE=\\\""),
              s(:begin,
                s(:const, nil, :RUBY_RELEASE_DATE)),
              s(:str, "\\\""))),
          s(:send, nil, :create_makefile,
            s(:str, "tcltklib"))), nil)), nil))
