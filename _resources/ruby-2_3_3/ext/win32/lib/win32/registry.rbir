s(:begin,
  s(:send, nil, :require,
    s(:str, "win32/importer")),
  s(:module,
    s(:const, nil, :Win32),
    s(:begin,
      s(:casgn, nil, :WCHAR,
        s(:const,
          s(:const, nil, :Encoding), :UTF_16LE)),
      s(:casgn, nil, :WCHAR_NUL,
        s(:send,
          s(:send,
            s(:str, "\u0000"), :encode,
            s(:const, nil, :WCHAR)), :freeze)),
      s(:casgn, nil, :WCHAR_CR,
        s(:send,
          s(:send,
            s(:str, "\r"), :encode,
            s(:const, nil, :WCHAR)), :freeze)),
      s(:casgn, nil, :WCHAR_SIZE,
        s(:send,
          s(:const, nil, :WCHAR_NUL), :bytesize)),
      s(:casgn, nil, :LOCALE,
        s(:send,
          s(:const, nil, :Encoding), :find,
          s(:send,
            s(:const, nil, :Encoding), :locale_charmap))),
      s(:class,
        s(:const, nil, :Registry), nil,
        s(:begin,
          s(:module,
            s(:const, nil, :Constants),
            s(:begin,
              s(:casgn, nil, :HKEY_CLASSES_ROOT,
                s(:int, 2147483648)),
              s(:casgn, nil, :HKEY_CURRENT_USER,
                s(:int, 2147483649)),
              s(:casgn, nil, :HKEY_LOCAL_MACHINE,
                s(:int, 2147483650)),
              s(:casgn, nil, :HKEY_USERS,
                s(:int, 2147483651)),
              s(:casgn, nil, :HKEY_PERFORMANCE_DATA,
                s(:int, 2147483652)),
              s(:casgn, nil, :HKEY_PERFORMANCE_TEXT,
                s(:int, 2147483728)),
              s(:casgn, nil, :HKEY_PERFORMANCE_NLSTEXT,
                s(:int, 2147483744)),
              s(:casgn, nil, :HKEY_CURRENT_CONFIG,
                s(:int, 2147483653)),
              s(:casgn, nil, :HKEY_DYN_DATA,
                s(:int, 2147483654)),
              s(:casgn, nil, :REG_NONE,
                s(:int, 0)),
              s(:casgn, nil, :REG_SZ,
                s(:int, 1)),
              s(:casgn, nil, :REG_EXPAND_SZ,
                s(:int, 2)),
              s(:casgn, nil, :REG_BINARY,
                s(:int, 3)),
              s(:casgn, nil, :REG_DWORD,
                s(:int, 4)),
              s(:casgn, nil, :REG_DWORD_LITTLE_ENDIAN,
                s(:int, 4)),
              s(:casgn, nil, :REG_DWORD_BIG_ENDIAN,
                s(:int, 5)),
              s(:casgn, nil, :REG_LINK,
                s(:int, 6)),
              s(:casgn, nil, :REG_MULTI_SZ,
                s(:int, 7)),
              s(:casgn, nil, :REG_RESOURCE_LIST,
                s(:int, 8)),
              s(:casgn, nil, :REG_FULL_RESOURCE_DESCRIPTOR,
                s(:int, 9)),
              s(:casgn, nil, :REG_RESOURCE_REQUIREMENTS_LIST,
                s(:int, 10)),
              s(:casgn, nil, :REG_QWORD,
                s(:int, 11)),
              s(:casgn, nil, :REG_QWORD_LITTLE_ENDIAN,
                s(:int, 11)),
              s(:casgn, nil, :STANDARD_RIGHTS_READ,
                s(:int, 131072)),
              s(:casgn, nil, :STANDARD_RIGHTS_WRITE,
                s(:int, 131072)),
              s(:casgn, nil, :KEY_QUERY_VALUE,
                s(:int, 1)),
              s(:casgn, nil, :KEY_SET_VALUE,
                s(:int, 2)),
              s(:casgn, nil, :KEY_CREATE_SUB_KEY,
                s(:int, 4)),
              s(:casgn, nil, :KEY_ENUMERATE_SUB_KEYS,
                s(:int, 8)),
              s(:casgn, nil, :KEY_NOTIFY,
                s(:int, 16)),
              s(:casgn, nil, :KEY_CREATE_LINK,
                s(:int, 32)),
              s(:casgn, nil, :KEY_READ,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :STANDARD_RIGHTS_READ), :|,
                      s(:const, nil, :KEY_QUERY_VALUE)), :|,
                    s(:const, nil, :KEY_ENUMERATE_SUB_KEYS)), :|,
                  s(:const, nil, :KEY_NOTIFY))),
              s(:casgn, nil, :KEY_WRITE,
                s(:send,
                  s(:send,
                    s(:const, nil, :STANDARD_RIGHTS_WRITE), :|,
                    s(:const, nil, :KEY_SET_VALUE)), :|,
                  s(:const, nil, :KEY_CREATE_SUB_KEY))),
              s(:casgn, nil, :KEY_EXECUTE,
                s(:const, nil, :KEY_READ)),
              s(:casgn, nil, :KEY_ALL_ACCESS,
                s(:send,
                  s(:send,
                    s(:const, nil, :KEY_READ), :|,
                    s(:const, nil, :KEY_WRITE)), :|,
                  s(:const, nil, :KEY_CREATE_LINK))),
              s(:casgn, nil, :REG_OPTION_RESERVED,
                s(:int, 0)),
              s(:casgn, nil, :REG_OPTION_NON_VOLATILE,
                s(:int, 0)),
              s(:casgn, nil, :REG_OPTION_VOLATILE,
                s(:int, 1)),
              s(:casgn, nil, :REG_OPTION_CREATE_LINK,
                s(:int, 2)),
              s(:casgn, nil, :REG_OPTION_BACKUP_RESTORE,
                s(:int, 4)),
              s(:casgn, nil, :REG_OPTION_OPEN_LINK,
                s(:int, 8)),
              s(:casgn, nil, :REG_LEGAL_OPTION,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :REG_OPTION_RESERVED), :|,
                        s(:const, nil, :REG_OPTION_NON_VOLATILE)), :|,
                      s(:const, nil, :REG_OPTION_CREATE_LINK)), :|,
                    s(:const, nil, :REG_OPTION_BACKUP_RESTORE)), :|,
                  s(:const, nil, :REG_OPTION_OPEN_LINK))),
              s(:casgn, nil, :REG_CREATED_NEW_KEY,
                s(:int, 1)),
              s(:casgn, nil, :REG_OPENED_EXISTING_KEY,
                s(:int, 2)),
              s(:casgn, nil, :REG_WHOLE_HIVE_VOLATILE,
                s(:int, 1)),
              s(:casgn, nil, :REG_REFRESH_HIVE,
                s(:int, 2)),
              s(:casgn, nil, :REG_NO_LAZY_FLUSH,
                s(:int, 4)),
              s(:casgn, nil, :REG_FORCE_RESTORE,
                s(:int, 8)),
              s(:casgn, nil, :MAX_KEY_LENGTH,
                s(:int, 514)),
              s(:casgn, nil, :MAX_VALUE_LENGTH,
                s(:int, 32768)))),
          s(:send, nil, :include,
            s(:const, nil, :Constants)),
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:class,
            s(:const, nil, :Error),
            s(:const,
              s(:cbase), :StandardError),
            s(:begin,
              s(:module,
                s(:const, nil, :Kernel32),
                s(:begin,
                  s(:send, nil, :extend,
                    s(:const, nil, :Importer)),
                  s(:send, nil, :dlload,
                    s(:str, "kernel32.dll")))),
              s(:casgn, nil, :FormatMessageW,
                s(:send,
                  s(:const, nil, :Kernel32), :extern,
                  s(:str, "int FormatMessageW(int, void *, int, int, void *, int, void *)"),
                  s(:sym, :stdcall))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :code)),
                s(:begin,
                  s(:ivasgn, :@code,
                    s(:lvar, :code)),
                  s(:lvasgn, :buff,
                    s(:send,
                      s(:const, nil, :WCHAR_NUL), :*,
                      s(:int, 1024))),
                  s(:lvasgn, :lang,
                    s(:int, 0)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :len,
                          s(:send,
                            s(:const, nil, :FormatMessageW), :call,
                            s(:int, 4608),
                            s(:int, 0),
                            s(:lvar, :code),
                            s(:lvar, :lang),
                            s(:lvar, :buff),
                            s(:int, 1024),
                            s(:int, 0))),
                        s(:lvasgn, :msg,
                          s(:send,
                            s(:lvar, :buff), :byteslice,
                            s(:int, 0),
                            s(:send,
                              s(:lvar, :len), :*,
                              s(:const, nil, :WCHAR_SIZE)))),
                        s(:send,
                          s(:lvar, :msg), :delete!,
                          s(:const, nil, :WCHAR_CR)),
                        s(:send,
                          s(:lvar, :msg), :chomp!),
                        s(:send,
                          s(:lvar, :msg), :encode!,
                          s(:const, nil, :LOCALE))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :EncodingError)), nil,
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :lang), :==,
                              s(:int, 0)), nil,
                            s(:send, nil, :raise)),
                          s(:lvasgn, :lang,
                            s(:int, 1033)),
                          s(:retry))), nil)),
                  s(:super,
                    s(:lvar, :msg)))),
              s(:send, nil, :attr_reader,
                s(:sym, :code)))),
          s(:class,
            s(:const, nil, :PredefinedKey),
            s(:const, nil, :Registry),
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :keyname)),
                s(:begin,
                  s(:ivasgn, :@hkey,
                    s(:lvar, :hkey)),
                  s(:ivasgn, :@parent,
                    s(:nil)),
                  s(:ivasgn, :@keyname,
                    s(:lvar, :keyname)),
                  s(:ivasgn, :@disposition,
                    s(:const, nil, :REG_OPENED_EXISTING_KEY)))),
              s(:def, :close,
                s(:args),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :Error), :new,
                    s(:int, 5)))),
              s(:def, :class,
                s(:args),
                s(:const, nil, :Registry)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Constants), :constants), :grep,
                  s(:regexp,
                    s(:str, "^HKEY_"),
                    s(:regopt))),
                s(:args,
                  s(:arg, :c)),
                s(:send,
                  s(:const, nil, :Registry), :const_set,
                  s(:lvar, :c),
                  s(:send, nil, :new,
                    s(:send,
                      s(:const, nil, :Constants), :const_get,
                      s(:lvar, :c)),
                    s(:send,
                      s(:lvar, :c), :to_s)))))),
          s(:module,
            s(:const, nil, :API),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :Constants)),
              s(:send, nil, :extend,
                s(:const, nil, :Importer)),
              s(:send, nil, :dlload,
                s(:str, "advapi32.dll")),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "long RegOpenKeyExW(void *, void *, long, long, void *)"),
                    s(:str, "long RegCreateKeyExW(void *, void *, long, long, long, long, void *, void *, void *)"),
                    s(:str, "long RegEnumValueW(void *, long, void *, void *, void *, void *, void *, void *)"),
                    s(:str, "long RegEnumKeyExW(void *, long, void *, void *, void *, void *, void *, void *)"),
                    s(:str, "long RegQueryValueExW(void *, void *, void *, void *, void *, void *)"),
                    s(:str, "long RegSetValueExW(void *, void *, long, long, void *, long)"),
                    s(:str, "long RegDeleteValueW(void *, void *)"),
                    s(:str, "long RegDeleteKeyW(void *, void *)"),
                    s(:str, "long RegFlushKey(void *)"),
                    s(:str, "long RegCloseKey(void *)"),
                    s(:str, "long RegQueryInfoKey(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *)")), :each),
                s(:args,
                  s(:arg, :fn)),
                s(:begin,
                  s(:lvasgn, :cfunc,
                    s(:send, nil, :extern,
                      s(:lvar, :fn),
                      s(:sym, :stdcall))),
                  s(:send, nil, :const_set,
                    s(:send,
                      s(:send,
                        s(:lvar, :cfunc), :name), :intern),
                    s(:lvar, :cfunc)))),
              s(:send, nil, :module_function),
              s(:def, :check,
                s(:args,
                  s(:arg, :result)),
                s(:if,
                  s(:send,
                    s(:lvar, :result), :!=,
                    s(:int, 0)),
                  s(:send, nil, :raise,
                    s(:const, nil, :Error),
                    s(:lvar, :result),
                    s(:send, nil, :caller,
                      s(:int, 1))), nil)),
              s(:def, :win64?,
                s(:args),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^(?:x64|x86_64)"),
                    s(:regopt)),
                  s(:const, nil, :RUBY_PLATFORM))),
              s(:def, :packhandle,
                s(:args,
                  s(:arg, :h)),
                s(:if,
                  s(:send, nil, :win64?),
                  s(:send, nil, :packqw,
                    s(:lvar, :h)),
                  s(:send, nil, :packdw,
                    s(:lvar, :h)))),
              s(:def, :unpackhandle,
                s(:args,
                  s(:arg, :h)),
                s(:if,
                  s(:send, nil, :win64?),
                  s(:send, nil, :unpackqw,
                    s(:lvar, :h)),
                  s(:send, nil, :unpackdw,
                    s(:lvar, :h)))),
              s(:def, :packdw,
                s(:args,
                  s(:arg, :dw)),
                s(:send,
                  s(:array,
                    s(:lvar, :dw)), :pack,
                  s(:str, "V"))),
              s(:def, :unpackdw,
                s(:args,
                  s(:arg, :dw)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :dw), :+,
                    s(:send,
                      s(:array,
                        s(:int, 0)), :pack,
                      s(:str, "V"))),
                  s(:send,
                    s(:send,
                      s(:lvar, :dw), :unpack,
                      s(:str, "V")), :[],
                    s(:int, 0)))),
              s(:def, :packqw,
                s(:args,
                  s(:arg, :qw)),
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :qw), :&,
                      s(:int, 4294967295)),
                    s(:send,
                      s(:lvar, :qw), :>>,
                      s(:int, 32))), :pack,
                  s(:str, "VV"))),
              s(:def, :unpackqw,
                s(:args,
                  s(:arg, :qw)),
                s(:begin,
                  s(:lvasgn, :qw,
                    s(:send,
                      s(:lvar, :qw), :unpack,
                      s(:str, "VV"))),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :qw), :[],
                          s(:int, 1)), :<<,
                        s(:int, 32))), :|,
                    s(:send,
                      s(:lvar, :qw), :[],
                      s(:int, 0))))),
              s(:def, :make_wstr,
                s(:args,
                  s(:arg, :str)),
                s(:send,
                  s(:lvar, :str), :encode,
                  s(:const, nil, :WCHAR))),
              s(:def, :OpenKey,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :name),
                  s(:arg, :opt),
                  s(:arg, :desired)),
                s(:begin,
                  s(:lvasgn, :result,
                    s(:send, nil, :packhandle,
                      s(:int, 0))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegOpenKeyExW), :call,
                      s(:lvar, :hkey),
                      s(:send, nil, :make_wstr,
                        s(:lvar, :name)),
                      s(:lvar, :opt),
                      s(:lvar, :desired),
                      s(:lvar, :result))),
                  s(:send, nil, :unpackhandle,
                    s(:lvar, :result)))),
              s(:def, :CreateKey,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :name),
                  s(:arg, :opt),
                  s(:arg, :desired)),
                s(:begin,
                  s(:lvasgn, :result,
                    s(:send, nil, :packhandle,
                      s(:int, 0))),
                  s(:lvasgn, :disp,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegCreateKeyExW), :call,
                      s(:lvar, :hkey),
                      s(:send, nil, :make_wstr,
                        s(:lvar, :name)),
                      s(:int, 0),
                      s(:int, 0),
                      s(:lvar, :opt),
                      s(:lvar, :desired),
                      s(:int, 0),
                      s(:lvar, :result),
                      s(:lvar, :disp))),
                  s(:array,
                    s(:send, nil, :unpackhandle,
                      s(:lvar, :result)),
                    s(:send, nil, :unpackdw,
                      s(:lvar, :disp))))),
              s(:def, :EnumValue,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :index)),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send,
                      s(:const, nil, :WCHAR_NUL), :*,
                      s(:const,
                        s(:const, nil, :Constants), :MAX_KEY_LENGTH))),
                  s(:lvasgn, :size,
                    s(:send, nil, :packdw,
                      s(:const,
                        s(:const, nil, :Constants), :MAX_KEY_LENGTH))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegEnumValueW), :call,
                      s(:lvar, :hkey),
                      s(:lvar, :index),
                      s(:lvar, :name),
                      s(:lvar, :size),
                      s(:int, 0),
                      s(:int, 0),
                      s(:int, 0),
                      s(:int, 0))),
                  s(:send,
                    s(:lvar, :name), :byteslice,
                    s(:int, 0),
                    s(:send,
                      s(:send, nil, :unpackdw,
                        s(:lvar, :size)), :*,
                      s(:const, nil, :WCHAR_SIZE))))),
              s(:def, :EnumKey,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :index)),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send,
                      s(:const, nil, :WCHAR_NUL), :*,
                      s(:const,
                        s(:const, nil, :Constants), :MAX_KEY_LENGTH))),
                  s(:lvasgn, :size,
                    s(:send, nil, :packdw,
                      s(:const,
                        s(:const, nil, :Constants), :MAX_KEY_LENGTH))),
                  s(:lvasgn, :wtime,
                    s(:send,
                      s(:str, " "), :*,
                      s(:int, 8))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegEnumKeyExW), :call,
                      s(:lvar, :hkey),
                      s(:lvar, :index),
                      s(:lvar, :name),
                      s(:lvar, :size),
                      s(:int, 0),
                      s(:int, 0),
                      s(:int, 0),
                      s(:lvar, :wtime))),
                  s(:array,
                    s(:send,
                      s(:lvar, :name), :byteslice,
                      s(:int, 0),
                      s(:send,
                        s(:send, nil, :unpackdw,
                          s(:lvar, :size)), :*,
                        s(:const, nil, :WCHAR_SIZE))),
                    s(:send, nil, :unpackqw,
                      s(:lvar, :wtime))))),
              s(:def, :QueryValue,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :name)),
                s(:begin,
                  s(:lvasgn, :type,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :size,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :name,
                    s(:send, nil, :make_wstr,
                      s(:lvar, :name))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegQueryValueExW), :call,
                      s(:lvar, :hkey),
                      s(:lvar, :name),
                      s(:int, 0),
                      s(:lvar, :type),
                      s(:int, 0),
                      s(:lvar, :size))),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:send,
                        s(:str, "\u0000"), :force_encoding,
                        s(:str, "ASCII-8BIT")), :*,
                      s(:send, nil, :unpackdw,
                        s(:lvar, :size)))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegQueryValueExW), :call,
                      s(:lvar, :hkey),
                      s(:lvar, :name),
                      s(:int, 0),
                      s(:lvar, :type),
                      s(:lvar, :data),
                      s(:lvar, :size))),
                  s(:array,
                    s(:send, nil, :unpackdw,
                      s(:lvar, :type)),
                    s(:send,
                      s(:lvar, :data), :[],
                      s(:int, 0),
                      s(:send, nil, :unpackdw,
                        s(:lvar, :size)))))),
              s(:def, :SetValue,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :name),
                  s(:arg, :type),
                  s(:arg, :data),
                  s(:arg, :size)),
                s(:begin,
                  s(:case,
                    s(:lvar, :type),
                    s(:when,
                      s(:const, nil, :REG_SZ),
                      s(:const, nil, :REG_EXPAND_SZ),
                      s(:const, nil, :REG_MULTI_SZ),
                      s(:begin,
                        s(:lvasgn, :data,
                          s(:send,
                            s(:lvar, :data), :encode,
                            s(:const, nil, :WCHAR))),
                        s(:or_asgn,
                          s(:lvasgn, :size),
                          s(:send,
                            s(:send,
                              s(:lvar, :data), :bytesize), :+,
                            s(:const, nil, :WCHAR_SIZE))))), nil),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegSetValueExW), :call,
                      s(:lvar, :hkey),
                      s(:send, nil, :make_wstr,
                        s(:lvar, :name)),
                      s(:int, 0),
                      s(:lvar, :type),
                      s(:lvar, :data),
                      s(:lvar, :size))))),
              s(:def, :DeleteValue,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :name)),
                s(:send, nil, :check,
                  s(:send,
                    s(:const, nil, :RegDeleteValueW), :call,
                    s(:lvar, :hkey),
                    s(:send, nil, :make_wstr,
                      s(:lvar, :name))))),
              s(:def, :DeleteKey,
                s(:args,
                  s(:arg, :hkey),
                  s(:arg, :name)),
                s(:send, nil, :check,
                  s(:send,
                    s(:const, nil, :RegDeleteKeyW), :call,
                    s(:lvar, :hkey),
                    s(:send, nil, :make_wstr,
                      s(:lvar, :name))))),
              s(:def, :FlushKey,
                s(:args,
                  s(:arg, :hkey)),
                s(:send, nil, :check,
                  s(:send,
                    s(:const, nil, :RegFlushKey), :call,
                    s(:lvar, :hkey)))),
              s(:def, :CloseKey,
                s(:args,
                  s(:arg, :hkey)),
                s(:send, nil, :check,
                  s(:send,
                    s(:const, nil, :RegCloseKey), :call,
                    s(:lvar, :hkey)))),
              s(:def, :QueryInfoKey,
                s(:args,
                  s(:arg, :hkey)),
                s(:begin,
                  s(:lvasgn, :subkeys,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :maxsubkeylen,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :values,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :maxvaluenamelen,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :maxvaluelen,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :secdescs,
                    s(:send, nil, :packdw,
                      s(:int, 0))),
                  s(:lvasgn, :wtime,
                    s(:send,
                      s(:str, " "), :*,
                      s(:int, 8))),
                  s(:send, nil, :check,
                    s(:send,
                      s(:const, nil, :RegQueryInfoKey), :call,
                      s(:lvar, :hkey),
                      s(:int, 0),
                      s(:int, 0),
                      s(:int, 0),
                      s(:lvar, :subkeys),
                      s(:lvar, :maxsubkeylen),
                      s(:int, 0),
                      s(:lvar, :values),
                      s(:lvar, :maxvaluenamelen),
                      s(:lvar, :maxvaluelen),
                      s(:lvar, :secdescs),
                      s(:lvar, :wtime))),
                  s(:array,
                    s(:send, nil, :unpackdw,
                      s(:lvar, :subkeys)),
                    s(:send, nil, :unpackdw,
                      s(:lvar, :maxsubkeylen)),
                    s(:send, nil, :unpackdw,
                      s(:lvar, :values)),
                    s(:send, nil, :unpackdw,
                      s(:lvar, :maxvaluenamelen)),
                    s(:send, nil, :unpackdw,
                      s(:lvar, :maxvaluelen)),
                    s(:send, nil, :unpackdw,
                      s(:lvar, :secdescs)),
                    s(:send, nil, :unpackqw,
                      s(:lvar, :wtime))))))),
          s(:defs,
            s(:self), :expand_environ,
            s(:args,
              s(:arg, :str)),
            s(:block,
              s(:send,
                s(:lvar, :str), :gsub,
                s(:send,
                  s(:const, nil, :Regexp), :compile,
                  s(:send,
                    s(:str, "%([^%]+)%"), :encode,
                    s(:send,
                      s(:lvar, :str), :encoding)))),
              s(:args),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:nth_ref, 1), :encode,
                    s(:const, nil, :LOCALE))),
                s(:or,
                  s(:begin,
                    s(:lvasgn, :e,
                      s(:or,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:lvar, :v)),
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:send,
                            s(:lvar, :v), :upcase)))),
                    s(:if,
                      s(:lvar, :e),
                      s(:send,
                        s(:lvar, :e), :encode,
                        s(:send,
                          s(:lvar, :str), :encoding)), nil)),
                  s(:back_ref, :$&))))),
          s(:cvasgn, :@@type2name,
            s(:send,
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "REG_NONE"),
                    s(:str, "REG_SZ"),
                    s(:str, "REG_EXPAND_SZ"),
                    s(:str, "REG_BINARY"),
                    s(:str, "REG_DWORD"),
                    s(:str, "REG_DWORD_BIG_ENDIAN"),
                    s(:str, "REG_LINK"),
                    s(:str, "REG_MULTI_SZ"),
                    s(:str, "REG_RESOURCE_LIST"),
                    s(:str, "REG_FULL_RESOURCE_DESCRIPTOR"),
                    s(:str, "REG_RESOURCE_REQUIREMENTS_LIST"),
                    s(:str, "REG_QWORD")), :inject,
                  s(:array)),
                s(:args,
                  s(:arg, :ary),
                  s(:arg, :type)),
                s(:begin,
                  s(:send,
                    s(:lvar, :type), :freeze),
                  s(:send,
                    s(:lvar, :ary), :[]=,
                    s(:send,
                      s(:const, nil, :Constants), :const_get,
                      s(:lvar, :type)),
                    s(:lvar, :type)),
                  s(:lvar, :ary))), :freeze)),
          s(:defs,
            s(:self), :type2name,
            s(:args,
              s(:arg, :type)),
            s(:or,
              s(:send,
                s(:cvar, :@@type2name), :[],
                s(:lvar, :type)),
              s(:send,
                s(:lvar, :type), :to_s))),
          s(:defs,
            s(:self), :wtime2time,
            s(:args,
              s(:arg, :wtime)),
            s(:send,
              s(:const, nil, :Time), :at,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :wtime), :-,
                    s(:int, 116444736000000000))), :/,
                s(:int, 10000000)))),
          s(:defs,
            s(:self), :time2wtime,
            s(:args,
              s(:arg, :time)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :time), :to_i), :*,
                s(:int, 10000000)), :+,
              s(:int, 116444736000000000))),
          s(:send, nil, :private_class_method,
            s(:sym, :new)),
          s(:defs,
            s(:self), :open,
            s(:args,
              s(:arg, :hkey),
              s(:arg, :subkey),
              s(:optarg, :desired,
                s(:const, nil, :KEY_READ)),
              s(:optarg, :opt,
                s(:const, nil, :REG_OPTION_RESERVED))),
            s(:begin,
              s(:lvasgn, :subkey,
                s(:send,
                  s(:lvar, :subkey), :chomp,
                  s(:str, "\\"))),
              s(:lvasgn, :newkey,
                s(:send,
                  s(:const, nil, :API), :OpenKey,
                  s(:send,
                    s(:lvar, :hkey), :hkey),
                  s(:lvar, :subkey),
                  s(:lvar, :opt),
                  s(:lvar, :desired))),
              s(:lvasgn, :obj,
                s(:send, nil, :new,
                  s(:lvar, :newkey),
                  s(:lvar, :hkey),
                  s(:lvar, :subkey),
                  s(:const, nil, :REG_OPENED_EXISTING_KEY))),
              s(:if,
                s(:send, nil, :block_given?),
                s(:kwbegin,
                  s(:ensure,
                    s(:yield,
                      s(:lvar, :obj)),
                    s(:send,
                      s(:lvar, :obj), :close))),
                s(:lvar, :obj)))),
          s(:defs,
            s(:self), :create,
            s(:args,
              s(:arg, :hkey),
              s(:arg, :subkey),
              s(:optarg, :desired,
                s(:const, nil, :KEY_ALL_ACCESS)),
              s(:optarg, :opt,
                s(:const, nil, :REG_OPTION_RESERVED))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :newkey),
                  s(:lvasgn, :disp)),
                s(:send,
                  s(:const, nil, :API), :CreateKey,
                  s(:send,
                    s(:lvar, :hkey), :hkey),
                  s(:lvar, :subkey),
                  s(:lvar, :opt),
                  s(:lvar, :desired))),
              s(:lvasgn, :obj,
                s(:send, nil, :new,
                  s(:lvar, :newkey),
                  s(:lvar, :hkey),
                  s(:lvar, :subkey),
                  s(:lvar, :disp))),
              s(:if,
                s(:send, nil, :block_given?),
                s(:kwbegin,
                  s(:ensure,
                    s(:yield,
                      s(:lvar, :obj)),
                    s(:send,
                      s(:lvar, :obj), :close))),
                s(:lvar, :obj)))),
          s(:cvasgn, :@@final,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :hkey)),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:if,
                  s(:send,
                    s(:lvar, :hkey), :[],
                    s(:int, 0)),
                  s(:send,
                    s(:const, nil, :API), :CloseKey,
                    s(:send,
                      s(:lvar, :hkey), :[],
                      s(:int, 0))), nil)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :hkey),
              s(:arg, :parent),
              s(:arg, :keyname),
              s(:arg, :disposition)),
            s(:begin,
              s(:ivasgn, :@hkey,
                s(:lvar, :hkey)),
              s(:ivasgn, :@parent,
                s(:lvar, :parent)),
              s(:ivasgn, :@keyname,
                s(:lvar, :keyname)),
              s(:ivasgn, :@disposition,
                s(:lvar, :disposition)),
              s(:ivasgn, :@hkeyfinal,
                s(:array,
                  s(:lvar, :hkey))),
              s(:send,
                s(:const, nil, :ObjectSpace), :define_finalizer,
                s(:self),
                s(:send,
                  s(:cvar, :@@final), :call,
                  s(:ivar, :@hkeyfinal))))),
          s(:send, nil, :attr_reader,
            s(:sym, :hkey)),
          s(:send, nil, :attr_reader,
            s(:sym, :parent)),
          s(:send, nil, :attr_reader,
            s(:sym, :keyname)),
          s(:send, nil, :attr_reader,
            s(:sym, :disposition)),
          s(:def, :created?,
            s(:args),
            s(:send,
              s(:ivar, :@disposition), :==,
              s(:const, nil, :REG_CREATED_NEW_KEY))),
          s(:def, :open?,
            s(:args),
            s(:send,
              s(:send,
                s(:ivar, :@hkey), :nil?), :!)),
          s(:def, :name,
            s(:args),
            s(:begin,
              s(:lvasgn, :parent,
                s(:self)),
              s(:lvasgn, :name,
                s(:ivar, :@keyname)),
              s(:while,
                s(:lvasgn, :parent,
                  s(:send,
                    s(:lvar, :parent), :parent)),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :parent), :keyname), :+,
                      s(:str, "\\")), :+,
                    s(:lvar, :name)))),
              s(:lvar, :name))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<Win32::Registry key="),
              s(:begin,
                s(:send,
                  s(:send, nil, :name), :inspect)),
              s(:str, ">"))),
          s(:def, :_dump,
            s(:args,
              s(:arg, :depth)),
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:str, "can't dump Win32::Registry"))),
          s(:def, :open,
            s(:args,
              s(:arg, :subkey),
              s(:optarg, :desired,
                s(:const, nil, :KEY_READ)),
              s(:optarg, :opt,
                s(:const, nil, :REG_OPTION_RESERVED)),
              s(:blockarg, :blk)),
            s(:send,
              s(:send,
                s(:self), :class), :open,
              s(:self),
              s(:lvar, :subkey),
              s(:lvar, :desired),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :blk)))),
          s(:def, :create,
            s(:args,
              s(:arg, :subkey),
              s(:optarg, :desired,
                s(:const, nil, :KEY_ALL_ACCESS)),
              s(:optarg, :opt,
                s(:const, nil, :REG_OPTION_RESERVED)),
              s(:blockarg, :blk)),
            s(:send,
              s(:send,
                s(:self), :class), :create,
              s(:self),
              s(:lvar, :subkey),
              s(:lvar, :desired),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :blk)))),
          s(:def, :close,
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :API), :CloseKey,
                s(:ivar, :@hkey)),
              s(:ivasgn, :@hkey,
                s(:ivasgn, :@parent,
                  s(:ivasgn, :@keyname,
                    s(:nil)))),
              s(:send,
                s(:ivar, :@hkeyfinal), :[]=,
                s(:int, 0),
                s(:nil)))),
          s(:def, :each_value,
            s(:args),
            s(:begin,
              s(:lvasgn, :index,
                s(:int, 0)),
              s(:while,
                s(:true),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :subkey,
                        s(:send,
                          s(:const, nil, :API), :EnumValue,
                          s(:ivar, :@hkey),
                          s(:lvar, :index))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Error)), nil,
                        s(:break)), nil)),
                  s(:lvasgn, :subkey,
                    s(:send, nil, :export_string,
                      s(:lvar, :subkey))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :type),
                          s(:lvasgn, :data)),
                        s(:send, nil, :read,
                          s(:lvar, :subkey))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Error)), nil,
                        s(:next)), nil)),
                  s(:yield,
                    s(:lvar, :subkey),
                    s(:lvar, :type),
                    s(:lvar, :data)),
                  s(:op_asgn,
                    s(:lvasgn, :index), :+,
                    s(:int, 1)))),
              s(:lvar, :index))),
          s(:alias,
            s(:sym, :each),
            s(:sym, :each_value)),
          s(:def, :values,
            s(:args),
            s(:begin,
              s(:lvasgn, :vals_ary,
                s(:array)),
              s(:block,
                s(:send, nil, :each_value),
                s(:args,
                  s(:restarg),
                  s(:arg, :val)),
                s(:send,
                  s(:lvar, :vals_ary), :<<,
                  s(:lvar, :val))),
              s(:lvar, :vals_ary))),
          s(:def, :each_key,
            s(:args),
            s(:begin,
              s(:lvasgn, :index,
                s(:int, 0)),
              s(:while,
                s(:true),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :subkey),
                          s(:lvasgn, :wtime)),
                        s(:send,
                          s(:const, nil, :API), :EnumKey,
                          s(:ivar, :@hkey),
                          s(:lvar, :index))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Error)), nil,
                        s(:break)), nil)),
                  s(:lvasgn, :subkey,
                    s(:send, nil, :export_string,
                      s(:lvar, :subkey))),
                  s(:yield,
                    s(:lvar, :subkey),
                    s(:lvar, :wtime)),
                  s(:op_asgn,
                    s(:lvasgn, :index), :+,
                    s(:int, 1)))),
              s(:lvar, :index))),
          s(:def, :keys,
            s(:args),
            s(:begin,
              s(:lvasgn, :keys_ary,
                s(:array)),
              s(:block,
                s(:send, nil, :each_key),
                s(:args,
                  s(:arg, :key)),
                s(:send,
                  s(:lvar, :keys_ary), :<<,
                  s(:lvar, :key))),
              s(:lvar, :keys_ary))),
          s(:def, :read,
            s(:args,
              s(:arg, :name),
              s(:restarg, :rtype)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data)),
                s(:send,
                  s(:const, nil, :API), :QueryValue,
                  s(:ivar, :@hkey),
                  s(:lvar, :name))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :rtype), :empty?),
                  s(:send,
                    s(:lvar, :rtype), :include?,
                    s(:lvar, :type))), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Type mismatch (expect "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :rtype), :inspect)),
                    s(:str, " but "),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, " present)")))),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:const, nil, :REG_SZ),
                  s(:const, nil, :REG_EXPAND_SZ),
                  s(:array,
                    s(:lvar, :type),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :encode,
                        s(:send,
                          s(:lvar, :name), :encoding),
                        s(:const, nil, :WCHAR)), :chop))),
                s(:when,
                  s(:const, nil, :REG_MULTI_SZ),
                  s(:array,
                    s(:lvar, :type),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :encode,
                        s(:send,
                          s(:lvar, :name), :encoding),
                        s(:const, nil, :WCHAR)), :split,
                      s(:regexp,
                        s(:str, "\\0"),
                        s(:regopt))))),
                s(:when,
                  s(:const, nil, :REG_BINARY),
                  s(:array,
                    s(:lvar, :type),
                    s(:lvar, :data))),
                s(:when,
                  s(:const, nil, :REG_DWORD),
                  s(:array,
                    s(:lvar, :type),
                    s(:send,
                      s(:const, nil, :API), :unpackdw,
                      s(:lvar, :data)))),
                s(:when,
                  s(:const, nil, :REG_DWORD_BIG_ENDIAN),
                  s(:array,
                    s(:lvar, :type),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :unpack,
                        s(:str, "N")), :[],
                      s(:int, 0)))),
                s(:when,
                  s(:const, nil, :REG_QWORD),
                  s(:array,
                    s(:lvar, :type),
                    s(:send,
                      s(:const, nil, :API), :unpackqw,
                      s(:lvar, :data)))),
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Type "),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, " is not supported.")))))),
          s(:def, :[],
            s(:args,
              s(:arg, :name),
              s(:restarg, :rtype)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data)),
                s(:send, nil, :read,
                  s(:lvar, :name),
                  s(:splat,
                    s(:lvar, :rtype)))),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:const, nil, :REG_SZ),
                  s(:const, nil, :REG_DWORD),
                  s(:const, nil, :REG_QWORD),
                  s(:const, nil, :REG_MULTI_SZ),
                  s(:lvar, :data)),
                s(:when,
                  s(:const, nil, :REG_EXPAND_SZ),
                  s(:send,
                    s(:const, nil, :Registry), :expand_environ,
                    s(:lvar, :data))),
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Type "),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, " is not supported.")))))),
          s(:def, :read_s,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:send, nil, :read,
                s(:lvar, :name),
                s(:const, nil, :REG_SZ)), :[],
              s(:int, 1))),
          s(:def, :read_s_expand,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data)),
                s(:send, nil, :read,
                  s(:lvar, :name),
                  s(:const, nil, :REG_SZ),
                  s(:const, nil, :REG_EXPAND_SZ))),
              s(:if,
                s(:send,
                  s(:lvar, :type), :==,
                  s(:const, nil, :REG_EXPAND_SZ)),
                s(:send,
                  s(:const, nil, :Registry), :expand_environ,
                  s(:lvar, :data)),
                s(:lvar, :data)))),
          s(:def, :read_i,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:send, nil, :read,
                s(:lvar, :name),
                s(:const, nil, :REG_DWORD),
                s(:const, nil, :REG_DWORD_BIG_ENDIAN),
                s(:const, nil, :REG_QWORD)), :[],
              s(:int, 1))),
          s(:def, :read_bin,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:send, nil, :read,
                s(:lvar, :name),
                s(:const, nil, :REG_BINARY)), :[],
              s(:int, 1))),
          s(:def, :write,
            s(:args,
              s(:arg, :name),
              s(:arg, :type),
              s(:arg, :data)),
            s(:begin,
              s(:lvasgn, :termsize,
                s(:int, 0)),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:const, nil, :REG_SZ),
                  s(:const, nil, :REG_EXPAND_SZ),
                  s(:begin,
                    s(:lvasgn, :data,
                      s(:send,
                        s(:lvar, :data), :encode,
                        s(:const, nil, :WCHAR))),
                    s(:lvasgn, :termsize,
                      s(:const, nil, :WCHAR_SIZE)))),
                s(:when,
                  s(:const, nil, :REG_MULTI_SZ),
                  s(:begin,
                    s(:lvasgn, :data,
                      s(:send,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :data), :to_a), :map),
                            s(:args,
                              s(:arg, :s)),
                            s(:send,
                              s(:lvar, :s), :encode,
                              s(:const, nil, :WCHAR))), :join,
                          s(:const, nil, :WCHAR_NUL)), :<<,
                        s(:const, nil, :WCHAR_NUL))),
                    s(:lvasgn, :termsize,
                      s(:const, nil, :WCHAR_SIZE)))),
                s(:when,
                  s(:const, nil, :REG_BINARY),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:lvar, :data), :to_s))),
                s(:when,
                  s(:const, nil, :REG_DWORD),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:const, nil, :API), :packdw,
                      s(:send,
                        s(:lvar, :data), :to_i)))),
                s(:when,
                  s(:const, nil, :REG_DWORD_BIG_ENDIAN),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:array,
                        s(:send,
                          s(:lvar, :data), :to_i)), :pack,
                      s(:str, "N")))),
                s(:when,
                  s(:const, nil, :REG_QWORD),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:const, nil, :API), :packqw,
                      s(:send,
                        s(:lvar, :data), :to_i)))),
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Unsupported type "),
                    s(:begin,
                      s(:lvar, :type))))),
              s(:send,
                s(:const, nil, :API), :SetValue,
                s(:ivar, :@hkey),
                s(:lvar, :name),
                s(:lvar, :type),
                s(:lvar, :data),
                s(:send,
                  s(:send,
                    s(:lvar, :data), :bytesize), :+,
                  s(:lvar, :termsize))))),
          s(:def, :[]=,
            s(:args,
              s(:arg, :name),
              s(:arg, :rtype),
              s(:optarg, :value,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :value),
                s(:send, nil, :write,
                  s(:lvar, :name),
                  s(:lvar, :rtype),
                  s(:lvar, :value)),
                s(:case,
                  s(:lvasgn, :value,
                    s(:lvar, :rtype)),
                  s(:when,
                    s(:const, nil, :Integer),
                    s(:send, nil, :write,
                      s(:lvar, :name),
                      s(:const, nil, :REG_DWORD),
                      s(:lvar, :value))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:send, nil, :write,
                      s(:lvar, :name),
                      s(:const, nil, :REG_SZ),
                      s(:lvar, :value))),
                  s(:when,
                    s(:const, nil, :Array),
                    s(:send, nil, :write,
                      s(:lvar, :name),
                      s(:const, nil, :REG_MULTI_SZ),
                      s(:lvar, :value))),
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError),
                    s(:dstr,
                      s(:str, "Unexpected type "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :value), :class)))))),
              s(:lvar, :value))),
          s(:def, :write_s,
            s(:args,
              s(:arg, :name),
              s(:arg, :value)),
            s(:send, nil, :write,
              s(:lvar, :name),
              s(:const, nil, :REG_SZ),
              s(:send,
                s(:lvar, :value), :to_s))),
          s(:def, :write_i,
            s(:args,
              s(:arg, :name),
              s(:arg, :value)),
            s(:send, nil, :write,
              s(:lvar, :name),
              s(:const, nil, :REG_DWORD),
              s(:send,
                s(:lvar, :value), :to_i))),
          s(:def, :write_bin,
            s(:args,
              s(:arg, :name),
              s(:arg, :value)),
            s(:send, nil, :write,
              s(:lvar, :name),
              s(:const, nil, :REG_BINARY),
              s(:send,
                s(:lvar, :value), :to_s))),
          s(:def, :delete_value,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:const, nil, :API), :DeleteValue,
              s(:ivar, :@hkey),
              s(:lvar, :name))),
          s(:alias,
            s(:sym, :delete),
            s(:sym, :delete_value)),
          s(:def, :delete_key,
            s(:args,
              s(:arg, :name),
              s(:optarg, :recursive,
                s(:false))),
            s(:if,
              s(:lvar, :recursive),
              s(:begin,
                s(:block,
                  s(:send, nil, :open,
                    s(:lvar, :name),
                    s(:const, nil, :KEY_ALL_ACCESS)),
                  s(:args,
                    s(:arg, :reg)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :reg), :keys), :each),
                    s(:args,
                      s(:arg, :key)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :reg), :delete_key,
                          s(:lvar, :key),
                          s(:true)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :Error)), nil, nil), nil)))),
                s(:send,
                  s(:const, nil, :API), :DeleteKey,
                  s(:ivar, :@hkey),
                  s(:lvar, :name))),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :API), :EnumKey,
                      s(:ivar, :@hkey),
                      s(:int, 0)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Error)), nil,
                      s(:return,
                        s(:send,
                          s(:const, nil, :API), :DeleteKey,
                          s(:ivar, :@hkey),
                          s(:lvar, :name)))), nil)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :Error), :new,
                    s(:int, 5)))))),
          s(:def, :flush,
            s(:args),
            s(:send,
              s(:const, nil, :API), :FlushKey,
              s(:ivar, :@hkey))),
          s(:def, :info,
            s(:args),
            s(:send,
              s(:const, nil, :API), :QueryInfoKey,
              s(:ivar, :@hkey))),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "num_keys"),
                s(:str, "max_key_length"),
                s(:str, "num_values"),
                s(:str, "max_value_name_length"),
                s(:str, "max_value_length"),
                s(:str, "descriptor_length"),
                s(:str, "wtime")), :each_with_index),
            s(:args,
              s(:arg, :s),
              s(:arg, :i)),
            s(:send, nil, :eval,
              s(:dstr,
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :s)),
                s(:str, "\n"),
                s(:str, "          info["),
                s(:begin,
                  s(:lvar, :i)),
                s(:str, "]\n"),
                s(:str, "        end\n")))),
          s(:send, nil, :private),
          s(:def, :export_string,
            s(:args,
              s(:arg, :str),
              s(:optarg, :enc,
                s(:or,
                  s(:send,
                    s(:const, nil, :Encoding), :default_internal),
                  s(:const, nil, :LOCALE)))),
            s(:send,
              s(:lvar, :str), :encode,
              s(:lvar, :enc))))))))
