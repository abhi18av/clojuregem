s(:begin,
  s(:send, nil, :require,
    s(:str, "Win32API")),
  s(:module,
    s(:const, nil, :Win32),
    s(:module,
      s(:const, nil, :SSPI),
      s(:begin,
        s(:casgn, nil, :SECPKG_CRED_INBOUND,
          s(:int, 1)),
        s(:casgn, nil, :SECPKG_CRED_OUTBOUND,
          s(:int, 2)),
        s(:casgn, nil, :SECPKG_CRED_BOTH,
          s(:int, 3)),
        s(:casgn, nil, :SECURITY_NATIVE_DREP,
          s(:int, 16)),
        s(:casgn, nil, :SECURITY_NETWORK_DREP,
          s(:int, 0)),
        s(:casgn, nil, :ISC_REQ_REPLAY_DETECT,
          s(:int, 4)),
        s(:casgn, nil, :ISC_REQ_SEQUENCE_DETECT,
          s(:int, 8)),
        s(:casgn, nil, :ISC_REQ_CONFIDENTIALITY,
          s(:int, 16)),
        s(:casgn, nil, :ISC_REQ_USE_SESSION_KEY,
          s(:int, 32)),
        s(:casgn, nil, :ISC_REQ_PROMPT_FOR_CREDS,
          s(:int, 64)),
        s(:casgn, nil, :ISC_REQ_CONNECTION,
          s(:int, 2048)),
        s(:module,
          s(:const, nil, :API),
          s(:begin,
            s(:casgn, nil, :AcquireCredentialsHandle,
              s(:send,
                s(:const, nil, :Win32API), :new,
                s(:str, "secur32"),
                s(:str, "AcquireCredentialsHandle"),
                s(:str, "ppLpppppp"),
                s(:str, "L"))),
            s(:casgn, nil, :InitializeSecurityContext,
              s(:send,
                s(:const, nil, :Win32API), :new,
                s(:str, "secur32"),
                s(:str, "InitializeSecurityContext"),
                s(:str, "pppLLLpLpppp"),
                s(:str, "L"))),
            s(:casgn, nil, :DeleteSecurityContext,
              s(:send,
                s(:const, nil, :Win32API), :new,
                s(:str, "secur32"),
                s(:str, "DeleteSecurityContext"),
                s(:str, "P"),
                s(:str, "L"))),
            s(:casgn, nil, :FreeCredentialsHandle,
              s(:send,
                s(:const, nil, :Win32API), :new,
                s(:str, "secur32"),
                s(:str, "FreeCredentialsHandle"),
                s(:str, "P"),
                s(:str, "L"))))),
        s(:class,
          s(:const, nil, :SecurityHandle), nil,
          s(:begin,
            s(:def, :upper,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@struct), :unpack,
                  s(:str, "LL")), :[],
                s(:int, 1))),
            s(:def, :lower,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@struct), :unpack,
                  s(:str, "LL")), :[],
                s(:int, 0))),
            s(:def, :to_p,
              s(:args),
              s(:or_asgn,
                s(:ivasgn, :@struct),
                s(:send,
                  s(:str, "\u0000"), :*,
                  s(:int, 8)))))),
        s(:casgn, nil, :CredHandle,
          s(:casgn, nil, :CtxtHandle,
            s(:const, nil, :SecurityHandle))),
        s(:class,
          s(:const, nil, :TimeStamp), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :struct)),
            s(:def, :to_p,
              s(:args),
              s(:or_asgn,
                s(:ivasgn, :@struct),
                s(:send,
                  s(:str, "\u0000"), :*,
                  s(:int, 8)))))),
        s(:class,
          s(:const, nil, :SecurityBuffer), nil,
          s(:begin,
            s(:casgn, nil, :SECBUFFER_TOKEN,
              s(:int, 2)),
            s(:casgn, nil, :TOKENBUFSIZE,
              s(:int, 12288)),
            s(:casgn, nil, :SECBUFFER_VERSION,
              s(:int, 0)),
            s(:def, :initialize,
              s(:args,
                s(:optarg, :buffer,
                  s(:nil))),
              s(:begin,
                s(:ivasgn, :@buffer,
                  s(:or,
                    s(:lvar, :buffer),
                    s(:send,
                      s(:str, "\u0000"), :*,
                      s(:const, nil, :TOKENBUFSIZE)))),
                s(:ivasgn, :@bufferSize,
                  s(:send,
                    s(:ivar, :@buffer), :length)),
                s(:ivasgn, :@type,
                  s(:const, nil, :SECBUFFER_TOKEN)))),
            s(:def, :bufferSize,
              s(:args),
              s(:begin,
                s(:send, nil, :unpack),
                s(:ivar, :@bufferSize))),
            s(:def, :bufferType,
              s(:args),
              s(:begin,
                s(:send, nil, :unpack),
                s(:ivar, :@type))),
            s(:def, :token,
              s(:args),
              s(:begin,
                s(:send, nil, :unpack),
                s(:ivar, :@buffer))),
            s(:def, :to_p,
              s(:args),
              s(:begin,
                s(:ivasgn, :@unpacked,
                  s(:nil)),
                s(:or_asgn,
                  s(:ivasgn, :@sec_buffer),
                  s(:send,
                    s(:array,
                      s(:ivar, :@bufferSize),
                      s(:ivar, :@type),
                      s(:ivar, :@buffer)), :pack,
                    s(:str, "LLP"))),
                s(:or_asgn,
                  s(:ivasgn, :@struct),
                  s(:send,
                    s(:array,
                      s(:const, nil, :SECBUFFER_VERSION),
                      s(:int, 1),
                      s(:ivar, :@sec_buffer)), :pack,
                    s(:str, "LLP"))))),
            s(:send, nil, :private),
            s(:def, :unpack,
              s(:args),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:ivar, :@unpacked), :!),
                    s(:ivar, :@sec_buffer)),
                  s(:ivar, :@struct)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:ivasgn, :@bufferSize),
                      s(:ivasgn, :@type)),
                    s(:send,
                      s(:ivar, :@sec_buffer), :unpack,
                      s(:str, "LL"))),
                  s(:ivasgn, :@buffer,
                    s(:send,
                      s(:send,
                        s(:ivar, :@sec_buffer), :unpack,
                        s(:dstr,
                          s(:str, "LLP"),
                          s(:begin,
                            s(:ivar, :@bufferSize)))), :[],
                      s(:int, 2))),
                  s(:ivasgn, :@struct,
                    s(:nil)),
                  s(:ivasgn, :@sec_buffer,
                    s(:nil)),
                  s(:ivasgn, :@unpacked,
                    s(:true))), nil)))),
        s(:class,
          s(:const, nil, :Identity), nil,
          s(:begin,
            s(:casgn, nil, :SEC_WINNT_AUTH_IDENTITY_ANSI,
              s(:int, 1)),
            s(:send, nil, :attr_accessor,
              s(:sym, :user),
              s(:sym, :domain),
              s(:sym, :password)),
            s(:def, :initialize,
              s(:args,
                s(:optarg, :user,
                  s(:nil)),
                s(:optarg, :domain,
                  s(:nil)),
                s(:optarg, :password,
                  s(:nil))),
              s(:begin,
                s(:ivasgn, :@user,
                  s(:lvar, :user)),
                s(:ivasgn, :@domain,
                  s(:lvar, :domain)),
                s(:ivasgn, :@password,
                  s(:lvar, :password)),
                s(:ivasgn, :@flags,
                  s(:const, nil, :SEC_WINNT_AUTH_IDENTITY_ANSI)))),
            s(:def, :to_p,
              s(:args),
              s(:send,
                s(:array,
                  s(:ivar, :@user),
                  s(:if,
                    s(:ivar, :@user),
                    s(:send,
                      s(:ivar, :@user), :length),
                    s(:int, 0)),
                  s(:ivar, :@domain),
                  s(:if,
                    s(:ivar, :@domain),
                    s(:send,
                      s(:ivar, :@domain), :length),
                    s(:int, 0)),
                  s(:ivar, :@password),
                  s(:if,
                    s(:ivar, :@password),
                    s(:send,
                      s(:ivar, :@password), :length),
                    s(:int, 0)),
                  s(:ivar, :@flags)), :pack,
                s(:str, "PLPLPLL"))))),
        s(:class,
          s(:const, nil, :SSPIResult), nil,
          s(:begin,
            s(:casgn, nil, :SEC_E_OK,
              s(:int, 0)),
            s(:casgn, nil, :SEC_I_CONTINUE_NEEDED,
              s(:int, 590610)),
            s(:casgn, nil, :SEC_E_INSUFFICIENT_MEMORY,
              s(:int, 2148074240)),
            s(:casgn, nil, :SEC_E_INTERNAL_ERROR,
              s(:int, 2148074244)),
            s(:casgn, nil, :SEC_E_INVALID_HANDLE,
              s(:int, 2148074241)),
            s(:casgn, nil, :SEC_E_INVALID_TOKEN,
              s(:int, 2148074248)),
            s(:casgn, nil, :SEC_E_LOGON_DENIED,
              s(:int, 2148074252)),
            s(:casgn, nil, :SEC_E_NO_AUTHENTICATING_AUTHORITY,
              s(:int, 2148074257)),
            s(:casgn, nil, :SEC_E_NO_CREDENTIALS,
              s(:int, 2148074254)),
            s(:casgn, nil, :SEC_E_TARGET_UNKNOWN,
              s(:int, 2148074243)),
            s(:casgn, nil, :SEC_E_UNSUPPORTED_FUNCTION,
              s(:int, 2148074242)),
            s(:casgn, nil, :SEC_E_WRONG_PRINCIPAL,
              s(:int, 2148074274)),
            s(:casgn, nil, :SEC_E_NOT_OWNER,
              s(:int, 2148074246)),
            s(:casgn, nil, :SEC_E_SECPKG_NOT_FOUND,
              s(:int, 2148074245)),
            s(:casgn, nil, :SEC_E_UNKNOWN_CREDENTIALS,
              s(:int, 2148074253)),
            s(:cvasgn, :@@map,
              s(:hash)),
            s(:block,
              s(:send,
                s(:send, nil, :constants), :each),
              s(:args,
                s(:arg, :v)),
              s(:send,
                s(:cvar, :@@map), :[]=,
                s(:send,
                  s(:self), :const_get,
                  s(:send,
                    s(:lvar, :v), :to_s)),
                s(:lvar, :v))),
            s(:send, nil, :attr_reader,
              s(:sym, :value)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:lvar, :value)), :pack,
                        s(:str, "L")), :unpack,
                      s(:str, "L")), :first)),
                s(:if,
                  s(:send,
                    s(:cvar, :@@map), :has_key?,
                    s(:lvar, :value)), nil,
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :value), :to_s,
                          s(:int, 16))),
                      s(:str, " is not a recognized result")))),
                s(:ivasgn, :@value,
                  s(:lvar, :value)))),
            s(:def, :to_s,
              s(:args),
              s(:send,
                s(:send,
                  s(:cvar, :@@map), :[],
                  s(:ivar, :@value)), :to_s)),
            s(:def, :ok?,
              s(:args),
              s(:or,
                s(:send,
                  s(:ivar, :@value), :==,
                  s(:const, nil, :SEC_I_CONTINUE_NEEDED)),
                s(:send,
                  s(:ivar, :@value), :==,
                  s(:const, nil, :SEC_E_OK)))),
            s(:def, :==,
              s(:args,
                s(:arg, :other)),
              s(:if,
                s(:send,
                  s(:lvar, :other), :is_a?,
                  s(:const, nil, :SSPIResult)),
                s(:send,
                  s(:ivar, :@value), :==,
                  s(:send,
                    s(:lvar, :other), :value)),
                s(:if,
                  s(:send,
                    s(:lvar, :other), :is_a?,
                    s(:const, nil, :Fixnum)),
                  s(:send,
                    s(:ivar, :@value), :==,
                    s(:send,
                      s(:cvar, :@@map), :[],
                      s(:lvar, :other))),
                  s(:false)))))),
        s(:class,
          s(:const, nil, :NegotiateAuth), nil,
          s(:begin,
            s(:send, nil, :attr_accessor,
              s(:sym, :credentials),
              s(:sym, :context),
              s(:sym, :contextAttributes),
              s(:sym, :user),
              s(:sym, :domain)),
            s(:casgn, nil, :REQUEST_FLAGS,
              s(:send,
                s(:send,
                  s(:const, nil, :ISC_REQ_CONFIDENTIALITY), :|,
                  s(:const, nil, :ISC_REQ_REPLAY_DETECT)), :|,
                s(:const, nil, :ISC_REQ_CONNECTION))),
            s(:casgn, nil, :B64_TOKEN_PREFIX,
              s(:send,
                s(:send,
                  s(:array,
                    s(:str, "NTLMSSP")), :pack,
                  s(:str, "m")), :delete,
                s(:str, "=\n"))),
            s(:defs,
              s(:const, nil, :NegotiateAuth), :proxy_auth_get,
              s(:args,
                s(:arg, :http),
                s(:arg, :path),
                s(:optarg, :user,
                  s(:nil)),
                s(:optarg, :domain,
                  s(:nil))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :http), :respond_to?,
                    s(:sym, :get)), nil,
                  s(:send, nil, :raise,
                    s(:str, "http must respond to :get"))),
                s(:lvasgn, :nego_auth,
                  s(:send,
                    s(:self), :new,
                    s(:lvar, :user),
                    s(:lvar, :domain))),
                s(:lvasgn, :resp,
                  s(:send,
                    s(:lvar, :http), :get,
                    s(:lvar, :path),
                    s(:hash,
                      s(:pair,
                        s(:str, "Proxy-Authorization"),
                        s(:send,
                          s(:str, "Negotiate "), :+,
                          s(:send,
                            s(:lvar, :nego_auth), :get_initial_token)))))),
                s(:if,
                  s(:send,
                    s(:lvar, :resp), :[],
                    s(:str, "Proxy-Authenticate")),
                  s(:lvasgn, :resp,
                    s(:send,
                      s(:lvar, :http), :get,
                      s(:lvar, :path),
                      s(:hash,
                        s(:pair,
                          s(:str, "Proxy-Authorization"),
                          s(:send,
                            s(:str, "Negotiate "), :+,
                            s(:send,
                              s(:lvar, :nego_auth), :complete_authentication,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :resp), :[],
                                      s(:str, "Proxy-Authenticate")), :split,
                                    s(:str, " ")), :last), :strip))))))), nil),
                s(:lvar, :resp))),
            s(:def, :initialize,
              s(:args,
                s(:optarg, :user,
                  s(:nil)),
                s(:optarg, :domain,
                  s(:nil))),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:lvar, :user), :nil?),
                        s(:send,
                          s(:lvar, :domain), :nil?)),
                      s(:send,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "USERNAME")), :nil?)),
                    s(:send,
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:str, "USERDOMAIN")), :nil?)),
                  s(:send, nil, :raise,
                    s(:str, "A username or domain must be supplied since they cannot be retrieved from the environment")), nil),
                s(:ivasgn, :@user,
                  s(:or,
                    s(:lvar, :user),
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "USERNAME")))),
                s(:ivasgn, :@domain,
                  s(:or,
                    s(:lvar, :domain),
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "USERDOMAIN")))))),
            s(:def, :get_initial_token,
              s(:args),
              s(:begin,
                s(:if,
                  s(:ivar, :@cleaned_up),
                  s(:send, nil, :raise,
                    s(:str, "This object is no longer usable because its resources have been freed.")), nil),
                s(:send, nil, :get_credentials),
                s(:lvasgn, :outputBuffer,
                  s(:send,
                    s(:const, nil, :SecurityBuffer), :new)),
                s(:ivasgn, :@context,
                  s(:send,
                    s(:const, nil, :CtxtHandle), :new)),
                s(:ivasgn, :@contextAttributes,
                  s(:send,
                    s(:str, "\u0000"), :*,
                    s(:int, 4))),
                s(:lvasgn, :result,
                  s(:send,
                    s(:const, nil, :SSPIResult), :new,
                    s(:send,
                      s(:const,
                        s(:const, nil, :API), :InitializeSecurityContext), :call,
                      s(:send,
                        s(:ivar, :@credentials), :to_p),
                      s(:nil),
                      s(:nil),
                      s(:const, nil, :REQUEST_FLAGS),
                      s(:int, 0),
                      s(:const, nil, :SECURITY_NETWORK_DREP),
                      s(:nil),
                      s(:int, 0),
                      s(:send,
                        s(:ivar, :@context), :to_p),
                      s(:send,
                        s(:lvar, :outputBuffer), :to_p),
                      s(:ivar, :@contextAttributes),
                      s(:send,
                        s(:send,
                          s(:const, nil, :TimeStamp), :new), :to_p)))),
                s(:if,
                  s(:send,
                    s(:lvar, :result), :ok?),
                  s(:return,
                    s(:send, nil, :encode_token,
                      s(:send,
                        s(:lvar, :outputBuffer), :token))),
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "Error: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :result), :to_s))))))),
            s(:def, :complete_authentication,
              s(:args,
                s(:arg, :token)),
              s(:ensure,
                s(:begin,
                  s(:if,
                    s(:ivar, :@cleaned_up),
                    s(:send, nil, :raise,
                      s(:str, "This object is no longer usable because its resources have been freed.")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :token), :nil?),
                    s(:lvasgn, :token,
                      s(:str, "")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :token), :include?,
                      s(:str, "Negotiate")),
                    s(:lvasgn, :token,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :split,
                          s(:str, " ")), :last)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :token), :include?,
                      s(:const, nil, :B64_TOKEN_PREFIX)),
                    s(:lvasgn, :token,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :token), :strip), :unpack,
                          s(:str, "m")), :[],
                        s(:int, 0))), nil),
                  s(:lvasgn, :outputBuffer,
                    s(:send,
                      s(:const, nil, :SecurityBuffer), :new)),
                  s(:lvasgn, :result,
                    s(:send,
                      s(:const, nil, :SSPIResult), :new,
                      s(:send,
                        s(:const,
                          s(:const, nil, :API), :InitializeSecurityContext), :call,
                        s(:send,
                          s(:ivar, :@credentials), :to_p),
                        s(:send,
                          s(:ivar, :@context), :to_p),
                        s(:nil),
                        s(:const, nil, :REQUEST_FLAGS),
                        s(:int, 0),
                        s(:const, nil, :SECURITY_NETWORK_DREP),
                        s(:send,
                          s(:send,
                            s(:const, nil, :SecurityBuffer), :new,
                            s(:lvar, :token)), :to_p),
                        s(:int, 0),
                        s(:send,
                          s(:ivar, :@context), :to_p),
                        s(:send,
                          s(:lvar, :outputBuffer), :to_p),
                        s(:ivar, :@contextAttributes),
                        s(:send,
                          s(:send,
                            s(:const, nil, :TimeStamp), :new), :to_p)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :result), :ok?),
                    s(:return,
                      s(:send, nil, :encode_token,
                        s(:send,
                          s(:lvar, :outputBuffer), :token))),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "Error: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :result), :to_s)))))),
                s(:if,
                  s(:ivar, :@cleaned_up), nil,
                  s(:send, nil, :clean_up)))),
            s(:send, nil, :private),
            s(:def, :clean_up,
              s(:args),
              s(:begin,
                s(:ivasgn, :@cleaned_up,
                  s(:true)),
                s(:send,
                  s(:const,
                    s(:const, nil, :API), :FreeCredentialsHandle), :call,
                  s(:send,
                    s(:ivar, :@credentials), :to_p)),
                s(:send,
                  s(:const,
                    s(:const, nil, :API), :DeleteSecurityContext), :call,
                  s(:send,
                    s(:ivar, :@context), :to_p)),
                s(:ivasgn, :@context,
                  s(:nil)),
                s(:ivasgn, :@credentials,
                  s(:nil)),
                s(:ivasgn, :@contextAttributes,
                  s(:nil)))),
            s(:def, :get_credentials,
              s(:args),
              s(:begin,
                s(:ivasgn, :@credentials,
                  s(:send,
                    s(:const, nil, :CredHandle), :new)),
                s(:lvasgn, :ts,
                  s(:send,
                    s(:const, nil, :TimeStamp), :new)),
                s(:ivasgn, :@identity,
                  s(:send,
                    s(:const, nil, :Identity), :new,
                    s(:ivar, :@user),
                    s(:ivar, :@domain))),
                s(:lvasgn, :result,
                  s(:send,
                    s(:const, nil, :SSPIResult), :new,
                    s(:send,
                      s(:const,
                        s(:const, nil, :API), :AcquireCredentialsHandle), :call,
                      s(:nil),
                      s(:str, "Negotiate"),
                      s(:const, nil, :SECPKG_CRED_OUTBOUND),
                      s(:nil),
                      s(:send,
                        s(:ivar, :@identity), :to_p),
                      s(:nil),
                      s(:nil),
                      s(:send,
                        s(:ivar, :@credentials), :to_p),
                      s(:send,
                        s(:lvar, :ts), :to_p)))),
                s(:if,
                  s(:send,
                    s(:lvar, :result), :ok?), nil,
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "Error acquire credentials: "),
                      s(:begin,
                        s(:lvar, :result))))))),
            s(:def, :encode_token,
              s(:args,
                s(:arg, :t)),
              s(:send,
                s(:send,
                  s(:array,
                    s(:lvar, :t)), :pack,
                  s(:str, "m")), :delete,
                s(:str, "\n")))))))))
