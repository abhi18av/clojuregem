s(:begin,
  s(:send, nil, :require,
    s(:str, "socket.so")),
  s(:send, nil, :require,
    s(:str, "io/wait")),
  s(:class,
    s(:const, nil, :Addrinfo), nil,
    s(:begin,
      s(:def, :family_addrinfo,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :args), :empty?),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "no address specified")),
          s(:if,
            s(:send,
              s(:const, nil, :Addrinfo), :===,
              s(:send,
                s(:lvar, :args), :first)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :length), :!=,
                  s(:int, 1)),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "too many arguments")), nil),
              s(:lvasgn, :addrinfo,
                s(:send,
                  s(:lvar, :args), :first)),
              s(:if,
                s(:or,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:self), :pfamily), :!=,
                      s(:send,
                        s(:lvar, :addrinfo), :pfamily))),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:self), :socktype), :!=,
                      s(:send,
                        s(:lvar, :addrinfo), :socktype)))),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "Addrinfo type mismatch")), nil),
              s(:lvar, :addrinfo)),
            s(:if,
              s(:send,
                s(:self), :ip?),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :length), :!=,
                    s(:int, 2)),
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "IP address needs host and port but "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :args), :length)),
                      s(:str, " arguments given"))), nil),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :host),
                    s(:lvasgn, :port)),
                  s(:lvar, :args)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Addrinfo), :getaddrinfo,
                    s(:lvar, :host),
                    s(:lvar, :port),
                    s(:send,
                      s(:self), :pfamily),
                    s(:send,
                      s(:self), :socktype),
                    s(:send,
                      s(:self), :protocol)), :[],
                  s(:int, 0))),
              s(:if,
                s(:send,
                  s(:self), :unix?),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :length), :!=,
                      s(:int, 1)),
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:dstr,
                        s(:str, "UNIX socket needs single path argument but "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :args), :length)),
                        s(:str, " arguments given"))), nil),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :path)),
                    s(:lvar, :args)),
                  s(:send,
                    s(:const, nil, :Addrinfo), :unix,
                    s(:lvar, :path))),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "unexpected family"))))))),
      s(:def, :connect_internal,
        s(:args,
          s(:arg, :local_addrinfo),
          s(:optarg, :timeout,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send,
              s(:const, nil, :Socket), :new,
              s(:send,
                s(:self), :pfamily),
              s(:send,
                s(:self), :socktype),
              s(:send,
                s(:self), :protocol))),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:if,
                  s(:send,
                    s(:self), :ipv6?),
                  s(:send,
                    s(:lvar, :sock), :ipv6only!), nil),
                s(:if,
                  s(:lvar, :local_addrinfo),
                  s(:send,
                    s(:lvar, :sock), :bind,
                    s(:lvar, :local_addrinfo)), nil),
                s(:if,
                  s(:lvar, :timeout),
                  s(:while,
                    s(:true),
                    s(:case,
                      s(:send,
                        s(:lvar, :sock), :connect_nonblock,
                        s(:self),
                        s(:hash,
                          s(:pair,
                            s(:sym, :exception),
                            s(:false)))),
                      s(:when,
                        s(:int, 0),
                        s(:break)),
                      s(:when,
                        s(:sym, :wait_writable),
                        s(:or,
                          s(:send,
                            s(:lvar, :sock), :wait_writable,
                            s(:lvar, :timeout)),
                          s(:send, nil, :raise,
                            s(:const,
                              s(:const, nil, :Errno), :ETIMEDOUT),
                            s(:str, "user specified timeout")))), nil)),
                  s(:send,
                    s(:lvar, :sock), :connect,
                    s(:self)))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:begin,
                  s(:send,
                    s(:lvar, :sock), :close),
                  s(:send, nil, :raise))), nil)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :sock)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :sock), :closed?), :!),
                  s(:send,
                    s(:lvar, :sock), :close), nil))),
            s(:lvar, :sock)))),
      s(:send, nil, :private,
        s(:sym, :connect_internal)),
      s(:def, :connect_from,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:if,
              s(:send,
                s(:const, nil, :Hash), :===,
                s(:send,
                  s(:lvar, :args), :last)),
              s(:send,
                s(:lvar, :args), :pop),
              s(:hash))),
          s(:lvasgn, :local_addr_args,
            s(:lvar, :args)),
          s(:send, nil, :connect_internal,
            s(:send, nil, :family_addrinfo,
              s(:splat,
                s(:lvar, :local_addr_args))),
            s(:send,
              s(:lvar, :opts), :[],
              s(:sym, :timeout)),
            s(:block_pass,
              s(:lvar, :block))))),
      s(:def, :connect,
        s(:args,
          s(:optarg, :opts,
            s(:hash)),
          s(:blockarg, :block)),
        s(:send, nil, :connect_internal,
          s(:nil),
          s(:send,
            s(:lvar, :opts), :[],
            s(:sym, :timeout)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :connect_to,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:if,
              s(:send,
                s(:const, nil, :Hash), :===,
                s(:send,
                  s(:lvar, :args), :last)),
              s(:send,
                s(:lvar, :args), :pop),
              s(:hash))),
          s(:lvasgn, :remote_addr_args,
            s(:lvar, :args)),
          s(:lvasgn, :remote_addrinfo,
            s(:send, nil, :family_addrinfo,
              s(:splat,
                s(:lvar, :remote_addr_args)))),
          s(:send,
            s(:lvar, :remote_addrinfo), :send,
            s(:sym, :connect_internal),
            s(:self),
            s(:send,
              s(:lvar, :opts), :[],
              s(:sym, :timeout)),
            s(:block_pass,
              s(:lvar, :block))))),
      s(:def, :bind,
        s(:args),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send,
              s(:const, nil, :Socket), :new,
              s(:send,
                s(:self), :pfamily),
              s(:send,
                s(:self), :socktype),
              s(:send,
                s(:self), :protocol))),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:if,
                  s(:send,
                    s(:self), :ipv6?),
                  s(:send,
                    s(:lvar, :sock), :ipv6only!), nil),
                s(:send,
                  s(:lvar, :sock), :setsockopt,
                  s(:sym, :SOCKET),
                  s(:sym, :REUSEADDR),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :sock), :bind,
                  s(:self))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:begin,
                  s(:send,
                    s(:lvar, :sock), :close),
                  s(:send, nil, :raise))), nil)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :sock)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :sock), :closed?), :!),
                  s(:send,
                    s(:lvar, :sock), :close), nil))),
            s(:lvar, :sock)))),
      s(:def, :listen,
        s(:args,
          s(:optarg, :backlog,
            s(:const,
              s(:const, nil, :Socket), :SOMAXCONN))),
        s(:begin,
          s(:lvasgn, :sock,
            s(:send,
              s(:const, nil, :Socket), :new,
              s(:send,
                s(:self), :pfamily),
              s(:send,
                s(:self), :socktype),
              s(:send,
                s(:self), :protocol))),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:if,
                  s(:send,
                    s(:self), :ipv6?),
                  s(:send,
                    s(:lvar, :sock), :ipv6only!), nil),
                s(:send,
                  s(:lvar, :sock), :setsockopt,
                  s(:sym, :SOCKET),
                  s(:sym, :REUSEADDR),
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :sock), :bind,
                  s(:self)),
                s(:send,
                  s(:lvar, :sock), :listen,
                  s(:lvar, :backlog))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:begin,
                  s(:send,
                    s(:lvar, :sock), :close),
                  s(:send, nil, :raise))), nil)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :sock)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :sock), :closed?), :!),
                  s(:send,
                    s(:lvar, :sock), :close), nil))),
            s(:lvar, :sock)))),
      s(:defs,
        s(:self), :foreach,
        s(:args,
          s(:arg, :nodename),
          s(:arg, :service),
          s(:optarg, :family,
            s(:nil)),
          s(:optarg, :socktype,
            s(:nil)),
          s(:optarg, :protocol,
            s(:nil)),
          s(:optarg, :flags,
            s(:nil)),
          s(:blockarg, :block)),
        s(:send,
          s(:send,
            s(:const, nil, :Addrinfo), :getaddrinfo,
            s(:lvar, :nodename),
            s(:lvar, :service),
            s(:lvar, :family),
            s(:lvar, :socktype),
            s(:lvar, :protocol),
            s(:lvar, :flags)), :each,
          s(:block_pass,
            s(:lvar, :block)))))),
  s(:class,
    s(:const, nil, :BasicSocket),
    s(:const, nil, :IO),
    s(:begin,
      s(:def, :connect_address,
        s(:args),
        s(:begin,
          s(:lvasgn, :addr,
            s(:send, nil, :local_address)),
          s(:lvasgn, :afamily,
            s(:send,
              s(:lvar, :addr), :afamily)),
          s(:if,
            s(:send,
              s(:lvar, :afamily), :==,
              s(:const,
                s(:const, nil, :Socket), :AF_INET)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :addr), :ip_port), :==,
                  s(:int, 0)),
                s(:send, nil, :raise,
                  s(:const, nil, :SocketError),
                  s(:str, "unbound IPv4 socket")), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :addr), :ip_address), :==,
                  s(:str, "0.0.0.0")),
                s(:lvasgn, :addr,
                  s(:send,
                    s(:const, nil, :Addrinfo), :new,
                    s(:array,
                      s(:str, "AF_INET"),
                      s(:send,
                        s(:lvar, :addr), :ip_port),
                      s(:nil),
                      s(:str, "127.0.0.1")),
                    s(:send,
                      s(:lvar, :addr), :pfamily),
                    s(:send,
                      s(:lvar, :addr), :socktype),
                    s(:send,
                      s(:lvar, :addr), :protocol))), nil)),
            s(:if,
              s(:and,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET6)),
                s(:send,
                  s(:lvar, :afamily), :==,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET6))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :addr), :ip_port), :==,
                    s(:int, 0)),
                  s(:send, nil, :raise,
                    s(:const, nil, :SocketError),
                    s(:str, "unbound IPv6 socket")), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :addr), :ip_address), :==,
                    s(:str, "::")),
                  s(:lvasgn, :addr,
                    s(:send,
                      s(:const, nil, :Addrinfo), :new,
                      s(:array,
                        s(:str, "AF_INET6"),
                        s(:send,
                          s(:lvar, :addr), :ip_port),
                        s(:nil),
                        s(:str, "::1")),
                      s(:send,
                        s(:lvar, :addr), :pfamily),
                      s(:send,
                        s(:lvar, :addr), :socktype),
                      s(:send,
                        s(:lvar, :addr), :protocol))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :addr), :ip_address), :==,
                      s(:str, "0.0.0.0")),
                    s(:lvasgn, :addr,
                      s(:send,
                        s(:const, nil, :Addrinfo), :new,
                        s(:array,
                          s(:str, "AF_INET6"),
                          s(:send,
                            s(:lvar, :addr), :ip_port),
                          s(:nil),
                          s(:str, "::1")),
                        s(:send,
                          s(:lvar, :addr), :pfamily),
                        s(:send,
                          s(:lvar, :addr), :socktype),
                        s(:send,
                          s(:lvar, :addr), :protocol))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :addr), :ip_address), :==,
                        s(:str, "::ffff:0.0.0.0")),
                      s(:lvasgn, :addr,
                        s(:send,
                          s(:const, nil, :Addrinfo), :new,
                          s(:array,
                            s(:str, "AF_INET6"),
                            s(:send,
                              s(:lvar, :addr), :ip_port),
                            s(:nil),
                            s(:str, "::1")),
                          s(:send,
                            s(:lvar, :addr), :pfamily),
                          s(:send,
                            s(:lvar, :addr), :socktype),
                          s(:send,
                            s(:lvar, :addr), :protocol))), nil)))),
              s(:if,
                s(:and,
                  s(:defined?,
                    s(:const,
                      s(:const, nil, :Socket), :AF_UNIX)),
                  s(:send,
                    s(:lvar, :afamily), :==,
                    s(:const,
                      s(:const, nil, :Socket), :AF_UNIX))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :addr), :unix_path), :==,
                    s(:str, "")),
                  s(:send, nil, :raise,
                    s(:const, nil, :SocketError),
                    s(:str, "unbound Unix socket")), nil), nil))),
          s(:lvar, :addr))),
      s(:def, :sendmsg,
        s(:args,
          s(:arg, :mesg),
          s(:optarg, :flags,
            s(:int, 0)),
          s(:optarg, :dest_sockaddr,
            s(:nil)),
          s(:restarg, :controls)),
        s(:send, nil, :__sendmsg,
          s(:lvar, :mesg),
          s(:lvar, :flags),
          s(:lvar, :dest_sockaddr),
          s(:lvar, :controls))),
      s(:def, :sendmsg_nonblock,
        s(:args,
          s(:arg, :mesg),
          s(:optarg, :flags,
            s(:int, 0)),
          s(:optarg, :dest_sockaddr,
            s(:nil)),
          s(:restarg, :controls),
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__sendmsg_nonblock,
          s(:lvar, :mesg),
          s(:lvar, :flags),
          s(:lvar, :dest_sockaddr),
          s(:lvar, :controls),
          s(:lvar, :exception))),
      s(:def, :recv_nonblock,
        s(:args,
          s(:arg, :len),
          s(:optarg, :flag,
            s(:int, 0)),
          s(:optarg, :str,
            s(:nil)),
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__recv_nonblock,
          s(:lvar, :len),
          s(:lvar, :flag),
          s(:lvar, :str),
          s(:lvar, :exception))),
      s(:def, :recvmsg,
        s(:args,
          s(:optarg, :dlen,
            s(:nil)),
          s(:optarg, :flags,
            s(:int, 0)),
          s(:optarg, :clen,
            s(:nil)),
          s(:kwoptarg, :scm_rights,
            s(:false))),
        s(:send, nil, :__recvmsg,
          s(:lvar, :dlen),
          s(:lvar, :flags),
          s(:lvar, :clen),
          s(:lvar, :scm_rights))),
      s(:def, :recvmsg_nonblock,
        s(:args,
          s(:optarg, :dlen,
            s(:nil)),
          s(:optarg, :flags,
            s(:int, 0)),
          s(:optarg, :clen,
            s(:nil)),
          s(:kwoptarg, :scm_rights,
            s(:false)),
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__recvmsg_nonblock,
          s(:lvar, :dlen),
          s(:lvar, :flags),
          s(:lvar, :clen),
          s(:lvar, :scm_rights),
          s(:lvar, :exception))))),
  s(:class,
    s(:const, nil, :Socket),
    s(:const, nil, :BasicSocket),
    s(:begin,
      s(:def, :ipv6only!,
        s(:args),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const, nil, :Socket), :IPV6_V6ONLY)),
          s(:send,
            s(:self), :setsockopt,
            s(:sym, :IPV6),
            s(:sym, :V6ONLY),
            s(:int, 1)), nil)),
      s(:def, :recvfrom_nonblock,
        s(:args,
          s(:arg, :len),
          s(:optarg, :flag,
            s(:int, 0)),
          s(:optarg, :str,
            s(:nil)),
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__recvfrom_nonblock,
          s(:lvar, :len),
          s(:lvar, :flag),
          s(:lvar, :str),
          s(:lvar, :exception))),
      s(:def, :accept_nonblock,
        s(:args,
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__accept_nonblock,
          s(:lvar, :exception))),
      s(:defs,
        s(:self), :tcp,
        s(:args,
          s(:arg, :host),
          s(:arg, :port),
          s(:restarg, :rest)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:if,
              s(:send,
                s(:const, nil, :Hash), :===,
                s(:send,
                  s(:lvar, :rest), :last)),
              s(:send,
                s(:lvar, :rest), :pop),
              s(:hash))),
          s(:if,
            s(:send,
              s(:int, 2), :<,
              s(:send,
                s(:lvar, :rest), :length)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "wrong number of arguments ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :rest), :length)),
                s(:str, " for 2)"))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :local_host),
              s(:lvasgn, :local_port)),
            s(:lvar, :rest)),
          s(:lvasgn, :last_error,
            s(:nil)),
          s(:lvasgn, :ret,
            s(:nil)),
          s(:lvasgn, :connect_timeout,
            s(:send,
              s(:lvar, :opts), :[],
              s(:sym, :connect_timeout))),
          s(:lvasgn, :local_addr_list,
            s(:nil)),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :local_host), :!=,
                s(:nil)),
              s(:send,
                s(:lvar, :local_port), :!=,
                s(:nil))),
            s(:lvasgn, :local_addr_list,
              s(:send,
                s(:const, nil, :Addrinfo), :getaddrinfo,
                s(:lvar, :local_host),
                s(:lvar, :local_port),
                s(:nil),
                s(:sym, :STREAM),
                s(:nil))), nil),
          s(:block,
            s(:send,
              s(:const, nil, :Addrinfo), :foreach,
              s(:lvar, :host),
              s(:lvar, :port),
              s(:nil),
              s(:sym, :STREAM)),
            s(:args,
              s(:arg, :ai)),
            s(:begin,
              s(:if,
                s(:lvar, :local_addr_list),
                s(:begin,
                  s(:lvasgn, :local_addr,
                    s(:block,
                      s(:send,
                        s(:lvar, :local_addr_list), :find),
                      s(:args,
                        s(:arg, :local_ai)),
                      s(:send,
                        s(:send,
                          s(:lvar, :local_ai), :afamily), :==,
                        s(:send,
                          s(:lvar, :ai), :afamily)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :local_addr), :!),
                    s(:next), nil)),
                s(:lvasgn, :local_addr,
                  s(:nil))),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :sock,
                    s(:if,
                      s(:lvar, :local_addr),
                      s(:send,
                        s(:lvar, :ai), :connect_from,
                        s(:lvar, :local_addr),
                        s(:hash,
                          s(:pair,
                            s(:sym, :timeout),
                            s(:lvar, :connect_timeout)))),
                      s(:send,
                        s(:lvar, :ai), :connect,
                        s(:hash,
                          s(:pair,
                            s(:sym, :timeout),
                            s(:lvar, :connect_timeout)))))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemCallError)), nil,
                    s(:begin,
                      s(:lvasgn, :last_error,
                        s(:gvar, :$!)),
                      s(:next))), nil)),
              s(:lvasgn, :ret,
                s(:lvar, :sock)),
              s(:break))),
          s(:if,
            s(:send,
              s(:lvar, :ret), :!),
            s(:if,
              s(:lvar, :last_error),
              s(:send, nil, :raise,
                s(:lvar, :last_error)),
              s(:send, nil, :raise,
                s(:const, nil, :SocketError),
                s(:str, "no appropriate local address"))), nil),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :ret)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :ret), :closed?), :!),
                  s(:send,
                    s(:lvar, :ret), :close), nil))),
            s(:lvar, :ret)))),
      s(:defs,
        s(:self), :ip_sockets_port0,
        s(:args,
          s(:arg, :ai_list),
          s(:arg, :reuseaddr)),
        s(:begin,
          s(:lvasgn, :sockets,
            s(:array)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send,
                  s(:lvar, :sockets), :clear),
                s(:lvasgn, :port,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :ai_list), :each),
                  s(:args,
                    s(:arg, :ai)),
                  s(:begin,
                    s(:kwbegin,
                      s(:rescue,
                        s(:lvasgn, :s,
                          s(:send,
                            s(:const, nil, :Socket), :new,
                            s(:send,
                              s(:lvar, :ai), :pfamily),
                            s(:send,
                              s(:lvar, :ai), :socktype),
                            s(:send,
                              s(:lvar, :ai), :protocol))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :SystemCallError)), nil,
                          s(:next)), nil)),
                    s(:send,
                      s(:lvar, :sockets), :<<,
                      s(:lvar, :s)),
                    s(:if,
                      s(:send,
                        s(:lvar, :ai), :ipv6?),
                      s(:send,
                        s(:lvar, :s), :ipv6only!), nil),
                    s(:if,
                      s(:lvar, :reuseaddr),
                      s(:send,
                        s(:lvar, :s), :setsockopt,
                        s(:sym, :SOCKET),
                        s(:sym, :REUSEADDR),
                        s(:int, 1)), nil),
                    s(:if,
                      s(:send,
                        s(:lvar, :port), :!),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :bind,
                          s(:lvar, :ai)),
                        s(:lvasgn, :port,
                          s(:send,
                            s(:send,
                              s(:lvar, :s), :local_address), :ip_port))),
                      s(:send,
                        s(:lvar, :s), :bind,
                        s(:send,
                          s(:lvar, :ai), :family_addrinfo,
                          s(:send,
                            s(:lvar, :ai), :ip_address),
                          s(:lvar, :port))))))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EADDRINUSE)), nil,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :sockets), :each),
                    s(:args,
                      s(:arg, :s)),
                    s(:send,
                      s(:lvar, :s), :close)),
                  s(:retry))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :sockets), :each),
                    s(:args,
                      s(:arg, :s)),
                    s(:send,
                      s(:lvar, :s), :close)),
                  s(:send, nil, :raise))), nil)),
          s(:lvar, :sockets))),
      s(:sclass,
        s(:self),
        s(:send, nil, :private,
          s(:sym, :ip_sockets_port0))),
      s(:defs,
        s(:self), :tcp_server_sockets_port0,
        s(:args,
          s(:arg, :host)),
        s(:begin,
          s(:lvasgn, :ai_list,
            s(:send,
              s(:const, nil, :Addrinfo), :getaddrinfo,
              s(:lvar, :host),
              s(:int, 0),
              s(:nil),
              s(:sym, :STREAM),
              s(:nil),
              s(:const,
                s(:const, nil, :Socket), :AI_PASSIVE))),
          s(:lvasgn, :sockets,
            s(:send, nil, :ip_sockets_port0,
              s(:lvar, :ai_list),
              s(:true))),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send,
                  s(:lvar, :sockets), :each),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :listen,
                  s(:const,
                    s(:const, nil, :Socket), :SOMAXCONN))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :sockets), :each),
                    s(:args,
                      s(:arg, :s)),
                    s(:send,
                      s(:lvar, :s), :close)),
                  s(:send, nil, :raise))), nil)),
          s(:lvar, :sockets))),
      s(:sclass,
        s(:self),
        s(:send, nil, :private,
          s(:sym, :tcp_server_sockets_port0))),
      s(:defs,
        s(:self), :tcp_server_sockets,
        s(:args,
          s(:optarg, :host,
            s(:nil)),
          s(:arg, :port)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :port), :==,
              s(:int, 0)),
            s(:lvasgn, :sockets,
              s(:send, nil, :tcp_server_sockets_port0,
                s(:lvar, :host))),
            s(:begin,
              s(:lvasgn, :last_error,
                s(:nil)),
              s(:lvasgn, :sockets,
                s(:array)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Addrinfo), :foreach,
                        s(:lvar, :host),
                        s(:lvar, :port),
                        s(:nil),
                        s(:sym, :STREAM),
                        s(:nil),
                        s(:const,
                          s(:const, nil, :Socket), :AI_PASSIVE)),
                      s(:args,
                        s(:arg, :ai)),
                      s(:begin,
                        s(:kwbegin,
                          s(:rescue,
                            s(:lvasgn, :s,
                              s(:send,
                                s(:lvar, :ai), :listen)),
                            s(:resbody,
                              s(:array,
                                s(:const, nil, :SystemCallError)), nil,
                              s(:begin,
                                s(:lvasgn, :last_error,
                                  s(:gvar, :$!)),
                                s(:next))), nil)),
                        s(:send,
                          s(:lvar, :sockets), :<<,
                          s(:lvar, :s)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :sockets), :empty?),
                      s(:send, nil, :raise,
                        s(:lvar, :last_error)), nil)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)), nil,
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:lvar, :sockets), :each),
                        s(:args,
                          s(:arg, :s)),
                        s(:send,
                          s(:lvar, :s), :close)),
                      s(:send, nil, :raise))), nil)))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :sockets)),
                s(:block,
                  s(:send,
                    s(:lvar, :sockets), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :closed?), :!),
                    s(:send,
                      s(:lvar, :s), :close), nil)))),
            s(:lvar, :sockets)))),
      s(:defs,
        s(:self), :accept_loop,
        s(:args,
          s(:restarg, :sockets)),
        s(:begin,
          s(:send,
            s(:lvar, :sockets), :flatten!,
            s(:int, 1)),
          s(:if,
            s(:send,
              s(:lvar, :sockets), :empty?),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "no sockets")), nil),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :readable),
                  s(:lvasgn, :_),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:lvar, :sockets))),
              s(:block,
                s(:send,
                  s(:lvar, :readable), :each),
                s(:args,
                  s(:arg, :r)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :sock),
                      s(:lvasgn, :addr)),
                    s(:send,
                      s(:lvar, :r), :accept_nonblock,
                      s(:hash,
                        s(:pair,
                          s(:sym, :exception),
                          s(:false))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :sock), :==,
                      s(:sym, :wait_readable)),
                    s(:next), nil),
                  s(:yield,
                    s(:lvar, :sock),
                    s(:lvar, :addr)))))))),
      s(:defs,
        s(:self), :tcp_server_loop,
        s(:args,
          s(:optarg, :host,
            s(:nil)),
          s(:arg, :port),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :tcp_server_sockets,
            s(:lvar, :host),
            s(:lvar, :port)),
          s(:args,
            s(:arg, :sockets)),
          s(:send, nil, :accept_loop,
            s(:lvar, :sockets),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:defs,
        s(:self), :udp_server_sockets,
        s(:args,
          s(:optarg, :host,
            s(:nil)),
          s(:arg, :port)),
        s(:begin,
          s(:lvasgn, :last_error,
            s(:nil)),
          s(:lvasgn, :sockets,
            s(:array)),
          s(:lvasgn, :ipv6_recvpktinfo,
            s(:nil)),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Socket), :AncillaryData)),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :Socket), :IPV6_RECVPKTINFO)),
              s(:lvasgn, :ipv6_recvpktinfo,
                s(:const,
                  s(:const, nil, :Socket), :IPV6_RECVPKTINFO)),
              s(:if,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :Socket), :IPV6_PKTINFO)),
                s(:lvasgn, :ipv6_recvpktinfo,
                  s(:const,
                    s(:const, nil, :Socket), :IPV6_PKTINFO)), nil)), nil),
          s(:lvasgn, :local_addrs,
            s(:send,
              s(:const, nil, :Socket), :ip_address_list)),
          s(:lvasgn, :ip_list,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Addrinfo), :foreach,
              s(:lvar, :host),
              s(:lvar, :port),
              s(:nil),
              s(:sym, :DGRAM),
              s(:nil),
              s(:const,
                s(:const, nil, :Socket), :AI_PASSIVE)),
            s(:args,
              s(:arg, :ai)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :ai), :ipv4?),
                s(:send,
                  s(:send,
                    s(:lvar, :ai), :ip_address), :==,
                  s(:str, "0.0.0.0"))),
              s(:block,
                s(:send,
                  s(:lvar, :local_addrs), :each),
                s(:args,
                  s(:arg, :a)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :ipv4?), :!),
                    s(:next), nil),
                  s(:send,
                    s(:lvar, :ip_list), :<<,
                    s(:send,
                      s(:const, nil, :Addrinfo), :new,
                      s(:send,
                        s(:lvar, :a), :to_sockaddr),
                      s(:sym, :INET),
                      s(:sym, :DGRAM),
                      s(:int, 0))))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :ai), :ipv6?),
                    s(:send,
                      s(:send,
                        s(:lvar, :ai), :ip_address), :==,
                      s(:str, "::"))),
                  s(:send,
                    s(:lvar, :ipv6_recvpktinfo), :!)),
                s(:block,
                  s(:send,
                    s(:lvar, :local_addrs), :each),
                  s(:args,
                    s(:arg, :a)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :a), :ipv6?), :!),
                      s(:next), nil),
                    s(:send,
                      s(:lvar, :ip_list), :<<,
                      s(:send,
                        s(:const, nil, :Addrinfo), :new,
                        s(:send,
                          s(:lvar, :a), :to_sockaddr),
                        s(:sym, :INET6),
                        s(:sym, :DGRAM),
                        s(:int, 0))))),
                s(:send,
                  s(:lvar, :ip_list), :<<,
                  s(:lvar, :ai))))),
          s(:if,
            s(:send,
              s(:lvar, :port), :==,
              s(:int, 0)),
            s(:lvasgn, :sockets,
              s(:send, nil, :ip_sockets_port0,
                s(:lvar, :ip_list),
                s(:false))),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :ip_list), :each),
                s(:args,
                  s(:arg, :ip)),
                s(:begin,
                  s(:lvasgn, :ai,
                    s(:send,
                      s(:const, nil, :Addrinfo), :udp,
                      s(:send,
                        s(:lvar, :ip), :ip_address),
                      s(:lvar, :port))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :s,
                        s(:send,
                          s(:lvar, :ai), :bind)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :SystemCallError)), nil,
                        s(:begin,
                          s(:lvasgn, :last_error,
                            s(:gvar, :$!)),
                          s(:next))), nil)),
                  s(:send,
                    s(:lvar, :sockets), :<<,
                    s(:lvar, :s)))),
              s(:if,
                s(:send,
                  s(:lvar, :sockets), :empty?),
                s(:send, nil, :raise,
                  s(:lvar, :last_error)), nil))),
          s(:block,
            s(:send,
              s(:lvar, :sockets), :each),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :ai,
                s(:send,
                  s(:lvar, :s), :local_address)),
              s(:if,
                s(:and,
                  s(:and,
                    s(:lvar, :ipv6_recvpktinfo),
                    s(:send,
                      s(:lvar, :ai), :ipv6?)),
                  s(:send,
                    s(:send,
                      s(:lvar, :ai), :ip_address), :==,
                    s(:str, "::"))),
                s(:send,
                  s(:lvar, :s), :setsockopt,
                  s(:sym, :IPV6),
                  s(:lvar, :ipv6_recvpktinfo),
                  s(:int, 1)), nil))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :sockets)),
                s(:if,
                  s(:lvar, :sockets),
                  s(:block,
                    s(:send,
                      s(:lvar, :sockets), :each),
                    s(:args,
                      s(:arg, :s)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :closed?), :!),
                      s(:send,
                        s(:lvar, :s), :close), nil)), nil))),
            s(:lvar, :sockets)))),
      s(:defs,
        s(:self), :udp_server_recv,
        s(:args,
          s(:arg, :sockets)),
        s(:block,
          s(:send,
            s(:lvar, :sockets), :each),
          s(:args,
            s(:arg, :r)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :msg),
                s(:lvasgn, :sender_addrinfo),
                s(:lvasgn, :_),
                s(:splat,
                  s(:lvasgn, :controls))),
              s(:send,
                s(:lvar, :r), :recvmsg_nonblock,
                s(:hash,
                  s(:pair,
                    s(:sym, :exception),
                    s(:false))))),
            s(:if,
              s(:send,
                s(:lvar, :msg), :==,
                s(:sym, :wait_readable)),
              s(:next), nil),
            s(:lvasgn, :ai,
              s(:send,
                s(:lvar, :r), :local_address)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :ai), :ipv6?),
                s(:lvasgn, :pktinfo,
                  s(:block,
                    s(:send,
                      s(:lvar, :controls), :find),
                    s(:args,
                      s(:arg, :c)),
                    s(:send,
                      s(:lvar, :c), :cmsg_is?,
                      s(:sym, :IPV6),
                      s(:sym, :PKTINFO))))),
              s(:begin,
                s(:lvasgn, :ai,
                  s(:send,
                    s(:const, nil, :Addrinfo), :udp,
                    s(:send,
                      s(:send,
                        s(:lvar, :pktinfo), :ipv6_pktinfo_addr), :ip_address),
                    s(:send,
                      s(:lvar, :ai), :ip_port))),
                s(:yield,
                  s(:lvar, :msg),
                  s(:block,
                    s(:send,
                      s(:const, nil, :UDPSource), :new,
                      s(:lvar, :sender_addrinfo),
                      s(:lvar, :ai)),
                    s(:args,
                      s(:arg, :reply_msg)),
                    s(:send,
                      s(:lvar, :r), :sendmsg,
                      s(:lvar, :reply_msg),
                      s(:int, 0),
                      s(:lvar, :sender_addrinfo),
                      s(:lvar, :pktinfo))))),
              s(:yield,
                s(:lvar, :msg),
                s(:block,
                  s(:send,
                    s(:const, nil, :UDPSource), :new,
                    s(:lvar, :sender_addrinfo),
                    s(:lvar, :ai)),
                  s(:args,
                    s(:arg, :reply_msg)),
                  s(:send,
                    s(:lvar, :r), :send,
                    s(:lvar, :reply_msg),
                    s(:int, 0),
                    s(:lvar, :sender_addrinfo)))))))),
      s(:defs,
        s(:self), :udp_server_loop_on,
        s(:args,
          s(:arg, :sockets),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :loop),
          s(:args),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :readable),
                s(:lvasgn, :_),
                s(:lvasgn, :_)),
              s(:send,
                s(:const, nil, :IO), :select,
                s(:lvar, :sockets))),
            s(:send, nil, :udp_server_recv,
              s(:lvar, :readable),
              s(:block_pass,
                s(:lvar, :b)))))),
      s(:defs,
        s(:self), :udp_server_loop,
        s(:args,
          s(:optarg, :host,
            s(:nil)),
          s(:arg, :port),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :udp_server_sockets,
            s(:lvar, :host),
            s(:lvar, :port)),
          s(:args,
            s(:arg, :sockets)),
          s(:send, nil, :udp_server_loop_on,
            s(:lvar, :sockets),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:class,
        s(:const, nil, :UDPSource), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :remote_address),
              s(:arg, :local_address),
              s(:blockarg, :reply_proc)),
            s(:begin,
              s(:ivasgn, :@remote_address,
                s(:lvar, :remote_address)),
              s(:ivasgn, :@local_address,
                s(:lvar, :local_address)),
              s(:ivasgn, :@reply_proc,
                s(:lvar, :reply_proc)))),
          s(:send, nil, :attr_reader,
            s(:sym, :remote_address)),
          s(:send, nil, :attr_reader,
            s(:sym, :local_address)),
          s(:def, :inspect,
            s(:args),
            s(:send,
              s(:dstr,
                s(:str, "#<"),
                s(:begin,
                  s(:send,
                    s(:self), :class)),
                s(:str, ": "),
                s(:begin,
                  s(:send,
                    s(:ivar, :@remote_address), :inspect_sockaddr)),
                s(:str, " to "),
                s(:begin,
                  s(:send,
                    s(:ivar, :@local_address), :inspect_sockaddr)),
                s(:str, ">")), :dup)),
          s(:def, :reply,
            s(:args,
              s(:arg, :msg)),
            s(:send,
              s(:ivar, :@reply_proc), :call,
              s(:lvar, :msg))))),
      s(:defs,
        s(:self), :unix,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :addr,
            s(:send,
              s(:const, nil, :Addrinfo), :unix,
              s(:lvar, :path))),
          s(:lvasgn, :sock,
            s(:send,
              s(:lvar, :addr), :connect)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :sock)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :sock), :closed?), :!),
                  s(:send,
                    s(:lvar, :sock), :close), nil))),
            s(:lvar, :sock)))),
      s(:defs,
        s(:self), :unix_server_socket,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :unix_socket_abstract_name?,
                s(:lvar, :path)), :!),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :st,
                    s(:send,
                      s(:const, nil, :File), :lstat,
                      s(:lvar, :path))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :ENOENT)), nil, nil), nil)),
              s(:if,
                s(:and,
                  s(:csend,
                    s(:lvar, :st), :socket?),
                  s(:send,
                    s(:lvar, :st), :owned?)),
                s(:send,
                  s(:const, nil, :File), :unlink,
                  s(:lvar, :path)), nil)), nil),
          s(:lvasgn, :s,
            s(:send,
              s(:send,
                s(:const, nil, :Addrinfo), :unix,
                s(:lvar, :path)), :listen)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :s)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :closed?), :!),
                    s(:send,
                      s(:lvar, :s), :close), nil),
                  s(:if,
                    s(:send,
                      s(:send, nil, :unix_socket_abstract_name?,
                        s(:lvar, :path)), :!),
                    s(:send,
                      s(:const, nil, :File), :unlink,
                      s(:lvar, :path)), nil)))),
            s(:lvar, :s)))),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :private),
          s(:def, :unix_socket_abstract_name?,
            s(:args,
              s(:arg, :path)),
            s(:and,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "linux"),
                  s(:regopt)),
                s(:const, nil, :RUBY_PLATFORM)),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\0|\\z)"),
                  s(:regopt)),
                s(:lvar, :path)))))),
      s(:defs,
        s(:self), :unix_server_loop,
        s(:args,
          s(:arg, :path),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :unix_server_socket,
            s(:lvar, :path)),
          s(:args,
            s(:arg, :serv)),
          s(:send, nil, :accept_loop,
            s(:lvar, :serv),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :connect_nonblock,
        s(:args,
          s(:arg, :addr),
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__connect_nonblock,
          s(:lvar, :addr),
          s(:lvar, :exception))))),
  s(:class,
    s(:const, nil, :UDPSocket),
    s(:const, nil, :IPSocket),
    s(:def, :recvfrom_nonblock,
      s(:args,
        s(:arg, :len),
        s(:optarg, :flag,
          s(:int, 0)),
        s(:optarg, :outbuf,
          s(:nil)),
        s(:kwoptarg, :exception,
          s(:true))),
      s(:send, nil, :__recvfrom_nonblock,
        s(:lvar, :len),
        s(:lvar, :flag),
        s(:lvar, :outbuf),
        s(:lvar, :exception)))),
  s(:class,
    s(:const, nil, :TCPServer),
    s(:const, nil, :TCPSocket),
    s(:def, :accept_nonblock,
      s(:args,
        s(:kwoptarg, :exception,
          s(:true))),
      s(:send, nil, :__accept_nonblock,
        s(:lvar, :exception)))),
  s(:if,
    s(:defined?,
      s(:const, nil, :UNIXSocket)),
    s(:class,
      s(:const, nil, :UNIXServer),
      s(:const, nil, :UNIXSocket),
      s(:def, :accept_nonblock,
        s(:args,
          s(:kwoptarg, :exception,
            s(:true))),
        s(:send, nil, :__accept_nonblock,
          s(:lvar, :exception)))), nil))
