s(:begin,
  s(:send, nil, :require,
    s(:str, "bigdecimal/ludcmp")),
  s(:send, nil, :require,
    s(:str, "bigdecimal/jacobian")),
  s(:module,
    s(:const, nil, :Newton),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :LUSolve)),
      s(:send, nil, :include,
        s(:const, nil, :Jacobian)),
      s(:send, nil, :module_function),
      s(:def, :norm,
        s(:args,
          s(:arg, :fv),
          s(:optarg, :zero,
            s(:float, 0.0))),
        s(:begin,
          s(:lvasgn, :s,
            s(:lvar, :zero)),
          s(:lvasgn, :n,
            s(:send,
              s(:lvar, :fv), :size)),
          s(:for,
            s(:lvasgn, :i),
            s(:erange,
              s(:int, 0),
              s(:lvar, :n)),
            s(:op_asgn,
              s(:lvasgn, :s), :+,
              s(:send,
                s(:send,
                  s(:lvar, :fv), :[],
                  s(:lvar, :i)), :*,
                s(:send,
                  s(:lvar, :fv), :[],
                  s(:lvar, :i))))),
          s(:lvar, :s))),
      s(:def, :nlsolve,
        s(:args,
          s(:arg, :f),
          s(:arg, :x)),
        s(:begin,
          s(:lvasgn, :nRetry,
            s(:int, 0)),
          s(:lvasgn, :n,
            s(:send,
              s(:lvar, :x), :size)),
          s(:lvasgn, :f0,
            s(:send,
              s(:lvar, :f), :values,
              s(:lvar, :x))),
          s(:lvasgn, :zero,
            s(:send,
              s(:lvar, :f), :zero)),
          s(:lvasgn, :one,
            s(:send,
              s(:lvar, :f), :one)),
          s(:lvasgn, :two,
            s(:send,
              s(:lvar, :f), :two)),
          s(:lvasgn, :p5,
            s(:send,
              s(:lvar, :one), :/,
              s(:lvar, :two))),
          s(:lvasgn, :d,
            s(:send, nil, :norm,
              s(:lvar, :f0),
              s(:lvar, :zero))),
          s(:lvasgn, :minfact,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :f), :ten), :*,
                s(:send,
                  s(:lvar, :f), :ten)), :*,
              s(:send,
                s(:lvar, :f), :ten))),
          s(:lvasgn, :minfact,
            s(:send,
              s(:lvar, :one), :/,
              s(:lvar, :minfact))),
          s(:lvasgn, :e,
            s(:send,
              s(:lvar, :f), :eps)),
          s(:while,
            s(:send,
              s(:lvar, :d), :>=,
              s(:lvar, :e)),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :nRetry), :+,
                s(:int, 1)),
              s(:lvasgn, :dfdx,
                s(:send, nil, :jacobian,
                  s(:lvar, :f),
                  s(:lvar, :f0),
                  s(:lvar, :x))),
              s(:lvasgn, :dx,
                s(:send, nil, :lusolve,
                  s(:lvar, :dfdx),
                  s(:lvar, :f0),
                  s(:send, nil, :ludecomp,
                    s(:lvar, :dfdx),
                    s(:lvar, :n),
                    s(:lvar, :zero),
                    s(:lvar, :one)),
                  s(:lvar, :zero))),
              s(:lvasgn, :fact,
                s(:lvar, :two)),
              s(:lvasgn, :xs,
                s(:send,
                  s(:lvar, :x), :dup)),
              s(:while_post,
                s(:begin,
                  s(:send,
                    s(:lvar, :dn), :>=,
                    s(:lvar, :d))),
                s(:kwbegin,
                  s(:op_asgn,
                    s(:lvasgn, :fact), :*,
                    s(:lvar, :p5)),
                  s(:if,
                    s(:send,
                      s(:lvar, :fact), :<,
                      s(:lvar, :minfact)),
                    s(:send, nil, :raise,
                      s(:str, "Failed to reduce function values.")), nil),
                  s(:for,
                    s(:lvasgn, :i),
                    s(:erange,
                      s(:int, 0),
                      s(:lvar, :n)),
                    s(:send,
                      s(:lvar, :x), :[]=,
                      s(:lvar, :i),
                      s(:send,
                        s(:send,
                          s(:lvar, :xs), :[],
                          s(:lvar, :i)), :-,
                        s(:send,
                          s(:send,
                            s(:lvar, :dx), :[],
                            s(:lvar, :i)), :*,
                          s(:lvar, :fact))))),
                  s(:lvasgn, :f0,
                    s(:send,
                      s(:lvar, :f), :values,
                      s(:lvar, :x))),
                  s(:lvasgn, :dn,
                    s(:send, nil, :norm,
                      s(:lvar, :f0),
                      s(:lvar, :zero))))),
              s(:lvasgn, :d,
                s(:lvar, :dn)))),
          s(:lvar, :nRetry))))))
