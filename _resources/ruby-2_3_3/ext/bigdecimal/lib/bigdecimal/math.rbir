s(:begin,
  s(:send, nil, :require,
    s(:str, "bigdecimal")),
  s(:module,
    s(:const, nil, :BigMath),
    s(:begin,
      s(:send, nil, :module_function),
      s(:def, :sqrt,
        s(:args,
          s(:arg, :x),
          s(:arg, :prec)),
        s(:send,
          s(:lvar, :x), :sqrt,
          s(:lvar, :prec))),
      s(:def, :sin,
        s(:args,
          s(:arg, :x),
          s(:arg, :prec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :prec), :<=,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Zero or negative precision for sin")), nil),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :x), :infinite?),
              s(:send,
                s(:lvar, :x), :nan?)),
            s(:return,
              s(:send, nil, :BigDecimal,
                s(:str, "NaN"))), nil),
          s(:lvasgn, :n,
            s(:send,
              s(:lvar, :prec), :+,
              s(:send,
                s(:const, nil, :BigDecimal), :double_fig))),
          s(:lvasgn, :one,
            s(:send, nil, :BigDecimal,
              s(:str, "1"))),
          s(:lvasgn, :two,
            s(:send, nil, :BigDecimal,
              s(:str, "2"))),
          s(:if,
            s(:lvasgn, :neg,
              s(:send,
                s(:lvar, :x), :<,
                s(:int, 0))),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :x), :-@)), nil),
          s(:if,
            s(:send,
              s(:lvar, :x), :>,
              s(:begin,
                s(:lvasgn, :twopi,
                  s(:send,
                    s(:lvar, :two), :*,
                    s(:send,
                      s(:const, nil, :BigMath), :PI,
                      s(:lvar, :prec)))))),
            s(:if,
              s(:send,
                s(:lvar, :x), :>,
                s(:int, 30)),
              s(:op_asgn,
                s(:lvasgn, :x), :%,
                s(:lvar, :twopi)),
              s(:while,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:lvar, :twopi)),
                s(:op_asgn,
                  s(:lvasgn, :x), :-,
                  s(:lvar, :twopi)))), nil),
          s(:lvasgn, :x1,
            s(:lvar, :x)),
          s(:lvasgn, :x2,
            s(:send,
              s(:lvar, :x), :mult,
              s(:lvar, :x),
              s(:lvar, :n))),
          s(:lvasgn, :sign,
            s(:int, 1)),
          s(:lvasgn, :y,
            s(:lvar, :x)),
          s(:lvasgn, :d,
            s(:lvar, :y)),
          s(:lvasgn, :i,
            s(:lvar, :one)),
          s(:lvasgn, :z,
            s(:lvar, :one)),
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :d), :nonzero?),
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :m,
                      s(:send,
                        s(:lvar, :n), :-,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :y), :exponent), :-,
                              s(:send,
                                s(:lvar, :d), :exponent))), :abs)))), :>,
                  s(:int, 0)))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :<,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)),
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)), nil),
              s(:lvasgn, :sign,
                s(:send,
                  s(:lvar, :sign), :-@)),
              s(:lvasgn, :x1,
                s(:send,
                  s(:lvar, :x2), :mult,
                  s(:lvar, :x1),
                  s(:lvar, :n))),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:lvar, :two)),
              s(:op_asgn,
                s(:lvasgn, :z), :*,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :i), :-,
                      s(:lvar, :one))), :*,
                  s(:lvar, :i))),
              s(:lvasgn, :d,
                s(:send,
                  s(:lvar, :sign), :*,
                  s(:send,
                    s(:lvar, :x1), :div,
                    s(:lvar, :z),
                    s(:lvar, :m)))),
              s(:op_asgn,
                s(:lvasgn, :y), :+,
                s(:lvar, :d)))),
          s(:if,
            s(:lvar, :neg),
            s(:send,
              s(:lvar, :y), :-@),
            s(:lvar, :y)))),
      s(:def, :cos,
        s(:args,
          s(:arg, :x),
          s(:arg, :prec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :prec), :<=,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Zero or negative precision for cos")), nil),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :x), :infinite?),
              s(:send,
                s(:lvar, :x), :nan?)),
            s(:return,
              s(:send, nil, :BigDecimal,
                s(:str, "NaN"))), nil),
          s(:lvasgn, :n,
            s(:send,
              s(:lvar, :prec), :+,
              s(:send,
                s(:const, nil, :BigDecimal), :double_fig))),
          s(:lvasgn, :one,
            s(:send, nil, :BigDecimal,
              s(:str, "1"))),
          s(:lvasgn, :two,
            s(:send, nil, :BigDecimal,
              s(:str, "2"))),
          s(:if,
            s(:send,
              s(:lvar, :x), :<,
              s(:int, 0)),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :x), :-@)), nil),
          s(:if,
            s(:send,
              s(:lvar, :x), :>,
              s(:begin,
                s(:lvasgn, :twopi,
                  s(:send,
                    s(:lvar, :two), :*,
                    s(:send,
                      s(:const, nil, :BigMath), :PI,
                      s(:lvar, :prec)))))),
            s(:if,
              s(:send,
                s(:lvar, :x), :>,
                s(:int, 30)),
              s(:op_asgn,
                s(:lvasgn, :x), :%,
                s(:lvar, :twopi)),
              s(:while,
                s(:send,
                  s(:lvar, :x), :>,
                  s(:lvar, :twopi)),
                s(:op_asgn,
                  s(:lvasgn, :x), :-,
                  s(:lvar, :twopi)))), nil),
          s(:lvasgn, :x1,
            s(:lvar, :one)),
          s(:lvasgn, :x2,
            s(:send,
              s(:lvar, :x), :mult,
              s(:lvar, :x),
              s(:lvar, :n))),
          s(:lvasgn, :sign,
            s(:int, 1)),
          s(:lvasgn, :y,
            s(:lvar, :one)),
          s(:lvasgn, :d,
            s(:lvar, :y)),
          s(:lvasgn, :i,
            s(:send, nil, :BigDecimal,
              s(:str, "0"))),
          s(:lvasgn, :z,
            s(:lvar, :one)),
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :d), :nonzero?),
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :m,
                      s(:send,
                        s(:lvar, :n), :-,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :y), :exponent), :-,
                              s(:send,
                                s(:lvar, :d), :exponent))), :abs)))), :>,
                  s(:int, 0)))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :<,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)),
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)), nil),
              s(:lvasgn, :sign,
                s(:send,
                  s(:lvar, :sign), :-@)),
              s(:lvasgn, :x1,
                s(:send,
                  s(:lvar, :x2), :mult,
                  s(:lvar, :x1),
                  s(:lvar, :n))),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:lvar, :two)),
              s(:op_asgn,
                s(:lvasgn, :z), :*,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :i), :-,
                      s(:lvar, :one))), :*,
                  s(:lvar, :i))),
              s(:lvasgn, :d,
                s(:send,
                  s(:lvar, :sign), :*,
                  s(:send,
                    s(:lvar, :x1), :div,
                    s(:lvar, :z),
                    s(:lvar, :m)))),
              s(:op_asgn,
                s(:lvasgn, :y), :+,
                s(:lvar, :d)))),
          s(:lvar, :y))),
      s(:def, :atan,
        s(:args,
          s(:arg, :x),
          s(:arg, :prec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :prec), :<=,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Zero or negative precision for atan")), nil),
          s(:if,
            s(:send,
              s(:lvar, :x), :nan?),
            s(:return,
              s(:send, nil, :BigDecimal,
                s(:str, "NaN"))), nil),
          s(:lvasgn, :pi,
            s(:send, nil, :PI,
              s(:lvar, :prec))),
          s(:if,
            s(:lvasgn, :neg,
              s(:send,
                s(:lvar, :x), :<,
                s(:int, 0))),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :x), :-@)), nil),
          s(:if,
            s(:send,
              s(:lvar, :x), :infinite?),
            s(:return,
              s(:send,
                s(:lvar, :pi), :div,
                s(:if,
                  s(:lvar, :neg),
                  s(:int, -2),
                  s(:int, 2)),
                s(:lvar, :prec))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :x), :round,
                s(:lvar, :prec)), :==,
              s(:int, 1)),
            s(:return,
              s(:send,
                s(:lvar, :pi), :/,
                s(:begin,
                  s(:if,
                    s(:lvar, :neg),
                    s(:int, -4),
                    s(:int, 4))))), nil),
          s(:if,
            s(:lvasgn, :inv,
              s(:send,
                s(:lvar, :x), :>,
                s(:int, 1))),
            s(:lvasgn, :x,
              s(:send,
                s(:send, nil, :BigDecimal,
                  s(:str, "1")), :div,
                s(:lvar, :x),
                s(:lvar, :prec))), nil),
          s(:if,
            s(:lvasgn, :dbl,
              s(:send,
                s(:lvar, :x), :>,
                s(:float, 0.5))),
            s(:lvasgn, :x,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:int, -1), :+,
                    s(:send, nil, :sqrt,
                      s(:send,
                        s(:int, 1), :+,
                        s(:send,
                          s(:lvar, :x), :**,
                          s(:int, 2))),
                      s(:lvar, :prec)))), :/,
                s(:lvar, :x))), nil),
          s(:lvasgn, :n,
            s(:send,
              s(:lvar, :prec), :+,
              s(:send,
                s(:const, nil, :BigDecimal), :double_fig))),
          s(:lvasgn, :y,
            s(:lvar, :x)),
          s(:lvasgn, :d,
            s(:lvar, :y)),
          s(:lvasgn, :t,
            s(:lvar, :x)),
          s(:lvasgn, :r,
            s(:send, nil, :BigDecimal,
              s(:str, "3"))),
          s(:lvasgn, :x2,
            s(:send,
              s(:lvar, :x), :mult,
              s(:lvar, :x),
              s(:lvar, :n))),
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :d), :nonzero?),
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :m,
                      s(:send,
                        s(:lvar, :n), :-,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :y), :exponent), :-,
                              s(:send,
                                s(:lvar, :d), :exponent))), :abs)))), :>,
                  s(:int, 0)))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :<,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)),
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)), nil),
              s(:lvasgn, :t,
                s(:send,
                  s(:send,
                    s(:lvar, :t), :mult,
                    s(:lvar, :x2),
                    s(:lvar, :n)), :-@)),
              s(:lvasgn, :d,
                s(:send,
                  s(:lvar, :t), :div,
                  s(:lvar, :r),
                  s(:lvar, :m))),
              s(:op_asgn,
                s(:lvasgn, :y), :+,
                s(:lvar, :d)),
              s(:op_asgn,
                s(:lvasgn, :r), :+,
                s(:int, 2)))),
          s(:if,
            s(:lvar, :dbl),
            s(:op_asgn,
              s(:lvasgn, :y), :*,
              s(:int, 2)), nil),
          s(:if,
            s(:lvar, :inv),
            s(:lvasgn, :y,
              s(:send,
                s(:send,
                  s(:lvar, :pi), :/,
                  s(:int, 2)), :-,
                s(:lvar, :y))), nil),
          s(:if,
            s(:lvar, :neg),
            s(:lvasgn, :y,
              s(:send,
                s(:lvar, :y), :-@)), nil),
          s(:lvar, :y))),
      s(:def, :PI,
        s(:args,
          s(:arg, :prec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :prec), :<=,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Zero or negative precision for PI")), nil),
          s(:lvasgn, :n,
            s(:send,
              s(:lvar, :prec), :+,
              s(:send,
                s(:const, nil, :BigDecimal), :double_fig))),
          s(:lvasgn, :zero,
            s(:send, nil, :BigDecimal,
              s(:str, "0"))),
          s(:lvasgn, :one,
            s(:send, nil, :BigDecimal,
              s(:str, "1"))),
          s(:lvasgn, :two,
            s(:send, nil, :BigDecimal,
              s(:str, "2"))),
          s(:lvasgn, :m25,
            s(:send, nil, :BigDecimal,
              s(:str, "-0.04"))),
          s(:lvasgn, :m57121,
            s(:send, nil, :BigDecimal,
              s(:str, "-57121"))),
          s(:lvasgn, :pi,
            s(:lvar, :zero)),
          s(:lvasgn, :d,
            s(:lvar, :one)),
          s(:lvasgn, :k,
            s(:lvar, :one)),
          s(:lvasgn, :t,
            s(:send, nil, :BigDecimal,
              s(:str, "-80"))),
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :d), :nonzero?),
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :m,
                      s(:send,
                        s(:lvar, :n), :-,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :pi), :exponent), :-,
                              s(:send,
                                s(:lvar, :d), :exponent))), :abs)))), :>,
                  s(:int, 0)))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :<,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)),
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)), nil),
              s(:lvasgn, :t,
                s(:send,
                  s(:lvar, :t), :*,
                  s(:lvar, :m25))),
              s(:lvasgn, :d,
                s(:send,
                  s(:lvar, :t), :div,
                  s(:lvar, :k),
                  s(:lvar, :m))),
              s(:lvasgn, :k,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :two))),
              s(:lvasgn, :pi,
                s(:send,
                  s(:lvar, :pi), :+,
                  s(:lvar, :d))))),
          s(:lvasgn, :d,
            s(:lvar, :one)),
          s(:lvasgn, :k,
            s(:lvar, :one)),
          s(:lvasgn, :t,
            s(:send, nil, :BigDecimal,
              s(:str, "956"))),
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :d), :nonzero?),
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :m,
                      s(:send,
                        s(:lvar, :n), :-,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :pi), :exponent), :-,
                              s(:send,
                                s(:lvar, :d), :exponent))), :abs)))), :>,
                  s(:int, 0)))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :<,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)),
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :BigDecimal), :double_fig)), nil),
              s(:lvasgn, :t,
                s(:send,
                  s(:lvar, :t), :div,
                  s(:lvar, :m57121),
                  s(:lvar, :n))),
              s(:lvasgn, :d,
                s(:send,
                  s(:lvar, :t), :div,
                  s(:lvar, :k),
                  s(:lvar, :m))),
              s(:lvasgn, :pi,
                s(:send,
                  s(:lvar, :pi), :+,
                  s(:lvar, :d))),
              s(:lvasgn, :k,
                s(:send,
                  s(:lvar, :k), :+,
                  s(:lvar, :two))))),
          s(:lvar, :pi))),
      s(:def, :E,
        s(:args,
          s(:arg, :prec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :prec), :<=,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Zero or negative precision for E")), nil),
          s(:send,
            s(:const, nil, :BigMath), :exp,
            s(:int, 1),
            s(:lvar, :prec)))))))
