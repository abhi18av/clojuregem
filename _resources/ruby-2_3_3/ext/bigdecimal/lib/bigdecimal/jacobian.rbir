s(:module,
  s(:const, nil, :Jacobian),
  s(:begin,
    s(:send, nil, :module_function),
    s(:def, :isEqual,
      s(:args,
        s(:arg, :a),
        s(:arg, :b),
        s(:optarg, :zero,
          s(:float, 0.0)),
        s(:optarg, :e,
          s(:float, 1.0e-08))),
      s(:begin,
        s(:lvasgn, :aa,
          s(:send,
            s(:lvar, :a), :abs)),
        s(:lvasgn, :bb,
          s(:send,
            s(:lvar, :b), :abs)),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :aa), :==,
              s(:lvar, :zero)),
            s(:send,
              s(:lvar, :bb), :==,
              s(:lvar, :zero))),
          s(:true),
          s(:if,
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :a), :-,
                        s(:lvar, :b))), :/,
                    s(:begin,
                      s(:send,
                        s(:lvar, :aa), :+,
                        s(:lvar, :bb))))), :abs), :<,
              s(:lvar, :e)),
            s(:true),
            s(:false))))),
    s(:def, :dfdxi,
      s(:args,
        s(:arg, :f),
        s(:arg, :fx),
        s(:arg, :x),
        s(:arg, :i)),
      s(:begin,
        s(:lvasgn, :nRetry,
          s(:int, 0)),
        s(:lvasgn, :n,
          s(:send,
            s(:lvar, :x), :size)),
        s(:lvasgn, :xSave,
          s(:send,
            s(:lvar, :x), :[],
            s(:lvar, :i))),
        s(:lvasgn, :ok,
          s(:int, 0)),
        s(:lvasgn, :ratio,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :f), :ten), :*,
              s(:send,
                s(:lvar, :f), :ten)), :*,
            s(:send,
              s(:lvar, :f), :ten))),
        s(:lvasgn, :dx,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :x), :[],
                s(:lvar, :i)), :abs), :/,
            s(:lvar, :ratio))),
        s(:if,
          s(:send, nil, :isEqual,
            s(:lvar, :dx),
            s(:send,
              s(:lvar, :f), :zero),
            s(:send,
              s(:lvar, :f), :zero),
            s(:send,
              s(:lvar, :f), :eps)),
          s(:lvasgn, :dx,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :fx), :[],
                  s(:lvar, :i)), :abs), :/,
              s(:lvar, :ratio))), nil),
        s(:if,
          s(:send, nil, :isEqual,
            s(:lvar, :dx),
            s(:send,
              s(:lvar, :f), :zero),
            s(:send,
              s(:lvar, :f), :zero),
            s(:send,
              s(:lvar, :f), :eps)),
          s(:lvasgn, :dx,
            s(:send,
              s(:send,
                s(:lvar, :f), :one), :/,
              s(:send,
                s(:lvar, :f), :ten))), nil),
        s(:until,
          s(:send,
            s(:lvar, :ok), :>,
            s(:int, 0)),
          s(:begin,
            s(:lvasgn, :deriv,
              s(:array)),
            s(:op_asgn,
              s(:lvasgn, :nRetry), :+,
              s(:int, 1)),
            s(:if,
              s(:send,
                s(:lvar, :nRetry), :>,
                s(:int, 100)),
              s(:send, nil, :raise,
                s(:send,
                  s(:send,
                    s(:str, "Singular Jacobian matrix. No change at x["), :+,
                    s(:send,
                      s(:lvar, :i), :to_s)), :+,
                  s(:str, "]"))), nil),
            s(:lvasgn, :dx,
              s(:send,
                s(:lvar, :dx), :*,
                s(:send,
                  s(:lvar, :f), :two))),
            s(:op_asgn,
              s(:send,
                s(:lvar, :x), :[],
                s(:lvar, :i)), :+,
              s(:lvar, :dx)),
            s(:lvasgn, :fxNew,
              s(:send,
                s(:lvar, :f), :values,
                s(:lvar, :x))),
            s(:for,
              s(:lvasgn, :j),
              s(:erange,
                s(:int, 0),
                s(:lvar, :n)),
              s(:if,
                s(:send,
                  s(:send, nil, :isEqual,
                    s(:send,
                      s(:lvar, :fxNew), :[],
                      s(:lvar, :j)),
                    s(:send,
                      s(:lvar, :fx), :[],
                      s(:lvar, :j)),
                    s(:send,
                      s(:lvar, :f), :zero),
                    s(:send,
                      s(:lvar, :f), :eps)), :!),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :ok), :+,
                    s(:int, 1)),
                  s(:op_asgn,
                    s(:lvasgn, :deriv), :<<,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :fxNew), :[],
                            s(:lvar, :j)), :-,
                          s(:send,
                            s(:lvar, :fx), :[],
                            s(:lvar, :j)))), :/,
                      s(:lvar, :dx)))),
                s(:op_asgn,
                  s(:lvasgn, :deriv), :<<,
                  s(:send,
                    s(:lvar, :f), :zero)))),
            s(:send,
              s(:lvar, :x), :[]=,
              s(:lvar, :i),
              s(:lvar, :xSave)))),
        s(:lvar, :deriv))),
    s(:def, :jacobian,
      s(:args,
        s(:arg, :f),
        s(:arg, :fx),
        s(:arg, :x)),
      s(:begin,
        s(:lvasgn, :n,
          s(:send,
            s(:lvar, :x), :size)),
        s(:lvasgn, :dfdx,
          s(:send,
            s(:const, nil, :Array), :new,
            s(:send,
              s(:lvar, :n), :*,
              s(:lvar, :n)))),
        s(:for,
          s(:lvasgn, :i),
          s(:erange,
            s(:int, 0),
            s(:lvar, :n)),
          s(:begin,
            s(:lvasgn, :df,
              s(:send, nil, :dfdxi,
                s(:lvar, :f),
                s(:lvar, :fx),
                s(:lvar, :x),
                s(:lvar, :i))),
            s(:for,
              s(:lvasgn, :j),
              s(:erange,
                s(:int, 0),
                s(:lvar, :n)),
              s(:send,
                s(:lvar, :dfdx), :[]=,
                s(:send,
                  s(:send,
                    s(:lvar, :j), :*,
                    s(:lvar, :n)), :+,
                  s(:lvar, :i)),
                s(:send,
                  s(:lvar, :df), :[],
                  s(:lvar, :j)))))),
        s(:lvar, :dfdx)))))
