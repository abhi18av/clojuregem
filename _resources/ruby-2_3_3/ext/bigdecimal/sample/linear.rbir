s(:begin,
  s(:send, nil, :require,
    s(:str, "bigdecimal")),
  s(:send, nil, :require,
    s(:str, "bigdecimal/ludcmp")),
  s(:send,
    s(:const, nil, :BigDecimal), :limit,
    s(:int, 100)),
  s(:send, nil, :include,
    s(:const, nil, :LUSolve)),
  s(:def, :rd_order,
    s(:args,
      s(:arg, :na)),
    s(:begin,
      s(:if,
        s(:begin,
          s(:send,
            s(:lvar, :na), :<=,
            s(:int, 0))),
        s(:send, nil, :printf,
          s(:str, "Number of equations ?")), nil),
      s(:lvasgn, :n,
        s(:send,
          s(:send,
            s(:const, nil, :ARGF), :gets), :to_i)))),
  s(:lvasgn, :na,
    s(:send,
      s(:const, nil, :ARGV), :size)),
  s(:lvasgn, :zero,
    s(:send,
      s(:const, nil, :BigDecimal), :new,
      s(:str, "0.0"))),
  s(:lvasgn, :one,
    s(:send,
      s(:const, nil, :BigDecimal), :new,
      s(:str, "1.0"))),
  s(:while,
    s(:send,
      s(:begin,
        s(:lvasgn, :n,
          s(:send, nil, :rd_order,
            s(:lvar, :na)))), :>,
      s(:int, 0)),
    s(:begin,
      s(:lvasgn, :a,
        s(:array)),
      s(:lvasgn, :as,
        s(:array)),
      s(:lvasgn, :b,
        s(:array)),
      s(:if,
        s(:send,
          s(:lvar, :na), :<=,
          s(:int, 0)),
        s(:begin,
          s(:send, nil, :printf,
            s(:str, "\nEnter coefficient matrix element A[i,j]\n")),
          s(:for,
            s(:lvasgn, :i),
            s(:erange,
              s(:int, 0),
              s(:lvar, :n)),
            s(:begin,
              s(:for,
                s(:lvasgn, :j),
                s(:erange,
                  s(:int, 0),
                  s(:lvar, :n)),
                s(:begin,
                  s(:send, nil, :printf,
                    s(:str, "A[%d,%d]? "),
                    s(:lvar, :i),
                    s(:lvar, :j)),
                  s(:lvasgn, :s,
                    s(:send,
                      s(:const, nil, :ARGF), :gets)),
                  s(:send,
                    s(:lvar, :a), :<<,
                    s(:send,
                      s(:const, nil, :BigDecimal), :new,
                      s(:lvar, :s))),
                  s(:send,
                    s(:lvar, :as), :<<,
                    s(:send,
                      s(:const, nil, :BigDecimal), :new,
                      s(:lvar, :s))))),
              s(:send, nil, :printf,
                s(:str, "Contatant vector element b[%d] ? "),
                s(:lvar, :i)),
              s(:send,
                s(:lvar, :b), :<<,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:send,
                    s(:const, nil, :ARGF), :gets)))))),
        s(:begin,
          s(:send, nil, :printf,
            s(:str, "Coefficient matrix and constant vector.\n")),
          s(:for,
            s(:lvasgn, :i),
            s(:erange,
              s(:int, 0),
              s(:lvar, :n)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:const, nil, :ARGF), :gets)),
              s(:send, nil, :printf,
                s(:str, "%d) %s"),
                s(:lvar, :i),
                s(:lvar, :s)),
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :s), :split)),
              s(:for,
                s(:lvasgn, :j),
                s(:erange,
                  s(:int, 0),
                  s(:lvar, :n)),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :<<,
                    s(:send,
                      s(:const, nil, :BigDecimal), :new,
                      s(:send,
                        s(:lvar, :s), :[],
                        s(:lvar, :j)))),
                  s(:send,
                    s(:lvar, :as), :<<,
                    s(:send,
                      s(:const, nil, :BigDecimal), :new,
                      s(:send,
                        s(:lvar, :s), :[],
                        s(:lvar, :j)))))),
              s(:send,
                s(:lvar, :b), :<<,
                s(:send,
                  s(:const, nil, :BigDecimal), :new,
                  s(:send,
                    s(:lvar, :s), :[],
                    s(:lvar, :n)))))))),
      s(:lvasgn, :x,
        s(:send, nil, :lusolve,
          s(:lvar, :a),
          s(:lvar, :b),
          s(:send, nil, :ludecomp,
            s(:lvar, :a),
            s(:lvar, :n),
            s(:lvar, :zero),
            s(:lvar, :one)),
          s(:lvar, :zero))),
      s(:send, nil, :printf,
        s(:str, "Answer(x[i] & (A*x-b)[i]) follows\n")),
      s(:for,
        s(:lvasgn, :i),
        s(:erange,
          s(:int, 0),
          s(:lvar, :n)),
        s(:begin,
          s(:send, nil, :printf,
            s(:str, "x[%d]=%s "),
            s(:lvar, :i),
            s(:send,
              s(:send,
                s(:lvar, :x), :[],
                s(:lvar, :i)), :to_s)),
          s(:lvasgn, :s,
            s(:lvar, :zero)),
          s(:for,
            s(:lvasgn, :j),
            s(:erange,
              s(:int, 0),
              s(:lvar, :n)),
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :s), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :as), :[],
                    s(:send,
                      s(:send,
                        s(:lvar, :i), :*,
                        s(:lvar, :n)), :+,
                      s(:lvar, :j))), :*,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:lvar, :j)))))),
          s(:send, nil, :printf,
            s(:str, " & %s\n"),
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :s), :-,
                  s(:send,
                    s(:lvar, :b), :[],
                    s(:lvar, :i)))), :to_s)))))))
