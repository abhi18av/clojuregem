s(:begin,
  s(:send, nil, :require,
    s(:str, "pathname.so")),
  s(:class,
    s(:const, nil, :Pathname), nil,
    s(:begin,
      s(:casgn, nil, :TO_PATH,
        s(:sym, :to_path)),
      s(:casgn, nil, :SAME_PATHS,
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :File), :FNM_SYSCASE), :nonzero?),
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send,
              s(:send,
                s(:lvar, :a), :casecmp,
                s(:lvar, :b)), :==,
              s(:int, 0))),
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :a),
              s(:arg, :b)),
            s(:send,
              s(:lvar, :a), :==,
              s(:lvar, :b))))),
      s(:if,
        s(:const,
          s(:const, nil, :File), :ALT_SEPARATOR),
        s(:begin,
          s(:casgn, nil, :SEPARATOR_LIST,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:const,
                    s(:const, nil, :File), :ALT_SEPARATOR))),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:const,
                    s(:const, nil, :File), :SEPARATOR))))),
          s(:casgn, nil, :SEPARATOR_PAT,
            s(:regexp,
              s(:str, "["),
              s(:begin,
                s(:const, nil, :SEPARATOR_LIST)),
              s(:str, "]"),
              s(:regopt)))),
        s(:begin,
          s(:casgn, nil, :SEPARATOR_LIST,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:const,
                    s(:const, nil, :File), :SEPARATOR))))),
          s(:casgn, nil, :SEPARATOR_PAT,
            s(:regexp,
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:const,
                    s(:const, nil, :File), :SEPARATOR))),
              s(:regopt))))),
      s(:def, :chop_basename,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :base,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :path))),
          s(:if,
            s(:send,
              s(:regexp,
                s(:str, "\\A"),
                s(:begin,
                  s(:const, nil, :SEPARATOR_PAT)),
                s(:str, "?\\z"),
                s(:regopt, :o)), :=~,
              s(:lvar, :base)),
            s(:return,
              s(:nil)),
            s(:return,
              s(:send,
                s(:lvar, :path), :[],
                s(:int, 0),
                s(:send,
                  s(:lvar, :path), :rindex,
                  s(:lvar, :base))),
              s(:lvar, :base))))),
      s(:send, nil, :private,
        s(:sym, :chop_basename)),
      s(:def, :split_names,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :names,
            s(:array)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :path))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :path),
                  s(:lvasgn, :basename)),
                s(:lvar, :r)),
              s(:send,
                s(:lvar, :names), :unshift,
                s(:lvar, :basename)))),
          s(:return,
            s(:lvar, :path),
            s(:lvar, :names)))),
      s(:send, nil, :private,
        s(:sym, :split_names)),
      s(:def, :prepend_prefix,
        s(:args,
          s(:arg, :prefix),
          s(:arg, :relpath)),
        s(:if,
          s(:send,
            s(:lvar, :relpath), :empty?),
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:lvar, :prefix)),
          s(:if,
            s(:send,
              s(:regexp,
                s(:begin,
                  s(:const, nil, :SEPARATOR_PAT)),
                s(:regopt, :o)), :=~,
              s(:lvar, :prefix)),
            s(:begin,
              s(:lvasgn, :prefix,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :prefix))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:send,
                      s(:lvar, :prefix), :+,
                      s(:str, "a"))), :!=,
                  s(:str, "a")),
                s(:lvasgn, :prefix,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :prefix),
                    s(:str, ""))), nil),
              s(:send,
                s(:lvar, :prefix), :+,
                s(:lvar, :relpath))),
            s(:send,
              s(:lvar, :prefix), :+,
              s(:lvar, :relpath))))),
      s(:send, nil, :private,
        s(:sym, :prepend_prefix)),
      s(:def, :cleanpath,
        s(:args,
          s(:optarg, :consider_symlink,
            s(:false))),
        s(:if,
          s(:lvar, :consider_symlink),
          s(:send, nil, :cleanpath_conservative),
          s(:send, nil, :cleanpath_aggressive))),
      s(:def, :cleanpath_aggressive,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:ivar, :@path)),
          s(:lvasgn, :names,
            s(:array)),
          s(:lvasgn, :pre,
            s(:lvar, :path)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :pre))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :pre),
                  s(:lvasgn, :base)),
                s(:lvar, :r)),
              s(:case,
                s(:lvar, :base),
                s(:when,
                  s(:str, "."), nil),
                s(:when,
                  s(:str, ".."),
                  s(:send,
                    s(:lvar, :names), :unshift,
                    s(:lvar, :base))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :names), :[],
                      s(:int, 0)), :==,
                    s(:str, "..")),
                  s(:send,
                    s(:lvar, :names), :shift),
                  s(:send,
                    s(:lvar, :names), :unshift,
                    s(:lvar, :base)))))),
          s(:if,
            s(:const,
              s(:const, nil, :File), :ALT_SEPARATOR),
            s(:send,
              s(:lvar, :pre), :tr!,
              s(:const,
                s(:const, nil, :File), :ALT_SEPARATOR),
              s(:const,
                s(:const, nil, :File), :SEPARATOR)), nil),
          s(:if,
            s(:send,
              s(:regexp,
                s(:begin,
                  s(:const, nil, :SEPARATOR_PAT)),
                s(:regopt, :o)), :=~,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :pre))),
            s(:while,
              s(:send,
                s(:send,
                  s(:lvar, :names), :[],
                  s(:int, 0)), :==,
                s(:str, "..")),
              s(:send,
                s(:lvar, :names), :shift)), nil),
          s(:send,
            s(:send,
              s(:self), :class), :new,
            s(:send, nil, :prepend_prefix,
              s(:lvar, :pre),
              s(:send,
                s(:const, nil, :File), :join,
                s(:splat,
                  s(:lvar, :names))))))),
      s(:send, nil, :private,
        s(:sym, :cleanpath_aggressive)),
      s(:def, :has_trailing_separator?,
        s(:args,
          s(:arg, :path)),
        s(:if,
          s(:lvasgn, :r,
            s(:send, nil, :chop_basename,
              s(:lvar, :path))),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :pre),
                s(:lvasgn, :basename)),
              s(:lvar, :r)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :pre), :length), :+,
                s(:send,
                  s(:lvar, :basename), :length)), :<,
              s(:send,
                s(:lvar, :path), :length))),
          s(:false))),
      s(:send, nil, :private,
        s(:sym, :has_trailing_separator?)),
      s(:def, :add_trailing_separator,
        s(:args,
          s(:arg, :path)),
        s(:if,
          s(:send,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:lvar, :path), :+,
                s(:str, "a"))), :==,
            s(:str, "a")),
          s(:lvar, :path),
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :path),
            s(:str, "")))),
      s(:send, nil, :private,
        s(:sym, :add_trailing_separator)),
      s(:def, :del_trailing_separator,
        s(:args,
          s(:arg, :path)),
        s(:if,
          s(:lvasgn, :r,
            s(:send, nil, :chop_basename,
              s(:lvar, :path))),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :pre),
                s(:lvasgn, :basename)),
              s(:lvar, :r)),
            s(:send,
              s(:lvar, :pre), :+,
              s(:lvar, :basename))),
          s(:if,
            s(:send,
              s(:regexp,
                s(:begin,
                  s(:const, nil, :SEPARATOR_PAT)),
                s(:str, "+\\z"),
                s(:regopt, :o)), :=~,
              s(:lvar, :path)),
            s(:send,
              s(:back_ref, :$`), :+,
              s(:send,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :path)), :[],
                s(:regexp,
                  s(:begin,
                    s(:const, nil, :SEPARATOR_PAT)),
                  s(:str, "*\\z"),
                  s(:regopt, :o)))),
            s(:lvar, :path)))),
      s(:send, nil, :private,
        s(:sym, :del_trailing_separator)),
      s(:def, :cleanpath_conservative,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:ivar, :@path)),
          s(:lvasgn, :names,
            s(:array)),
          s(:lvasgn, :pre,
            s(:lvar, :path)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :pre))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :pre),
                  s(:lvasgn, :base)),
                s(:lvar, :r)),
              s(:if,
                s(:send,
                  s(:lvar, :base), :!=,
                  s(:str, ".")),
                s(:send,
                  s(:lvar, :names), :unshift,
                  s(:lvar, :base)), nil))),
          s(:if,
            s(:const,
              s(:const, nil, :File), :ALT_SEPARATOR),
            s(:send,
              s(:lvar, :pre), :tr!,
              s(:const,
                s(:const, nil, :File), :ALT_SEPARATOR),
              s(:const,
                s(:const, nil, :File), :SEPARATOR)), nil),
          s(:if,
            s(:send,
              s(:regexp,
                s(:begin,
                  s(:const, nil, :SEPARATOR_PAT)),
                s(:regopt, :o)), :=~,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :pre))),
            s(:while,
              s(:send,
                s(:send,
                  s(:lvar, :names), :[],
                  s(:int, 0)), :==,
                s(:str, "..")),
              s(:send,
                s(:lvar, :names), :shift)), nil),
          s(:if,
            s(:send,
              s(:lvar, :names), :empty?),
            s(:send,
              s(:send,
                s(:self), :class), :new,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :pre))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :names), :last), :!=,
                    s(:str, "..")),
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :path)), :==,
                    s(:str, "."))),
                s(:send,
                  s(:lvar, :names), :<<,
                  s(:str, ".")), nil),
              s(:lvasgn, :result,
                s(:send, nil, :prepend_prefix,
                  s(:lvar, :pre),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:splat,
                      s(:lvar, :names))))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\A(?:\\.|\\.\\.)\\z"),
                      s(:regopt)), :!~,
                    s(:send,
                      s(:lvar, :names), :last)),
                  s(:send, nil, :has_trailing_separator?,
                    s(:lvar, :path))),
                s(:send,
                  s(:send,
                    s(:self), :class), :new,
                  s(:send, nil, :add_trailing_separator,
                    s(:lvar, :result))),
                s(:send,
                  s(:send,
                    s(:self), :class), :new,
                  s(:lvar, :result))))))),
      s(:send, nil, :private,
        s(:sym, :cleanpath_conservative)),
      s(:def, :parent,
        s(:args),
        s(:send,
          s(:self), :+,
          s(:str, ".."))),
      s(:def, :mountpoint?,
        s(:args),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:lvasgn, :stat1,
                s(:send,
                  s(:self), :lstat)),
              s(:lvasgn, :stat2,
                s(:send,
                  s(:send,
                    s(:self), :parent), :lstat)),
              s(:or,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :stat1), :dev), :==,
                    s(:send,
                      s(:lvar, :stat2), :dev)),
                  s(:send,
                    s(:send,
                      s(:lvar, :stat1), :ino), :==,
                    s(:send,
                      s(:lvar, :stat2), :ino))),
                s(:send,
                  s(:send,
                    s(:lvar, :stat1), :dev), :!=,
                  s(:send,
                    s(:lvar, :stat2), :dev)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)), nil,
              s(:false)), nil))),
      s(:def, :root?,
        s(:args),
        s(:send,
          s(:send,
            s(:begin,
              s(:and,
                s(:send,
                  s(:send, nil, :chop_basename,
                    s(:ivar, :@path)), :==,
                  s(:nil)),
                s(:send,
                  s(:regexp,
                    s(:begin,
                      s(:const, nil, :SEPARATOR_PAT)),
                    s(:regopt, :o)), :=~,
                  s(:ivar, :@path)))), :!), :!)),
      s(:def, :absolute?,
        s(:args),
        s(:send,
          s(:send, nil, :relative?), :!)),
      s(:def, :relative?,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:ivar, :@path)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :path))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :path)),
              s(:lvar, :r))),
          s(:send,
            s(:lvar, :path), :==,
            s(:str, "")))),
      s(:def, :each_filename,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:send, nil, :__method__)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :names)),
            s(:send, nil, :split_names,
              s(:ivar, :@path))),
          s(:block,
            s(:send,
              s(:lvar, :names), :each),
            s(:args,
              s(:arg, :filename)),
            s(:yield,
              s(:lvar, :filename))),
          s(:nil))),
      s(:def, :descend,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:send, nil, :__method__)))),
          s(:lvasgn, :vs,
            s(:array)),
          s(:block,
            s(:send, nil, :ascend),
            s(:args,
              s(:arg, :v)),
            s(:send,
              s(:lvar, :vs), :<<,
              s(:lvar, :v))),
          s(:block,
            s(:send,
              s(:lvar, :vs), :reverse_each),
            s(:args,
              s(:arg, :v)),
            s(:yield,
              s(:lvar, :v))),
          s(:nil))),
      s(:def, :ascend,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:send, nil, :__method__)))),
          s(:lvasgn, :path,
            s(:ivar, :@path)),
          s(:yield,
            s(:self)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :path))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :path)),
                s(:lvar, :r)),
              s(:if,
                s(:send,
                  s(:lvar, :path), :empty?),
                s(:break), nil),
              s(:yield,
                s(:send,
                  s(:send,
                    s(:self), :class), :new,
                  s(:send, nil, :del_trailing_separator,
                    s(:lvar, :path)))))))),
      s(:def, :+,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Pathname), :===,
              s(:lvar, :other)), nil,
            s(:lvasgn, :other,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:lvar, :other)))),
          s(:send,
            s(:const, nil, :Pathname), :new,
            s(:send, nil, :plus,
              s(:ivar, :@path),
              s(:send,
                s(:lvar, :other), :to_s))))),
      s(:alias,
        s(:sym, :/),
        s(:sym, :+)),
      s(:def, :plus,
        s(:args,
          s(:arg, :path1),
          s(:arg, :path2)),
        s(:begin,
          s(:lvasgn, :prefix2,
            s(:lvar, :path2)),
          s(:lvasgn, :index_list2,
            s(:array)),
          s(:lvasgn, :basename_list2,
            s(:array)),
          s(:while,
            s(:lvasgn, :r2,
              s(:send, nil, :chop_basename,
                s(:lvar, :prefix2))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :prefix2),
                  s(:lvasgn, :basename2)),
                s(:lvar, :r2)),
              s(:send,
                s(:lvar, :index_list2), :unshift,
                s(:send,
                  s(:lvar, :prefix2), :length)),
              s(:send,
                s(:lvar, :basename_list2), :unshift,
                s(:lvar, :basename2)))),
          s(:if,
            s(:send,
              s(:lvar, :prefix2), :!=,
              s(:str, "")),
            s(:return,
              s(:lvar, :path2)), nil),
          s(:lvasgn, :prefix1,
            s(:lvar, :path1)),
          s(:while,
            s(:true),
            s(:begin,
              s(:while,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :basename_list2), :empty?), :!),
                  s(:send,
                    s(:send,
                      s(:lvar, :basename_list2), :first), :==,
                    s(:str, "."))),
                s(:begin,
                  s(:send,
                    s(:lvar, :index_list2), :shift),
                  s(:send,
                    s(:lvar, :basename_list2), :shift))),
              s(:if,
                s(:lvasgn, :r1,
                  s(:send, nil, :chop_basename,
                    s(:lvar, :prefix1))), nil,
                s(:break)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :prefix1),
                  s(:lvasgn, :basename1)),
                s(:lvar, :r1)),
              s(:if,
                s(:send,
                  s(:lvar, :basename1), :==,
                  s(:str, ".")),
                s(:next), nil),
              s(:if,
                s(:or,
                  s(:or,
                    s(:send,
                      s(:lvar, :basename1), :==,
                      s(:str, "..")),
                    s(:send,
                      s(:lvar, :basename_list2), :empty?)),
                  s(:send,
                    s(:send,
                      s(:lvar, :basename_list2), :first), :!=,
                    s(:str, ".."))),
                s(:begin,
                  s(:lvasgn, :prefix1,
                    s(:send,
                      s(:lvar, :prefix1), :+,
                      s(:lvar, :basename1))),
                  s(:break)), nil),
              s(:send,
                s(:lvar, :index_list2), :shift),
              s(:send,
                s(:lvar, :basename_list2), :shift))),
          s(:lvasgn, :r1,
            s(:send, nil, :chop_basename,
              s(:lvar, :prefix1))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :r1), :!),
              s(:send,
                s(:regexp,
                  s(:begin,
                    s(:const, nil, :SEPARATOR_PAT)),
                  s(:regopt, :o)), :=~,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :prefix1)))),
            s(:while,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :basename_list2), :empty?), :!),
                s(:send,
                  s(:send,
                    s(:lvar, :basename_list2), :first), :==,
                  s(:str, ".."))),
              s(:begin,
                s(:send,
                  s(:lvar, :index_list2), :shift),
                s(:send,
                  s(:lvar, :basename_list2), :shift))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :basename_list2), :empty?), :!),
            s(:begin,
              s(:lvasgn, :suffix2,
                s(:send,
                  s(:lvar, :path2), :[],
                  s(:irange,
                    s(:send,
                      s(:lvar, :index_list2), :first),
                    s(:int, -1)))),
              s(:if,
                s(:lvar, :r1),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :prefix1),
                  s(:lvar, :suffix2)),
                s(:send,
                  s(:lvar, :prefix1), :+,
                  s(:lvar, :suffix2)))),
            s(:if,
              s(:lvar, :r1),
              s(:lvar, :prefix1),
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :prefix1)))))),
      s(:send, nil, :private,
        s(:sym, :plus)),
      s(:def, :join,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?),
            s(:return,
              s(:self)), nil),
          s(:lvasgn, :result,
            s(:send,
              s(:lvar, :args), :pop)),
          s(:if,
            s(:send,
              s(:const, nil, :Pathname), :===,
              s(:lvar, :result)), nil,
            s(:lvasgn, :result,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:lvar, :result)))),
          s(:if,
            s(:send,
              s(:lvar, :result), :absolute?),
            s(:return,
              s(:lvar, :result)), nil),
          s(:block,
            s(:send,
              s(:lvar, :args), :reverse_each),
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Pathname), :===,
                  s(:lvar, :arg)), nil,
                s(:lvasgn, :arg,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:lvar, :arg)))),
              s(:lvasgn, :result,
                s(:send,
                  s(:lvar, :arg), :+,
                  s(:lvar, :result))),
              s(:if,
                s(:send,
                  s(:lvar, :result), :absolute?),
                s(:return,
                  s(:lvar, :result)), nil))),
          s(:send,
            s(:self), :+,
            s(:lvar, :result)))),
      s(:def, :children,
        s(:args,
          s(:optarg, :with_directory,
            s(:true))),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@path), :==,
              s(:str, ".")),
            s(:lvasgn, :with_directory,
              s(:false)), nil),
          s(:lvasgn, :result,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :foreach,
              s(:ivar, :@path)),
            s(:args,
              s(:arg, :e)),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :e), :==,
                    s(:str, ".")),
                  s(:send,
                    s(:lvar, :e), :==,
                    s(:str, ".."))),
                s(:next), nil),
              s(:if,
                s(:lvar, :with_directory),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:send,
                    s(:send,
                      s(:self), :class), :new,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:ivar, :@path),
                      s(:lvar, :e)))),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:send,
                    s(:send,
                      s(:self), :class), :new,
                    s(:lvar, :e)))))),
          s(:lvar, :result))),
      s(:def, :each_child,
        s(:args,
          s(:optarg, :with_directory,
            s(:true)),
          s(:blockarg, :b)),
        s(:send,
          s(:send, nil, :children,
            s(:lvar, :with_directory)), :each,
          s(:block_pass,
            s(:lvar, :b)))),
      s(:def, :relative_path_from,
        s(:args,
          s(:arg, :base_directory)),
        s(:begin,
          s(:lvasgn, :dest_directory,
            s(:send,
              s(:send,
                s(:self), :cleanpath), :to_s)),
          s(:lvasgn, :base_directory,
            s(:send,
              s(:send,
                s(:lvar, :base_directory), :cleanpath), :to_s)),
          s(:lvasgn, :dest_prefix,
            s(:lvar, :dest_directory)),
          s(:lvasgn, :dest_names,
            s(:array)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :dest_prefix))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :dest_prefix),
                  s(:lvasgn, :basename)),
                s(:lvar, :r)),
              s(:if,
                s(:send,
                  s(:lvar, :basename), :!=,
                  s(:str, ".")),
                s(:send,
                  s(:lvar, :dest_names), :unshift,
                  s(:lvar, :basename)), nil))),
          s(:lvasgn, :base_prefix,
            s(:lvar, :base_directory)),
          s(:lvasgn, :base_names,
            s(:array)),
          s(:while,
            s(:lvasgn, :r,
              s(:send, nil, :chop_basename,
                s(:lvar, :base_prefix))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :base_prefix),
                  s(:lvasgn, :basename)),
                s(:lvar, :r)),
              s(:if,
                s(:send,
                  s(:lvar, :basename), :!=,
                  s(:str, ".")),
                s(:send,
                  s(:lvar, :base_names), :unshift,
                  s(:lvar, :basename)), nil))),
          s(:if,
            s(:send,
              s(:const, nil, :SAME_PATHS), :[],
              s(:lvar, :dest_prefix),
              s(:lvar, :base_prefix)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "different prefix: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :dest_prefix), :inspect)),
                s(:str, " and "),
                s(:begin,
                  s(:send,
                    s(:lvar, :base_directory), :inspect))))),
          s(:while,
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :dest_names), :empty?), :!),
                s(:send,
                  s(:send,
                    s(:lvar, :base_names), :empty?), :!)),
              s(:send,
                s(:const, nil, :SAME_PATHS), :[],
                s(:send,
                  s(:lvar, :dest_names), :first),
                s(:send,
                  s(:lvar, :base_names), :first))),
            s(:begin,
              s(:send,
                s(:lvar, :dest_names), :shift),
              s(:send,
                s(:lvar, :base_names), :shift))),
          s(:if,
            s(:send,
              s(:lvar, :base_names), :include?,
              s(:str, "..")),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "base_directory has ..: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :base_directory), :inspect)))), nil),
          s(:send,
            s(:lvar, :base_names), :fill,
            s(:str, "..")),
          s(:lvasgn, :relpath_names,
            s(:send,
              s(:lvar, :base_names), :+,
              s(:lvar, :dest_names))),
          s(:if,
            s(:send,
              s(:lvar, :relpath_names), :empty?),
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:str, ".")),
            s(:send,
              s(:const, nil, :Pathname), :new,
              s(:send,
                s(:const, nil, :File), :join,
                s(:splat,
                  s(:lvar, :relpath_names))))))))),
  s(:class,
    s(:const, nil, :Pathname), nil,
    s(:def, :find,
      s(:args,
        s(:kwoptarg, :ignore_error,
          s(:true))),
      s(:begin,
        s(:if,
          s(:send, nil, :block_given?), nil,
          s(:return,
            s(:send, nil, :to_enum,
              s(:send, nil, :__method__),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_error),
                  s(:lvar, :ignore_error)))))),
        s(:send, nil, :require,
          s(:str, "find")),
        s(:if,
          s(:send,
            s(:ivar, :@path), :==,
            s(:str, ".")),
          s(:block,
            s(:send,
              s(:const, nil, :Find), :find,
              s(:ivar, :@path),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_error),
                  s(:lvar, :ignore_error)))),
            s(:args,
              s(:arg, :f)),
            s(:yield,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:send,
                  s(:lvar, :f), :sub,
                  s(:regexp,
                    s(:str, "\\A\\./"),
                    s(:regopt)),
                  s(:str, ""))))),
          s(:block,
            s(:send,
              s(:const, nil, :Find), :find,
              s(:ivar, :@path),
              s(:hash,
                s(:pair,
                  s(:sym, :ignore_error),
                  s(:lvar, :ignore_error)))),
            s(:args,
              s(:arg, :f)),
            s(:yield,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:lvar, :f)))))))),
  s(:class,
    s(:const, nil, :Pathname), nil,
    s(:begin,
      s(:def, :mkpath,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "fileutils")),
          s(:send,
            s(:const, nil, :FileUtils), :mkpath,
            s(:ivar, :@path)),
          s(:nil))),
      s(:def, :rmtree,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "fileutils")),
          s(:send,
            s(:const, nil, :FileUtils), :rm_r,
            s(:ivar, :@path)),
          s(:nil))))))
