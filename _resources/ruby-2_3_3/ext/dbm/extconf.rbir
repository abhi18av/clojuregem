s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:send, nil, :dir_config,
    s(:str, "dbm")),
  s(:if,
    s(:lvasgn, :dblib,
      s(:send, nil, :with_config,
        s(:str, "dbm-type"),
        s(:nil))),
    s(:lvasgn, :dblib,
      s(:send,
        s(:lvar, :dblib), :split,
        s(:regexp,
          s(:str, "[ ,]+"),
          s(:regopt)))),
    s(:lvasgn, :dblib,
      s(:array,
        s(:str, "libc"),
        s(:str, "db"),
        s(:str, "db2"),
        s(:str, "db1"),
        s(:str, "db5"),
        s(:str, "db4"),
        s(:str, "db3"),
        s(:str, "gdbm_compat"),
        s(:str, "gdbm"),
        s(:str, "qdbm")))),
  s(:lvasgn, :headers,
    s(:hash,
      s(:pair,
        s(:str, "libc"),
        s(:array,
          s(:str, "ndbm.h"))),
      s(:pair,
        s(:str, "db"),
        s(:array,
          s(:str, "db.h"))),
      s(:pair,
        s(:str, "db1"),
        s(:array,
          s(:str, "db1/ndbm.h"),
          s(:str, "db1.h"),
          s(:str, "ndbm.h"))),
      s(:pair,
        s(:str, "db2"),
        s(:array,
          s(:str, "db2/db.h"),
          s(:str, "db2.h"),
          s(:str, "db.h"))),
      s(:pair,
        s(:str, "db3"),
        s(:array,
          s(:str, "db3/db.h"),
          s(:str, "db3.h"),
          s(:str, "db.h"))),
      s(:pair,
        s(:str, "db4"),
        s(:array,
          s(:str, "db4/db.h"),
          s(:str, "db4.h"),
          s(:str, "db.h"))),
      s(:pair,
        s(:str, "db5"),
        s(:array,
          s(:str, "db5/db.h"),
          s(:str, "db5.h"),
          s(:str, "db.h"))),
      s(:pair,
        s(:str, "gdbm_compat"),
        s(:array,
          s(:str, "gdbm-ndbm.h"),
          s(:str, "gdbm/ndbm.h"),
          s(:str, "ndbm.h"))),
      s(:pair,
        s(:str, "gdbm"),
        s(:array,
          s(:str, "gdbm-ndbm.h"),
          s(:str, "gdbm/ndbm.h"),
          s(:str, "ndbm.h"))),
      s(:pair,
        s(:str, "qdbm"),
        s(:array,
          s(:str, "qdbm/relic.h"),
          s(:str, "relic.h"))))),
  s(:sclass,
    s(:lvar, :headers),
    s(:begin,
      s(:send, nil, :attr_accessor,
        s(:sym, :found)),
      s(:send, nil, :attr_accessor,
        s(:sym, :defs)))),
  s(:send,
    s(:lvar, :headers), :found=,
    s(:array)),
  s(:send,
    s(:lvar, :headers), :defs=,
    s(:nil)),
  s(:defs,
    s(:lvar, :headers), :db_check,
    s(:args,
      s(:arg, :db),
      s(:arg, :hdr)),
    s(:begin,
      s(:lvasgn, :old_libs,
        s(:send,
          s(:gvar, :$libs), :dup)),
      s(:lvasgn, :old_defs,
        s(:send,
          s(:gvar, :$defs), :dup)),
      s(:lvasgn, :result,
        s(:send, nil, :db_check2,
          s(:lvar, :db),
          s(:lvar, :hdr))),
      s(:if,
        s(:send,
          s(:lvar, :result), :!),
        s(:begin,
          s(:gvasgn, :$libs,
            s(:lvar, :old_libs)),
          s(:gvasgn, :$defs,
            s(:lvar, :old_defs))), nil),
      s(:lvar, :result))),
  s(:def, :have_declared_libvar,
    s(:args,
      s(:arg, :var),
      s(:optarg, :headers,
        s(:nil)),
      s(:optarg, :opt,
        s(:str, "")),
      s(:blockarg, :b)),
    s(:block,
      s(:send, nil, :checking_for,
        s(:send, nil, :checking_message,
          s(:send,
            s(:send,
              s(:array,
                s(:splat,
                  s(:lvar, :var))), :compact), :join,
            s(:str, " ")),
          s(:lvar, :headers),
          s(:lvar, :opt))),
      s(:args),
      s(:send, nil, :try_declared_libvar,
        s(:lvar, :var),
        s(:lvar, :headers),
        s(:lvar, :opt),
        s(:block_pass,
          s(:lvar, :b))))),
  s(:def, :try_declared_libvar,
    s(:args,
      s(:arg, :var),
      s(:optarg, :headers,
        s(:nil)),
      s(:optarg, :opt,
        s(:str, "")),
      s(:blockarg, :b)),
    s(:if,
      s(:send, nil, :try_link,
        s(:dstr,
          s(:begin,
            s(:send, nil, :cpp_include,
              s(:lvar, :headers))),
          s(:str, "\n"),
          s(:str, "/*top*/\n"),
          s(:str, "int main(int argc, char *argv[]) {\n"),
          s(:str, "  void *conftest_var = &"),
          s(:begin,
            s(:lvar, :var)),
          s(:str, ";\n"),
          s(:str, "  return 0;\n"),
          s(:str, "}\n")),
        s(:lvar, :opt),
        s(:block_pass,
          s(:lvar, :b))),
      s(:begin,
        s(:send,
          s(:gvar, :$defs), :push,
          s(:send, nil, :format,
            s(:str, "-DHAVE_DECLARED_LIBVAR_%s"),
            s(:send,
              s(:lvar, :var), :tr_cpp))),
        s(:true)),
      s(:false))),
  s(:def, :have_undeclared_libvar,
    s(:args,
      s(:arg, :var),
      s(:optarg, :headers,
        s(:nil)),
      s(:optarg, :opt,
        s(:str, "")),
      s(:blockarg, :b)),
    s(:block,
      s(:send, nil, :checking_for,
        s(:send, nil, :checking_message,
          s(:send,
            s(:send,
              s(:array,
                s(:splat,
                  s(:lvar, :var))), :compact), :join,
            s(:str, " ")),
          s(:lvar, :headers),
          s(:lvar, :opt))),
      s(:args),
      s(:send, nil, :try_undeclared_libvar,
        s(:lvar, :var),
        s(:lvar, :headers),
        s(:lvar, :opt),
        s(:block_pass,
          s(:lvar, :b))))),
  s(:def, :try_undeclared_libvar,
    s(:args,
      s(:arg, :var),
      s(:optarg, :headers,
        s(:nil)),
      s(:optarg, :opt,
        s(:str, "")),
      s(:blockarg, :b)),
    s(:begin,
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :var),
          s(:lvasgn, :type)),
        s(:array,
          s(:splat,
            s(:lvar, :var)))),
      s(:if,
        s(:send, nil, :try_link,
          s(:dstr,
            s(:begin,
              s(:send, nil, :cpp_include,
                s(:lvar, :headers))),
            s(:str, "\n"),
            s(:str, "/*top*/\n"),
            s(:str, "int main(int argc, char *argv[]) {\n"),
            s(:str, "  typedef "),
            s(:begin,
              s(:or,
                s(:lvar, :type),
                s(:str, "int"))),
            s(:str, " conftest_type;\n"),
            s(:str, "  extern conftest_type "),
            s(:begin,
              s(:lvar, :var)),
            s(:str, ";\n"),
            s(:str, "  conftest_type *conftest_var = &"),
            s(:begin,
              s(:lvar, :var)),
            s(:str, ";\n"),
            s(:str, "  return 0;\n"),
            s(:str, "}\n")),
          s(:lvar, :opt),
          s(:block_pass,
            s(:lvar, :b))),
        s(:begin,
          s(:send,
            s(:gvar, :$defs), :push,
            s(:send, nil, :format,
              s(:str, "-DHAVE_UNDECLARED_LIBVAR_%s"),
              s(:send,
                s(:lvar, :var), :tr_cpp))),
          s(:true)),
        s(:false)))),
  s(:def, :have_empty_macro_dbm_clearerr,
    s(:args,
      s(:optarg, :headers,
        s(:nil)),
      s(:optarg, :opt,
        s(:str, "")),
      s(:blockarg, :b)),
    s(:block,
      s(:send, nil, :checking_for,
        s(:send, nil, :checking_message,
          s(:str, "empty macro of dbm_clearerr(foobarbaz)"),
          s(:lvar, :headers),
          s(:lvar, :opt))),
      s(:args),
      s(:send, nil, :try_toplevel,
        s(:str, "dbm_clearerr(foobarbaz)"),
        s(:lvar, :headers),
        s(:lvar, :opt),
        s(:block_pass,
          s(:lvar, :b))))),
  s(:def, :try_toplevel,
    s(:args,
      s(:arg, :src),
      s(:optarg, :headers,
        s(:nil)),
      s(:optarg, :opt,
        s(:str, "")),
      s(:blockarg, :b)),
    s(:if,
      s(:send, nil, :try_compile,
        s(:dstr,
          s(:begin,
            s(:send, nil, :cpp_include,
              s(:lvar, :headers))),
          s(:str, "\n"),
          s(:str, "/*top*/\n"),
          s(:begin,
            s(:lvar, :src)),
          s(:str, "\n")),
        s(:lvar, :opt),
        s(:block_pass,
          s(:lvar, :b))),
      s(:true),
      s(:false))),
  s(:defs,
    s(:lvar, :headers), :db_check2,
    s(:args,
      s(:arg, :db),
      s(:arg, :hdr)),
    s(:begin,
      s(:send,
        s(:gvar, :$defs), :push,
        s(:dstr,
          s(:str, "-DRUBYDBM_DBM_HEADER='\""),
          s(:begin,
            s(:lvar, :hdr)),
          s(:str, "\"'"))),
      s(:send,
        s(:gvar, :$defs), :push,
        s(:dstr,
          s(:str, "-DRUBYDBM_DBM_TYPE='\""),
          s(:begin,
            s(:lvar, :db)),
          s(:str, "\"'"))),
      s(:lvasgn, :hsearch,
        s(:nil)),
      s(:case,
        s(:lvar, :db),
        s(:when,
          s(:regexp,
            s(:str, "^db[2-5]?$"),
            s(:regopt)),
          s(:lvasgn, :hsearch,
            s(:str, "-DDB_DBM_HSEARCH"))),
        s(:when,
          s(:str, "gdbm_compat"),
          s(:or,
            s(:send, nil, :have_library,
              s(:str, "gdbm")),
            s(:return,
              s(:false)))), nil),
      s(:if,
        s(:send,
          s(:send, nil, :have_type,
            s(:str, "DBM"),
            s(:lvar, :hdr),
            s(:lvar, :hsearch)), :!),
        s(:return,
          s(:false)), nil),
      s(:if,
        s(:send,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :db), :==,
                s(:str, "libc")),
              s(:send, nil, :have_func,
                s(:str, "dbm_open(\"\", 0, 0)"),
                s(:lvar, :hdr),
                s(:lvar, :hsearch)),
              s(:send, nil, :have_library,
                s(:lvar, :db),
                s(:str, "dbm_open(\"\", 0, 0)"),
                s(:lvar, :hdr),
                s(:lvar, :hsearch)))), :!),
        s(:return,
          s(:false)), nil),
      s(:if,
        s(:send,
          s(:send, nil, :have_func,
            s(:str, "dbm_clearerr((DBM *)0)"),
            s(:lvar, :hdr),
            s(:lvar, :hsearch)), :!),
        s(:return,
          s(:false)), nil),
      s(:lvasgn, :have_db_header,
        s(:send, nil, :have_macro,
          s(:str, "DBM_SUFFIX"),
          s(:lvar, :hdr),
          s(:lvar, :hsearch))),
      s(:lvasgn, :have_gdbm_header1,
        s(:send, nil, :have_empty_macro_dbm_clearerr,
          s(:lvar, :hdr),
          s(:lvar, :hsearch))),
      s(:lvasgn, :have_gdbm_header2,
        s(:send, nil, :have_macro,
          s(:str, "_GDBM_H_"),
          s(:lvar, :hdr),
          s(:lvar, :hsearch))),
      s(:lvasgn, :have_ndbm_header,
        s(:send, nil, :have_macro,
          s(:str, "_DBM_IOERR"),
          s(:lvar, :hdr),
          s(:lvar, :hsearch))),
      s(:if,
        s(:and,
          s(:lvar, :have_gdbm_header2),
          s(:send,
            s(:lvar, :db), :==,
            s(:str, "gdbm"))),
        s(:return,
          s(:false)), nil),
      s(:if,
        s(:lvar, :have_db_header),
        s(:send,
          s(:gvar, :$defs), :push,
          s(:str, "-DRUBYDBM_DB_HEADER")), nil),
      s(:lvasgn, :have_gdbm_header,
        s(:send,
          s(:lvar, :have_gdbm_header1), :|,
          s(:lvar, :have_gdbm_header2))),
      s(:if,
        s(:lvar, :have_gdbm_header),
        s(:send,
          s(:gvar, :$defs), :push,
          s(:str, "-DRUBYDBM_GDBM_HEADER")), nil),
      s(:if,
        s(:and,
          s(:and,
            s(:send,
              s(:lvar, :hdr), :==,
              s(:str, "ndbm.h")),
            s(:send,
              s(:lvar, :db), :!=,
              s(:str, "libc"))),
          s(:send,
            s(:lvar, :db), :!=,
            s(:str, "ndbm"))),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:regexp,
                  s(:str, "\\Adb\\d?\\z"),
                  s(:regopt)), :!~,
                s(:lvar, :db)),
              s(:lvar, :have_db_header)),
            s(:return,
              s(:false)), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:regexp,
                  s(:str, "\\Agdbm"),
                  s(:regopt)), :!~,
                s(:lvar, :db)),
              s(:lvar, :have_gdbm_header)),
            s(:return,
              s(:false)), nil),
          s(:if,
            s(:lvar, :have_ndbm_header),
            s(:return,
              s(:false)), nil)), nil),
      s(:send, nil, :have_func,
        s(:str, "db_version((int *)0, (int *)0, (int *)0)"),
        s(:lvar, :hdr),
        s(:lvar, :hsearch)),
      s(:lvasgn, :have_gdbm_version,
        s(:send, nil, :have_declared_libvar,
          s(:str, "gdbm_version"),
          s(:lvar, :hdr),
          s(:lvar, :hsearch))),
      s(:op_asgn,
        s(:lvasgn, :have_gdbm_version), :|,
        s(:send, nil, :have_undeclared_libvar,
          s(:array,
            s(:str, "gdbm_version"),
            s(:str, "char *")),
          s(:lvar, :hdr),
          s(:lvar, :hsearch))),
      s(:send, nil, :have_var,
        s(:str, "dpversion"),
        s(:lvar, :hdr),
        s(:lvar, :hsearch)),
      s(:if,
        s(:and,
          s(:lvar, :have_gdbm_header),
          s(:send,
            s(:lvar, :have_gdbm_version), :!)),
        s(:return,
          s(:false)), nil),
      s(:if,
        s(:lvar, :have_db_header),
        s(:send, nil, :have_type,
          s(:str, "DBC"),
          s(:lvar, :hdr),
          s(:lvar, :hsearch)), nil),
      s(:if,
        s(:lvar, :hsearch),
        s(:begin,
          s(:send,
            s(:gvar, :$defs), :<<,
            s(:lvar, :hsearch)),
          s(:ivasgn, :@defs,
            s(:lvar, :hsearch))), nil),
      s(:send,
        s(:gvar, :$defs), :<<,
        s(:send,
          s(:send,
            s(:str, "-DDBM_HDR=\"<"), :+,
            s(:lvar, :hdr)), :+,
          s(:str, ">\""))),
      s(:send,
        s(:ivar, :@found), :<<,
        s(:lvar, :hdr)),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "header: "),
          s(:begin,
            s(:lvar, :hdr)))),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "library: "),
          s(:begin,
            s(:lvar, :db)))),
      s(:true))),
  s(:if,
    s(:block,
      s(:send,
        s(:lvar, :dblib), :any?),
      s(:args,
        s(:arg, :db)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :headers), :fetch,
            s(:lvar, :db),
            s(:array,
              s(:str, "ndbm.h"))), :any?),
        s(:args,
          s(:arg, :hdr)),
        s(:send,
          s(:lvar, :headers), :db_check,
          s(:lvar, :db),
          s(:lvar, :hdr)))),
    s(:begin,
      s(:send, nil, :have_header,
        s(:str, "cdefs.h")),
      s(:send, nil, :have_header,
        s(:str, "sys/cdefs.h")),
      s(:send, nil, :have_func,
        s(:str, "dbm_pagfno((DBM *)0)"),
        s(:send,
          s(:lvar, :headers), :found),
        s(:send,
          s(:lvar, :headers), :defs)),
      s(:send, nil, :have_func,
        s(:str, "dbm_dirfno((DBM *)0)"),
        s(:send,
          s(:lvar, :headers), :found),
        s(:send,
          s(:lvar, :headers), :defs)),
      s(:send, nil, :convertible_int,
        s(:str, "datum.dsize"),
        s(:send,
          s(:lvar, :headers), :found),
        s(:send,
          s(:lvar, :headers), :defs)),
      s(:block,
        s(:send, nil, :checking_for,
          s(:str, "sizeof(DBM) is available")),
        s(:args),
        s(:if,
          s(:send, nil, :try_compile,
            s(:dstr,
              s(:str, "#ifdef HAVE_CDEFS_H\n"),
              s(:str, "# include <cdefs.h>\n"),
              s(:str, "#endif\n"),
              s(:str, "#ifdef HAVE_SYS_CDEFS_H\n"),
              s(:str, "# include <sys/cdefs.h>\n"),
              s(:str, "#endif\n"),
              s(:str, "#include DBM_HDR\n"),
              s(:str, "\n"),
              s(:str, "const int sizeof_DBM = (int)sizeof(DBM);\n"))),
          s(:send,
            s(:gvar, :$defs), :<<,
            s(:str, "-DDBM_SIZEOF_DBM=sizeof(DBM)")),
          s(:send,
            s(:gvar, :$defs), :<<,
            s(:str, "-DDBM_SIZEOF_DBM=0")))),
      s(:send, nil, :create_makefile,
        s(:str, "dbm"))), nil))
