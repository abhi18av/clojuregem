s(:begin,
  s(:send, nil, :require,
    s(:str, "strscan")),
  s(:module,
    s(:const, nil, :Psych),
    s(:class,
      s(:const, nil, :ScalarScanner), nil,
      s(:begin,
        s(:casgn, nil, :TIME,
          s(:regexp,
            s(:str, "^-?\\d{4}-\\d{1,2}-\\d{1,2}(?:[Tt]|\\s+)\\d{1,2}:\\d\\d:\\d\\d(?:\\.\\d*)?(?:\\s*(?:Z|[-+]\\d{1,2}:?(?:\\d\\d)?))?$"),
            s(:regopt))),
        s(:casgn, nil, :FLOAT,
          s(:regexp,
            s(:str, "^(?:[-+]?([0-9][0-9_,]*)?\\.[0-9]*([eE][-+][0-9]+)?(?# base 10)\n"),
            s(:str, "              |[-+]?[0-9][0-9_,]*(:[0-5]?[0-9])+\\.[0-9_]*(?# base 60)\n"),
            s(:str, "              |[-+]?\\.(inf|Inf|INF)(?# infinity)\n"),
            s(:str, "              |\\.(nan|NaN|NAN)(?# not a number))$"),
            s(:regopt, :x))),
        s(:casgn, nil, :INTEGER,
          s(:regexp,
            s(:str, "^(?:[-+]?0b[0-1_]+          (?# base 2)\n"),
            s(:str, "                  |[-+]?0[0-7_]+           (?# base 8)\n"),
            s(:str, "                  |[-+]?(?:0|[1-9][0-9_]*) (?# base 10)\n"),
            s(:str, "                  |[-+]?0x[0-9a-fA-F_]+    (?# base 16))$"),
            s(:regopt, :x))),
        s(:send, nil, :attr_reader,
          s(:sym, :class_loader)),
        s(:def, :initialize,
          s(:args,
            s(:arg, :class_loader)),
          s(:begin,
            s(:ivasgn, :@string_cache,
              s(:hash)),
            s(:ivasgn, :@symbol_cache,
              s(:hash)),
            s(:ivasgn, :@class_loader,
              s(:lvar, :class_loader)))),
        s(:def, :tokenize,
          s(:args,
            s(:arg, :string)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :string), :empty?),
              s(:return,
                s(:nil)), nil),
            s(:if,
              s(:send,
                s(:ivar, :@string_cache), :key?,
                s(:lvar, :string)),
              s(:return,
                s(:lvar, :string)), nil),
            s(:if,
              s(:send,
                s(:ivar, :@symbol_cache), :key?,
                s(:lvar, :string)),
              s(:return,
                s(:send,
                  s(:ivar, :@symbol_cache), :[],
                  s(:lvar, :string))), nil),
            s(:case,
              s(:lvar, :string),
              s(:when,
                s(:regexp,
                  s(:str, "^[^\\d\\.:-]?[A-Za-z_\\s!@#\\$%\\^&\\*\\(\\)\\{\\}\\<\\>\\|/\\\\~;=]+"),
                  s(:regopt)),
                s(:regexp,
                  s(:str, "\\n"),
                  s(:regopt)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :string), :length), :>,
                      s(:int, 5)),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@string_cache), :[]=,
                        s(:lvar, :string),
                        s(:true)),
                      s(:return,
                        s(:lvar, :string))), nil),
                  s(:case,
                    s(:lvar, :string),
                    s(:when,
                      s(:regexp,
                        s(:str, "^[^ytonf~]"),
                        s(:regopt, :i)),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@string_cache), :[]=,
                          s(:lvar, :string),
                          s(:true)),
                        s(:lvar, :string))),
                    s(:when,
                      s(:str, "~"),
                      s(:regexp,
                        s(:str, "^null$"),
                        s(:regopt, :i)),
                      s(:nil)),
                    s(:when,
                      s(:regexp,
                        s(:str, "^(yes|true|on)$"),
                        s(:regopt, :i)),
                      s(:true)),
                    s(:when,
                      s(:regexp,
                        s(:str, "^(no|false|off)$"),
                        s(:regopt, :i)),
                      s(:false)),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@string_cache), :[]=,
                        s(:lvar, :string),
                        s(:true)),
                      s(:lvar, :string))))),
              s(:when,
                s(:const, nil, :TIME),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :parse_time,
                      s(:lvar, :string)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ArgumentError)), nil,
                      s(:lvar, :string)), nil))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\d{4}-(?:1[012]|0\\d|\\d)-(?:[12]\\d|3[01]|0\\d|\\d)$"),
                  s(:regopt)),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "date")),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:send,
                          s(:send, nil, :class_loader), :date), :strptime,
                        s(:lvar, :string),
                        s(:str, "%Y-%m-%d")),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ArgumentError)), nil,
                        s(:lvar, :string)), nil)))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\.inf$"),
                  s(:regopt, :i)),
                s(:const,
                  s(:const, nil, :Float), :INFINITY)),
              s(:when,
                s(:regexp,
                  s(:str, "^-\\.inf$"),
                  s(:regopt, :i)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Float), :INFINITY), :-@)),
              s(:when,
                s(:regexp,
                  s(:str, "^\\.nan$"),
                  s(:regopt, :i)),
                s(:const,
                  s(:const, nil, :Float), :NAN)),
              s(:when,
                s(:regexp,
                  s(:str, "^:."),
                  s(:regopt)),
                s(:if,
                  s(:send,
                    s(:lvar, :string), :=~,
                    s(:regexp,
                      s(:str, "^:([\"'])(.*)\\1"),
                      s(:regopt))),
                  s(:send,
                    s(:ivar, :@symbol_cache), :[]=,
                    s(:lvar, :string),
                    s(:send,
                      s(:send, nil, :class_loader), :symbolize,
                      s(:send,
                        s(:nth_ref, 2), :sub,
                        s(:regexp,
                          s(:str, "^:"),
                          s(:regopt)),
                        s(:str, "")))),
                  s(:send,
                    s(:ivar, :@symbol_cache), :[]=,
                    s(:lvar, :string),
                    s(:send,
                      s(:send, nil, :class_loader), :symbolize,
                      s(:send,
                        s(:lvar, :string), :sub,
                        s(:regexp,
                          s(:str, "^:"),
                          s(:regopt)),
                        s(:str, "")))))),
              s(:when,
                s(:regexp,
                  s(:str, "^[-+]?[0-9][0-9_]*(:[0-5]?[0-9])+$"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:int, 0)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :string), :split,
                        s(:str, ":")), :each_with_index),
                    s(:args,
                      s(:arg, :n),
                      s(:arg, :e)),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :n), :to_i), :*,
                          s(:send,
                            s(:int, 60), :**,
                            s(:send,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :e), :-,
                                  s(:int, 2))), :abs)))))),
                  s(:lvar, :i))),
              s(:when,
                s(:regexp,
                  s(:str, "^[-+]?[0-9][0-9_]*(:[0-5]?[0-9])+\\.[0-9_]*$"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :i,
                    s(:int, 0)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :string), :split,
                        s(:str, ":")), :each_with_index),
                    s(:args,
                      s(:arg, :n),
                      s(:arg, :e)),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :n), :to_f), :*,
                          s(:send,
                            s(:int, 60), :**,
                            s(:send,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :e), :-,
                                  s(:int, 2))), :abs)))))),
                  s(:lvar, :i))),
              s(:when,
                s(:const, nil, :FLOAT),
                s(:if,
                  s(:send,
                    s(:lvar, :string), :=~,
                    s(:regexp,
                      s(:str, "\\A[-+]?\\.\\Z"),
                      s(:regopt))),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@string_cache), :[]=,
                      s(:lvar, :string),
                      s(:true)),
                    s(:lvar, :string)),
                  s(:send, nil, :Float,
                    s(:send,
                      s(:lvar, :string), :gsub,
                      s(:regexp,
                        s(:str, "[,_]|\\.$"),
                        s(:regopt)),
                      s(:str, ""))))),
              s(:begin,
                s(:lvasgn, :int,
                  s(:send, nil, :parse_int,
                    s(:send,
                      s(:lvar, :string), :gsub,
                      s(:regexp,
                        s(:str, "[,_]"),
                        s(:regopt)),
                      s(:str, "")))),
                s(:if,
                  s(:lvar, :int),
                  s(:return,
                    s(:lvar, :int)), nil),
                s(:send,
                  s(:ivar, :@string_cache), :[]=,
                  s(:lvar, :string),
                  s(:true)),
                s(:lvar, :string))))),
        s(:def, :parse_int,
          s(:args,
            s(:arg, :string)),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :INTEGER), :===,
                s(:lvar, :string)), nil,
              s(:return)),
            s(:send, nil, :Integer,
              s(:lvar, :string)))),
        s(:def, :parse_time,
          s(:args,
            s(:arg, :string)),
          s(:begin,
            s(:lvasgn, :klass,
              s(:send,
                s(:send, nil, :class_loader), :load,
                s(:str, "Time"))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :date),
                s(:lvasgn, :time)),
              s(:array,
                s(:splat,
                  s(:begin,
                    s(:send,
                      s(:lvar, :string), :split,
                      s(:regexp,
                        s(:str, "[ tT]"),
                        s(:regopt)),
                      s(:int, 2)))))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :yy),
                s(:lvasgn, :m),
                s(:lvasgn, :dd)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :date), :match,
                      s(:regexp,
                        s(:str, "^(-?\\d{4})-(\\d{1,2})-(\\d{1,2})"),
                        s(:regopt))), :captures), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :to_i))),
            s(:lvasgn, :md,
              s(:send,
                s(:lvar, :time), :match,
                s(:regexp,
                  s(:str, "(\\d+:\\d+:\\d+)(?:\\.(\\d*))?\\s*(Z|[-+]\\d+(:\\d\\d)?)?"),
                  s(:regopt)))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :hh),
                s(:lvasgn, :mm),
                s(:lvasgn, :ss)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :md), :[],
                      s(:int, 1)), :split,
                    s(:str, ":")), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :to_i))),
            s(:lvasgn, :us,
              s(:send,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :md), :[],
                      s(:int, 2)),
                    s(:send, nil, :Rational,
                      s(:dstr,
                        s(:str, "0."),
                        s(:begin,
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 2))))),
                    s(:int, 0))), :*,
                s(:int, 1000000))),
            s(:lvasgn, :time,
              s(:send,
                s(:lvar, :klass), :utc,
                s(:lvar, :yy),
                s(:lvar, :m),
                s(:lvar, :dd),
                s(:lvar, :hh),
                s(:lvar, :mm),
                s(:lvar, :ss),
                s(:lvar, :us))),
            s(:if,
              s(:send,
                s(:str, "Z"), :==,
                s(:send,
                  s(:lvar, :md), :[],
                  s(:int, 3))),
              s(:return,
                s(:lvar, :time)), nil),
            s(:if,
              s(:send,
                s(:lvar, :md), :[],
                s(:int, 3)), nil,
              s(:return,
                s(:send,
                  s(:lvar, :klass), :at,
                  s(:send,
                    s(:lvar, :time), :to_i),
                  s(:lvar, :us)))),
            s(:lvasgn, :tz,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :md), :[],
                          s(:int, 3)), :match,
                        s(:regexp,
                          s(:str, "^([+\\-]?\\d{1,2})\\:?(\\d{1,2})?$"),
                          s(:regopt))), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1))), :compact), :map),
                s(:args,
                  s(:arg, :digit)),
                s(:send, nil, :Integer,
                  s(:lvar, :digit),
                  s(:int, 10)))),
            s(:lvasgn, :offset,
              s(:send,
                s(:send,
                  s(:lvar, :tz), :first), :*,
                s(:int, 3600))),
            s(:if,
              s(:send,
                s(:lvar, :offset), :<,
                s(:int, 0)),
              s(:op_asgn,
                s(:lvasgn, :offset), :-,
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :tz), :[],
                          s(:int, 1)),
                        s(:int, 0))), :*,
                    s(:int, 60)))),
              s(:op_asgn,
                s(:lvasgn, :offset), :+,
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :tz), :[],
                          s(:int, 1)),
                        s(:int, 0))), :*,
                    s(:int, 60))))),
            s(:send,
              s(:lvar, :klass), :at,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :time), :-,
                    s(:lvar, :offset))), :to_i),
              s(:lvar, :us))))))))
