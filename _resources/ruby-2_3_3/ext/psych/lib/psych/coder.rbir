s(:module,
  s(:const, nil, :Psych),
  s(:class,
    s(:const, nil, :Coder), nil,
    s(:begin,
      s(:send, nil, :attr_accessor,
        s(:sym, :tag),
        s(:sym, :style),
        s(:sym, :implicit),
        s(:sym, :object)),
      s(:send, nil, :attr_reader,
        s(:sym, :type),
        s(:sym, :seq)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :tag)),
        s(:begin,
          s(:ivasgn, :@map,
            s(:hash)),
          s(:ivasgn, :@seq,
            s(:array)),
          s(:ivasgn, :@implicit,
            s(:false)),
          s(:ivasgn, :@type,
            s(:sym, :map)),
          s(:ivasgn, :@tag,
            s(:lvar, :tag)),
          s(:ivasgn, :@style,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Nodes), :Mapping), :BLOCK)),
          s(:ivasgn, :@scalar,
            s(:nil)),
          s(:ivasgn, :@object,
            s(:nil)))),
      s(:def, :scalar,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :length), :>,
              s(:int, 0)),
            s(:begin,
              s(:if,
                s(:gvar, :$VERBOSE),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:send, nil, :caller), :[],
                        s(:int, 0))),
                    s(:str, ": Coder#scalar(a,b,c) is deprecated"))), nil),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@scalar),
                  s(:lvasgn, :_)),
                s(:lvar, :args)),
              s(:ivasgn, :@type,
                s(:sym, :scalar))), nil),
          s(:ivar, :@scalar))),
      s(:def, :map,
        s(:args,
          s(:optarg, :tag,
            s(:ivar, :@tag)),
          s(:optarg, :style,
            s(:ivar, :@style))),
        s(:begin,
          s(:ivasgn, :@tag,
            s(:lvar, :tag)),
          s(:ivasgn, :@style,
            s(:lvar, :style)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:self)), nil),
          s(:ivar, :@map))),
      s(:def, :represent_scalar,
        s(:args,
          s(:arg, :tag),
          s(:arg, :value)),
        s(:begin,
          s(:send,
            s(:self), :tag=,
            s(:lvar, :tag)),
          s(:send,
            s(:self), :scalar=,
            s(:lvar, :value)))),
      s(:def, :represent_seq,
        s(:args,
          s(:arg, :tag),
          s(:arg, :list)),
        s(:begin,
          s(:ivasgn, :@tag,
            s(:lvar, :tag)),
          s(:send,
            s(:self), :seq=,
            s(:lvar, :list)))),
      s(:def, :represent_map,
        s(:args,
          s(:arg, :tag),
          s(:arg, :map)),
        s(:begin,
          s(:ivasgn, :@tag,
            s(:lvar, :tag)),
          s(:send,
            s(:self), :map=,
            s(:lvar, :map)))),
      s(:def, :represent_object,
        s(:args,
          s(:arg, :tag),
          s(:arg, :obj)),
        s(:begin,
          s(:ivasgn, :@tag,
            s(:lvar, :tag)),
          s(:ivasgn, :@type,
            s(:sym, :object)),
          s(:ivasgn, :@object,
            s(:lvar, :obj)))),
      s(:def, :scalar=,
        s(:args,
          s(:arg, :value)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :scalar)),
          s(:ivasgn, :@scalar,
            s(:lvar, :value)))),
      s(:def, :map=,
        s(:args,
          s(:arg, :map)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :map)),
          s(:ivasgn, :@map,
            s(:lvar, :map)))),
      s(:def, :[]=,
        s(:args,
          s(:arg, :k),
          s(:arg, :v)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :map)),
          s(:send,
            s(:ivar, :@map), :[]=,
            s(:lvar, :k),
            s(:lvar, :v)))),
      s(:alias,
        s(:sym, :add),
        s(:sym, :[]=)),
      s(:def, :[],
        s(:args,
          s(:arg, :k)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :map)),
          s(:send,
            s(:ivar, :@map), :[],
            s(:lvar, :k)))),
      s(:def, :seq=,
        s(:args,
          s(:arg, :list)),
        s(:begin,
          s(:ivasgn, :@type,
            s(:sym, :seq)),
          s(:ivasgn, :@seq,
            s(:lvar, :list)))))))
