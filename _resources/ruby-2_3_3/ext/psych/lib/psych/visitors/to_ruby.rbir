s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/scalar_scanner")),
  s(:send, nil, :require,
    s(:str, "psych/class_loader")),
  s(:send, nil, :require,
    s(:str, "psych/exception")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :Regexp), :NOENCODING)), nil,
    s(:casgn,
      s(:const, nil, :Regexp), :NOENCODING,
      s(:int, 32))),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :Visitors),
      s(:begin,
        s(:class,
          s(:const, nil, :ToRuby),
          s(:const,
            s(:const,
              s(:const, nil, :Psych), :Visitors), :Visitor),
          s(:begin,
            s(:defs,
              s(:self), :create,
              s(:args),
              s(:begin,
                s(:lvasgn, :class_loader,
                  s(:send,
                    s(:const, nil, :ClassLoader), :new)),
                s(:lvasgn, :scanner,
                  s(:send,
                    s(:const, nil, :ScalarScanner), :new,
                    s(:lvar, :class_loader))),
                s(:send, nil, :new,
                  s(:lvar, :scanner),
                  s(:lvar, :class_loader)))),
            s(:send, nil, :attr_reader,
              s(:sym, :class_loader)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :ss),
                s(:arg, :class_loader)),
              s(:begin,
                s(:super),
                s(:ivasgn, :@st,
                  s(:hash)),
                s(:ivasgn, :@ss,
                  s(:lvar, :ss)),
                s(:ivasgn, :@domain_types,
                  s(:send,
                    s(:const, nil, :Psych), :domain_types)),
                s(:ivasgn, :@class_loader,
                  s(:lvar, :class_loader)))),
            s(:def, :accept,
              s(:args,
                s(:arg, :target)),
              s(:begin,
                s(:lvasgn, :result,
                  s(:zsuper)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:ivar, :@domain_types), :empty?),
                    s(:send,
                      s(:send,
                        s(:lvar, :target), :tag), :!)),
                  s(:return,
                    s(:lvar, :result)), nil),
                s(:lvasgn, :key,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :target), :tag), :sub,
                      s(:regexp,
                        s(:str, "^[!/]*"),
                        s(:regopt)),
                      s(:str, "")), :sub,
                    s(:regexp,
                      s(:str, "(,\\d+)/"),
                      s(:regopt)),
                    s(:str, "\\1:"))),
                s(:if,
                  s(:send,
                    s(:lvar, :key), :=~,
                    s(:regexp,
                      s(:str, "^(?:tag:|x-private)"),
                      s(:regopt))), nil,
                  s(:lvasgn, :key,
                    s(:dstr,
                      s(:str, "tag:"),
                      s(:begin,
                        s(:lvar, :key))))),
                s(:if,
                  s(:send,
                    s(:ivar, :@domain_types), :key?,
                    s(:lvar, :key)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :value),
                        s(:lvasgn, :block)),
                      s(:send,
                        s(:ivar, :@domain_types), :[],
                        s(:lvar, :key))),
                    s(:return,
                      s(:send,
                        s(:lvar, :block), :call,
                        s(:lvar, :value),
                        s(:lvar, :result)))), nil),
                s(:lvar, :result))),
            s(:def, :deserialize,
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :klass,
                    s(:send, nil, :resolve_class,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Psych), :load_tags), :[],
                        s(:send,
                          s(:lvar, :o), :tag)))),
                  s(:begin,
                    s(:lvasgn, :instance,
                      s(:send,
                        s(:lvar, :klass), :allocate)),
                    s(:if,
                      s(:send,
                        s(:lvar, :instance), :respond_to?,
                        s(:sym, :init_with)),
                      s(:begin,
                        s(:lvasgn, :coder,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Psych), :Coder), :new,
                            s(:send,
                              s(:lvar, :o), :tag))),
                        s(:send,
                          s(:lvar, :coder), :scalar=,
                          s(:send,
                            s(:lvar, :o), :value)),
                        s(:send,
                          s(:lvar, :instance), :init_with,
                          s(:lvar, :coder))), nil),
                    s(:return,
                      s(:lvar, :instance))), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :o), :quoted),
                  s(:return,
                    s(:send,
                      s(:lvar, :o), :value)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :o), :tag), nil,
                  s(:return,
                    s(:send,
                      s(:ivar, :@ss), :tokenize,
                      s(:send,
                        s(:lvar, :o), :value)))),
                s(:case,
                  s(:send,
                    s(:lvar, :o), :tag),
                  s(:when,
                    s(:str, "!binary"),
                    s(:str, "tag:yaml.org,2002:binary"),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :value), :unpack,
                        s(:str, "m")), :first)),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!(?:str|ruby/string)(?::(.*))?$"),
                      s(:regopt)),
                    s(:str, "tag:yaml.org,2002:str"),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send, nil, :resolve_class,
                          s(:nth_ref, 1))),
                      s(:if,
                        s(:lvar, :klass),
                        s(:send,
                          s(:send,
                            s(:lvar, :klass), :allocate), :replace,
                          s(:send,
                            s(:lvar, :o), :value)),
                        s(:send,
                          s(:lvar, :o), :value)))),
                  s(:when,
                    s(:str, "!ruby/object:BigDecimal"),
                    s(:begin,
                      s(:send, nil, :require,
                        s(:str, "bigdecimal")),
                      s(:send,
                        s(:send,
                          s(:send, nil, :class_loader), :big_decimal), :_load,
                        s(:send,
                          s(:lvar, :o), :value)))),
                  s(:when,
                    s(:str, "!ruby/object:DateTime"),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :class_loader), :date_time),
                      s(:send, nil, :require,
                        s(:str, "date")),
                      s(:send,
                        s(:send,
                          s(:ivar, :@ss), :parse_time,
                          s(:send,
                            s(:lvar, :o), :value)), :to_datetime))),
                  s(:when,
                    s(:str, "!ruby/encoding"),
                    s(:send,
                      s(:const,
                        s(:cbase), :Encoding), :find,
                      s(:send,
                        s(:lvar, :o), :value))),
                  s(:when,
                    s(:str, "!ruby/object:Complex"),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :class_loader), :complex),
                      s(:send, nil, :Complex,
                        s(:send,
                          s(:lvar, :o), :value)))),
                  s(:when,
                    s(:str, "!ruby/object:Rational"),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :class_loader), :rational),
                      s(:send, nil, :Rational,
                        s(:send,
                          s(:lvar, :o), :value)))),
                  s(:when,
                    s(:str, "!ruby/class"),
                    s(:str, "!ruby/module"),
                    s(:send, nil, :resolve_class,
                      s(:send,
                        s(:lvar, :o), :value))),
                  s(:when,
                    s(:str, "tag:yaml.org,2002:float"),
                    s(:str, "!float"),
                    s(:send, nil, :Float,
                      s(:send,
                        s(:ivar, :@ss), :tokenize,
                        s(:send,
                          s(:lvar, :o), :value)))),
                  s(:when,
                    s(:str, "!ruby/regexp"),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send,
                          s(:send, nil, :class_loader), :regexp)),
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :value), :=~,
                        s(:regexp,
                          s(:str, "^/(.*)/([mixn]*)$"),
                          s(:regopt, :m))),
                      s(:lvasgn, :source,
                        s(:nth_ref, 1)),
                      s(:lvasgn, :options,
                        s(:int, 0)),
                      s(:lvasgn, :lang,
                        s(:nil)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:begin,
                              s(:or,
                                s(:nth_ref, 2),
                                s(:str, ""))), :split,
                            s(:str, "")), :each),
                        s(:args,
                          s(:arg, :option)),
                        s(:case,
                          s(:lvar, :option),
                          s(:when,
                            s(:str, "x"),
                            s(:op_asgn,
                              s(:lvasgn, :options), :|,
                              s(:const,
                                s(:const, nil, :Regexp), :EXTENDED))),
                          s(:when,
                            s(:str, "i"),
                            s(:op_asgn,
                              s(:lvasgn, :options), :|,
                              s(:const,
                                s(:const, nil, :Regexp), :IGNORECASE))),
                          s(:when,
                            s(:str, "m"),
                            s(:op_asgn,
                              s(:lvasgn, :options), :|,
                              s(:const,
                                s(:const, nil, :Regexp), :MULTILINE))),
                          s(:when,
                            s(:str, "n"),
                            s(:op_asgn,
                              s(:lvasgn, :options), :|,
                              s(:const,
                                s(:const, nil, :Regexp), :NOENCODING))),
                          s(:lvasgn, :lang,
                            s(:lvar, :option)))),
                      s(:send,
                        s(:lvar, :klass), :new,
                        s(:splat,
                          s(:send,
                            s(:array,
                              s(:lvar, :source),
                              s(:lvar, :options),
                              s(:lvar, :lang)), :compact))))),
                  s(:when,
                    s(:str, "!ruby/range"),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send,
                          s(:send, nil, :class_loader), :range)),
                      s(:lvasgn, :args,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :o), :value), :split,
                              s(:regexp,
                                s(:str, "([.]{2,3})"),
                                s(:regopt)),
                              s(:int, 2)), :map),
                          s(:args,
                            s(:arg, :s)),
                          s(:send, nil, :accept,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Nodes), :Scalar), :new,
                              s(:lvar, :s))))),
                      s(:send,
                        s(:lvar, :args), :push,
                        s(:send,
                          s(:send,
                            s(:lvar, :args), :delete_at,
                            s(:int, 1)), :==,
                          s(:str, "..."))),
                      s(:send,
                        s(:lvar, :klass), :new,
                        s(:splat,
                          s(:lvar, :args))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/sym(bol)?:?(.*)?$"),
                      s(:regopt)),
                    s(:send,
                      s(:send, nil, :class_loader), :symbolize,
                      s(:send,
                        s(:lvar, :o), :value))),
                  s(:send,
                    s(:ivar, :@ss), :tokenize,
                    s(:send,
                      s(:lvar, :o), :value))))),
            s(:send, nil, :private,
              s(:sym, :deserialize)),
            s(:def, :visit_Psych_Nodes_Scalar,
              s(:args,
                s(:arg, :o)),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send, nil, :deserialize,
                  s(:lvar, :o)))),
            s(:def, :visit_Psych_Nodes_Sequence,
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :klass,
                    s(:send, nil, :resolve_class,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Psych), :load_tags), :[],
                        s(:send,
                          s(:lvar, :o), :tag)))),
                  s(:begin,
                    s(:lvasgn, :instance,
                      s(:send,
                        s(:lvar, :klass), :allocate)),
                    s(:if,
                      s(:send,
                        s(:lvar, :instance), :respond_to?,
                        s(:sym, :init_with)),
                      s(:begin,
                        s(:lvasgn, :coder,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Psych), :Coder), :new,
                            s(:send,
                              s(:lvar, :o), :tag))),
                        s(:send,
                          s(:lvar, :coder), :seq=,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :o), :children), :map),
                            s(:args,
                              s(:arg, :c)),
                            s(:send, nil, :accept,
                              s(:lvar, :c)))),
                        s(:send,
                          s(:lvar, :instance), :init_with,
                          s(:lvar, :coder))), nil),
                    s(:return,
                      s(:lvar, :instance))), nil),
                s(:case,
                  s(:send,
                    s(:lvar, :o), :tag),
                  s(:when,
                    s(:nil),
                    s(:send, nil, :register_empty,
                      s(:lvar, :o))),
                  s(:when,
                    s(:str, "!omap"),
                    s(:str, "tag:yaml.org,2002:omap"),
                    s(:begin,
                      s(:lvasgn, :map,
                        s(:send, nil, :register,
                          s(:lvar, :o),
                          s(:send,
                            s(:const,
                              s(:const, nil, :Psych), :Omap), :new))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :children), :each),
                        s(:args,
                          s(:arg, :a)),
                        s(:send,
                          s(:lvar, :map), :[]=,
                          s(:send, nil, :accept,
                            s(:send,
                              s(:send,
                                s(:lvar, :a), :children), :first)),
                          s(:send, nil, :accept,
                            s(:send,
                              s(:send,
                                s(:lvar, :a), :children), :last)))),
                      s(:lvar, :map))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!(?:seq|ruby/array):(.*)$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send, nil, :resolve_class,
                          s(:nth_ref, 1))),
                      s(:lvasgn, :list,
                        s(:send, nil, :register,
                          s(:lvar, :o),
                          s(:send,
                            s(:lvar, :klass), :allocate))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :children), :each),
                        s(:args,
                          s(:arg, :c)),
                        s(:send,
                          s(:lvar, :list), :push,
                          s(:send, nil, :accept,
                            s(:lvar, :c)))),
                      s(:lvar, :list))),
                  s(:send, nil, :register_empty,
                    s(:lvar, :o))))),
            s(:def, :visit_Psych_Nodes_Mapping,
              s(:args,
                s(:arg, :o)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Psych), :load_tags), :[],
                    s(:send,
                      s(:lvar, :o), :tag)),
                  s(:return,
                    s(:send, nil, :revive,
                      s(:send, nil, :resolve_class,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Psych), :load_tags), :[],
                          s(:send,
                            s(:lvar, :o), :tag))),
                      s(:lvar, :o))), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :o), :tag), nil,
                  s(:return,
                    s(:send, nil, :revive_hash,
                      s(:send, nil, :register,
                        s(:lvar, :o),
                        s(:hash)),
                      s(:lvar, :o)))),
                s(:case,
                  s(:send,
                    s(:lvar, :o), :tag),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/struct:?(.*)?$"),
                      s(:regopt)),
                    s(:begin,
                      s(:if,
                        s(:nth_ref, 1),
                        s(:lvasgn, :klass,
                          s(:send, nil, :resolve_class,
                            s(:nth_ref, 1))), nil),
                      s(:if,
                        s(:lvar, :klass),
                        s(:begin,
                          s(:lvasgn, :s,
                            s(:send, nil, :register,
                              s(:lvar, :o),
                              s(:send,
                                s(:lvar, :klass), :allocate))),
                          s(:lvasgn, :members,
                            s(:hash)),
                          s(:lvasgn, :struct_members,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :s), :members), :map),
                              s(:args,
                                s(:arg, :x)),
                              s(:send,
                                s(:send, nil, :class_loader), :symbolize,
                                s(:lvar, :x)))),
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :o), :children), :each_slice,
                              s(:int, 2)),
                            s(:args,
                              s(:arg, :k),
                              s(:arg, :v)),
                            s(:begin,
                              s(:lvasgn, :member,
                                s(:send, nil, :accept,
                                  s(:lvar, :k))),
                              s(:lvasgn, :value,
                                s(:send, nil, :accept,
                                  s(:lvar, :v))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :struct_members), :include?,
                                  s(:send,
                                    s(:send, nil, :class_loader), :symbolize,
                                    s(:lvar, :member))),
                                s(:send,
                                  s(:lvar, :s), :send,
                                  s(:dstr,
                                    s(:begin,
                                      s(:lvar, :member)),
                                    s(:str, "=")),
                                  s(:lvar, :value)),
                                s(:send,
                                  s(:lvar, :members), :[]=,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :member), :to_s), :sub,
                                    s(:regexp,
                                      s(:str, "^@"),
                                      s(:regopt)),
                                    s(:str, "")),
                                  s(:lvar, :value))))),
                          s(:send, nil, :init_with,
                            s(:lvar, :s),
                            s(:lvar, :members),
                            s(:lvar, :o))),
                        s(:begin,
                          s(:lvasgn, :klass,
                            s(:send,
                              s(:send, nil, :class_loader), :struct)),
                          s(:lvasgn, :members,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :o), :children), :map),
                              s(:args,
                                s(:arg, :c)),
                              s(:send, nil, :accept,
                                s(:lvar, :c)))),
                          s(:lvasgn, :h,
                            s(:send,
                              s(:const, nil, :Hash), :[],
                              s(:splat,
                                s(:lvar, :members)))),
                          s(:lvasgn, :s,
                            s(:send,
                              s(:send,
                                s(:lvar, :klass), :new,
                                s(:splat,
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :h), :map),
                                    s(:args,
                                      s(:arg, :k),
                                      s(:arg, :v)),
                                    s(:send,
                                      s(:send, nil, :class_loader), :symbolize,
                                      s(:lvar, :k))))), :new,
                              s(:splat,
                                s(:block,
                                  s(:send,
                                    s(:lvar, :h), :map),
                                  s(:args,
                                    s(:arg, :k),
                                    s(:arg, :v)),
                                  s(:lvar, :v))))),
                          s(:send, nil, :register,
                            s(:lvar, :o),
                            s(:lvar, :s)),
                          s(:lvar, :s))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/object:?(.*)?$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:or,
                          s(:nth_ref, 1),
                          s(:str, "Object"))),
                      s(:if,
                        s(:send,
                          s(:lvar, :name), :==,
                          s(:str, "Complex")),
                        s(:begin,
                          s(:send,
                            s(:send, nil, :class_loader), :complex),
                          s(:lvasgn, :h,
                            s(:send,
                              s(:const, nil, :Hash), :[],
                              s(:splat,
                                s(:block,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :o), :children), :map),
                                  s(:args,
                                    s(:arg, :c)),
                                  s(:send, nil, :accept,
                                    s(:lvar, :c)))))),
                          s(:send, nil, :register,
                            s(:lvar, :o),
                            s(:send, nil, :Complex,
                              s(:send,
                                s(:lvar, :h), :[],
                                s(:str, "real")),
                              s(:send,
                                s(:lvar, :h), :[],
                                s(:str, "image"))))),
                        s(:if,
                          s(:send,
                            s(:lvar, :name), :==,
                            s(:str, "Rational")),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :class_loader), :rational),
                            s(:lvasgn, :h,
                              s(:send,
                                s(:const, nil, :Hash), :[],
                                s(:splat,
                                  s(:block,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :o), :children), :map),
                                    s(:args,
                                      s(:arg, :c)),
                                    s(:send, nil, :accept,
                                      s(:lvar, :c)))))),
                            s(:send, nil, :register,
                              s(:lvar, :o),
                              s(:send, nil, :Rational,
                                s(:send,
                                  s(:lvar, :h), :[],
                                  s(:str, "numerator")),
                                s(:send,
                                  s(:lvar, :h), :[],
                                  s(:str, "denominator"))))),
                          s(:if,
                            s(:send,
                              s(:lvar, :name), :==,
                              s(:str, "Hash")),
                            s(:send, nil, :revive_hash,
                              s(:send, nil, :register,
                                s(:lvar, :o),
                                s(:hash)),
                              s(:lvar, :o)),
                            s(:begin,
                              s(:lvasgn, :obj,
                                s(:send, nil, :revive,
                                  s(:begin,
                                    s(:or,
                                      s(:send, nil, :resolve_class,
                                        s(:lvar, :name)),
                                      s(:send,
                                        s(:send, nil, :class_loader), :object))),
                                  s(:lvar, :o))),
                              s(:lvar, :obj))))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!(?:str|ruby/string)(?::(.*))?$"),
                      s(:regopt)),
                    s(:str, "tag:yaml.org,2002:str"),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send, nil, :resolve_class,
                          s(:nth_ref, 1))),
                      s(:lvasgn, :members,
                        s(:hash)),
                      s(:lvasgn, :string,
                        s(:nil)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :children), :each_slice,
                          s(:int, 2)),
                        s(:args,
                          s(:arg, :k),
                          s(:arg, :v)),
                        s(:begin,
                          s(:lvasgn, :key,
                            s(:send, nil, :accept,
                              s(:lvar, :k))),
                          s(:lvasgn, :value,
                            s(:send, nil, :accept,
                              s(:lvar, :v))),
                          s(:if,
                            s(:send,
                              s(:lvar, :key), :==,
                              s(:str, "str")),
                            s(:begin,
                              s(:if,
                                s(:lvar, :klass),
                                s(:lvasgn, :string,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :klass), :allocate), :replace,
                                    s(:lvar, :value))),
                                s(:lvasgn, :string,
                                  s(:lvar, :value))),
                              s(:send, nil, :register,
                                s(:lvar, :o),
                                s(:lvar, :string))),
                            s(:send,
                              s(:lvar, :members), :[]=,
                              s(:lvar, :key),
                              s(:lvar, :value))))),
                      s(:send, nil, :init_with,
                        s(:lvar, :string),
                        s(:block,
                          s(:send,
                            s(:lvar, :members), :map),
                          s(:args,
                            s(:arg, :k),
                            s(:arg, :v)),
                          s(:array,
                            s(:send,
                              s(:send,
                                s(:lvar, :k), :to_s), :sub,
                              s(:regexp,
                                s(:str, "^@"),
                                s(:regopt)),
                              s(:str, "")),
                            s(:lvar, :v))),
                        s(:lvar, :o)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/array:(.*)$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send, nil, :resolve_class,
                          s(:nth_ref, 1))),
                      s(:lvasgn, :list,
                        s(:send, nil, :register,
                          s(:lvar, :o),
                          s(:send,
                            s(:lvar, :klass), :allocate))),
                      s(:lvasgn, :members,
                        s(:send,
                          s(:const, nil, :Hash), :[],
                          s(:send,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :o), :children), :map),
                                s(:args,
                                  s(:arg, :c)),
                                s(:send, nil, :accept,
                                  s(:lvar, :c))), :each_slice,
                              s(:int, 2)), :to_a))),
                      s(:send,
                        s(:lvar, :list), :replace,
                        s(:send,
                          s(:lvar, :members), :[],
                          s(:str, "internal"))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :members), :[],
                            s(:str, "ivars")), :each),
                        s(:args,
                          s(:arg, :ivar),
                          s(:arg, :v)),
                        s(:send,
                          s(:lvar, :list), :instance_variable_set,
                          s(:lvar, :ivar),
                          s(:lvar, :v))),
                      s(:lvar, :list))),
                  s(:when,
                    s(:str, "!ruby/range"),
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send,
                          s(:send, nil, :class_loader), :range)),
                      s(:lvasgn, :h,
                        s(:send,
                          s(:const, nil, :Hash), :[],
                          s(:splat,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :o), :children), :map),
                              s(:args,
                                s(:arg, :c)),
                              s(:send, nil, :accept,
                                s(:lvar, :c)))))),
                      s(:send, nil, :register,
                        s(:lvar, :o),
                        s(:send,
                          s(:lvar, :klass), :new,
                          s(:send,
                            s(:lvar, :h), :[],
                            s(:str, "begin")),
                          s(:send,
                            s(:lvar, :h), :[],
                            s(:str, "end")),
                          s(:send,
                            s(:lvar, :h), :[],
                            s(:str, "excl")))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/exception:?(.*)?$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :h,
                        s(:send,
                          s(:const, nil, :Hash), :[],
                          s(:splat,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :o), :children), :map),
                              s(:args,
                                s(:arg, :c)),
                              s(:send, nil, :accept,
                                s(:lvar, :c)))))),
                      s(:lvasgn, :e,
                        s(:send, nil, :build_exception,
                          s(:begin,
                            s(:or,
                              s(:send, nil, :resolve_class,
                                s(:nth_ref, 1)),
                              s(:send,
                                s(:send, nil, :class_loader), :exception))),
                          s(:send,
                            s(:lvar, :h), :delete,
                            s(:str, "message")))),
                      s(:send, nil, :init_with,
                        s(:lvar, :e),
                        s(:lvar, :h),
                        s(:lvar, :o)))),
                  s(:when,
                    s(:str, "!set"),
                    s(:str, "tag:yaml.org,2002:set"),
                    s(:begin,
                      s(:lvasgn, :set,
                        s(:send,
                          s(:send,
                            s(:send, nil, :class_loader), :psych_set), :new)),
                      s(:if,
                        s(:send,
                          s(:lvar, :o), :anchor),
                        s(:send,
                          s(:ivar, :@st), :[]=,
                          s(:send,
                            s(:lvar, :o), :anchor),
                          s(:lvar, :set)), nil),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :children), :each_slice,
                          s(:int, 2)),
                        s(:args,
                          s(:arg, :k),
                          s(:arg, :v)),
                        s(:send,
                          s(:lvar, :set), :[]=,
                          s(:send, nil, :accept,
                            s(:lvar, :k)),
                          s(:send, nil, :accept,
                            s(:lvar, :v)))),
                      s(:lvar, :set))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/hash-with-ivars(?::(.*))?$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :hash,
                        s(:if,
                          s(:nth_ref, 1),
                          s(:send,
                            s(:send, nil, :resolve_class,
                              s(:nth_ref, 1)), :allocate),
                          s(:hash))),
                      s(:send, nil, :register,
                        s(:lvar, :o),
                        s(:lvar, :hash)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :children), :each_slice,
                          s(:int, 2)),
                        s(:args,
                          s(:arg, :key),
                          s(:arg, :value)),
                        s(:case,
                          s(:send,
                            s(:lvar, :key), :value),
                          s(:when,
                            s(:str, "elements"),
                            s(:send, nil, :revive_hash,
                              s(:lvar, :hash),
                              s(:lvar, :value))),
                          s(:when,
                            s(:str, "ivars"),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :value), :children), :each_slice,
                                s(:int, 2)),
                              s(:args,
                                s(:arg, :k),
                                s(:arg, :v)),
                              s(:send,
                                s(:lvar, :hash), :instance_variable_set,
                                s(:send, nil, :accept,
                                  s(:lvar, :k)),
                                s(:send, nil, :accept,
                                  s(:lvar, :v))))), nil)),
                      s(:lvar, :hash))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!map:(.*)$"),
                      s(:regopt)),
                    s(:regexp,
                      s(:str, "^!ruby/hash:(.*)$"),
                      s(:regopt)),
                    s(:send, nil, :revive_hash,
                      s(:send, nil, :register,
                        s(:lvar, :o),
                        s(:send,
                          s(:send, nil, :resolve_class,
                            s(:nth_ref, 1)), :allocate)),
                      s(:lvar, :o))),
                  s(:when,
                    s(:str, "!omap"),
                    s(:str, "tag:yaml.org,2002:omap"),
                    s(:begin,
                      s(:lvasgn, :map,
                        s(:send, nil, :register,
                          s(:lvar, :o),
                          s(:send,
                            s(:send,
                              s(:send, nil, :class_loader), :psych_omap), :new))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :children), :each_slice,
                          s(:int, 2)),
                        s(:args,
                          s(:arg, :l),
                          s(:arg, :r)),
                        s(:send,
                          s(:lvar, :map), :[]=,
                          s(:send, nil, :accept,
                            s(:lvar, :l)),
                          s(:send, nil, :accept,
                            s(:lvar, :r)))),
                      s(:lvar, :map))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^!ruby/marshalable:(.*)$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:nth_ref, 1)),
                      s(:lvasgn, :klass,
                        s(:send, nil, :resolve_class,
                          s(:lvar, :name))),
                      s(:lvasgn, :obj,
                        s(:send, nil, :register,
                          s(:lvar, :o),
                          s(:send,
                            s(:lvar, :klass), :allocate))),
                      s(:if,
                        s(:send,
                          s(:lvar, :obj), :respond_to?,
                          s(:sym, :init_with)),
                        s(:send, nil, :init_with,
                          s(:lvar, :obj),
                          s(:send, nil, :revive_hash,
                            s(:hash),
                            s(:lvar, :o)),
                          s(:lvar, :o)),
                        s(:if,
                          s(:send,
                            s(:lvar, :obj), :respond_to?,
                            s(:sym, :marshal_load)),
                          s(:begin,
                            s(:lvasgn, :marshal_data,
                              s(:send,
                                s(:send,
                                  s(:lvar, :o), :children), :map,
                                s(:block_pass,
                                  s(:send, nil, :method,
                                    s(:sym, :accept))))),
                            s(:send,
                              s(:lvar, :obj), :marshal_load,
                              s(:lvar, :marshal_data)),
                            s(:lvar, :obj)),
                          s(:send, nil, :raise,
                            s(:const, nil, :ArgumentError),
                            s(:dstr,
                              s(:str, "Cannot deserialize "),
                              s(:begin,
                                s(:lvar, :name)))))))),
                  s(:send, nil, :revive_hash,
                    s(:send, nil, :register,
                      s(:lvar, :o),
                      s(:hash)),
                    s(:lvar, :o))))),
            s(:def, :visit_Psych_Nodes_Document,
              s(:args,
                s(:arg, :o)),
              s(:send, nil, :accept,
                s(:send,
                  s(:lvar, :o), :root))),
            s(:def, :visit_Psych_Nodes_Stream,
              s(:args,
                s(:arg, :o)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :o), :children), :map),
                s(:args,
                  s(:arg, :c)),
                s(:send, nil, :accept,
                  s(:lvar, :c)))),
            s(:def, :visit_Psych_Nodes_Alias,
              s(:args,
                s(:arg, :o)),
              s(:block,
                s(:send,
                  s(:ivar, :@st), :fetch,
                  s(:send,
                    s(:lvar, :o), :anchor)),
                s(:args),
                s(:send, nil, :raise,
                  s(:const, nil, :BadAlias),
                  s(:dstr,
                    s(:str, "Unknown alias: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :o), :anchor)))))),
            s(:send, nil, :private),
            s(:def, :register,
              s(:args,
                s(:arg, :node),
                s(:arg, :object)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :node), :anchor),
                  s(:send,
                    s(:ivar, :@st), :[]=,
                    s(:send,
                      s(:lvar, :node), :anchor),
                    s(:lvar, :object)), nil),
                s(:lvar, :object))),
            s(:def, :register_empty,
              s(:args,
                s(:arg, :object)),
              s(:begin,
                s(:lvasgn, :list,
                  s(:send, nil, :register,
                    s(:lvar, :object),
                    s(:array))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :object), :children), :each),
                  s(:args,
                    s(:arg, :c)),
                  s(:send,
                    s(:lvar, :list), :push,
                    s(:send, nil, :accept,
                      s(:lvar, :c)))),
                s(:lvar, :list))),
            s(:casgn, nil, :SHOVEL,
              s(:str, "<<")),
            s(:def, :revive_hash,
              s(:args,
                s(:arg, :hash),
                s(:arg, :o)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :o), :children), :each_slice,
                    s(:int, 2)),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v)),
                  s(:begin,
                    s(:lvasgn, :key,
                      s(:send, nil, :accept,
                        s(:lvar, :k))),
                    s(:lvasgn, :val,
                      s(:send, nil, :accept,
                        s(:lvar, :v))),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :key), :==,
                          s(:const, nil, :SHOVEL)),
                        s(:send,
                          s(:send,
                            s(:lvar, :k), :tag), :!=,
                          s(:str, "tag:yaml.org,2002:str"))),
                      s(:case,
                        s(:lvar, :v),
                        s(:when,
                          s(:const,
                            s(:const, nil, :Nodes), :Alias),
                          s(:const,
                            s(:const, nil, :Nodes), :Mapping),
                          s(:kwbegin,
                            s(:rescue,
                              s(:send,
                                s(:lvar, :hash), :merge!,
                                s(:lvar, :val)),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :TypeError)), nil,
                                s(:send,
                                  s(:lvar, :hash), :[]=,
                                  s(:lvar, :key),
                                  s(:lvar, :val))), nil))),
                        s(:when,
                          s(:const,
                            s(:const, nil, :Nodes), :Sequence),
                          s(:kwbegin,
                            s(:rescue,
                              s(:begin,
                                s(:lvasgn, :h,
                                  s(:hash)),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :val), :reverse_each),
                                  s(:args,
                                    s(:arg, :value)),
                                  s(:send,
                                    s(:lvar, :h), :merge!,
                                    s(:lvar, :value))),
                                s(:send,
                                  s(:lvar, :hash), :merge!,
                                  s(:lvar, :h))),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :TypeError)), nil,
                                s(:send,
                                  s(:lvar, :hash), :[]=,
                                  s(:lvar, :key),
                                  s(:lvar, :val))), nil))),
                        s(:send,
                          s(:lvar, :hash), :[]=,
                          s(:lvar, :key),
                          s(:lvar, :val))),
                      s(:send,
                        s(:lvar, :hash), :[]=,
                        s(:lvar, :key),
                        s(:lvar, :val))))),
                s(:lvar, :hash))),
            s(:def, :merge_key,
              s(:args,
                s(:arg, :hash),
                s(:arg, :key),
                s(:arg, :val)), nil),
            s(:def, :revive,
              s(:args,
                s(:arg, :klass),
                s(:arg, :node)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send, nil, :register,
                    s(:lvar, :node),
                    s(:send,
                      s(:lvar, :klass), :allocate))),
                s(:send, nil, :init_with,
                  s(:lvar, :s),
                  s(:send, nil, :revive_hash,
                    s(:hash),
                    s(:lvar, :node)),
                  s(:lvar, :node)))),
            s(:def, :init_with,
              s(:args,
                s(:arg, :o),
                s(:arg, :h),
                s(:arg, :node)),
              s(:begin,
                s(:lvasgn, :c,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Psych), :Coder), :new,
                    s(:send,
                      s(:lvar, :node), :tag))),
                s(:send,
                  s(:lvar, :c), :map=,
                  s(:lvar, :h)),
                s(:if,
                  s(:send,
                    s(:lvar, :o), :respond_to?,
                    s(:sym, :init_with)),
                  s(:send,
                    s(:lvar, :o), :init_with,
                    s(:lvar, :c)),
                  s(:if,
                    s(:send,
                      s(:lvar, :o), :respond_to?,
                      s(:sym, :yaml_initialize)),
                    s(:begin,
                      s(:if,
                        s(:gvar, :$VERBOSE),
                        s(:send, nil, :warn,
                          s(:dstr,
                            s(:str, "Implementing "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :o), :class)),
                            s(:str, "#yaml_initialize is deprecated, please implement \"init_with(coder)\""))), nil),
                      s(:send,
                        s(:lvar, :o), :yaml_initialize,
                        s(:send,
                          s(:lvar, :c), :tag),
                        s(:send,
                          s(:lvar, :c), :map))),
                    s(:block,
                      s(:send,
                        s(:lvar, :h), :each),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v)),
                      s(:send,
                        s(:lvar, :o), :instance_variable_set,
                        s(:dsym,
                          s(:str, "@"),
                          s(:begin,
                            s(:lvar, :k))),
                        s(:lvar, :v))))),
                s(:lvar, :o))),
            s(:def, :resolve_class,
              s(:args,
                s(:arg, :klassname)),
              s(:send,
                s(:send, nil, :class_loader), :load,
                s(:lvar, :klassname))))),
        s(:class,
          s(:const, nil, :NoAliasRuby),
          s(:const, nil, :ToRuby),
          s(:def, :visit_Psych_Nodes_Alias,
            s(:args,
              s(:arg, :o)),
            s(:send, nil, :raise,
              s(:const, nil, :BadAlias),
              s(:dstr,
                s(:str, "Unknown alias: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :o), :anchor))))))))))
