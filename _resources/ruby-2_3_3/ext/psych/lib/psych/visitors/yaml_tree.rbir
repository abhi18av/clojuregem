s(:begin,
  s(:send, nil, :require,
    s(:str, "psych/tree_builder")),
  s(:send, nil, :require,
    s(:str, "psych/scalar_scanner")),
  s(:send, nil, :require,
    s(:str, "psych/class_loader")),
  s(:module,
    s(:const, nil, :Psych),
    s(:module,
      s(:const, nil, :Visitors),
      s(:class,
        s(:const, nil, :YAMLTree),
        s(:const,
          s(:const,
            s(:const, nil, :Psych), :Visitors), :Visitor),
        s(:begin,
          s(:class,
            s(:const, nil, :Registrar), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:ivasgn, :@obj_to_id,
                    s(:hash)),
                  s(:ivasgn, :@obj_to_node,
                    s(:hash)),
                  s(:ivasgn, :@targets,
                    s(:array)),
                  s(:ivasgn, :@counter,
                    s(:int, 0)))),
              s(:def, :register,
                s(:args,
                  s(:arg, :target),
                  s(:arg, :node)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :target), :respond_to?,
                      s(:sym, :object_id)), nil,
                    s(:return)),
                  s(:send,
                    s(:ivar, :@targets), :<<,
                    s(:lvar, :target)),
                  s(:send,
                    s(:ivar, :@obj_to_node), :[]=,
                    s(:send,
                      s(:lvar, :target), :object_id),
                    s(:lvar, :node)))),
              s(:def, :key?,
                s(:args,
                  s(:arg, :target)),
                s(:rescue,
                  s(:send,
                    s(:ivar, :@obj_to_node), :key?,
                    s(:send,
                      s(:lvar, :target), :object_id)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NoMethodError)), nil,
                    s(:false)), nil)),
              s(:def, :id_for,
                s(:args,
                  s(:arg, :target)),
                s(:or_asgn,
                  s(:send,
                    s(:ivar, :@obj_to_id), :[],
                    s(:send,
                      s(:lvar, :target), :object_id)),
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@counter), :+,
                      s(:int, 1))))),
              s(:def, :node_for,
                s(:args,
                  s(:arg, :target)),
                s(:send,
                  s(:ivar, :@obj_to_node), :[],
                  s(:send,
                    s(:lvar, :target), :object_id))))),
          s(:send, nil, :attr_reader,
            s(:sym, :started),
            s(:sym, :finished)),
          s(:alias,
            s(:sym, :finished?),
            s(:sym, :finished)),
          s(:alias,
            s(:sym, :started?),
            s(:sym, :started)),
          s(:defs,
            s(:self), :create,
            s(:args,
              s(:optarg, :options,
                s(:hash)),
              s(:optarg, :emitter,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :emitter),
                s(:send,
                  s(:const, nil, :TreeBuilder), :new)),
              s(:lvasgn, :class_loader,
                s(:send,
                  s(:const, nil, :ClassLoader), :new)),
              s(:lvasgn, :ss,
                s(:send,
                  s(:const, nil, :ScalarScanner), :new,
                  s(:lvar, :class_loader))),
              s(:send, nil, :new,
                s(:lvar, :emitter),
                s(:lvar, :ss),
                s(:lvar, :options)))),
          s(:defs,
            s(:self), :new,
            s(:args,
              s(:optarg, :emitter,
                s(:nil)),
              s(:optarg, :ss,
                s(:nil)),
              s(:optarg, :options,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:and,
                    s(:lvar, :emitter),
                    s(:lvar, :ss)),
                  s(:lvar, :options)),
                s(:return,
                  s(:zsuper)), nil),
              s(:if,
                s(:gvar, :$VERBOSE),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "This API is deprecated, please pass an emitter, scalar scanner, and options or call "),
                    s(:begin,
                      s(:self)),
                    s(:str, ".create() ("),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :caller), :first)),
                    s(:str, ")"))), nil),
              s(:send, nil, :create,
                s(:lvar, :emitter),
                s(:lvar, :ss)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :emitter),
              s(:arg, :ss),
              s(:arg, :options)),
            s(:begin,
              s(:super),
              s(:ivasgn, :@started,
                s(:false)),
              s(:ivasgn, :@finished,
                s(:false)),
              s(:ivasgn, :@emitter,
                s(:lvar, :emitter)),
              s(:ivasgn, :@st,
                s(:send,
                  s(:const, nil, :Registrar), :new)),
              s(:ivasgn, :@ss,
                s(:lvar, :ss)),
              s(:ivasgn, :@options,
                s(:lvar, :options)),
              s(:ivasgn, :@line_width,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :line_width))),
              s(:if,
                s(:and,
                  s(:ivar, :@line_width),
                  s(:send,
                    s(:ivar, :@line_width), :<,
                    s(:int, 0))),
                s(:if,
                  s(:send,
                    s(:ivar, :@line_width), :==,
                    s(:int, -1)),
                  s(:ivasgn, :@line_width,
                    s(:nil)),
                  s(:send, nil, :fail,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "Invalid line_width "),
                      s(:begin,
                        s(:ivar, :@line_width)),
                      s(:str, ", must be non-negative or -1 for unlimited.")))), nil),
              s(:ivasgn, :@coders,
                s(:array)),
              s(:ivasgn, :@dispatch_cache,
                s(:block,
                  s(:send,
                    s(:const, nil, :Hash), :new),
                  s(:args,
                    s(:arg, :h),
                    s(:arg, :klass)),
                  s(:begin,
                    s(:lvasgn, :method,
                      s(:dstr,
                        s(:str, "visit_"),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:begin,
                                s(:or,
                                  s(:send,
                                    s(:lvar, :klass), :name),
                                  s(:str, ""))), :split,
                              s(:str, "::")), :join,
                            s(:str, "_"))))),
                    s(:lvasgn, :method,
                      s(:if,
                        s(:send, nil, :respond_to?,
                          s(:lvar, :method)),
                        s(:lvar, :method),
                        s(:send,
                          s(:lvar, :h), :[],
                          s(:send,
                            s(:lvar, :klass), :superclass)))),
                    s(:if,
                      s(:lvar, :method), nil,
                      s(:send, nil, :raise,
                        s(:const, nil, :TypeError),
                        s(:dstr,
                          s(:str, "Can't dump "),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :target), :class))))),
                    s(:send,
                      s(:lvar, :h), :[]=,
                      s(:lvar, :klass),
                      s(:lvar, :method))))))),
          s(:def, :start,
            s(:args,
              s(:optarg, :encoding,
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Stream), :UTF8))),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@emitter), :start_stream,
                  s(:lvar, :encoding)), :tap),
              s(:args),
              s(:ivasgn, :@started,
                s(:true)))),
          s(:def, :finish,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@emitter), :end_stream), :tap),
              s(:args),
              s(:ivasgn, :@finished,
                s(:true)))),
          s(:def, :tree,
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :finished?), nil,
                s(:send, nil, :finish)),
              s(:send,
                s(:ivar, :@emitter), :root))),
          s(:def, :push,
            s(:args,
              s(:arg, :object)),
            s(:begin,
              s(:if,
                s(:send, nil, :started?), nil,
                s(:send, nil, :start)),
              s(:lvasgn, :version,
                s(:array)),
              s(:if,
                s(:send,
                  s(:ivar, :@options), :[],
                  s(:sym, :header)),
                s(:lvasgn, :version,
                  s(:array,
                    s(:int, 1),
                    s(:int, 1))), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@options), :key?,
                  s(:sym, :version)),
                s(:case,
                  s(:send,
                    s(:ivar, :@options), :[],
                    s(:sym, :version)),
                  s(:when,
                    s(:const, nil, :Array),
                    s(:lvasgn, :version,
                      s(:send,
                        s(:ivar, :@options), :[],
                        s(:sym, :version)))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:lvasgn, :version,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:ivar, :@options), :[],
                              s(:sym, :version)), :split,
                            s(:str, ".")), :map),
                        s(:args,
                          s(:arg, :x)),
                        s(:send,
                          s(:lvar, :x), :to_i)))),
                  s(:lvasgn, :version,
                    s(:array,
                      s(:int, 1),
                      s(:int, 1)))), nil),
              s(:send,
                s(:ivar, :@emitter), :start_document,
                s(:lvar, :version),
                s(:array),
                s(:false)),
              s(:send, nil, :accept,
                s(:lvar, :object)),
              s(:send,
                s(:ivar, :@emitter), :end_document,
                s(:send,
                  s(:send,
                    s(:ivar, :@emitter), :streaming?), :!)))),
          s(:alias,
            s(:sym, :<<),
            s(:sym, :push)),
          s(:def, :accept,
            s(:args,
              s(:arg, :target)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@st), :key?,
                  s(:lvar, :target)),
                s(:begin,
                  s(:lvasgn, :oid,
                    s(:send,
                      s(:ivar, :@st), :id_for,
                      s(:lvar, :target))),
                  s(:lvasgn, :node,
                    s(:send,
                      s(:ivar, :@st), :node_for,
                      s(:lvar, :target))),
                  s(:lvasgn, :anchor,
                    s(:send,
                      s(:lvar, :oid), :to_s)),
                  s(:send,
                    s(:lvar, :node), :anchor=,
                    s(:lvar, :anchor)),
                  s(:return,
                    s(:send,
                      s(:ivar, :@emitter), :alias,
                      s(:lvar, :anchor)))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :target), :respond_to?,
                  s(:sym, :to_yaml)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :loc,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :target), :method,
                              s(:sym, :to_yaml)), :source_location), :first)),
                      s(:if,
                        s(:send,
                          s(:lvar, :loc), :!~,
                          s(:regexp,
                            s(:str, "(syck/rubytypes.rb|psych/core_ext.rb)"),
                            s(:regopt))),
                        s(:if,
                          s(:send,
                            s(:lvar, :target), :respond_to?,
                            s(:sym, :encode_with)), nil,
                          s(:begin,
                            s(:if,
                              s(:gvar, :$VERBOSE),
                              s(:send, nil, :warn,
                                s(:str, "implementing to_yaml is deprecated, please implement \"encode_with\"")), nil),
                            s(:send,
                              s(:lvar, :target), :to_yaml,
                              s(:hash,
                                s(:pair,
                                  s(:sym, :nodump),
                                  s(:true)))))), nil)),
                    s(:resbody, nil, nil, nil), nil)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :target), :respond_to?,
                  s(:sym, :encode_with)),
                s(:send, nil, :dump_coder,
                  s(:lvar, :target)),
                s(:send, nil, :send,
                  s(:send,
                    s(:ivar, :@dispatch_cache), :[],
                    s(:send,
                      s(:lvar, :target), :class)),
                  s(:lvar, :target))))),
          s(:def, :visit_Psych_Omap,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :seq,
                s(:send,
                  s(:ivar, :@emitter), :start_sequence,
                  s(:nil),
                  s(:str, "tag:yaml.org,2002:omap"),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Sequence), :BLOCK))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:lvar, :seq)),
              s(:block,
                s(:send,
                  s(:lvar, :o), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:send, nil, :visit_Hash,
                  s(:hash,
                    s(:pair,
                      s(:lvar, :k),
                      s(:lvar, :v))))),
              s(:send,
                s(:ivar, :@emitter), :end_sequence))),
          s(:def, :visit_Encoding,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:str, "!ruby/encoding")),
              s(:send,
                s(:ivar, :@emitter), :scalar,
                s(:send,
                  s(:lvar, :o), :name),
                s(:nil),
                s(:lvar, :tag),
                s(:false),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :ANY)))),
          s(:def, :visit_Object,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :dump_tags), :[],
                  s(:send,
                    s(:lvar, :o), :class))),
              s(:if,
                s(:lvar, :tag), nil,
                s(:begin,
                  s(:lvasgn, :klass,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :class), :==,
                        s(:const, nil, :Object)),
                      s(:nil),
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :class), :name))),
                  s(:lvasgn, :tag,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:str, "!ruby/object"),
                          s(:lvar, :klass)), :compact), :join,
                      s(:str, ":"))))),
              s(:lvasgn, :map,
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:lvar, :tag),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Mapping), :BLOCK))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:lvar, :map)),
              s(:send, nil, :dump_ivars,
                s(:lvar, :o)),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Struct,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:str, "!ruby/struct"),
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :class), :name)), :compact), :join,
                  s(:str, ":"))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:lvar, :tag),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Mapping), :BLOCK))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :o), :members), :each),
                s(:args,
                  s(:arg, :member)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:send,
                      s(:lvar, :member), :to_s),
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:false),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :ANY)),
                  s(:send, nil, :accept,
                    s(:send,
                      s(:lvar, :o), :[],
                      s(:lvar, :member))))),
              s(:send, nil, :dump_ivars,
                s(:lvar, :o)),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Exception,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:array,
                    s(:str, "!ruby/exception"),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :class), :name)), :join,
                  s(:str, ":"))),
              s(:send,
                s(:ivar, :@emitter), :start_mapping,
                s(:nil),
                s(:lvar, :tag),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :BLOCK)),
              s(:block,
                s(:send,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:send, nil, :private_iv_get,
                        s(:lvar, :o),
                        s(:str, "mesg"))),
                    s(:pair,
                      s(:str, "backtrace"),
                      s(:send, nil, :private_iv_get,
                        s(:lvar, :o),
                        s(:str, "backtrace")))), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:begin,
                  s(:if,
                    s(:lvar, :v), nil,
                    s(:next)),
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:lvar, :k),
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:false),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :ANY)),
                  s(:send, nil, :accept,
                    s(:lvar, :v)))),
              s(:send, nil, :dump_ivars,
                s(:lvar, :o)),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_NameError,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:array,
                    s(:str, "!ruby/exception"),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :class), :name)), :join,
                  s(:str, ":"))),
              s(:send,
                s(:ivar, :@emitter), :start_mapping,
                s(:nil),
                s(:lvar, :tag),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Mapping), :BLOCK)),
              s(:block,
                s(:send,
                  s(:hash,
                    s(:pair,
                      s(:str, "message"),
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :message), :to_s)),
                    s(:pair,
                      s(:str, "backtrace"),
                      s(:send, nil, :private_iv_get,
                        s(:lvar, :o),
                        s(:str, "backtrace")))), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:begin,
                  s(:if,
                    s(:lvar, :v), nil,
                    s(:next)),
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:lvar, :k),
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:false),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :ANY)),
                  s(:send, nil, :accept,
                    s(:lvar, :v)))),
              s(:send, nil, :dump_ivars,
                s(:lvar, :o)),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Regexp,
            s(:args,
              s(:arg, :o)),
            s(:send, nil, :register,
              s(:lvar, :o),
              s(:send,
                s(:ivar, :@emitter), :scalar,
                s(:send,
                  s(:lvar, :o), :inspect),
                s(:nil),
                s(:str, "!ruby/regexp"),
                s(:false),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :ANY)))),
          s(:def, :visit_DateTime,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :formatted,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :o), :offset), :zero?),
                  s(:send,
                    s(:lvar, :o), :strftime,
                    s(:send,
                      s(:str, "%Y-%m-%d %H:%M:%S.%9N Z"), :freeze)),
                  s(:send,
                    s(:lvar, :o), :strftime,
                    s(:send,
                      s(:str, "%Y-%m-%d %H:%M:%S.%9N %:z"), :freeze)))),
              s(:lvasgn, :tag,
                s(:str, "!ruby/object:DateTime")),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:lvar, :formatted),
                  s(:nil),
                  s(:lvar, :tag),
                  s(:false),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY))))),
          s(:def, :visit_Time,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :formatted,
                s(:send, nil, :format_time,
                  s(:lvar, :o))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:lvar, :formatted),
                  s(:nil),
                  s(:nil),
                  s(:true),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY))))),
          s(:def, :visit_Rational,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:str, "!ruby/object:Rational"),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Mapping), :BLOCK))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "denominator"),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :denominator), :to_s),
                    s(:str, "numerator"),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :numerator), :to_s)), :each),
                s(:args,
                  s(:arg, :m)),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:lvar, :m),
                  s(:nil),
                  s(:nil),
                  s(:true),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY))),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Complex,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:str, "!ruby/object:Complex"),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Mapping), :BLOCK))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "real"),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :real), :to_s),
                    s(:str, "image"),
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :imag), :to_s)), :each),
                s(:args,
                  s(:arg, :m)),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:lvar, :m),
                  s(:nil),
                  s(:nil),
                  s(:true),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY))),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Integer,
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:ivar, :@emitter), :scalar,
              s(:send,
                s(:lvar, :o), :to_s),
              s(:nil),
              s(:nil),
              s(:true),
              s(:false),
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Scalar), :ANY))),
          s(:alias,
            s(:sym, :visit_TrueClass),
            s(:sym, :visit_Integer)),
          s(:alias,
            s(:sym, :visit_FalseClass),
            s(:sym, :visit_Integer)),
          s(:alias,
            s(:sym, :visit_Date),
            s(:sym, :visit_Integer)),
          s(:def, :visit_Float,
            s(:args,
              s(:arg, :o)),
            s(:if,
              s(:send,
                s(:lvar, :o), :nan?),
              s(:send,
                s(:ivar, :@emitter), :scalar,
                s(:str, ".nan"),
                s(:nil),
                s(:nil),
                s(:true),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :ANY)),
              s(:if,
                s(:send,
                  s(:lvar, :o), :infinite?),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :infinite?), :>,
                        s(:int, 0)),
                      s(:str, ".inf"),
                      s(:str, "-.inf"))),
                  s(:nil),
                  s(:nil),
                  s(:true),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY)),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:send,
                    s(:lvar, :o), :to_s),
                  s(:nil),
                  s(:nil),
                  s(:true),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY))))),
          s(:def, :visit_BigDecimal,
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:ivar, :@emitter), :scalar,
              s(:send,
                s(:lvar, :o), :_dump),
              s(:nil),
              s(:str, "!ruby/object:BigDecimal"),
              s(:false),
              s(:false),
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Scalar), :ANY))),
          s(:def, :visit_String,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :plain,
                s(:true)),
              s(:lvasgn, :quote,
                s(:true)),
              s(:lvasgn, :style,
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :PLAIN)),
              s(:lvasgn, :tag,
                s(:nil)),
              s(:if,
                s(:send, nil, :binary?,
                  s(:lvar, :o)),
                s(:begin,
                  s(:lvasgn, :o,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:lvar, :o)), :pack,
                        s(:str, "m")), :chomp)),
                  s(:lvasgn, :tag,
                    s(:str, "!binary")),
                  s(:lvasgn, :style,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :LITERAL)),
                  s(:lvasgn, :plain,
                    s(:false)),
                  s(:lvasgn, :quote,
                    s(:false))),
                s(:if,
                  s(:send,
                    s(:lvar, :o), :=~,
                    s(:regexp,
                      s(:str, "\\n(?!\\Z)"),
                      s(:regopt))),
                  s(:lvasgn, :style,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :LITERAL)),
                  s(:if,
                    s(:send,
                      s(:lvar, :o), :==,
                      s(:str, "<<")),
                    s(:begin,
                      s(:lvasgn, :style,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Nodes), :Scalar), :SINGLE_QUOTED)),
                      s(:lvasgn, :tag,
                        s(:str, "tag:yaml.org,2002:str")),
                      s(:lvasgn, :plain,
                        s(:false)),
                      s(:lvasgn, :quote,
                        s(:false))),
                    s(:if,
                      s(:and,
                        s(:ivar, :@line_width),
                        s(:send,
                          s(:send,
                            s(:lvar, :o), :length), :>,
                          s(:ivar, :@line_width))),
                      s(:lvasgn, :style,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Nodes), :Scalar), :FOLDED)),
                      s(:if,
                        s(:send,
                          s(:lvar, :o), :=~,
                          s(:regexp,
                            s(:str, "^[^[:word:]][^\"]*$"),
                            s(:regopt))),
                        s(:lvasgn, :style,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Nodes), :Scalar), :DOUBLE_QUOTED)),
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:send,
                                s(:const, nil, :String), :===,
                                s(:send,
                                  s(:ivar, :@ss), :tokenize,
                                  s(:lvar, :o))), :!),
                            s(:match_with_lvasgn,
                              s(:regexp,
                                s(:str, "\\A0[0-7]*[89]"),
                                s(:regopt)),
                              s(:lvar, :o))),
                          s(:lvasgn, :style,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Nodes), :Scalar), :SINGLE_QUOTED)), nil)))))),
              s(:lvasgn, :is_primitive,
                s(:send,
                  s(:send,
                    s(:lvar, :o), :class), :==,
                  s(:const,
                    s(:cbase), :String))),
              s(:lvasgn, :ivars,
                s(:send, nil, :find_ivars,
                  s(:lvar, :o),
                  s(:lvar, :is_primitive))),
              s(:if,
                s(:send,
                  s(:lvar, :ivars), :empty?),
                s(:begin,
                  s(:if,
                    s(:lvar, :is_primitive), nil,
                    s(:begin,
                      s(:lvasgn, :tag,
                        s(:dstr,
                          s(:str, "!ruby/string:"),
                          s(:begin,
                            s(:send,
                              s(:lvar, :o), :class)))),
                      s(:lvasgn, :plain,
                        s(:false)),
                      s(:lvasgn, :quote,
                        s(:false)))),
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:lvar, :o),
                    s(:nil),
                    s(:lvar, :tag),
                    s(:lvar, :plain),
                    s(:lvar, :quote),
                    s(:lvar, :style))),
                s(:begin,
                  s(:lvasgn, :maptag,
                    s(:str, "!ruby/string")),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :class), :==,
                      s(:const,
                        s(:cbase), :String)), nil,
                    s(:send,
                      s(:lvar, :maptag), :<<,
                      s(:dstr,
                        s(:str, ":"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :o), :class))))),
                  s(:send, nil, :register,
                    s(:lvar, :o),
                    s(:send,
                      s(:ivar, :@emitter), :start_mapping,
                      s(:nil),
                      s(:lvar, :maptag),
                      s(:false),
                      s(:const,
                        s(:const,
                          s(:const, nil, :Nodes), :Mapping), :BLOCK))),
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:str, "str"),
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:false),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :ANY)),
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:lvar, :o),
                    s(:nil),
                    s(:lvar, :tag),
                    s(:lvar, :plain),
                    s(:lvar, :quote),
                    s(:lvar, :style)),
                  s(:send, nil, :dump_ivars,
                    s(:lvar, :o)),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping))))),
          s(:def, :visit_Module,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :o), :name), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "can't dump anonymous module: "),
                    s(:begin,
                      s(:lvar, :o))))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:send,
                    s(:lvar, :o), :name),
                  s(:nil),
                  s(:str, "!ruby/module"),
                  s(:false),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :SINGLE_QUOTED))))),
          s(:def, :visit_Class,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :o), :name), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "can't dump anonymous class: "),
                    s(:begin,
                      s(:lvar, :o))))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:send,
                    s(:lvar, :o), :name),
                  s(:nil),
                  s(:str, "!ruby/class"),
                  s(:false),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :SINGLE_QUOTED))))),
          s(:def, :visit_Range,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:str, "!ruby/range"),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Mapping), :BLOCK))),
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "begin"),
                    s(:send,
                      s(:lvar, :o), :begin),
                    s(:str, "end"),
                    s(:send,
                      s(:lvar, :o), :end),
                    s(:str, "excl"),
                    s(:send,
                      s(:lvar, :o), :exclude_end?)), :each),
                s(:args,
                  s(:arg, :m)),
                s(:send, nil, :accept,
                  s(:lvar, :m))),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Hash,
            s(:args,
              s(:arg, :o)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :o), :class), :==,
                s(:const,
                  s(:cbase), :Hash)),
              s(:begin,
                s(:send, nil, :register,
                  s(:lvar, :o),
                  s(:send,
                    s(:ivar, :@emitter), :start_mapping,
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Psych), :Nodes), :Mapping), :BLOCK))),
                s(:block,
                  s(:send,
                    s(:lvar, :o), :each),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v)),
                  s(:begin,
                    s(:send, nil, :accept,
                      s(:lvar, :k)),
                    s(:send, nil, :accept,
                      s(:lvar, :v)))),
                s(:send,
                  s(:ivar, :@emitter), :end_mapping)),
              s(:send, nil, :visit_hash_subclass,
                s(:lvar, :o)))),
          s(:def, :visit_Psych_Set,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:str, "!set"),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Psych), :Nodes), :Mapping), :BLOCK))),
              s(:block,
                s(:send,
                  s(:lvar, :o), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:begin,
                  s(:send, nil, :accept,
                    s(:lvar, :k)),
                  s(:send, nil, :accept,
                    s(:lvar, :v)))),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:def, :visit_Array,
            s(:args,
              s(:arg, :o)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :o), :class), :==,
                s(:const,
                  s(:cbase), :Array)),
              s(:begin,
                s(:send, nil, :register,
                  s(:lvar, :o),
                  s(:send,
                    s(:ivar, :@emitter), :start_sequence,
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Sequence), :BLOCK))),
                s(:block,
                  s(:send,
                    s(:lvar, :o), :each),
                  s(:args,
                    s(:arg, :c)),
                  s(:send, nil, :accept,
                    s(:lvar, :c))),
                s(:send,
                  s(:ivar, :@emitter), :end_sequence)),
              s(:send, nil, :visit_array_subclass,
                s(:lvar, :o)))),
          s(:def, :visit_NilClass,
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:ivar, :@emitter), :scalar,
              s(:str, ""),
              s(:nil),
              s(:str, "tag:yaml.org,2002:null"),
              s(:true),
              s(:false),
              s(:const,
                s(:const,
                  s(:const, nil, :Nodes), :Scalar), :ANY))),
          s(:def, :visit_Symbol,
            s(:args,
              s(:arg, :o)),
            s(:if,
              s(:send,
                s(:lvar, :o), :empty?),
              s(:send,
                s(:ivar, :@emitter), :scalar,
                s(:str, ""),
                s(:nil),
                s(:str, "!ruby/symbol"),
                s(:false),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :ANY)),
              s(:send,
                s(:ivar, :@emitter), :scalar,
                s(:dstr,
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :o))),
                s(:nil),
                s(:nil),
                s(:true),
                s(:false),
                s(:const,
                  s(:const,
                    s(:const, nil, :Nodes), :Scalar), :ANY)))),
          s(:def, :visit_BasicObject,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :dump_tags), :[],
                  s(:send,
                    s(:lvar, :o), :class))),
              s(:or_asgn,
                s(:lvasgn, :tag),
                s(:dstr,
                  s(:str, "!ruby/marshalable:"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :class), :name)))),
              s(:lvasgn, :map,
                s(:send,
                  s(:ivar, :@emitter), :start_mapping,
                  s(:nil),
                  s(:lvar, :tag),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Mapping), :BLOCK))),
              s(:send, nil, :register,
                s(:lvar, :o),
                s(:lvar, :map)),
              s(:send,
                s(:send,
                  s(:lvar, :o), :marshal_dump), :each,
                s(:block_pass,
                  s(:send, nil, :method,
                    s(:sym, :accept)))),
              s(:send,
                s(:ivar, :@emitter), :end_mapping))),
          s(:send, nil, :private),
          s(:casgn, nil, :NULL,
            s(:str, "\u0000")),
          s(:casgn, nil, :BINARY_RANGE,
            s(:str, "\u0000-\u007F")),
          s(:casgn, nil, :WS_RANGE,
            s(:str, "^ -~\t\r\n")),
          s(:def, :binary?,
            s(:args,
              s(:arg, :string)),
            s(:or,
              s(:or,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :string), :encoding), :==,
                      s(:const,
                        s(:const, nil, :Encoding), :ASCII_8BIT)),
                    s(:send,
                      s(:send,
                        s(:lvar, :string), :ascii_only?), :!))),
                s(:send,
                  s(:lvar, :string), :index,
                  s(:const, nil, :NULL))),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :string), :count,
                    s(:const, nil, :BINARY_RANGE),
                    s(:const, nil, :WS_RANGE)), :fdiv,
                  s(:send,
                    s(:lvar, :string), :length)), :>,
                s(:float, 0.3)))),
          s(:def, :visit_array_subclass,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:dstr,
                  s(:str, "!ruby/array:"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :o), :class)))),
              s(:lvasgn, :ivars,
                s(:send,
                  s(:lvar, :o), :instance_variables)),
              s(:if,
                s(:send,
                  s(:lvar, :ivars), :empty?),
                s(:begin,
                  s(:lvasgn, :node,
                    s(:send,
                      s(:ivar, :@emitter), :start_sequence,
                      s(:nil),
                      s(:lvar, :tag),
                      s(:false),
                      s(:const,
                        s(:const,
                          s(:const, nil, :Nodes), :Sequence), :BLOCK))),
                  s(:send, nil, :register,
                    s(:lvar, :o),
                    s(:lvar, :node)),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :each),
                    s(:args,
                      s(:arg, :c)),
                    s(:send, nil, :accept,
                      s(:lvar, :c))),
                  s(:send,
                    s(:ivar, :@emitter), :end_sequence)),
                s(:begin,
                  s(:lvasgn, :node,
                    s(:send,
                      s(:ivar, :@emitter), :start_mapping,
                      s(:nil),
                      s(:lvar, :tag),
                      s(:false),
                      s(:const,
                        s(:const,
                          s(:const, nil, :Nodes), :Sequence), :BLOCK))),
                  s(:send, nil, :register,
                    s(:lvar, :o),
                    s(:lvar, :node)),
                  s(:send, nil, :accept,
                    s(:str, "internal")),
                  s(:send,
                    s(:ivar, :@emitter), :start_sequence,
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Sequence), :BLOCK)),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :each),
                    s(:args,
                      s(:arg, :c)),
                    s(:send, nil, :accept,
                      s(:lvar, :c))),
                  s(:send,
                    s(:ivar, :@emitter), :end_sequence),
                  s(:send, nil, :accept,
                    s(:str, "ivars")),
                  s(:send,
                    s(:ivar, :@emitter), :start_mapping,
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Sequence), :BLOCK)),
                  s(:block,
                    s(:send,
                      s(:lvar, :ivars), :each),
                    s(:args,
                      s(:arg, :ivar)),
                    s(:begin,
                      s(:send, nil, :accept,
                        s(:lvar, :ivar)),
                      s(:send, nil, :accept,
                        s(:send,
                          s(:lvar, :o), :instance_variable_get,
                          s(:lvar, :ivar))))),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping))))),
          s(:def, :visit_hash_subclass,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:lvasgn, :ivars,
                s(:send,
                  s(:lvar, :o), :instance_variables)),
              s(:if,
                s(:send,
                  s(:lvar, :ivars), :any?),
                s(:begin,
                  s(:lvasgn, :tag,
                    s(:dstr,
                      s(:str, "!ruby/hash-with-ivars:"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :o), :class)))),
                  s(:lvasgn, :node,
                    s(:send,
                      s(:ivar, :@emitter), :start_mapping,
                      s(:nil),
                      s(:lvar, :tag),
                      s(:false),
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Psych), :Nodes), :Mapping), :BLOCK))),
                  s(:send, nil, :register,
                    s(:lvar, :o),
                    s(:lvar, :node)),
                  s(:send, nil, :accept,
                    s(:str, "elements")),
                  s(:send,
                    s(:ivar, :@emitter), :start_mapping,
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Mapping), :BLOCK)),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:begin,
                      s(:send, nil, :accept,
                        s(:lvar, :k)),
                      s(:send, nil, :accept,
                        s(:lvar, :v)))),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping),
                  s(:send, nil, :accept,
                    s(:str, "ivars")),
                  s(:send,
                    s(:ivar, :@emitter), :start_mapping,
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Mapping), :BLOCK)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :o), :instance_variables), :each),
                    s(:args,
                      s(:arg, :ivar)),
                    s(:begin,
                      s(:send, nil, :accept,
                        s(:lvar, :ivar)),
                      s(:send, nil, :accept,
                        s(:send,
                          s(:lvar, :o), :instance_variable_get,
                          s(:lvar, :ivar))))),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping)),
                s(:begin,
                  s(:lvasgn, :tag,
                    s(:dstr,
                      s(:str, "!ruby/hash:"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :o), :class)))),
                  s(:lvasgn, :node,
                    s(:send,
                      s(:ivar, :@emitter), :start_mapping,
                      s(:nil),
                      s(:lvar, :tag),
                      s(:false),
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Psych), :Nodes), :Mapping), :BLOCK))),
                  s(:send, nil, :register,
                    s(:lvar, :o),
                    s(:lvar, :node)),
                  s(:block,
                    s(:send,
                      s(:lvar, :o), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:begin,
                      s(:send, nil, :accept,
                        s(:lvar, :k)),
                      s(:send, nil, :accept,
                        s(:lvar, :v)))),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping))))),
          s(:def, :dump_list,
            s(:args,
              s(:arg, :o)), nil),
          s(:def, :format_time,
            s(:args,
              s(:arg, :time)),
            s(:if,
              s(:send,
                s(:lvar, :time), :utc?),
              s(:send,
                s(:lvar, :time), :strftime,
                s(:str, "%Y-%m-%d %H:%M:%S.%9N Z")),
              s(:send,
                s(:lvar, :time), :strftime,
                s(:str, "%Y-%m-%d %H:%M:%S.%9N %:z")))),
          s(:def, :find_ivars,
            s(:args,
              s(:arg, :target),
              s(:optarg, :is_primitive,
                s(:false))),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :loc,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :target), :method,
                            s(:sym, :to_yaml_properties)), :source_location), :first)),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:lvar, :loc), :start_with?,
                          s(:const,
                            s(:const, nil, :Psych), :DEPRECATED)),
                        s(:send,
                          s(:lvar, :loc), :end_with?,
                          s(:str, "rubytypes.rb"))), nil,
                      s(:begin,
                        s(:if,
                          s(:gvar, :$VERBOSE),
                          s(:send, nil, :warn,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :loc)),
                              s(:str, ": to_yaml_properties is deprecated, please implement \"encode_with(coder)\""))), nil),
                        s(:return,
                          s(:send,
                            s(:lvar, :target), :to_yaml_properties))))),
                  s(:resbody, nil, nil, nil), nil)),
              s(:if,
                s(:lvar, :is_primitive),
                s(:array),
                s(:send,
                  s(:lvar, :target), :instance_variables)))),
          s(:def, :register,
            s(:args,
              s(:arg, :target),
              s(:arg, :yaml_obj)),
            s(:begin,
              s(:send,
                s(:ivar, :@st), :register,
                s(:lvar, :target),
                s(:lvar, :yaml_obj)),
              s(:lvar, :yaml_obj))),
          s(:def, :dump_coder,
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:send,
                s(:ivar, :@coders), :<<,
                s(:lvar, :o)),
              s(:lvasgn, :tag,
                s(:send,
                  s(:send,
                    s(:const, nil, :Psych), :dump_tags), :[],
                  s(:send,
                    s(:lvar, :o), :class))),
              s(:if,
                s(:lvar, :tag), nil,
                s(:begin,
                  s(:lvasgn, :klass,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :class), :==,
                        s(:const, nil, :Object)),
                      s(:nil),
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :class), :name))),
                  s(:lvasgn, :tag,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:str, "!ruby/object"),
                          s(:lvar, :klass)), :compact), :join,
                      s(:str, ":"))))),
              s(:lvasgn, :c,
                s(:send,
                  s(:const,
                    s(:const, nil, :Psych), :Coder), :new,
                  s(:lvar, :tag))),
              s(:send,
                s(:lvar, :o), :encode_with,
                s(:lvar, :c)),
              s(:send, nil, :emit_coder,
                s(:lvar, :c),
                s(:lvar, :o)))),
          s(:def, :emit_coder,
            s(:args,
              s(:arg, :c),
              s(:arg, :o)),
            s(:case,
              s(:send,
                s(:lvar, :c), :type),
              s(:when,
                s(:sym, :scalar),
                s(:send,
                  s(:ivar, :@emitter), :scalar,
                  s(:send,
                    s(:lvar, :c), :scalar),
                  s(:nil),
                  s(:send,
                    s(:lvar, :c), :tag),
                  s(:send,
                    s(:send,
                      s(:lvar, :c), :tag), :nil?),
                  s(:false),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Nodes), :Scalar), :ANY))),
              s(:when,
                s(:sym, :seq),
                s(:begin,
                  s(:send,
                    s(:ivar, :@emitter), :start_sequence,
                    s(:nil),
                    s(:send,
                      s(:lvar, :c), :tag),
                    s(:send,
                      s(:send,
                        s(:lvar, :c), :tag), :nil?),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Sequence), :BLOCK)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :c), :seq), :each),
                    s(:args,
                      s(:arg, :thing)),
                    s(:send, nil, :accept,
                      s(:lvar, :thing))),
                  s(:send,
                    s(:ivar, :@emitter), :end_sequence))),
              s(:when,
                s(:sym, :map),
                s(:begin,
                  s(:send, nil, :register,
                    s(:lvar, :o),
                    s(:send,
                      s(:ivar, :@emitter), :start_mapping,
                      s(:nil),
                      s(:send,
                        s(:lvar, :c), :tag),
                      s(:send,
                        s(:lvar, :c), :implicit),
                      s(:send,
                        s(:lvar, :c), :style))),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :c), :map), :each),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:begin,
                      s(:send, nil, :accept,
                        s(:lvar, :k)),
                      s(:send, nil, :accept,
                        s(:lvar, :v)))),
                  s(:send,
                    s(:ivar, :@emitter), :end_mapping))),
              s(:when,
                s(:sym, :object),
                s(:send, nil, :accept,
                  s(:send,
                    s(:lvar, :c), :object))), nil)),
          s(:def, :dump_ivars,
            s(:args,
              s(:arg, :target)),
            s(:begin,
              s(:lvasgn, :ivars,
                s(:send, nil, :find_ivars,
                  s(:lvar, :target))),
              s(:block,
                s(:send,
                  s(:lvar, :ivars), :each),
                s(:args,
                  s(:arg, :iv)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@emitter), :scalar,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :iv), :to_s), :sub,
                          s(:regexp,
                            s(:str, "^@"),
                            s(:regopt)),
                          s(:str, "")))),
                    s(:nil),
                    s(:nil),
                    s(:true),
                    s(:false),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Nodes), :Scalar), :ANY)),
                  s(:send, nil, :accept,
                    s(:send,
                      s(:lvar, :target), :instance_variable_get,
                      s(:lvar, :iv))))))))))))
