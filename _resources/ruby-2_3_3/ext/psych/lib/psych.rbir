s(:begin,
  s(:case,
    s(:const, nil, :RUBY_ENGINE),
    s(:when,
      s(:str, "jruby"),
      s(:begin,
        s(:send, nil, :require,
          s(:str, "psych_jars")),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :org), :jruby), :ext), :psych), :PsychLibrary), :new), :load,
          s(:send,
            s(:const, nil, :JRuby), :runtime),
          s(:false)))),
    s(:send, nil, :require,
      s(:str, "psych.so"))),
  s(:send, nil, :require,
    s(:str, "psych/nodes")),
  s(:send, nil, :require,
    s(:str, "psych/streaming")),
  s(:send, nil, :require,
    s(:str, "psych/visitors")),
  s(:send, nil, :require,
    s(:str, "psych/handler")),
  s(:send, nil, :require,
    s(:str, "psych/tree_builder")),
  s(:send, nil, :require,
    s(:str, "psych/parser")),
  s(:send, nil, :require,
    s(:str, "psych/omap")),
  s(:send, nil, :require,
    s(:str, "psych/set")),
  s(:send, nil, :require,
    s(:str, "psych/coder")),
  s(:send, nil, :require,
    s(:str, "psych/core_ext")),
  s(:send, nil, :require,
    s(:str, "psych/deprecated")),
  s(:send, nil, :require,
    s(:str, "psych/stream")),
  s(:send, nil, :require,
    s(:str, "psych/json/tree_builder")),
  s(:send, nil, :require,
    s(:str, "psych/json/stream")),
  s(:send, nil, :require,
    s(:str, "psych/handlers/document_stream")),
  s(:send, nil, :require,
    s(:str, "psych/class_loader")),
  s(:module,
    s(:const, nil, :Psych),
    s(:begin,
      s(:casgn, nil, :VERSION,
        s(:str, "2.1.0")),
      s(:casgn, nil, :LIBYAML_VERSION,
        s(:send,
          s(:send,
            s(:const, nil, :Psych), :libyaml_version), :join,
          s(:str, "."))),
      s(:casgn, nil, :FALLBACK,
        s(:send,
          s(:const, nil, :Struct), :new,
          s(:sym, :to_ruby))),
      s(:defs,
        s(:self), :load,
        s(:args,
          s(:arg, :yaml),
          s(:optarg, :filename,
            s(:nil)),
          s(:optarg, :fallback,
            s(:false))),
        s(:begin,
          s(:lvasgn, :result,
            s(:send, nil, :parse,
              s(:lvar, :yaml),
              s(:lvar, :filename),
              s(:lvar, :fallback))),
          s(:if,
            s(:lvar, :result),
            s(:send,
              s(:lvar, :result), :to_ruby),
            s(:lvar, :result)))),
      s(:defs,
        s(:self), :safe_load,
        s(:args,
          s(:arg, :yaml),
          s(:optarg, :whitelist_classes,
            s(:array)),
          s(:optarg, :whitelist_symbols,
            s(:array)),
          s(:optarg, :aliases,
            s(:false)),
          s(:optarg, :filename,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :result,
            s(:send, nil, :parse,
              s(:lvar, :yaml),
              s(:lvar, :filename))),
          s(:if,
            s(:lvar, :result), nil,
            s(:return)),
          s(:lvasgn, :class_loader,
            s(:send,
              s(:const,
                s(:const, nil, :ClassLoader), :Restricted), :new,
              s(:send,
                s(:lvar, :whitelist_classes), :map,
                s(:block_pass,
                  s(:sym, :to_s))),
              s(:send,
                s(:lvar, :whitelist_symbols), :map,
                s(:block_pass,
                  s(:sym, :to_s))))),
          s(:lvasgn, :scanner,
            s(:send,
              s(:const, nil, :ScalarScanner), :new,
              s(:lvar, :class_loader))),
          s(:if,
            s(:lvar, :aliases),
            s(:lvasgn, :visitor,
              s(:send,
                s(:const,
                  s(:const, nil, :Visitors), :ToRuby), :new,
                s(:lvar, :scanner),
                s(:lvar, :class_loader))),
            s(:lvasgn, :visitor,
              s(:send,
                s(:const,
                  s(:const, nil, :Visitors), :NoAliasRuby), :new,
                s(:lvar, :scanner),
                s(:lvar, :class_loader)))),
          s(:send,
            s(:lvar, :visitor), :accept,
            s(:lvar, :result)))),
      s(:defs,
        s(:self), :parse,
        s(:args,
          s(:arg, :yaml),
          s(:optarg, :filename,
            s(:nil)),
          s(:optarg, :fallback,
            s(:false))),
        s(:begin,
          s(:block,
            s(:send, nil, :parse_stream,
              s(:lvar, :yaml),
              s(:lvar, :filename)),
            s(:args,
              s(:arg, :node)),
            s(:return,
              s(:lvar, :node))),
          s(:lvar, :fallback))),
      s(:defs,
        s(:self), :parse_file,
        s(:args,
          s(:arg, :filename)),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :filename),
            s(:str, "r:bom|utf-8")),
          s(:args,
            s(:arg, :f)),
          s(:send, nil, :parse,
            s(:lvar, :f),
            s(:lvar, :filename)))),
      s(:defs,
        s(:self), :parser,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :Psych), :Parser), :new,
          s(:send,
            s(:const, nil, :TreeBuilder), :new))),
      s(:defs,
        s(:self), :parse_stream,
        s(:args,
          s(:arg, :yaml),
          s(:optarg, :filename,
            s(:nil)),
          s(:blockarg, :block)),
        s(:if,
          s(:send, nil, :block_given?),
          s(:begin,
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const, nil, :Psych), :Parser), :new,
                s(:send,
                  s(:const,
                    s(:const, nil, :Handlers), :DocumentStream), :new,
                  s(:block_pass,
                    s(:lvar, :block))))),
            s(:send,
              s(:lvar, :parser), :parse,
              s(:lvar, :yaml),
              s(:lvar, :filename))),
          s(:begin,
            s(:lvasgn, :parser,
              s(:send,
                s(:self), :parser)),
            s(:send,
              s(:lvar, :parser), :parse,
              s(:lvar, :yaml),
              s(:lvar, :filename)),
            s(:send,
              s(:send,
                s(:lvar, :parser), :handler), :root)))),
      s(:defs,
        s(:self), :dump,
        s(:args,
          s(:arg, :o),
          s(:optarg, :io,
            s(:nil)),
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Hash), :===,
              s(:lvar, :io)),
            s(:begin,
              s(:lvasgn, :options,
                s(:lvar, :io)),
              s(:lvasgn, :io,
                s(:nil))), nil),
          s(:lvasgn, :visitor,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Visitors), :YAMLTree), :create,
              s(:lvar, :options))),
          s(:send,
            s(:lvar, :visitor), :<<,
            s(:lvar, :o)),
          s(:send,
            s(:send,
              s(:lvar, :visitor), :tree), :yaml,
            s(:lvar, :io),
            s(:lvar, :options)))),
      s(:defs,
        s(:self), :dump_stream,
        s(:args,
          s(:restarg, :objects)),
        s(:begin,
          s(:lvasgn, :visitor,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Visitors), :YAMLTree), :create,
              s(:hash))),
          s(:block,
            s(:send,
              s(:lvar, :objects), :each),
            s(:args,
              s(:arg, :o)),
            s(:send,
              s(:lvar, :visitor), :<<,
              s(:lvar, :o))),
          s(:send,
            s(:send,
              s(:lvar, :visitor), :tree), :yaml))),
      s(:defs,
        s(:self), :to_json,
        s(:args,
          s(:arg, :object)),
        s(:begin,
          s(:lvasgn, :visitor,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Psych), :Visitors), :JSONTree), :create)),
          s(:send,
            s(:lvar, :visitor), :<<,
            s(:lvar, :object)),
          s(:send,
            s(:send,
              s(:lvar, :visitor), :tree), :yaml))),
      s(:defs,
        s(:self), :load_stream,
        s(:args,
          s(:arg, :yaml),
          s(:optarg, :filename,
            s(:nil))),
        s(:if,
          s(:send, nil, :block_given?),
          s(:block,
            s(:send, nil, :parse_stream,
              s(:lvar, :yaml),
              s(:lvar, :filename)),
            s(:args,
              s(:arg, :node)),
            s(:yield,
              s(:send,
                s(:lvar, :node), :to_ruby))),
          s(:block,
            s(:send,
              s(:send,
                s(:send, nil, :parse_stream,
                  s(:lvar, :yaml),
                  s(:lvar, :filename)), :children), :map),
            s(:args,
              s(:arg, :child)),
            s(:send,
              s(:lvar, :child), :to_ruby)))),
      s(:defs,
        s(:self), :load_file,
        s(:args,
          s(:arg, :filename),
          s(:optarg, :fallback,
            s(:false))),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :filename),
            s(:str, "r:bom|utf-8")),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:self), :load,
            s(:lvar, :f),
            s(:lvar, :filename),
            s(:send,
              s(:const, nil, :FALLBACK), :new,
              s(:lvar, :fallback))))),
      s(:ivasgn, :@domain_types,
        s(:hash)),
      s(:defs,
        s(:self), :add_domain_type,
        s(:args,
          s(:arg, :domain),
          s(:arg, :type_tag),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :key,
            s(:send,
              s(:array,
                s(:str, "tag"),
                s(:lvar, :domain),
                s(:lvar, :type_tag)), :join,
              s(:str, ":"))),
          s(:send,
            s(:ivar, :@domain_types), :[]=,
            s(:lvar, :key),
            s(:array,
              s(:lvar, :key),
              s(:lvar, :block))),
          s(:send,
            s(:ivar, :@domain_types), :[]=,
            s(:dstr,
              s(:str, "tag:"),
              s(:begin,
                s(:lvar, :type_tag))),
            s(:array,
              s(:lvar, :key),
              s(:lvar, :block))))),
      s(:defs,
        s(:self), :add_builtin_type,
        s(:args,
          s(:arg, :type_tag),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :domain,
            s(:str, "yaml.org,2002")),
          s(:lvasgn, :key,
            s(:send,
              s(:array,
                s(:str, "tag"),
                s(:lvar, :domain),
                s(:lvar, :type_tag)), :join,
              s(:str, ":"))),
          s(:send,
            s(:ivar, :@domain_types), :[]=,
            s(:lvar, :key),
            s(:array,
              s(:lvar, :key),
              s(:lvar, :block))))),
      s(:defs,
        s(:self), :remove_type,
        s(:args,
          s(:arg, :type_tag)),
        s(:send,
          s(:ivar, :@domain_types), :delete,
          s(:lvar, :type_tag))),
      s(:ivasgn, :@load_tags,
        s(:hash)),
      s(:ivasgn, :@dump_tags,
        s(:hash)),
      s(:defs,
        s(:self), :add_tag,
        s(:args,
          s(:arg, :tag),
          s(:arg, :klass)),
        s(:begin,
          s(:send,
            s(:ivar, :@load_tags), :[]=,
            s(:lvar, :tag),
            s(:send,
              s(:lvar, :klass), :name)),
          s(:send,
            s(:ivar, :@dump_tags), :[]=,
            s(:lvar, :klass),
            s(:lvar, :tag)))),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :load_tags)),
          s(:send, nil, :attr_accessor,
            s(:sym, :dump_tags)),
          s(:send, nil, :attr_accessor,
            s(:sym, :domain_types)))))))
