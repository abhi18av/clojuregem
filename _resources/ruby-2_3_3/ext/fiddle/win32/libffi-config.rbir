s(:begin,
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:lvasgn, :basedir,
    s(:send,
      s(:const, nil, :File), :dirname,
      s(:str, "(string)"))),
  s(:lvasgn, :conf,
    s(:hash)),
  s(:lvasgn, :enable,
    s(:hash)),
  s(:until,
    s(:send,
      s(:const, nil, :ARGV), :empty?),
    s(:begin,
      s(:lvasgn, :arg,
        s(:send,
          s(:const, nil, :ARGV), :shift)),
      s(:case,
        s(:lvar, :arg),
        s(:when,
          s(:str, "-C"), nil),
        s(:when,
          s(:regexp,
            s(:str, "\\A--srcdir=(.*)"),
            s(:regopt)),
          s(:send,
            s(:lvar, :conf), :[]=,
            s(:str, "SRCDIR"),
            s(:lvasgn, :srcdir,
              s(:nth_ref, 1)))),
        s(:when,
          s(:regexp,
            s(:str, "\\A(CC|CFLAGS|CXX|CXXFLAGS|LD|LDFLAGS)=(.*)"),
            s(:regopt)),
          s(:send,
            s(:lvar, :conf), :[]=,
            s(:nth_ref, 1),
            s(:nth_ref, 2))),
        s(:when,
          s(:regexp,
            s(:str, "\\A--host=(.*)"),
            s(:regopt)),
          s(:lvasgn, :host,
            s(:nth_ref, 1))),
        s(:when,
          s(:regexp,
            s(:str, "\\A--enable-([^=]+)(?:=(.*))?"),
            s(:regopt)),
          s(:send,
            s(:lvar, :enable), :[]=,
            s(:nth_ref, 1),
            s(:or,
              s(:nth_ref, 2),
              s(:true)))),
        s(:when,
          s(:regexp,
            s(:str, "\\A--disable-([^=]+)"),
            s(:regopt)),
          s(:send,
            s(:lvar, :enable), :[]=,
            s(:nth_ref, 1),
            s(:false))), nil))),
  s(:block,
    s(:send,
      s(:const, nil, :IO), :foreach,
      s(:dstr,
        s(:begin,
          s(:lvar, :srcdir)),
        s(:str, "/configure.ac"))),
    s(:args,
      s(:arg, :line)),
    s(:if,
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "^AC_INIT\\((.*)\\)"),
          s(:regopt)),
        s(:lvar, :line)),
      s(:begin,
        s(:lvasgn, :version,
          s(:send,
            s(:send,
              s(:nth_ref, 1), :split,
              s(:regexp,
                s(:str, ",\\s*"),
                s(:regopt))), :[],
            s(:int, 1))),
        s(:send,
          s(:lvar, :version), :gsub!,
          s(:regexp,
            s(:str, "\\A\\[|\\]\\z"),
            s(:regopt)),
          s(:str, "")),
        s(:send,
          s(:lvar, :conf), :[]=,
          s(:str, "VERSION"),
          s(:lvar, :version)),
        s(:break)), nil)),
  s(:lvasgn, :builddir,
    s(:if,
      s(:send,
        s(:lvar, :srcdir), :==,
        s(:str, ".")),
      s(:send,
        s(:lvar, :enable), :[],
        s(:str, "builddir")),
      s(:str, "."))),
  s(:send,
    s(:lvar, :conf), :[]=,
    s(:str, "TARGET"),
    s(:if,
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "^x64"),
          s(:regopt)),
        s(:lvar, :host)),
      s(:str, "X86_WIN64"),
      s(:str, "X86_WIN32"))),
  s(:send,
    s(:const, nil, :FileUtils), :mkdir_p,
    s(:array,
      s(:lvar, :builddir),
      s(:dstr,
        s(:begin,
          s(:lvar, :builddir)),
        s(:str, "/include")),
      s(:dstr,
        s(:begin,
          s(:lvar, :builddir)),
        s(:str, "/src/x86")))),
  s(:send,
    s(:const, nil, :FileUtils), :cp,
    s(:dstr,
      s(:begin,
        s(:lvar, :basedir)),
      s(:str, "/fficonfig.h")),
    s(:str, "."),
    s(:hash,
      s(:pair,
        s(:sym, :preserve),
        s(:true)))),
  s(:lvasgn, :hdr,
    s(:send,
      s(:const, nil, :IO), :binread,
      s(:dstr,
        s(:begin,
          s(:lvar, :srcdir)),
        s(:str, "/include/ffi.h.in")))),
  s(:block,
    s(:send,
      s(:lvar, :hdr), :gsub!,
      s(:regexp,
        s(:str, "@(\\w+)@"),
        s(:regopt))),
    s(:args),
    s(:or,
      s(:send,
        s(:lvar, :conf), :[],
        s(:nth_ref, 1)),
      s(:back_ref, :$&))),
  s(:send,
    s(:lvar, :hdr), :gsub!,
    s(:regexp,
      s(:str, "^(#if\\s+)@\\w+@"),
      s(:regopt)),
    s(:str, "\\10")),
  s(:send,
    s(:const, nil, :IO), :binwrite,
    s(:dstr,
      s(:begin,
        s(:lvar, :builddir)),
      s(:str, "/include/ffi.h")),
    s(:lvar, :hdr)),
  s(:lvasgn, :mk,
    s(:send,
      s(:const, nil, :IO), :binread,
      s(:dstr,
        s(:begin,
          s(:lvar, :basedir)),
        s(:str, "/libffi.mk.tmpl")))),
  s(:block,
    s(:send,
      s(:lvar, :mk), :gsub!,
      s(:regexp,
        s(:str, "@(\\w+)@"),
        s(:regopt))),
    s(:args),
    s(:or,
      s(:send,
        s(:lvar, :conf), :[],
        s(:nth_ref, 1)),
      s(:back_ref, :$&))),
  s(:send,
    s(:const, nil, :IO), :binwrite,
    s(:str, "Makefile"),
    s(:lvar, :mk)))
