s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:lvasgn, :bundle,
    s(:send, nil, :enable_config,
      s(:str, "bundled-libffi"))),
  s(:or,
    s(:if,
      s(:send,
        s(:lvar, :bundle), :!),
      s(:begin,
        s(:send, nil, :dir_config,
          s(:str, "libffi")),
        s(:and,
          s(:send, nil, :pkg_config,
            s(:str, "libffi")),
          s(:lvasgn, :ver,
            s(:send, nil, :pkg_config,
              s(:str, "libffi"),
              s(:str, "modversion")))),
        s(:and,
          s(:if,
            s(:send, nil, :have_header,
              s(:lvasgn, :ffi_header,
                s(:str, "ffi.h"))),
            s(:true),
            s(:if,
              s(:send, nil, :have_header,
                s(:lvasgn, :ffi_header,
                  s(:str, "ffi/ffi.h"))),
              s(:begin,
                s(:send,
                  s(:gvar, :$defs), :push,
                  s(:send, nil, :format,
                    s(:str, "-DUSE_HEADER_HACKS"))),
                s(:true)), nil)),
          s(:begin,
            s(:or,
              s(:send, nil, :have_library,
                s(:str, "ffi")),
              s(:send, nil, :have_library,
                s(:str, "libffi")))))), nil),
    s(:kwbegin,
      s(:lvasgn, :ver,
        s(:and,
          s(:send,
            s(:lvar, :bundle), :!=,
            s(:false)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:dstr,
                      s(:begin,
                        s(:gvar, :$srcdir)),
                      s(:str, "/libffi-*/"))), :map),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :n))), :max_by),
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:send,
                s(:lvar, :n), :scan,
                s(:regexp,
                  s(:str, "\\d+"),
                  s(:regopt))), :map,
              s(:block_pass,
                s(:sym, :to_i)))))),
      s(:if,
        s(:lvar, :ver), nil,
        s(:send, nil, :raise,
          s(:str, "missing libffi. Please install libffi."))),
      s(:lvasgn, :srcdir,
        s(:dstr,
          s(:begin,
            s(:gvar, :$srcdir)),
          s(:str, "/"),
          s(:begin,
            s(:lvar, :ver)))),
      s(:lvasgn, :ffi_header,
        s(:str, "ffi.h")),
      s(:lvasgn, :libffi,
        s(:send,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:splat,
              s(:array,
                s(:sym, :dir),
                s(:sym, :srcdir),
                s(:sym, :builddir),
                s(:sym, :include),
                s(:sym, :lib),
                s(:sym, :a),
                s(:sym, :cflags),
                s(:sym, :ldflags),
                s(:sym, :opt),
                s(:sym, :arch)))), :new)),
      s(:send,
        s(:lvar, :libffi), :dir=,
        s(:lvar, :ver)),
      s(:if,
        s(:send,
          s(:gvar, :$srcdir), :==,
          s(:str, ".")),
        s(:begin,
          s(:send,
            s(:lvar, :libffi), :builddir=,
            s(:dstr,
              s(:begin,
                s(:lvar, :ver)),
              s(:str, "/"),
              s(:begin,
                s(:const, nil, :RUBY_PLATFORM)))),
          s(:send,
            s(:lvar, :libffi), :srcdir=,
            s(:str, "."))),
        s(:begin,
          s(:send,
            s(:lvar, :libffi), :builddir=,
            s(:send,
              s(:lvar, :libffi), :dir)),
          s(:send,
            s(:lvar, :libffi), :srcdir=,
            s(:send, nil, :relative_from,
              s(:lvar, :srcdir),
              s(:str, ".."))))),
      s(:send,
        s(:lvar, :libffi), :include=,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:lvar, :libffi), :builddir)),
          s(:str, "/include"))),
      s(:send,
        s(:lvar, :libffi), :lib=,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:lvar, :libffi), :builddir)),
          s(:str, "/.libs"))),
      s(:send,
        s(:lvar, :libffi), :a=,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:lvar, :libffi), :lib)),
          s(:str, "/libffi_convenience."),
          s(:begin,
            s(:gvar, :$LIBEXT)))),
      s(:lvasgn, :nowarn,
        s(:send,
          s(:const, nil, :CONFIG), :merge,
          s(:hash,
            s(:pair,
              s(:str, "warnflags"),
              s(:str, ""))))),
      s(:send,
        s(:lvar, :libffi), :cflags=,
        s(:send,
          s(:const, nil, :RbConfig), :expand,
          s(:str, "$(CFLAGS)"),
          s(:lvar, :nowarn))),
      s(:lvasgn, :ver,
        s(:send,
          s(:lvar, :ver), :[],
          s(:regexp,
            s(:str, "libffi-(.*)"),
            s(:regopt)),
          s(:int, 1))),
      s(:send,
        s(:const, nil, :FileUtils), :mkdir_p,
        s(:send,
          s(:lvar, :libffi), :dir)),
      s(:send,
        s(:lvar, :libffi), :opt=,
        s(:send,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "configure_args")), :[],
          s(:regexp,
            s(:str, "'(-C)'"),
            s(:regopt)),
          s(:int, 1))),
      s(:send,
        s(:lvar, :libffi), :ldflags=,
        s(:send,
          s(:const, nil, :RbConfig), :expand,
          s(:dstr,
            s(:str, "$(LDFLAGS) "),
            s(:begin,
              s(:send, nil, :libpathflag,
                s(:array,
                  s(:send, nil, :relative_from,
                    s(:gvar, :$topdir),
                    s(:str, ".."))))),
            s(:str, " "),
            s(:begin,
              s(:gvar, :$LIBRUBYARG))))),
      s(:send,
        s(:lvar, :libffi), :arch=,
        s(:send,
          s(:const,
            s(:const, nil, :RbConfig), :CONFIG), :[],
          s(:str, "host"))),
      s(:if,
        s(:gvar, :$mswin),
        s(:begin,
          s(:if,
            s(:send, nil, :find_executable,
              s(:lvasgn, :as,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "x64"),
                      s(:regopt)),
                    s(:send,
                      s(:lvar, :libffi), :arch)),
                  s(:str, "ml64"),
                  s(:str, "ml")))), nil,
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "missing "),
                s(:begin,
                  s(:lvar, :as)),
                s(:str, " command.")))),
          s(:send,
            s(:gvar, :$defs), :<<,
            s(:str, "-DFFI_BUILDING")),
          s(:lvasgn, :libffi_config,
            s(:dstr,
              s(:begin,
                s(:send, nil, :relative_from,
                  s(:gvar, :$srcdir),
                  s(:str, ".."))),
              s(:str, "/win32/libffi-config.rb"))),
          s(:lvasgn, :config,
            s(:send,
              s(:const, nil, :CONFIG), :merge,
              s(:hash,
                s(:pair,
                  s(:str, "top_srcdir"),
                  s(:gvar, :$top_srcdir))))),
          s(:lvasgn, :args,
            s(:send,
              s(:gvar, :$ruby), :gsub,
              s(:regexp,
                s(:str, ":/=\\\\"),
                s(:regopt)),
              s(:str, ""))),
          s(:send,
            s(:lvar, :args), :gsub!,
            s(:regexp,
              s(:str, "\\)\\\\"),
              s(:regopt)),
            s(:str, ")/")),
          s(:lvasgn, :args,
            s(:send,
              s(:lvar, :args), :shellsplit)),
          s(:block,
            s(:send,
              s(:lvar, :args), :map!),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :RbConfig), :expand,
              s(:lvar, :s),
              s(:lvar, :config))),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :args), :<<,
                s(:str, "-C")), :<<,
              s(:send,
                s(:lvar, :libffi), :dir)), :<<,
            s(:lvar, :libffi_config)),
          s(:lvasgn, :opts,
            s(:hash))),
        s(:begin,
          s(:lvasgn, :args,
            s(:array,
              s(:str, "sh"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :libffi), :srcdir)),
                s(:str, "/configure")))),
          s(:lvasgn, :opts,
            s(:hash,
              s(:pair,
                s(:sym, :chdir),
                s(:send,
                  s(:lvar, :libffi), :dir)))))),
      s(:lvasgn, :cc,
        s(:send,
          s(:const,
            s(:const, nil, :RbConfig), :CONFIG), :[],
          s(:str, "CC"))),
      s(:lvasgn, :cxx,
        s(:send,
          s(:const,
            s(:const, nil, :RbConfig), :CONFIG), :[],
          s(:str, "CXX"))),
      s(:lvasgn, :ld,
        s(:send,
          s(:const,
            s(:const, nil, :RbConfig), :CONFIG), :[],
          s(:str, "LD"))),
      s(:send,
        s(:lvar, :args), :concat,
        s(:array,
          s(:dstr,
            s(:str, "--srcdir="),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :srcdir))),
          s(:dstr,
            s(:str, "--host="),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :arch))),
          s(:dstr,
            s(:str, "--enable-builddir="),
            s(:begin,
              s(:const, nil, :RUBY_PLATFORM))))),
      s(:send,
        s(:lvar, :args), :<<,
        s(:begin,
          s(:if,
            s(:or,
              s(:gvar, :$enable_shared),
              s(:send,
                s(:gvar, :$static), :!)),
            s(:str, "--enable-shared"),
            s(:str, "--enable-static")))),
      s(:if,
        s(:send,
          s(:lvar, :libffi), :opt),
        s(:send,
          s(:lvar, :args), :<<,
          s(:send,
            s(:lvar, :libffi), :opt)), nil),
      s(:send,
        s(:lvar, :args), :concat,
        s(:array,
          s(:dstr,
            s(:str, "CC="),
            s(:begin,
              s(:lvar, :cc))),
          s(:dstr,
            s(:str, "CFLAGS="),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :cflags))),
          s(:dstr,
            s(:str, "CXX="),
            s(:begin,
              s(:lvar, :cxx))),
          s(:dstr,
            s(:str, "CXXFLAGS="),
            s(:begin,
              s(:send,
                s(:const, nil, :RbConfig), :expand,
                s(:str, "$(CXXFLAGS)"),
                s(:lvar, :nowarn)))),
          s(:dstr,
            s(:str, "LD="),
            s(:begin,
              s(:lvar, :ld))),
          s(:dstr,
            s(:str, "LDFLAGS="),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :ldflags))))),
      s(:send,
        s(:const, nil, :FileUtils), :rm_f,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:lvar, :libffi), :include)),
          s(:str, "/ffitarget.h"))),
      s(:block,
        s(:send,
          s(:const, nil, :Logging), :open),
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Logging), :message,
            s(:str, "%p in %p\n"),
            s(:lvar, :args),
            s(:lvar, :opts)),
          s(:if,
            s(:send, nil, :system,
              s(:splat,
                s(:lvar, :args)),
              s(:hash,
                s(:kwsplat,
                  s(:lvar, :opts)))), nil,
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :IO), :copy_stream,
                    s(:send,
                      s(:send,
                        s(:lvar, :libffi), :dir), :+,
                      s(:str, "/config.log")),
                    s(:send,
                      s(:const, nil, :Logging), :instance_variable_get,
                      s(:sym, :@logfile))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemCallError)),
                    s(:lvasgn, :e),
                    s(:send,
                      s(:const, nil, :Logfile), :message,
                      s(:str, "%s\n"),
                      s(:send,
                        s(:lvar, :e), :message))), nil)),
              s(:send, nil, :raise,
                s(:str, "failed to configure libffi. Please install libffi.")))))),
      s(:if,
        s(:and,
          s(:gvar, :$mswin),
          s(:send,
            s(:const, nil, :File), :file?,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :libffi), :include)),
              s(:str, "/ffitarget.h")))),
        s(:send,
          s(:const, nil, :FileUtils), :rm_f,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :include)),
            s(:str, "/ffitarget.h"))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :File), :file?,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :include)),
            s(:str, "/ffitarget.h"))), nil,
        s(:send,
          s(:const, nil, :FileUtils), :cp,
          s(:dstr,
            s(:begin,
              s(:lvar, :srcdir)),
            s(:str, "/src/x86/ffitarget.h")),
          s(:send,
            s(:lvar, :libffi), :include),
          s(:hash,
            s(:pair,
              s(:sym, :preserve),
              s(:true))))),
      s(:send,
        s(:send,
          s(:gvar, :$INCFLAGS), :<<,
          s(:str, " -I")), :<<,
        s(:send,
          s(:lvar, :libffi), :include)))),
  s(:if,
    s(:lvar, :ver),
    s(:begin,
      s(:lvasgn, :ver,
        s(:send,
          s(:lvar, :ver), :gsub,
          s(:regexp,
            s(:str, "-rc\\d+"),
            s(:regopt)),
          s(:str, ""))),
      s(:lvasgn, :ver,
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:lvar, :ver), :split,
                s(:str, ".")), :+,
              s(:array,
                s(:int, 0),
                s(:int, 0)))), :[],
          s(:int, 0),
          s(:int, 3))),
      s(:send,
        s(:gvar, :$defs), :push,
        s(:dstr,
          s(:str, "-DRUBY_LIBFFI_MODVERSION="),
          s(:begin,
            s(:send,
              s(:str, "%d%03d%03d"), :%,
              s(:lvar, :ver)))))), nil),
  s(:send, nil, :have_header,
    s(:str, "sys/mman.h")),
  s(:if,
    s(:send, nil, :have_header,
      s(:str, "dlfcn.h")),
    s(:begin,
      s(:send, nil, :have_library,
        s(:str, "dl")),
      s(:block,
        s(:send,
          s(:array,
            s(:str, "dlopen"),
            s(:str, "dlclose"),
            s(:str, "dlsym")), :each),
        s(:args,
          s(:arg, :func)),
        s(:if,
          s(:send, nil, :have_func,
            s(:lvar, :func)), nil,
          s(:send, nil, :abort,
            s(:dstr,
              s(:str, "missing function "),
              s(:begin,
                s(:lvar, :func)))))),
      s(:send, nil, :have_func,
        s(:str, "dlerror"))),
    s(:if,
      s(:send, nil, :have_header,
        s(:str, "windows.h")),
      s(:block,
        s(:send,
          s(:array,
            s(:str, "LoadLibrary"),
            s(:str, "FreeLibrary"),
            s(:str, "GetProcAddress")), :each),
        s(:args,
          s(:arg, :func)),
        s(:if,
          s(:send, nil, :have_func,
            s(:lvar, :func)), nil,
          s(:send, nil, :abort,
            s(:dstr,
              s(:str, "missing function "),
              s(:begin,
                s(:lvar, :func)))))), nil)),
  s(:send, nil, :have_const,
    s(:str, "FFI_STDCALL"),
    s(:lvar, :ffi_header)),
  s(:lvasgn, :config,
    s(:send,
      s(:const, nil, :File), :read,
      s(:send,
        s(:const, nil, :RbConfig), :expand,
        s(:send,
          s(:const, nil, :File), :join,
          s(:gvar, :$arch_hdrdir),
          s(:str, "ruby/config.h"))))),
  s(:lvasgn, :types,
    s(:hash,
      s(:pair,
        s(:str, "SIZE_T"),
        s(:str, "SSIZE_T")),
      s(:pair,
        s(:str, "PTRDIFF_T"),
        s(:nil)),
      s(:pair,
        s(:str, "INTPTR_T"),
        s(:nil)))),
  s(:block,
    s(:send,
      s(:lvar, :types), :each),
    s(:args,
      s(:arg, :type),
      s(:arg, :signed)),
    s(:if,
      s(:send,
        s(:regexp,
          s(:str, "^\\#define\\s+SIZEOF_"),
          s(:begin,
            s(:lvar, :type)),
          s(:str, "\\s+(SIZEOF_(.+)|\\d+)"),
          s(:regopt)), :=~,
        s(:lvar, :config)),
      s(:begin,
        s(:if,
          s(:and,
            s(:lvasgn, :size,
              s(:nth_ref, 2)),
            s(:send,
              s(:lvar, :size), :!=,
              s(:str, "VOIDP"))),
          s(:begin,
            s(:lvasgn, :size,
              s(:block,
                s(:send,
                  s(:lvar, :types), :fetch,
                  s(:lvar, :size)),
                s(:args),
                s(:lvar, :size))),
            s(:send,
              s(:gvar, :$defs), :<<,
              s(:send, nil, :format,
                s(:str, "-DTYPE_%s=TYPE_%s"),
                s(:or,
                  s(:lvar, :signed),
                  s(:lvar, :type)),
                s(:lvar, :size)))), nil),
        s(:if,
          s(:lvar, :signed),
          s(:send, nil, :check_signedness,
            s(:send,
              s(:lvar, :type), :downcase),
            s(:str, "stddef.h")), nil)), nil)),
  s(:if,
    s(:lvar, :libffi),
    s(:begin,
      s(:send,
        s(:send,
          s(:gvar, :$LOCAL_LIBS), :prepend,
          s(:dstr,
            s(:str, "./"),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :a)),
            s(:str, " "))), :strip!),
      s(:send,
        s(:gvar, :$INCFLAGS), :gsub!,
        s(:regexp,
          s(:str, "-I"),
          s(:begin,
            s(:send,
              s(:lvar, :libffi), :dir)),
          s(:regopt)),
        s(:str, "-I$(LIBFFI_DIR)"))), nil),
  s(:send,
    s(:gvar, :$INCFLAGS), :<<,
    s(:str, " -I$(top_srcdir)")),
  s(:block,
    s(:send, nil, :create_makefile,
      s(:str, "fiddle")),
    s(:args,
      s(:arg, :conf)),
    s(:begin,
      s(:if,
        s(:send,
          s(:lvar, :libffi), :!),
        s(:next,
          s(:send,
            s(:lvar, :conf), :<<,
            s(:str, "LIBFFI_CLEAN = none\n"))),
        s(:if,
          s(:and,
            s(:gvar, :$gnumake),
            s(:send,
              s(:gvar, :$nmake), :!)),
          s(:lvasgn, :submake,
            s(:str, "$(MAKE) -C $(LIBFFI_DIR)\n")),
          s(:lvasgn, :submake,
            s(:send,
              s(:str, "cd $(LIBFFI_DIR) && \\\n\t\t"), :<<,
              s(:send,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :config_string,
                      s(:str, "exec"))),
                  s(:str, " $(MAKE)")), :strip))))),
      s(:if,
        s(:gvar, :$nmake),
        s(:lvasgn, :cmd,
          s(:dstr,
            s(:str, "$(RUBY) -C $(LIBFFI_DIR) "),
            s(:begin,
              s(:lvar, :libffi_config)),
            s(:str, " --srcdir=$(LIBFFI_SRCDIR)"))),
        s(:lvasgn, :cmd,
          s(:dstr,
            s(:str, "cd $(LIBFFI_DIR) && "),
            s(:gvar, :$exec),
            s(:str, " $(LIBFFI_SRCDIR)/configure "),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :opt))))),
      s(:lvasgn, :sep,
        s(:str, "/")),
      s(:lvasgn, :seprpl,
        s(:or,
          s(:block,
            s(:send, nil, :config_string,
              s(:str, "BUILD_FILE_SEPARATOR")),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :sep,
                s(:lvar, :s)),
              s(:if,
                s(:send,
                  s(:lvar, :s), :!=,
                  s(:str, "/")),
                s(:dstr,
                  s(:str, ":/="),
                  s(:begin,
                    s(:lvar, :s))), nil))),
          s(:str, ""))),
      s(:send,
        s(:lvar, :conf), :<<,
        s(:send,
          s(:dstr,
            s(:str, "   PWD =\n"),
            s(:str, "   LIBFFI_CONFIGURE = "),
            s(:begin,
              s(:lvar, :cmd)),
            s(:str, "\n"),
            s(:str, "   LIBFFI_ARCH = "),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :arch)),
            s(:str, "\n"),
            s(:str, "   LIBFFI_SRCDIR = "),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :libffi), :srcdir), :sub,
                s(:send,
                  s(:lvar, :libffi), :dir),
                s(:str, "$(LIBFFI_DIR)"))),
            s(:str, "\n"),
            s(:str, "   LIBFFI_DIR = "),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :dir)),
            s(:str, "\n"),
            s(:str, "   LIBFFI_A = "),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :libffi), :a), :sub,
                s(:send,
                  s(:lvar, :libffi), :dir),
                s(:str, "$(LIBFFI_DIR)"))),
            s(:str, "\n"),
            s(:str, "   LIBFFI_CFLAGS = "),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :cflags)),
            s(:str, "\n"),
            s(:str, "   LIBFFI_LDFLAGS = "),
            s(:begin,
              s(:send,
                s(:lvar, :libffi), :ldflags)),
            s(:str, "\n"),
            s(:str, "   FFI_H = $(LIBFFI_DIR)/include/ffi.h\n"),
            s(:str, "   SUBMAKE_LIBFFI = "),
            s(:begin,
              s(:lvar, :submake)),
            s(:str, "\n"),
            s(:str, "   LIBFFI_CLEAN = libffi\n")), :gsub,
          s(:regexp,
            s(:str, "^ +| +$"),
            s(:regopt)),
          s(:str, ""))))),
  s(:if,
    s(:lvar, :libffi),
    s(:send,
      s(:gvar, :$LIBPATH), :pop), nil))
