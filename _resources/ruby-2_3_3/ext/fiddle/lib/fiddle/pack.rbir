s(:begin,
  s(:send, nil, :require,
    s(:str, "fiddle")),
  s(:module,
    s(:const, nil, :Fiddle),
    s(:begin,
      s(:module,
        s(:const, nil, :PackInfo),
        s(:begin,
          s(:casgn, nil, :ALIGN_MAP,
            s(:hash,
              s(:pair,
                s(:const, nil, :TYPE_VOIDP),
                s(:const, nil, :ALIGN_VOIDP)),
              s(:pair,
                s(:const, nil, :TYPE_CHAR),
                s(:const, nil, :ALIGN_CHAR)),
              s(:pair,
                s(:const, nil, :TYPE_SHORT),
                s(:const, nil, :ALIGN_SHORT)),
              s(:pair,
                s(:const, nil, :TYPE_INT),
                s(:const, nil, :ALIGN_INT)),
              s(:pair,
                s(:const, nil, :TYPE_LONG),
                s(:const, nil, :ALIGN_LONG)),
              s(:pair,
                s(:const, nil, :TYPE_FLOAT),
                s(:const, nil, :ALIGN_FLOAT)),
              s(:pair,
                s(:const, nil, :TYPE_DOUBLE),
                s(:const, nil, :ALIGN_DOUBLE)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_CHAR), :-@),
                s(:const, nil, :ALIGN_CHAR)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_SHORT), :-@),
                s(:const, nil, :ALIGN_SHORT)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_INT), :-@),
                s(:const, nil, :ALIGN_INT)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_LONG), :-@),
                s(:const, nil, :ALIGN_LONG)))),
          s(:casgn, nil, :PACK_MAP,
            s(:hash,
              s(:pair,
                s(:const, nil, :TYPE_VOIDP),
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :SIZEOF_VOIDP), :==,
                        s(:const, nil, :SIZEOF_LONG_LONG))),
                    s(:str, "q"),
                    s(:str, "l!")))),
              s(:pair,
                s(:const, nil, :TYPE_CHAR),
                s(:str, "c")),
              s(:pair,
                s(:const, nil, :TYPE_SHORT),
                s(:str, "s!")),
              s(:pair,
                s(:const, nil, :TYPE_INT),
                s(:str, "i!")),
              s(:pair,
                s(:const, nil, :TYPE_LONG),
                s(:str, "l!")),
              s(:pair,
                s(:const, nil, :TYPE_FLOAT),
                s(:str, "f")),
              s(:pair,
                s(:const, nil, :TYPE_DOUBLE),
                s(:str, "d")),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_CHAR), :-@),
                s(:str, "c")),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_SHORT), :-@),
                s(:str, "s!")),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_INT), :-@),
                s(:str, "i!")),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_LONG), :-@),
                s(:str, "l!")))),
          s(:casgn, nil, :SIZE_MAP,
            s(:hash,
              s(:pair,
                s(:const, nil, :TYPE_VOIDP),
                s(:const, nil, :SIZEOF_VOIDP)),
              s(:pair,
                s(:const, nil, :TYPE_CHAR),
                s(:const, nil, :SIZEOF_CHAR)),
              s(:pair,
                s(:const, nil, :TYPE_SHORT),
                s(:const, nil, :SIZEOF_SHORT)),
              s(:pair,
                s(:const, nil, :TYPE_INT),
                s(:const, nil, :SIZEOF_INT)),
              s(:pair,
                s(:const, nil, :TYPE_LONG),
                s(:const, nil, :SIZEOF_LONG)),
              s(:pair,
                s(:const, nil, :TYPE_FLOAT),
                s(:const, nil, :SIZEOF_FLOAT)),
              s(:pair,
                s(:const, nil, :TYPE_DOUBLE),
                s(:const, nil, :SIZEOF_DOUBLE)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_CHAR), :-@),
                s(:const, nil, :SIZEOF_CHAR)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_SHORT), :-@),
                s(:const, nil, :SIZEOF_SHORT)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_INT), :-@),
                s(:const, nil, :SIZEOF_INT)),
              s(:pair,
                s(:send,
                  s(:const, nil, :TYPE_LONG), :-@),
                s(:const, nil, :SIZEOF_LONG)))),
          s(:if,
            s(:defined?,
              s(:const, nil, :TYPE_LONG_LONG)),
            s(:begin,
              s(:send,
                s(:const, nil, :ALIGN_MAP), :[]=,
                s(:const, nil, :TYPE_LONG_LONG),
                s(:send,
                  s(:const, nil, :ALIGN_MAP), :[]=,
                  s(:send,
                    s(:const, nil, :TYPE_LONG_LONG), :-@),
                  s(:const, nil, :ALIGN_LONG_LONG))),
              s(:send,
                s(:const, nil, :PACK_MAP), :[]=,
                s(:const, nil, :TYPE_LONG_LONG),
                s(:send,
                  s(:const, nil, :PACK_MAP), :[]=,
                  s(:send,
                    s(:const, nil, :TYPE_LONG_LONG), :-@),
                  s(:str, "q"))),
              s(:send,
                s(:const, nil, :SIZE_MAP), :[]=,
                s(:const, nil, :TYPE_LONG_LONG),
                s(:send,
                  s(:const, nil, :SIZE_MAP), :[]=,
                  s(:send,
                    s(:const, nil, :TYPE_LONG_LONG), :-@),
                  s(:const, nil, :SIZEOF_LONG_LONG)))), nil),
          s(:def, :align,
            s(:args,
              s(:arg, :addr),
              s(:arg, :align)),
            s(:begin,
              s(:lvasgn, :d,
                s(:send,
                  s(:lvar, :addr), :%,
                  s(:lvar, :align))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :==,
                    s(:int, 0))),
                s(:lvar, :addr),
                s(:send,
                  s(:lvar, :addr), :+,
                  s(:begin,
                    s(:send,
                      s(:lvar, :align), :-,
                      s(:lvar, :d))))))),
          s(:send, nil, :module_function,
            s(:sym, :align)))),
      s(:class,
        s(:const, nil, :Packer), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :PackInfo)),
          s(:defs,
            s(:self), :[],
            s(:args,
              s(:restarg, :types)),
            s(:send, nil, :new,
              s(:lvar, :types))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :types)),
            s(:send, nil, :parse_types,
              s(:lvar, :types))),
          s(:def, :size,
            s(:args),
            s(:ivar, :@size)),
          s(:def, :pack,
            s(:args,
              s(:arg, :ary)),
            s(:case,
              s(:const, nil, :SIZEOF_VOIDP),
              s(:when,
                s(:const, nil, :SIZEOF_LONG),
                s(:send,
                  s(:lvar, :ary), :pack,
                  s(:ivar, :@template))),
              s(:when,
                s(:const, nil, :SIZEOF_LONG_LONG),
                s(:send,
                  s(:lvar, :ary), :pack,
                  s(:ivar, :@template))),
              s(:send, nil, :raise,
                s(:const, nil, :RuntimeError),
                s(:str, "sizeof(void*)?")))),
          s(:def, :unpack,
            s(:args,
              s(:arg, :ary)),
            s(:case,
              s(:const, nil, :SIZEOF_VOIDP),
              s(:when,
                s(:const, nil, :SIZEOF_LONG),
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :join), :unpack,
                  s(:ivar, :@template))),
              s(:when,
                s(:const, nil, :SIZEOF_LONG_LONG),
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :join), :unpack,
                  s(:ivar, :@template))),
              s(:send, nil, :raise,
                s(:const, nil, :RuntimeError),
                s(:str, "sizeof(void*)?")))),
          s(:send, nil, :private),
          s(:def, :parse_types,
            s(:args,
              s(:arg, :types)),
            s(:begin,
              s(:ivasgn, :@template,
                s(:str, "")),
              s(:lvasgn, :addr,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :types), :each),
                s(:args,
                  s(:arg, :t)),
                s(:begin,
                  s(:lvasgn, :orig_addr,
                    s(:lvar, :addr)),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :t), :is_a?,
                        s(:const, nil, :Array))),
                    s(:lvasgn, :addr,
                      s(:send, nil, :align,
                        s(:lvar, :orig_addr),
                        s(:send,
                          s(:const, nil, :ALIGN_MAP), :[],
                          s(:const, nil, :TYPE_VOIDP)))),
                    s(:lvasgn, :addr,
                      s(:send, nil, :align,
                        s(:lvar, :orig_addr),
                        s(:send,
                          s(:const, nil, :ALIGN_MAP), :[],
                          s(:lvar, :t))))),
                  s(:lvasgn, :d,
                    s(:send,
                      s(:lvar, :addr), :-,
                      s(:lvar, :orig_addr))),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :d), :>,
                        s(:int, 0))),
                    s(:send,
                      s(:ivar, :@template), :<<,
                      s(:dstr,
                        s(:str, "x"),
                        s(:begin,
                          s(:lvar, :d)))), nil),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :t), :is_a?,
                        s(:const, nil, :Array))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@template), :<<,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:const, nil, :PACK_MAP), :[],
                              s(:send,
                                s(:lvar, :t), :[],
                                s(:int, 0))), :*,
                            s(:send,
                              s(:lvar, :t), :[],
                              s(:int, 1))))),
                      s(:op_asgn,
                        s(:lvasgn, :addr), :+,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:const, nil, :SIZE_MAP), :[],
                              s(:send,
                                s(:lvar, :t), :[],
                                s(:int, 0))), :*,
                            s(:send,
                              s(:lvar, :t), :[],
                              s(:int, 1)))))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@template), :<<,
                        s(:send,
                          s(:const, nil, :PACK_MAP), :[],
                          s(:lvar, :t))),
                      s(:op_asgn,
                        s(:lvasgn, :addr), :+,
                        s(:send,
                          s(:const, nil, :SIZE_MAP), :[],
                          s(:lvar, :t))))))),
              s(:lvasgn, :addr,
                s(:send, nil, :align,
                  s(:lvar, :addr),
                  s(:send,
                    s(:const, nil, :ALIGN_MAP), :[],
                    s(:const, nil, :TYPE_VOIDP)))),
              s(:ivasgn, :@size,
                s(:lvar, :addr)))))))))
