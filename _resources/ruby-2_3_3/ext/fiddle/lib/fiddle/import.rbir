s(:begin,
  s(:send, nil, :require,
    s(:str, "fiddle")),
  s(:send, nil, :require,
    s(:str, "fiddle/struct")),
  s(:send, nil, :require,
    s(:str, "fiddle/cparser")),
  s(:module,
    s(:const, nil, :Fiddle),
    s(:begin,
      s(:class,
        s(:const, nil, :CompositeHandler), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :handlers)),
            s(:ivasgn, :@handlers,
              s(:lvar, :handlers))),
          s(:def, :handlers,
            s(:args),
            s(:ivar, :@handlers)),
          s(:def, :sym,
            s(:args,
              s(:arg, :symbol)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@handlers), :each),
                s(:args,
                  s(:arg, :handle)),
                s(:if,
                  s(:begin,
                    s(:lvar, :handle)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :addr,
                          s(:send,
                            s(:lvar, :handle), :sym,
                            s(:lvar, :symbol))),
                        s(:return,
                          s(:lvar, :addr))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :DLError)), nil, nil), nil)), nil)),
              s(:return,
                s(:nil)))),
          s(:def, :[],
            s(:args,
              s(:arg, :symbol)),
            s(:send, nil, :sym,
              s(:lvar, :symbol))))),
      s(:module,
        s(:const, nil, :Importer),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Fiddle)),
          s(:send, nil, :include,
            s(:const, nil, :CParser)),
          s(:send, nil, :extend,
            s(:const, nil, :Importer)),
          s(:def, :dlload,
            s(:args,
              s(:restarg, :libs)),
            s(:begin,
              s(:lvasgn, :handles,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :libs), :collect),
                    s(:args,
                      s(:arg, :lib)),
                    s(:case,
                      s(:lvar, :lib),
                      s(:when,
                        s(:nil),
                        s(:nil)),
                      s(:when,
                        s(:const, nil, :Handle),
                        s(:lvar, :lib)),
                      s(:when,
                        s(:const, nil, :Importer),
                        s(:send,
                          s(:lvar, :lib), :handlers)),
                      s(:kwbegin,
                        s(:rescue,
                          s(:send,
                            s(:const, nil, :Fiddle), :dlopen,
                            s(:lvar, :lib)),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :DLError)), nil,
                            s(:send, nil, :raise,
                              s(:const, nil, :DLError),
                              s(:dstr,
                                s(:str, "can't load "),
                                s(:begin,
                                  s(:lvar, :lib))))), nil)))), :flatten)),
              s(:ivasgn, :@handler,
                s(:send,
                  s(:const, nil, :CompositeHandler), :new,
                  s(:lvar, :handles))),
              s(:ivasgn, :@func_map,
                s(:hash)),
              s(:ivasgn, :@type_alias,
                s(:hash)))),
          s(:def, :typealias,
            s(:args,
              s(:arg, :alias_type),
              s(:arg, :orig_type)),
            s(:send,
              s(:ivar, :@type_alias), :[]=,
              s(:lvar, :alias_type),
              s(:lvar, :orig_type))),
          s(:def, :sizeof,
            s(:args,
              s(:arg, :ty)),
            s(:begin,
              s(:case,
                s(:lvar, :ty),
                s(:when,
                  s(:const, nil, :String),
                  s(:begin,
                    s(:lvasgn, :ty,
                      s(:send,
                        s(:send, nil, :parse_ctype,
                          s(:lvar, :ty),
                          s(:ivar, :@type_alias)), :abs)),
                    s(:case,
                      s(:lvar, :ty),
                      s(:when,
                        s(:const, nil, :TYPE_CHAR),
                        s(:return,
                          s(:const, nil, :SIZEOF_CHAR))),
                      s(:when,
                        s(:const, nil, :TYPE_SHORT),
                        s(:return,
                          s(:const, nil, :SIZEOF_SHORT))),
                      s(:when,
                        s(:const, nil, :TYPE_INT),
                        s(:return,
                          s(:const, nil, :SIZEOF_INT))),
                      s(:when,
                        s(:const, nil, :TYPE_LONG),
                        s(:return,
                          s(:const, nil, :SIZEOF_LONG))),
                      s(:when,
                        s(:const, nil, :TYPE_LONG_LONG),
                        s(:return,
                          s(:const, nil, :SIZEOF_LONG_LONG))),
                      s(:when,
                        s(:const, nil, :TYPE_FLOAT),
                        s(:return,
                          s(:const, nil, :SIZEOF_FLOAT))),
                      s(:when,
                        s(:const, nil, :TYPE_DOUBLE),
                        s(:return,
                          s(:const, nil, :SIZEOF_DOUBLE))),
                      s(:when,
                        s(:const, nil, :TYPE_VOIDP),
                        s(:return,
                          s(:const, nil, :SIZEOF_VOIDP))),
                      s(:send, nil, :raise,
                        s(:const, nil, :DLError),
                        s(:dstr,
                          s(:str, "unknown type: "),
                          s(:begin,
                            s(:lvar, :ty))))))),
                s(:when,
                  s(:const, nil, :Class),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :ty), :instance_methods), :include?,
                        s(:sym, :to_ptr))),
                    s(:return,
                      s(:send,
                        s(:lvar, :ty), :size)), nil)), nil),
              s(:return,
                s(:send,
                  s(:send,
                    s(:const, nil, :Pointer), :[],
                    s(:lvar, :ty)), :size)))),
          s(:def, :parse_bind_options,
            s(:args,
              s(:arg, :opts)),
            s(:begin,
              s(:lvasgn, :h,
                s(:hash)),
              s(:while,
                s(:begin,
                  s(:lvasgn, :opt,
                    s(:send,
                      s(:lvar, :opts), :shift))),
                s(:case,
                  s(:lvar, :opt),
                  s(:when,
                    s(:sym, :stdcall),
                    s(:sym, :cdecl),
                    s(:send,
                      s(:lvar, :h), :[]=,
                      s(:sym, :call_type),
                      s(:lvar, :opt))),
                  s(:when,
                    s(:sym, :carried),
                    s(:sym, :temp),
                    s(:sym, :temporal),
                    s(:sym, :bind),
                    s(:begin,
                      s(:send,
                        s(:lvar, :h), :[]=,
                        s(:sym, :callback_type),
                        s(:lvar, :opt)),
                      s(:send,
                        s(:lvar, :h), :[]=,
                        s(:sym, :carrier),
                        s(:send,
                          s(:lvar, :opts), :shift)))),
                  s(:send,
                    s(:lvar, :h), :[]=,
                    s(:lvar, :opt),
                    s(:true)))),
              s(:lvar, :h))),
          s(:send, nil, :private,
            s(:sym, :parse_bind_options)),
          s(:casgn, nil, :CALL_TYPE_TO_ABI,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:const, nil, :Hash), :new),
                  s(:args,
                    s(:arg, :h),
                    s(:arg, :k)),
                  s(:send, nil, :raise,
                    s(:const, nil, :RuntimeError),
                    s(:dstr,
                      s(:str, "unsupported call type: "),
                      s(:begin,
                        s(:lvar, :k))))), :merge,
                s(:hash,
                  s(:pair,
                    s(:sym, :stdcall),
                    s(:begin,
                      s(:rescue,
                        s(:const,
                          s(:const, nil, :Function), :STDCALL),
                        s(:resbody, nil, nil,
                          s(:const,
                            s(:const, nil, :Function), :DEFAULT)), nil))),
                  s(:pair,
                    s(:sym, :cdecl),
                    s(:const,
                      s(:const, nil, :Function), :DEFAULT)),
                  s(:pair,
                    s(:nil),
                    s(:const,
                      s(:const, nil, :Function), :DEFAULT)))), :freeze)),
          s(:send, nil, :private_constant,
            s(:sym, :CALL_TYPE_TO_ABI)),
          s(:def, :extern,
            s(:args,
              s(:arg, :signature),
              s(:restarg, :opts)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :symname),
                  s(:lvasgn, :ctype),
                  s(:lvasgn, :argtype)),
                s(:send, nil, :parse_signature,
                  s(:lvar, :signature),
                  s(:ivar, :@type_alias))),
              s(:lvasgn, :opt,
                s(:send, nil, :parse_bind_options,
                  s(:lvar, :opts))),
              s(:lvasgn, :f,
                s(:send, nil, :import_function,
                  s(:lvar, :symname),
                  s(:lvar, :ctype),
                  s(:lvar, :argtype),
                  s(:send,
                    s(:lvar, :opt), :[],
                    s(:sym, :call_type)))),
              s(:lvasgn, :name,
                s(:send,
                  s(:lvar, :symname), :gsub,
                  s(:regexp,
                    s(:str, "@.+"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:send,
                s(:ivar, :@func_map), :[]=,
                s(:lvar, :name),
                s(:lvar, :f)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^(.+?):(\\d+)"),
                        s(:regopt)),
                      s(:send,
                        s(:send, nil, :caller), :first)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :file),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:send,
                          s(:nth_ref, 2), :to_i)))),
                  s(:resbody, nil, nil,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :file),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:str, "(string)"),
                        s(:send,
                          s(:int, 173), :+,
                          s(:int, 3))))), nil)),
              s(:send, nil, :module_eval,
                s(:dstr,
                  s(:str, "        def "),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "(*args, &block)\n"),
                  s(:str, "          @func_map['"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "'].call(*args,&block)\n"),
                  s(:str, "        end\n")),
                s(:lvar, :file),
                s(:lvar, :line)),
              s(:send, nil, :module_function,
                s(:lvar, :name)),
              s(:lvar, :f))),
          s(:def, :bind,
            s(:args,
              s(:arg, :signature),
              s(:restarg, :opts),
              s(:blockarg, :blk)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :name),
                  s(:lvasgn, :ctype),
                  s(:lvasgn, :argtype)),
                s(:send, nil, :parse_signature,
                  s(:lvar, :signature),
                  s(:ivar, :@type_alias))),
              s(:lvasgn, :h,
                s(:send, nil, :parse_bind_options,
                  s(:lvar, :opts))),
              s(:case,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:sym, :callback_type)),
                s(:when,
                  s(:sym, :bind),
                  s(:nil),
                  s(:lvasgn, :f,
                    s(:send, nil, :bind_function,
                      s(:lvar, :name),
                      s(:lvar, :ctype),
                      s(:lvar, :argtype),
                      s(:send,
                        s(:lvar, :h), :[],
                        s(:sym, :call_type)),
                      s(:block_pass,
                        s(:lvar, :blk))))),
                s(:send, nil, :raise,
                  s(:const, nil, :RuntimeError),
                  s(:dstr,
                    s(:str, "unknown callback type: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :h), :[],
                        s(:sym, :callback_type)))))),
              s(:send,
                s(:ivar, :@func_map), :[]=,
                s(:lvar, :name),
                s(:lvar, :f)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^(.+?):(\\d+)"),
                        s(:regopt)),
                      s(:send,
                        s(:send, nil, :caller), :first)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :file),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:send,
                          s(:nth_ref, 2), :to_i)))),
                  s(:resbody, nil, nil,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :file),
                        s(:lvasgn, :line)),
                      s(:array,
                        s(:str, "(string)"),
                        s(:send,
                          s(:int, 201), :+,
                          s(:int, 3))))), nil)),
              s(:send, nil, :module_eval,
                s(:dstr,
                  s(:str, "        def "),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "(*args,&block)\n"),
                  s(:str, "          @func_map['"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "'].call(*args,&block)\n"),
                  s(:str, "        end\n")),
                s(:lvar, :file),
                s(:lvar, :line)),
              s(:send, nil, :module_function,
                s(:lvar, :name)),
              s(:lvar, :f))),
          s(:def, :struct,
            s(:args,
              s(:arg, :signature)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :tys),
                  s(:lvasgn, :mems)),
                s(:send, nil, :parse_struct_signature,
                  s(:lvar, :signature),
                  s(:ivar, :@type_alias))),
              s(:send,
                s(:const,
                  s(:const, nil, :Fiddle), :CStructBuilder), :create,
                s(:const, nil, :CStruct),
                s(:lvar, :tys),
                s(:lvar, :mems)))),
          s(:def, :union,
            s(:args,
              s(:arg, :signature)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :tys),
                  s(:lvasgn, :mems)),
                s(:send, nil, :parse_struct_signature,
                  s(:lvar, :signature),
                  s(:ivar, :@type_alias))),
              s(:send,
                s(:const,
                  s(:const, nil, :Fiddle), :CStructBuilder), :create,
                s(:const, nil, :CUnion),
                s(:lvar, :tys),
                s(:lvar, :mems)))),
          s(:def, :[],
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:ivar, :@func_map), :[],
              s(:lvar, :name))),
          s(:def, :create_value,
            s(:args,
              s(:arg, :ty),
              s(:optarg, :val,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :struct,
                  s(:array,
                    s(:send,
                      s(:lvar, :ty), :+,
                      s(:str, " value"))))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:lvar, :s), :malloc)),
              s(:if,
                s(:begin,
                  s(:lvar, :val)),
                s(:send,
                  s(:lvar, :ptr), :value=,
                  s(:lvar, :val)), nil),
              s(:return,
                s(:lvar, :ptr)))),
          s(:alias,
            s(:sym, :value),
            s(:sym, :create_value)),
          s(:def, :import_value,
            s(:args,
              s(:arg, :ty),
              s(:arg, :addr)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send, nil, :struct,
                  s(:array,
                    s(:send,
                      s(:lvar, :ty), :+,
                      s(:str, " value"))))),
              s(:lvasgn, :ptr,
                s(:send,
                  s(:lvar, :s), :new,
                  s(:lvar, :addr))),
              s(:return,
                s(:lvar, :ptr)))),
          s(:def, :handler,
            s(:args),
            s(:or,
              s(:ivar, :@handler),
              s(:send, nil, :raise,
                s(:str, "call dlload before importing symbols and functions")))),
          s(:def, :import_symbol,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:lvasgn, :addr,
                s(:send,
                  s(:send, nil, :handler), :sym,
                  s(:lvar, :name))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :addr), :!)),
                s(:send, nil, :raise,
                  s(:const, nil, :DLError),
                  s(:dstr,
                    s(:str, "cannot find the symbol: "),
                    s(:begin,
                      s(:lvar, :name)))), nil),
              s(:send,
                s(:const, nil, :Pointer), :new,
                s(:lvar, :addr)))),
          s(:def, :import_function,
            s(:args,
              s(:arg, :name),
              s(:arg, :ctype),
              s(:arg, :argtype),
              s(:optarg, :call_type,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :addr,
                s(:send,
                  s(:send, nil, :handler), :sym,
                  s(:lvar, :name))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :addr), :!)),
                s(:send, nil, :raise,
                  s(:const, nil, :DLError),
                  s(:dstr,
                    s(:str, "cannot find the function: "),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "()"))), nil),
              s(:send,
                s(:const, nil, :Function), :new,
                s(:lvar, :addr),
                s(:lvar, :argtype),
                s(:lvar, :ctype),
                s(:send,
                  s(:const, nil, :CALL_TYPE_TO_ABI), :[],
                  s(:lvar, :call_type)),
                s(:hash,
                  s(:pair,
                    s(:sym, :name),
                    s(:lvar, :name)))))),
          s(:def, :bind_function,
            s(:args,
              s(:arg, :name),
              s(:arg, :ctype),
              s(:arg, :argtype),
              s(:optarg, :call_type,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :abi,
                s(:send,
                  s(:const, nil, :CALL_TYPE_TO_ABI), :[],
                  s(:lvar, :call_type))),
              s(:lvasgn, :closure,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new,
                      s(:const,
                        s(:const, nil, :Fiddle), :Closure)),
                    s(:args),
                    s(:send, nil, :define_method,
                      s(:sym, :call),
                      s(:lvar, :block))), :new,
                  s(:lvar, :ctype),
                  s(:lvar, :argtype),
                  s(:lvar, :abi))),
              s(:send,
                s(:const, nil, :Function), :new,
                s(:lvar, :closure),
                s(:lvar, :argtype),
                s(:lvar, :ctype),
                s(:lvar, :abi),
                s(:hash,
                  s(:pair,
                    s(:sym, :name),
                    s(:lvar, :name)))))))))))
