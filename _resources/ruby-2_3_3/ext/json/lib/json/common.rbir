s(:begin,
  s(:send, nil, :require,
    s(:str, "json/version")),
  s(:send, nil, :require,
    s(:str, "json/generic_object")),
  s(:module,
    s(:const, nil, :JSON),
    s(:begin,
      s(:sclass,
        s(:self),
        s(:begin,
          s(:def, :[],
            s(:args,
              s(:arg, :object),
              s(:optarg, :opts,
                s(:hash))),
            s(:if,
              s(:send,
                s(:lvar, :object), :respond_to?,
                s(:sym, :to_str)),
              s(:send,
                s(:const, nil, :JSON), :parse,
                s(:send,
                  s(:lvar, :object), :to_str),
                s(:lvar, :opts)),
              s(:send,
                s(:const, nil, :JSON), :generate,
                s(:lvar, :object),
                s(:lvar, :opts)))),
          s(:send, nil, :attr_reader,
            s(:sym, :parser)),
          s(:def, :parser=,
            s(:args,
              s(:arg, :parser)),
            s(:begin,
              s(:ivasgn, :@parser,
                s(:lvar, :parser)),
              s(:if,
                s(:send,
                  s(:const, nil, :JSON), :const_defined_in?,
                  s(:self),
                  s(:sym, :Parser)),
                s(:send, nil, :remove_const,
                  s(:sym, :Parser)), nil),
              s(:send, nil, :const_set,
                s(:sym, :Parser),
                s(:lvar, :parser)))),
          s(:def, :deep_const_get,
            s(:args,
              s(:arg, :path)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :to_s), :split,
                  s(:regexp,
                    s(:str, "::"),
                    s(:regopt))), :inject,
                s(:const, nil, :Object)),
              s(:args,
                s(:arg, :p),
                s(:arg, :c)),
              s(:case, nil,
                s(:when,
                  s(:send,
                    s(:lvar, :c), :empty?),
                  s(:lvar, :p)),
                s(:when,
                  s(:send,
                    s(:const, nil, :JSON), :const_defined_in?,
                    s(:lvar, :p),
                    s(:lvar, :c)),
                  s(:send,
                    s(:lvar, :p), :const_get,
                    s(:lvar, :c))),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:lvar, :p), :const_missing,
                      s(:lvar, :c)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :NameError)),
                      s(:lvasgn, :e),
                      s(:send, nil, :raise,
                        s(:const, nil, :ArgumentError),
                        s(:dstr,
                          s(:str, "can't get const "),
                          s(:begin,
                            s(:lvar, :path)),
                          s(:str, ": "),
                          s(:begin,
                            s(:lvar, :e))))), nil))))),
          s(:def, :generator=,
            s(:args,
              s(:arg, :generator)),
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :old),
                    s(:gvasgn, :$VERBOSE)),
                  s(:array,
                    s(:gvar, :$VERBOSE),
                    s(:nil))),
                s(:ivasgn, :@generator,
                  s(:lvar, :generator)),
                s(:lvasgn, :generator_methods,
                  s(:const,
                    s(:lvar, :generator), :GeneratorMethods)),
                s(:for,
                  s(:lvasgn, :const),
                  s(:send,
                    s(:lvar, :generator_methods), :constants),
                  s(:begin,
                    s(:lvasgn, :klass,
                      s(:send, nil, :deep_const_get,
                        s(:lvar, :const))),
                    s(:lvasgn, :modul,
                      s(:send,
                        s(:lvar, :generator_methods), :const_get,
                        s(:lvar, :const))),
                    s(:block,
                      s(:send,
                        s(:lvar, :klass), :class_eval),
                      s(:args),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:send, nil, :instance_methods,
                              s(:false)), :each),
                          s(:args,
                            s(:arg, :m)),
                          s(:and,
                            s(:send,
                              s(:send,
                                s(:lvar, :m), :to_s), :==,
                              s(:str, "to_json")),
                            s(:send, nil, :remove_method,
                              s(:lvar, :m)))),
                        s(:send, nil, :include,
                          s(:lvar, :modul)))))),
                s(:send,
                  s(:self), :state=,
                  s(:const,
                    s(:lvar, :generator), :State)),
                s(:send, nil, :const_set,
                  s(:sym, :State),
                  s(:send,
                    s(:self), :state)),
                s(:send, nil, :const_set,
                  s(:sym, :SAFE_STATE_PROTOTYPE),
                  s(:send,
                    s(:const, nil, :State), :new)),
                s(:send, nil, :const_set,
                  s(:sym, :FAST_STATE_PROTOTYPE),
                  s(:send,
                    s(:const, nil, :State), :new,
                    s(:hash,
                      s(:pair,
                        s(:sym, :indent),
                        s(:str, "")),
                      s(:pair,
                        s(:sym, :space),
                        s(:str, "")),
                      s(:pair,
                        s(:sym, :object_nl),
                        s(:str, "")),
                      s(:pair,
                        s(:sym, :array_nl),
                        s(:str, "")),
                      s(:pair,
                        s(:sym, :max_nesting),
                        s(:false))))),
                s(:send, nil, :const_set,
                  s(:sym, :PRETTY_STATE_PROTOTYPE),
                  s(:send,
                    s(:const, nil, :State), :new,
                    s(:hash,
                      s(:pair,
                        s(:sym, :indent),
                        s(:str, "  ")),
                      s(:pair,
                        s(:sym, :space),
                        s(:str, " ")),
                      s(:pair,
                        s(:sym, :object_nl),
                        s(:str, "\n")),
                      s(:pair,
                        s(:sym, :array_nl),
                        s(:str, "\n")))))),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :old)))),
          s(:send, nil, :attr_reader,
            s(:sym, :generator)),
          s(:send, nil, :attr_accessor,
            s(:sym, :state)),
          s(:send, nil, :attr_accessor,
            s(:sym, :create_id)))),
      s(:send,
        s(:self), :create_id=,
        s(:str, "json_class")),
      s(:casgn, nil, :NaN,
        s(:send,
          s(:float, 0.0), :/,
          s(:int, 0))),
      s(:casgn, nil, :Infinity,
        s(:send,
          s(:float, 1.0), :/,
          s(:int, 0))),
      s(:casgn, nil, :MinusInfinity,
        s(:send,
          s(:const, nil, :Infinity), :-@)),
      s(:class,
        s(:const, nil, :JSONError),
        s(:const, nil, :StandardError),
        s(:defs,
          s(:self), :wrap,
          s(:args,
            s(:arg, :exception)),
          s(:begin,
            s(:lvasgn, :obj,
              s(:send, nil, :new,
                s(:dstr,
                  s(:str, "Wrapped("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :exception), :class)),
                  s(:str, "): "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :exception), :message), :inspect))))),
            s(:send,
              s(:lvar, :obj), :set_backtrace,
              s(:send,
                s(:lvar, :exception), :backtrace)),
            s(:lvar, :obj)))),
      s(:class,
        s(:const, nil, :ParserError),
        s(:const, nil, :JSONError), nil),
      s(:class,
        s(:const, nil, :NestingError),
        s(:const, nil, :ParserError), nil),
      s(:class,
        s(:const, nil, :CircularDatastructure),
        s(:const, nil, :NestingError), nil),
      s(:class,
        s(:const, nil, :GeneratorError),
        s(:const, nil, :JSONError), nil),
      s(:casgn, nil, :UnparserError,
        s(:const, nil, :GeneratorError)),
      s(:class,
        s(:const, nil, :MissingUnicodeSupport),
        s(:const, nil, :JSONError), nil),
      s(:send, nil, :module_function),
      s(:def, :parse,
        s(:args,
          s(:arg, :source),
          s(:optarg, :opts,
            s(:hash))),
        s(:send,
          s(:send,
            s(:const, nil, :Parser), :new,
            s(:lvar, :source),
            s(:lvar, :opts)), :parse)),
      s(:def, :parse!,
        s(:args,
          s(:arg, :source),
          s(:optarg, :opts,
            s(:hash))),
        s(:begin,
          s(:lvasgn, :opts,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:sym, :max_nesting),
                  s(:false)),
                s(:pair,
                  s(:sym, :allow_nan),
                  s(:true))), :update,
              s(:lvar, :opts))),
          s(:send,
            s(:send,
              s(:const, nil, :Parser), :new,
              s(:lvar, :source),
              s(:lvar, :opts)), :parse))),
      s(:def, :generate,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :opts,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :State), :===,
              s(:lvar, :opts)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :state),
                s(:lvasgn, :opts)),
              s(:array,
                s(:lvar, :opts),
                s(:nil))),
            s(:lvasgn, :state,
              s(:send,
                s(:const, nil, :SAFE_STATE_PROTOTYPE), :dup))),
          s(:if,
            s(:lvar, :opts),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :opts), :respond_to?,
                  s(:sym, :to_hash)),
                s(:lvasgn, :opts,
                  s(:send,
                    s(:lvar, :opts), :to_hash)),
                s(:if,
                  s(:send,
                    s(:lvar, :opts), :respond_to?,
                    s(:sym, :to_h)),
                  s(:lvasgn, :opts,
                    s(:send,
                      s(:lvar, :opts), :to_h)),
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError),
                    s(:dstr,
                      s(:str, "can't convert "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opts), :class)),
                      s(:str, " into Hash"))))),
              s(:lvasgn, :state,
                s(:send,
                  s(:lvar, :state), :configure,
                  s(:lvar, :opts)))), nil),
          s(:send,
            s(:lvar, :state), :generate,
            s(:lvar, :obj)))),
      s(:alias,
        s(:sym, :unparse),
        s(:sym, :generate)),
      s(:send, nil, :module_function,
        s(:sym, :unparse)),
      s(:def, :fast_generate,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :opts,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :State), :===,
              s(:lvar, :opts)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :state),
                s(:lvasgn, :opts)),
              s(:array,
                s(:lvar, :opts),
                s(:nil))),
            s(:lvasgn, :state,
              s(:send,
                s(:const, nil, :FAST_STATE_PROTOTYPE), :dup))),
          s(:if,
            s(:lvar, :opts),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :opts), :respond_to?,
                  s(:sym, :to_hash)),
                s(:lvasgn, :opts,
                  s(:send,
                    s(:lvar, :opts), :to_hash)),
                s(:if,
                  s(:send,
                    s(:lvar, :opts), :respond_to?,
                    s(:sym, :to_h)),
                  s(:lvasgn, :opts,
                    s(:send,
                      s(:lvar, :opts), :to_h)),
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError),
                    s(:dstr,
                      s(:str, "can't convert "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opts), :class)),
                      s(:str, " into Hash"))))),
              s(:send,
                s(:lvar, :state), :configure,
                s(:lvar, :opts))), nil),
          s(:send,
            s(:lvar, :state), :generate,
            s(:lvar, :obj)))),
      s(:alias,
        s(:sym, :fast_unparse),
        s(:sym, :fast_generate)),
      s(:send, nil, :module_function,
        s(:sym, :fast_unparse)),
      s(:def, :pretty_generate,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :opts,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :State), :===,
              s(:lvar, :opts)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :state),
                s(:lvasgn, :opts)),
              s(:array,
                s(:lvar, :opts),
                s(:nil))),
            s(:lvasgn, :state,
              s(:send,
                s(:const, nil, :PRETTY_STATE_PROTOTYPE), :dup))),
          s(:if,
            s(:lvar, :opts),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :opts), :respond_to?,
                  s(:sym, :to_hash)),
                s(:lvasgn, :opts,
                  s(:send,
                    s(:lvar, :opts), :to_hash)),
                s(:if,
                  s(:send,
                    s(:lvar, :opts), :respond_to?,
                    s(:sym, :to_h)),
                  s(:lvasgn, :opts,
                    s(:send,
                      s(:lvar, :opts), :to_h)),
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError),
                    s(:dstr,
                      s(:str, "can't convert "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opts), :class)),
                      s(:str, " into Hash"))))),
              s(:send,
                s(:lvar, :state), :configure,
                s(:lvar, :opts))), nil),
          s(:send,
            s(:lvar, :state), :generate,
            s(:lvar, :obj)))),
      s(:alias,
        s(:sym, :pretty_unparse),
        s(:sym, :pretty_generate)),
      s(:send, nil, :module_function,
        s(:sym, :pretty_unparse)),
      s(:sclass,
        s(:self),
        s(:send, nil, :attr_accessor,
          s(:sym, :load_default_options))),
      s(:send,
        s(:self), :load_default_options=,
        s(:hash,
          s(:pair,
            s(:sym, :max_nesting),
            s(:false)),
          s(:pair,
            s(:sym, :allow_nan),
            s(:true)),
          s(:pair,
            s(:sym, :quirks_mode),
            s(:true)),
          s(:pair,
            s(:sym, :create_additions),
            s(:true)))),
      s(:def, :load,
        s(:args,
          s(:arg, :source),
          s(:optarg, :proc,
            s(:nil)),
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:lvasgn, :opts,
            s(:send,
              s(:send, nil, :load_default_options), :merge,
              s(:lvar, :options))),
          s(:if,
            s(:send,
              s(:lvar, :source), :respond_to?,
              s(:sym, :to_str)),
            s(:lvasgn, :source,
              s(:send,
                s(:lvar, :source), :to_str)),
            s(:if,
              s(:send,
                s(:lvar, :source), :respond_to?,
                s(:sym, :to_io)),
              s(:lvasgn, :source,
                s(:send,
                  s(:send,
                    s(:lvar, :source), :to_io), :read)),
              s(:if,
                s(:send,
                  s(:lvar, :source), :respond_to?,
                  s(:sym, :read)),
                s(:lvasgn, :source,
                  s(:send,
                    s(:lvar, :source), :read)), nil))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :opts), :[],
                s(:sym, :quirks_mode)),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:lvar, :source), :nil?),
                  s(:send,
                    s(:lvar, :source), :empty?)))),
            s(:lvasgn, :source,
              s(:str, "null")), nil),
          s(:lvasgn, :result,
            s(:send, nil, :parse,
              s(:lvar, :source),
              s(:lvar, :opts))),
          s(:if,
            s(:lvar, :proc),
            s(:send, nil, :recurse_proc,
              s(:lvar, :result),
              s(:block_pass,
                s(:lvar, :proc))), nil),
          s(:lvar, :result))),
      s(:def, :recurse_proc,
        s(:args,
          s(:arg, :result),
          s(:blockarg, :proc)),
        s(:case,
          s(:lvar, :result),
          s(:when,
            s(:const, nil, :Array),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :result), :each),
                s(:args,
                  s(:arg, :x)),
                s(:send, nil, :recurse_proc,
                  s(:lvar, :x),
                  s(:block_pass,
                    s(:lvar, :proc)))),
              s(:send,
                s(:lvar, :proc), :call,
                s(:lvar, :result)))),
          s(:when,
            s(:const, nil, :Hash),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :result), :each),
                s(:args,
                  s(:arg, :x),
                  s(:arg, :y)),
                s(:begin,
                  s(:send, nil, :recurse_proc,
                    s(:lvar, :x),
                    s(:block_pass,
                      s(:lvar, :proc))),
                  s(:send, nil, :recurse_proc,
                    s(:lvar, :y),
                    s(:block_pass,
                      s(:lvar, :proc))))),
              s(:send,
                s(:lvar, :proc), :call,
                s(:lvar, :result)))),
          s(:send,
            s(:lvar, :proc), :call,
            s(:lvar, :result)))),
      s(:alias,
        s(:sym, :restore),
        s(:sym, :load)),
      s(:send, nil, :module_function,
        s(:sym, :restore)),
      s(:sclass,
        s(:self),
        s(:send, nil, :attr_accessor,
          s(:sym, :dump_default_options))),
      s(:send,
        s(:self), :dump_default_options=,
        s(:hash,
          s(:pair,
            s(:sym, :max_nesting),
            s(:false)),
          s(:pair,
            s(:sym, :allow_nan),
            s(:true)),
          s(:pair,
            s(:sym, :quirks_mode),
            s(:true)))),
      s(:def, :dump,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :anIO,
            s(:nil)),
          s(:optarg, :limit,
            s(:nil))),
        s(:rescue,
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :anIO),
                s(:send,
                  s(:lvar, :limit), :nil?)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :anIO), :respond_to?,
                    s(:sym, :to_io)),
                  s(:lvasgn, :anIO,
                    s(:send,
                      s(:lvar, :anIO), :to_io)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :anIO), :respond_to?,
                    s(:sym, :write)), nil,
                  s(:begin,
                    s(:lvasgn, :limit,
                      s(:lvar, :anIO)),
                    s(:lvasgn, :anIO,
                      s(:nil))))), nil),
            s(:lvasgn, :opts,
              s(:send,
                s(:const, nil, :JSON), :dump_default_options)),
            s(:if,
              s(:lvar, :limit),
              s(:lvasgn, :opts,
                s(:send,
                  s(:lvar, :opts), :merge,
                  s(:hash,
                    s(:pair,
                      s(:sym, :max_nesting),
                      s(:lvar, :limit))))), nil),
            s(:lvasgn, :result,
              s(:send, nil, :generate,
                s(:lvar, :obj),
                s(:lvar, :opts))),
            s(:if,
              s(:lvar, :anIO),
              s(:begin,
                s(:send,
                  s(:lvar, :anIO), :write,
                  s(:lvar, :result)),
                s(:lvar, :anIO)),
              s(:lvar, :result))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :JSON), :NestingError)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "exceed depth limit"))), nil)),
      s(:defs,
        s(:self), :swap!,
        s(:args,
          s(:arg, :string)),
        s(:begin,
          s(:block,
            s(:send,
              s(:int, 0), :upto,
              s(:send,
                s(:send,
                  s(:lvar, :string), :size), :/,
                s(:int, 2))),
            s(:args,
              s(:arg, :i)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :string), :[],
                  s(:send,
                    s(:send,
                      s(:int, 2), :*,
                      s(:lvar, :i)), :+,
                    s(:int, 1))), nil,
                s(:break)),
              s(:masgn,
                s(:mlhs,
                  s(:send,
                    s(:lvar, :string), :[]=,
                    s(:send,
                      s(:int, 2), :*,
                      s(:lvar, :i))),
                  s(:send,
                    s(:lvar, :string), :[]=,
                    s(:send,
                      s(:send,
                        s(:int, 2), :*,
                        s(:lvar, :i)), :+,
                      s(:int, 1)))),
                s(:array,
                  s(:send,
                    s(:lvar, :string), :[],
                    s(:send,
                      s(:send,
                        s(:int, 2), :*,
                        s(:lvar, :i)), :+,
                      s(:int, 1))),
                  s(:send,
                    s(:lvar, :string), :[],
                    s(:send,
                      s(:int, 2), :*,
                      s(:lvar, :i))))))),
          s(:lvar, :string))),
      s(:if,
        s(:send,
          s(:const,
            s(:cbase), :String), :method_defined?,
          s(:sym, :encode)),
        s(:defs,
          s(:self), :iconv,
          s(:args,
            s(:arg, :to),
            s(:arg, :from),
            s(:arg, :string)),
          s(:send,
            s(:lvar, :string), :encode,
            s(:lvar, :to),
            s(:lvar, :from))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "iconv")),
          s(:defs,
            s(:self), :iconv,
            s(:args,
              s(:arg, :to),
              s(:arg, :from),
              s(:arg, :string)),
            s(:send,
              s(:const, nil, :Iconv), :conv,
              s(:lvar, :to),
              s(:lvar, :from),
              s(:lvar, :string))))),
      s(:if,
        s(:send,
          s(:send,
            s(:send,
              s(:const,
                s(:cbase), :Object), :method,
              s(:sym, :const_defined?)), :arity), :==,
          s(:int, 1)),
        s(:defs,
          s(:self), :const_defined_in?,
          s(:args,
            s(:arg, :modul),
            s(:arg, :constant)),
          s(:send,
            s(:lvar, :modul), :const_defined?,
            s(:lvar, :constant))),
        s(:defs,
          s(:self), :const_defined_in?,
          s(:args,
            s(:arg, :modul),
            s(:arg, :constant)),
          s(:send,
            s(:lvar, :modul), :const_defined?,
            s(:lvar, :constant),
            s(:false)))))),
  s(:module,
    s(:const,
      s(:cbase), :Kernel),
    s(:begin,
      s(:send, nil, :private),
      s(:def, :j,
        s(:args,
          s(:restarg, :objs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :objs), :each),
            s(:args,
              s(:arg, :obj)),
            s(:send, nil, :puts,
              s(:send,
                s(:const, nil, :JSON), :generate,
                s(:lvar, :obj),
                s(:hash,
                  s(:pair,
                    s(:sym, :allow_nan),
                    s(:true)),
                  s(:pair,
                    s(:sym, :max_nesting),
                    s(:false)))))),
          s(:nil))),
      s(:def, :jj,
        s(:args,
          s(:restarg, :objs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :objs), :each),
            s(:args,
              s(:arg, :obj)),
            s(:send, nil, :puts,
              s(:send,
                s(:const, nil, :JSON), :pretty_generate,
                s(:lvar, :obj),
                s(:hash,
                  s(:pair,
                    s(:sym, :allow_nan),
                    s(:true)),
                  s(:pair,
                    s(:sym, :max_nesting),
                    s(:false)))))),
          s(:nil))),
      s(:def, :JSON,
        s(:args,
          s(:arg, :object),
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:lvar, :object), :respond_to?,
            s(:sym, :to_str)),
          s(:send,
            s(:const, nil, :JSON), :parse,
            s(:send,
              s(:lvar, :object), :to_str),
            s(:send,
              s(:lvar, :args), :first)),
          s(:send,
            s(:const, nil, :JSON), :generate,
            s(:lvar, :object),
            s(:send,
              s(:lvar, :args), :first)))))),
  s(:class,
    s(:const,
      s(:cbase), :Class), nil,
    s(:def, :json_creatable?,
      s(:args),
      s(:send, nil, :respond_to?,
        s(:sym, :json_create)))))
