s(:begin,
  s(:if,
    s(:and,
      s(:defined?,
        s(:const,
          s(:const,
            s(:cbase), :JSON), :JSON_LOADED)),
      s(:const,
        s(:const,
          s(:cbase), :JSON), :JSON_LOADED)), nil,
    s(:send, nil, :require,
      s(:str, "json"))),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:class,
    s(:const, nil, :OpenStruct), nil,
    s(:begin,
      s(:defs,
        s(:self), :json_create,
        s(:args,
          s(:arg, :object)),
        s(:send, nil, :new,
          s(:or,
            s(:send,
              s(:lvar, :object), :[],
              s(:str, "t")),
            s(:send,
              s(:lvar, :object), :[],
              s(:sym, :t))))),
      s(:def, :as_json,
        s(:args,
          s(:restarg)),
        s(:begin,
          s(:lvasgn, :klass,
            s(:send,
              s(:send,
                s(:self), :class), :name)),
          s(:and,
            s(:send,
              s(:send,
                s(:lvar, :klass), :to_s), :empty?),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :JSON), :JSONError),
              s(:str, "Only named structs are supported!"))),
          s(:hash,
            s(:pair,
              s(:send,
                s(:const, nil, :JSON), :create_id),
              s(:lvar, :klass)),
            s(:pair,
              s(:str, "t"),
              s(:send, nil, :table))))),
      s(:def, :to_json,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:send, nil, :as_json), :to_json,
          s(:splat,
            s(:lvar, :args)))))))
