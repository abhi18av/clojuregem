s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:lvasgn, :readline,
    s(:send,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:sym, :headers),
        s(:sym, :extra_check)), :new,
      s(:array,
        s(:str, "stdio.h")))),
  s(:defs,
    s(:lvar, :readline), :have_header,
    s(:args,
      s(:arg, :header)),
    s(:if,
      s(:super,
        s(:lvar, :header),
        s(:block_pass,
          s(:send, nil, :extra_check))),
      s(:begin,
        s(:send,
          s(:send, nil, :headers), :push,
          s(:lvar, :header)),
        s(:return,
          s(:true))),
      s(:return,
        s(:false)))),
  s(:defs,
    s(:lvar, :readline), :have_var,
    s(:args,
      s(:arg, :var)),
    s(:return,
      s(:super,
        s(:lvar, :var),
        s(:send, nil, :headers)))),
  s(:defs,
    s(:lvar, :readline), :have_func,
    s(:args,
      s(:arg, :func)),
    s(:return,
      s(:super,
        s(:lvar, :func),
        s(:send, nil, :headers)))),
  s(:defs,
    s(:lvar, :readline), :have_type,
    s(:args,
      s(:arg, :type)),
    s(:return,
      s(:super,
        s(:lvar, :type),
        s(:send, nil, :headers)))),
  s(:send, nil, :dir_config,
    s(:str, "curses")),
  s(:send, nil, :dir_config,
    s(:str, "ncurses")),
  s(:send, nil, :dir_config,
    s(:str, "termcap")),
  s(:send, nil, :dir_config,
    s(:str, "readline")),
  s(:lvasgn, :enable_libedit,
    s(:send, nil, :enable_config,
      s(:str, "libedit"))),
  s(:if,
    s(:send,
      s(:regexp,
        s(:str, "cygwin"),
        s(:regopt)), :===,
      s(:const, nil, :RUBY_PLATFORM)),
    s(:send, nil, :have_library,
      s(:str, "user32"),
      s(:nil)), nil),
  s(:or,
    s(:or,
      s(:send, nil, :have_library,
        s(:str, "ncurses"),
        s(:str, "tgetnum")),
      s(:send, nil, :have_library,
        s(:str, "termcap"),
        s(:str, "tgetnum"))),
    s(:send, nil, :have_library,
      s(:str, "curses"),
      s(:str, "tgetnum"))),
  s(:case,
    s(:lvar, :enable_libedit),
    s(:when,
      s(:true),
      s(:begin,
        s(:send, nil, :dir_config,
          s(:str, "libedit")),
        s(:if,
          s(:and,
            s(:begin,
              s(:or,
                s(:send,
                  s(:lvar, :readline), :have_header,
                  s(:str, "editline/readline.h")),
                s(:send,
                  s(:lvar, :readline), :have_header,
                  s(:str, "readline/readline.h")))),
            s(:send, nil, :have_library,
              s(:str, "edit"),
              s(:str, "readline"))), nil,
          s(:send, nil, :raise,
            s(:str, "libedit not found"))))),
    s(:when,
      s(:false),
      s(:if,
        s(:begin,
          s(:and,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :readline), :have_header,
                  s(:str, "readline/readline.h")),
                s(:send,
                  s(:lvar, :readline), :have_header,
                  s(:str, "readline/history.h")))),
            s(:send, nil, :have_library,
              s(:str, "readline"),
              s(:str, "readline")))), nil,
        s(:send, nil, :raise,
          s(:str, "readline not found")))),
    s(:if,
      s(:or,
        s(:begin,
          s(:and,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :readline), :have_header,
                  s(:str, "readline/readline.h")),
                s(:send,
                  s(:lvar, :readline), :have_header,
                  s(:str, "readline/history.h")))),
            s(:begin,
              s(:or,
                s(:send, nil, :have_library,
                  s(:str, "readline"),
                  s(:str, "readline")),
                s(:send, nil, :have_library,
                  s(:str, "edit"),
                  s(:str, "readline")))))),
        s(:begin,
          s(:and,
            s(:send,
              s(:lvar, :readline), :have_header,
              s(:str, "editline/readline.h")),
            s(:send, nil, :have_library,
              s(:str, "edit"),
              s(:str, "readline"))))), nil,
      s(:send, nil, :raise,
        s(:str, "readline nor libedit not found")))),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_getc")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_getc_function")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_filename_completion_function")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_username_completion_function")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_completion_matches")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_refresh_line")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_deprep_term_function")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_completion_append_character")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_basic_word_break_characters")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_completer_word_break_characters")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_basic_quote_characters")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_completer_quote_characters")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_filename_quote_characters")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_attempted_completion_over")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_library_version")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_editing_mode")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_line_buffer")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_point")),
  s(:and,
    s(:send,
      s(:regexp,
        s(:str, "mswin|bccwin|mingw"),
        s(:regopt)), :!~,
      s(:const, nil, :RUBY_PLATFORM)),
    s(:send,
      s(:lvar, :readline), :have_var,
      s(:str, "rl_event_hook"))),
  s(:and,
    s(:send,
      s(:regexp,
        s(:str, "mswin|bccwin|mingw"),
        s(:regopt)), :!~,
      s(:const, nil, :RUBY_PLATFORM)),
    s(:send,
      s(:lvar, :readline), :have_var,
      s(:str, "rl_catch_sigwinch"))),
  s(:and,
    s(:send,
      s(:regexp,
        s(:str, "mswin|bccwin|mingw"),
        s(:regopt)), :!~,
      s(:const, nil, :RUBY_PLATFORM)),
    s(:send,
      s(:lvar, :readline), :have_var,
      s(:str, "rl_catch_signals"))),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_pre_input_hook")),
  s(:send,
    s(:lvar, :readline), :have_var,
    s(:str, "rl_special_prefixes")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_cleanup_after_signal")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_free_line_state")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_clear_signals")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_set_screen_size")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_get_screen_size")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_vi_editing_mode")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_emacs_editing_mode")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "replace_history_entry")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "remove_history")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "clear_history")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_redisplay")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_insert_text")),
  s(:send,
    s(:lvar, :readline), :have_func,
    s(:str, "rl_delete_text")),
  s(:if,
    s(:send,
      s(:lvar, :readline), :have_type,
      s(:str, "rl_hook_func_t*")), nil,
    s(:send,
      s(:gvar, :$defs), :<<,
      s(:str, "-Drl_hook_func_t=Function"))),
  s(:send,
    s(:gvar, :$INCFLAGS), :<<,
    s(:str, " -I$(top_srcdir)")),
  s(:send, nil, :create_makefile,
    s(:str, "readline")))
