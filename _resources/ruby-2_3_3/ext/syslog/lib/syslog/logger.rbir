s(:begin,
  s(:send, nil, :require,
    s(:str, "syslog")),
  s(:send, nil, :require,
    s(:str, "logger")),
  s(:class,
    s(:const,
      s(:const, nil, :Syslog), :Logger), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Formatter), nil,
        s(:begin,
          s(:def, :call,
            s(:args,
              s(:arg, :severity),
              s(:arg, :time),
              s(:arg, :progname),
              s(:arg, :msg)),
            s(:send, nil, :clean,
              s(:lvar, :msg))),
          s(:send, nil, :private),
          s(:def, :clean,
            s(:args,
              s(:arg, :message)),
            s(:begin,
              s(:lvasgn, :message,
                s(:send,
                  s(:send,
                    s(:lvar, :message), :to_s), :strip)),
              s(:send,
                s(:lvar, :message), :gsub!,
                s(:regexp,
                  s(:str, "\\e\\[[0-9;]*m"),
                  s(:regopt)),
                s(:str, "")),
              s(:return,
                s(:lvar, :message)))))),
      s(:casgn, nil, :VERSION,
        s(:str, "2.1.0")),
      s(:casgn, nil, :LEVEL_MAP,
        s(:hash,
          s(:pair,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :UNKNOWN),
            s(:const,
              s(:const, nil, :Syslog), :LOG_ALERT)),
          s(:pair,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :FATAL),
            s(:const,
              s(:const, nil, :Syslog), :LOG_ERR)),
          s(:pair,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :ERROR),
            s(:const,
              s(:const, nil, :Syslog), :LOG_WARNING)),
          s(:pair,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :WARN),
            s(:const,
              s(:const, nil, :Syslog), :LOG_NOTICE)),
          s(:pair,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :INFO),
            s(:const,
              s(:const, nil, :Syslog), :LOG_INFO)),
          s(:pair,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :DEBUG),
            s(:const,
              s(:const, nil, :Syslog), :LOG_DEBUG)))),
      s(:defs,
        s(:self), :syslog,
        s(:args),
        s(:cvar, :@@syslog)),
      s(:defs,
        s(:self), :syslog=,
        s(:args,
          s(:arg, :syslog)),
        s(:cvasgn, :@@syslog,
          s(:lvar, :syslog))),
      s(:defs,
        s(:self), :make_methods,
        s(:args,
          s(:arg, :meth)),
        s(:begin,
          s(:lvasgn, :level,
            s(:send,
              s(:const,
                s(:cbase), :Logger), :const_get,
              s(:send,
                s(:lvar, :meth), :upcase))),
          s(:send, nil, :eval,
            s(:dstr,
              s(:str, "      def "),
              s(:begin,
                s(:lvar, :meth)),
              s(:str, "(message = nil, &block)\n"),
              s(:str, "        add("),
              s(:begin,
                s(:lvar, :level)),
              s(:str, ", message, &block)\n"),
              s(:str, "      end\n"),
              s(:str, "\n"),
              s(:str, "      def "),
              s(:begin,
                s(:lvar, :meth)),
              s(:str, "?\n"),
              s(:str, "        @level <= "),
              s(:begin,
                s(:lvar, :level)),
              s(:str, "\n"),
              s(:str, "      end\n")),
            s(:nil),
            s(:str, "(string)"),
            s(:send,
              s(:int, 109), :+,
              s(:int, 1))))),
      s(:block,
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :Logger), :Severity), :constants), :each),
        s(:args,
          s(:arg, :severity)),
        s(:send, nil, :make_methods,
          s(:send,
            s(:lvar, :severity), :downcase))),
      s(:send, nil, :attr_accessor,
        s(:sym, :level)),
      s(:send, nil, :attr_accessor,
        s(:sym, :formatter)),
      s(:send, nil, :attr_accessor,
        s(:sym, :facility)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :program_name,
            s(:str, "ruby")),
          s(:optarg, :facility,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@level,
            s(:const,
              s(:const,
                s(:cbase), :Logger), :DEBUG)),
          s(:ivasgn, :@formatter,
            s(:send,
              s(:const, nil, :Formatter), :new)),
          s(:or_asgn,
            s(:cvasgn, :@@syslog),
            s(:send,
              s(:const, nil, :Syslog), :open,
              s(:lvar, :program_name))),
          s(:ivasgn, :@facility,
            s(:begin,
              s(:or,
                s(:lvar, :facility),
                s(:send,
                  s(:cvar, :@@syslog), :facility)))))),
      s(:def, :add,
        s(:args,
          s(:arg, :severity),
          s(:optarg, :message,
            s(:nil)),
          s(:optarg, :progname,
            s(:nil)),
          s(:blockarg, :block)),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :severity),
            s(:const,
              s(:const,
                s(:cbase), :Logger), :UNKNOWN)),
          s(:and,
            s(:send,
              s(:ivar, :@level), :<=,
              s(:lvar, :severity)),
            s(:send,
              s(:cvar, :@@syslog), :log,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :LEVEL_MAP), :[],
                    s(:lvar, :severity)), :|,
                  s(:ivar, :@facility))),
              s(:str, "%s"),
              s(:send,
                s(:send, nil, :formatter), :call,
                s(:lvar, :severity),
                s(:send,
                  s(:const, nil, :Time), :now),
                s(:lvar, :progname),
                s(:begin,
                  s(:or,
                    s(:lvar, :message),
                    s(:send,
                      s(:lvar, :block), :call)))))),
          s(:true))))))
