s(:begin,
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:def, :main,
    s(:args),
    s(:begin,
      s(:lvasgn, :mode,
        s(:nil)),
      s(:lvasgn, :ids1src,
        s(:nil)),
      s(:lvasgn, :ids2src,
        s(:nil)),
      s(:lvasgn, :output,
        s(:nil)),
      s(:lvasgn, :parser,
        s(:ivasgn, :@parser,
          s(:send,
            s(:const, nil, :OptionParser), :new))),
      s(:send,
        s(:lvar, :parser), :banner=,
        s(:dstr,
          s(:str, "Usage: "),
          s(:begin,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:gvar, :$0))),
          s(:str, " --mode=MODE [--ids1src=PATH] [--ids2src=PATH] [--output=PATH]"))),
      s(:block,
        s(:send,
          s(:lvar, :parser), :on,
          s(:str, "--mode=MODE"),
          s(:str, "check, eventids1, or eventids2table.")),
        s(:args,
          s(:arg, :m)),
        s(:lvasgn, :mode,
          s(:lvar, :m))),
      s(:block,
        s(:send,
          s(:lvar, :parser), :on,
          s(:str, "--ids1src=PATH"),
          s(:str, "A source file of event-IDs 1 (parse.y).")),
        s(:args,
          s(:arg, :path)),
        s(:lvasgn, :ids1src,
          s(:lvar, :path))),
      s(:block,
        s(:send,
          s(:lvar, :parser), :on,
          s(:str, "--ids2src=PATH"),
          s(:str, "A source file of event-IDs 2 (eventids2.c).")),
        s(:args,
          s(:arg, :path)),
        s(:lvasgn, :ids2src,
          s(:lvar, :path))),
      s(:block,
        s(:send,
          s(:lvar, :parser), :on,
          s(:str, "--output=PATH"),
          s(:str, "An output file.")),
        s(:args,
          s(:arg, :path)),
        s(:lvasgn, :output,
          s(:lvar, :path))),
      s(:block,
        s(:send,
          s(:lvar, :parser), :on,
          s(:str, "--help"),
          s(:str, "Prints this message and quit.")),
        s(:args),
        s(:begin,
          s(:send, nil, :puts,
            s(:send,
              s(:lvar, :parser), :help)),
          s(:send, nil, :exit,
            s(:true)))),
      s(:kwbegin,
        s(:rescue,
          s(:send,
            s(:lvar, :parser), :parse!),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :OptionParser), :ParseError)),
            s(:lvasgn, :err),
            s(:send, nil, :usage,
              s(:send,
                s(:lvar, :err), :message))), nil)),
      s(:if,
        s(:lvar, :mode), nil,
        s(:send, nil, :usage,
          s(:str, "no mode given"))),
      s(:case,
        s(:lvar, :mode),
        s(:when,
          s(:str, "check"),
          s(:begin,
            s(:if,
              s(:lvar, :ids1src), nil,
              s(:send, nil, :usage,
                s(:str, "no --ids1src"))),
            s(:if,
              s(:lvar, :ids2src), nil,
              s(:send, nil, :usage,
                s(:str, "no --ids2src"))),
            s(:lvasgn, :h,
              s(:send, nil, :read_ids1_with_locations,
                s(:lvar, :ids1src))),
            s(:send, nil, :check_arity,
              s(:lvar, :h)),
            s(:lvasgn, :ids2,
              s(:send, nil, :read_ids2,
                s(:lvar, :ids2src))),
            s(:lvasgn, :common,
              s(:send,
                s(:send,
                  s(:lvar, :h), :keys), :&,
                s(:lvar, :ids2))),
            s(:if,
              s(:send,
                s(:lvar, :common), :empty?), nil,
              s(:send, nil, :abort,
                s(:dstr,
                  s(:str, "event crash: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :common), :join,
                      s(:str, " ")))))),
            s(:send, nil, :exit,
              s(:int, 0)))),
        s(:when,
          s(:str, "eventids1"),
          s(:begin,
            s(:if,
              s(:lvar, :ids1src), nil,
              s(:send, nil, :usage,
                s(:str, "no --ids1src"))),
            s(:lvasgn, :result,
              s(:send, nil, :generate_eventids1,
                s(:send, nil, :read_ids1,
                  s(:lvar, :ids1src)))))),
        s(:when,
          s(:str, "eventids2table"),
          s(:begin,
            s(:if,
              s(:lvar, :ids2src), nil,
              s(:send, nil, :usage,
                s(:str, "no --ids2src"))),
            s(:lvasgn, :result,
              s(:send, nil, :generate_eventids2_table,
                s(:send, nil, :read_ids2,
                  s(:lvar, :ids2src)))))), nil),
      s(:if,
        s(:lvar, :output),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :output),
            s(:str, "w")),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :f), :write,
            s(:lvar, :result))),
        s(:send, nil, :puts,
          s(:lvar, :result))))),
  s(:def, :usage,
    s(:args,
      s(:arg, :msg)),
    s(:begin,
      s(:send,
        s(:gvar, :$stderr), :puts,
        s(:lvar, :msg)),
      s(:send,
        s(:gvar, :$stderr), :puts,
        s(:send,
          s(:ivar, :@parser), :help)),
      s(:send, nil, :exit,
        s(:false)))),
  s(:def, :generate_eventids1,
    s(:args,
      s(:arg, :ids)),
    s(:begin,
      s(:lvasgn, :buf,
        s(:str, "")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "static struct {\n")),
      s(:block,
        s(:send,
          s(:lvar, :ids), :each),
        s(:args,
          s(:arg, :id),
          s(:arg, :arity)),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "    ID id_"),
            s(:begin,
              s(:lvar, :id)),
            s(:str, ";\n")))),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "} ripper_parser_ids;\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "\n")),
      s(:block,
        s(:send,
          s(:lvar, :ids), :each),
        s(:args,
          s(:arg, :id),
          s(:arg, :arity)),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "#define ripper_id_"),
            s(:begin,
              s(:lvar, :id)),
            s(:str, " ripper_parser_ids.id_"),
            s(:begin,
              s(:lvar, :id)),
            s(:str, "\n")))),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "static void\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "ripper_init_eventids1(void)\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "{\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "#define set_id1(name) ripper_id_##name = rb_intern_const(\"on_\"#name)\n")),
      s(:block,
        s(:send,
          s(:lvar, :ids), :each),
        s(:args,
          s(:arg, :id),
          s(:arg, :arity)),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "    set_id1("),
            s(:begin,
              s(:lvar, :id)),
            s(:str, ");\n")))),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "}\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "static void\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "ripper_init_eventids1_table(VALUE self)\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "{\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "    VALUE h = rb_hash_new();\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "    rb_define_const(self, \"PARSER_EVENT_TABLE\", h);\n")),
      s(:block,
        s(:send,
          s(:lvar, :ids), :each),
        s(:args,
          s(:arg, :id),
          s(:arg, :arity)),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "    rb_hash_aset(h, intern_sym(\""),
            s(:begin,
              s(:lvar, :id)),
            s(:str, "\"), INT2FIX("),
            s(:begin,
              s(:lvar, :arity)),
            s(:str, "));\n")))),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "}\n")),
      s(:lvar, :buf))),
  s(:def, :generate_eventids2_table,
    s(:args,
      s(:arg, :ids)),
    s(:begin,
      s(:lvasgn, :buf,
        s(:str, "")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "static void\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "ripper_init_eventids2_table(VALUE self)\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "{\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "    VALUE h = rb_hash_new();\n")),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "    rb_define_const(self, \"SCANNER_EVENT_TABLE\", h);\n")),
      s(:block,
        s(:send,
          s(:lvar, :ids), :each),
        s(:args,
          s(:arg, :id)),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "    rb_hash_aset(h, intern_sym(\""),
            s(:begin,
              s(:lvar, :id)),
            s(:str, "\"), INT2FIX(1));\n")))),
      s(:send,
        s(:lvar, :buf), :<<,
        s(:str, "}\n")),
      s(:lvar, :buf))),
  s(:def, :read_ids1,
    s(:args,
      s(:arg, :path)),
    s(:send, nil, :strip_locations,
      s(:send, nil, :read_ids1_with_locations,
        s(:lvar, :path)))),
  s(:def, :strip_locations,
    s(:args,
      s(:arg, :h)),
    s(:block,
      s(:send,
        s(:block,
          s(:send,
            s(:lvar, :h), :map),
          s(:args,
            s(:arg, :event),
            s(:arg, :list)),
          s(:array,
            s(:lvar, :event),
            s(:send,
              s(:send,
                s(:lvar, :list), :first), :[],
              s(:int, 1)))), :sort_by),
      s(:args,
        s(:arg, :event),
        s(:arg, :arity)),
      s(:send,
        s(:lvar, :event), :to_s))),
  s(:def, :check_arity,
    s(:args,
      s(:arg, :h)),
    s(:begin,
      s(:lvasgn, :invalid,
        s(:false)),
      s(:block,
        s(:send,
          s(:lvar, :h), :each),
        s(:args,
          s(:arg, :event),
          s(:arg, :list)),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :list), :map),
                  s(:args,
                    s(:arg, :line),
                    s(:arg, :arity)),
                  s(:lvar, :arity)), :uniq), :size), :==,
            s(:int, 1)), nil,
          s(:begin,
            s(:lvasgn, :invalid,
              s(:true)),
            s(:lvasgn, :locations,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :list), :map),
                  s(:args,
                    s(:arg, :line),
                    s(:arg, :a)),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :line)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :a)))), :join,
                s(:str, ", "))),
            s(:send,
              s(:gvar, :$stderr), :puts,
              s(:dstr,
                s(:str, "arity crash [event="),
                s(:begin,
                  s(:lvar, :event)),
                s(:str, "]: "),
                s(:begin,
                  s(:lvar, :locations))))))),
      s(:if,
        s(:lvar, :invalid),
        s(:send, nil, :abort), nil))),
  s(:def, :read_ids1_with_locations,
    s(:args,
      s(:arg, :path)),
    s(:begin,
      s(:lvasgn, :h,
        s(:hash)),
      s(:block,
        s(:send,
          s(:const, nil, :File), :open,
          s(:lvar, :path)),
        s(:args,
          s(:arg, :f)),
        s(:block,
          s(:send,
            s(:lvar, :f), :each),
          s(:args,
            s(:arg, :line)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A\\#\\s*define\\s+dispatch"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:next), nil),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "ripper_dispatch"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:next), nil),
            s(:block,
              s(:send,
                s(:lvar, :line), :scan,
                s(:regexp,
                  s(:str, "\\bdispatch(\\d)\\((\\w+)"),
                  s(:regopt))),
              s(:args,
                s(:arg, :arity),
                s(:arg, :event)),
              s(:send,
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:lvar, :h), :[],
                      s(:lvar, :event)),
                    s(:array))), :push,
                s(:array,
                  s(:send,
                    s(:lvar, :f), :lineno),
                  s(:send,
                    s(:lvar, :arity), :to_i))))))),
      s(:lvar, :h))),
  s(:def, :read_ids2,
    s(:args,
      s(:arg, :path)),
    s(:begin,
      s(:lvasgn, :src,
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :path)),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :f), :read))),
      s(:lvasgn, :ids2,
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :src), :scan,
                s(:regexp,
                  s(:str, "ID\\s+ripper_id_(\\w+)"),
                  s(:regopt))), :flatten), :uniq), :sort)),
      s(:lvasgn, :diff,
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :src), :scan,
              s(:regexp,
                s(:str, "set_id2\\((\\w+)\\);"),
                s(:regopt))), :flatten), :-,
          s(:lvar, :ids2))),
      s(:if,
        s(:send,
          s(:lvar, :diff), :empty?), nil,
        s(:send, nil, :abort,
          s(:dstr,
            s(:str, "missing scanner IDs: "),
            s(:begin,
              s(:lvar, :diff))))),
      s(:return,
        s(:lvar, :ids2)))),
  s(:send, nil, :main))
