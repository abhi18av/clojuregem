s(:begin,
  s(:send, nil, :require,
    s(:str, "ripper/core")),
  s(:class,
    s(:const, nil, :Ripper), nil,
    s(:begin,
      s(:defs,
        s(:const, nil, :Ripper), :tokenize,
        s(:args,
          s(:arg, :src),
          s(:optarg, :filename,
            s(:str, "-")),
          s(:optarg, :lineno,
            s(:int, 1))),
        s(:send,
          s(:send,
            s(:const, nil, :Lexer), :new,
            s(:lvar, :src),
            s(:lvar, :filename),
            s(:lvar, :lineno)), :tokenize)),
      s(:defs,
        s(:const, nil, :Ripper), :lex,
        s(:args,
          s(:arg, :src),
          s(:optarg, :filename,
            s(:str, "-")),
          s(:optarg, :lineno,
            s(:int, 1))),
        s(:send,
          s(:send,
            s(:const, nil, :Lexer), :new,
            s(:lvar, :src),
            s(:lvar, :filename),
            s(:lvar, :lineno)), :lex)),
      s(:class,
        s(:const, nil, :Lexer),
        s(:const,
          s(:cbase), :Ripper),
        s(:begin,
          s(:casgn, nil, :Elem,
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :pos),
              s(:sym, :event),
              s(:sym, :tok))),
          s(:def, :tokenize,
            s(:args),
            s(:send,
              s(:send,
                s(:send, nil, :parse), :sort_by,
                s(:block_pass,
                  s(:sym, :pos))), :map,
              s(:block_pass,
                s(:sym, :tok)))),
          s(:def, :lex,
            s(:args),
            s(:send,
              s(:send,
                s(:send, nil, :parse), :sort_by,
                s(:block_pass,
                  s(:sym, :pos))), :map,
              s(:block_pass,
                s(:sym, :to_a)))),
          s(:def, :parse,
            s(:args),
            s(:begin,
              s(:ivasgn, :@buf,
                s(:array)),
              s(:ivasgn, :@stack,
                s(:array)),
              s(:zsuper),
              s(:send,
                s(:ivar, :@buf), :flatten!),
              s(:ivar, :@buf))),
          s(:send, nil, :private),
          s(:def, :on_heredoc_dedent,
            s(:args,
              s(:arg, :v),
              s(:arg, :w)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@buf), :last), :each),
                s(:args,
                  s(:arg, :e)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :event), :==,
                    s(:sym, :on_tstring_content)),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:lvasgn, :n,
                          s(:send, nil, :dedent_string,
                            s(:send,
                              s(:lvar, :e), :tok),
                            s(:lvar, :w)))), :>,
                      s(:int, 0)),
                    s(:op_asgn,
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :pos), :[],
                        s(:int, 1)), :+,
                      s(:lvar, :n)), nil), nil)),
              s(:lvar, :v))),
          s(:def, :on_heredoc_beg,
            s(:args,
              s(:arg, :tok)),
            s(:begin,
              s(:send,
                s(:ivar, :@stack), :push,
                s(:ivar, :@buf)),
              s(:lvasgn, :buf,
                s(:array)),
              s(:send,
                s(:ivar, :@buf), :<<,
                s(:lvar, :buf)),
              s(:ivasgn, :@buf,
                s(:lvar, :buf)),
              s(:send,
                s(:ivar, :@buf), :push,
                s(:send,
                  s(:const, nil, :Elem), :new,
                  s(:array,
                    s(:send, nil, :lineno),
                    s(:send, nil, :column)),
                  s(:send, nil, :__callee__),
                  s(:lvar, :tok))))),
          s(:def, :on_heredoc_end,
            s(:args,
              s(:arg, :tok)),
            s(:begin,
              s(:send,
                s(:ivar, :@buf), :push,
                s(:send,
                  s(:const, nil, :Elem), :new,
                  s(:array,
                    s(:send, nil, :lineno),
                    s(:send, nil, :column)),
                  s(:send, nil, :__callee__),
                  s(:lvar, :tok))),
              s(:ivasgn, :@buf,
                s(:send,
                  s(:ivar, :@stack), :pop)))),
          s(:def, :_push_token,
            s(:args,
              s(:arg, :tok)),
            s(:send,
              s(:ivar, :@buf), :push,
              s(:send,
                s(:const, nil, :Elem), :new,
                s(:array,
                  s(:send, nil, :lineno),
                  s(:send, nil, :column)),
                s(:send, nil, :__callee__),
                s(:lvar, :tok)))),
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :SCANNER_EVENTS), :map),
                    s(:args,
                      s(:arg, :event)),
                    s(:dsym,
                      s(:str, "on_"),
                      s(:begin,
                        s(:lvar, :event)))), :-,
                  s(:send, nil, :private_instance_methods,
                    s(:false)))), :each),
            s(:args,
              s(:arg, :event)),
            s(:send, nil, :alias_method,
              s(:lvar, :event),
              s(:sym, :_push_token))))),
      s(:defs,
        s(:const, nil, :Ripper), :slice,
        s(:args,
          s(:arg, :src),
          s(:arg, :pattern),
          s(:optarg, :n,
            s(:int, 0))),
        s(:if,
          s(:lvasgn, :m,
            s(:send, nil, :token_match,
              s(:lvar, :src),
              s(:lvar, :pattern))),
          s(:send,
            s(:lvar, :m), :string,
            s(:lvar, :n)),
          s(:nil))),
      s(:defs,
        s(:const, nil, :Ripper), :token_match,
        s(:args,
          s(:arg, :src),
          s(:arg, :pattern)),
        s(:send,
          s(:send,
            s(:const, nil, :TokenPattern), :compile,
            s(:lvar, :pattern)), :match,
          s(:lvar, :src))),
      s(:class,
        s(:const, nil, :TokenPattern), nil,
        s(:begin,
          s(:class,
            s(:const, nil, :Error),
            s(:const,
              s(:cbase), :StandardError), nil),
          s(:class,
            s(:const, nil, :CompileError),
            s(:const, nil, :Error), nil),
          s(:class,
            s(:const, nil, :MatchError),
            s(:const, nil, :Error), nil),
          s(:sclass,
            s(:self),
            s(:alias,
              s(:sym, :compile),
              s(:sym, :new))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :pattern)),
            s(:begin,
              s(:ivasgn, :@source,
                s(:lvar, :pattern)),
              s(:ivasgn, :@re,
                s(:send, nil, :compile,
                  s(:lvar, :pattern))))),
          s(:def, :match,
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :match_list,
              s(:send,
                s(:const,
                  s(:cbase), :Ripper), :lex,
                s(:lvar, :str)))),
          s(:def, :match_list,
            s(:args,
              s(:arg, :tokens)),
            s(:if,
              s(:lvasgn, :m,
                s(:send,
                  s(:ivar, :@re), :match,
                  s(:send, nil, :map_tokens,
                    s(:lvar, :tokens)))),
              s(:send,
                s(:const, nil, :MatchData), :new,
                s(:lvar, :tokens),
                s(:lvar, :m)),
              s(:nil))),
          s(:send, nil, :private),
          s(:def, :compile,
            s(:args,
              s(:arg, :pattern)),
            s(:rescue,
              s(:begin,
                s(:if,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:regexp,
                        s(:str, "[^\\w\\s$()\\[\\]{}?*+\\.]"),
                        s(:regopt)), :match,
                      s(:lvar, :pattern))),
                  s(:send, nil, :raise,
                    s(:const, nil, :CompileError),
                    s(:dstr,
                      s(:str, "invalid char in pattern: "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:int, 0)), :inspect)))), nil),
                s(:lvasgn, :buf,
                  s(:str, "")),
                s(:block,
                  s(:send,
                    s(:lvar, :pattern), :scan,
                    s(:regexp,
                      s(:str, "(?:\\w+|\\$\\(|[()\\[\\]\\{\\}?*+\\.]+)"),
                      s(:regopt))),
                  s(:args,
                    s(:arg, :tok)),
                  s(:case,
                    s(:lvar, :tok),
                    s(:when,
                      s(:regexp,
                        s(:str, "\\w"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :buf), :concat,
                        s(:send, nil, :map_token,
                          s(:lvar, :tok)))),
                    s(:when,
                      s(:str, "$("),
                      s(:send,
                        s(:lvar, :buf), :concat,
                        s(:str, "("))),
                    s(:when,
                      s(:str, "("),
                      s(:send,
                        s(:lvar, :buf), :concat,
                        s(:str, "(?:"))),
                    s(:when,
                      s(:regexp,
                        s(:str, "[?*\\[\\])\\.]"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :buf), :concat,
                        s(:lvar, :tok))),
                    s(:send, nil, :raise,
                      s(:str, "must not happen")))),
                s(:send,
                  s(:const, nil, :Regexp), :compile,
                  s(:lvar, :buf))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :RegexpError)),
                s(:lvasgn, :err),
                s(:send, nil, :raise,
                  s(:const, nil, :CompileError),
                  s(:send,
                    s(:lvar, :err), :message))), nil)),
          s(:def, :map_tokens,
            s(:args,
              s(:arg, :tokens)),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :tokens), :map),
                s(:args,
                  s(:arg, :pos),
                  s(:arg, :type),
                  s(:arg, :str)),
                s(:send, nil, :map_token,
                  s(:send,
                    s(:send,
                      s(:lvar, :type), :to_s), :sub,
                    s(:regexp,
                      s(:str, "\\Aon_"),
                      s(:regopt)),
                    s(:str, "")))), :join)),
          s(:casgn, nil, :MAP,
            s(:hash)),
          s(:lvasgn, :seed,
            s(:send,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "a"),
                      s(:str, "z"))), :to_a), :+,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:str, "A"),
                      s(:str, "Z"))), :to_a)), :+,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:str, "0"),
                    s(:str, "9"))), :to_a))),
          s(:block,
            s(:send,
              s(:const, nil, :SCANNER_EVENT_TABLE), :each),
            s(:args,
              s(:arg, :ev)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :seed), :empty?),
                s(:send, nil, :raise,
                  s(:const, nil, :CompileError),
                  s(:str, "[RIPPER FATAL] too many system token")), nil),
              s(:send,
                s(:const, nil, :MAP), :[]=,
                s(:send,
                  s(:send,
                    s(:lvar, :ev), :to_s), :sub,
                  s(:regexp,
                    s(:str, "\\Aon_"),
                    s(:regopt)),
                  s(:str, "")),
                s(:send,
                  s(:lvar, :seed), :shift)))),
          s(:def, :map_token,
            s(:args,
              s(:arg, :tok)),
            s(:or,
              s(:send,
                s(:const, nil, :MAP), :[],
                s(:lvar, :tok)),
              s(:send, nil, :raise,
                s(:const, nil, :CompileError),
                s(:dstr,
                  s(:str, "unknown token: "),
                  s(:begin,
                    s(:lvar, :tok)))))),
          s(:class,
            s(:const, nil, :MatchData), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :tokens),
                  s(:arg, :match)),
                s(:begin,
                  s(:ivasgn, :@tokens,
                    s(:lvar, :tokens)),
                  s(:ivasgn, :@match,
                    s(:lvar, :match)))),
              s(:def, :string,
                s(:args,
                  s(:optarg, :n,
                    s(:int, 0))),
                s(:begin,
                  s(:if,
                    s(:ivar, :@match), nil,
                    s(:return,
                      s(:nil))),
                  s(:send,
                    s(:send, nil, :match,
                      s(:lvar, :n)), :join))),
              s(:send, nil, :private),
              s(:def, :match,
                s(:args,
                  s(:optarg, :n,
                    s(:int, 0))),
                s(:begin,
                  s(:if,
                    s(:ivar, :@match), nil,
                    s(:return,
                      s(:array))),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:ivar, :@tokens), :[],
                        s(:erange,
                          s(:send,
                            s(:ivar, :@match), :begin,
                            s(:lvar, :n)),
                          s(:send,
                            s(:ivar, :@match), :end,
                            s(:lvar, :n)))), :map),
                    s(:args,
                      s(:arg, :pos),
                      s(:arg, :type),
                      s(:arg, :str)),
                    s(:lvar, :str)))))))))))
