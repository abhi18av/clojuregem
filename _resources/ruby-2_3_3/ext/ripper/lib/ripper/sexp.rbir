s(:begin,
  s(:send, nil, :require,
    s(:str, "ripper/core")),
  s(:class,
    s(:const, nil, :Ripper), nil,
    s(:begin,
      s(:defs,
        s(:const, nil, :Ripper), :sexp,
        s(:args,
          s(:arg, :src),
          s(:optarg, :filename,
            s(:str, "-")),
          s(:optarg, :lineno,
            s(:int, 1))),
        s(:begin,
          s(:lvasgn, :builder,
            s(:send,
              s(:const, nil, :SexpBuilderPP), :new,
              s(:lvar, :src),
              s(:lvar, :filename),
              s(:lvar, :lineno))),
          s(:lvasgn, :sexp,
            s(:send,
              s(:lvar, :builder), :parse)),
          s(:if,
            s(:send,
              s(:lvar, :builder), :error?), nil,
            s(:lvar, :sexp)))),
      s(:defs,
        s(:const, nil, :Ripper), :sexp_raw,
        s(:args,
          s(:arg, :src),
          s(:optarg, :filename,
            s(:str, "-")),
          s(:optarg, :lineno,
            s(:int, 1))),
        s(:begin,
          s(:lvasgn, :builder,
            s(:send,
              s(:const, nil, :SexpBuilder), :new,
              s(:lvar, :src),
              s(:lvar, :filename),
              s(:lvar, :lineno))),
          s(:lvasgn, :sexp,
            s(:send,
              s(:lvar, :builder), :parse)),
          s(:if,
            s(:send,
              s(:lvar, :builder), :error?), nil,
            s(:lvar, :sexp)))),
      s(:class,
        s(:const, nil, :SexpBuilder),
        s(:const,
          s(:cbase), :Ripper),
        s(:begin,
          s(:send, nil, :private),
          s(:def, :dedent_element,
            s(:args,
              s(:arg, :e),
              s(:arg, :width)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send, nil, :dedent_string,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 1)),
                        s(:lvar, :width)))), :>,
                  s(:int, 0)),
                s(:op_asgn,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 2)), :[],
                    s(:int, 1)), :+,
                  s(:lvar, :n)), nil),
              s(:lvar, :e))),
          s(:def, :on_heredoc_dedent,
            s(:args,
              s(:arg, :val),
              s(:arg, :width)),
            s(:begin,
              s(:lvasgn, :sub,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :cont)),
                  s(:block,
                    s(:send,
                      s(:lvar, :cont), :map!),
                    s(:args,
                      s(:arg, :e)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:const, nil, :Array), :===,
                          s(:lvar, :e)),
                        s(:case,
                          s(:send,
                            s(:lvar, :e), :[],
                            s(:int, 0)),
                          s(:when,
                            s(:sym, :@tstring_content),
                            s(:lvasgn, :e,
                              s(:send, nil, :dedent_element,
                                s(:lvar, :e),
                                s(:lvar, :width)))),
                          s(:when,
                            s(:regexp,
                              s(:str, "_add\\z"),
                              s(:regopt)),
                            s(:send,
                              s(:lvar, :e), :[]=,
                              s(:int, 1),
                              s(:send,
                                s(:lvar, :sub), :[],
                                s(:send,
                                  s(:lvar, :e), :[],
                                  s(:int, 1))))), nil),
                        s(:if,
                          s(:send,
                            s(:const, nil, :String), :===,
                            s(:lvar, :e)),
                          s(:send, nil, :dedent_string,
                            s(:lvar, :e),
                            s(:lvar, :width)), nil)),
                      s(:lvar, :e))))),
              s(:send,
                s(:lvar, :sub), :[],
                s(:lvar, :val)),
              s(:lvar, :val))),
          s(:lvasgn, :events,
            s(:block,
              s(:send,
                s(:send, nil, :private_instance_methods,
                  s(:false)), :grep,
                s(:regexp,
                  s(:str, "\\Aon_"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:back_ref, :$'), :to_sym))),
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :PARSER_EVENTS), :-,
                  s(:lvar, :events))), :each),
            s(:args,
              s(:arg, :event)),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def on_"),
                s(:begin,
                  s(:lvar, :event)),
                s(:str, "(*args)\n"),
                s(:str, "          args.unshift :"),
                s(:begin,
                  s(:lvar, :event)),
                s(:str, "\n"),
                s(:str, "          args\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 95), :+,
                s(:int, 1)))),
          s(:block,
            s(:send,
              s(:const, nil, :SCANNER_EVENTS), :each),
            s(:args,
              s(:arg, :event)),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def on_"),
                s(:begin,
                  s(:lvar, :event)),
                s(:str, "(tok)\n"),
                s(:str, "          [:@"),
                s(:begin,
                  s(:lvar, :event)),
                s(:str, ", tok, [lineno(), column()]]\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 104), :+,
                s(:int, 1)))))),
      s(:class,
        s(:const, nil, :SexpBuilderPP),
        s(:const, nil, :SexpBuilder),
        s(:begin,
          s(:send, nil, :private),
          s(:def, :on_heredoc_dedent,
            s(:args,
              s(:arg, :val),
              s(:arg, :width)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :val), :map!),
                s(:args,
                  s(:arg, :e)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:const, nil, :Symbol), :===,
                        s(:lvar, :e)),
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "_content\\z"),
                          s(:regopt)),
                        s(:lvar, :e))),
                    s(:next,
                      s(:lvar, :e)), nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:const, nil, :Array), :===,
                        s(:lvar, :e)),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 0)), :==,
                        s(:sym, :@tstring_content))),
                    s(:lvasgn, :e,
                      s(:send, nil, :dedent_element,
                        s(:lvar, :e),
                        s(:lvar, :width))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :String), :===,
                        s(:lvar, :e)),
                      s(:send, nil, :dedent_string,
                        s(:lvar, :e),
                        s(:lvar, :width)), nil)),
                  s(:lvar, :e))),
              s(:lvar, :val))),
          s(:def, :_dispatch_event_new,
            s(:args),
            s(:array)),
          s(:def, :_dispatch_event_push,
            s(:args,
              s(:arg, :list),
              s(:arg, :item)),
            s(:begin,
              s(:send,
                s(:lvar, :list), :push,
                s(:lvar, :item)),
              s(:lvar, :list))),
          s(:block,
            s(:send,
              s(:const, nil, :PARSER_EVENT_TABLE), :each),
            s(:args,
              s(:arg, :event),
              s(:arg, :arity)),
            s(:if,
              s(:and,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "_new\\z"),
                    s(:regopt)),
                  s(:lvar, :event)),
                s(:send,
                  s(:lvar, :arity), :==,
                  s(:int, 0))),
              s(:send, nil, :alias_method,
                s(:dstr,
                  s(:str, "on_"),
                  s(:begin,
                    s(:lvar, :event))),
                s(:sym, :_dispatch_event_new)),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "_add\\z"),
                    s(:regopt)),
                  s(:lvar, :event)),
                s(:send, nil, :alias_method,
                  s(:dstr,
                    s(:str, "on_"),
                    s(:begin,
                      s(:lvar, :event))),
                  s(:sym, :_dispatch_event_push)), nil))))))))
