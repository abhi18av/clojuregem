s(:begin,
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:module,
    s(:const, nil, :OpenSSL),
    s(:class,
      s(:const, nil, :Config), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :Enumerable)),
        s(:sclass,
          s(:self),
          s(:begin,
            s(:def, :parse,
              s(:args,
                s(:arg, :string)),
              s(:begin,
                s(:lvasgn, :c,
                  s(:send, nil, :new)),
                s(:block,
                  s(:send,
                    s(:send, nil, :parse_config,
                      s(:send,
                        s(:const, nil, :StringIO), :new,
                        s(:lvar, :string))), :each),
                  s(:args,
                    s(:arg, :section),
                    s(:arg, :hash)),
                  s(:send,
                    s(:lvar, :c), :[]=,
                    s(:lvar, :section),
                    s(:lvar, :hash))),
                s(:lvar, :c))),
            s(:alias,
              s(:sym, :load),
              s(:sym, :new)),
            s(:def, :parse_config,
              s(:args,
                s(:arg, :io)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :parse_config_lines,
                    s(:lvar, :io)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :ConfigError)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :message), :replace,
                        s(:send,
                          s(:dstr,
                            s(:str, "error in line "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :io), :lineno)),
                            s(:str, ": ")), :+,
                          s(:send,
                            s(:lvar, :e), :message))),
                      s(:send, nil, :raise))), nil))),
            s(:def, :get_key_string,
              s(:args,
                s(:arg, :data),
                s(:arg, :section),
                s(:arg, :key)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :v,
                    s(:and,
                      s(:send,
                        s(:lvar, :data), :[],
                        s(:lvar, :section)),
                      s(:send,
                        s(:send,
                          s(:lvar, :data), :[],
                          s(:lvar, :section)), :[],
                        s(:lvar, :key)))),
                  s(:return,
                    s(:lvar, :v)),
                  s(:if,
                    s(:send,
                      s(:lvar, :section), :==,
                      s(:str, "ENV")),
                    s(:if,
                      s(:lvasgn, :v,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:lvar, :key))),
                      s(:return,
                        s(:lvar, :v)), nil), nil)),
                s(:if,
                  s(:lvasgn, :v,
                    s(:and,
                      s(:send,
                        s(:lvar, :data), :[],
                        s(:str, "default")),
                      s(:send,
                        s(:send,
                          s(:lvar, :data), :[],
                          s(:str, "default")), :[],
                        s(:lvar, :key)))),
                  s(:return,
                    s(:lvar, :v)), nil))),
            s(:send, nil, :private),
            s(:def, :parse_config_lines,
              s(:args,
                s(:arg, :io)),
              s(:begin,
                s(:lvasgn, :section,
                  s(:str, "default")),
                s(:lvasgn, :data,
                  s(:hash,
                    s(:pair,
                      s(:lvar, :section),
                      s(:hash)))),
                s(:while,
                  s(:lvasgn, :definition,
                    s(:send, nil, :get_definition,
                      s(:lvar, :io))),
                  s(:begin,
                    s(:lvasgn, :definition,
                      s(:send, nil, :clear_comments,
                        s(:lvar, :definition))),
                    s(:if,
                      s(:send,
                        s(:lvar, :definition), :empty?),
                      s(:next), nil),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :definition), :[],
                          s(:int, 0)), :==,
                        s(:str, "[")),
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "\\[([^\\]]*)\\]"),
                            s(:regopt)),
                          s(:lvar, :definition)),
                        s(:begin,
                          s(:lvasgn, :section,
                            s(:send,
                              s(:nth_ref, 1), :strip)),
                          s(:or_asgn,
                            s(:send,
                              s(:lvar, :data), :[],
                              s(:lvar, :section)),
                            s(:hash))),
                        s(:send, nil, :raise,
                          s(:const, nil, :ConfigError),
                          s(:str, "missing close square bracket"))),
                      s(:if,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "\\A([^:\\s]*)(?:::([^:\\s]*))?\\s*=(.*)\\z"),
                            s(:regopt)),
                          s(:lvar, :definition)),
                        s(:begin,
                          s(:if,
                            s(:nth_ref, 2),
                            s(:begin,
                              s(:lvasgn, :section,
                                s(:nth_ref, 1)),
                              s(:lvasgn, :key,
                                s(:nth_ref, 2))),
                            s(:lvasgn, :key,
                              s(:nth_ref, 1))),
                          s(:lvasgn, :value,
                            s(:send, nil, :unescape_value,
                              s(:lvar, :data),
                              s(:lvar, :section),
                              s(:nth_ref, 3))),
                          s(:send,
                            s(:begin,
                              s(:or_asgn,
                                s(:send,
                                  s(:lvar, :data), :[],
                                  s(:lvar, :section)),
                                s(:hash))), :[]=,
                            s(:lvar, :key),
                            s(:send,
                              s(:lvar, :value), :strip))),
                        s(:send, nil, :raise,
                          s(:const, nil, :ConfigError),
                          s(:str, "missing equal sign")))))),
                s(:lvar, :data))),
            s(:casgn, nil, :QUOTE_REGEXP_SQ,
              s(:regexp,
                s(:str, "\\A([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'"),
                s(:regopt))),
            s(:casgn, nil, :QUOTE_REGEXP_DQ,
              s(:regexp,
                s(:str, "\\A([^\"\\\\]*(?:\"\"[^\"\\\\]*|\\\\.[^\"\\\\]*)*)\""),
                s(:regopt))),
            s(:casgn, nil, :ESCAPE_MAP,
              s(:hash,
                s(:pair,
                  s(:str, "r"),
                  s(:str, "\r")),
                s(:pair,
                  s(:str, "n"),
                  s(:str, "\n")),
                s(:pair,
                  s(:str, "b"),
                  s(:str, "\b")),
                s(:pair,
                  s(:str, "t"),
                  s(:str, "\t")))),
            s(:def, :unescape_value,
              s(:args,
                s(:arg, :data),
                s(:arg, :section),
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :scanned,
                  s(:array)),
                s(:while,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :value), :match,
                      s(:regexp,
                        s(:str, "['\"\\\\$]"),
                        s(:regopt)))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :scanned), :<<,
                      s(:send,
                        s(:lvar, :m), :pre_match)),
                    s(:lvasgn, :c,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 0))),
                    s(:lvasgn, :value,
                      s(:send,
                        s(:lvar, :m), :post_match)),
                    s(:case,
                      s(:lvar, :c),
                      s(:when,
                        s(:str, "'"),
                        s(:if,
                          s(:lvasgn, :m,
                            s(:send,
                              s(:lvar, :value), :match,
                              s(:const, nil, :QUOTE_REGEXP_SQ))),
                          s(:begin,
                            s(:send,
                              s(:lvar, :scanned), :<<,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :[],
                                  s(:int, 1)), :gsub,
                                s(:regexp,
                                  s(:str, "\\\\(.)"),
                                  s(:regopt)),
                                s(:str, "\\1"))),
                            s(:lvasgn, :value,
                              s(:send,
                                s(:lvar, :m), :post_match))),
                          s(:break))),
                      s(:when,
                        s(:str, "\""),
                        s(:if,
                          s(:lvasgn, :m,
                            s(:send,
                              s(:lvar, :value), :match,
                              s(:const, nil, :QUOTE_REGEXP_DQ))),
                          s(:begin,
                            s(:send,
                              s(:lvar, :scanned), :<<,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :m), :[],
                                    s(:int, 1)), :gsub,
                                  s(:regexp,
                                    s(:str, "\"\""),
                                    s(:regopt)),
                                  s(:str, "")), :gsub,
                                s(:regexp,
                                  s(:str, "\\\\(.)"),
                                  s(:regopt)),
                                s(:str, "\\1"))),
                            s(:lvasgn, :value,
                              s(:send,
                                s(:lvar, :m), :post_match))),
                          s(:break))),
                      s(:when,
                        s(:str, "\\"),
                        s(:begin,
                          s(:lvasgn, :c,
                            s(:send,
                              s(:lvar, :value), :slice!,
                              s(:int, 0),
                              s(:int, 1))),
                          s(:send,
                            s(:lvar, :scanned), :<<,
                            s(:begin,
                              s(:or,
                                s(:send,
                                  s(:const, nil, :ESCAPE_MAP), :[],
                                  s(:lvar, :c)),
                                s(:lvar, :c)))))),
                      s(:when,
                        s(:str, "$"),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :ref),
                              s(:lvasgn, :value)),
                            s(:send, nil, :extract_reference,
                              s(:lvar, :value))),
                          s(:lvasgn, :refsec,
                            s(:lvar, :section)),
                          s(:if,
                            s(:send,
                              s(:lvar, :ref), :index,
                              s(:str, "::")),
                            s(:masgn,
                              s(:mlhs,
                                s(:lvasgn, :refsec),
                                s(:lvasgn, :ref)),
                              s(:send,
                                s(:lvar, :ref), :split,
                                s(:str, "::"),
                                s(:int, 2))), nil),
                          s(:if,
                            s(:lvasgn, :v,
                              s(:send, nil, :get_key_string,
                                s(:lvar, :data),
                                s(:lvar, :refsec),
                                s(:lvar, :ref))),
                            s(:send,
                              s(:lvar, :scanned), :<<,
                              s(:lvar, :v)),
                            s(:send, nil, :raise,
                              s(:const, nil, :ConfigError),
                              s(:str, "variable has no value"))))),
                      s(:send, nil, :raise,
                        s(:str, "must not reaced"))))),
                s(:send,
                  s(:lvar, :scanned), :<<,
                  s(:lvar, :value)),
                s(:send,
                  s(:lvar, :scanned), :join))),
            s(:def, :extract_reference,
              s(:args,
                s(:arg, :value)),
              s(:begin,
                s(:lvasgn, :rest,
                  s(:str, "")),
                s(:if,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :value), :match,
                      s(:regexp,
                        s(:str, "\\(([^)]*)\\)|\\{([^}]*)\\}"),
                        s(:regopt)))),
                  s(:begin,
                    s(:lvasgn, :value,
                      s(:or,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:int, 1)),
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:int, 2)))),
                    s(:lvasgn, :rest,
                      s(:send,
                        s(:lvar, :m), :post_match))),
                  s(:if,
                    s(:send,
                      s(:array,
                        s(:str, "("),
                        s(:str, "{")), :include?,
                      s(:send,
                        s(:lvar, :value), :[],
                        s(:int, 0))),
                    s(:send, nil, :raise,
                      s(:const, nil, :ConfigError),
                      s(:str, "no close brace")), nil)),
                s(:if,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :value), :match,
                      s(:regexp,
                        s(:str, "[a-zA-Z0-9_]*(?:::[a-zA-Z0-9_]*)?"),
                        s(:regopt)))),
                  s(:return,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 0)),
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :post_match), :+,
                      s(:lvar, :rest))),
                  s(:send, nil, :raise)))),
            s(:def, :clear_comments,
              s(:args,
                s(:arg, :line)),
              s(:begin,
                s(:if,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :line), :match,
                      s(:regexp,
                        s(:str, "\\A([\\t\\n\\f ]*);.*\\z"),
                        s(:regopt)))),
                  s(:return,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 1))), nil),
                s(:lvasgn, :scanned,
                  s(:array)),
                s(:while,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :line), :match,
                      s(:regexp,
                        s(:str, "[#'\"\\\\]"),
                        s(:regopt)))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :scanned), :<<,
                      s(:send,
                        s(:lvar, :m), :pre_match)),
                    s(:lvasgn, :c,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 0))),
                    s(:lvasgn, :line,
                      s(:send,
                        s(:lvar, :m), :post_match)),
                    s(:case,
                      s(:lvar, :c),
                      s(:when,
                        s(:str, "#"),
                        s(:begin,
                          s(:lvasgn, :line,
                            s(:nil)),
                          s(:break))),
                      s(:when,
                        s(:str, "'"),
                        s(:str, "\""),
                        s(:begin,
                          s(:lvasgn, :regexp,
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :c), :==,
                                  s(:str, "'"))),
                              s(:const, nil, :QUOTE_REGEXP_SQ),
                              s(:const, nil, :QUOTE_REGEXP_DQ))),
                          s(:send,
                            s(:lvar, :scanned), :<<,
                            s(:lvar, :c)),
                          s(:if,
                            s(:lvasgn, :m,
                              s(:send,
                                s(:lvar, :line), :match,
                                s(:lvar, :regexp))),
                            s(:begin,
                              s(:send,
                                s(:lvar, :scanned), :<<,
                                s(:send,
                                  s(:lvar, :m), :[],
                                  s(:int, 0))),
                              s(:lvasgn, :line,
                                s(:send,
                                  s(:lvar, :m), :post_match))),
                            s(:begin,
                              s(:send,
                                s(:lvar, :scanned), :<<,
                                s(:lvar, :line)),
                              s(:lvasgn, :line,
                                s(:nil)),
                              s(:break))))),
                      s(:when,
                        s(:str, "\\"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :scanned), :<<,
                            s(:lvar, :c)),
                          s(:send,
                            s(:lvar, :scanned), :<<,
                            s(:send,
                              s(:lvar, :line), :slice!,
                              s(:int, 0),
                              s(:int, 1))))),
                      s(:send, nil, :raise,
                        s(:str, "must not reaced"))))),
                s(:send,
                  s(:lvar, :scanned), :<<,
                  s(:lvar, :line)),
                s(:send,
                  s(:lvar, :scanned), :join))),
            s(:def, :get_definition,
              s(:args,
                s(:arg, :io)),
              s(:if,
                s(:lvasgn, :line,
                  s(:send, nil, :get_line,
                    s(:lvar, :io))),
                s(:begin,
                  s(:while,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "[^\\\\]\\\\\\z"),
                        s(:regopt)),
                      s(:lvar, :line)),
                    s(:if,
                      s(:lvasgn, :extra,
                        s(:send, nil, :get_line,
                          s(:lvar, :io))),
                      s(:op_asgn,
                        s(:lvasgn, :line), :+,
                        s(:lvar, :extra)),
                      s(:break))),
                  s(:return,
                    s(:send,
                      s(:lvar, :line), :strip))), nil)),
            s(:def, :get_line,
              s(:args,
                s(:arg, :io)),
              s(:if,
                s(:lvasgn, :line,
                  s(:send,
                    s(:lvar, :io), :gets)),
                s(:send,
                  s(:lvar, :line), :gsub,
                  s(:regexp,
                    s(:str, "[\\r\\n]*"),
                    s(:regopt)),
                  s(:str, "")), nil)))),
        s(:def, :initialize,
          s(:args,
            s(:optarg, :filename,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@data,
              s(:hash)),
            s(:if,
              s(:lvar, :filename),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:send,
                    s(:lvar, :filename), :to_s)),
                s(:args,
                  s(:arg, :file)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Config), :parse_config,
                      s(:lvar, :file)), :each),
                  s(:args,
                    s(:arg, :section),
                    s(:arg, :hash)),
                  s(:send,
                    s(:self), :[]=,
                    s(:lvar, :section),
                    s(:lvar, :hash)))), nil))),
        s(:def, :get_value,
          s(:args,
            s(:arg, :section),
            s(:arg, :key)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :section), :nil?),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :TypeError), :new,
                  s(:str, "nil not allowed"))), nil),
            s(:if,
              s(:send,
                s(:lvar, :section), :empty?),
              s(:lvasgn, :section,
                s(:str, "default")), nil),
            s(:send, nil, :get_key_string,
              s(:lvar, :section),
              s(:lvar, :key)))),
        s(:def, :value,
          s(:args,
            s(:arg, :arg1),
            s(:optarg, :arg2,
              s(:nil))),
          s(:begin,
            s(:send, nil, :warn,
              s(:str, "Config#value is deprecated; use Config#get_value")),
            s(:if,
              s(:send,
                s(:lvar, :arg2), :nil?),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :section),
                  s(:lvasgn, :key)),
                s(:array,
                  s(:str, "default"),
                  s(:lvar, :arg1))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :section),
                  s(:lvasgn, :key)),
                s(:array,
                  s(:lvar, :arg1),
                  s(:lvar, :arg2)))),
            s(:or_asgn,
              s(:lvasgn, :section),
              s(:str, "default")),
            s(:if,
              s(:send,
                s(:lvar, :section), :empty?),
              s(:lvasgn, :section,
                s(:str, "default")), nil),
            s(:send, nil, :get_key_string,
              s(:lvar, :section),
              s(:lvar, :key)))),
        s(:def, :add_value,
          s(:args,
            s(:arg, :section),
            s(:arg, :key),
            s(:arg, :value)),
          s(:begin,
            s(:send, nil, :check_modify),
            s(:send,
              s(:begin,
                s(:or_asgn,
                  s(:send,
                    s(:ivar, :@data), :[],
                    s(:lvar, :section)),
                  s(:hash))), :[]=,
              s(:lvar, :key),
              s(:lvar, :value)))),
        s(:def, :[],
          s(:args,
            s(:arg, :section)),
          s(:or,
            s(:send,
              s(:ivar, :@data), :[],
              s(:lvar, :section)),
            s(:hash))),
        s(:def, :section,
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:send, nil, :warn,
              s(:str, "Config#section is deprecated; use Config#[]")),
            s(:or,
              s(:send,
                s(:ivar, :@data), :[],
                s(:lvar, :name)),
              s(:hash)))),
        s(:def, :[]=,
          s(:args,
            s(:arg, :section),
            s(:arg, :pairs)),
          s(:begin,
            s(:send, nil, :check_modify),
            s(:or_asgn,
              s(:send,
                s(:ivar, :@data), :[],
                s(:lvar, :section)),
              s(:hash)),
            s(:block,
              s(:send,
                s(:lvar, :pairs), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :value)),
              s(:send,
                s(:self), :add_value,
                s(:lvar, :section),
                s(:lvar, :key),
                s(:lvar, :value))))),
        s(:def, :sections,
          s(:args),
          s(:send,
            s(:ivar, :@data), :keys)),
        s(:def, :to_s,
          s(:args),
          s(:begin,
            s(:lvasgn, :ary,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@data), :keys), :sort), :each),
              s(:args,
                s(:arg, :section)),
              s(:begin,
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:dstr,
                    s(:str, "[ "),
                    s(:begin,
                      s(:lvar, :section)),
                    s(:str, " ]\n"))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@data), :[],
                        s(:lvar, :section)), :keys), :each),
                  s(:args,
                    s(:arg, :key)),
                  s(:send,
                    s(:lvar, :ary), :<<,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :key)),
                      s(:str, "="),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@data), :[],
                            s(:lvar, :section)), :[],
                          s(:lvar, :key))),
                      s(:str, "\n")))),
                s(:send,
                  s(:lvar, :ary), :<<,
                  s(:str, "\n")))),
            s(:send,
              s(:lvar, :ary), :join))),
        s(:def, :each,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@data), :each),
            s(:args,
              s(:arg, :section),
              s(:arg, :hash)),
            s(:block,
              s(:send,
                s(:lvar, :hash), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :value)),
              s(:yield,
                s(:array,
                  s(:lvar, :section),
                  s(:lvar, :key),
                  s(:lvar, :value)))))),
        s(:def, :inspect,
          s(:args),
          s(:dstr,
            s(:str, "#<"),
            s(:begin,
              s(:send,
                s(:send,
                  s(:self), :class), :name)),
            s(:str, " sections="),
            s(:begin,
              s(:send,
                s(:send, nil, :sections), :inspect)),
            s(:str, ">"))),
        s(:send, nil, :protected),
        s(:def, :data,
          s(:args),
          s(:ivar, :@data)),
        s(:send, nil, :private),
        s(:def, :initialize_copy,
          s(:args,
            s(:arg, :other)),
          s(:ivasgn, :@data,
            s(:send,
              s(:send,
                s(:lvar, :other), :data), :dup))),
        s(:def, :check_modify,
          s(:args),
          s(:if,
            s(:send, nil, :frozen?),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :TypeError), :new,
                s(:str, "Insecure: can't modify OpenSSL config"))), nil)),
        s(:def, :get_key_string,
          s(:args,
            s(:arg, :section),
            s(:arg, :key)),
          s(:send,
            s(:const, nil, :Config), :get_key_string,
            s(:ivar, :@data),
            s(:lvar, :section),
            s(:lvar, :key)))))))
