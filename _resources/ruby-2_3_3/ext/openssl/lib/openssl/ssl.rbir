s(:begin,
  s(:send, nil, :require,
    s(:str, "openssl/buffering")),
  s(:send, nil, :require,
    s(:str, "io/nonblock")),
  s(:module,
    s(:const, nil, :OpenSSL),
    s(:module,
      s(:const, nil, :SSL),
      s(:begin,
        s(:class,
          s(:const, nil, :SSLContext), nil,
          s(:begin,
            s(:casgn, nil, :DEFAULT_PARAMS,
              s(:hash,
                s(:pair,
                  s(:sym, :ssl_version),
                  s(:str, "SSLv23")),
                s(:pair,
                  s(:sym, :verify_mode),
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER)),
                s(:pair,
                  s(:sym, :ciphers),
                  s(:send,
                    s(:array,
                      s(:str, "ECDHE-ECDSA-AES128-GCM-SHA256"),
                      s(:str, "ECDHE-RSA-AES128-GCM-SHA256"),
                      s(:str, "ECDHE-ECDSA-AES256-GCM-SHA384"),
                      s(:str, "ECDHE-RSA-AES256-GCM-SHA384"),
                      s(:str, "DHE-RSA-AES128-GCM-SHA256"),
                      s(:str, "DHE-DSS-AES128-GCM-SHA256"),
                      s(:str, "DHE-RSA-AES256-GCM-SHA384"),
                      s(:str, "DHE-DSS-AES256-GCM-SHA384"),
                      s(:str, "ECDHE-ECDSA-AES128-SHA256"),
                      s(:str, "ECDHE-RSA-AES128-SHA256"),
                      s(:str, "ECDHE-ECDSA-AES128-SHA"),
                      s(:str, "ECDHE-RSA-AES128-SHA"),
                      s(:str, "ECDHE-ECDSA-AES256-SHA384"),
                      s(:str, "ECDHE-RSA-AES256-SHA384"),
                      s(:str, "ECDHE-ECDSA-AES256-SHA"),
                      s(:str, "ECDHE-RSA-AES256-SHA"),
                      s(:str, "DHE-RSA-AES128-SHA256"),
                      s(:str, "DHE-RSA-AES256-SHA256"),
                      s(:str, "DHE-RSA-AES128-SHA"),
                      s(:str, "DHE-RSA-AES256-SHA"),
                      s(:str, "DHE-DSS-AES128-SHA256"),
                      s(:str, "DHE-DSS-AES256-SHA256"),
                      s(:str, "DHE-DSS-AES128-SHA"),
                      s(:str, "DHE-DSS-AES256-SHA"),
                      s(:str, "AES128-GCM-SHA256"),
                      s(:str, "AES256-GCM-SHA384"),
                      s(:str, "AES128-SHA256"),
                      s(:str, "AES256-SHA256"),
                      s(:str, "AES128-SHA"),
                      s(:str, "AES256-SHA"),
                      s(:str, "ECDHE-ECDSA-RC4-SHA"),
                      s(:str, "ECDHE-RSA-RC4-SHA"),
                      s(:str, "RC4-SHA")), :join,
                    s(:str, ":"))),
                s(:pair,
                  s(:sym, :options),
                  s(:send,
                    s(:block,
                      s(:send, nil, :lambda),
                      s(:args),
                      s(:begin,
                        s(:lvasgn, :opts,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :OP_ALL)),
                        s(:if,
                          s(:defined?,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_DONT_INSERT_EMPTY_FRAGMENTS)),
                          s(:op_asgn,
                            s(:lvasgn, :opts), :&,
                            s(:send,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :OpenSSL), :SSL), :OP_DONT_INSERT_EMPTY_FRAGMENTS), :~)), nil),
                        s(:if,
                          s(:defined?,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_NO_COMPRESSION)),
                          s(:op_asgn,
                            s(:lvasgn, :opts), :|,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_NO_COMPRESSION)), nil),
                        s(:if,
                          s(:defined?,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_NO_SSLv2)),
                          s(:op_asgn,
                            s(:lvasgn, :opts), :|,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_NO_SSLv2)), nil),
                        s(:if,
                          s(:defined?,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_NO_SSLv3)),
                          s(:op_asgn,
                            s(:lvasgn, :opts), :|,
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :OP_NO_SSLv3)), nil),
                        s(:lvar, :opts))), :call)))),
            s(:casgn, nil, :DEFAULT_CERT_STORE,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Store), :new)),
            s(:send,
              s(:const, nil, :DEFAULT_CERT_STORE), :set_default_paths),
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :V_FLAG_CRL_CHECK_ALL)),
              s(:send,
                s(:const, nil, :DEFAULT_CERT_STORE), :flags=,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :V_FLAG_CRL_CHECK_ALL)), nil),
            s(:casgn, nil, :INIT_VARS,
              s(:block,
                s(:send,
                  s(:array,
                    s(:str, "cert"),
                    s(:str, "key"),
                    s(:str, "client_ca"),
                    s(:str, "ca_file"),
                    s(:str, "ca_path"),
                    s(:str, "timeout"),
                    s(:str, "verify_mode"),
                    s(:str, "verify_depth"),
                    s(:str, "renegotiation_cb"),
                    s(:str, "verify_callback"),
                    s(:str, "cert_store"),
                    s(:str, "extra_chain_cert"),
                    s(:str, "client_cert_cb"),
                    s(:str, "session_id_context"),
                    s(:str, "tmp_dh_callback"),
                    s(:str, "session_get_cb"),
                    s(:str, "session_new_cb"),
                    s(:str, "session_remove_cb"),
                    s(:str, "tmp_ecdh_callback"),
                    s(:str, "servername_cb"),
                    s(:str, "npn_protocols"),
                    s(:str, "alpn_protocols"),
                    s(:str, "alpn_select_cb"),
                    s(:str, "npn_select_cb")), :map),
                s(:args,
                  s(:arg, :x)),
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :x))))),
            s(:send, nil, :attr_accessor,
              s(:sym, :tmp_dh_callback)),
            s(:if,
              s(:const,
                s(:const, nil, :ExtConfig), :HAVE_TLSEXT_HOST_NAME),
              s(:send, nil, :attr_accessor,
                s(:sym, :servername_cb)), nil),
            s(:def, :initialize,
              s(:args,
                s(:optarg, :version,
                  s(:nil))),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:const, nil, :INIT_VARS), :each),
                  s(:args,
                    s(:arg, :v)),
                  s(:send, nil, :instance_variable_set,
                    s(:lvar, :v),
                    s(:nil))),
                s(:send,
                  s(:self), :options=,
                  s(:send,
                    s(:send,
                      s(:self), :options), :|,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :OP_ALL))),
                s(:if,
                  s(:lvar, :version), nil,
                  s(:return)),
                s(:send,
                  s(:self), :ssl_version=,
                  s(:lvar, :version)))),
            s(:def, :set_params,
              s(:args,
                s(:optarg, :params,
                  s(:hash))),
              s(:begin,
                s(:lvasgn, :params,
                  s(:send,
                    s(:const, nil, :DEFAULT_PARAMS), :merge,
                    s(:lvar, :params))),
                s(:block,
                  s(:send,
                    s(:lvar, :params), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :value)),
                  s(:send,
                    s(:self), :__send__,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "=")),
                    s(:lvar, :value))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:self), :verify_mode), :!=,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE)),
                  s(:if,
                    s(:or,
                      s(:or,
                        s(:send,
                          s(:self), :ca_file),
                        s(:send,
                          s(:self), :ca_path)),
                      s(:send,
                        s(:self), :cert_store)), nil,
                    s(:send,
                      s(:self), :cert_store=,
                      s(:const, nil, :DEFAULT_CERT_STORE))), nil),
                s(:return,
                  s(:lvar, :params)))))),
        s(:module,
          s(:const, nil, :SocketForwarder),
          s(:begin,
            s(:def, :addr,
              s(:args),
              s(:send,
                s(:send, nil, :to_io), :addr)),
            s(:def, :peeraddr,
              s(:args),
              s(:send,
                s(:send, nil, :to_io), :peeraddr)),
            s(:def, :setsockopt,
              s(:args,
                s(:arg, :level),
                s(:arg, :optname),
                s(:arg, :optval)),
              s(:send,
                s(:send, nil, :to_io), :setsockopt,
                s(:lvar, :level),
                s(:lvar, :optname),
                s(:lvar, :optval))),
            s(:def, :getsockopt,
              s(:args,
                s(:arg, :level),
                s(:arg, :optname)),
              s(:send,
                s(:send, nil, :to_io), :getsockopt,
                s(:lvar, :level),
                s(:lvar, :optname))),
            s(:def, :fcntl,
              s(:args,
                s(:restarg, :args)),
              s(:send,
                s(:send, nil, :to_io), :fcntl,
                s(:splat,
                  s(:lvar, :args)))),
            s(:def, :closed?,
              s(:args),
              s(:send,
                s(:send, nil, :to_io), :closed?)),
            s(:def, :do_not_reverse_lookup=,
              s(:args,
                s(:arg, :flag)),
              s(:send,
                s(:send, nil, :to_io), :do_not_reverse_lookup=,
                s(:lvar, :flag))))),
        s(:def, :verify_certificate_identity,
          s(:args,
            s(:arg, :cert),
            s(:arg, :hostname)),
          s(:begin,
            s(:lvasgn, :should_verify_common_name,
              s(:true)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :cert), :extensions), :each),
              s(:args,
                s(:arg, :ext)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :ext), :oid), :!=,
                    s(:str, "subjectAltName")),
                  s(:next), nil),
                s(:lvasgn, :ostr,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :OpenSSL), :ASN1), :decode,
                        s(:send,
                          s(:lvar, :ext), :to_der)), :value), :last)),
                s(:lvasgn, :sequence,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :ASN1), :decode,
                    s(:send,
                      s(:lvar, :ostr), :value))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :sequence), :value), :each),
                  s(:args,
                    s(:arg, :san)),
                  s(:case,
                    s(:send,
                      s(:lvar, :san), :tag),
                    s(:when,
                      s(:int, 2),
                      s(:begin,
                        s(:lvasgn, :should_verify_common_name,
                          s(:false)),
                        s(:if,
                          s(:send, nil, :verify_hostname,
                            s(:lvar, :hostname),
                            s(:send,
                              s(:lvar, :san), :value)),
                          s(:return,
                            s(:true)), nil))),
                    s(:when,
                      s(:int, 7),
                      s(:begin,
                        s(:lvasgn, :should_verify_common_name,
                          s(:false)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :san), :value), :size), :==,
                            s(:int, 4)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :san), :value), :unpack,
                                  s(:str, "C*")), :join,
                                s(:str, ".")), :==,
                              s(:lvar, :hostname)),
                            s(:return,
                              s(:true)), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :san), :value), :size), :==,
                              s(:int, 16)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :san), :value), :unpack,
                                        s(:str, "n*")), :map),
                                    s(:args,
                                      s(:arg, :e)),
                                    s(:send, nil, :sprintf,
                                      s(:str, "%X"),
                                      s(:lvar, :e))), :join,
                                  s(:str, ":")), :==,
                                s(:lvar, :hostname)),
                              s(:return,
                                s(:true)), nil), nil)))), nil)))),
            s(:if,
              s(:lvar, :should_verify_common_name),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :cert), :subject), :to_a), :each),
                s(:args,
                  s(:arg, :oid),
                  s(:arg, :value)),
                s(:if,
                  s(:send,
                    s(:lvar, :oid), :==,
                    s(:str, "CN")),
                  s(:if,
                    s(:send, nil, :verify_hostname,
                      s(:lvar, :hostname),
                      s(:lvar, :value)),
                    s(:return,
                      s(:true)), nil), nil)), nil),
            s(:return,
              s(:false)))),
        s(:send, nil, :module_function,
          s(:sym, :verify_certificate_identity)),
        s(:def, :verify_hostname,
          s(:args,
            s(:arg, :hostname),
            s(:arg, :san)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :san), :ascii_only?), nil,
              s(:return,
                s(:false))),
            s(:if,
              s(:send,
                s(:lvar, :hostname), :ascii_only?), nil,
              s(:return,
                s(:false))),
            s(:lvasgn, :san_parts,
              s(:send,
                s(:send,
                  s(:lvar, :san), :downcase), :split,
                s(:str, "."))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :san_parts), :size), :<,
                s(:int, 2)),
              s(:return,
                s(:send,
                  s(:lvar, :san), :==,
                  s(:lvar, :hostname))), nil),
            s(:lvasgn, :host_parts,
              s(:send,
                s(:send,
                  s(:lvar, :hostname), :downcase), :split,
                s(:str, "."))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :san_parts), :size), :==,
                s(:send,
                  s(:lvar, :host_parts), :size)), nil,
              s(:return,
                s(:false))),
            s(:if,
              s(:send, nil, :verify_wildcard,
                s(:send,
                  s(:lvar, :host_parts), :shift),
                s(:send,
                  s(:lvar, :san_parts), :shift)), nil,
              s(:return,
                s(:false))),
            s(:send,
              s(:send,
                s(:lvar, :san_parts), :join,
                s(:str, ".")), :==,
              s(:send,
                s(:lvar, :host_parts), :join,
                s(:str, "."))))),
        s(:send, nil, :module_function,
          s(:sym, :verify_hostname)),
        s(:def, :verify_wildcard,
          s(:args,
            s(:arg, :domain_component),
            s(:arg, :san_component)),
          s(:begin,
            s(:lvasgn, :parts,
              s(:send,
                s(:lvar, :san_component), :split,
                s(:str, "*"),
                s(:int, -1))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :parts), :size), :>,
                s(:int, 2)),
              s(:return,
                s(:false)), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :parts), :size), :==,
                s(:int, 1)),
              s(:return,
                s(:send,
                  s(:lvar, :san_component), :==,
                  s(:lvar, :domain_component))), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :domain_component), :start_with?,
                  s(:str, "xn--")),
                s(:send,
                  s(:lvar, :san_component), :!=,
                  s(:str, "*"))),
              s(:return,
                s(:false)), nil),
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :parts), :[],
                        s(:int, 0)), :length), :+,
                    s(:send,
                      s(:send,
                        s(:lvar, :parts), :[],
                        s(:int, 1)), :length)), :<,
                  s(:send,
                    s(:lvar, :domain_component), :length)),
                s(:send,
                  s(:lvar, :domain_component), :start_with?,
                  s(:send,
                    s(:lvar, :parts), :[],
                    s(:int, 0)))),
              s(:send,
                s(:lvar, :domain_component), :end_with?,
                s(:send,
                  s(:lvar, :parts), :[],
                  s(:int, 1)))))),
        s(:send, nil, :module_function,
          s(:sym, :verify_wildcard)),
        s(:class,
          s(:const, nil, :SSLSocket), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :Buffering)),
            s(:send, nil, :include,
              s(:const, nil, :SocketForwarder)),
            s(:if,
              s(:const,
                s(:const, nil, :ExtConfig), :OPENSSL_NO_SOCK),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :io),
                  s(:optarg, :ctx,
                    s(:nil))),
                s(:send, nil, :raise,
                  s(:const, nil, :NotImplementedError))),
              s(:begin,
                s(:if,
                  s(:const,
                    s(:const, nil, :ExtConfig), :HAVE_TLSEXT_HOST_NAME),
                  s(:send, nil, :attr_accessor,
                    s(:sym, :hostname)), nil),
                s(:send, nil, :attr_reader,
                  s(:sym, :io),
                  s(:sym, :context)),
                s(:send, nil, :attr_accessor,
                  s(:sym, :sync_close)),
                s(:alias,
                  s(:sym, :to_io),
                  s(:sym, :io)),
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :io),
                    s(:optarg, :context,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new))),
                  s(:begin,
                    s(:ivasgn, :@io,
                      s(:lvar, :io)),
                    s(:ivasgn, :@context,
                      s(:lvar, :context)),
                    s(:ivasgn, :@sync_close,
                      s(:false)),
                    s(:ivasgn, :@hostname,
                      s(:nil)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@io), :respond_to?,
                        s(:sym, :nonblock=)),
                      s(:send,
                        s(:ivar, :@io), :nonblock=,
                        s(:true)), nil),
                    s(:send,
                      s(:lvar, :context), :setup),
                    s(:super))))),
            s(:def, :sysclose,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send, nil, :closed?),
                  s(:return), nil),
                s(:send, nil, :stop),
                s(:if,
                  s(:send, nil, :sync_close),
                  s(:send,
                    s(:send, nil, :io), :close), nil))),
            s(:def, :post_connection_check,
              s(:args,
                s(:arg, :hostname)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send, nil, :peer_cert), :nil?),
                  s(:begin,
                    s(:lvasgn, :msg,
                      s(:str, "Peer verification enabled, but no certificate received.")),
                    s(:if,
                      s(:send, nil, :using_anon_cipher?),
                      s(:op_asgn,
                        s(:lvasgn, :msg), :+,
                        s(:dstr,
                          s(:str, " Anonymous cipher suite "),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :cipher), :[],
                              s(:int, 0))),
                          s(:str, " was negotiated. Anonymous suites must be disabled to use peer verification."))), nil),
                    s(:send, nil, :raise,
                      s(:const, nil, :SSLError),
                      s(:lvar, :msg))), nil),
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :verify_certificate_identity,
                    s(:send, nil, :peer_cert),
                    s(:lvar, :hostname)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :SSLError),
                    s(:dstr,
                      s(:str, "hostname \""),
                      s(:begin,
                        s(:lvar, :hostname)),
                      s(:str, "\" does not match the server certificate")))),
                s(:return,
                  s(:true)))),
            s(:def, :session,
              s(:args),
              s(:rescue,
                s(:send,
                  s(:const,
                    s(:const, nil, :SSL), :Session), :new,
                  s(:self)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const,
                        s(:const, nil, :SSL), :Session), :SessionError)), nil,
                  s(:nil)), nil)),
            s(:send, nil, :private),
            s(:def, :using_anon_cipher?,
              s(:args),
              s(:begin,
                s(:lvasgn, :ctx,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                s(:send,
                  s(:lvar, :ctx), :ciphers=,
                  s(:str, "aNULL")),
                s(:send,
                  s(:send,
                    s(:lvar, :ctx), :ciphers), :include?,
                  s(:send, nil, :cipher)))),
            s(:def, :client_cert_cb,
              s(:args),
              s(:send,
                s(:ivar, :@context), :client_cert_cb)),
            s(:def, :tmp_dh_callback,
              s(:args),
              s(:or,
                s(:send,
                  s(:ivar, :@context), :tmp_dh_callback),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :DEFAULT_TMP_DH_CALLBACK))),
            s(:def, :tmp_ecdh_callback,
              s(:args),
              s(:send,
                s(:ivar, :@context), :tmp_ecdh_callback)),
            s(:def, :session_new_cb,
              s(:args),
              s(:send,
                s(:ivar, :@context), :session_new_cb)),
            s(:def, :session_get_cb,
              s(:args),
              s(:send,
                s(:ivar, :@context), :session_get_cb)))),
        s(:class,
          s(:const, nil, :SSLServer), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :SocketForwarder)),
            s(:send, nil, :attr_accessor,
              s(:sym, :start_immediately)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :svr),
                s(:arg, :ctx)),
              s(:begin,
                s(:ivasgn, :@svr,
                  s(:lvar, :svr)),
                s(:ivasgn, :@ctx,
                  s(:lvar, :ctx)),
                s(:if,
                  s(:send,
                    s(:lvar, :ctx), :session_id_context), nil,
                  s(:begin,
                    s(:lvasgn, :prng,
                      s(:send,
                        s(:const,
                          s(:cbase), :Random), :new,
                        s(:send,
                          s(:gvar, :$0), :hash))),
                    s(:lvasgn, :session_id,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :prng), :bytes,
                            s(:int, 16)), :unpack,
                          s(:str, "H*")), :[],
                        s(:int, 0))),
                    s(:send,
                      s(:ivar, :@ctx), :session_id_context=,
                      s(:lvar, :session_id)))),
                s(:ivasgn, :@start_immediately,
                  s(:true)))),
            s(:def, :to_io,
              s(:args),
              s(:ivar, :@svr)),
            s(:def, :listen,
              s(:args,
                s(:optarg, :backlog,
                  s(:int, 5))),
              s(:send,
                s(:ivar, :@svr), :listen,
                s(:lvar, :backlog))),
            s(:def, :shutdown,
              s(:args,
                s(:optarg, :how,
                  s(:const,
                    s(:const, nil, :Socket), :SHUT_RDWR))),
              s(:send,
                s(:ivar, :@svr), :shutdown,
                s(:lvar, :how))),
            s(:def, :accept,
              s(:args),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :sock)),
                  s(:send,
                    s(:ivar, :@svr), :accept)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :ssl,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                          s(:lvar, :sock),
                          s(:ivar, :@ctx))),
                      s(:send,
                        s(:lvar, :ssl), :sync_close=,
                        s(:true)),
                      s(:if,
                        s(:ivar, :@start_immediately),
                        s(:send,
                          s(:lvar, :ssl), :accept), nil),
                      s(:lvar, :ssl)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :ex),
                      s(:begin,
                        s(:if,
                          s(:lvar, :ssl),
                          s(:send,
                            s(:lvar, :ssl), :close),
                          s(:send,
                            s(:lvar, :sock), :close)),
                        s(:send, nil, :raise,
                          s(:lvar, :ex)))), nil)))),
            s(:def, :close,
              s(:args),
              s(:send,
                s(:ivar, :@svr), :close))))))))
