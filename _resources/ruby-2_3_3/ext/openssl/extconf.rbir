s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../deprecation"),
      s(:str, "(string)"))),
  s(:send, nil, :dir_config,
    s(:str, "openssl")),
  s(:send, nil, :dir_config,
    s(:str, "kerberos")),
  s(:send,
    s(:const, nil, :Logging), :message,
    s(:str, "=== OpenSSL for Ruby configurator ===\n")),
  s(:if,
    s(:or,
      s(:send, nil, :with_config,
        s(:str, "debug")),
      s(:send, nil, :enable_config,
        s(:str, "debug"))),
    s(:if,
      s(:send,
        s(:gvar, :$defs), :include?,
        s(:str, "-DOSSL_DEBUG")), nil,
      s(:send,
        s(:gvar, :$defs), :push,
        s(:str, "-DOSSL_DEBUG"))), nil),
  s(:send,
    s(:const, nil, :Logging), :message,
    s(:str, "=== Checking for system dependent stuff... ===\n")),
  s(:send, nil, :have_library,
    s(:str, "nsl"),
    s(:str, "t_open")),
  s(:send, nil, :have_library,
    s(:str, "socket"),
    s(:str, "socket")),
  s(:send, nil, :have_header,
    s(:str, "assert.h")),
  s(:send,
    s(:const, nil, :Logging), :message,
    s(:str, "=== Checking for required stuff... ===\n")),
  s(:if,
    s(:gvar, :$mingw),
    s(:begin,
      s(:send, nil, :have_library,
        s(:str, "wsock32")),
      s(:send, nil, :have_library,
        s(:str, "gdi32"))), nil),
  s(:lvasgn, :result,
    s(:and,
      s(:send, nil, :pkg_config,
        s(:str, "openssl")),
      s(:send, nil, :have_header,
        s(:str, "openssl/ssl.h")))),
  s(:if,
    s(:lvar, :result), nil,
    s(:begin,
      s(:lvasgn, :result,
        s(:send, nil, :have_header,
          s(:str, "openssl/ssl.h"))),
      s(:and_asgn,
        s(:lvasgn, :result),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "crypto"),
              s(:str, "libeay32")), :any?),
          s(:args,
            s(:arg, :lib)),
          s(:send, nil, :have_library,
            s(:lvar, :lib),
            s(:str, "OpenSSL_add_all_digests")))),
      s(:and_asgn,
        s(:lvasgn, :result),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "ssl"),
              s(:str, "ssleay32")), :any?),
          s(:args,
            s(:arg, :lib)),
          s(:send, nil, :have_library,
            s(:lvar, :lib),
            s(:str, "SSL_library_init")))),
      s(:if,
        s(:lvar, :result), nil,
        s(:begin,
          s(:send,
            s(:const, nil, :Logging), :message,
            s(:str, "=== Checking for required stuff failed. ===\n")),
          s(:send,
            s(:const, nil, :Logging), :message,
            s(:str, "Makefile wasn't created. Fix the errors above.\n")),
          s(:send, nil, :exit,
            s(:int, 1)))))),
  s(:if,
    s(:send, nil, :have_header,
      s(:str, "openssl/conf_api.h")), nil,
    s(:send, nil, :raise,
      s(:str, "OpenSSL 0.9.6 or later required."))),
  s(:if,
    s(:send,
      s(:const, nil, :OpenSSL), :check_func,
      s(:str, "SSL_library_init()"),
      s(:str, "openssl/ssl.h")), nil,
    s(:send, nil, :raise,
      s(:str, "Ignore OpenSSL broken by Apple.\nPlease use another openssl. (e.g. using `configure --with-openssl-dir=/path/to/openssl')"))),
  s(:send,
    s(:const, nil, :Logging), :message,
    s(:str, "=== Checking for OpenSSL features... ===\n")),
  s(:send, nil, :have_func,
    s(:str, "ERR_peek_last_error")),
  s(:send, nil, :have_func,
    s(:str, "ASN1_put_eoc")),
  s(:send, nil, :have_func,
    s(:str, "BN_mod_add")),
  s(:send, nil, :have_func,
    s(:str, "BN_mod_sqr")),
  s(:send, nil, :have_func,
    s(:str, "BN_mod_sub")),
  s(:send, nil, :have_func,
    s(:str, "BN_pseudo_rand_range")),
  s(:send, nil, :have_func,
    s(:str, "BN_rand_range")),
  s(:send, nil, :have_func,
    s(:str, "CONF_get1_default_config_file")),
  s(:send, nil, :have_func,
    s(:str, "EVP_CIPHER_CTX_copy")),
  s(:send, nil, :have_func,
    s(:str, "EVP_CIPHER_CTX_set_padding")),
  s(:send, nil, :have_func,
    s(:str, "EVP_CipherFinal_ex")),
  s(:send, nil, :have_func,
    s(:str, "EVP_CipherInit_ex")),
  s(:send, nil, :have_func,
    s(:str, "EVP_DigestFinal_ex")),
  s(:send, nil, :have_func,
    s(:str, "EVP_DigestInit_ex")),
  s(:send, nil, :have_func,
    s(:str, "EVP_MD_CTX_cleanup")),
  s(:send, nil, :have_func,
    s(:str, "EVP_MD_CTX_create")),
  s(:send, nil, :have_func,
    s(:str, "EVP_MD_CTX_destroy")),
  s(:send, nil, :have_func,
    s(:str, "EVP_MD_CTX_init")),
  s(:send, nil, :have_func,
    s(:str, "HMAC_CTX_cleanup")),
  s(:send, nil, :have_func,
    s(:str, "HMAC_CTX_copy")),
  s(:send, nil, :have_func,
    s(:str, "HMAC_CTX_init")),
  s(:send, nil, :have_func,
    s(:str, "PEM_def_callback")),
  s(:send, nil, :have_func,
    s(:str, "PKCS5_PBKDF2_HMAC")),
  s(:send, nil, :have_func,
    s(:str, "PKCS5_PBKDF2_HMAC_SHA1")),
  s(:send, nil, :have_func,
    s(:str, "RAND_egd")),
  s(:send, nil, :have_func,
    s(:str, "X509V3_set_nconf")),
  s(:send, nil, :have_func,
    s(:str, "X509V3_EXT_nconf_nid")),
  s(:send, nil, :have_func,
    s(:str, "X509_CRL_add0_revoked")),
  s(:send, nil, :have_func,
    s(:str, "X509_CRL_set_issuer_name")),
  s(:send, nil, :have_func,
    s(:str, "X509_CRL_set_version")),
  s(:send, nil, :have_func,
    s(:str, "X509_CRL_sort")),
  s(:send, nil, :have_func,
    s(:str, "X509_NAME_hash_old")),
  s(:send, nil, :have_func,
    s(:str, "X509_STORE_get_ex_data")),
  s(:send, nil, :have_func,
    s(:str, "X509_STORE_set_ex_data")),
  s(:send, nil, :have_func,
    s(:str, "OBJ_NAME_do_all_sorted")),
  s(:send, nil, :have_func,
    s(:str, "SSL_SESSION_get_id")),
  s(:send, nil, :have_func,
    s(:str, "SSL_SESSION_cmp")),
  s(:send, nil, :have_func,
    s(:str, "OPENSSL_cleanse")),
  s(:send, nil, :have_func,
    s(:str, "SSLv2_method")),
  s(:send, nil, :have_func,
    s(:str, "SSLv2_server_method")),
  s(:send, nil, :have_func,
    s(:str, "SSLv2_client_method")),
  s(:send, nil, :have_func,
    s(:str, "SSLv3_method")),
  s(:send, nil, :have_func,
    s(:str, "SSLv3_server_method")),
  s(:send, nil, :have_func,
    s(:str, "SSLv3_client_method")),
  s(:send, nil, :have_func,
    s(:str, "TLSv1_1_method")),
  s(:send, nil, :have_func,
    s(:str, "TLSv1_1_server_method")),
  s(:send, nil, :have_func,
    s(:str, "TLSv1_1_client_method")),
  s(:send, nil, :have_func,
    s(:str, "TLSv1_2_method")),
  s(:send, nil, :have_func,
    s(:str, "TLSv1_2_server_method")),
  s(:send, nil, :have_func,
    s(:str, "TLSv1_2_client_method")),
  s(:send, nil, :have_func,
    s(:str, "SSL_CTX_set_alpn_select_cb")),
  s(:send, nil, :have_func,
    s(:str, "SSL_CTX_set_next_proto_select_cb")),
  s(:if,
    s(:send, nil, :have_func,
      s(:str, "SSL_set_tlsext_host_name"),
      s(:array,
        s(:str, "openssl/ssl.h"))), nil,
    s(:and,
      s(:send, nil, :have_macro,
        s(:str, "SSL_set_tlsext_host_name"),
        s(:array,
          s(:str, "openssl/ssl.h"))),
      s(:send,
        s(:gvar, :$defs), :push,
        s(:str, "-DHAVE_SSL_SET_TLSEXT_HOST_NAME")))),
  s(:if,
    s(:send, nil, :have_header,
      s(:str, "openssl/engine.h")),
    s(:begin,
      s(:send, nil, :have_func,
        s(:str, "ENGINE_add")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_builtin_engines")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_openbsd_dev_crypto")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_get_digest")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_get_cipher")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_cleanup")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_dynamic")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_4758cca")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_aep")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_atalla")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_chil")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_cswift")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_nuron")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_sureware")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_ubsec")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_padlock")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_capi")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_gmp")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_gost")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_cryptodev")),
      s(:send, nil, :have_func,
        s(:str, "ENGINE_load_aesni"))), nil),
  s(:send, nil, :have_func,
    s(:str, "DH_generate_parameters_ex")),
  s(:send, nil, :have_func,
    s(:str, "DSA_generate_parameters_ex")),
  s(:send, nil, :have_func,
    s(:str, "RSA_generate_key_ex")),
  s(:if,
    s(:block,
      s(:send, nil, :checking_for,
        s(:str, "OpenSSL version is 0.9.7 or later")),
      s(:args),
      s(:send, nil, :try_static_assert,
        s(:str, "OPENSSL_VERSION_NUMBER >= 0x00907000L"),
        s(:str, "openssl/opensslv.h"))),
    s(:send, nil, :have_header,
      s(:str, "openssl/ocsp.h")), nil),
  s(:send, nil, :have_struct_member,
    s(:str, "CRYPTO_THREADID"),
    s(:str, "ptr"),
    s(:str, "openssl/crypto.h")),
  s(:send, nil, :have_struct_member,
    s(:str, "EVP_CIPHER_CTX"),
    s(:str, "flags"),
    s(:str, "openssl/evp.h")),
  s(:send, nil, :have_struct_member,
    s(:str, "EVP_CIPHER_CTX"),
    s(:str, "engine"),
    s(:str, "openssl/evp.h")),
  s(:send, nil, :have_struct_member,
    s(:str, "X509_ATTRIBUTE"),
    s(:str, "single"),
    s(:str, "openssl/x509.h")),
  s(:and,
    s(:send, nil, :have_macro,
      s(:str, "OPENSSL_FIPS"),
      s(:array,
        s(:str, "openssl/opensslconf.h"))),
    s(:send,
      s(:gvar, :$defs), :push,
      s(:str, "-DHAVE_OPENSSL_FIPS"))),
  s(:and,
    s(:send, nil, :have_macro,
      s(:str, "EVP_CTRL_GCM_GET_TAG"),
      s(:array,
        s(:str, "openssl/evp.h"))),
    s(:send,
      s(:gvar, :$defs), :push,
      s(:str, "-DHAVE_AUTHENTICATED_ENCRYPTION"))),
  s(:send,
    s(:const, nil, :Logging), :message,
    s(:str, "=== Checking done. ===\n")),
  s(:send, nil, :create_header),
  s(:block,
    s(:send, nil, :create_makefile,
      s(:str, "openssl")),
    s(:args,
      s(:arg, :conf)),
    s(:send,
      s(:lvar, :conf), :<<,
      s(:dstr,
        s(:str, "THREAD_MODEL = "),
        s(:begin,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "THREAD_MODEL"))),
        s(:str, "\n")))),
  s(:send,
    s(:const, nil, :Logging), :message,
    s(:str, "Done.\n")))
