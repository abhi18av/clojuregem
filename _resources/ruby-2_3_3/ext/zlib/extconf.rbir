s(:begin,
  s(:send, nil, :require,
    s(:str, "mkmf")),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:send, nil, :dir_config,
    s(:str, "zlib")),
  s(:if,
    s(:and,
      s(:block,
        s(:send,
          s(:array,
            s(:str, "z"),
            s(:str, "libz"),
            s(:str, "zlib1"),
            s(:str, "zlib"),
            s(:str, "zdll"),
            s(:str, "zlibwapi")), :find),
        s(:args,
          s(:arg, :z)),
        s(:send, nil, :have_library,
          s(:lvar, :z),
          s(:str, "deflateReset"))),
      s(:send, nil, :have_header,
        s(:str, "zlib.h"))),
    s(:begin,
      s(:lvasgn, :defines,
        s(:array)),
      s(:send,
        s(:const, nil, :Logging), :message,
        s(:str, "checking for kind of operating system... ")),
      s(:lvasgn, :os_code,
        s(:or,
          s(:send, nil, :with_config,
            s(:str, "os-code")),
          s(:case,
            s(:send,
              s(:send,
                s(:const, nil, :RUBY_PLATFORM), :split,
                s(:str, "-"),
                s(:int, 2)), :[],
              s(:int, 1)),
            s(:when,
              s(:str, "amigaos"),
              s(:lvasgn, :os_code,
                s(:str, "AMIGA"))),
            s(:when,
              s(:regexp,
                s(:str, "mswin|mingw|bccwin"),
                s(:regopt)),
              s(:lvasgn, :os_code,
                s(:str, "WIN32"))),
            s(:lvasgn, :os_code,
              s(:str, "UNIX"))))),
      s(:lvasgn, :os_code,
        s(:send,
          s(:str, "OS_"), :+,
          s(:send,
            s(:lvar, :os_code), :upcase))),
      s(:casgn, nil, :OS_NAMES,
        s(:hash,
          s(:pair,
            s(:str, "OS_MSDOS"),
            s(:str, "MS-DOS")),
          s(:pair,
            s(:str, "OS_AMIGA"),
            s(:str, "Amiga")),
          s(:pair,
            s(:str, "OS_VMS"),
            s(:str, "VMS")),
          s(:pair,
            s(:str, "OS_UNIX"),
            s(:str, "Unix")),
          s(:pair,
            s(:str, "OS_ATARI"),
            s(:str, "Atari")),
          s(:pair,
            s(:str, "OS_MACOS"),
            s(:str, "MacOS")),
          s(:pair,
            s(:str, "OS_TOPS20"),
            s(:str, "TOPS20")),
          s(:pair,
            s(:str, "OS_WIN32"),
            s(:str, "Win32")),
          s(:pair,
            s(:str, "OS_VMCMS"),
            s(:str, "VM/CMS")),
          s(:pair,
            s(:str, "OS_ZSYSTEM"),
            s(:str, "Z-System")),
          s(:pair,
            s(:str, "OS_CPM"),
            s(:str, "CP/M")),
          s(:pair,
            s(:str, "OS_QDOS"),
            s(:str, "QDOS")),
          s(:pair,
            s(:str, "OS_RISCOS"),
            s(:str, "RISCOS")),
          s(:pair,
            s(:str, "OS_UNKNOWN"),
            s(:str, "Unknown")))),
      s(:if,
        s(:send,
          s(:const, nil, :OS_NAMES), :key?,
          s(:lvar, :os_code)), nil,
        s(:send, nil, :raise,
          s(:dstr,
            s(:str, "invalid OS_CODE `"),
            s(:begin,
              s(:lvar, :os_code)),
            s(:str, "'")))),
      s(:send,
        s(:const, nil, :Logging), :message,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:const, nil, :OS_NAMES), :[],
              s(:lvar, :os_code))),
          s(:str, "\n"))),
      s(:send,
        s(:lvar, :defines), :<<,
        s(:dstr,
          s(:str, "OS_CODE="),
          s(:begin,
            s(:lvar, :os_code)))),
      s(:send,
        s(:gvar, :$defs), :concat,
        s(:block,
          s(:send,
            s(:lvar, :defines), :collect),
          s(:args,
            s(:arg, :d)),
          s(:send,
            s(:str, " -D"), :+,
            s(:lvar, :d)))),
      s(:send, nil, :have_func,
        s(:str, "crc32_combine"),
        s(:str, "zlib.h")),
      s(:send, nil, :have_func,
        s(:str, "adler32_combine"),
        s(:str, "zlib.h")),
      s(:send, nil, :have_type,
        s(:str, "z_crc_t"),
        s(:str, "zlib.h")),
      s(:send, nil, :create_makefile,
        s(:str, "zlib"))), nil))
