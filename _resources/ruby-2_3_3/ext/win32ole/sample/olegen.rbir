s(:begin,
  s(:send, nil, :require,
    s(:str, "win32ole")),
  s(:class,
    s(:const, nil, :WIN32COMGen), nil,
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :typelib)),
        s(:begin,
          s(:ivasgn, :@typelib,
            s(:lvar, :typelib)),
          s(:ivasgn, :@receiver,
            s(:str, "")))),
      s(:send, nil, :attr_reader,
        s(:sym, :typelib)),
      s(:def, :ole_classes,
        s(:args,
          s(:arg, :typelib)),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:ivasgn, :@ole,
                s(:send,
                  s(:const, nil, :WIN32OLE), :new,
                  s(:lvar, :typelib))),
              s(:array,
                s(:send,
                  s(:ivar, :@ole), :ole_obj_help))),
            s(:resbody, nil, nil,
              s(:send,
                s(:const, nil, :WIN32OLE_TYPE), :ole_classes,
                s(:lvar, :typelib))), nil))),
      s(:def, :generate_args,
        s(:args,
          s(:arg, :method)),
        s(:begin,
          s(:lvasgn, :args,
            s(:array)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :method), :size_opt_params), :>=,
              s(:int, 0)),
            s(:lvasgn, :size_required_params,
              s(:send,
                s(:send,
                  s(:lvar, :method), :size_params), :-,
                s(:send,
                  s(:lvar, :method), :size_opt_params))),
            s(:lvasgn, :size_required_params,
              s(:send,
                s(:send,
                  s(:lvar, :method), :size_params), :-,
                s(:int, 1)))),
          s(:block,
            s(:send,
              s(:lvar, :size_required_params), :times),
            s(:args,
              s(:arg, :i)),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :method), :params), :[],
                  s(:lvar, :i)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :method), :params), :[],
                    s(:lvar, :i)), :optional?)),
              s(:send,
                s(:lvar, :args), :push,
                s(:dstr,
                  s(:str, "arg"),
                  s(:begin,
                    s(:lvar, :i)),
                  s(:str, "=nil"))),
              s(:send,
                s(:lvar, :args), :push,
                s(:dstr,
                  s(:str, "arg"),
                  s(:begin,
                    s(:lvar, :i)))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :method), :size_opt_params), :>=,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :method), :size_opt_params), :times),
              s(:args,
                s(:arg, :i)),
              s(:send,
                s(:lvar, :args), :push,
                s(:dstr,
                  s(:str, "arg"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :i), :+,
                      s(:lvar, :size_required_params))),
                  s(:str, "=nil")))),
            s(:send,
              s(:lvar, :args), :push,
              s(:str, "*arg"))),
          s(:send,
            s(:lvar, :args), :join,
            s(:str, ", ")))),
      s(:def, :generate_argtype,
        s(:args,
          s(:arg, :typedetails)),
        s(:begin,
          s(:lvasgn, :ts,
            s(:str, "")),
          s(:block,
            s(:send,
              s(:lvar, :typedetails), :each),
            s(:args,
              s(:arg, :t)),
            s(:case,
              s(:lvar, :t),
              s(:when,
                s(:str, "CARRAY"),
                s(:str, "VOID"),
                s(:str, "UINT"),
                s(:str, "RESULT"),
                s(:str, "DECIMAL"),
                s(:str, "I8"),
                s(:str, "UI8"),
                s(:send,
                  s(:lvar, :ts), :<<,
                  s(:dstr,
                    s(:str, "\"??? NOT SUPPORTED TYPE:`"),
                    s(:begin,
                      s(:lvar, :t)),
                    s(:str, "'\"")))),
              s(:when,
                s(:str, "USERDEFINED"),
                s(:str, "Unknown Type 9"),
                s(:begin,
                  s(:send,
                    s(:lvar, :ts), :<<,
                    s(:str, "VT_DISPATCH")),
                  s(:break))),
              s(:when,
                s(:str, "SAFEARRAY"),
                s(:send,
                  s(:lvar, :ts), :<<,
                  s(:str, "VT_ARRAY|"))),
              s(:when,
                s(:str, "PTR"),
                s(:send,
                  s(:lvar, :ts), :<<,
                  s(:str, "VT_BYREF|"))),
              s(:when,
                s(:str, "INT"),
                s(:send,
                  s(:lvar, :ts), :<<,
                  s(:str, "VT_I4"))),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :t)),
                s(:send,
                  s(:lvar, :ts), :<<,
                  s(:send,
                    s(:str, "VT_"), :+,
                    s(:lvar, :t))), nil))),
          s(:if,
            s(:send,
              s(:lvar, :ts), :empty?),
            s(:lvasgn, :ts,
              s(:str, "VT_VARIANT")),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :ts), :[],
                  s(:int, -1)), :==,
                s(:str, "|")),
              s(:op_asgn,
                s(:lvasgn, :ts), :+,
                s(:str, "VT_VARIANT")), nil)),
          s(:lvar, :ts))),
      s(:def, :generate_argtypes,
        s(:args,
          s(:arg, :method),
          s(:arg, :proptypes)),
        s(:begin,
          s(:lvasgn, :types,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :method), :params), :collect),
                s(:args,
                  s(:arg, :param)),
                s(:send, nil, :generate_argtype,
                  s(:send,
                    s(:lvar, :param), :ole_type_detail))), :join,
              s(:str, ", "))),
          s(:if,
            s(:lvar, :proptypes),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :types), :size), :>,
                  s(:int, 0)),
                s(:op_asgn,
                  s(:lvasgn, :types), :+,
                  s(:str, ", ")), nil),
              s(:op_asgn,
                s(:lvasgn, :types), :+,
                s(:send, nil, :generate_argtype,
                  s(:lvar, :proptypes)))), nil),
          s(:lvar, :types))),
      s(:def, :generate_method_body,
        s(:args,
          s(:arg, :method),
          s(:arg, :disptype),
          s(:optarg, :types,
            s(:nil))),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:dstr,
                      s(:str, "    ret = "),
                      s(:begin,
                        s(:ivar, :@receiver)),
                      s(:begin,
                        s(:lvar, :disptype)),
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :method), :dispid)),
                      s(:str, ", [")), :+,
                    s(:send,
                      s(:send, nil, :generate_args,
                        s(:lvar, :method)), :gsub,
                      s(:str, "=nil"),
                      s(:str, ""))), :+,
                  s(:str, "], [")), :+,
                s(:send, nil, :generate_argtypes,
                  s(:lvar, :method),
                  s(:lvar, :types))), :+,
              s(:str, "])\n")), :+,
            s(:str, "    @lastargs = WIN32OLE::ARGV\n")), :+,
          s(:str, "    ret"))),
      s(:def, :generate_method_help,
        s(:args,
          s(:arg, :method),
          s(:optarg, :type,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :str,
            s(:str, "  # ")),
          s(:if,
            s(:lvar, :type),
            s(:op_asgn,
              s(:lvasgn, :str), :+,
              s(:lvar, :type)),
            s(:op_asgn,
              s(:lvasgn, :str), :+,
              s(:send,
                s(:lvar, :method), :return_type))),
          s(:op_asgn,
            s(:lvasgn, :str), :+,
            s(:dstr,
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:lvar, :method), :name)))),
          s(:if,
            s(:send,
              s(:lvar, :method), :event?),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :str), :+,
                s(:str, " EVENT")),
              s(:op_asgn,
                s(:lvasgn, :str), :+,
                s(:dstr,
                  s(:str, " in "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :method), :event_interface))))), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :method), :helpstring),
              s(:send,
                s(:send,
                  s(:lvar, :method), :helpstring), :!=,
                s(:str, ""))),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :str), :+,
                s(:str, "\n  # ")),
              s(:op_asgn,
                s(:lvasgn, :str), :+,
                s(:send,
                  s(:lvar, :method), :helpstring))), nil),
          s(:lvasgn, :args_help,
            s(:send, nil, :generate_method_args_help,
              s(:lvar, :method))),
          s(:if,
            s(:lvar, :args_help),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :str), :+,
                s(:str, "\n")),
              s(:op_asgn,
                s(:lvasgn, :str), :+,
                s(:lvar, :args_help))), nil),
          s(:lvar, :str))),
      s(:def, :generate_method_args_help,
        s(:args,
          s(:arg, :method)),
        s(:begin,
          s(:lvasgn, :args,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :method), :params), :each_with_index),
            s(:args,
              s(:arg, :param),
              s(:arg, :i)),
            s(:begin,
              s(:lvasgn, :h,
                s(:dstr,
                  s(:str, "  #   "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :param), :ole_type)),
                  s(:str, " arg"),
                  s(:begin,
                    s(:lvar, :i)),
                  s(:str, " --- "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :param), :name)))),
              s(:lvasgn, :inout,
                s(:array)),
              s(:if,
                s(:send,
                  s(:lvar, :param), :input?),
                s(:send,
                  s(:lvar, :inout), :push,
                  s(:str, "IN")), nil),
              s(:if,
                s(:send,
                  s(:lvar, :param), :output?),
                s(:send,
                  s(:lvar, :inout), :push,
                  s(:str, "OUT")), nil),
              s(:op_asgn,
                s(:lvasgn, :h), :+,
                s(:dstr,
                  s(:str, " ["),
                  s(:begin,
                    s(:send,
                      s(:lvar, :inout), :join,
                      s(:str, "/"))),
                  s(:str, "]"))),
              s(:if,
                s(:send,
                  s(:lvar, :param), :default),
                s(:op_asgn,
                  s(:lvasgn, :h), :+,
                  s(:dstr,
                    s(:str, " ( = "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :param), :default)),
                    s(:str, ")"))), nil),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :h)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :size), :>,
              s(:int, 0)),
            s(:send,
              s(:lvar, :args), :join,
              s(:str, "\n")),
            s(:nil)))),
      s(:def, :generate_method,
        s(:args,
          s(:arg, :method),
          s(:arg, :disptype),
          s(:optarg, :io,
            s(:const, nil, :STDOUT)),
          s(:optarg, :types,
            s(:nil))),
        s(:begin,
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "\n")),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :generate_method_help,
              s(:lvar, :method))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :method), :invoke_kind), :==,
              s(:str, "PROPERTYPUT")),
            s(:send,
              s(:lvar, :io), :print,
              s(:dstr,
                s(:str, "  def "),
                s(:begin,
                  s(:send,
                    s(:lvar, :method), :name)),
                s(:str, "=("))),
            s(:send,
              s(:lvar, :io), :print,
              s(:dstr,
                s(:str, "  def "),
                s(:begin,
                  s(:send,
                    s(:lvar, :method), :name)),
                s(:str, "(")))),
          s(:send,
            s(:lvar, :io), :print,
            s(:send, nil, :generate_args,
              s(:lvar, :method))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, ")")),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :generate_method_body,
              s(:lvar, :method),
              s(:lvar, :disptype),
              s(:lvar, :types))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "  end")))),
      s(:def, :generate_propputref_methods,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :ole_methods), :select),
              s(:args,
                s(:arg, :method)),
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :method), :invoke_kind), :==,
                  s(:str, "PROPERTYPUTREF")),
                s(:send,
                  s(:lvar, :method), :visible?))), :each),
          s(:args,
            s(:arg, :method)),
          s(:send, nil, :generate_method,
            s(:lvar, :method),
            s(:lvar, :io)))),
      s(:def, :generate_properties_with_args,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :ole_methods), :select),
              s(:args,
                s(:arg, :method)),
              s(:and,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :method), :invoke_kind), :==,
                    s(:str, "PROPERTYGET")),
                  s(:send,
                    s(:lvar, :method), :visible?)),
                s(:send,
                  s(:send,
                    s(:lvar, :method), :size_params), :>,
                  s(:int, 0)))), :each),
          s(:args,
            s(:arg, :method)),
          s(:begin,
            s(:lvasgn, :types,
              s(:send,
                s(:lvar, :method), :return_type_detail)),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "\n")),
            s(:send,
              s(:lvar, :io), :puts,
              s(:send, nil, :generate_method_help,
                s(:lvar, :method),
                s(:send,
                  s(:lvar, :types), :[],
                  s(:int, 0)))),
            s(:send,
              s(:lvar, :io), :puts,
              s(:dstr,
                s(:str, "  def "),
                s(:begin,
                  s(:send,
                    s(:lvar, :method), :name)))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :ole_type), :==,
                s(:str, "Class")),
              s(:send,
                s(:lvar, :io), :print,
                s(:dstr,
                  s(:str, "    OLEProperty.new(@dispatch, "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :method), :dispid)),
                  s(:str, ", ["))),
              s(:send,
                s(:lvar, :io), :print,
                s(:dstr,
                  s(:str, "    OLEProperty.new(self, "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :method), :dispid)),
                  s(:str, ", [")))),
            s(:send,
              s(:lvar, :io), :print,
              s(:send, nil, :generate_argtypes,
                s(:lvar, :method),
                s(:nil))),
            s(:send,
              s(:lvar, :io), :print,
              s(:str, "], [")),
            s(:send,
              s(:lvar, :io), :print,
              s(:send, nil, :generate_argtypes,
                s(:lvar, :method),
                s(:lvar, :types))),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "])")),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "  end"))))),
      s(:def, :generate_propput_methods,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :ole_methods), :select),
              s(:args,
                s(:arg, :method)),
              s(:and,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :method), :invoke_kind), :==,
                    s(:str, "PROPERTYPUT")),
                  s(:send,
                    s(:lvar, :method), :visible?)),
                s(:send,
                  s(:send,
                    s(:lvar, :method), :size_params), :==,
                  s(:int, 1)))), :each),
          s(:args,
            s(:arg, :method)),
          s(:begin,
            s(:lvasgn, :ms,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :ole_methods), :select),
                s(:args,
                  s(:arg, :m)),
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :invoke_kind), :==,
                    s(:str, "PROPERTYGET")),
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :dispid), :==,
                    s(:send,
                      s(:lvar, :method), :dispid))))),
            s(:lvasgn, :types,
              s(:array)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :ms), :size), :==,
                s(:int, 1)),
              s(:lvasgn, :types,
                s(:send,
                  s(:send,
                    s(:lvar, :ms), :[],
                    s(:int, 0)), :return_type_detail)), nil),
            s(:send, nil, :generate_method,
              s(:lvar, :method),
              s(:str, "_setproperty"),
              s(:lvar, :io),
              s(:lvar, :types))))),
      s(:def, :generate_propget_methods,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :ole_methods), :select),
              s(:args,
                s(:arg, :method)),
              s(:and,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :method), :invoke_kind), :==,
                    s(:str, "PROPERTYGET")),
                  s(:send,
                    s(:lvar, :method), :visible?)),
                s(:send,
                  s(:send,
                    s(:lvar, :method), :size_params), :==,
                  s(:int, 0)))), :each),
          s(:args,
            s(:arg, :method)),
          s(:send, nil, :generate_method,
            s(:lvar, :method),
            s(:str, "_getproperty"),
            s(:lvar, :io)))),
      s(:def, :generate_func_methods,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :ole_methods), :select),
              s(:args,
                s(:arg, :method)),
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :method), :invoke_kind), :==,
                  s(:str, "FUNC")),
                s(:send,
                  s(:lvar, :method), :visible?))), :each),
          s(:args,
            s(:arg, :method)),
          s(:send, nil, :generate_method,
            s(:lvar, :method),
            s(:str, "_invoke"),
            s(:lvar, :io)))),
      s(:def, :generate_methods,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:begin,
          s(:send, nil, :generate_propget_methods,
            s(:lvar, :klass),
            s(:lvar, :io)),
          s(:send, nil, :generate_propput_methods,
            s(:lvar, :klass),
            s(:lvar, :io)),
          s(:send, nil, :generate_properties_with_args,
            s(:lvar, :klass),
            s(:lvar, :io)),
          s(:send, nil, :generate_func_methods,
            s(:lvar, :klass),
            s(:lvar, :io)))),
      s(:def, :generate_constants,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :variables), :select),
              s(:args,
                s(:arg, :v)),
              s(:and,
                s(:send,
                  s(:lvar, :v), :visible?),
                s(:send,
                  s(:send,
                    s(:lvar, :v), :variable_kind), :==,
                  s(:str, "CONSTANT")))), :each),
          s(:args,
            s(:arg, :v)),
          s(:begin,
            s(:send,
              s(:lvar, :io), :print,
              s(:str, "  ")),
            s(:send,
              s(:lvar, :io), :print,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :name), :sub,
                  s(:regexp,
                    s(:str, "^."),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:back_ref, :$&), :upcase))),
            s(:send,
              s(:lvar, :io), :print,
              s(:str, " = ")),
            s(:send,
              s(:lvar, :io), :puts,
              s(:send,
                s(:lvar, :v), :value))))),
      s(:def, :class_name,
        s(:args,
          s(:arg, :klass)),
        s(:begin,
          s(:lvasgn, :klass_name,
            s(:send,
              s(:lvar, :klass), :name)),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :ole_type), :==,
                  s(:str, "Class")),
                s(:send,
                  s(:lvar, :klass), :guid)),
              s(:send,
                s(:lvar, :klass), :progid)),
            s(:lvasgn, :klass_name,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :progid), :gsub,
                s(:regexp,
                  s(:str, "\\."),
                  s(:regopt)),
                s(:str, "_"))), nil),
          s(:if,
            s(:or,
              s(:send,
                s(:regexp,
                  s(:str, "^[A-Z]"),
                  s(:regopt)), :!~,
                s(:lvar, :klass_name)),
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :constants), :include?,
                s(:lvar, :klass_name))),
            s(:lvasgn, :klass_name,
              s(:send,
                s(:str, "OLE"), :+,
                s(:lvar, :klass_name))), nil),
          s(:lvar, :klass_name))),
      s(:def, :define_initialize,
        s(:args,
          s(:arg, :klass)),
        s(:dstr,
          s(:str, "\n"),
          s(:str, "  def initialize(obj = nil)\n"),
          s(:str, "    @clsid = \""),
          s(:begin,
            s(:send,
              s(:lvar, :klass), :guid)),
          s(:str, "\"\n"),
          s(:str, "    @progid = \""),
          s(:begin,
            s(:send,
              s(:lvar, :klass), :progid)),
          s(:str, "\"\n"),
          s(:str, "    if obj.nil?\n"),
          s(:str, "      @dispatch = WIN32OLE.new @progid\n"),
          s(:str, "    else\n"),
          s(:str, "      @dispatch = obj\n"),
          s(:str, "    end\n"),
          s(:str, "  end\n"))),
      s(:def, :define_include,
        s(:args),
        s(:str, "  include WIN32OLE::VARIANT")),
      s(:def, :define_instance_variables,
        s(:args),
        s(:str, "  attr_reader :lastargs")),
      s(:def, :define_method_missing,
        s(:args),
        s(:dstr,
          s(:str, "\n"),
          s(:str, "  def method_missing(cmd, *arg)\n"),
          s(:str, "    @dispatch.method_missing(cmd, *arg)\n"),
          s(:str, "  end\n"))),
      s(:def, :define_class,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:begin,
          s(:send,
            s(:lvar, :io), :puts,
            s(:dstr,
              s(:str, "class "),
              s(:begin,
                s(:send, nil, :class_name,
                  s(:lvar, :klass))),
              s(:str, " # "),
              s(:begin,
                s(:send,
                  s(:lvar, :klass), :name)))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :define_include)),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :define_instance_variables)),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "  attr_reader :dispatch")),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "  attr_reader :clsid")),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "  attr_reader :progid")),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :define_initialize,
              s(:lvar, :klass))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :define_method_missing)))),
      s(:def, :define_module,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:begin,
          s(:send,
            s(:lvar, :io), :puts,
            s(:dstr,
              s(:str, "module "),
              s(:begin,
                s(:send, nil, :class_name,
                  s(:lvar, :klass))))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :define_include)),
          s(:send,
            s(:lvar, :io), :puts,
            s(:send, nil, :define_instance_variables)))),
      s(:def, :generate_class,
        s(:args,
          s(:arg, :klass),
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:begin,
          s(:send,
            s(:lvar, :io), :puts,
            s(:dstr,
              s(:str, "\n# "),
              s(:begin,
                s(:send,
                  s(:lvar, :klass), :helpstring)))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :ole_type), :==,
                  s(:str, "Class")),
                s(:send,
                  s(:lvar, :klass), :guid)),
              s(:send,
                s(:lvar, :klass), :progid)),
            s(:begin,
              s(:ivasgn, :@receiver,
                s(:str, "@dispatch.")),
              s(:send, nil, :define_class,
                s(:lvar, :klass),
                s(:lvar, :io))),
            s(:begin,
              s(:ivasgn, :@receiver,
                s(:str, "")),
              s(:send, nil, :define_module,
                s(:lvar, :klass),
                s(:lvar, :io)))),
          s(:send, nil, :generate_constants,
            s(:lvar, :klass),
            s(:lvar, :io)),
          s(:send, nil, :generate_methods,
            s(:lvar, :klass),
            s(:lvar, :io)),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "end")))),
      s(:def, :generate,
        s(:args,
          s(:optarg, :io,
            s(:const, nil, :STDOUT))),
        s(:begin,
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "require 'win32ole'")),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "require 'win32ole/property'")),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:send, nil, :ole_classes,
                    s(:send, nil, :typelib)), :select),
                s(:args,
                  s(:arg, :klass)),
                s(:and,
                  s(:send,
                    s(:lvar, :klass), :visible?),
                  s(:begin,
                    s(:or,
                      s(:or,
                        s(:or,
                          s(:send,
                            s(:send,
                              s(:lvar, :klass), :ole_type), :==,
                            s(:str, "Class")),
                          s(:send,
                            s(:send,
                              s(:lvar, :klass), :ole_type), :==,
                            s(:str, "Interface"))),
                        s(:send,
                          s(:send,
                            s(:lvar, :klass), :ole_type), :==,
                          s(:str, "Dispatch"))),
                      s(:send,
                        s(:send,
                          s(:lvar, :klass), :ole_type), :==,
                        s(:str, "Enum")))))), :each),
            s(:args,
              s(:arg, :klass)),
            s(:send, nil, :generate_class,
              s(:lvar, :klass),
              s(:lvar, :io))),
          s(:kwbegin,
            s(:rescue,
              s(:if,
                s(:ivar, :@ole),
                s(:send,
                  s(:ivar, :@ole), :quit), nil),
              s(:resbody, nil, nil, nil), nil)))))),
  s(:send, nil, :require,
    s(:str, "win32ole")),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:begin,
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :ARGV), :size), :==,
          s(:int, 0)),
        s(:begin,
          s(:send,
            s(:gvar, :$stderr), :puts,
            s(:dstr,
              s(:str, "usage: "),
              s(:begin,
                s(:gvar, :$0)),
              s(:str, " Type Library [...]"))),
          s(:send, nil, :exit,
            s(:int, 1))), nil),
      s(:block,
        s(:send,
          s(:const, nil, :ARGV), :each),
        s(:args,
          s(:arg, :typelib)),
        s(:begin,
          s(:lvasgn, :comgen,
            s(:send,
              s(:const, nil, :WIN32COMGen), :new,
              s(:lvar, :typelib))),
          s(:send,
            s(:lvar, :comgen), :generate)))), nil))
