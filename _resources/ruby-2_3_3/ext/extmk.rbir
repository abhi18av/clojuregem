s(:begin,
  s(:gvasgn, :$extension,
    s(:nil)),
  s(:gvasgn, :$extstatic,
    s(:nil)),
  s(:gvasgn, :$force_static,
    s(:nil)),
  s(:gvasgn, :$install,
    s(:nil)),
  s(:gvasgn, :$destdir,
    s(:nil)),
  s(:gvasgn, :$dryrun,
    s(:false)),
  s(:gvasgn, :$clean,
    s(:nil)),
  s(:gvasgn, :$nodynamic,
    s(:nil)),
  s(:gvasgn, :$extinit,
    s(:nil)),
  s(:gvasgn, :$extobjs,
    s(:array)),
  s(:gvasgn, :$extflags,
    s(:str, "")),
  s(:gvasgn, :$extlibs,
    s(:nil)),
  s(:gvasgn, :$extpath,
    s(:nil)),
  s(:gvasgn, :$ignore,
    s(:nil)),
  s(:gvasgn, :$message,
    s(:nil)),
  s(:gvasgn, :$command_output,
    s(:nil)),
  s(:gvasgn, :$configure_only,
    s(:false)),
  s(:gvasgn, :$progname,
    s(:gvar, :$0)),
  s(:alias,
    s(:gvar, :$PROGRAM_NAME),
    s(:gvar, :$0)),
  s(:alias,
    s(:gvar, :$0),
    s(:gvar, :$progname)),
  s(:gvasgn, :$extlist,
    s(:array)),
  s(:gvasgn, :$compiled,
    s(:hash)),
  s(:casgn, nil, :DUMMY_SIGNATURE,
    s(:str, "***DUMMY MAKEFILE***")),
  s(:lvasgn, :srcdir,
    s(:send,
      s(:const, nil, :File), :dirname,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:str, "(string)")))),
  s(:if,
    s(:and,
      s(:defined?,
        s(:const, nil, :CROSS_COMPILING)),
      s(:const, nil, :CROSS_COMPILING)), nil,
    s(:send,
      s(:gvar, :$:), :replace,
      s(:array,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:str, "lib"),
          s(:lvar, :srcdir)),
        s(:send,
          s(:const, nil, :Dir), :pwd)))),
  s(:send,
    s(:gvar, :$:), :unshift,
    s(:lvar, :srcdir)),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:gvasgn, :$topdir,
    s(:str, ".")),
  s(:gvasgn, :$top_srcdir,
    s(:lvar, :srcdir)),
  s(:send,
    s(:gvar, :$"), :<<,
    s(:str, "mkmf.rb")),
  s(:send, nil, :load,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "lib/mkmf.rb"),
      s(:lvar, :srcdir))),
  s(:send, nil, :require,
    s(:str, "optparse/shellwords")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :File), :NULL)),
    s(:ivasgn, :@null,
      s(:const,
        s(:const, nil, :File), :NULL)),
    s(:if,
      s(:send,
        s(:send,
          s(:const, nil, :File), :chardev?,
          s(:ivasgn, :@null,
            s(:str, "/dev/null"))), :!),
      s(:ivasgn, :@null,
        s(:str, "nul")), nil)),
  s(:def, :sysquote,
    s(:args,
      s(:arg, :x)),
    s(:if,
      s(:ivar, :@quote),
      s(:send,
        s(:lvar, :x), :quote),
      s(:lvar, :x))),
  s(:def, :verbose?,
    s(:args),
    s(:send,
      s(:send,
        s(:gvar, :$mflags), :defined?,
        s(:str, "V")), :==,
      s(:str, "1"))),
  s(:def, :system,
    s(:args,
      s(:restarg, :args)),
    s(:begin,
      s(:if,
        s(:send, nil, :verbose?),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :args), :size), :==,
            s(:int, 1)),
          s(:send, nil, :puts,
            s(:lvar, :args)),
          s(:send, nil, :puts,
            s(:send,
              s(:const, nil, :Shellwords), :join,
              s(:lvar, :args)))), nil),
      s(:zsuper))),
  s(:def, :atomic_write_open,
    s(:args,
      s(:arg, :filename)),
    s(:begin,
      s(:lvasgn, :filename_new,
        s(:send,
          s(:lvar, :filename), :+,
          s(:dstr,
            s(:str, ".new."),
            s(:gvar, :$$)))),
      s(:block,
        s(:send, nil, :open,
          s(:lvar, :filename_new),
          s(:str, "wb")),
        s(:args,
          s(:arg, :f)),
        s(:yield,
          s(:lvar, :f))),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :File), :binread,
            s(:lvar, :filename_new)), :!=,
          s(:begin,
            s(:rescue,
              s(:send,
                s(:const, nil, :File), :binread,
                s(:lvar, :filename)),
              s(:resbody, nil, nil,
                s(:nil)), nil))),
        s(:send,
          s(:const, nil, :File), :rename,
          s(:lvar, :filename_new),
          s(:lvar, :filename)),
        s(:send,
          s(:const, nil, :File), :unlink,
          s(:lvar, :filename_new))))),
  s(:def, :extract_makefile,
    s(:args,
      s(:arg, :makefile),
      s(:optarg, :keep,
        s(:true))),
    s(:begin,
      s(:lvasgn, :m,
        s(:send,
          s(:const, nil, :File), :read,
          s(:lvar, :makefile))),
      s(:and,
        s(:lvasgn, :s,
          s(:send,
            s(:lvar, :m), :[],
            s(:regexp,
              s(:str, "^CLEANFILES[ \\t]*=[ \\t](.*)"),
              s(:regopt)),
            s(:int, 1))),
        s(:gvasgn, :$cleanfiles,
          s(:send,
            s(:lvar, :s), :split))),
      s(:and,
        s(:lvasgn, :s,
          s(:send,
            s(:lvar, :m), :[],
            s(:regexp,
              s(:str, "^DISTCLEANFILES[ \\t]*=[ \\t](.*)"),
              s(:regopt)),
            s(:int, 1))),
        s(:gvasgn, :$distcleanfiles,
          s(:send,
            s(:lvar, :s), :split))),
      s(:if,
        s(:send,
          s(:begin,
            s(:lvasgn, :target,
              s(:send,
                s(:lvar, :m), :[],
                s(:regexp,
                  s(:str, "^TARGET[ \\t]*=[ \\t]*(\\S*)"),
                  s(:regopt)),
                s(:int, 1)))), :!),
        s(:return,
          s(:lvar, :keep)), nil),
      s(:lvasgn, :installrb,
        s(:hash)),
      s(:block,
        s(:send,
          s(:lvar, :m), :scan,
          s(:regexp,
            s(:str, "^install-rb-default:.*[ \\t](\\S+)(?:[ \\t].*)?\\n\\1:[ \\t]*(\\S+)"),
            s(:regopt))),
        s(:args),
        s(:send,
          s(:lvar, :installrb), :[]=,
          s(:nth_ref, 2),
          s(:nth_ref, 1))),
      s(:lvasgn, :oldrb,
        s(:send,
          s(:send,
            s(:lvar, :installrb), :keys), :sort)),
      s(:lvasgn, :newrb,
        s(:send,
          s(:send,
            s(:block,
              s(:send,
                s(:send, nil, :install_rb,
                  s(:nil),
                  s(:str, "")), :collect),
              s(:args,
                s(:arg, :d),
                s(:restarg, :f)),
              s(:lvar, :f)), :flatten), :sort)),
      s(:if,
        s(:lvasgn, :target_prefix,
          s(:send,
            s(:lvar, :m), :[],
            s(:regexp,
              s(:str, "^target_prefix[ \\t]*=[ \\t]*/(.*)"),
              s(:regopt)),
            s(:int, 1))),
        s(:lvasgn, :target,
          s(:dstr,
            s(:begin,
              s(:lvar, :target_prefix)),
            s(:str, "/"),
            s(:begin,
              s(:lvar, :target)))), nil),
      s(:if,
        s(:send,
          s(:lvar, :oldrb), :==,
          s(:lvar, :newrb)), nil,
        s(:begin,
          s(:if,
            s(:gvar, :$extout),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :newrb), :each),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :installrb), :delete,
                  s(:lvar, :f))),
              s(:if,
                s(:send,
                  s(:lvar, :installrb), :empty?), nil,
                s(:begin,
                  s(:lvasgn, :config,
                    s(:send,
                      s(:const, nil, :CONFIG), :dup)),
                  s(:block,
                    s(:send,
                      s(:send, nil, :install_dirs,
                        s(:lvar, :target_prefix)), :each),
                    s(:args,
                      s(:arg, :var),
                      s(:arg, :val)),
                    s(:send,
                      s(:lvar, :config), :[]=,
                      s(:lvar, :var),
                      s(:lvar, :val))),
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_f,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :installrb), :values), :collect),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:const, nil, :RbConfig), :expand,
                        s(:lvar, :f),
                        s(:lvar, :config))),
                    s(:hash,
                      s(:pair,
                        s(:sym, :verbose),
                        s(:send, nil, :verbose?))))))), nil),
          s(:return,
            s(:false)))),
      s(:lvasgn, :srcs,
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :[],
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:gvar, :$srcdir),
                  s(:dstr,
                    s(:str, "*.{"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :SRC_EXT), :join,
                        s(:str, ","))),
                    s(:str, "}")))), :map),
            s(:args,
              s(:arg, :fn)),
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :fn))), :sort)),
      s(:if,
        s(:send,
          s(:send,
            s(:lvar, :srcs), :empty?), :!),
        s(:begin,
          s(:or,
            s(:lvasgn, :old_srcs,
              s(:send,
                s(:lvar, :m), :[],
                s(:regexp,
                  s(:str, "^ORIG_SRCS[ \\t]*=[ \\t](.*)"),
                  s(:regopt)),
                s(:int, 1))),
            s(:return,
              s(:false))),
          s(:or,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :old_srcs), :split), :sort), :==,
              s(:lvar, :srcs)),
            s(:return,
              s(:false)))), nil),
      s(:gvasgn, :$target,
        s(:lvar, :target)),
      s(:gvasgn, :$extconf_h,
        s(:send,
          s(:lvar, :m), :[],
          s(:regexp,
            s(:str, "^RUBY_EXTCONF_H[ \\t]*=[ \\t]*(\\S+)"),
            s(:regopt)),
          s(:int, 1))),
      s(:if,
        s(:send,
          s(:gvar, :$static), :nil?),
        s(:begin,
          s(:or_asgn,
            s(:gvasgn, :$static),
            s(:or,
              s(:send,
                s(:lvar, :m), :[],
                s(:regexp,
                  s(:str, "^EXTSTATIC[ \\t]*=[ \\t]*(\\S+)"),
                  s(:regopt)),
                s(:int, 1)),
              s(:false))),
          s(:or,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^STATIC_LIB[ \\t]*=[ \\t]*\\S+"),
                s(:regopt)),
              s(:lvar, :m)),
            s(:gvasgn, :$static,
              s(:false)))), nil),
      s(:gvasgn, :$preload,
        s(:send,
          s(:const, nil, :Shellwords), :shellwords,
          s(:or,
            s(:send,
              s(:lvar, :m), :[],
              s(:regexp,
                s(:str, "^preload[ \\t]*=[ \\t]*(.*)"),
                s(:regopt)),
              s(:int, 1)),
            s(:str, "")))),
      s(:if,
        s(:and,
          s(:lvasgn, :dldflags,
            s(:send,
              s(:lvar, :m), :[],
              s(:regexp,
                s(:str, "^dldflags[ \\t]*=[ \\t]*(.*)"),
                s(:regopt)),
              s(:int, 1))),
          s(:send,
            s(:send,
              s(:gvar, :$DLDFLAGS), :include?,
              s(:lvar, :dldflags)), :!)),
        s(:op_asgn,
          s(:gvasgn, :$DLDFLAGS), :+,
          s(:send,
            s(:str, " "), :+,
            s(:lvar, :dldflags))), nil),
      s(:if,
        s(:lvasgn, :s,
          s(:send,
            s(:lvar, :m), :[],
            s(:regexp,
              s(:str, "^LIBS[ \\t]*=[ \\t]*(.*)"),
              s(:regopt)),
            s(:int, 1))),
        s(:begin,
          s(:send,
            s(:lvar, :s), :sub!,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:gvar, :$LIBRUBYARG))),
              s(:str, " *"),
              s(:regopt)),
            s(:str, "")),
          s(:send,
            s(:lvar, :s), :sub!,
            s(:regexp,
              s(:str, " *"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:gvar, :$LIBS))),
              s(:str, "$"),
              s(:regopt)),
            s(:str, "")),
          s(:gvasgn, :$libs,
            s(:lvar, :s))), nil),
      s(:gvasgn, :$objs,
        s(:send,
          s(:begin,
            s(:or,
              s(:send,
                s(:lvar, :m), :[],
                s(:regexp,
                  s(:str, "^OBJS[ \\t]*=[ \\t](.*)"),
                  s(:regopt)),
                s(:int, 1)),
              s(:str, ""))), :split)),
      s(:gvasgn, :$srcs,
        s(:send,
          s(:begin,
            s(:or,
              s(:send,
                s(:lvar, :m), :[],
                s(:regexp,
                  s(:str, "^SRCS[ \\t]*=[ \\t](.*)"),
                  s(:regopt)),
                s(:int, 1)),
              s(:str, ""))), :split)),
      s(:gvasgn, :$LOCAL_LIBS,
        s(:or,
          s(:send,
            s(:lvar, :m), :[],
            s(:regexp,
              s(:str, "^LOCAL_LIBS[ \\t]*=[ \\t]*(.*)"),
              s(:regopt)),
            s(:int, 1)),
          s(:str, ""))),
      s(:gvasgn, :$LIBPATH,
        s(:send,
          s(:send,
            s(:const, nil, :Shellwords), :shellwords,
            s(:or,
              s(:send,
                s(:lvar, :m), :[],
                s(:regexp,
                  s(:str, "^libpath[ \\t]*=[ \\t]*(.*)"),
                  s(:regopt)),
                s(:int, 1)),
              s(:str, ""))), :-,
          s(:array,
            s(:str, "$(libdir)"),
            s(:str, "$(topdir)")))),
      s(:true))),
  s(:def, :extmake,
    s(:args,
      s(:arg, :target)),
    s(:begin,
      s(:if,
        s(:or,
          s(:gvar, :$configure_only),
          s(:send, nil, :verbose?)), nil,
        s(:begin,
          s(:send, nil, :print,
            s(:dstr,
              s(:begin,
                s(:gvar, :$message)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :target)),
              s(:str, "\n"))),
          s(:send,
            s(:gvar, :$stdout), :flush))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :directory?,
          s(:lvar, :target)), nil,
        s(:send,
          s(:const, nil, :FileUtils), :mkpath,
          s(:lvar, :target))),
      s(:kwbegin,
        s(:ensure,
          s(:begin,
            s(:lvasgn, :parent,
              s(:true)),
            s(:lvasgn, :d,
              s(:lvar, :target)),
            s(:until,
              s(:send,
                s(:begin,
                  s(:lvasgn, :d,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :d)))), :==,
                s(:str, ".")),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:dstr,
                    s(:begin,
                      s(:gvar, :$top_srcdir)),
                    s(:str, "/ext/"),
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/extconf.rb"))),
                s(:begin,
                  s(:lvasgn, :parent,
                    s(:begin,
                      s(:rescue,
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "^all:\\s*install"),
                            s(:regopt)),
                          s(:send,
                            s(:const, nil, :IO), :read,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :d)),
                              s(:str, "/Makefile")))),
                        s(:resbody, nil, nil,
                          s(:false)), nil))),
                  s(:break)), nil)),
            s(:lvasgn, :dir,
              s(:send,
                s(:const, nil, :Dir), :pwd)),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :target)), nil,
              s(:send,
                s(:const, nil, :FileUtils), :mkpath,
                s(:lvar, :target))),
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :target)),
            s(:lvasgn, :top_srcdir,
              s(:gvar, :$top_srcdir)),
            s(:lvasgn, :topdir,
              s(:gvar, :$topdir)),
            s(:lvasgn, :hdrdir,
              s(:gvar, :$hdrdir)),
            s(:lvasgn, :prefix,
              s(:send,
                s(:str, "../"), :*,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :target), :count,
                      s(:str, "/")), :+,
                    s(:int, 1))))),
            s(:gvasgn, :$top_srcdir,
              s(:send, nil, :relative_from,
                s(:lvar, :top_srcdir),
                s(:lvar, :prefix))),
            s(:gvasgn, :$hdrdir,
              s(:send, nil, :relative_from,
                s(:lvar, :hdrdir),
                s(:lvar, :prefix))),
            s(:gvasgn, :$topdir,
              s(:send,
                s(:lvar, :prefix), :+,
                s(:gvar, :$topdir))),
            s(:gvasgn, :$target,
              s(:lvar, :target)),
            s(:gvasgn, :$mdir,
              s(:lvar, :target)),
            s(:gvasgn, :$srcdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:gvar, :$top_srcdir),
                s(:str, "ext"),
                s(:gvar, :$mdir))),
            s(:gvasgn, :$preload,
              s(:nil)),
            s(:gvasgn, :$objs,
              s(:array)),
            s(:gvasgn, :$srcs,
              s(:array)),
            s(:send,
              s(:gvar, :$compiled), :[]=,
              s(:lvar, :target),
              s(:false)),
            s(:lvasgn, :makefile,
              s(:str, "./Makefile")),
            s(:lvasgn, :static,
              s(:gvar, :$static)),
            s(:if,
              s(:lvasgn, :noinstall,
                s(:send,
                  s(:const, nil, :File), :fnmatch?,
                  s(:str, "-*"),
                  s(:lvar, :target))),
              s(:gvasgn, :$static,
                s(:nil)), nil),
            s(:lvasgn, :ok,
              s(:and,
                s(:lvar, :parent),
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :makefile)))),
            s(:if,
              s(:and,
                s(:lvar, :parent),
                s(:send,
                  s(:gvar, :$ignore), :!)),
              s(:begin,
                s(:lvasgn, :rbconfig0,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG)),
                s(:lvasgn, :mkconfig0,
                  s(:const, nil, :CONFIG)),
                s(:lvasgn, :rbconfig,
                  s(:hash,
                    s(:pair,
                      s(:str, "hdrdir"),
                      s(:gvar, :$hdrdir)),
                    s(:pair,
                      s(:str, "srcdir"),
                      s(:gvar, :$srcdir)),
                    s(:pair,
                      s(:str, "topdir"),
                      s(:gvar, :$topdir)))),
                s(:lvasgn, :mkconfig,
                  s(:hash,
                    s(:pair,
                      s(:str, "hdrdir"),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:gvar, :$hdrdir), :==,
                            s(:lvar, :top_srcdir))),
                        s(:lvar, :top_srcdir),
                        s(:str, "$(top_srcdir)/include"))),
                    s(:pair,
                      s(:str, "srcdir"),
                      s(:dstr,
                        s(:str, "$(top_srcdir)/ext/"),
                        s(:begin,
                          s(:gvar, :$mdir)))),
                    s(:pair,
                      s(:str, "topdir"),
                      s(:gvar, :$topdir)))),
                s(:block,
                  s(:send,
                    s(:lvar, :rbconfig0), :each_pair),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:or_asgn,
                    s(:send,
                      s(:lvar, :rbconfig), :[],
                      s(:lvar, :key)),
                    s(:send,
                      s(:lvar, :val), :dup))),
                s(:block,
                  s(:send,
                    s(:lvar, :mkconfig0), :each_pair),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :val)),
                  s(:or_asgn,
                    s(:send,
                      s(:lvar, :mkconfig), :[],
                      s(:lvar, :key)),
                    s(:send,
                      s(:lvar, :val), :dup))),
                s(:block,
                  s(:send,
                    s(:const, nil, :RbConfig), :module_eval),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :remove_const,
                      s(:sym, :CONFIG)),
                    s(:send, nil, :const_set,
                      s(:sym, :CONFIG),
                      s(:lvar, :rbconfig)),
                    s(:send, nil, :remove_const,
                      s(:sym, :MAKEFILE_CONFIG)),
                    s(:send, nil, :const_set,
                      s(:sym, :MAKEFILE_CONFIG),
                      s(:lvar, :mkconfig)))),
                s(:block,
                  s(:send,
                    s(:const, nil, :MakeMakefile), :class_eval),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :remove_const,
                      s(:sym, :CONFIG)),
                    s(:send, nil, :const_set,
                      s(:sym, :CONFIG),
                      s(:lvar, :mkconfig)))),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:gvasgn, :$extconf_h,
                          s(:nil)),
                        s(:and_asgn,
                          s(:lvasgn, :ok),
                          s(:send, nil, :extract_makefile,
                            s(:lvar, :makefile))),
                        s(:lvasgn, :old_objs,
                          s(:gvar, :$objs)),
                        s(:lvasgn, :old_cleanfiles,
                          s(:send,
                            s(:gvar, :$distcleanfiles), :|,
                            s(:gvar, :$cleanfiles))),
                        s(:lvasgn, :conf,
                          s(:block,
                            s(:send,
                              s(:array,
                                s(:dstr,
                                  s(:begin,
                                    s(:gvar, :$srcdir)),
                                  s(:str, "/makefile.rb")),
                                s(:dstr,
                                  s(:begin,
                                    s(:gvar, :$srcdir)),
                                  s(:str, "/extconf.rb"))), :find),
                            s(:args,
                              s(:arg, :f)),
                            s(:send,
                              s(:const, nil, :File), :exist?,
                              s(:lvar, :f)))),
                        s(:if,
                          s(:begin,
                            s(:or,
                              s(:or,
                                s(:or,
                                  s(:send,
                                    s(:lvar, :ok), :!),
                                  s(:begin,
                                    s(:and,
                                      s(:gvar, :$extconf_h),
                                      s(:send,
                                        s(:send,
                                          s(:const, nil, :File), :exist?,
                                          s(:gvar, :$extconf_h)), :!)))),
                                s(:send,
                                  s(:begin,
                                    s(:lvasgn, :t,
                                      s(:send, nil, :modified?,
                                        s(:lvar, :makefile),
                                        s(:const, nil, :MTIMES)))), :!)),
                              s(:block,
                                s(:send,
                                  s(:array,
                                    s(:lvar, :conf),
                                    s(:dstr,
                                      s(:begin,
                                        s(:gvar, :$srcdir)),
                                      s(:str, "/depend"))), :any?),
                                s(:args,
                                  s(:arg, :f)),
                                s(:send, nil, :modified?,
                                  s(:lvar, :f),
                                  s(:array,
                                    s(:lvar, :t)))))),
                          s(:begin,
                            s(:lvasgn, :ok,
                              s(:false)),
                            s(:if,
                              s(:gvar, :$configure_only),
                              s(:begin,
                                s(:if,
                                  s(:send, nil, :verbose?),
                                  s(:if,
                                    s(:lvar, :conf),
                                    s(:send, nil, :print,
                                      s(:dstr,
                                        s(:begin,
                                          s(:lvar, :conf)),
                                        s(:str, "\n"))), nil),
                                  s(:send, nil, :print,
                                    s(:dstr,
                                      s(:begin,
                                        s(:gvar, :$message)),
                                      s(:str, " "),
                                      s(:begin,
                                        s(:lvar, :target)),
                                      s(:str, "\n")))),
                                s(:send,
                                  s(:gvar, :$stdout), :flush)), nil),
                            s(:send, nil, :init_mkmf),
                            s(:send,
                              s(:const, nil, :Logging), :logfile,
                              s(:str, "mkmf.log")),
                            s(:send, nil, :rm_f,
                              s(:lvar, :makefile)),
                            s(:if,
                              s(:lvar, :conf),
                              s(:block,
                                s(:send,
                                  s(:const, nil, :Logging), :open),
                                s(:args),
                                s(:begin,
                                  s(:if,
                                    s(:send, nil, :verbose?), nil,
                                    s(:send,
                                      s(:gvar, :$stderr), :reopen,
                                      s(:send,
                                        s(:gvar, :$stdout), :reopen,
                                        s(:ivar, :@null)))),
                                  s(:send, nil, :load,
                                    s(:gvasgn, :$0,
                                      s(:lvar, :conf))))),
                              s(:send, nil, :create_makefile,
                                s(:lvar, :target))),
                            s(:if,
                              s(:gvar, :$static),
                              s(:send,
                                s(:gvar, :$defs), :<<,
                                s(:str, "-DRUBY_EXPORT")), nil),
                            s(:lvasgn, :ok,
                              s(:send,
                                s(:const, nil, :File), :exist?,
                                s(:lvar, :makefile)))), nil)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :SystemExit)), nil, nil),
                      s(:resbody, nil,
                        s(:lvasgn, :error),
                        s(:lvasgn, :ok,
                          s(:false))), nil),
                    s(:begin,
                      s(:send, nil, :rm_f,
                        s(:str, "conftest*")),
                      s(:gvasgn, :$0,
                        s(:gvar, :$PROGRAM_NAME)))))), nil),
            s(:and_asgn,
              s(:lvasgn, :ok),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :makefile)),
                s(:args,
                  s(:arg, :f)),
                s(:and,
                  s(:lvasgn, :s,
                    s(:send,
                      s(:lvar, :f), :gets)),
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :[],
                      s(:const, nil, :DUMMY_SIGNATURE)), :!)))),
            s(:if,
              s(:send, nil, :block_given?),
              s(:lvasgn, :ok,
                s(:yield,
                  s(:lvar, :ok))), nil),
            s(:if,
              s(:lvar, :ok), nil,
              s(:begin,
                s(:block,
                  s(:send, nil, :atomic_write_open,
                    s(:lvar, :makefile)),
                  s(:args,
                    s(:arg, :f)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :f), :puts,
                      s(:send,
                        s(:str, "# "), :+,
                        s(:const, nil, :DUMMY_SIGNATURE))),
                    s(:send,
                      s(:lvar, :f), :print,
                      s(:splat,
                        s(:send, nil, :dummy_makefile,
                          s(:send,
                            s(:const, nil, :CONFIG), :[],
                            s(:str, "srcdir"))))))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :error), :!),
                    s(:send,
                      s(:lvar, :target), :start_with?,
                      s(:str, "-"))),
                  s(:return,
                    s(:true)), nil),
                s(:lvasgn, :mess,
                  s(:dstr,
                    s(:str, "Failed to configure "),
                    s(:begin,
                      s(:lvar, :target)),
                    s(:str, ". It will not be installed.\n"))),
                s(:if,
                  s(:lvar, :error),
                  s(:lvasgn, :mess,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :error)),
                      s(:str, "\n"),
                      s(:begin,
                        s(:lvar, :mess)))), nil),
                s(:if,
                  s(:send,
                    s(:const, nil, :Logging), :log_opened?),
                  s(:send,
                    s(:const, nil, :Logging), :message,
                    s(:lvar, :mess)), nil),
                s(:send, nil, :print,
                  s(:lvar, :mess)),
                s(:send,
                  s(:gvar, :$stdout), :flush),
                s(:return,
                  s(:true)))),
            s(:lvasgn, :args,
              s(:send, nil, :sysquote,
                s(:gvar, :$mflags))),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:gvar, :$destdir), :to_s), :empty?),
                s(:send,
                  s(:gvar, :$mflags), :defined?,
                  s(:str, "DESTDIR"))), nil,
              s(:op_asgn,
                s(:lvasgn, :args), :+,
                s(:array,
                  s(:send, nil, :sysquote,
                    s(:send,
                      s(:str, "DESTDIR="), :+,
                      s(:send, nil, :relative_from,
                        s(:gvar, :$destdir),
                        s(:send,
                          s(:str, "../"), :+,
                          s(:lvar, :prefix)))))))),
            s(:if,
              s(:and,
                s(:and,
                  s(:and,
                    s(:gvar, :$static),
                    s(:lvar, :ok)),
                  s(:send,
                    s(:send,
                      s(:gvar, :$objs), :empty?), :!)),
                s(:send,
                  s(:lvar, :noinstall), :!)),
              s(:begin,
                s(:if,
                  s(:gvar, :$clean), nil,
                  s(:op_asgn,
                    s(:lvasgn, :args), :+,
                    s(:array,
                      s(:str, "static")))),
                s(:send,
                  s(:gvar, :$extlist), :push,
                  s(:array,
                    s(:gvar, :$static),
                    s(:lvar, :target),
                    s(:gvar, :$target),
                    s(:gvar, :$preload)))), nil),
            s(:send,
              s(:const, nil, :FileUtils), :rm_f,
              s(:send,
                s(:send,
                  s(:lvar, :old_cleanfiles), :-,
                  s(:gvar, :$distcleanfiles)), :-,
                s(:gvar, :$cleanfiles))),
            s(:send,
              s(:const, nil, :FileUtils), :rm_f,
              s(:send,
                s(:lvar, :old_objs), :-,
                s(:gvar, :$objs))),
            s(:if,
              s(:or,
                s(:gvar, :$configure_only),
                s(:send, nil, :system,
                  s(:gvar, :$make),
                  s(:splat,
                    s(:lvar, :args)))), nil,
              s(:or,
                s(:or,
                  s(:gvar, :$ignore),
                  s(:gvar, :$continue)),
                s(:return,
                  s(:false)))),
            s(:send,
              s(:gvar, :$compiled), :[]=,
              s(:lvar, :target),
              s(:true)),
            s(:if,
              s(:gvar, :$clean),
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :rm_f,
                  s(:str, "mkmf.log")),
                s(:if,
                  s(:send,
                    s(:gvar, :$clean), :!=,
                    s(:true)),
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_f,
                    s(:array,
                      s(:lvar, :makefile),
                      s(:or,
                        s(:gvar, :$extconf_h),
                        s(:str, "extconf.h")))), nil)), nil),
            s(:if,
              s(:gvar, :$static),
              s(:begin,
                s(:or_asgn,
                  s(:gvasgn, :$extflags),
                  s(:str, "")),
                s(:or_asgn,
                  s(:gvasgn, :$extlibs),
                  s(:array)),
                s(:or_asgn,
                  s(:gvasgn, :$extpath),
                  s(:array)),
                s(:if,
                  s(:gvar, :$mswin), nil,
                  s(:gvasgn, :$extflags,
                    s(:send,
                      s(:send,
                        s(:send, nil, :split_libs,
                          s(:gvar, :$extflags),
                          s(:gvar, :$DLDFLAGS),
                          s(:gvar, :$LDFLAGS)), :uniq), :join,
                      s(:str, " ")))),
                s(:gvasgn, :$extlibs,
                  s(:send, nil, :merge_libs,
                    s(:gvar, :$extlibs),
                    s(:block,
                      s(:send,
                        s(:send, nil, :split_libs,
                          s(:gvar, :$libs),
                          s(:gvar, :$LOCAL_LIBS)), :map),
                      s(:args,
                        s(:arg, :lib)),
                      s(:send,
                        s(:lvar, :lib), :sub,
                        s(:regexp,
                          s(:str, "\\A\\./"),
                          s(:regopt)),
                        s(:dstr,
                          s(:str, "ext/"),
                          s(:begin,
                            s(:lvar, :target)),
                          s(:str, "/")))))),
                s(:op_asgn,
                  s(:gvasgn, :$extpath), :|,
                  s(:gvar, :$LIBPATH))), nil)),
          s(:begin,
            s(:send,
              s(:const, nil, :Logging), :log_close),
            s(:if,
              s(:lvar, :rbconfig0),
              s(:block,
                s(:send,
                  s(:const, nil, :RbConfig), :module_eval),
                s(:args),
                s(:begin,
                  s(:send, nil, :remove_const,
                    s(:sym, :CONFIG)),
                  s(:send, nil, :const_set,
                    s(:sym, :CONFIG),
                    s(:lvar, :rbconfig0)),
                  s(:send, nil, :remove_const,
                    s(:sym, :MAKEFILE_CONFIG)),
                  s(:send, nil, :const_set,
                    s(:sym, :MAKEFILE_CONFIG),
                    s(:lvar, :mkconfig0)))), nil),
            s(:if,
              s(:lvar, :mkconfig0),
              s(:block,
                s(:send,
                  s(:const, nil, :MakeMakefile), :class_eval),
                s(:args),
                s(:begin,
                  s(:send, nil, :remove_const,
                    s(:sym, :CONFIG)),
                  s(:send, nil, :const_set,
                    s(:sym, :CONFIG),
                    s(:lvar, :mkconfig0)))), nil),
            s(:gvasgn, :$top_srcdir,
              s(:lvar, :top_srcdir)),
            s(:gvasgn, :$topdir,
              s(:lvar, :topdir)),
            s(:gvasgn, :$hdrdir,
              s(:lvar, :hdrdir)),
            s(:gvasgn, :$static,
              s(:lvar, :static)),
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :dir))))),
      s(:while_post,
        s(:true),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send,
                s(:const, nil, :Dir), :rmdir,
                s(:lvar, :target)),
              s(:lvasgn, :target,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :target)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:break)), nil))),
      s(:true))),
  s(:def, :compiled?,
    s(:args,
      s(:arg, :target)),
    s(:send,
      s(:gvar, :$compiled), :[],
      s(:lvar, :target))),
  s(:def, :parse_args,
    s(:args),
    s(:begin,
      s(:gvasgn, :$mflags,
        s(:array)),
      s(:gvasgn, :$makeflags,
        s(:array)),
      s(:or_asgn,
        s(:gvasgn, :$optparser),
        s(:block,
          s(:send,
            s(:const, nil, :OptionParser), :new),
          s(:args,
            s(:arg, :opts)),
          s(:begin,
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "-n")),
              s(:args),
              s(:gvasgn, :$dryrun,
                s(:true))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--[no-]extension [EXTS]"),
                s(:const, nil, :Array)),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$extension,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :v), :==,
                      s(:false)),
                    s(:array),
                    s(:lvar, :v))))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--[no-]extstatic [STATIC]"),
                s(:const, nil, :Array)),
              s(:args,
                s(:arg, :v)),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:gvasgn, :$extstatic,
                      s(:lvar, :v))), :==,
                  s(:false)),
                s(:gvasgn, :$extstatic,
                  s(:array)),
                s(:if,
                  s(:lvar, :v),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:gvar, :$extstatic), :delete,
                        s(:str, "static")),
                      s(:gvasgn, :$force_static,
                        s(:true)), nil),
                    s(:if,
                      s(:send,
                        s(:gvar, :$extstatic), :empty?),
                      s(:gvasgn, :$extstatic,
                        s(:nil)), nil)), nil))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--dest-dir=DIR")),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$destdir,
                s(:lvar, :v))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--extout=DIR")),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$extout,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :v), :empty?), nil,
                    s(:lvar, :v))))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--make=MAKE")),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$make,
                s(:or,
                  s(:lvar, :v),
                  s(:str, "make")))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--make-flags=FLAGS"),
                s(:str, "--mflags"),
                s(:const, nil, :Shellwords)),
              s(:args,
                s(:arg, :v)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :v), :grep,
                    s(:regexp,
                      s(:str, "\\A([-\\w]+)=(.*)"),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:gvar, :$configure_args), :[]=,
                    s(:dstr,
                      s(:str, "--"),
                      s(:begin,
                        s(:nth_ref, 1))),
                    s(:nth_ref, 2))),
                s(:if,
                  s(:lvasgn, :arg,
                    s(:send,
                      s(:lvar, :v), :first)),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\A[^-][^=]*\\Z"),
                        s(:regopt)),
                      s(:lvar, :arg)),
                    s(:send,
                      s(:lvar, :arg), :insert,
                      s(:int, 0),
                      s(:str, "-")), nil), nil),
                s(:send,
                  s(:gvar, :$makeflags), :concat,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :v), :reject),
                      s(:args,
                        s(:arg, :arg2)),
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "\\AMINIRUBY="),
                          s(:regopt)),
                        s(:lvar, :arg2))), :quote)),
                s(:send,
                  s(:gvar, :$mflags), :concat,
                  s(:lvar, :v)))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--message [MESSAGE]"),
                s(:const, nil, :String)),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$message,
                s(:lvar, :v))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--command-output=FILE"),
                s(:const, nil, :String)),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$command_output,
                s(:lvar, :v))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--gnumake=yes|no"),
                s(:true)),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$gnumake,
                s(:lvar, :v))),
            s(:block,
              s(:send,
                s(:lvar, :opts), :on,
                s(:str, "--extflags=FLAGS")),
              s(:args,
                s(:arg, :v)),
              s(:gvasgn, :$extflags,
                s(:or,
                  s(:lvar, :v),
                  s(:str, ""))))))),
      s(:kwbegin,
        s(:rescue,
          s(:send,
            s(:gvar, :$optparser), :parse!,
            s(:const, nil, :ARGV)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :OptionParser), :InvalidOption)),
            s(:lvasgn, :e),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^--"),
                    s(:regopt)),
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :args), :[],
                    s(:int, 0))),
                s(:retry), nil),
              s(:send,
                s(:gvar, :$optparser), :warn,
                s(:lvar, :e)),
              s(:send, nil, :abort,
                s(:send,
                  s(:gvar, :$optparser), :to_s)))), nil)),
      s(:or_asgn,
        s(:gvasgn, :$destdir),
        s(:str, "")),
      s(:masgn,
        s(:mlhs,
          s(:gvasgn, :$make),
          s(:splat,
            s(:lvasgn, :rest))),
        s(:send,
          s(:const, nil, :Shellwords), :shellwords,
          s(:gvar, :$make))),
      s(:if,
        s(:send,
          s(:lvar, :rest), :empty?), nil,
        s(:send,
          s(:gvar, :$mflags), :unshift,
          s(:splat,
            s(:lvar, :rest)))),
      s(:defs,
        s(:gvar, :$mflags), :set?,
        s(:args,
          s(:arg, :flag)),
        s(:begin,
          s(:block,
            s(:send, nil, :grep,
              s(:regexp,
                s(:str, "\\A-(?!-).*"),
                s(:begin,
                  s(:send,
                    s(:lvar, :flag), :chr)),
                s(:regopt, :i))),
            s(:args),
            s(:return,
              s(:true))),
          s(:false))),
      s(:defs,
        s(:gvar, :$mflags), :defined?,
        s(:args,
          s(:arg, :var)),
        s(:begin,
          s(:block,
            s(:send, nil, :grep,
              s(:regexp,
                s(:str, "\\A"),
                s(:begin,
                  s(:lvar, :var)),
                s(:str, "=(.*)"),
                s(:regopt))),
            s(:args),
            s(:return,
              s(:nth_ref, 1))),
          s(:false))),
      s(:if,
        s(:send,
          s(:gvar, :$mflags), :set?,
          s(:str, "n")),
        s(:gvasgn, :$dryrun,
          s(:true)),
        s(:if,
          s(:gvar, :$dryrun),
          s(:send,
            s(:gvar, :$mflags), :unshift,
            s(:str, "-n")), nil)),
      s(:gvasgn, :$continue,
        s(:send,
          s(:gvar, :$mflags), :set?,
          s(:str, "k"))),
      s(:if,
        s(:gvar, :$extout),
        s(:begin,
          s(:gvasgn, :$extout,
            s(:send,
              s(:str, "$(topdir)/"), :+,
              s(:gvar, :$extout))),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "extout"),
            s(:send,
              s(:const, nil, :CONFIG), :[]=,
              s(:str, "extout"),
              s(:gvar, :$extout))),
          s(:gvasgn, :$extout_prefix,
            s(:if,
              s(:gvar, :$extout),
              s(:str, "$(extout)$(target_prefix)/"),
              s(:str, ""))),
          s(:send,
            s(:send,
              s(:gvar, :$mflags), :<<,
              s(:dstr,
                s(:str, "extout="),
                s(:gvar, :$extout))), :<<,
            s(:dstr,
              s(:str, "extout_prefix="),
              s(:gvar, :$extout_prefix)))), nil))),
  s(:send, nil, :parse_args),
  s(:if,
    s(:and,
      s(:lvasgn, :target,
        s(:send,
          s(:const, nil, :ARGV), :shift)),
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "^[a-z-]+$"),
          s(:regopt)),
        s(:lvar, :target))),
    s(:begin,
      s(:send,
        s(:gvar, :$mflags), :push,
        s(:lvar, :target)),
      s(:case,
        s(:lvar, :target),
        s(:when,
          s(:regexp,
            s(:str, "^(dist|real)?(clean)$"),
            s(:regopt)),
          s(:begin,
            s(:lvasgn, :target,
              s(:nth_ref, 2)),
            s(:or_asgn,
              s(:gvasgn, :$ignore),
              s(:true)),
            s(:gvasgn, :$clean,
              s(:if,
                s(:nth_ref, 1),
                s(:send,
                  s(:nth_ref, 1), :[],
                  s(:int, 0)),
                s(:true))))),
        s(:when,
          s(:regexp,
            s(:str, "^install\\b"),
            s(:regopt)),
          s(:begin,
            s(:gvasgn, :$install,
              s(:true)),
            s(:or_asgn,
              s(:gvasgn, :$ignore),
              s(:true)),
            s(:if,
              s(:gvar, :$dryrun),
              s(:send,
                s(:gvar, :$mflags), :unshift,
                s(:str, "INSTALL_PROG=install -c -p -m 0755"),
                s(:str, "INSTALL_DATA=install -c -p -m 0644"),
                s(:str, "MAKEDIRS=mkdir -p")), nil))),
        s(:when,
          s(:regexp,
            s(:str, "configure"),
            s(:regopt)),
          s(:gvasgn, :$configure_only,
            s(:true))), nil)), nil),
  s(:if,
    s(:gvar, :$message), nil,
    s(:if,
      s(:lvar, :target),
      s(:gvasgn, :$message,
        s(:send,
          s(:send,
            s(:lvar, :target), :sub,
            s(:regexp,
              s(:str, "^(\\w+?)e?\\b"),
              s(:regopt)),
            s(:str, "\\1ing")), :tr,
          s(:str, "-"),
          s(:str, " "))),
      s(:gvasgn, :$message,
        s(:str, "compiling")))),
  s(:casgn, nil, :EXEEXT,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "EXEEXT"))),
  s(:if,
    s(:const, nil, :CROSS_COMPILING),
    s(:gvasgn, :$ruby,
      s(:or,
        s(:send,
          s(:gvar, :$mflags), :defined?,
          s(:str, "MINIRUBY")),
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "MINIRUBY")))),
    s(:if,
      s(:lvasgn, :sep,
        s(:send, nil, :config_string,
          s(:str, "BUILD_FILE_SEPARATOR"))),
      s(:gvasgn, :$ruby,
        s(:send,
          s(:dstr,
            s(:str, "$(topdir:/="),
            s(:begin,
              s(:lvar, :sep)),
            s(:str, ")"),
            s(:begin,
              s(:lvar, :sep)),
            s(:str, "miniruby")), :+,
          s(:const, nil, :EXEEXT))),
      s(:gvasgn, :$ruby,
        s(:send,
          s(:str, "$(topdir)/miniruby"), :+,
          s(:const, nil, :EXEEXT))))),
  s(:send,
    s(:gvar, :$ruby), :<<,
    s(:str, " -I'$(topdir)'")),
  s(:if,
    s(:const, nil, :CROSS_COMPILING), nil,
    s(:begin,
      s(:send,
        s(:gvar, :$ruby), :<<,
        s(:str, " -I'$(top_srcdir)/lib'")),
      s(:if,
        s(:gvar, :$extout),
        s(:send,
          s(:gvar, :$ruby), :<<,
          s(:str, " -I'$(extout)/$(arch)' -I'$(extout)/common'")), nil),
      s(:send,
        s(:const, nil, :ENV), :[]=,
        s(:str, "RUBYLIB"),
        s(:str, "-")))),
  s(:send,
    s(:gvar, :$mflags), :<<,
    s(:dstr,
      s(:str, "ruby="),
      s(:gvar, :$ruby))),
  s(:casgn, nil, :MTIMES,
    s(:block,
      s(:send,
        s(:array,
          s(:str, "(string)"),
          s(:str, "rbconfig.rb"),
          s(:send,
            s(:lvar, :srcdir), :+,
            s(:str, "/lib/mkmf.rb"))), :collect),
      s(:args,
        s(:arg, :f)),
      s(:send,
        s(:const, nil, :File), :mtime,
        s(:lvar, :f)))),
  s(:gvasgn, :$static_ext,
    s(:hash)),
  s(:if,
    s(:gvar, :$extstatic),
    s(:block,
      s(:send,
        s(:gvar, :$extstatic), :each),
      s(:args,
        s(:arg, :t)),
      s(:begin,
        s(:lvasgn, :target,
          s(:lvar, :t)),
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :File), :FNM_SYSCASE), :nonzero?),
          s(:lvasgn, :target,
            s(:send,
              s(:lvar, :target), :downcase)), nil),
        s(:send,
          s(:gvar, :$static_ext), :[]=,
          s(:lvar, :target),
          s(:send,
            s(:gvar, :$static_ext), :size)))), nil),
  s(:if,
    s(:gvar, :$extstatic), nil,
    s(:for,
      s(:lvasgn, :dir),
      s(:array,
        s(:str, "ext"),
        s(:send,
          s(:const, nil, :File), :join,
          s(:gvar, :$top_srcdir),
          s(:str, "ext"))),
      s(:begin,
        s(:lvasgn, :setup,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :dir),
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "setup")))),
        s(:if,
          s(:send,
            s(:const, nil, :File), :file?,
            s(:lvar, :setup)),
          s(:begin,
            s(:lvasgn, :f,
              s(:send, nil, :open,
                s(:lvar, :setup))),
            s(:while,
              s(:lvasgn, :line,
                s(:send,
                  s(:lvar, :f), :gets)),
              s(:begin,
                s(:send,
                  s(:lvar, :line), :chomp!),
                s(:send,
                  s(:lvar, :line), :sub!,
                  s(:regexp,
                    s(:str, "#.*$"),
                    s(:regopt)),
                  s(:str, "")),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "^\\s*$"),
                      s(:regopt)),
                    s(:lvar, :line)),
                  s(:next), nil),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :target),
                    s(:lvasgn, :opt)),
                  s(:send,
                    s(:lvar, :line), :split,
                    s(:nil),
                    s(:int, 3))),
                s(:if,
                  s(:send,
                    s(:lvar, :target), :==,
                    s(:str, "option")),
                  s(:begin,
                    s(:case,
                      s(:lvar, :opt),
                      s(:when,
                        s(:str, "nodynamic"),
                        s(:gvasgn, :$nodynamic,
                          s(:true))), nil),
                    s(:next)), nil),
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :File), :FNM_SYSCASE), :nonzero?),
                  s(:lvasgn, :target,
                    s(:send,
                      s(:lvar, :target), :downcase)), nil),
                s(:send,
                  s(:gvar, :$static_ext), :[]=,
                  s(:lvar, :target),
                  s(:send,
                    s(:gvar, :$static_ext), :size)))),
            s(:send,
              s(:const, nil, :MTIMES), :<<,
              s(:send,
                s(:lvar, :f), :mtime)),
            s(:gvasgn, :$setup,
              s(:lvar, :setup)),
            s(:send,
              s(:lvar, :f), :close),
            s(:break)), nil)))),
  s(:lvasgn, :ext_prefix,
    s(:dstr,
      s(:begin,
        s(:gvar, :$top_srcdir)),
      s(:str, "/ext"))),
  s(:lvasgn, :exts,
    s(:block,
      s(:send,
        s(:block,
          s(:send,
            s(:gvar, :$static_ext), :sort_by),
          s(:args,
            s(:arg, :t),
            s(:arg, :i)),
          s(:lvar, :i)), :collect),
      s(:args,
        s(:arg, :t),
        s(:arg, :i)),
      s(:lvar, :t))),
  s(:lvasgn, :default_exclude_exts,
    s(:case, nil,
      s(:when,
        s(:gvar, :$cygwin),
        s(:array)),
      s(:when,
        s(:gvar, :$mswin),
        s(:gvar, :$mingw),
        s(:array,
          s(:str, "pty"),
          s(:str, "syslog"))),
      s(:array,
        s(:str, "*win32*")))),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :withes),
      s(:lvasgn, :withouts)),
    s(:block,
      s(:send,
        s(:array,
          s(:array,
            s(:str, "--with"),
            s(:nil)),
          s(:array,
            s(:str, "--without"),
            s(:lvar, :default_exclude_exts))), :collect),
      s(:args,
        s(:arg, :w),
        s(:arg, :d)),
      s(:if,
        s(:send,
          s(:send,
            s(:begin,
              s(:lvasgn, :w,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "-extensions"),
                      s(:str, "-ext")), :collect),
                  s(:args,
                    s(:arg, :o)),
                  s(:send, nil, :arg_config,
                    s(:send,
                      s(:lvar, :w), :+,
                      s(:lvar, :o)))))), :any?), :!),
        s(:if,
          s(:lvar, :d),
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :c1)),
            s(:send,
              s(:lvar, :d), :any?,
              s(:block_pass,
                s(:lvar, :c1)))),
          s(:block,
            s(:send, nil, :proc),
            s(:args),
            s(:true))),
        s(:if,
          s(:send,
            s(:begin,
              s(:lvasgn, :w,
                s(:send,
                  s(:lvar, :w), :grep,
                  s(:const, nil, :String)))), :empty?),
          s(:block,
            s(:send, nil, :proc),
            s(:args),
            s(:true)),
          s(:begin,
            s(:lvasgn, :w,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :w), :collect),
                  s(:args,
                    s(:arg, :o)),
                  s(:send,
                    s(:lvar, :o), :split,
                    s(:regexp,
                      s(:str, ","),
                      s(:regopt)))), :flatten)),
            s(:if,
              s(:lvar, :d),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :w), :collect!),
                  s(:args,
                    s(:arg, :o)),
                  s(:if,
                    s(:send,
                      s(:lvar, :o), :==,
                      s(:str, "+")),
                    s(:lvar, :d),
                    s(:lvar, :o))), :flatten!), nil),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :c1)),
              s(:send,
                s(:lvar, :w), :any?,
                s(:block_pass,
                  s(:lvar, :c1))))))))),
  s(:lvasgn, :cond,
    s(:block,
      s(:send, nil, :proc),
      s(:args,
        s(:arg, :ext),
        s(:restarg)),
      s(:begin,
        s(:lvasgn, :cond1,
          s(:block,
            s(:send, nil, :proc),
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:const, nil, :File), :fnmatch,
              s(:lvar, :n),
              s(:lvar, :ext)))),
        s(:and,
          s(:send,
            s(:lvar, :withes), :call,
            s(:lvar, :cond1)),
          s(:send,
            s(:send,
              s(:lvar, :withouts), :call,
              s(:lvar, :cond1)), :!))))),
  s(:block,
    s(:send,
      s(:begin,
        s(:or,
          s(:gvar, :$extension),
          s(:array,
            s(:str, "*")))), :each),
    s(:args,
      s(:arg, :e)),
    s(:begin,
      s(:lvasgn, :e,
        s(:send,
          s(:lvar, :e), :sub,
          s(:regexp,
            s(:str, "\\A(?:\\./)+"),
            s(:regopt)),
          s(:str, ""))),
      s(:op_asgn,
        s(:lvasgn, :exts), :|,
        s(:send,
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :ext_prefix)),
                      s(:str, "/"),
                      s(:begin,
                        s(:lvar, :e)),
                      s(:str, "/**/extconf.rb"))), :collect),
                s(:args,
                  s(:arg, :d)),
                s(:begin,
                  s(:lvasgn, :d,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :d))),
                  s(:send,
                    s(:lvar, :d), :slice!,
                    s(:int, 0),
                    s(:send,
                      s(:send,
                        s(:lvar, :ext_prefix), :length), :+,
                      s(:int, 1))),
                  s(:lvar, :d))), :find_all),
            s(:args,
              s(:arg, :ext)),
            s(:send, nil, :with_config,
              s(:lvar, :ext),
              s(:block_pass,
                s(:lvar, :cond)))), :sort)),
      s(:if,
        s(:and,
          s(:send,
            s(:gvar, :$LIBRUBYARG_SHARED), :empty?),
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "EXTSTATIC")), :==,
            s(:str, "static"))),
        s(:block,
          s(:send,
            s(:lvar, :exts), :delete_if),
          s(:args,
            s(:arg, :d)),
          s(:send,
            s(:const, nil, :File), :fnmatch?,
            s(:str, "-*"),
            s(:lvar, :d))), nil))),
  s(:if,
    s(:gvar, :$extout),
    s(:begin,
      s(:lvasgn, :extout,
        s(:send,
          s(:const, nil, :RbConfig), :expand,
          s(:dstr,
            s(:begin,
              s(:gvar, :$extout))),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :merge,
            s(:hash,
              s(:pair,
                s(:str, "topdir"),
                s(:gvar, :$topdir)))))),
      s(:if,
        s(:gvar, :$ignore), nil,
        s(:send,
          s(:const, nil, :FileUtils), :mkpath,
          s(:lvar, :extout)))), nil),
  s(:lvasgn, :dir,
    s(:send,
      s(:const, nil, :Dir), :pwd)),
  s(:send,
    s(:const, nil, :FileUtils), :makedirs,
    s(:str, "ext")),
  s(:send,
    s(:const, nil, :Dir), :chdir,
    s(:str, "ext")),
  s(:lvasgn, :hdrdir,
    s(:gvar, :$hdrdir)),
  s(:gvasgn, :$hdrdir,
    s(:send,
      s(:begin,
        s(:gvasgn, :$top_srcdir,
          s(:send, nil, :relative_from,
            s(:lvar, :srcdir),
            s(:gvasgn, :$topdir,
              s(:str, ".."))))), :+,
      s(:str, "/include"))),
  s(:block,
    s(:send,
      s(:lvar, :exts), :each),
    s(:args,
      s(:arg, :d)),
    s(:begin,
      s(:gvasgn, :$static,
        s(:if,
          s(:gvar, :$force_static),
          s(:true),
          s(:send,
            s(:gvar, :$static_ext), :[],
            s(:lvar, :d)))),
      s(:if,
        s(:or,
          s(:or,
            s(:gvar, :$ignore),
            s(:send,
              s(:gvar, :$nodynamic), :!)),
          s(:gvar, :$static)),
        s(:or,
          s(:send, nil, :extmake,
            s(:lvar, :d)),
          s(:send, nil, :abort)), nil))),
  s(:gvasgn, :$top_srcdir,
    s(:lvar, :srcdir)),
  s(:gvasgn, :$topdir,
    s(:str, ".")),
  s(:gvasgn, :$hdrdir,
    s(:lvar, :hdrdir)),
  s(:lvasgn, :extinit,
    s(:send,
      s(:block,
        s(:send,
          s(:const, nil, :Struct), :new,
          s(:sym, :c),
          s(:sym, :o)),
        s(:args),
        s(:def, :initialize,
          s(:args,
            s(:arg, :src)),
          s(:super,
            s(:dstr,
              s(:begin,
                s(:lvar, :src)),
              s(:str, ".c")),
            s(:dstr,
              s(:begin,
                s(:lvar, :src)),
              s(:str, "."),
              s(:begin,
                s(:gvar, :$OBJEXT)))))), :new,
      s(:str, "extinit"))),
  s(:if,
    s(:gvar, :$ignore),
    s(:begin,
      s(:if,
        s(:gvar, :$clean),
        s(:send,
          s(:const, nil, :FileUtils), :rm_f,
          s(:send,
            s(:lvar, :extinit), :to_a)), nil),
      s(:send,
        s(:const, nil, :Dir), :chdir,
        s(:str, "..")),
      s(:if,
        s(:gvar, :$clean),
        s(:begin,
          s(:rescue,
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:str, "ext")),
            s(:resbody, nil, nil,
              s(:nil)), nil),
          s(:if,
            s(:gvar, :$extout),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :rm_rf,
                s(:array,
                  s(:send,
                    s(:lvar, :extout), :+,
                    s(:str, "/common")),
                  s(:send,
                    s(:lvar, :extout), :+,
                    s(:str, "/include/ruby")),
                  s(:send,
                    s(:lvar, :extout), :+,
                    s(:str, "/rdoc")))),
              s(:send,
                s(:const, nil, :FileUtils), :rm_rf,
                s(:send,
                  s(:send,
                    s(:lvar, :extout), :+,
                    s(:str, "/")), :+,
                  s(:send,
                    s(:const, nil, :CONFIG), :[],
                    s(:str, "arch")))),
              s(:if,
                s(:send,
                  s(:gvar, :$clean), :!=,
                  s(:true)),
                s(:begin,
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_rf,
                    s(:send,
                      s(:send,
                        s(:lvar, :extout), :+,
                        s(:str, "/include/")), :+,
                      s(:send,
                        s(:const, nil, :CONFIG), :[],
                        s(:str, "arch")))),
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_f,
                    s(:or,
                      s(:or,
                        s(:send,
                          s(:gvar, :$mflags), :defined?,
                          s(:str, "INSTALLED_LIST")),
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "INSTALLED_LIST"))),
                      s(:str, ".installed.list"))),
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Dir), :rmdir,
                      s(:send,
                        s(:lvar, :extout), :+,
                        s(:str, "/include"))),
                    s(:resbody, nil, nil,
                      s(:nil)), nil),
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Dir), :rmdir,
                      s(:lvar, :extout)),
                    s(:resbody, nil, nil,
                      s(:nil)), nil)), nil)), nil)), nil),
      s(:send, nil, :exit)), nil),
  s(:or_asgn,
    s(:gvasgn, :$extinit),
    s(:str, "")),
  s(:or_asgn,
    s(:gvasgn, :$extobjs),
    s(:array)),
  s(:or_asgn,
    s(:gvasgn, :$extpath),
    s(:array)),
  s(:or_asgn,
    s(:gvasgn, :$extflags),
    s(:str, "")),
  s(:or_asgn,
    s(:gvasgn, :$extlibs),
    s(:array)),
  s(:if,
    s(:send,
      s(:gvar, :$extlist), :empty?),
    s(:send,
      s(:const, nil, :FileUtils), :rm_f,
      s(:send,
        s(:lvar, :extinit), :to_a)),
    s(:begin,
      s(:if,
        s(:send,
          s(:gvar, :$extinit), :empty?), nil,
        s(:send,
          s(:gvar, :$extinit), :<<,
          s(:str, "\n"))),
      s(:lvasgn, :list,
        s(:send,
          s(:gvar, :$extlist), :dup)),
      s(:lvasgn, :built,
        s(:array)),
      s(:while,
        s(:lvasgn, :e,
          s(:send,
            s(:lvar, :list), :shift)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :target),
              s(:lvasgn, :feature),
              s(:lvasgn, :required)),
            s(:lvar, :e)),
          s(:if,
            s(:and,
              s(:lvar, :required),
              s(:send,
                s(:send,
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :required), :-,
                      s(:lvar, :built))), :empty?), :!)),
            s(:begin,
              s(:lvasgn, :l,
                s(:send,
                  s(:lvar, :list), :size)),
              s(:if,
                s(:begin,
                  s(:while,
                    s(:send,
                      s(:lvar, :l), :>,
                      s(:int, 0)),
                    s(:if,
                      s(:send,
                        s(:lvar, :required), :include?,
                        s(:send,
                          s(:send,
                            s(:lvar, :list), :[],
                            s(:op_asgn,
                              s(:lvasgn, :l), :-,
                              s(:int, 1))), :[],
                          s(:int, 1))),
                      s(:break,
                        s(:true)), nil))),
                s(:send,
                  s(:lvar, :list), :insert,
                  s(:send,
                    s(:lvar, :l), :+,
                    s(:int, 1)),
                  s(:lvar, :e)), nil),
              s(:next)), nil),
          s(:lvasgn, :base,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :feature))),
          s(:send,
            s(:gvar, :$extinit), :<<,
            s(:dstr,
              s(:str, "    init(Init_"),
              s(:begin,
                s(:lvar, :base)),
              s(:str, ", \""),
              s(:begin,
                s(:lvar, :feature)),
              s(:str, ".so\");\n"))),
          s(:send,
            s(:gvar, :$extobjs), :<<,
            s(:send, nil, :format,
              s(:str, "ext/%s/%s.%s"),
              s(:lvar, :target),
              s(:lvar, :base),
              s(:gvar, :$LIBEXT))),
          s(:send,
            s(:lvar, :built), :<<,
            s(:lvar, :target)))),
      s(:lvasgn, :src,
        s(:dstr,
          s(:str, "\n#include \"ruby/ruby.h\"\n"),
          s(:str, "\n"),
          s(:str, "#define init(func, name) {\t\\\n"),
          s(:str, "    extern void func(void);\t\\\n"),
          s(:str, "    ruby_init_ext(name, func);\t\\\n"),
          s(:str, "}\n"),
          s(:str, "\n"),
          s(:str, "void ruby_init_ext(const char *name, void (*init)(void));\n"),
          s(:str, "\n"),
          s(:str, "void Init_ext(void)\n{\n"),
          s(:gvar, :$extinit),
          s(:str, "}\n"))),
      s(:if,
        s(:or,
          s(:send,
            s(:send, nil, :modified?,
              s(:send,
                s(:lvar, :extinit), :c),
              s(:const, nil, :MTIMES)), :!),
          s(:send,
            s(:send,
              s(:const, nil, :IO), :read,
              s(:send,
                s(:lvar, :extinit), :c)), :!=,
            s(:lvar, :src))),
        s(:block,
          s(:send, nil, :open,
            s(:send,
              s(:lvar, :extinit), :c),
            s(:str, "w")),
          s(:args,
            s(:arg, :fe)),
          s(:send,
            s(:lvar, :fe), :print,
            s(:lvar, :src))), nil),
      s(:send,
        s(:gvar, :$extpath), :delete,
        s(:str, "$(topdir)")),
      s(:gvasgn, :$extflags,
        s(:send,
          s(:send,
            s(:send, nil, :libpathflag,
              s(:gvar, :$extpath)), :<<,
            s(:str, " ")), :<<,
          s(:send,
            s(:gvar, :$extflags), :strip))),
      s(:lvasgn, :conf,
        s(:send,
          s(:block,
            s(:send,
              s(:array,
                s(:array,
                  s(:str, "LIBRUBY_SO_UPDATE"),
                  s(:str, "$(LIBRUBY_EXTS)")),
                s(:array,
                  s(:str, "SETUP"),
                  s(:gvar, :$setup)),
                s(:array,
                  s(:str, "EXTLIBS"),
                  s(:send,
                    s(:gvar, :$extlibs), :join,
                    s(:str, " "))),
                s(:array,
                  s(:str, "EXTLDFLAGS"),
                  s(:gvar, :$extflags))), :map),
            s(:args,
              s(:arg, :n),
              s(:arg, :v)),
            s(:if,
              s(:and,
                s(:lvar, :v),
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:lvasgn, :v,
                        s(:send,
                          s(:lvar, :v), :strip))), :empty?), :!)),
              s(:dstr,
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "="),
                s(:begin,
                  s(:lvar, :v))), nil)), :compact)),
      s(:send, nil, :puts,
        s(:splat,
          s(:lvar, :conf))),
      s(:send,
        s(:gvar, :$stdout), :flush),
      s(:send,
        s(:gvar, :$mflags), :concat,
        s(:lvar, :conf)),
      s(:send,
        s(:gvar, :$makeflags), :concat,
        s(:lvar, :conf)))),
  s(:lvasgn, :rubies,
    s(:array)),
  s(:block,
    s(:send,
      s(:array,
        s(:str, "RUBY"),
        s(:str, "RUBYW"),
        s(:str, "STATIC_RUBY")), :each),
    s(:args,
      s(:arg, :n)),
    s(:begin,
      s(:lvasgn, :r,
        s(:lvar, :n)),
      s(:if,
        s(:lvasgn, :r,
          s(:or,
            s(:send, nil, :arg_config,
              s(:send,
                s(:str, "--"), :+,
                s(:send,
                  s(:lvar, :r), :downcase))),
            s(:send, nil, :config_string,
              s(:send,
                s(:lvar, :r), :+,
                s(:str, "_INSTALL_NAME"))))),
        s(:begin,
          s(:send,
            s(:lvar, :rubies), :<<,
            s(:send,
              s(:const, nil, :RbConfig), :expand,
              s(:op_asgn,
                s(:lvasgn, :r), :+,
                s(:const, nil, :EXEEXT)))),
          s(:send,
            s(:gvar, :$mflags), :<<,
            s(:dstr,
              s(:begin,
                s(:lvar, :n)),
              s(:str, "="),
              s(:begin,
                s(:lvar, :r))))), nil))),
  s(:send,
    s(:const, nil, :Dir), :chdir,
    s(:str, "..")),
  s(:if,
    s(:send,
      s(:send,
        s(:gvar, :$destdir), :to_s), :empty?), nil,
    s(:or,
      s(:send,
        s(:gvar, :$mflags), :defined?,
        s(:str, "DESTDIR")),
      s(:send,
        s(:gvar, :$mflags), :<<,
        s(:dstr,
          s(:str, "DESTDIR="),
          s(:begin,
            s(:gvar, :$destdir)))))),
  s(:send,
    s(:gvar, :$makeflags), :uniq!),
  s(:if,
    s(:send,
      s(:gvar, :$nmake), :==,
      s(:str, "b")),
    s(:if,
      s(:send,
        s(:begin,
          s(:lvasgn, :vars,
            s(:send,
              s(:gvar, :$mflags), :grep,
              s(:regexp,
                s(:str, "\\A\\w+="),
                s(:regopt, :n))))), :empty?), nil,
      s(:begin,
        s(:block,
          s(:send, nil, :open,
            s(:lvasgn, :mkf,
              s(:str, "libruby.mk")),
            s(:str, "wb")),
          s(:args,
            s(:arg, :tmf)),
          s(:begin,
            s(:send,
              s(:lvar, :tmf), :puts,
              s(:str, "!include Makefile")),
            s(:send,
              s(:lvar, :tmf), :puts),
            s(:send,
              s(:lvar, :tmf), :puts,
              s(:splat,
                s(:block,
                  s(:send,
                    s(:lvar, :vars), :map),
                  s(:args,
                    s(:arg, :v)),
                  s(:send,
                    s(:lvar, :v), :sub,
                    s(:regexp,
                      s(:str, "\\="),
                      s(:regopt)),
                    s(:str, " = "))))),
            s(:send,
              s(:lvar, :tmf), :puts,
              s(:dstr,
                s(:str, "PRE_LIBRUBY_UPDATE = del "),
                s(:begin,
                  s(:lvar, :mkf)))))),
        s(:send,
          s(:gvar, :$mflags), :unshift,
          s(:dstr,
            s(:str, "-f"),
            s(:begin,
              s(:lvar, :mkf)))),
        s(:block,
          s(:send,
            s(:lvar, :vars), :each),
          s(:args,
            s(:arg, :flag)),
          s(:send,
            s(:lvar, :flag), :sub!,
            s(:regexp,
              s(:str, "\\A"),
              s(:regopt)),
            s(:str, "-D"))))), nil),
  s(:send,
    s(:gvar, :$mflags), :unshift,
    s(:dstr,
      s(:str, "topdir="),
      s(:gvar, :$topdir))),
  s(:send,
    s(:const, nil, :ENV), :delete,
    s(:str, "RUBYOPT")),
  s(:if,
    s(:and,
      s(:gvar, :$configure_only),
      s(:gvar, :$command_output)),
    s(:begin,
      s(:block,
        s(:send,
          s(:lvar, :exts), :map!),
        s(:args,
          s(:arg, :d)),
        s(:dstr,
          s(:str, "ext/"),
          s(:begin,
            s(:lvar, :d)),
          s(:str, "/."))),
      s(:block,
        s(:send, nil, :atomic_write_open,
          s(:gvar, :$command_output)),
        s(:args,
          s(:arg, :mf)),
        s(:begin,
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "V = 0")),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "Q1 = $(V:1=)")),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "Q = $(Q1:0=@)")),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "ECHO1 = $(V:1=@:)")),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "ECHO = $(ECHO1:0=@echo)")),
          s(:if,
            s(:gvar, :$nmake),
            s(:send,
              s(:lvar, :mf), :puts,
              s(:str, "MFLAGS = -$(MAKEFLAGS)")), nil),
          s(:send,
            s(:lvar, :mf), :puts),
          s(:defs,
            s(:lvar, :mf), :macro,
            s(:args,
              s(:arg, :name),
              s(:arg, :values),
              s(:optarg, :max,
                s(:int, 70))),
            s(:begin,
              s(:send, nil, :print,
                s(:lvar, :name),
                s(:str, " =")),
              s(:lvasgn, :w,
                s(:lvasgn, :w0,
                  s(:send,
                    s(:send,
                      s(:lvar, :name), :size), :+,
                    s(:int, 2)))),
              s(:lvasgn, :h,
                s(:send,
                  s(:send,
                    s(:str, " \\\n"), :+,
                    s(:send,
                      s(:str, "\t"), :*,
                      s(:begin,
                        s(:send,
                          s(:lvar, :w), :/,
                          s(:int, 8))))), :+,
                  s(:send,
                    s(:str, " "), :*,
                    s(:begin,
                      s(:send,
                        s(:lvar, :w), :%,
                        s(:int, 8)))))),
              s(:block,
                s(:send,
                  s(:lvar, :values), :each),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :size), :+,
                        s(:lvar, :w)), :>,
                      s(:lvar, :max)),
                    s(:begin,
                      s(:send, nil, :print,
                        s(:lvar, :h)),
                      s(:lvasgn, :w,
                        s(:lvar, :w0))), nil),
                  s(:send, nil, :print,
                    s(:str, " "),
                    s(:lvar, :s)),
                  s(:op_asgn,
                    s(:lvasgn, :w), :+,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :size), :+,
                      s(:int, 1))))),
              s(:send, nil, :puts))),
          s(:send,
            s(:lvar, :mf), :macro,
            s(:str, "extensions"),
            s(:lvar, :exts)),
          s(:send,
            s(:lvar, :mf), :macro,
            s(:str, "EXTOBJS"),
            s(:if,
              s(:send,
                s(:gvar, :$extlist), :empty?),
              s(:array,
                s(:dstr,
                  s(:str, "dmyext."),
                  s(:begin,
                    s(:gvar, :$OBJEXT)))),
              s(:array,
                s(:dstr,
                  s(:str, "ext/extinit."),
                  s(:begin,
                    s(:gvar, :$OBJEXT))),
                s(:splat,
                  s(:gvar, :$extobjs))))),
          s(:send,
            s(:lvar, :mf), :macro,
            s(:str, "EXTLIBS"),
            s(:gvar, :$extlibs)),
          s(:send,
            s(:lvar, :mf), :macro,
            s(:str, "EXTLDFLAGS"),
            s(:send,
              s(:gvar, :$extflags), :split)),
          s(:lvasgn, :submakeopts,
            s(:array)),
          s(:if,
            s(:send, nil, :enable_config,
              s(:str, "shared"),
              s(:gvar, :$enable_shared)),
            s(:begin,
              s(:send,
                s(:lvar, :submakeopts), :<<,
                s(:str, "DLDOBJS=\"$(EXTOBJS) $(EXTENCS)\"")),
              s(:send,
                s(:lvar, :submakeopts), :<<,
                s(:str, "EXTOBJS=")),
              s(:send,
                s(:lvar, :submakeopts), :<<,
                s(:str, "EXTSOLIBS=\"$(EXTLIBS)\"")),
              s(:send,
                s(:lvar, :submakeopts), :<<,
                s(:str, "LIBRUBY_SO_UPDATE=$(LIBRUBY_EXTS)"))),
            s(:begin,
              s(:send,
                s(:lvar, :submakeopts), :<<,
                s(:str, "EXTOBJS=\"$(EXTOBJS) $(EXTENCS)\"")),
              s(:send,
                s(:lvar, :submakeopts), :<<,
                s(:str, "EXTLIBS=\"$(EXTLIBS)\"")))),
          s(:send,
            s(:lvar, :submakeopts), :<<,
            s(:str, "EXTLDFLAGS=\"$(EXTLDFLAGS)\"")),
          s(:send,
            s(:lvar, :submakeopts), :<<,
            s(:str, "UPDATE_LIBRARIES=\"$(UPDATE_LIBRARIES)\"")),
          s(:send,
            s(:lvar, :submakeopts), :<<,
            s(:str, "SHOWFLAGS=")),
          s(:send,
            s(:lvar, :mf), :macro,
            s(:str, "SUBMAKEOPTS"),
            s(:lvar, :submakeopts)),
          s(:send,
            s(:lvar, :mf), :puts),
          s(:lvasgn, :targets,
            s(:array,
              s(:str, "all"),
              s(:str, "install"),
              s(:str, "static"),
              s(:str, "install-so"),
              s(:str, "install-rb"),
              s(:str, "clean"),
              s(:str, "distclean"),
              s(:str, "realclean"))),
          s(:block,
            s(:send,
              s(:lvar, :targets), :each),
            s(:args,
              s(:arg, :tgt)),
            s(:send,
              s(:lvar, :mf), :puts,
              s(:dstr,
                s(:begin,
                  s(:lvar, :tgt)),
                s(:str, ": $(extensions:/.=/"),
                s(:begin,
                  s(:lvar, :tgt)),
                s(:str, ")")))),
          s(:send,
            s(:lvar, :mf), :puts),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:dstr,
              s(:str, "clean:\n\t-$(Q)$(RM) ext/extinit."),
              s(:begin,
                s(:gvar, :$OBJEXT)))),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "distclean:\n\t-$(Q)$(RM) ext/extinit.c")),
          s(:send,
            s(:lvar, :mf), :puts),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :rubies), :join,
                  s(:str, " "))),
              s(:str, ": $(extensions:/.=/"),
              s(:begin,
                s(:if,
                  s(:gvar, :$force_static),
                  s(:str, "static"),
                  s(:str, "all"))),
              s(:str, ")"))),
          s(:lvasgn, :submake,
            s(:str, "$(Q)$(MAKE) $(MFLAGS) $(SUBMAKEOPTS)")),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:dstr,
              s(:str, "all static: "),
              s(:begin,
                s(:send,
                  s(:lvar, :rubies), :join,
                  s(:str, " "))),
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:gvar, :$extobjs), :each),
            s(:args,
              s(:arg, :tgt)),
            s(:send,
              s(:lvar, :mf), :puts,
              s(:dstr,
                s(:begin,
                  s(:lvar, :tgt)),
                s(:str, ": "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:lvar, :tgt))),
                s(:str, "/static")))),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :rubies), :join,
                  s(:str, " "))),
              s(:str, ": $(EXTOBJS)"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :CONFIG), :[],
                      s(:str, "ENCSTATIC")), :==,
                    s(:str, "static")),
                  s(:str, " libencs"), nil)))),
          s(:block,
            s(:send,
              s(:lvar, :rubies), :each),
            s(:args,
              s(:arg, :tgt)),
            s(:send,
              s(:lvar, :mf), :puts,
              s(:dstr,
                s(:begin,
                  s(:lvar, :tgt)),
                s(:str, ":\n\t"),
                s(:begin,
                  s(:lvar, :submake)),
                s(:str, " $@")))),
          s(:send,
            s(:lvar, :mf), :puts,
            s(:str, "libencs:\n\t$(Q)$(MAKE) -f enc.mk V=$(V) $@")),
          s(:if,
            s(:gvar, :$static),
            s(:send,
              s(:lvar, :mf), :puts,
              s(:dstr,
                s(:str, "ext/extinit."),
                s(:begin,
                  s(:gvar, :$OBJEXT)),
                s(:str, ":\n\t$(Q)$(MAKE) $(MFLAGS) V=$(V) $@"))), nil),
          s(:send,
            s(:lvar, :mf), :puts),
          s(:if,
            s(:send,
              s(:gvar, :$gnumake), :==,
              s(:str, "yes")),
            s(:lvasgn, :submake,
              s(:str, "$(MAKE) -C $(@D)")),
            s(:begin,
              s(:lvasgn, :submake,
                s(:str, "cd $(@D) && ")),
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "exec")),
                s(:args,
                  s(:arg, :str)),
                s(:send,
                  s(:send,
                    s(:lvar, :submake), :<<,
                    s(:lvar, :str)), :<<,
                  s(:str, " "))),
              s(:send,
                s(:lvar, :submake), :<<,
                s(:str, "$(MAKE)")))),
          s(:block,
            s(:send,
              s(:lvar, :targets), :each),
            s(:args,
              s(:arg, :tgt)),
            s(:block,
              s(:send,
                s(:lvar, :exts), :each),
              s(:args,
                s(:arg, :d)),
              s(:send,
                s(:lvar, :mf), :puts,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :d), :[],
                      s(:irange,
                        s(:int, 0),
                        s(:int, -2)))),
                  s(:begin,
                    s(:lvar, :tgt)),
                  s(:str, ":\n\t$(Q)"),
                  s(:begin,
                    s(:lvar, :submake)),
                  s(:str, " $(MFLAGS) V=$(V) $(@F)")))))))),
    s(:if,
      s(:gvar, :$command_output),
      s(:begin,
        s(:lvasgn, :message,
          s(:dstr,
            s(:str, "making "),
            s(:begin,
              s(:send,
                s(:lvar, :rubies), :join,
                s(:str, ", "))))),
        s(:lvasgn, :message,
          s(:dstr,
            s(:str, "echo "),
            s(:begin,
              s(:lvar, :message)))),
        s(:send,
          s(:gvar, :$mflags), :concat,
          s(:lvar, :rubies)),
        s(:send,
          s(:gvar, :$makeflags), :concat,
          s(:lvar, :rubies)),
        s(:lvasgn, :cmd,
          s(:send,
            s(:block,
              s(:send,
                s(:gvar, :$makeflags), :map),
              s(:args,
                s(:arg, :ss)),
              s(:send,
                s(:lvar, :ss), :sub,
                s(:regexp,
                  s(:str, ".*[$(){};\\s].*"),
                  s(:regopt)),
                s(:str, "'\\&'"))), :join,
            s(:str, " "))),
        s(:block,
          s(:send, nil, :open,
            s(:gvar, :$command_output),
            s(:str, "wb")),
          s(:args,
            s(:arg, :ff)),
          s(:begin,
            s(:case,
              s(:gvar, :$command_output),
              s(:when,
                s(:regexp,
                  s(:str, "\\.sh\\z"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :ff), :puts,
                  s(:lvar, :message),
                  s(:dstr,
                    s(:str, "rm -f \"$0\"; exec \"$@\" "),
                    s(:begin,
                      s(:lvar, :cmd))))),
              s(:when,
                s(:regexp,
                  s(:str, "\\.bat\\z"),
                  s(:regopt)),
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "@echo off"),
                      s(:lvar, :message),
                      s(:dstr,
                        s(:str, "%* "),
                        s(:begin,
                          s(:lvar, :cmd))),
                      s(:str, "del %0 & exit %ERRORLEVEL%")), :each),
                  s(:args,
                    s(:arg, :ss)),
                  s(:send,
                    s(:lvar, :ff), :print,
                    s(:lvar, :ss),
                    s(:str, "\r\n")))),
              s(:send,
                s(:lvar, :ff), :puts,
                s(:lvar, :cmd))),
            s(:send,
              s(:lvar, :ff), :chmod,
              s(:int, 493))))),
      s(:if,
        s(:send,
          s(:gvar, :$configure_only), :!),
        s(:begin,
          s(:lvasgn, :message,
            s(:dstr,
              s(:str, "making "),
              s(:begin,
                s(:send,
                  s(:lvar, :rubies), :join,
                  s(:str, ", "))))),
          s(:send, nil, :puts,
            s(:lvar, :message)),
          s(:send,
            s(:gvar, :$stdout), :flush),
          s(:send,
            s(:gvar, :$mflags), :concat,
            s(:lvar, :rubies)),
          s(:or,
            s(:send, nil, :system,
              s(:gvar, :$make),
              s(:splat,
                s(:send, nil, :sysquote,
                  s(:gvar, :$mflags)))),
            s(:send, nil, :exit,
              s(:send,
                s(:gvar, :$?), :exitstatus)))), nil))))
