s(:begin,
  s(:class,
    s(:const, nil, :Object), nil,
    s(:begin,
      s(:cvasgn, :@@golf_hash,
        s(:hash)),
      s(:def, :method_missing,
        s(:args,
          s(:arg, :m),
          s(:restarg, :a),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :t,
            s(:or_asgn,
              s(:send,
                s(:cvar, :@@golf_hash), :[],
                s(:array,
                  s(:lvar, :m),
                  s(:send,
                    s(:self), :class))),
              s(:send,
                s(:send, nil, :matching_methods,
                  s(:lvar, :m)), :[],
                s(:int, 0)))),
          s(:if,
            s(:and,
              s(:lvar, :t),
              s(:lvar, :b)),
            s(:block,
              s(:send, nil, :__send__,
                s(:lvar, :t),
                s(:splat,
                  s(:lvar, :a))),
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:if,
                  s(:gvar, :$~),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :b), :binding), :eval,
                      s(:str, "proc{|golf_matchdata| $~ = golf_matchdata }")), :call,
                    s(:gvar, :$~)), nil),
                s(:send,
                  s(:lvar, :b), :call,
                  s(:splat,
                    s(:lvar, :args))))),
            s(:if,
              s(:lvar, :t),
              s(:send, nil, :__send__,
                s(:lvar, :t),
                s(:splat,
                  s(:lvar, :a)),
                s(:block_pass,
                  s(:lvar, :b))),
              s(:zsuper))))),
      s(:def, :matching_methods,
        s(:args,
          s(:optarg, :s,
            s(:str, "")),
          s(:optarg, :m,
            s(:send, nil, :callable_methods))),
        s(:begin,
          s(:lvasgn, :r,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :to_s), :gsub,
                    s(:regexp,
                      s(:str, "."),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:str, "(.*?)"), :+,
                    s(:send,
                      s(:const, nil, :Regexp), :escape,
                      s(:back_ref, :$&))))),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :m), :grep,
                s(:lvar, :r)), :sort_by),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :to_s), :match,
                    s(:lvar, :r)), :captures), :map,
                s(:block_pass,
                  s(:sym, :size))), :<<,
              s(:lvar, :i))))),
      s(:defs,
        s(:self), :const_missing,
        s(:args,
          s(:arg, :c)),
        s(:begin,
          s(:lvasgn, :t,
            s(:or_asgn,
              s(:send,
                s(:cvar, :@@golf_hash), :[],
                s(:array,
                  s(:lvar, :c),
                  s(:send,
                    s(:self), :class))),
              s(:send,
                s(:send, nil, :matching_methods,
                  s(:lvar, :c),
                  s(:send, nil, :constants)), :[],
                s(:int, 0)))),
          s(:and,
            s(:lvar, :t),
            s(:return,
              s(:send, nil, :const_get,
                s(:lvar, :t)))),
          s(:send, nil, :raise,
            s(:const, nil, :NameError),
            s(:dstr,
              s(:str, "uninitialized constant "),
              s(:begin,
                s(:lvar, :c))),
            s(:send, nil, :caller,
              s(:int, 1))))),
      s(:def, :shortest_abbreviation,
        s(:args,
          s(:optarg, :s,
            s(:str, "")),
          s(:optarg, :m,
            s(:send, nil, :callable_methods))),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:lvar, :s), :to_s)),
          s(:lvasgn, :our_case,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:str, "A"),
                  s(:str, "Z"))), :===,
              s(:send,
                s(:lvar, :s), :[],
                s(:int, 0)))),
          s(:if,
            s(:send,
              s(:lvar, :m), :index,
              s(:send,
                s(:lvar, :s), :to_sym)),
            s(:block,
              s(:send,
                s(:int, 1), :upto,
                s(:send,
                  s(:lvar, :s), :size)),
              s(:args,
                s(:arg, :z)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "."),
                        s(:regopt))), :combination,
                    s(:lvar, :z)), :map),
                s(:args,
                  s(:arg, :trial)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:str, "A"),
                              s(:str, "Z"))), :===,
                          s(:send,
                            s(:lvar, :trial), :[],
                            s(:int, 0)))), :==,
                      s(:lvar, :our_case)), nil,
                    s(:next)),
                  s(:op_asgn,
                    s(:lvasgn, :trial), :*,
                    s(:str, "")),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send, nil, :matching_methods,
                            s(:lvar, :trial),
                            s(:lvar, :m)), :[],
                          s(:int, 0)), :to_s), :==,
                      s(:lvar, :s)),
                    s(:return,
                      s(:lvar, :trial)), nil)))),
            s(:nil)))),
      s(:def, :callable_methods,
        s(:args),
        s(:if,
          s(:send,
            s(:send,
              s(:self), :class), :==,
            s(:const, nil, :Object)),
          s(:send,
            s(:send, nil, :methods), :+,
            s(:send, nil, :private_methods)),
          s(:send, nil, :methods))),
      s(:send, nil, :private),
      s(:def, :h,
        s(:args,
          s(:optarg, :a,
            s(:str, "H")),
          s(:optarg, :b,
            s(:str, "w")),
          s(:optarg, :c,
            s(:str, "!"))),
        s(:send, nil, :puts,
          s(:dstr,
            s(:begin,
              s(:lvar, :a)),
            s(:str, "ello, "),
            s(:begin,
              s(:lvar, :b)),
            s(:str, "orld"),
            s(:begin,
              s(:lvar, :c))))),
      s(:alias,
        s(:sym, :say),
        s(:sym, :puts)),
      s(:def, :do_while,
        s(:args),
        s(:while,
          s(:yield),
          s(:int, 0))),
      s(:def, :do_until,
        s(:args),
        s(:until,
          s(:yield),
          s(:int, 0))))),
  s(:class,
    s(:const, nil, :Array), nil,
    s(:begin,
      s(:alias,
        s(:sym, :old_to_s),
        s(:sym, :to_s)),
      s(:alias,
        s(:sym, :to_s),
        s(:sym, :join)))),
  s(:class,
    s(:const, nil, :FalseClass), nil,
    s(:begin,
      s(:alias,
        s(:sym, :old_to_s),
        s(:sym, :to_s)),
      s(:def, :to_s,
        s(:args),
        s(:str, "")))),
  s(:class,
    s(:const, nil, :Integer), nil,
    s(:begin,
      s(:alias,
        s(:sym, :each),
        s(:sym, :times)),
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)))),
  s(:class,
    s(:const, nil, :String), nil,
    s(:begin,
      s(:alias,
        s(:sym, :/),
        s(:sym, :split)),
      s(:def, :to_a,
        s(:args),
        s(:send, nil, :split,
          s(:str, ""))),
      s(:block,
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Array), :instance_methods), :-,
                s(:send, nil, :instance_methods)), :-,
              s(:array,
                s(:sym, :to_ary),
                s(:sym, :transpose),
                s(:sym, :flatten),
                s(:sym, :flatten!),
                s(:sym, :compact),
                s(:sym, :compact!),
                s(:sym, :assoc),
                s(:sym, :rassoc)))), :each),
        s(:args,
          s(:arg, :meth)),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "    def "),
            s(:begin,
              s(:lvar, :meth)),
            s(:str, "(*args, &block)\n"),
            s(:str, "      a = to_a\n"),
            s(:str, "      result = a."),
            s(:begin,
              s(:lvar, :meth)),
            s(:str, "(*args, &block)\n"),
            s(:str, "      replace(a.join)\n"),
            s(:str, "      if result.class == Array\n"),
            s(:str, "        Integer === result[0] ? result.pack('c*') : result.join\n"),
            s(:str, "      elsif result.class == Enumerator\n"),
            s(:str, "        result.map(&:join).to_enum\n"),
            s(:str, "      else\n"),
            s(:str, "        result\n"),
            s(:str, "      end\n"),
            s(:str, "    end")))))),
  s(:class,
    s(:const, nil, :Enumerator), nil,
    s(:begin,
      s(:alias,
        s(:sym, :old_to_s),
        s(:sym, :to_s)),
      s(:block,
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Array), :instance_methods), :-,
                  s(:send, nil, :instance_methods)), :-,
                s(:array,
                  s(:sym, :replace))), :+,
              s(:array,
                s(:sym, :to_s)))), :each),
        s(:args,
          s(:arg, :meth)),
        s(:send, nil, :eval,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "    def "),
            s(:begin,
              s(:lvar, :meth)),
            s(:str, "(*args, &block)\n"),
            s(:str, "      to_a."),
            s(:begin,
              s(:lvar, :meth)),
            s(:str, "(*args, &block)\n"),
            s(:str, "    end")))),
      s(:alias,
        s(:sym, :old_inspect),
        s(:sym, :inspect)),
      s(:alias,
        s(:sym, :inspect),
        s(:sym, :old_to_s)))),
  s(:class,
    s(:const, nil, :Symbol), nil,
    s(:def, :call,
      s(:args,
        s(:restarg, :args),
        s(:blockarg, :block)),
      s(:block,
        s(:send, nil, :proc),
        s(:args,
          s(:arg, :recv)),
        s(:send,
          s(:lvar, :recv), :__send__,
          s(:self),
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :block)))))))
