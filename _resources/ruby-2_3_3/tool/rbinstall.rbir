s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :load,
        s(:str, "./rbconfig.rb")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:casgn, nil, :CONFIG,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args),
            s(:str, "")))),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :RbConfig)),
        s(:send,
          s(:gvar, :$"), :unshift,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "./rbconfig.rb")))))),
  s(:lvasgn, :srcdir,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../.."),
      s(:str, "(string)"))),
  s(:if,
    s(:and,
      s(:defined?,
        s(:const, nil, :CROSS_COMPILING)),
      s(:const, nil, :CROSS_COMPILING)), nil,
    s(:send,
      s(:gvar, :$:), :replace,
      s(:array,
        s(:send,
          s(:lvar, :srcdir), :+,
          s(:str, "/lib")),
        s(:send,
          s(:const, nil, :Dir), :pwd)))),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "shellwords")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:str, "optparse/shellwords")),
  s(:send, nil, :require,
    s(:str, "ostruct")),
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "zlib")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:send,
          s(:gvar, :$"), :<<,
          s(:str, "zlib.rb"))), nil)),
  s(:send,
    s(:const, nil, :STDOUT), :sync=,
    s(:true)),
  s(:send,
    s(:const, nil, :File), :umask,
    s(:int, 63)),
  s(:def, :parse_args,
    s(:args,
      s(:optarg, :argv,
        s(:const, nil, :ARGV))),
    s(:begin,
      s(:gvasgn, :$mantype,
        s(:str, "doc")),
      s(:gvasgn, :$destdir,
        s(:nil)),
      s(:gvasgn, :$extout,
        s(:nil)),
      s(:gvasgn, :$make,
        s(:str, "make")),
      s(:gvasgn, :$mflags,
        s(:array)),
      s(:gvasgn, :$install,
        s(:array)),
      s(:gvasgn, :$installed_list,
        s(:nil)),
      s(:gvasgn, :$dryrun,
        s(:false)),
      s(:gvasgn, :$rdocdir,
        s(:nil)),
      s(:gvasgn, :$data_mode,
        s(:int, 420)),
      s(:gvasgn, :$prog_mode,
        s(:int, 493)),
      s(:gvasgn, :$dir_mode,
        s(:nil)),
      s(:gvasgn, :$script_mode,
        s(:nil)),
      s(:gvasgn, :$strip,
        s(:false)),
      s(:gvasgn, :$cmdtype,
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :File), :ALT_SEPARATOR), :==,
              s(:str, "\\")),
            s(:if,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:str, "rubystub.exe")),
              s(:str, "exe"),
              s(:str, "cmd")), nil))),
      s(:lvasgn, :mflags,
        s(:array)),
      s(:lvasgn, :opt,
        s(:send,
          s(:const, nil, :OptionParser), :new)),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "-n"),
          s(:str, "--dry-run")),
        s(:args),
        s(:gvasgn, :$dryrun,
          s(:true))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--dest-dir=DIR")),
        s(:args,
          s(:arg, :dir)),
        s(:gvasgn, :$destdir,
          s(:lvar, :dir))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--extout=DIR")),
        s(:args,
          s(:arg, :dir)),
        s(:gvasgn, :$extout,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :dir), :empty?), nil,
              s(:lvar, :dir))))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--make=COMMAND")),
        s(:args,
          s(:arg, :make)),
        s(:gvasgn, :$make,
          s(:lvar, :make))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--mantype=MAN")),
        s(:args,
          s(:arg, :man)),
        s(:gvasgn, :$mantype,
          s(:lvar, :man))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--make-flags=FLAGS"),
          s(:str, "--mflags"),
          s(:const, nil, :Shellwords)),
        s(:args,
          s(:arg, :v)),
        s(:begin,
          s(:if,
            s(:lvasgn, :arg,
              s(:send,
                s(:lvar, :v), :first)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A[^-][^=]*\\Z"),
                  s(:regopt)),
                s(:lvar, :arg)),
              s(:send,
                s(:lvar, :arg), :insert,
                s(:int, 0),
                s(:str, "-")), nil), nil),
          s(:send,
            s(:gvar, :$mflags), :concat,
            s(:lvar, :v)))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "-i"),
          s(:str, "--install=TYPE"),
          s(:send,
            s(:gvar, :$install_procs), :keys)),
        s(:args,
          s(:arg, :ins)),
        s(:send,
          s(:gvar, :$install), :<<,
          s(:lvar, :ins))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--data-mode=OCTAL-MODE"),
          s(:const,
            s(:const, nil, :OptionParser), :OctalInteger)),
        s(:args,
          s(:arg, :mode)),
        s(:gvasgn, :$data_mode,
          s(:lvar, :mode))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--prog-mode=OCTAL-MODE"),
          s(:const,
            s(:const, nil, :OptionParser), :OctalInteger)),
        s(:args,
          s(:arg, :mode)),
        s(:gvasgn, :$prog_mode,
          s(:lvar, :mode))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--dir-mode=OCTAL-MODE"),
          s(:const,
            s(:const, nil, :OptionParser), :OctalInteger)),
        s(:args,
          s(:arg, :mode)),
        s(:gvasgn, :$dir_mode,
          s(:lvar, :mode))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--script-mode=OCTAL-MODE"),
          s(:const,
            s(:const, nil, :OptionParser), :OctalInteger)),
        s(:args,
          s(:arg, :mode)),
        s(:gvasgn, :$script_mode,
          s(:lvar, :mode))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--installed-list [FILENAME]")),
        s(:args,
          s(:arg, :name)),
        s(:gvasgn, :$installed_list,
          s(:lvar, :name))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--rdoc-output [DIR]")),
        s(:args,
          s(:arg, :dir)),
        s(:gvasgn, :$rdocdir,
          s(:lvar, :dir))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--cmd-type=TYPE"),
          s(:array,
            s(:str, "cmd"),
            s(:str, "plain"))),
        s(:args,
          s(:arg, :cmd)),
        s(:gvasgn, :$cmdtype,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :cmd), :==,
                s(:str, "plain")), nil,
              s(:lvar, :cmd))))),
      s(:block,
        s(:send,
          s(:lvar, :opt), :on,
          s(:str, "--[no-]strip")),
        s(:args,
          s(:arg, :strip)),
        s(:gvasgn, :$strip,
          s(:lvar, :strip))),
      s(:rescue,
        s(:block,
          s(:send,
            s(:lvar, :opt), :order!,
            s(:lvar, :argv)),
          s(:args,
            s(:arg, :v)),
          s(:case,
            s(:lvar, :v),
            s(:when,
              s(:regexp,
                s(:str, "\\AINSTALL[-_]([-\\w]+)=(.*)"),
                s(:regopt)),
              s(:send,
                s(:lvar, :argv), :unshift,
                s(:dstr,
                  s(:str, "--"),
                  s(:begin,
                    s(:send,
                      s(:nth_ref, 1), :tr,
                      s(:str, "_"),
                      s(:str, "-"))),
                  s(:str, "="),
                  s(:begin,
                    s(:nth_ref, 2))))),
            s(:when,
              s(:regexp,
                s(:str, "\\A\\w[-\\w+]*=\\z"),
                s(:regopt)),
              s(:send,
                s(:lvar, :mflags), :<<,
                s(:lvar, :v))),
            s(:when,
              s(:regexp,
                s(:str, "\\A\\w[-\\w+]*\\z"),
                s(:regopt)),
              s(:send,
                s(:gvar, :$install), :<<,
                s(:send,
                  s(:lvar, :v), :intern))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :OptionParser), :InvalidArgument),
              s(:lvar, :v)))),
        s(:resbody, nil, nil,
          s(:send, nil, :abort,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:gvar, :$!), :message)),
              s(:str, "\n"),
              s(:begin,
                s(:send,
                  s(:lvar, :opt), :help))))), nil),
      s(:if,
        s(:defined?,
          s(:const, nil, :RbConfig)), nil,
        s(:begin,
          s(:send, nil, :puts,
            s(:send,
              s(:lvar, :opt), :help)),
          s(:send, nil, :exit))),
      s(:masgn,
        s(:mlhs,
          s(:gvasgn, :$make),
          s(:splat,
            s(:lvasgn, :rest))),
        s(:send,
          s(:const, nil, :Shellwords), :shellwords,
          s(:gvar, :$make))),
      s(:if,
        s(:send,
          s(:lvar, :rest), :empty?), nil,
        s(:send,
          s(:gvar, :$mflags), :unshift,
          s(:splat,
            s(:lvar, :rest)))),
      s(:send,
        s(:gvar, :$mflags), :unshift,
        s(:splat,
          s(:lvar, :mflags))),
      s(:defs,
        s(:gvar, :$mflags), :set?,
        s(:args,
          s(:arg, :flag)),
        s(:begin,
          s(:block,
            s(:send, nil, :grep,
              s(:regexp,
                s(:str, "\\A-(?!-).*"),
                s(:begin,
                  s(:send,
                    s(:lvar, :flag), :chr)),
                s(:regopt, :i))),
            s(:args),
            s(:return,
              s(:true))),
          s(:false))),
      s(:defs,
        s(:gvar, :$mflags), :defined?,
        s(:args,
          s(:arg, :var)),
        s(:begin,
          s(:block,
            s(:send, nil, :grep,
              s(:regexp,
                s(:str, "\\A"),
                s(:begin,
                  s(:lvar, :var)),
                s(:str, "=(.*)"),
                s(:regopt))),
            s(:args),
            s(:return,
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:nth_ref, 1)),
                s(:nth_ref, 1)))),
          s(:false))),
      s(:if,
        s(:send,
          s(:gvar, :$mflags), :set?,
          s(:str, "n")),
        s(:gvasgn, :$dryrun,
          s(:true)),
        s(:if,
          s(:gvar, :$dryrun),
          s(:send,
            s(:gvar, :$mflags), :<<,
            s(:str, "-n")), nil)),
      s(:or_asgn,
        s(:gvasgn, :$destdir),
        s(:send,
          s(:gvar, :$mflags), :defined?,
          s(:str, "DESTDIR"))),
      s(:if,
        s(:or_asgn,
          s(:gvasgn, :$extout),
          s(:send,
            s(:gvar, :$mflags), :defined?,
            s(:str, "EXTOUT"))),
        s(:send,
          s(:const, nil, :RbConfig), :expand,
          s(:gvar, :$extout)), nil),
      s(:gvasgn, :$continue,
        s(:send,
          s(:gvar, :$mflags), :set?,
          s(:str, "k"))),
      s(:if,
        s(:or_asgn,
          s(:gvasgn, :$installed_list),
          s(:send,
            s(:gvar, :$mflags), :defined?,
            s(:str, "INSTALLED_LIST"))),
        s(:begin,
          s(:send,
            s(:const, nil, :RbConfig), :expand,
            s(:gvar, :$installed_list),
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG)),
          s(:gvasgn, :$installed_list,
            s(:send, nil, :open,
              s(:gvar, :$installed_list),
              s(:str, "ab"))),
          s(:send,
            s(:gvar, :$installed_list), :sync=,
            s(:true))), nil),
      s(:or_asgn,
        s(:gvasgn, :$rdocdir),
        s(:send,
          s(:gvar, :$mflags), :defined?,
          s(:str, "RDOCOUT"))),
      s(:or_asgn,
        s(:gvasgn, :$dir_mode),
        s(:send,
          s(:gvar, :$prog_mode), :|,
          s(:int, 448))),
      s(:or_asgn,
        s(:gvasgn, :$script_mode),
        s(:gvar, :$prog_mode)))),
  s(:gvasgn, :$install_procs,
    s(:block,
      s(:send,
        s(:const, nil, :Hash), :new),
      s(:args),
      s(:array))),
  s(:def, :install?,
    s(:args,
      s(:restarg, :types),
      s(:blockarg, :block)),
    s(:begin,
      s(:op_asgn,
        s(:send,
          s(:gvar, :$install_procs), :[],
          s(:sym, :all)), :<<,
        s(:lvar, :block)),
      s(:block,
        s(:send,
          s(:lvar, :types), :each),
        s(:args,
          s(:arg, :type)),
        s(:op_asgn,
          s(:send,
            s(:gvar, :$install_procs), :[],
            s(:lvar, :type)), :<<,
          s(:lvar, :block))))),
  s(:def, :strip_file,
    s(:args,
      s(:arg, :files)),
    s(:begin,
      s(:if,
        s(:and,
          s(:send,
            s(:defined?,
              s(:gvar, :$strip_command)), :!),
          s(:begin,
            s(:lvasgn, :cmd,
              s(:send,
                s(:const, nil, :CONFIG), :[],
                s(:str, "STRIP"))))),
        s(:case,
          s(:lvar, :cmd),
          s(:when,
            s(:str, ""),
            s(:str, "true"),
            s(:str, ":"),
            s(:return)),
          s(:gvasgn, :$strip_command,
            s(:send,
              s(:const, nil, :Shellwords), :shellwords,
              s(:lvar, :cmd)))),
        s(:if,
          s(:send,
            s(:gvar, :$strip_command), :!),
          s(:return), nil)),
      s(:send, nil, :system,
        s(:splat,
          s(:begin,
            s(:send,
              s(:gvar, :$strip_command), :+,
              s(:send,
                s(:array,
                  s(:lvar, :files)), :flatten))))))),
  s(:def, :install,
    s(:args,
      s(:arg, :src),
      s(:arg, :dest),
      s(:optarg, :options,
        s(:hash))),
    s(:begin,
      s(:lvasgn, :options,
        s(:send,
          s(:lvar, :options), :clone)),
      s(:lvasgn, :strip,
        s(:send,
          s(:lvar, :options), :delete,
          s(:sym, :strip))),
      s(:send,
        s(:lvar, :options), :[]=,
        s(:sym, :preserve),
        s(:true)),
      s(:lvasgn, :d,
        s(:send, nil, :with_destdir,
          s(:lvar, :dest))),
      s(:super,
        s(:lvar, :src),
        s(:lvar, :d),
        s(:lvar, :options)),
      s(:lvasgn, :srcs,
        s(:send, nil, :Array,
          s(:lvar, :src))),
      s(:if,
        s(:lvar, :strip),
        s(:begin,
          s(:if,
            s(:send,
              s(:gvar, :$made_dirs), :[],
              s(:lvar, :dest)),
            s(:lvasgn, :d,
              s(:block,
                s(:send,
                  s(:lvar, :srcs), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :d),
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:lvar, :s))))), nil),
          s(:send, nil, :strip_file,
            s(:lvar, :d))), nil),
      s(:if,
        s(:gvar, :$installed_list),
        s(:begin,
          s(:if,
            s(:send,
              s(:gvar, :$made_dirs), :[],
              s(:lvar, :dest)),
            s(:lvasgn, :dest,
              s(:block,
                s(:send,
                  s(:lvar, :srcs), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dest),
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:lvar, :s))))), nil),
          s(:send,
            s(:gvar, :$installed_list), :puts,
            s(:lvar, :dest))), nil))),
  s(:def, :ln_sf,
    s(:args,
      s(:arg, :src),
      s(:arg, :dest)),
    s(:begin,
      s(:super,
        s(:lvar, :src),
        s(:send, nil, :with_destdir,
          s(:lvar, :dest))),
      s(:if,
        s(:gvar, :$installed_list),
        s(:send,
          s(:gvar, :$installed_list), :puts,
          s(:lvar, :dest)), nil))),
  s(:gvasgn, :$made_dirs,
    s(:hash)),
  s(:def, :makedirs,
    s(:args,
      s(:arg, :dirs)),
    s(:begin,
      s(:lvasgn, :dirs,
        s(:send, nil, :fu_list,
          s(:lvar, :dirs))),
      s(:send,
        s(:block,
          s(:send,
            s(:lvar, :dirs), :collect!),
          s(:args,
            s(:arg, :dir)),
          s(:begin,
            s(:lvasgn, :realdir,
              s(:send, nil, :with_destdir,
                s(:lvar, :dir))),
            s(:if,
              s(:block,
                s(:send,
                  s(:gvar, :$made_dirs), :fetch,
                  s(:lvar, :dir)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:gvar, :$made_dirs), :[]=,
                    s(:lvar, :dir),
                    s(:true)),
                  s(:if,
                    s(:gvar, :$installed_list),
                    s(:send,
                      s(:gvar, :$installed_list), :puts,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :dir),
                        s(:str, ""))), nil),
                  s(:send,
                    s(:const, nil, :File), :directory?,
                    s(:lvar, :realdir)))), nil,
              s(:lvar, :realdir)))), :compact!),
      s(:if,
        s(:send,
          s(:lvar, :dirs), :empty?), nil,
        s(:super,
          s(:lvar, :dirs),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$dir_mode))))))),
  s(:casgn, nil, :FalseProc,
    s(:block,
      s(:send, nil, :proc),
      s(:args),
      s(:false))),
  s(:def, :path_matcher,
    s(:args,
      s(:arg, :pat)),
    s(:if,
      s(:and,
        s(:lvar, :pat),
        s(:send,
          s(:send,
            s(:lvar, :pat), :empty?), :!)),
      s(:block,
        s(:send, nil, :proc),
        s(:args,
          s(:arg, :f)),
        s(:block,
          s(:send,
            s(:lvar, :pat), :any?),
          s(:args,
            s(:arg, :n)),
          s(:send,
            s(:const, nil, :File), :fnmatch?,
            s(:lvar, :n),
            s(:lvar, :f)))),
      s(:const, nil, :FalseProc))),
  s(:def, :install_recursive,
    s(:args,
      s(:arg, :srcdir),
      s(:arg, :dest),
      s(:optarg, :options,
        s(:hash))),
    s(:begin,
      s(:lvasgn, :opts,
        s(:send,
          s(:lvar, :options), :clone)),
      s(:lvasgn, :noinst,
        s(:send,
          s(:lvar, :opts), :delete,
          s(:sym, :no_install))),
      s(:lvasgn, :glob,
        s(:or,
          s(:send,
            s(:lvar, :opts), :delete,
            s(:sym, :glob)),
          s(:str, "*"))),
      s(:lvasgn, :maxdepth,
        s(:send,
          s(:lvar, :opts), :delete,
          s(:sym, :maxdepth))),
      s(:lvasgn, :subpath,
        s(:irange,
          s(:begin,
            s(:send,
              s(:send,
                s(:lvar, :srcdir), :size), :+,
              s(:int, 1))),
          s(:int, -1))),
      s(:lvasgn, :prune,
        s(:array)),
      s(:lvasgn, :skip,
        s(:array)),
      s(:if,
        s(:lvar, :noinst),
        s(:if,
          s(:send,
            s(:const, nil, :Array), :===,
            s(:lvar, :noinst)),
          s(:begin,
            s(:lvasgn, :prune,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :noinst), :grep,
                    s(:regexp,
                      s(:begin,
                        s(:const,
                          s(:const, nil, :File), :SEPARATOR)),
                      s(:regopt, :o))), :map!),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :chomp,
                  s(:const,
                    s(:const, nil, :File), :SEPARATOR)))),
            s(:lvasgn, :skip,
              s(:send,
                s(:lvar, :noinst), :grep,
                s(:regexp,
                  s(:str, "\\A[^"),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :File), :SEPARATOR)),
                  s(:str, "]*\\z"),
                  s(:regopt, :o))))),
          s(:if,
            s(:send,
              s(:lvar, :noinst), :index,
              s(:const,
                s(:const, nil, :File), :SEPARATOR)),
            s(:lvasgn, :prune,
              s(:array,
                s(:lvar, :noinst))),
            s(:lvasgn, :skip,
              s(:array,
                s(:lvar, :noinst))))), nil),
      s(:op_asgn,
        s(:lvasgn, :skip), :|,
        s(:array,
          s(:str, "#*#"),
          s(:str, "*~"),
          s(:str, "*.old"),
          s(:str, "*.bak"),
          s(:str, "*.orig"),
          s(:str, "*.rej"),
          s(:str, "*.diff"),
          s(:str, "*.patch"),
          s(:str, "*.core"))),
      s(:lvasgn, :prune,
        s(:send, nil, :path_matcher,
          s(:lvar, :prune))),
      s(:lvasgn, :skip,
        s(:send, nil, :path_matcher,
          s(:lvar, :skip))),
      s(:rescue,
        s(:or,
          s(:send,
            s(:const, nil, :File), :directory?,
            s(:lvar, :srcdir)),
          s(:return)),
        s(:resbody, nil, nil,
          s(:return)), nil),
      s(:lvasgn, :paths,
        s(:array,
          s(:array,
            s(:lvar, :srcdir),
            s(:lvar, :dest),
            s(:int, 0)))),
      s(:lvasgn, :found,
        s(:array)),
      s(:while,
        s(:lvasgn, :file,
          s(:send,
            s(:lvar, :paths), :shift)),
        s(:begin,
          s(:send,
            s(:lvar, :found), :<<,
            s(:lvar, :file)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :file),
              s(:lvasgn, :d),
              s(:lvasgn, :dir)),
            s(:array,
              s(:splat,
                s(:lvar, :file)))),
          s(:if,
            s(:lvar, :dir),
            s(:begin,
              s(:lvasgn, :depth,
                s(:send,
                  s(:lvar, :dir), :+,
                  s(:int, 1))),
              s(:if,
                s(:and,
                  s(:lvar, :maxdepth),
                  s(:send,
                    s(:lvar, :maxdepth), :<,
                    s(:lvar, :depth))),
                s(:next), nil),
              s(:lvasgn, :files,
                s(:array)),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :foreach,
                  s(:lvar, :file)),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:lvasgn, :src,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :file),
                      s(:lvar, :f))),
                  s(:lvasgn, :d,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :dest),
                      s(:lvasgn, :dir,
                        s(:send,
                          s(:lvar, :src), :[],
                          s(:lvar, :subpath))))),
                  s(:lvasgn, :stat,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :File), :lstat,
                        s(:lvar, :src)),
                      s(:resbody, nil, nil,
                        s(:next)), nil)),
                  s(:if,
                    s(:send,
                      s(:lvar, :stat), :directory?),
                    s(:if,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:lvar, :maxdepth), :!=,
                            s(:lvar, :depth)),
                          s(:send,
                            s(:regexp,
                              s(:str, "\\A\\."),
                              s(:regopt)), :!~,
                            s(:lvar, :f))),
                        s(:send,
                          s(:send,
                            s(:lvar, :prune), :[],
                            s(:lvar, :dir)), :!)),
                      s(:send,
                        s(:lvar, :files), :<<,
                        s(:array,
                          s(:lvar, :src),
                          s(:lvar, :d),
                          s(:lvar, :depth))), nil),
                    s(:if,
                      s(:send,
                        s(:lvar, :stat), :symlink?), nil,
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:const, nil, :File), :fnmatch?,
                            s(:lvar, :glob),
                            s(:lvar, :f)),
                          s(:send,
                            s(:send,
                              s(:lvar, :skip), :[],
                              s(:lvar, :f)), :!)),
                        s(:send,
                          s(:lvar, :files), :<<,
                          s(:array,
                            s(:lvar, :src),
                            s(:lvar, :d),
                            s(:false))), nil))))),
              s(:send,
                s(:lvar, :paths), :insert,
                s(:int, 0),
                s(:splat,
                  s(:lvar, :files)))), nil))),
      s(:for,
        s(:mlhs,
          s(:lvasgn, :src),
          s(:lvasgn, :d),
          s(:lvasgn, :dir)),
        s(:lvar, :found),
        s(:if,
          s(:lvar, :dir),
          s(:send, nil, :makedirs,
            s(:lvar, :d)),
          s(:begin,
            s(:send, nil, :makedirs,
              s(:send,
                s(:lvar, :d), :[],
                s(:regexp,
                  s(:str, ".*(?=/)"),
                  s(:regopt, :m)))),
            s(:if,
              s(:send, nil, :block_given?),
              s(:yield,
                s(:lvar, :src),
                s(:lvar, :d),
                s(:lvar, :opts)),
              s(:send, nil, :install,
                s(:lvar, :src),
                s(:lvar, :d),
                s(:lvar, :opts)))))))),
  s(:def, :open_for_install,
    s(:args,
      s(:arg, :path),
      s(:arg, :mode)),
    s(:begin,
      s(:lvasgn, :data,
        s(:rescue,
          s(:block,
            s(:send, nil, :open,
              s(:lvasgn, :realpath,
                s(:send, nil, :with_destdir,
                  s(:lvar, :path))),
              s(:str, "rb")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :read)),
          s(:resbody, nil, nil,
            s(:nil)), nil)),
      s(:lvasgn, :newdata,
        s(:yield)),
      s(:if,
        s(:gvar, :$dryrun), nil,
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :newdata), :==,
              s(:lvar, :data)), nil,
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :realpath),
                s(:str, "wb"),
                s(:lvar, :mode)),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:lvar, :newdata)))),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:lvar, :mode),
            s(:lvar, :realpath)))),
      s(:if,
        s(:gvar, :$installed_list),
        s(:send,
          s(:gvar, :$installed_list), :puts,
          s(:lvar, :path)), nil))),
  s(:def, :with_destdir,
    s(:args,
      s(:arg, :dir)),
    s(:begin,
      s(:if,
        s(:or,
          s(:send,
            s(:gvar, :$destdir), :!),
          s(:send,
            s(:gvar, :$destdir), :empty?)),
        s(:return,
          s(:lvar, :dir)), nil),
      s(:if,
        s(:send,
          s(:const,
            s(:const, nil, :File), :PATH_SEPARATOR), :==,
          s(:str, ";")),
        s(:lvasgn, :dir,
          s(:send,
            s(:lvar, :dir), :sub,
            s(:regexp,
              s(:str, "\\A\\w:"),
              s(:regopt)),
            s(:str, ""))), nil),
      s(:send,
        s(:gvar, :$destdir), :+,
        s(:lvar, :dir)))),
  s(:def, :without_destdir,
    s(:args,
      s(:arg, :dir)),
    s(:begin,
      s(:if,
        s(:or,
          s(:or,
            s(:send,
              s(:gvar, :$destdir), :!),
            s(:send,
              s(:gvar, :$destdir), :empty?)),
          s(:send,
            s(:send,
              s(:lvar, :dir), :start_with?,
              s(:gvar, :$destdir)), :!)),
        s(:return,
          s(:lvar, :dir)), nil),
      s(:if,
        s(:send,
          s(:const,
            s(:const, nil, :File), :PATH_SEPARATOR), :==,
          s(:str, ";")),
        s(:lvasgn, :dir,
          s(:send,
            s(:lvar, :dir), :sub,
            s(:regexp,
              s(:str, "\\A\\w:"),
              s(:regopt)),
            s(:str, ""))), nil),
      s(:send,
        s(:lvar, :dir), :[],
        s(:irange,
          s(:send,
            s(:gvar, :$destdir), :size),
          s(:int, -1))))),
  s(:def, :prepare,
    s(:args,
      s(:arg, :mesg),
      s(:arg, :basedir),
      s(:optarg, :subdirs,
        s(:nil))),
    s(:begin,
      s(:if,
        s(:lvar, :basedir), nil,
        s(:return)),
      s(:case, nil,
        s(:when,
          s(:send,
            s(:lvar, :subdirs), :!),
          s(:lvasgn, :dirs,
            s(:lvar, :basedir))),
        s(:when,
          s(:send,
            s(:send,
              s(:lvar, :subdirs), :size), :==,
            s(:int, 0)),
          s(:lvasgn, :subdirs,
            s(:nil))),
        s(:when,
          s(:send,
            s(:send,
              s(:lvar, :subdirs), :size), :==,
            s(:int, 1)),
          s(:begin,
            s(:lvasgn, :dirs,
              s(:array,
                s(:lvasgn, :basedir,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :basedir),
                    s(:lvar, :subdirs))))),
            s(:lvasgn, :subdirs,
              s(:nil)))),
        s(:lvasgn, :dirs,
          s(:array,
            s(:lvar, :basedir),
            s(:splat,
              s(:block,
                s(:send,
                  s(:lvar, :subdirs), :collect),
                s(:args,
                  s(:arg, :dir)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :basedir),
                  s(:lvar, :dir))))))),
      s(:send, nil, :printf,
        s(:str, "installing %-18s %s%s\n"),
        s(:dstr,
          s(:begin,
            s(:lvar, :mesg)),
          s(:str, ":")),
        s(:lvar, :basedir),
        s(:begin,
          s(:if,
            s(:lvar, :subdirs),
            s(:dstr,
              s(:str, " ("),
              s(:begin,
                s(:send,
                  s(:lvar, :subdirs), :join,
                  s(:str, ", "))),
              s(:str, ")")),
            s(:str, "")))),
      s(:send, nil, :makedirs,
        s(:lvar, :dirs)))),
  s(:defs,
    s(:const, nil, :CONFIG), :[],
    s(:args,
      s(:arg, :name),
      s(:optarg, :mandatory,
        s(:false))),
    s(:begin,
      s(:lvasgn, :value,
        s(:super,
          s(:lvar, :name))),
      s(:if,
        s(:lvar, :mandatory),
        s(:if,
          s(:or,
            s(:send,
              s(:lvar, :value), :!),
            s(:send,
              s(:lvar, :value), :empty?)),
          s(:send, nil, :raise,
            s(:dstr,
              s(:str, "CONFIG['"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "'] must be set"))), nil), nil),
      s(:lvar, :value))),
  s(:lvasgn, :exeext,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "EXEEXT"))),
  s(:lvasgn, :ruby_install_name,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "ruby_install_name"),
      s(:true))),
  s(:lvasgn, :rubyw_install_name,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "rubyw_install_name"))),
  s(:lvasgn, :goruby_install_name,
    s(:send,
      s(:str, "go"), :+,
      s(:lvar, :ruby_install_name))),
  s(:lvasgn, :bindir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "bindir"),
      s(:true))),
  s(:lvasgn, :libdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:send,
        s(:const, nil, :CONFIG), :fetch,
        s(:str, "libdirname"),
        s(:str, "libdir")),
      s(:true))),
  s(:lvasgn, :rubyhdrdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "rubyhdrdir"),
      s(:true))),
  s(:lvasgn, :archhdrdir,
    s(:or,
      s(:send,
        s(:const, nil, :CONFIG), :[],
        s(:str, "rubyarchhdrdir")),
      s(:begin,
        s(:send,
          s(:send,
            s(:lvar, :rubyhdrdir), :+,
            s(:str, "/")), :+,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "arch")))))),
  s(:lvasgn, :rubylibdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "rubylibdir"),
      s(:true))),
  s(:lvasgn, :archlibdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "rubyarchdir"),
      s(:true))),
  s(:lvasgn, :sitelibdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "sitelibdir"))),
  s(:lvasgn, :sitearchlibdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "sitearchdir"))),
  s(:lvasgn, :vendorlibdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "vendorlibdir"))),
  s(:lvasgn, :vendorarchlibdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "vendorarchdir"))),
  s(:lvasgn, :mandir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "mandir"),
      s(:true))),
  s(:lvasgn, :docdir,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "docdir"),
      s(:true))),
  s(:lvasgn, :configure_args,
    s(:send,
      s(:const, nil, :Shellwords), :shellwords,
      s(:send,
        s(:const, nil, :CONFIG), :[],
        s(:str, "configure_args")))),
  s(:lvasgn, :enable_shared,
    s(:send,
      s(:send,
        s(:const, nil, :CONFIG), :[],
        s(:str, "ENABLE_SHARED")), :==,
      s(:str, "yes"))),
  s(:lvasgn, :dll,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "LIBRUBY_SO"),
      s(:lvar, :enable_shared))),
  s(:lvasgn, :lib,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "LIBRUBY"),
      s(:true))),
  s(:lvasgn, :arc,
    s(:send,
      s(:const, nil, :CONFIG), :[],
      s(:str, "LIBRUBY_A"),
      s(:true))),
  s(:lvasgn, :config_h,
    s(:send,
      s(:const, nil, :File), :read,
      s(:send,
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "EXTOUT")), :+,
            s(:str, "/include/")), :+,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "arch"))), :+,
        s(:str, "/ruby/config.h")))),
  s(:lvasgn, :load_relative,
    s(:send,
      s(:send,
        s(:send,
          s(:lvar, :config_h), :[],
          s(:regexp,
            s(:str, "^\\s*#\\s*define\\s+LOAD_RELATIVE\\s+(\\d+)"),
            s(:regopt)),
          s(:int, 1)), :to_i), :nonzero?)),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :arch),
      s(:sym, :bin),
      s(:sym, :"bin-arch")),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "binary commands"),
        s(:lvar, :bindir)),
      s(:send, nil, :install,
        s(:send,
          s(:lvar, :ruby_install_name), :+,
          s(:lvar, :exeext)),
        s(:lvar, :bindir),
        s(:hash,
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$prog_mode)),
          s(:pair,
            s(:sym, :strip),
            s(:gvar, :$strip)))),
      s(:if,
        s(:and,
          s(:lvar, :rubyw_install_name),
          s(:send,
            s(:send,
              s(:lvar, :rubyw_install_name), :empty?), :!)),
        s(:send, nil, :install,
          s(:send,
            s(:lvar, :rubyw_install_name), :+,
            s(:lvar, :exeext)),
          s(:lvar, :bindir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$prog_mode)),
            s(:pair,
              s(:sym, :strip),
              s(:gvar, :$strip)))), nil),
      s(:if,
        s(:send,
          s(:const, nil, :File), :exist?,
          s(:send,
            s(:lvar, :goruby_install_name), :+,
            s(:lvar, :exeext))),
        s(:send, nil, :install,
          s(:send,
            s(:lvar, :goruby_install_name), :+,
            s(:lvar, :exeext)),
          s(:lvar, :bindir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$prog_mode)),
            s(:pair,
              s(:sym, :strip),
              s(:gvar, :$strip)))), nil),
      s(:if,
        s(:and,
          s(:lvar, :enable_shared),
          s(:send,
            s(:lvar, :dll), :!=,
            s(:lvar, :lib))),
        s(:send, nil, :install,
          s(:lvar, :dll),
          s(:lvar, :bindir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$prog_mode)),
            s(:pair,
              s(:sym, :strip),
              s(:gvar, :$strip)))), nil))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :arch),
      s(:sym, :lib)),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "base libraries"),
        s(:lvar, :libdir)),
      s(:if,
        s(:send,
          s(:lvar, :lib), :==,
          s(:lvar, :arc)), nil,
        s(:send, nil, :install,
          s(:lvar, :lib),
          s(:lvar, :libdir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$prog_mode)),
            s(:pair,
              s(:sym, :strip),
              s(:gvar, :$strip))))),
      s(:send, nil, :install,
        s(:lvar, :arc),
        s(:lvar, :libdir),
        s(:hash,
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))),
      s(:if,
        s(:and,
          s(:send,
            s(:lvar, :dll), :==,
            s(:lvar, :lib)),
          s(:send,
            s(:lvar, :dll), :!=,
            s(:lvar, :arc))),
        s(:for,
          s(:lvasgn, :link),
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "LIBRUBY_ALIASES")), :split),
          s(:send, nil, :ln_sf,
            s(:lvar, :dll),
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :libdir),
              s(:lvar, :link)))), nil),
      s(:send, nil, :prepare,
        s(:str, "arch files"),
        s(:lvar, :archlibdir)),
      s(:send, nil, :install,
        s(:str, "rbconfig.rb"),
        s(:lvar, :archlibdir),
        s(:hash,
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))),
      s(:if,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "ARCHFILE")),
        s(:for,
          s(:lvasgn, :file),
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "ARCHFILE")), :split),
          s(:send, nil, :install,
            s(:lvar, :file),
            s(:lvar, :archlibdir),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:gvar, :$data_mode))))), nil))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :arch),
      s(:sym, :data)),
    s(:args),
    s(:begin,
      s(:lvasgn, :pc,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "ruby_pc"))),
      s(:if,
        s(:and,
          s(:and,
            s(:lvar, :pc),
            s(:send,
              s(:const, nil, :File), :file?,
              s(:lvar, :pc))),
          s(:send,
            s(:const, nil, :File), :size?,
            s(:lvar, :pc))),
        s(:begin,
          s(:send, nil, :prepare,
            s(:str, "pkgconfig data"),
            s(:lvasgn, :pkgconfigdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :libdir),
                s(:str, "pkgconfig")))),
          s(:send, nil, :install,
            s(:lvar, :pc),
            s(:lvar, :pkgconfigdir),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:gvar, :$data_mode))))), nil))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :ext),
      s(:sym, :arch),
      s(:sym, :"ext-arch")),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "extension objects"),
        s(:lvar, :archlibdir)),
      s(:lvasgn, :noinst,
        s(:send,
          s(:array,
            s(:str, "-*"),
            s(:str, "-*/")), :|,
          s(:send,
            s(:begin,
              s(:or,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "no_install_files")),
                s(:str, ""))), :split))),
      s(:send, nil, :install_recursive,
        s(:dstr,
          s(:begin,
            s(:gvar, :$extout)),
          s(:str, "/"),
          s(:begin,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "arch")))),
        s(:lvar, :archlibdir),
        s(:hash,
          s(:pair,
            s(:sym, :no_install),
            s(:lvar, :noinst)),
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$prog_mode)),
          s(:pair,
            s(:sym, :strip),
            s(:gvar, :$strip)))),
      s(:send, nil, :prepare,
        s(:str, "extension objects"),
        s(:lvar, :sitearchlibdir)),
      s(:send, nil, :prepare,
        s(:str, "extension objects"),
        s(:lvar, :vendorarchlibdir)))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :ext),
      s(:sym, :arch),
      s(:sym, :hdr),
      s(:sym, :"arch-hdr")),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "extension headers"),
        s(:lvar, :archhdrdir)),
      s(:send, nil, :install_recursive,
        s(:dstr,
          s(:begin,
            s(:gvar, :$extout)),
          s(:str, "/include/"),
          s(:begin,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "arch")))),
        s(:lvar, :archhdrdir),
        s(:hash,
          s(:pair,
            s(:sym, :glob),
            s(:str, "*.h")),
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :ext),
      s(:sym, :comm),
      s(:sym, :"ext-comm")),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "extension scripts"),
        s(:lvar, :rubylibdir)),
      s(:send, nil, :install_recursive,
        s(:dstr,
          s(:begin,
            s(:gvar, :$extout)),
          s(:str, "/common")),
        s(:lvar, :rubylibdir),
        s(:hash,
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))),
      s(:send, nil, :prepare,
        s(:str, "extension scripts"),
        s(:lvar, :sitelibdir)),
      s(:send, nil, :prepare,
        s(:str, "extension scripts"),
        s(:lvar, :vendorlibdir)))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :ext),
      s(:sym, :comm),
      s(:sym, :hdr),
      s(:sym, :"comm-hdr")),
    s(:args),
    s(:begin,
      s(:lvasgn, :hdrdir,
        s(:send,
          s(:lvar, :rubyhdrdir), :+,
          s(:str, "/ruby"))),
      s(:send, nil, :prepare,
        s(:str, "extension headers"),
        s(:lvar, :hdrdir)),
      s(:send, nil, :install_recursive,
        s(:dstr,
          s(:begin,
            s(:gvar, :$extout)),
          s(:str, "/include/ruby")),
        s(:lvar, :hdrdir),
        s(:hash,
          s(:pair,
            s(:sym, :glob),
            s(:str, "*.h")),
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :doc),
      s(:sym, :rdoc)),
    s(:args),
    s(:if,
      s(:gvar, :$rdocdir),
      s(:begin,
        s(:lvasgn, :ridatadir,
          s(:send,
            s(:const, nil, :File), :join,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "ridir")),
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "ruby_version")),
            s(:str, "system"))),
        s(:send, nil, :prepare,
          s(:str, "rdoc"),
          s(:lvar, :ridatadir)),
        s(:send, nil, :install_recursive,
          s(:gvar, :$rdocdir),
          s(:lvar, :ridatadir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$data_mode))))), nil)),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :doc),
      s(:sym, :capi)),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "capi-docs"),
        s(:lvar, :docdir)),
      s(:send, nil, :install_recursive,
        s(:str, "doc/capi"),
        s(:send,
          s(:lvar, :docdir), :+,
          s(:str, "/capi")),
        s(:hash,
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))))),
  s(:if,
    s(:lvar, :load_relative),
    s(:begin,
      s(:casgn, nil, :PROLOG_SCRIPT,
        s(:dstr,
          s(:str, "#!/bin/sh\n# -*- ruby -*-\n"),
          s(:str, "bindir=\"${0%/*}\"\n"))),
      s(:if,
        s(:and,
          s(:send,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "LIBRUBY_RELATIVE")), :!=,
            s(:str, "yes")),
          s(:lvasgn, :libpathenv,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "LIBPATHENV")))),
        s(:begin,
          s(:lvasgn, :pathsep,
            s(:const,
              s(:const, nil, :File), :PATH_SEPARATOR)),
          s(:send,
            s(:const, nil, :PROLOG_SCRIPT), :<<,
            s(:dstr,
              s(:str, "prefix=\"${bindir%/bin}\"\n"),
              s(:str, "export "),
              s(:begin,
                s(:lvar, :libpathenv)),
              s(:str, "=\"$prefix/lib${"),
              s(:begin,
                s(:lvar, :libpathenv)),
              s(:str, ":+"),
              s(:begin,
                s(:lvar, :pathsep)),
              s(:str, "$"),
              s(:begin,
                s(:lvar, :libpathenv)),
              s(:str, "}\"\n")))), nil),
      s(:send,
        s(:const, nil, :PROLOG_SCRIPT), :<<,
        s(:dstr,
          s(:str, "exec \"$bindir/"),
          s(:begin,
            s(:lvar, :ruby_install_name)),
          s(:str, "\" -x \"$0\" \"$@\"\n")))),
    s(:casgn, nil, :PROLOG_SCRIPT,
      s(:nil))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :comm),
      s(:sym, :bin),
      s(:sym, :"bin-comm")),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "command scripts"),
        s(:lvar, :bindir)),
      s(:lvasgn, :ruby_shebang,
        s(:send,
          s(:const, nil, :File), :join,
          s(:lvar, :bindir),
          s(:lvar, :ruby_install_name))),
      s(:if,
        s(:const,
          s(:const, nil, :File), :ALT_SEPARATOR),
        s(:begin,
          s(:lvasgn, :ruby_bin,
            s(:send,
              s(:lvar, :ruby_shebang), :tr,
              s(:const,
                s(:const, nil, :File), :SEPARATOR),
              s(:const,
                s(:const, nil, :File), :ALT_SEPARATOR))),
          s(:if,
            s(:send,
              s(:gvar, :$cmdtype), :==,
              s(:str, "exe")),
            s(:lvasgn, :stub,
              s(:rescue,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :File), :open,
                      s(:str, "rubystub.exe"),
                      s(:str, "rb")),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read)), :<<,
                  s(:str, "\n")),
                s(:resbody, nil, nil,
                  s(:nil)), nil)), nil)), nil),
      s(:if,
        s(:lvasgn, :trans,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "program_transform_name"))),
        s(:begin,
          s(:lvasgn, :exp,
            s(:array)),
          s(:send,
            s(:lvar, :trans), :gsub!,
            s(:regexp,
              s(:str, "\\$\\$"),
              s(:regopt)),
            s(:str, "$")),
          s(:block,
            s(:send,
              s(:lvar, :trans), :scan,
              s(:regexp,
                s(:str, "\\G[\\s;]*(/(?:\\\\.|[^/])*/)?([sy])(\\\\?\\W)((?:(?!\\3)(?:\\\\.|.))*)\\3((?:(?!\\3)(?:\\\\.|.))*)\\3([gi]*)"),
                s(:regopt))),
            s(:args,
              s(:arg, :addr),
              s(:arg, :cmd),
              s(:arg, :sep),
              s(:arg, :pat),
              s(:arg, :rep),
              s(:arg, :opt)),
            s(:begin,
              s(:and_asgn,
                s(:lvasgn, :addr),
                s(:send,
                  s(:const, nil, :Regexp), :new,
                  s(:send,
                    s(:lvar, :addr), :[],
                    s(:regexp,
                      s(:str, "\\A/(.*)/\\z"),
                      s(:regopt)),
                    s(:int, 1)))),
              s(:case,
                s(:lvar, :cmd),
                s(:when,
                  s(:str, "s"),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :pat), :==,
                          s(:str, "^")),
                        s(:send,
                          s(:lvar, :rep), :empty?)),
                      s(:next), nil),
                    s(:send,
                      s(:lvar, :exp), :<<,
                      s(:array,
                        s(:lvar, :addr),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :opt), :include?,
                              s(:str, "g")),
                            s(:sym, :gsub!),
                            s(:sym, :sub!))),
                        s(:send,
                          s(:const, nil, :Regexp), :new,
                          s(:lvar, :pat),
                          s(:send,
                            s(:lvar, :opt), :include?,
                            s(:str, "i"))),
                        s(:block,
                          s(:send,
                            s(:lvar, :rep), :gsub,
                            s(:regexp,
                              s(:str, "&"),
                              s(:regopt))),
                          s(:args),
                          s(:str, "\\&")))))),
                s(:when,
                  s(:str, "y"),
                  s(:send,
                    s(:lvar, :exp), :<<,
                    s(:array,
                      s(:lvar, :addr),
                      s(:sym, :tr!),
                      s(:send,
                        s(:const, nil, :Regexp), :quote,
                        s(:lvar, :pat)),
                      s(:lvar, :rep)))), nil))),
          s(:lvasgn, :trans,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :base)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :exp), :each),
                  s(:args,
                    s(:arg, :addr),
                    s(:arg, :opt),
                    s(:arg, :pat),
                    s(:arg, :rep)),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :addr), :!),
                      s(:send,
                        s(:lvar, :addr), :=~,
                        s(:lvar, :base))),
                    s(:send,
                      s(:lvar, :base), :__send__,
                      s(:lvar, :opt),
                      s(:lvar, :pat),
                      s(:lvar, :rep)), nil)),
                s(:lvar, :base))))),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "ruby"),
              s(:regopt)),
            s(:lvar, :ruby_install_name)),
          s(:lvasgn, :trans,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :base)),
              s(:send,
                s(:lvar, :ruby_install_name), :sub,
                s(:regexp,
                  s(:str, "ruby"),
                  s(:regopt)),
                s(:lvar, :base)))),
          s(:lvasgn, :trans,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :base)),
              s(:lvar, :base))))),
      s(:lvasgn, :prebatch,
        s(:dstr,
          s(:str, ":\"\"||{ \"\"=> %q<-*- ruby -*-"),
          s(:str, "\n"))),
      s(:lvasgn, :postbatch,
        s(:if,
          s(:const, nil, :PROLOG_SCRIPT),
          s(:dstr,
            s(:str, "};{\n"),
            s(:begin,
              s(:send,
                s(:const, nil, :PROLOG_SCRIPT), :sub,
                s(:regexp,
                  s(:str, "\\A(?:#.*\\n)*"),
                  s(:regopt)),
                s(:str, "")))),
          s(:str, ""))),
      s(:send,
        s(:lvar, :postbatch), :<<,
        s(:str, ">,\n}\n")),
      s(:send,
        s(:lvar, :postbatch), :gsub!,
        s(:regexp,
          s(:str, "(?=\\n)"),
          s(:regopt)),
        s(:str, " #")),
      s(:block,
        s(:send, nil, :install_recursive,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :srcdir),
            s(:str, "bin")),
          s(:lvar, :bindir),
          s(:hash,
            s(:pair,
              s(:sym, :maxdepth),
              s(:int, 1)))),
        s(:args,
          s(:arg, :src),
          s(:arg, :cmd)),
        s(:begin,
          s(:lvasgn, :cmd,
            s(:block,
              s(:send,
                s(:lvar, :cmd), :sub,
                s(:regexp,
                  s(:str, "[^/]*\\z"),
                  s(:regopt, :m))),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:const, nil, :RbConfig), :expand,
                s(:send,
                  s(:lvar, :trans), :[],
                  s(:lvar, :n))))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :shebang),
              s(:lvasgn, :body)),
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :src),
                s(:str, "rb")),
              s(:args,
                s(:arg, :f)),
              s(:next,
                s(:send,
                  s(:lvar, :f), :gets),
                s(:send,
                  s(:lvar, :f), :read)))),
          s(:or,
            s(:lvar, :shebang),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "empty file - "),
                s(:begin,
                  s(:lvar, :src))))),
          s(:if,
            s(:and,
              s(:const, nil, :PROLOG_SCRIPT),
              s(:send,
                s(:gvar, :$cmdtype), :!)),
            s(:block,
              s(:send,
                s(:lvar, :shebang), :sub!,
                s(:regexp,
                  s(:str, "\\A(\\#!.*?ruby\\b)?"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:const, nil, :PROLOG_SCRIPT), :+,
                s(:begin,
                  s(:or,
                    s(:nth_ref, 1),
                    s(:str, "#!ruby\n"))))),
            s(:block,
              s(:send,
                s(:lvar, :shebang), :sub!,
                s(:regexp,
                  s(:str, "\\A(\\#!.*?ruby\\b)?"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:send,
                  s(:str, "#!"), :+,
                  s(:lvar, :ruby_shebang)), :+,
                s(:begin,
                  s(:if,
                    s(:nth_ref, 1),
                    s(:str, ""),
                    s(:str, "\n")))))),
          s(:send,
            s(:lvar, :shebang), :sub!,
            s(:regexp,
              s(:str, "\\r$"),
              s(:regopt)),
            s(:str, "")),
          s(:send,
            s(:lvar, :body), :gsub!,
            s(:regexp,
              s(:str, "\\r$"),
              s(:regopt)),
            s(:str, "")),
          s(:if,
            s(:gvar, :$cmdtype),
            s(:send,
              s(:lvar, :cmd), :<<,
              s(:dstr,
                s(:str, "."),
                s(:begin,
                  s(:gvar, :$cmdtype)))), nil),
          s(:block,
            s(:send, nil, :open_for_install,
              s(:lvar, :cmd),
              s(:gvar, :$script_mode)),
            s(:args),
            s(:case,
              s(:gvar, :$cmdtype),
              s(:when,
                s(:str, "exe"),
                s(:send,
                  s(:send,
                    s(:lvar, :stub), :+,
                    s(:lvar, :shebang)), :+,
                  s(:lvar, :body))),
              s(:when,
                s(:str, "cmd"),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :prebatch), :+,
                        s(:dstr,
                          s(:str, "@\"%~dp0"),
                          s(:begin,
                            s(:lvar, :ruby_install_name)),
                          s(:str, "\" -x \"%~f0\" %*\n"),
                          s(:str, "@exit /b %ERRORLEVEL%\n"))), :<<,
                      s(:lvar, :postbatch)), :<<,
                    s(:lvar, :shebang)), :<<,
                  s(:lvar, :body))),
              s(:send,
                s(:lvar, :shebang), :+,
                s(:lvar, :body)))))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :comm),
      s(:sym, :lib)),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "library scripts"),
        s(:lvar, :rubylibdir)),
      s(:lvasgn, :noinst,
        s(:array,
          s(:str, "README*"),
          s(:str, "*.txt"),
          s(:str, "*.rdoc"),
          s(:str, "*.gemspec"))),
      s(:send, nil, :install_recursive,
        s(:send,
          s(:const, nil, :File), :join,
          s(:lvar, :srcdir),
          s(:str, "lib")),
        s(:lvar, :rubylibdir),
        s(:hash,
          s(:pair,
            s(:sym, :no_install),
            s(:lvar, :noinst)),
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :comm),
      s(:sym, :hdr),
      s(:sym, :"comm-hdr")),
    s(:args),
    s(:begin,
      s(:send, nil, :prepare,
        s(:str, "common headers"),
        s(:lvar, :rubyhdrdir)),
      s(:lvasgn, :noinst,
        s(:array)),
      s(:if,
        s(:send,
          s(:const, nil, :RUBY_PLATFORM), :=~,
          s(:regexp,
            s(:str, "mswin|mingw|bccwin"),
            s(:regopt))), nil,
        s(:send,
          s(:lvar, :noinst), :<<,
          s(:str, "win32.h"))),
      s(:if,
        s(:send,
          s(:lvar, :noinst), :empty?),
        s(:lvasgn, :noinst,
          s(:nil)), nil),
      s(:send, nil, :install_recursive,
        s(:send,
          s(:const, nil, :File), :join,
          s(:lvar, :srcdir),
          s(:str, "include")),
        s(:lvar, :rubyhdrdir),
        s(:hash,
          s(:pair,
            s(:sym, :no_install),
            s(:lvar, :noinst)),
          s(:pair,
            s(:sym, :glob),
            s(:str, "*.h")),
          s(:pair,
            s(:sym, :mode),
            s(:gvar, :$data_mode)))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :local),
      s(:sym, :comm),
      s(:sym, :man)),
    s(:args),
    s(:begin,
      s(:lvasgn, :mdocs,
        s(:send,
          s(:const, nil, :Dir), :[],
          s(:dstr,
            s(:begin,
              s(:lvar, :srcdir)),
            s(:str, "/man/*.[1-9]")))),
      s(:send, nil, :prepare,
        s(:str, "manpages"),
        s(:lvar, :mandir),
        s(:block,
          s(:send,
            s(:send,
              s(:begin,
                s(:send,
                  s(:array), :|,
                  s(:block,
                    s(:send,
                      s(:lvar, :mdocs), :collect),
                    s(:args,
                      s(:arg, :mdoc)),
                    s(:send,
                      s(:lvar, :mdoc), :[],
                      s(:regexp,
                        s(:str, "\\d+$"),
                        s(:regopt)))))), :sort), :collect),
          s(:args,
            s(:arg, :sec)),
          s(:dstr,
            s(:str, "man"),
            s(:begin,
              s(:lvar, :sec))))),
      s(:case,
        s(:gvar, :$mantype),
        s(:when,
          s(:regexp,
            s(:str, "\\.(?:(gz)|bz2)\\z"),
            s(:regopt)),
          s(:begin,
            s(:lvasgn, :compress,
              s(:if,
                s(:nth_ref, 1),
                s(:str, "gzip"),
                s(:str, "bzip2"))),
            s(:lvasgn, :suffix,
              s(:back_ref, :$&)))), nil),
      s(:lvasgn, :mandir,
        s(:send,
          s(:const, nil, :File), :join,
          s(:lvar, :mandir),
          s(:str, "man"))),
      s(:lvasgn, :has_goruby,
        s(:send,
          s(:const, nil, :File), :exist?,
          s(:send,
            s(:lvar, :goruby_install_name), :+,
            s(:lvar, :exeext)))),
      s(:if,
        s(:send,
          s(:regexp,
            s(:str, "\\Adoc\\b"),
            s(:regopt)), :!~,
          s(:gvar, :$mantype)),
        s(:send, nil, :require,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :srcdir),
            s(:str, "tool/mdoc2man.rb"))), nil),
      s(:block,
        s(:send,
          s(:lvar, :mdocs), :each),
        s(:args,
          s(:arg, :mdoc)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :File), :file?,
                s(:lvar, :mdoc)),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :mdoc)),
                s(:args,
                  s(:arg, :fh)),
                s(:send,
                  s(:send,
                    s(:lvar, :fh), :read,
                    s(:int, 1)), :==,
                  s(:str, ".")))), nil,
            s(:next)),
          s(:lvasgn, :base,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :mdoc))),
          s(:if,
            s(:send,
              s(:lvar, :base), :==,
              s(:str, "goruby.1")),
            s(:if,
              s(:lvar, :has_goruby), nil,
              s(:next)), nil),
          s(:lvasgn, :destdir,
            s(:send,
              s(:lvar, :mandir), :+,
              s(:begin,
                s(:lvasgn, :section,
                  s(:send,
                    s(:lvar, :mdoc), :[],
                    s(:regexp,
                      s(:str, "\\d+$"),
                      s(:regopt))))))),
          s(:lvasgn, :destname,
            s(:send,
              s(:lvar, :ruby_install_name), :sub,
              s(:regexp,
                s(:str, "ruby"),
                s(:regopt)),
              s(:send,
                s(:lvar, :base), :chomp,
                s(:dstr,
                  s(:str, "."),
                  s(:begin,
                    s(:lvar, :section)))))),
          s(:lvasgn, :destfile,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :destdir),
              s(:dstr,
                s(:begin,
                  s(:lvar, :destname)),
                s(:str, "."),
                s(:begin,
                  s(:lvar, :section))))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\Adoc\\b"),
                s(:regopt)),
              s(:gvar, :$mantype)),
            s(:if,
              s(:lvar, :compress),
              s(:begin,
                s(:lvasgn, :w,
                  s(:block,
                    s(:send, nil, :open,
                      s(:lvar, :mdoc)),
                    s(:args,
                      s(:arg, :f)),
                    s(:begin,
                      s(:lvasgn, :stdin,
                        s(:send,
                          s(:const, nil, :STDIN), :dup)),
                      s(:send,
                        s(:const, nil, :STDIN), :reopen,
                        s(:lvar, :f)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:begin,
                            s(:send,
                              s(:lvar, :destfile), :<<,
                              s(:lvar, :suffix)),
                            s(:block,
                              s(:send,
                                s(:const, nil, :IO), :popen,
                                s(:lvar, :compress)),
                              s(:args,
                                s(:arg, :f)),
                              s(:send,
                                s(:lvar, :f), :read))),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :STDIN), :reopen,
                              s(:lvar, :stdin)),
                            s(:send,
                              s(:lvar, :stdin), :close))))))),
                s(:block,
                  s(:send, nil, :open_for_install,
                    s(:lvar, :destfile),
                    s(:gvar, :$data_mode)),
                  s(:args),
                  s(:lvar, :w))),
              s(:send, nil, :install,
                s(:lvar, :mdoc),
                s(:lvar, :destfile),
                s(:hash,
                  s(:pair,
                    s(:sym, :mode),
                    s(:gvar, :$data_mode))))),
            s(:begin,
              s(:sclass,
                s(:begin,
                  s(:lvasgn, :w,
                    s(:array))),
                s(:alias,
                  s(:sym, :print),
                  s(:sym, :push))),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :mdoc)),
                s(:args,
                  s(:arg, :r)),
                s(:send,
                  s(:const, nil, :Mdoc2Man), :mdoc2man,
                  s(:lvar, :r),
                  s(:lvar, :w))),
              s(:lvasgn, :w,
                s(:send,
                  s(:lvar, :w), :join,
                  s(:str, ""))),
              s(:if,
                s(:lvar, :compress),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "tmpdir")),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Dir), :mktmpdir,
                      s(:str, "man")),
                    s(:args,
                      s(:arg, :d)),
                    s(:begin,
                      s(:lvasgn, :dest,
                        s(:send,
                          s(:const, nil, :File), :join,
                          s(:lvar, :d),
                          s(:send,
                            s(:const, nil, :File), :basename,
                            s(:lvar, :destfile)))),
                      s(:block,
                        s(:send,
                          s(:const, nil, :File), :open,
                          s(:lvar, :dest),
                          s(:str, "wb")),
                        s(:args,
                          s(:arg, :f)),
                        s(:send,
                          s(:lvar, :f), :write,
                          s(:lvar, :w))),
                      s(:if,
                        s(:send, nil, :system,
                          s(:lvar, :compress),
                          s(:lvar, :dest)),
                        s(:begin,
                          s(:lvasgn, :w,
                            s(:block,
                              s(:send,
                                s(:const, nil, :File), :open,
                                s(:send,
                                  s(:lvar, :dest), :+,
                                  s(:lvar, :suffix)),
                                s(:str, "rb")),
                              s(:args,
                                s(:arg, :f)),
                              s(:send,
                                s(:lvar, :f), :read))),
                          s(:send,
                            s(:lvar, :destfile), :<<,
                            s(:lvar, :suffix))), nil)))), nil),
              s(:block,
                s(:send, nil, :open_for_install,
                  s(:lvar, :destfile),
                  s(:gvar, :$data_mode)),
                s(:args),
                s(:lvar, :w)))))))),
  s(:module,
    s(:const, nil, :RbInstall),
    s(:begin,
      s(:module,
        s(:const, nil, :Specs),
        s(:begin,
          s(:class,
            s(:const, nil, :FileCollector), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :base_dir)),
                s(:ivasgn, :@base_dir,
                  s(:lvar, :base_dir))),
              s(:def, :collect,
                s(:args),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :ruby_libraries), :+,
                      s(:send, nil, :built_libraries))), :sort)),
              s(:send, nil, :private),
              s(:def, :type,
                s(:args),
                s(:begin,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "/(ext|lib)?/.*?\\z"),
                      s(:regopt)),
                    s(:ivar, :@base_dir)),
                  s(:nth_ref, 1))),
              s(:def, :ruby_libraries,
                s(:args),
                s(:begin,
                  s(:case,
                    s(:send, nil, :type),
                    s(:when,
                      s(:str, "ext"),
                      s(:begin,
                        s(:lvasgn, :prefix,
                          s(:dstr,
                            s(:begin,
                              s(:gvar, :$extout)),
                            s(:str, "/common/"))),
                        s(:lvasgn, :base,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :prefix)),
                            s(:begin,
                              s(:send, nil, :relative_base)))))),
                    s(:when,
                      s(:str, "lib"),
                      s(:begin,
                        s(:lvasgn, :base,
                          s(:ivar, :@base_dir)),
                        s(:lvasgn, :prefix,
                          s(:send,
                            s(:send,
                              s(:lvar, :base), :sub,
                              s(:regexp,
                                s(:str, "lib/.*?\\z"),
                                s(:regopt)),
                              s(:str, "")), :+,
                            s(:str, "lib/"))))), nil),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Dir), :glob,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :base)),
                          s(:str, "{.rb,/**/*.rb}"))), :collect),
                    s(:args,
                      s(:arg, :ruby_source)),
                    s(:send, nil, :remove_prefix,
                      s(:lvar, :prefix),
                      s(:lvar, :ruby_source))))),
              s(:def, :built_libraries,
                s(:args),
                s(:case,
                  s(:send, nil, :type),
                  s(:when,
                    s(:str, "ext"),
                    s(:begin,
                      s(:lvasgn, :prefix,
                        s(:dstr,
                          s(:begin,
                            s(:gvar, :$extout)),
                          s(:str, "/"),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :CONFIG), :[],
                              s(:str, "arch"))),
                          s(:str, "/"))),
                      s(:lvasgn, :base,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :prefix)),
                          s(:begin,
                            s(:send, nil, :relative_base)))),
                      s(:lvasgn, :dlext,
                        s(:send,
                          s(:const, nil, :CONFIG), :[],
                          s(:str, "DLEXT"))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Dir), :glob,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :base)),
                              s(:str, "{."),
                              s(:begin,
                                s(:lvar, :dlext)),
                              s(:str, ",/**/*."),
                              s(:begin,
                                s(:lvar, :dlext)),
                              s(:str, "}"))), :collect),
                        s(:args,
                          s(:arg, :built_library)),
                        s(:send, nil, :remove_prefix,
                          s(:lvar, :prefix),
                          s(:lvar, :built_library))))),
                  s(:when,
                    s(:str, "lib"),
                    s(:array)), nil)),
              s(:def, :relative_base,
                s(:args),
                s(:begin,
                  s(:send,
                    s(:regexp,
                      s(:str, "/"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:send, nil, :type))),
                      s(:str, "/(.*?)\\z"),
                      s(:regopt)), :=~,
                    s(:ivar, :@base_dir)),
                  s(:nth_ref, 1))),
              s(:def, :remove_prefix,
                s(:args,
                  s(:arg, :prefix),
                  s(:arg, :string)),
                s(:send,
                  s(:lvar, :string), :sub,
                  s(:regexp,
                    s(:str, "\\A"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Regexp), :escape,
                        s(:lvar, :prefix))),
                    s(:regopt)),
                  s(:str, ""))))),
          s(:class,
            s(:const, nil, :Reader),
            s(:send,
              s(:const, nil, :Struct), :new,
              s(:sym, :src)),
            s(:begin,
              s(:def, :gemspec,
                s(:args),
                s(:or_asgn,
                  s(:ivasgn, :@gemspec),
                  s(:kwbegin,
                    s(:lvasgn, :spec,
                      s(:or,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Gem), :Specification), :load,
                          s(:send, nil, :src)),
                        s(:send, nil, :raise,
                          s(:dstr,
                            s(:str, "invalid spec in "),
                            s(:begin,
                              s(:send, nil, :src)))))),
                    s(:lvasgn, :file_collector,
                      s(:send,
                        s(:const, nil, :FileCollector), :new,
                        s(:send,
                          s(:const, nil, :File), :dirname,
                          s(:send, nil, :src)))),
                    s(:send,
                      s(:lvar, :spec), :files=,
                      s(:send,
                        s(:lvar, :file_collector), :collect)),
                    s(:lvar, :spec)))),
              s(:def, :spec_source,
                s(:args),
                s(:send,
                  s(:ivar, :@gemspec), :to_ruby)))))),
      s(:class,
        s(:const, nil, :UnpackedInstaller),
        s(:const,
          s(:const, nil, :Gem), :Installer),
        s(:begin,
          s(:module,
            s(:const, nil, :DirPackage),
            s(:def, :extract_files,
              s(:args,
                s(:arg, :destination_dir),
                s(:optarg, :pattern,
                  s(:str, "*"))),
              s(:begin,
                s(:lvasgn, :path,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:send,
                      s(:ivar, :@gem), :path))),
                s(:if,
                  s(:send,
                    s(:lvar, :path), :==,
                    s(:lvar, :destination_dir)),
                  s(:return), nil),
                s(:send,
                  s(:const, nil, :File), :chmod,
                  s(:int, 448),
                  s(:lvar, :destination_dir)),
                s(:lvasgn, :mode,
                  s(:if,
                    s(:send,
                      s(:lvar, :pattern), :==,
                      s(:str, "bin/*")),
                    s(:gvar, :$script_mode),
                    s(:gvar, :$data_mode))),
                s(:send, nil, :install_recursive,
                  s(:lvar, :path),
                  s(:send, nil, :without_destdir,
                    s(:lvar, :destination_dir)),
                  s(:hash,
                    s(:pair,
                      s(:sym, :glob),
                      s(:lvar, :pattern)),
                    s(:pair,
                      s(:sym, :no_install),
                      s(:str, "*.gemspec")),
                    s(:pair,
                      s(:sym, :mode),
                      s(:lvar, :mode)))),
                s(:send,
                  s(:const, nil, :File), :chmod,
                  s(:gvar, :$dir_mode),
                  s(:lvar, :destination_dir))))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :spec),
              s(:restarg, :options)),
            s(:begin,
              s(:super,
                s(:send,
                  s(:lvar, :spec), :loaded_from),
                s(:splat,
                  s(:lvar, :options))),
              s(:send,
                s(:send,
                  s(:ivar, :@package), :extend,
                  s(:const, nil, :DirPackage)), :spec=,
                s(:lvar, :spec)))),
          s(:def, :write_cache_file,
            s(:args), nil))))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Installer), nil,
    s(:begin,
      s(:lvasgn, :install,
        s(:send, nil, :instance_method,
          s(:sym, :install))),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :install)),
        s(:args),
        s(:begin,
          s(:send,
            s(:send, nil, :spec), :post_install_message=,
            s(:nil)),
          s(:send,
            s(:send,
              s(:lvar, :install), :bind,
              s(:self)), :call))),
      s(:lvasgn, :generate_bin_script,
        s(:send, nil, :instance_method,
          s(:sym, :generate_bin_script))),
      s(:block,
        s(:send, nil, :define_method,
          s(:sym, :generate_bin_script)),
        s(:args,
          s(:arg, :filename),
          s(:arg, :bindir)),
        s(:begin,
          s(:send,
            s(:send,
              s(:lvar, :generate_bin_script), :bind,
              s(:self)), :call,
            s(:lvar, :filename),
            s(:lvar, :bindir)),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:gvar, :$script_mode),
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :bindir),
              s(:send, nil, :formatted_program_filename,
                s(:lvar, :filename)))))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :ext),
      s(:sym, :comm),
      s(:sym, :gem)),
    s(:args),
    s(:begin,
      s(:lvasgn, :gem_dir,
        s(:send,
          s(:const, nil, :Gem), :default_dir)),
      s(:lvasgn, :directories,
        s(:send,
          s(:const, nil, :Gem), :ensure_gem_subdirectories,
          s(:lvar, :gem_dir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$dir_mode))))),
      s(:send, nil, :prepare,
        s(:str, "default gems"),
        s(:lvar, :gem_dir),
        s(:lvar, :directories)),
      s(:lvasgn, :spec_dir,
        s(:send,
          s(:const, nil, :File), :join,
          s(:lvar, :gem_dir),
          s(:send,
            s(:send,
              s(:lvar, :directories), :grep,
              s(:regexp,
                s(:str, "^spec"),
                s(:regopt))), :[],
            s(:int, 0)))),
      s(:lvasgn, :default_spec_dir,
        s(:dstr,
          s(:begin,
            s(:lvar, :spec_dir)),
          s(:str, "/default"))),
      s(:send, nil, :makedirs,
        s(:lvar, :default_spec_dir)),
      s(:lvasgn, :gems,
        s(:hash)),
      s(:block,
        s(:send,
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:send,
              s(:lvar, :srcdir), :+,
              s(:str, "/{lib,ext}/**/*.gemspec"))), :each),
        s(:args,
          s(:arg, :src)),
        s(:begin,
          s(:lvasgn, :specgen,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RbInstall), :Specs), :Reader), :new,
              s(:lvar, :src))),
          s(:or_asgn,
            s(:send,
              s(:lvar, :gems), :[],
              s(:send,
                s(:send,
                  s(:lvar, :specgen), :gemspec), :name)),
            s(:lvar, :specgen)))),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :gems), :sort), :each),
        s(:args,
          s(:arg, :name),
          s(:arg, :specgen)),
        s(:begin,
          s(:lvasgn, :gemspec,
            s(:send,
              s(:lvar, :specgen), :gemspec)),
          s(:lvasgn, :full_name,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :gemspec), :name)),
              s(:str, "-"),
              s(:begin,
                s(:send,
                  s(:lvar, :gemspec), :version)))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:str, " "), :*,
                  s(:int, 30))),
              s(:begin,
                s(:send,
                  s(:lvar, :gemspec), :name)),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:lvar, :gemspec), :version)))),
          s(:lvasgn, :gemspec_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :default_spec_dir),
              s(:dstr,
                s(:begin,
                  s(:lvar, :full_name)),
                s(:str, ".gemspec")))),
          s(:block,
            s(:send, nil, :open_for_install,
              s(:lvar, :gemspec_path),
              s(:gvar, :$data_mode)),
            s(:args),
            s(:send,
              s(:lvar, :specgen), :spec_source)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :gemspec), :executables), :empty?), nil,
            s(:begin,
              s(:lvasgn, :bin_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :gem_dir),
                  s(:str, "gems"),
                  s(:lvar, :full_name),
                  s(:str, "bin"))),
              s(:send, nil, :makedirs,
                s(:lvar, :bin_dir)),
              s(:lvasgn, :execs,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :gemspec), :executables), :map),
                  s(:args,
                    s(:arg, :exec)),
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :srcdir),
                    s(:str, "bin"),
                    s(:lvar, :exec)))),
              s(:send, nil, :install,
                s(:lvar, :execs),
                s(:lvar, :bin_dir),
                s(:hash,
                  s(:pair,
                    s(:sym, :mode),
                    s(:gvar, :$script_mode)))))))))),
  s(:block,
    s(:send, nil, :install?,
      s(:sym, :ext),
      s(:sym, :comm),
      s(:sym, :gem)),
    s(:args),
    s(:begin,
      s(:lvasgn, :gem_dir,
        s(:send,
          s(:const, nil, :Gem), :default_dir)),
      s(:lvasgn, :directories,
        s(:send,
          s(:const, nil, :Gem), :ensure_gem_subdirectories,
          s(:lvar, :gem_dir),
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:gvar, :$dir_mode))))),
      s(:send, nil, :prepare,
        s(:str, "bundle gems"),
        s(:lvar, :gem_dir),
        s(:lvar, :directories)),
      s(:lvasgn, :install_dir,
        s(:send, nil, :with_destdir,
          s(:lvar, :gem_dir))),
      s(:lvasgn, :installed_gems,
        s(:hash)),
      s(:lvasgn, :options,
        s(:hash,
          s(:pair,
            s(:sym, :install_dir),
            s(:lvar, :install_dir)),
          s(:pair,
            s(:sym, :bin_dir),
            s(:send, nil, :with_destdir,
              s(:lvar, :bindir))),
          s(:pair,
            s(:sym, :domain),
            s(:sym, :local)),
          s(:pair,
            s(:sym, :ignore_dependencies),
            s(:true)),
          s(:pair,
            s(:sym, :dir_mode),
            s(:gvar, :$dir_mode)),
          s(:pair,
            s(:sym, :data_mode),
            s(:gvar, :$data_mode)),
          s(:pair,
            s(:sym, :prog_mode),
            s(:gvar, :$prog_mode)),
          s(:pair,
            s(:sym, :wrappers),
            s(:true)),
          s(:pair,
            s(:sym, :format_executable),
            s(:true)))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Specification), :each_spec,
          s(:array,
            s(:send,
              s(:lvar, :srcdir), :+,
              s(:str, "/gems/*")))),
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :ins,
            s(:send,
              s(:const,
                s(:const, nil, :RbInstall), :UnpackedInstaller), :new,
              s(:lvar, :spec),
              s(:lvar, :options))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:str, " "), :*,
                  s(:int, 30))),
              s(:begin,
                s(:send,
                  s(:lvar, :spec), :name)),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:lvar, :spec), :version)))),
          s(:send,
            s(:lvar, :ins), :install),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:gvar, :$data_mode),
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :install_dir),
              s(:str, "specifications"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :full_name)),
                s(:str, ".gemspec")))),
          s(:send,
            s(:lvar, :installed_gems), :[]=,
            s(:send,
              s(:lvar, :spec), :full_name),
            s(:true)))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :installed_gems),
          s(:lvasgn, :gems)),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:lvar, :srcdir), :+,
                s(:str, "/gems/*.gem"))), :partition),
          s(:args,
            s(:arg, :gem)),
          s(:send,
            s(:lvar, :installed_gems), :key?,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :gem),
              s(:str, ".gem"))))),
      s(:if,
        s(:send,
          s(:lvar, :installed_gems), :empty?), nil,
        s(:send, nil, :install,
          s(:lvar, :installed_gems),
          s(:send,
            s(:lvar, :gem_dir), :+,
            s(:str, "/cache")))),
      s(:if,
        s(:send,
          s(:lvar, :gems), :empty?),
        s(:next), nil),
      s(:if,
        s(:defined?,
          s(:const, nil, :Zlib)),
        s(:begin,
          s(:send,
            s(:const, nil, :Gem), :instance_variable_set,
            s(:sym, :@ruby),
            s(:send, nil, :with_destdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :bindir),
                s(:lvar, :ruby_install_name)))),
          s(:block,
            s(:send,
              s(:lvar, :gems), :each),
            s(:args,
              s(:arg, :gem)),
            s(:begin,
              s(:send,
                s(:const, nil, :Gem), :install,
                s(:lvar, :gem),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default),
                s(:lvar, :options)),
              s(:lvasgn, :gemname,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :gem))),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:str, " "), :*,
                      s(:int, 30))),
                  s(:begin,
                    s(:lvar, :gemname)))))),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:gvar, :$dir_mode),
            s(:splat,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:lvar, :install_dir), :+,
                  s(:str, "/**/"))))),
          s(:send,
            s(:const, nil, :File), :chmod,
            s(:gvar, :$data_mode),
            s(:splat,
              s(:send,
                s(:const, nil, :Dir), :glob,
                s(:send,
                  s(:lvar, :install_dir), :+,
                  s(:str, "/specifications/*.gemspec")))))),
        s(:send, nil, :puts,
          s(:str, "skip installing bundle gems because of lacking zlib"))))),
  s(:send, nil, :parse_args),
  s(:send, nil, :include,
    s(:const, nil, :FileUtils)),
  s(:if,
    s(:gvar, :$dryrun),
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :FileUtils), :NoWrite)), nil),
  s(:ivasgn, :@fileutils_output,
    s(:const, nil, :STDOUT)),
  s(:ivasgn, :@fileutils_label,
    s(:str, "")),
  s(:lvasgn, :all,
    s(:send,
      s(:gvar, :$install), :delete,
      s(:sym, :all))),
  s(:if,
    s(:send,
      s(:gvar, :$install), :empty?),
    s(:send,
      s(:send,
        s(:gvar, :$install), :<<,
        s(:sym, :local)), :<<,
      s(:sym, :ext)), nil),
  s(:lvasgn, :installs,
    s(:block,
      s(:send,
        s(:gvar, :$install), :map),
      s(:args,
        s(:arg, :inst)),
      s(:begin,
        s(:if,
          s(:or,
            s(:send,
              s(:begin,
                s(:lvasgn, :procs,
                  s(:send,
                    s(:gvar, :$install_procs), :[],
                    s(:lvar, :inst)))), :!),
            s(:send,
              s(:lvar, :procs), :empty?)),
          s(:next,
            s(:send, nil, :warn,
              s(:dstr,
                s(:str, "unknown install target - "),
                s(:begin,
                  s(:lvar, :inst))))), nil),
        s(:lvar, :procs)))),
  s(:send,
    s(:lvar, :installs), :flatten!),
  s(:send,
    s(:lvar, :installs), :uniq!),
  s(:if,
    s(:lvar, :all),
    s(:op_asgn,
      s(:lvasgn, :installs), :|,
      s(:send,
        s(:gvar, :$install_procs), :[],
        s(:sym, :all))), nil),
  s(:block,
    s(:send,
      s(:lvar, :installs), :each),
    s(:args,
      s(:arg, :block)),
    s(:begin,
      s(:lvasgn, :dir,
        s(:send,
          s(:const, nil, :Dir), :pwd)),
      s(:kwbegin,
        s(:ensure,
          s(:send,
            s(:lvar, :block), :call),
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :dir)))))))
