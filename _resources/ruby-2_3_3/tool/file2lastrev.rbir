s(:begin,
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../vcs"),
      s(:str, "(string)"))),
  s(:casgn, nil, :Program,
    s(:gvar, :$0)),
  s(:ivasgn, :@output,
    s(:nil)),
  s(:defs,
    s(:self), :output=,
    s(:args,
      s(:arg, :output)),
    s(:begin,
      s(:if,
        s(:and,
          s(:ivar, :@output),
          s(:send,
            s(:ivar, :@output), :!=,
            s(:lvar, :output))),
        s(:send, nil, :raise,
          s(:str, "you can specify only one of --changed, --revision.h and --doxygen")), nil),
      s(:ivasgn, :@output,
        s(:lvar, :output)))),
  s(:ivasgn, :@suppress_not_found,
    s(:false)),
  s(:lvasgn, :format,
    s(:str, "%Y-%m-%dT%H:%M:%S%z")),
  s(:lvasgn, :srcdir,
    s(:nil)),
  s(:lvasgn, :parser,
    s(:block,
      s(:send,
        s(:const, nil, :OptionParser), :new),
      s(:args,
        s(:arg, :opts)),
      s(:begin,
        s(:block,
          s(:send,
            s(:lvar, :opts), :on,
            s(:str, "--srcdir=PATH"),
            s(:str, "use PATH as source directory")),
          s(:args,
            s(:arg, :path)),
          s(:lvasgn, :srcdir,
            s(:lvar, :path))),
        s(:block,
          s(:send,
            s(:lvar, :opts), :on,
            s(:str, "--changed"),
            s(:str, "changed rev")),
          s(:args),
          s(:send,
            s(:self), :output=,
            s(:sym, :changed))),
        s(:block,
          s(:send,
            s(:lvar, :opts), :on,
            s(:str, "--revision.h"),
            s(:str, "RUBY_REVISION macro")),
          s(:args),
          s(:send,
            s(:self), :output=,
            s(:sym, :revision_h))),
        s(:block,
          s(:send,
            s(:lvar, :opts), :on,
            s(:str, "--doxygen"),
            s(:str, "Doxygen format")),
          s(:args),
          s(:send,
            s(:self), :output=,
            s(:sym, :doxygen))),
        s(:block,
          s(:send,
            s(:lvar, :opts), :on,
            s(:str, "--modified[=FORMAT]"),
            s(:str, "modified time")),
          s(:args,
            s(:arg, :fmt)),
          s(:begin,
            s(:send,
              s(:self), :output=,
              s(:sym, :modified)),
            s(:if,
              s(:lvar, :fmt),
              s(:lvasgn, :format,
                s(:lvar, :fmt)), nil))),
        s(:block,
          s(:send,
            s(:lvar, :opts), :on,
            s(:str, "-q"),
            s(:str, "--suppress_not_found")),
          s(:args),
          s(:ivasgn, :@suppress_not_found,
            s(:true)))))),
  s(:rescue,
    s(:send,
      s(:lvar, :parser), :parse!),
    s(:resbody, nil, nil,
      s(:send, nil, :abort,
        s(:dstr,
          s(:begin,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:const, nil, :Program))),
          s(:str, ": "),
          s(:begin,
            s(:gvar, :$!)),
          s(:str, "\n"),
          s(:begin,
            s(:lvar, :parser))))), nil),
  s(:ivasgn, :@output,
    s(:case,
      s(:ivar, :@output),
      s(:when,
        s(:sym, :changed),
        s(:nil),
        s(:block,
          s(:send,
            s(:const, nil, :Proc), :new),
          s(:args,
            s(:arg, :last),
            s(:arg, :changed)),
          s(:lvar, :changed))),
      s(:when,
        s(:sym, :revision_h),
        s(:block,
          s(:send,
            s(:const, nil, :Proc), :new),
          s(:args,
            s(:arg, :last),
            s(:arg, :changed),
            s(:arg, :modified),
            s(:arg, :branch),
            s(:arg, :title)),
          s(:send,
            s(:array,
              s(:dstr,
                s(:str, "#define RUBY_REVISION "),
                s(:begin,
                  s(:or,
                    s(:lvar, :changed),
                    s(:int, 0)))),
              s(:if,
                s(:lvar, :branch),
                s(:begin,
                  s(:lvasgn, :e,
                    s(:str, "..")),
                  s(:lvasgn, :limit,
                    s(:int, 16)),
                  s(:lvasgn, :name,
                    s(:block,
                      s(:send,
                        s(:lvar, :branch), :sub,
                        s(:regexp,
                          s(:str, "\\A(.{"),
                          s(:begin,
                            s(:send,
                              s(:lvar, :limit), :-,
                              s(:send,
                                s(:lvar, :e), :size))),
                          s(:str, "}).{"),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :e), :size), :+,
                              s(:int, 1))),
                          s(:str, ",}"),
                          s(:regopt, :o))),
                      s(:args),
                      s(:send,
                        s(:nth_ref, 1), :+,
                        s(:lvar, :e)))),
                  s(:dstr,
                    s(:str, "#define RUBY_BRANCH_NAME "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :name), :dump)))), nil),
              s(:if,
                s(:lvar, :title),
                s(:dstr,
                  s(:str, "#define RUBY_LAST_COMMIT_TITLE "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :title), :dump))), nil)), :compact))),
      s(:when,
        s(:sym, :doxygen),
        s(:block,
          s(:send,
            s(:const, nil, :Proc), :new),
          s(:args,
            s(:arg, :last),
            s(:arg, :changed)),
          s(:dstr,
            s(:str, "r"),
            s(:begin,
              s(:lvar, :changed)),
            s(:str, "/r"),
            s(:begin,
              s(:lvar, :last))))),
      s(:when,
        s(:sym, :modified),
        s(:block,
          s(:send,
            s(:const, nil, :Proc), :new),
          s(:args,
            s(:arg, :last),
            s(:arg, :changed),
            s(:arg, :modified)),
          s(:send,
            s(:lvar, :modified), :strftime,
            s(:lvar, :format)))),
      s(:send, nil, :raise,
        s(:dstr,
          s(:str, "unknown output format `"),
          s(:begin,
            s(:ivar, :@output)),
          s(:str, "'"))))),
  s(:or_asgn,
    s(:lvasgn, :srcdir),
    s(:send,
      s(:const, nil, :File), :dirname,
      s(:send,
        s(:const, nil, :File), :dirname,
        s(:const, nil, :Program)))),
  s(:kwbegin,
    s(:rescue,
      s(:lvasgn, :vcs,
        s(:send,
          s(:const, nil, :VCS), :detect,
          s(:lvar, :srcdir))),
      s(:resbody,
        s(:array,
          s(:const,
            s(:const, nil, :VCS), :NotFoundError)),
        s(:lvasgn, :e),
        s(:if,
          s(:ivar, :@suppress_not_found), nil,
          s(:send, nil, :abort,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:const, nil, :Program))),
              s(:str, ": "),
              s(:begin,
                s(:send,
                  s(:lvar, :e), :message)))))),
      s(:begin,
        s(:lvasgn, :ok,
          s(:true)),
        s(:block,
          s(:send,
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :ARGV), :empty?),
                s(:array,
                  s(:nil)),
                s(:const, nil, :ARGV))), :each),
          s(:args,
            s(:arg, :arg)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :puts,
                s(:send,
                  s(:ivar, :@output), :[],
                  s(:splat,
                    s(:send,
                      s(:lvar, :vcs), :get_revisions,
                      s(:lvar, :arg))))),
              s(:resbody, nil,
                s(:lvasgn, :e),
                s(:begin,
                  s(:if,
                    s(:ivar, :@suppress_not_found), nil,
                    s(:send, nil, :warn,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:const, nil, :File), :basename,
                            s(:const, nil, :Program))),
                        s(:str, ": "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :message))))),
                  s(:lvasgn, :ok,
                    s(:false)))), nil))),
        s(:send, nil, :exit,
          s(:lvar, :ok))))))
