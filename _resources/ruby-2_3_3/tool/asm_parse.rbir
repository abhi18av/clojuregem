s(:begin,
  s(:lvasgn, :stat,
    s(:hash)),
  s(:while,
    s(:lvasgn, :line,
      s(:send,
        s(:const, nil, :ARGF), :gets)),
    s(:if,
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "\\[start\\] (\\w+)"),
          s(:regopt)),
        s(:lvar, :line)),
      s(:begin,
        s(:lvasgn, :name,
          s(:nth_ref, 1)),
        s(:send, nil, :puts,
          s(:str, "--------------------------------------------------------------")),
        s(:send, nil, :puts,
          s(:lvar, :line)),
        s(:lvasgn, :size,
          s(:int, 0)),
        s(:lvasgn, :len,
          s(:int, 0)),
        s(:while,
          s(:lvasgn, :line,
            s(:send,
              s(:const, nil, :ARGF), :gets)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\[start\\] (\\w+)"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:begin,
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "\t; # length: "),
                    s(:begin,
                      s(:lvar, :len)),
                    s(:str, ", size: "),
                    s(:begin,
                      s(:lvar, :size)))),
                s(:send, nil, :puts,
                  s(:str, "\t; # !!")),
                s(:send,
                  s(:lvar, :stat), :[]=,
                  s(:lvar, :name),
                  s(:array,
                    s(:lvar, :len),
                    s(:lvar, :size))),
                s(:lvasgn, :name,
                  s(:nth_ref, 1)),
                s(:send, nil, :puts,
                  s(:str, "--------------------------------------------------------------")),
                s(:send, nil, :puts,
                  s(:lvar, :line)),
                s(:lvasgn, :size,
                  s(:int, 0)),
                s(:lvasgn, :len,
                  s(:int, 0)),
                s(:next)), nil),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "(\\ALM)|(\\ALB)|(\\A\\.)|(\\A/)"),
                  s(:regopt)),
                s(:lvar, :line)), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:lvar, :line)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\[length = (\\d+)\\]"),
                      s(:regopt)),
                    s(:lvar, :line)),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :len), :+,
                      s(:send,
                        s(:nth_ref, 1), :to_i)),
                    s(:op_asgn,
                      s(:lvasgn, :size), :+,
                      s(:int, 1))), nil))),
            s(:if,
              s(:and,
                s(:send,
                  s(:regexp,
                    s(:str, "__NEXT_INSN__"),
                    s(:regopt)), :!~,
                  s(:lvar, :line)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\[end  \\] (\\w+)"),
                    s(:regopt)),
                  s(:lvar, :line))),
              s(:begin,
                s(:lvasgn, :ename,
                  s(:nth_ref, 1)),
                s(:if,
                  s(:send,
                    s(:lvar, :name), :!=,
                    s(:lvar, :ename)),
                  s(:send, nil, :puts,
                    s(:dstr,
                      s(:str, "!! start with "),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, ", but end with "),
                      s(:begin,
                        s(:lvar, :ename)))), nil),
                s(:send,
                  s(:lvar, :stat), :[]=,
                  s(:lvar, :ename),
                  s(:array,
                    s(:lvar, :len),
                    s(:lvar, :size))),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "\t; # length: "),
                    s(:begin,
                      s(:lvar, :len)),
                    s(:str, ", size: "),
                    s(:begin,
                      s(:lvar, :size)))),
                s(:break)), nil)))), nil)),
  s(:block,
    s(:send,
      s(:block,
        s(:send,
          s(:lvar, :stat), :sort_by),
        s(:args,
          s(:arg, :a),
          s(:arg, :b)),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :b), :[],
                s(:int, 0)), :-@), :*,
            s(:int, 1000)), :-,
          s(:send,
            s(:lvar, :a), :[],
            s(:int, 0)))), :each),
    s(:args,
      s(:arg, :a),
      s(:arg, :b)),
    s(:send, nil, :puts,
      s(:dstr,
        s(:begin,
          s(:lvar, :a)),
        s(:str, "\t"),
        s(:begin,
          s(:send,
            s(:lvar, :b), :join,
            s(:str, "\t")))))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "total length :\t"),
      s(:begin,
        s(:block,
          s(:send,
            s(:lvar, :stat), :inject,
            s(:int, 0)),
          s(:args,
            s(:arg, :r),
            s(:arg, :e)),
          s(:send,
            s(:lvar, :r), :+,
            s(:send,
              s(:send,
                s(:lvar, :e), :[],
                s(:int, 1)), :[],
              s(:int, 0))))))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "total size   :\t"),
      s(:begin,
        s(:block,
          s(:send,
            s(:lvar, :stat), :inject,
            s(:int, 0)),
          s(:args,
            s(:arg, :r),
            s(:arg, :e)),
          s(:send,
            s(:lvar, :r), :+,
            s(:send,
              s(:send,
                s(:lvar, :e), :[],
                s(:int, 1)), :[],
              s(:int, 1))))))))
