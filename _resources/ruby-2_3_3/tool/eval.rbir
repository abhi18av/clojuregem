s(:begin,
  s(:send, nil, :require,
    s(:str, "./rbconfig")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:casgn, nil, :Ruby,
    s(:or,
      s(:send,
        s(:const, nil, :ENV), :[],
        s(:str, "RUBY")),
      s(:send,
        s(:const, nil, :RbConfig), :ruby))),
  s(:casgn, nil, :OPTIONS,
    s(:block,
      s(:send,
        s(:array,
          s(:str, "opt-direct-threaded-code"),
          s(:str, "opt-basic-operations"),
          s(:str, "opt-operands-unification"),
          s(:str, "opt-instructions-unification"),
          s(:str, "opt-inline-method-cache"),
          s(:str, "opt-stack-caching")), :map),
      s(:args,
        s(:arg, :opt)),
      s(:send,
        s(:str, "--disable-"), :+,
        s(:lvar, :opt)))),
  s(:lvasgn, :opts,
    s(:send,
      s(:const, nil, :OPTIONS), :dup)),
  s(:casgn, nil, :Configs,
    s(:send,
      s(:block,
        s(:send,
          s(:const, nil, :OPTIONS), :map),
        s(:args,
          s(:arg, :opt)),
        s(:begin,
          s(:lvasgn, :o,
            s(:send,
              s(:lvar, :opts), :dup)),
          s(:send,
            s(:lvar, :opts), :delete,
            s(:lvar, :opt)),
          s(:lvar, :o))), :+,
      s(:array,
        s(:array)))),
  s(:if,
    s(:gvar, :$DEBUG),
    s(:send, nil, :pp,
      s(:const, nil, :Configs)), nil),
  s(:def, :exec_cmd,
    s(:args,
      s(:arg, :cmd)),
    s(:begin,
      s(:send, nil, :puts,
        s(:lvar, :cmd)),
      s(:if,
        s(:send, nil, :system,
          s(:lvar, :cmd)), nil,
        s(:begin,
          s(:send, nil, :p,
            s(:lvar, :cmd)),
          s(:send, nil, :raise,
            s(:str, "error")))))),
  s(:def, :dirname,
    s(:args,
      s(:arg, :idx)),
    s(:dstr,
      s(:str, "ev-"),
      s(:begin,
        s(:lvar, :idx)))),
  s(:def, :build,
    s(:args),
    s(:block,
      s(:send,
        s(:const, nil, :Configs), :each_with_index),
      s(:args,
        s(:arg, :config),
        s(:arg, :idx)),
      s(:begin,
        s(:lvasgn, :dir,
          s(:send, nil, :dirname,
            s(:lvar, :idx))),
        s(:if,
          s(:send,
            s(:const, nil, :FileTest), :exist?,
            s(:lvar, :dir)),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:lvar, :dir)), nil),
        s(:send,
          s(:const, nil, :Dir), :mkdir,
          s(:lvar, :dir)),
        s(:block,
          s(:send,
            s(:const, nil, :FileUtils), :cd,
            s(:lvar, :dir)),
          s(:args),
          s(:begin,
            s(:send, nil, :exec_cmd,
              s(:send,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :Ruby)),
                  s(:str, " ../extconf.rb ")), :+,
                s(:send,
                  s(:lvar, :config), :join,
                  s(:str, " ")))),
            s(:send, nil, :exec_cmd,
              s(:str, "make clean test-all"))))))),
  s(:def, :check,
    s(:args),
    s(:block,
      s(:send,
        s(:const, nil, :Configs), :each_with_index),
      s(:args,
        s(:arg, :c),
        s(:arg, :idx)),
      s(:begin,
        s(:send, nil, :puts,
          s(:dstr,
            s(:str, "= "),
            s(:begin,
              s(:lvar, :idx)))),
        s(:send, nil, :system,
          s(:dstr,
            s(:begin,
              s(:const, nil, :Ruby)),
            s(:str, " -r ev-"),
            s(:begin,
              s(:lvar, :idx)),
            s(:str, "/yarvcore -e 'puts YARVCore::OPTS'")))))),
  s(:def, :bench_each,
    s(:args,
      s(:arg, :idx)),
    s(:begin,
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "= "),
          s(:begin,
            s(:lvar, :idx)))),
      s(:block,
        s(:send,
          s(:int, 5), :times),
        s(:args,
          s(:arg, :count)),
        s(:begin,
          s(:send, nil, :print,
            s(:lvar, :count)),
          s(:block,
            s(:send,
              s(:const, nil, :FileUtils), :cd,
              s(:send, nil, :dirname,
                s(:lvar, :idx))),
            s(:args),
            s(:send, nil, :exec_cmd,
              s(:dstr,
                s(:str, "make benchmark OPT=-y ITEMS="),
                s(:begin,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "ITEMS"))),
                s(:str, " > ../b"),
                s(:begin,
                  s(:lvar, :idx)),
                s(:str, "-"),
                s(:begin,
                  s(:lvar, :count))))))),
      s(:send, nil, :puts))),
  s(:def, :bench,
    s(:args),
    s(:block,
      s(:send,
        s(:const, nil, :Configs), :each_with_index),
      s(:args,
        s(:arg, :c),
        s(:arg, :idx)),
      s(:send, nil, :bench_each,
        s(:lvar, :idx)))),
  s(:def, :parse_result,
    s(:args,
      s(:arg, :data)),
    s(:begin,
      s(:lvasgn, :flag,
        s(:false)),
      s(:lvasgn, :stat,
        s(:array)),
      s(:block,
        s(:send,
          s(:lvar, :data), :each),
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:if,
            s(:lvar, :flag),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "(\\w+)\\t([\\d\\.]+)"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:send,
                s(:lvar, :stat), :<<,
                s(:array,
                  s(:nth_ref, 1),
                  s(:send,
                    s(:nth_ref, 2), :to_f))),
              s(:send, nil, :raise,
                s(:str, "not a data"))), nil),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "benchmark summary"),
                s(:regopt)),
              s(:lvar, :line)),
            s(:lvasgn, :flag,
              s(:true)), nil))),
      s(:lvar, :stat))),
  s(:def, :calc_each,
    s(:args,
      s(:arg, :data)),
    s(:begin,
      s(:send,
        s(:lvar, :data), :sort!),
      s(:send,
        s(:lvar, :data), :pop),
      s(:send,
        s(:lvar, :data), :shift),
      s(:send,
        s(:block,
          s(:send,
            s(:lvar, :data), :inject,
            s(:float, 0.0)),
          s(:args,
            s(:arg, :res),
            s(:arg, :e)),
          s(:op_asgn,
            s(:lvasgn, :res), :+,
            s(:lvar, :e))), :/,
        s(:send,
          s(:lvar, :data), :size)))),
  s(:def, :calc_stat,
    s(:args,
      s(:arg, :stats)),
    s(:begin,
      s(:lvasgn, :stat,
        s(:array)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :stats), :[],
            s(:int, 0)), :each_with_index),
        s(:args,
          s(:arg, :e),
          s(:arg, :idx)),
        s(:begin,
          s(:lvasgn, :bm,
            s(:send,
              s(:lvar, :e), :[],
              s(:int, 0))),
          s(:lvasgn, :vals,
            s(:block,
              s(:send,
                s(:lvar, :stats), :map),
              s(:args,
                s(:arg, :st)),
              s(:send,
                s(:send,
                  s(:lvar, :st), :[],
                  s(:lvar, :idx)), :[],
                s(:int, 1)))),
          s(:array,
            s(:lvar, :bm),
            s(:send, nil, :calc_each,
              s(:lvar, :vals))))))),
  s(:def, :stat,
    s(:args),
    s(:begin,
      s(:lvasgn, :total,
        s(:array)),
      s(:block,
        s(:send,
          s(:const, nil, :Configs), :each_with_index),
        s(:args,
          s(:arg, :c),
          s(:arg, :idx)),
        s(:begin,
          s(:lvasgn, :stats,
            s(:array)),
          s(:block,
            s(:send,
              s(:int, 5), :times),
            s(:args,
              s(:arg, :count)),
            s(:begin,
              s(:lvasgn, :file,
                s(:dstr,
                  s(:str, "b"),
                  s(:begin,
                    s(:lvar, :idx)),
                  s(:str, "-"),
                  s(:begin,
                    s(:lvar, :count)))),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :file)),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :stats), :<<,
                  s(:send, nil, :parse_result,
                    s(:send,
                      s(:lvar, :f), :read)))))),
          s(:send,
            s(:lvar, :total), :<<,
            s(:send, nil, :calc_stat,
              s(:lvar, :stats))),
          s(:lvar, :total))),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :total), :[],
            s(:int, 0)), :each_with_index),
        s(:args,
          s(:arg, :e),
          s(:arg, :idx)),
        s(:begin,
          s(:lvasgn, :bm,
            s(:send,
              s(:lvar, :e), :[],
              s(:int, 0))),
          s(:block,
            s(:send,
              s(:lvar, :total), :each),
            s(:args,
              s(:arg, :st)),
            s(:send, nil, :print,
              s(:send,
                s(:send,
                  s(:lvar, :st), :[],
                  s(:lvar, :idx)), :[],
                s(:int, 1)),
              s(:str, "\t"))),
          s(:send, nil, :puts))))),
  s(:block,
    s(:send,
      s(:const, nil, :ARGV), :each),
    s(:args,
      s(:arg, :cmd)),
    s(:case,
      s(:lvar, :cmd),
      s(:when,
        s(:str, "build"),
        s(:send, nil, :build)),
      s(:when,
        s(:str, "check"),
        s(:send, nil, :check)),
      s(:when,
        s(:str, "bench"),
        s(:send, nil, :bench)),
      s(:when,
        s(:str, "stat"),
        s(:send, nil, :stat)),
      s(:send, nil, :raise))))
