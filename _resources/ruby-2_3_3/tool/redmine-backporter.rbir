s(:begin,
  s(:send, nil, :require,
    s(:str, "open-uri")),
  s(:send, nil, :require,
    s(:str, "openssl")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "json")),
  s(:send, nil, :require,
    s(:str, "io/console")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "strscan")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:str, "abbrev")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "readline")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:module,
          s(:const, nil, :Readline), nil)), nil)),
  s(:casgn, nil, :VERSION,
    s(:str, "0.0.1")),
  s(:lvasgn, :opts,
    s(:send,
      s(:const, nil, :OptionParser), :new)),
  s(:lvasgn, :target_version,
    s(:nil)),
  s(:lvasgn, :repo_path,
    s(:nil)),
  s(:lvasgn, :api_key,
    s(:nil)),
  s(:lvasgn, :ssl_verify,
    s(:true)),
  s(:block,
    s(:send,
      s(:lvar, :opts), :on,
      s(:str, "-k REDMINE_API_KEY"),
      s(:str, "--key=REDMINE_API_KEY"),
      s(:str, "specify your REDMINE_API_KEY")),
    s(:args,
      s(:arg, :v)),
    s(:lvasgn, :api_key,
      s(:lvar, :v))),
  s(:block,
    s(:send,
      s(:lvar, :opts), :on,
      s(:str, "-t TARGET_VERSION"),
      s(:str, "--target=TARGET_VARSION"),
      s(:regexp,
        s(:str, "\\A\\d(?:\\.\\d)+\\z"),
        s(:regopt)),
      s(:str, "specify target version (ex: 2.1)")),
    s(:args,
      s(:arg, :v)),
    s(:lvasgn, :target_version,
      s(:lvar, :v))),
  s(:block,
    s(:send,
      s(:lvar, :opts), :on,
      s(:str, "-r RUBY_REPO_PATH"),
      s(:str, "--repository=RUBY_REPO_PATH"),
      s(:str, "specify repository path")),
    s(:args,
      s(:arg, :v)),
    s(:lvasgn, :repo_path,
      s(:lvar, :v))),
  s(:block,
    s(:send,
      s(:lvar, :opts), :on,
      s(:str, "--[no-]ssl-verify"),
      s(:const, nil, :TrueClass),
      s(:str, "use / not use SSL verify")),
    s(:args,
      s(:arg, :v)),
    s(:lvasgn, :ssl_verify,
      s(:lvar, :v))),
  s(:send,
    s(:lvar, :opts), :version=,
    s(:const, nil, :VERSION)),
  s(:send,
    s(:lvar, :opts), :parse!,
    s(:const, nil, :ARGV)),
  s(:lvasgn, :http_options,
    s(:hash,
      s(:pair,
        s(:sym, :use_ssl),
        s(:true)))),
  s(:if,
    s(:lvar, :ssl_verify), nil,
    s(:send,
      s(:lvar, :http_options), :[]=,
      s(:sym, :verify_mode),
      s(:const,
        s(:const,
          s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE))),
  s(:gvasgn, :$openuri_options,
    s(:hash)),
  s(:if,
    s(:lvar, :ssl_verify), nil,
    s(:send,
      s(:gvar, :$openuri_options), :[]=,
      s(:sym, :ssl_verify_mode),
      s(:const,
        s(:const,
          s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE))),
  s(:casgn, nil, :TARGET_VERSION,
    s(:or,
      s(:or,
        s(:lvar, :target_version),
        s(:send,
          s(:const, nil, :ENV), :[],
          s(:str, "TARGET_VERSION"))),
      s(:begin,
        s(:send, nil, :raise,
          s(:str, "need to specify TARGET_VERSION"))))),
  s(:casgn, nil, :RUBY_REPO_PATH,
    s(:or,
      s(:lvar, :repo_path),
      s(:send,
        s(:const, nil, :ENV), :[],
        s(:str, "RUBY_REPO_PATH")))),
  s(:casgn, nil, :BACKPORT_CF_KEY,
    s(:str, "cf_5")),
  s(:casgn, nil, :STATUS_CLOSE,
    s(:int, 5)),
  s(:casgn, nil, :REDMINE_API_KEY,
    s(:or,
      s(:or,
        s(:lvar, :api_key),
        s(:send,
          s(:const, nil, :ENV), :[],
          s(:str, "REDMINE_API_KEY"))),
      s(:begin,
        s(:send, nil, :raise,
          s(:str, "need to specify REDMINE_API_KEY"))))),
  s(:casgn, nil, :REDMINE_BASE,
    s(:str, "https://bugs.ruby-lang.org")),
  s(:ivasgn, :@query,
    s(:hash,
      s(:pair,
        s(:str, "f[]"),
        s(:const, nil, :BACKPORT_CF_KEY)),
      s(:pair,
        s(:dstr,
          s(:str, "op["),
          s(:begin,
            s(:const, nil, :BACKPORT_CF_KEY)),
          s(:str, "]")),
        s(:str, "~")),
      s(:pair,
        s(:dstr,
          s(:str, "v["),
          s(:begin,
            s(:const, nil, :BACKPORT_CF_KEY)),
          s(:str, "][]")),
        s(:dstr,
          s(:begin,
            s(:const, nil, :TARGET_VERSION)),
          s(:str, ": REQUIRED"))),
      s(:pair,
        s(:str, "limit"),
        s(:int, 40)),
      s(:pair,
        s(:str, "status_id"),
        s(:const, nil, :STATUS_CLOSE)),
      s(:pair,
        s(:str, "sort"),
        s(:str, "updated_on")))),
  s(:casgn, nil, :PRIORITIES,
    s(:hash,
      s(:pair,
        s(:str, "Low"),
        s(:array,
          s(:sym, :white),
          s(:sym, :blue))),
      s(:pair,
        s(:str, "Normal"),
        s(:array)),
      s(:pair,
        s(:str, "High"),
        s(:array,
          s(:sym, :red))),
      s(:pair,
        s(:str, "Urgent"),
        s(:array,
          s(:sym, :red),
          s(:sym, :white))),
      s(:pair,
        s(:str, "Immediate"),
        s(:array,
          s(:sym, :red),
          s(:sym, :white),
          s(:hash,
            s(:pair,
              s(:sym, :underscore),
              s(:true))))))),
  s(:casgn, nil, :COLORS,
    s(:hash,
      s(:pair,
        s(:sym, :black),
        s(:int, 30)),
      s(:pair,
        s(:sym, :red),
        s(:int, 31)),
      s(:pair,
        s(:sym, :green),
        s(:int, 32)),
      s(:pair,
        s(:sym, :yellow),
        s(:int, 33)),
      s(:pair,
        s(:sym, :blue),
        s(:int, 34)),
      s(:pair,
        s(:sym, :magenta),
        s(:int, 35)),
      s(:pair,
        s(:sym, :cyan),
        s(:int, 36)),
      s(:pair,
        s(:sym, :white),
        s(:int, 37)))),
  s(:class,
    s(:const, nil, :String), nil,
    s(:def, :color,
      s(:args,
        s(:optarg, :fore,
          s(:nil)),
        s(:optarg, :back,
          s(:nil)),
        s(:kwoptarg, :bold,
          s(:false)),
        s(:kwoptarg, :underscore,
          s(:false))),
      s(:begin,
        s(:lvasgn, :seq,
          s(:str, "")),
        s(:if,
          s(:lvar, :bold),
          s(:send,
            s(:lvar, :seq), :<<,
            s(:str, "\e[1m")), nil),
        s(:if,
          s(:lvar, :underscore),
          s(:send,
            s(:lvar, :seq), :<<,
            s(:str, "\e[2m")), nil),
        s(:if,
          s(:lvar, :fore),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :COLORS), :[],
                s(:lvar, :fore))),
            s(:if,
              s(:lvar, :c), nil,
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "unknown foreground color "),
                  s(:begin,
                    s(:lvar, :fore))))),
            s(:send,
              s(:lvar, :seq), :<<,
              s(:dstr,
                s(:str, "\e["),
                s(:begin,
                  s(:lvar, :c)),
                s(:str, "m")))), nil),
        s(:if,
          s(:lvar, :back),
          s(:begin,
            s(:lvasgn, :c,
              s(:send,
                s(:const, nil, :COLORS), :[],
                s(:lvar, :back))),
            s(:if,
              s(:lvar, :c), nil,
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "unknown background color "),
                  s(:begin,
                    s(:lvar, :back))))),
            s(:send,
              s(:lvar, :seq), :<<,
              s(:dstr,
                s(:str, "\e["),
                s(:begin,
                  s(:send,
                    s(:lvar, :c), :+,
                    s(:int, 10))),
                s(:str, "m")))), nil),
        s(:if,
          s(:send,
            s(:lvar, :seq), :empty?),
          s(:self),
          s(:send,
            s(:send,
              s(:lvar, :seq), :<<,
              s(:self)), :<<,
            s(:str, "\e[0m")))))),
  s(:def, :wcwidth,
    s(:args,
      s(:arg, :wc)),
    s(:begin,
      s(:if,
        s(:send,
          s(:lvar, :wc), :==,
          s(:str, "\t")),
        s(:return,
          s(:int, 8)), nil),
      s(:lvasgn, :n,
        s(:send,
          s(:lvar, :wc), :ord)),
      s(:if,
        s(:send,
          s(:lvar, :n), :<,
          s(:int, 32)),
        s(:int, 0),
        s(:if,
          s(:send,
            s(:lvar, :n), :<,
            s(:int, 128)),
          s(:int, 1),
          s(:int, 2))))),
  s(:def, :fold,
    s(:args,
      s(:arg, :str),
      s(:arg, :col)),
    s(:begin,
      s(:lvasgn, :i,
        s(:int, 0)),
      s(:lvasgn, :size,
        s(:send,
          s(:lvar, :str), :size)),
      s(:lvasgn, :len,
        s(:int, 0)),
      s(:while,
        s(:send,
          s(:lvar, :i), :<,
          s(:lvar, :size)),
        s(:begin,
          s(:case,
            s(:lvasgn, :c,
              s(:send,
                s(:lvar, :str), :[],
                s(:lvar, :i))),
            s(:when,
              s(:str, "\r"),
              s(:str, "\n"),
              s(:lvasgn, :len,
                s(:int, 0))),
            s(:begin,
              s(:lvasgn, :d,
                s(:send, nil, :wcwidth,
                  s(:lvar, :c))),
              s(:op_asgn,
                s(:lvasgn, :len), :+,
                s(:lvar, :d)),
              s(:if,
                s(:send,
                  s(:lvar, :len), :==,
                  s(:lvar, :col)),
                s(:begin,
                  s(:send,
                    s(:lvar, :str), :insert,
                    s(:send,
                      s(:lvar, :i), :+,
                      s(:int, 1)),
                    s(:str, "\n")),
                  s(:lvasgn, :len,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :i), :+,
                    s(:int, 2)),
                  s(:next)),
                s(:if,
                  s(:send,
                    s(:lvar, :len), :>,
                    s(:lvar, :col)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :insert,
                      s(:lvar, :i),
                      s(:str, "\n")),
                    s(:lvasgn, :len,
                      s(:lvar, :d)),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 2)),
                    s(:next)), nil)))),
          s(:op_asgn,
            s(:lvasgn, :i), :+,
            s(:int, 1)))),
      s(:lvar, :str))),
  s(:class,
    s(:const, nil, :StringScanner), nil,
    s(:def, :getrows,
      s(:args,
        s(:arg, :lx),
        s(:arg, :ly)),
      s(:begin,
        s(:lvasgn, :cp1,
          s(:send, nil, :charpos)),
        s(:lvasgn, :x,
          s(:int, 0)),
        s(:lvasgn, :y,
          s(:int, 0)),
        s(:until,
          s(:send, nil, :eos?),
          s(:begin,
            s(:case,
              s(:lvasgn, :c,
                s(:send, nil, :getch)),
              s(:when,
                s(:str, "\r"),
                s(:lvasgn, :x,
                  s(:int, 0))),
              s(:when,
                s(:str, "\n"),
                s(:begin,
                  s(:lvasgn, :x,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :y), :+,
                    s(:int, 1)))),
              s(:when,
                s(:str, "\t"),
                s(:op_asgn,
                  s(:lvasgn, :x), :+,
                  s(:int, 8))),
              s(:when,
                s(:regexp,
                  s(:str, "[\\x00-\\x7f]"),
                  s(:regopt)),
                s(:op_asgn,
                  s(:lvasgn, :x), :+,
                  s(:int, 1))),
              s(:op_asgn,
                s(:lvasgn, :x), :+,
                s(:int, 2))),
            s(:if,
              s(:send,
                s(:lvar, :x), :>,
                s(:lvar, :lx)),
              s(:begin,
                s(:lvasgn, :x,
                  s(:int, 0)),
                s(:op_asgn,
                  s(:lvasgn, :y), :+,
                  s(:int, 1)),
                s(:send, nil, :unscan)), nil),
            s(:if,
              s(:send,
                s(:lvar, :y), :>=,
                s(:lvar, :ly)),
              s(:return,
                s(:send,
                  s(:send, nil, :string), :[],
                  s(:erange,
                    s(:lvar, :cp1),
                    s(:send, nil, :charpos)))), nil))),
        s(:send,
          s(:send, nil, :string), :[],
          s(:irange,
            s(:lvar, :cp1),
            s(:int, -1)))))),
  s(:def, :more,
    s(:args,
      s(:arg, :sio)),
    s(:begin,
      s(:lvasgn, :console,
        s(:send,
          s(:const, nil, :IO), :console)),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :ly),
          s(:lvasgn, :lx)),
        s(:send,
          s(:lvar, :console), :winsize)),
      s(:op_asgn,
        s(:lvasgn, :ly), :-,
        s(:int, 1)),
      s(:lvasgn, :str,
        s(:send,
          s(:lvar, :sio), :string)),
      s(:lvasgn, :cls,
        s(:send,
          s(:send,
            s(:str, "\r"), :+,
            s(:begin,
              s(:send,
                s(:str, " "), :*,
                s(:lvar, :lx)))), :+,
          s(:str, "\r"))),
      s(:lvasgn, :ss,
        s(:send,
          s(:const, nil, :StringScanner), :new,
          s(:lvar, :str))),
      s(:lvasgn, :rows,
        s(:send,
          s(:lvar, :ss), :getrows,
          s(:lvar, :lx),
          s(:lvar, :ly))),
      s(:send, nil, :puts,
        s(:lvar, :rows)),
      s(:until,
        s(:send,
          s(:lvar, :ss), :eos?),
        s(:begin,
          s(:send, nil, :print,
            s(:str, ":")),
          s(:case,
            s(:lvasgn, :c,
              s(:send,
                s(:lvar, :console), :getch)),
            s(:when,
              s(:str, " "),
              s(:begin,
                s(:lvasgn, :rows,
                  s(:send,
                    s(:lvar, :ss), :getrows,
                    s(:lvar, :lx),
                    s(:lvar, :ly))),
                s(:send, nil, :puts,
                  s(:send,
                    s(:lvar, :cls), :+,
                    s(:lvar, :rows))))),
            s(:when,
              s(:str, "j"),
              s(:str, "\r"),
              s(:begin,
                s(:lvasgn, :rows,
                  s(:send,
                    s(:lvar, :ss), :getrows,
                    s(:lvar, :lx),
                    s(:int, 1))),
                s(:send, nil, :puts,
                  s(:send,
                    s(:lvar, :cls), :+,
                    s(:lvar, :rows))))),
            s(:when,
              s(:str, "q"),
              s(:begin,
                s(:send, nil, :print,
                  s(:lvar, :cls)),
                s(:break))),
            s(:send, nil, :print,
              s(:str, "\b"))))))),
  s(:if,
    s(:defined?,
      s(:send,
        s(:const, nil, :Readline), :readline)), nil,
    s(:sclass,
      s(:const, nil, :Readline),
      s(:begin,
        s(:def, :readline,
          s(:args,
            s(:optarg, :prompt,
              s(:str, ""))),
          s(:begin,
            s(:lvasgn, :console,
              s(:send,
                s(:const, nil, :IO), :console)),
            s(:send,
              s(:lvar, :console), :binmode),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ly),
                s(:lvasgn, :lx)),
              s(:send,
                s(:lvar, :console), :winsize)),
            s(:if,
              s(:or,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "mswin|mingw"),
                    s(:regopt)),
                  s(:const, nil, :RUBY_PLATFORM)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^(?:vt\\d\\d\\d|xterm)"),
                    s(:regopt, :i)),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "TERM")))),
              s(:lvasgn, :cls,
                s(:str, "\r\e[2K")),
              s(:lvasgn, :cls,
                s(:send,
                  s(:str, "\r"), :<<,
                  s(:begin,
                    s(:send,
                      s(:str, " "), :*,
                      s(:lvar, :lx)))))),
            s(:send,
              s(:send,
                s(:lvar, :cls), :<<,
                s(:str, "\r")), :<<,
              s(:lvar, :prompt)),
            s(:send,
              s(:lvar, :console), :print,
              s(:lvar, :prompt)),
            s(:send,
              s(:lvar, :console), :flush),
            s(:lvasgn, :line,
              s(:str, "")),
            s(:while,
              s(:int, 1),
              s(:case,
                s(:lvasgn, :c,
                  s(:send,
                    s(:lvar, :console), :getch)),
                s(:when,
                  s(:str, "\r"),
                  s(:str, "\n"),
                  s(:begin,
                    s(:send, nil, :puts),
                    s(:send,
                      s(:const, nil, :HISTORY), :<<,
                      s(:lvar, :line)),
                    s(:return,
                      s(:lvar, :line)))),
                s(:when,
                  s(:str, "\u007F"),
                  s(:str, "\b"),
                  s(:if,
                    s(:send,
                      s(:lvar, :line), :chop!),
                    s(:send, nil, :print,
                      s(:str, "\b \b")), nil)),
                s(:when,
                  s(:str, "\u0015"),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:lvar, :cls)),
                    s(:send,
                      s(:lvar, :line), :clear))),
                s(:when,
                  s(:str, "\u0004"),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :line), :empty?),
                      s(:return,
                        s(:nil)), nil),
                    s(:send,
                      s(:lvar, :line), :<<,
                      s(:lvar, :c)))),
                s(:when,
                  s(:str, "\u0010"),
                  s(:begin,
                    s(:op_asgn,
                      s(:send,
                        s(:const, nil, :HISTORY), :pos), :-,
                      s(:int, 1)),
                    s(:lvasgn, :line,
                      s(:send,
                        s(:const, nil, :HISTORY), :current)),
                    s(:send, nil, :print,
                      s(:lvar, :cls)),
                    s(:send, nil, :print,
                      s(:lvar, :line)))),
                s(:when,
                  s(:str, "\u000E"),
                  s(:begin,
                    s(:op_asgn,
                      s(:send,
                        s(:const, nil, :HISTORY), :pos), :+,
                      s(:int, 1)),
                    s(:lvasgn, :line,
                      s(:send,
                        s(:const, nil, :HISTORY), :current)),
                    s(:send, nil, :print,
                      s(:lvar, :cls)),
                    s(:send, nil, :print,
                      s(:lvar, :line)))),
                s(:if,
                  s(:send,
                    s(:lvar, :c), :>=,
                    s(:str, " ")),
                  s(:begin,
                    s(:send, nil, :print,
                      s(:lvar, :c)),
                    s(:send,
                      s(:lvar, :line), :<<,
                      s(:lvar, :c))), nil))))),
        s(:casgn, nil, :HISTORY,
          s(:array)),
        s(:defs,
          s(:const, nil, :HISTORY), :<<,
          s(:args,
            s(:arg, :val)),
          s(:begin,
            s(:send,
              s(:const, nil, :HISTORY), :push,
              s(:lvar, :val)),
            s(:ivasgn, :@pos,
              s(:send,
                s(:self), :size)),
            s(:self))),
        s(:defs,
          s(:const, nil, :HISTORY), :pos,
          s(:args),
          s(:or_asgn,
            s(:ivasgn, :@pos),
            s(:int, 0))),
        s(:defs,
          s(:const, nil, :HISTORY), :pos=,
          s(:args,
            s(:arg, :val)),
          s(:begin,
            s(:ivasgn, :@pos,
              s(:lvar, :val)),
            s(:if,
              s(:send,
                s(:ivar, :@pos), :<,
                s(:int, 0)),
              s(:ivasgn, :@pos,
                s(:int, -1)),
              s(:if,
                s(:send,
                  s(:ivar, :@pos), :>=,
                  s(:send,
                    s(:self), :size)),
                s(:ivasgn, :@pos,
                  s(:send,
                    s(:self), :size)), nil)))),
        s(:defs,
          s(:const, nil, :HISTORY), :current,
          s(:args),
          s(:begin,
            s(:or_asgn,
              s(:ivasgn, :@pos),
              s(:int, 0)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@pos), :<,
                  s(:int, 0)),
                s(:send,
                  s(:ivar, :@pos), :>=,
                  s(:send,
                    s(:self), :size))),
              s(:str, ""),
              s(:send,
                s(:self), :[],
                s(:ivar, :@pos)))))))),
  s(:def, :mergeinfo,
    s(:args),
    s(:xstr,
      s(:str, "svn propget svn:mergeinfo "),
      s(:begin,
        s(:const, nil, :RUBY_REPO_PATH)))),
  s(:def, :find_svn_log,
    s(:args,
      s(:arg, :pattern)),
    s(:xstr,
      s(:str, "svn log --xml --stop-on-copy --search=\""),
      s(:begin,
        s(:lvar, :pattern)),
      s(:str, "\" "),
      s(:begin,
        s(:const, nil, :RUBY_REPO_PATH)))),
  s(:def, :show_last_journal,
    s(:args,
      s(:arg, :http),
      s(:arg, :uri)),
    s(:begin,
      s(:lvasgn, :res,
        s(:send,
          s(:lvar, :http), :get,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:lvar, :uri), :path)),
            s(:str, "?include=journals")))),
      s(:send,
        s(:lvar, :res), :value),
      s(:lvasgn, :h,
        s(:send, nil, :JSON,
          s(:send,
            s(:lvar, :res), :body))),
      s(:lvasgn, :x,
        s(:send,
          s(:lvar, :h), :[],
          s(:str, "issue"))),
      s(:if,
        s(:lvar, :x), nil,
        s(:send, nil, :raise,
          s(:str, "no issue"))),
      s(:lvasgn, :x,
        s(:send,
          s(:lvar, :x), :[],
          s(:str, "journals"))),
      s(:if,
        s(:lvar, :x), nil,
        s(:send, nil, :raise,
          s(:str, "no journals"))),
      s(:lvasgn, :x,
        s(:send,
          s(:lvar, :x), :last)),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "== "),
          s(:begin,
            s(:send,
              s(:send,
                s(:lvar, :x), :[],
                s(:str, "user")), :[],
              s(:str, "name"))),
          s(:str, " ("),
          s(:begin,
            s(:send,
              s(:lvar, :x), :[],
              s(:str, "created_on"))),
          s(:str, ")"))),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :x), :[],
            s(:str, "details")), :each),
        s(:args,
          s(:arg, :y)),
        s(:send, nil, :puts,
          s(:send, nil, :JSON,
            s(:lvar, :y)))),
      s(:send, nil, :puts,
        s(:send,
          s(:lvar, :x), :[],
          s(:str, "notes"))))),
  s(:def, :backport_command_string,
    s(:args),
    s(:begin,
      s(:if,
        s(:send,
          s(:ivar, :@changesets), :respond_to?,
          s(:sym, :validated)), nil,
        s(:begin,
          s(:ivasgn, :@changesets,
            s(:block,
              s(:send,
                s(:ivar, :@changesets), :select),
              s(:args,
                s(:arg, :c)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :uri,
                      s(:send, nil, :URI,
                        s(:dstr,
                          s(:begin,
                            s(:const, nil, :REDMINE_BASE)),
                          s(:str, "/projects/ruby-trunk/repository/revisions/"),
                          s(:begin,
                            s(:lvar, :c))))),
                    s(:send,
                      s(:lvar, :uri), :read,
                      s(:gvar, :$openuri_options)),
                    s(:true)),
                  s(:resbody, nil, nil,
                    s(:false)), nil)))),
          s(:block,
            s(:send,
              s(:ivar, :@changesets), :define_singleton_method,
              s(:sym, :validated)),
            s(:args),
            s(:true)))),
      s(:dstr,
        s(:str, " backport --ticket="),
        s(:begin,
          s(:ivar, :@issue)),
        s(:str, " "),
        s(:begin,
          s(:send,
            s(:ivar, :@changesets), :join,
            s(:str, ",")))))),
  s(:def, :status_char,
    s(:args,
      s(:arg, :obj)),
    s(:case,
      s(:send,
        s(:lvar, :obj), :[],
        s(:str, "name")),
      s(:when,
        s(:str, "Closed"),
        s(:send,
          s(:str, "C"), :color,
          s(:hash,
            s(:pair,
              s(:sym, :bold),
              s(:true))))),
      s(:send,
        s(:send,
          s(:lvar, :obj), :[],
          s(:str, "name")), :[],
        s(:int, 0)))),
  s(:lvasgn, :console,
    s(:send,
      s(:const, nil, :IO), :console)),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :row),
      s(:lvasgn, :col)),
    s(:send,
      s(:lvar, :console), :winsize)),
  s(:send,
    s(:ivar, :@query), :[]=,
    s(:str, "limit"),
    s(:send,
      s(:lvar, :row), :-,
      s(:int, 2))),
  s(:send, nil, :puts,
    s(:send,
      s(:send,
        s(:dstr,
          s(:str, "Backporter "),
          s(:begin,
            s(:const, nil, :VERSION))), :color,
        s(:hash,
          s(:pair,
            s(:sym, :bold),
            s(:true)))), :+,
      s(:dstr,
        s(:str, " for "),
        s(:begin,
          s(:const, nil, :TARGET_VERSION))))),
  s(:class,
    s(:const, nil, :CommandSyntaxError),
    s(:const, nil, :RuntimeError), nil),
  s(:lvasgn, :commands,
    s(:hash,
      s(:pair,
        s(:str, "ls"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\d+)?\\z"),
                  s(:regopt)),
                s(:lvar, :args)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:lvasgn, :uri,
              s(:send, nil, :URI,
                s(:send,
                  s(:send,
                    s(:const, nil, :REDMINE_BASE), :+,
                    s(:str, "/projects/ruby-trunk/issues.json?")), :+,
                  s(:send,
                    s(:const, nil, :URI), :encode_www_form,
                    s(:send,
                      s(:send,
                        s(:ivar, :@query), :dup), :merge,
                      s(:hash,
                        s(:pair,
                          s(:str, "page"),
                          s(:begin,
                            s(:if,
                              s(:nth_ref, 1),
                              s(:send,
                                s(:nth_ref, 1), :to_i),
                              s(:int, 1)))))))))),
            s(:lvasgn, :res,
              s(:send, nil, :JSON,
                s(:send,
                  s(:lvar, :uri), :read,
                  s(:gvar, :$openuri_options)))),
            s(:ivasgn, :@issues,
              s(:lvasgn, :issues,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "issues")))),
            s(:lvasgn, :from,
              s(:send,
                s(:send,
                  s(:lvar, :res), :[],
                  s(:str, "offset")), :+,
                s(:int, 1))),
            s(:lvasgn, :total,
              s(:send,
                s(:lvar, :res), :[],
                s(:str, "total_count"))),
            s(:lvasgn, :to,
              s(:send,
                s(:send,
                  s(:lvar, :from), :+,
                  s(:send,
                    s(:lvar, :issues), :size)), :-,
                s(:int, 1))),
            s(:send, nil, :puts,
              s(:dstr,
                s(:begin,
                  s(:lvar, :from)),
                s(:str, "-"),
                s(:begin,
                  s(:lvar, :to)),
                s(:str, " / "),
                s(:begin,
                  s(:lvar, :total)))),
            s(:block,
              s(:send,
                s(:lvar, :issues), :each_with_index),
              s(:args,
                s(:arg, :x),
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :id,
                  s(:send,
                    s(:dstr,
                      s(:str, "#"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:str, "id")))), :color,
                    s(:splat,
                      s(:send,
                        s(:const, nil, :PRIORITIES), :[],
                        s(:send,
                          s(:send,
                            s(:lvar, :x), :[],
                            s(:str, "priority")), :[],
                          s(:str, "name")))))),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:str, "%2d"), :%,
                        s(:lvar, :i))),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :id)),
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :x), :[],
                            s(:str, "priority")), :[],
                          s(:str, "name")), :[],
                        s(:int, 0))),
                    s(:str, " "),
                    s(:begin,
                      s(:send, nil, :status_char,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:str, "status")))),
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:str, "subject")), :[],
                        s(:int, 0),
                        s(:int, 80)))))))))),
      s(:pair,
        s(:str, "show"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\d+)\\z"),
                  s(:regopt)),
                s(:lvar, :args)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:lvasgn, :id,
              s(:send,
                s(:nth_ref, 1), :to_i)),
            s(:if,
              s(:and,
                s(:ivar, :@issues),
                s(:send,
                  s(:lvar, :id), :<,
                  s(:send,
                    s(:ivar, :@issues), :size))),
              s(:lvasgn, :id,
                s(:send,
                  s(:send,
                    s(:ivar, :@issues), :[],
                    s(:lvar, :id)), :[],
                  s(:str, "id"))), nil),
            s(:ivasgn, :@issue,
              s(:lvar, :id)),
            s(:lvasgn, :uri,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :REDMINE_BASE)),
                s(:str, "/issues/"),
                s(:begin,
                  s(:lvar, :id)))),
            s(:lvasgn, :uri,
              s(:send, nil, :URI,
                s(:send,
                  s(:lvar, :uri), :+,
                  s(:str, ".json?include=children,attachments,relations,changesets,journals")))),
            s(:lvasgn, :res,
              s(:send, nil, :JSON,
                s(:send,
                  s(:lvar, :uri), :read,
                  s(:gvar, :$openuri_options)))),
            s(:lvasgn, :i,
              s(:send,
                s(:lvar, :res), :[],
                s(:str, "issue"))),
            s(:if,
              s(:send,
                s(:lvar, :i), :[],
                s(:str, "changesets")), nil,
              s(:send, nil, :abort,
                s(:str, "You don't have view_changesets permission"))),
            s(:lvasgn, :id,
              s(:send,
                s(:dstr,
                  s(:str, "#"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "id")))), :color,
                s(:splat,
                  s(:send,
                    s(:const, nil, :PRIORITIES), :[],
                    s(:send,
                      s(:send,
                        s(:lvar, :i), :[],
                        s(:str, "priority")), :[],
                      s(:str, "name")))))),
            s(:lvasgn, :sio,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:send,
              s(:lvar, :sio), :puts,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "subject")), :color,
                    s(:hash,
                      s(:pair,
                        s(:sym, :bold),
                        s(:true)),
                      s(:pair,
                        s(:sym, :underscore),
                        s(:true))))),
                s(:str, "\n"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "project")), :[],
                    s(:str, "name"))),
                s(:str, " ["),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "tracker")), :[],
                    s(:str, "name"))),
                s(:str, " "),
                s(:begin,
                  s(:lvar, :id)),
                s(:str, "] "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "status")), :[],
                    s(:str, "name"))),
                s(:str, " ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :i), :[],
                    s(:str, "created_on"))),
                s(:str, ")\n"),
                s(:str, "author:   "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "author")), :[],
                    s(:str, "name"))),
                s(:str, "\n"),
                s(:str, "assigned: "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :i), :[],
                        s(:str, "assigned_to")), :to_h), :[],
                    s(:str, "name"))),
                s(:str, "\n"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :i), :[],
                  s(:str, "custom_fields")), :each),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :sio), :puts,
                s(:send,
                  s(:str, "%-10s: %s"), :%,
                  s(:array,
                    s(:send,
                      s(:lvar, :x), :[],
                      s(:str, "name")),
                    s(:send,
                      s(:lvar, :x), :[],
                      s(:str, "value")))))),
            s(:send,
              s(:lvar, :sio), :puts,
              s(:send,
                s(:lvar, :i), :[],
                s(:str, "description"))),
            s(:send,
              s(:lvar, :sio), :puts),
            s(:send,
              s(:lvar, :sio), :puts,
              s(:send,
                s(:str, "= changesets"), :color,
                s(:hash,
                  s(:pair,
                    s(:sym, :bold),
                    s(:true)),
                  s(:pair,
                    s(:sym, :underscore),
                    s(:true))))),
            s(:ivasgn, :@changesets,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :i), :[],
                  s(:str, "changesets")), :each),
              s(:args,
                s(:arg, :x)),
              s(:begin,
                s(:send,
                  s(:ivar, :@changesets), :<<,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:str, "revision"))),
                s(:send,
                  s(:lvar, :sio), :puts,
                  s(:send,
                    s(:dstr,
                      s(:str, "== "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:str, "revision"))),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:str, "committed_on"))),
                      s(:str, " "),
                      s(:begin,
                        s(:rescue,
                          s(:send,
                            s(:send,
                              s(:lvar, :x), :[],
                              s(:str, "user")), :[],
                            s(:str, "name")),
                          s(:resbody, nil, nil,
                            s(:nil)), nil))), :color,
                    s(:hash,
                      s(:pair,
                        s(:sym, :bold),
                        s(:true)),
                      s(:pair,
                        s(:sym, :underscore),
                        s(:true))))),
                s(:send,
                  s(:lvar, :sio), :puts,
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:str, "comments"))))),
            s(:ivasgn, :@changesets,
              s(:send,
                s(:send,
                  s(:ivar, :@changesets), :sort), :uniq)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :i), :[],
                  s(:str, "journals")),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "journals")), :empty?), :!)),
              s(:begin,
                s(:send,
                  s(:lvar, :sio), :puts,
                  s(:send,
                    s(:str, "= journals"), :color,
                    s(:hash,
                      s(:pair,
                        s(:sym, :bold),
                        s(:true)),
                      s(:pair,
                        s(:sym, :underscore),
                        s(:true))))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :[],
                      s(:str, "journals")), :each),
                  s(:args,
                    s(:arg, :x)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :sio), :puts,
                      s(:send,
                        s(:dstr,
                          s(:str, "== "),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :x), :[],
                                s(:str, "user")), :[],
                              s(:str, "name"))),
                          s(:str, " ("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :x), :[],
                              s(:str, "created_on"))),
                          s(:str, ")")), :color,
                        s(:hash,
                          s(:pair,
                            s(:sym, :bold),
                            s(:true)),
                          s(:pair,
                            s(:sym, :underscore),
                            s(:true))))),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:str, "details")), :each),
                      s(:args,
                        s(:arg, :y)),
                      s(:send,
                        s(:lvar, :sio), :puts,
                        s(:send, nil, :JSON,
                          s(:lvar, :y)))),
                    s(:send,
                      s(:lvar, :sio), :puts,
                      s(:send,
                        s(:lvar, :x), :[],
                        s(:str, "notes")))))), nil),
            s(:send, nil, :more,
              s(:lvar, :sio))))),
      s(:pair,
        s(:str, "rel"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\d+)\\z"),
                  s(:regopt)),
                s(:lvar, :args)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:if,
              s(:ivar, :@issue), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:str, "ticket not selected")),
                s(:next))),
            s(:lvasgn, :rev,
              s(:send,
                s(:nth_ref, 1), :to_i)),
            s(:lvasgn, :uri,
              s(:send, nil, :URI,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :REDMINE_BASE)),
                  s(:str, "/projects/ruby-trunk/repository/revisions/"),
                  s(:begin,
                    s(:lvar, :rev)),
                  s(:str, "/issues.json")))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :start,
                s(:send,
                  s(:lvar, :uri), :host),
                s(:send,
                  s(:lvar, :uri), :port),
                s(:lvar, :http_options)),
              s(:args,
                s(:arg, :http)),
              s(:begin,
                s(:lvasgn, :res,
                  s(:send,
                    s(:lvar, :http), :post,
                    s(:send,
                      s(:lvar, :uri), :path),
                    s(:dstr,
                      s(:str, "issue_id="),
                      s(:ivar, :@issue)),
                    s(:hash,
                      s(:pair,
                        s(:str, "X-Redmine-API-Key"),
                        s(:const, nil, :REDMINE_API_KEY))))),
                s(:send, nil, :puts,
                  s(:send,
                    s(:lvar, :res), :body)),
                s(:sclass,
                  s(:ivar, :@changesets),
                  s(:rescue,
                    s(:send, nil, :remove_method,
                      s(:sym, :validated)),
                    s(:resbody, nil, nil,
                      s(:nil)), nil))))))),
      s(:pair,
        s(:str, "backport"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :args), :empty?), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntexError))),
            s(:if,
              s(:ivar, :@issue), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:str, "ticket not selected")),
                s(:next))),
            s(:send, nil, :puts,
              s(:send, nil, :backport_command_string))))),
      s(:pair,
        s(:str, "done"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\d+)?(?:\\s*-- +(.*))?\\z"),
                  s(:regopt)),
                s(:lvar, :args)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:lvasgn, :notes,
              s(:nth_ref, 2)),
            s(:if,
              s(:lvar, :notes),
              s(:send,
                s(:lvar, :notes), :strip!), nil),
            s(:if,
              s(:nth_ref, 1),
              s(:begin,
                s(:lvasgn, :i,
                  s(:send,
                    s(:nth_ref, 1), :to_i)),
                s(:if,
                  s(:and,
                    s(:ivar, :@issues),
                    s(:send,
                      s(:lvar, :i), :<,
                      s(:send,
                        s(:ivar, :@issues), :size))),
                  s(:lvasgn, :i,
                    s(:send,
                      s(:send,
                        s(:ivar, :@issues), :[],
                        s(:lvar, :i)), :[],
                      s(:str, "id"))), nil),
                s(:ivasgn, :@issue,
                  s(:lvar, :i))), nil),
            s(:if,
              s(:ivar, :@issue), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:str, "ticket not selected")),
                s(:next))),
            s(:lvasgn, :log,
              s(:send, nil, :find_svn_log,
                s(:dstr,
                  s(:str, "#"),
                  s(:ivar, :@issue),
                  s(:str, "]")))),
            s(:if,
              s(:and,
                s(:lvar, :log),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "revision=\"(?<rev>\\d+)"),
                    s(:regopt)),
                  s(:lvar, :log))),
              s(:begin,
                s(:lvasgn, :str,
                  s(:send,
                    s(:lvar, :log), :[],
                    s(:regexp,
                      s(:str, "merge revision\\(s\\) ([^:]+)(?=:)"),
                      s(:regopt)))),
                s(:send,
                  s(:lvar, :str), :insert,
                  s(:int, 5),
                  s(:str, "d")),
                s(:lvasgn, :str,
                  s(:dstr,
                    s(:str, "ruby_"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :TARGET_VERSION), :tr,
                        s(:str, "."),
                        s(:str, "_"))),
                    s(:str, " r"),
                    s(:begin,
                      s(:lvar, :rev)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :str)),
                    s(:str, "."))),
                s(:if,
                  s(:lvar, :notes),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, "\n")),
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:lvar, :notes))), nil),
                s(:lvasgn, :notes,
                  s(:lvar, :str))),
              s(:begin,
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:str, "no commit is found whose log include #"),
                    s(:ivar, :@issue))),
                s(:next))),
            s(:send, nil, :puts,
              s(:lvar, :notes)),
            s(:lvasgn, :uri,
              s(:send, nil, :URI,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :REDMINE_BASE)),
                  s(:str, "/issues/"),
                  s(:begin,
                    s(:ivar, :@issue)),
                  s(:str, ".json")))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :start,
                s(:send,
                  s(:lvar, :uri), :host),
                s(:send,
                  s(:lvar, :uri), :port),
                s(:lvar, :http_options)),
              s(:args,
                s(:arg, :http)),
              s(:begin,
                s(:lvasgn, :res,
                  s(:send,
                    s(:lvar, :http), :get,
                    s(:send,
                      s(:lvar, :uri), :path))),
                s(:lvasgn, :data,
                  s(:send, nil, :JSON,
                    s(:send,
                      s(:lvar, :res), :body))),
                s(:lvasgn, :h,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :data), :[],
                          s(:str, "issue")), :[],
                        s(:str, "custom_fields")), :find),
                    s(:args,
                      s(:arg, :x)),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :[],
                        s(:str, "id")), :==,
                      s(:int, 5)))),
                s(:if,
                  s(:and,
                    s(:lvar, :h),
                    s(:lvasgn, :val,
                      s(:send,
                        s(:lvar, :h), :[],
                        s(:str, "value")))),
                  s(:case,
                    s(:send,
                      s(:lvar, :val), :[],
                      s(:regexp,
                        s(:str, "(?:\\A|, )"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :quote,
                            s(:const, nil, :TARGET_VERSION))),
                        s(:str, ": ([^,]+)"),
                        s(:regopt)),
                      s(:int, 1)),
                    s(:when,
                      s(:str, "REQUIRED"),
                      s(:str, "UNKNOWN"),
                      s(:str, "DONTNEED"),
                      s(:str, "WONTFIX"),
                      s(:send,
                        s(:lvar, :val), :[]=,
                        s(:erange,
                          s(:send,
                            s(:send,
                              s(:gvar, :$~), :offset,
                              s(:int, 1)), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:send,
                              s(:gvar, :$~), :offset,
                              s(:int, 1)), :[],
                            s(:int, 1))),
                        s(:str, "DONE"))),
                    s(:when,
                      s(:str, "DONE"),
                      s(:begin,
                        s(:send, nil, :puts,
                          s(:str, "already backport is done")),
                        s(:next))),
                    s(:when,
                      s(:nil),
                      s(:send,
                        s(:lvar, :val), :<<,
                        s(:dstr,
                          s(:str, ", "),
                          s(:begin,
                            s(:const, nil, :TARGET_VERSION)),
                          s(:str, ": DONE")))),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "unknown status '"),
                        s(:nth_ref, 1),
                        s(:str, "'")))),
                  s(:lvasgn, :val,
                    s(:str, "\#{TARGET_VERSION}: DONE"))),
                s(:lvasgn, :data,
                  s(:hash,
                    s(:pair,
                      s(:str, "issue"),
                      s(:hash,
                        s(:pair,
                          s(:str, "custom_fields"),
                          s(:array,
                            s(:hash,
                              s(:pair,
                                s(:str, "id"),
                                s(:int, 5)),
                              s(:pair,
                                s(:str, "value"),
                                s(:lvar, :val))))))))),
                s(:if,
                  s(:lvar, :notes),
                  s(:send,
                    s(:send,
                      s(:lvar, :data), :[],
                      s(:str, "issue")), :[]=,
                    s(:str, "notes"),
                    s(:lvar, :notes)), nil),
                s(:lvasgn, :res,
                  s(:send,
                    s(:lvar, :http), :put,
                    s(:send,
                      s(:lvar, :uri), :path),
                    s(:send, nil, :JSON,
                      s(:lvar, :data)),
                    s(:hash,
                      s(:pair,
                        s(:str, "X-Redmine-API-Key"),
                        s(:const, nil, :REDMINE_API_KEY)),
                      s(:pair,
                        s(:str, "Content-Type"),
                        s(:str, "application/json"))))),
                s(:send,
                  s(:lvar, :res), :value),
                s(:send, nil, :show_last_journal,
                  s(:lvar, :http),
                  s(:lvar, :uri))))))),
      s(:pair,
        s(:str, "close"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\d+)?\\z"),
                  s(:regopt)),
                s(:lvar, :args)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:if,
              s(:nth_ref, 1),
              s(:begin,
                s(:lvasgn, :i,
                  s(:send,
                    s(:nth_ref, 1), :to_i)),
                s(:if,
                  s(:and,
                    s(:ivar, :@issues),
                    s(:send,
                      s(:lvar, :i), :<,
                      s(:send,
                        s(:ivar, :@issues), :size))),
                  s(:lvasgn, :i,
                    s(:send,
                      s(:send,
                        s(:ivar, :@issues), :[],
                        s(:lvar, :i)), :[],
                      s(:str, "id"))), nil),
                s(:ivasgn, :@issue,
                  s(:lvar, :i))), nil),
            s(:if,
              s(:ivar, :@issue), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:str, "ticket not selected")),
                s(:next))),
            s(:lvasgn, :uri,
              s(:send, nil, :URI,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :REDMINE_BASE)),
                  s(:str, "/issues/"),
                  s(:begin,
                    s(:ivar, :@issue)),
                  s(:str, ".json")))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :start,
                s(:send,
                  s(:lvar, :uri), :host),
                s(:send,
                  s(:lvar, :uri), :port),
                s(:lvar, :http_options)),
              s(:args,
                s(:arg, :http)),
              s(:begin,
                s(:lvasgn, :data,
                  s(:hash,
                    s(:pair,
                      s(:str, "issue"),
                      s(:hash,
                        s(:pair,
                          s(:str, "status_id"),
                          s(:const, nil, :STATUS_CLOSE)))))),
                s(:lvasgn, :res,
                  s(:send,
                    s(:lvar, :http), :put,
                    s(:send,
                      s(:lvar, :uri), :path),
                    s(:send, nil, :JSON,
                      s(:lvar, :data)),
                    s(:hash,
                      s(:pair,
                        s(:str, "X-Redmine-API-Key"),
                        s(:const, nil, :REDMINE_API_KEY)),
                      s(:pair,
                        s(:str, "Content-Type"),
                        s(:str, "application/json"))))),
                s(:send,
                  s(:lvar, :res), :value),
                s(:send, nil, :show_last_journal,
                  s(:lvar, :http),
                  s(:lvar, :uri))))))),
      s(:pair,
        s(:str, "last"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(\\d+)?\\z"),
                  s(:regopt)),
                s(:lvar, :args)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:if,
              s(:nth_ref, 1),
              s(:begin,
                s(:lvasgn, :i,
                  s(:send,
                    s(:nth_ref, 1), :to_i)),
                s(:if,
                  s(:and,
                    s(:ivar, :@issues),
                    s(:send,
                      s(:lvar, :i), :<,
                      s(:send,
                        s(:ivar, :@issues), :size))),
                  s(:lvasgn, :i,
                    s(:send,
                      s(:send,
                        s(:ivar, :@issues), :[],
                        s(:lvar, :i)), :[],
                      s(:str, "id"))), nil),
                s(:ivasgn, :@issue,
                  s(:lvar, :i))), nil),
            s(:if,
              s(:ivar, :@issue), nil,
              s(:begin,
                s(:send, nil, :puts,
                  s(:str, "ticket not selected")),
                s(:next))),
            s(:lvasgn, :uri,
              s(:send, nil, :URI,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :REDMINE_BASE)),
                  s(:str, "/issues/"),
                  s(:begin,
                    s(:ivar, :@issue)),
                  s(:str, ".json")))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :start,
                s(:send,
                  s(:lvar, :uri), :host),
                s(:send,
                  s(:lvar, :uri), :port),
                s(:lvar, :http_options)),
              s(:args,
                s(:arg, :http)),
              s(:send, nil, :show_last_journal,
                s(:lvar, :http),
                s(:lvar, :uri)))))),
      s(:pair,
        s(:str, "!"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:send, nil, :system,
            s(:send,
              s(:lvar, :args), :strip)))),
      s(:pair,
        s(:str, "quit"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :args), :empty?), nil,
              s(:send, nil, :raise,
                s(:const, nil, :CommandSyntaxError))),
            s(:send, nil, :exit)))),
      s(:pair,
        s(:str, "exit"),
        s(:str, "quit")),
      s(:pair,
        s(:str, "help"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :args)),
          s(:begin,
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "ls [PAGE]              "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " show all required tickets"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "[show] TICKET          "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " show the detail of the TICKET, and select it"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "backport               "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " show the option of selected ticket for merger.rb"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "rel REVISION           "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " add the selected ticket as related to the REVISION"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "done [TICKET] [-- NOTE]"), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " set Backport field of the TICKET to DONE"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "close [TICKET]         "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " close the TICKET"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "last [TICKET]          "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " show the last journal of the TICKET"))),
            s(:send, nil, :puts,
              s(:send,
                s(:send,
                  s(:str, "! COMMAND              "), :color,
                  s(:hash,
                    s(:pair,
                      s(:sym, :bold),
                      s(:true)))), :+,
                s(:str, " execute COMMAND")))))))),
  s(:lvasgn, :list,
    s(:send,
      s(:const, nil, :Abbrev), :abbrev,
      s(:send,
        s(:lvar, :commands), :keys))),
  s(:ivasgn, :@issues,
    s(:nil)),
  s(:ivasgn, :@issue,
    s(:nil)),
  s(:ivasgn, :@changesets,
    s(:nil)),
  s(:while,
    s(:true),
    s(:begin,
      s(:kwbegin,
        s(:rescue,
          s(:lvasgn, :l,
            s(:send,
              s(:const, nil, :Readline), :readline,
              s(:dstr,
                s(:begin,
                  s(:if,
                    s(:ivar, :@issue),
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:str, "#"), :+,
                          s(:send,
                            s(:ivar, :@issue), :to_s))), :color,
                      s(:hash,
                        s(:pair,
                          s(:sym, :bold),
                          s(:true)))), nil)),
                s(:str, "> ")))),
          s(:resbody,
            s(:array,
              s(:const, nil, :Interrupt)), nil,
            s(:break)), nil)),
      s(:if,
        s(:lvar, :l), nil,
        s(:break)),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :cmd),
          s(:lvasgn, :args)),
        s(:send,
          s(:send,
            s(:lvar, :l), :strip), :split,
          s(:regexp,
            s(:str, "\\s+|\\b"),
            s(:regopt)),
          s(:int, 2))),
      s(:if,
        s(:lvar, :cmd), nil,
        s(:next)),
      s(:if,
        s(:and,
          s(:begin,
            s(:or,
              s(:send,
                s(:lvar, :args), :!),
              s(:send,
                s(:lvar, :args), :empty?))),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "\\A\\d+\\z"),
              s(:regopt)),
            s(:lvar, :cmd))),
        s(:begin,
          s(:lvasgn, :args,
            s(:lvar, :cmd)),
          s(:lvasgn, :cmd,
            s(:str, "show"))), nil),
      s(:if,
        s(:send,
          s(:send,
            s(:lvar, :commands), :[],
            s(:lvar, :cmd)), :is_a?,
          s(:const, nil, :String)),
        s(:lvasgn, :cmd,
          s(:send,
            s(:lvar, :list), :[],
            s(:lvar, :cmd))), nil),
      s(:lvasgn, :cmd,
        s(:send,
          s(:lvar, :list), :[],
          s(:lvar, :cmd))),
      s(:kwbegin,
        s(:rescue,
          s(:if,
            s(:lvar, :cmd),
            s(:send,
              s(:send,
                s(:lvar, :commands), :[],
                s(:lvar, :cmd)), :call,
              s(:lvar, :args)),
            s(:send, nil, :raise,
              s(:const, nil, :CommandSyntaxError))),
          s(:resbody,
            s(:array,
              s(:const, nil, :CommandSyntaxError)), nil,
            s(:send, nil, :puts,
              s(:dstr,
                s(:str, "error "),
                s(:begin,
                  s(:send,
                    s(:lvar, :l), :inspect))))), nil)))))
