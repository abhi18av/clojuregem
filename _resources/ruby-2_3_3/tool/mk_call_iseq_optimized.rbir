s(:begin,
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "#if 1 /* enable or disable this optimization */\n"),
      s(:str, "\n"),
      s(:str, "/* DO NOT EDIT THIS FILE DIRECTLY\n"),
      s(:str, " *\n"),
      s(:str, " * This file is enerated by tool/mkcall_iseq.rb\n"),
      s(:str, " */\n"),
      s(:str, "\n"))),
  s(:casgn, nil, :P,
    s(:begin,
      s(:irange,
        s(:int, 0),
        s(:int, 3)))),
  s(:casgn, nil, :L,
    s(:begin,
      s(:irange,
        s(:int, 1),
        s(:int, 6)))),
  s(:def, :fname,
    s(:args,
      s(:arg, :param),
      s(:arg, :local)),
    s(:dstr,
      s(:str, "vm_call_iseq_setup_normal_0start_"),
      s(:begin,
        s(:lvar, :param)),
      s(:str, "params_"),
      s(:begin,
        s(:lvar, :local)),
      s(:str, "locals"))),
  s(:block,
    s(:send,
      s(:const, nil, :P), :each),
    s(:args,
      s(:arg, :param)),
    s(:block,
      s(:send,
        s(:const, nil, :L), :each),
      s(:args,
        s(:arg, :local)),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "static VALUE\n"),
          s(:begin,
            s(:send, nil, :fname,
              s(:lvar, :param),
              s(:lvar, :local))),
          s(:str, "(rb_thread_t *th, rb_control_frame_t *cfp, struct rb_calling_info *calling, const struct rb_call_info *ci, struct rb_call_cache *cc)\n"),
          s(:str, "{\n"),
          s(:str, "    return vm_call_iseq_setup_normal(th, cfp, calling, ci, cc, 0, "),
          s(:begin,
            s(:lvar, :param)),
          s(:str, ", "),
          s(:begin,
            s(:lvar, :local)),
          s(:str, ");\n"),
          s(:str, "}\n"),
          s(:str, "\n"))))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "/* vm_call_iseq_handlers[param][local] */\n"),
      s(:str, "static const vm_call_handler vm_call_iseq_handlers[]["),
      s(:begin,
        s(:send,
          s(:send,
            s(:const, nil, :L), :to_a), :size)),
      s(:str, "] = {\n"),
      s(:begin,
        s(:send,
          s(:block,
            s(:send,
              s(:const, nil, :P), :map),
            s(:args,
              s(:arg, :param)),
            s(:send,
              s(:send,
                s(:str, "{"), :+,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :L), :map),
                    s(:args,
                      s(:arg, :local)),
                    s(:send, nil, :fname,
                      s(:lvar, :param),
                      s(:lvar, :local))), :join,
                  s(:str, ",\n "))), :+,
              s(:str, "}"))), :join,
          s(:str, ",\n"))),
      s(:str, "\n"),
      s(:str, "};\n"),
      s(:str, "\n"),
      s(:str, "static inline vm_call_handler\n"),
      s(:str, "vm_call_iseq_setup_func(const struct rb_call_info *ci, const int param_size, const int local_size)\n"),
      s(:str, "{\n"),
      s(:str, "    if (UNLIKELY(ci->flag & VM_CALL_TAILCALL)) {\n"),
      s(:str, "\treturn vm_call_iseq_setup_tailcall_0start;\n"),
      s(:str, "    }\n"),
      s(:str, "    else if (0) { /* to disable optimize */\n"),
      s(:str, "        return vm_call_iseq_setup_normal_0start;\n"),
      s(:str, "    }\n"),
      s(:str, "    else {\n"),
      s(:str, "\tif (param_size <= "),
      s(:begin,
        s(:send,
          s(:const, nil, :P), :end)),
      s(:str, " &&\n"),
      s(:str, "\t    local_size <= "),
      s(:begin,
        s(:send,
          s(:const, nil, :L), :end)),
      s(:str, ") {\n"),
      s(:str, "\t    VM_ASSERT(local_size != 0);\n"),
      s(:str, "\t    return vm_call_iseq_handlers[param_size][local_size-1];\n"),
      s(:str, "\t}\n"),
      s(:str, "\treturn vm_call_iseq_setup_normal_0start;\n"),
      s(:str, "    }\n"),
      s(:str, "}\n"),
      s(:str, "\n"),
      s(:str, "#else\n"),
      s(:str, "\n"),
      s(:str, "\n"),
      s(:str, "static inline vm_call_handler\n"),
      s(:str, "vm_call_iseq_setup_func(const struct rb_call_info *ci, struct rb_call_cache *cc)\n"),
      s(:str, "{\n"),
      s(:str, "    if (UNLIKELY(ci->flag & VM_CALL_TAILCALL)) {\n"),
      s(:str, "\treturn vm_call_iseq_setup_tailcall_0start;\n"),
      s(:str, "    }\n"),
      s(:str, "    else {\n"),
      s(:str, "        return vm_call_iseq_setup_normal_0start;\n"),
      s(:str, "    }\n"),
      s(:str, "}\n"),
      s(:str, "#endif\n"))))
