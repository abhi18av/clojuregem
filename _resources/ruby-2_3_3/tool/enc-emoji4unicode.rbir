s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/document")),
  s(:send, nil, :require,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../transcode-tblgen"),
      s(:str, "(string)"))),
  s(:class,
    s(:const, nil, :EmojiTable), nil,
    s(:begin,
      s(:casgn, nil, :VERBOSE_MODE,
        s(:false)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :xml_path)),
        s(:begin,
          s(:ivasgn, :@doc,
            s(:send,
              s(:const,
                s(:const, nil, :REXML), :Document), :new,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :xml_path)))),
          s(:ivasgn, :@kddi_undoc,
            s(:send, nil, :make_kddi_undoc_map)))),
      s(:def, :conversion,
        s(:args,
          s(:arg, :from_carrier),
          s(:arg, :to_carrier),
          s(:blockarg, :block)),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :REXML), :XPath), :each,
            s(:send,
              s(:ivar, :@doc), :root),
            s(:str, "//e")),
          s(:args,
            s(:arg, :e)),
          s(:begin,
            s(:lvasgn, :from,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attribute,
                  s(:send,
                    s(:lvar, :from_carrier), :downcase)), :to_s)),
            s(:lvasgn, :to,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attribute,
                  s(:send,
                    s(:lvar, :to_carrier), :downcase)), :to_s)),
            s(:lvasgn, :text_fallback,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attribute,
                  s(:str, "text_fallback")), :to_s)),
            s(:lvasgn, :name,
              s(:send,
                s(:send,
                  s(:lvar, :e), :attribute,
                  s(:str, "name")), :to_s)),
            s(:if,
              s(:send,
                s(:lvar, :from), :=~,
                s(:regexp,
                  s(:str, "^(?:\\*|\\+)(.+)$"),
                  s(:regopt))),
              s(:lvasgn, :from,
                s(:nth_ref, 1)), nil),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :from), :empty?),
                s(:send,
                  s(:lvar, :from), :!~,
                  s(:regexp,
                    s(:str, "^[0-9A-F]+$"),
                    s(:regopt)))), nil,
              s(:begin,
                s(:lvasgn, :from_utf8,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:send,
                            s(:lvar, :from), :hex)), :pack,
                        s(:str, "U")), :unpack,
                      s(:str, "H*")), :first)),
                s(:if,
                  s(:send,
                    s(:lvar, :to), :=~,
                    s(:regexp,
                      s(:str, "^(?:&gt;|\\*)?([0-9A-F\\+]+)$"),
                      s(:regopt))),
                  s(:begin,
                    s(:lvasgn, :str_to,
                      s(:nth_ref, 1)),
                    s(:if,
                      s(:send,
                        s(:lvar, :str_to), :=~,
                        s(:regexp,
                          s(:str, "^\\+"),
                          s(:regopt))),
                      s(:begin,
                        s(:lvasgn, :proposal,
                          s(:true)),
                        s(:send,
                          s(:lvar, :str_to), :sub!,
                          s(:regexp,
                            s(:str, "^\\+"),
                            s(:regopt)),
                          s(:str, ""))),
                      s(:lvasgn, :proposal,
                        s(:false))),
                    s(:lvasgn, :tos,
                      s(:send,
                        s(:lvar, :str_to), :split,
                        s(:str, "+"))),
                    s(:lvasgn, :to_utf8,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :tos), :map,
                              s(:block_pass,
                                s(:sym, :hex))), :pack,
                            s(:str, "U*")), :unpack,
                          s(:str, "H*")), :first)),
                    s(:lvasgn, :comment,
                      s(:send,
                        s(:str, "[%s] U+%X -> %s"), :%,
                        s(:array,
                          s(:lvar, :name),
                          s(:send,
                            s(:lvar, :from), :hex),
                          s(:send,
                            s(:block,
                              s(:send,
                                s(:lvar, :tos), :map),
                              s(:args,
                                s(:arg, :c)),
                              s(:send,
                                s(:str, "U+%X"), :%,
                                s(:send,
                                  s(:lvar, :c), :hex))), :join,
                            s(:str, " "))))),
                    s(:send,
                      s(:lvar, :block), :call,
                      s(:hash,
                        s(:pair,
                          s(:sym, :from),
                          s(:lvar, :from_utf8)),
                        s(:pair,
                          s(:sym, :to),
                          s(:lvar, :to_utf8)),
                        s(:pair,
                          s(:sym, :comment),
                          s(:lvar, :comment)),
                        s(:pair,
                          s(:sym, :fallback),
                          s(:false)),
                        s(:pair,
                          s(:sym, :proposal),
                          s(:lvar, :proposal))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :to), :empty?),
                    s(:if,
                      s(:send,
                        s(:lvar, :text_fallback), :empty?),
                      s(:begin,
                        s(:lvasgn, :comment,
                          s(:send,
                            s(:str, "[%s] U+%X -> U+3013 (GETA)"), :%,
                            s(:array,
                              s(:lvar, :name),
                              s(:send,
                                s(:lvar, :from), :hex)))),
                        s(:send,
                          s(:lvar, :block), :call,
                          s(:hash,
                            s(:pair,
                              s(:sym, :from),
                              s(:lvar, :from_utf8)),
                            s(:pair,
                              s(:sym, :to),
                              s(:send,
                                s(:send,
                                  s(:str, "ã€“"), :unpack,
                                  s(:str, "H*")), :first)),
                            s(:pair,
                              s(:sym, :comment),
                              s(:lvar, :comment)),
                            s(:pair,
                              s(:sym, :fallback),
                              s(:true)),
                            s(:pair,
                              s(:sym, :proposal),
                              s(:false))))),
                      s(:begin,
                        s(:lvasgn, :to_utf8,
                          s(:send,
                            s(:send,
                              s(:lvar, :text_fallback), :unpack,
                              s(:str, "H*")), :first)),
                        s(:lvasgn, :comment,
                          s(:send,
                            s(:str, "[%s] U+%X -> \"%s\""), :%,
                            s(:array,
                              s(:lvar, :name),
                              s(:send,
                                s(:lvar, :from), :hex),
                              s(:lvar, :text_fallback)))),
                        s(:send,
                          s(:lvar, :block), :call,
                          s(:hash,
                            s(:pair,
                              s(:sym, :from),
                              s(:lvar, :from_utf8)),
                            s(:pair,
                              s(:sym, :to),
                              s(:lvar, :to_utf8)),
                            s(:pair,
                              s(:sym, :comment),
                              s(:lvar, :comment)),
                            s(:pair,
                              s(:sym, :fallback),
                              s(:true)),
                            s(:pair,
                              s(:sym, :proposal),
                              s(:false)))))),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:str, "something wrong: %s -> %s"), :%,
                        s(:array,
                          s(:lvar, :from),
                          s(:lvar, :to))))))))))),
      s(:def, :generate,
        s(:args,
          s(:arg, :io),
          s(:arg, :from_carrier),
          s(:arg, :to_carrier)),
        s(:begin,
          s(:lvasgn, :from_encoding,
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :from_carrier), :==,
                  s(:str, "Unicode"))),
              s(:str, "UTF-8"),
              s(:send,
                s(:str, "UTF8-"), :+,
                s(:lvar, :from_carrier)))),
          s(:lvasgn, :to_encoding,
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :to_carrier), :==,
                  s(:str, "Unicode"))),
              s(:str, "UTF-8"),
              s(:send,
                s(:str, "UTF8-"), :+,
                s(:lvar, :to_carrier)))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:dstr,
              s(:str, "EMOJI_EXCHANGE_TBL['"),
              s(:begin,
                s(:lvar, :from_encoding)),
              s(:str, "']['"),
              s(:begin,
                s(:lvar, :to_encoding)),
              s(:str, "'] = ["))),
          s(:if,
            s(:send,
              s(:lvar, :from_carrier), :==,
              s(:str, "KDDI")),
            s(:send,
              s(:lvar, :io), :puts,
              s(:str, "  # for documented codepoints")), nil),
          s(:block,
            s(:send,
              s(:self), :conversion,
              s(:lvar, :from_carrier),
              s(:lvar, :to_carrier)),
            s(:args,
              s(:arg, :params)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :from),
                  s(:lvasgn, :to)),
                s(:array,
                  s(:send,
                    s(:lvar, :params), :[],
                    s(:sym, :from)),
                  s(:dstr,
                    s(:str, "\""),
                    s(:begin,
                      s(:send,
                        s(:lvar, :params), :[],
                        s(:sym, :to))),
                    s(:str, "\"")))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :params), :[],
                    s(:sym, :fallback)),
                  s(:send,
                    s(:lvar, :params), :[],
                    s(:sym, :proposal))),
                s(:lvasgn, :to,
                  s(:str, ":undef")), nil),
              s(:send,
                s(:lvar, :io), :puts,
                s(:dstr,
                  s(:str, "  [\""),
                  s(:begin,
                    s(:lvar, :from)),
                  s(:str, "\", "),
                  s(:begin,
                    s(:lvar, :to)),
                  s(:str, "], # "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :params), :[],
                      s(:sym, :comment))))))),
          s(:if,
            s(:send,
              s(:lvar, :from_carrier), :==,
              s(:str, "KDDI")),
            s(:begin,
              s(:send,
                s(:lvar, :io), :puts,
                s(:str, "  # for undocumented codepoints")),
              s(:block,
                s(:send,
                  s(:self), :conversion,
                  s(:lvar, :from_carrier),
                  s(:lvar, :to_carrier)),
                s(:args,
                  s(:arg, :params)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :from),
                      s(:lvasgn, :to)),
                    s(:array,
                      s(:send,
                        s(:lvar, :params), :[],
                        s(:sym, :from)),
                      s(:dstr,
                        s(:str, "\""),
                        s(:begin,
                          s(:send,
                            s(:lvar, :params), :[],
                            s(:sym, :to))),
                        s(:str, "\"")))),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :params), :[],
                        s(:sym, :fallback)),
                      s(:send,
                        s(:lvar, :params), :[],
                        s(:sym, :proposal))),
                    s(:lvasgn, :to,
                      s(:str, ":undef")), nil),
                  s(:lvasgn, :unicode,
                    s(:send, nil, :utf8_to_ucs,
                      s(:lvar, :from))),
                  s(:lvasgn, :undoc,
                    s(:send, nil, :ucs_to_utf8,
                      s(:send,
                        s(:ivar, :@kddi_undoc), :[],
                        s(:lvar, :unicode)))),
                  s(:send,
                    s(:lvar, :io), :puts,
                    s(:dstr,
                      s(:str, "  [\""),
                      s(:begin,
                        s(:lvar, :undoc)),
                      s(:str, "\", "),
                      s(:begin,
                        s(:lvar, :to)),
                      s(:str, "], # "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :params), :[],
                          s(:sym, :comment)))))))), nil),
          s(:send,
            s(:lvar, :io), :puts,
            s(:str, "]")),
          s(:send,
            s(:lvar, :io), :puts))),
      s(:send, nil, :private),
      s(:def, :utf8_to_ucs,
        s(:args,
          s(:arg, :cp)),
        s(:return,
          s(:send,
            s(:send,
              s(:send,
                s(:array,
                  s(:lvar, :cp)), :pack,
                s(:str, "H*")), :unpack,
              s(:str, "U*")), :first))),
      s(:def, :ucs_to_utf8,
        s(:args,
          s(:arg, :cp)),
        s(:return,
          s(:send,
            s(:send,
              s(:send,
                s(:array,
                  s(:lvar, :cp)), :pack,
                s(:str, "U*")), :unpack,
              s(:str, "H*")), :first))),
      s(:def, :make_kddi_undoc_map,
        s(:args),
        s(:begin,
          s(:lvasgn, :pub_to_sjis,
            s(:block,
              s(:send,
                s(:send, nil, :citrus_decode_mapsrc,
                  s(:str, "mskanji"),
                  s(:int, 2),
                  s(:str, "UCS/EMOJI_SHIFT_JIS-KDDI")), :sort_by),
              s(:args,
                s(:arg, :u),
                s(:arg, :s)),
              s(:lvar, :s))),
          s(:lvasgn, :sjis_to_undoc,
            s(:block,
              s(:send,
                s(:send, nil, :citrus_decode_mapsrc,
                  s(:str, "mskanji"),
                  s(:int, 2),
                  s(:str, "EMOJI_SHIFT_JIS-KDDI-UNDOC/UCS")), :sort_by),
              s(:args,
                s(:arg, :s),
                s(:arg, :u)),
              s(:lvar, :s))),
          s(:return,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :pub_to_sjis), :zip,
                  s(:lvar, :sjis_to_undoc)), :inject,
                s(:hash)),
              s(:args,
                s(:arg, :h),
                s(:arg, :rec)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :rec), :[],
                        s(:int, 0)), :[],
                      s(:int, 1)), :!=,
                    s(:send,
                      s(:send,
                        s(:lvar, :rec), :[],
                        s(:int, 1)), :[],
                      s(:int, 0))),
                  s(:send, nil, :raise,
                    s(:str, "no match sjis codepoint")), nil),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:send,
                    s(:send,
                      s(:lvar, :rec), :[],
                      s(:int, 0)), :[],
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :rec), :[],
                      s(:int, 1)), :[],
                    s(:int, 1))),
                s(:next,
                  s(:lvar, :h))))))))),
  s(:if,
    s(:send,
      s(:const, nil, :ARGV), :empty?),
    s(:begin,
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "usage: "),
          s(:gvar, :$0),
          s(:str, " [emoji4unicode.xml]"))),
      s(:send, nil, :exit,
        s(:int, 1))), nil),
  s(:gvasgn, :$srcdir,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../../enc/trans"),
      s(:str, "(string)"))),
  s(:lvasgn, :emoji_table,
    s(:send,
      s(:const, nil, :EmojiTable), :new,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)))),
  s(:lvasgn, :companies,
    s(:array,
      s(:str, "DoCoMo"),
      s(:str, "KDDI"),
      s(:str, "SoftBank"),
      s(:str, "Unicode"))),
  s(:lvasgn, :io,
    s(:const, nil, :STDOUT)),
  s(:send,
    s(:lvar, :io), :puts,
    s(:str, "EMOJI_EXCHANGE_TBL = Hash.new{|h,k| h[k] = {}}")),
  s(:block,
    s(:send,
      s(:lvar, :companies), :each),
    s(:args,
      s(:arg, :from_company)),
    s(:block,
      s(:send,
        s(:lvar, :companies), :each),
      s(:args,
        s(:arg, :to_company)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :from_company), :==,
            s(:lvar, :to_company)),
          s(:next), nil),
        s(:send,
          s(:lvar, :emoji_table), :generate,
          s(:lvar, :io),
          s(:lvar, :from_company),
          s(:lvar, :to_company))))))
