s(:begin,
  s(:or_asgn,
    s(:gvasgn, :$install_name),
    s(:nil)),
  s(:or_asgn,
    s(:gvasgn, :$so_name),
    s(:nil)),
  s(:or,
    s(:lvasgn, :arch,
      s(:gvar, :$arch)),
    s(:send, nil, :raise,
      s(:str, "missing -arch"))),
  s(:or,
    s(:lvasgn, :version,
      s(:gvar, :$version)),
    s(:send, nil, :raise,
      s(:str, "missing -version"))),
  s(:lvasgn, :srcdir,
    s(:send,
      s(:const, nil, :File), :expand_path,
      s(:str, "../.."),
      s(:str, "(string)"))),
  s(:if,
    s(:defined?,
      s(:const, nil, :CROSS_COMPILING)), nil,
    s(:send,
      s(:gvar, :$:), :replace,
      s(:array,
        s(:send,
          s(:lvar, :srcdir), :+,
          s(:str, "/lib"))))),
  s(:send,
    s(:gvar, :$:), :unshift,
    s(:str, ".")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:lvasgn, :mkconfig,
    s(:send,
      s(:const, nil, :File), :basename,
      s(:gvar, :$0))),
  s(:lvasgn, :rbconfig_rb,
    s(:or,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)),
      s(:str, "rbconfig.rb"))),
  s(:if,
    s(:send,
      s(:const, nil, :File), :directory?,
      s(:lvasgn, :dir,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:lvar, :rbconfig_rb)))), nil,
    s(:send,
      s(:const, nil, :FileUtils), :makedirs,
      s(:lvar, :dir),
      s(:hash,
        s(:pair,
          s(:sym, :verbose),
          s(:true))))),
  s(:lvasgn, :config,
    s(:str, "")),
  s(:defs,
    s(:lvar, :config), :write,
    s(:args,
      s(:arg, :arg)),
    s(:send, nil, :concat,
      s(:send,
        s(:lvar, :arg), :to_s))),
  s(:gvasgn, :$stdout,
    s(:lvar, :config)),
  s(:lvasgn, :fast,
    s(:hash,
      s(:pair,
        s(:str, "prefix"),
        s(:const, nil, :TRUE)),
      s(:pair,
        s(:str, "ruby_install_name"),
        s(:const, nil, :TRUE)),
      s(:pair,
        s(:str, "INSTALL"),
        s(:const, nil, :TRUE)),
      s(:pair,
        s(:str, "EXEEXT"),
        s(:const, nil, :TRUE)))),
  s(:lvasgn, :win32,
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "mswin"),
        s(:regopt)),
      s(:lvar, :arch))),
  s(:lvasgn, :universal,
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "universal.*darwin"),
        s(:regopt)),
      s(:lvar, :arch))),
  s(:lvasgn, :v_fast,
    s(:array)),
  s(:lvasgn, :v_others,
    s(:array)),
  s(:lvasgn, :vars,
    s(:hash)),
  s(:lvasgn, :continued_name,
    s(:nil)),
  s(:lvasgn, :continued_line,
    s(:nil)),
  s(:lvasgn, :install_name,
    s(:nil)),
  s(:lvasgn, :so_name,
    s(:nil)),
  s(:block,
    s(:send,
      s(:const, nil, :File), :foreach,
      s(:str, "config.status")),
    s(:args,
      s(:arg, :line)),
    s(:begin,
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "^#"),
            s(:regopt)),
          s(:lvar, :line)),
        s(:next), nil),
      s(:lvasgn, :name,
        s(:nil)),
      s(:case,
        s(:lvar, :line),
        s(:when,
          s(:regexp,
            s(:str, "^s([%,])@(\\w+)@\\1(?:\\|\\#_!!_\\#\\|)?(.*)\\1"),
            s(:regopt)),
          s(:begin,
            s(:lvasgn, :name,
              s(:nth_ref, 2)),
            s(:lvasgn, :val,
              s(:send,
                s(:nth_ref, 3), :gsub,
                s(:regexp,
                  s(:str, "\\\\(?=,)"),
                  s(:regopt)),
                s(:str, ""))))),
        s(:when,
          s(:regexp,
            s(:str, "^S\\[\"(\\w+)\"\\]\\s*=\\s*\"(.*)\"\\s*(\\\\)?$"),
            s(:regopt)),
          s(:begin,
            s(:lvasgn, :name,
              s(:nth_ref, 1)),
            s(:lvasgn, :val,
              s(:nth_ref, 2)),
            s(:if,
              s(:nth_ref, 3),
              s(:begin,
                s(:lvasgn, :continued_line,
                  s(:array,
                    s(:lvar, :val))),
                s(:lvasgn, :continued_name,
                  s(:lvar, :name)),
                s(:next)), nil))),
        s(:when,
          s(:regexp,
            s(:str, "^\"(.*)\"\\s*(\\\\)?$"),
            s(:regopt)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :continued_line), :!),
              s(:next), nil),
            s(:send,
              s(:lvar, :continued_line), :<<,
              s(:nth_ref, 1)),
            s(:if,
              s(:nth_ref, 2),
              s(:next), nil),
            s(:block,
              s(:send,
                s(:lvar, :continued_line), :each),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :sub!,
                s(:regexp,
                  s(:str, "\\\\n\\z"),
                  s(:regopt)),
                s(:str, "\n"))),
            s(:lvasgn, :val,
              s(:send,
                s(:lvar, :continued_line), :join)),
            s(:lvasgn, :name,
              s(:lvar, :continued_name)),
            s(:lvasgn, :continued_line,
              s(:nil)))),
        s(:when,
          s(:regexp,
            s(:str, "^(?:ac_given_)?INSTALL=(.*)"),
            s(:regopt)),
          s(:send,
            s(:lvar, :v_fast), :<<,
            s(:send,
              s(:send,
                s(:str, "  CONFIG[\"INSTALL\"] = "), :+,
                s(:nth_ref, 1)), :+,
              s(:str, "\n")))), nil),
      s(:if,
        s(:lvar, :name),
        s(:begin,
          s(:case,
            s(:lvar, :name),
            s(:when,
              s(:regexp,
                s(:str, "^(?:ac_.*|configure_input|(?:top_)?srcdir|\\w+OBJS)$"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^(?:X|(?:MINI|RUN|(?:HAVE_)?BASE|BOOTSTRAP|BTEST)RUBY(?:_COMMAND)?$)"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^INSTALLDOC|TARGET$"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^DTRACE"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^(?:MAJOR|MINOR|TEENY)$"),
                s(:regopt)),
              s(:begin,
                s(:send,
                  s(:lvar, :vars), :[]=,
                  s(:lvar, :name),
                  s(:lvar, :val)),
                s(:next))),
            s(:when,
              s(:regexp,
                s(:str, "^LIBRUBY_D?LD"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^RUBY_INSTALL_NAME$"),
                s(:regopt)),
              s(:if,
                s(:gvar, :$install_name),
                s(:next,
                  s(:send,
                    s(:lvar, :vars), :[]=,
                    s(:lvar, :name),
                    s(:send,
                      s(:begin,
                        s(:lvasgn, :install_name,
                          s(:lvar, :val))), :dup))), nil)),
            s(:when,
              s(:regexp,
                s(:str, "^RUBY_SO_NAME$"),
                s(:regopt)),
              s(:if,
                s(:gvar, :$so_name),
                s(:next,
                  s(:send,
                    s(:lvar, :vars), :[]=,
                    s(:lvar, :name),
                    s(:send,
                      s(:begin,
                        s(:lvasgn, :so_name,
                          s(:lvar, :val))), :dup))), nil)),
            s(:when,
              s(:regexp,
                s(:str, "^arch$"),
                s(:regopt)),
              s(:if,
                s(:send,
                  s(:lvar, :val), :empty?),
                s(:lvasgn, :val,
                  s(:lvar, :arch)),
                s(:lvasgn, :arch,
                  s(:lvar, :val)))),
            s(:when,
              s(:regexp,
                s(:str, "^sitearch$"),
                s(:regopt)),
              s(:if,
                s(:send,
                  s(:lvar, :val), :empty?),
                s(:lvasgn, :val,
                  s(:str, "$(arch)")), nil)),
            s(:when,
              s(:regexp,
                s(:str, "^DESTDIR$"),
                s(:regopt)),
              s(:next)), nil),
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:regexp,
                s(:str, "^\\$\\(ac_\\w+\\)$"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^\\$\\{ac_\\w+\\}$"),
                s(:regopt)),
              s(:next)),
            s(:when,
              s(:regexp,
                s(:str, "^\\$ac_\\w+$"),
                s(:regopt)),
              s(:next)), nil),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^program_transform_name$"),
                s(:regopt)),
              s(:lvar, :name)),
            s(:begin,
              s(:send,
                s(:lvar, :val), :sub!,
                s(:regexp,
                  s(:str, "\\As(\\\\?\\W)(?:\\^|\\${1,2})\\1\\1(;|\\z)"),
                  s(:regopt)),
                s(:str, "")),
              s(:if,
                s(:send,
                  s(:lvar, :val), :empty?),
                s(:begin,
                  s(:or_asgn,
                    s(:gvasgn, :$install_name),
                    s(:str, "ruby")),
                  s(:next)), nil),
              s(:if,
                s(:gvar, :$install_name), nil,
                s(:begin,
                  s(:gvasgn, :$install_name,
                    s(:str, "ruby")),
                  s(:send,
                    s(:lvar, :val), :gsub!,
                    s(:regexp,
                      s(:str, "\\$\\$"),
                      s(:regopt)),
                    s(:str, "$")),
                  s(:block,
                    s(:send,
                      s(:lvar, :val), :scan,
                      s(:regexp,
                        s(:str, "\\G[\\s;]*(/(?:\\\\.|[^/])*/)?([sy])(\\\\?\\W)((?:(?!\\3)(?:\\\\.|.))*)\\3((?:(?!\\3)(?:\\\\.|.))*)\\3([gi]*)"),
                        s(:regopt))),
                    s(:args,
                      s(:arg, :addr),
                      s(:arg, :cmd),
                      s(:arg, :sep),
                      s(:arg, :pat),
                      s(:arg, :rep),
                      s(:arg, :opt)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :addr),
                        s(:or,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Regexp), :new,
                              s(:send,
                                s(:lvar, :addr), :[],
                                s(:regexp,
                                  s(:str, "\\A/(.*)/\\z"),
                                  s(:regopt)),
                                s(:int, 1))), :=~,
                            s(:gvar, :$install_name)),
                          s(:next)), nil),
                      s(:case,
                        s(:lvar, :cmd),
                        s(:when,
                          s(:str, "s"),
                          s(:begin,
                            s(:lvasgn, :pat,
                              s(:send,
                                s(:const, nil, :Regexp), :new,
                                s(:lvar, :pat),
                                s(:send,
                                  s(:lvar, :opt), :include?,
                                  s(:str, "i")))),
                            s(:if,
                              s(:send,
                                s(:lvar, :opt), :include?,
                                s(:str, "g")),
                              s(:send,
                                s(:gvar, :$install_name), :gsub!,
                                s(:lvar, :pat),
                                s(:lvar, :rep)),
                              s(:send,
                                s(:gvar, :$install_name), :sub!,
                                s(:lvar, :pat),
                                s(:lvar, :rep))))),
                        s(:when,
                          s(:str, "y"),
                          s(:send,
                            s(:gvar, :$install_name), :tr!,
                            s(:send,
                              s(:const, nil, :Regexp), :quote,
                              s(:lvar, :pat)),
                            s(:lvar, :rep))), nil)))))), nil),
          s(:lvasgn, :eq,
            s(:if,
              s(:and,
                s(:lvar, :win32),
                s(:send,
                  s(:lvar, :vars), :[],
                  s(:lvar, :name))),
              s(:str, "<< \"\\n\""),
              s(:str, "="))),
          s(:send,
            s(:lvar, :vars), :[]=,
            s(:lvar, :name),
            s(:lvar, :val)),
          s(:if,
            s(:send,
              s(:lvar, :name), :==,
              s(:str, "configure_args")),
            s(:send,
              s(:lvar, :val), :gsub!,
              s(:regexp,
                s(:str, "--with-out-ext"),
                s(:regopt)),
              s(:str, "--without-ext")), nil),
          s(:lvasgn, :val,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :val), :gsub,
                  s(:regexp,
                    s(:str, "\\$(?:\\$|\\{?(\\w+)\\}?)"),
                    s(:regopt))),
                s(:args),
                s(:if,
                  s(:nth_ref, 1),
                  s(:dstr,
                    s(:str, "$("),
                    s(:begin,
                      s(:nth_ref, 1)),
                    s(:str, ")")),
                  s(:back_ref, :$&))), :dump)),
          s(:case,
            s(:lvar, :name),
            s(:when,
              s(:regexp,
                s(:str, "^prefix$"),
                s(:regopt)),
              s(:lvasgn, :val,
                s(:dstr,
                  s(:str, "(TOPDIR || DESTDIR + "),
                  s(:begin,
                    s(:lvar, :val)),
                  s(:str, ")")))),
            s(:when,
              s(:regexp,
                s(:str, "^ARCH_FLAG$"),
                s(:regopt)),
              s(:if,
                s(:lvar, :universal),
                s(:lvasgn, :val,
                  s(:dstr,
                    s(:str, "arch_flag || "),
                    s(:begin,
                      s(:lvar, :val)))), nil)),
            s(:when,
              s(:regexp,
                s(:str, "^UNIVERSAL_ARCHNAMES$"),
                s(:regopt)),
              s(:if,
                s(:lvar, :universal),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :universal),
                    s(:lvasgn, :val)),
                  s(:array,
                    s(:lvar, :val),
                    s(:str, "universal"))), nil)),
            s(:when,
              s(:regexp,
                s(:str, "^arch$"),
                s(:regopt)),
              s(:if,
                s(:lvar, :universal),
                s(:send,
                  s(:lvar, :val), :sub!,
                  s(:regexp,
                    s(:str, "universal"),
                    s(:regopt)),
                  s(:str, "\#{arch && universal[/(?:\\A|\\s)\#{Regexp.quote(arch)}=(\\S+)/, 1] || '\\&'}")), nil)),
            s(:when,
              s(:regexp,
                s(:str, "^includedir$"),
                s(:regopt)),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "darwin"),
                    s(:regopt)),
                  s(:lvar, :arch)),
                s(:lvasgn, :val,
                  s(:send,
                    s(:str, "\"$(SDKROOT)\""), :+,
                    s(:lvar, :val))), nil)), nil),
          s(:lvasgn, :v,
            s(:dstr,
              s(:str, "  CONFIG[\""),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "\"] "),
              s(:begin,
                s(:lvar, :eq)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :val)),
              s(:str, "\n"))),
          s(:if,
            s(:send,
              s(:lvar, :fast), :[],
              s(:lvar, :name)),
            s(:send,
              s(:lvar, :v_fast), :<<,
              s(:lvar, :v)),
            s(:send,
              s(:lvar, :v_others), :<<,
              s(:lvar, :v))),
          s(:case,
            s(:lvar, :name),
            s(:when,
              s(:str, "RUBY_PROGRAM_VERSION"),
              s(:lvasgn, :version,
                s(:send,
                  s(:lvar, :val), :[],
                  s(:regexp,
                    s(:str, "\\A\"(.*)\"\\z"),
                    s(:regopt)),
                  s(:int, 1)))), nil)), nil))),
  s(:lvasgn, :drive,
    s(:send,
      s(:const,
        s(:const, nil, :File), :PATH_SEPARATOR), :==,
      s(:str, ";"))),
  s(:defs,
    s(:lvar, :vars), :expand,
    s(:args,
      s(:arg, :val),
      s(:optarg, :config,
        s(:self))),
    s(:begin,
      s(:lvasgn, :newval,
        s(:block,
          s(:send,
            s(:lvar, :val), :gsub,
            s(:regexp,
              s(:str, "\\$\\$|\\$\\(([^()]+)\\)|\\$\\{([^{}]+)\\}"),
              s(:regopt))),
          s(:args),
          s(:begin,
            s(:lvasgn, :var,
              s(:back_ref, :$&)),
            s(:if,
              s(:send,
                s(:begin,
                  s(:lvasgn, :v,
                    s(:or,
                      s(:nth_ref, 1),
                      s(:nth_ref, 2)))), :!),
              s(:str, "$"),
              s(:if,
                s(:lvasgn, :key,
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:lvasgn, :v,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:regexp,
                          s(:str, "\\A[^:]+(?=(?::(.*?)=(.*))?\\z)"),
                          s(:regopt)))))),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :pat),
                      s(:lvasgn, :sub)),
                    s(:array,
                      s(:nth_ref, 1),
                      s(:nth_ref, 2))),
                  s(:send,
                    s(:lvar, :config), :[]=,
                    s(:lvar, :v),
                    s(:false)),
                  s(:send,
                    s(:lvar, :config), :[]=,
                    s(:lvar, :v),
                    s(:send, nil, :expand,
                      s(:lvar, :key),
                      s(:lvar, :config))),
                  s(:if,
                    s(:lvar, :pat),
                    s(:lvasgn, :key,
                      s(:block,
                        s(:send,
                          s(:lvar, :key), :gsub,
                          s(:regexp,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :Regexp), :quote,
                                s(:lvar, :pat))),
                            s(:str, "(?=\\s|\\z)"),
                            s(:regopt, :n))),
                        s(:args),
                        s(:lvar, :sub))), nil),
                  s(:lvar, :key)),
                s(:lvar, :var)))))),
      s(:if,
        s(:send,
          s(:lvar, :newval), :==,
          s(:lvar, :val)), nil,
        s(:send,
          s(:lvar, :val), :replace,
          s(:lvar, :newval))),
      s(:lvar, :val))),
  s(:lvasgn, :prefix,
    s(:send,
      s(:lvar, :vars), :expand,
      s(:or_asgn,
        s(:send,
          s(:lvar, :vars), :[],
          s(:str, "prefix")),
        s(:str, "")))),
  s(:lvasgn, :rubyarchdir,
    s(:send,
      s(:lvar, :vars), :expand,
      s(:or_asgn,
        s(:send,
          s(:lvar, :vars), :[],
          s(:str, "rubyarchdir")),
        s(:str, "")))),
  s(:lvasgn, :relative_archdir,
    s(:if,
      s(:send,
        s(:lvar, :rubyarchdir), :rindex,
        s(:lvar, :prefix),
        s(:int, 0)),
      s(:send,
        s(:lvar, :rubyarchdir), :[],
        s(:irange,
          s(:send,
            s(:lvar, :prefix), :size),
          s(:int, -1))),
      s(:lvar, :rubyarchdir))),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "\n# frozen-string-literal: false\n"),
      s(:str, "# This file was created by "),
      s(:begin,
        s(:lvar, :mkconfig)),
      s(:str, " when ruby was built.  It contains\n"),
      s(:str, "# build information for ruby which is used e.g. by mkmf to build\n"),
      s(:str, "# compatible native extensions.  Any changes made to this file will be\n"),
      s(:str, "# lost the next time ruby is built.\n"),
      s(:str, "\n"),
      s(:str, "module RbConfig\n"),
      s(:str, "  RUBY_VERSION.start_with?(\""),
      s(:begin,
        s(:or,
          s(:send,
            s(:lvar, :version), :[],
            s(:regexp,
              s(:str, "^[0-9]+\\.[0-9]+\\."),
              s(:regopt))),
          s(:lvar, :version))),
      s(:str, "\") or\n"),
      s(:str, "    raise \"ruby lib version ("),
      s(:begin,
        s(:lvar, :version)),
      s(:str, ") doesn't match executable version (\#{RUBY_VERSION})\"\n"),
      s(:str, "\n"))),
  s(:send, nil, :print,
    s(:dstr,
      s(:str, "  TOPDIR = File.dirname(__FILE__).chomp!("),
      s(:begin,
        s(:send,
          s(:lvar, :relative_archdir), :dump)),
      s(:str, ")\n"))),
  s(:send, nil, :print,
    s(:str, "  DESTDIR = "),
    s(:begin,
      s(:if,
        s(:lvar, :drive),
        s(:str, "TOPDIR && TOPDIR[/\\A[a-z]:/i] || "),
        s(:str, ""))),
    s(:str, "'' unless defined? DESTDIR\n")),
  s(:if,
    s(:lvar, :universal),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "  arch_flag = ENV['ARCHFLAGS'] || ((e = ENV['RC_ARCHS']) && e.split.uniq.map {|a| \"-arch \#{a}\"}.join(' '))\n"),
        s(:str, "  arch = arch_flag && arch_flag[/\\A\\s*-arch\\s+(\\S+)\\s*\\z/, 1]\n"))), nil),
  s(:if,
    s(:lvar, :universal),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "  universal = "),
        s(:begin,
          s(:lvar, :universal)),
        s(:str, "\n"))), nil),
  s(:send, nil, :print,
    s(:str, "  CONFIG = {}\n")),
  s(:send, nil, :print,
    s(:str, "  CONFIG[\"DESTDIR\"] = DESTDIR\n")),
  s(:lvasgn, :versions,
    s(:hash)),
  s(:block,
    s(:send,
      s(:const, nil, :IO), :foreach,
      s(:send,
        s(:const, nil, :File), :join,
        s(:lvar, :srcdir),
        s(:str, "version.h"))),
    s(:args,
      s(:arg, :l)),
    s(:begin,
      s(:lvasgn, :m,
        s(:send,
          s(:regexp,
            s(:str, "^\\s*#\\s*define\\s+RUBY_(PATCHLEVEL)\\s+(-?\\d+)"),
            s(:regopt)), :match,
          s(:lvar, :l))),
      s(:if,
        s(:lvar, :m),
        s(:begin,
          s(:send,
            s(:lvar, :versions), :[]=,
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 1)),
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 2))),
          s(:break)), nil))),
  s(:block,
    s(:send,
      s(:const, nil, :IO), :foreach,
      s(:send,
        s(:const, nil, :File), :join,
        s(:lvar, :srcdir),
        s(:str, "include/ruby/version.h"))),
    s(:args,
      s(:arg, :l)),
    s(:begin,
      s(:lvasgn, :m,
        s(:send,
          s(:regexp,
            s(:str, "^\\s*#\\s*define\\s+RUBY_API_VERSION_(MAJOR|MINOR|TEENY)\\s+(-?\\d+)"),
            s(:regopt)), :match,
          s(:lvar, :l))),
      s(:if,
        s(:lvar, :m),
        s(:begin,
          s(:send,
            s(:lvar, :versions), :[]=,
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 1)),
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 2))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :versions), :size), :==,
              s(:int, 4)),
            s(:break), nil)), nil))),
  s(:block,
    s(:send,
      s(:array,
        s(:str, "MAJOR"),
        s(:str, "MINOR"),
        s(:str, "TEENY"),
        s(:str, "PATCHLEVEL")), :each),
    s(:args,
      s(:arg, :v)),
    s(:send, nil, :print,
      s(:dstr,
        s(:str, "  CONFIG["),
        s(:begin,
          s(:send,
            s(:lvar, :v), :dump)),
        s(:str, "] = "),
        s(:begin,
          s(:send,
            s(:send,
              s(:lvar, :versions), :[],
              s(:lvar, :v)), :dump)),
        s(:str, "\n")))),
  s(:lvasgn, :dest,
    s(:if,
      s(:lvar, :drive),
      s(:regexp,
        s(:str, "= \"(?!\\$[\\(\\{])(?i:[a-z]:)"),
        s(:regopt)),
      s(:regexp,
        s(:str, "= \"(?!\\$[\\(\\{])"),
        s(:regopt)))),
  s(:lvasgn, :v_disabled,
    s(:hash)),
  s(:block,
    s(:send,
      s(:lvar, :v_others), :collect!),
    s(:args,
      s(:arg, :x)),
    s(:if,
      s(:send,
        s(:regexp,
          s(:str, "^\\s*CONFIG\\[\"((?!abs_|old)[a-z]+(?:_prefix|dir))\"\\]"),
          s(:regopt)), :===,
        s(:lvar, :x)),
      s(:begin,
        s(:lvasgn, :name,
          s(:nth_ref, 1)),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "= \"no\"$"),
              s(:regopt)),
            s(:lvar, :x)),
          s(:begin,
            s(:send,
              s(:lvar, :v_disabled), :[]=,
              s(:lvar, :name),
              s(:true)),
            s(:send,
              s(:lvar, :v_others), :delete,
              s(:lvar, :name)),
            s(:next)), nil),
        s(:send,
          s(:lvar, :x), :sub,
          s(:lvar, :dest),
          s(:str, "= \"$(DESTDIR)"))),
      s(:lvar, :x))),
  s(:send,
    s(:lvar, :v_others), :compact!),
  s(:if,
    s(:gvar, :$install_name),
    s(:begin,
      s(:if,
        s(:and,
          s(:lvar, :install_name),
          s(:send,
            s(:send,
              s(:lvar, :vars), :expand,
              s(:str, "$(RUBY_INSTALL_NAME)")), :==,
            s(:gvar, :$install_name))),
        s(:gvasgn, :$install_name,
          s(:lvar, :install_name)), nil),
      s(:send,
        s(:lvar, :v_fast), :<<,
        s(:send,
          s(:send,
            s(:str, "  CONFIG[\"ruby_install_name\"] = \""), :+,
            s(:gvar, :$install_name)), :+,
          s(:str, "\"\n"))),
      s(:send,
        s(:lvar, :v_fast), :<<,
        s(:send,
          s(:send,
            s(:str, "  CONFIG[\"RUBY_INSTALL_NAME\"] = \""), :+,
            s(:gvar, :$install_name)), :+,
          s(:str, "\"\n")))), nil),
  s(:if,
    s(:gvar, :$so_name),
    s(:begin,
      s(:if,
        s(:and,
          s(:lvar, :so_name),
          s(:send,
            s(:send,
              s(:lvar, :vars), :expand,
              s(:str, "$(RUBY_SO_NAME)")), :==,
            s(:gvar, :$so_name))),
        s(:gvasgn, :$so_name,
          s(:lvar, :so_name)), nil),
      s(:send,
        s(:lvar, :v_fast), :<<,
        s(:send,
          s(:send,
            s(:str, "  CONFIG[\"RUBY_SO_NAME\"] = \""), :+,
            s(:gvar, :$so_name)), :+,
          s(:str, "\"\n")))), nil),
  s(:send, nil, :print,
    s(:splat,
      s(:lvar, :v_fast))),
  s(:send, nil, :print,
    s(:splat,
      s(:lvar, :v_others))),
  s(:if,
    s(:match_with_lvasgn,
      s(:regexp,
        s(:str, "darwin"),
        s(:regopt)),
      s(:lvar, :arch)),
    s(:send, nil, :print,
      s(:str, "  CONFIG[\"SDKROOT\"] = ENV[\"SDKROOT\"] || \"\" # don't run xcrun everytime, usually useless.\n")), nil),
  s(:send, nil, :print,
    s(:dstr,
      s(:str, "  CONFIG[\"archdir\"] = \"$(rubyarchdir)\"\n"),
      s(:str, "  CONFIG[\"topdir\"] = File.dirname(__FILE__)\n"),
      s(:str, "  MAKEFILE_CONFIG = {}\n"),
      s(:str, "  CONFIG.each{|k,v| MAKEFILE_CONFIG[k] = v.dup}\n"),
      s(:str, "  def RbConfig::expand(val, config = CONFIG)\n"),
      s(:str, "    newval = val.gsub(/\\$\\$|\\$\\(([^()]+)\\)|\\$\\{([^{}]+)\\}/) {\n"),
      s(:str, "      var = $&\n"),
      s(:str, "      if !(v = $1 || $2)\n"),
      s(:str, "\t'$'\n"),
      s(:str, "      elsif key = config[v = v[/\\A[^:]+(?=(?::(.*?)=(.*))?\\z)/]]\n"),
      s(:str, "\tpat, sub = $1, $2\n"),
      s(:str, "\tconfig[v] = false\n"),
      s(:str, "\tconfig[v] = RbConfig::expand(key, config)\n"),
      s(:str, "\tkey = key.gsub(/\#{Regexp.quote(pat)}(?=\\s|\\z)/n) {sub} if pat\n"),
      s(:str, "\tkey\n"),
      s(:str, "      else\n"),
      s(:str, "\tvar\n"),
      s(:str, "      end\n"),
      s(:str, "    }\n"),
      s(:str, "    val.replace(newval) unless newval == val\n"),
      s(:str, "    val\n"),
      s(:str, "  end\n"),
      s(:str, "  CONFIG.each_value do |val|\n"),
      s(:str, "    RbConfig::expand(val)\n"),
      s(:str, "  end\n"),
      s(:str, "\n"),
      s(:str, "  # returns the absolute pathname of the ruby command.\n"),
      s(:str, "  def RbConfig.ruby\n"),
      s(:str, "    File.join(\n"),
      s(:str, "      RbConfig::CONFIG[\"bindir\"],\n"),
      s(:str, "      RbConfig::CONFIG[\"ruby_install_name\"] + RbConfig::CONFIG[\"EXEEXT\"]\n"),
      s(:str, "    )\n"),
      s(:str, "  end\n"),
      s(:str, "end\n"),
      s(:str, "CROSS_COMPILING = nil unless defined? CROSS_COMPILING\n"))),
  s(:gvasgn, :$stdout,
    s(:const, nil, :STDOUT)),
  s(:lvasgn, :mode,
    s(:send,
      s(:const,
        s(:const, nil, :IO), :RDWR), :|,
      s(:const,
        s(:const, nil, :IO), :CREAT))),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :IO), :BINARY)),
    s(:op_asgn,
      s(:lvasgn, :mode), :|,
      s(:const,
        s(:const, nil, :IO), :BINARY)), nil),
  s(:block,
    s(:send, nil, :open,
      s(:lvar, :rbconfig_rb),
      s(:lvar, :mode)),
    s(:args,
      s(:arg, :f)),
    s(:if,
      s(:and,
        s(:and,
          s(:gvar, :$timestamp),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :f), :stat), :size), :==,
            s(:send,
              s(:lvar, :config), :size))),
        s(:send,
          s(:send,
            s(:lvar, :f), :read), :==,
          s(:lvar, :config))),
      s(:send, nil, :puts,
        s(:dstr,
          s(:begin,
            s(:lvar, :rbconfig_rb)),
          s(:str, " unchanged"))),
      s(:begin,
        s(:send, nil, :puts,
          s(:dstr,
            s(:begin,
              s(:lvar, :rbconfig_rb)),
            s(:str, " updated"))),
        s(:send,
          s(:lvar, :f), :rewind),
        s(:send,
          s(:lvar, :f), :truncate,
          s(:int, 0)),
        s(:send,
          s(:lvar, :f), :print,
          s(:lvar, :config))))),
  s(:if,
    s(:send,
      s(:const, nil, :String), :===,
      s(:gvar, :$timestamp)),
    s(:send,
      s(:const, nil, :FileUtils), :touch,
      s(:gvar, :$timestamp)), nil))
