s(:begin,
  s(:send, nil, :require,
    s(:str, "erb")),
  s(:send,
    s(:gvar, :$:), :unshift,
    s(:send,
      s(:const, nil, :File), :dirname,
      s(:str, "(string)"))),
  s(:send, nil, :require,
    s(:str, "vpath")),
  s(:class,
    s(:const, nil, :RubyVM), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Instruction), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :name),
              s(:arg, :opes),
              s(:arg, :pops),
              s(:arg, :rets),
              s(:arg, :comm),
              s(:arg, :body),
              s(:arg, :tvars),
              s(:arg, :sp_inc),
              s(:optarg, :orig,
                s(:self)),
              s(:optarg, :defopes,
                s(:array)),
              s(:optarg, :type,
                s(:nil)),
              s(:optarg, :nsc,
                s(:array)),
              s(:optarg, :psc,
                s(:array,
                  s(:array),
                  s(:array)))),
            s(:begin,
              s(:ivasgn, :@name,
                s(:lvar, :name)),
              s(:ivasgn, :@opes,
                s(:lvar, :opes)),
              s(:ivasgn, :@pops,
                s(:lvar, :pops)),
              s(:ivasgn, :@rets,
                s(:lvar, :rets)),
              s(:ivasgn, :@comm,
                s(:lvar, :comm)),
              s(:ivasgn, :@body,
                s(:lvar, :body)),
              s(:ivasgn, :@orig,
                s(:lvar, :orig)),
              s(:ivasgn, :@defopes,
                s(:lvar, :defopes)),
              s(:ivasgn, :@type,
                s(:lvar, :type)),
              s(:ivasgn, :@tvars,
                s(:lvar, :tvars)),
              s(:ivasgn, :@nextsc,
                s(:lvar, :nsc)),
              s(:ivasgn, :@pushsc,
                s(:lvar, :psc)),
              s(:ivasgn, :@sc,
                s(:array)),
              s(:ivasgn, :@unifs,
                s(:array)),
              s(:ivasgn, :@optimized,
                s(:array)),
              s(:ivasgn, :@is_sc,
                s(:false)),
              s(:ivasgn, :@sp_inc,
                s(:lvar, :sp_inc)))),
          s(:def, :add_sc,
            s(:args,
              s(:arg, :sci)),
            s(:begin,
              s(:send,
                s(:ivar, :@sc), :<<,
                s(:lvar, :sci)),
              s(:send,
                s(:lvar, :sci), :set_sc))),
          s(:send, nil, :attr_reader,
            s(:sym, :name),
            s(:sym, :opes),
            s(:sym, :pops),
            s(:sym, :rets)),
          s(:send, nil, :attr_reader,
            s(:sym, :body),
            s(:sym, :comm)),
          s(:send, nil, :attr_reader,
            s(:sym, :nextsc),
            s(:sym, :pushsc)),
          s(:send, nil, :attr_reader,
            s(:sym, :orig),
            s(:sym, :defopes),
            s(:sym, :type)),
          s(:send, nil, :attr_reader,
            s(:sym, :sc)),
          s(:send, nil, :attr_reader,
            s(:sym, :unifs),
            s(:sym, :optimized)),
          s(:send, nil, :attr_reader,
            s(:sym, :is_sc)),
          s(:send, nil, :attr_reader,
            s(:sym, :tvars)),
          s(:send, nil, :attr_reader,
            s(:sym, :sp_inc)),
          s(:def, :set_sc,
            s(:args),
            s(:ivasgn, :@is_sc,
              s(:true))),
          s(:def, :add_unif,
            s(:args,
              s(:arg, :insns)),
            s(:send,
              s(:ivar, :@unifs), :<<,
              s(:lvar, :insns))),
          s(:def, :add_optimized,
            s(:args,
              s(:arg, :insn)),
            s(:send,
              s(:ivar, :@optimized), :<<,
              s(:lvar, :insn))),
          s(:def, :sp_increase_c_expr,
            s(:args),
            s(:if,
              s(:begin,
                s(:or,
                  s(:block,
                    s(:send,
                      s(:send, nil, :pops), :any?),
                    s(:args,
                      s(:arg, :t),
                      s(:arg, :v)),
                    s(:send,
                      s(:lvar, :v), :==,
                      s(:str, "..."))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :rets), :any?),
                    s(:args,
                      s(:arg, :t),
                      s(:arg, :v)),
                    s(:send,
                      s(:lvar, :v), :==,
                      s(:str, "..."))))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@sp_inc), :nil?),
                  s(:send, nil, :raise,
                    s(:str, "no sp increase definition")), nil),
                s(:lvasgn, :ret,
                  s(:str, "int inc = 0;\n")),
                s(:block,
                  s(:send,
                    s(:ivar, :@opes), :each_with_index),
                  s(:args,
                    s(:mlhs,
                      s(:arg, :t),
                      s(:arg, :v)),
                    s(:arg, :i)),
                  s(:if,
                    s(:or,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :t), :==,
                            s(:str, "rb_num_t")),
                          s(:begin,
                            s(:send,
                              s(:begin,
                                s(:lvasgn, :re,
                                  s(:regexp,
                                    s(:str, "\\b"),
                                    s(:begin,
                                      s(:lvar, :v)),
                                    s(:str, "\\b"),
                                    s(:regopt, :n)))), :=~,
                              s(:ivar, :@sp_inc))))),
                      s(:begin,
                        s(:block,
                          s(:send,
                            s(:ivar, :@defopes), :any?),
                          s(:args,
                            s(:arg, :t),
                            s(:arg, :val)),
                          s(:send,
                            s(:lvar, :re), :=~,
                            s(:lvar, :val))))),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:dstr,
                        s(:str, "        int "),
                        s(:begin,
                          s(:lvar, :v)),
                        s(:str, " = FIX2INT(opes["),
                        s(:begin,
                          s(:lvar, :i)),
                        s(:str, "]);\n"))),
                    s(:if,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :t), :==,
                            s(:str, "CALL_INFO")),
                          s(:begin,
                            s(:send,
                              s(:begin,
                                s(:lvasgn, :re,
                                  s(:regexp,
                                    s(:str, "\\b"),
                                    s(:begin,
                                      s(:lvar, :v)),
                                    s(:str, "\\b"),
                                    s(:regopt, :n)))), :=~,
                              s(:ivar, :@sp_inc))))),
                      s(:send,
                        s(:lvar, :ret), :<<,
                        s(:dstr,
                          s(:str, "        CALL_INFO "),
                          s(:begin,
                            s(:lvar, :v)),
                          s(:str, " = (CALL_INFO)(opes["),
                          s(:begin,
                            s(:lvar, :i)),
                          s(:str, "]);\n"))), nil))),
                s(:block,
                  s(:send,
                    s(:ivar, :@defopes), :each_with_index),
                  s(:args,
                    s(:mlhs,
                      s(:mlhs,
                        s(:arg, :t),
                        s(:arg, :var)),
                      s(:arg, :val)),
                    s(:arg, :i)),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:lvar, :t), :==,
                          s(:str, "rb_num_t")),
                        s(:send,
                          s(:lvar, :val), :!=,
                          s(:str, "*"))),
                      s(:send,
                        s(:regexp,
                          s(:str, "\\b"),
                          s(:begin,
                            s(:lvar, :var)),
                          s(:str, "\\b"),
                          s(:regopt)), :=~,
                        s(:ivar, :@sp_inc))),
                    s(:send,
                      s(:lvar, :ret), :<<,
                      s(:dstr,
                        s(:str, "        "),
                        s(:begin,
                          s(:lvar, :t)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :var)),
                        s(:str, " = "),
                        s(:begin,
                          s(:lvar, :val)),
                        s(:str, ";\n"))), nil)),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:dstr,
                    s(:str, "        "),
                    s(:begin,
                      s(:ivar, :@sp_inc)),
                    s(:str, ";\n"))),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:str, "        return depth + inc;")),
                s(:lvar, :ret)),
              s(:dstr,
                s(:str, "return depth + "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:send, nil, :rets), :size), :-,
                    s(:send,
                      s(:send, nil, :pops), :size))),
                s(:str, ";")))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<Instruction:"),
              s(:begin,
                s(:ivar, :@name)),
              s(:str, ">"))))),
      s(:class,
        s(:const, nil, :InstructionsLoader), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :opts,
                s(:hash))),
            s(:begin,
              s(:ivasgn, :@insns,
                s(:array)),
              s(:ivasgn, :@insn_map,
                s(:hash)),
              s(:ivasgn, :@vpath,
                s(:or,
                  s(:send,
                    s(:lvar, :opts), :[],
                    s(:sym, :VPATH)),
                  s(:const, nil, :File))),
              s(:ivasgn, :@use_const,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:sym, :use_const))),
              s(:ivasgn, :@verbose,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:sym, :verbose))),
              s(:ivasgn, :@destdir,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:sym, :destdir))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:ivasgn, :@vm_opts,
                      s(:send, nil, :load_vm_opts))), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:if,
                  s(:send,
                    s(:lvar, :opts), :key?,
                    s(:lvar, :k)),
                  s(:send,
                    s(:ivar, :@vm_opts), :[]=,
                    s(:lvar, :k),
                    s(:send,
                      s(:lvar, :opts), :[],
                      s(:lvar, :k))), nil)),
              s(:send, nil, :load_insns_def,
                s(:or,
                  s(:send,
                    s(:lvar, :opts), :[],
                    s(:sym, :"insns.def")),
                  s(:str, "insns.def"))),
              s(:send, nil, :load_opt_operand_def,
                s(:or,
                  s(:send,
                    s(:lvar, :opts), :[],
                    s(:sym, :"opope.def")),
                  s(:str, "defs/opt_operand.def"))),
              s(:send, nil, :load_insn_unification_def,
                s(:or,
                  s(:send,
                    s(:lvar, :opts), :[],
                    s(:sym, :"unif.def")),
                  s(:str, "defs/opt_insn_unif.def"))),
              s(:if,
                s(:send, nil, :vm_opt?,
                  s(:str, "STACK_CACHING")),
                s(:send, nil, :make_stackcaching_insns), nil))),
          s(:send, nil, :attr_reader,
            s(:sym, :vpath)),
          s(:send, nil, :attr_reader,
            s(:sym, :destdir)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "use_const"),
                s(:str, "verbose")), :each),
            s(:args,
              s(:arg, :attr)),
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:lvar, :attr)),
              s(:send, nil, :alias_method,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :attr)),
                  s(:str, "?")),
                s(:lvar, :attr)),
              s(:send, nil, :remove_method,
                s(:lvar, :attr)))),
          s(:def, :[],
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:ivar, :@insn_map), :[],
              s(:send,
                s(:lvar, :s), :to_s))),
          s(:def, :each,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@insns), :each),
              s(:args,
                s(:arg, :insn)),
              s(:yield,
                s(:lvar, :insn)))),
          s(:def, :size,
            s(:args),
            s(:send,
              s(:ivar, :@insns), :size)),
          s(:send, nil, :private),
          s(:def, :vm_opt?,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:ivar, :@vm_opts), :[],
              s(:lvar, :name))),
          s(:def, :load_vm_opts,
            s(:args,
              s(:optarg, :file,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :file),
                s(:str, "vm_opts.h")),
              s(:lvasgn, :opts,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send, nil, :vpath), :open,
                  s(:lvar, :file)),
                s(:args,
                  s(:arg, :f)),
                s(:block,
                  s(:send,
                    s(:lvar, :f), :grep,
                    s(:regexp,
                      s(:str, "^\\#define\\s+OPT_([A-Z_]+)\\s+(\\d+)"),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:lvar, :opts), :[]=,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 2), :to_i), :zero?), :!)))),
              s(:lvar, :opts))),
          s(:casgn, nil, :SKIP_COMMENT_PATTERN,
            s(:send,
              s(:const, nil, :Regexp), :compile,
              s(:send,
                s(:const, nil, :Regexp), :escape,
                s(:str, "/** ##skip")))),
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :add_insn,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send,
                s(:ivar, :@insns), :<<,
                s(:lvar, :insn)),
              s(:send,
                s(:ivar, :@insn_map), :[]=,
                s(:send,
                  s(:lvar, :insn), :name),
                s(:lvar, :insn)))),
          s(:def, :make_insn,
            s(:args,
              s(:arg, :name),
              s(:arg, :opes),
              s(:arg, :pops),
              s(:arg, :rets),
              s(:arg, :comm),
              s(:arg, :body),
              s(:arg, :sp_inc)),
            s(:send, nil, :add_insn,
              s(:send,
                s(:const, nil, :Instruction), :new,
                s(:lvar, :name),
                s(:lvar, :opes),
                s(:lvar, :pops),
                s(:lvar, :rets),
                s(:lvar, :comm),
                s(:lvar, :body),
                s(:array),
                s(:lvar, :sp_inc)))),
          s(:def, :parse_vars,
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\((.*?)\\)"),
                    s(:regopt)),
                  s(:lvar, :line)), nil,
                s(:send, nil, :raise)),
              s(:lvasgn, :vars,
                s(:send,
                  s(:nth_ref, 1), :split,
                  s(:str, ","))),
              s(:block,
                s(:send,
                  s(:lvar, :vars), :map!),
                s(:args,
                  s(:arg, :v)),
                s(:begin,
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\s*(\\S+)\\s+(\\S+)\\s*"),
                        s(:regopt)),
                      s(:lvar, :v)),
                    s(:begin,
                      s(:lvasgn, :type,
                        s(:nth_ref, 1)),
                      s(:lvasgn, :var,
                        s(:nth_ref, 2))),
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "\\s*\\.\\.\\.\\s*"),
                          s(:regopt)),
                        s(:lvar, :v)),
                      s(:lvasgn, :type,
                        s(:lvasgn, :var,
                          s(:str, "..."))),
                      s(:send, nil, :raise))),
                  s(:array,
                    s(:lvar, :type),
                    s(:lvar, :var)))),
              s(:lvar, :vars))),
          s(:def, :parse_comment,
            s(:args,
              s(:arg, :comm)),
            s(:begin,
              s(:lvasgn, :c,
                s(:str, "others")),
              s(:lvasgn, :j,
                s(:str, "")),
              s(:lvasgn, :e,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:lvar, :comm), :each_line),
                s(:args,
                  s(:arg, :line)),
                s(:case,
                  s(:lvar, :line),
                  s(:when,
                    s(:regexp,
                      s(:str, "@c (.+)"),
                      s(:regopt)),
                    s(:lvasgn, :c,
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "@e (.+)"),
                      s(:regopt)),
                    s(:lvasgn, :e,
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "@e\\s*$"),
                      s(:regopt)),
                    s(:lvasgn, :e,
                      s(:str, ""))),
                  s(:when,
                    s(:regexp,
                      s(:str, "@j (.+)$"),
                      s(:regopt)),
                    s(:lvasgn, :j,
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "@j\\s*$"),
                      s(:regopt)),
                    s(:lvasgn, :j,
                      s(:str, ""))), nil)),
              s(:hash,
                s(:pair,
                  s(:sym, :c),
                  s(:lvar, :c)),
                s(:pair,
                  s(:sym, :e),
                  s(:lvar, :e)),
                s(:pair,
                  s(:sym, :j),
                  s(:lvar, :j))))),
          s(:def, :load_insns_def,
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:lvasgn, :body,
                s(:lvasgn, :insn,
                  s(:lvasgn, :opes,
                    s(:lvasgn, :pops,
                      s(:lvasgn, :rets,
                        s(:nil)))))),
              s(:lvasgn, :comment,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:send, nil, :vpath), :open,
                  s(:lvar, :file)),
                s(:args,
                  s(:arg, :f)),
                s(:begin,
                  s(:send,
                    s(:lvar, :f), :instance_variable_set,
                    s(:sym, :@line_no),
                    s(:int, 0)),
                  s(:sclass,
                    s(:lvar, :f),
                    s(:begin,
                      s(:def, :line_no,
                        s(:args),
                        s(:ivar, :@line_no)),
                      s(:def, :gets,
                        s(:args),
                        s(:begin,
                          s(:op_asgn,
                            s(:ivasgn, :@line_no), :+,
                            s(:int, 1)),
                          s(:zsuper))))),
                  s(:while,
                    s(:lvasgn, :line,
                      s(:send,
                        s(:lvar, :f), :gets)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :line), :chomp!),
                      s(:case,
                        s(:lvar, :line),
                        s(:when,
                          s(:const, nil, :SKIP_COMMENT_PATTERN),
                          s(:while,
                            s(:lvasgn, :line,
                              s(:send,
                                s(:send,
                                  s(:lvar, :f), :gets), :chomp)),
                            s(:if,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "\\s+\\*/$"),
                                  s(:regopt)),
                                s(:lvar, :line)),
                              s(:break), nil))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^/\\*\\*$"),
                            s(:regopt)),
                          s(:while,
                            s(:lvasgn, :line,
                              s(:send,
                                s(:lvar, :f), :gets)),
                            s(:if,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "\\s+\\*/\\s*$"),
                                  s(:regopt)),
                                s(:lvar, :line)),
                              s(:break),
                              s(:send,
                                s(:lvar, :comment), :<<,
                                s(:lvar, :line))))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^DEFINE_INSN$"),
                            s(:regopt)),
                          s(:begin,
                            s(:lvasgn, :insn,
                              s(:send,
                                s(:send,
                                  s(:lvar, :f), :gets), :chomp)),
                            s(:lvasgn, :opes,
                              s(:send, nil, :parse_vars,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :f), :gets), :chomp))),
                            s(:lvasgn, :pops,
                              s(:send,
                                s(:send, nil, :parse_vars,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :f), :gets), :chomp)), :reverse)),
                            s(:lvasgn, :rets_str,
                              s(:send,
                                s(:send,
                                  s(:lvar, :f), :gets), :chomp)),
                            s(:lvasgn, :rets,
                              s(:send,
                                s(:send, nil, :parse_vars,
                                  s(:lvar, :rets_str)), :reverse)),
                            s(:lvasgn, :comment,
                              s(:send, nil, :parse_comment,
                                s(:lvar, :comment))),
                            s(:lvasgn, :insn_in,
                              s(:true)),
                            s(:lvasgn, :body,
                              s(:str, "")),
                            s(:lvasgn, :sp_inc,
                              s(:send,
                                s(:lvar, :rets_str), :[],
                                s(:regexp,
                                  s(:str, "//\\s*(.+)"),
                                  s(:regopt)),
                                s(:int, 1))),
                            s(:if,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "^\\{$"),
                                  s(:regopt)),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :f), :gets), :chomp)), nil,
                              s(:send, nil, :raise)),
                            s(:lvasgn, :line_no,
                              s(:send,
                                s(:lvar, :f), :line_no)))),
                        s(:when,
                          s(:regexp,
                            s(:str, "^\\}"),
                            s(:regopt)),
                          s(:if,
                            s(:lvar, :insn_in),
                            s(:begin,
                              s(:send,
                                s(:lvar, :body), :instance_variable_set,
                                s(:sym, :@line_no),
                                s(:lvar, :line_no)),
                              s(:send,
                                s(:lvar, :body), :instance_variable_set,
                                s(:sym, :@file),
                                s(:send,
                                  s(:lvar, :f), :path)),
                              s(:lvasgn, :insn,
                                s(:send, nil, :make_insn,
                                  s(:lvar, :insn),
                                  s(:lvar, :opes),
                                  s(:lvar, :pops),
                                  s(:lvar, :rets),
                                  s(:lvar, :comment),
                                  s(:lvar, :body),
                                  s(:lvar, :sp_inc))),
                              s(:lvasgn, :insn_in,
                                s(:false)),
                              s(:lvasgn, :comment,
                                s(:str, ""))), nil)),
                        s(:if,
                          s(:lvar, :insn_in),
                          s(:send,
                            s(:lvar, :body), :<<,
                            s(:send,
                              s(:lvar, :line), :+,
                              s(:str, "\n"))), nil)))))))),
          s(:def, :load_opt_operand_def,
            s(:args,
              s(:arg, :file)),
            s(:if,
              s(:lvar, :file),
              s(:block,
                s(:send,
                  s(:send, nil, :vpath), :foreach,
                  s(:lvar, :file)),
                s(:args,
                  s(:arg, :line)),
                s(:begin,
                  s(:lvasgn, :line,
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :gsub,
                        s(:regexp,
                          s(:str, "\\#.*"),
                          s(:regopt)),
                        s(:str, "")), :strip)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :length), :==,
                      s(:int, 0)),
                    s(:next), nil),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "__END__"),
                        s(:regopt)),
                      s(:lvar, :line)),
                    s(:break), nil),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "(\\S+)\\s+(.+)"),
                      s(:regopt)),
                    s(:lvar, :line)),
                  s(:lvasgn, :insn,
                    s(:nth_ref, 1)),
                  s(:lvasgn, :opts,
                    s(:nth_ref, 2)),
                  s(:send, nil, :add_opt_operand,
                    s(:lvar, :insn),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :opts), :split,
                          s(:regexp,
                            s(:str, ","),
                            s(:regopt))), :map),
                      s(:args,
                        s(:arg, :e)),
                      s(:send,
                        s(:lvar, :e), :strip))))), nil)),
          s(:def, :label_escape,
            s(:args,
              s(:arg, :label)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :label), :gsub,
                  s(:regexp,
                    s(:str, "\\("),
                    s(:regopt)),
                  s(:str, "_O_")), :gsub,
                s(:regexp,
                  s(:str, "\\)"),
                  s(:regopt)),
                s(:str, "_C_")), :gsub,
              s(:regexp,
                s(:str, "\\*"),
                s(:regopt)),
              s(:str, "_WC_"))),
          s(:def, :add_opt_operand,
            s(:args,
              s(:arg, :insn_name),
              s(:arg, :opts)),
            s(:begin,
              s(:lvasgn, :insn,
                s(:send,
                  s(:ivar, :@insn_map), :[],
                  s(:lvar, :insn_name))),
              s(:lvasgn, :opes,
                s(:send,
                  s(:lvar, :insn), :opes)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :opes), :size), :!=,
                  s(:send,
                    s(:lvar, :opts), :size)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "operand size mismatch for "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :insn), :name)),
                    s(:str, " (opes: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :opes), :size)),
                    s(:str, ", opts: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :opts), :size)),
                    s(:str, ")"))), nil),
              s(:lvasgn, :ninsn,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :insn), :name), :+,
                    s(:str, "_OP_")), :+,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :opts), :map),
                      s(:args,
                        s(:arg, :e)),
                      s(:send, nil, :label_escape,
                        s(:lvar, :e))), :join,
                    s(:str, "_")))),
              s(:lvasgn, :nopes,
                s(:array)),
              s(:lvasgn, :defv,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :opts), :each_with_index),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :e), :==,
                      s(:str, "*")),
                    s(:send,
                      s(:lvar, :nopes), :<<,
                      s(:send,
                        s(:lvar, :opes), :[],
                        s(:lvar, :i))), nil),
                  s(:send,
                    s(:lvar, :defv), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :opes), :[],
                        s(:lvar, :i)),
                      s(:lvar, :e))))),
              s(:send, nil, :make_insn_operand_optimized,
                s(:lvar, :insn),
                s(:lvar, :ninsn),
                s(:lvar, :nopes),
                s(:lvar, :defv)))),
          s(:def, :make_insn_operand_optimized,
            s(:args,
              s(:arg, :orig_insn),
              s(:arg, :name),
              s(:arg, :opes),
              s(:arg, :defopes)),
            s(:begin,
              s(:lvasgn, :comm,
                s(:send,
                  s(:send,
                    s(:lvar, :orig_insn), :comm), :dup)),
              s(:send,
                s(:lvar, :comm), :[]=,
                s(:sym, :c),
                s(:str, "optimize")),
              s(:send, nil, :add_insn,
                s(:lvasgn, :insn,
                  s(:send,
                    s(:const, nil, :Instruction), :new,
                    s(:lvar, :name),
                    s(:lvar, :opes),
                    s(:send,
                      s(:lvar, :orig_insn), :pops),
                    s(:send,
                      s(:lvar, :orig_insn), :rets),
                    s(:lvar, :comm),
                    s(:send,
                      s(:lvar, :orig_insn), :body),
                    s(:send,
                      s(:lvar, :orig_insn), :tvars),
                    s(:send,
                      s(:lvar, :orig_insn), :sp_inc),
                    s(:lvar, :orig_insn),
                    s(:lvar, :defopes)))),
              s(:send,
                s(:lvar, :orig_insn), :add_optimized,
                s(:lvar, :insn)))),
          s(:def, :load_insn_unification_def,
            s(:args,
              s(:arg, :file)),
            s(:if,
              s(:lvar, :file),
              s(:block,
                s(:send,
                  s(:send, nil, :vpath), :foreach,
                  s(:lvar, :file)),
                s(:args,
                  s(:arg, :line)),
                s(:begin,
                  s(:lvasgn, :line,
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :gsub,
                        s(:regexp,
                          s(:str, "\\#.*"),
                          s(:regopt)),
                        s(:str, "")), :strip)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :length), :==,
                      s(:int, 0)),
                    s(:next), nil),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "__END__"),
                        s(:regopt)),
                      s(:lvar, :line)),
                    s(:break), nil),
                  s(:send, nil, :make_unified_insns,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :line), :split), :map),
                      s(:args,
                        s(:arg, :e)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:ivar, :@insn_map), :[],
                            s(:lvar, :e)), nil,
                          s(:send, nil, :raise,
                            s(:dstr,
                              s(:str, "unknown insn: "),
                              s(:begin,
                                s(:lvar, :e))))),
                        s(:send,
                          s(:ivar, :@insn_map), :[],
                          s(:lvar, :e))))))), nil)),
          s(:def, :all_combination,
            s(:args,
              s(:arg, :sets)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :sets), :shift), :map),
                  s(:args,
                    s(:arg, :e)),
                  s(:array,
                    s(:lvar, :e)))),
              s(:block,
                s(:send,
                  s(:lvar, :sets), :each),
                s(:args,
                  s(:arg, :set)),
                s(:begin,
                  s(:lvasgn, :prev,
                    s(:lvar, :ret)),
                  s(:lvasgn, :ret,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :prev), :each),
                    s(:args,
                      s(:arg, :ary)),
                    s(:block,
                      s(:send,
                        s(:lvar, :set), :each),
                      s(:args,
                        s(:arg, :e)),
                      s(:begin,
                        s(:lvasgn, :eary,
                          s(:send,
                            s(:lvar, :ary), :dup)),
                        s(:send,
                          s(:lvar, :eary), :<<,
                          s(:lvar, :e)),
                        s(:send,
                          s(:lvar, :ret), :<<,
                          s(:lvar, :eary))))))),
              s(:lvar, :ret))),
          s(:def, :make_unified_insns,
            s(:args,
              s(:arg, :insns)),
            s(:if,
              s(:send, nil, :vm_opt?,
                s(:str, "UNIFY_ALL_COMBINATION")),
              s(:begin,
                s(:lvasgn, :insn_sets,
                  s(:block,
                    s(:send,
                      s(:lvar, :insns), :map),
                    s(:args,
                      s(:arg, :insn)),
                    s(:send,
                      s(:array,
                        s(:lvar, :insn)), :+,
                      s(:send,
                        s(:lvar, :insn), :optimized)))),
                s(:block,
                  s(:send,
                    s(:send, nil, :all_combination,
                      s(:lvar, :insn_sets)), :each),
                  s(:args,
                    s(:arg, :insns_set)),
                  s(:send, nil, :make_unified_insn_each,
                    s(:lvar, :insns_set)))),
              s(:send, nil, :make_unified_insn_each,
                s(:lvar, :insns)))),
          s(:def, :mk_private_val,
            s(:args,
              s(:arg, :vals),
              s(:arg, :i),
              s(:arg, :redef)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :vals), :dup), :map),
              s(:args,
                s(:arg, :v)),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :v), :dup)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :[],
                      s(:int, 0)), :!=,
                    s(:str, "...")),
                  s(:begin,
                    s(:send,
                      s(:lvar, :redef), :[]=,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 0))),
                    s(:send,
                      s(:lvar, :v), :[]=,
                      s(:int, 1),
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :v), :[],
                            s(:int, 1))),
                        s(:str, "_"),
                        s(:begin,
                          s(:lvar, :i))))), nil),
                s(:lvar, :v)))),
          s(:def, :mk_private_val2,
            s(:args,
              s(:arg, :vals),
              s(:arg, :i),
              s(:arg, :redef)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :vals), :dup), :map),
              s(:args,
                s(:arg, :v)),
              s(:begin,
                s(:lvasgn, :pv,
                  s(:send,
                    s(:lvar, :v), :dup)),
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :pv), :[]=,
                    s(:int, 0),
                    s(:send,
                      s(:send,
                        s(:lvar, :pv), :[],
                        s(:int, 0)), :dup))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :[],
                      s(:int, 0)), :!=,
                    s(:str, "...")),
                  s(:begin,
                    s(:send,
                      s(:lvar, :redef), :[]=,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 0))),
                    s(:send,
                      s(:lvar, :v), :[]=,
                      s(:int, 1),
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :v), :[],
                            s(:int, 1))),
                        s(:str, "_"),
                        s(:begin,
                          s(:lvar, :i))))), nil),
                s(:lvar, :pv)))),
          s(:def, :make_unified_insn_each,
            s(:args,
              s(:arg, :insns)),
            s(:begin,
              s(:lvasgn, :names,
                s(:array)),
              s(:lvasgn, :opes,
                s(:array)),
              s(:lvasgn, :pops,
                s(:array)),
              s(:lvasgn, :rets,
                s(:array)),
              s(:lvasgn, :comm,
                s(:hash,
                  s(:pair,
                    s(:sym, :c),
                    s(:str, "optimize")),
                  s(:pair,
                    s(:sym, :e),
                    s(:str, "unified insn")),
                  s(:pair,
                    s(:sym, :j),
                    s(:str, "unified insn")))),
              s(:lvasgn, :body,
                s(:str, "")),
              s(:lvasgn, :passed,
                s(:array)),
              s(:lvasgn, :tvars,
                s(:array)),
              s(:lvasgn, :defopes,
                s(:array)),
              s(:lvasgn, :sp_inc,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:lvar, :insns), :each_with_index),
                s(:args,
                  s(:arg, :insn),
                  s(:arg, :i)),
                s(:begin,
                  s(:send,
                    s(:lvar, :names), :<<,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:lvasgn, :redef_vars,
                    s(:hash)),
                  s(:lvasgn, :e_opes,
                    s(:send, nil, :mk_private_val,
                      s(:send,
                        s(:lvar, :insn), :opes),
                      s(:lvar, :i),
                      s(:lvar, :redef_vars))),
                  s(:lvasgn, :e_pops,
                    s(:send, nil, :mk_private_val,
                      s(:send,
                        s(:lvar, :insn), :pops),
                      s(:lvar, :i),
                      s(:lvar, :redef_vars))),
                  s(:lvasgn, :e_rets,
                    s(:send, nil, :mk_private_val,
                      s(:send,
                        s(:lvar, :insn), :rets),
                      s(:lvar, :i),
                      s(:lvar, :redef_vars))),
                  s(:lvasgn, :e_defs,
                    s(:send, nil, :mk_private_val2,
                      s(:send,
                        s(:lvar, :insn), :defopes),
                      s(:lvar, :i),
                      s(:lvar, :redef_vars))),
                  s(:lvasgn, :passed_vars,
                    s(:array)),
                  s(:while,
                    s(:lvasgn, :pvar,
                      s(:send,
                        s(:lvar, :e_pops), :pop)),
                    s(:begin,
                      s(:lvasgn, :rvar,
                        s(:send,
                          s(:lvar, :rets), :pop)),
                      s(:if,
                        s(:lvar, :rvar),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :rvar), :[],
                                s(:int, 0)), :==,
                              s(:str, "...")),
                            s(:send, nil, :raise,
                              s(:dstr,
                                s(:str, "unsupported unif insn: "),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :insns), :inspect)))), nil),
                          s(:send,
                            s(:lvar, :passed_vars), :<<,
                            s(:array,
                              s(:lvar, :pvar),
                              s(:lvar, :rvar))),
                          s(:send,
                            s(:lvar, :tvars), :<<,
                            s(:lvar, :rvar))),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e_pops), :push,
                            s(:lvar, :pvar)),
                          s(:break))))),
                  s(:send,
                    s(:lvar, :opes), :concat,
                    s(:lvar, :e_opes)),
                  s(:send,
                    s(:lvar, :pops), :concat,
                    s(:lvar, :e_pops)),
                  s(:send,
                    s(:lvar, :rets), :concat,
                    s(:lvar, :e_rets)),
                  s(:send,
                    s(:lvar, :defopes), :concat,
                    s(:lvar, :e_defs)),
                  s(:op_asgn,
                    s(:lvasgn, :sp_inc), :+,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :insn), :sp_inc)))),
                  s(:op_asgn,
                    s(:lvasgn, :body), :+,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:dstr,
                                        s(:str, "{ /* unif: "),
                                        s(:begin,
                                          s(:lvar, :i)),
                                        s(:str, " */\n")), :+,
                                      s(:send,
                                        s(:block,
                                          s(:send,
                                            s(:lvar, :passed_vars), :map),
                                          s(:args,
                                            s(:arg, :rpvars)),
                                          s(:begin,
                                            s(:lvasgn, :pv,
                                              s(:send,
                                                s(:lvar, :rpvars), :[],
                                                s(:int, 0))),
                                            s(:lvasgn, :rv,
                                              s(:send,
                                                s(:lvar, :rpvars), :[],
                                                s(:int, 1))),
                                            s(:dstr,
                                              s(:str, "#define "),
                                              s(:begin,
                                                s(:send,
                                                  s(:lvar, :pv), :[],
                                                  s(:int, 1))),
                                              s(:str, " "),
                                              s(:begin,
                                                s(:send,
                                                  s(:lvar, :rv), :[],
                                                  s(:int, 1)))))), :join,
                                        s(:str, "\n"))), :+,
                                    s(:str, "\n")), :+,
                                  s(:send,
                                    s(:block,
                                      s(:send,
                                        s(:lvar, :redef_vars), :map),
                                      s(:args,
                                        s(:arg, :v),
                                        s(:arg, :type)),
                                      s(:dstr,
                                        s(:str, "#define "),
                                        s(:begin,
                                          s(:lvar, :v)),
                                        s(:str, " "),
                                        s(:begin,
                                          s(:lvar, :v)),
                                        s(:str, "_"),
                                        s(:begin,
                                          s(:lvar, :i)))), :join,
                                    s(:str, "\n"))), :+,
                                s(:str, "\n")), :+,
                              s(:send,
                                s(:lvar, :insn), :body)), :+,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:lvar, :passed_vars), :map),
                                s(:args,
                                  s(:arg, :rpvars)),
                                s(:dstr,
                                  s(:str, "#undef "),
                                  s(:begin,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :rpvars), :[],
                                        s(:int, 0)), :[],
                                      s(:int, 1))))), :join,
                              s(:str, "\n"))), :+,
                          s(:str, "\n")), :+,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :redef_vars), :keys), :map),
                            s(:args,
                              s(:arg, :v)),
                            s(:dstr,
                              s(:str, "#undef  "),
                              s(:begin,
                                s(:lvar, :v)))), :join,
                          s(:str, "\n"))), :+,
                      s(:str, "\n}\n"))))),
              s(:lvasgn, :tvars_ary,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :tvars), :each),
                s(:args,
                  s(:arg, :tvar)),
                s(:if,
                  s(:or,
                    s(:block,
                      s(:send,
                        s(:lvar, :opes), :any?),
                      s(:args,
                        s(:arg, :var)),
                      s(:send,
                        s(:send,
                          s(:lvar, :var), :[],
                          s(:int, 1)), :==,
                        s(:send,
                          s(:lvar, :tvar), :[],
                          s(:int, 1)))),
                    s(:block,
                      s(:send,
                        s(:lvar, :defopes), :any?),
                      s(:args,
                        s(:arg, :pvar)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :pvar), :[],
                            s(:int, 0)), :[],
                          s(:int, 1)), :==,
                        s(:send,
                          s(:lvar, :tvar), :[],
                          s(:int, 1))))), nil,
                  s(:send,
                    s(:lvar, :tvars_ary), :<<,
                    s(:lvar, :tvar)))),
              s(:send, nil, :add_insn,
                s(:lvasgn, :insn,
                  s(:send,
                    s(:const, nil, :Instruction), :new,
                    s(:send,
                      s(:str, "UNIFIED_"), :+,
                      s(:send,
                        s(:lvar, :names), :join,
                        s(:str, "_"))),
                    s(:lvar, :opes),
                    s(:lvar, :pops),
                    s(:send,
                      s(:lvar, :rets), :reverse),
                    s(:lvar, :comm),
                    s(:lvar, :body),
                    s(:lvar, :tvars_ary),
                    s(:lvar, :sp_inc)))),
              s(:send,
                s(:send,
                  s(:lvar, :insn), :defopes), :replace,
                s(:lvar, :defopes)),
              s(:send,
                s(:send,
                  s(:lvar, :insns), :[],
                  s(:int, 0)), :add_unif,
                s(:array,
                  s(:lvar, :insn),
                  s(:lvar, :insns))))),
          s(:casgn, nil, :SPECIAL_INSN_FOR_SC_AFTER,
            s(:hash,
              s(:pair,
                s(:regexp,
                  s(:str, "\\Asend"),
                  s(:regopt)),
                s(:array,
                  s(:sym, :a))),
              s(:pair,
                s(:regexp,
                  s(:str, "\\Aend"),
                  s(:regopt)),
                s(:array,
                  s(:sym, :a))),
              s(:pair,
                s(:regexp,
                  s(:str, "\\Ayield"),
                  s(:regopt)),
                s(:array,
                  s(:sym, :a))),
              s(:pair,
                s(:regexp,
                  s(:str, "\\Aclassdef"),
                  s(:regopt)),
                s(:array,
                  s(:sym, :a))),
              s(:pair,
                s(:regexp,
                  s(:str, "\\Amoduledef"),
                  s(:regopt)),
                s(:array,
                  s(:sym, :a))))),
          s(:casgn, nil, :FROM_SC,
            s(:array,
              s(:array),
              s(:array,
                s(:sym, :a)),
              s(:array,
                s(:sym, :b)),
              s(:array,
                s(:sym, :a),
                s(:sym, :b)),
              s(:array,
                s(:sym, :b),
                s(:sym, :a)))),
          s(:def, :make_stackcaching_insns,
            s(:args),
            s(:begin,
              s(:lvasgn, :pops,
                s(:lvasgn, :rets,
                  s(:nil))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@insns), :dup), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:begin,
                  s(:lvasgn, :opops,
                    s(:send,
                      s(:lvar, :insn), :pops)),
                  s(:lvasgn, :orets,
                    s(:send,
                      s(:lvar, :insn), :rets)),
                  s(:lvasgn, :oopes,
                    s(:send,
                      s(:lvar, :insn), :opes)),
                  s(:lvasgn, :ocomm,
                    s(:send,
                      s(:lvar, :insn), :comm)),
                  s(:lvasgn, :oname,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:lvasgn, :after,
                    s(:block,
                      s(:send,
                        s(:const, nil, :SPECIAL_INSN_FOR_SC_AFTER), :find),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v)),
                      s(:send,
                        s(:lvar, :k), :=~,
                        s(:lvar, :oname)))),
                  s(:lvasgn, :insns,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :FROM_SC), :each),
                    s(:args,
                      s(:arg, :from)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :name),
                          s(:lvasgn, :pops),
                          s(:lvasgn, :rets),
                          s(:lvasgn, :pushs1),
                          s(:lvasgn, :pushs2),
                          s(:lvasgn, :nextsc)),
                        s(:array,
                          s(:splat,
                            s(:send, nil, :calc_stack,
                              s(:lvar, :insn),
                              s(:lvar, :from),
                              s(:lvar, :after),
                              s(:lvar, :opops),
                              s(:lvar, :orets))))),
                      s(:send, nil, :make_insn_sc,
                        s(:lvar, :insn),
                        s(:lvar, :name),
                        s(:lvar, :oopes),
                        s(:lvar, :pops),
                        s(:lvar, :rets),
                        s(:array,
                          s(:lvar, :pushs1),
                          s(:lvar, :pushs2)),
                        s(:lvar, :nextsc)))))))),
          s(:def, :make_insn_sc,
            s(:args,
              s(:arg, :orig_insn),
              s(:arg, :name),
              s(:arg, :opes),
              s(:arg, :pops),
              s(:arg, :rets),
              s(:arg, :pushs),
              s(:arg, :nextsc)),
            s(:begin,
              s(:lvasgn, :comm,
                s(:send,
                  s(:send,
                    s(:lvar, :orig_insn), :comm), :dup)),
              s(:send,
                s(:lvar, :comm), :[]=,
                s(:sym, :c),
                s(:str, "optimize(sc)")),
              s(:lvasgn, :scinsn,
                s(:send,
                  s(:const, nil, :Instruction), :new,
                  s(:lvar, :name),
                  s(:lvar, :opes),
                  s(:lvar, :pops),
                  s(:lvar, :rets),
                  s(:lvar, :comm),
                  s(:send,
                    s(:lvar, :orig_insn), :body),
                  s(:send,
                    s(:lvar, :orig_insn), :tvars),
                  s(:send,
                    s(:lvar, :orig_insn), :sp_inc),
                  s(:lvar, :orig_insn),
                  s(:send,
                    s(:lvar, :orig_insn), :defopes),
                  s(:sym, :sc),
                  s(:lvar, :nextsc),
                  s(:lvar, :pushs))),
              s(:send, nil, :add_insn,
                s(:lvar, :scinsn)),
              s(:send,
                s(:lvar, :orig_insn), :add_sc,
                s(:lvar, :scinsn)))),
          s(:defs,
            s(:self), :complement_name,
            s(:args,
              s(:arg, :st)),
            s(:dstr,
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :st), :[],
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :st), :[],
                    s(:int, 0)),
                  s(:str, "x"))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :st), :[],
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :st), :[],
                    s(:int, 1)),
                  s(:str, "x"))))),
          s(:def, :add_stack_value,
            s(:args,
              s(:arg, :st)),
            s(:begin,
              s(:lvasgn, :len,
                s(:send,
                  s(:lvar, :st), :length)),
              s(:if,
                s(:send,
                  s(:lvar, :len), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:send,
                    s(:lvar, :st), :[]=,
                    s(:int, 0),
                    s(:sym, :a)),
                  s(:array,
                    s(:nil),
                    s(:sym, :a))),
                s(:if,
                  s(:send,
                    s(:lvar, :len), :==,
                    s(:int, 1)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :st), :[],
                          s(:int, 0)), :==,
                        s(:sym, :a)),
                      s(:send,
                        s(:lvar, :st), :[]=,
                        s(:int, 1),
                        s(:sym, :b)),
                      s(:send,
                        s(:lvar, :st), :[]=,
                        s(:int, 1),
                        s(:sym, :a))),
                    s(:array,
                      s(:nil),
                      s(:send,
                        s(:lvar, :st), :[],
                        s(:int, 1)))),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:send,
                          s(:lvar, :st), :[]=,
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :st), :[]=,
                          s(:int, 1))),
                      s(:array,
                        s(:send,
                          s(:lvar, :st), :[],
                          s(:int, 1)),
                        s(:send,
                          s(:lvar, :st), :[],
                          s(:int, 0)))),
                    s(:array,
                      s(:send,
                        s(:lvar, :st), :[],
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :st), :[],
                        s(:int, 1)))))))),
          s(:def, :calc_stack,
            s(:args,
              s(:arg, :insn),
              s(:arg, :ofrom),
              s(:arg, :oafter),
              s(:arg, :opops),
              s(:arg, :orets)),
            s(:begin,
              s(:lvasgn, :from,
                s(:send,
                  s(:lvar, :ofrom), :dup)),
              s(:lvasgn, :pops,
                s(:send,
                  s(:lvar, :opops), :dup)),
              s(:lvasgn, :rets,
                s(:send,
                  s(:lvar, :orets), :dup)),
              s(:lvasgn, :rest_scr,
                s(:send,
                  s(:lvar, :ofrom), :dup)),
              s(:lvasgn, :pushs_before,
                s(:array)),
              s(:lvasgn, :pushs,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :pops), :each_with_index),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :[],
                        s(:int, 0)), :==,
                      s(:str, "...")),
                    s(:begin,
                      s(:lvasgn, :pushs_before,
                        s(:lvar, :from)),
                      s(:lvasgn, :from,
                        s(:array))), nil),
                  s(:lvasgn, :r,
                    s(:send,
                      s(:lvar, :from), :pop)),
                  s(:if,
                    s(:lvar, :r), nil,
                    s(:break)),
                  s(:send,
                    s(:lvar, :pops), :[]=,
                    s(:lvar, :i),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :pops), :[],
                          s(:lvar, :i)), :dup), :<<,
                      s(:lvar, :r))))),
              s(:if,
                s(:lvar, :oafter),
                s(:begin,
                  s(:lvasgn, :from,
                    s(:lvar, :oafter)),
                  s(:block,
                    s(:send,
                      s(:lvar, :from), :each_with_index),
                    s(:args,
                      s(:arg, :r),
                      s(:arg, :i)),
                    s(:if,
                      s(:send,
                        s(:lvar, :rets), :[],
                        s(:lvar, :i)),
                      s(:send,
                        s(:lvar, :rets), :[]=,
                        s(:lvar, :i),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :rets), :[],
                              s(:lvar, :i)), :dup), :<<,
                          s(:lvar, :r))), nil))),
                s(:begin,
                  s(:lvasgn, :rets,
                    s(:send,
                      s(:lvar, :rets), :reverse)),
                  s(:block,
                    s(:send,
                      s(:lvar, :rets), :each_with_index),
                    s(:args,
                      s(:arg, :e),
                      s(:arg, :i)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :e), :[],
                            s(:int, 0)), :==,
                          s(:str, "...")),
                        s(:break), nil),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :pushed),
                          s(:lvasgn, :r)),
                        s(:send, nil, :add_stack_value,
                          s(:lvar, :from))),
                      s(:send,
                        s(:lvar, :rets), :[]=,
                        s(:lvar, :i),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :rets), :[],
                              s(:lvar, :i)), :dup), :<<,
                          s(:lvar, :r))),
                      s(:if,
                        s(:lvar, :pushed),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :rest_scr), :pop),
                            s(:send,
                              s(:lvar, :pushs), :<<,
                              s(:lvar, :pushed)), nil),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :i), :-,
                                s(:int, 2)), :>=,
                              s(:int, 0)),
                            s(:send,
                              s(:send,
                                s(:lvar, :rets), :[],
                                s(:send,
                                  s(:lvar, :i), :-,
                                  s(:int, 2))), :pop), nil)), nil))))),
              s(:if,
                s(:false),
                s(:begin,
                  s(:send, nil, :p,
                    s(:lvar, :ofrom)),
                  s(:send, nil, :p,
                    s(:lvar, :pops)),
                  s(:send, nil, :p,
                    s(:lvar, :rets)),
                  s(:send, nil, :p,
                    s(:lvar, :pushs_before)),
                  s(:send, nil, :p,
                    s(:lvar, :pushs)),
                  s(:send, nil, :p,
                    s(:lvar, :from)),
                  s(:send, nil, :exit)), nil),
              s(:lvasgn, :ret,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :insn), :name)),
                    s(:str, "_SC_"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :InstructionsLoader), :complement_name,
                        s(:lvar, :ofrom))),
                    s(:str, "_"),
                    s(:begin,
                      s(:send, nil, :complement_name,
                        s(:lvar, :from)))),
                  s(:lvar, :pops),
                  s(:lvar, :rets),
                  s(:lvar, :pushs_before),
                  s(:lvar, :pushs),
                  s(:lvar, :from))))))),
      s(:class,
        s(:const, nil, :SourceCodeGenerator), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :insns)),
            s(:ivasgn, :@insns,
              s(:lvar, :insns))),
          s(:send, nil, :attr_reader,
            s(:sym, :insns)),
          s(:def, :generate,
            s(:args),
            s(:send, nil, :raise,
              s(:str, "should not reach here"))),
          s(:def, :vpath,
            s(:args),
            s(:send,
              s(:ivar, :@insns), :vpath)),
          s(:def, :verbose?,
            s(:args),
            s(:send,
              s(:ivar, :@insns), :verbose?)),
          s(:def, :use_const?,
            s(:args),
            s(:send,
              s(:ivar, :@insns), :use_const?)),
          s(:def, :build_string,
            s(:args),
            s(:begin,
              s(:ivasgn, :@lines,
                s(:array)),
              s(:yield),
              s(:send,
                s(:ivar, :@lines), :join,
                s(:str, "\n")))),
          s(:casgn, nil, :EMPTY_STRING,
            s(:send,
              s(:str, ""), :freeze)),
          s(:def, :commit,
            s(:args,
              s(:optarg, :str,
                s(:const, nil, :EMPTY_STRING))),
            s(:send,
              s(:ivar, :@lines), :<<,
              s(:lvar, :str))),
          s(:def, :comment,
            s(:args,
              s(:arg, :str)),
            s(:if,
              s(:send, nil, :verbose?),
              s(:send,
                s(:ivar, :@lines), :<<,
                s(:lvar, :str)), nil)),
          s(:def, :output_path,
            s(:args,
              s(:arg, :fn)),
            s(:begin,
              s(:lvasgn, :d,
                s(:send,
                  s(:ivar, :@insns), :destdir)),
              s(:if,
                s(:lvar, :d),
                s(:lvasgn, :fn,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :d),
                    s(:lvar, :fn))), nil),
              s(:lvar, :fn))))),
      s(:class,
        s(:const, nil, :VmBodyGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:begin,
          s(:def, :generate,
            s(:args),
            s(:begin,
              s(:lvasgn, :vm_body,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:begin,
                  s(:send,
                    s(:lvar, :vm_body), :<<,
                    s(:str, "\n")),
                  s(:send,
                    s(:lvar, :vm_body), :<<,
                    s(:send, nil, :make_insn_def,
                      s(:lvar, :insn))))),
              s(:lvasgn, :src,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/vm.inc.tmpl"))),
              s(:send,
                s(:send,
                  s(:const, nil, :ERB), :new,
                  s(:lvar, :src)), :result,
                s(:send, nil, :binding)))),
          s(:def, :generate_from_insnname,
            s(:args,
              s(:arg, :insnname)),
            s(:send, nil, :make_insn_def,
              s(:send,
                s(:ivar, :@insns), :[],
                s(:send,
                  s(:lvar, :insnname), :to_s)))),
          s(:send, nil, :private),
          s(:def, :make_header_prepare_stack,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* prepare stack status */")),
              s(:lvasgn, :push_ba,
                s(:send,
                  s(:lvar, :insn), :pushsc)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :push_ba), :[],
                        s(:int, 0)), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :push_ba), :[],
                        s(:int, 1)), :size), :>,
                    s(:int, 0))),
                s(:send, nil, :raise,
                  s(:str, "unsupport")), nil),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:lvar, :push_ba), :each),
                s(:args,
                  s(:arg, :pushs)),
                s(:op_asgn,
                  s(:lvasgn, :n), :+,
                  s(:send,
                    s(:lvar, :pushs), :length))),
              s(:if,
                s(:send,
                  s(:lvar, :n), :>,
                  s(:int, 0)),
                s(:send, nil, :commit,
                  s(:dstr,
                    s(:str, "  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, "),
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, ");"))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :push_ba), :each),
                s(:args,
                  s(:arg, :pushs)),
                s(:block,
                  s(:send,
                    s(:lvar, :pushs), :each),
                  s(:args,
                    s(:arg, :r)),
                  s(:send, nil, :commit,
                    s(:dstr,
                      s(:str, "  PUSH(SCREG("),
                      s(:begin,
                        s(:lvar, :r)),
                      s(:str, "));"))))))),
          s(:def, :make_header_operands,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* declare and get from iseq */")),
              s(:lvasgn, :vars,
                s(:send,
                  s(:lvar, :insn), :opes)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :ops,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :vars), :each_with_index),
                s(:args,
                  s(:mlhs,
                    s(:arg, :type),
                    s(:arg, :var)),
                  s(:arg, :i)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :type), :==,
                      s(:str, "...")),
                    s(:break), nil),
                  s(:lvasgn, :re,
                    s(:regexp,
                      s(:str, "\\b"),
                      s(:begin,
                        s(:lvar, :var)),
                      s(:str, "\\b"),
                      s(:regopt, :n))),
                  s(:if,
                    s(:or,
                      s(:or,
                        s(:or,
                          s(:or,
                            s(:or,
                              s(:send,
                                s(:lvar, :re), :=~,
                                s(:send,
                                  s(:lvar, :insn), :body)),
                              s(:send,
                                s(:lvar, :re), :=~,
                                s(:send,
                                  s(:lvar, :insn), :sp_inc))),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :insn), :rets), :any?),
                              s(:args,
                                s(:arg, :t),
                                s(:arg, :v)),
                              s(:send,
                                s(:lvar, :re), :=~,
                                s(:lvar, :v)))),
                          s(:send,
                            s(:lvar, :re), :=~,
                            s(:str, "ic"))),
                        s(:send,
                          s(:lvar, :re), :=~,
                          s(:str, "ci"))),
                      s(:send,
                        s(:lvar, :re), :=~,
                        s(:str, "cc"))),
                    s(:send,
                      s(:lvar, :ops), :<<,
                      s(:dstr,
                        s(:str, "  "),
                        s(:begin,
                          s(:lvar, :type)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :var)),
                        s(:str, " = ("),
                        s(:begin,
                          s(:lvar, :type)),
                        s(:str, ")GET_OPERAND("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :i), :+,
                            s(:int, 1))),
                        s(:str, ");"))), nil),
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)))),
              s(:ivasgn, :@opn,
                s(:lvar, :n)),
              s(:send, nil, :commit,
                s(:send,
                  s(:lvar, :ops), :reverse)))),
          s(:def, :make_header_default_operands,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:lvasgn, :vars,
                s(:send,
                  s(:lvar, :insn), :defopes)),
              s(:block,
                s(:send,
                  s(:lvar, :vars), :each),
                s(:args,
                  s(:arg, :e)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :[],
                        s(:int, 1)), :==,
                      s(:str, "*")),
                    s(:next), nil),
                  s(:if,
                    s(:send, nil, :use_const?),
                    s(:send, nil, :commit,
                      s(:dstr,
                        s(:str, "  const "),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :[],
                              s(:int, 0)), :[],
                            s(:int, 0))),
                        s(:str, " "),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :[],
                              s(:int, 0)), :[],
                            s(:int, 1))),
                        s(:str, " = "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :[],
                            s(:int, 1))),
                        s(:str, ";"))),
                    s(:send, nil, :commit,
                      s(:dstr,
                        s(:str, "  #define "),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :[],
                              s(:int, 0)), :[],
                            s(:int, 1))),
                        s(:str, " "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :[],
                            s(:int, 1)))))))))),
          s(:def, :make_footer_default_operands,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, " /* declare and initialize default opes */")),
              s(:if,
                s(:send, nil, :use_const?),
                s(:send, nil, :commit),
                s(:begin,
                  s(:lvasgn, :vars,
                    s(:send,
                      s(:lvar, :insn), :defopes)),
                  s(:block,
                    s(:send,
                      s(:lvar, :vars), :each),
                    s(:args,
                      s(:arg, :e)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :e), :[],
                            s(:int, 1)), :==,
                          s(:str, "*")),
                        s(:next), nil),
                      s(:send, nil, :commit,
                        s(:dstr,
                          s(:str, "#undef "),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :e), :[],
                                s(:int, 0)), :[],
                              s(:int, 1))))))))))),
          s(:def, :make_header_stack_pops,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* declare and pop from stack */")),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :pops,
                s(:array)),
              s(:lvasgn, :vars,
                s(:send,
                  s(:lvar, :insn), :pops)),
              s(:block,
                s(:send,
                  s(:lvar, :vars), :each_with_index),
                s(:args,
                  s(:arg, :iter),
                  s(:arg, :i)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :type),
                      s(:lvasgn, :var),
                      s(:lvasgn, :r)),
                    s(:array,
                      s(:splat,
                        s(:lvar, :iter)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :type), :==,
                      s(:str, "...")),
                    s(:break), nil),
                  s(:if,
                    s(:lvar, :r),
                    s(:send,
                      s(:lvar, :pops), :<<,
                      s(:dstr,
                        s(:str, "  "),
                        s(:begin,
                          s(:lvar, :type)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :var)),
                        s(:str, " = SCREG("),
                        s(:begin,
                          s(:lvar, :r)),
                        s(:str, ");"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :pops), :<<,
                        s(:dstr,
                          s(:str, "  "),
                          s(:begin,
                            s(:lvar, :type)),
                          s(:str, " "),
                          s(:begin,
                            s(:lvar, :var)),
                          s(:str, " = TOPN("),
                          s(:begin,
                            s(:lvar, :n)),
                          s(:str, ");"))),
                      s(:op_asgn,
                        s(:lvasgn, :n), :+,
                        s(:int, 1)))))),
              s(:ivasgn, :@popn,
                s(:lvar, :n)),
              s(:send, nil, :commit,
                s(:send,
                  s(:lvar, :pops), :reverse)))),
          s(:def, :make_header_temporary_vars,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* declare temporary vars */")),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :insn), :tvars), :each),
                s(:args,
                  s(:arg, :var)),
                s(:send, nil, :commit,
                  s(:dstr,
                    s(:str, "  "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :var), :[],
                        s(:int, 0))),
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :var), :[],
                        s(:int, 1))),
                    s(:str, ";")))))),
          s(:def, :make_header_stack_val,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "/* declare stack push val */")),
              s(:lvasgn, :vars,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :insn), :opes), :+,
                    s(:send,
                      s(:lvar, :insn), :pops)), :+,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :insn), :defopes), :map),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:lvar, :e), :[],
                      s(:int, 0))))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :insn), :rets), :each),
                s(:args,
                  s(:arg, :var)),
                s(:if,
                  s(:and,
                    s(:block,
                      s(:send,
                        s(:lvar, :vars), :all?),
                      s(:args,
                        s(:arg, :e)),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :[],
                          s(:int, 1)), :!=,
                        s(:send,
                          s(:lvar, :var), :[],
                          s(:int, 1)))),
                    s(:send,
                      s(:send,
                        s(:lvar, :var), :[],
                        s(:int, 1)), :!=,
                      s(:str, "..."))),
                  s(:send, nil, :commit,
                    s(:dstr,
                      s(:str, "  "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :var), :[],
                          s(:int, 0))),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :var), :[],
                          s(:int, 1))),
                      s(:str, ";"))), nil)))),
          s(:def, :make_header_analysis,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  COLLECT_USAGE_INSN(BIN("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, "));"))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :insn), :opes), :each_with_index),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :i)),
                s(:send, nil, :commit,
                  s(:dstr,
                    s(:str, "  COLLECT_USAGE_OPERAND(BIN("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :insn), :name)),
                    s(:str, "), "),
                    s(:begin,
                      s(:lvar, :i)),
                    s(:str, ", "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :op), :[],
                        s(:int, 1))),
                    s(:str, ");")))))),
          s(:def, :make_header_pc,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  ADD_PC(1+"),
                  s(:begin,
                    s(:ivar, :@opn)),
                  s(:str, ");"))),
              s(:send, nil, :commit,
                s(:str, "  PREFETCH(GET_PC());")))),
          s(:def, :make_header_popn,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* management */")),
              s(:if,
                s(:send,
                  s(:ivar, :@popn), :>,
                  s(:int, 0)),
                s(:send, nil, :commit,
                  s(:dstr,
                    s(:str, "  POPN("),
                    s(:begin,
                      s(:ivar, :@popn)),
                    s(:str, ");"))), nil))),
          s(:def, :make_header_debug,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* for debug */")),
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  DEBUG_ENTER_INSN(\""),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, "\");"))))),
          s(:def, :make_header_defines,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  #define CURRENT_INSN_"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, " 1"))),
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  #define INSN_IS_SC()     "),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :insn), :sc),
                      s(:int, 0),
                      s(:int, 1))))),
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  #define INSN_LABEL(lab)  LABEL_"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, "_##lab"))),
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  #define LABEL_IS_SC(lab) LABEL_##lab##_##"),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :insn), :sc), :size), :==,
                        s(:int, 0)),
                      s(:str, "t"),
                      s(:str, "f"))))))),
          s(:def, :each_footer_stack_val,
            s(:args,
              s(:arg, :insn)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :insn), :rets), :reverse_each),
              s(:args,
                s(:arg, :v)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :[],
                      s(:int, 1)), :==,
                    s(:str, "...")),
                  s(:break), nil),
                s(:yield,
                  s(:lvar, :v))))),
          s(:def, :make_footer_stack_val,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :comment,
                s(:str, "  /* push stack val */")),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:block,
                s(:send, nil, :each_footer_stack_val,
                  s(:lvar, :insn)),
                s(:args,
                  s(:arg, :v)),
                s(:if,
                  s(:send,
                    s(:lvar, :v), :[],
                    s(:int, 2)), nil,
                  s(:op_asgn,
                    s(:lvasgn, :n), :+,
                    s(:int, 1)))),
              s(:if,
                s(:send,
                  s(:lvar, :n), :>,
                  s(:int, 0)),
                s(:send, nil, :commit,
                  s(:dstr,
                    s(:str, "  CHECK_VM_STACK_OVERFLOW_FOR_INSN(REG_CFP, "),
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, ");"))), nil),
              s(:block,
                s(:send, nil, :each_footer_stack_val,
                  s(:lvar, :insn)),
                s(:args,
                  s(:arg, :v)),
                s(:if,
                  s(:send,
                    s(:lvar, :v), :[],
                    s(:int, 2)),
                  s(:send, nil, :commit,
                    s(:dstr,
                      s(:str, "  SCREG("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :v), :[],
                          s(:int, 2))),
                      s(:str, ") = "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :v), :[],
                          s(:int, 1))),
                      s(:str, ";"))),
                  s(:send, nil, :commit,
                    s(:dstr,
                      s(:str, "  PUSH("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :v), :[],
                          s(:int, 1))),
                      s(:str, ");"))))))),
          s(:def, :make_footer_undefs,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "#undef CURRENT_INSN_"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)))),
              s(:send, nil, :commit,
                s(:str, "#undef INSN_IS_SC")),
              s(:send, nil, :commit,
                s(:str, "#undef INSN_LABEL")),
              s(:send, nil, :commit,
                s(:str, "#undef LABEL_IS_SC")))),
          s(:def, :make_header,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "INSN_ENTRY("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, "){"))),
              s(:send, nil, :make_header_prepare_stack,
                s(:lvar, :insn)),
              s(:send, nil, :commit,
                s(:str, "{")),
              s(:send, nil, :make_header_stack_val,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_default_operands,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_operands,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_stack_pops,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_temporary_vars,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_debug,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_pc,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_popn,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_defines,
                s(:lvar, :insn)),
              s(:send, nil, :make_header_analysis,
                s(:lvar, :insn)),
              s(:send, nil, :commit,
                s(:str, "{")))),
          s(:def, :make_footer,
            s(:args,
              s(:arg, :insn)),
            s(:begin,
              s(:send, nil, :make_footer_stack_val,
                s(:lvar, :insn)),
              s(:send, nil, :make_footer_default_operands,
                s(:lvar, :insn)),
              s(:send, nil, :make_footer_undefs,
                s(:lvar, :insn)),
              s(:send, nil, :commit,
                s(:dstr,
                  s(:str, "  END_INSN("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, ");}}}"))))),
          s(:def, :make_insn_def,
            s(:args,
              s(:arg, :insn)),
            s(:block,
              s(:send, nil, :build_string),
              s(:args),
              s(:begin,
                s(:send, nil, :make_header,
                  s(:lvar, :insn)),
                s(:if,
                  s(:lvasgn, :line,
                    s(:send,
                      s(:send,
                        s(:lvar, :insn), :body), :instance_variable_get,
                      s(:sym, :@line_no))),
                  s(:begin,
                    s(:lvasgn, :file,
                      s(:send,
                        s(:send,
                          s(:lvar, :insn), :body), :instance_variable_get,
                        s(:sym, :@file))),
                    s(:send, nil, :commit,
                      s(:dstr,
                        s(:str, "#line "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :line), :+,
                            s(:int, 1))),
                        s(:str, " \""),
                        s(:begin,
                          s(:lvar, :file)),
                        s(:str, "\""))),
                    s(:send, nil, :commit,
                      s(:send,
                        s(:lvar, :insn), :body)),
                    s(:send, nil, :commit,
                      s(:str, "#line __CURRENT_LINE__ \"__CURRENT_FILE__\""))),
                  s(:send,
                    s(:lvar, :insn), :body)),
                s(:send, nil, :make_footer,
                  s(:lvar, :insn))))))),
      s(:class,
        s(:const, nil, :VmTCIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:def, :generate,
          s(:args),
          s(:begin,
            s(:lvasgn, :insns_table,
              s(:block,
                s(:send, nil, :build_string),
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@insns), :each),
                  s(:args,
                    s(:arg, :insn)),
                  s(:send, nil, :commit,
                    s(:dstr,
                      s(:str, "  LABEL_PTR("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :insn), :name)),
                      s(:str, "),")))))),
            s(:lvasgn, :insn_end_table,
              s(:block,
                s(:send, nil, :build_string),
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@insns), :each),
                  s(:args,
                    s(:arg, :insn)),
                  s(:send, nil, :commit,
                    s(:dstr,
                      s(:str, "  ELABEL_PTR("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :insn), :name)),
                      s(:str, "),\n")))))),
            s(:send,
              s(:send,
                s(:const, nil, :ERB), :new,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/vmtc.inc.tmpl"))), :result,
              s(:send, nil, :binding))))),
      s(:class,
        s(:const, nil, :InsnsInfoIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:begin,
          s(:def, :generate,
            s(:args),
            s(:send, nil, :insns_info_inc)),
          s(:send, nil, :private),
          s(:def, :op2typesig,
            s(:args,
              s(:arg, :op)),
            s(:case,
              s(:lvar, :op),
              s(:when,
                s(:regexp,
                  s(:str, "^OFFSET"),
                  s(:regopt)),
                s(:str, "TS_OFFSET")),
              s(:when,
                s(:regexp,
                  s(:str, "^rb_num_t"),
                  s(:regopt)),
                s(:str, "TS_NUM")),
              s(:when,
                s(:regexp,
                  s(:str, "^lindex_t"),
                  s(:regopt)),
                s(:str, "TS_LINDEX")),
              s(:when,
                s(:regexp,
                  s(:str, "^VALUE"),
                  s(:regopt)),
                s(:str, "TS_VALUE")),
              s(:when,
                s(:regexp,
                  s(:str, "^ID"),
                  s(:regopt)),
                s(:str, "TS_ID")),
              s(:when,
                s(:regexp,
                  s(:str, "GENTRY"),
                  s(:regopt)),
                s(:str, "TS_GENTRY")),
              s(:when,
                s(:regexp,
                  s(:str, "^IC"),
                  s(:regopt)),
                s(:str, "TS_IC")),
              s(:when,
                s(:regexp,
                  s(:str, "^CALL_INFO"),
                  s(:regopt)),
                s(:str, "TS_CALLINFO")),
              s(:when,
                s(:regexp,
                  s(:str, "^CALL_CACHE"),
                  s(:regopt)),
                s(:str, "TS_CALLCACHE")),
              s(:when,
                s(:regexp,
                  s(:str, "^\\.\\.\\."),
                  s(:regopt)),
                s(:str, "TS_VARIABLE")),
              s(:when,
                s(:regexp,
                  s(:str, "^CDHASH"),
                  s(:regopt)),
                s(:str, "TS_CDHASH")),
              s(:when,
                s(:regexp,
                  s(:str, "^ISEQ"),
                  s(:regopt)),
                s(:str, "TS_ISEQ")),
              s(:when,
                s(:regexp,
                  s(:str, "rb_insn_func_t"),
                  s(:regopt)),
                s(:str, "TS_FUNCPTR")),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "unknown op type: "),
                  s(:begin,
                    s(:lvar, :op)))))),
          s(:casgn, nil, :TYPE_CHARS,
            s(:hash,
              s(:pair,
                s(:str, "TS_OFFSET"),
                s(:str, "O")),
              s(:pair,
                s(:str, "TS_NUM"),
                s(:str, "N")),
              s(:pair,
                s(:str, "TS_LINDEX"),
                s(:str, "L")),
              s(:pair,
                s(:str, "TS_VALUE"),
                s(:str, "V")),
              s(:pair,
                s(:str, "TS_ID"),
                s(:str, "I")),
              s(:pair,
                s(:str, "TS_GENTRY"),
                s(:str, "G")),
              s(:pair,
                s(:str, "TS_IC"),
                s(:str, "K")),
              s(:pair,
                s(:str, "TS_CALLINFO"),
                s(:str, "C")),
              s(:pair,
                s(:str, "TS_CALLCACHE"),
                s(:str, "E")),
              s(:pair,
                s(:str, "TS_CDHASH"),
                s(:str, "H")),
              s(:pair,
                s(:str, "TS_ISEQ"),
                s(:str, "S")),
              s(:pair,
                s(:str, "TS_VARIABLE"),
                s(:str, ".")),
              s(:pair,
                s(:str, "TS_FUNCPTR"),
                s(:str, "F")))),
          s(:def, :insns_info_inc,
            s(:args),
            s(:begin,
              s(:lvasgn, :insn_type_chars,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:const, nil, :TYPE_CHARS), :map),
                    s(:args,
                      s(:arg, :t),
                      s(:arg, :c)),
                    s(:dstr,
                      s(:str, "#define "),
                      s(:begin,
                        s(:lvar, :t)),
                      s(:str, " '"),
                      s(:begin,
                        s(:lvar, :c)),
                      s(:str, "'"))), :join,
                  s(:str, "\n"))),
              s(:lvasgn, :insn_names,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:send,
                  s(:lvar, :insn_names), :<<,
                  s(:dstr,
                    s(:str, "  \""),
                    s(:begin,
                      s(:send,
                        s(:lvar, :insn), :name)),
                    s(:str, "\",\n")))),
              s(:lvasgn, :operands_info,
                s(:str, "")),
              s(:lvasgn, :operands_num_info,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:begin,
                  s(:lvasgn, :opes,
                    s(:send,
                      s(:lvar, :insn), :opes)),
                  s(:send,
                    s(:lvar, :operands_info), :<<,
                    s(:str, "  ")),
                  s(:lvasgn, :ot,
                    s(:block,
                      s(:send,
                        s(:lvar, :opes), :map),
                      s(:args,
                        s(:arg, :type),
                        s(:arg, :var)),
                      s(:send,
                        s(:const, nil, :TYPE_CHARS), :fetch,
                        s(:send, nil, :op2typesig,
                          s(:lvar, :type))))),
                  s(:send,
                    s(:send,
                      s(:lvar, :operands_info), :<<,
                      s(:dstr,
                        s(:str, "\""),
                        s(:begin,
                          s(:send,
                            s(:lvar, :ot), :join)),
                        s(:str, "\""))), :<<,
                    s(:str, ",\n")),
                  s(:lvasgn, :num,
                    s(:send,
                      s(:send,
                        s(:lvar, :opes), :size), :+,
                      s(:int, 1))),
                  s(:send,
                    s(:lvar, :operands_num_info), :<<,
                    s(:dstr,
                      s(:str, "  "),
                      s(:begin,
                        s(:lvar, :num)),
                      s(:str, ",\n"))))),
              s(:lvasgn, :stack_num_info,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:begin,
                  s(:lvasgn, :num,
                    s(:send,
                      s(:send,
                        s(:lvar, :insn), :rets), :size)),
                  s(:send,
                    s(:lvar, :stack_num_info), :<<,
                    s(:dstr,
                      s(:str, "  "),
                      s(:begin,
                        s(:lvar, :num)),
                      s(:str, ",\n"))))),
              s(:lvasgn, :stack_increase,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:send,
                  s(:lvar, :stack_increase), :<<,
                  s(:dstr,
                    s(:str, "        case BIN("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :insn), :name)),
                    s(:str, "):{\n"),
                    s(:str, "          "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :insn), :sp_increase_c_expr)),
                    s(:str, "\n"),
                    s(:str, "        }\n")))),
              s(:send,
                s(:send,
                  s(:const, nil, :ERB), :new,
                  s(:send,
                    s(:send, nil, :vpath), :read,
                    s(:str, "template/insns_info.inc.tmpl"))), :result,
                s(:send, nil, :binding)))))),
      s(:class,
        s(:const, nil, :InsnsIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:def, :generate,
          s(:args),
          s(:begin,
            s(:lvasgn, :i,
              s(:int, 0)),
            s(:lvasgn, :insns,
              s(:block,
                s(:send, nil, :build_string),
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@insns), :each),
                  s(:args,
                    s(:arg, :insn)),
                  s(:begin,
                    s(:send, nil, :commit,
                      s(:send,
                        s(:str, "  %-30s = %d,"), :%,
                        s(:array,
                          s(:dstr,
                            s(:str, "BIN("),
                            s(:begin,
                              s(:send,
                                s(:lvar, :insn), :name)),
                            s(:str, ")")),
                          s(:lvar, :i)))),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 1)))))),
            s(:send,
              s(:send,
                s(:const, nil, :ERB), :new,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/insns.inc.tmpl"))), :result,
              s(:send, nil, :binding))))),
      s(:class,
        s(:const, nil, :MInsnsIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:def, :generate,
          s(:args),
          s(:begin,
            s(:lvasgn, :i,
              s(:int, 0)),
            s(:lvasgn, :defs,
              s(:block,
                s(:send, nil, :build_string),
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@insns), :each),
                  s(:args,
                    s(:arg, :insn)),
                  s(:begin,
                    s(:send, nil, :commit,
                      s(:send,
                        s(:str, "  rb_define_const(mYarvInsns, %-30s, INT2FIX(%d));"), :%,
                        s(:array,
                          s(:dstr,
                            s(:str, "\"I"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :insn), :name)),
                            s(:str, "\"")),
                          s(:lvar, :i)))),
                    s(:op_asgn,
                      s(:lvasgn, :i), :+,
                      s(:int, 1)))))),
            s(:send,
              s(:send,
                s(:const, nil, :ERB), :new,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/minsns.inc.tmpl"))), :result,
              s(:send, nil, :binding))))),
      s(:class,
        s(:const, nil, :OptInsnIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:begin,
          s(:def, :generate,
            s(:args),
            s(:send, nil, :optinsn_inc)),
          s(:send, nil, :private),
          s(:def, :val_as_type,
            s(:args,
              s(:arg, :op)),
            s(:begin,
              s(:lvasgn, :type,
                s(:send,
                  s(:send,
                    s(:lvar, :op), :[],
                    s(:int, 0)), :[],
                  s(:int, 0))),
              s(:lvasgn, :val,
                s(:send,
                  s(:lvar, :op), :[],
                  s(:int, 1))),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:regexp,
                    s(:str, "^long"),
                    s(:regopt)),
                  s(:regexp,
                    s(:str, "^rb_num_t"),
                    s(:regopt)),
                  s(:regexp,
                    s(:str, "^lindex_t"),
                    s(:regopt)),
                  s(:dstr,
                    s(:str, "INT2FIX("),
                    s(:begin,
                      s(:lvar, :val)),
                    s(:str, ")"))),
                s(:when,
                  s(:regexp,
                    s(:str, "^VALUE"),
                    s(:regopt)),
                  s(:lvar, :val)),
                s(:when,
                  s(:regexp,
                    s(:str, "^ID"),
                    s(:regopt)),
                  s(:dstr,
                    s(:str, "INT2FIX("),
                    s(:begin,
                      s(:lvar, :val)),
                    s(:str, ")"))),
                s(:when,
                  s(:regexp,
                    s(:str, "^ISEQ"),
                    s(:regopt)),
                  s(:regexp,
                    s(:str, "^rb_insn_func_t"),
                    s(:regopt)),
                  s(:lvar, :val)),
                s(:when,
                  s(:regexp,
                    s(:str, "GENTRY"),
                    s(:regopt)),
                  s(:send, nil, :raise)),
                s(:when,
                  s(:regexp,
                    s(:str, "^\\.\\.\\."),
                    s(:regopt)),
                  s(:send, nil, :raise)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "type: "),
                    s(:begin,
                      s(:lvar, :type))))))),
          s(:def, :optinsn_inc,
            s(:args),
            s(:begin,
              s(:lvasgn, :rule,
                s(:str, "")),
              s(:lvasgn, :opt_insns_map,
                s(:block,
                  s(:send,
                    s(:const, nil, :Hash), :new),
                  s(:args,
                    s(:arg, :h),
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :h), :[]=,
                    s(:lvar, :k),
                    s(:array)))),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :insn), :defopes), :size), :==,
                      s(:int, 0)),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :insn), :type), :==,
                      s(:sym, :sc)),
                    s(:next), nil),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^UNIFIED"),
                        s(:regopt)),
                      s(:send,
                        s(:send,
                          s(:lvar, :insn), :name), :to_s)),
                    s(:next), nil),
                  s(:lvasgn, :originsn,
                    s(:send,
                      s(:lvar, :insn), :orig)),
                  s(:send,
                    s(:send,
                      s(:lvar, :opt_insns_map), :[],
                      s(:lvar, :originsn)), :<<,
                    s(:lvar, :insn)))),
              s(:lvasgn, :rule,
                s(:block,
                  s(:send, nil, :build_string),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt_insns_map), :each),
                    s(:args,
                      s(:arg, :originsn),
                      s(:arg, :optinsns)),
                    s(:begin,
                      s(:send, nil, :commit,
                        s(:dstr,
                          s(:str, "case BIN("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :originsn), :name)),
                          s(:str, "):"))),
                      s(:block,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:lvar, :optinsns), :sort_by),
                            s(:args,
                              s(:arg, :opti)),
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :opti), :defopes), :find_all),
                                s(:args,
                                  s(:arg, :e)),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :e), :[],
                                    s(:int, 1)), :==,
                                  s(:str, "*"))), :size)), :each),
                        s(:args,
                          s(:arg, :opti)),
                        s(:begin,
                          s(:send, nil, :commit,
                            s(:str, "  if(")),
                          s(:lvasgn, :i,
                            s(:int, 0)),
                          s(:send, nil, :commit,
                            s(:send,
                              s(:str, "    "), :+,
                              s(:send,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :opti), :defopes), :map),
                                    s(:args,
                                      s(:arg, :opinfo)),
                                    s(:begin,
                                      s(:op_asgn,
                                        s(:lvasgn, :i), :+,
                                        s(:int, 1)),
                                      s(:if,
                                        s(:send,
                                          s(:send,
                                            s(:lvar, :opinfo), :[],
                                            s(:int, 1)), :==,
                                          s(:str, "*")),
                                        s(:next), nil),
                                      s(:dstr,
                                        s(:str, "insnobj->operands["),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :i), :-,
                                            s(:int, 1))),
                                        s(:str, "] == "),
                                        s(:begin,
                                          s(:send, nil, :val_as_type,
                                            s(:lvar, :opinfo)))))), :compact), :join,
                                s(:str, "&&  ")))),
                          s(:send, nil, :commit,
                            s(:str, "  ){")),
                          s(:lvasgn, :idx,
                            s(:int, 0)),
                          s(:lvasgn, :n,
                            s(:int, 0)),
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :opti), :defopes), :each),
                            s(:args,
                              s(:arg, :opinfo)),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :opinfo), :[],
                                    s(:int, 1)), :==,
                                  s(:str, "*")),
                                s(:begin,
                                  s(:if,
                                    s(:send,
                                      s(:lvar, :idx), :!=,
                                      s(:lvar, :n)),
                                    s(:send, nil, :commit,
                                      s(:dstr,
                                        s(:str, "    insnobj->operands["),
                                        s(:begin,
                                          s(:lvar, :idx)),
                                        s(:str, "] = insnobj->operands["),
                                        s(:begin,
                                          s(:lvar, :n)),
                                        s(:str, "];"))), nil),
                                  s(:op_asgn,
                                    s(:lvasgn, :idx), :+,
                                    s(:int, 1))), nil),
                              s(:op_asgn,
                                s(:lvasgn, :n), :+,
                                s(:int, 1)))),
                          s(:send, nil, :commit,
                            s(:dstr,
                              s(:str, "    insnobj->insn_id = BIN("),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :opti), :name)),
                              s(:str, ");"))),
                          s(:send, nil, :commit,
                            s(:dstr,
                              s(:str, "    insnobj->operand_size = "),
                              s(:begin,
                                s(:lvar, :idx)),
                              s(:str, ";"))),
                          s(:send, nil, :commit,
                            s(:str, "    break;\n  }\n")))),
                      s(:send, nil, :commit,
                        s(:str, "  break;")))))),
              s(:send,
                s(:send,
                  s(:const, nil, :ERB), :new,
                  s(:send,
                    s(:send, nil, :vpath), :read,
                    s(:str, "template/optinsn.inc.tmpl"))), :result,
                s(:send, nil, :binding)))))),
      s(:class,
        s(:const, nil, :OptUnifsIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:def, :generate,
          s(:args),
          s(:begin,
            s(:lvasgn, :unif_insns_each,
              s(:str, "")),
            s(:lvasgn, :unif_insns,
              s(:str, "")),
            s(:lvasgn, :unif_insns_data,
              s(:array)),
            s(:lvasgn, :insns,
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :find_all),
                s(:args,
                  s(:arg, :insn)),
                s(:send,
                  s(:send,
                    s(:lvar, :insn), :is_sc), :!))),
            s(:block,
              s(:send,
                s(:lvar, :insns), :each),
              s(:args,
                s(:arg, :insn)),
              s(:begin,
                s(:lvasgn, :size,
                  s(:send,
                    s(:send,
                      s(:lvar, :insn), :unifs), :size)),
                s(:if,
                  s(:send,
                    s(:lvar, :size), :>,
                    s(:int, 0)),
                  s(:block,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :insn), :unifs), :sort_by),
                        s(:args,
                          s(:arg, :unif)),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :unif), :[],
                              s(:int, 1)), :size), :-@)), :each_with_index),
                    s(:args,
                      s(:arg, :unif),
                      s(:arg, :i)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :uni_insn),
                          s(:lvasgn, :uni_insns)),
                        s(:array,
                          s(:splat,
                            s(:lvar, :unif)))),
                      s(:lvasgn, :uni_insns,
                        s(:send,
                          s(:lvar, :uni_insns), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))),
                      s(:send,
                        s(:lvar, :unif_insns_each), :<<,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:dstr,
                                s(:str, "static const int UNIFIED_"),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :insn), :name)),
                                s(:str, "_"),
                                s(:begin,
                                  s(:lvar, :i)),
                                s(:str, "[] = {")), :+,
                              s(:dstr,
                                s(:str, "  BIN("),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :uni_insn), :name)),
                                s(:str, "), "),
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :uni_insns), :size), :+,
                                    s(:int, 2))),
                                s(:str, ",\n  "))), :+,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:lvar, :uni_insns), :map),
                                s(:args,
                                  s(:arg, :e)),
                                s(:dstr,
                                  s(:str, "BIN("),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :e), :name)),
                                  s(:str, ")"))), :join,
                              s(:str, ", "))), :+,
                          s(:str, "};\n"))))), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :size), :>,
                    s(:int, 0)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :unif_insns), :<<,
                      s(:dstr,
                        s(:str, "static const int *const UNIFIED_"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :insn), :name)),
                        s(:str, "[] = {(int *)"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :size), :+,
                            s(:int, 1))),
                        s(:str, ",\n"))),
                    s(:send,
                      s(:lvar, :unif_insns), :<<,
                      s(:send,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:begin,
                                s(:erange,
                                  s(:int, 0),
                                  s(:lvar, :size))), :map),
                            s(:args,
                              s(:arg, :e)),
                            s(:dstr,
                              s(:str, "  UNIFIED_"),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :insn), :name)),
                              s(:str, "_"),
                              s(:begin,
                                s(:lvar, :e)))), :join,
                          s(:str, ",\n")), :+,
                        s(:str, "};\n"))),
                    s(:send,
                      s(:lvar, :unif_insns_data), :<<,
                      s(:dstr,
                        s(:str, "  UNIFIED_"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :insn), :name))))),
                  s(:send,
                    s(:lvar, :unif_insns_data), :<<,
                    s(:str, "  0"))))),
            s(:lvasgn, :unif_insns_data,
              s(:send,
                s(:send,
                  s(:str, "static const int *const *const unified_insns_data[] = {\n"), :+,
                  s(:send,
                    s(:lvar, :unif_insns_data), :join,
                    s(:str, ",\n"))), :+,
                s(:str, "};\n"))),
            s(:send,
              s(:send,
                s(:const, nil, :ERB), :new,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/optunifs.inc.tmpl"))), :result,
              s(:send, nil, :binding))))),
      s(:class,
        s(:const, nil, :OptSCIncGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:def, :generate,
          s(:args),
          s(:begin,
            s(:lvasgn, :sc_insn_info,
              s(:array)),
            s(:block,
              s(:send,
                s(:ivar, :@insns), :each),
              s(:args,
                s(:arg, :insn)),
              s(:begin,
                s(:lvasgn, :insns,
                  s(:send,
                    s(:lvar, :insn), :sc)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :insns), :size), :>,
                    s(:int, 0)),
                  s(:lvasgn, :insns,
                    s(:send,
                      s(:array,
                        s(:str, "SC_ERROR")), :+,
                      s(:block,
                        s(:send,
                          s(:lvar, :insns), :map),
                        s(:args,
                          s(:arg, :e)),
                        s(:dstr,
                          s(:str, "    BIN("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :name)),
                          s(:str, ")"))))),
                  s(:lvasgn, :insns,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Array), :new,
                        s(:int, 6)),
                      s(:args),
                      s(:str, "SC_ERROR")))),
                s(:send,
                  s(:lvar, :sc_insn_info), :<<,
                  s(:dstr,
                    s(:str, "  {\n"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :insns), :join,
                        s(:str, ",\n"))),
                    s(:str, "}"))))),
            s(:lvasgn, :sc_insn_info,
              s(:send,
                s(:lvar, :sc_insn_info), :join,
                s(:str, ",\n"))),
            s(:lvasgn, :sc_insn_next,
              s(:send,
                s(:block,
                  s(:send,
                    s(:ivar, :@insns), :map),
                  s(:args,
                    s(:arg, :insn)),
                  s(:send,
                    s(:dstr,
                      s(:str, "  SCS_"),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:const, nil, :InstructionsLoader), :complement_name,
                            s(:send,
                              s(:lvar, :insn), :nextsc)), :upcase))), :+,
                    s(:begin,
                      s(:if,
                        s(:send, nil, :verbose?),
                        s(:dstr,
                          s(:str, " /* "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :insn), :name)),
                          s(:str, " */")),
                        s(:str, ""))))), :join,
                s(:str, ",\n"))),
            s(:send,
              s(:send,
                s(:const, nil, :ERB), :new,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/opt_sc.inc.tmpl"))), :result,
              s(:send, nil, :binding))))),
      s(:class,
        s(:const, nil, :YASMDataRbGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:def, :generate,
          s(:args),
          s(:begin,
            s(:lvasgn, :insn_id2no,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:ivar, :@insns), :each_with_index),
              s(:args,
                s(:arg, :insn),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :insn_id2no), :<<,
                s(:dstr,
                  s(:str, "        :"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :insn), :name)),
                  s(:str, " => "),
                  s(:begin,
                    s(:lvar, :i)),
                  s(:str, ",\n")))),
            s(:send,
              s(:send,
                s(:const, nil, :ERB), :new,
                s(:send,
                  s(:send, nil, :vpath), :read,
                  s(:str, "template/yasmdata.rb.tmpl"))), :result,
              s(:send, nil, :binding))))),
      s(:class,
        s(:const, nil, :YARVDocGenerator),
        s(:const, nil, :SourceCodeGenerator),
        s(:begin,
          s(:def, :generate,
            s(:args), nil),
          s(:def, :desc,
            s(:args,
              s(:arg, :lang)),
            s(:begin,
              s(:lvasgn, :d,
                s(:str, "")),
              s(:lvasgn, :i,
                s(:int, 0)),
              s(:lvasgn, :cat,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:ivar, :@insns), :each),
                s(:args,
                  s(:arg, :insn)),
                s(:begin,
                  s(:lvasgn, :seq,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :insn), :opes), :map),
                        s(:args,
                          s(:arg, :t),
                          s(:arg, :v)),
                        s(:lvar, :v)), :join,
                      s(:str, " "))),
                  s(:lvasgn, :before,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :insn), :pops), :reverse), :map),
                        s(:args,
                          s(:arg, :t),
                          s(:arg, :v)),
                        s(:lvar, :v)), :join,
                      s(:str, " "))),
                  s(:lvasgn, :after,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :insn), :rets), :reverse), :map),
                        s(:args,
                          s(:arg, :t),
                          s(:arg, :v)),
                        s(:lvar, :v)), :join,
                      s(:str, " "))),
                  s(:if,
                    s(:send,
                      s(:lvar, :cat), :!=,
                      s(:send,
                        s(:send,
                          s(:lvar, :insn), :comm), :[],
                        s(:sym, :c))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :d), :<<,
                        s(:dstr,
                          s(:str, "** "),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :insn), :comm), :[],
                              s(:sym, :c))),
                          s(:str, "\n\n"))),
                      s(:lvasgn, :cat,
                        s(:send,
                          s(:send,
                            s(:lvar, :insn), :comm), :[],
                          s(:sym, :c)))), nil),
                  s(:send,
                    s(:lvar, :d), :<<,
                    s(:dstr,
                      s(:str, "*** "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :insn), :name)),
                      s(:str, "\n"))),
                  s(:send,
                    s(:lvar, :d), :<<,
                    s(:str, "\n")),
                  s(:send,
                    s(:lvar, :d), :<<,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :insn), :comm), :[],
                        s(:lvar, :lang)), :+,
                      s(:str, "\n\n"))),
                  s(:send,
                    s(:lvar, :d), :<<,
                    s(:send,
                      s(:dstr,
                        s(:str, ":instruction sequence: 0x%02x "),
                        s(:begin,
                          s(:lvar, :seq)),
                        s(:str, "\n")), :%,
                      s(:lvar, :i))),
                  s(:send,
                    s(:lvar, :d), :<<,
                    s(:dstr,
                      s(:str, ":stack: "),
                      s(:begin,
                        s(:lvar, :before)),
                      s(:str, " => "),
                      s(:begin,
                        s(:lvar, :after)),
                      s(:str, "\n\n"))),
                  s(:op_asgn,
                    s(:lvasgn, :i), :+,
                    s(:int, 1)))),
              s(:lvar, :d))),
          s(:def, :desc_ja,
            s(:args),
            s(:begin,
              s(:lvasgn, :d,
                s(:send, nil, :desc,
                  s(:sym, :j))),
              s(:send,
                s(:send,
                  s(:const, nil, :ERB), :new,
                  s(:send,
                    s(:send, nil, :vpath), :read,
                    s(:str, "template/yarvarch.ja"))), :result,
                s(:send, nil, :binding)))),
          s(:def, :desc_en,
            s(:args),
            s(:begin,
              s(:lvasgn, :d,
                s(:send, nil, :desc,
                  s(:sym, :e))),
              s(:send,
                s(:send,
                  s(:const, nil, :ERB), :new,
                  s(:send,
                    s(:send, nil, :vpath), :read,
                    s(:str, "template/yarvarch.en"))), :result,
                s(:send, nil, :binding)))))),
      s(:class,
        s(:const, nil, :SourceCodeGenerator), nil,
        s(:begin,
          s(:casgn, nil, :Files,
            s(:hash,
              s(:pair,
                s(:str, "vm.inc"),
                s(:const, nil, :VmBodyGenerator)),
              s(:pair,
                s(:str, "vmtc.inc"),
                s(:const, nil, :VmTCIncGenerator)),
              s(:pair,
                s(:str, "insns.inc"),
                s(:const, nil, :InsnsIncGenerator)),
              s(:pair,
                s(:str, "insns_info.inc"),
                s(:const, nil, :InsnsInfoIncGenerator)),
              s(:pair,
                s(:str, "optinsn.inc"),
                s(:const, nil, :OptInsnIncGenerator)),
              s(:pair,
                s(:str, "optunifs.inc"),
                s(:const, nil, :OptUnifsIncGenerator)),
              s(:pair,
                s(:str, "opt_sc.inc"),
                s(:const, nil, :OptSCIncGenerator)),
              s(:pair,
                s(:str, "yasmdata.rb"),
                s(:const, nil, :YASMDataRbGenerator)))),
          s(:def, :generate,
            s(:args,
              s(:optarg, :args,
                s(:array))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :args), :empty?),
                s(:lvasgn, :args,
                  s(:send,
                    s(:const, nil, :Files), :keys)), nil),
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :fn)),
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Files), :[],
                          s(:lvar, :fn)), :new,
                        s(:ivar, :@insns)), :generate)),
                  s(:block,
                    s(:send, nil, :open,
                      s(:send, nil, :output_path,
                        s(:lvar, :fn)),
                      s(:str, "w")),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :puts,
                      s(:lvar, :s))))))),
          s(:defs,
            s(:self), :def_options,
            s(:args,
              s(:arg, :opt)),
            s(:begin,
              s(:lvasgn, :opts,
                s(:hash,
                  s(:pair,
                    s(:sym, :"insns.def"),
                    s(:str, "insns.def")),
                  s(:pair,
                    s(:sym, :"opope.def"),
                    s(:str, "defs/opt_operand.def")),
                  s(:pair,
                    s(:sym, :"unif.def"),
                    s(:str, "defs/opt_insn_unif.def")))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-Dname"),
                  s(:regexp,
                    s(:str, "\\AOPT_(\\w+)\\z"),
                    s(:regopt)),
                  s(:str, "enable VM option")),
                s(:args,
                  s(:arg, :s),
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:lvar, :v),
                  s(:true))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "--enable=name[,name...]"),
                  s(:const, nil, :Array),
                  s(:str, "enable VM options (without OPT_ prefix)")),
                s(:args,
                  s(:restarg, :a)),
                s(:block,
                  s(:send,
                    s(:lvar, :a), :each),
                  s(:args,
                    s(:arg, :v)),
                  s(:send,
                    s(:lvar, :opts), :[]=,
                    s(:lvar, :v),
                    s(:true)))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-Uname"),
                  s(:regexp,
                    s(:str, "\\AOPT_(\\w+)\\z"),
                    s(:regopt)),
                  s(:str, "disable VM option")),
                s(:args,
                  s(:arg, :s),
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:lvar, :v),
                  s(:false))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "--disable=name[,name...]"),
                  s(:const, nil, :Array),
                  s(:str, "disable VM options (without OPT_ prefix)")),
                s(:args,
                  s(:restarg, :a)),
                s(:block,
                  s(:send,
                    s(:lvar, :a), :each),
                  s(:args,
                    s(:arg, :v)),
                  s(:send,
                    s(:lvar, :opts), :[]=,
                    s(:lvar, :v),
                    s(:false)))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-i"),
                  s(:str, "--insnsdef=FILE"),
                  s(:str, "--instructions-def"),
                  s(:str, "instructions definition file")),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :insns_def),
                  s(:lvar, :n))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-o"),
                  s(:str, "--opt-operanddef=FILE"),
                  s(:str, "--opt-operand-def"),
                  s(:str, "vm option: operand definition file")),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :opope_def),
                  s(:lvar, :n))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-u"),
                  s(:str, "--opt-insnunifdef=FILE"),
                  s(:str, "--opt-insn-unif-def"),
                  s(:str, "vm option: instruction unification file")),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :unif_def),
                  s(:lvar, :n))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-C"),
                  s(:str, "--[no-]use-const"),
                  s(:str, "use consts for default operands instead of macros")),
                s(:args,
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :use_const),
                  s(:lvar, :v))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-d"),
                  s(:str, "--destdir"),
                  s(:str, "--output-directory=DIR"),
                  s(:str, "make output file underneath DIR")),
                s(:args,
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :destdir),
                  s(:lvar, :v))),
              s(:block,
                s(:send,
                  s(:lvar, :opt), :on,
                  s(:str, "-V"),
                  s(:str, "--[no-]verbose")),
                s(:args,
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :opts), :[]=,
                  s(:sym, :verbose),
                  s(:lvar, :v))),
              s(:lvasgn, :vpath,
                s(:send,
                  s(:const, nil, :VPath), :new)),
              s(:send,
                s(:lvar, :vpath), :def_options,
                s(:lvar, :opt)),
              s(:block,
                s(:send, nil, :proc),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :opts), :[]=,
                    s(:sym, :VPATH),
                    s(:lvar, :vpath)),
                  s(:send, nil, :build,
                    s(:lvar, :opts)))))),
          s(:defs,
            s(:self), :build,
            s(:args,
              s(:arg, :opts),
              s(:optarg, :vpath,
                s(:array,
                  s(:str, "./")))),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:sym, :VPATH)),
                s(:send,
                  s(:const, nil, :VPath), :new,
                  s(:splat,
                    s(:lvar, :vpath)))),
              s(:send,
                s(:self), :new,
                s(:send,
                  s(:const, nil, :InstructionsLoader), :new,
                  s(:lvar, :opts))))))))))
