s(:begin,
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)), :==,
      s(:str, "--header")),
    s(:begin,
      s(:lvasgn, :header,
        s(:true)),
      s(:send,
        s(:const, nil, :ARGV), :shift)), nil),
  s(:if,
    s(:send,
      s(:send,
        s(:const, nil, :ARGV), :size), :==,
      s(:int, 1)), nil,
    s(:begin,
      s(:send,
        s(:gvar, :$stderr), :puts,
        s(:dstr,
          s(:str, "Usage: "),
          s(:begin,
            s(:gvar, :$0)),
          s(:str, " data_directory"))),
      s(:send, nil, :exit,
        s(:int, 1)))),
  s(:casgn, nil, :POSIX_NAMES,
    s(:array,
      s(:str, "NEWLINE"),
      s(:str, "Alpha"),
      s(:str, "Blank"),
      s(:str, "Cntrl"),
      s(:str, "Digit"),
      s(:str, "Graph"),
      s(:str, "Lower"),
      s(:str, "Print"),
      s(:str, "Punct"),
      s(:str, "Space"),
      s(:str, "Upper"),
      s(:str, "XDigit"),
      s(:str, "Word"),
      s(:str, "Alnum"),
      s(:str, "ASCII"))),
  s(:def, :pair_codepoints,
    s(:args,
      s(:arg, :codepoints)),
    s(:begin,
      s(:send,
        s(:lvar, :codepoints), :sort!),
      s(:lvasgn, :last_cp,
        s(:send,
          s(:lvar, :codepoints), :first)),
      s(:lvasgn, :pairs,
        s(:array,
          s(:array,
            s(:lvar, :last_cp),
            s(:nil)))),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :codepoints), :[],
            s(:irange,
              s(:int, 1),
              s(:int, -1))), :each),
        s(:args,
          s(:arg, :codepoint)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :last_cp), :==,
              s(:lvar, :codepoint)),
            s(:next), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :last_cp), :next), :!=,
              s(:lvar, :codepoint)),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :pairs), :[],
                  s(:int, -1)), :[]=,
                s(:int, -1),
                s(:lvar, :last_cp)),
              s(:send,
                s(:lvar, :pairs), :<<,
                s(:array,
                  s(:lvar, :codepoint),
                  s(:nil)))), nil),
          s(:lvasgn, :last_cp,
            s(:lvar, :codepoint)))),
      s(:send,
        s(:send,
          s(:lvar, :pairs), :[],
          s(:int, -1)), :[]=,
        s(:int, -1),
        s(:send,
          s(:lvar, :codepoints), :last)),
      s(:lvar, :pairs))),
  s(:def, :parse_unicode_data,
    s(:args,
      s(:arg, :file)),
    s(:begin,
      s(:lvasgn, :last_cp,
        s(:int, 0)),
      s(:lvasgn, :data,
        s(:hash,
          s(:pair,
            s(:str, "Any"),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 1114111))), :to_a)),
          s(:pair,
            s(:str, "Assigned"),
            s(:array)),
          s(:pair,
            s(:str, "ASCII"),
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 0),
                  s(:int, 127))), :to_a)),
          s(:pair,
            s(:str, "NEWLINE"),
            s(:array,
              s(:int, 10))),
          s(:pair,
            s(:str, "Cn"),
            s(:array)))),
      s(:lvasgn, :beg_cp,
        s(:nil)),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:lvar, :file)),
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:lvasgn, :fields,
            s(:send,
              s(:lvar, :line), :split,
              s(:str, ";"))),
          s(:lvasgn, :cp,
            s(:send,
              s(:send,
                s(:lvar, :fields), :[],
                s(:int, 0)), :to_i,
              s(:int, 16))),
          s(:case,
            s(:send,
              s(:lvar, :fields), :[],
              s(:int, 1)),
            s(:when,
              s(:regexp,
                s(:str, "\\A<(.*),\\s*First>\\z"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :beg_cp,
                  s(:lvar, :cp)),
                s(:next))),
            s(:when,
              s(:regexp,
                s(:str, "\\A<(.*),\\s*Last>\\z"),
                s(:regopt)),
              s(:lvasgn, :cps,
                s(:send,
                  s(:begin,
                    s(:irange,
                      s(:lvar, :beg_cp),
                      s(:lvar, :cp))), :to_a))),
            s(:begin,
              s(:lvasgn, :beg_cp,
                s(:lvar, :cp)),
              s(:lvasgn, :cps,
                s(:array,
                  s(:lvar, :cp))))),
          s(:send,
            s(:send,
              s(:lvar, :data), :[],
              s(:str, "Cn")), :concat,
            s(:send,
              s(:begin,
                s(:erange,
                  s(:send,
                    s(:lvar, :last_cp), :next),
                  s(:lvar, :beg_cp))), :to_a)),
          s(:send,
            s(:send,
              s(:lvar, :data), :[],
              s(:str, "Assigned")), :concat,
            s(:lvar, :cps)),
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:lvar, :data), :[],
                  s(:send,
                    s(:lvar, :fields), :[],
                    s(:int, 2))),
                s(:array))), :concat,
            s(:lvar, :cps)),
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:lvar, :data), :[],
                  s(:send,
                    s(:send,
                      s(:lvar, :fields), :[],
                      s(:int, 2)), :[],
                    s(:int, 0),
                    s(:int, 1))),
                s(:array))), :concat,
            s(:lvar, :cps)),
          s(:lvasgn, :last_cp,
            s(:lvar, :cp)))),
      s(:lvasgn, :cn_remainder,
        s(:send,
          s(:begin,
            s(:irange,
              s(:send,
                s(:lvar, :last_cp), :next),
              s(:int, 1114111))), :to_a)),
      s(:op_asgn,
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Cn")), :+,
        s(:lvar, :cn_remainder)),
      s(:op_asgn,
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "C")), :+,
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Cn"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "LC"),
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :data), :[],
              s(:str, "Ll")), :+,
            s(:send,
              s(:lvar, :data), :[],
              s(:str, "Lt"))), :+,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Lu")))),
      s(:lvasgn, :gcps,
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :data), :keys), :sort), :-,
          s(:const, nil, :POSIX_NAMES))),
      s(:array,
        s(:lvar, :gcps),
        s(:lvar, :data)))),
  s(:def, :define_posix_props,
    s(:args,
      s(:arg, :data)),
    s(:begin,
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Alpha"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Alphabetic"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Upper"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Uppercase"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Lower"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Lowercase"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Punct"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Punctuation"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Digit"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Decimal_Number"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "XDigit"),
        s(:send,
          s(:send,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 48),
                  s(:int, 57))), :to_a), :+,
            s(:send,
              s(:begin,
                s(:irange,
                  s(:int, 65),
                  s(:int, 70))), :to_a)), :+,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 97),
                s(:int, 102))), :to_a))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Alnum"),
        s(:send,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Alpha")), :+,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Digit")))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Space"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "White_Space"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Blank"),
        s(:send,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Space_Separator")), :+,
          s(:array,
            s(:int, 9)))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Cntrl"),
        s(:send,
          s(:lvar, :data), :[],
          s(:str, "Cc"))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Word"),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :data), :[],
                s(:str, "Alpha")), :+,
              s(:send,
                s(:lvar, :data), :[],
                s(:str, "Mark"))), :+,
            s(:send,
              s(:lvar, :data), :[],
              s(:str, "Digit"))), :+,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Connector_Punctuation")))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Graph"),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :data), :[],
                  s(:str, "Any")), :-,
                s(:send,
                  s(:lvar, :data), :[],
                  s(:str, "Space"))), :-,
              s(:send,
                s(:lvar, :data), :[],
                s(:str, "Cntrl"))), :-,
            s(:send,
              s(:lvar, :data), :[],
              s(:str, "Surrogate"))), :-,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Unassigned")))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Print"),
        s(:send,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Graph")), :+,
          s(:send,
            s(:lvar, :data), :[],
            s(:str, "Space_Separator")))))),
  s(:def, :parse_scripts,
    s(:args,
      s(:arg, :data),
      s(:arg, :categories)),
    s(:begin,
      s(:lvasgn, :files,
        s(:array,
          s(:hash,
            s(:pair,
              s(:sym, :fn),
              s(:str, "DerivedCoreProperties.txt")),
            s(:pair,
              s(:sym, :title),
              s(:str, "Derived Property"))),
          s(:hash,
            s(:pair,
              s(:sym, :fn),
              s(:str, "Scripts.txt")),
            s(:pair,
              s(:sym, :title),
              s(:str, "Script"))),
          s(:hash,
            s(:pair,
              s(:sym, :fn),
              s(:str, "PropList.txt")),
            s(:pair,
              s(:sym, :title),
              s(:str, "Binary Property"))))),
      s(:lvasgn, :current,
        s(:nil)),
      s(:lvasgn, :cps,
        s(:array)),
      s(:lvasgn, :names,
        s(:hash)),
      s(:block,
        s(:send,
          s(:lvar, :files), :each),
        s(:args,
          s(:arg, :file)),
        s(:block,
          s(:send,
            s(:const, nil, :IO), :foreach,
            s(:send, nil, :get_file,
              s(:send,
                s(:lvar, :file), :[],
                s(:sym, :fn)))),
          s(:args,
            s(:arg, :line)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^# Total code points: "),
                s(:regopt)),
              s(:lvar, :line)),
            s(:begin,
              s(:send,
                s(:lvar, :data), :[]=,
                s(:lvar, :current),
                s(:lvar, :cps)),
              s(:send,
                s(:lvar, :categories), :[]=,
                s(:lvar, :current),
                s(:send,
                  s(:lvar, :file), :[],
                  s(:sym, :title))),
              s(:send,
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:lvar, :names), :[],
                      s(:send,
                        s(:lvar, :file), :[],
                        s(:sym, :title))),
                    s(:array))), :<<,
                s(:lvar, :current)),
              s(:lvasgn, :cps,
                s(:array))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^([0-9a-fA-F]+)(?:..([0-9a-fA-F]+))?\\s*;\\s*(\\w+)"),
                  s(:regopt)),
                s(:lvar, :line)),
              s(:begin,
                s(:lvasgn, :current,
                  s(:nth_ref, 3)),
                s(:if,
                  s(:nth_ref, 2),
                  s(:send,
                    s(:lvar, :cps), :concat,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:send,
                            s(:nth_ref, 1), :to_i,
                            s(:int, 16)),
                          s(:send,
                            s(:nth_ref, 2), :to_i,
                            s(:int, 16)))), :to_a)),
                  s(:send,
                    s(:lvar, :cps), :push,
                    s(:send,
                      s(:nth_ref, 1), :to_i,
                      s(:int, 16))))), nil)))),
      s(:send,
        s(:lvar, :data), :[]=,
        s(:str, "Unknown"),
        s(:send,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 1114111))), :to_a), :-,
          s(:send,
            s(:send,
              s(:lvar, :data), :values_at,
              s(:splat,
                s(:send,
                  s(:lvar, :names), :[],
                  s(:str, "Script")))), :flatten))),
      s(:send,
        s(:lvar, :categories), :[]=,
        s(:str, "Unknown"),
        s(:str, "Script")),
      s(:send,
        s(:send,
          s(:send,
            s(:lvar, :names), :values), :flatten), :<<,
        s(:str, "Unknown")))),
  s(:def, :parse_aliases,
    s(:args,
      s(:arg, :data)),
    s(:begin,
      s(:lvasgn, :kv,
        s(:hash)),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:send, nil, :get_file,
            s(:str, "PropertyAliases.txt"))),
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^(\\w+)\\s*; (\\w+)"),
                s(:regopt)),
              s(:lvar, :line)), nil,
            s(:next)),
          s(:send,
            s(:lvar, :data), :[]=,
            s(:nth_ref, 1),
            s(:send,
              s(:lvar, :data), :[],
              s(:nth_ref, 2))),
          s(:send,
            s(:lvar, :kv), :[]=,
            s(:send, nil, :normalize_propname,
              s(:nth_ref, 1)),
            s(:send, nil, :normalize_propname,
              s(:nth_ref, 2))))),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:send, nil, :get_file,
            s(:str, "PropertyValueAliases.txt"))),
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^(sc|gc)\\s*; (\\w+)\\s*; (\\w+)(?:\\s*; (\\w+))?"),
                s(:regopt)),
              s(:lvar, :line)), nil,
            s(:next)),
          s(:if,
            s(:send,
              s(:nth_ref, 1), :==,
              s(:str, "gc")),
            s(:begin,
              s(:send,
                s(:lvar, :data), :[]=,
                s(:nth_ref, 3),
                s(:send,
                  s(:lvar, :data), :[],
                  s(:nth_ref, 2))),
              s(:send,
                s(:lvar, :data), :[]=,
                s(:nth_ref, 4),
                s(:send,
                  s(:lvar, :data), :[],
                  s(:nth_ref, 2))),
              s(:send,
                s(:lvar, :kv), :[]=,
                s(:send, nil, :normalize_propname,
                  s(:nth_ref, 3)),
                s(:send, nil, :normalize_propname,
                  s(:nth_ref, 2))),
              s(:if,
                s(:nth_ref, 4),
                s(:send,
                  s(:lvar, :kv), :[]=,
                  s(:send, nil, :normalize_propname,
                    s(:nth_ref, 4)),
                  s(:send, nil, :normalize_propname,
                    s(:nth_ref, 2))), nil)),
            s(:begin,
              s(:send,
                s(:lvar, :data), :[]=,
                s(:nth_ref, 2),
                s(:send,
                  s(:lvar, :data), :[],
                  s(:nth_ref, 3))),
              s(:send,
                s(:lvar, :data), :[]=,
                s(:nth_ref, 4),
                s(:send,
                  s(:lvar, :data), :[],
                  s(:nth_ref, 3))),
              s(:send,
                s(:lvar, :kv), :[]=,
                s(:send, nil, :normalize_propname,
                  s(:nth_ref, 2)),
                s(:send, nil, :normalize_propname,
                  s(:nth_ref, 3))),
              s(:if,
                s(:nth_ref, 4),
                s(:send,
                  s(:lvar, :kv), :[]=,
                  s(:send, nil, :normalize_propname,
                    s(:nth_ref, 4)),
                  s(:send, nil, :normalize_propname,
                    s(:nth_ref, 3))), nil))))),
      s(:lvar, :kv))),
  s(:def, :parse_age,
    s(:args,
      s(:arg, :data)),
    s(:begin,
      s(:lvasgn, :current,
        s(:nil)),
      s(:lvasgn, :last_constname,
        s(:nil)),
      s(:lvasgn, :cps,
        s(:array)),
      s(:lvasgn, :ages,
        s(:array)),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:send, nil, :get_file,
            s(:str, "DerivedAge.txt"))),
        s(:args,
          s(:arg, :line)),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "^# Total code points: "),
              s(:regopt)),
            s(:lvar, :line)),
          s(:begin,
            s(:lvasgn, :constname,
              s(:send, nil, :constantize_agename,
                s(:lvar, :current))),
            s(:if,
              s(:lvar, :last_constname),
              s(:send,
                s(:lvar, :cps), :concat,
                s(:send,
                  s(:lvar, :data), :[],
                  s(:lvar, :last_constname))), nil),
            s(:send,
              s(:lvar, :data), :[]=,
              s(:lvar, :constname),
              s(:lvar, :cps)),
            s(:send, nil, :make_const,
              s(:lvar, :constname),
              s(:lvar, :cps),
              s(:dstr,
                s(:str, "Derived Age "),
                s(:begin,
                  s(:lvar, :current)))),
            s(:send,
              s(:lvar, :ages), :<<,
              s(:lvar, :current)),
            s(:lvasgn, :last_constname,
              s(:lvar, :constname)),
            s(:lvasgn, :cps,
              s(:array))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^([0-9a-fA-F]+)(?:..([0-9a-fA-F]+))?\\s*;\\s*(\\d+\\.\\d+)"),
                s(:regopt)),
              s(:lvar, :line)),
            s(:begin,
              s(:lvasgn, :current,
                s(:nth_ref, 3)),
              s(:if,
                s(:nth_ref, 2),
                s(:send,
                  s(:lvar, :cps), :concat,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:send,
                          s(:nth_ref, 1), :to_i,
                          s(:int, 16)),
                        s(:send,
                          s(:nth_ref, 2), :to_i,
                          s(:int, 16)))), :to_a)),
                s(:send,
                  s(:lvar, :cps), :push,
                  s(:send,
                    s(:nth_ref, 1), :to_i,
                    s(:int, 16))))), nil))),
      s(:lvar, :ages))),
  s(:def, :parse_block,
    s(:args,
      s(:arg, :data)),
    s(:begin,
      s(:lvasgn, :current,
        s(:nil)),
      s(:lvasgn, :last_constname,
        s(:nil)),
      s(:lvasgn, :cps,
        s(:array)),
      s(:lvasgn, :blocks,
        s(:array)),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :foreach,
          s(:send, nil, :get_file,
            s(:str, "Blocks.txt"))),
        s(:args,
          s(:arg, :line)),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "^([0-9a-fA-F]+)\\.\\.([0-9a-fA-F]+);\\s*(.*)"),
              s(:regopt)),
            s(:lvar, :line)),
          s(:begin,
            s(:lvasgn, :cps,
              s(:send,
                s(:begin,
                  s(:irange,
                    s(:send,
                      s(:nth_ref, 1), :to_i,
                      s(:int, 16)),
                    s(:send,
                      s(:nth_ref, 2), :to_i,
                      s(:int, 16)))), :to_a)),
            s(:lvasgn, :constname,
              s(:send, nil, :constantize_blockname,
                s(:nth_ref, 3))),
            s(:send,
              s(:lvar, :data), :[]=,
              s(:lvar, :constname),
              s(:lvar, :cps)),
            s(:send, nil, :make_const,
              s(:lvar, :constname),
              s(:lvar, :cps),
              s(:str, "Block")),
            s(:send,
              s(:lvar, :blocks), :<<,
              s(:lvar, :constname))), nil)),
      s(:lvasgn, :no_block,
        s(:send,
          s(:send,
            s(:begin,
              s(:irange,
                s(:int, 0),
                s(:int, 1114111))), :to_a), :-,
          s(:send,
            s(:send,
              s(:lvar, :data), :values_at,
              s(:splat,
                s(:lvar, :blocks))), :flatten))),
      s(:lvasgn, :constname,
        s(:send, nil, :constantize_blockname,
          s(:str, "No_Block"))),
      s(:send, nil, :make_const,
        s(:lvar, :constname),
        s(:lvar, :no_block),
        s(:str, "Block")),
      s(:send,
        s(:lvar, :blocks), :<<,
        s(:lvar, :constname)))),
  s(:if,
    s(:send,
      s(:hash), :respond_to?,
      s(:sym, :key)), nil,
    s(:class,
      s(:const, nil, :Hash), nil,
      s(:alias,
        s(:sym, :key),
        s(:sym, :index)))),
  s(:gvasgn, :$const_cache,
    s(:hash)),
  s(:def, :make_const,
    s(:args,
      s(:arg, :prop),
      s(:arg, :data),
      s(:arg, :name)),
    s(:begin,
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "\n/* '"),
          s(:begin,
            s(:lvar, :prop)),
          s(:str, "': "),
          s(:begin,
            s(:lvar, :name)),
          s(:str, " */"))),
      s(:if,
        s(:lvasgn, :origprop,
          s(:send,
            s(:gvar, :$const_cache), :key,
            s(:lvar, :data))),
        s(:send, nil, :puts,
          s(:dstr,
            s(:str, "#define CR_"),
            s(:begin,
              s(:lvar, :prop)),
            s(:str, " CR_"),
            s(:begin,
              s(:lvar, :origprop)))),
        s(:begin,
          s(:send,
            s(:gvar, :$const_cache), :[]=,
            s(:lvar, :prop),
            s(:lvar, :data)),
          s(:lvasgn, :pairs,
            s(:send, nil, :pair_codepoints,
              s(:lvar, :data))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "static const OnigCodePoint CR_"),
              s(:begin,
                s(:lvar, :prop)),
              s(:str, "[] = {"))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "\t"),
              s(:begin,
                s(:send,
                  s(:lvar, :pairs), :size)),
              s(:str, ","))),
          s(:block,
            s(:send,
              s(:lvar, :pairs), :each),
            s(:args,
              s(:arg, :pair)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :pair), :map!),
                s(:args,
                  s(:arg, :c)),
                s(:if,
                  s(:send,
                    s(:lvar, :c), :==,
                    s(:int, 0)),
                  s(:str, "0x0000"),
                  s(:send, nil, :sprintf,
                    s(:str, "%0#6x"),
                    s(:lvar, :c)))),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "\t"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pair), :first)),
                  s(:str, ", "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pair), :last)),
                  s(:str, ","))))),
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "}; /* CR_"),
              s(:begin,
                s(:lvar, :prop)),
              s(:str, " */"))))))),
  s(:def, :normalize_propname,
    s(:args,
      s(:arg, :name)),
    s(:begin,
      s(:lvasgn, :name,
        s(:send,
          s(:lvar, :name), :downcase)),
      s(:send,
        s(:lvar, :name), :delete!,
        s(:str, "- _")),
      s(:lvar, :name))),
  s(:def, :constantize_agename,
    s(:args,
      s(:arg, :name)),
    s(:dstr,
      s(:str, "Age_"),
      s(:begin,
        s(:send,
          s(:lvar, :name), :sub,
          s(:regexp,
            s(:str, "\\."),
            s(:regopt)),
          s(:str, "_"))))),
  s(:def, :constantize_blockname,
    s(:args,
      s(:arg, :name)),
    s(:dstr,
      s(:str, "In_"),
      s(:begin,
        s(:send,
          s(:lvar, :name), :gsub,
          s(:regexp,
            s(:str, "\\W"),
            s(:regopt)),
          s(:str, "_"))))),
  s(:def, :get_file,
    s(:args,
      s(:arg, :name)),
    s(:send,
      s(:const, nil, :File), :join,
      s(:send,
        s(:const, nil, :ARGV), :[],
        s(:int, 0)),
      s(:lvar, :name))),
  s(:class,
    s(:const, nil, :Unifdef), nil,
    s(:begin,
      s(:send, nil, :attr_accessor,
        s(:sym, :output),
        s(:sym, :top),
        s(:sym, :stack),
        s(:sym, :stdout),
        s(:sym, :kwdonly)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :out)),
        s(:begin,
          s(:ivasgn, :@top,
            s(:ivasgn, :@output,
              s(:array))),
          s(:ivasgn, :@stack,
            s(:array)),
          s(:masgn,
            s(:mlhs,
              s(:gvasgn, :$stdout),
              s(:ivasgn, :@stdout)),
            s(:array,
              s(:self),
              s(:lvar, :out))))),
      s(:def, :restore,
        s(:args),
        s(:gvasgn, :$stdout,
          s(:ivar, :@stdout))),
      s(:def, :ifdef,
        s(:args,
          s(:arg, :sym)),
        s(:begin,
          s(:if,
            s(:ivar, :@kwdonly),
            s(:begin,
              s(:send,
                s(:ivar, :@stdout), :puts,
                s(:dstr,
                  s(:str, "#ifdef "),
                  s(:begin,
                    s(:lvar, :sym)))),
              s(:return)), nil),
          s(:send,
            s(:ivar, :@stack), :<<,
            s(:ivar, :@top)),
          s(:send,
            s(:ivar, :@top), :<<,
            s(:lvasgn, :tmp,
              s(:array,
                s(:lvar, :sym)))),
          s(:ivasgn, :@top,
            s(:lvar, :tmp)))),
      s(:def, :endif,
        s(:args,
          s(:arg, :sym)),
        s(:begin,
          s(:if,
            s(:ivar, :@kwdonly),
            s(:begin,
              s(:send,
                s(:ivar, :@stdout), :puts,
                s(:dstr,
                  s(:str, "#endif /* "),
                  s(:begin,
                    s(:lvar, :sym)),
                  s(:str, " */"))),
              s(:return)), nil),
          s(:if,
            s(:send,
              s(:lvar, :sym), :==,
              s(:send,
                s(:ivar, :@top), :[],
                s(:int, 0))), nil,
            s(:begin,
              s(:send, nil, :restore),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :sym)),
                  s(:str, " unmatch to "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@top), :[],
                      s(:int, 0))))))),
          s(:ivasgn, :@top,
            s(:send,
              s(:ivar, :@stack), :pop)))),
      s(:def, :show,
        s(:args,
          s(:arg, :dest),
          s(:restarg, :syms)),
        s(:send, nil, :_show,
          s(:lvar, :dest),
          s(:ivar, :@output),
          s(:lvar, :syms))),
      s(:def, :_show,
        s(:args,
          s(:arg, :dest),
          s(:arg, :ary),
          s(:arg, :syms)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Symbol), :===,
              s(:begin,
                s(:lvasgn, :sym,
                  s(:send,
                    s(:lvar, :ary), :[],
                    s(:int, 0))))),
            s(:if,
              s(:send,
                s(:lvar, :syms), :include?,
                s(:lvar, :sym)), nil,
              s(:return)), nil),
          s(:block,
            s(:send,
              s(:lvar, :ary), :each),
            s(:args,
              s(:arg, :e)),
            s(:case,
              s(:lvar, :e),
              s(:when,
                s(:const, nil, :Array),
                s(:send, nil, :_show,
                  s(:lvar, :dest),
                  s(:lvar, :e),
                  s(:lvar, :syms))),
              s(:when,
                s(:const, nil, :String),
                s(:send,
                  s(:lvar, :dest), :print,
                  s(:lvar, :e))), nil)))),
      s(:def, :write,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:if,
            s(:ivar, :@kwdonly),
            s(:send,
              s(:ivar, :@stdout), :write,
              s(:lvar, :str)),
            s(:send,
              s(:ivar, :@top), :<<,
              s(:lvar, :str))),
          s(:self))),
      s(:alias,
        s(:sym, :<<),
        s(:sym, :write)))),
  s(:lvasgn, :output,
    s(:send,
      s(:const, nil, :Unifdef), :new,
      s(:gvar, :$stdout))),
  s(:send,
    s(:lvar, :output), :kwdonly=,
    s(:send,
      s(:lvar, :header), :!)),
  s(:send, nil, :puts,
    s(:str, "%{")),
  s(:send, nil, :puts,
    s(:str, "#define long size_t")),
  s(:masgn,
    s(:mlhs,
      s(:lvasgn, :props),
      s(:lvasgn, :data)),
    s(:send, nil, :parse_unicode_data,
      s(:send, nil, :get_file,
        s(:str, "UnicodeData.txt")))),
  s(:lvasgn, :categories,
    s(:hash)),
  s(:send,
    s(:lvar, :props), :concat,
    s(:send, nil, :parse_scripts,
      s(:lvar, :data),
      s(:lvar, :categories))),
  s(:lvasgn, :aliases,
    s(:send, nil, :parse_aliases,
      s(:lvar, :data))),
  s(:send, nil, :define_posix_props,
    s(:lvar, :data)),
  s(:block,
    s(:send,
      s(:const, nil, :POSIX_NAMES), :each),
    s(:args,
      s(:arg, :name)),
    s(:send, nil, :make_const,
      s(:lvar, :name),
      s(:send,
        s(:lvar, :data), :[],
        s(:lvar, :name)),
      s(:dstr,
        s(:str, "[[:"),
        s(:begin,
          s(:lvar, :name)),
        s(:str, ":]]")))),
  s(:send,
    s(:lvar, :output), :ifdef,
    s(:sym, :USE_UNICODE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :props), :each),
    s(:args,
      s(:arg, :name)),
    s(:begin,
      s(:lvasgn, :category,
        s(:or,
          s(:send,
            s(:lvar, :categories), :[],
            s(:lvar, :name)),
          s(:case,
            s(:send,
              s(:lvar, :name), :size),
            s(:when,
              s(:int, 1),
              s(:str, "Major Category")),
            s(:when,
              s(:int, 2),
              s(:str, "General Category")),
            s(:str, "-")))),
      s(:send, nil, :make_const,
        s(:lvar, :name),
        s(:send,
          s(:lvar, :data), :[],
          s(:lvar, :name)),
        s(:lvar, :category)))),
  s(:send,
    s(:lvar, :output), :ifdef,
    s(:sym, :USE_UNICODE_AGE_PROPERTIES)),
  s(:lvasgn, :ages,
    s(:send, nil, :parse_age,
      s(:lvar, :data))),
  s(:send,
    s(:lvar, :output), :endif,
    s(:sym, :USE_UNICODE_AGE_PROPERTIES)),
  s(:lvasgn, :blocks,
    s(:send, nil, :parse_block,
      s(:lvar, :data))),
  s(:send,
    s(:lvar, :output), :endif,
    s(:sym, :USE_UNICODE_PROPERTIES)),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "\n"),
      s(:str, "static const OnigCodePoint* const CodeRanges[] = {\n"))),
  s(:block,
    s(:send,
      s(:const, nil, :POSIX_NAMES), :each),
    s(:args,
      s(:arg, :name)),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "  CR_"),
        s(:begin,
          s(:lvar, :name)),
        s(:str, ",")))),
  s(:send,
    s(:lvar, :output), :ifdef,
    s(:sym, :USE_UNICODE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :props), :each),
    s(:args,
      s(:arg, :name)),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "  CR_"),
        s(:begin,
          s(:lvar, :name)),
        s(:str, ",")))),
  s(:send,
    s(:lvar, :output), :ifdef,
    s(:sym, :USE_UNICODE_AGE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :ages), :each),
    s(:args,
      s(:arg, :name)),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "  CR_"),
        s(:begin,
          s(:send, nil, :constantize_agename,
            s(:lvar, :name))),
        s(:str, ",")))),
  s(:send,
    s(:lvar, :output), :endif,
    s(:sym, :USE_UNICODE_AGE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :blocks), :each),
    s(:args,
      s(:arg, :name)),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "  CR_"),
        s(:begin,
          s(:lvar, :name)),
        s(:str, ",")))),
  s(:send,
    s(:lvar, :output), :endif,
    s(:sym, :USE_UNICODE_PROPERTIES)),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "};\n"),
      s(:str, "struct uniname2ctype_struct {\n"),
      s(:str, "  int name, ctype;\n"),
      s(:str, "};\n"),
      s(:str, "\n"),
      s(:str, "static const struct uniname2ctype_struct *uniname2ctype_p(const char *, unsigned int);\n"),
      s(:str, "%}\n"),
      s(:str, "struct uniname2ctype_struct;\n"),
      s(:str, "%%\n"))),
  s(:lvasgn, :i,
    s(:int, -1)),
  s(:lvasgn, :name_to_index,
    s(:hash)),
  s(:block,
    s(:send,
      s(:const, nil, :POSIX_NAMES), :each),
    s(:args,
      s(:arg, :name)),
    s(:begin,
      s(:op_asgn,
        s(:lvasgn, :i), :+,
        s(:int, 1)),
      s(:if,
        s(:send,
          s(:lvar, :name), :==,
          s(:str, "NEWLINE")),
        s(:next), nil),
      s(:lvasgn, :name,
        s(:send, nil, :normalize_propname,
          s(:lvar, :name))),
      s(:send,
        s(:lvar, :name_to_index), :[]=,
        s(:lvar, :name),
        s(:lvar, :i)),
      s(:send, nil, :puts,
        s(:send,
          s(:str, "%-40s %3d"), :%,
          s(:array,
            s(:send,
              s(:lvar, :name), :+,
              s(:str, ",")),
            s(:lvar, :i)))))),
  s(:send,
    s(:lvar, :output), :ifdef,
    s(:sym, :USE_UNICODE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :props), :each),
    s(:args,
      s(:arg, :name)),
    s(:begin,
      s(:op_asgn,
        s(:lvasgn, :i), :+,
        s(:int, 1)),
      s(:lvasgn, :name,
        s(:send, nil, :normalize_propname,
          s(:lvar, :name))),
      s(:send,
        s(:lvar, :name_to_index), :[]=,
        s(:lvar, :name),
        s(:lvar, :i)),
      s(:send, nil, :puts,
        s(:send,
          s(:str, "%-40s %3d"), :%,
          s(:array,
            s(:send,
              s(:lvar, :name), :+,
              s(:str, ",")),
            s(:lvar, :i)))))),
  s(:block,
    s(:send,
      s(:lvar, :aliases), :each_pair),
    s(:args,
      s(:arg, :k),
      s(:arg, :v)),
    s(:begin,
      s(:if,
        s(:send,
          s(:lvar, :name_to_index), :[],
          s(:lvar, :k)),
        s(:next), nil),
      s(:if,
        s(:lvasgn, :v,
          s(:send,
            s(:lvar, :name_to_index), :[],
            s(:lvar, :v))), nil,
        s(:next)),
      s(:send, nil, :puts,
        s(:send,
          s(:str, "%-40s %3d"), :%,
          s(:array,
            s(:send,
              s(:lvar, :k), :+,
              s(:str, ",")),
            s(:lvar, :v)))))),
  s(:send,
    s(:lvar, :output), :ifdef,
    s(:sym, :USE_UNICODE_AGE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :ages), :each),
    s(:args,
      s(:arg, :name)),
    s(:begin,
      s(:op_asgn,
        s(:lvasgn, :i), :+,
        s(:int, 1)),
      s(:lvasgn, :name,
        s(:dstr,
          s(:str, "age="),
          s(:begin,
            s(:lvar, :name)))),
      s(:send,
        s(:lvar, :name_to_index), :[]=,
        s(:lvar, :name),
        s(:lvar, :i)),
      s(:send, nil, :puts,
        s(:send,
          s(:str, "%-40s %3d"), :%,
          s(:array,
            s(:send,
              s(:lvar, :name), :+,
              s(:str, ",")),
            s(:lvar, :i)))))),
  s(:send,
    s(:lvar, :output), :endif,
    s(:sym, :USE_UNICODE_AGE_PROPERTIES)),
  s(:block,
    s(:send,
      s(:lvar, :blocks), :each),
    s(:args,
      s(:arg, :name)),
    s(:begin,
      s(:op_asgn,
        s(:lvasgn, :i), :+,
        s(:int, 1)),
      s(:lvasgn, :name,
        s(:send, nil, :normalize_propname,
          s(:lvar, :name))),
      s(:send,
        s(:lvar, :name_to_index), :[]=,
        s(:lvar, :name),
        s(:lvar, :i)),
      s(:send, nil, :puts,
        s(:send,
          s(:str, "%-40s %3d"), :%,
          s(:array,
            s(:send,
              s(:lvar, :name), :+,
              s(:str, ",")),
            s(:lvar, :i)))))),
  s(:send,
    s(:lvar, :output), :endif,
    s(:sym, :USE_UNICODE_PROPERTIES)),
  s(:send, nil, :puts,
    s(:dstr,
      s(:str, "%%\n"),
      s(:str, "static int\n"),
      s(:str, "uniname2ctype(const UChar *name, unsigned int len)\n"),
      s(:str, "{\n"),
      s(:str, "  const struct uniname2ctype_struct *p = uniname2ctype_p((const char *)name, len);\n"),
      s(:str, "  if (p) return p->ctype;\n"),
      s(:str, "  return -1;\n"),
      s(:str, "}\n"))),
  s(:send,
    s(:lvar, :output), :restore),
  s(:if,
    s(:lvar, :header),
    s(:begin,
      s(:send, nil, :require,
        s(:str, "tempfile")),
      s(:casgn, nil, :NAME2CTYPE,
        s(:array,
          s(:str, "gperf"),
          s(:str, "-7"),
          s(:str, "-c"),
          s(:str, "-j1"),
          s(:str, "-i1"),
          s(:str, "-t"),
          s(:str, "-C"),
          s(:str, "-P"),
          s(:str, "-T"),
          s(:str, "-H"),
          s(:str, "uniname2ctype_hash"),
          s(:str, "-Q"),
          s(:str, "uniname2ctype_pool"),
          s(:str, "-N"),
          s(:str, "uniname2ctype_p"))),
      s(:lvasgn, :fds,
        s(:array)),
      s(:lvasgn, :syms,
        s(:array,
          s(:sym, :USE_UNICODE_PROPERTIES),
          s(:sym, :USE_UNICODE_AGE_PROPERTIES))),
      s(:while_post,
        s(:send,
          s(:lvar, :syms), :pop),
        s(:kwbegin,
          s(:send,
            s(:lvar, :fds), :<<,
            s(:begin,
              s(:lvasgn, :tmp,
                s(:send,
                  s(:const, nil, :Tempfile), :new,
                  s(:array,
                    s(:str, "name2ctype"),
                    s(:str, ".h")))))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:splat,
                  s(:const, nil, :NAME2CTYPE)),
                s(:hash,
                  s(:pair,
                    s(:sym, :out),
                    s(:lvar, :tmp)))),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :output), :show,
              s(:lvar, :f),
              s(:splat,
                s(:lvar, :syms)))))),
      s(:send,
        s(:lvar, :fds), :each,
        s(:block_pass,
          s(:sym, :close))),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :popen,
          s(:array,
            s(:str, "diff"),
            s(:str, "-DUSE_UNICODE_AGE_PROPERTIES"),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :fds), :[],
                    s(:int, 1)), :path))),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :fds), :[],
                    s(:int, 0)), :path)))),
          s(:str, "r")),
        s(:args,
          s(:arg, :age)),
        s(:send, nil, :system,
          s(:splat,
            s(:array,
              s(:str, "diff"),
              s(:str, "-DUSE_UNICODE_PROPERTIES"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :fds), :[],
                      s(:int, 2)), :path))),
              s(:str, "-"))),
          s(:hash,
            s(:pair,
              s(:sym, :in),
              s(:lvar, :age)))))), nil))
