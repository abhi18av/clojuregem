s(:begin,
  s(:if,
    s(:false),
    s(:send, nil, :exec,
      s(:and,
        s(:dstr,
          s(:str, "${RUBY-ruby}"),
          s(:str, "-x"),
          s(:str, "$0"),
          s(:str, "$@")),
        s(:array))), nil),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:gvasgn, :$repos,
    s(:str, "svn+ssh://svn@ci.ruby-lang.org/ruby/")),
  s(:send,
    s(:const, nil, :ENV), :[]=,
    s(:str, "LC_ALL"),
    s(:str, "C")),
  s(:def, :help,
    s(:args),
    s(:send, nil, :puts,
      s(:dstr,
        s(:str, "\e[1msimple backport\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " 1234\n"),
        s(:str, "\n"),
        s(:str, "\e[1mrange backport\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " 1234:5678\n"),
        s(:str, "\n"),
        s(:str, "\e[1mbackport from other branch\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " 17502 mvm\n"),
        s(:str, "\n"),
        s(:str, "\e[1mrevision increment\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " revisionup\n"),
        s(:str, "\n"),
        s(:str, "\e[1mteeny increment\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " teenyup\n"),
        s(:str, "\n"),
        s(:str, "\e[1mtagging major release\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " tag 2.2.0\n"),
        s(:str, "\n"),
        s(:str, "\e[1mtagging patch release\e[0m (about 2.1.0 or later, it means X.Y.Z (Z > 0) release)\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " tag\n"),
        s(:str, "\n"),
        s(:str, "\e[1mtagging preview/RC\e[0m\n"),
        s(:str, "  ruby "),
        s(:gvar, :$0),
        s(:str, " tag 2.2.0-preview1\n"),
        s(:str, "\n"),
        s(:str, "\e[33;1m* all operations shall be applied to the working directory.\e[0m\n")))),
  s(:def, :version,
    s(:args),
    s(:begin,
      s(:lvasgn, :v,
        s(:lvasgn, :p,
          s(:nil))),
      s(:block,
        s(:send, nil, :open,
          s(:str, "version.h"),
          s(:str, "rb")),
        s(:args,
          s(:arg, :f)),
        s(:block,
          s(:send,
            s(:lvar, :f), :each_line),
          s(:args,
            s(:arg, :l)),
          s(:case,
            s(:lvar, :l),
            s(:when,
              s(:regexp,
                s(:str, "^#define RUBY_VERSION \"(\\d)\\.(\\d)\\.(\\d)\"$"),
                s(:regopt)),
              s(:lvasgn, :v,
                s(:send,
                  s(:gvar, :$~), :captures))),
            s(:when,
              s(:regexp,
                s(:str, "^#define RUBY_PATCHLEVEL (-?\\d+)$"),
                s(:regopt)),
              s(:lvasgn, :p,
                s(:nth_ref, 1))), nil))),
      s(:return,
        s(:lvar, :v),
        s(:lvar, :p)))),
  s(:def, :interactive,
    s(:args,
      s(:arg, :str),
      s(:optarg, :editfile,
        s(:nil))),
    s(:block,
      s(:send, nil, :loop),
      s(:args),
      s(:begin,
        s(:yield),
        s(:send,
          s(:const, nil, :STDERR), :puts,
          s(:dstr,
            s(:str, "\e[1;33m"),
            s(:begin,
              s(:lvar, :str)),
            s(:str, " ([y]es|[a]bort|[r]etry"),
            s(:begin,
              s(:if,
                s(:lvar, :editfile),
                s(:str, "|[e]dit"), nil)),
            s(:str, ")\e[0m"))),
        s(:case,
          s(:send,
            s(:const, nil, :STDIN), :gets),
          s(:when,
            s(:regexp,
              s(:str, "\\Aa"),
              s(:regopt, :i)),
            s(:send, nil, :exit)),
          s(:when,
            s(:regexp,
              s(:str, "\\Ar"),
              s(:regopt, :i)),
            s(:redo)),
          s(:when,
            s(:regexp,
              s(:str, "\\Ay"),
              s(:regopt, :i)),
            s(:break)),
          s(:when,
            s(:regexp,
              s(:str, "\\Ae"),
              s(:regopt, :i)),
            s(:send, nil, :system,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "EDITOR")),
              s(:lvar, :editfile))),
          s(:send, nil, :exit))))),
  s(:def, :version_up,
    s(:args,
      s(:optarg, :inc,
        s(:nil))),
    s(:begin,
      s(:lvasgn, :d,
        s(:send,
          s(:const, nil, :Time), :now)),
      s(:lvasgn, :d,
        s(:send,
          s(:lvar, :d), :localtime,
          s(:send,
            s(:send,
              s(:int, 9), :*,
              s(:int, 60)), :*,
            s(:int, 60)))),
      s(:send, nil, :system,
        s(:splat,
          s(:array,
            s(:str, "svn"),
            s(:str, "revert"),
            s(:str, "version.h")))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :v),
          s(:lvasgn, :pl)),
        s(:send, nil, :version)),
      s(:if,
        s(:send,
          s(:lvar, :inc), :==,
          s(:sym, :teeny)),
        s(:send,
          s(:send,
            s(:lvar, :v), :[],
            s(:int, 2)), :succ!), nil),
      s(:if,
        s(:send,
          s(:lvar, :pl), :!=,
          s(:str, "-1")),
        s(:send,
          s(:lvar, :pl), :succ!), nil),
      s(:lvasgn, :str,
        s(:block,
          s(:send, nil, :open,
            s(:str, "version.h"),
            s(:str, "rb")),
          s(:args,
            s(:arg, :f)),
          s(:send,
            s(:lvar, :f), :read))),
      s(:block,
        s(:send,
          s(:array,
            s(:array,
              s(:str, "RUBY_VERSION"),
              s(:dstr,
                s(:str, "\""),
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :join,
                    s(:str, "."))),
                s(:str, "\""))),
            s(:array,
              s(:str, "RUBY_VERSION_CODE"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :join,
                    s(:str, ""))))),
            s(:array,
              s(:str, "RUBY_VERSION_MAJOR"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :[],
                    s(:int, 0))))),
            s(:array,
              s(:str, "RUBY_VERSION_MINOR"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :[],
                    s(:int, 1))))),
            s(:array,
              s(:str, "RUBY_VERSION_TEENY"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :[],
                    s(:int, 2))))),
            s(:array,
              s(:str, "RUBY_RELEASE_DATE"),
              s(:dstr,
                s(:str, "\""),
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :strftime,
                    s(:str, "%Y-%m-%d"))),
                s(:str, "\""))),
            s(:array,
              s(:str, "RUBY_RELEASE_CODE"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :strftime,
                    s(:str, "%Y%m%d"))))),
            s(:array,
              s(:str, "RUBY_PATCHLEVEL"),
              s(:dstr,
                s(:begin,
                  s(:lvar, :pl)))),
            s(:array,
              s(:str, "RUBY_RELEASE_YEAR"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :year)))),
            s(:array,
              s(:str, "RUBY_RELEASE_MONTH"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :month)))),
            s(:array,
              s(:str, "RUBY_RELEASE_DAY"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :day))))), :each),
        s(:args,
          s(:mlhs,
            s(:arg, :k),
            s(:arg, :i))),
        s(:send,
          s(:lvar, :str), :sub!,
          s(:regexp,
            s(:str, "^(#define\\s+"),
            s(:begin,
              s(:lvar, :k)),
            s(:str, "\\s+).*$"),
            s(:regopt)),
          s(:dstr,
            s(:str, "\\1"),
            s(:begin,
              s(:lvar, :i))))),
      s(:send,
        s(:lvar, :str), :sub!,
        s(:regexp,
          s(:str, "\\s+\\z"),
          s(:regopt, :m)),
        s(:str, "")),
      s(:lvasgn, :fn,
        s(:send, nil, :sprintf,
          s(:str, "version.h.tmp.%032b"),
          s(:send, nil, :rand,
            s(:send,
              s(:int, 1), :<<,
              s(:int, 31))))),
      s(:send,
        s(:const, nil, :File), :rename,
        s(:str, "version.h"),
        s(:lvar, :fn)),
      s(:block,
        s(:send, nil, :open,
          s(:str, "version.h"),
          s(:str, "wb")),
        s(:args,
          s(:arg, :f)),
        s(:send,
          s(:lvar, :f), :puts,
          s(:lvar, :str))),
      s(:send,
        s(:const, nil, :File), :unlink,
        s(:lvar, :fn)))),
  s(:def, :tag,
    s(:args,
      s(:optarg, :intv_p,
        s(:false)),
      s(:optarg, :relname,
        s(:nil))),
    s(:begin,
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :v),
          s(:lvasgn, :pl)),
        s(:send, nil, :version)),
      s(:lvasgn, :x,
        s(:send,
          s(:lvar, :v), :join,
          s(:str, "_"))),
      s(:if,
        s(:lvar, :relname),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :pl), :!=,
                s(:str, "-1")),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "-(?:preview|rc)"),
                  s(:regopt)),
                s(:lvar, :relname))),
            s(:send, nil, :abort,
              s(:dstr,
                s(:str, "patchlevel is not -1 but '"),
                s(:begin,
                  s(:lvar, :pl)),
                s(:str, "' for preview or rc"))), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :pl), :!=,
                s(:str, "0")),
              s(:send,
                s(:regexp,
                  s(:str, "-(?:preview|rc)"),
                  s(:regopt)), :!~,
                s(:lvar, :relname))),
            s(:send, nil, :abort,
              s(:dstr,
                s(:str, "patchlevel is not 0 but '"),
                s(:begin,
                  s(:lvar, :pl)),
                s(:str, "' for the first release"))), nil),
          s(:lvasgn, :pl,
            s(:send,
              s(:lvar, :relname), :[],
              s(:regexp,
                s(:str, "-(.*)\\z"),
                s(:regopt)),
              s(:int, 1))),
          s(:lvasgn, :curver,
            s(:send,
              s(:send,
                s(:lvar, :v), :join,
                s(:str, ".")), :+,
              s(:begin,
                s(:if,
                  s(:lvar, :pl),
                  s(:send,
                    s(:str, "-"), :+,
                    s(:lvar, :pl)),
                  s(:str, ""))))),
          s(:if,
            s(:send,
              s(:lvar, :relname), :!=,
              s(:lvar, :curver)),
            s(:send, nil, :abort,
              s(:dstr,
                s(:str, "given relname '"),
                s(:begin,
                  s(:lvar, :relname)),
                s(:str, "' conflicts current version '"),
                s(:begin,
                  s(:lvar, :curver)),
                s(:str, "'"))), nil),
          s(:lvasgn, :branch_url,
            s(:send,
              s(:xstr,
                s(:str, "svn info")), :[],
              s(:regexp,
                s(:str, "URL: (.*)"),
                s(:regopt)),
              s(:int, 1)))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :pl), :==,
              s(:str, "-1")),
            s(:send, nil, :abort,
              s(:str, "no relname is given and not in a release branch even if this is patch release")), nil),
          s(:lvasgn, :branch_url,
            s(:send,
              s(:gvar, :$repos), :+,
              s(:str, "branches/ruby_"))),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :v), :[],
                  s(:int, 0)), :<,
                s(:str, "2")),
              s(:begin,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :[],
                      s(:int, 0)), :==,
                    s(:str, "2")),
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :[],
                      s(:int, 1)), :<,
                    s(:str, "1"))))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :pl), :==,
                  s(:str, "0")),
                s(:send, nil, :abort,
                  s(:str, "patchlevel must be greater than 0 for patch release")), nil),
              s(:send,
                s(:lvar, :branch_url), :<<,
                s(:lvar, :x))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :[],
                    s(:int, 2)), :==,
                  s(:str, "0")),
                s(:send, nil, :abort,
                  s(:str, "teeny must be greater than 0 for patch release")), nil),
              s(:send,
                s(:lvar, :branch_url), :<<,
                s(:send,
                  s(:lvar, :x), :sub,
                  s(:regexp,
                    s(:str, "_\\d+$"),
                    s(:regopt)),
                  s(:str, ""))))))),
      s(:lvasgn, :tagname,
        s(:send,
          s(:send,
            s(:str, "v"), :+,
            s(:lvar, :x)), :+,
          s(:begin,
            s(:if,
              s(:or,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :[],
                      s(:int, 0)), :<,
                    s(:str, "2")),
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :v), :[],
                          s(:int, 0)), :==,
                        s(:str, "2")),
                      s(:send,
                        s(:send,
                          s(:lvar, :v), :[],
                          s(:int, 1)), :<,
                        s(:str, "1"))))),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^(?:preview|rc)"),
                    s(:regopt)),
                  s(:lvar, :pl))),
              s(:send,
                s(:str, "_"), :+,
                s(:lvar, :pl)),
              s(:str, ""))))),
      s(:lvasgn, :tag_url,
        s(:send,
          s(:send,
            s(:gvar, :$repos), :+,
            s(:str, "tags/")), :+,
          s(:lvar, :tagname))),
      s(:if,
        s(:lvar, :intv_p),
        s(:block,
          s(:send, nil, :interactive,
            s(:dstr,
              s(:str, "OK? svn cp -m \"add tag "),
              s(:begin,
                s(:lvar, :tagname)),
              s(:str, "\" "),
              s(:begin,
                s(:lvar, :branch_url)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :tag_url)))),
          s(:args), nil), nil),
      s(:send, nil, :system,
        s(:splat,
          s(:array,
            s(:str, "svn"),
            s(:str, "cp"),
            s(:str, "-m"))),
        s(:dstr,
          s(:str, "add tag "),
          s(:begin,
            s(:lvar, :tagname))),
        s(:lvar, :branch_url),
        s(:lvar, :tag_url)),
      s(:send, nil, :puts,
        s(:str, "run following command in git-svn working directory to push the tag into GitHub:")),
      s(:send, nil, :puts,
        s(:dstr,
          s(:str, "git tag "),
          s(:begin,
            s(:lvar, :tagname)),
          s(:str, "  origin/tags/"),
          s(:begin,
            s(:lvar, :tagname)),
          s(:str, " && git push ruby "),
          s(:begin,
            s(:lvar, :tagname)))))),
  s(:def, :default_merge_branch,
    s(:args),
    s(:if,
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "^URL: .*/branches/ruby_1_8_"),
          s(:regopt)),
        s(:xstr,
          s(:str, "svn info"))),
      s(:str, "branches/ruby_1_8"),
      s(:str, "trunk"))),
  s(:case,
    s(:send,
      s(:const, nil, :ARGV), :[],
      s(:int, 0)),
    s(:when,
      s(:str, "teenyup"),
      s(:begin,
        s(:send, nil, :version_up,
          s(:sym, :teeny)),
        s(:send, nil, :system,
          s(:str, "svn diff version.h")))),
    s(:when,
      s(:str, "up"),
      s(:regexp,
        s(:str, "\\A(ver|version|rev|revision|lv|level|patch\\s*level)\\s*up"),
        s(:regopt)),
      s(:begin,
        s(:send, nil, :version_up),
        s(:send, nil, :system,
          s(:str, "svn diff version.h")))),
    s(:when,
      s(:str, "tag"),
      s(:send, nil, :tag,
        s(:sym, :interactive),
        s(:send,
          s(:const, nil, :ARGV), :[],
          s(:int, 1)))),
    s(:when,
      s(:nil),
      s(:str, "-h"),
      s(:str, "--help"),
      s(:begin,
        s(:send, nil, :help),
        s(:send, nil, :exit))),
    s(:begin,
      s(:send, nil, :system,
        s(:str, "svn up")),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "--ticket=(.*)"),
            s(:regopt)),
          s(:send,
            s(:const, nil, :ARGV), :[],
            s(:int, 0))),
        s(:begin,
          s(:lvasgn, :tickets,
            s(:block,
              s(:send,
                s(:send,
                  s(:nth_ref, 1), :split,
                  s(:regexp,
                    s(:str, ","),
                    s(:regopt))), :map),
              s(:args,
                s(:arg, :num)),
              s(:dstr,
                s(:str, " [Backport #"),
                s(:begin,
                  s(:lvar, :num)),
                s(:str, "]")))),
          s(:send,
            s(:const, nil, :ARGV), :shift)),
        s(:lvasgn, :tickets,
          s(:array))),
      s(:lvasgn, :q,
        s(:send,
          s(:gvar, :$repos), :+,
          s(:begin,
            s(:or,
              s(:send,
                s(:const, nil, :ARGV), :[],
                s(:int, 1)),
              s(:send, nil, :default_merge_branch))))),
      s(:lvasgn, :revstr,
        s(:send,
          s(:send,
            s(:const, nil, :ARGV), :[],
            s(:int, 0)), :delete,
          s(:str, "^, :\\-0-9"))),
      s(:lvasgn, :revs,
        s(:send,
          s(:lvar, :revstr), :split,
          s(:regexp,
            s(:str, "[,\\s]+"),
            s(:regopt)))),
      s(:lvasgn, :log,
        s(:str, "")),
      s(:lvasgn, :log_svn,
        s(:str, "")),
      s(:block,
        s(:send,
          s(:lvar, :revs), :each),
        s(:args,
          s(:arg, :rev)),
        s(:begin,
          s(:case,
            s(:lvar, :rev),
            s(:when,
              s(:regexp,
                s(:str, "\\A\\d+:\\d+\\z"),
                s(:regopt)),
              s(:lvasgn, :r,
                s(:array,
                  s(:str, "-r"),
                  s(:lvar, :rev)))),
            s(:when,
              s(:regexp,
                s(:str, "\\A(\\d+)-(\\d+)\\z"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :rev,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :to_i), :-,
                        s(:int, 1))),
                    s(:str, ":"),
                    s(:nth_ref, 2))),
                s(:lvasgn, :r,
                  s(:array,
                    s(:str, "-r"),
                    s(:lvar, :rev))))),
            s(:when,
              s(:regexp,
                s(:str, "\\A\\d+\\z"),
                s(:regopt)),
              s(:lvasgn, :r,
                s(:array,
                  s(:str, "-c"),
                  s(:lvar, :rev)))),
            s(:when,
              s(:nil),
              s(:begin,
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:gvar, :$0),
                    s(:str, " revision"))),
                s(:send, nil, :exit))),
            s(:begin,
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "invalid revision part '"),
                  s(:begin,
                    s(:lvar, :rev)),
                  s(:str, "' in '"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :ARGV), :[],
                      s(:int, 0))),
                  s(:str, "'"))),
              s(:send, nil, :exit))),
          s(:lvasgn, :l,
            s(:block,
              s(:send,
                s(:const, nil, :IO), :popen,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:array,
                        s(:str, "svn"),
                        s(:str, "diff")), :+,
                      s(:lvar, :r)), :+,
                    s(:array,
                      s(:str, "--diff-cmd=diff"),
                      s(:str, "-x"),
                      s(:str, "-pU0"))), :+,
                  s(:array,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :q),
                      s(:str, "ChangeLog"))))),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :read))),
          s(:send,
            s(:lvar, :log), :<<,
            s(:lvar, :l)),
          s(:send,
            s(:lvar, :log_svn), :<<,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :l), :lines), :grep,
                    s(:regexp,
                      s(:str, "^\\+\\t"),
                      s(:regopt))), :join), :gsub,
                s(:regexp,
                  s(:str, "^\\+"),
                  s(:regopt)),
                s(:str, "")), :gsub,
              s(:regexp,
                s(:str, "^\\t\\*"),
                s(:regopt)),
              s(:str, "\n\t*"))),
          s(:if,
            s(:send,
              s(:lvar, :log_svn), :empty?),
            s(:lvasgn, :log_svn,
              s(:send,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :IO), :popen,
                        s(:send,
                          s(:send,
                            s(:array,
                              s(:str, "svn"),
                              s(:str, "log")), :+,
                            s(:lvar, :r)), :+,
                          s(:array,
                            s(:lvar, :q)))),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:lvar, :f), :read)), :sub,
                    s(:regexp,
                      s(:str, "\\A-+\\nr.*\\n"),
                      s(:regopt)),
                    s(:str, "")), :sub,
                  s(:regexp,
                    s(:str, "\\n-+\\n\\z"),
                    s(:regopt)),
                  s(:str, "")), :gsub,
                s(:regexp,
                  s(:str, "^(?=\\S)"),
                  s(:regopt)),
                s(:str, "\t"))), nil),
          s(:lvasgn, :a,
            s(:send,
              s(:send,
                s(:array,
                  s(:str, "svn"),
                  s(:str, "merge"),
                  s(:str, "--accept=postpone")), :+,
                s(:lvar, :r)), :+,
              s(:array,
                s(:lvar, :q)))),
          s(:send,
            s(:const, nil, :STDERR), :puts,
            s(:send,
              s(:lvar, :a), :join,
              s(:str, " "))),
          s(:send, nil, :system,
            s(:splat,
              s(:lvar, :a))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^\\+"),
                s(:regopt)),
              s(:lvar, :l)),
            s(:send, nil, :system,
              s(:splat,
                s(:array,
                  s(:str, "svn"),
                  s(:str, "revert"),
                  s(:str, "ChangeLog")))), nil))),
      s(:if,
        s(:send,
          s(:xstr,
            s(:str, "svn diff --diff-cmd=diff -x -upw")), :empty?),
        s(:block,
          s(:send, nil, :interactive,
            s(:str, "Only ChangeLog is modified, right?")),
          s(:args), nil), nil),
      s(:if,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "^\\+"),
            s(:regopt)),
          s(:lvar, :log)),
        s(:begin,
          s(:send, nil, :system,
            s(:splat,
              s(:array,
                s(:str, "svn"),
                s(:str, "revert"),
                s(:str, "ChangeLog")))),
          s(:block,
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:array,
                s(:str, "patch"),
                s(:str, "-p0")),
              s(:str, "wb")),
            s(:args,
              s(:arg, :f)),
            s(:send,
              s(:lvar, :f), :write,
              s(:send,
                s(:lvar, :log), :gsub,
                s(:regexp,
                  s(:str, "\\+(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) [ 123][0-9] [012][0-9]:[0-5][0-9]:[0-5][0-9] \\d\\d\\d\\d"),
                  s(:regopt)),
                s(:send,
                  s(:str, "+"), :+,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :now), :strftime,
                    s(:str, "%a %b %e %H:%M:%S %Y")))))),
          s(:send, nil, :system,
            s(:splat,
              s(:array,
                s(:str, "touch"),
                s(:str, "ChangeLog"))))),
        s(:send,
          s(:const, nil, :STDERR), :puts,
          s(:str, "*** You should write ChangeLog NOW!!! ***"))),
      s(:send, nil, :version_up),
      s(:lvasgn, :f,
        s(:send,
          s(:const, nil, :Tempfile), :new,
          s(:str, "merger.rb"))),
      s(:send,
        s(:lvar, :f), :printf,
        s(:str, "merge revision(s) %s:%s\n"),
        s(:lvar, :revstr),
        s(:send,
          s(:lvar, :tickets), :join)),
      s(:send,
        s(:lvar, :f), :write,
        s(:lvar, :log_svn)),
      s(:send,
        s(:lvar, :f), :flush),
      s(:send,
        s(:lvar, :f), :close),
      s(:block,
        s(:send, nil, :interactive,
          s(:str, "conflicts resolved?"),
          s(:send,
            s(:lvar, :f), :path)),
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :IO), :popen,
            s(:or,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PAGER")),
              s(:str, "less")),
            s(:str, "w")),
          s(:args,
            s(:arg, :g)),
          s(:begin,
            s(:send,
              s(:lvar, :g), :<<,
              s(:xstr,
                s(:str, "svn stat"))),
            s(:send,
              s(:lvar, :g), :<<,
              s(:str, "\n\n")),
            s(:send,
              s(:lvar, :f), :open),
            s(:send,
              s(:lvar, :g), :<<,
              s(:send,
                s(:lvar, :f), :read)),
            s(:send,
              s(:lvar, :f), :close),
            s(:send,
              s(:lvar, :g), :<<,
              s(:str, "\n\n")),
            s(:send,
              s(:lvar, :g), :<<,
              s(:xstr,
                s(:str, "svn diff --diff-cmd=diff -x -upw")))))),
      s(:if,
        s(:send, nil, :system,
          s(:splat,
            s(:array,
              s(:str, "svn"),
              s(:str, "ci"),
              s(:str, "-F"))),
          s(:send,
            s(:lvar, :f), :path)),
        s(:send, nil, :system,
          s(:str, "rm -f subversion.commitlog")),
        s(:send, nil, :puts,
          s(:str, "commit failed; try again."))),
      s(:send,
        s(:lvar, :f), :close,
        s(:true)))))
