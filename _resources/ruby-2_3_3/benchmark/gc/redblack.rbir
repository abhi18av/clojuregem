s(:begin,
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:class,
    s(:const, nil, :RedBlackTree), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Node), nil,
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :color)),
          s(:send, nil, :attr_accessor,
            s(:sym, :key)),
          s(:send, nil, :attr_accessor,
            s(:sym, :left)),
          s(:send, nil, :attr_accessor,
            s(:sym, :right)),
          s(:send, nil, :attr_accessor,
            s(:sym, :parent)),
          s(:casgn, nil, :RED,
            s(:sym, :red)),
          s(:casgn, nil, :BLACK,
            s(:sym, :black)),
          s(:casgn, nil, :COLORS,
            s(:send,
              s(:array,
                s(:const, nil, :RED),
                s(:const, nil, :BLACK)), :freeze)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :key),
              s(:optarg, :color,
                s(:const, nil, :RED))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :COLORS), :include?,
                  s(:lvar, :color)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "Bad value for color parameter"))),
              s(:ivasgn, :@color,
                s(:lvar, :color)),
              s(:ivasgn, :@key,
                s(:lvar, :key)),
              s(:ivasgn, :@left,
                s(:ivasgn, :@right,
                  s(:ivasgn, :@parent,
                    s(:send,
                      s(:const, nil, :NilNode), :instance)))))),
          s(:def, :black?,
            s(:args),
            s(:return,
              s(:send,
                s(:send, nil, :color), :==,
                s(:const, nil, :BLACK)))),
          s(:def, :red?,
            s(:args),
            s(:return,
              s(:send,
                s(:send, nil, :color), :==,
                s(:const, nil, :RED)))))),
      s(:class,
        s(:const, nil, :NilNode),
        s(:const, nil, :Node),
        s(:begin,
          s(:sclass,
            s(:self),
            s(:begin,
              s(:send, nil, :private,
                s(:sym, :new)),
              s(:def, :instance,
                s(:args),
                s(:or_asgn,
                  s(:ivasgn, :@instance),
                  s(:kwbegin,
                    s(:def, :instance,
                      s(:args),
                      s(:return,
                        s(:ivar, :@instance))),
                    s(:send, nil, :new)))))),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:send,
                s(:self), :color=,
                s(:const, nil, :BLACK)),
              s(:send,
                s(:self), :key=,
                s(:int, 0)),
              s(:send,
                s(:self), :left=,
                s(:nil)),
              s(:send,
                s(:self), :right=,
                s(:nil)),
              s(:send,
                s(:self), :parent=,
                s(:nil)))),
          s(:def, :nil?,
            s(:args),
            s(:return,
              s(:true))))),
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)),
      s(:send, nil, :attr_accessor,
        s(:sym, :root)),
      s(:send, nil, :attr_accessor,
        s(:sym, :size)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:send,
            s(:self), :root=,
            s(:send,
              s(:const, nil, :NilNode), :instance)),
          s(:send,
            s(:self), :size=,
            s(:int, 0)))),
      s(:def, :add,
        s(:args,
          s(:arg, :key)),
        s(:send, nil, :insert,
          s(:send,
            s(:const, nil, :Node), :new,
            s(:lvar, :key)))),
      s(:def, :insert,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:send, nil, :insert_helper,
            s(:lvar, :x)),
          s(:send,
            s(:lvar, :x), :color=,
            s(:const,
              s(:const, nil, :Node), :RED)),
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :x), :!=,
                s(:send, nil, :root)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :parent), :color), :==,
                s(:const,
                  s(:const, nil, :Node), :RED))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :x), :parent), :==,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :parent), :parent), :left)),
              s(:begin,
                s(:lvasgn, :y,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :parent), :right)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :y), :nil?), :!),
                    s(:send,
                      s(:send,
                        s(:lvar, :y), :color), :==,
                      s(:const,
                        s(:const, nil, :Node), :RED))),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:lvar, :y), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:lvasgn, :x,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :x), :==,
                        s(:send,
                          s(:send,
                            s(:lvar, :x), :parent), :right)),
                      s(:begin,
                        s(:lvasgn, :x,
                          s(:send,
                            s(:lvar, :x), :parent)),
                        s(:send, nil, :left_rotate,
                          s(:lvar, :x))), nil),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:send, nil, :right_rotate,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent))))),
              s(:begin,
                s(:lvasgn, :y,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :parent), :left)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :y), :nil?), :!),
                    s(:send,
                      s(:send,
                        s(:lvar, :y), :color), :==,
                      s(:const,
                        s(:const, nil, :Node), :RED))),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:lvar, :y), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:lvasgn, :x,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :x), :==,
                        s(:send,
                          s(:send,
                            s(:lvar, :x), :parent), :left)),
                      s(:begin,
                        s(:lvasgn, :x,
                          s(:send,
                            s(:lvar, :x), :parent)),
                        s(:send, nil, :right_rotate,
                          s(:lvar, :x))), nil),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:send, nil, :left_rotate,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :parent))))))),
          s(:send,
            s(:send, nil, :root), :color=,
            s(:const,
              s(:const, nil, :Node), :BLACK)))),
      s(:alias,
        s(:sym, :<<),
        s(:sym, :insert)),
      s(:def, :delete,
        s(:args,
          s(:arg, :z)),
        s(:begin,
          s(:lvasgn, :y,
            s(:if,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :z), :left), :nil?),
                  s(:send,
                    s(:send,
                      s(:lvar, :z), :right), :nil?))),
              s(:lvar, :z),
              s(:send, nil, :successor,
                s(:lvar, :z)))),
          s(:lvasgn, :x,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :y), :left), :nil?),
              s(:send,
                s(:lvar, :y), :right),
              s(:send,
                s(:lvar, :y), :left))),
          s(:send,
            s(:lvar, :x), :parent=,
            s(:send,
              s(:lvar, :y), :parent)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :y), :parent), :nil?),
            s(:send,
              s(:self), :root=,
              s(:lvar, :x)),
            s(:if,
              s(:send,
                s(:lvar, :y), :==,
                s(:send,
                  s(:send,
                    s(:lvar, :y), :parent), :left)),
              s(:send,
                s(:send,
                  s(:lvar, :y), :parent), :left=,
                s(:lvar, :x)),
              s(:send,
                s(:send,
                  s(:lvar, :y), :parent), :right=,
                s(:lvar, :x)))),
          s(:if,
            s(:send,
              s(:lvar, :y), :!=,
              s(:lvar, :z)),
            s(:send,
              s(:lvar, :z), :key=,
              s(:send,
                s(:lvar, :y), :key)), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :y), :color), :==,
              s(:const,
                s(:const, nil, :Node), :BLACK)),
            s(:send, nil, :delete_fixup,
              s(:lvar, :x)), nil),
          s(:op_asgn,
            s(:send,
              s(:self), :size), :-,
            s(:int, 1)),
          s(:return,
            s(:lvar, :y)))),
      s(:def, :minimum,
        s(:args,
          s(:optarg, :x,
            s(:send, nil, :root))),
        s(:begin,
          s(:while,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :x), :left), :nil?), :!),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :x), :left))),
          s(:return,
            s(:lvar, :x)))),
      s(:def, :maximum,
        s(:args,
          s(:optarg, :x,
            s(:send, nil, :root))),
        s(:begin,
          s(:while,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :x), :right), :nil?), :!),
            s(:lvasgn, :x,
              s(:send,
                s(:lvar, :x), :right))),
          s(:return,
            s(:lvar, :x)))),
      s(:def, :successor,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :x), :right), :nil?), :!),
            s(:return,
              s(:send, nil, :minimum,
                s(:send,
                  s(:lvar, :x), :right))), nil),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :x), :parent)),
          s(:while,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :y), :nil?), :!),
              s(:send,
                s(:lvar, :x), :==,
                s(:send,
                  s(:lvar, :y), :right))),
            s(:begin,
              s(:lvasgn, :x,
                s(:lvar, :y)),
              s(:lvasgn, :y,
                s(:send,
                  s(:lvar, :y), :parent)))),
          s(:return,
            s(:lvar, :y)))),
      s(:def, :predecessor,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :x), :left), :nil?), :!),
            s(:return,
              s(:send, nil, :maximum,
                s(:send,
                  s(:lvar, :x), :left))), nil),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :x), :parent)),
          s(:while,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :y), :nil?), :!),
              s(:send,
                s(:lvar, :x), :==,
                s(:send,
                  s(:lvar, :y), :left))),
            s(:begin,
              s(:lvasgn, :x,
                s(:lvar, :y)),
              s(:lvasgn, :y,
                s(:send,
                  s(:lvar, :y), :parent)))),
          s(:return,
            s(:lvar, :y)))),
      s(:def, :inorder_walk,
        s(:args,
          s(:optarg, :x,
            s(:send, nil, :root))),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:self), :minimum)),
          s(:while,
            s(:send,
              s(:send,
                s(:lvar, :x), :nil?), :!),
            s(:begin,
              s(:yield,
                s(:send,
                  s(:lvar, :x), :key)),
              s(:lvasgn, :x,
                s(:send, nil, :successor,
                  s(:lvar, :x))))))),
      s(:alias,
        s(:sym, :each),
        s(:sym, :inorder_walk)),
      s(:def, :reverse_inorder_walk,
        s(:args,
          s(:optarg, :x,
            s(:send, nil, :root))),
        s(:begin,
          s(:lvasgn, :x,
            s(:send,
              s(:self), :maximum)),
          s(:while,
            s(:send,
              s(:send,
                s(:lvar, :x), :nil?), :!),
            s(:begin,
              s(:yield,
                s(:send,
                  s(:lvar, :x), :key)),
              s(:lvasgn, :x,
                s(:send, nil, :predecessor,
                  s(:lvar, :x))))))),
      s(:alias,
        s(:sym, :reverse_each),
        s(:sym, :reverse_inorder_walk)),
      s(:def, :search,
        s(:args,
          s(:arg, :key),
          s(:optarg, :x,
            s(:send, nil, :root))),
        s(:begin,
          s(:while,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :x), :nil?), :!),
              s(:send,
                s(:send,
                  s(:lvar, :x), :key), :!=,
                s(:lvar, :key))),
            s(:if,
              s(:send,
                s(:lvar, :key), :<,
                s(:send,
                  s(:lvar, :x), :key)),
              s(:lvasgn, :x,
                s(:send,
                  s(:lvar, :x), :left)),
              s(:lvasgn, :x,
                s(:send,
                  s(:lvar, :x), :right)))),
          s(:return,
            s(:lvar, :x)))),
      s(:def, :empty?,
        s(:args),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :root), :nil?))),
      s(:def, :black_height,
        s(:args,
          s(:optarg, :x,
            s(:send, nil, :root))),
        s(:begin,
          s(:lvasgn, :height,
            s(:int, 0)),
          s(:while,
            s(:send,
              s(:send,
                s(:lvar, :x), :nil?), :!),
            s(:begin,
              s(:lvasgn, :x,
                s(:send,
                  s(:lvar, :x), :left)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :x), :nil?),
                  s(:send,
                    s(:lvar, :x), :black?)),
                s(:op_asgn,
                  s(:lvasgn, :height), :+,
                  s(:int, 1)), nil))),
          s(:return,
            s(:lvar, :height)))),
      s(:send, nil, :private),
      s(:def, :left_rotate,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :x), :right), :nil?),
            s(:send, nil, :raise,
              s(:str, "x.right is nil!")), nil),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :x), :right)),
          s(:send,
            s(:lvar, :x), :right=,
            s(:send,
              s(:lvar, :y), :left)),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :y), :left), :nil?), :!),
            s(:send,
              s(:send,
                s(:lvar, :y), :left), :parent=,
              s(:lvar, :x)), nil),
          s(:send,
            s(:lvar, :y), :parent=,
            s(:send,
              s(:lvar, :x), :parent)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :x), :parent), :nil?),
            s(:send,
              s(:self), :root=,
              s(:lvar, :y)),
            s(:if,
              s(:send,
                s(:lvar, :x), :==,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :parent), :left)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :parent), :left=,
                s(:lvar, :y)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :parent), :right=,
                s(:lvar, :y)))),
          s(:send,
            s(:lvar, :y), :left=,
            s(:lvar, :x)),
          s(:send,
            s(:lvar, :x), :parent=,
            s(:lvar, :y)))),
      s(:def, :right_rotate,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :x), :left), :nil?),
            s(:send, nil, :raise,
              s(:str, "x.left is nil!")), nil),
          s(:lvasgn, :y,
            s(:send,
              s(:lvar, :x), :left)),
          s(:send,
            s(:lvar, :x), :left=,
            s(:send,
              s(:lvar, :y), :right)),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :y), :right), :nil?), :!),
            s(:send,
              s(:send,
                s(:lvar, :y), :right), :parent=,
              s(:lvar, :x)), nil),
          s(:send,
            s(:lvar, :y), :parent=,
            s(:send,
              s(:lvar, :x), :parent)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :x), :parent), :nil?),
            s(:send,
              s(:self), :root=,
              s(:lvar, :y)),
            s(:if,
              s(:send,
                s(:lvar, :x), :==,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :parent), :left)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :parent), :left=,
                s(:lvar, :y)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :parent), :right=,
                s(:lvar, :y)))),
          s(:send,
            s(:lvar, :y), :right=,
            s(:lvar, :x)),
          s(:send,
            s(:lvar, :x), :parent=,
            s(:lvar, :y)))),
      s(:def, :insert_helper,
        s(:args,
          s(:arg, :z)),
        s(:begin,
          s(:lvasgn, :y,
            s(:send,
              s(:const, nil, :NilNode), :instance)),
          s(:lvasgn, :x,
            s(:send, nil, :root)),
          s(:while,
            s(:send,
              s(:send,
                s(:lvar, :x), :nil?), :!),
            s(:begin,
              s(:lvasgn, :y,
                s(:lvar, :x)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :z), :key), :<,
                  s(:send,
                    s(:lvar, :x), :key)),
                s(:lvasgn, :x,
                  s(:send,
                    s(:lvar, :x), :left)),
                s(:lvasgn, :x,
                  s(:send,
                    s(:lvar, :x), :right))))),
          s(:send,
            s(:lvar, :z), :parent=,
            s(:lvar, :y)),
          s(:if,
            s(:send,
              s(:lvar, :y), :nil?),
            s(:send,
              s(:self), :root=,
              s(:lvar, :z)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :z), :key), :<,
                s(:send,
                  s(:lvar, :y), :key)),
              s(:send,
                s(:lvar, :y), :left=,
                s(:lvar, :z)),
              s(:send,
                s(:lvar, :y), :right=,
                s(:lvar, :z)))),
          s(:op_asgn,
            s(:send,
              s(:self), :size), :+,
            s(:int, 1)))),
      s(:def, :delete_fixup,
        s(:args,
          s(:arg, :x)),
        s(:begin,
          s(:while,
            s(:and,
              s(:send,
                s(:lvar, :x), :!=,
                s(:send, nil, :root)),
              s(:send,
                s(:send,
                  s(:lvar, :x), :color), :==,
                s(:const,
                  s(:const, nil, :Node), :BLACK))),
            s(:if,
              s(:send,
                s(:lvar, :x), :==,
                s(:send,
                  s(:send,
                    s(:lvar, :x), :parent), :left)),
              s(:begin,
                s(:lvasgn, :w,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :parent), :right)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :w), :color), :==,
                    s(:const,
                      s(:const, nil, :Node), :RED)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:send, nil, :left_rotate,
                      s(:send,
                        s(:lvar, :x), :parent)),
                    s(:lvasgn, :w,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :right))), nil),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :w), :left), :color), :==,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :w), :right), :color), :==,
                      s(:const,
                        s(:const, nil, :Node), :BLACK))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:lvasgn, :x,
                      s(:send,
                        s(:lvar, :x), :parent))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :w), :right), :color), :==,
                        s(:const,
                          s(:const, nil, :Node), :BLACK)),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :w), :left), :color=,
                          s(:const,
                            s(:const, nil, :Node), :BLACK)),
                        s(:send,
                          s(:lvar, :w), :color=,
                          s(:const,
                            s(:const, nil, :Node), :RED)),
                        s(:send, nil, :right_rotate,
                          s(:lvar, :w)),
                        s(:lvasgn, :w,
                          s(:send,
                            s(:send,
                              s(:lvar, :x), :parent), :right))), nil),
                    s(:send,
                      s(:lvar, :w), :color=,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :color)),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:lvar, :w), :right), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send, nil, :left_rotate,
                      s(:send,
                        s(:lvar, :x), :parent)),
                    s(:lvasgn, :x,
                      s(:send, nil, :root))))),
              s(:begin,
                s(:lvasgn, :w,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :parent), :left)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :w), :color), :==,
                    s(:const,
                      s(:const, nil, :Node), :RED)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:send, nil, :right_rotate,
                      s(:send,
                        s(:lvar, :x), :parent)),
                    s(:lvasgn, :w,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :left))), nil),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :w), :right), :color), :==,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :w), :left), :color), :==,
                      s(:const,
                        s(:const, nil, :Node), :BLACK))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :w), :color=,
                      s(:const,
                        s(:const, nil, :Node), :RED)),
                    s(:lvasgn, :x,
                      s(:send,
                        s(:lvar, :x), :parent))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :w), :left), :color), :==,
                        s(:const,
                          s(:const, nil, :Node), :BLACK)),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :w), :right), :color=,
                          s(:const,
                            s(:const, nil, :Node), :BLACK)),
                        s(:send,
                          s(:lvar, :w), :color=,
                          s(:const,
                            s(:const, nil, :Node), :RED)),
                        s(:send, nil, :left_rotate,
                          s(:lvar, :w)),
                        s(:lvasgn, :w,
                          s(:send,
                            s(:send,
                              s(:lvar, :x), :parent), :left))), nil),
                    s(:send,
                      s(:lvar, :w), :color=,
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :parent), :color)),
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :parent), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send,
                      s(:send,
                        s(:lvar, :w), :left), :color=,
                      s(:const,
                        s(:const, nil, :Node), :BLACK)),
                    s(:send, nil, :right_rotate,
                      s(:send,
                        s(:lvar, :x), :parent)),
                    s(:lvasgn, :x,
                      s(:send, nil, :root))))))),
          s(:send,
            s(:lvar, :x), :color=,
            s(:const,
              s(:const, nil, :Node), :BLACK)))))),
  s(:def, :rbt_bm,
    s(:args),
    s(:begin,
      s(:lvasgn, :n,
        s(:int, 100000)),
      s(:lvasgn, :a1,
        s(:array)),
      s(:block,
        s(:send,
          s(:lvar, :n), :times),
        s(:args),
        s(:send,
          s(:lvar, :a1), :<<,
          s(:send, nil, :rand,
            s(:int, 999999)))),
      s(:lvasgn, :a2,
        s(:array)),
      s(:block,
        s(:send,
          s(:lvar, :n), :times),
        s(:args),
        s(:send,
          s(:lvar, :a2), :<<,
          s(:send, nil, :rand,
            s(:int, 999999)))),
      s(:lvasgn, :start,
        s(:send,
          s(:const, nil, :Time), :now)),
      s(:lvasgn, :tree,
        s(:send,
          s(:const, nil, :RedBlackTree), :new)),
      s(:block,
        s(:send,
          s(:lvar, :n), :times),
        s(:args,
          s(:arg, :i)),
        s(:send,
          s(:lvar, :tree), :add,
          s(:lvar, :i))),
      s(:block,
        s(:send,
          s(:lvar, :n), :times),
        s(:args),
        s(:send,
          s(:lvar, :tree), :delete,
          s(:send,
            s(:lvar, :tree), :root))),
      s(:lvasgn, :tree,
        s(:send,
          s(:const, nil, :RedBlackTree), :new)),
      s(:block,
        s(:send,
          s(:lvar, :a1), :each),
        s(:args,
          s(:arg, :e)),
        s(:send,
          s(:lvar, :tree), :add,
          s(:lvar, :e))),
      s(:block,
        s(:send,
          s(:lvar, :a2), :each),
        s(:args,
          s(:arg, :e)),
        s(:send,
          s(:lvar, :tree), :search,
          s(:lvar, :e))),
      s(:block,
        s(:send,
          s(:lvar, :tree), :inorder_walk),
        s(:args,
          s(:arg, :key)),
        s(:send,
          s(:lvar, :key), :+,
          s(:int, 1))),
      s(:block,
        s(:send,
          s(:lvar, :tree), :reverse_inorder_walk),
        s(:args,
          s(:arg, :key)),
        s(:send,
          s(:lvar, :key), :+,
          s(:int, 1))),
      s(:block,
        s(:send,
          s(:lvar, :n), :times),
        s(:args),
        s(:send,
          s(:lvar, :tree), :minimum)),
      s(:block,
        s(:send,
          s(:lvar, :n), :times),
        s(:args),
        s(:send,
          s(:lvar, :tree), :maximum)),
      s(:return,
        s(:send,
          s(:send,
            s(:const, nil, :Time), :now), :-,
          s(:lvar, :start))))),
  s(:casgn, nil, :N,
    s(:send,
      s(:begin,
        s(:or,
          s(:send,
            s(:const, nil, :ARGV), :[],
            s(:int, 0)),
          s(:int, 10))), :to_i)),
  s(:block,
    s(:send,
      s(:const, nil, :N), :times),
    s(:args),
    s(:send,
      s(:send, nil, :rbt_bm), :to_f)))
