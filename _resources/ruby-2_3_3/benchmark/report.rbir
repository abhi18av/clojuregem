s(:begin,
  s(:send, nil, :require,
    s(:str, "yarvutil")),
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:def, :exec_command,
    s(:args,
      s(:arg, :type),
      s(:arg, :file),
      s(:arg, :w)),
    s(:dstr,
      s(:str, "  $DRIVER_PATH = '"),
      s(:begin,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:gvar, :$0))),
      s(:str, "'\n"),
      s(:str, "  $LOAD_PATH.replace $LOAD_PATH | "),
      s(:begin,
        s(:send,
          s(:gvar, :$LOAD_PATH), :inspect)),
      s(:str, "\n"),
      s(:str, "  require 'benchmark'\n"),
      s(:str, "  require 'yarvutil'\n"),
      s(:str, "#  print '"),
      s(:begin,
        s(:lvar, :type)),
      s(:str, "'\n"),
      s(:str, "  begin\n"),
      s(:str, "    puts Benchmark.measure{\n"),
      s(:str, "      "),
      s(:begin,
        s(:lvar, :w)),
      s(:str, "('"),
      s(:begin,
        s(:lvar, :file)),
      s(:str, "')\n"),
      s(:str, "    }.utime\n"),
      s(:str, "  rescue Exception => exec_command_error_variable\n"),
      s(:str, "    puts \"\t\" + exec_command_error_variable.message\n"),
      s(:str, "  end\n"))),
  s(:def, :benchmark,
    s(:args,
      s(:arg, :cmd)),
    s(:begin,
      s(:lvasgn, :rubybin,
        s(:or,
          s(:send,
            s(:const, nil, :ENV), :[],
            s(:str, "RUBY")),
          s(:send,
            s(:const, nil, :RbConfig), :ruby))),
      s(:block,
        s(:send,
          s(:const, nil, :IO), :popen,
          s(:lvar, :rubybin),
          s(:str, "r+")),
        s(:args,
          s(:arg, :io)),
        s(:begin,
          s(:send,
            s(:lvar, :io), :write,
            s(:lvar, :cmd)),
          s(:send,
            s(:lvar, :io), :close_write),
          s(:return,
            s(:send,
              s(:lvar, :io), :gets)))))),
  s(:def, :ruby_exec,
    s(:args,
      s(:arg, :file)),
    s(:begin,
      s(:lvasgn, :prog,
        s(:send, nil, :exec_command,
          s(:str, "ruby"),
          s(:lvar, :file),
          s(:str, "load"))),
      s(:send, nil, :benchmark,
        s(:lvar, :prog)))),
  s(:def, :yarv_exec,
    s(:args,
      s(:arg, :file)),
    s(:begin,
      s(:lvasgn, :prog,
        s(:send, nil, :exec_command,
          s(:str, "yarv"),
          s(:lvar, :file),
          s(:str, "YARVUtil.load_bm"))),
      s(:send, nil, :benchmark,
        s(:lvar, :prog)))),
  s(:gvasgn, :$wr,
    s(:gvasgn, :$wy,
      s(:nil))),
  s(:def, :measure,
    s(:args,
      s(:arg, :bench)),
    s(:begin,
      s(:lvasgn, :file,
        s(:send,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:gvar, :$0)), :+,
          s(:dstr,
            s(:str, "/bm_"),
            s(:begin,
              s(:lvar, :bench)),
            s(:str, ".rb")))),
      s(:lvasgn, :r,
        s(:send,
          s(:send, nil, :ruby_exec,
            s(:lvar, :file)), :to_f)),
      s(:lvasgn, :y,
        s(:send,
          s(:send, nil, :yarv_exec,
            s(:lvar, :file)), :to_f)),
      s(:send, nil, :puts,
        s(:dstr,
          s(:begin,
            s(:lvar, :bench)),
          s(:str, "\t"),
          s(:begin,
            s(:lvar, :r)),
          s(:str, "\t"),
          s(:begin,
            s(:lvar, :y)))))),
  s(:def, :measure2,
    s(:args),
    s(:begin,
      s(:lvasgn, :r,
        s(:send,
          s(:send, nil, :ruby_exec), :to_f)),
      s(:lvasgn, :y,
        s(:send,
          s(:send, nil, :yarv_exec), :to_f)),
      s(:send, nil, :puts,
        s(:send,
          s(:lvar, :r), :/,
          s(:lvar, :y))))),
  s(:if,
    s(:send,
      s(:gvar, :$0), :==,
      s(:str, "(string)")),
    s(:block,
      s(:send,
        s(:array,
          s(:str, "whileloop"),
          s(:str, "whileloop2"),
          s(:str, "times"),
          s(:str, "const"),
          s(:str, "method"),
          s(:str, "poly_method"),
          s(:str, "block"),
          s(:str, "rescue"),
          s(:str, "rescue2")), :each),
      s(:args,
        s(:arg, :bench)),
      s(:send, nil, :measure,
        s(:lvar, :bench))), nil))
