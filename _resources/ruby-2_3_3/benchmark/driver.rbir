s(:begin,
  s(:lvasgn, :first,
    s(:true)),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "optparse")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil,
        s(:if,
          s(:lvar, :first),
          s(:begin,
            s(:lvasgn, :first,
              s(:false)),
            s(:send,
              s(:gvar, :$:), :unshift,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:str, "(string)")),
                s(:str, "../lib"))),
            s(:retry)),
          s(:send, nil, :raise))), nil)),
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:class,
    s(:const, nil, :BenchmarkDriver), nil,
    s(:begin,
      s(:defs,
        s(:self), :benchmark,
        s(:args,
          s(:arg, :opt)),
        s(:begin,
          s(:lvasgn, :driver,
            s(:send,
              s(:self), :new,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :execs)),
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :dir)),
              s(:lvar, :opt))),
          s(:kwbegin,
            s(:ensure,
              s(:send,
                s(:lvar, :driver), :run),
              s(:send,
                s(:lvar, :driver), :show_results))))),
      s(:defs,
        s(:self), :load,
        s(:args,
          s(:arg, :input),
          s(:arg, :type),
          s(:arg, :opt)),
        s(:begin,
          s(:lvasgn, :attrs,
            s(:array,
              s(:sym, :executables),
              s(:sym, :results))),
          s(:case,
            s(:lvar, :type),
            s(:when,
              s(:str, "yaml"),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "yaml")),
                s(:lvasgn, :h,
                  s(:send,
                    s(:const, nil, :YAML), :load,
                    s(:lvar, :input))))),
            s(:when,
              s(:str, "json"),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "json")),
                s(:lvasgn, :h,
                  s(:send,
                    s(:const, nil, :JSON), :load,
                    s(:lvar, :input))))),
            s(:lvasgn, :h,
              s(:send, nil, :eval,
                s(:send,
                  s(:lvar, :input), :read)))),
          s(:lvasgn, :obj,
            s(:send, nil, :allocate)),
          s(:send,
            s(:lvar, :obj), :instance_variable_set,
            s(:str, "@execs"),
            s(:or,
              s(:send,
                s(:lvar, :h), :[],
                s(:sym, :executables)),
              s(:send,
                s(:lvar, :h), :[],
                s(:str, "executables")))),
          s(:send,
            s(:lvar, :obj), :instance_variable_set,
            s(:str, "@results"),
            s(:or,
              s(:send,
                s(:lvar, :h), :[],
                s(:sym, :results)),
              s(:send,
                s(:lvar, :h), :[],
                s(:str, "results")))),
          s(:send,
            s(:lvar, :obj), :instance_variable_set,
            s(:str, "@opt"),
            s(:lvar, :opt)),
          s(:lvar, :obj))),
      s(:def, :output,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :puts,
            s(:splat,
              s(:lvar, :args))),
          s(:and,
            s(:ivar, :@output),
            s(:send,
              s(:ivar, :@output), :puts,
              s(:splat,
                s(:lvar, :args)))))),
      s(:def, :message,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:ivar, :@verbose),
          s(:send, nil, :output,
            s(:splat,
              s(:lvar, :args))), nil)),
      s(:def, :message_print,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:ivar, :@verbose),
          s(:begin,
            s(:send, nil, :print,
              s(:splat,
                s(:lvar, :args))),
            s(:send,
              s(:const, nil, :STDOUT), :flush),
            s(:and,
              s(:ivar, :@output),
              s(:send,
                s(:ivar, :@output), :print,
                s(:splat,
                  s(:lvar, :args))))), nil)),
      s(:def, :progress_message,
        s(:args,
          s(:restarg, :args)),
        s(:if,
          s(:send,
            s(:const, nil, :STDOUT), :tty?), nil,
          s(:begin,
            s(:send,
              s(:const, nil, :STDERR), :print,
              s(:splat,
                s(:lvar, :args))),
            s(:send,
              s(:const, nil, :STDERR), :flush)))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :execs),
          s(:arg, :dir),
          s(:optarg, :opt,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@execs,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :execs), :map),
                s(:args,
                  s(:arg, :e)),
                s(:begin,
                  s(:send,
                    s(:lvar, :e), :strip!),
                  s(:if,
                    s(:send,
                      s(:lvar, :e), :empty?),
                    s(:next), nil),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "(.+)::(.+)"),
                        s(:regopt)),
                      s(:lvar, :e)),
                    s(:begin,
                      s(:lvasgn, :label,
                        s(:send,
                          s(:nth_ref, 1), :strip)),
                      s(:lvasgn, :path,
                        s(:nth_ref, 2)),
                      s(:lvasgn, :version,
                        s(:send,
                          s(:xstr,
                            s(:begin,
                              s(:lvar, :path)),
                            s(:str, " -v")), :chomp))),
                    s(:begin,
                      s(:lvasgn, :path,
                        s(:lvar, :e)),
                      s(:lvasgn, :version,
                        s(:lvasgn, :label,
                          s(:send,
                            s(:xstr,
                              s(:begin,
                                s(:lvar, :path)),
                              s(:str, " -v")), :chomp))))),
                  s(:array,
                    s(:lvar, :path),
                    s(:lvar, :label),
                    s(:lvar, :version)))), :compact)),
          s(:ivasgn, :@dir,
            s(:lvar, :dir)),
          s(:ivasgn, :@repeat,
            s(:or,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :repeat)),
              s(:int, 1))),
          s(:if,
            s(:send,
              s(:ivar, :@repeat), :<,
              s(:int, 1)),
            s(:ivasgn, :@repeat,
              s(:int, 1)), nil),
          s(:ivasgn, :@pattern,
            s(:or,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :pattern)),
              s(:nil))),
          s(:ivasgn, :@exclude,
            s(:or,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :exclude)),
              s(:nil))),
          s(:ivasgn, :@verbose,
            s(:if,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :quiet)),
              s(:false),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:lvar, :opt), :[],
                    s(:sym, :verbose)),
                  s(:false))))),
          s(:ivasgn, :@output,
            s(:if,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :output)),
              s(:send, nil, :open,
                s(:send,
                  s(:lvar, :opt), :[],
                  s(:sym, :output)),
                s(:str, "w")),
              s(:nil))),
          s(:ivasgn, :@loop_wl1,
            s(:ivasgn, :@loop_wl2,
              s(:nil))),
          s(:ivasgn, :@ruby_arg,
            s(:or,
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :ruby_arg)),
              s(:nil))),
          s(:ivasgn, :@opt,
            s(:lvar, :opt)),
          s(:ivasgn, :@results,
            s(:array)),
          s(:if,
            s(:ivar, :@verbose),
            s(:begin,
              s(:ivasgn, :@start_time,
                s(:send,
                  s(:const, nil, :Time), :now)),
              s(:send, nil, :message,
                s(:ivar, :@start_time)),
              s(:block,
                s(:send,
                  s(:ivar, :@execs), :each_with_index),
                s(:args,
                  s(:mlhs,
                    s(:arg, :path),
                    s(:arg, :label),
                    s(:arg, :version)),
                  s(:arg, :i)),
                s(:send, nil, :message,
                  s(:send,
                    s(:send,
                      s(:dstr,
                        s(:str, "target "),
                        s(:begin,
                          s(:lvar, :i)),
                        s(:str, ": ")), :+,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :label), :==,
                            s(:lvar, :version)),
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :label))),
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :label)),
                            s(:str, " ("),
                            s(:begin,
                              s(:lvar, :version)),
                            s(:str, ")"))))), :+,
                    s(:dstr,
                      s(:str, " at \""),
                      s(:begin,
                        s(:lvar, :path)),
                      s(:str, "\"")))))), nil))),
      s(:def, :adjusted_results,
        s(:args,
          s(:arg, :name),
          s(:arg, :results)),
        s(:begin,
          s(:lvasgn, :s,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :results), :each_with_index),
            s(:args,
              s(:arg, :e),
              s(:arg, :i)),
            s(:begin,
              s(:lvasgn, :r,
                s(:send,
                  s(:lvar, :e), :min)),
              s(:case,
                s(:lvar, :name),
                s(:when,
                  s(:regexp,
                    s(:str, "^vm1_"),
                    s(:regopt)),
                  s(:if,
                    s(:ivar, :@loop_wl1),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :r), :-,
                        s(:send,
                          s(:ivar, :@loop_wl1), :[],
                          s(:lvar, :i))),
                      s(:if,
                        s(:send,
                          s(:lvar, :r), :<,
                          s(:int, 0)),
                        s(:lvasgn, :r,
                          s(:int, 0)), nil),
                      s(:lvasgn, :s,
                        s(:str, "*"))), nil)),
                s(:when,
                  s(:regexp,
                    s(:str, "^vm2_"),
                    s(:regopt)),
                  s(:if,
                    s(:ivar, :@loop_wl2),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :r), :-,
                        s(:send,
                          s(:ivar, :@loop_wl2), :[],
                          s(:lvar, :i))),
                      s(:if,
                        s(:send,
                          s(:lvar, :r), :<,
                          s(:int, 0)),
                        s(:lvasgn, :r,
                          s(:int, 0)), nil),
                      s(:lvasgn, :s,
                        s(:str, "*"))), nil)), nil),
              s(:yield,
                s(:lvar, :r)))),
          s(:lvar, :s))),
      s(:def, :show_results,
        s(:args),
        s(:begin,
          s(:case,
            s(:send,
              s(:ivar, :@opt), :[],
              s(:sym, :format)),
            s(:when,
              s(:sym, :tsv),
              s(:begin,
                s(:lvasgn, :strformat,
                  s(:str, "\t%1$s")),
                s(:lvasgn, :numformat,
                  s(:str, "\t%1$*2$.3f")),
                s(:lvasgn, :minwidth,
                  s(:int, 0)),
                s(:lvasgn, :name_width,
                  s(:int, 0)))),
            s(:when,
              s(:sym, :markdown),
              s(:begin,
                s(:lvasgn, :markdown,
                  s(:true)),
                s(:lvasgn, :strformat,
                  s(:str, "|%1$-*2$s")),
                s(:lvasgn, :numformat,
                  s(:str, "|%1$*2$.3f")))),
            s(:when,
              s(:sym, :plain),
              s(:begin,
                s(:lvasgn, :strformat,
                  s(:str, " %1$-*2$s")),
                s(:lvasgn, :numformat,
                  s(:str, " %1$*2$.3f")))), nil),
          s(:or_asgn,
            s(:lvasgn, :name_width),
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@results), :map),
                s(:args,
                  s(:arg, :v),
                  s(:restarg)),
                s(:send,
                  s(:lvar, :v), :size)), :max)),
          s(:or_asgn,
            s(:lvasgn, :minwidth),
            s(:int, 7)),
          s(:lvasgn, :width,
            s(:block,
              s(:send,
                s(:ivar, :@execs), :map),
              s(:args,
                s(:mlhs,
                  s(:arg, :_),
                  s(:arg, :v))),
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :v), :size),
                  s(:lvar, :minwidth)), :max))),
          s(:send, nil, :output),
          s(:if,
            s(:ivar, :@verbose),
            s(:begin,
              s(:send, nil, :message,
                s(:str, "-----------------------------------------------------------")),
              s(:send, nil, :message,
                s(:str, "raw data:")),
              s(:send, nil, :message),
              s(:send, nil, :message,
                s(:send,
                  s(:const, nil, :PP), :pp,
                  s(:ivar, :@results),
                  s(:str, ""),
                  s(:int, 79))),
              s(:send, nil, :message),
              s(:send, nil, :message,
                s(:dstr,
                  s(:str, "Elapsed time: "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :-,
                      s(:ivar, :@start_time))),
                  s(:str, " (sec)")))), nil),
          s(:if,
            s(:lvasgn, :rawdata_output,
              s(:send,
                s(:ivar, :@opt), :[],
                s(:sym, :rawdata_output))),
            s(:begin,
              s(:lvasgn, :h,
                s(:hash)),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:str, "/proc/cpuinfo")),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:sym, :cpuinfo),
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:str, "/proc/cpuinfo"))), nil),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:sym, :executables),
                s(:ivar, :@execs)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:sym, :results),
                s(:ivar, :@results)),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :type,
                      s(:send,
                        s(:const, nil, :File), :extname,
                        s(:lvar, :rawdata_output)))), :empty?),
                s(:begin,
                  s(:lvasgn, :type,
                    s(:lvar, :rawdata_output)),
                  s(:lvasgn, :rawdata_output,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@output), :path), :sub,
                          s(:regexp,
                            s(:str, "\\.[^./]+\\z"),
                            s(:regopt)),
                          s(:str, "")), :<<,
                        s(:str, ".")), :<<,
                      s(:lvar, :rawdata_output)))), nil),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:str, "yaml"),
                  s(:begin,
                    s(:send, nil, :require,
                      s(:str, "yaml")),
                    s(:lvasgn, :h,
                      s(:send,
                        s(:const, nil, :YAML), :dump,
                        s(:lvar, :h))))),
                s(:when,
                  s(:str, "json"),
                  s(:begin,
                    s(:send, nil, :require,
                      s(:str, "json")),
                    s(:lvasgn, :h,
                      s(:send,
                        s(:const, nil, :JSON), :pretty_generate,
                        s(:lvar, :h))))),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "pp")),
                  s(:lvasgn, :h,
                    s(:send,
                      s(:lvar, :h), :pretty_inspect)))),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :rawdata_output),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:lvar, :h)))), nil),
          s(:send, nil, :output,
            s(:str, "-----------------------------------------------------------")),
          s(:send, nil, :output,
            s(:str, "benchmark results:")),
          s(:if,
            s(:and,
              s(:ivar, :@verbose),
              s(:send,
                s(:ivar, :@repeat), :>,
                s(:int, 1))),
            s(:send, nil, :output,
              s(:dstr,
                s(:str, "minimum results in each "),
                s(:begin,
                  s(:ivar, :@repeat)),
                s(:str, " measurements."))), nil),
          s(:send, nil, :output,
            s(:str, "Execution time (sec)")),
          s(:if,
            s(:lvar, :markdown),
            s(:send, nil, :output), nil),
          s(:send, nil, :output,
            s(:send,
              s(:send,
                s(:array,
                  s(:send,
                    s(:str, "name"), :ljust,
                    s(:lvar, :name_width)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:ivar, :@execs), :map), :with_index),
                    s(:args,
                      s(:mlhs,
                        s(:arg, :_),
                        s(:arg, :v)),
                      s(:arg, :i)),
                    s(:send, nil, :sprintf,
                      s(:lvar, :strformat),
                      s(:lvar, :v),
                      s(:send,
                        s(:lvar, :width), :[],
                        s(:lvar, :i))))), :join,
                s(:str, "")), :rstrip)),
          s(:if,
            s(:lvar, :markdown),
            s(:send, nil, :output,
              s(:send,
                s(:array,
                  s(:send,
                    s(:str, "-"), :*,
                    s(:lvar, :name_width)),
                  s(:block,
                    s(:send,
                      s(:lvar, :width), :map),
                    s(:args,
                      s(:arg, :n)),
                    s(:send,
                      s(:str, ":"), :rjust,
                      s(:lvar, :n),
                      s(:str, "-")))), :join,
                s(:str, "|"))), nil),
          s(:block,
            s(:send,
              s(:ivar, :@results), :each),
            s(:args,
              s(:arg, :v),
              s(:arg, :result)),
            s(:begin,
              s(:lvasgn, :rets,
                s(:array)),
              s(:lvasgn, :s,
                s(:block,
                  s(:send, nil, :adjusted_results,
                    s(:lvar, :v),
                    s(:lvar, :result)),
                  s(:args,
                    s(:arg, :r)),
                  s(:send,
                    s(:lvar, :rets), :<<,
                    s(:send, nil, :sprintf,
                      s(:lvar, :numformat),
                      s(:lvar, :r),
                      s(:send,
                        s(:lvar, :width), :[],
                        s(:send,
                          s(:lvar, :rets), :size)))))),
              s(:if,
                s(:lvar, :s),
                s(:op_asgn,
                  s(:lvasgn, :v), :+,
                  s(:lvar, :s)), nil),
              s(:send, nil, :output,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :v), :ljust,
                      s(:lvar, :name_width)),
                    s(:lvar, :rets)), :join,
                  s(:str, ""))))),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@execs), :size), :>,
              s(:int, 1)),
            s(:begin,
              s(:send, nil, :output),
              s(:send, nil, :output,
                s(:dstr,
                  s(:str, "Speedup ratio: compare with the result of `"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:ivar, :@execs), :[],
                        s(:int, 0)), :[],
                      s(:int, 1))),
                  s(:str, "' (greater is better)"))),
              s(:if,
                s(:lvar, :markdown),
                s(:send, nil, :output), nil),
              s(:send, nil, :output,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:str, "name"), :ljust,
                        s(:lvar, :name_width)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:ivar, :@execs), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1))), :map), :with_index),
                        s(:args,
                          s(:mlhs,
                            s(:arg, :_),
                            s(:arg, :v)),
                          s(:arg, :i)),
                        s(:send, nil, :sprintf,
                          s(:lvar, :strformat),
                          s(:lvar, :v),
                          s(:send,
                            s(:lvar, :width), :[],
                            s(:lvar, :i))))), :join,
                    s(:str, "")), :rstrip)),
              s(:if,
                s(:lvar, :markdown),
                s(:send, nil, :output,
                  s(:send,
                    s(:array,
                      s(:send,
                        s(:str, "-"), :*,
                        s(:lvar, :name_width)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :width), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1))), :map),
                        s(:args,
                          s(:arg, :n)),
                        s(:send,
                          s(:str, ":"), :rjust,
                          s(:lvar, :n),
                          s(:str, "-")))), :join,
                    s(:str, "|"))), nil),
              s(:block,
                s(:send,
                  s(:ivar, :@results), :each),
                s(:args,
                  s(:arg, :v),
                  s(:arg, :result)),
                s(:begin,
                  s(:lvasgn, :rets,
                    s(:array)),
                  s(:lvasgn, :first_value,
                    s(:nil)),
                  s(:lvasgn, :s,
                    s(:block,
                      s(:send, nil, :adjusted_results,
                        s(:lvar, :v),
                        s(:lvar, :result)),
                      s(:args,
                        s(:arg, :r)),
                      s(:if,
                        s(:lvar, :first_value),
                        s(:if,
                          s(:send,
                            s(:lvar, :r), :==,
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :rets), :<<,
                            s(:str, "Error")),
                          s(:send,
                            s(:lvar, :rets), :<<,
                            s(:send, nil, :sprintf,
                              s(:lvar, :numformat),
                              s(:send,
                                s(:lvar, :first_value), :/,
                                s(:lvar, :r)),
                              s(:send,
                                s(:lvar, :width), :[],
                                s(:send,
                                  s(:send,
                                    s(:lvar, :rets), :size), :+,
                                  s(:int, 1)))))),
                        s(:lvasgn, :first_value,
                          s(:lvar, :r))))),
                  s(:if,
                    s(:lvar, :s),
                    s(:op_asgn,
                      s(:lvasgn, :v), :+,
                      s(:lvar, :s)), nil),
                  s(:send, nil, :output,
                    s(:send,
                      s(:array,
                        s(:send,
                          s(:lvar, :v), :ljust,
                          s(:lvar, :name_width)),
                        s(:lvar, :rets)), :join,
                      s(:str, "")))))), nil),
          s(:if,
            s(:send,
              s(:ivar, :@opt), :[],
              s(:sym, :output)),
            s(:begin,
              s(:send, nil, :output),
              s(:send, nil, :output,
                s(:dstr,
                  s(:str, "Log file: "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@opt), :[],
                      s(:sym, :output)))))), nil))),
      s(:def, :files,
        s(:args),
        s(:begin,
          s(:lvasgn, :flag,
            s(:hash)),
          s(:ivasgn, :@files,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :glob,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:ivar, :@dir),
                      s(:str, "bm*.rb"))), :map),
                s(:args,
                  s(:arg, :file)),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:ivar, :@pattern),
                      s(:send,
                        s(:regexp,
                          s(:begin,
                            s(:ivar, :@pattern)),
                          s(:regopt)), :!~,
                        s(:send,
                          s(:const, nil, :File), :basename,
                          s(:lvar, :file)))),
                    s(:next), nil),
                  s(:if,
                    s(:and,
                      s(:ivar, :@exclude),
                      s(:send,
                        s(:regexp,
                          s(:begin,
                            s(:ivar, :@exclude)),
                          s(:regopt)), :=~,
                        s(:send,
                          s(:const, nil, :File), :basename,
                          s(:lvar, :file)))),
                    s(:next), nil),
                  s(:case,
                    s(:lvar, :file),
                    s(:when,
                      s(:regexp,
                        s(:str, "bm_(vm[12])_"),
                        s(:regopt)),
                      s(:regexp,
                        s(:str, "bm_loop_(whileloop2?).rb"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :flag), :[]=,
                        s(:nth_ref, 1),
                        s(:true))), nil),
                  s(:lvar, :file))), :compact)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :flag), :[],
                s(:str, "vm1")),
              s(:send,
                s(:send,
                  s(:lvar, :flag), :[],
                  s(:str, "whileloop")), :!)),
            s(:send,
              s(:ivar, :@files), :<<,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@dir),
                s(:str, "bm_loop_whileloop.rb"))),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :flag), :[],
                  s(:str, "vm2")),
                s(:send,
                  s(:send,
                    s(:lvar, :flag), :[],
                    s(:str, "whileloop2")), :!)),
              s(:send,
                s(:ivar, :@files), :<<,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@dir),
                  s(:str, "bm_loop_whileloop2.rb"))), nil)),
          s(:send,
            s(:ivar, :@files), :sort!),
          s(:send, nil, :progress_message,
            s(:dstr,
              s(:str, "total: "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:ivar, :@files), :size), :*,
                  s(:ivar, :@repeat))),
              s(:str, " trial(s) ("),
              s(:begin,
                s(:ivar, :@repeat)),
              s(:str, " trial(s) for "),
              s(:begin,
                s(:send,
                  s(:ivar, :@files), :size)),
              s(:str, " benchmark(s))\n"))),
          s(:ivar, :@files))),
      s(:def, :run,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :files), :each_with_index),
          s(:args,
            s(:arg, :file),
            s(:arg, :i)),
          s(:begin,
            s(:ivasgn, :@i,
              s(:lvar, :i)),
            s(:lvasgn, :r,
              s(:send, nil, :measure_file,
                s(:lvar, :file))),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "bm_loop_whileloop.rb"),
                  s(:regopt)),
                s(:lvar, :file)),
              s(:ivasgn, :@loop_wl1,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :r), :[],
                      s(:int, 1)), :map),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :min))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "bm_loop_whileloop2.rb"),
                    s(:regopt)),
                  s(:lvar, :file)),
                s(:ivasgn, :@loop_wl2,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :r), :[],
                        s(:int, 1)), :map),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:lvar, :e), :min))), nil))))),
      s(:def, :measure_file,
        s(:args,
          s(:arg, :file)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :file),
                s(:str, ".rb")), :sub,
              s(:regexp,
                s(:str, "^bm_"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :prepare_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :file)),
              s(:dstr,
                s(:str, "prepare_"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ".rb")))),
          s(:if,
            s(:send,
              s(:const, nil, :FileTest), :exist?,
              s(:lvar, :prepare_file)),
            s(:send, nil, :load,
              s(:lvar, :prepare_file)), nil),
          s(:if,
            s(:ivar, :@verbose),
            s(:begin,
              s(:send, nil, :output),
              s(:send, nil, :output,
                s(:str, "-----------------------------------------------------------")),
              s(:send, nil, :output,
                s(:lvar, :name)),
              s(:send, nil, :output),
              s(:send, nil, :output,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :file))),
              s(:send, nil, :output)), nil),
          s(:lvasgn, :result,
            s(:array,
              s(:lvar, :name))),
          s(:send,
            s(:lvar, :result), :<<,
            s(:block,
              s(:send,
                s(:ivar, :@execs), :map),
              s(:args,
                s(:mlhs,
                  s(:arg, :e),
                  s(:arg, :v))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:erange,
                      s(:int, 0),
                      s(:ivar, :@repeat))), :map),
                s(:args),
                s(:begin,
                  s(:send, nil, :message_print,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :v)),
                      s(:str, "\t"))),
                  s(:send, nil, :progress_message,
                    s(:str, ".")),
                  s(:lvasgn, :m,
                    s(:send, nil, :measure,
                      s(:lvar, :e),
                      s(:lvar, :file))),
                  s(:send, nil, :message,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :m)))),
                  s(:lvar, :m))))),
          s(:send,
            s(:ivar, :@results), :<<,
            s(:lvar, :result)),
          s(:lvar, :result))),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :File), :NULL)), nil,
        s(:if,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:str, "/dev/null")),
          s(:casgn,
            s(:const, nil, :File), :NULL,
            s(:str, "/dev/null")), nil)),
      s(:def, :measure,
        s(:args,
          s(:arg, :executable),
          s(:arg, :file)),
        s(:begin,
          s(:lvasgn, :cmd,
            s(:dstr,
              s(:begin,
                s(:lvar, :executable)),
              s(:str, " "),
              s(:begin,
                s(:ivar, :@ruby_arg)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :file)))),
          s(:lvasgn, :m,
            s(:block,
              s(:send,
                s(:const, nil, :Benchmark), :measure),
              s(:args),
              s(:send, nil, :system,
                s(:lvar, :cmd),
                s(:hash,
                  s(:pair,
                    s(:sym, :out),
                    s(:const,
                      s(:const, nil, :File), :NULL)))))),
          s(:if,
            s(:send,
              s(:gvar, :$?), :!=,
              s(:int, 0)),
            s(:begin,
              s(:send, nil, :output,
                s(:dstr,
                  s(:str, "`"),
                  s(:begin,
                    s(:lvar, :cmd)),
                  s(:str, "' exited with abnormal status ("),
                  s(:begin,
                    s(:gvar, :$?)),
                  s(:str, ")"))),
              s(:int, 0)),
            s(:send,
              s(:lvar, :m), :real)))))),
  s(:if,
    s(:send,
      s(:str, "(string)"), :==,
      s(:gvar, :$0)),
    s(:begin,
      s(:lvasgn, :opt,
        s(:hash,
          s(:pair,
            s(:sym, :execs),
            s(:array)),
          s(:pair,
            s(:sym, :dir),
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:str, "(string)"))),
          s(:pair,
            s(:sym, :repeat),
            s(:int, 1)),
          s(:pair,
            s(:sym, :output),
            s(:nil)),
          s(:pair,
            s(:sym, :raw_output),
            s(:nil)),
          s(:pair,
            s(:sym, :format),
            s(:sym, :tsv)))),
      s(:lvasgn, :formats,
        s(:hash,
          s(:pair,
            s(:sym, :tsv),
            s(:str, ".tsv")),
          s(:pair,
            s(:sym, :markdown),
            s(:str, ".md")),
          s(:pair,
            s(:sym, :plain),
            s(:str, ".txt")))),
      s(:lvasgn, :parser,
        s(:block,
          s(:send,
            s(:const, nil, :OptionParser), :new),
          s(:args,
            s(:arg, :o)),
          s(:begin,
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-e"),
                s(:str, "--executables [EXECS]"),
                s(:str, "Specify benchmark one or more targets (e1::path1; e2::path2; e3::path3;...)")),
              s(:args,
                s(:arg, :e)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :e), :split,
                    s(:regexp,
                      s(:str, ";"),
                      s(:regopt))), :each),
                s(:args,
                  s(:arg, :path)),
                s(:send,
                  s(:send,
                    s(:lvar, :opt), :[],
                    s(:sym, :execs)), :<<,
                  s(:lvar, :path)))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-d"),
                s(:str, "--directory [DIRECTORY]"),
                s(:str, "Benchmark suites directory")),
              s(:args,
                s(:arg, :d)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :dir),
                s(:lvar, :d))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-p"),
                s(:str, "--pattern [PATTERN]"),
                s(:str, "Benchmark name pattern")),
              s(:args,
                s(:arg, :p)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :pattern),
                s(:lvar, :p))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-x"),
                s(:str, "--exclude [PATTERN]"),
                s(:str, "Benchmark exclude pattern")),
              s(:args,
                s(:arg, :e)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :exclude),
                s(:lvar, :e))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-r"),
                s(:str, "--repeat-count [NUM]"),
                s(:str, "Repeat count")),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :repeat),
                s(:send,
                  s(:lvar, :n), :to_i))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-o"),
                s(:str, "--output-file [FILE]"),
                s(:str, "Output file")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :output),
                s(:lvar, :f))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "--ruby-arg [ARG]"),
                s(:str, "Optional argument for ruby")),
              s(:args,
                s(:arg, :a)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :ruby_arg),
                s(:lvar, :a))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "--rawdata-output [FILE]"),
                s(:str, "output rawdata")),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :rawdata_output),
                s(:lvar, :r))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "--load-rawdata=FILE"),
                s(:str, "input rawdata")),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :rawdata_input),
                s(:lvar, :r))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-f"),
                s(:str, "--format=FORMAT"),
                s(:dstr,
                  s(:str, "output format ("),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :formats), :keys), :join,
                      s(:str, ","))),
                  s(:str, ")")),
                s(:send,
                  s(:lvar, :formats), :keys)),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :format),
                s(:lvar, :r))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-v"),
                s(:str, "--verbose")),
              s(:args,
                s(:arg, :v)),
              s(:send,
                s(:lvar, :opt), :[]=,
                s(:sym, :verbose),
                s(:lvar, :v))),
            s(:block,
              s(:send,
                s(:lvar, :o), :on,
                s(:str, "-q"),
                s(:str, "--quiet"),
                s(:str, "Run without notify information except result table.")),
              s(:args,
                s(:arg, :q)),
              s(:begin,
                s(:send,
                  s(:lvar, :opt), :[]=,
                  s(:sym, :quiet),
                  s(:lvar, :q)),
                s(:send,
                  s(:lvar, :opt), :[]=,
                  s(:sym, :verbose),
                  s(:false))))))),
      s(:send,
        s(:lvar, :parser), :parse!,
        s(:const, nil, :ARGV)),
      s(:or_asgn,
        s(:send,
          s(:lvar, :opt), :[],
          s(:sym, :output)),
        s(:dstr,
          s(:str, "bmlog-"),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :strftime,
              s(:str, "%Y%m%d-%H%M%S"))),
          s(:str, "."),
          s(:begin,
            s(:gvar, :$$)),
          s(:begin,
            s(:send,
              s(:lvar, :formats), :[],
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :format)))))),
      s(:if,
        s(:lvasgn, :input,
          s(:send,
            s(:lvar, :opt), :[],
            s(:sym, :rawdata_input))),
        s(:begin,
          s(:lvasgn, :b,
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :input)),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :BenchmarkDriver), :load,
                s(:lvar, :f),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :extname,
                    s(:lvar, :input)), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1))),
                s(:lvar, :opt)))),
          s(:send,
            s(:lvar, :b), :show_results)),
        s(:send,
          s(:const, nil, :BenchmarkDriver), :benchmark,
          s(:lvar, :opt)))), nil))
