s(:module,
  s(:const, nil, :REXML),
  s(:module,
    s(:const, nil, :Functions),
    s(:begin,
      s(:cvasgn, :@@context,
        s(:nil)),
      s(:cvasgn, :@@namespace_context,
        s(:hash)),
      s(:cvasgn, :@@variables,
        s(:hash)),
      s(:defs,
        s(:const, nil, :Functions), :namespace_context=,
        s(:args,
          s(:arg, :x)),
        s(:cvasgn, :@@namespace_context,
          s(:lvar, :x))),
      s(:defs,
        s(:const, nil, :Functions), :variables=,
        s(:args,
          s(:arg, :x)),
        s(:cvasgn, :@@variables,
          s(:lvar, :x))),
      s(:defs,
        s(:const, nil, :Functions), :namespace_context,
        s(:args),
        s(:cvar, :@@namespace_context)),
      s(:defs,
        s(:const, nil, :Functions), :variables,
        s(:args),
        s(:cvar, :@@variables)),
      s(:defs,
        s(:const, nil, :Functions), :context=,
        s(:args,
          s(:arg, :value)),
        s(:cvasgn, :@@context,
          s(:lvar, :value))),
      s(:defs,
        s(:const, nil, :Functions), :text,
        s(:args),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:cvar, :@@context), :[],
                s(:sym, :node)), :node_type), :==,
            s(:sym, :element)),
          s(:return,
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:cvar, :@@context), :[],
                      s(:sym, :node)), :find_all),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :node_type), :==,
                    s(:sym, :text))), :collect),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:lvar, :n), :value))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:cvar, :@@context), :[],
                  s(:sym, :node)), :node_type), :==,
              s(:sym, :text)),
            s(:return,
              s(:send,
                s(:send,
                  s(:cvar, :@@context), :[],
                  s(:sym, :node)), :value)),
            s(:return,
              s(:false))))),
      s(:defs,
        s(:const, nil, :Functions), :last,
        s(:args),
        s(:send,
          s(:cvar, :@@context), :[],
          s(:sym, :size))),
      s(:defs,
        s(:const, nil, :Functions), :position,
        s(:args),
        s(:send,
          s(:cvar, :@@context), :[],
          s(:sym, :index))),
      s(:defs,
        s(:const, nil, :Functions), :count,
        s(:args,
          s(:arg, :node_set)),
        s(:send,
          s(:lvar, :node_set), :size)),
      s(:defs,
        s(:const, nil, :Functions), :id,
        s(:args,
          s(:arg, :object)), nil),
      s(:defs,
        s(:const, nil, :Functions), :local_name,
        s(:args,
          s(:optarg, :node_set,
            s(:nil))),
        s(:block,
          s(:send, nil, :get_namespace,
            s(:lvar, :node_set)),
          s(:args,
            s(:arg, :node)),
          s(:return,
            s(:send,
              s(:lvar, :node), :local_name)))),
      s(:defs,
        s(:const, nil, :Functions), :namespace_uri,
        s(:args,
          s(:optarg, :node_set,
            s(:nil))),
        s(:block,
          s(:send, nil, :get_namespace,
            s(:lvar, :node_set)),
          s(:args,
            s(:arg, :node)),
          s(:send,
            s(:lvar, :node), :namespace))),
      s(:defs,
        s(:const, nil, :Functions), :name,
        s(:args,
          s(:optarg, :node_set,
            s(:nil))),
        s(:block,
          s(:send, nil, :get_namespace,
            s(:lvar, :node_set)),
          s(:args,
            s(:arg, :node)),
          s(:send,
            s(:lvar, :node), :expanded_name))),
      s(:defs,
        s(:const, nil, :Functions), :get_namespace,
        s(:args,
          s(:optarg, :node_set,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :node_set), :==,
            s(:nil)),
          s(:if,
            s(:defined?,
              s(:send,
                s(:send,
                  s(:cvar, :@@context), :[],
                  s(:sym, :node)), :namespace)),
            s(:yield,
              s(:send,
                s(:cvar, :@@context), :[],
                s(:sym, :node))), nil),
          s(:if,
            s(:send,
              s(:lvar, :node_set), :respond_to?,
              s(:sym, :each)),
            s(:block,
              s(:send,
                s(:lvar, :node_set), :each),
              s(:args,
                s(:arg, :node)),
              s(:if,
                s(:defined?,
                  s(:send,
                    s(:lvar, :node), :namespace)),
                s(:yield,
                  s(:lvar, :node)), nil)),
            s(:if,
              s(:send,
                s(:lvar, :node_set), :respond_to?,
                s(:sym, :namespace)),
              s(:yield,
                s(:lvar, :node_set)), nil)))),
      s(:defs,
        s(:const, nil, :Functions), :string,
        s(:args,
          s(:optarg, :object,
            s(:nil))),
        s(:if,
          s(:send,
            s(:lvar, :object), :instance_of?,
            s(:const, nil, :Array)),
          s(:send, nil, :string,
            s(:send,
              s(:lvar, :object), :[],
              s(:int, 0))),
          s(:if,
            s(:defined?,
              s(:send,
                s(:lvar, :object), :node_type)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :object), :node_type), :==,
                s(:sym, :attribute)),
              s(:send,
                s(:lvar, :object), :value),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :object), :node_type), :==,
                    s(:sym, :element)),
                  s(:send,
                    s(:send,
                      s(:lvar, :object), :node_type), :==,
                    s(:sym, :document))),
                s(:send, nil, :string_value,
                  s(:lvar, :object)),
                s(:send,
                  s(:lvar, :object), :to_s))),
            s(:if,
              s(:send,
                s(:lvar, :object), :nil?),
              s(:return,
                s(:str, "")),
              s(:send,
                s(:lvar, :object), :to_s))))),
      s(:defs,
        s(:const, nil, :Functions), :string_value,
        s(:args,
          s(:arg, :o)),
        s(:begin,
          s(:lvasgn, :rv,
            s(:str, "")),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :o), :children), :each),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :e), :node_type), :==,
                s(:sym, :text)),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:send,
                  s(:lvar, :e), :to_s)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :e), :node_type), :==,
                  s(:sym, :element)),
                s(:send,
                  s(:lvar, :rv), :<<,
                  s(:send, nil, :string_value,
                    s(:lvar, :e))), nil))),
          s(:lvar, :rv))),
      s(:defs,
        s(:const, nil, :Functions), :concat,
        s(:args,
          s(:restarg, :objects)),
        s(:send,
          s(:lvar, :objects), :join)),
      s(:defs,
        s(:const, nil, :Functions), :starts_with,
        s(:args,
          s(:arg, :string),
          s(:arg, :test)),
        s(:send,
          s(:send,
            s(:send, nil, :string,
              s(:lvar, :string)), :index,
            s(:send, nil, :string,
              s(:lvar, :test))), :==,
          s(:int, 0))),
      s(:defs,
        s(:const, nil, :Functions), :contains,
        s(:args,
          s(:arg, :string),
          s(:arg, :test)),
        s(:send,
          s(:send, nil, :string,
            s(:lvar, :string)), :include?,
          s(:send, nil, :string,
            s(:lvar, :test)))),
      s(:defs,
        s(:const, nil, :Functions), :substring_before,
        s(:args,
          s(:arg, :string),
          s(:arg, :test)),
        s(:begin,
          s(:lvasgn, :ruby_string,
            s(:send, nil, :string,
              s(:lvar, :string))),
          s(:lvasgn, :ruby_index,
            s(:send,
              s(:lvar, :ruby_string), :index,
              s(:send, nil, :string,
                s(:lvar, :test)))),
          s(:if,
            s(:send,
              s(:lvar, :ruby_index), :nil?),
            s(:str, ""),
            s(:send,
              s(:lvar, :ruby_string), :[],
              s(:erange,
                s(:int, 0),
                s(:lvar, :ruby_index)))))),
      s(:defs,
        s(:const, nil, :Functions), :substring_after,
        s(:args,
          s(:arg, :string),
          s(:arg, :test)),
        s(:begin,
          s(:lvasgn, :ruby_string,
            s(:send, nil, :string,
              s(:lvar, :string))),
          s(:if,
            s(:send,
              s(:lvar, :ruby_string), :=~,
              s(:regexp,
                s(:begin,
                  s(:lvar, :test)),
                s(:str, "(.*)"),
                s(:regopt))),
            s(:return,
              s(:nth_ref, 1)), nil),
          s(:str, ""))),
      s(:defs,
        s(:const, nil, :Functions), :substring,
        s(:args,
          s(:arg, :string),
          s(:arg, :start),
          s(:optarg, :length,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :ruby_string,
            s(:send, nil, :string,
              s(:lvar, :string))),
          s(:lvasgn, :ruby_length,
            s(:if,
              s(:send,
                s(:lvar, :length), :nil?),
              s(:send,
                s(:send,
                  s(:lvar, :ruby_string), :length), :to_f),
              s(:send, nil, :number,
                s(:lvar, :length)))),
          s(:lvasgn, :ruby_start,
            s(:send, nil, :number,
              s(:lvar, :start))),
          s(:if,
            s(:begin,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :ruby_length), :nan?),
                  s(:send,
                    s(:lvar, :ruby_start), :nan?)),
                s(:send,
                  s(:lvar, :ruby_start), :infinite?))),
            s(:return,
              s(:str, "")), nil),
          s(:lvasgn, :infinite_length,
            s(:send,
              s(:send,
                s(:lvar, :ruby_length), :infinite?), :==,
              s(:int, 1))),
          s(:if,
            s(:lvar, :infinite_length),
            s(:lvasgn, :ruby_length,
              s(:send,
                s(:lvar, :ruby_string), :length)), nil),
          s(:lvasgn, :ruby_start,
            s(:send,
              s(:send,
                s(:lvar, :ruby_start), :round), :-,
              s(:int, 1))),
          s(:lvasgn, :ruby_length,
            s(:send,
              s(:lvar, :ruby_length), :round)),
          s(:if,
            s(:send,
              s(:lvar, :ruby_start), :<,
              s(:int, 0)),
            s(:begin,
              s(:if,
                s(:lvar, :infinite_length), nil,
                s(:op_asgn,
                  s(:lvasgn, :ruby_length), :+,
                  s(:lvar, :ruby_start))),
              s(:lvasgn, :ruby_start,
                s(:int, 0))), nil),
          s(:if,
            s(:send,
              s(:lvar, :ruby_length), :<=,
              s(:int, 0)),
            s(:return,
              s(:str, "")), nil),
          s(:send,
            s(:lvar, :ruby_string), :[],
            s(:lvar, :ruby_start),
            s(:lvar, :ruby_length)))),
      s(:defs,
        s(:const, nil, :Functions), :string_length,
        s(:args,
          s(:arg, :string)),
        s(:send,
          s(:send, nil, :string,
            s(:lvar, :string)), :length)),
      s(:defs,
        s(:const, nil, :Functions), :normalize_space,
        s(:args,
          s(:optarg, :string,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :string), :nil?),
            s(:lvasgn, :string,
              s(:send, nil, :string,
                s(:send,
                  s(:cvar, :@@context), :[],
                  s(:sym, :node)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :string), :kind_of?,
              s(:const, nil, :Array)),
            s(:block,
              s(:send,
                s(:lvar, :string), :collect),
              s(:args,
                s(:arg, :x)),
              s(:if,
                s(:lvar, :string),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :string), :to_s), :strip), :gsub,
                  s(:regexp,
                    s(:str, "\\s+"),
                    s(:regopt, :m, :u)),
                  s(:str, " ")), nil)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :string), :to_s), :strip), :gsub,
              s(:regexp,
                s(:str, "\\s+"),
                s(:regopt, :m, :u)),
              s(:str, " "))))),
      s(:defs,
        s(:const, nil, :Functions), :translate,
        s(:args,
          s(:arg, :string),
          s(:arg, :tr1),
          s(:arg, :tr2)),
        s(:begin,
          s(:lvasgn, :from,
            s(:send, nil, :string,
              s(:lvar, :tr1))),
          s(:lvasgn, :to,
            s(:send, nil, :string,
              s(:lvar, :tr2))),
          s(:lvasgn, :map,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:block,
            s(:send,
              s(:int, 0), :upto,
              s(:send,
                s(:send,
                  s(:lvar, :from), :length), :-,
                s(:int, 1))),
            s(:args,
              s(:arg, :pos)),
            s(:begin,
              s(:lvasgn, :from_char,
                s(:send,
                  s(:lvar, :from), :[],
                  s(:lvar, :pos))),
              s(:if,
                s(:send,
                  s(:lvar, :map), :has_key?,
                  s(:lvar, :from_char)), nil,
                s(:send,
                  s(:lvar, :map), :[]=,
                  s(:lvar, :from_char),
                  s(:if,
                    s(:send,
                      s(:lvar, :pos), :<,
                      s(:send,
                        s(:lvar, :to), :length)),
                    s(:send,
                      s(:lvar, :to), :[],
                      s(:lvar, :pos)),
                    s(:nil)))))),
          s(:if,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :chars)),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send, nil, :string,
                        s(:lvar, :string)), :chars), :collect),
                  s(:args,
                    s(:arg, :c)),
                  s(:if,
                    s(:send,
                      s(:lvar, :map), :has_key?,
                      s(:lvar, :c)),
                    s(:send,
                      s(:lvar, :map), :[],
                      s(:lvar, :c)),
                    s(:lvar, :c))), :compact), :join),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send, nil, :string,
                        s(:lvar, :string)), :unpack,
                      s(:str, "U*")), :collect),
                  s(:args,
                    s(:arg, :c)),
                  s(:if,
                    s(:send,
                      s(:lvar, :map), :has_key?,
                      s(:lvar, :c)),
                    s(:send,
                      s(:lvar, :map), :[],
                      s(:lvar, :c)),
                    s(:lvar, :c))), :compact), :pack,
              s(:str, "U*"))))),
      s(:defs,
        s(:const, nil, :Functions), :boolean,
        s(:args,
          s(:optarg, :object,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :object), :kind_of?,
              s(:const, nil, :String)),
            s(:if,
              s(:send,
                s(:lvar, :object), :=~,
                s(:regexp,
                  s(:str, "\\d+"),
                  s(:regopt, :u))),
              s(:return,
                s(:send,
                  s(:send,
                    s(:lvar, :object), :to_f), :!=,
                  s(:int, 0))),
              s(:return,
                s(:send,
                  s(:send,
                    s(:lvar, :object), :size), :>,
                  s(:int, 0)))),
            s(:if,
              s(:send,
                s(:lvar, :object), :kind_of?,
                s(:const, nil, :Array)),
              s(:lvasgn, :object,
                s(:block,
                  s(:send,
                    s(:lvar, :object), :find),
                  s(:args,
                    s(:arg, :x)),
                  s(:and,
                    s(:lvar, :x),
                    s(:true)))), nil)),
          s(:return,
            s(:if,
              s(:lvar, :object),
              s(:true),
              s(:false))))),
      s(:defs,
        s(:const, nil, :Functions), :not,
        s(:args,
          s(:arg, :object)),
        s(:send,
          s(:send, nil, :boolean,
            s(:lvar, :object)), :!)),
      s(:defs,
        s(:const, nil, :Functions), :true,
        s(:args),
        s(:true)),
      s(:defs,
        s(:const, nil, :Functions), :false,
        s(:args),
        s(:false)),
      s(:defs,
        s(:const, nil, :Functions), :lang,
        s(:args,
          s(:arg, :language)),
        s(:begin,
          s(:lvasgn, :lang,
            s(:false)),
          s(:lvasgn, :node,
            s(:send,
              s(:cvar, :@@context), :[],
              s(:sym, :node))),
          s(:lvasgn, :attr,
            s(:nil)),
          s(:until,
            s(:send,
              s(:lvar, :node), :nil?),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :node_type), :==,
                  s(:sym, :element)),
                s(:begin,
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :attributes), :[],
                      s(:str, "xml:lang"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :attr), :nil?), nil,
                    s(:begin,
                      s(:lvasgn, :lang,
                        s(:send, nil, :compare_language,
                          s(:send, nil, :string,
                            s(:lvar, :language)),
                          s(:lvar, :attr))),
                      s(:break)))), nil),
              s(:lvasgn, :node,
                s(:send,
                  s(:lvar, :node), :parent)))),
          s(:lvar, :lang))),
      s(:defs,
        s(:const, nil, :Functions), :compare_language,
        s(:args,
          s(:arg, :lang1),
          s(:arg, :lang2)),
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :lang2), :downcase), :index,
            s(:send,
              s(:lvar, :lang1), :downcase)), :==,
          s(:int, 0))),
      s(:defs,
        s(:const, nil, :Functions), :number,
        s(:args,
          s(:optarg, :object,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :object), nil,
            s(:lvasgn, :object,
              s(:send,
                s(:cvar, :@@context), :[],
                s(:sym, :node)))),
          s(:case,
            s(:lvar, :object),
            s(:when,
              s(:true),
              s(:send, nil, :Float,
                s(:int, 1))),
            s(:when,
              s(:false),
              s(:send, nil, :Float,
                s(:int, 0))),
            s(:when,
              s(:const, nil, :Array),
              s(:send, nil, :number,
                s(:send, nil, :string,
                  s(:lvar, :object)))),
            s(:when,
              s(:const, nil, :Numeric),
              s(:send,
                s(:lvar, :object), :to_f)),
            s(:begin,
              s(:lvasgn, :str,
                s(:send, nil, :string,
                  s(:lvar, :object))),
              s(:if,
                s(:send,
                  s(:lvar, :str), :=~,
                  s(:regexp,
                    s(:str, "^\\s*-?(\\d*\\.?\\d+|\\d+\\.)\\s*$"),
                    s(:regopt))),
                s(:send,
                  s(:lvar, :str), :to_f),
                s(:begin,
                  s(:send,
                    s(:float, 0.0), :/,
                    s(:float, 0.0)))))))),
      s(:defs,
        s(:const, nil, :Functions), :sum,
        s(:args,
          s(:arg, :nodes)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :nodes), :kind_of?,
              s(:const, nil, :Array)), nil,
            s(:lvasgn, :nodes,
              s(:array,
                s(:lvar, :nodes)))),
          s(:block,
            s(:send,
              s(:lvar, :nodes), :inject,
              s(:int, 0)),
            s(:args,
              s(:arg, :r),
              s(:arg, :n)),
            s(:send,
              s(:lvar, :r), :+,
              s(:send, nil, :number,
                s(:send, nil, :string,
                  s(:lvar, :n))))))),
      s(:defs,
        s(:const, nil, :Functions), :floor,
        s(:args,
          s(:arg, :number)),
        s(:send,
          s(:send, nil, :number,
            s(:lvar, :number)), :floor)),
      s(:defs,
        s(:const, nil, :Functions), :ceiling,
        s(:args,
          s(:arg, :number)),
        s(:send,
          s(:send, nil, :number,
            s(:lvar, :number)), :ceil)),
      s(:defs,
        s(:const, nil, :Functions), :round,
        s(:args,
          s(:arg, :number)),
        s(:kwbegin,
          s(:rescue,
            s(:send,
              s(:send, nil, :number,
                s(:lvar, :number)), :round),
            s(:resbody,
              s(:array,
                s(:const, nil, :FloatDomainError)), nil,
              s(:send, nil, :number,
                s(:lvar, :number))), nil))),
      s(:defs,
        s(:const, nil, :Functions), :processing_instruction,
        s(:args,
          s(:arg, :node)),
        s(:send,
          s(:send,
            s(:lvar, :node), :node_type), :==,
          s(:sym, :processing_instruction))),
      s(:defs,
        s(:const, nil, :Functions), :method_missing,
        s(:args,
          s(:arg, :id)),
        s(:begin,
          s(:send, nil, :puts,
            s(:dstr,
              s(:str, "METHOD MISSING "),
              s(:begin,
                s(:send,
                  s(:lvar, :id), :id2name)))),
          s(:send,
            s(:const, nil, :XPath), :match,
            s(:send,
              s(:cvar, :@@context), :[],
              s(:sym, :node)),
            s(:send,
              s(:lvar, :id), :id2name)))))))
