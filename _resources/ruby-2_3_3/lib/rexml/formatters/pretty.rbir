s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/formatters/default")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Formatters),
      s(:class,
        s(:const, nil, :Pretty),
        s(:const, nil, :Default),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :compact)),
          s(:send, nil, :attr_accessor,
            s(:sym, :width)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :indentation,
                s(:int, 2)),
              s(:optarg, :ie_hack,
                s(:false))),
            s(:begin,
              s(:ivasgn, :@indentation,
                s(:lvar, :indentation)),
              s(:ivasgn, :@level,
                s(:int, 0)),
              s(:ivasgn, :@ie_hack,
                s(:lvar, :ie_hack)),
              s(:ivasgn, :@width,
                s(:int, 80)),
              s(:ivasgn, :@compact,
                s(:false)))),
          s(:send, nil, :protected),
          s(:def, :write_element,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:begin,
              s(:send,
                s(:lvar, :output), :<<,
                s(:send,
                  s(:str, " "), :*,
                  s(:ivar, :@level))),
              s(:send,
                s(:lvar, :output), :<<,
                s(:dstr,
                  s(:str, "<"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :node), :expanded_name)))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :attributes), :empty?), nil,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :node), :attributes), :each_attribute),
                  s(:args,
                    s(:arg, :attr)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :output), :<<,
                      s(:str, " ")),
                    s(:send,
                      s(:lvar, :attr), :write,
                      s(:lvar, :output))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :children), :empty?),
                s(:begin,
                  s(:if,
                    s(:ivar, :@ie_hack),
                    s(:send,
                      s(:lvar, :output), :<<,
                      s(:str, " ")), nil),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, "/"))),
                s(:begin,
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, ">")),
                  s(:lvasgn, :skip,
                    s(:false)),
                  s(:if,
                    s(:send, nil, :compact),
                    s(:if,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :children), :inject,
                          s(:true)),
                        s(:args,
                          s(:arg, :s),
                          s(:arg, :c)),
                        s(:send,
                          s(:lvar, :s), :&,
                          s(:send,
                            s(:lvar, :c), :kind_of?,
                            s(:const, nil, :Text)))),
                      s(:begin,
                        s(:lvasgn, :string,
                          s(:str, "")),
                        s(:lvasgn, :old_level,
                          s(:ivar, :@level)),
                        s(:ivasgn, :@level,
                          s(:int, 0)),
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :node), :children), :each),
                          s(:args,
                            s(:arg, :child)),
                          s(:send, nil, :write,
                            s(:lvar, :child),
                            s(:lvar, :string))),
                        s(:ivasgn, :@level,
                          s(:lvar, :old_level)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :string), :length), :<,
                            s(:ivar, :@width)),
                          s(:begin,
                            s(:send,
                              s(:lvar, :output), :<<,
                              s(:lvar, :string)),
                            s(:lvasgn, :skip,
                              s(:true))), nil)), nil), nil),
                  s(:if,
                    s(:lvar, :skip), nil,
                    s(:begin,
                      s(:send,
                        s(:lvar, :output), :<<,
                        s(:str, "\n")),
                      s(:op_asgn,
                        s(:ivasgn, :@level), :+,
                        s(:ivar, :@indentation)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :children), :each),
                        s(:args,
                          s(:arg, :child)),
                        s(:begin,
                          s(:if,
                            s(:and,
                              s(:send,
                                s(:lvar, :child), :kind_of?,
                                s(:const, nil, :Text)),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :child), :to_s), :strip), :length), :==,
                                s(:int, 0))),
                            s(:next), nil),
                          s(:send, nil, :write,
                            s(:lvar, :child),
                            s(:lvar, :output)),
                          s(:send,
                            s(:lvar, :output), :<<,
                            s(:str, "\n")))),
                      s(:op_asgn,
                        s(:ivasgn, :@level), :-,
                        s(:ivar, :@indentation)),
                      s(:send,
                        s(:lvar, :output), :<<,
                        s(:send,
                          s(:str, " "), :*,
                          s(:ivar, :@level))))),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:dstr,
                      s(:str, "</"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :node), :expanded_name)))))),
              s(:send,
                s(:lvar, :output), :<<,
                s(:str, ">")))),
          s(:def, :write_text,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :node), :to_s)),
              s(:send,
                s(:lvar, :s), :gsub!,
                s(:regexp,
                  s(:str, "\\s"),
                  s(:regopt)),
                s(:str, " ")),
              s(:send,
                s(:lvar, :s), :squeeze!,
                s(:str, " ")),
              s(:lvasgn, :s,
                s(:send, nil, :wrap,
                  s(:lvar, :s),
                  s(:send,
                    s(:ivar, :@width), :-,
                    s(:ivar, :@level)))),
              s(:lvasgn, :s,
                s(:send, nil, :indent_text,
                  s(:lvar, :s),
                  s(:ivar, :@level),
                  s(:str, " "),
                  s(:true))),
              s(:send,
                s(:lvar, :output), :<<,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:str, " "), :*,
                      s(:ivar, :@level)), :+,
                    s(:lvar, :s)))))),
          s(:def, :write_comment,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:begin,
              s(:send,
                s(:lvar, :output), :<<,
                s(:send,
                  s(:str, " "), :*,
                  s(:ivar, :@level))),
              s(:zsuper))),
          s(:def, :write_cdata,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:begin,
              s(:send,
                s(:lvar, :output), :<<,
                s(:send,
                  s(:str, " "), :*,
                  s(:ivar, :@level))),
              s(:zsuper))),
          s(:def, :write_document,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :node), :children), :each),
              s(:args,
                s(:arg, :child)),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :child), :==,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :children), :[],
                        s(:int, -1))),
                    s(:send,
                      s(:lvar, :child), :instance_of?,
                      s(:const, nil, :Text))),
                  s(:next), nil),
                s(:if,
                  s(:or,
                    s(:or,
                      s(:send,
                        s(:lvar, :child), :==,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :children), :[],
                          s(:int, 0))),
                      s(:send,
                        s(:lvar, :child), :instance_of?,
                        s(:const, nil, :Text))),
                    s(:begin,
                      s(:and,
                        s(:send,
                          s(:lvar, :child), :==,
                          s(:send,
                            s(:send,
                              s(:lvar, :node), :children), :[],
                            s(:int, 1))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :children), :[],
                              s(:int, 0)), :writethis), :!)))), nil,
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, "\n"))),
                s(:send, nil, :write,
                  s(:lvar, :child),
                  s(:lvar, :output))))),
          s(:send, nil, :private),
          s(:def, :indent_text,
            s(:args,
              s(:arg, :string),
              s(:optarg, :level,
                s(:int, 1)),
              s(:optarg, :style,
                s(:str, "\t")),
              s(:optarg, :indentfirstline,
                s(:true))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :level), :<,
                  s(:int, 0)),
                s(:return,
                  s(:lvar, :string)), nil),
              s(:send,
                s(:lvar, :string), :gsub,
                s(:regexp,
                  s(:str, "\\n"),
                  s(:regopt)),
                s(:dstr,
                  s(:str, "\n"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :style), :*,
                      s(:lvar, :level))))))),
          s(:def, :wrap,
            s(:args,
              s(:arg, :string),
              s(:arg, :width)),
            s(:begin,
              s(:lvasgn, :parts,
                s(:array)),
              s(:while,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :string), :length), :>,
                    s(:lvar, :width)),
                  s(:lvasgn, :place,
                    s(:send,
                      s(:lvar, :string), :rindex,
                      s(:str, " "),
                      s(:lvar, :width)))),
                s(:begin,
                  s(:send,
                    s(:lvar, :parts), :<<,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:erange,
                        s(:int, 0),
                        s(:lvar, :place)))),
                  s(:lvasgn, :string,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:irange,
                        s(:send,
                          s(:lvar, :place), :+,
                          s(:int, 1)),
                        s(:int, -1)))))),
              s(:send,
                s(:lvar, :parts), :<<,
                s(:lvar, :string)),
              s(:send,
                s(:lvar, :parts), :join,
                s(:str, "\n")))))))))
