s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/formatters/pretty")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Formatters),
      s(:class,
        s(:const, nil, :Transitive),
        s(:const, nil, :Default),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :indentation,
                s(:int, 2)),
              s(:optarg, :ie_hack,
                s(:false))),
            s(:begin,
              s(:ivasgn, :@indentation,
                s(:lvar, :indentation)),
              s(:ivasgn, :@level,
                s(:int, 0)),
              s(:ivasgn, :@ie_hack,
                s(:lvar, :ie_hack)))),
          s(:send, nil, :protected),
          s(:def, :write_element,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:begin,
              s(:send,
                s(:lvar, :output), :<<,
                s(:dstr,
                  s(:str, "<"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :node), :expanded_name)))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :attributes), :empty?), nil,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :node), :attributes), :each_attribute),
                  s(:args,
                    s(:arg, :attr)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :output), :<<,
                      s(:str, " ")),
                    s(:send,
                      s(:lvar, :attr), :write,
                      s(:lvar, :output))))),
              s(:send,
                s(:lvar, :output), :<<,
                s(:str, "\n")),
              s(:send,
                s(:lvar, :output), :<<,
                s(:send,
                  s(:str, " "), :*,
                  s(:ivar, :@level))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :children), :empty?),
                s(:begin,
                  s(:if,
                    s(:ivar, :@ie_hack),
                    s(:send,
                      s(:lvar, :output), :<<,
                      s(:str, " ")), nil),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, "/"))),
                s(:begin,
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, ">")),
                  s(:op_asgn,
                    s(:ivasgn, :@level), :+,
                    s(:ivar, :@indentation)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :children), :each),
                    s(:args,
                      s(:arg, :child)),
                    s(:send, nil, :write,
                      s(:lvar, :child),
                      s(:lvar, :output))),
                  s(:op_asgn,
                    s(:ivasgn, :@level), :-,
                    s(:ivar, :@indentation)),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:dstr,
                      s(:str, "</"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :node), :expanded_name)))),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, "\n")),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:send,
                      s(:str, " "), :*,
                      s(:ivar, :@level))))),
              s(:send,
                s(:lvar, :output), :<<,
                s(:str, ">")))),
          s(:def, :write_text,
            s(:args,
              s(:arg, :node),
              s(:arg, :output)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:lvar, :node), :to_s))))))))
