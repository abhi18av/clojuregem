s(:module,
  s(:const, nil, :REXML),
  s(:module,
    s(:const, nil, :Formatters),
    s(:class,
      s(:const, nil, :Default), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:optarg, :ie_hack,
              s(:false))),
          s(:ivasgn, :@ie_hack,
            s(:lvar, :ie_hack))),
        s(:def, :write,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:case,
            s(:lvar, :node),
            s(:when,
              s(:const, nil, :Document),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :xml_decl), :encoding), :!=,
                      s(:str, "UTF-8")),
                    s(:send,
                      s(:send,
                        s(:lvar, :output), :kind_of?,
                        s(:const, nil, :Output)), :!)),
                  s(:lvasgn, :output,
                    s(:send,
                      s(:const, nil, :Output), :new,
                      s(:lvar, :output),
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :xml_decl), :encoding))), nil),
                s(:send, nil, :write_document,
                  s(:lvar, :node),
                  s(:lvar, :output)))),
            s(:when,
              s(:const, nil, :Element),
              s(:send, nil, :write_element,
                s(:lvar, :node),
                s(:lvar, :output))),
            s(:when,
              s(:const, nil, :Declaration),
              s(:const, nil, :ElementDecl),
              s(:const, nil, :NotationDecl),
              s(:const, nil, :ExternalEntity),
              s(:const, nil, :Entity),
              s(:const, nil, :Attribute),
              s(:const, nil, :AttlistDecl),
              s(:send,
                s(:lvar, :node), :write,
                s(:lvar, :output),
                s(:int, -1))),
            s(:when,
              s(:const, nil, :Instruction),
              s(:send, nil, :write_instruction,
                s(:lvar, :node),
                s(:lvar, :output))),
            s(:when,
              s(:const, nil, :DocType),
              s(:const, nil, :XMLDecl),
              s(:send,
                s(:lvar, :node), :write,
                s(:lvar, :output))),
            s(:when,
              s(:const, nil, :Comment),
              s(:send, nil, :write_comment,
                s(:lvar, :node),
                s(:lvar, :output))),
            s(:when,
              s(:const, nil, :CData),
              s(:send, nil, :write_cdata,
                s(:lvar, :node),
                s(:lvar, :output))),
            s(:when,
              s(:const, nil, :Text),
              s(:send, nil, :write_text,
                s(:lvar, :node),
                s(:lvar, :output))),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :Exception), :new,
                s(:str, "XML FORMATTING ERROR"))))),
        s(:send, nil, :protected),
        s(:def, :write_document,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :node), :children), :each),
            s(:args,
              s(:arg, :child)),
            s(:send, nil, :write,
              s(:lvar, :child),
              s(:lvar, :output)))),
        s(:def, :write_element,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:begin,
            s(:send,
              s(:lvar, :output), :<<,
              s(:dstr,
                s(:str, "<"),
                s(:begin,
                  s(:send,
                    s(:lvar, :node), :expanded_name)))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :node), :attributes), :empty?), nil,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :attributes), :to_a), :map),
                          s(:args,
                            s(:arg, :a)),
                          s(:if,
                            s(:send,
                              s(:const, nil, :Hash), :===,
                              s(:lvar, :a)),
                            s(:send,
                              s(:lvar, :a), :values),
                            s(:lvar, :a))), :flatten), :sort_by),
                    s(:args,
                      s(:arg, :attr)),
                    s(:send,
                      s(:lvar, :attr), :name)), :each),
                s(:args,
                  s(:arg, :attr)),
                s(:begin,
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, " ")),
                  s(:send,
                    s(:lvar, :attr), :write,
                    s(:lvar, :output))))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :node), :children), :empty?),
              s(:begin,
                s(:if,
                  s(:ivar, :@ie_hack),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, " ")), nil),
                s(:send,
                  s(:lvar, :output), :<<,
                  s(:str, "/"))),
              s(:begin,
                s(:send,
                  s(:lvar, :output), :<<,
                  s(:str, ">")),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :node), :children), :each),
                  s(:args,
                    s(:arg, :child)),
                  s(:send, nil, :write,
                    s(:lvar, :child),
                    s(:lvar, :output))),
                s(:send,
                  s(:lvar, :output), :<<,
                  s(:dstr,
                    s(:str, "</"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :node), :expanded_name)))))),
            s(:send,
              s(:lvar, :output), :<<,
              s(:str, ">")))),
        s(:def, :write_text,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:send,
            s(:lvar, :output), :<<,
            s(:send,
              s(:lvar, :node), :to_s))),
        s(:def, :write_comment,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:begin,
            s(:send,
              s(:lvar, :output), :<<,
              s(:const,
                s(:const, nil, :Comment), :START)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:lvar, :node), :to_s)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:const,
                s(:const, nil, :Comment), :STOP)))),
        s(:def, :write_cdata,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:begin,
            s(:send,
              s(:lvar, :output), :<<,
              s(:const,
                s(:const, nil, :CData), :START)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:lvar, :node), :to_s)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:const,
                s(:const, nil, :CData), :STOP)))),
        s(:def, :write_instruction,
          s(:args,
            s(:arg, :node),
            s(:arg, :output)),
          s(:begin,
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :Instruction), :START), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, ""))),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:lvar, :node), :target)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:str, " ")),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:lvar, :node), :content)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :Instruction), :STOP), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, "")))))))))
