s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/parent")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/namespace")),
  s(:send, nil, :require,
    s(:str, "rexml/entity")),
  s(:send, nil, :require,
    s(:str, "rexml/attlistdecl")),
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:module,
    s(:const, nil, :REXML),
    s(:begin,
      s(:class,
        s(:const, nil, :DocType),
        s(:const, nil, :Parent),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :XMLTokens)),
          s(:casgn, nil, :START,
            s(:str, "<!DOCTYPE")),
          s(:casgn, nil, :STOP,
            s(:str, ">")),
          s(:casgn, nil, :SYSTEM,
            s(:str, "SYSTEM")),
          s(:casgn, nil, :PUBLIC,
            s(:str, "PUBLIC")),
          s(:casgn, nil, :DEFAULT_ENTITIES,
            s(:hash,
              s(:pair,
                s(:str, "gt"),
                s(:const,
                  s(:const, nil, :EntityConst), :GT)),
              s(:pair,
                s(:str, "lt"),
                s(:const,
                  s(:const, nil, :EntityConst), :LT)),
              s(:pair,
                s(:str, "quot"),
                s(:const,
                  s(:const, nil, :EntityConst), :QUOT)),
              s(:pair,
                s(:str, "apos"),
                s(:const,
                  s(:const, nil, :EntityConst), :APOS)))),
          s(:send, nil, :attr_reader,
            s(:sym, :name),
            s(:sym, :external_id),
            s(:sym, :entities),
            s(:sym, :namespaces)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :first),
              s(:optarg, :parent,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@entities,
                s(:const, nil, :DEFAULT_ENTITIES)),
              s(:ivasgn, :@long_name,
                s(:ivasgn, :@uri,
                  s(:nil))),
              s(:if,
                s(:send,
                  s(:lvar, :first), :kind_of?,
                  s(:const, nil, :String)),
                s(:begin,
                  s(:super),
                  s(:ivasgn, :@name,
                    s(:lvar, :first)),
                  s(:ivasgn, :@external_id,
                    s(:lvar, :parent))),
                s(:if,
                  s(:send,
                    s(:lvar, :first), :kind_of?,
                    s(:const, nil, :DocType)),
                  s(:begin,
                    s(:super,
                      s(:lvar, :parent)),
                    s(:ivasgn, :@name,
                      s(:send,
                        s(:lvar, :first), :name)),
                    s(:ivasgn, :@external_id,
                      s(:send,
                        s(:lvar, :first), :external_id))),
                  s(:if,
                    s(:send,
                      s(:lvar, :first), :kind_of?,
                      s(:const, nil, :Array)),
                    s(:begin,
                      s(:super,
                        s(:lvar, :parent)),
                      s(:ivasgn, :@name,
                        s(:send,
                          s(:lvar, :first), :[],
                          s(:int, 0))),
                      s(:ivasgn, :@external_id,
                        s(:send,
                          s(:lvar, :first), :[],
                          s(:int, 1))),
                      s(:ivasgn, :@long_name,
                        s(:send,
                          s(:lvar, :first), :[],
                          s(:int, 2))),
                      s(:ivasgn, :@uri,
                        s(:send,
                          s(:lvar, :first), :[],
                          s(:int, 3)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :first), :kind_of?,
                        s(:const, nil, :Source)),
                      s(:begin,
                        s(:super,
                          s(:lvar, :parent)),
                        s(:lvasgn, :parser,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Parsers), :BaseParser), :new,
                            s(:lvar, :first))),
                        s(:lvasgn, :event,
                          s(:send,
                            s(:lvar, :parser), :pull)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 0)), :==,
                            s(:sym, :start_doctype)),
                          s(:masgn,
                            s(:mlhs,
                              s(:ivasgn, :@name),
                              s(:ivasgn, :@external_id),
                              s(:ivasgn, :@long_name),
                              s(:ivasgn, :@uri)),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1)))), nil)),
                      s(:super))))))),
          s(:def, :node_type,
            s(:args),
            s(:sym, :doctype)),
          s(:def, :attributes_of,
            s(:args,
              s(:arg, :element)),
            s(:begin,
              s(:lvasgn, :rv,
                s(:array)),
              s(:block,
                s(:send, nil, :each),
                s(:args,
                  s(:arg, :child)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :child), :kind_of?,
                      s(:const, nil, :AttlistDecl)),
                    s(:send,
                      s(:send,
                        s(:lvar, :child), :element_name), :==,
                      s(:lvar, :element))),
                  s(:block,
                    s(:send,
                      s(:lvar, :child), :each),
                    s(:args,
                      s(:arg, :key),
                      s(:arg, :val)),
                    s(:send,
                      s(:lvar, :rv), :<<,
                      s(:send,
                        s(:const, nil, :Attribute), :new,
                        s(:lvar, :key),
                        s(:lvar, :val)))), nil)),
              s(:lvar, :rv))),
          s(:def, :attribute_of,
            s(:args,
              s(:arg, :element),
              s(:arg, :attribute)),
            s(:begin,
              s(:lvasgn, :att_decl,
                s(:block,
                  s(:send, nil, :find),
                  s(:args,
                    s(:arg, :child)),
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:lvar, :child), :kind_of?,
                        s(:const, nil, :AttlistDecl)),
                      s(:send,
                        s(:send,
                          s(:lvar, :child), :element_name), :==,
                        s(:lvar, :element))),
                    s(:send,
                      s(:lvar, :child), :include?,
                      s(:lvar, :attribute))))),
              s(:if,
                s(:lvar, :att_decl), nil,
                s(:return,
                  s(:nil))),
              s(:send,
                s(:lvar, :att_decl), :[],
                s(:lvar, :attribute)))),
          s(:def, :clone,
            s(:args),
            s(:send,
              s(:const, nil, :DocType), :new,
              s(:self))),
          s(:def, :write,
            s(:args,
              s(:arg, :output),
              s(:optarg, :indent,
                s(:int, 0)),
              s(:optarg, :transitive,
                s(:false)),
              s(:optarg, :ie_hack,
                s(:false))),
            s(:begin,
              s(:lvasgn, :f,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Formatters), :Default), :new)),
              s(:send, nil, :indent,
                s(:lvar, :output),
                s(:lvar, :indent)),
              s(:send,
                s(:lvar, :output), :<<,
                s(:const, nil, :START)),
              s(:send,
                s(:lvar, :output), :<<,
                s(:str, " ")),
              s(:send,
                s(:lvar, :output), :<<,
                s(:ivar, :@name)),
              s(:if,
                s(:ivar, :@external_id),
                s(:send,
                  s(:lvar, :output), :<<,
                  s(:dstr,
                    s(:str, " "),
                    s(:ivar, :@external_id))), nil),
              s(:if,
                s(:ivar, :@long_name),
                s(:send,
                  s(:lvar, :output), :<<,
                  s(:dstr,
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@long_name), :inspect)))), nil),
              s(:if,
                s(:ivar, :@uri),
                s(:send,
                  s(:lvar, :output), :<<,
                  s(:dstr,
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@uri), :inspect)))), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@children), :empty?), nil,
                s(:begin,
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, " [")),
                  s(:block,
                    s(:send,
                      s(:ivar, :@children), :each),
                    s(:args,
                      s(:arg, :child)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :output), :<<,
                        s(:str, "\n")),
                      s(:send,
                        s(:lvar, :f), :write,
                        s(:lvar, :child),
                        s(:lvar, :output)))),
                  s(:send,
                    s(:lvar, :output), :<<,
                    s(:str, "\n]")))),
              s(:send,
                s(:lvar, :output), :<<,
                s(:const, nil, :STOP)))),
          s(:def, :context,
            s(:args),
            s(:send,
              s(:ivar, :@parent), :context)),
          s(:def, :entity,
            s(:args,
              s(:arg, :name)),
            s(:if,
              s(:send,
                s(:ivar, :@entities), :[],
                s(:lvar, :name)),
              s(:send,
                s(:send,
                  s(:ivar, :@entities), :[],
                  s(:lvar, :name)), :unnormalized), nil)),
          s(:def, :add,
            s(:args,
              s(:arg, :child)),
            s(:begin,
              s(:super,
                s(:lvar, :child)),
              s(:if,
                s(:send,
                  s(:ivar, :@entities), :==,
                  s(:const, nil, :DEFAULT_ENTITIES)),
                s(:ivasgn, :@entities,
                  s(:send,
                    s(:const, nil, :DEFAULT_ENTITIES), :clone)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :child), :kind_of?,
                  s(:const, nil, :Entity)),
                s(:send,
                  s(:ivar, :@entities), :[]=,
                  s(:send,
                    s(:lvar, :child), :name),
                  s(:lvar, :child)), nil))),
          s(:def, :public,
            s(:args),
            s(:case,
              s(:ivar, :@external_id),
              s(:when,
                s(:str, "SYSTEM"),
                s(:nil)),
              s(:when,
                s(:str, "PUBLIC"),
                s(:send, nil, :strip_quotes,
                  s(:ivar, :@long_name))), nil)),
          s(:def, :system,
            s(:args),
            s(:case,
              s(:ivar, :@external_id),
              s(:when,
                s(:str, "SYSTEM"),
                s(:send, nil, :strip_quotes,
                  s(:ivar, :@long_name))),
              s(:when,
                s(:str, "PUBLIC"),
                s(:if,
                  s(:send,
                    s(:ivar, :@uri), :kind_of?,
                    s(:const, nil, :String)),
                  s(:send, nil, :strip_quotes,
                    s(:ivar, :@uri)),
                  s(:nil))), nil)),
          s(:def, :notations,
            s(:args),
            s(:block,
              s(:send,
                s(:send, nil, :children), :select),
              s(:args,
                s(:arg, :node)),
              s(:send,
                s(:lvar, :node), :kind_of?,
                s(:const,
                  s(:const, nil, :REXML), :NotationDecl)))),
          s(:def, :notation,
            s(:args,
              s(:arg, :name)),
            s(:block,
              s(:send,
                s(:send, nil, :notations), :find),
              s(:args,
                s(:arg, :notation_decl)),
              s(:send,
                s(:send,
                  s(:lvar, :notation_decl), :name), :==,
                s(:lvar, :name)))),
          s(:send, nil, :private),
          s(:def, :strip_quotes,
            s(:args,
              s(:arg, :quoted_string)),
            s(:if,
              s(:send,
                s(:lvar, :quoted_string), :=~,
                s(:regexp,
                  s(:str, "^[\\'\\\"].*[\\'\\\"]$"),
                  s(:regopt))),
              s(:send,
                s(:lvar, :quoted_string), :[],
                s(:int, 1),
                s(:send,
                  s(:send,
                    s(:lvar, :quoted_string), :length), :-,
                  s(:int, 2))),
              s(:lvar, :quoted_string))))),
      s(:class,
        s(:const, nil, :Declaration),
        s(:const, nil, :Child),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:super),
              s(:ivasgn, :@string,
                s(:lvar, :src)))),
          s(:def, :to_s,
            s(:args),
            s(:send,
              s(:ivar, :@string), :+,
              s(:str, ">"))),
          s(:def, :write,
            s(:args,
              s(:arg, :output),
              s(:arg, :indent)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send, nil, :to_s))))),
      s(:send, nil, :public),
      s(:class,
        s(:const, nil, :ElementDecl),
        s(:const, nil, :Declaration),
        s(:def, :initialize,
          s(:args,
            s(:arg, :src)),
          s(:zsuper))),
      s(:class,
        s(:const, nil, :ExternalEntity),
        s(:const, nil, :Child),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:super),
              s(:ivasgn, :@entity,
                s(:lvar, :src)))),
          s(:def, :to_s,
            s(:args),
            s(:ivar, :@entity)),
          s(:def, :write,
            s(:args,
              s(:arg, :output),
              s(:arg, :indent)),
            s(:send,
              s(:lvar, :output), :<<,
              s(:ivar, :@entity))))),
      s(:class,
        s(:const, nil, :NotationDecl),
        s(:const, nil, :Child),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :public),
            s(:sym, :system)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :name),
              s(:arg, :middle),
              s(:arg, :pub),
              s(:arg, :sys)),
            s(:begin,
              s(:super,
                s(:nil)),
              s(:ivasgn, :@name,
                s(:lvar, :name)),
              s(:ivasgn, :@middle,
                s(:lvar, :middle)),
              s(:ivasgn, :@public,
                s(:lvar, :pub)),
              s(:ivasgn, :@system,
                s(:lvar, :sys)))),
          s(:def, :to_s,
            s(:args),
            s(:begin,
              s(:lvasgn, :notation,
                s(:dstr,
                  s(:str, "<!NOTATION "),
                  s(:begin,
                    s(:ivar, :@name)),
                  s(:str, " "),
                  s(:begin,
                    s(:ivar, :@middle)))),
              s(:if,
                s(:ivar, :@public),
                s(:send,
                  s(:lvar, :notation), :<<,
                  s(:dstr,
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@public), :inspect)))), nil),
              s(:if,
                s(:ivar, :@system),
                s(:send,
                  s(:lvar, :notation), :<<,
                  s(:dstr,
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@system), :inspect)))), nil),
              s(:send,
                s(:lvar, :notation), :<<,
                s(:str, ">")),
              s(:lvar, :notation))),
          s(:def, :write,
            s(:args,
              s(:arg, :output),
              s(:optarg, :indent,
                s(:int, -1))),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send, nil, :to_s))),
          s(:def, :name,
            s(:args),
            s(:ivar, :@name)))))))
