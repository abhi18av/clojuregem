s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/security")),
  s(:send, nil, :require,
    s(:str, "rexml/entity")),
  s(:send, nil, :require,
    s(:str, "rexml/doctype")),
  s(:send, nil, :require,
    s(:str, "rexml/child")),
  s(:send, nil, :require,
    s(:str, "rexml/doctype")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:module,
    s(:const, nil, :REXML),
    s(:class,
      s(:const, nil, :Text),
      s(:const, nil, :Child),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :Comparable)),
        s(:casgn, nil, :SPECIALS,
          s(:array,
            s(:regexp,
              s(:str, "&(?!#?[\\w-]+;)"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "<"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, ">"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "\""),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "'"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "\\r"),
              s(:regopt, :u)))),
        s(:casgn, nil, :SUBSTITUTES,
          s(:array,
            s(:str, "&amp;"),
            s(:str, "&lt;"),
            s(:str, "&gt;"),
            s(:str, "&quot;"),
            s(:str, "&apos;"),
            s(:str, "&#13;"))),
        s(:casgn, nil, :SLAICEPS,
          s(:array,
            s(:str, "<"),
            s(:str, ">"),
            s(:str, "\""),
            s(:str, "'"),
            s(:str, "&"))),
        s(:casgn, nil, :SETUTITSBUS,
          s(:array,
            s(:regexp,
              s(:str, "&lt;"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "&gt;"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "&quot;"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "&apos;"),
              s(:regopt, :u)),
            s(:regexp,
              s(:str, "&amp;"),
              s(:regopt, :u)))),
        s(:send, nil, :attr_accessor,
          s(:sym, :raw)),
        s(:casgn, nil, :NEEDS_A_SECOND_CHECK,
          s(:regexp,
            s(:str, "(<|&(("),
            s(:begin,
              s(:const,
                s(:const, nil, :Entity), :NAME)),
            s(:str, ");|(#0*((?:\\d+)|(?:x[a-fA-F0-9]+)));)?)"),
            s(:regopt, :m, :u))),
        s(:casgn, nil, :NUMERICENTITY,
          s(:regexp,
            s(:str, "&#0*((?:\\d+)|(?:x[a-fA-F0-9]+));"),
            s(:regopt))),
        s(:casgn, nil, :VALID_CHAR,
          s(:array,
            s(:int, 9),
            s(:int, 10),
            s(:int, 13),
            s(:begin,
              s(:irange,
                s(:int, 32),
                s(:int, 55295))),
            s(:begin,
              s(:irange,
                s(:int, 57344),
                s(:int, 65533))),
            s(:begin,
              s(:irange,
                s(:int, 65536),
                s(:int, 1114111))))),
        s(:if,
          s(:send,
            s(:const, nil, :String), :method_defined?,
            s(:sym, :encode)),
          s(:casgn, nil, :VALID_XML_CHARS,
            s(:send,
              s(:const, nil, :Regexp), :new,
              s(:send,
                s(:send,
                  s(:str, "^["), :+,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :VALID_CHAR), :map),
                      s(:args,
                        s(:arg, :item)),
                      s(:case,
                        s(:lvar, :item),
                        s(:when,
                          s(:const, nil, :Fixnum),
                          s(:send,
                            s(:send,
                              s(:array,
                                s(:lvar, :item)), :pack,
                              s(:str, "U")), :force_encoding,
                            s(:str, "utf-8"))),
                        s(:when,
                          s(:const, nil, :Range),
                          s(:send,
                            s(:send,
                              s(:array,
                                s(:send,
                                  s(:lvar, :item), :first),
                                s(:send,
                                  s(:str, "-"), :ord),
                                s(:send,
                                  s(:lvar, :item), :last)), :pack,
                              s(:str, "UUU")), :force_encoding,
                            s(:str, "utf-8"))), nil)), :join)), :+,
                s(:str, "]*$")))),
          s(:casgn, nil, :VALID_XML_CHARS,
            s(:regexp,
              s(:str, "^(\n"),
              s(:str, "           [\\x09\\x0A\\x0D\\x20-\\x7E]            # ASCII\n"),
              s(:str, "         | [\\xC2-\\xDF][\\x80-\\xBF]             # non-overlong 2-byte\n"),
              s(:str, "         |  \\xE0[\\xA0-\\xBF][\\x80-\\xBF]        # excluding overlongs\n"),
              s(:str, "         | [\\xE1-\\xEC\\xEE][\\x80-\\xBF]{2}      # straight 3-byte\n"),
              s(:str, "         |  \\xEF[\\x80-\\xBE]{2}                #\n"),
              s(:str, "         |  \\xEF\\xBF[\\x80-\\xBD]               # excluding U+fffe and U+ffff\n"),
              s(:str, "         |  \\xED[\\x80-\\x9F][\\x80-\\xBF]        # excluding surrogates\n"),
              s(:str, "         |  \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}     # planes 1-3\n"),
              s(:str, "         | [\\xF1-\\xF3][\\x80-\\xBF]{3}          # planes 4-15\n"),
              s(:str, "         |  \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}     # plane 16\n"),
              s(:str, "       )*$"),
              s(:regopt, :n, :x)))),
        s(:def, :initialize,
          s(:args,
            s(:arg, :arg),
            s(:optarg, :respect_whitespace,
              s(:false)),
            s(:optarg, :parent,
              s(:nil)),
            s(:optarg, :raw,
              s(:nil)),
            s(:optarg, :entity_filter,
              s(:nil)),
            s(:optarg, :illegal,
              s(:const, nil, :NEEDS_A_SECOND_CHECK))),
          s(:begin,
            s(:ivasgn, :@raw,
              s(:false)),
            s(:ivasgn, :@parent,
              s(:nil)),
            s(:if,
              s(:lvar, :parent),
              s(:begin,
                s(:super,
                  s(:lvar, :parent)),
                s(:ivasgn, :@raw,
                  s(:send,
                    s(:lvar, :parent), :raw))), nil),
            s(:if,
              s(:send,
                s(:lvar, :raw), :nil?), nil,
              s(:ivasgn, :@raw,
                s(:lvar, :raw))),
            s(:ivasgn, :@entity_filter,
              s(:lvar, :entity_filter)),
            s(:send, nil, :clear_cache),
            s(:if,
              s(:send,
                s(:lvar, :arg), :kind_of?,
                s(:const, nil, :String)),
              s(:begin,
                s(:ivasgn, :@string,
                  s(:send,
                    s(:lvar, :arg), :dup)),
                s(:if,
                  s(:lvar, :respect_whitespace), nil,
                  s(:send,
                    s(:ivar, :@string), :squeeze!,
                    s(:str, " \n\t")))),
              s(:if,
                s(:send,
                  s(:lvar, :arg), :kind_of?,
                  s(:const, nil, :Text)),
                s(:begin,
                  s(:ivasgn, :@string,
                    s(:send,
                      s(:lvar, :arg), :to_s)),
                  s(:ivasgn, :@raw,
                    s(:send,
                      s(:lvar, :arg), :raw))),
                s(:if,
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "Illegal argument of type "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :arg), :type)),
                      s(:str, " for Text constructor ("),
                      s(:begin,
                        s(:lvar, :arg)),
                      s(:str, ")"))), nil, nil))),
            s(:send,
              s(:ivar, :@string), :gsub!,
              s(:regexp,
                s(:str, "\\r\\n?"),
                s(:regopt)),
              s(:str, "\n")),
            s(:if,
              s(:ivar, :@raw),
              s(:send,
                s(:const, nil, :Text), :check,
                s(:ivar, :@string),
                s(:lvar, :illegal),
                s(:send, nil, :doctype)), nil))),
        s(:def, :parent=,
          s(:args,
            s(:arg, :parent)),
          s(:begin,
            s(:super,
              s(:lvar, :parent)),
            s(:if,
              s(:and,
                s(:ivar, :@raw),
                s(:ivar, :@parent)),
              s(:send,
                s(:const, nil, :Text), :check,
                s(:ivar, :@string),
                s(:const, nil, :NEEDS_A_SECOND_CHECK),
                s(:send, nil, :doctype)), nil))),
        s(:defs,
          s(:const, nil, :Text), :check,
          s(:args,
            s(:arg, :string),
            s(:arg, :pattern),
            s(:arg, :doctype)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :string), :!~,
                s(:const, nil, :VALID_XML_CHARS)),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :method_defined?,
                  s(:sym, :encode)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :string), :chars), :each),
                  s(:args,
                    s(:arg, :c)),
                  s(:case,
                    s(:send,
                      s(:lvar, :c), :ord),
                    s(:when,
                      s(:splat,
                        s(:const, nil, :VALID_CHAR)), nil),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "Illegal character "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :c), :inspect)),
                        s(:str, " in raw string \""),
                        s(:begin,
                          s(:lvar, :string)),
                        s(:str, "\""))))),
                s(:block,
                  s(:send,
                    s(:lvar, :string), :scan,
                    s(:regexp,
                      s(:str, "[\\x00-\\x7F]|[\\x80-\\xBF][\\xC0-\\xF0]*|[\\xC0-\\xF0]"),
                      s(:regopt, :n))),
                  s(:args,
                    s(:arg, :c)),
                  s(:case,
                    s(:send,
                      s(:lvar, :c), :unpack,
                      s(:str, "U")),
                    s(:when,
                      s(:splat,
                        s(:const, nil, :VALID_CHAR)), nil),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "Illegal character "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :c), :inspect)),
                        s(:str, " in raw string \""),
                        s(:begin,
                          s(:lvar, :string)),
                        s(:str, "\"")))))), nil),
            s(:block,
              s(:send,
                s(:lvar, :string), :scan,
                s(:lvar, :pattern)),
              s(:args),
              s(:if,
                s(:send,
                  s(:send,
                    s(:nth_ref, 1), :[],
                    s(:int, -1)), :!=,
                  s(:str, ";")),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Illegal character '"),
                    s(:begin,
                      s(:nth_ref, 1)),
                    s(:str, "' in raw string \""),
                    s(:begin,
                      s(:lvar, :string)),
                    s(:str, "\""))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:nth_ref, 1), :[],
                      s(:int, 0)), :==,
                    s(:str, "&")),
                  s(:if,
                    s(:and,
                      s(:nth_ref, 5),
                      s(:send,
                        s(:send,
                          s(:nth_ref, 5), :[],
                          s(:int, 0)), :==,
                        s(:str, "#"))),
                    s(:case,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:nth_ref, 5), :[],
                              s(:int, 1)), :==,
                            s(:str, "x")),
                          s(:send,
                            s(:send,
                              s(:nth_ref, 5), :[],
                              s(:irange,
                                s(:int, 2),
                                s(:int, -1))), :to_i,
                            s(:int, 16)),
                          s(:send,
                            s(:send,
                              s(:nth_ref, 5), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1))), :to_i))),
                      s(:when,
                        s(:splat,
                          s(:const, nil, :VALID_CHAR)), nil),
                      s(:send, nil, :raise,
                        s(:dstr,
                          s(:str, "Illegal character '"),
                          s(:begin,
                            s(:nth_ref, 1)),
                          s(:str, "' in raw string \""),
                          s(:begin,
                            s(:lvar, :string)),
                          s(:str, "\"")))), nil), nil))))),
        s(:def, :node_type,
          s(:args),
          s(:sym, :text)),
        s(:def, :empty?,
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@string), :size), :==,
            s(:int, 0))),
        s(:def, :clone,
          s(:args),
          s(:return,
            s(:send,
              s(:const, nil, :Text), :new,
              s(:self)))),
        s(:def, :<<,
          s(:args,
            s(:arg, :to_append)),
          s(:begin,
            s(:send,
              s(:ivar, :@string), :<<,
              s(:send,
                s(:lvar, :to_append), :gsub,
                s(:regexp,
                  s(:str, "\\r\\n?"),
                  s(:regopt)),
                s(:str, "\n"))),
            s(:send, nil, :clear_cache),
            s(:self))),
        s(:def, :<=>,
          s(:args,
            s(:arg, :other)),
          s(:send,
            s(:send, nil, :to_s), :<=>,
            s(:send,
              s(:lvar, :other), :to_s))),
        s(:def, :doctype,
          s(:args),
          s(:if,
            s(:ivar, :@parent),
            s(:begin,
              s(:lvasgn, :doc,
                s(:send,
                  s(:ivar, :@parent), :document)),
              s(:if,
                s(:lvar, :doc),
                s(:send,
                  s(:lvar, :doc), :doctype), nil)), nil)),
        s(:casgn, nil, :REFERENCE,
          s(:regexp,
            s(:begin,
              s(:const,
                s(:const, nil, :Entity), :REFERENCE)),
            s(:regopt))),
        s(:def, :to_s,
          s(:args),
          s(:begin,
            s(:if,
              s(:ivar, :@raw),
              s(:return,
                s(:ivar, :@string)), nil),
            s(:if,
              s(:ivar, :@normalized),
              s(:return,
                s(:ivar, :@normalized)), nil),
            s(:ivasgn, :@normalized,
              s(:send,
                s(:const, nil, :Text), :normalize,
                s(:ivar, :@string),
                s(:send, nil, :doctype),
                s(:ivar, :@entity_filter))))),
        s(:def, :inspect,
          s(:args),
          s(:send,
            s(:ivar, :@string), :inspect)),
        s(:def, :value,
          s(:args),
          s(:begin,
            s(:if,
              s(:ivar, :@unnormalized),
              s(:return,
                s(:ivar, :@unnormalized)), nil),
            s(:ivasgn, :@unnormalized,
              s(:send,
                s(:const, nil, :Text), :unnormalize,
                s(:ivar, :@string),
                s(:send, nil, :doctype))))),
        s(:def, :value=,
          s(:args,
            s(:arg, :val)),
          s(:begin,
            s(:ivasgn, :@string,
              s(:send,
                s(:lvar, :val), :gsub,
                s(:regexp,
                  s(:str, "\\r\\n?"),
                  s(:regopt)),
                s(:str, "\n"))),
            s(:send, nil, :clear_cache),
            s(:ivasgn, :@raw,
              s(:false)))),
        s(:def, :wrap,
          s(:args,
            s(:arg, :string),
            s(:arg, :width),
            s(:optarg, :addnewline,
              s(:false))),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :string), :length), :<=,
                s(:lvar, :width)),
              s(:return,
                s(:lvar, :string)), nil),
            s(:lvasgn, :place,
              s(:send,
                s(:lvar, :string), :rindex,
                s(:str, " "),
                s(:lvar, :width))),
            s(:if,
              s(:lvar, :addnewline),
              s(:return,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "\n"), :+,
                      s(:send,
                        s(:lvar, :string), :[],
                        s(:int, 0),
                        s(:lvar, :place))), :+,
                    s(:str, "\n")), :+,
                  s(:send, nil, :wrap,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:irange,
                        s(:send,
                          s(:lvar, :place), :+,
                          s(:int, 1)),
                        s(:int, -1))),
                    s(:lvar, :width)))),
              s(:return,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:int, 0),
                      s(:lvar, :place)), :+,
                    s(:str, "\n")), :+,
                  s(:send, nil, :wrap,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:irange,
                        s(:send,
                          s(:lvar, :place), :+,
                          s(:int, 1)),
                        s(:int, -1))),
                    s(:lvar, :width))))))),
        s(:def, :indent_text,
          s(:args,
            s(:arg, :string),
            s(:optarg, :level,
              s(:int, 1)),
            s(:optarg, :style,
              s(:str, "\t")),
            s(:optarg, :indentfirstline,
              s(:true))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :level), :<,
                s(:int, 0)),
              s(:return,
                s(:lvar, :string)), nil),
            s(:lvasgn, :new_string,
              s(:str, "")),
            s(:block,
              s(:send,
                s(:lvar, :string), :each_line),
              s(:args,
                s(:arg, :line)),
              s(:begin,
                s(:lvasgn, :indent_string,
                  s(:send,
                    s(:lvar, :style), :*,
                    s(:lvar, :level))),
                s(:lvasgn, :new_line,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :indent_string), :+,
                        s(:lvar, :line))), :sub,
                    s(:regexp,
                      s(:str, "[\\s]+$"),
                      s(:regopt)),
                    s(:str, ""))),
                s(:send,
                  s(:lvar, :new_string), :<<,
                  s(:lvar, :new_line)))),
            s(:if,
              s(:lvar, :indentfirstline), nil,
              s(:send,
                s(:lvar, :new_string), :strip!)),
            s(:return,
              s(:lvar, :new_string)))),
        s(:def, :write,
          s(:args,
            s(:arg, :writer),
            s(:optarg, :indent,
              s(:int, -1)),
            s(:optarg, :transitive,
              s(:false)),
            s(:optarg, :ie_hack,
              s(:false))),
          s(:begin,
            s(:send,
              s(:const, nil, :Kernel), :warn,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:self), :class), :name)),
                s(:str, ".write is deprecated.  See REXML::Formatters"))),
            s(:lvasgn, :formatter,
              s(:if,
                s(:send,
                  s(:lvar, :indent), :>,
                  s(:int, -1)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                  s(:lvar, :indent)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Formatters), :Default), :new))),
            s(:send,
              s(:lvar, :formatter), :write,
              s(:self),
              s(:lvar, :writer)))),
        s(:def, :xpath,
          s(:args),
          s(:begin,
            s(:lvasgn, :path,
              s(:send,
                s(:ivar, :@parent), :xpath)),
            s(:op_asgn,
              s(:lvasgn, :path), :+,
              s(:str, "/text()")),
            s(:return,
              s(:lvar, :path)))),
        s(:def, :write_with_substitution,
          s(:args,
            s(:arg, :out),
            s(:arg, :input)),
          s(:begin,
            s(:lvasgn, :copy,
              s(:send,
                s(:lvar, :input), :clone)),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:send,
                s(:const, nil, :SPECIALS), :[],
                s(:int, 0)),
              s(:send,
                s(:const, nil, :SUBSTITUTES), :[],
                s(:int, 0))),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:send,
                s(:const, nil, :SPECIALS), :[],
                s(:int, 1)),
              s(:send,
                s(:const, nil, :SUBSTITUTES), :[],
                s(:int, 1))),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:send,
                s(:const, nil, :SPECIALS), :[],
                s(:int, 2)),
              s(:send,
                s(:const, nil, :SUBSTITUTES), :[],
                s(:int, 2))),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:send,
                s(:const, nil, :SPECIALS), :[],
                s(:int, 3)),
              s(:send,
                s(:const, nil, :SUBSTITUTES), :[],
                s(:int, 3))),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:send,
                s(:const, nil, :SPECIALS), :[],
                s(:int, 4)),
              s(:send,
                s(:const, nil, :SUBSTITUTES), :[],
                s(:int, 4))),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:send,
                s(:const, nil, :SPECIALS), :[],
                s(:int, 5)),
              s(:send,
                s(:const, nil, :SUBSTITUTES), :[],
                s(:int, 5))),
            s(:send,
              s(:lvar, :out), :<<,
              s(:lvar, :copy)))),
        s(:send, nil, :private),
        s(:def, :clear_cache,
          s(:args),
          s(:begin,
            s(:ivasgn, :@normalized,
              s(:nil)),
            s(:ivasgn, :@unnormalized,
              s(:nil)))),
        s(:defs,
          s(:const, nil, :Text), :read_with_substitution,
          s(:args,
            s(:arg, :input),
            s(:optarg, :illegal,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :copy,
              s(:send,
                s(:lvar, :input), :clone)),
            s(:if,
              s(:lvar, :illegal),
              s(:if,
                s(:send,
                  s(:lvar, :copy), :=~,
                  s(:lvar, :illegal)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :ParseException), :new,
                    s(:dstr,
                      s(:str, "malformed text: Illegal character "),
                      s(:back_ref, :$&),
                      s(:str, " in \""),
                      s(:begin,
                        s(:lvar, :copy)),
                      s(:str, "\"")))), nil), nil),
            s(:send,
              s(:lvar, :copy), :gsub!,
              s(:regexp,
                s(:str, "\\r\\n?"),
                s(:regopt)),
              s(:str, "\n")),
            s(:if,
              s(:send,
                s(:lvar, :copy), :include?,
                s(:str, "&")),
              s(:begin,
                s(:send,
                  s(:lvar, :copy), :gsub!,
                  s(:send,
                    s(:const, nil, :SETUTITSBUS), :[],
                    s(:int, 0)),
                  s(:send,
                    s(:const, nil, :SLAICEPS), :[],
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :copy), :gsub!,
                  s(:send,
                    s(:const, nil, :SETUTITSBUS), :[],
                    s(:int, 1)),
                  s(:send,
                    s(:const, nil, :SLAICEPS), :[],
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :copy), :gsub!,
                  s(:send,
                    s(:const, nil, :SETUTITSBUS), :[],
                    s(:int, 2)),
                  s(:send,
                    s(:const, nil, :SLAICEPS), :[],
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :copy), :gsub!,
                  s(:send,
                    s(:const, nil, :SETUTITSBUS), :[],
                    s(:int, 3)),
                  s(:send,
                    s(:const, nil, :SLAICEPS), :[],
                    s(:int, 3))),
                s(:send,
                  s(:lvar, :copy), :gsub!,
                  s(:send,
                    s(:const, nil, :SETUTITSBUS), :[],
                    s(:int, 4)),
                  s(:send,
                    s(:const, nil, :SLAICEPS), :[],
                    s(:int, 4))),
                s(:block,
                  s(:send,
                    s(:lvar, :copy), :gsub!,
                    s(:regexp,
                      s(:str, "&#0*((?:\\d+)|(?:x[a-f0-9]+));"),
                      s(:regopt))),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :m,
                      s(:nth_ref, 1)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:int, 0)), :==,
                        s(:str, "x")),
                      s(:lvasgn, :m,
                        s(:dstr,
                          s(:str, "0"),
                          s(:begin,
                            s(:lvar, :m)))), nil),
                    s(:send,
                      s(:array,
                        s(:send, nil, :Integer,
                          s(:lvar, :m))), :pack,
                      s(:str, "U*"))))), nil),
            s(:lvar, :copy))),
        s(:casgn, nil, :EREFERENCE,
          s(:regexp,
            s(:str, "&(?!"),
            s(:begin,
              s(:const,
                s(:const, nil, :Entity), :NAME)),
            s(:str, ";)"),
            s(:regopt))),
        s(:defs,
          s(:const, nil, :Text), :normalize,
          s(:args,
            s(:arg, :input),
            s(:optarg, :doctype,
              s(:nil)),
            s(:optarg, :entity_filter,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :copy,
              s(:send,
                s(:lvar, :input), :to_s)),
            s(:lvasgn, :copy,
              s(:send,
                s(:lvar, :copy), :gsub,
                s(:str, "&"),
                s(:str, "&amp;"))),
            s(:if,
              s(:lvar, :doctype),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :doctype), :entities), :each_value),
                s(:args,
                  s(:arg, :entity)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :entity), :value),
                    s(:send,
                      s(:and,
                        s(:lvar, :entity_filter),
                        s(:send,
                          s(:lvar, :entity_filter), :include?,
                          s(:send,
                            s(:lvar, :entity), :name))), :!)),
                  s(:lvasgn, :copy,
                    s(:send,
                      s(:lvar, :copy), :gsub,
                      s(:send,
                        s(:lvar, :entity), :value),
                      s(:dstr,
                        s(:str, "&"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :entity), :name)),
                        s(:str, ";")))), nil)),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :DocType), :DEFAULT_ENTITIES), :each_value),
                s(:args,
                  s(:arg, :entity)),
                s(:lvasgn, :copy,
                  s(:send,
                    s(:lvar, :copy), :gsub,
                    s(:send,
                      s(:lvar, :entity), :value),
                    s(:dstr,
                      s(:str, "&"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :entity), :name)),
                      s(:str, ";")))))),
            s(:lvar, :copy))),
        s(:defs,
          s(:const, nil, :Text), :unnormalize,
          s(:args,
            s(:arg, :string),
            s(:optarg, :doctype,
              s(:nil)),
            s(:optarg, :filter,
              s(:nil)),
            s(:optarg, :illegal,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :sum,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :string), :gsub,
                  s(:regexp,
                    s(:str, "\\r\\n?"),
                    s(:regopt)),
                  s(:str, "\n")), :gsub,
                s(:const, nil, :REFERENCE)),
              s(:args),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:const, nil, :Text), :expand,
                    s(:back_ref, :$&),
                    s(:lvar, :doctype),
                    s(:lvar, :filter))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :sum), :+,
                      s(:send,
                        s(:lvar, :s), :bytesize)), :>,
                    s(:send,
                      s(:const, nil, :Security), :entity_expansion_text_limit)),
                  s(:send, nil, :raise,
                    s(:str, "entity expansion has grown too large")),
                  s(:op_asgn,
                    s(:lvasgn, :sum), :+,
                    s(:send,
                      s(:lvar, :s), :bytesize))),
                s(:lvar, :s))))),
        s(:defs,
          s(:const, nil, :Text), :expand,
          s(:args,
            s(:arg, :ref),
            s(:arg, :doctype),
            s(:arg, :filter)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :ref), :[],
                s(:int, 1)), :==,
              s(:str, "#")),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :ref), :[],
                  s(:int, 2)), :==,
                s(:str, "x")),
              s(:send,
                s(:array,
                  s(:send,
                    s(:send,
                      s(:lvar, :ref), :[],
                      s(:erange,
                        s(:int, 3),
                        s(:int, -1))), :to_i,
                    s(:int, 16))), :pack,
                s(:str, "U*")),
              s(:send,
                s(:array,
                  s(:send,
                    s(:send,
                      s(:lvar, :ref), :[],
                      s(:erange,
                        s(:int, 2),
                        s(:int, -1))), :to_i)), :pack,
                s(:str, "U*"))),
            s(:if,
              s(:send,
                s(:lvar, :ref), :==,
                s(:str, "&amp;")),
              s(:str, "&"),
              s(:if,
                s(:and,
                  s(:lvar, :filter),
                  s(:send,
                    s(:lvar, :filter), :include?,
                    s(:send,
                      s(:lvar, :ref), :[],
                      s(:erange,
                        s(:int, 1),
                        s(:int, -1))))),
                s(:lvar, :ref),
                s(:if,
                  s(:lvar, :doctype),
                  s(:or,
                    s(:send,
                      s(:lvar, :doctype), :entity,
                      s(:send,
                        s(:lvar, :ref), :[],
                        s(:erange,
                          s(:int, 1),
                          s(:int, -1)))),
                    s(:lvar, :ref)),
                  s(:begin,
                    s(:lvasgn, :entity_value,
                      s(:send,
                        s(:const,
                          s(:const, nil, :DocType), :DEFAULT_ENTITIES), :[],
                        s(:send,
                          s(:lvar, :ref), :[],
                          s(:erange,
                            s(:int, 1),
                            s(:int, -1))))),
                    s(:if,
                      s(:lvar, :entity_value),
                      s(:send,
                        s(:lvar, :entity_value), :value),
                      s(:lvar, :ref))))))))))))
