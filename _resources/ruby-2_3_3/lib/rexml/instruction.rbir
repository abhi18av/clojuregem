s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/child")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:module,
    s(:const, nil, :REXML),
    s(:class,
      s(:const, nil, :Instruction),
      s(:const, nil, :Child),
      s(:begin,
        s(:casgn, nil, :START,
          s(:str, "<\\?")),
        s(:casgn, nil, :STOP,
          s(:str, "\\?>")),
        s(:send, nil, :attr_accessor,
          s(:sym, :target),
          s(:sym, :content)),
        s(:def, :initialize,
          s(:args,
            s(:arg, :target),
            s(:optarg, :content,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :target), :kind_of?,
                s(:const, nil, :String)),
              s(:begin,
                s(:super),
                s(:ivasgn, :@target,
                  s(:lvar, :target)),
                s(:ivasgn, :@content,
                  s(:lvar, :content))),
              s(:if,
                s(:send,
                  s(:lvar, :target), :kind_of?,
                  s(:const, nil, :Instruction)),
                s(:begin,
                  s(:super,
                    s(:lvar, :content)),
                  s(:ivasgn, :@target,
                    s(:send,
                      s(:lvar, :target), :target)),
                  s(:ivasgn, :@content,
                    s(:send,
                      s(:lvar, :target), :content))), nil)),
            s(:if,
              s(:ivar, :@content),
              s(:send,
                s(:ivar, :@content), :strip!), nil))),
        s(:def, :clone,
          s(:args),
          s(:send,
            s(:const, nil, :Instruction), :new,
            s(:self))),
        s(:def, :write,
          s(:args,
            s(:arg, :writer),
            s(:optarg, :indent,
              s(:int, -1)),
            s(:optarg, :transitive,
              s(:false)),
            s(:optarg, :ie_hack,
              s(:false))),
          s(:begin,
            s(:send,
              s(:const, nil, :Kernel), :warn,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:self), :class), :name)),
                s(:str, ".write is deprecated"))),
            s(:send, nil, :indent,
              s(:lvar, :writer),
              s(:lvar, :indent)),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:send,
                s(:const, nil, :START), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, ""))),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:ivar, :@target)),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:str, " ")),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:ivar, :@content)),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:send,
                s(:const, nil, :STOP), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, ""))))),
        s(:def, :==,
          s(:args,
            s(:arg, :other)),
          s(:and,
            s(:and,
              s(:send,
                s(:lvar, :other), :kind_of?,
                s(:const, nil, :Instruction)),
              s(:send,
                s(:send,
                  s(:lvar, :other), :target), :==,
                s(:ivar, :@target))),
            s(:send,
              s(:send,
                s(:lvar, :other), :content), :==,
              s(:ivar, :@content)))),
        s(:def, :node_type,
          s(:args),
          s(:sym, :processing_instruction)),
        s(:def, :inspect,
          s(:args),
          s(:dstr,
            s(:str, "<?p-i "),
            s(:begin,
              s(:send, nil, :target)),
            s(:str, " ...?>")))))))
