s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Light),
      s(:class,
        s(:const, nil, :Node), nil,
        s(:begin,
          s(:casgn, nil, :NAMESPLIT,
            s(:regexp,
              s(:str, "^(?:("),
              s(:begin,
                s(:const,
                  s(:const, nil, :XMLTokens), :NCNAME_STR)),
              s(:str, "):)?("),
              s(:begin,
                s(:const,
                  s(:const, nil, :XMLTokens), :NCNAME_STR)),
              s(:str, ")"),
              s(:regopt, :u))),
          s(:casgn, nil, :PARENTS,
            s(:array,
              s(:sym, :element),
              s(:sym, :document),
              s(:sym, :doctype))),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :node,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@node,
                s(:lvar, :node)),
              s(:if,
                s(:send,
                  s(:lvar, :node), :kind_of?,
                  s(:const, nil, :String)),
                s(:lvasgn, :node,
                  s(:array,
                    s(:sym, :text),
                    s(:lvar, :node))),
                s(:if,
                  s(:send,
                    s(:lvar, :node), :nil?),
                  s(:lvasgn, :node,
                    s(:array,
                      s(:sym, :document),
                      s(:nil),
                      s(:nil))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :[],
                        s(:int, 0)), :==,
                      s(:sym, :start_element)),
                    s(:send,
                      s(:lvar, :node), :[]=,
                      s(:int, 0),
                      s(:sym, :element)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :[],
                          s(:int, 0)), :==,
                        s(:sym, :start_doctype)),
                      s(:send,
                        s(:lvar, :node), :[]=,
                        s(:int, 0),
                        s(:sym, :doctype)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :[],
                            s(:int, 0)), :==,
                          s(:sym, :start_document)),
                        s(:send,
                          s(:lvar, :node), :[]=,
                          s(:int, 0),
                          s(:sym, :document)), nil))))))),
          s(:def, :size,
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :PARENTS), :include?,
                s(:send,
                  s(:ivar, :@node), :[],
                  s(:int, 0))),
              s(:send,
                s(:send,
                  s(:ivar, :@node), :[],
                  s(:int, -1)), :size),
              s(:int, 0))),
          s(:def, :each,
            s(:args),
            s(:block,
              s(:send,
                s(:send, nil, :size), :times),
              s(:args,
                s(:arg, :x)),
              s(:yield,
                s(:send, nil, :at,
                  s(:send,
                    s(:lvar, :x), :+,
                    s(:int, 4)))))),
          s(:def, :name,
            s(:args),
            s(:send, nil, :at,
              s(:int, 2))),
          s(:def, :name=,
            s(:args,
              s(:arg, :name_str),
              s(:optarg, :ns,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :pfx,
                s(:str, "")),
              s(:if,
                s(:lvar, :ns),
                s(:lvasgn, :pfx,
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :prefix,
                        s(:lvar, :ns))),
                    s(:str, ":"))), nil),
              s(:send, nil, :_old_put,
                s(:int, 2),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :pfx)),
                  s(:begin,
                    s(:lvar, :name_str)))))),
          s(:def, :parent=,
            s(:args,
              s(:arg, :node)),
            s(:send, nil, :_old_put,
              s(:int, 1),
              s(:lvar, :node))),
          s(:def, :local_name,
            s(:args),
            s(:begin,
              s(:send, nil, :namesplit),
              s(:ivar, :@name))),
          s(:def, :local_name=,
            s(:args,
              s(:arg, :name_str)),
            s(:send, nil, :_old_put,
              s(:int, 1),
              s(:dstr,
                s(:ivar, :@prefix),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :name_str))))),
          s(:def, :prefix,
            s(:args,
              s(:optarg, :namespace,
                s(:nil))),
            s(:send, nil, :prefix_of,
              s(:self),
              s(:lvar, :namespace))),
          s(:def, :namespace,
            s(:args,
              s(:optarg, :prefix,
                s(:send, nil, :prefix))),
            s(:send, nil, :namespace_of,
              s(:self),
              s(:lvar, :prefix))),
          s(:def, :namespace=,
            s(:args,
              s(:arg, :namespace)),
            s(:begin,
              s(:ivasgn, :@prefix,
                s(:send, nil, :prefix,
                  s(:lvar, :namespace))),
              s(:lvasgn, :pfx,
                s(:str, "")),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@prefix), :size), :>,
                  s(:int, 0)),
                s(:lvasgn, :pfx,
                  s(:dstr,
                    s(:ivar, :@prefix),
                    s(:str, ":"))), nil),
              s(:send, nil, :_old_put,
                s(:int, 1),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :pfx)),
                  s(:ivar, :@name))))),
          s(:def, :[],
            s(:args,
              s(:arg, :reference),
              s(:optarg, :ns,
                s(:nil))),
            s(:if,
              s(:send,
                s(:lvar, :reference), :kind_of?,
                s(:const, nil, :String)),
              s(:begin,
                s(:lvasgn, :pfx,
                  s(:str, "")),
                s(:if,
                  s(:lvar, :ns),
                  s(:lvasgn, :pfx,
                    s(:dstr,
                      s(:begin,
                        s(:send, nil, :prefix,
                          s(:lvar, :ns))),
                      s(:str, ":"))), nil),
                s(:send,
                  s(:send, nil, :at,
                    s(:int, 3)), :[],
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :pfx)),
                    s(:begin,
                      s(:lvar, :reference))))),
              s(:if,
                s(:send,
                  s(:lvar, :reference), :kind_of?,
                  s(:const, nil, :Range)),
                s(:send, nil, :_old_get,
                  s(:send,
                    s(:const, nil, :Range), :new,
                    s(:send,
                      s(:int, 4), :+,
                      s(:send,
                        s(:lvar, :reference), :begin)),
                    s(:send,
                      s(:lvar, :reference), :end),
                    s(:send,
                      s(:lvar, :reference), :exclude_end?))),
                s(:send, nil, :_old_get,
                  s(:send,
                    s(:int, 4), :+,
                    s(:lvar, :reference)))))),
          s(:def, :=~,
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:const, nil, :XPath), :match,
              s(:self),
              s(:lvar, :path))),
          s(:def, :[]=,
            s(:args,
              s(:arg, :reference),
              s(:arg, :ns),
              s(:optarg, :value,
                s(:nil))),
            s(:if,
              s(:send,
                s(:lvar, :reference), :kind_of?,
                s(:const, nil, :String)),
              s(:begin,
                s(:if,
                  s(:lvar, :value), nil,
                  s(:lvasgn, :value,
                    s(:lvar, :ns))),
                s(:send,
                  s(:send, nil, :at,
                    s(:int, 3)), :[]=,
                  s(:lvar, :reference),
                  s(:lvar, :value))),
              s(:if,
                s(:send,
                  s(:lvar, :reference), :kind_of?,
                  s(:const, nil, :Range)),
                s(:send, nil, :_old_put,
                  s(:send,
                    s(:const, nil, :Range), :new,
                    s(:send,
                      s(:int, 3), :+,
                      s(:send,
                        s(:lvar, :reference), :begin)),
                    s(:send,
                      s(:lvar, :reference), :end),
                    s(:send,
                      s(:lvar, :reference), :exclude_end?)),
                  s(:lvar, :ns)),
                s(:if,
                  s(:lvar, :value),
                  s(:send, nil, :_old_put,
                    s(:send,
                      s(:int, 4), :+,
                      s(:lvar, :reference)),
                    s(:lvar, :ns),
                    s(:lvar, :value)),
                  s(:send, nil, :_old_put,
                    s(:send,
                      s(:int, 4), :+,
                      s(:lvar, :reference)),
                    s(:lvar, :ns)))))),
          s(:def, :<<,
            s(:args,
              s(:arg, :element)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :node_type), :==,
                  s(:sym, :text)),
                s(:send,
                  s(:send, nil, :at,
                    s(:int, -1)), :<<,
                  s(:lvar, :element)),
                s(:begin,
                  s(:lvasgn, :newnode,
                    s(:send,
                      s(:const, nil, :Node), :new,
                      s(:lvar, :element))),
                  s(:send,
                    s(:lvar, :newnode), :parent=,
                    s(:self)),
                  s(:send,
                    s(:self), :push,
                    s(:lvar, :newnode)))),
              s(:send, nil, :at,
                s(:int, -1)))),
          s(:def, :node_type,
            s(:args),
            s(:send, nil, :_old_get,
              s(:int, 0))),
          s(:def, :text=,
            s(:args,
              s(:arg, :foo)),
            s(:begin,
              s(:lvasgn, :replace,
                s(:if,
                  s(:send,
                    s(:send, nil, :at,
                      s(:int, 4)), :kind_of?,
                    s(:const, nil, :String)),
                  s(:int, 1),
                  s(:int, 0))),
              s(:send,
                s(:self), :_old_put,
                s(:int, 4),
                s(:lvar, :replace),
                s(:send, nil, :normalizefoo)))),
          s(:def, :root,
            s(:args),
            s(:begin,
              s(:lvasgn, :context,
                s(:self)),
              s(:while,
                s(:send,
                  s(:lvar, :context), :at,
                  s(:int, 1)),
                s(:lvasgn, :context,
                  s(:send,
                    s(:lvar, :context), :at,
                    s(:int, 1)))))),
          s(:def, :has_name?,
            s(:args,
              s(:arg, :name),
              s(:optarg, :namespace,
                s(:str, ""))),
            s(:and,
              s(:send,
                s(:send, nil, :at,
                  s(:int, 3)), :==,
                s(:lvar, :name)),
              s(:send,
                s(:send, nil, :namespace), :==,
                s(:lvar, :namespace)))),
          s(:def, :children,
            s(:args),
            s(:self)),
          s(:def, :parent,
            s(:args),
            s(:send, nil, :at,
              s(:int, 1))),
          s(:def, :to_s,
            s(:args), nil),
          s(:send, nil, :private),
          s(:def, :namesplit,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@name), :defined?),
                s(:return), nil),
              s(:send,
                s(:send, nil, :at,
                  s(:int, 2)), :=~,
                s(:const, nil, :NAMESPLIT)),
              s(:ivasgn, :@prefix,
                s(:or,
                  s(:str, ""),
                  s(:nth_ref, 1))),
              s(:ivasgn, :@name,
                s(:nth_ref, 2)))),
          s(:def, :namespace_of,
            s(:args,
              s(:arg, :node),
              s(:optarg, :prefix,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :prefix), :!),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send, nil, :at,
                      s(:int, 2))),
                  s(:send,
                    s(:lvar, :name), :=~,
                    s(:const, nil, :NAMESPLIT)),
                  s(:lvasgn, :prefix,
                    s(:nth_ref, 1))), nil),
              s(:lvasgn, :to_find,
                s(:str, "xmlns")),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :prefix), :nil?), :!),
                s(:lvasgn, :to_find,
                  s(:dstr,
                    s(:str, "xmlns:"),
                    s(:begin,
                      s(:lvar, :prefix)))), nil),
              s(:lvasgn, :ns,
                s(:send,
                  s(:send, nil, :at,
                    s(:int, 3)), :[],
                  s(:lvar, :to_find))),
              s(:if,
                s(:lvar, :ns),
                s(:lvar, :ns),
                s(:send, nil, :namespace_of,
                  s(:send,
                    s(:ivar, :@node), :[],
                    s(:int, 0)),
                  s(:lvar, :prefix))))),
          s(:def, :prefix_of,
            s(:args,
              s(:arg, :node),
              s(:optarg, :namespace,
                s(:nil))),
            s(:if,
              s(:send,
                s(:lvar, :namespace), :!),
              s(:begin,
                s(:lvasgn, :name,
                  s(:send,
                    s(:lvar, :node), :name)),
                s(:send,
                  s(:lvar, :name), :=~,
                  s(:const, nil, :NAMESPLIT)),
                s(:nth_ref, 1)),
              s(:begin,
                s(:lvasgn, :ns,
                  s(:block,
                    s(:send,
                      s(:send, nil, :at,
                        s(:int, 3)), :find),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:send,
                      s(:lvar, :v), :==,
                      s(:lvar, :namespace)))),
                s(:if,
                  s(:lvar, :ns),
                  s(:lvar, :ns),
                  s(:send, nil, :prefix_of,
                    s(:send,
                      s(:lvar, :node), :parent),
                    s(:lvar, :namespace)))))))))))
