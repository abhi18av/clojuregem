s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/validation/validationexception")),
  s(:send, nil, :require,
    s(:str, "rexml/undefinednamespaceexception")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:class,
        s(:const, nil, :TreeParser), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :source),
              s(:optarg, :build_context,
                s(:send,
                  s(:const, nil, :Document), :new))),
            s(:begin,
              s(:ivasgn, :@build_context,
                s(:lvar, :build_context)),
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Parsers), :BaseParser), :new,
                  s(:lvar, :source))))),
          s(:def, :add_listener,
            s(:args,
              s(:arg, :listener)),
            s(:send,
              s(:ivar, :@parser), :add_listener,
              s(:lvar, :listener))),
          s(:def, :parse,
            s(:args),
            s(:begin,
              s(:lvasgn, :tag_stack,
                s(:array)),
              s(:lvasgn, :in_doctype,
                s(:false)),
              s(:lvasgn, :entities,
                s(:nil)),
              s(:kwbegin,
                s(:rescue,
                  s(:while,
                    s(:true),
                    s(:begin,
                      s(:lvasgn, :event,
                        s(:send,
                          s(:ivar, :@parser), :pull)),
                      s(:case,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 0)),
                        s(:when,
                          s(:sym, :end_document),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :tag_stack), :empty?), nil,
                              s(:send, nil, :raise,
                                s(:send,
                                  s(:const, nil, :ParseException), :new,
                                  s(:dstr,
                                    s(:str, "No close tag for "),
                                    s(:begin,
                                      s(:send,
                                        s(:ivar, :@build_context), :xpath))),
                                  s(:send,
                                    s(:ivar, :@parser), :source),
                                  s(:ivar, :@parser)))),
                            s(:return))),
                        s(:when,
                          s(:sym, :start_element),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tag_stack), :push,
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 1))),
                            s(:lvasgn, :el,
                              s(:ivasgn, :@build_context,
                                s(:send,
                                  s(:ivar, :@build_context), :add_element,
                                  s(:send,
                                    s(:lvar, :event), :[],
                                    s(:int, 1))))),
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 2)), :each),
                              s(:args,
                                s(:arg, :key),
                                s(:arg, :value)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :el), :attributes), :[]=,
                                s(:lvar, :key),
                                s(:send,
                                  s(:const, nil, :Attribute), :new,
                                  s(:lvar, :key),
                                  s(:lvar, :value),
                                  s(:self)))))),
                        s(:when,
                          s(:sym, :end_element),
                          s(:begin,
                            s(:send,
                              s(:lvar, :tag_stack), :pop),
                            s(:ivasgn, :@build_context,
                              s(:send,
                                s(:ivar, :@build_context), :parent)))),
                        s(:when,
                          s(:sym, :text),
                          s(:if,
                            s(:send,
                              s(:lvar, :in_doctype), :!),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:ivar, :@build_context), :[],
                                  s(:int, -1)), :instance_of?,
                                s(:const, nil, :Text)),
                              s(:send,
                                s(:send,
                                  s(:ivar, :@build_context), :[],
                                  s(:int, -1)), :<<,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1))),
                              s(:if,
                                s(:begin,
                                  s(:and,
                                    s(:send,
                                      s(:ivar, :@build_context), :ignore_whitespace_nodes),
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:lvar, :event), :[],
                                            s(:int, 1)), :strip), :size), :==,
                                      s(:int, 0)))), nil,
                                s(:send,
                                  s(:ivar, :@build_context), :add,
                                  s(:send,
                                    s(:const, nil, :Text), :new,
                                    s(:send,
                                      s(:lvar, :event), :[],
                                      s(:int, 1)),
                                    s(:send,
                                      s(:ivar, :@build_context), :whitespace),
                                    s(:nil),
                                    s(:true))))), nil)),
                        s(:when,
                          s(:sym, :comment),
                          s(:begin,
                            s(:lvasgn, :c,
                              s(:send,
                                s(:const, nil, :Comment), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1)))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :c)))),
                        s(:when,
                          s(:sym, :cdata),
                          s(:begin,
                            s(:lvasgn, :c,
                              s(:send,
                                s(:const, nil, :CData), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1)))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :c)))),
                        s(:when,
                          s(:sym, :processing_instruction),
                          s(:send,
                            s(:ivar, :@build_context), :add,
                            s(:send,
                              s(:const, nil, :Instruction), :new,
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 1)),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 2))))),
                        s(:when,
                          s(:sym, :end_doctype),
                          s(:begin,
                            s(:lvasgn, :in_doctype,
                              s(:false)),
                            s(:block,
                              s(:send,
                                s(:lvar, :entities), :each),
                              s(:args,
                                s(:arg, :k),
                                s(:arg, :v)),
                              s(:send,
                                s(:lvar, :entities), :[]=,
                                s(:lvar, :k),
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:ivar, :@build_context), :entities), :[],
                                    s(:lvar, :k)), :value))),
                            s(:ivasgn, :@build_context,
                              s(:send,
                                s(:ivar, :@build_context), :parent)))),
                        s(:when,
                          s(:sym, :start_doctype),
                          s(:begin,
                            s(:lvasgn, :doctype,
                              s(:send,
                                s(:const, nil, :DocType), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:irange,
                                    s(:int, 1),
                                    s(:int, -1))),
                                s(:ivar, :@build_context))),
                            s(:ivasgn, :@build_context,
                              s(:lvar, :doctype)),
                            s(:lvasgn, :entities,
                              s(:hash)),
                            s(:lvasgn, :in_doctype,
                              s(:true)))),
                        s(:when,
                          s(:sym, :attlistdecl),
                          s(:begin,
                            s(:lvasgn, :n,
                              s(:send,
                                s(:const, nil, :AttlistDecl), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:irange,
                                    s(:int, 1),
                                    s(:int, -1))))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :n)))),
                        s(:when,
                          s(:sym, :externalentity),
                          s(:begin,
                            s(:lvasgn, :n,
                              s(:send,
                                s(:const, nil, :ExternalEntity), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1)))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :n)))),
                        s(:when,
                          s(:sym, :elementdecl),
                          s(:begin,
                            s(:lvasgn, :n,
                              s(:send,
                                s(:const, nil, :ElementDecl), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1)))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :n)))),
                        s(:when,
                          s(:sym, :entitydecl),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 2)), :=~,
                                s(:regexp,
                                  s(:str, "PUBLIC|SYSTEM"),
                                  s(:regopt))), nil,
                              s(:send,
                                s(:lvar, :entities), :[]=,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1)),
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 2)))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:send,
                                s(:const, nil, :Entity), :new,
                                s(:lvar, :event))))),
                        s(:when,
                          s(:sym, :notationdecl),
                          s(:begin,
                            s(:lvasgn, :n,
                              s(:send,
                                s(:const, nil, :NotationDecl), :new,
                                s(:splat,
                                  s(:send,
                                    s(:lvar, :event), :[],
                                    s(:irange,
                                      s(:int, 1),
                                      s(:int, -1)))))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :n)))),
                        s(:when,
                          s(:sym, :xmldecl),
                          s(:begin,
                            s(:lvasgn, :x,
                              s(:send,
                                s(:const, nil, :XMLDecl), :new,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 1)),
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 2)),
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 3)))),
                            s(:send,
                              s(:ivar, :@build_context), :add,
                              s(:lvar, :x)))), nil))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :REXML), :Validation), :ValidationException)), nil,
                    s(:send, nil, :raise)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :REXML), :ParseException)), nil,
                    s(:send, nil, :raise)),
                  s(:resbody, nil, nil,
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :ParseException), :new,
                        s(:send,
                          s(:gvar, :$!), :message),
                        s(:send,
                          s(:ivar, :@parser), :source),
                        s(:ivar, :@parser),
                        s(:gvar, :$!)))), nil)))))))))
