s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/parsers/baseparser")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/namespace")),
  s(:send, nil, :require,
    s(:str, "rexml/text")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:class,
        s(:const, nil, :SAX2Parser), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :source)),
            s(:begin,
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const, nil, :BaseParser), :new,
                  s(:lvar, :source))),
              s(:ivasgn, :@listeners,
                s(:array)),
              s(:ivasgn, :@procs,
                s(:array)),
              s(:ivasgn, :@namespace_stack,
                s(:array)),
              s(:ivasgn, :@has_listeners,
                s(:false)),
              s(:ivasgn, :@tag_stack,
                s(:array)),
              s(:ivasgn, :@entities,
                s(:hash)))),
          s(:def, :source,
            s(:args),
            s(:send,
              s(:ivar, :@parser), :source)),
          s(:def, :add_listener,
            s(:args,
              s(:arg, :listener)),
            s(:send,
              s(:ivar, :@parser), :add_listener,
              s(:lvar, :listener))),
          s(:def, :listen,
            s(:args,
              s(:restarg, :args),
              s(:blockarg, :blok)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0)), :kind_of?,
                s(:const, nil, :Symbol)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :size), :==,
                  s(:int, 2)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 1)), :each),
                  s(:args,
                    s(:arg, :match)),
                  s(:send,
                    s(:ivar, :@procs), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)),
                      s(:lvar, :match),
                      s(:lvar, :blok)))),
                s(:send, nil, :add,
                  s(:array,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0)),
                    s(:nil),
                    s(:lvar, :blok)))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :[],
                    s(:int, 0)), :kind_of?,
                  s(:const, nil, :Array)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :size), :==,
                    s(:int, 2)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :each),
                    s(:args,
                      s(:arg, :match)),
                    s(:send, nil, :add,
                      s(:array,
                        s(:nil),
                        s(:lvar, :match),
                        s(:send,
                          s(:lvar, :args), :[],
                          s(:int, 1))))),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)), :each),
                    s(:args,
                      s(:arg, :match)),
                    s(:send, nil, :add,
                      s(:array,
                        s(:sym, :start_element),
                        s(:lvar, :match),
                        s(:lvar, :blok))))),
                s(:send, nil, :add,
                  s(:array,
                    s(:nil),
                    s(:nil),
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, 0))))))),
          s(:def, :deafen,
            s(:args,
              s(:optarg, :listener,
                s(:nil)),
              s(:blockarg, :blok)),
            s(:if,
              s(:lvar, :listener),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:ivar, :@listeners), :delete_if),
                  s(:args,
                    s(:arg, :item)),
                  s(:send,
                    s(:send,
                      s(:lvar, :item), :[],
                      s(:int, -1)), :==,
                    s(:lvar, :listener))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@listeners), :size), :==,
                    s(:int, 0)),
                  s(:ivasgn, :@has_listeners,
                    s(:false)), nil)),
              s(:block,
                s(:send,
                  s(:ivar, :@procs), :delete_if),
                s(:args,
                  s(:arg, :item)),
                s(:send,
                  s(:send,
                    s(:lvar, :item), :[],
                    s(:int, -1)), :==,
                  s(:lvar, :blok))))),
          s(:def, :parse,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@procs), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :match),
                  s(:arg, :block)),
                s(:if,
                  s(:send,
                    s(:lvar, :sym), :==,
                    s(:sym, :start_document)),
                  s(:send,
                    s(:lvar, :block), :call), nil)),
              s(:block,
                s(:send,
                  s(:ivar, :@listeners), :each),
                s(:args,
                  s(:arg, :sym),
                  s(:arg, :match),
                  s(:arg, :block)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :sym), :==,
                      s(:sym, :start_document)),
                    s(:send,
                      s(:lvar, :sym), :nil?)),
                  s(:send,
                    s(:lvar, :block), :start_document), nil)),
              s(:lvasgn, :context,
                s(:array)),
              s(:while,
                s(:true),
                s(:begin,
                  s(:lvasgn, :event,
                    s(:send,
                      s(:ivar, :@parser), :pull)),
                  s(:case,
                    s(:send,
                      s(:lvar, :event), :[],
                      s(:int, 0)),
                    s(:when,
                      s(:sym, :end_document),
                      s(:begin,
                        s(:send, nil, :handle,
                          s(:sym, :end_document)),
                        s(:break))),
                    s(:when,
                      s(:sym, :start_doctype),
                      s(:send, nil, :handle,
                        s(:sym, :doctype),
                        s(:splat,
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1)))))),
                    s(:when,
                      s(:sym, :end_doctype),
                      s(:lvasgn, :context,
                        s(:send,
                          s(:lvar, :context), :[],
                          s(:int, 1)))),
                    s(:when,
                      s(:sym, :start_element),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@tag_stack), :push,
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1))),
                        s(:lvasgn, :procs,
                          s(:send, nil, :get_procs,
                            s(:sym, :start_prefix_mapping),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:lvasgn, :listeners,
                          s(:send, nil, :get_listeners,
                            s(:sym, :start_prefix_mapping),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:if,
                          s(:or,
                            s(:lvar, :procs),
                            s(:lvar, :listeners)),
                          s(:begin,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 2)), :each),
                              s(:args,
                                s(:arg, :n),
                                s(:arg, :v)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :event), :[],
                                  s(:int, 2)), :[]=,
                                s(:lvar, :n),
                                s(:send,
                                  s(:ivar, :@parser), :normalize,
                                  s(:lvar, :v)))),
                            s(:lvasgn, :nsdecl,
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :event), :[],
                                    s(:int, 2)), :find_all),
                                s(:args,
                                  s(:arg, :n),
                                  s(:arg, :value)),
                                s(:send,
                                  s(:lvar, :n), :=~,
                                  s(:regexp,
                                    s(:str, "^xmlns(:|$)"),
                                    s(:regopt))))),
                            s(:block,
                              s(:send,
                                s(:lvar, :nsdecl), :collect!),
                              s(:args,
                                s(:arg, :n),
                                s(:arg, :value)),
                              s(:array,
                                s(:send,
                                  s(:lvar, :n), :[],
                                  s(:irange,
                                    s(:int, 6),
                                    s(:int, -1))),
                                s(:lvar, :value))),
                            s(:send,
                              s(:ivar, :@namespace_stack), :push,
                              s(:hash)),
                            s(:block,
                              s(:send,
                                s(:lvar, :nsdecl), :each),
                              s(:args,
                                s(:arg, :n),
                                s(:arg, :v)),
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@namespace_stack), :[],
                                    s(:int, -1)), :[]=,
                                  s(:lvar, :n),
                                  s(:lvar, :v)),
                                s(:if,
                                  s(:lvar, :procs),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :procs), :each),
                                    s(:args,
                                      s(:arg, :ob)),
                                    s(:send,
                                      s(:lvar, :ob), :call,
                                      s(:lvar, :n),
                                      s(:lvar, :v))), nil),
                                s(:if,
                                  s(:lvar, :listeners),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :listeners), :each),
                                    s(:args,
                                      s(:arg, :ob)),
                                    s(:send,
                                      s(:lvar, :ob), :start_prefix_mapping,
                                      s(:lvar, :n),
                                      s(:lvar, :v))), nil)))), nil),
                        s(:send,
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1)), :=~,
                          s(:const,
                            s(:const, nil, :Namespace), :NAMESPLIT)),
                        s(:lvasgn, :prefix,
                          s(:nth_ref, 1)),
                        s(:lvasgn, :local,
                          s(:nth_ref, 2)),
                        s(:lvasgn, :uri,
                          s(:send, nil, :get_namespace,
                            s(:lvar, :prefix))),
                        s(:lvasgn, :procs,
                          s(:send, nil, :get_procs,
                            s(:sym, :start_element),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:lvasgn, :listeners,
                          s(:send, nil, :get_listeners,
                            s(:sym, :start_element),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:if,
                          s(:lvar, :procs),
                          s(:block,
                            s(:send,
                              s(:lvar, :procs), :each),
                            s(:args,
                              s(:arg, :ob)),
                            s(:send,
                              s(:lvar, :ob), :call,
                              s(:lvar, :uri),
                              s(:lvar, :local),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 1)),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 2)))), nil),
                        s(:if,
                          s(:lvar, :listeners),
                          s(:block,
                            s(:send,
                              s(:lvar, :listeners), :each),
                            s(:args,
                              s(:arg, :ob)),
                            s(:send,
                              s(:lvar, :ob), :start_element,
                              s(:lvar, :uri),
                              s(:lvar, :local),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 1)),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 2)))), nil))),
                    s(:when,
                      s(:sym, :end_element),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@tag_stack), :pop),
                        s(:send,
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1)), :=~,
                          s(:const,
                            s(:const, nil, :Namespace), :NAMESPLIT)),
                        s(:lvasgn, :prefix,
                          s(:nth_ref, 1)),
                        s(:lvasgn, :local,
                          s(:nth_ref, 2)),
                        s(:lvasgn, :uri,
                          s(:send, nil, :get_namespace,
                            s(:lvar, :prefix))),
                        s(:lvasgn, :procs,
                          s(:send, nil, :get_procs,
                            s(:sym, :end_element),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:lvasgn, :listeners,
                          s(:send, nil, :get_listeners,
                            s(:sym, :end_element),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:if,
                          s(:lvar, :procs),
                          s(:block,
                            s(:send,
                              s(:lvar, :procs), :each),
                            s(:args,
                              s(:arg, :ob)),
                            s(:send,
                              s(:lvar, :ob), :call,
                              s(:lvar, :uri),
                              s(:lvar, :local),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 1)))), nil),
                        s(:if,
                          s(:lvar, :listeners),
                          s(:block,
                            s(:send,
                              s(:lvar, :listeners), :each),
                            s(:args,
                              s(:arg, :ob)),
                            s(:send,
                              s(:lvar, :ob), :end_element,
                              s(:lvar, :uri),
                              s(:lvar, :local),
                              s(:send,
                                s(:lvar, :event), :[],
                                s(:int, 1)))), nil),
                        s(:lvasgn, :namespace_mapping,
                          s(:send,
                            s(:ivar, :@namespace_stack), :pop)),
                        s(:lvasgn, :procs,
                          s(:send, nil, :get_procs,
                            s(:sym, :end_prefix_mapping),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:lvasgn, :listeners,
                          s(:send, nil, :get_listeners,
                            s(:sym, :end_prefix_mapping),
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)))),
                        s(:if,
                          s(:or,
                            s(:lvar, :procs),
                            s(:lvar, :listeners)),
                          s(:block,
                            s(:send,
                              s(:lvar, :namespace_mapping), :each),
                            s(:args,
                              s(:arg, :ns_prefix),
                              s(:arg, :ns_uri)),
                            s(:begin,
                              s(:if,
                                s(:lvar, :procs),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :procs), :each),
                                  s(:args,
                                    s(:arg, :ob)),
                                  s(:send,
                                    s(:lvar, :ob), :call,
                                    s(:lvar, :ns_prefix))), nil),
                              s(:if,
                                s(:lvar, :listeners),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :listeners), :each),
                                  s(:args,
                                    s(:arg, :ob)),
                                  s(:send,
                                    s(:lvar, :ob), :end_prefix_mapping,
                                    s(:lvar, :ns_prefix))), nil))), nil))),
                    s(:when,
                      s(:sym, :text),
                      s(:begin,
                        s(:lvasgn, :copy,
                          s(:send,
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 1)), :clone)),
                        s(:lvasgn, :esub,
                          s(:block,
                            s(:send, nil, :proc),
                            s(:args,
                              s(:arg, :match)),
                            s(:if,
                              s(:send,
                                s(:ivar, :@entities), :has_key?,
                                s(:nth_ref, 1)),
                              s(:send,
                                s(:send,
                                  s(:ivar, :@entities), :[],
                                  s(:nth_ref, 1)), :gsub,
                                s(:const,
                                  s(:const, nil, :Text), :REFERENCE),
                                s(:block_pass,
                                  s(:lvar, :esub))),
                              s(:lvar, :match)))),
                        s(:send,
                          s(:lvar, :copy), :gsub!,
                          s(:const,
                            s(:const, nil, :Text), :REFERENCE),
                          s(:block_pass,
                            s(:lvar, :esub))),
                        s(:block,
                          s(:send,
                            s(:lvar, :copy), :gsub!,
                            s(:const,
                              s(:const, nil, :Text), :NUMERICENTITY)),
                          s(:args,
                            s(:arg, :m)),
                          s(:begin,
                            s(:lvasgn, :m,
                              s(:nth_ref, 1)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :[],
                                  s(:int, 0)), :==,
                                s(:str, "x")),
                              s(:lvasgn, :m,
                                s(:dstr,
                                  s(:str, "0"),
                                  s(:begin,
                                    s(:lvar, :m)))), nil),
                            s(:send,
                              s(:array,
                                s(:send, nil, :Integer,
                                  s(:lvar, :m))), :pack,
                              s(:str, "U*")))),
                        s(:send, nil, :handle,
                          s(:sym, :characters),
                          s(:lvar, :copy)))),
                    s(:when,
                      s(:sym, :entitydecl),
                      s(:send, nil, :handle_entitydecl,
                        s(:lvar, :event))),
                    s(:when,
                      s(:sym, :processing_instruction),
                      s(:sym, :comment),
                      s(:sym, :attlistdecl),
                      s(:sym, :elementdecl),
                      s(:sym, :cdata),
                      s(:sym, :notationdecl),
                      s(:sym, :xmldecl),
                      s(:send, nil, :handle,
                        s(:splat,
                          s(:lvar, :event)))), nil),
                  s(:send, nil, :handle,
                    s(:sym, :progress),
                    s(:send,
                      s(:ivar, :@parser), :position)))))),
          s(:send, nil, :private),
          s(:def, :handle,
            s(:args,
              s(:arg, :symbol),
              s(:restarg, :arguments)),
            s(:begin,
              s(:lvasgn, :tag,
                s(:send,
                  s(:ivar, :@tag_stack), :[],
                  s(:int, -1))),
              s(:lvasgn, :procs,
                s(:send, nil, :get_procs,
                  s(:lvar, :symbol),
                  s(:lvar, :tag))),
              s(:lvasgn, :listeners,
                s(:send, nil, :get_listeners,
                  s(:lvar, :symbol),
                  s(:lvar, :tag))),
              s(:if,
                s(:lvar, :procs),
                s(:block,
                  s(:send,
                    s(:lvar, :procs), :each),
                  s(:args,
                    s(:arg, :ob)),
                  s(:send,
                    s(:lvar, :ob), :call,
                    s(:splat,
                      s(:lvar, :arguments)))), nil),
              s(:if,
                s(:lvar, :listeners),
                s(:block,
                  s(:send,
                    s(:lvar, :listeners), :each),
                  s(:args,
                    s(:arg, :l)),
                  s(:send,
                    s(:lvar, :l), :send,
                    s(:send,
                      s(:lvar, :symbol), :to_s),
                    s(:splat,
                      s(:lvar, :arguments)))), nil))),
          s(:def, :handle_entitydecl,
            s(:args,
              s(:arg, :event)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :event), :size), :==,
                  s(:int, 3)),
                s(:send,
                  s(:ivar, :@entities), :[]=,
                  s(:send,
                    s(:lvar, :event), :[],
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :event), :[],
                    s(:int, 2))), nil),
              s(:lvasgn, :parameter_reference_p,
                s(:false)),
              s(:case,
                s(:send,
                  s(:lvar, :event), :[],
                  s(:int, 2)),
                s(:when,
                  s(:str, "SYSTEM"),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :event), :size), :==,
                      s(:int, 5)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :event), :last), :==,
                        s(:str, "%")),
                      s(:lvasgn, :parameter_reference_p,
                        s(:true)),
                      s(:send,
                        s(:lvar, :event), :[]=,
                        s(:int, 4),
                        s(:int, 0),
                        s(:str, "NDATA"))), nil)),
                s(:when,
                  s(:str, "PUBLIC"),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :event), :size), :==,
                      s(:int, 6)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :event), :last), :==,
                        s(:str, "%")),
                      s(:lvasgn, :parameter_reference_p,
                        s(:true)),
                      s(:send,
                        s(:lvar, :event), :[]=,
                        s(:int, 5),
                        s(:int, 0),
                        s(:str, "NDATA"))), nil)),
                s(:lvasgn, :parameter_reference_p,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :event), :size), :==,
                      s(:int, 4))))),
              s(:if,
                s(:lvar, :parameter_reference_p),
                s(:send,
                  s(:lvar, :event), :[]=,
                  s(:int, 1),
                  s(:int, 0),
                  s(:send,
                    s(:lvar, :event), :pop)), nil),
              s(:send, nil, :handle,
                s(:send,
                  s(:lvar, :event), :[],
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :event), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1)))))),
          s(:def, :get_procs,
            s(:args,
              s(:arg, :symbol),
              s(:arg, :name)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@procs), :size), :==,
                  s(:int, 0)),
                s(:return,
                  s(:nil)), nil),
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:ivar, :@procs), :find_all),
                    s(:args,
                      s(:arg, :sym),
                      s(:arg, :match),
                      s(:arg, :block)),
                    s(:begin,
                      s(:and,
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :sym), :nil?),
                            s(:send,
                              s(:lvar, :symbol), :==,
                              s(:lvar, :sym)))),
                        s(:begin,
                          s(:or,
                            s(:or,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:lvar, :name), :nil?),
                                  s(:send,
                                    s(:lvar, :match), :nil?))),
                              s(:send,
                                s(:lvar, :match), :nil?)),
                            s(:begin,
                              s(:or,
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :name), :==,
                                    s(:lvar, :match))),
                                s(:begin,
                                  s(:and,
                                    s(:send,
                                      s(:lvar, :match), :kind_of?,
                                      s(:const, nil, :Regexp)),
                                    s(:send,
                                      s(:lvar, :name), :=~,
                                      s(:lvar, :match))))))))))), :collect),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :[],
                  s(:int, -1))))),
          s(:def, :get_listeners,
            s(:args,
              s(:arg, :symbol),
              s(:arg, :name)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@listeners), :size), :==,
                  s(:int, 0)),
                s(:return,
                  s(:nil)), nil),
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:ivar, :@listeners), :find_all),
                    s(:args,
                      s(:arg, :sym),
                      s(:arg, :match),
                      s(:arg, :block)),
                    s(:begin,
                      s(:and,
                        s(:begin,
                          s(:or,
                            s(:send,
                              s(:lvar, :sym), :nil?),
                            s(:send,
                              s(:lvar, :symbol), :==,
                              s(:lvar, :sym)))),
                        s(:begin,
                          s(:or,
                            s(:or,
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:lvar, :name), :nil?),
                                  s(:send,
                                    s(:lvar, :match), :nil?))),
                              s(:send,
                                s(:lvar, :match), :nil?)),
                            s(:begin,
                              s(:or,
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :name), :==,
                                    s(:lvar, :match))),
                                s(:begin,
                                  s(:and,
                                    s(:send,
                                      s(:lvar, :match), :kind_of?,
                                      s(:const, nil, :Regexp)),
                                    s(:send,
                                      s(:lvar, :name), :=~,
                                      s(:lvar, :match))))))))))), :collect),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :[],
                  s(:int, -1))))),
          s(:def, :add,
            s(:args,
              s(:arg, :pair)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :pair), :[],
                  s(:int, -1)), :respond_to?,
                s(:sym, :call)),
              s(:if,
                s(:send,
                  s(:ivar, :@procs), :include?,
                  s(:lvar, :pair)), nil,
                s(:send,
                  s(:ivar, :@procs), :<<,
                  s(:lvar, :pair))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@listeners), :include?,
                    s(:lvar, :pair)), nil,
                  s(:send,
                    s(:ivar, :@listeners), :<<,
                    s(:lvar, :pair))),
                s(:ivasgn, :@has_listeners,
                  s(:true))))),
          s(:def, :get_namespace,
            s(:args,
              s(:arg, :prefix)),
            s(:begin,
              s(:lvasgn, :uris,
                s(:or,
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:ivar, :@namespace_stack), :find_all),
                      s(:args,
                        s(:arg, :ns)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :ns), :[],
                            s(:lvar, :prefix)), :nil?), :!))),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:ivar, :@namespace_stack), :find),
                      s(:args,
                        s(:arg, :ns)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :ns), :[],
                            s(:nil)), :nil?), :!))))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :uris), :nil?),
                  s(:send,
                    s(:int, 0), :==,
                    s(:send,
                      s(:lvar, :uris), :size))), nil,
                s(:send,
                  s(:send,
                    s(:lvar, :uris), :[],
                    s(:int, -1)), :[],
                  s(:lvar, :prefix))))))))))
