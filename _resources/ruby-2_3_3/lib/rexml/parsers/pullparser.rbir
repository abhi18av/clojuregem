s(:begin,
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/baseparser")),
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:begin,
        s(:class,
          s(:const, nil, :PullParser), nil,
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :XMLTokens)),
            s(:send, nil, :extend,
              s(:const, nil, :Forwardable)),
            s(:send, nil, :def_delegators,
              s(:sym, :@parser),
              s(:sym, :has_next?)),
            s(:send, nil, :def_delegators,
              s(:sym, :@parser),
              s(:sym, :entity)),
            s(:send, nil, :def_delegators,
              s(:sym, :@parser),
              s(:sym, :empty?)),
            s(:send, nil, :def_delegators,
              s(:sym, :@parser),
              s(:sym, :source)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :stream)),
              s(:begin,
                s(:ivasgn, :@entities,
                  s(:hash)),
                s(:ivasgn, :@listeners,
                  s(:nil)),
                s(:ivasgn, :@parser,
                  s(:send,
                    s(:const, nil, :BaseParser), :new,
                    s(:lvar, :stream))),
                s(:ivasgn, :@my_stack,
                  s(:array)))),
            s(:def, :add_listener,
              s(:args,
                s(:arg, :listener)),
              s(:begin,
                s(:if,
                  s(:ivar, :@listeners), nil,
                  s(:ivasgn, :@listeners,
                    s(:array))),
                s(:send,
                  s(:ivar, :@listeners), :<<,
                  s(:lvar, :listener)))),
            s(:def, :each,
              s(:args),
              s(:while,
                s(:send, nil, :has_next?),
                s(:yield,
                  s(:send,
                    s(:self), :pull)))),
            s(:def, :peek,
              s(:args,
                s(:optarg, :depth,
                  s(:int, 0))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@my_stack), :length), :<=,
                    s(:lvar, :depth)),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :depth), :-,
                            s(:send,
                              s(:ivar, :@my_stack), :length)), :+,
                          s(:int, 1))), :times),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :e,
                        s(:send,
                          s(:const, nil, :PullEvent), :new,
                          s(:send,
                            s(:ivar, :@parser), :pull))),
                      s(:send,
                        s(:ivar, :@my_stack), :push,
                        s(:lvar, :e)))), nil),
                s(:send,
                  s(:ivar, :@my_stack), :[],
                  s(:lvar, :depth)))),
            s(:def, :pull,
              s(:args),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@my_stack), :length), :>,
                    s(:int, 0)),
                  s(:return,
                    s(:send,
                      s(:ivar, :@my_stack), :shift)), nil),
                s(:lvasgn, :event,
                  s(:send,
                    s(:ivar, :@parser), :pull)),
                s(:case,
                  s(:send,
                    s(:lvar, :event), :[],
                    s(:int, 0)),
                  s(:when,
                    s(:sym, :entitydecl),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 2)), :=~,
                        s(:regexp,
                          s(:str, "PUBLIC|SYSTEM"),
                          s(:regopt))), nil,
                      s(:send,
                        s(:ivar, :@entities), :[]=,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 1)),
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 2))))),
                  s(:when,
                    s(:sym, :text),
                    s(:begin,
                      s(:lvasgn, :unnormalized,
                        s(:send,
                          s(:ivar, :@parser), :unnormalize,
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1)),
                          s(:ivar, :@entities))),
                      s(:send,
                        s(:lvar, :event), :<<,
                        s(:lvar, :unnormalized)))), nil),
                s(:send,
                  s(:const, nil, :PullEvent), :new,
                  s(:lvar, :event)))),
            s(:def, :unshift,
              s(:args,
                s(:arg, :token)),
              s(:send,
                s(:ivar, :@my_stack), :unshift,
                s(:lvar, :token))))),
        s(:class,
          s(:const, nil, :PullEvent), nil,
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :arg)),
              s(:ivasgn, :@contents,
                s(:lvar, :arg))),
            s(:def, :[],
              s(:args,
                s(:arg, :start),
                s(:optarg, :endd,
                  s(:nil))),
              s(:if,
                s(:send,
                  s(:lvar, :start), :kind_of?,
                  s(:const, nil, :Range)),
                s(:send,
                  s(:ivar, :@contents), :slice,
                  s(:irange,
                    s(:send,
                      s(:send,
                        s(:lvar, :start), :begin), :+,
                      s(:int, 1)),
                    s(:send,
                      s(:lvar, :start), :end))),
                s(:if,
                  s(:send,
                    s(:lvar, :start), :kind_of?,
                    s(:const, nil, :Numeric)),
                  s(:if,
                    s(:send,
                      s(:lvar, :endd), :nil?),
                    s(:send,
                      s(:ivar, :@contents), :slice,
                      s(:send,
                        s(:lvar, :start), :+,
                        s(:int, 1))),
                    s(:send,
                      s(:ivar, :@contents), :slice,
                      s(:send,
                        s(:lvar, :start), :+,
                        s(:int, 1)),
                      s(:lvar, :endd))),
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "Illegal argument "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :start), :inspect)),
                      s(:str, " ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :start), :class)),
                      s(:str, ")")))))),
            s(:def, :event_type,
              s(:args),
              s(:send,
                s(:ivar, :@contents), :[],
                s(:int, 0))),
            s(:def, :start_element?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :start_element))),
            s(:def, :end_element?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :end_element))),
            s(:def, :text?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :text))),
            s(:def, :instruction?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :processing_instruction))),
            s(:def, :comment?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :comment))),
            s(:def, :doctype?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :start_doctype))),
            s(:def, :attlistdecl?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :attlistdecl))),
            s(:def, :elementdecl?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :elementdecl))),
            s(:def, :entitydecl?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :entitydecl))),
            s(:def, :notationdecl?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :notationdecl))),
            s(:def, :entity?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :entity))),
            s(:def, :cdata?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :cdata))),
            s(:def, :xmldecl?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :xmldecl))),
            s(:def, :error?,
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@contents), :[],
                  s(:int, 0)), :==,
                s(:sym, :error))),
            s(:def, :inspect,
              s(:args),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@contents), :[],
                      s(:int, 0)), :to_s), :+,
                  s(:str, ": ")), :+,
                s(:send,
                  s(:send,
                    s(:ivar, :@contents), :[],
                    s(:irange,
                      s(:int, 1),
                      s(:int, -1))), :inspect)))))))))
