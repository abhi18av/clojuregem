s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/namespace")),
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:class,
        s(:const, nil, :XPathParser), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :XMLTokens)),
          s(:casgn, nil, :LITERAL,
            s(:regexp,
              s(:str, "^'([^']*)'|^\"([^\"]*)\""),
              s(:regopt, :u))),
          s(:def, :namespaces=,
            s(:args,
              s(:arg, :namespaces)),
            s(:begin,
              s(:send,
                s(:const, nil, :Functions), :namespace_context=,
                s(:lvar, :namespaces)),
              s(:ivasgn, :@namespaces,
                s(:lvar, :namespaces)))),
          s(:def, :parse,
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :path), :dup)),
              s(:send,
                s(:lvar, :path), :gsub!,
                s(:regexp,
                  s(:str, "([\\(\\[])\\s+"),
                  s(:regopt)),
                s(:str, "\\1")),
              s(:send,
                s(:lvar, :path), :gsub!,
                s(:regexp,
                  s(:str, "\\s+([\\]\\)])"),
                  s(:regopt)),
                s(:str, "\\1")),
              s(:lvasgn, :parsed,
                s(:array)),
              s(:send, nil, :OrExpr,
                s(:lvar, :path),
                s(:lvar, :parsed)),
              s(:lvar, :parsed))),
          s(:def, :predicate,
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :parsed,
                s(:array)),
              s(:send, nil, :Predicate,
                s(:dstr,
                  s(:str, "["),
                  s(:begin,
                    s(:lvar, :path)),
                  s(:str, "]")),
                s(:lvar, :parsed)),
              s(:lvar, :parsed))),
          s(:def, :abbreviate,
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :path,
                s(:if,
                  s(:send,
                    s(:lvar, :path), :kind_of?,
                    s(:const, nil, :String)),
                  s(:send, nil, :parse,
                    s(:lvar, :path)),
                  s(:lvar, :path))),
              s(:lvasgn, :string,
                s(:str, "")),
              s(:lvasgn, :document,
                s(:false)),
              s(:while,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :size), :>,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :op,
                    s(:send,
                      s(:lvar, :path), :shift)),
                  s(:case,
                    s(:lvar, :op),
                    s(:when,
                      s(:sym, :node), nil),
                    s(:when,
                      s(:sym, :attribute),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :string), :size), :>,
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :string), :<<,
                            s(:str, "/")), nil),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "@")))),
                    s(:when,
                      s(:sym, :child),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :string), :size), :>,
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "/")), nil)),
                    s(:when,
                      s(:sym, :descendant_or_self),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "/"))),
                    s(:when,
                      s(:sym, :self),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "."))),
                    s(:when,
                      s(:sym, :parent),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, ".."))),
                    s(:when,
                      s(:sym, :any),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "*"))),
                    s(:when,
                      s(:sym, :text),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "text()"))),
                    s(:when,
                      s(:sym, :following),
                      s(:sym, :following_sibling),
                      s(:sym, :ancestor),
                      s(:sym, :ancestor_or_self),
                      s(:sym, :descendant),
                      s(:sym, :namespace),
                      s(:sym, :preceding),
                      s(:sym, :preceding_sibling),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :string), :size), :==,
                            s(:int, 0)), nil,
                          s(:send,
                            s(:lvar, :string), :<<,
                            s(:str, "/"))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:send,
                            s(:send,
                              s(:lvar, :op), :to_s), :tr,
                            s(:str, "_"),
                            s(:str, "-"))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "::")))),
                    s(:when,
                      s(:sym, :qname),
                      s(:begin,
                        s(:lvasgn, :prefix,
                          s(:send,
                            s(:lvar, :path), :shift)),
                        s(:lvasgn, :name,
                          s(:send,
                            s(:lvar, :path), :shift)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :prefix), :size), :>,
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :string), :<<,
                            s(:send,
                              s(:lvar, :prefix), :+,
                              s(:str, ":"))), nil),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:lvar, :name)))),
                    s(:when,
                      s(:sym, :predicate),
                      s(:begin,
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "[")),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:block,
                            s(:send, nil, :predicate_to_string,
                              s(:send,
                                s(:lvar, :path), :shift)),
                            s(:args,
                              s(:arg, :x)),
                            s(:send, nil, :abbreviate,
                              s(:lvar, :x)))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "]")))),
                    s(:when,
                      s(:sym, :document),
                      s(:lvasgn, :document,
                        s(:true))),
                    s(:when,
                      s(:sym, :function),
                      s(:begin,
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:send,
                            s(:lvar, :path), :shift)),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "( ")),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:block,
                            s(:send, nil, :predicate_to_string,
                              s(:send,
                                s(:send,
                                  s(:lvar, :path), :shift), :[],
                                s(:int, 0))),
                            s(:args,
                              s(:arg, :x)),
                            s(:send, nil, :abbreviate,
                              s(:lvar, :x)))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, " )")))),
                    s(:when,
                      s(:sym, :literal),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:dstr,
                          s(:str, " \""),
                          s(:begin,
                            s(:send,
                              s(:lvar, :path), :shift)),
                          s(:str, "\" ")))),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :string), :size), :==,
                          s(:int, 0)), nil,
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "/"))),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "UNKNOWN(")),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:send,
                          s(:lvar, :op), :inspect)),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, ")")))))),
              s(:if,
                s(:lvar, :document),
                s(:lvasgn, :string,
                  s(:send,
                    s(:str, "/"), :+,
                    s(:lvar, :string))), nil),
              s(:return,
                s(:lvar, :string)))),
          s(:def, :expand,
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :path,
                s(:if,
                  s(:send,
                    s(:lvar, :path), :kind_of?,
                    s(:const, nil, :String)),
                  s(:send, nil, :parse,
                    s(:lvar, :path)),
                  s(:lvar, :path))),
              s(:lvasgn, :string,
                s(:str, "")),
              s(:lvasgn, :document,
                s(:false)),
              s(:while,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :size), :>,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :op,
                    s(:send,
                      s(:lvar, :path), :shift)),
                  s(:case,
                    s(:lvar, :op),
                    s(:when,
                      s(:sym, :node),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "node()"))),
                    s(:when,
                      s(:sym, :attribute),
                      s(:sym, :child),
                      s(:sym, :following),
                      s(:sym, :following_sibling),
                      s(:sym, :ancestor),
                      s(:sym, :ancestor_or_self),
                      s(:sym, :descendant),
                      s(:sym, :descendant_or_self),
                      s(:sym, :namespace),
                      s(:sym, :preceding),
                      s(:sym, :preceding_sibling),
                      s(:sym, :self),
                      s(:sym, :parent),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :string), :size), :==,
                            s(:int, 0)), nil,
                          s(:send,
                            s(:lvar, :string), :<<,
                            s(:str, "/"))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:send,
                            s(:send,
                              s(:lvar, :op), :to_s), :tr,
                            s(:str, "_"),
                            s(:str, "-"))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "::")))),
                    s(:when,
                      s(:sym, :any),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "*"))),
                    s(:when,
                      s(:sym, :qname),
                      s(:begin,
                        s(:lvasgn, :prefix,
                          s(:send,
                            s(:lvar, :path), :shift)),
                        s(:lvasgn, :name,
                          s(:send,
                            s(:lvar, :path), :shift)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :prefix), :size), :>,
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :string), :<<,
                            s(:send,
                              s(:lvar, :prefix), :+,
                              s(:str, ":"))), nil),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:lvar, :name)))),
                    s(:when,
                      s(:sym, :predicate),
                      s(:begin,
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "[")),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:block,
                            s(:send, nil, :predicate_to_string,
                              s(:send,
                                s(:lvar, :path), :shift)),
                            s(:args,
                              s(:arg, :x)),
                            s(:send, nil, :expand,
                              s(:lvar, :x)))),
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "]")))),
                    s(:when,
                      s(:sym, :document),
                      s(:lvasgn, :document,
                        s(:true))),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :string), :size), :==,
                          s(:int, 0)), nil,
                        s(:send,
                          s(:lvar, :string), :<<,
                          s(:str, "/"))),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, "UNKNOWN(")),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:send,
                          s(:lvar, :op), :inspect)),
                      s(:send,
                        s(:lvar, :string), :<<,
                        s(:str, ")")))))),
              s(:if,
                s(:lvar, :document),
                s(:lvasgn, :string,
                  s(:send,
                    s(:str, "/"), :+,
                    s(:lvar, :string))), nil),
              s(:return,
                s(:lvar, :string)))),
          s(:def, :predicate_to_string,
            s(:args,
              s(:arg, :path),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :string,
                s(:str, "")),
              s(:case,
                s(:send,
                  s(:lvar, :path), :[],
                  s(:int, 0)),
                s(:when,
                  s(:sym, :and),
                  s(:sym, :or),
                  s(:sym, :mult),
                  s(:sym, :plus),
                  s(:sym, :minus),
                  s(:sym, :neq),
                  s(:sym, :eq),
                  s(:sym, :lt),
                  s(:sym, :gt),
                  s(:sym, :lteq),
                  s(:sym, :gteq),
                  s(:sym, :div),
                  s(:sym, :mod),
                  s(:sym, :union),
                  s(:begin,
                    s(:lvasgn, :op,
                      s(:send,
                        s(:lvar, :path), :shift)),
                    s(:case,
                      s(:lvar, :op),
                      s(:when,
                        s(:sym, :eq),
                        s(:lvasgn, :op,
                          s(:str, "="))),
                      s(:when,
                        s(:sym, :lt),
                        s(:lvasgn, :op,
                          s(:str, "<"))),
                      s(:when,
                        s(:sym, :gt),
                        s(:lvasgn, :op,
                          s(:str, ">"))),
                      s(:when,
                        s(:sym, :lteq),
                        s(:lvasgn, :op,
                          s(:str, "<="))),
                      s(:when,
                        s(:sym, :gteq),
                        s(:lvasgn, :op,
                          s(:str, ">="))),
                      s(:when,
                        s(:sym, :neq),
                        s(:lvasgn, :op,
                          s(:str, "!="))),
                      s(:when,
                        s(:sym, :union),
                        s(:lvasgn, :op,
                          s(:str, "|"))), nil),
                    s(:lvasgn, :left,
                      s(:send, nil, :predicate_to_string,
                        s(:send,
                          s(:lvar, :path), :shift),
                        s(:block_pass,
                          s(:lvar, :block)))),
                    s(:lvasgn, :right,
                      s(:send, nil, :predicate_to_string,
                        s(:send,
                          s(:lvar, :path), :shift),
                        s(:block_pass,
                          s(:lvar, :block)))),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " ")),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:lvar, :left)),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " ")),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:send,
                        s(:lvar, :op), :to_s)),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " ")),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:lvar, :right)),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " ")))),
                s(:when,
                  s(:sym, :function),
                  s(:begin,
                    s(:send,
                      s(:lvar, :path), :shift),
                    s(:lvasgn, :name,
                      s(:send,
                        s(:lvar, :path), :shift)),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:lvar, :name)),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, "( ")),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:send, nil, :predicate_to_string,
                        s(:send,
                          s(:lvar, :path), :shift),
                        s(:block_pass,
                          s(:lvar, :block)))),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " )")))),
                s(:when,
                  s(:sym, :literal),
                  s(:begin,
                    s(:send,
                      s(:lvar, :path), :shift),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " ")),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :path), :shift), :inspect)),
                    s(:send,
                      s(:lvar, :string), :<<,
                      s(:str, " ")))),
                s(:begin,
                  s(:send,
                    s(:lvar, :string), :<<,
                    s(:str, " ")),
                  s(:send,
                    s(:lvar, :string), :<<,
                    s(:yield,
                      s(:lvar, :path))),
                  s(:send,
                    s(:lvar, :string), :<<,
                    s(:str, " ")))),
              s(:return,
                s(:send,
                  s(:lvar, :string), :squeeze,
                  s(:str, " "))))),
          s(:send, nil, :private),
          s(:def, :LocationPath,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :path), :strip)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :[],
                    s(:int, 0)), :==,
                  s(:str, "/")),
                s(:begin,
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:sym, :document)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :path), :[],
                        s(:int, 1)), :==,
                      s(:str, "/")),
                    s(:begin,
                      s(:send,
                        s(:lvar, :parsed), :<<,
                        s(:sym, :descendant_or_self)),
                      s(:send,
                        s(:lvar, :parsed), :<<,
                        s(:sym, :node)),
                      s(:lvasgn, :path,
                        s(:send,
                          s(:lvar, :path), :[],
                          s(:irange,
                            s(:int, 2),
                            s(:int, -1))))),
                    s(:lvasgn, :path,
                      s(:send,
                        s(:lvar, :path), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1)))))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :size), :>,
                  s(:int, 0)),
                s(:return,
                  s(:send, nil, :RelativeLocationPath,
                    s(:lvar, :path),
                    s(:lvar, :parsed))), nil))),
          s(:casgn, nil, :AXIS,
            s(:regexp,
              s(:str, "^(ancestor|ancestor-or-self|attribute|child|descendant|descendant-or-self|following|following-sibling|namespace|parent|preceding|preceding-sibling|self)::"),
              s(:regopt))),
          s(:def, :RelativeLocationPath,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:while,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :size), :>,
                  s(:int, 0)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :path), :[],
                        s(:int, 0)), :==,
                      s(:str, ".")),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :path), :[],
                          s(:int, 1)), :==,
                        s(:str, ".")),
                      s(:begin,
                        s(:send,
                          s(:lvar, :parsed), :<<,
                          s(:sym, :parent)),
                        s(:send,
                          s(:lvar, :parsed), :<<,
                          s(:sym, :node)),
                        s(:lvasgn, :path,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:irange,
                              s(:int, 2),
                              s(:int, -1))))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :parsed), :<<,
                          s(:sym, :self)),
                        s(:send,
                          s(:lvar, :parsed), :<<,
                          s(:sym, :node)),
                        s(:lvasgn, :path,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1)))))),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:int, 0)), :==,
                          s(:str, "@")),
                        s(:begin,
                          s(:send,
                            s(:lvar, :parsed), :<<,
                            s(:sym, :attribute)),
                          s(:lvasgn, :path,
                            s(:send,
                              s(:lvar, :path), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1))))),
                        s(:if,
                          s(:send,
                            s(:lvar, :path), :=~,
                            s(:const, nil, :AXIS)),
                          s(:begin,
                            s(:send,
                              s(:lvar, :parsed), :<<,
                              s(:send,
                                s(:send,
                                  s(:nth_ref, 1), :tr,
                                  s(:str, "-"),
                                  s(:str, "_")), :intern)),
                            s(:lvasgn, :path,
                              s(:back_ref, :$'))),
                          s(:send,
                            s(:lvar, :parsed), :<<,
                            s(:sym, :child)))),
                      s(:lvasgn, :n,
                        s(:array)),
                      s(:lvasgn, :path,
                        s(:send, nil, :NodeTest,
                          s(:lvar, :path),
                          s(:lvar, :n))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:int, 0)), :==,
                          s(:str, "[")),
                        s(:lvasgn, :path,
                          s(:send, nil, :Predicate,
                            s(:lvar, :path),
                            s(:lvar, :n))), nil),
                      s(:send,
                        s(:lvar, :parsed), :concat,
                        s(:lvar, :n)))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :path), :size), :>,
                      s(:int, 0)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :path), :[],
                          s(:int, 0)), :==,
                        s(:str, "/")),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:int, 1)), :==,
                          s(:str, "/")),
                        s(:begin,
                          s(:send,
                            s(:lvar, :parsed), :<<,
                            s(:sym, :descendant_or_self)),
                          s(:send,
                            s(:lvar, :parsed), :<<,
                            s(:sym, :node)),
                          s(:lvasgn, :path,
                            s(:send,
                              s(:lvar, :path), :[],
                              s(:irange,
                                s(:int, 2),
                                s(:int, -1))))),
                        s(:lvasgn, :path,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1))))),
                      s(:return,
                        s(:lvar, :path))), nil))),
              s(:return,
                s(:lvar, :path)))),
          s(:casgn, nil, :NCNAMETEST,
            s(:regexp,
              s(:str, "^("),
              s(:begin,
                s(:const, nil, :NCNAME_STR)),
              s(:str, "):\\*"),
              s(:regopt, :u))),
          s(:casgn, nil, :QNAME,
            s(:const,
              s(:const, nil, :Namespace), :NAMESPLIT)),
          s(:casgn, nil, :NODE_TYPE,
            s(:regexp,
              s(:str, "^(comment|text|node)\\(\\s*\\)"),
              s(:regopt, :m))),
          s(:casgn, nil, :PI,
            s(:regexp,
              s(:str, "^processing-instruction\\("),
              s(:regopt))),
          s(:def, :NodeTest,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:case,
                s(:lvar, :path),
                s(:when,
                  s(:regexp,
                    s(:str, "^\\*"),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :any)))),
                s(:when,
                  s(:const, nil, :NODE_TYPE),
                  s(:begin,
                    s(:lvasgn, :type,
                      s(:nth_ref, 1)),
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :type), :tr,
                          s(:str, "-"),
                          s(:str, "_")), :intern)))),
                s(:when,
                  s(:const, nil, :PI),
                  s(:begin,
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:lvasgn, :literal,
                      s(:nil)),
                    s(:if,
                      s(:send,
                        s(:lvar, :path), :!~,
                        s(:regexp,
                          s(:str, "^\\s*\\)"),
                          s(:regopt))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :path), :=~,
                          s(:const, nil, :LITERAL)),
                        s(:lvasgn, :literal,
                          s(:nth_ref, 1)),
                        s(:lvasgn, :path,
                          s(:back_ref, :$')),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :path), :[],
                              s(:int, 0)), :!=,
                            s(:str, ")")),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :ParseException), :new,
                              s(:str, "Missing ')' after processing instruction"))), nil),
                        s(:lvasgn, :path,
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1))))), nil),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :processing_instruction)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:begin,
                        s(:or,
                          s(:lvar, :literal),
                          s(:str, "")))))),
                s(:when,
                  s(:const, nil, :NCNAMETEST),
                  s(:begin,
                    s(:lvasgn, :prefix,
                      s(:nth_ref, 1)),
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :namespace)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:lvar, :prefix)))),
                s(:when,
                  s(:const, nil, :QNAME),
                  s(:begin,
                    s(:lvasgn, :prefix,
                      s(:nth_ref, 1)),
                    s(:lvasgn, :name,
                      s(:nth_ref, 2)),
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:if,
                      s(:lvar, :prefix), nil,
                      s(:lvasgn, :prefix,
                        s(:str, ""))),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :qname)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:lvar, :prefix)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:lvar, :name)))), nil),
              s(:return,
                s(:lvar, :path)))),
          s(:def, :Predicate,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :[],
                    s(:int, 0)), :==,
                  s(:str, "[")), nil,
                s(:return,
                  s(:nil))),
              s(:lvasgn, :predicates,
                s(:array)),
              s(:while,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :[],
                    s(:int, 0)), :==,
                  s(:str, "[")),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :path),
                      s(:lvasgn, :expr)),
                    s(:send, nil, :get_group,
                      s(:lvar, :path))),
                  s(:if,
                    s(:lvar, :expr),
                    s(:send,
                      s(:lvar, :predicates), :<<,
                      s(:send,
                        s(:lvar, :expr), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -2)))), nil))),
              s(:block,
                s(:send,
                  s(:lvar, :predicates), :each),
                s(:args,
                  s(:arg, :pred)),
                s(:begin,
                  s(:lvasgn, :preds,
                    s(:array)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:sym, :predicate)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :preds)),
                  s(:send, nil, :OrExpr,
                    s(:lvar, :pred),
                    s(:lvar, :preds)))),
              s(:lvar, :path))),
          s(:def, :OrExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :AndExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*( or )"),
                      s(:regopt))),
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:array,
                        s(:sym, :or),
                        s(:lvar, :n),
                        s(:array))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :AndExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :AndExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :EqualityExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*( and )"),
                      s(:regopt))),
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:array,
                        s(:sym, :and),
                        s(:lvar, :n),
                        s(:array))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :EqualityExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :EqualityExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :RelationalExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*(!?=)\\s*"),
                      s(:regopt))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :[],
                          s(:int, 0)), :==,
                        s(:str, "!")),
                      s(:lvasgn, :n,
                        s(:array,
                          s(:sym, :neq),
                          s(:lvar, :n),
                          s(:array))),
                      s(:lvasgn, :n,
                        s(:array,
                          s(:sym, :eq),
                          s(:lvar, :n),
                          s(:array)))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :RelationalExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :RelationalExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :AdditiveExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*([<>]=?)\\s*"),
                      s(:regopt))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :[],
                          s(:int, 0)), :==,
                        s(:str, "<")),
                      s(:lvasgn, :sym,
                        s(:str, "lt")),
                      s(:lvasgn, :sym,
                        s(:str, "gt"))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :[],
                          s(:int, -1)), :==,
                        s(:str, "=")),
                      s(:send,
                        s(:lvar, :sym), :<<,
                        s(:str, "eq")), nil),
                    s(:lvasgn, :n,
                      s(:array,
                        s(:send,
                          s(:lvar, :sym), :intern),
                        s(:lvar, :n),
                        s(:array))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :AdditiveExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :AdditiveExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :MultiplicativeExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*(\\+| -)\\s*"),
                      s(:regopt))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :[],
                          s(:int, 0)), :==,
                        s(:str, "+")),
                      s(:lvasgn, :n,
                        s(:array,
                          s(:sym, :plus),
                          s(:lvar, :n),
                          s(:array))),
                      s(:lvasgn, :n,
                        s(:array,
                          s(:sym, :minus),
                          s(:lvar, :n),
                          s(:array)))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :MultiplicativeExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :MultiplicativeExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :UnaryExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*(\\*| div | mod )\\s*"),
                      s(:regopt))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :[],
                          s(:int, 0)), :==,
                        s(:str, "*")),
                      s(:lvasgn, :n,
                        s(:array,
                          s(:sym, :mult),
                          s(:lvar, :n),
                          s(:array))),
                      s(:if,
                        s(:send,
                          s(:nth_ref, 1), :include?,
                          s(:str, "div")),
                        s(:lvasgn, :n,
                          s(:array,
                            s(:sym, :div),
                            s(:lvar, :n),
                            s(:array))),
                        s(:lvasgn, :n,
                          s(:array,
                            s(:sym, :mod),
                            s(:lvar, :n),
                            s(:array))))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :UnaryExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :UnaryExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:send,
                s(:lvar, :path), :=~,
                s(:regexp,
                  s(:str, "^(\\-*)"),
                  s(:regopt))),
              s(:lvasgn, :path,
                s(:back_ref, :$')),
              s(:if,
                s(:and,
                  s(:nth_ref, 1),
                  s(:begin,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :size), :%,
                          s(:int, 2))), :!=,
                      s(:int, 0)))),
                s(:lvasgn, :mult,
                  s(:int, -1)),
                s(:lvasgn, :mult,
                  s(:int, 1))),
              s(:if,
                s(:send,
                  s(:lvar, :mult), :<,
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :parsed), :<<,
                  s(:sym, :neg)), nil),
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :path,
                s(:send, nil, :UnionExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:send,
                s(:lvar, :parsed), :concat,
                s(:lvar, :n)),
              s(:lvar, :path))),
          s(:def, :UnionExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :PathExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:while,
                  s(:send,
                    s(:lvar, :rest), :=~,
                    s(:regexp,
                      s(:str, "^\\s*(\\|)\\s*"),
                      s(:regopt))),
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:array,
                        s(:sym, :union),
                        s(:lvar, :n),
                        s(:array))),
                    s(:lvasgn, :rest,
                      s(:send, nil, :PathExpr,
                        s(:back_ref, :$'),
                        s(:send,
                          s(:lvar, :n), :[],
                          s(:int, -1)))))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsed), :size), :==,
                    s(:int, 0)),
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :!=,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :parsed), :replace,
                  s(:lvar, :n)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :n), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :parsed), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvar, :rest))),
          s(:def, :PathExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:send,
                s(:lvar, :path), :=~,
                s(:regexp,
                  s(:str, "^\\s*"),
                  s(:regopt))),
              s(:lvasgn, :path,
                s(:back_ref, :$')),
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :rest,
                s(:send, nil, :FilterExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :!=,
                  s(:lvar, :path)),
                s(:if,
                  s(:and,
                    s(:lvar, :rest),
                    s(:send,
                      s(:send,
                        s(:lvar, :rest), :[],
                        s(:int, 0)), :==,
                      s(:str, "/"))),
                  s(:return,
                    s(:send, nil, :RelativeLocationPath,
                      s(:lvar, :rest),
                      s(:lvar, :n))), nil), nil),
              s(:if,
                s(:send,
                  s(:lvar, :rest), :=~,
                  s(:regexp,
                    s(:str, "\\A[/\\.\\@\\[\\w*]"),
                    s(:regopt))),
                s(:lvasgn, :rest,
                  s(:send, nil, :LocationPath,
                    s(:lvar, :rest),
                    s(:lvar, :n))), nil),
              s(:send,
                s(:lvar, :parsed), :concat,
                s(:lvar, :n)),
              s(:return,
                s(:lvar, :rest)))),
          s(:def, :FilterExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:lvasgn, :n,
                s(:array)),
              s(:lvasgn, :path,
                s(:send, nil, :PrimaryExpr,
                  s(:lvar, :path),
                  s(:lvar, :n))),
              s(:if,
                s(:and,
                  s(:lvar, :path),
                  s(:send,
                    s(:send,
                      s(:lvar, :path), :[],
                      s(:int, 0)), :==,
                    s(:str, "["))),
                s(:lvasgn, :path,
                  s(:send, nil, :Predicate,
                    s(:lvar, :path),
                    s(:lvar, :n))), nil),
              s(:send,
                s(:lvar, :parsed), :concat,
                s(:lvar, :n)),
              s(:lvar, :path))),
          s(:casgn, nil, :VARIABLE_REFERENCE,
            s(:regexp,
              s(:str, "^\\$("),
              s(:begin,
                s(:const, nil, :NAME_STR)),
              s(:str, ")"),
              s(:regopt, :u))),
          s(:casgn, nil, :NUMBER,
            s(:regexp,
              s(:str, "^(\\d*\\.?\\d+)"),
              s(:regopt))),
          s(:casgn, nil, :NT,
            s(:regexp,
              s(:str, "^comment|text|processing-instruction|node$"),
              s(:regopt))),
          s(:def, :PrimaryExpr,
            s(:args,
              s(:arg, :path),
              s(:arg, :parsed)),
            s(:begin,
              s(:case,
                s(:lvar, :path),
                s(:when,
                  s(:const, nil, :VARIABLE_REFERENCE),
                  s(:begin,
                    s(:lvasgn, :varname,
                      s(:nth_ref, 1)),
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :variable)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:lvar, :varname)))),
                s(:when,
                  s(:regexp,
                    s(:str, "^(\\w[-\\w]*)(?:\\()"),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :fname,
                      s(:nth_ref, 1)),
                    s(:lvasgn, :tmp,
                      s(:back_ref, :$')),
                    s(:if,
                      s(:send,
                        s(:lvar, :fname), :=~,
                        s(:const, nil, :NT)),
                      s(:return,
                        s(:lvar, :path)), nil),
                    s(:lvasgn, :path,
                      s(:lvar, :tmp)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :function)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:lvar, :fname)),
                    s(:lvasgn, :path,
                      s(:send, nil, :FunctionCall,
                        s(:lvar, :path),
                        s(:lvar, :parsed))))),
                s(:when,
                  s(:const, nil, :NUMBER),
                  s(:begin,
                    s(:lvasgn, :varname,
                      s(:if,
                        s(:send,
                          s(:nth_ref, 1), :nil?),
                        s(:nth_ref, 2),
                        s(:nth_ref, 1))),
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :literal)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :varname), :include?,
                            s(:str, ".")),
                          s(:send,
                            s(:lvar, :varname), :to_f),
                          s(:send,
                            s(:lvar, :varname), :to_i)))))),
                s(:when,
                  s(:const, nil, :LITERAL),
                  s(:begin,
                    s(:lvasgn, :varname,
                      s(:if,
                        s(:send,
                          s(:nth_ref, 1), :nil?),
                        s(:nth_ref, 2),
                        s(:nth_ref, 1))),
                    s(:lvasgn, :path,
                      s(:back_ref, :$')),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:sym, :literal)),
                    s(:send,
                      s(:lvar, :parsed), :<<,
                      s(:lvar, :varname)))),
                s(:when,
                  s(:regexp,
                    s(:str, "^\\("),
                    s(:regopt)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :path),
                        s(:lvasgn, :contents)),
                      s(:send, nil, :get_group,
                        s(:lvar, :path))),
                    s(:lvasgn, :contents,
                      s(:send,
                        s(:lvar, :contents), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -2)))),
                    s(:lvasgn, :n,
                      s(:array)),
                    s(:send, nil, :OrExpr,
                      s(:lvar, :contents),
                      s(:lvar, :n)),
                    s(:send,
                      s(:lvar, :parsed), :concat,
                      s(:lvar, :n)))), nil),
              s(:lvar, :path))),
          s(:def, :FunctionCall,
            s(:args,
              s(:arg, :rest),
              s(:arg, :parsed)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :path),
                  s(:lvasgn, :arguments)),
                s(:send, nil, :parse_args,
                  s(:lvar, :rest))),
              s(:lvasgn, :argset,
                s(:array)),
              s(:for,
                s(:lvasgn, :argument),
                s(:lvar, :arguments),
                s(:begin,
                  s(:lvasgn, :args,
                    s(:array)),
                  s(:send, nil, :OrExpr,
                    s(:lvar, :argument),
                    s(:lvar, :args)),
                  s(:send,
                    s(:lvar, :argset), :<<,
                    s(:lvar, :args)))),
              s(:send,
                s(:lvar, :parsed), :<<,
                s(:lvar, :argset)),
              s(:lvar, :path))),
          s(:def, :get_group,
            s(:args,
              s(:arg, :string)),
            s(:begin,
              s(:lvasgn, :ind,
                s(:int, 0)),
              s(:lvasgn, :depth,
                s(:int, 0)),
              s(:lvasgn, :st,
                s(:send,
                  s(:lvar, :string), :[],
                  s(:int, 0),
                  s(:int, 1))),
              s(:lvasgn, :en,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :st), :==,
                      s(:str, "(")),
                    s(:str, ")"),
                    s(:str, "]")))),
              s(:while_post,
                s(:and,
                  s(:send,
                    s(:lvar, :depth), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :ind), :<,
                    s(:send,
                      s(:lvar, :string), :length))),
                s(:kwbegin,
                  s(:case,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:lvar, :ind),
                      s(:int, 1)),
                    s(:when,
                      s(:lvar, :st),
                      s(:op_asgn,
                        s(:lvasgn, :depth), :+,
                        s(:int, 1))),
                    s(:when,
                      s(:lvar, :en),
                      s(:op_asgn,
                        s(:lvasgn, :depth), :-,
                        s(:int, 1))), nil),
                  s(:op_asgn,
                    s(:lvasgn, :ind), :+,
                    s(:int, 1)))),
              s(:if,
                s(:send,
                  s(:lvar, :depth), :==,
                  s(:int, 0)), nil,
                s(:return,
                  s(:nil))),
              s(:array,
                s(:send,
                  s(:lvar, :string), :[],
                  s(:irange,
                    s(:lvar, :ind),
                    s(:int, -1))),
                s(:send,
                  s(:lvar, :string), :[],
                  s(:irange,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :ind), :-,
                      s(:int, 1))))))),
          s(:def, :parse_args,
            s(:args,
              s(:arg, :string)),
            s(:begin,
              s(:lvasgn, :arguments,
                s(:array)),
              s(:lvasgn, :ind,
                s(:int, 0)),
              s(:lvasgn, :inquot,
                s(:false)),
              s(:lvasgn, :inapos,
                s(:false)),
              s(:lvasgn, :depth,
                s(:int, 1)),
              s(:while_post,
                s(:and,
                  s(:send,
                    s(:lvar, :depth), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :ind), :<,
                    s(:send,
                      s(:lvar, :string), :length))),
                s(:kwbegin,
                  s(:case,
                    s(:send,
                      s(:lvar, :string), :[],
                      s(:lvar, :ind)),
                    s(:when,
                      s(:str, "\""),
                      s(:if,
                        s(:lvar, :inapos), nil,
                        s(:lvasgn, :inquot,
                          s(:send,
                            s(:lvar, :inquot), :!)))),
                    s(:when,
                      s(:str, "'"),
                      s(:if,
                        s(:lvar, :inquot), nil,
                        s(:lvasgn, :inapos,
                          s(:send,
                            s(:lvar, :inapos), :!)))),
                    s(:if,
                      s(:or,
                        s(:lvar, :inquot),
                        s(:lvar, :inapos)), nil,
                      s(:case,
                        s(:send,
                          s(:lvar, :string), :[],
                          s(:lvar, :ind)),
                        s(:when,
                          s(:str, "("),
                          s(:begin,
                            s(:op_asgn,
                              s(:lvasgn, :depth), :+,
                              s(:int, 1)),
                            s(:if,
                              s(:send,
                                s(:lvar, :depth), :==,
                                s(:int, 1)),
                              s(:begin,
                                s(:lvasgn, :string,
                                  s(:send,
                                    s(:lvar, :string), :[],
                                    s(:irange,
                                      s(:int, 1),
                                      s(:int, -1)))),
                                s(:op_asgn,
                                  s(:lvasgn, :ind), :-,
                                  s(:int, 1))), nil))),
                        s(:when,
                          s(:str, ")"),
                          s(:begin,
                            s(:op_asgn,
                              s(:lvasgn, :depth), :-,
                              s(:int, 1)),
                            s(:if,
                              s(:send,
                                s(:lvar, :depth), :==,
                                s(:int, 0)),
                              s(:begin,
                                s(:lvasgn, :s,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :string), :[],
                                      s(:int, 0),
                                      s(:lvar, :ind)), :strip)),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :s), :==,
                                    s(:str, "")), nil,
                                  s(:send,
                                    s(:lvar, :arguments), :<<,
                                    s(:lvar, :s))),
                                s(:lvasgn, :string,
                                  s(:send,
                                    s(:lvar, :string), :[],
                                    s(:irange,
                                      s(:send,
                                        s(:lvar, :ind), :+,
                                        s(:int, 1)),
                                      s(:int, -1))))), nil))),
                        s(:when,
                          s(:str, ","),
                          s(:if,
                            s(:send,
                              s(:lvar, :depth), :==,
                              s(:int, 1)),
                            s(:begin,
                              s(:lvasgn, :s,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :string), :[],
                                    s(:int, 0),
                                    s(:lvar, :ind)), :strip)),
                              s(:if,
                                s(:send,
                                  s(:lvar, :s), :==,
                                  s(:str, "")), nil,
                                s(:send,
                                  s(:lvar, :arguments), :<<,
                                  s(:lvar, :s))),
                              s(:lvasgn, :string,
                                s(:send,
                                  s(:lvar, :string), :[],
                                  s(:irange,
                                    s(:send,
                                      s(:lvar, :ind), :+,
                                      s(:int, 1)),
                                    s(:int, -1)))),
                              s(:lvasgn, :ind,
                                s(:int, -1))), nil)), nil))),
                  s(:op_asgn,
                    s(:lvasgn, :ind), :+,
                    s(:int, 1)))),
              s(:if,
                s(:send,
                  s(:lvar, :depth), :==,
                  s(:int, 0)), nil,
                s(:return,
                  s(:nil))),
              s(:array,
                s(:lvar, :string),
                s(:lvar, :arguments)))))))))
