s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/undefinednamespaceexception")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:send, nil, :require,
    s(:str, "set")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:class,
        s(:const, nil, :BaseParser), nil,
        s(:begin,
          s(:casgn, nil, :LETTER,
            s(:str, "[:alpha:]")),
          s(:casgn, nil, :DIGIT,
            s(:str, "[:digit:]")),
          s(:casgn, nil, :COMBININGCHAR,
            s(:str, "")),
          s(:casgn, nil, :EXTENDER,
            s(:str, "")),
          s(:casgn, nil, :NCNAME_STR,
            s(:dstr,
              s(:str, "["),
              s(:begin,
                s(:const, nil, :LETTER)),
              s(:str, "_:][-[:alnum:]._:"),
              s(:begin,
                s(:const, nil, :COMBININGCHAR)),
              s(:begin,
                s(:const, nil, :EXTENDER)),
              s(:str, "]*"))),
          s(:casgn, nil, :NAME_STR,
            s(:dstr,
              s(:str, "(?:("),
              s(:begin,
                s(:const, nil, :NCNAME_STR)),
              s(:str, "):)?("),
              s(:begin,
                s(:const, nil, :NCNAME_STR)),
              s(:str, ")"))),
          s(:casgn, nil, :UNAME_STR,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :NCNAME_STR)),
              s(:str, ":)?"),
              s(:begin,
                s(:const, nil, :NCNAME_STR)))),
          s(:casgn, nil, :NAMECHAR,
            s(:str, "[\\-\\w\\.:]")),
          s(:casgn, nil, :NAME,
            s(:dstr,
              s(:str, "([\\w:]"),
              s(:begin,
                s(:const, nil, :NAMECHAR)),
              s(:str, "*)"))),
          s(:casgn, nil, :NMTOKEN,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :NAMECHAR)),
              s(:str, ")+"))),
          s(:casgn, nil, :NMTOKENS,
            s(:dstr,
              s(:begin,
                s(:const, nil, :NMTOKEN)),
              s(:str, "(\\s+"),
              s(:begin,
                s(:const, nil, :NMTOKEN)),
              s(:str, ")*"))),
          s(:casgn, nil, :REFERENCE,
            s(:dstr,
              s(:str, "&(?:"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, ";|#\\d+;|#x[0-9a-fA-F]+;)"))),
          s(:casgn, nil, :REFERENCE_RE,
            s(:regexp,
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:regopt))),
          s(:casgn, nil, :DOCTYPE_START,
            s(:regexp,
              s(:str, "\\A\\s*<!DOCTYPE\\s"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :DOCTYPE_END,
            s(:regexp,
              s(:str, "\\A\\s*\\]\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :DOCTYPE_PATTERN,
            s(:regexp,
              s(:str, "\\s*<!DOCTYPE\\s+(.*?)(\\[|>)"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :ATTRIBUTE_PATTERN,
            s(:regexp,
              s(:str, "\\s*("),
              s(:begin,
                s(:const, nil, :NAME_STR)),
              s(:str, ")\\s*=\\s*([\"'])(.*?)\\4"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :COMMENT_START,
            s(:regexp,
              s(:str, "\\A<!--"),
              s(:regopt, :u))),
          s(:casgn, nil, :COMMENT_PATTERN,
            s(:regexp,
              s(:str, "<!--(.*?)-->"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :CDATA_START,
            s(:regexp,
              s(:str, "\\A<!\\[CDATA\\["),
              s(:regopt, :u))),
          s(:casgn, nil, :CDATA_END,
            s(:regexp,
              s(:str, "\\A\\s*\\]\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :CDATA_PATTERN,
            s(:regexp,
              s(:str, "<!\\[CDATA\\[(.*?)\\]\\]>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :XMLDECL_START,
            s(:regexp,
              s(:str, "\\A<\\?xml\\s"),
              s(:regopt, :u))),
          s(:casgn, nil, :XMLDECL_PATTERN,
            s(:regexp,
              s(:str, "<\\?xml\\s+(.*?)\\?>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :INSTRUCTION_START,
            s(:regexp,
              s(:str, "\\A<\\?"),
              s(:regopt, :u))),
          s(:casgn, nil, :INSTRUCTION_PATTERN,
            s(:regexp,
              s(:str, "<\\?(.*?)(\\s+.*?)?\\?>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :TAG_MATCH,
            s(:regexp,
              s(:str, "^<((?>"),
              s(:begin,
                s(:const, nil, :NAME_STR)),
              s(:str, "))\\s*((?>\\s+"),
              s(:begin,
                s(:const, nil, :UNAME_STR)),
              s(:str, "\\s*=\\s*([\"']).*?\\5)*)\\s*(/)?>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :CLOSE_MATCH,
            s(:regexp,
              s(:str, "^\\s*</("),
              s(:begin,
                s(:const, nil, :NAME_STR)),
              s(:str, ")\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :VERSION,
            s(:regexp,
              s(:str, "\\bversion\\s*=\\s*[\"'](.*?)['\"]"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :ENCODING,
            s(:regexp,
              s(:str, "\\bencoding\\s*=\\s*[\"'](.*?)['\"]"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :STANDALONE,
            s(:regexp,
              s(:str, "\\bstandalone\\s*=\\s*[\"'](.*?)['\"]"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :ENTITY_START,
            s(:regexp,
              s(:str, "\\A\\s*<!ENTITY"),
              s(:regopt))),
          s(:casgn, nil, :IDENTITY,
            s(:regexp,
              s(:str, "^([!\\*\\w\\-]+)(\\s+"),
              s(:begin,
                s(:const, nil, :NCNAME_STR)),
              s(:str, ")?(\\s+[\"'](.*?)['\"])?(\\s+['\"](.*?)[\"'])?"),
              s(:regopt, :u))),
          s(:casgn, nil, :ELEMENTDECL_START,
            s(:regexp,
              s(:str, "\\A\\s*<!ELEMENT"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :ELEMENTDECL_PATTERN,
            s(:regexp,
              s(:str, "\\A\\s*(<!ELEMENT.*?)>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :SYSTEMENTITY,
            s(:regexp,
              s(:str, "\\A\\s*(%.*?;)\\s*$"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :ENUMERATION,
            s(:dstr,
              s(:str, "\\(\\s*"),
              s(:begin,
                s(:const, nil, :NMTOKEN)),
              s(:str, "(?:\\s*\\|\\s*"),
              s(:begin,
                s(:const, nil, :NMTOKEN)),
              s(:str, ")*\\s*\\)"))),
          s(:casgn, nil, :NOTATIONTYPE,
            s(:dstr,
              s(:str, "NOTATION\\s+\\(\\s*"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "(?:\\s*\\|\\s*"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, ")*\\s*\\)"))),
          s(:casgn, nil, :ENUMERATEDTYPE,
            s(:dstr,
              s(:str, "(?:(?:"),
              s(:begin,
                s(:const, nil, :NOTATIONTYPE)),
              s(:str, ")|(?:"),
              s(:begin,
                s(:const, nil, :ENUMERATION)),
              s(:str, "))"))),
          s(:casgn, nil, :ATTTYPE,
            s(:dstr,
              s(:str, "(CDATA|ID|IDREF|IDREFS|ENTITY|ENTITIES|NMTOKEN|NMTOKENS|"),
              s(:begin,
                s(:const, nil, :ENUMERATEDTYPE)),
              s(:str, ")"))),
          s(:casgn, nil, :ATTVALUE,
            s(:dstr,
              s(:str, "(?:\"((?:[^<&\"]|"),
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:str, ")*)\")|(?:'((?:[^<&']|"),
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:str, ")*)')"))),
          s(:casgn, nil, :DEFAULTDECL,
            s(:dstr,
              s(:str, "(#REQUIRED|#IMPLIED|(?:(#FIXED\\s+)?"),
              s(:begin,
                s(:const, nil, :ATTVALUE)),
              s(:str, "))"))),
          s(:casgn, nil, :ATTDEF,
            s(:dstr,
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :ATTTYPE)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :DEFAULTDECL)))),
          s(:casgn, nil, :ATTDEF_RE,
            s(:regexp,
              s(:begin,
                s(:const, nil, :ATTDEF)),
              s(:regopt))),
          s(:casgn, nil, :ATTLISTDECL_START,
            s(:regexp,
              s(:str, "\\A\\s*<!ATTLIST"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :ATTLISTDECL_PATTERN,
            s(:regexp,
              s(:str, "\\A\\s*<!ATTLIST\\s+"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :ATTDEF)),
              s(:str, ")*\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :NOTATIONDECL_START,
            s(:regexp,
              s(:str, "\\A\\s*<!NOTATION"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :PUBLIC,
            s(:regexp,
              s(:str, "\\A\\s*<!NOTATION\\s+(\\w[\\-\\w]*)\\s+(PUBLIC)\\s+([\"'])(.*?)\\3(?:\\s+([\"'])(.*?)\\5)?\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :SYSTEM,
            s(:regexp,
              s(:str, "\\A\\s*<!NOTATION\\s+(\\w[\\-\\w]*)\\s+(SYSTEM)\\s+([\"'])(.*?)\\3\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :TEXT_PATTERN,
            s(:regexp,
              s(:str, "\\A([^<]*)"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :PUBIDCHAR,
            s(:str, " \r\na-zA-Z0-9\\-()+,./:=?;!*@$_%#")),
          s(:casgn, nil, :SYSTEMLITERAL,
            s(:str, "((?:\"[^\"]*\")|(?:'[^']*'))")),
          s(:casgn, nil, :PUBIDLITERAL,
            s(:dstr,
              s(:str, "(\"["),
              s(:begin,
                s(:const, nil, :PUBIDCHAR)),
              s(:str, "']*\"|'["),
              s(:begin,
                s(:const, nil, :PUBIDCHAR)),
              s(:str, "]*')"))),
          s(:casgn, nil, :EXTERNALID,
            s(:dstr,
              s(:str, "(?:(?:(SYSTEM)\\s+"),
              s(:begin,
                s(:const, nil, :SYSTEMLITERAL)),
              s(:str, ")|(?:(PUBLIC)\\s+"),
              s(:begin,
                s(:const, nil, :PUBIDLITERAL)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :SYSTEMLITERAL)),
              s(:str, "))"))),
          s(:casgn, nil, :NDATADECL,
            s(:dstr,
              s(:str, "\\s+NDATA\\s+"),
              s(:begin,
                s(:const, nil, :NAME)))),
          s(:casgn, nil, :PEREFERENCE,
            s(:dstr,
              s(:str, "%"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, ";"))),
          s(:casgn, nil, :ENTITYVALUE,
            s(:dstr,
              s(:str, "((?:\"(?:[^%&\"]|"),
              s(:begin,
                s(:const, nil, :PEREFERENCE)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:str, ")*\")|(?:'([^%&']|"),
              s(:begin,
                s(:const, nil, :PEREFERENCE)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:str, ")*'))"))),
          s(:casgn, nil, :PEDEF,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :ENTITYVALUE)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :EXTERNALID)),
              s(:str, ")"))),
          s(:casgn, nil, :ENTITYDEF,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :ENTITYVALUE)),
              s(:str, "|(?:"),
              s(:begin,
                s(:const, nil, :EXTERNALID)),
              s(:str, "("),
              s(:begin,
                s(:const, nil, :NDATADECL)),
              s(:str, ")?))"))),
          s(:casgn, nil, :PEDECL,
            s(:dstr,
              s(:str, "<!ENTITY\\s+(%)\\s+"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :PEDEF)),
              s(:str, "\\s*>"))),
          s(:casgn, nil, :GEDECL,
            s(:dstr,
              s(:str, "<!ENTITY\\s+"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :ENTITYDEF)),
              s(:str, "\\s*>"))),
          s(:casgn, nil, :ENTITYDECL,
            s(:regexp,
              s(:str, "\\s*(?:"),
              s(:begin,
                s(:const, nil, :GEDECL)),
              s(:str, ")|(?:"),
              s(:begin,
                s(:const, nil, :PEDECL)),
              s(:str, ")"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :EREFERENCE,
            s(:regexp,
              s(:str, "&(?!"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, ";)"),
              s(:regopt))),
          s(:casgn, nil, :DEFAULT_ENTITIES,
            s(:hash,
              s(:pair,
                s(:str, "gt"),
                s(:array,
                  s(:regexp,
                    s(:str, "&gt;"),
                    s(:regopt)),
                  s(:str, "&gt;"),
                  s(:str, ">"),
                  s(:regexp,
                    s(:str, ">"),
                    s(:regopt)))),
              s(:pair,
                s(:str, "lt"),
                s(:array,
                  s(:regexp,
                    s(:str, "&lt;"),
                    s(:regopt)),
                  s(:str, "&lt;"),
                  s(:str, "<"),
                  s(:regexp,
                    s(:str, "<"),
                    s(:regopt)))),
              s(:pair,
                s(:str, "quot"),
                s(:array,
                  s(:regexp,
                    s(:str, "&quot;"),
                    s(:regopt)),
                  s(:str, "&quot;"),
                  s(:str, "\""),
                  s(:regexp,
                    s(:str, "\""),
                    s(:regopt)))),
              s(:pair,
                s(:str, "apos"),
                s(:array,
                  s(:regexp,
                    s(:str, "&apos;"),
                    s(:regopt)),
                  s(:str, "&apos;"),
                  s(:str, "'"),
                  s(:regexp,
                    s(:str, "'"),
                    s(:regopt)))))),
          s(:casgn, nil, :MISSING_ATTRIBUTE_QUOTES,
            s(:regexp,
              s(:str, "^<"),
              s(:begin,
                s(:const, nil, :NAME_STR)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :NAME_STR)),
              s(:str, "\\s*=\\s*[^\"']"),
              s(:regopt, :m, :u))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :source)),
            s(:begin,
              s(:send,
                s(:self), :stream=,
                s(:lvar, :source)),
              s(:ivasgn, :@listeners,
                s(:array)))),
          s(:def, :add_listener,
            s(:args,
              s(:arg, :listener)),
            s(:send,
              s(:ivar, :@listeners), :<<,
              s(:lvar, :listener))),
          s(:send, nil, :attr_reader,
            s(:sym, :source)),
          s(:def, :stream=,
            s(:args,
              s(:arg, :source)),
            s(:begin,
              s(:ivasgn, :@source,
                s(:send,
                  s(:const, nil, :SourceFactory), :create_from,
                  s(:lvar, :source))),
              s(:ivasgn, :@closed,
                s(:nil)),
              s(:ivasgn, :@document_status,
                s(:nil)),
              s(:ivasgn, :@tags,
                s(:array)),
              s(:ivasgn, :@stack,
                s(:array)),
              s(:ivasgn, :@entities,
                s(:array)),
              s(:ivasgn, :@nsstack,
                s(:array)))),
          s(:def, :position,
            s(:args),
            s(:if,
              s(:send,
                s(:ivar, :@source), :respond_to?,
                s(:sym, :position)),
              s(:send,
                s(:ivar, :@source), :position),
              s(:int, 0))),
          s(:def, :empty?,
            s(:args),
            s(:return,
              s(:begin,
                s(:and,
                  s(:send,
                    s(:ivar, :@source), :empty?),
                  s(:send,
                    s(:ivar, :@stack), :empty?))))),
          s(:def, :has_next?,
            s(:args),
            s(:return,
              s(:send,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:ivar, :@source), :empty?),
                    s(:send,
                      s(:ivar, :@stack), :empty?))), :!))),
          s(:def, :unshift,
            s(:args,
              s(:arg, :token)),
            s(:send,
              s(:ivar, :@stack), :unshift,
              s(:lvar, :token))),
          s(:def, :peek,
            s(:args,
              s(:optarg, :depth,
                s(:int, 0))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :depth), :<,
                  s(:int, -1)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Illegal argument \""),
                    s(:begin,
                      s(:lvar, :depth)),
                    s(:str, "\""))), nil),
              s(:lvasgn, :temp,
                s(:array)),
              s(:if,
                s(:send,
                  s(:lvar, :depth), :==,
                  s(:int, -1)),
                s(:until,
                  s(:send, nil, :empty?),
                  s(:send,
                    s(:lvar, :temp), :push,
                    s(:send, nil, :pull))),
                s(:while,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@stack), :size), :+,
                      s(:send,
                        s(:lvar, :temp), :size)), :<,
                    s(:send,
                      s(:lvar, :depth), :+,
                      s(:int, 1))),
                  s(:send,
                    s(:lvar, :temp), :push,
                    s(:send, nil, :pull)))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :temp), :size), :>,
                  s(:int, 0)),
                s(:op_asgn,
                  s(:ivasgn, :@stack), :+,
                  s(:lvar, :temp)), nil),
              s(:send,
                s(:ivar, :@stack), :[],
                s(:lvar, :depth)))),
          s(:def, :pull,
            s(:args),
            s(:block,
              s(:send,
                s(:send, nil, :pull_event), :tap),
              s(:args,
                s(:arg, :event)),
              s(:block,
                s(:send,
                  s(:ivar, :@listeners), :each),
                s(:args,
                  s(:arg, :listener)),
                s(:send,
                  s(:lvar, :listener), :receive,
                  s(:lvar, :event))))),
          s(:def, :pull_event,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@closed),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :x),
                      s(:ivasgn, :@closed)),
                    s(:array,
                      s(:ivar, :@closed),
                      s(:nil))),
                  s(:return,
                    s(:array,
                      s(:sym, :end_element),
                      s(:lvar, :x)))), nil),
              s(:if,
                s(:send, nil, :empty?),
                s(:return,
                  s(:array,
                    s(:sym, :end_document))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@stack), :size), :>,
                  s(:int, 0)),
                s(:return,
                  s(:send,
                    s(:ivar, :@stack), :shift)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@source), :buffer), :size), :<,
                  s(:int, 2)),
                s(:send,
                  s(:ivar, :@source), :read), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@document_status), :==,
                  s(:nil)),
                s(:begin,
                  s(:lvasgn, :word,
                    s(:send,
                      s(:ivar, :@source), :match,
                      s(:regexp,
                        s(:str, "^((?:\\s+)|(?:<[^>]*>))"),
                        s(:regopt, :m, :u)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :word), :nil?), nil,
                    s(:lvasgn, :word,
                      s(:send,
                        s(:lvar, :word), :[],
                        s(:int, 1)))),
                  s(:case,
                    s(:lvar, :word),
                    s(:when,
                      s(:const, nil, :COMMENT_START),
                      s(:return,
                        s(:array,
                          s(:sym, :comment),
                          s(:send,
                            s(:send,
                              s(:ivar, :@source), :match,
                              s(:const, nil, :COMMENT_PATTERN),
                              s(:true)), :[],
                            s(:int, 1))))),
                    s(:when,
                      s(:const, nil, :XMLDECL_START),
                      s(:begin,
                        s(:lvasgn, :results,
                          s(:send,
                            s(:send,
                              s(:ivar, :@source), :match,
                              s(:const, nil, :XMLDECL_PATTERN),
                              s(:true)), :[],
                            s(:int, 1))),
                        s(:lvasgn, :version,
                          s(:send,
                            s(:const, nil, :VERSION), :match,
                            s(:lvar, :results))),
                        s(:if,
                          s(:send,
                            s(:lvar, :version), :nil?), nil,
                          s(:lvasgn, :version,
                            s(:send,
                              s(:lvar, :version), :[],
                              s(:int, 1)))),
                        s(:lvasgn, :encoding,
                          s(:send,
                            s(:const, nil, :ENCODING), :match,
                            s(:lvar, :results))),
                        s(:if,
                          s(:send,
                            s(:lvar, :encoding), :nil?), nil,
                          s(:lvasgn, :encoding,
                            s(:send,
                              s(:lvar, :encoding), :[],
                              s(:int, 1)))),
                        s(:if,
                          s(:send, nil, :need_source_encoding_update?,
                            s(:lvar, :encoding)),
                          s(:send,
                            s(:ivar, :@source), :encoding=,
                            s(:lvar, :encoding)), nil),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:lvar, :encoding), :nil?),
                            s(:match_with_lvasgn,
                              s(:regexp,
                                s(:str, "\\AUTF-16(?:BE|LE)\\z"),
                                s(:regopt, :i)),
                              s(:send,
                                s(:ivar, :@source), :encoding))),
                          s(:lvasgn, :encoding,
                            s(:str, "UTF-16")), nil),
                        s(:lvasgn, :standalone,
                          s(:send,
                            s(:const, nil, :STANDALONE), :match,
                            s(:lvar, :results))),
                        s(:if,
                          s(:send,
                            s(:lvar, :standalone), :nil?), nil,
                          s(:lvasgn, :standalone,
                            s(:send,
                              s(:lvar, :standalone), :[],
                              s(:int, 1)))),
                        s(:return,
                          s(:array,
                            s(:sym, :xmldecl),
                            s(:lvar, :version),
                            s(:lvar, :encoding),
                            s(:lvar, :standalone))))),
                    s(:when,
                      s(:const, nil, :INSTRUCTION_START),
                      s(:return,
                        s(:array,
                          s(:sym, :processing_instruction),
                          s(:splat,
                            s(:send,
                              s(:send,
                                s(:ivar, :@source), :match,
                                s(:const, nil, :INSTRUCTION_PATTERN),
                                s(:true)), :[],
                              s(:int, 1),
                              s(:int, 2)))))),
                    s(:when,
                      s(:const, nil, :DOCTYPE_START),
                      s(:begin,
                        s(:lvasgn, :md,
                          s(:send,
                            s(:ivar, :@source), :match,
                            s(:const, nil, :DOCTYPE_PATTERN),
                            s(:true))),
                        s(:send,
                          s(:ivar, :@nsstack), :unshift,
                          s(:lvasgn, :curr_ns,
                            s(:send,
                              s(:const, nil, :Set), :new))),
                        s(:lvasgn, :identity,
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 1))),
                        s(:lvasgn, :close,
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 2))),
                        s(:send,
                          s(:lvar, :identity), :=~,
                          s(:const, nil, :IDENTITY)),
                        s(:lvasgn, :name,
                          s(:nth_ref, 1)),
                        s(:if,
                          s(:send,
                            s(:lvar, :name), :nil?),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const,
                                s(:const, nil, :REXML), :ParseException), :new,
                              s(:str, "DOCTYPE is missing a name"))), nil),
                        s(:lvasgn, :pub_sys,
                          s(:if,
                            s(:send,
                              s(:nth_ref, 2), :nil?),
                            s(:nil),
                            s(:send,
                              s(:nth_ref, 2), :strip))),
                        s(:lvasgn, :long_name,
                          s(:if,
                            s(:send,
                              s(:nth_ref, 4), :nil?),
                            s(:nil),
                            s(:send,
                              s(:nth_ref, 4), :strip))),
                        s(:lvasgn, :uri,
                          s(:if,
                            s(:send,
                              s(:nth_ref, 6), :nil?),
                            s(:nil),
                            s(:send,
                              s(:nth_ref, 6), :strip))),
                        s(:lvasgn, :args,
                          s(:array,
                            s(:sym, :start_doctype),
                            s(:lvar, :name),
                            s(:lvar, :pub_sys),
                            s(:lvar, :long_name),
                            s(:lvar, :uri))),
                        s(:if,
                          s(:send,
                            s(:lvar, :close), :==,
                            s(:str, ">")),
                          s(:begin,
                            s(:ivasgn, :@document_status,
                              s(:sym, :after_doctype)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@source), :buffer), :size), :<,
                                s(:int, 2)),
                              s(:send,
                                s(:ivar, :@source), :read), nil),
                            s(:lvasgn, :md,
                              s(:send,
                                s(:ivar, :@source), :match,
                                s(:regexp,
                                  s(:str, "^\\s*"),
                                  s(:regopt, :m, :u)),
                                s(:true))),
                            s(:send,
                              s(:ivar, :@stack), :<<,
                              s(:array,
                                s(:sym, :end_doctype)))),
                          s(:ivasgn, :@document_status,
                            s(:sym, :in_doctype))),
                        s(:return,
                          s(:lvar, :args)))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^\\s+"),
                        s(:regopt)), nil),
                    s(:begin,
                      s(:ivasgn, :@document_status,
                        s(:sym, :after_doctype)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:ivar, :@source), :buffer), :size), :<,
                          s(:int, 2)),
                        s(:send,
                          s(:ivar, :@source), :read), nil),
                      s(:lvasgn, :md,
                        s(:send,
                          s(:ivar, :@source), :match,
                          s(:regexp,
                            s(:str, "\\s*"),
                            s(:regopt, :m, :u)),
                          s(:true))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@source), :encoding), :==,
                          s(:str, "UTF-8")),
                        s(:send,
                          s(:send,
                            s(:ivar, :@source), :buffer), :force_encoding,
                          s(:const,
                            s(:const,
                              s(:cbase), :Encoding), :UTF_8)), nil)))), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@document_status), :==,
                  s(:sym, :in_doctype)),
                s(:begin,
                  s(:lvasgn, :md,
                    s(:send,
                      s(:ivar, :@source), :match,
                      s(:regexp,
                        s(:str, "\\s*(.*?>)"),
                        s(:regopt, :m, :u)))),
                  s(:case,
                    s(:send,
                      s(:lvar, :md), :[],
                      s(:int, 1)),
                    s(:when,
                      s(:const, nil, :SYSTEMENTITY),
                      s(:begin,
                        s(:lvasgn, :match,
                          s(:send,
                            s(:send,
                              s(:ivar, :@source), :match,
                              s(:const, nil, :SYSTEMENTITY),
                              s(:true)), :[],
                            s(:int, 1))),
                        s(:return,
                          s(:array,
                            s(:sym, :externalentity),
                            s(:lvar, :match))))),
                    s(:when,
                      s(:const, nil, :ELEMENTDECL_START),
                      s(:return,
                        s(:array,
                          s(:sym, :elementdecl),
                          s(:send,
                            s(:send,
                              s(:ivar, :@source), :match,
                              s(:const, nil, :ELEMENTDECL_PATTERN),
                              s(:true)), :[],
                            s(:int, 1))))),
                    s(:when,
                      s(:const, nil, :ENTITY_START),
                      s(:begin,
                        s(:lvasgn, :match,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:ivar, :@source), :match,
                                s(:const, nil, :ENTITYDECL),
                                s(:true)), :to_a), :compact)),
                        s(:send,
                          s(:lvar, :match), :[]=,
                          s(:int, 0),
                          s(:sym, :entitydecl)),
                        s(:lvasgn, :ref,
                          s(:false)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :match), :[],
                              s(:int, 1)), :==,
                            s(:str, "%")),
                          s(:begin,
                            s(:lvasgn, :ref,
                              s(:true)),
                            s(:send,
                              s(:lvar, :match), :delete_at,
                              s(:int, 1))), nil),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :match), :[],
                              s(:int, 2)), :==,
                            s(:str, "SYSTEM")),
                          s(:begin,
                            s(:send,
                              s(:lvar, :match), :[]=,
                              s(:int, 3),
                              s(:send,
                                s(:send,
                                  s(:lvar, :match), :[],
                                  s(:int, 3)), :[],
                                s(:irange,
                                  s(:int, 1),
                                  s(:int, -2)))),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :match), :size), :>,
                                s(:int, 4)),
                              s(:send,
                                s(:lvar, :match), :delete_at,
                                s(:int, 4)), nil)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :match), :[],
                                s(:int, 2)), :==,
                              s(:str, "PUBLIC")),
                            s(:begin,
                              s(:send,
                                s(:lvar, :match), :[]=,
                                s(:int, 3),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :match), :[],
                                    s(:int, 3)), :[],
                                  s(:irange,
                                    s(:int, 1),
                                    s(:int, -2)))),
                              s(:send,
                                s(:lvar, :match), :[]=,
                                s(:int, 4),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :match), :[],
                                    s(:int, 4)), :[],
                                  s(:irange,
                                    s(:int, 1),
                                    s(:int, -2)))),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :match), :size), :>,
                                  s(:int, 5)),
                                s(:send,
                                  s(:lvar, :match), :delete_at,
                                  s(:int, 5)), nil)),
                            s(:begin,
                              s(:send,
                                s(:lvar, :match), :[]=,
                                s(:int, 2),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :match), :[],
                                    s(:int, 2)), :[],
                                  s(:irange,
                                    s(:int, 1),
                                    s(:int, -2)))),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :match), :size), :==,
                                  s(:int, 4)),
                                s(:send,
                                  s(:lvar, :match), :pop), nil)))),
                        s(:if,
                          s(:lvar, :ref),
                          s(:send,
                            s(:lvar, :match), :<<,
                            s(:str, "%")), nil),
                        s(:return,
                          s(:lvar, :match)))),
                    s(:when,
                      s(:const, nil, :ATTLISTDECL_START),
                      s(:begin,
                        s(:lvasgn, :md,
                          s(:send,
                            s(:ivar, :@source), :match,
                            s(:const, nil, :ATTLISTDECL_PATTERN),
                            s(:true))),
                        s(:if,
                          s(:send,
                            s(:lvar, :md), :nil?),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const,
                                s(:const, nil, :REXML), :ParseException), :new,
                              s(:str, "Bad ATTLIST declaration!"),
                              s(:ivar, :@source))), nil),
                        s(:lvasgn, :element,
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 1))),
                        s(:lvasgn, :contents,
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 0))),
                        s(:lvasgn, :pairs,
                          s(:hash)),
                        s(:lvasgn, :values,
                          s(:send,
                            s(:send,
                              s(:lvar, :md), :[],
                              s(:int, 0)), :scan,
                            s(:const, nil, :ATTDEF_RE))),
                        s(:block,
                          s(:send,
                            s(:lvar, :values), :each),
                          s(:args,
                            s(:arg, :attdef)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :attdef), :[],
                                s(:int, 3)), :==,
                              s(:str, "#IMPLIED")), nil,
                            s(:begin,
                              s(:send,
                                s(:lvar, :attdef), :compact!),
                              s(:lvasgn, :val,
                                s(:send,
                                  s(:lvar, :attdef), :[],
                                  s(:int, 3))),
                              s(:if,
                                s(:send,
                                  s(:lvar, :val), :==,
                                  s(:str, "#FIXED ")),
                                s(:lvasgn, :val,
                                  s(:send,
                                    s(:lvar, :attdef), :[],
                                    s(:int, 4))), nil),
                              s(:send,
                                s(:lvar, :pairs), :[]=,
                                s(:send,
                                  s(:lvar, :attdef), :[],
                                  s(:int, 0)),
                                s(:lvar, :val)),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :attdef), :[],
                                    s(:int, 0)), :=~,
                                  s(:regexp,
                                    s(:str, "^xmlns:(.*)"),
                                    s(:regopt))),
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@nsstack), :[],
                                    s(:int, 0)), :<<,
                                  s(:nth_ref, 1)), nil)))),
                        s(:return,
                          s(:array,
                            s(:sym, :attlistdecl),
                            s(:lvar, :element),
                            s(:lvar, :pairs),
                            s(:lvar, :contents))))),
                    s(:when,
                      s(:const, nil, :NOTATIONDECL_START),
                      s(:begin,
                        s(:lvasgn, :md,
                          s(:nil)),
                        s(:if,
                          s(:send,
                            s(:ivar, :@source), :match,
                            s(:const, nil, :PUBLIC)),
                          s(:begin,
                            s(:lvasgn, :md,
                              s(:send,
                                s(:ivar, :@source), :match,
                                s(:const, nil, :PUBLIC),
                                s(:true))),
                            s(:lvasgn, :vals,
                              s(:array,
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 1)),
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 2)),
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 4)),
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 6))))),
                          s(:if,
                            s(:send,
                              s(:ivar, :@source), :match,
                              s(:const, nil, :SYSTEM)),
                            s(:begin,
                              s(:lvasgn, :md,
                                s(:send,
                                  s(:ivar, :@source), :match,
                                  s(:const, nil, :SYSTEM),
                                  s(:true))),
                              s(:lvasgn, :vals,
                                s(:array,
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 1)),
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 2)),
                                  s(:nil),
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 4))))),
                            s(:send, nil, :raise,
                              s(:send,
                                s(:const,
                                  s(:const, nil, :REXML), :ParseException), :new,
                                s(:str, "error parsing notation: no matching pattern"),
                                s(:ivar, :@source))))),
                        s(:return,
                          s(:array,
                            s(:sym, :notationdecl),
                            s(:splat,
                              s(:lvar, :vals)))))),
                    s(:when,
                      s(:const, nil, :DOCTYPE_END),
                      s(:begin,
                        s(:ivasgn, :@document_status,
                          s(:sym, :after_doctype)),
                        s(:send,
                          s(:ivar, :@source), :match,
                          s(:const, nil, :DOCTYPE_END),
                          s(:true)),
                        s(:return,
                          s(:array,
                            s(:sym, :end_doctype))))), nil)), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@source), :buffer), :[],
                        s(:int, 0)), :==,
                      s(:str, "<")),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@source), :buffer), :[],
                          s(:int, 1)), :==,
                        s(:str, "/")),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@nsstack), :shift),
                        s(:lvasgn, :last_tag,
                          s(:send,
                            s(:ivar, :@tags), :pop)),
                        s(:lvasgn, :md,
                          s(:send,
                            s(:ivar, :@source), :match,
                            s(:const, nil, :CLOSE_MATCH),
                            s(:true))),
                        s(:if,
                          s(:send,
                            s(:lvar, :last_tag), :==,
                            s(:send,
                              s(:lvar, :md), :[],
                              s(:int, 1))), nil,
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const,
                                s(:const, nil, :REXML), :ParseException), :new,
                              s(:send,
                                s(:str, "Missing end tag for "), :+,
                                s(:dstr,
                                  s(:str, "'"),
                                  s(:begin,
                                    s(:lvar, :last_tag)),
                                  s(:str, "' (got \""),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :md), :[],
                                      s(:int, 1))),
                                  s(:str, "\")"))),
                              s(:ivar, :@source)))),
                        s(:return,
                          s(:array,
                            s(:sym, :end_element),
                            s(:lvar, :last_tag)))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:ivar, :@source), :buffer), :[],
                            s(:int, 1)), :==,
                          s(:str, "!")),
                        s(:begin,
                          s(:lvasgn, :md,
                            s(:send,
                              s(:ivar, :@source), :match,
                              s(:regexp,
                                s(:str, "\\A(\\s*[^>]*>)"),
                                s(:regopt, :m, :u)))),
                          s(:if,
                            s(:lvar, :md), nil,
                            s(:send, nil, :raise,
                              s(:send,
                                s(:const,
                                  s(:const, nil, :REXML), :ParseException), :new,
                                s(:str, "Malformed node"),
                                s(:ivar, :@source)))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 0)), :[],
                                s(:int, 2)), :==,
                              s(:str, "-")),
                            s(:begin,
                              s(:lvasgn, :md,
                                s(:send,
                                  s(:ivar, :@source), :match,
                                  s(:const, nil, :COMMENT_PATTERN),
                                  s(:true))),
                              s(:case,
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 1)),
                                s(:when,
                                  s(:regexp,
                                    s(:str, "--"),
                                    s(:regopt)),
                                  s(:regexp,
                                    s(:str, "-\\z"),
                                    s(:regopt)),
                                  s(:send, nil, :raise,
                                    s(:send,
                                      s(:const,
                                        s(:const, nil, :REXML), :ParseException), :new,
                                      s(:str, "Malformed comment"),
                                      s(:ivar, :@source)))), nil),
                              s(:if,
                                s(:lvar, :md),
                                s(:return,
                                  s(:array,
                                    s(:sym, :comment),
                                    s(:send,
                                      s(:lvar, :md), :[],
                                      s(:int, 1)))), nil)),
                            s(:begin,
                              s(:lvasgn, :md,
                                s(:send,
                                  s(:ivar, :@source), :match,
                                  s(:const, nil, :CDATA_PATTERN),
                                  s(:true))),
                              s(:if,
                                s(:lvar, :md),
                                s(:return,
                                  s(:array,
                                    s(:sym, :cdata),
                                    s(:send,
                                      s(:lvar, :md), :[],
                                      s(:int, 1)))), nil))),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const,
                                s(:const, nil, :REXML), :ParseException), :new,
                              s(:send,
                                s(:str, "Declarations can only occur "), :+,
                                s(:str, "in the doctype declaration.")),
                              s(:ivar, :@source)))),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:ivar, :@source), :buffer), :[],
                              s(:int, 1)), :==,
                            s(:str, "?")),
                          s(:begin,
                            s(:lvasgn, :md,
                              s(:send,
                                s(:ivar, :@source), :match,
                                s(:const, nil, :INSTRUCTION_PATTERN),
                                s(:true))),
                            s(:if,
                              s(:lvar, :md),
                              s(:return,
                                s(:array,
                                  s(:sym, :processing_instruction),
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 1)),
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 2)))), nil),
                            s(:send, nil, :raise,
                              s(:send,
                                s(:const,
                                  s(:const, nil, :REXML), :ParseException), :new,
                                s(:str, "Bad instruction declaration"),
                                s(:ivar, :@source)))),
                          s(:begin,
                            s(:lvasgn, :md,
                              s(:send,
                                s(:ivar, :@source), :match,
                                s(:const, nil, :TAG_MATCH),
                                s(:true))),
                            s(:if,
                              s(:lvar, :md), nil,
                              s(:begin,
                                s(:if,
                                  s(:send,
                                    s(:ivar, :@source), :match,
                                    s(:const, nil, :MISSING_ATTRIBUTE_QUOTES)),
                                  s(:send, nil, :raise,
                                    s(:send,
                                      s(:const,
                                        s(:const, nil, :REXML), :ParseException), :new,
                                      s(:str, "missing attribute quote"),
                                      s(:ivar, :@source))), nil),
                                s(:send, nil, :raise,
                                  s(:send,
                                    s(:const,
                                      s(:const, nil, :REXML), :ParseException), :new,
                                    s(:str, "malformed XML: missing tag start"),
                                    s(:ivar, :@source))))),
                            s(:lvasgn, :attributes,
                              s(:hash)),
                            s(:lvasgn, :prefixes,
                              s(:send,
                                s(:const, nil, :Set), :new)),
                            s(:if,
                              s(:send,
                                s(:lvar, :md), :[],
                                s(:int, 2)),
                              s(:send,
                                s(:lvar, :prefixes), :<<,
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 2))), nil),
                            s(:send,
                              s(:ivar, :@nsstack), :unshift,
                              s(:lvasgn, :curr_ns,
                                s(:send,
                                  s(:const, nil, :Set), :new))),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 4)), :size), :>,
                                s(:int, 0)),
                              s(:begin,
                                s(:lvasgn, :attrs,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :md), :[],
                                      s(:int, 4)), :scan,
                                    s(:const, nil, :ATTRIBUTE_PATTERN))),
                                s(:if,
                                  s(:and,
                                    s(:back_ref, :$'),
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:back_ref, :$'), :strip), :size), :>,
                                      s(:int, 0))),
                                  s(:send, nil, :raise,
                                    s(:send,
                                      s(:const,
                                        s(:const, nil, :REXML), :ParseException), :new,
                                      s(:dstr,
                                        s(:str, "error parsing attributes: ["),
                                        s(:begin,
                                          s(:send,
                                            s(:lvar, :attrs), :join,
                                            s(:str, ", "))),
                                        s(:str, "], excess = \""),
                                        s(:back_ref, :$'),
                                        s(:str, "\"")),
                                      s(:ivar, :@source))), nil),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :attrs), :each),
                                  s(:args,
                                    s(:arg, :attr_name),
                                    s(:arg, :prefix),
                                    s(:arg, :local_part),
                                    s(:arg, :quote),
                                    s(:arg, :value)),
                                  s(:begin,
                                    s(:if,
                                      s(:send,
                                        s(:lvar, :prefix), :==,
                                        s(:str, "xmlns")),
                                      s(:begin,
                                        s(:if,
                                          s(:send,
                                            s(:lvar, :local_part), :==,
                                            s(:str, "xml")),
                                          s(:if,
                                            s(:send,
                                              s(:lvar, :value), :!=,
                                              s(:str, "http://www.w3.org/XML/1998/namespace")),
                                            s(:begin,
                                              s(:lvasgn, :msg,
                                                s(:send,
                                                  s(:str, "The 'xml' prefix must not be bound to any other namespace "), :+,
                                                  s(:str, "(http://www.w3.org/TR/REC-xml-names/#ns-decl)"))),
                                              s(:send, nil, :raise,
                                                s(:send,
                                                  s(:const,
                                                    s(:const, nil, :REXML), :ParseException), :new,
                                                  s(:lvar, :msg),
                                                  s(:ivar, :@source),
                                                  s(:self)))), nil),
                                          s(:if,
                                            s(:send,
                                              s(:lvar, :local_part), :==,
                                              s(:str, "xmlns")),
                                            s(:begin,
                                              s(:lvasgn, :msg,
                                                s(:send,
                                                  s(:str, "The 'xmlns' prefix must not be declared "), :+,
                                                  s(:str, "(http://www.w3.org/TR/REC-xml-names/#ns-decl)"))),
                                              s(:send, nil, :raise,
                                                s(:send,
                                                  s(:const,
                                                    s(:const, nil, :REXML), :ParseException), :new,
                                                  s(:lvar, :msg),
                                                  s(:ivar, :@source),
                                                  s(:self)))), nil)),
                                        s(:send,
                                          s(:lvar, :curr_ns), :<<,
                                          s(:lvar, :local_part))),
                                      s(:if,
                                        s(:lvar, :prefix),
                                        s(:if,
                                          s(:send,
                                            s(:lvar, :prefix), :==,
                                            s(:str, "xml")), nil,
                                          s(:send,
                                            s(:lvar, :prefixes), :<<,
                                            s(:lvar, :prefix))), nil)),
                                    s(:if,
                                      s(:send,
                                        s(:lvar, :attributes), :has_key?,
                                        s(:lvar, :attr_name)),
                                      s(:begin,
                                        s(:lvasgn, :msg,
                                          s(:dstr,
                                            s(:str, "Duplicate attribute "),
                                            s(:begin,
                                              s(:send,
                                                s(:lvar, :attr_name), :inspect)))),
                                        s(:send, nil, :raise,
                                          s(:send,
                                            s(:const,
                                              s(:const, nil, :REXML), :ParseException), :new,
                                            s(:lvar, :msg),
                                            s(:ivar, :@source),
                                            s(:self)))), nil),
                                    s(:send,
                                      s(:lvar, :attributes), :[]=,
                                      s(:lvar, :attr_name),
                                      s(:lvar, :value))))), nil),
                            s(:for,
                              s(:lvasgn, :prefix),
                              s(:lvar, :prefixes),
                              s(:if,
                                s(:block,
                                  s(:send,
                                    s(:ivar, :@nsstack), :find),
                                  s(:args,
                                    s(:arg, :k)),
                                  s(:send,
                                    s(:lvar, :k), :member?,
                                    s(:lvar, :prefix))), nil,
                                s(:send, nil, :raise,
                                  s(:send,
                                    s(:const, nil, :UndefinedNamespaceException), :new,
                                    s(:lvar, :prefix),
                                    s(:ivar, :@source),
                                    s(:self))))),
                            s(:if,
                              s(:send,
                                s(:lvar, :md), :[],
                                s(:int, 6)),
                              s(:begin,
                                s(:ivasgn, :@closed,
                                  s(:send,
                                    s(:lvar, :md), :[],
                                    s(:int, 1))),
                                s(:send,
                                  s(:ivar, :@nsstack), :shift)),
                              s(:send,
                                s(:ivar, :@tags), :push,
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 1)))),
                            s(:return,
                              s(:array,
                                s(:sym, :start_element),
                                s(:send,
                                  s(:lvar, :md), :[],
                                  s(:int, 1)),
                                s(:lvar, :attributes))))))),
                    s(:begin,
                      s(:lvasgn, :md,
                        s(:send,
                          s(:ivar, :@source), :match,
                          s(:const, nil, :TEXT_PATTERN),
                          s(:true))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :md), :[],
                              s(:int, 0)), :length), :==,
                          s(:int, 0)),
                        s(:send,
                          s(:ivar, :@source), :match,
                          s(:regexp,
                            s(:str, "(\\s+)"),
                            s(:regopt)),
                          s(:true)), nil),
                      s(:return,
                        s(:array,
                          s(:sym, :text),
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 1)))))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :REXML), :UndefinedNamespaceException)), nil,
                    s(:send, nil, :raise)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :REXML), :ParseException)), nil,
                    s(:send, nil, :raise)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception),
                      s(:const, nil, :NameError)),
                    s(:lvasgn, :error),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const,
                          s(:const, nil, :REXML), :ParseException), :new,
                        s(:str, "Exception parsing"),
                        s(:ivar, :@source),
                        s(:self),
                        s(:begin,
                          s(:if,
                            s(:lvar, :error),
                            s(:lvar, :error),
                            s(:gvar, :$!)))))), nil)),
              s(:return,
                s(:array,
                  s(:sym, :dummy))))),
          s(:send, nil, :private,
            s(:sym, :pull_event)),
          s(:def, :entity,
            s(:args,
              s(:arg, :reference),
              s(:arg, :entities)),
            s(:begin,
              s(:lvasgn, :value,
                s(:nil)),
              s(:if,
                s(:lvar, :entities),
                s(:lvasgn, :value,
                  s(:send,
                    s(:lvar, :entities), :[],
                    s(:lvar, :reference))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :value), :!),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:send,
                      s(:const, nil, :DEFAULT_ENTITIES), :[],
                      s(:lvar, :reference))),
                  s(:if,
                    s(:lvar, :value),
                    s(:lvasgn, :value,
                      s(:send,
                        s(:lvar, :value), :[],
                        s(:int, 2))), nil)), nil),
              s(:if,
                s(:lvar, :value),
                s(:send, nil, :unnormalize,
                  s(:lvar, :value),
                  s(:lvar, :entities)), nil))),
          s(:def, :normalize,
            s(:args,
              s(:arg, :input),
              s(:optarg, :entities,
                s(:nil)),
              s(:optarg, :entity_filter,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :copy,
                s(:send,
                  s(:lvar, :input), :clone)),
              s(:send,
                s(:lvar, :copy), :gsub!,
                s(:const, nil, :EREFERENCE),
                s(:str, "&amp;")),
              s(:if,
                s(:lvar, :entities),
                s(:block,
                  s(:send,
                    s(:lvar, :entities), :each),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :value)),
                  s(:if,
                    s(:and,
                      s(:lvar, :entity_filter),
                      s(:send,
                        s(:lvar, :entity_filter), :include?,
                        s(:send, nil, :entity))), nil,
                    s(:send,
                      s(:lvar, :copy), :gsub!,
                      s(:lvar, :value),
                      s(:dstr,
                        s(:str, "&"),
                        s(:begin,
                          s(:lvar, :key)),
                        s(:str, ";"))))), nil),
              s(:send,
                s(:lvar, :copy), :gsub!,
                s(:const, nil, :EREFERENCE),
                s(:str, "&amp;")),
              s(:block,
                s(:send,
                  s(:const, nil, :DEFAULT_ENTITIES), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :copy), :gsub!,
                  s(:send,
                    s(:lvar, :value), :[],
                    s(:int, 3)),
                  s(:send,
                    s(:lvar, :value), :[],
                    s(:int, 1)))),
              s(:lvar, :copy))),
          s(:def, :unnormalize,
            s(:args,
              s(:arg, :string),
              s(:optarg, :entities,
                s(:nil)),
              s(:optarg, :filter,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :rv,
                s(:send,
                  s(:lvar, :string), :clone)),
              s(:send,
                s(:lvar, :rv), :gsub!,
                s(:regexp,
                  s(:str, "\\r\\n?"),
                  s(:regopt)),
                s(:str, "\n")),
              s(:lvasgn, :matches,
                s(:send,
                  s(:lvar, :rv), :scan,
                  s(:const, nil, :REFERENCE_RE))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :matches), :size), :==,
                  s(:int, 0)),
                s(:return,
                  s(:lvar, :rv)), nil),
              s(:block,
                s(:send,
                  s(:lvar, :rv), :gsub!,
                  s(:regexp,
                    s(:str, "&#0*((?:\\d+)|(?:x[a-fA-F0-9]+));"),
                    s(:regopt))),
                s(:args),
                s(:begin,
                  s(:lvasgn, :m,
                    s(:nth_ref, 1)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 0)), :==,
                      s(:str, "x")),
                    s(:lvasgn, :m,
                      s(:dstr,
                        s(:str, "0"),
                        s(:begin,
                          s(:lvar, :m)))), nil),
                  s(:send,
                    s(:array,
                      s(:send, nil, :Integer,
                        s(:lvar, :m))), :pack,
                    s(:str, "U*")))),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :matches), :collect!),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :[],
                    s(:int, 0))), :compact!),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :matches), :size), :>,
                  s(:int, 0)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :matches), :each),
                    s(:args,
                      s(:arg, :entity_reference)),
                    s(:if,
                      s(:and,
                        s(:lvar, :filter),
                        s(:send,
                          s(:lvar, :filter), :include?,
                          s(:lvar, :entity_reference))), nil,
                      s(:begin,
                        s(:lvasgn, :entity_value,
                          s(:send, nil, :entity,
                            s(:lvar, :entity_reference),
                            s(:lvar, :entities))),
                        s(:if,
                          s(:lvar, :entity_value),
                          s(:begin,
                            s(:lvasgn, :re,
                              s(:regexp,
                                s(:str, "&"),
                                s(:begin,
                                  s(:lvar, :entity_reference)),
                                s(:str, ";"),
                                s(:regopt))),
                            s(:send,
                              s(:lvar, :rv), :gsub!,
                              s(:lvar, :re),
                              s(:lvar, :entity_value))),
                          s(:begin,
                            s(:lvasgn, :er,
                              s(:send,
                                s(:const, nil, :DEFAULT_ENTITIES), :[],
                                s(:lvar, :entity_reference))),
                            s(:if,
                              s(:lvar, :er),
                              s(:send,
                                s(:lvar, :rv), :gsub!,
                                s(:send,
                                  s(:lvar, :er), :[],
                                  s(:int, 0)),
                                s(:send,
                                  s(:lvar, :er), :[],
                                  s(:int, 2))), nil)))))),
                  s(:send,
                    s(:lvar, :rv), :gsub!,
                    s(:regexp,
                      s(:str, "&amp;"),
                      s(:regopt)),
                    s(:str, "&"))), nil),
              s(:lvar, :rv))),
          s(:send, nil, :private),
          s(:def, :need_source_encoding_update?,
            s(:args,
              s(:arg, :xml_declaration_encoding)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :xml_declaration_encoding), :nil?),
                s(:return,
                  s(:false)), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\AUTF-16\\z"),
                    s(:regopt, :i)),
                  s(:lvar, :xml_declaration_encoding)),
                s(:return,
                  s(:false)), nil),
              s(:true))))))))
