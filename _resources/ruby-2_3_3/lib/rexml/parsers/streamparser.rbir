s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/parsers/baseparser")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:class,
        s(:const, nil, :StreamParser), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :source),
              s(:arg, :listener)),
            s(:begin,
              s(:ivasgn, :@listener,
                s(:lvar, :listener)),
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const, nil, :BaseParser), :new,
                  s(:lvar, :source))))),
          s(:def, :add_listener,
            s(:args,
              s(:arg, :listener)),
            s(:send,
              s(:ivar, :@parser), :add_listener,
              s(:lvar, :listener))),
          s(:def, :parse,
            s(:args),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :event,
                  s(:send,
                    s(:ivar, :@parser), :pull)),
                s(:case,
                  s(:send,
                    s(:lvar, :event), :[],
                    s(:int, 0)),
                  s(:when,
                    s(:sym, :end_document),
                    s(:return)),
                  s(:when,
                    s(:sym, :start_element),
                    s(:begin,
                      s(:lvasgn, :attrs,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 2)), :each),
                          s(:args,
                            s(:arg, :n),
                            s(:arg, :v)),
                          s(:send,
                            s(:send,
                              s(:lvar, :event), :[],
                              s(:int, 2)), :[]=,
                            s(:lvar, :n),
                            s(:send,
                              s(:ivar, :@parser), :unnormalize,
                              s(:lvar, :v))))),
                      s(:send,
                        s(:ivar, :@listener), :tag_start,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 1)),
                        s(:lvar, :attrs)))),
                  s(:when,
                    s(:sym, :end_element),
                    s(:send,
                      s(:ivar, :@listener), :tag_end,
                      s(:send,
                        s(:lvar, :event), :[],
                        s(:int, 1)))),
                  s(:when,
                    s(:sym, :text),
                    s(:begin,
                      s(:lvasgn, :normalized,
                        s(:send,
                          s(:ivar, :@parser), :unnormalize,
                          s(:send,
                            s(:lvar, :event), :[],
                            s(:int, 1)))),
                      s(:send,
                        s(:ivar, :@listener), :text,
                        s(:lvar, :normalized)))),
                  s(:when,
                    s(:sym, :processing_instruction),
                    s(:send,
                      s(:ivar, :@listener), :instruction,
                      s(:splat,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 1),
                          s(:int, 2))))),
                  s(:when,
                    s(:sym, :start_doctype),
                    s(:send,
                      s(:ivar, :@listener), :doctype,
                      s(:splat,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))))),
                  s(:when,
                    s(:sym, :end_doctype),
                    s(:if,
                      s(:send,
                        s(:ivar, :@listener), :respond_to?,
                        s(:sym, :doctype_end)),
                      s(:send,
                        s(:ivar, :@listener), :doctype_end), nil)),
                  s(:when,
                    s(:sym, :comment),
                    s(:sym, :attlistdecl),
                    s(:sym, :cdata),
                    s(:sym, :xmldecl),
                    s(:sym, :elementdecl),
                    s(:send,
                      s(:ivar, :@listener), :send,
                      s(:send,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 0)), :to_s),
                      s(:splat,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1)))))),
                  s(:when,
                    s(:sym, :entitydecl),
                    s(:sym, :notationdecl),
                    s(:send,
                      s(:ivar, :@listener), :send,
                      s(:send,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 0)), :to_s),
                      s(:send,
                        s(:lvar, :event), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1))))),
                  s(:when,
                    s(:sym, :externalentity),
                    s(:begin,
                      s(:lvasgn, :entity_reference,
                        s(:send,
                          s(:lvar, :event), :[],
                          s(:int, 1))),
                      s(:lvasgn, :content,
                        s(:send,
                          s(:lvar, :entity_reference), :gsub,
                          s(:regexp,
                            s(:str, "\\A%|;\\z"),
                            s(:regopt)),
                          s(:str, ""))),
                      s(:send,
                        s(:ivar, :@listener), :entity,
                        s(:lvar, :content)))), nil)))))))))
