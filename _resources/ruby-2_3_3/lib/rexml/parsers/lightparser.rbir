s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/parsers/streamparser")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/baseparser")),
  s(:send, nil, :require,
    s(:str, "rexml/light/node")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Parsers),
      s(:class,
        s(:const, nil, :LightParser), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :stream)),
            s(:begin,
              s(:ivasgn, :@stream,
                s(:lvar, :stream)),
              s(:ivasgn, :@parser,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Parsers), :BaseParser), :new,
                  s(:lvar, :stream))))),
          s(:def, :add_listener,
            s(:args,
              s(:arg, :listener)),
            s(:send,
              s(:ivar, :@parser), :add_listener,
              s(:lvar, :listener))),
          s(:def, :rewind,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@stream), :rewind),
              s(:send,
                s(:ivar, :@parser), :stream=,
                s(:ivar, :@stream)))),
          s(:def, :parse,
            s(:args),
            s(:begin,
              s(:lvasgn, :root,
                s(:lvasgn, :context,
                  s(:array,
                    s(:sym, :document)))),
              s(:while,
                s(:true),
                s(:begin,
                  s(:lvasgn, :event,
                    s(:send,
                      s(:ivar, :@parser), :pull)),
                  s(:case,
                    s(:send,
                      s(:lvar, :event), :[],
                      s(:int, 0)),
                    s(:when,
                      s(:sym, :end_document),
                      s(:break)),
                    s(:when,
                      s(:sym, :start_element),
                      s(:sym, :start_doctype),
                      s(:begin,
                        s(:lvasgn, :new_node,
                          s(:lvar, :event)),
                        s(:send,
                          s(:lvar, :context), :<<,
                          s(:lvar, :new_node)),
                        s(:send,
                          s(:lvar, :new_node), :[]=,
                          s(:int, 1),
                          s(:int, 0),
                          s(:array,
                            s(:lvar, :context))),
                        s(:lvasgn, :context,
                          s(:lvar, :new_node)))),
                    s(:when,
                      s(:sym, :end_element),
                      s(:sym, :end_doctype),
                      s(:lvasgn, :context,
                        s(:send,
                          s(:lvar, :context), :[],
                          s(:int, 1)))),
                    s(:begin,
                      s(:lvasgn, :new_node,
                        s(:lvar, :event)),
                      s(:send,
                        s(:lvar, :context), :<<,
                        s(:lvar, :new_node)),
                      s(:send,
                        s(:lvar, :new_node), :[]=,
                        s(:int, 1),
                        s(:int, 0),
                        s(:array,
                          s(:lvar, :context))))))),
              s(:lvar, :root))))))))
