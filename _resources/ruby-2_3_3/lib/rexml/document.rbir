s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/security")),
  s(:send, nil, :require,
    s(:str, "rexml/element")),
  s(:send, nil, :require,
    s(:str, "rexml/xmldecl")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:send, nil, :require,
    s(:str, "rexml/comment")),
  s(:send, nil, :require,
    s(:str, "rexml/doctype")),
  s(:send, nil, :require,
    s(:str, "rexml/instruction")),
  s(:send, nil, :require,
    s(:str, "rexml/rexml")),
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/output")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/baseparser")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/streamparser")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/treeparser")),
  s(:module,
    s(:const, nil, :REXML),
    s(:class,
      s(:const, nil, :Document),
      s(:const, nil, :Element),
      s(:begin,
        s(:casgn, nil, :DECLARATION,
          s(:send,
            s(:const, nil, :XMLDecl), :default)),
        s(:def, :initialize,
          s(:args,
            s(:optarg, :source,
              s(:nil)),
            s(:optarg, :context,
              s(:hash))),
          s(:begin,
            s(:ivasgn, :@entity_expansion_count,
              s(:int, 0)),
            s(:super),
            s(:ivasgn, :@context,
              s(:lvar, :context)),
            s(:if,
              s(:send,
                s(:lvar, :source), :nil?),
              s(:return), nil),
            s(:if,
              s(:send,
                s(:lvar, :source), :kind_of?,
                s(:const, nil, :Document)),
              s(:begin,
                s(:ivasgn, :@context,
                  s(:send,
                    s(:lvar, :source), :context)),
                s(:super,
                  s(:lvar, :source))),
              s(:send, nil, :build,
                s(:lvar, :source))))),
        s(:def, :node_type,
          s(:args),
          s(:sym, :document)),
        s(:def, :clone,
          s(:args),
          s(:send,
            s(:const, nil, :Document), :new,
            s(:self))),
        s(:def, :expanded_name,
          s(:args),
          s(:str, "")),
        s(:alias,
          s(:sym, :name),
          s(:sym, :expanded_name)),
        s(:def, :add,
          s(:args,
            s(:arg, :child)),
          s(:if,
            s(:send,
              s(:lvar, :child), :kind_of?,
              s(:const, nil, :XMLDecl)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@children), :[],
                    s(:int, 0)), :kind_of?,
                  s(:const, nil, :XMLDecl)),
                s(:send,
                  s(:ivar, :@children), :[]=,
                  s(:int, 0),
                  s(:lvar, :child)),
                s(:send,
                  s(:ivar, :@children), :unshift,
                  s(:lvar, :child))),
              s(:send,
                s(:lvar, :child), :parent=,
                s(:self))),
            s(:if,
              s(:send,
                s(:lvar, :child), :kind_of?,
                s(:const, nil, :DocType)),
              s(:begin,
                s(:lvasgn, :insert_before_index,
                  s(:block,
                    s(:send,
                      s(:ivar, :@children), :find_index),
                    s(:args,
                      s(:arg, :x)),
                    s(:or,
                      s(:send,
                        s(:lvar, :x), :kind_of?,
                        s(:const, nil, :Element)),
                      s(:send,
                        s(:lvar, :x), :kind_of?,
                        s(:const, nil, :DocType))))),
                s(:if,
                  s(:lvar, :insert_before_index),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@children), :[],
                        s(:lvar, :insert_before_index)), :kind_of?,
                      s(:const, nil, :DocType)),
                    s(:send,
                      s(:ivar, :@children), :[]=,
                      s(:lvar, :insert_before_index),
                      s(:lvar, :child)),
                    s(:send,
                      s(:ivar, :@children), :[]=,
                      s(:send,
                        s(:lvar, :insert_before_index), :-,
                        s(:int, 1)),
                      s(:int, 0),
                      s(:lvar, :child))),
                  s(:send,
                    s(:ivar, :@children), :<<,
                    s(:lvar, :child))),
                s(:send,
                  s(:lvar, :child), :parent=,
                  s(:self))),
              s(:begin,
                s(:lvasgn, :rv,
                  s(:zsuper)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@elements), :size), :>,
                    s(:int, 1)),
                  s(:send, nil, :raise,
                    s(:str, "attempted adding second root element to document")), nil),
                s(:lvar, :rv))))),
        s(:alias,
          s(:sym, :<<),
          s(:sym, :add)),
        s(:def, :add_element,
          s(:args,
            s(:optarg, :arg,
              s(:nil)),
            s(:optarg, :arg2,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :rv,
              s(:zsuper)),
            s(:if,
              s(:send,
                s(:send,
                  s(:ivar, :@elements), :size), :>,
                s(:int, 1)),
              s(:send, nil, :raise,
                s(:str, "attempted adding second root element to document")), nil),
            s(:lvar, :rv))),
        s(:def, :root,
          s(:args),
          s(:send,
            s(:send, nil, :elements), :[],
            s(:int, 1))),
        s(:def, :doctype,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@children), :find),
            s(:args,
              s(:arg, :item)),
            s(:send,
              s(:lvar, :item), :kind_of?,
              s(:const, nil, :DocType)))),
        s(:def, :xml_decl,
          s(:args),
          s(:begin,
            s(:lvasgn, :rv,
              s(:send,
                s(:ivar, :@children), :[],
                s(:int, 0))),
            s(:if,
              s(:send,
                s(:lvar, :rv), :kind_of?,
                s(:const, nil, :XMLDecl)),
              s(:return,
                s(:lvar, :rv)), nil),
            s(:send,
              s(:send,
                s(:ivar, :@children), :unshift,
                s(:send,
                  s(:const, nil, :XMLDecl), :default)), :[],
              s(:int, 0)))),
        s(:def, :version,
          s(:args),
          s(:send,
            s(:send, nil, :xml_decl), :version)),
        s(:def, :encoding,
          s(:args),
          s(:send,
            s(:send, nil, :xml_decl), :encoding)),
        s(:def, :stand_alone?,
          s(:args),
          s(:send,
            s(:send, nil, :xml_decl), :stand_alone?)),
        s(:def, :write,
          s(:args,
            s(:restarg, :arguments)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :arguments), :size), :==,
                  s(:int, 1)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :arguments), :[],
                      s(:int, 0)), :class), :==,
                  s(:const, nil, :Hash))),
              s(:begin,
                s(:lvasgn, :options,
                  s(:send,
                    s(:lvar, :arguments), :[],
                    s(:int, 0))),
                s(:lvasgn, :output,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :output))),
                s(:lvasgn, :indent,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :indent))),
                s(:lvasgn, :transitive,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :transitive))),
                s(:lvasgn, :ie_hack,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :ie_hack))),
                s(:lvasgn, :encoding,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :encoding)))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :output),
                  s(:lvasgn, :indent),
                  s(:lvasgn, :transitive),
                  s(:lvasgn, :ie_hack),
                  s(:lvasgn, :encoding)),
                s(:array,
                  s(:splat,
                    s(:lvar, :arguments))))),
            s(:or_asgn,
              s(:lvasgn, :output),
              s(:gvar, :$stdout)),
            s(:or_asgn,
              s(:lvasgn, :indent),
              s(:int, -1)),
            s(:if,
              s(:send,
                s(:lvar, :transitive), :nil?),
              s(:lvasgn, :transitive,
                s(:false)), nil),
            s(:if,
              s(:send,
                s(:lvar, :ie_hack), :nil?),
              s(:lvasgn, :ie_hack,
                s(:false)), nil),
            s(:or_asgn,
              s(:lvasgn, :encoding),
              s(:send,
                s(:send, nil, :xml_decl), :encoding)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :encoding), :!=,
                  s(:str, "UTF-8")),
                s(:send,
                  s(:send,
                    s(:lvar, :output), :kind_of?,
                    s(:const, nil, :Output)), :!)),
              s(:lvasgn, :output,
                s(:send,
                  s(:const, nil, :Output), :new,
                  s(:lvar, :output),
                  s(:lvar, :encoding))), nil),
            s(:lvasgn, :formatter,
              s(:if,
                s(:send,
                  s(:lvar, :indent), :>,
                  s(:int, -1)),
                s(:if,
                  s(:lvar, :transitive),
                  s(:begin,
                    s(:send, nil, :require,
                      s(:str, "rexml/formatters/transitive")),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :REXML), :Formatters), :Transitive), :new,
                      s(:lvar, :indent),
                      s(:lvar, :ie_hack))),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                    s(:lvar, :indent),
                    s(:lvar, :ie_hack))),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :REXML), :Formatters), :Default), :new,
                  s(:lvar, :ie_hack)))),
            s(:send,
              s(:lvar, :formatter), :write,
              s(:self),
              s(:lvar, :output)))),
        s(:defs,
          s(:const, nil, :Document), :parse_stream,
          s(:args,
            s(:arg, :source),
            s(:arg, :listener)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Parsers), :StreamParser), :new,
              s(:lvar, :source),
              s(:lvar, :listener)), :parse)),
        s(:defs,
          s(:const, nil, :Document), :entity_expansion_limit=,
          s(:args,
            s(:arg, :val)),
          s(:send,
            s(:const, nil, :Security), :entity_expansion_limit=,
            s(:lvar, :val))),
        s(:defs,
          s(:const, nil, :Document), :entity_expansion_limit,
          s(:args),
          s(:return,
            s(:send,
              s(:const, nil, :Security), :entity_expansion_limit))),
        s(:defs,
          s(:const, nil, :Document), :entity_expansion_text_limit=,
          s(:args,
            s(:arg, :val)),
          s(:send,
            s(:const, nil, :Security), :entity_expansion_text_limit=,
            s(:lvar, :val))),
        s(:defs,
          s(:const, nil, :Document), :entity_expansion_text_limit,
          s(:args),
          s(:return,
            s(:send,
              s(:const, nil, :Security), :entity_expansion_text_limit))),
        s(:send, nil, :attr_reader,
          s(:sym, :entity_expansion_count)),
        s(:def, :record_entity_expansion,
          s(:args),
          s(:begin,
            s(:op_asgn,
              s(:ivasgn, :@entity_expansion_count), :+,
              s(:int, 1)),
            s(:if,
              s(:send,
                s(:ivar, :@entity_expansion_count), :>,
                s(:send,
                  s(:const, nil, :Security), :entity_expansion_limit)),
              s(:send, nil, :raise,
                s(:str, "number of entity expansions exceeded, processing aborted.")), nil))),
        s(:def, :document,
          s(:args),
          s(:self)),
        s(:send, nil, :private),
        s(:def, :build,
          s(:args,
            s(:arg, :source)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Parsers), :TreeParser), :new,
              s(:lvar, :source),
              s(:self)), :parse))))))
