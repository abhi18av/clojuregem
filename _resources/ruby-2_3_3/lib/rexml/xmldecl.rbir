s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/encoding")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:module,
    s(:const, nil, :REXML),
    s(:class,
      s(:const, nil, :XMLDecl),
      s(:const, nil, :Child),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :Encoding)),
        s(:casgn, nil, :DEFAULT_VERSION,
          s(:str, "1.0")),
        s(:casgn, nil, :DEFAULT_ENCODING,
          s(:str, "UTF-8")),
        s(:casgn, nil, :DEFAULT_STANDALONE,
          s(:str, "no")),
        s(:casgn, nil, :START,
          s(:str, "<\\?xml")),
        s(:casgn, nil, :STOP,
          s(:str, "\\?>")),
        s(:send, nil, :attr_accessor,
          s(:sym, :version),
          s(:sym, :standalone)),
        s(:send, nil, :attr_reader,
          s(:sym, :writeencoding),
          s(:sym, :writethis)),
        s(:def, :initialize,
          s(:args,
            s(:optarg, :version,
              s(:const, nil, :DEFAULT_VERSION)),
            s(:optarg, :encoding,
              s(:nil)),
            s(:optarg, :standalone,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@writethis,
              s(:true)),
            s(:ivasgn, :@writeencoding,
              s(:send,
                s(:send,
                  s(:lvar, :encoding), :nil?), :!)),
            s(:if,
              s(:send,
                s(:lvar, :version), :kind_of?,
                s(:const, nil, :XMLDecl)),
              s(:begin,
                s(:super),
                s(:ivasgn, :@version,
                  s(:send,
                    s(:lvar, :version), :version)),
                s(:send,
                  s(:self), :encoding=,
                  s(:send,
                    s(:lvar, :version), :encoding)),
                s(:ivasgn, :@writeencoding,
                  s(:send,
                    s(:lvar, :version), :writeencoding)),
                s(:ivasgn, :@standalone,
                  s(:send,
                    s(:lvar, :version), :standalone))),
              s(:begin,
                s(:super),
                s(:ivasgn, :@version,
                  s(:lvar, :version)),
                s(:send,
                  s(:self), :encoding=,
                  s(:lvar, :encoding)),
                s(:ivasgn, :@standalone,
                  s(:lvar, :standalone)))),
            s(:if,
              s(:send,
                s(:ivar, :@version), :nil?),
              s(:ivasgn, :@version,
                s(:const, nil, :DEFAULT_VERSION)), nil))),
        s(:def, :clone,
          s(:args),
          s(:send,
            s(:const, nil, :XMLDecl), :new,
            s(:self))),
        s(:def, :write,
          s(:args,
            s(:arg, :writer),
            s(:optarg, :indent,
              s(:int, -1)),
            s(:optarg, :transitive,
              s(:false)),
            s(:optarg, :ie_hack,
              s(:false))),
          s(:begin,
            s(:if,
              s(:or,
                s(:ivar, :@writethis),
                s(:send,
                  s(:lvar, :writer), :kind_of?,
                  s(:const, nil, :Output))), nil,
              s(:return,
                s(:nil))),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:send,
                s(:const, nil, :START), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, ""))),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:dstr,
                s(:str, " "),
                s(:begin,
                  s(:send, nil, :content,
                    s(:send, nil, :encoding))))),
            s(:send,
              s(:lvar, :writer), :<<,
              s(:send,
                s(:const, nil, :STOP), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, ""))))),
        s(:def, :==,
          s(:args,
            s(:arg, :other)),
          s(:and,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :other), :kind_of?,
                  s(:const, nil, :XMLDecl)),
                s(:send,
                  s(:send,
                    s(:lvar, :other), :version), :==,
                  s(:ivar, :@version))),
              s(:send,
                s(:send,
                  s(:lvar, :other), :encoding), :==,
                s(:send,
                  s(:self), :encoding))),
            s(:send,
              s(:send,
                s(:lvar, :other), :standalone), :==,
              s(:ivar, :@standalone)))),
        s(:def, :xmldecl,
          s(:args,
            s(:arg, :version),
            s(:arg, :encoding),
            s(:arg, :standalone)),
          s(:begin,
            s(:ivasgn, :@version,
              s(:lvar, :version)),
            s(:send,
              s(:self), :encoding=,
              s(:lvar, :encoding)),
            s(:ivasgn, :@standalone,
              s(:lvar, :standalone)))),
        s(:def, :node_type,
          s(:args),
          s(:sym, :xmldecl)),
        s(:alias,
          s(:sym, :stand_alone?),
          s(:sym, :standalone)),
        s(:alias,
          s(:sym, :old_enc=),
          s(:sym, :encoding=)),
        s(:def, :encoding=,
          s(:args,
            s(:arg, :enc)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :enc), :nil?),
              s(:begin,
                s(:send,
                  s(:self), :old_enc=,
                  s(:str, "UTF-8")),
                s(:ivasgn, :@writeencoding,
                  s(:false))),
              s(:begin,
                s(:send,
                  s(:self), :old_enc=,
                  s(:lvar, :enc)),
                s(:ivasgn, :@writeencoding,
                  s(:true)))),
            s(:send,
              s(:self), :dowrite))),
        s(:defs,
          s(:const, nil, :XMLDecl), :default,
          s(:args),
          s(:begin,
            s(:lvasgn, :rv,
              s(:send,
                s(:const, nil, :XMLDecl), :new,
                s(:str, "1.0"))),
            s(:send,
              s(:lvar, :rv), :nowrite),
            s(:lvar, :rv))),
        s(:def, :nowrite,
          s(:args),
          s(:ivasgn, :@writethis,
            s(:false))),
        s(:def, :dowrite,
          s(:args),
          s(:ivasgn, :@writethis,
            s(:true))),
        s(:def, :inspect,
          s(:args),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :START), :sub,
                s(:regexp,
                  s(:str, "\\\\"),
                  s(:regopt, :u)),
                s(:str, "")), :+,
              s(:str, " ... ")), :+,
            s(:send,
              s(:const, nil, :STOP), :sub,
              s(:regexp,
                s(:str, "\\\\"),
                s(:regopt, :u)),
              s(:str, "")))),
        s(:send, nil, :private),
        s(:def, :content,
          s(:args,
            s(:arg, :enc)),
          s(:begin,
            s(:lvasgn, :rv,
              s(:dstr,
                s(:str, "version='"),
                s(:ivar, :@version),
                s(:str, "'"))),
            s(:if,
              s(:or,
                s(:ivar, :@writeencoding),
                s(:send,
                  s(:lvar, :enc), :!~,
                  s(:regexp,
                    s(:str, "\\Autf-8\\z"),
                    s(:regopt, :i)))),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:dstr,
                  s(:str, " encoding='"),
                  s(:begin,
                    s(:lvar, :enc)),
                  s(:str, "'"))), nil),
            s(:if,
              s(:ivar, :@standalone),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:dstr,
                  s(:str, " standalone='"),
                  s(:ivar, :@standalone),
                  s(:str, "'"))), nil),
            s(:lvar, :rv)))))))
