s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/child")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :DTD),
      s(:class,
        s(:const, nil, :EntityDecl),
        s(:const, nil, :Child),
        s(:begin,
          s(:casgn, nil, :START,
            s(:str, "<!ENTITY")),
          s(:casgn, nil, :START_RE,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :PUBLIC,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:str, "\\s+(?:%\\s+)?(\\w+)\\s+PUBLIC\\s+(([\"']).*?\\3)\\s+(([\"']).*?\\5)\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :SYSTEM,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:str, "\\s+(?:%\\s+)?(\\w+)\\s+SYSTEM\\s+(([\"']).*?\\3)(?:\\s+NDATA\\s+\\w+)?\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :PLAIN,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:str, "\\s+(\\w+)\\s+(([\"']).*?\\3)\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :PERCENT,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:str, "\\s+%\\s+(\\w+)\\s+(([\"']).*?\\3)\\s*>"),
              s(:regopt, :m, :u))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:super),
              s(:lvasgn, :md,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:lvar, :src), :match,
                  s(:const, nil, :PUBLIC)),
                s(:begin,
                  s(:lvasgn, :md,
                    s(:send,
                      s(:lvar, :src), :match,
                      s(:const, nil, :PUBLIC),
                      s(:true))),
                  s(:ivasgn, :@middle,
                    s(:str, "PUBLIC")),
                  s(:ivasgn, :@content,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :md), :[],
                          s(:int, 2))),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :md), :[],
                          s(:int, 4)))))),
                s(:if,
                  s(:send,
                    s(:lvar, :src), :match,
                    s(:const, nil, :SYSTEM)),
                  s(:begin,
                    s(:lvasgn, :md,
                      s(:send,
                        s(:lvar, :src), :match,
                        s(:const, nil, :SYSTEM),
                        s(:true))),
                    s(:ivasgn, :@middle,
                      s(:str, "SYSTEM")),
                    s(:ivasgn, :@content,
                      s(:send,
                        s(:lvar, :md), :[],
                        s(:int, 2)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :src), :match,
                      s(:const, nil, :PLAIN)),
                    s(:begin,
                      s(:lvasgn, :md,
                        s(:send,
                          s(:lvar, :src), :match,
                          s(:const, nil, :PLAIN),
                          s(:true))),
                      s(:ivasgn, :@middle,
                        s(:str, "")),
                      s(:ivasgn, :@content,
                        s(:send,
                          s(:lvar, :md), :[],
                          s(:int, 2)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :src), :match,
                        s(:const, nil, :PERCENT)),
                      s(:begin,
                        s(:lvasgn, :md,
                          s(:send,
                            s(:lvar, :src), :match,
                            s(:const, nil, :PERCENT),
                            s(:true))),
                        s(:ivasgn, :@middle,
                          s(:str, "")),
                        s(:ivasgn, :@content,
                          s(:send,
                            s(:lvar, :md), :[],
                            s(:int, 2)))), nil)))),
              s(:if,
                s(:send,
                  s(:lvar, :md), :nil?),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :ParseException), :new,
                    s(:str, "failed Entity match"),
                    s(:lvar, :src))), nil),
              s(:ivasgn, :@name,
                s(:send,
                  s(:lvar, :md), :[],
                  s(:int, 1))))),
          s(:def, :to_s,
            s(:args),
            s(:begin,
              s(:lvasgn, :rv,
                s(:dstr,
                  s(:str, "<!ENTITY "),
                  s(:ivar, :@name),
                  s(:str, " "))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@middle), :size), :>,
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :rv), :<<,
                  s(:dstr,
                    s(:ivar, :@middle),
                    s(:str, " "))), nil),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:ivar, :@content)),
              s(:lvar, :rv))),
          s(:def, :write,
            s(:args,
              s(:arg, :output),
              s(:arg, :indent)),
            s(:begin,
              s(:send, nil, :indent,
                s(:lvar, :output),
                s(:lvar, :indent)),
              s(:send,
                s(:lvar, :output), :<<,
                s(:send, nil, :to_s)))),
          s(:defs,
            s(:const, nil, :EntityDecl), :parse_source,
            s(:args,
              s(:arg, :source),
              s(:arg, :listener)),
            s(:begin,
              s(:lvasgn, :md,
                s(:send,
                  s(:lvar, :source), :match,
                  s(:const, nil, :PATTERN_RE),
                  s(:true))),
              s(:lvasgn, :thing,
                s(:send,
                  s(:send,
                    s(:lvar, :md), :[],
                    s(:int, 0)), :squeeze,
                  s(:str, " \t\n\r"))),
              s(:send,
                s(:lvar, :listener), :send,
                s(:send,
                  s(:send, nil, :inspect), :downcase),
                s(:lvar, :thing)))))))))
