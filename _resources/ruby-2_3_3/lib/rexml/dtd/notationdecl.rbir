s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/child")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :DTD),
      s(:class,
        s(:const, nil, :NotationDecl),
        s(:const, nil, :Child),
        s(:begin,
          s(:casgn, nil, :START,
            s(:str, "<!NOTATION")),
          s(:casgn, nil, :START_RE,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :PUBLIC,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:str, "\\s+(\\w[\\w-]*)\\s+(PUBLIC)\\s+(([\"']).*?\\4)\\s*>"),
              s(:regopt, :m, :u))),
          s(:casgn, nil, :SYSTEM,
            s(:regexp,
              s(:str, "^\\s*"),
              s(:begin,
                s(:const, nil, :START)),
              s(:str, "\\s+(\\w[\\w-]*)\\s+(SYSTEM)\\s+(([\"']).*?\\4)\\s*>"),
              s(:regopt, :m, :u))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:super),
              s(:if,
                s(:send,
                  s(:lvar, :src), :match,
                  s(:const, nil, :PUBLIC)),
                s(:lvasgn, :md,
                  s(:send,
                    s(:lvar, :src), :match,
                    s(:const, nil, :PUBLIC),
                    s(:true))),
                s(:if,
                  s(:send,
                    s(:lvar, :src), :match,
                    s(:const, nil, :SYSTEM)),
                  s(:lvasgn, :md,
                    s(:send,
                      s(:lvar, :src), :match,
                      s(:const, nil, :SYSTEM),
                      s(:true))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ParseException), :new,
                      s(:str, "error parsing notation: no matching pattern"),
                      s(:lvar, :src))))),
              s(:ivasgn, :@name,
                s(:send,
                  s(:lvar, :md), :[],
                  s(:int, 1))),
              s(:ivasgn, :@middle,
                s(:send,
                  s(:lvar, :md), :[],
                  s(:int, 2))),
              s(:ivasgn, :@rest,
                s(:send,
                  s(:lvar, :md), :[],
                  s(:int, 3))))),
          s(:def, :to_s,
            s(:args),
            s(:dstr,
              s(:str, "<!NOTATION "),
              s(:ivar, :@name),
              s(:str, " "),
              s(:ivar, :@middle),
              s(:str, " "),
              s(:ivar, :@rest),
              s(:str, ">"))),
          s(:def, :write,
            s(:args,
              s(:arg, :output),
              s(:arg, :indent)),
            s(:begin,
              s(:send, nil, :indent,
                s(:lvar, :output),
                s(:lvar, :indent)),
              s(:send,
                s(:lvar, :output), :<<,
                s(:send, nil, :to_s)))),
          s(:defs,
            s(:const, nil, :NotationDecl), :parse_source,
            s(:args,
              s(:arg, :source),
              s(:arg, :listener)),
            s(:begin,
              s(:lvasgn, :md,
                s(:send,
                  s(:lvar, :source), :match,
                  s(:const, nil, :PATTERN_RE),
                  s(:true))),
              s(:lvasgn, :thing,
                s(:send,
                  s(:send,
                    s(:lvar, :md), :[],
                    s(:int, 0)), :squeeze,
                  s(:str, " \t\n\r"))),
              s(:send,
                s(:lvar, :listener), :send,
                s(:send,
                  s(:send, nil, :inspect), :downcase),
                s(:lvar, :thing)))))))))
