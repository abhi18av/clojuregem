s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/namespace")),
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:send, nil, :require,
    s(:str, "rexml/attribute")),
  s(:send, nil, :require,
    s(:str, "rexml/syncenumerator")),
  s(:send, nil, :require,
    s(:str, "rexml/parsers/xpathparser")),
  s(:class,
    s(:const, nil, :Object), nil,
    s(:def, :dclone,
      s(:args),
      s(:send, nil, :clone))),
  s(:class,
    s(:const, nil, :Symbol), nil,
    s(:def, :dclone,
      s(:args),
      s(:self))),
  s(:class,
    s(:const, nil, :Fixnum), nil,
    s(:def, :dclone,
      s(:args),
      s(:self))),
  s(:class,
    s(:const, nil, :Float), nil,
    s(:def, :dclone,
      s(:args),
      s(:self))),
  s(:class,
    s(:const, nil, :Array), nil,
    s(:def, :dclone,
      s(:args),
      s(:begin,
        s(:lvasgn, :klone,
          s(:send,
            s(:self), :clone)),
        s(:send,
          s(:lvar, :klone), :clear),
        s(:block,
          s(:send,
            s(:self), :each),
          s(:args,
            s(:arg, :v)),
          s(:send,
            s(:lvar, :klone), :<<,
            s(:send,
              s(:lvar, :v), :dclone))),
        s(:lvar, :klone)))),
  s(:module,
    s(:const, nil, :REXML),
    s(:class,
      s(:const, nil, :XPathParser), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :XMLTokens)),
        s(:casgn, nil, :LITERAL,
          s(:regexp,
            s(:str, "^'([^']*)'|^\"([^\"]*)\""),
            s(:regopt, :u))),
        s(:def, :initialize,
          s(:args),
          s(:begin,
            s(:ivasgn, :@parser,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :REXML), :Parsers), :XPathParser), :new)),
            s(:ivasgn, :@namespaces,
              s(:nil)),
            s(:ivasgn, :@variables,
              s(:hash)))),
        s(:def, :namespaces=,
          s(:args,
            s(:optarg, :namespaces,
              s(:hash))),
          s(:begin,
            s(:send,
              s(:const, nil, :Functions), :namespace_context=,
              s(:lvar, :namespaces)),
            s(:ivasgn, :@namespaces,
              s(:lvar, :namespaces)))),
        s(:def, :variables=,
          s(:args,
            s(:optarg, :vars,
              s(:hash))),
          s(:begin,
            s(:send,
              s(:const, nil, :Functions), :variables=,
              s(:lvar, :vars)),
            s(:ivasgn, :@variables,
              s(:lvar, :vars)))),
        s(:def, :parse,
          s(:args,
            s(:arg, :path),
            s(:arg, :nodeset)),
          s(:begin,
            s(:lvasgn, :path_stack,
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:lvar, :path))),
            s(:send, nil, :match,
              s(:lvar, :path_stack),
              s(:lvar, :nodeset)))),
        s(:def, :get_first,
          s(:args,
            s(:arg, :path),
            s(:arg, :nodeset)),
          s(:begin,
            s(:lvasgn, :path_stack,
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:lvar, :path))),
            s(:send, nil, :first,
              s(:lvar, :path_stack),
              s(:lvar, :nodeset)))),
        s(:def, :predicate,
          s(:args,
            s(:arg, :path),
            s(:arg, :nodeset)),
          s(:begin,
            s(:lvasgn, :path_stack,
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:lvar, :path))),
            s(:send, nil, :expr,
              s(:lvar, :path_stack),
              s(:lvar, :nodeset)))),
        s(:def, :[]=,
          s(:args,
            s(:arg, :variable_name),
            s(:arg, :value)),
          s(:send,
            s(:ivar, :@variables), :[]=,
            s(:lvar, :variable_name),
            s(:lvar, :value))),
        s(:def, :first,
          s(:args,
            s(:arg, :path_stack),
            s(:arg, :node)),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:send, nil, :path), :size), :==,
                s(:int, 0)),
              s(:return,
                s(:nil)), nil),
            s(:case,
              s(:send,
                s(:send, nil, :path), :[],
                s(:int, 0)),
              s(:when,
                s(:sym, :document),
                s(:return,
                  s(:send, nil, :first,
                    s(:send,
                      s(:send, nil, :path), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1))),
                    s(:lvar, :node)))),
              s(:when,
                s(:sym, :child),
                s(:for,
                  s(:lvasgn, :c),
                  s(:send,
                    s(:lvar, :node), :children),
                  s(:begin,
                    s(:lvasgn, :r,
                      s(:send, nil, :first,
                        s(:send,
                          s(:send, nil, :path), :[],
                          s(:irange,
                            s(:int, 1),
                            s(:int, -1))),
                        s(:lvar, :c))),
                    s(:if,
                      s(:lvar, :r),
                      s(:return,
                        s(:lvar, :r)), nil)))),
              s(:when,
                s(:sym, :qname),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send,
                      s(:send, nil, :path), :[],
                      s(:int, 2))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :name), :==,
                      s(:lvar, :name)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send, nil, :path), :size), :==,
                          s(:int, 3)),
                        s(:return,
                          s(:lvar, :node)), nil),
                      s(:return,
                        s(:send, nil, :first,
                          s(:send,
                            s(:send, nil, :path), :[],
                            s(:irange,
                              s(:int, 3),
                              s(:int, -1))),
                          s(:lvar, :node)))),
                    s(:return,
                      s(:nil))))),
              s(:when,
                s(:sym, :descendant_or_self),
                s(:begin,
                  s(:lvasgn, :r,
                    s(:send, nil, :first,
                      s(:send,
                        s(:send, nil, :path), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1))),
                      s(:lvar, :node))),
                  s(:if,
                    s(:lvar, :r),
                    s(:return,
                      s(:lvar, :r)), nil),
                  s(:for,
                    s(:lvasgn, :c),
                    s(:send,
                      s(:lvar, :node), :children),
                    s(:begin,
                      s(:lvasgn, :r,
                        s(:send, nil, :first,
                          s(:send, nil, :path),
                          s(:lvar, :c))),
                      s(:if,
                        s(:lvar, :r),
                        s(:return,
                          s(:lvar, :r)), nil))))),
              s(:when,
                s(:sym, :node),
                s(:return,
                  s(:send, nil, :first,
                    s(:send,
                      s(:send, nil, :path), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1))),
                    s(:lvar, :node)))),
              s(:when,
                s(:sym, :any),
                s(:return,
                  s(:send, nil, :first,
                    s(:send,
                      s(:send, nil, :path), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1))),
                    s(:lvar, :node)))), nil),
            s(:return,
              s(:nil)))),
        s(:def, :match,
          s(:args,
            s(:arg, :path_stack),
            s(:arg, :nodeset)),
          s(:begin,
            s(:lvasgn, :r,
              s(:send, nil, :expr,
                s(:lvar, :path_stack),
                s(:lvar, :nodeset))),
            s(:lvar, :r))),
        s(:send, nil, :private),
        s(:def, :get_namespace,
          s(:args,
            s(:arg, :node),
            s(:arg, :prefix)),
          s(:if,
            s(:ivar, :@namespaces),
            s(:return,
              s(:or,
                s(:send,
                  s(:ivar, :@namespaces), :[],
                  s(:lvar, :prefix)),
                s(:str, ""))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :node_type), :==,
                  s(:sym, :element)),
                s(:return,
                  s(:send,
                    s(:lvar, :node), :namespace,
                    s(:lvar, :prefix))), nil),
              s(:return,
                s(:str, ""))))),
        s(:casgn, nil, :ALL,
          s(:array,
            s(:sym, :attribute),
            s(:sym, :element),
            s(:sym, :text),
            s(:sym, :processing_instruction),
            s(:sym, :comment))),
        s(:casgn, nil, :ELEMENTS,
          s(:array,
            s(:sym, :element))),
        s(:def, :expr,
          s(:args,
            s(:arg, :path_stack),
            s(:arg, :nodeset),
            s(:optarg, :context,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :node_types,
              s(:const, nil, :ELEMENTS)),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:lvar, :path_stack), :length), :==,
                  s(:int, 0)),
                s(:send,
                  s(:send,
                    s(:lvar, :nodeset), :length), :==,
                  s(:int, 0))),
              s(:return,
                s(:lvar, :nodeset)), nil),
            s(:while,
              s(:send,
                s(:send,
                  s(:lvar, :path_stack), :length), :>,
                s(:int, 0)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :nodeset), :length), :==,
                    s(:int, 0)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :path_stack), :clear),
                    s(:return,
                      s(:array))), nil),
                s(:case,
                  s(:begin,
                    s(:lvasgn, :op,
                      s(:send,
                        s(:lvar, :path_stack), :shift))),
                  s(:when,
                    s(:sym, :document),
                    s(:lvasgn, :nodeset,
                      s(:array,
                        s(:send,
                          s(:send,
                            s(:lvar, :nodeset), :[],
                            s(:int, 0)), :root_node)))),
                  s(:when,
                    s(:sym, :qname),
                    s(:begin,
                      s(:lvasgn, :prefix,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:lvasgn, :name,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :delete_if),
                        s(:args,
                          s(:arg, :node)),
                        s(:begin,
                          s(:lvasgn, :ns,
                            s(:send, nil, :get_namespace,
                              s(:lvar, :node),
                              s(:lvar, :prefix))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :node_type), :==,
                              s(:sym, :element)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :node), :name), :==,
                                s(:lvar, :name)), nil, nil), nil),
                          s(:send,
                            s(:begin,
                              s(:and,
                                s(:and,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :node), :node_type), :==,
                                    s(:sym, :element)),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :node), :name), :==,
                                    s(:lvar, :name))),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :node), :namespace), :==,
                                  s(:lvar, :ns)))), :!))),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :any),
                    s(:block,
                      s(:send,
                        s(:lvar, :nodeset), :delete_if),
                      s(:args,
                        s(:arg, :node)),
                      s(:send,
                        s(:send,
                          s(:lvar, :node_types), :include?,
                          s(:send,
                            s(:lvar, :node), :node_type)), :!))),
                  s(:when,
                    s(:sym, :self), nil),
                  s(:when,
                    s(:sym, :processing_instruction),
                    s(:begin,
                      s(:lvasgn, :target,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :delete_if),
                        s(:args,
                          s(:arg, :node)),
                        s(:or,
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :node_type), :!=,
                              s(:sym, :processing_instruction))),
                          s(:begin,
                            s(:and,
                              s(:send,
                                s(:lvar, :target), :!=,
                                s(:str, "")),
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :node), :target), :!=,
                                  s(:lvar, :target))))))))),
                  s(:when,
                    s(:sym, :text),
                    s(:block,
                      s(:send,
                        s(:lvar, :nodeset), :delete_if),
                      s(:args,
                        s(:arg, :node)),
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :node_type), :!=,
                        s(:sym, :text)))),
                  s(:when,
                    s(:sym, :comment),
                    s(:block,
                      s(:send,
                        s(:lvar, :nodeset), :delete_if),
                      s(:args,
                        s(:arg, :node)),
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :node_type), :!=,
                        s(:sym, :comment)))),
                  s(:when,
                    s(:sym, :node),
                    s(:lvasgn, :node_types,
                      s(:const, nil, :ALL))),
                  s(:when,
                    s(:sym, :child),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:lvasgn, :nt,
                        s(:nil)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:begin,
                          s(:lvasgn, :nt,
                            s(:send,
                              s(:lvar, :node), :node_type)),
                          s(:if,
                            s(:or,
                              s(:send,
                                s(:lvar, :nt), :==,
                                s(:sym, :element)),
                              s(:send,
                                s(:lvar, :nt), :==,
                                s(:sym, :document))),
                            s(:op_asgn,
                              s(:lvasgn, :new_nodeset), :+,
                              s(:send,
                                s(:lvar, :node), :children)), nil))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :literal),
                    s(:return,
                      s(:send,
                        s(:lvar, :path_stack), :shift))),
                  s(:when,
                    s(:sym, :attribute),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:case,
                        s(:send,
                          s(:lvar, :path_stack), :shift),
                        s(:when,
                          s(:sym, :qname),
                          s(:begin,
                            s(:lvasgn, :prefix,
                              s(:send,
                                s(:lvar, :path_stack), :shift)),
                            s(:lvasgn, :name,
                              s(:send,
                                s(:lvar, :path_stack), :shift)),
                            s(:for,
                              s(:lvasgn, :element),
                              s(:lvar, :nodeset),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :element), :node_type), :==,
                                  s(:sym, :element)),
                                s(:begin,
                                  s(:lvasgn, :attrib,
                                    s(:send,
                                      s(:lvar, :element), :attribute,
                                      s(:lvar, :name),
                                      s(:send, nil, :get_namespace,
                                        s(:lvar, :element),
                                        s(:lvar, :prefix)))),
                                  s(:if,
                                    s(:lvar, :attrib),
                                    s(:send,
                                      s(:lvar, :new_nodeset), :<<,
                                      s(:lvar, :attrib)), nil)), nil)))),
                        s(:when,
                          s(:sym, :any),
                          s(:for,
                            s(:lvasgn, :element),
                            s(:lvar, :nodeset),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :element), :node_type), :==,
                                s(:sym, :element)),
                              s(:op_asgn,
                                s(:lvasgn, :new_nodeset), :+,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :element), :attributes), :to_a)), nil))), nil),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)))),
                  s(:when,
                    s(:sym, :parent),
                    s(:begin,
                      s(:lvasgn, :nodeset,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:lvar, :nodeset), :collect),
                            s(:args,
                              s(:arg, :n)),
                            s(:send,
                              s(:lvar, :n), :parent)), :compact)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :ancestor),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:while,
                          s(:send,
                            s(:lvar, :node), :parent),
                          s(:begin,
                            s(:lvasgn, :node,
                              s(:send,
                                s(:lvar, :node), :parent)),
                            s(:if,
                              s(:send,
                                s(:lvar, :new_nodeset), :include?,
                                s(:lvar, :node)), nil,
                              s(:send,
                                s(:lvar, :new_nodeset), :<<,
                                s(:lvar, :node)))))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :ancestor_or_self),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :node), :node_type), :==,
                            s(:sym, :element)),
                          s(:begin,
                            s(:send,
                              s(:lvar, :new_nodeset), :<<,
                              s(:lvar, :node)),
                            s(:while,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :node), :parent)),
                              s(:begin,
                                s(:lvasgn, :node,
                                  s(:send,
                                    s(:lvar, :node), :parent)),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :new_nodeset), :include?,
                                    s(:lvar, :node)), nil,
                                  s(:send,
                                    s(:lvar, :new_nodeset), :<<,
                                    s(:lvar, :node)))))), nil)),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :predicate),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:lvasgn, :subcontext,
                        s(:hash,
                          s(:pair,
                            s(:sym, :size),
                            s(:send,
                              s(:lvar, :nodeset), :size)))),
                      s(:lvasgn, :pred,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each_with_index),
                        s(:args,
                          s(:arg, :node),
                          s(:arg, :index)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :subcontext), :[]=,
                            s(:sym, :node),
                            s(:lvar, :node)),
                          s(:send,
                            s(:lvar, :subcontext), :[]=,
                            s(:sym, :index),
                            s(:send,
                              s(:lvar, :index), :+,
                              s(:int, 1))),
                          s(:lvasgn, :pc,
                            s(:send,
                              s(:lvar, :pred), :dclone)),
                          s(:lvasgn, :result,
                            s(:send, nil, :expr,
                              s(:lvar, :pc),
                              s(:array,
                                s(:lvar, :node)),
                              s(:lvar, :subcontext))),
                          s(:if,
                            s(:and,
                              s(:send,
                                s(:lvar, :result), :kind_of?,
                                s(:const, nil, :Array)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :result), :length), :==,
                                s(:int, 1))),
                            s(:lvasgn, :result,
                              s(:send,
                                s(:lvar, :result), :[],
                                s(:int, 0))), nil),
                          s(:if,
                            s(:send,
                              s(:lvar, :result), :kind_of?,
                              s(:const, nil, :Numeric)),
                            s(:if,
                              s(:send,
                                s(:lvar, :result), :==,
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :index), :+,
                                    s(:int, 1)))),
                              s(:send,
                                s(:lvar, :new_nodeset), :<<,
                                s(:lvar, :node)), nil),
                            s(:if,
                              s(:send,
                                s(:lvar, :result), :instance_of?,
                                s(:const, nil, :Array)),
                              s(:if,
                                s(:and,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :result), :size), :>,
                                    s(:int, 0)),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :result), :inject,
                                      s(:false)),
                                    s(:args,
                                      s(:arg, :k),
                                      s(:arg, :s)),
                                    s(:or,
                                      s(:lvar, :s),
                                      s(:lvar, :k)))),
                                s(:if,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :result), :size), :>,
                                    s(:int, 0)),
                                  s(:send,
                                    s(:lvar, :new_nodeset), :<<,
                                    s(:lvar, :node)), nil), nil),
                              s(:if,
                                s(:lvar, :result),
                                s(:send,
                                  s(:lvar, :new_nodeset), :<<,
                                  s(:lvar, :node)), nil))))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)))),
                  s(:when,
                    s(:sym, :descendant_or_self),
                    s(:begin,
                      s(:lvasgn, :rv,
                        s(:send, nil, :descendant_or_self,
                          s(:lvar, :path_stack),
                          s(:lvar, :nodeset))),
                      s(:send,
                        s(:lvar, :path_stack), :clear),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :rv)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :descendant),
                    s(:begin,
                      s(:lvasgn, :results,
                        s(:array)),
                      s(:lvasgn, :nt,
                        s(:nil)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:begin,
                          s(:lvasgn, :nt,
                            s(:send,
                              s(:lvar, :node), :node_type)),
                          s(:if,
                            s(:or,
                              s(:send,
                                s(:lvar, :nt), :==,
                                s(:sym, :element)),
                              s(:send,
                                s(:lvar, :nt), :==,
                                s(:sym, :document))),
                            s(:op_asgn,
                              s(:lvasgn, :results), :+,
                              s(:send, nil, :expr,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :path_stack), :dclone), :unshift,
                                  s(:sym, :descendant_or_self)),
                                s(:send,
                                  s(:lvar, :node), :children))), nil))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :results)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :following_sibling),
                    s(:begin,
                      s(:lvasgn, :results,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :parent), :nil?),
                            s(:next), nil),
                          s(:lvasgn, :all_siblings,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :parent), :children)),
                          s(:lvasgn, :current_index,
                            s(:send,
                              s(:lvar, :all_siblings), :index,
                              s(:lvar, :node))),
                          s(:lvasgn, :following_siblings,
                            s(:send,
                              s(:lvar, :all_siblings), :[],
                              s(:irange,
                                s(:send,
                                  s(:lvar, :current_index), :+,
                                  s(:int, 1)),
                                s(:int, -1)))),
                          s(:op_asgn,
                            s(:lvasgn, :results), :+,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :dclone),
                              s(:lvar, :following_siblings))))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :results)))),
                  s(:when,
                    s(:sym, :preceding_sibling),
                    s(:begin,
                      s(:lvasgn, :results,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :parent), :nil?),
                            s(:next), nil),
                          s(:lvasgn, :all_siblings,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :parent), :children)),
                          s(:lvasgn, :current_index,
                            s(:send,
                              s(:lvar, :all_siblings), :index,
                              s(:lvar, :node))),
                          s(:lvasgn, :preceding_siblings,
                            s(:send,
                              s(:send,
                                s(:lvar, :all_siblings), :[],
                                s(:int, 0),
                                s(:lvar, :current_index)), :reverse)),
                          s(:op_asgn,
                            s(:lvasgn, :results), :+,
                            s(:lvar, :preceding_siblings)))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :results)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :preceding),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:op_asgn,
                          s(:lvasgn, :new_nodeset), :+,
                          s(:send, nil, :preceding,
                            s(:lvar, :node)))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :following),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:op_asgn,
                          s(:lvasgn, :new_nodeset), :+,
                          s(:send, nil, :following,
                            s(:lvar, :node)))),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)),
                      s(:lvasgn, :node_types,
                        s(:const, nil, :ELEMENTS)))),
                  s(:when,
                    s(:sym, :namespace),
                    s(:begin,
                      s(:lvasgn, :new_nodeset,
                        s(:array)),
                      s(:lvasgn, :prefix,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each),
                        s(:args,
                          s(:arg, :node)),
                        s(:if,
                          s(:begin,
                            s(:or,
                              s(:send,
                                s(:send,
                                  s(:lvar, :node), :node_type), :==,
                                s(:sym, :element)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :node), :node_type), :==,
                                s(:sym, :attribute)))),
                          s(:begin,
                            s(:if,
                              s(:ivar, :@namespaces),
                              s(:lvasgn, :namespaces,
                                s(:ivar, :@namespaces)),
                              s(:if,
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :node), :node_type), :==,
                                    s(:sym, :element))),
                                s(:lvasgn, :namespaces,
                                  s(:send,
                                    s(:lvar, :node), :namespaces)),
                                s(:lvasgn, :namespaces,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :node), :element), :namesapces)))),
                            s(:if,
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :node), :namespace), :==,
                                  s(:send,
                                    s(:lvar, :namespaces), :[],
                                    s(:lvar, :prefix)))),
                              s(:send,
                                s(:lvar, :new_nodeset), :<<,
                                s(:lvar, :node)), nil)), nil)),
                      s(:lvasgn, :nodeset,
                        s(:lvar, :new_nodeset)))),
                  s(:when,
                    s(:sym, :variable),
                    s(:begin,
                      s(:lvasgn, :var_name,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:return,
                        s(:send,
                          s(:ivar, :@variables), :[],
                          s(:lvar, :var_name))))),
                  s(:when,
                    s(:sym, :eq),
                    s(:sym, :neq),
                    s(:sym, :lt),
                    s(:sym, :lteq),
                    s(:sym, :gt),
                    s(:sym, :gteq),
                    s(:sym, :or),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send, nil, :expr,
                          s(:send,
                            s(:lvar, :path_stack), :shift),
                          s(:send,
                            s(:lvar, :nodeset), :dup),
                          s(:lvar, :context))),
                      s(:lvasgn, :right,
                        s(:send, nil, :expr,
                          s(:send,
                            s(:lvar, :path_stack), :shift),
                          s(:send,
                            s(:lvar, :nodeset), :dup),
                          s(:lvar, :context))),
                      s(:lvasgn, :res,
                        s(:send, nil, :equality_relational_compare,
                          s(:lvar, :left),
                          s(:lvar, :op),
                          s(:lvar, :right))),
                      s(:return,
                        s(:lvar, :res)))),
                  s(:when,
                    s(:sym, :and),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send, nil, :expr,
                          s(:send,
                            s(:lvar, :path_stack), :shift),
                          s(:send,
                            s(:lvar, :nodeset), :dup),
                          s(:lvar, :context))),
                      s(:if,
                        s(:lvar, :left), nil,
                        s(:return,
                          s(:array))),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :left), :respond_to?,
                            s(:sym, :inject)),
                          s(:send,
                            s(:block,
                              s(:send,
                                s(:lvar, :left), :inject,
                                s(:false)),
                              s(:args,
                                s(:arg, :a),
                                s(:arg, :b)),
                              s(:send,
                                s(:lvar, :a), :|,
                                s(:lvar, :b))), :!)),
                        s(:return,
                          s(:array)), nil),
                      s(:lvasgn, :right,
                        s(:send, nil, :expr,
                          s(:send,
                            s(:lvar, :path_stack), :shift),
                          s(:send,
                            s(:lvar, :nodeset), :dup),
                          s(:lvar, :context))),
                      s(:lvasgn, :res,
                        s(:send, nil, :equality_relational_compare,
                          s(:lvar, :left),
                          s(:lvar, :op),
                          s(:lvar, :right))),
                      s(:return,
                        s(:lvar, :res)))),
                  s(:when,
                    s(:sym, :div),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:lvasgn, :right,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:return,
                        s(:begin,
                          s(:send,
                            s(:lvar, :left), :/,
                            s(:lvar, :right)))))),
                  s(:when,
                    s(:sym, :mod),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:lvasgn, :right,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:return,
                        s(:begin,
                          s(:send,
                            s(:lvar, :left), :%,
                            s(:lvar, :right)))))),
                  s(:when,
                    s(:sym, :mult),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:lvasgn, :right,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:return,
                        s(:begin,
                          s(:send,
                            s(:lvar, :left), :*,
                            s(:lvar, :right)))))),
                  s(:when,
                    s(:sym, :plus),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:lvasgn, :right,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:return,
                        s(:begin,
                          s(:send,
                            s(:lvar, :left), :+,
                            s(:lvar, :right)))))),
                  s(:when,
                    s(:sym, :minus),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:lvasgn, :right,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:send, nil, :expr,
                              s(:send,
                                s(:lvar, :path_stack), :shift),
                              s(:lvar, :nodeset),
                              s(:lvar, :context))), :to_f)),
                      s(:return,
                        s(:begin,
                          s(:send,
                            s(:lvar, :left), :-,
                            s(:lvar, :right)))))),
                  s(:when,
                    s(:sym, :union),
                    s(:begin,
                      s(:lvasgn, :left,
                        s(:send, nil, :expr,
                          s(:send,
                            s(:lvar, :path_stack), :shift),
                          s(:lvar, :nodeset),
                          s(:lvar, :context))),
                      s(:lvasgn, :right,
                        s(:send, nil, :expr,
                          s(:send,
                            s(:lvar, :path_stack), :shift),
                          s(:lvar, :nodeset),
                          s(:lvar, :context))),
                      s(:return,
                        s(:begin,
                          s(:send,
                            s(:lvar, :left), :|,
                            s(:lvar, :right)))))),
                  s(:when,
                    s(:sym, :neg),
                    s(:begin,
                      s(:lvasgn, :res,
                        s(:send, nil, :expr,
                          s(:lvar, :path_stack),
                          s(:lvar, :nodeset),
                          s(:lvar, :context))),
                      s(:return,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :res), :to_f)), :-@)))),
                  s(:when,
                    s(:sym, :not), nil),
                  s(:when,
                    s(:sym, :function),
                    s(:begin,
                      s(:lvasgn, :func_name,
                        s(:send,
                          s(:send,
                            s(:lvar, :path_stack), :shift), :tr,
                          s(:str, "-"),
                          s(:str, "_"))),
                      s(:lvasgn, :arguments,
                        s(:send,
                          s(:lvar, :path_stack), :shift)),
                      s(:lvasgn, :subcontext,
                        s(:if,
                          s(:lvar, :context),
                          s(:nil),
                          s(:hash,
                            s(:pair,
                              s(:sym, :size),
                              s(:send,
                                s(:lvar, :nodeset), :size))))),
                      s(:lvasgn, :res,
                        s(:array)),
                      s(:lvasgn, :cont,
                        s(:lvar, :context)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nodeset), :each_with_index),
                        s(:args,
                          s(:arg, :n),
                          s(:arg, :i)),
                        s(:begin,
                          s(:if,
                            s(:lvar, :subcontext),
                            s(:begin,
                              s(:send,
                                s(:lvar, :subcontext), :[]=,
                                s(:sym, :node),
                                s(:lvar, :n)),
                              s(:send,
                                s(:lvar, :subcontext), :[]=,
                                s(:sym, :index),
                                s(:lvar, :i)),
                              s(:lvasgn, :cont,
                                s(:lvar, :subcontext))), nil),
                          s(:lvasgn, :arg_clone,
                            s(:send,
                              s(:lvar, :arguments), :dclone)),
                          s(:lvasgn, :args,
                            s(:block,
                              s(:send,
                                s(:lvar, :arg_clone), :collect),
                              s(:args,
                                s(:arg, :arg)),
                              s(:send, nil, :expr,
                                s(:lvar, :arg),
                                s(:array,
                                  s(:lvar, :n)),
                                s(:lvar, :cont)))),
                          s(:send,
                            s(:const, nil, :Functions), :context=,
                            s(:lvar, :cont)),
                          s(:send,
                            s(:lvar, :res), :<<,
                            s(:send,
                              s(:const, nil, :Functions), :send,
                              s(:lvar, :func_name),
                              s(:splat,
                                s(:lvar, :args)))))),
                      s(:return,
                        s(:lvar, :res)))), nil))),
            s(:return,
              s(:lvar, :nodeset)))),
        s(:def, :descendant_or_self,
          s(:args,
            s(:arg, :path_stack),
            s(:arg, :nodeset)),
          s(:begin,
            s(:lvasgn, :rs,
              s(:array)),
            s(:send, nil, :d_o_s,
              s(:lvar, :path_stack),
              s(:lvar, :nodeset),
              s(:lvar, :rs)),
            s(:send, nil, :document_order,
              s(:send,
                s(:send,
                  s(:lvar, :rs), :flatten), :compact)))),
        s(:def, :d_o_s,
          s(:args,
            s(:arg, :p),
            s(:arg, :ns),
            s(:arg, :r)),
          s(:begin,
            s(:lvasgn, :nt,
              s(:nil)),
            s(:block,
              s(:send,
                s(:lvar, :ns), :each_index),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:lvasgn, :n,
                  s(:send,
                    s(:lvar, :ns), :[],
                    s(:lvar, :i))),
                s(:lvasgn, :x,
                  s(:send, nil, :expr,
                    s(:send,
                      s(:lvar, :p), :dclone),
                    s(:array,
                      s(:lvar, :n)))),
                s(:lvasgn, :nt,
                  s(:send,
                    s(:lvar, :n), :node_type)),
                s(:if,
                  s(:and,
                    s(:or,
                      s(:send,
                        s(:lvar, :nt), :==,
                        s(:sym, :element)),
                      s(:send,
                        s(:lvar, :nt), :==,
                        s(:sym, :document))),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :n), :children), :size), :>,
                      s(:int, 0))),
                  s(:send, nil, :d_o_s,
                    s(:lvar, :p),
                    s(:send,
                      s(:lvar, :n), :children),
                    s(:lvar, :x)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :x), :size), :>,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :r), :concat,
                    s(:lvar, :x)), nil))))),
        s(:def, :document_order,
          s(:args,
            s(:arg, :array_of_nodes)),
          s(:begin,
            s(:lvasgn, :new_arry,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :array_of_nodes), :each),
              s(:args,
                s(:arg, :node)),
              s(:begin,
                s(:lvasgn, :node_idx,
                  s(:array)),
                s(:lvasgn, :np,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :node_type), :==,
                      s(:sym, :attribute)),
                    s(:send,
                      s(:lvar, :node), :element),
                    s(:lvar, :node))),
                s(:while,
                  s(:and,
                    s(:send,
                      s(:lvar, :np), :parent),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :np), :parent), :node_type), :==,
                      s(:sym, :element))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :node_idx), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :np), :parent), :index,
                        s(:lvar, :np))),
                    s(:lvasgn, :np,
                      s(:send,
                        s(:lvar, :np), :parent)))),
                s(:send,
                  s(:lvar, :new_arry), :<<,
                  s(:array,
                    s(:send,
                      s(:lvar, :node_idx), :reverse),
                    s(:lvar, :node))))),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :new_arry), :sort),
                  s(:args,
                    s(:arg, :s1),
                    s(:arg, :s2)),
                  s(:send,
                    s(:send,
                      s(:lvar, :s1), :[],
                      s(:int, 0)), :<=>,
                    s(:send,
                      s(:lvar, :s2), :[],
                      s(:int, 0)))), :collect),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :[],
                s(:int, 1))))),
        s(:def, :recurse,
          s(:args,
            s(:arg, :nodeset),
            s(:blockarg, :block)),
          s(:for,
            s(:lvasgn, :node),
            s(:lvar, :nodeset),
            s(:begin,
              s(:yield,
                s(:lvar, :node)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :node_type), :==,
                  s(:sym, :element)),
                s(:send, nil, :recurse,
                  s(:lvar, :node),
                  s(:block_pass,
                    s(:lvar, :block))), nil)))),
        s(:def, :preceding,
          s(:args,
            s(:arg, :node)),
          s(:begin,
            s(:lvasgn, :ancestors,
              s(:array)),
            s(:lvasgn, :p,
              s(:send,
                s(:lvar, :node), :parent)),
            s(:while,
              s(:lvar, :p),
              s(:begin,
                s(:send,
                  s(:lvar, :ancestors), :<<,
                  s(:lvar, :p)),
                s(:lvasgn, :p,
                  s(:send,
                    s(:lvar, :p), :parent)))),
            s(:lvasgn, :acc,
              s(:array)),
            s(:lvasgn, :p,
              s(:send, nil, :preceding_node_of,
                s(:lvar, :node))),
            s(:while,
              s(:lvar, :p),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :ancestors), :include?,
                    s(:lvar, :p)),
                  s(:send,
                    s(:lvar, :ancestors), :delete,
                    s(:lvar, :p)),
                  s(:send,
                    s(:lvar, :acc), :<<,
                    s(:lvar, :p))),
                s(:lvasgn, :p,
                  s(:send, nil, :preceding_node_of,
                    s(:lvar, :p))))),
            s(:lvar, :acc))),
        s(:def, :preceding_node_of,
          s(:args,
            s(:arg, :node)),
          s(:begin,
            s(:lvasgn, :psn,
              s(:send,
                s(:lvar, :node), :previous_sibling_node)),
            s(:if,
              s(:send,
                s(:lvar, :psn), :nil?),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :parent), :nil?),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :parent), :class), :==,
                      s(:const, nil, :Document))),
                  s(:return,
                    s(:nil)), nil),
                s(:return,
                  s(:send,
                    s(:lvar, :node), :parent))), nil),
            s(:while,
              s(:and,
                s(:and,
                  s(:lvar, :psn),
                  s(:send,
                    s(:lvar, :psn), :kind_of?,
                    s(:const, nil, :Element))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :psn), :children), :size), :>,
                  s(:int, 0))),
              s(:lvasgn, :psn,
                s(:send,
                  s(:send,
                    s(:lvar, :psn), :children), :[],
                  s(:int, -1)))),
            s(:lvar, :psn))),
        s(:def, :following,
          s(:args,
            s(:arg, :node)),
          s(:begin,
            s(:lvasgn, :acc,
              s(:array)),
            s(:lvasgn, :p,
              s(:send, nil, :next_sibling_node,
                s(:lvar, :node))),
            s(:while,
              s(:lvar, :p),
              s(:begin,
                s(:send,
                  s(:lvar, :acc), :<<,
                  s(:lvar, :p)),
                s(:lvasgn, :p,
                  s(:send, nil, :following_node_of,
                    s(:lvar, :p))))),
            s(:lvar, :acc))),
        s(:def, :following_node_of,
          s(:args,
            s(:arg, :node)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :node), :kind_of?,
                  s(:const, nil, :Element)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :node), :children), :size), :>,
                  s(:int, 0))),
              s(:return,
                s(:send,
                  s(:send,
                    s(:lvar, :node), :children), :[],
                  s(:int, 0))), nil),
            s(:return,
              s(:send, nil, :next_sibling_node,
                s(:lvar, :node))))),
        s(:def, :next_sibling_node,
          s(:args,
            s(:arg, :node)),
          s(:begin,
            s(:lvasgn, :psn,
              s(:send,
                s(:lvar, :node), :next_sibling_node)),
            s(:while,
              s(:send,
                s(:lvar, :psn), :nil?),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :parent), :nil?),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :parent), :class), :==,
                      s(:const, nil, :Document))),
                  s(:return,
                    s(:nil)), nil),
                s(:lvasgn, :node,
                  s(:send,
                    s(:lvar, :node), :parent)),
                s(:lvasgn, :psn,
                  s(:send,
                    s(:lvar, :node), :next_sibling_node)))),
            s(:return,
              s(:lvar, :psn)))),
        s(:def, :norm,
          s(:args,
            s(:arg, :b)),
          s(:case,
            s(:lvar, :b),
            s(:when,
              s(:true),
              s(:false),
              s(:return,
                s(:lvar, :b))),
            s(:when,
              s(:str, "true"),
              s(:str, "false"),
              s(:return,
                s(:send,
                  s(:const, nil, :Functions), :boolean,
                  s(:lvar, :b)))),
            s(:when,
              s(:regexp,
                s(:str, "^\\d+(\\.\\d+)?$"),
                s(:regopt)),
              s(:return,
                s(:send,
                  s(:const, nil, :Functions), :number,
                  s(:lvar, :b)))),
            s(:return,
              s(:send,
                s(:const, nil, :Functions), :string,
                s(:lvar, :b))))),
        s(:def, :equality_relational_compare,
          s(:args,
            s(:arg, :set1),
            s(:arg, :op),
            s(:arg, :set2)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :set1), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:lvar, :set2), :kind_of?,
                  s(:const, nil, :Array))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :set1), :size), :==,
                    s(:int, 1)),
                  s(:send,
                    s(:send,
                      s(:lvar, :set2), :size), :==,
                    s(:int, 1))),
                s(:begin,
                  s(:lvasgn, :set1,
                    s(:send,
                      s(:lvar, :set1), :[],
                      s(:int, 0))),
                  s(:lvasgn, :set2,
                    s(:send,
                      s(:lvar, :set2), :[],
                      s(:int, 0)))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :set1), :size), :==,
                      s(:int, 0)),
                    s(:send,
                      s(:send,
                        s(:lvar, :set2), :size), :==,
                      s(:int, 0))),
                  s(:begin,
                    s(:lvasgn, :nd,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :set1), :size), :==,
                          s(:int, 0)),
                        s(:lvar, :set2),
                        s(:lvar, :set1))),
                    s(:lvasgn, :rv,
                      s(:block,
                        s(:send,
                          s(:lvar, :nd), :collect),
                        s(:args,
                          s(:arg, :il)),
                        s(:send, nil, :compare,
                          s(:lvar, :il),
                          s(:lvar, :op),
                          s(:nil)))),
                    s(:return,
                      s(:lvar, :rv))),
                  s(:begin,
                    s(:lvasgn, :res,
                      s(:array)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :SyncEnumerator), :new,
                          s(:lvar, :set1),
                          s(:lvar, :set2)), :each),
                      s(:args,
                        s(:arg, :i1),
                        s(:arg, :i2)),
                      s(:begin,
                        s(:lvasgn, :i1,
                          s(:send, nil, :norm,
                            s(:lvar, :i1))),
                        s(:lvasgn, :i2,
                          s(:send, nil, :norm,
                            s(:lvar, :i2))),
                        s(:send,
                          s(:lvar, :res), :<<,
                          s(:send, nil, :compare,
                            s(:lvar, :i1),
                            s(:lvar, :op),
                            s(:lvar, :i2))))),
                    s(:return,
                      s(:lvar, :res))))), nil),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :set1), :kind_of?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:lvar, :set2), :kind_of?,
                  s(:const, nil, :Array))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :set1), :kind_of?,
                    s(:const, nil, :Array)),
                  s(:begin,
                    s(:lvasgn, :a,
                      s(:lvar, :set1)),
                    s(:lvasgn, :b,
                      s(:lvar, :set2))),
                  s(:begin,
                    s(:lvasgn, :a,
                      s(:lvar, :set2)),
                    s(:lvasgn, :b,
                      s(:lvar, :set1)))),
                s(:case,
                  s(:lvar, :b),
                  s(:when,
                    s(:true),
                    s(:false),
                    s(:return,
                      s(:block,
                        s(:send,
                          s(:lvar, :a), :collect),
                        s(:args,
                          s(:arg, :v)),
                        s(:send, nil, :compare,
                          s(:send,
                            s(:const, nil, :Functions), :boolean,
                            s(:lvar, :v)),
                          s(:lvar, :op),
                          s(:lvar, :b))))),
                  s(:when,
                    s(:const, nil, :Numeric),
                    s(:return,
                      s(:block,
                        s(:send,
                          s(:lvar, :a), :collect),
                        s(:args,
                          s(:arg, :v)),
                        s(:send, nil, :compare,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:lvar, :v)),
                          s(:lvar, :op),
                          s(:lvar, :b))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^\\d+(\\.\\d+)?$"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :b,
                        s(:send,
                          s(:const, nil, :Functions), :number,
                          s(:lvar, :b))),
                      s(:return,
                        s(:block,
                          s(:send,
                            s(:lvar, :a), :collect),
                          s(:args,
                            s(:arg, :v)),
                          s(:send, nil, :compare,
                            s(:send,
                              s(:const, nil, :Functions), :number,
                              s(:lvar, :v)),
                            s(:lvar, :op),
                            s(:lvar, :b)))))),
                  s(:begin,
                    s(:lvasgn, :b,
                      s(:send,
                        s(:const, nil, :Functions), :string,
                        s(:lvar, :b))),
                    s(:return,
                      s(:block,
                        s(:send,
                          s(:lvar, :a), :collect),
                        s(:args,
                          s(:arg, :v)),
                        s(:send, nil, :compare,
                          s(:send,
                            s(:const, nil, :Functions), :string,
                            s(:lvar, :v)),
                          s(:lvar, :op),
                          s(:lvar, :b))))))),
              s(:begin,
                s(:lvasgn, :s1,
                  s(:send,
                    s(:lvar, :set1), :to_s)),
                s(:lvasgn, :s2,
                  s(:send,
                    s(:lvar, :set2), :to_s)),
                s(:if,
                  s(:or,
                    s(:or,
                      s(:or,
                        s(:send,
                          s(:lvar, :s1), :==,
                          s(:str, "true")),
                        s(:send,
                          s(:lvar, :s1), :==,
                          s(:str, "false"))),
                      s(:send,
                        s(:lvar, :s2), :==,
                        s(:str, "true"))),
                    s(:send,
                      s(:lvar, :s2), :==,
                      s(:str, "false"))),
                  s(:begin,
                    s(:lvasgn, :set1,
                      s(:send,
                        s(:const, nil, :Functions), :boolean,
                        s(:lvar, :set1))),
                    s(:lvasgn, :set2,
                      s(:send,
                        s(:const, nil, :Functions), :boolean,
                        s(:lvar, :set2)))),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :op), :==,
                        s(:sym, :eq)),
                      s(:send,
                        s(:lvar, :op), :==,
                        s(:sym, :neq))),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:lvar, :s1), :=~,
                          s(:regexp,
                            s(:str, "^\\d+(\\.\\d+)?$"),
                            s(:regopt))),
                        s(:send,
                          s(:lvar, :s2), :=~,
                          s(:regexp,
                            s(:str, "^\\d+(\\.\\d+)?$"),
                            s(:regopt)))),
                      s(:begin,
                        s(:lvasgn, :set1,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:lvar, :s1))),
                        s(:lvasgn, :set2,
                          s(:send,
                            s(:const, nil, :Functions), :number,
                            s(:lvar, :s2)))),
                      s(:begin,
                        s(:lvasgn, :set1,
                          s(:send,
                            s(:const, nil, :Functions), :string,
                            s(:lvar, :set1))),
                        s(:lvasgn, :set2,
                          s(:send,
                            s(:const, nil, :Functions), :string,
                            s(:lvar, :set2))))),
                    s(:begin,
                      s(:lvasgn, :set1,
                        s(:send,
                          s(:const, nil, :Functions), :number,
                          s(:lvar, :set1))),
                      s(:lvasgn, :set2,
                        s(:send,
                          s(:const, nil, :Functions), :number,
                          s(:lvar, :set2)))))),
                s(:return,
                  s(:send, nil, :compare,
                    s(:lvar, :set1),
                    s(:lvar, :op),
                    s(:lvar, :set2))))),
            s(:return,
              s(:false)))),
        s(:def, :compare,
          s(:args,
            s(:arg, :a),
            s(:arg, :op),
            s(:arg, :b)),
          s(:case,
            s(:lvar, :op),
            s(:when,
              s(:sym, :eq),
              s(:send,
                s(:lvar, :a), :==,
                s(:lvar, :b))),
            s(:when,
              s(:sym, :neq),
              s(:send,
                s(:lvar, :a), :!=,
                s(:lvar, :b))),
            s(:when,
              s(:sym, :lt),
              s(:send,
                s(:lvar, :a), :<,
                s(:lvar, :b))),
            s(:when,
              s(:sym, :lteq),
              s(:send,
                s(:lvar, :a), :<=,
                s(:lvar, :b))),
            s(:when,
              s(:sym, :gt),
              s(:send,
                s(:lvar, :a), :>,
                s(:lvar, :b))),
            s(:when,
              s(:sym, :gteq),
              s(:send,
                s(:lvar, :a), :>=,
                s(:lvar, :b))),
            s(:when,
              s(:sym, :and),
              s(:and,
                s(:lvar, :a),
                s(:lvar, :b))),
            s(:when,
              s(:sym, :or),
              s(:or,
                s(:lvar, :a),
                s(:lvar, :b))),
            s(:false)))))))
