s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/child")),
  s(:send, nil, :require,
    s(:str, "rexml/source")),
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:module,
    s(:const, nil, :REXML),
    s(:begin,
      s(:class,
        s(:const, nil, :Entity),
        s(:const, nil, :Child),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :XMLTokens)),
          s(:casgn, nil, :PUBIDCHAR,
            s(:str, " \r\na-zA-Z0-9\\-()+,./:=?;!*@$_%#")),
          s(:casgn, nil, :SYSTEMLITERAL,
            s(:str, "((?:\"[^\"]*\")|(?:'[^']*'))")),
          s(:casgn, nil, :PUBIDLITERAL,
            s(:dstr,
              s(:str, "(\"["),
              s(:begin,
                s(:const, nil, :PUBIDCHAR)),
              s(:str, "']*\"|'["),
              s(:begin,
                s(:const, nil, :PUBIDCHAR)),
              s(:str, "]*')"))),
          s(:casgn, nil, :EXTERNALID,
            s(:dstr,
              s(:str, "(?:(?:(SYSTEM)\\s+"),
              s(:begin,
                s(:const, nil, :SYSTEMLITERAL)),
              s(:str, ")|(?:(PUBLIC)\\s+"),
              s(:begin,
                s(:const, nil, :PUBIDLITERAL)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :SYSTEMLITERAL)),
              s(:str, "))"))),
          s(:casgn, nil, :NDATADECL,
            s(:dstr,
              s(:str, "\\s+NDATA\\s+"),
              s(:begin,
                s(:const, nil, :NAME)))),
          s(:casgn, nil, :PEREFERENCE,
            s(:dstr,
              s(:str, "%"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, ";"))),
          s(:casgn, nil, :ENTITYVALUE,
            s(:dstr,
              s(:str, "((?:\"(?:[^%&\"]|"),
              s(:begin,
                s(:const, nil, :PEREFERENCE)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:str, ")*\")|(?:'([^%&']|"),
              s(:begin,
                s(:const, nil, :PEREFERENCE)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :REFERENCE)),
              s(:str, ")*'))"))),
          s(:casgn, nil, :PEDEF,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :ENTITYVALUE)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :EXTERNALID)),
              s(:str, ")"))),
          s(:casgn, nil, :ENTITYDEF,
            s(:dstr,
              s(:str, "(?:"),
              s(:begin,
                s(:const, nil, :ENTITYVALUE)),
              s(:str, "|(?:"),
              s(:begin,
                s(:const, nil, :EXTERNALID)),
              s(:str, "("),
              s(:begin,
                s(:const, nil, :NDATADECL)),
              s(:str, ")?))"))),
          s(:casgn, nil, :PEDECL,
            s(:dstr,
              s(:str, "<!ENTITY\\s+(%)\\s+"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :PEDEF)),
              s(:str, "\\s*>"))),
          s(:casgn, nil, :GEDECL,
            s(:dstr,
              s(:str, "<!ENTITY\\s+"),
              s(:begin,
                s(:const, nil, :NAME)),
              s(:str, "\\s+"),
              s(:begin,
                s(:const, nil, :ENTITYDEF)),
              s(:str, "\\s*>"))),
          s(:casgn, nil, :ENTITYDECL,
            s(:regexp,
              s(:str, "\\s*(?:"),
              s(:begin,
                s(:const, nil, :GEDECL)),
              s(:str, ")|(?:"),
              s(:begin,
                s(:const, nil, :PEDECL)),
              s(:str, ")"),
              s(:regopt, :m, :u))),
          s(:send, nil, :attr_reader,
            s(:sym, :name),
            s(:sym, :external),
            s(:sym, :ref),
            s(:sym, :ndata),
            s(:sym, :pubid)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :stream),
              s(:optarg, :value,
                s(:nil)),
              s(:optarg, :parent,
                s(:nil)),
              s(:optarg, :reference,
                s(:false))),
            s(:begin,
              s(:super,
                s(:lvar, :parent)),
              s(:ivasgn, :@ndata,
                s(:ivasgn, :@pubid,
                  s(:ivasgn, :@value,
                    s(:ivasgn, :@external,
                      s(:nil))))),
              s(:if,
                s(:send,
                  s(:lvar, :stream), :kind_of?,
                  s(:const, nil, :Array)),
                s(:begin,
                  s(:ivasgn, :@name,
                    s(:send,
                      s(:lvar, :stream), :[],
                      s(:int, 1))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :stream), :[],
                        s(:int, -1)), :==,
                      s(:str, "%")),
                    s(:begin,
                      s(:ivasgn, :@reference,
                        s(:true)),
                      s(:send,
                        s(:lvar, :stream), :pop)),
                    s(:ivasgn, :@reference,
                      s(:false))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :stream), :[],
                        s(:int, 2)), :=~,
                      s(:regexp,
                        s(:str, "SYSTEM|PUBLIC"),
                        s(:regopt))),
                    s(:begin,
                      s(:ivasgn, :@external,
                        s(:send,
                          s(:lvar, :stream), :[],
                          s(:int, 2))),
                      s(:if,
                        s(:send,
                          s(:ivar, :@external), :==,
                          s(:str, "SYSTEM")),
                        s(:begin,
                          s(:ivasgn, :@ref,
                            s(:send,
                              s(:lvar, :stream), :[],
                              s(:int, 3))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :stream), :size), :==,
                              s(:int, 5)),
                            s(:ivasgn, :@ndata,
                              s(:send,
                                s(:lvar, :stream), :[],
                                s(:int, 4))), nil)),
                        s(:begin,
                          s(:ivasgn, :@pubid,
                            s(:send,
                              s(:lvar, :stream), :[],
                              s(:int, 3))),
                          s(:ivasgn, :@ref,
                            s(:send,
                              s(:lvar, :stream), :[],
                              s(:int, 4)))))),
                    s(:ivasgn, :@value,
                      s(:send,
                        s(:lvar, :stream), :[],
                        s(:int, 2))))),
                s(:begin,
                  s(:ivasgn, :@reference,
                    s(:lvar, :reference)),
                  s(:ivasgn, :@external,
                    s(:nil)),
                  s(:ivasgn, :@name,
                    s(:lvar, :stream)),
                  s(:ivasgn, :@value,
                    s(:lvar, :value)))))),
          s(:defs,
            s(:const, nil, :Entity), :matches?,
            s(:args,
              s(:arg, :string)),
            s(:send,
              s(:begin,
                s(:send,
                  s(:const, nil, :ENTITYDECL), :=~,
                  s(:lvar, :string))), :==,
              s(:int, 0))),
          s(:def, :unnormalized,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :document), :nil?), nil,
                s(:send,
                  s(:send, nil, :document), :record_entity_expansion)),
              s(:lvasgn, :v,
                s(:send, nil, :value)),
              s(:if,
                s(:send,
                  s(:lvar, :v), :nil?),
                s(:return,
                  s(:nil)), nil),
              s(:ivasgn, :@unnormalized,
                s(:send,
                  s(:const, nil, :Text), :unnormalize,
                  s(:lvar, :v),
                  s(:send, nil, :parent))),
              s(:ivar, :@unnormalized))),
          s(:def, :normalized,
            s(:args),
            s(:ivar, :@value)),
          s(:def, :write,
            s(:args,
              s(:arg, :out),
              s(:optarg, :indent,
                s(:int, -1))),
            s(:begin,
              s(:send,
                s(:lvar, :out), :<<,
                s(:str, "<!ENTITY ")),
              s(:if,
                s(:ivar, :@reference),
                s(:send,
                  s(:lvar, :out), :<<,
                  s(:str, "% ")), nil),
              s(:send,
                s(:lvar, :out), :<<,
                s(:ivar, :@name)),
              s(:send,
                s(:lvar, :out), :<<,
                s(:str, " ")),
              s(:if,
                s(:ivar, :@external),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :out), :<<,
                      s(:ivar, :@external)), :<<,
                    s(:str, " ")),
                  s(:if,
                    s(:ivar, :@pubid),
                    s(:begin,
                      s(:lvasgn, :q,
                        s(:if,
                          s(:send,
                            s(:ivar, :@pubid), :include?,
                            s(:str, "\"")),
                          s(:str, "'"),
                          s(:str, "\""))),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :out), :<<,
                              s(:lvar, :q)), :<<,
                            s(:ivar, :@pubid)), :<<,
                          s(:lvar, :q)), :<<,
                        s(:str, " "))), nil),
                  s(:lvasgn, :q,
                    s(:if,
                      s(:send,
                        s(:ivar, :@ref), :include?,
                        s(:str, "\"")),
                      s(:str, "'"),
                      s(:str, "\""))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :out), :<<,
                        s(:lvar, :q)), :<<,
                      s(:ivar, :@ref)), :<<,
                    s(:lvar, :q)),
                  s(:if,
                    s(:ivar, :@ndata),
                    s(:send,
                      s(:send,
                        s(:lvar, :out), :<<,
                        s(:str, " NDATA ")), :<<,
                      s(:ivar, :@ndata)), nil)),
                s(:begin,
                  s(:lvasgn, :q,
                    s(:if,
                      s(:send,
                        s(:ivar, :@value), :include?,
                        s(:str, "\"")),
                      s(:str, "'"),
                      s(:str, "\""))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :out), :<<,
                        s(:lvar, :q)), :<<,
                      s(:ivar, :@value)), :<<,
                    s(:lvar, :q)))),
              s(:send,
                s(:lvar, :out), :<<,
                s(:str, ">")))),
          s(:def, :to_s,
            s(:args),
            s(:begin,
              s(:lvasgn, :rv,
                s(:str, "")),
              s(:send, nil, :write,
                s(:lvar, :rv)),
              s(:lvar, :rv))),
          s(:casgn, nil, :PEREFERENCE_RE,
            s(:regexp,
              s(:begin,
                s(:const, nil, :PEREFERENCE)),
              s(:regopt, :m, :u))),
          s(:def, :value,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@value),
                s(:begin,
                  s(:lvasgn, :matches,
                    s(:send,
                      s(:ivar, :@value), :scan,
                      s(:const, nil, :PEREFERENCE_RE))),
                  s(:lvasgn, :rv,
                    s(:send,
                      s(:ivar, :@value), :clone)),
                  s(:if,
                    s(:ivar, :@parent),
                    s(:begin,
                      s(:lvasgn, :sum,
                        s(:int, 0)),
                      s(:block,
                        s(:send,
                          s(:lvar, :matches), :each),
                        s(:args,
                          s(:arg, :entity_reference)),
                        s(:begin,
                          s(:lvasgn, :entity_value,
                            s(:send,
                              s(:ivar, :@parent), :entity,
                              s(:send,
                                s(:lvar, :entity_reference), :[],
                                s(:int, 0)))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :sum), :+,
                                s(:send,
                                  s(:lvar, :entity_value), :bytesize)), :>,
                              s(:send,
                                s(:const, nil, :Security), :entity_expansion_text_limit)),
                            s(:send, nil, :raise,
                              s(:str, "entity expansion has grown too large")),
                            s(:op_asgn,
                              s(:lvasgn, :sum), :+,
                              s(:send,
                                s(:lvar, :entity_value), :bytesize))),
                          s(:send,
                            s(:lvar, :rv), :gsub!,
                            s(:regexp,
                              s(:str, "%"),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :entity_reference), :join)),
                              s(:str, ";"),
                              s(:regopt, :m, :u)),
                            s(:lvar, :entity_value))))), nil),
                  s(:return,
                    s(:lvar, :rv))), nil),
              s(:nil))))),
      s(:module,
        s(:const, nil, :EntityConst),
        s(:begin,
          s(:casgn, nil, :GT,
            s(:send,
              s(:const, nil, :Entity), :new,
              s(:str, "gt"),
              s(:str, ">"))),
          s(:casgn, nil, :LT,
            s(:send,
              s(:const, nil, :Entity), :new,
              s(:str, "lt"),
              s(:str, "<"))),
          s(:casgn, nil, :AMP,
            s(:send,
              s(:const, nil, :Entity), :new,
              s(:str, "amp"),
              s(:str, "&"))),
          s(:casgn, nil, :QUOT,
            s(:send,
              s(:const, nil, :Entity), :new,
              s(:str, "quot"),
              s(:str, "\""))),
          s(:casgn, nil, :APOS,
            s(:send,
              s(:const, nil, :Entity), :new,
              s(:str, "apos"),
              s(:str, "'"))))))))
