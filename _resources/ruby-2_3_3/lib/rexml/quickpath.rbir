s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/functions")),
  s(:send, nil, :require,
    s(:str, "rexml/xmltokens")),
  s(:module,
    s(:const, nil, :REXML),
    s(:class,
      s(:const, nil, :QuickPath), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :Functions)),
        s(:send, nil, :include,
          s(:const, nil, :XMLTokens)),
        s(:casgn, nil, :EMPTY_HASH,
          s(:hash)),
        s(:defs,
          s(:const, nil, :QuickPath), :first,
          s(:args,
            s(:arg, :element),
            s(:arg, :path),
            s(:optarg, :namespaces,
              s(:const, nil, :EMPTY_HASH))),
          s(:send,
            s(:send, nil, :match,
              s(:lvar, :element),
              s(:lvar, :path),
              s(:lvar, :namespaces)), :[],
            s(:int, 0))),
        s(:defs,
          s(:const, nil, :QuickPath), :each,
          s(:args,
            s(:arg, :element),
            s(:arg, :path),
            s(:optarg, :namespaces,
              s(:const, nil, :EMPTY_HASH)),
            s(:blockarg, :block)),
          s(:begin,
            s(:if,
              s(:lvar, :path), nil,
              s(:lvasgn, :path,
                s(:str, "*"))),
            s(:send,
              s(:send, nil, :match,
                s(:lvar, :element),
                s(:lvar, :path),
                s(:lvar, :namespaces)), :each,
              s(:block_pass,
                s(:lvar, :block))))),
        s(:defs,
          s(:const, nil, :QuickPath), :match,
          s(:args,
            s(:arg, :element),
            s(:arg, :path),
            s(:optarg, :namespaces,
              s(:const, nil, :EMPTY_HASH))),
          s(:begin,
            s(:if,
              s(:lvar, :path), nil,
              s(:send, nil, :raise,
                s(:str, "nil is not a valid xpath"))),
            s(:lvasgn, :results,
              s(:nil)),
            s(:send,
              s(:const, nil, :Functions), :namespace_context=,
              s(:lvar, :namespaces)),
            s(:case,
              s(:lvar, :path),
              s(:when,
                s(:regexp,
                  s(:str, "^/([^/]|$)"),
                  s(:regopt, :u)),
                s(:begin,
                  s(:lvasgn, :path,
                    s(:send,
                      s(:lvar, :path), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :path), :==,
                      s(:str, "")),
                    s(:return,
                      s(:array,
                        s(:send,
                          s(:send,
                            s(:lvar, :element), :root), :parent))), nil),
                  s(:lvasgn, :results,
                    s(:send, nil, :filter,
                      s(:array,
                        s(:send,
                          s(:lvar, :element), :root)),
                      s(:lvar, :path))))),
              s(:when,
                s(:regexp,
                  s(:str, "^[-\\w]*::"),
                  s(:regopt, :u)),
                s(:lvasgn, :results,
                  s(:send, nil, :filter,
                    s(:array,
                      s(:lvar, :element)),
                    s(:lvar, :path)))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\*"),
                  s(:regopt, :u)),
                s(:lvasgn, :results,
                  s(:send, nil, :filter,
                    s(:send,
                      s(:lvar, :element), :to_a),
                    s(:lvar, :path)))),
              s(:when,
                s(:regexp,
                  s(:str, "^[\\[!\\w:]"),
                  s(:regopt, :u)),
                s(:begin,
                  s(:lvasgn, :children,
                    s(:send,
                      s(:lvar, :element), :to_a)),
                  s(:lvasgn, :results,
                    s(:send, nil, :filter,
                      s(:lvar, :children),
                      s(:lvar, :path))))),
              s(:lvasgn, :results,
                s(:send, nil, :filter,
                  s(:array,
                    s(:lvar, :element)),
                  s(:lvar, :path)))),
            s(:return,
              s(:lvar, :results)))),
        s(:defs,
          s(:const, nil, :QuickPath), :filter,
          s(:args,
            s(:arg, :elements),
            s(:arg, :path)),
          s(:begin,
            s(:if,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :path), :nil?),
                  s(:send,
                    s(:lvar, :path), :==,
                    s(:str, ""))),
                s(:send,
                  s(:send,
                    s(:lvar, :elements), :size), :==,
                  s(:int, 0))),
              s(:return,
                s(:lvar, :elements)), nil),
            s(:case,
              s(:lvar, :path),
              s(:when,
                s(:regexp,
                  s(:str, "^//"),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :axe,
                    s(:lvar, :elements),
                    s(:str, "descendant-or-self"),
                    s(:back_ref, :$')))),
              s(:when,
                s(:regexp,
                  s(:str, "^/?\\b(\\w[-\\w]*)\\b::"),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :axe,
                    s(:lvar, :elements),
                    s(:nth_ref, 1),
                    s(:back_ref, :$')))),
              s(:when,
                s(:regexp,
                  s(:str, "^/(?=\\b([:!\\w][-\\.\\w]*:)?[-!\\*\\.\\w]*\\b([^:(]|$)|\\*)"),
                  s(:regopt, :u)),
                s(:begin,
                  s(:lvasgn, :rest,
                    s(:back_ref, :$')),
                  s(:lvasgn, :results,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :elements), :each),
                    s(:args,
                      s(:arg, :element)),
                    s(:op_asgn,
                      s(:lvasgn, :results), :|,
                      s(:send, nil, :filter,
                        s(:send,
                          s(:lvar, :element), :to_a),
                        s(:lvar, :rest)))),
                  s(:return,
                    s(:lvar, :results)))),
              s(:when,
                s(:regexp,
                  s(:str, "^/?(\\w[-\\w]*)\\("),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :function,
                    s(:lvar, :elements),
                    s(:nth_ref, 1),
                    s(:back_ref, :$')))),
              s(:when,
                s(:const,
                  s(:const, nil, :Namespace), :NAMESPLIT),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:nth_ref, 2)),
                  s(:lvasgn, :ns,
                    s(:nth_ref, 1)),
                  s(:lvasgn, :rest,
                    s(:back_ref, :$')),
                  s(:block,
                    s(:send,
                      s(:lvar, :elements), :delete_if),
                    s(:args,
                      s(:arg, :element)),
                    s(:send,
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :element), :kind_of?,
                            s(:const, nil, :Element)),
                          s(:begin,
                            s(:or,
                              s(:send,
                                s(:send,
                                  s(:lvar, :element), :expanded_name), :==,
                                s(:lvar, :name)),
                              s(:begin,
                                s(:and,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :element), :name), :==,
                                    s(:lvar, :name)),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :element), :namespace), :==,
                                    s(:send,
                                      s(:send,
                                        s(:const, nil, :Functions), :namespace_context), :[],
                                      s(:lvar, :ns))))))))), :!)),
                  s(:return,
                    s(:send, nil, :filter,
                      s(:lvar, :elements),
                      s(:lvar, :rest))))),
              s(:when,
                s(:regexp,
                  s(:str, "^/\\["),
                  s(:regopt, :u)),
                s(:begin,
                  s(:lvasgn, :matches,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :elements), :each),
                    s(:args,
                      s(:arg, :element)),
                    s(:if,
                      s(:send,
                        s(:lvar, :element), :kind_of?,
                        s(:const, nil, :Element)),
                      s(:op_asgn,
                        s(:lvasgn, :matches), :|,
                        s(:send, nil, :predicate,
                          s(:send,
                            s(:lvar, :element), :to_a),
                          s(:send,
                            s(:lvar, :path), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1))))), nil)),
                  s(:return,
                    s(:lvar, :matches)))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\["),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :predicate,
                    s(:lvar, :elements),
                    s(:lvar, :path)))),
              s(:when,
                s(:regexp,
                  s(:str, "^/?\\.\\.\\."),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :axe,
                    s(:lvar, :elements),
                    s(:str, "ancestor"),
                    s(:back_ref, :$')))),
              s(:when,
                s(:regexp,
                  s(:str, "^/?\\.\\."),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :filter,
                    s(:block,
                      s(:send,
                        s(:lvar, :elements), :collect),
                      s(:args,
                        s(:arg, :e)),
                      s(:send,
                        s(:lvar, :e), :parent)),
                    s(:back_ref, :$')))),
              s(:when,
                s(:regexp,
                  s(:str, "^/?\\."),
                  s(:regopt, :u)),
                s(:return,
                  s(:send, nil, :filter,
                    s(:lvar, :elements),
                    s(:back_ref, :$')))),
              s(:when,
                s(:regexp,
                  s(:str, "^\\*"),
                  s(:regopt, :u)),
                s(:begin,
                  s(:lvasgn, :results,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :elements), :each),
                    s(:args,
                      s(:arg, :element)),
                    s(:if,
                      s(:send,
                        s(:lvar, :element), :kind_of?,
                        s(:const, nil, :Element)),
                      s(:op_asgn,
                        s(:lvasgn, :results), :|,
                        s(:send, nil, :filter,
                          s(:array,
                            s(:lvar, :element)),
                          s(:back_ref, :$'))), nil)),
                  s(:return,
                    s(:lvar, :results)))), nil),
            s(:return,
              s(:array)))),
        s(:defs,
          s(:const, nil, :QuickPath), :axe,
          s(:args,
            s(:arg, :elements),
            s(:arg, :axe_name),
            s(:arg, :rest)),
          s(:begin,
            s(:lvasgn, :matches,
              s(:array)),
            s(:if,
              s(:send,
                s(:lvar, :axe_name), :=~,
                s(:regexp,
                  s(:str, "-or-self$"),
                  s(:regopt, :u))),
              s(:lvasgn, :matches,
                s(:send, nil, :filter,
                  s(:send,
                    s(:lvar, :elements), :dup),
                  s(:lvar, :rest))), nil),
            s(:case,
              s(:lvar, :axe_name),
              s(:when,
                s(:regexp,
                  s(:str, "^descendant"),
                  s(:regopt, :u)),
                s(:block,
                  s(:send,
                    s(:lvar, :elements), :each),
                  s(:args,
                    s(:arg, :element)),
                  s(:if,
                    s(:send,
                      s(:lvar, :element), :kind_of?,
                      s(:const, nil, :Element)),
                    s(:op_asgn,
                      s(:lvasgn, :matches), :|,
                      s(:send, nil, :filter,
                        s(:send,
                          s(:lvar, :element), :to_a),
                        s(:dstr,
                          s(:str, "descendant-or-self::"),
                          s(:begin,
                            s(:lvar, :rest))))), nil))),
              s(:when,
                s(:regexp,
                  s(:str, "^ancestor"),
                  s(:regopt, :u)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :elements), :each),
                    s(:args,
                      s(:arg, :element)),
                    s(:while,
                      s(:send,
                        s(:lvar, :element), :parent),
                      s(:begin,
                        s(:send,
                          s(:lvar, :matches), :<<,
                          s(:send,
                            s(:lvar, :element), :parent)),
                        s(:lvasgn, :element,
                          s(:send,
                            s(:lvar, :element), :parent))))),
                  s(:lvasgn, :matches,
                    s(:send, nil, :filter,
                      s(:lvar, :matches),
                      s(:lvar, :rest))))),
              s(:when,
                s(:str, "self"),
                s(:lvasgn, :matches,
                  s(:send, nil, :filter,
                    s(:lvar, :elements),
                    s(:lvar, :rest)))),
              s(:when,
                s(:str, "child"),
                s(:block,
                  s(:send,
                    s(:lvar, :elements), :each),
                  s(:args,
                    s(:arg, :element)),
                  s(:if,
                    s(:send,
                      s(:lvar, :element), :kind_of?,
                      s(:const, nil, :Element)),
                    s(:op_asgn,
                      s(:lvasgn, :matches), :|,
                      s(:send, nil, :filter,
                        s(:send,
                          s(:lvar, :element), :to_a),
                        s(:lvar, :rest))), nil))),
              s(:when,
                s(:str, "attribute"),
                s(:block,
                  s(:send,
                    s(:lvar, :elements), :each),
                  s(:args,
                    s(:arg, :element)),
                  s(:if,
                    s(:send,
                      s(:lvar, :element), :kind_of?,
                      s(:const, nil, :Element)),
                    s(:send,
                      s(:lvar, :matches), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :element), :attributes), :[],
                        s(:lvar, :rest))), nil))),
              s(:when,
                s(:str, "parent"),
                s(:lvasgn, :matches,
                  s(:send, nil, :filter,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :elements), :collect),
                        s(:args,
                          s(:arg, :element)),
                        s(:send,
                          s(:lvar, :element), :parent)), :uniq),
                    s(:lvar, :rest)))),
              s(:when,
                s(:str, "following-sibling"),
                s(:lvasgn, :matches,
                  s(:send, nil, :filter,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :elements), :collect),
                        s(:args,
                          s(:arg, :element)),
                        s(:send,
                          s(:lvar, :element), :next_sibling)), :uniq),
                    s(:lvar, :rest)))),
              s(:when,
                s(:str, "previous-sibling"),
                s(:lvasgn, :matches,
                  s(:send, nil, :filter,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :elements), :collect),
                        s(:args,
                          s(:arg, :element)),
                        s(:send,
                          s(:lvar, :element), :previous_sibling)), :uniq),
                    s(:lvar, :rest)))), nil),
            s(:return,
              s(:send,
                s(:lvar, :matches), :uniq)))),
        s(:casgn, nil, :OPERAND_,
          s(:str, "((?=(?:(?!and|or).)*[^\\s<>=])[^\\s<>=]+)")),
        s(:defs,
          s(:const, nil, :QuickPath), :predicate,
          s(:args,
            s(:arg, :elements),
            s(:arg, :path)),
          s(:begin,
            s(:lvasgn, :ind,
              s(:int, 1)),
            s(:lvasgn, :bcount,
              s(:int, 1)),
            s(:while,
              s(:send,
                s(:lvar, :bcount), :>,
                s(:int, 0)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :path), :[],
                      s(:lvar, :ind)), :==,
                    s(:str, "[")),
                  s(:op_asgn,
                    s(:lvasgn, :bcount), :+,
                    s(:int, 1)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :path), :[],
                      s(:lvar, :ind)), :==,
                    s(:str, "]")),
                  s(:op_asgn,
                    s(:lvasgn, :bcount), :-,
                    s(:int, 1)), nil),
                s(:op_asgn,
                  s(:lvasgn, :ind), :+,
                  s(:int, 1)))),
            s(:op_asgn,
              s(:lvasgn, :ind), :-,
              s(:int, 1)),
            s(:lvasgn, :predicate,
              s(:send,
                s(:lvar, :path), :[],
                s(:irange,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :ind), :-,
                    s(:int, 1))))),
            s(:lvasgn, :rest,
              s(:send,
                s(:lvar, :path), :[],
                s(:irange,
                  s(:send,
                    s(:lvar, :ind), :+,
                    s(:int, 1)),
                  s(:int, -1)))),
            s(:send,
              s(:lvar, :predicate), :gsub!,
              s(:regexp,
                s(:begin,
                  s(:const, nil, :OPERAND_)),
                s(:str, "\\s*([<>=])\\s*"),
                s(:begin,
                  s(:const, nil, :OPERAND_)),
                s(:str, "\\s*([<>=])\\s*"),
                s(:begin,
                  s(:const, nil, :OPERAND_)),
                s(:regopt, :u)),
              s(:str, "\\1 \\2 \\3 and \\3 \\4 \\5")),
            s(:send,
              s(:lvar, :predicate), :gsub!,
              s(:regexp,
                s(:str, "&"),
                s(:regopt, :u)),
              s(:str, "&&")),
            s(:send,
              s(:lvar, :predicate), :gsub!,
              s(:regexp,
                s(:str, "="),
                s(:regopt, :u)),
              s(:str, "==")),
            s(:send,
              s(:lvar, :predicate), :gsub!,
              s(:regexp,
                s(:str, "@(\\w[-\\w.]*)"),
                s(:regopt, :u)),
              s(:str, "attribute(\"\\1\")")),
            s(:send,
              s(:lvar, :predicate), :gsub!,
              s(:regexp,
                s(:str, "\\bmod\\b"),
                s(:regopt, :u)),
              s(:str, "%")),
            s(:block,
              s(:send,
                s(:lvar, :predicate), :gsub!,
                s(:regexp,
                  s(:str, "\\b(\\w[-\\w.]*\\()"),
                  s(:regopt, :u))),
              s(:args),
              s(:begin,
                s(:lvasgn, :fname,
                  s(:nth_ref, 1)),
                s(:send,
                  s(:lvar, :fname), :gsub,
                  s(:regexp,
                    s(:str, "-"),
                    s(:regopt, :u)),
                  s(:str, "_")))),
            s(:send,
              s(:const, nil, :Functions), :pair=,
              s(:array,
                s(:int, 0),
                s(:send,
                  s(:lvar, :elements), :size))),
            s(:lvasgn, :results,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :elements), :each),
              s(:args,
                s(:arg, :element)),
              s(:begin,
                s(:op_asgn,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Functions), :pair), :[],
                    s(:int, 0)), :+,
                  s(:int, 1)),
                s(:send,
                  s(:const, nil, :Functions), :node=,
                  s(:lvar, :element)),
                s(:lvasgn, :res,
                  s(:send, nil, :eval,
                    s(:lvar, :predicate))),
                s(:case,
                  s(:lvar, :res),
                  s(:when,
                    s(:true),
                    s(:send,
                      s(:lvar, :results), :<<,
                      s(:lvar, :element))),
                  s(:when,
                    s(:const, nil, :Fixnum),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :pair), :[],
                          s(:int, 0)), :==,
                        s(:lvar, :res)),
                      s(:send,
                        s(:lvar, :results), :<<,
                        s(:lvar, :element)), nil)),
                  s(:when,
                    s(:const, nil, :String),
                    s(:send,
                      s(:lvar, :results), :<<,
                      s(:lvar, :element))), nil))),
            s(:return,
              s(:send, nil, :filter,
                s(:lvar, :results),
                s(:lvar, :rest))))),
        s(:defs,
          s(:const, nil, :QuickPath), :attribute,
          s(:args,
            s(:arg, :name)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Functions), :node), :kind_of?,
              s(:const, nil, :Element)),
            s(:return,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Functions), :node), :attributes), :[],
                s(:lvar, :name))), nil)),
        s(:defs,
          s(:const, nil, :QuickPath), :name,
          s(:args),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Functions), :node), :kind_of?,
              s(:const, nil, :Element)),
            s(:return,
              s(:send,
                s(:send,
                  s(:const, nil, :Functions), :node), :name)), nil)),
        s(:defs,
          s(:const, nil, :QuickPath), :method_missing,
          s(:args,
            s(:arg, :id),
            s(:restarg, :args)),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :Functions), :send,
                s(:send,
                  s(:lvar, :id), :id2name),
                s(:splat,
                  s(:lvar, :args))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "METHOD: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :id), :id2name)),
                    s(:str, "("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :args), :join,
                        s(:str, ", "))),
                    s(:str, ")\n"),
                    s(:begin,
                      s(:send,
                        s(:gvar, :$!), :message))))), nil))),
        s(:defs,
          s(:const, nil, :QuickPath), :function,
          s(:args,
            s(:arg, :elements),
            s(:arg, :fname),
            s(:arg, :rest)),
          s(:begin,
            s(:lvasgn, :args,
              s(:send, nil, :parse_args,
                s(:lvar, :elements),
                s(:lvar, :rest))),
            s(:send,
              s(:const, nil, :Functions), :pair=,
              s(:array,
                s(:int, 0),
                s(:send,
                  s(:lvar, :elements), :size))),
            s(:lvasgn, :results,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :elements), :each),
              s(:args,
                s(:arg, :element)),
              s(:begin,
                s(:op_asgn,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Functions), :pair), :[],
                    s(:int, 0)), :+,
                  s(:int, 1)),
                s(:send,
                  s(:const, nil, :Functions), :node=,
                  s(:lvar, :element)),
                s(:lvasgn, :res,
                  s(:send,
                    s(:const, nil, :Functions), :send,
                    s(:lvar, :fname),
                    s(:splat,
                      s(:lvar, :args)))),
                s(:case,
                  s(:lvar, :res),
                  s(:when,
                    s(:true),
                    s(:send,
                      s(:lvar, :results), :<<,
                      s(:lvar, :element))),
                  s(:when,
                    s(:const, nil, :Fixnum),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Functions), :pair), :[],
                          s(:int, 0)), :==,
                        s(:lvar, :res)),
                      s(:send,
                        s(:lvar, :results), :<<,
                        s(:lvar, :element)), nil)), nil))),
            s(:return,
              s(:lvar, :results)))),
        s(:defs,
          s(:const, nil, :QuickPath), :parse_args,
          s(:args,
            s(:arg, :element),
            s(:arg, :string)),
          s(:begin,
            s(:lvasgn, :arguments,
              s(:array)),
            s(:lvasgn, :buffer,
              s(:str, "")),
            s(:while,
              s(:and,
                s(:lvar, :string),
                s(:send,
                  s(:lvar, :string), :!=,
                  s(:str, ""))),
              s(:begin,
                s(:lvasgn, :c,
                  s(:send,
                    s(:lvar, :string), :[],
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :string), :sub!,
                  s(:regexp,
                    s(:str, "^."),
                    s(:regopt, :u)),
                  s(:str, "")),
                s(:case,
                  s(:lvar, :c),
                  s(:when,
                    s(:str, ","),
                    s(:send,
                      s(:lvar, :arguments), :<<,
                      s(:send, nil, :evaluate,
                        s(:lvar, :buffer)))),
                  s(:when,
                    s(:str, "("),
                    s(:begin,
                      s(:send, nil, :function,
                        s(:lvar, :element),
                        s(:lvar, :buffer),
                        s(:lvar, :string)),
                      s(:lvasgn, :buffer,
                        s(:str, "")))),
                  s(:when,
                    s(:str, ")"),
                    s(:return,
                      s(:lvar, :arguments))),
                  s(:send,
                    s(:lvar, :buffer), :<<,
                    s(:lvar, :c))))),
            s(:str, "")))))))
