s(:begin,
  s(:send, nil, :require,
    s(:str, "rexml/parseexception")),
  s(:send, nil, :require,
    s(:str, "rexml/formatters/pretty")),
  s(:send, nil, :require,
    s(:str, "rexml/formatters/default")),
  s(:module,
    s(:const, nil, :REXML),
    s(:module,
      s(:const, nil, :Node),
      s(:begin,
        s(:def, :next_sibling_node,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@parent), :nil?),
              s(:return,
                s(:nil)), nil),
            s(:send,
              s(:ivar, :@parent), :[],
              s(:send,
                s(:send,
                  s(:ivar, :@parent), :index,
                  s(:self)), :+,
                s(:int, 1))))),
        s(:def, :previous_sibling_node,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@parent), :nil?),
              s(:return,
                s(:nil)), nil),
            s(:lvasgn, :ind,
              s(:send,
                s(:ivar, :@parent), :index,
                s(:self))),
            s(:if,
              s(:send,
                s(:lvar, :ind), :==,
                s(:int, 0)),
              s(:return,
                s(:nil)), nil),
            s(:send,
              s(:ivar, :@parent), :[],
              s(:send,
                s(:lvar, :ind), :-,
                s(:int, 1))))),
        s(:def, :to_s,
          s(:args,
            s(:optarg, :indent,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :indent), :nil?),
              s(:begin,
                s(:lvasgn, :f,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :REXML), :Formatters), :Default), :new)),
                s(:send,
                  s(:lvar, :f), :write,
                  s(:self),
                  s(:lvasgn, :rv,
                    s(:str, "")))),
              s(:begin,
                s(:send,
                  s(:const, nil, :Kernel), :warn,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:self), :class), :name)),
                    s(:str, ".to_s(indent) parameter is deprecated"))),
                s(:lvasgn, :f,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :REXML), :Formatters), :Pretty), :new,
                    s(:lvar, :indent))),
                s(:send,
                  s(:lvar, :f), :write,
                  s(:self),
                  s(:lvasgn, :rv,
                    s(:str, ""))))),
            s(:return,
              s(:lvar, :rv)))),
        s(:def, :indent,
          s(:args,
            s(:arg, :to),
            s(:arg, :ind)),
          s(:begin,
            s(:if,
              s(:and,
                s(:and,
                  s(:ivar, :@parent),
                  s(:send,
                    s(:ivar, :@parent), :context)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@parent), :context), :[],
                      s(:sym, :indentstyle)), :nil?), :!)),
              s(:lvasgn, :indentstyle,
                s(:send,
                  s(:send,
                    s(:ivar, :@parent), :context), :[],
                  s(:sym, :indentstyle))),
              s(:lvasgn, :indentstyle,
                s(:str, "  "))),
            s(:if,
              s(:send,
                s(:lvar, :ind), :<,
                s(:int, 1)), nil,
              s(:send,
                s(:lvar, :to), :<<,
                s(:send,
                  s(:lvar, :indentstyle), :*,
                  s(:lvar, :ind)))))),
        s(:def, :parent?,
          s(:args),
          s(:false)),
        s(:def, :each_recursive,
          s(:args,
            s(:blockarg, :block)),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :elements), :each),
            s(:args,
              s(:arg, :node)),
            s(:begin,
              s(:send,
                s(:lvar, :block), :call,
                s(:lvar, :node)),
              s(:send,
                s(:lvar, :node), :each_recursive,
                s(:block_pass,
                  s(:lvar, :block)))))),
        s(:def, :find_first_recursive,
          s(:args,
            s(:blockarg, :block)),
          s(:begin,
            s(:block,
              s(:send, nil, :each_recursive),
              s(:args,
                s(:arg, :node)),
              s(:if,
                s(:send,
                  s(:lvar, :block), :call,
                  s(:lvar, :node)),
                s(:return,
                  s(:lvar, :node)), nil)),
            s(:return,
              s(:nil)))),
        s(:def, :index_in_parent,
          s(:args),
          s(:send,
            s(:send,
              s(:send, nil, :parent), :index,
              s(:self)), :+,
            s(:int, 1)))))))
