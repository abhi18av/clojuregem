s(:begin,
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:send, nil, :require,
    s(:str, "English")),
  s(:send, nil, :require,
    s(:str, "date")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:class,
    s(:const, nil, :CSV), nil,
    s(:begin,
      s(:casgn, nil, :VERSION,
        s(:str, "2.4.8")),
      s(:class,
        s(:const, nil, :Row), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :headers),
              s(:arg, :fields),
              s(:optarg, :header_row,
                s(:false))),
            s(:begin,
              s(:ivasgn, :@header_row,
                s(:lvar, :header_row)),
              s(:block,
                s(:send,
                  s(:lvar, :headers), :each),
                s(:args,
                  s(:arg, :h)),
                s(:if,
                  s(:send,
                    s(:lvar, :h), :is_a?,
                    s(:const, nil, :String)),
                  s(:send,
                    s(:lvar, :h), :freeze), nil)),
              s(:ivasgn, :@row,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :headers), :size), :>=,
                    s(:send,
                      s(:lvar, :fields), :size)),
                  s(:send,
                    s(:lvar, :headers), :zip,
                    s(:lvar, :fields)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :fields), :zip,
                        s(:lvar, :headers)), :map),
                    s(:args,
                      s(:arg, :pair)),
                    s(:send,
                      s(:lvar, :pair), :reverse!)))))),
          s(:send, nil, :attr_reader,
            s(:sym, :row)),
          s(:send, nil, :protected,
            s(:sym, :row)),
          s(:send, nil, :extend,
            s(:const, nil, :Forwardable)),
          s(:send, nil, :def_delegators,
            s(:sym, :@row),
            s(:sym, :empty?),
            s(:sym, :length),
            s(:sym, :size)),
          s(:def, :header_row?,
            s(:args),
            s(:ivar, :@header_row)),
          s(:def, :field_row?,
            s(:args),
            s(:send,
              s(:send, nil, :header_row?), :!)),
          s(:def, :headers,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@row), :map),
              s(:args,
                s(:arg, :pair)),
              s(:send,
                s(:lvar, :pair), :first))),
          s(:def, :field,
            s(:args,
              s(:arg, :header_or_index),
              s(:optarg, :minimum_index,
                s(:int, 0))),
            s(:begin,
              s(:lvasgn, :finder,
                s(:if,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:lvar, :header_or_index), :is_a?,
                        s(:const, nil, :Integer)),
                      s(:send,
                        s(:lvar, :header_or_index), :is_a?,
                        s(:const, nil, :Range)))),
                  s(:sym, :[]),
                  s(:sym, :assoc))),
              s(:lvasgn, :pair,
                s(:send,
                  s(:send,
                    s(:ivar, :@row), :[],
                    s(:irange,
                      s(:lvar, :minimum_index),
                      s(:int, -1))), :send,
                  s(:lvar, :finder),
                  s(:lvar, :header_or_index))),
              s(:if,
                s(:send,
                  s(:lvar, :pair), :nil?),
                s(:nil),
                s(:if,
                  s(:send,
                    s(:lvar, :header_or_index), :is_a?,
                    s(:const, nil, :Range)),
                  s(:send,
                    s(:lvar, :pair), :map,
                    s(:block_pass,
                      s(:sym, :last))),
                  s(:send,
                    s(:lvar, :pair), :last))))),
          s(:send, nil, :alias_method,
            s(:sym, :[]),
            s(:sym, :field)),
          s(:def, :fetch,
            s(:args,
              s(:arg, :header),
              s(:restarg, :varargs)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :varargs), :length), :>,
                  s(:int, 1)),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "Too many arguments")), nil),
              s(:lvasgn, :pair,
                s(:send,
                  s(:ivar, :@row), :assoc,
                  s(:lvar, :header))),
              s(:if,
                s(:lvar, :pair),
                s(:send,
                  s(:lvar, :pair), :last),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :header)),
                  s(:if,
                    s(:send,
                      s(:lvar, :varargs), :empty?),
                    s(:send, nil, :raise,
                      s(:const, nil, :KeyError),
                      s(:dstr,
                        s(:str, "key not found: "),
                        s(:begin,
                          s(:lvar, :header)))),
                    s(:send,
                      s(:lvar, :varargs), :first)))))),
          s(:def, :has_key?,
            s(:args,
              s(:arg, :header)),
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@row), :assoc,
                  s(:lvar, :header)), :!), :!)),
          s(:send, nil, :alias_method,
            s(:sym, :include?),
            s(:sym, :has_key?)),
          s(:send, nil, :alias_method,
            s(:sym, :key?),
            s(:sym, :has_key?)),
          s(:send, nil, :alias_method,
            s(:sym, :member?),
            s(:sym, :has_key?)),
          s(:def, :[]=,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :value,
                s(:send,
                  s(:lvar, :args), :pop)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :first), :is_a?,
                  s(:const, nil, :Integer)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@row), :[],
                      s(:send,
                        s(:lvar, :args), :first)), :nil?),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@row), :[]=,
                      s(:send,
                        s(:lvar, :args), :first),
                      s(:array,
                        s(:nil),
                        s(:lvar, :value))),
                    s(:block,
                      s(:send,
                        s(:ivar, :@row), :map!),
                      s(:args,
                        s(:arg, :pair)),
                      s(:if,
                        s(:send,
                          s(:lvar, :pair), :nil?),
                        s(:array,
                          s(:nil),
                          s(:nil)),
                        s(:lvar, :pair)))),
                  s(:send,
                    s(:send,
                      s(:ivar, :@row), :[],
                      s(:send,
                        s(:lvar, :args), :first)), :[]=,
                    s(:int, 1),
                    s(:lvar, :value))),
                s(:begin,
                  s(:lvasgn, :index,
                    s(:send, nil, :index,
                      s(:splat,
                        s(:lvar, :args)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :index), :nil?),
                    s(:send,
                      s(:self), :<<,
                      s(:array,
                        s(:send,
                          s(:lvar, :args), :first),
                        s(:lvar, :value))),
                    s(:send,
                      s(:send,
                        s(:ivar, :@row), :[],
                        s(:lvar, :index)), :[]=,
                      s(:int, 1),
                      s(:lvar, :value))))))),
          s(:def, :<<,
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :arg), :is_a?,
                    s(:const, nil, :Array)),
                  s(:send,
                    s(:send,
                      s(:lvar, :arg), :size), :==,
                    s(:int, 2))),
                s(:send,
                  s(:ivar, :@row), :<<,
                  s(:lvar, :arg)),
                s(:if,
                  s(:send,
                    s(:lvar, :arg), :is_a?,
                    s(:const, nil, :Hash)),
                  s(:block,
                    s(:send,
                      s(:lvar, :arg), :each),
                    s(:args,
                      s(:arg, :pair)),
                    s(:send,
                      s(:ivar, :@row), :<<,
                      s(:lvar, :pair))),
                  s(:send,
                    s(:ivar, :@row), :<<,
                    s(:array,
                      s(:nil),
                      s(:lvar, :arg))))),
              s(:self))),
          s(:def, :push,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :arg)),
                s(:send,
                  s(:self), :<<,
                  s(:lvar, :arg))),
              s(:self))),
          s(:def, :delete,
            s(:args,
              s(:arg, :header_or_index),
              s(:optarg, :minimum_index,
                s(:int, 0))),
            s(:if,
              s(:send,
                s(:lvar, :header_or_index), :is_a?,
                s(:const, nil, :Integer)),
              s(:send,
                s(:ivar, :@row), :delete_at,
                s(:lvar, :header_or_index)),
              s(:if,
                s(:lvasgn, :i,
                  s(:send, nil, :index,
                    s(:lvar, :header_or_index),
                    s(:lvar, :minimum_index))),
                s(:send,
                  s(:ivar, :@row), :delete_at,
                  s(:lvar, :i)),
                s(:array)))),
          s(:def, :delete_if,
            s(:args,
              s(:blockarg, :block)),
            s(:begin,
              s(:send,
                s(:ivar, :@row), :delete_if,
                s(:block_pass,
                  s(:lvar, :block))),
              s(:self))),
          s(:def, :fields,
            s(:args,
              s(:restarg, :headers_and_or_indices)),
            s(:if,
              s(:send,
                s(:lvar, :headers_and_or_indices), :empty?),
              s(:block,
                s(:send,
                  s(:ivar, :@row), :map),
                s(:args,
                  s(:arg, :pair)),
                s(:send,
                  s(:lvar, :pair), :last)),
              s(:block,
                s(:send,
                  s(:lvar, :headers_and_or_indices), :inject,
                  s(:send,
                    s(:const, nil, :Array), :new)),
                s(:args,
                  s(:arg, :all),
                  s(:arg, :h_or_i)),
                s(:send,
                  s(:lvar, :all), :+,
                  s(:if,
                    s(:send,
                      s(:lvar, :h_or_i), :is_a?,
                      s(:const, nil, :Range)),
                    s(:begin,
                      s(:lvasgn, :index_begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :h_or_i), :begin), :is_a?,
                            s(:const, nil, :Integer)),
                          s(:send,
                            s(:lvar, :h_or_i), :begin),
                          s(:send, nil, :index,
                            s(:send,
                              s(:lvar, :h_or_i), :begin)))),
                      s(:lvasgn, :index_end,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :h_or_i), :end), :is_a?,
                            s(:const, nil, :Integer)),
                          s(:send,
                            s(:lvar, :h_or_i), :end),
                          s(:send, nil, :index,
                            s(:send,
                              s(:lvar, :h_or_i), :end)))),
                      s(:lvasgn, :new_range,
                        s(:if,
                          s(:send,
                            s(:lvar, :h_or_i), :exclude_end?),
                          s(:begin,
                            s(:erange,
                              s(:lvar, :index_begin),
                              s(:lvar, :index_end))),
                          s(:begin,
                            s(:irange,
                              s(:lvar, :index_begin),
                              s(:lvar, :index_end))))),
                      s(:send,
                        s(:send, nil, :fields), :values_at,
                        s(:lvar, :new_range))),
                    s(:array,
                      s(:send, nil, :field,
                        s(:splat,
                          s(:send, nil, :Array,
                            s(:lvar, :h_or_i)))))))))),
          s(:send, nil, :alias_method,
            s(:sym, :values_at),
            s(:sym, :fields)),
          s(:def, :index,
            s(:args,
              s(:arg, :header),
              s(:optarg, :minimum_index,
                s(:int, 0))),
            s(:begin,
              s(:lvasgn, :index,
                s(:send,
                  s(:send,
                    s(:send, nil, :headers), :[],
                    s(:irange,
                      s(:lvar, :minimum_index),
                      s(:int, -1))), :index,
                  s(:lvar, :header))),
              s(:if,
                s(:send,
                  s(:lvar, :index), :nil?),
                s(:nil),
                s(:send,
                  s(:lvar, :index), :+,
                  s(:lvar, :minimum_index))))),
          s(:def, :header?,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:send, nil, :headers), :include?,
              s(:lvar, :name))),
          s(:send, nil, :alias_method,
            s(:sym, :include?),
            s(:sym, :header?)),
          s(:def, :field?,
            s(:args,
              s(:arg, :data)),
            s(:send,
              s(:send, nil, :fields), :include?,
              s(:lvar, :data))),
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :each,
            s(:args,
              s(:blockarg, :block)),
            s(:begin,
              s(:send,
                s(:ivar, :@row), :each,
                s(:block_pass,
                  s(:lvar, :block))),
              s(:self))),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :other), :is_a?,
                  s(:const,
                    s(:const, nil, :CSV), :Row)),
                s(:return,
                  s(:send,
                    s(:ivar, :@row), :==,
                    s(:send,
                      s(:lvar, :other), :row))), nil),
              s(:send,
                s(:ivar, :@row), :==,
                s(:lvar, :other)))),
          s(:def, :to_hash,
            s(:args),
            s(:send,
              s(:const, nil, :Hash), :[],
              s(:splat,
                s(:block,
                  s(:send,
                    s(:ivar, :@row), :inject,
                    s(:send,
                      s(:const, nil, :Array), :new)),
                  s(:args,
                    s(:arg, :ary),
                    s(:arg, :pair)),
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:splat,
                      s(:lvar, :pair))))))),
          s(:def, :to_csv,
            s(:args,
              s(:optarg, :options,
                s(:send,
                  s(:const, nil, :Hash), :new))),
            s(:send,
              s(:send, nil, :fields), :to_csv,
              s(:lvar, :options))),
          s(:send, nil, :alias_method,
            s(:sym, :to_s),
            s(:sym, :to_csv)),
          s(:def, :inspect,
            s(:args),
            s(:begin,
              s(:lvasgn, :str,
                s(:array,
                  s(:str, "#<"),
                  s(:send,
                    s(:send,
                      s(:self), :class), :to_s))),
              s(:block,
                s(:send, nil, :each),
                s(:args,
                  s(:arg, :header),
                  s(:arg, :field)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :str), :<<,
                        s(:str, " ")), :<<,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :header), :is_a?,
                            s(:const, nil, :Symbol)),
                          s(:send,
                            s(:lvar, :header), :to_s),
                          s(:send,
                            s(:lvar, :header), :inspect)))), :<<,
                    s(:str, ":")), :<<,
                  s(:send,
                    s(:lvar, :field), :inspect))),
              s(:send,
                s(:lvar, :str), :<<,
                s(:str, ">")),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:lvar, :str), :join,
                    s(:str, "")),
                  s(:resbody, nil, nil,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :str), :map),
                        s(:args,
                          s(:arg, :s)),
                        s(:begin,
                          s(:lvasgn, :e,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Encoding), :Converter), :asciicompat_encoding,
                              s(:send,
                                s(:lvar, :s), :encoding))),
                          s(:if,
                            s(:lvar, :e),
                            s(:send,
                              s(:lvar, :s), :encode,
                              s(:lvar, :e)),
                            s(:send,
                              s(:lvar, :s), :force_encoding,
                              s(:str, "ASCII-8BIT"))))), :join,
                      s(:str, ""))), nil)))))),
      s(:class,
        s(:const, nil, :Table), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :array_of_rows)),
            s(:begin,
              s(:ivasgn, :@table,
                s(:lvar, :array_of_rows)),
              s(:ivasgn, :@mode,
                s(:sym, :col_or_row)))),
          s(:send, nil, :attr_reader,
            s(:sym, :mode)),
          s(:send, nil, :attr_reader,
            s(:sym, :table)),
          s(:send, nil, :protected,
            s(:sym, :table)),
          s(:send, nil, :extend,
            s(:const, nil, :Forwardable)),
          s(:send, nil, :def_delegators,
            s(:sym, :@table),
            s(:sym, :empty?),
            s(:sym, :length),
            s(:sym, :size)),
          s(:def, :by_col,
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:send,
                  s(:ivar, :@table), :dup)), :by_col!)),
          s(:def, :by_col!,
            s(:args),
            s(:begin,
              s(:ivasgn, :@mode,
                s(:sym, :col)),
              s(:self))),
          s(:def, :by_col_or_row,
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:send,
                  s(:ivar, :@table), :dup)), :by_col_or_row!)),
          s(:def, :by_col_or_row!,
            s(:args),
            s(:begin,
              s(:ivasgn, :@mode,
                s(:sym, :col_or_row)),
              s(:self))),
          s(:def, :by_row,
            s(:args),
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:send,
                  s(:ivar, :@table), :dup)), :by_row!)),
          s(:def, :by_row!,
            s(:args),
            s(:begin,
              s(:ivasgn, :@mode,
                s(:sym, :row)),
              s(:self))),
          s(:def, :headers,
            s(:args),
            s(:if,
              s(:send,
                s(:ivar, :@table), :empty?),
              s(:send,
                s(:const, nil, :Array), :new),
              s(:send,
                s(:send,
                  s(:ivar, :@table), :first), :headers))),
          s(:def, :[],
            s(:args,
              s(:arg, :index_or_header)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@mode), :==,
                  s(:sym, :row)),
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:ivar, :@mode), :==,
                      s(:sym, :col_or_row)),
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :index_or_header), :is_a?,
                          s(:const, nil, :Integer)),
                        s(:send,
                          s(:lvar, :index_or_header), :is_a?,
                          s(:const, nil, :Range))))))),
              s(:send,
                s(:ivar, :@table), :[],
                s(:lvar, :index_or_header)),
              s(:block,
                s(:send,
                  s(:ivar, :@table), :map),
                s(:args,
                  s(:arg, :row)),
                s(:send,
                  s(:lvar, :row), :[],
                  s(:lvar, :index_or_header))))),
          s(:def, :[]=,
            s(:args,
              s(:arg, :index_or_header),
              s(:arg, :value)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@mode), :==,
                  s(:sym, :row)),
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:ivar, :@mode), :==,
                      s(:sym, :col_or_row)),
                    s(:send,
                      s(:lvar, :index_or_header), :is_a?,
                      s(:const, nil, :Integer))))),
              s(:if,
                s(:send,
                  s(:lvar, :value), :is_a?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:ivar, :@table), :[]=,
                  s(:lvar, :index_or_header),
                  s(:send,
                    s(:const, nil, :Row), :new,
                    s(:send, nil, :headers),
                    s(:lvar, :value))),
                s(:send,
                  s(:ivar, :@table), :[]=,
                  s(:lvar, :index_or_header),
                  s(:lvar, :value))),
              s(:if,
                s(:send,
                  s(:lvar, :value), :is_a?,
                  s(:const, nil, :Array)),
                s(:block,
                  s(:send,
                    s(:ivar, :@table), :each_with_index),
                  s(:args,
                    s(:arg, :row),
                    s(:arg, :i)),
                  s(:if,
                    s(:send,
                      s(:lvar, :row), :header_row?),
                    s(:send,
                      s(:lvar, :row), :[]=,
                      s(:lvar, :index_or_header),
                      s(:lvar, :index_or_header)),
                    s(:send,
                      s(:lvar, :row), :[]=,
                      s(:lvar, :index_or_header),
                      s(:send,
                        s(:lvar, :value), :[],
                        s(:lvar, :i))))),
                s(:block,
                  s(:send,
                    s(:ivar, :@table), :each),
                  s(:args,
                    s(:arg, :row)),
                  s(:if,
                    s(:send,
                      s(:lvar, :row), :header_row?),
                    s(:send,
                      s(:lvar, :row), :[]=,
                      s(:lvar, :index_or_header),
                      s(:lvar, :index_or_header)),
                    s(:send,
                      s(:lvar, :row), :[]=,
                      s(:lvar, :index_or_header),
                      s(:lvar, :value))))))),
          s(:def, :values_at,
            s(:args,
              s(:restarg, :indices_or_headers)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@mode), :==,
                  s(:sym, :row)),
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:ivar, :@mode), :==,
                      s(:sym, :col_or_row)),
                    s(:block,
                      s(:send,
                        s(:lvar, :indices_or_headers), :all?),
                      s(:args,
                        s(:arg, :index)),
                      s(:or,
                        s(:send,
                          s(:lvar, :index), :is_a?,
                          s(:const, nil, :Integer)),
                        s(:begin,
                          s(:and,
                            s(:and,
                              s(:send,
                                s(:lvar, :index), :is_a?,
                                s(:const, nil, :Range)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :index), :first), :is_a?,
                                s(:const, nil, :Integer))),
                            s(:send,
                              s(:send,
                                s(:lvar, :index), :last), :is_a?,
                              s(:const, nil, :Integer))))))))),
              s(:send,
                s(:ivar, :@table), :values_at,
                s(:splat,
                  s(:lvar, :indices_or_headers))),
              s(:block,
                s(:send,
                  s(:ivar, :@table), :map),
                s(:args,
                  s(:arg, :row)),
                s(:send,
                  s(:lvar, :row), :values_at,
                  s(:splat,
                    s(:lvar, :indices_or_headers)))))),
          s(:def, :<<,
            s(:args,
              s(:arg, :row_or_array)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :row_or_array), :is_a?,
                  s(:const, nil, :Array)),
                s(:send,
                  s(:ivar, :@table), :<<,
                  s(:send,
                    s(:const, nil, :Row), :new,
                    s(:send, nil, :headers),
                    s(:lvar, :row_or_array))),
                s(:send,
                  s(:ivar, :@table), :<<,
                  s(:lvar, :row_or_array))),
              s(:self))),
          s(:def, :push,
            s(:args,
              s(:restarg, :rows)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :rows), :each),
                s(:args,
                  s(:arg, :row)),
                s(:send,
                  s(:self), :<<,
                  s(:lvar, :row))),
              s(:self))),
          s(:def, :delete,
            s(:args,
              s(:arg, :index_or_header)),
            s(:if,
              s(:or,
                s(:send,
                  s(:ivar, :@mode), :==,
                  s(:sym, :row)),
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:ivar, :@mode), :==,
                      s(:sym, :col_or_row)),
                    s(:send,
                      s(:lvar, :index_or_header), :is_a?,
                      s(:const, nil, :Integer))))),
              s(:send,
                s(:ivar, :@table), :delete_at,
                s(:lvar, :index_or_header)),
              s(:block,
                s(:send,
                  s(:ivar, :@table), :map),
                s(:args,
                  s(:arg, :row)),
                s(:send,
                  s(:send,
                    s(:lvar, :row), :delete,
                    s(:lvar, :index_or_header)), :last)))),
          s(:def, :delete_if,
            s(:args,
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send,
                    s(:ivar, :@mode), :==,
                    s(:sym, :row)),
                  s(:send,
                    s(:ivar, :@mode), :==,
                    s(:sym, :col_or_row))),
                s(:send,
                  s(:ivar, :@table), :delete_if,
                  s(:block_pass,
                    s(:lvar, :block))),
                s(:begin,
                  s(:lvasgn, :to_delete,
                    s(:send,
                      s(:const, nil, :Array), :new)),
                  s(:block,
                    s(:send,
                      s(:send, nil, :headers), :each_with_index),
                    s(:args,
                      s(:arg, :header),
                      s(:arg, :i)),
                    s(:if,
                      s(:send,
                        s(:lvar, :block), :[],
                        s(:array,
                          s(:lvar, :header),
                          s(:send,
                            s(:self), :[],
                            s(:lvar, :header)))),
                      s(:send,
                        s(:lvar, :to_delete), :<<,
                        s(:lvar, :header)), nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :to_delete), :map),
                    s(:args,
                      s(:arg, :header)),
                    s(:send, nil, :delete,
                      s(:lvar, :header))))),
              s(:self))),
          s(:send, nil, :include,
            s(:const, nil, :Enumerable)),
          s(:def, :each,
            s(:args,
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@mode), :==,
                  s(:sym, :col)),
                s(:block,
                  s(:send,
                    s(:send, nil, :headers), :each),
                  s(:args,
                    s(:arg, :header)),
                  s(:send,
                    s(:lvar, :block), :[],
                    s(:array,
                      s(:lvar, :header),
                      s(:send,
                        s(:self), :[],
                        s(:lvar, :header))))),
                s(:send,
                  s(:ivar, :@table), :each,
                  s(:block_pass,
                    s(:lvar, :block)))),
              s(:self))),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:send,
              s(:ivar, :@table), :==,
              s(:send,
                s(:lvar, :other), :table))),
          s(:def, :to_a,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@table), :inject,
                s(:array,
                  s(:send, nil, :headers))),
              s(:args,
                s(:arg, :array),
                s(:arg, :row)),
              s(:if,
                s(:send,
                  s(:lvar, :row), :header_row?),
                s(:lvar, :array),
                s(:send,
                  s(:lvar, :array), :+,
                  s(:array,
                    s(:send,
                      s(:lvar, :row), :fields)))))),
          s(:def, :to_csv,
            s(:args,
              s(:optarg, :options,
                s(:send,
                  s(:const, nil, :Hash), :new))),
            s(:begin,
              s(:lvasgn, :wh,
                s(:send,
                  s(:lvar, :options), :fetch,
                  s(:sym, :write_headers),
                  s(:true))),
              s(:send,
                s(:block,
                  s(:send,
                    s(:ivar, :@table), :inject,
                    s(:if,
                      s(:lvar, :wh),
                      s(:array,
                        s(:send,
                          s(:send, nil, :headers), :to_csv,
                          s(:lvar, :options))),
                      s(:array))),
                  s(:args,
                    s(:arg, :rows),
                    s(:arg, :row)),
                  s(:if,
                    s(:send,
                      s(:lvar, :row), :header_row?),
                    s(:lvar, :rows),
                    s(:send,
                      s(:lvar, :rows), :+,
                      s(:array,
                        s(:send,
                          s(:send,
                            s(:lvar, :row), :fields), :to_csv,
                          s(:lvar, :options)))))), :join,
                s(:str, "")))),
          s(:send, nil, :alias_method,
            s(:sym, :to_s),
            s(:sym, :to_csv)),
          s(:def, :inspect,
            s(:args),
            s(:send,
              s(:dstr,
                s(:str, "#<"),
                s(:begin,
                  s(:send,
                    s(:self), :class)),
                s(:str, " mode:"),
                s(:begin,
                  s(:ivar, :@mode)),
                s(:str, " row_count:"),
                s(:begin,
                  s(:send,
                    s(:send, nil, :to_a), :size)),
                s(:str, ">")), :encode,
              s(:str, "US-ASCII"))))),
      s(:class,
        s(:const, nil, :MalformedCSVError),
        s(:const, nil, :RuntimeError), nil),
      s(:casgn, nil, :FieldInfo,
        s(:send,
          s(:const, nil, :Struct), :new,
          s(:sym, :index),
          s(:sym, :line),
          s(:sym, :header))),
      s(:casgn, nil, :DateMatcher,
        s(:regexp,
          s(:str, " \\A(?: (\\w+,?\\s+)?\\w+\\s+\\d{1,2},?\\s+\\d{2,4} |\n"),
          s(:str, "                            \\d{4}-\\d{2}-\\d{2} )\\z "),
          s(:regopt, :x))),
      s(:casgn, nil, :DateTimeMatcher,
        s(:regexp,
          s(:str, " \\A(?: (\\w+,?\\s+)?\\w+\\s+\\d{1,2}\\s+\\d{1,2}:\\d{1,2}:\\d{1,2},?\\s+\\d{2,4} |\n"),
          s(:str, "            \\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2} )\\z "),
          s(:regopt, :x))),
      s(:casgn, nil, :ConverterEncoding,
        s(:send,
          s(:const, nil, :Encoding), :find,
          s(:str, "UTF-8"))),
      s(:casgn, nil, :Converters,
        s(:hash,
          s(:pair,
            s(:sym, :integer),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :f)),
              s(:rescue,
                s(:send, nil, :Integer,
                  s(:send,
                    s(:lvar, :f), :encode,
                    s(:const, nil, :ConverterEncoding))),
                s(:resbody, nil, nil,
                  s(:lvar, :f)), nil))),
          s(:pair,
            s(:sym, :float),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :f)),
              s(:rescue,
                s(:send, nil, :Float,
                  s(:send,
                    s(:lvar, :f), :encode,
                    s(:const, nil, :ConverterEncoding))),
                s(:resbody, nil, nil,
                  s(:lvar, :f)), nil))),
          s(:pair,
            s(:sym, :numeric),
            s(:array,
              s(:sym, :integer),
              s(:sym, :float))),
          s(:pair,
            s(:sym, :date),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :f)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :e,
                      s(:send,
                        s(:lvar, :f), :encode,
                        s(:const, nil, :ConverterEncoding))),
                    s(:if,
                      s(:send,
                        s(:lvar, :e), :=~,
                        s(:const, nil, :DateMatcher)),
                      s(:send,
                        s(:const, nil, :Date), :parse,
                        s(:lvar, :e)),
                      s(:lvar, :f))),
                  s(:resbody, nil, nil,
                    s(:lvar, :f)), nil)))),
          s(:pair,
            s(:sym, :date_time),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :f)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :e,
                      s(:send,
                        s(:lvar, :f), :encode,
                        s(:const, nil, :ConverterEncoding))),
                    s(:if,
                      s(:send,
                        s(:lvar, :e), :=~,
                        s(:const, nil, :DateTimeMatcher)),
                      s(:send,
                        s(:const, nil, :DateTime), :parse,
                        s(:lvar, :e)),
                      s(:lvar, :f))),
                  s(:resbody, nil, nil,
                    s(:lvar, :f)), nil)))),
          s(:pair,
            s(:sym, :all),
            s(:array,
              s(:sym, :date_time),
              s(:sym, :numeric))))),
      s(:casgn, nil, :HeaderConverters,
        s(:hash,
          s(:pair,
            s(:sym, :downcase),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :h)),
              s(:send,
                s(:send,
                  s(:lvar, :h), :encode,
                  s(:const, nil, :ConverterEncoding)), :downcase))),
          s(:pair,
            s(:sym, :symbol),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :h)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :h), :encode,
                          s(:const, nil, :ConverterEncoding)), :downcase), :strip), :gsub,
                    s(:regexp,
                      s(:str, "\\s+"),
                      s(:regopt)),
                    s(:str, "_")), :gsub,
                  s(:regexp,
                    s(:str, "\\W+"),
                    s(:regopt)),
                  s(:str, "")), :to_sym))))),
      s(:casgn, nil, :DEFAULT_OPTIONS,
        s(:send,
          s(:hash,
            s(:pair,
              s(:sym, :col_sep),
              s(:str, ",")),
            s(:pair,
              s(:sym, :row_sep),
              s(:sym, :auto)),
            s(:pair,
              s(:sym, :quote_char),
              s(:str, "\"")),
            s(:pair,
              s(:sym, :field_size_limit),
              s(:nil)),
            s(:pair,
              s(:sym, :converters),
              s(:nil)),
            s(:pair,
              s(:sym, :unconverted_fields),
              s(:nil)),
            s(:pair,
              s(:sym, :headers),
              s(:false)),
            s(:pair,
              s(:sym, :return_headers),
              s(:false)),
            s(:pair,
              s(:sym, :header_converters),
              s(:nil)),
            s(:pair,
              s(:sym, :skip_blanks),
              s(:false)),
            s(:pair,
              s(:sym, :force_quotes),
              s(:false)),
            s(:pair,
              s(:sym, :skip_lines),
              s(:nil))), :freeze)),
      s(:defs,
        s(:self), :instance,
        s(:args,
          s(:optarg, :data,
            s(:gvar, :$stdout)),
          s(:optarg, :options,
            s(:send,
              s(:const, nil, :Hash), :new))),
        s(:begin,
          s(:lvasgn, :sig,
            s(:send,
              s(:array,
                s(:send,
                  s(:lvar, :data), :object_id)), :+,
              s(:send,
                s(:lvar, :options), :values_at,
                s(:splat,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :DEFAULT_OPTIONS), :keys), :sort_by),
                    s(:args,
                      s(:arg, :sym)),
                    s(:send,
                      s(:lvar, :sym), :to_s)))))),
          s(:or_asgn,
            s(:cvasgn, :@@instances),
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:lvasgn, :instance,
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:cvar, :@@instances), :[],
                  s(:lvar, :sig)),
                s(:send, nil, :new,
                  s(:lvar, :data),
                  s(:lvar, :options))))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:lvar, :instance)),
            s(:lvar, :instance)))),
      s(:defs,
        s(:self), :filter,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :in_options),
              s(:lvasgn, :out_options)),
            s(:array,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:hash,
                s(:pair,
                  s(:sym, :row_sep),
                  s(:gvar, :$INPUT_RECORD_SEPARATOR))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :last), :is_a?,
              s(:const, nil, :Hash)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :args), :pop), :each),
              s(:args,
                s(:arg, :key),
                s(:arg, :value)),
              s(:case,
                s(:send,
                  s(:lvar, :key), :to_s),
                s(:when,
                  s(:regexp,
                    s(:str, "\\Ain(?:put)?_(.+)\\Z"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :in_options), :[]=,
                    s(:send,
                      s(:nth_ref, 1), :to_sym),
                    s(:lvar, :value))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\Aout(?:put)?_(.+)\\Z"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :out_options), :[]=,
                    s(:send,
                      s(:nth_ref, 1), :to_sym),
                    s(:lvar, :value))),
                s(:begin,
                  s(:send,
                    s(:lvar, :in_options), :[]=,
                    s(:lvar, :key),
                    s(:lvar, :value)),
                  s(:send,
                    s(:lvar, :out_options), :[]=,
                    s(:lvar, :key),
                    s(:lvar, :value))))), nil),
          s(:lvasgn, :input,
            s(:send, nil, :new,
              s(:or,
                s(:send,
                  s(:lvar, :args), :shift),
                s(:const, nil, :ARGF)),
              s(:lvar, :in_options))),
          s(:lvasgn, :output,
            s(:send, nil, :new,
              s(:or,
                s(:send,
                  s(:lvar, :args), :shift),
                s(:gvar, :$stdout)),
              s(:lvar, :out_options))),
          s(:block,
            s(:send,
              s(:lvar, :input), :each),
            s(:args,
              s(:arg, :row)),
            s(:begin,
              s(:yield,
                s(:lvar, :row)),
              s(:send,
                s(:lvar, :output), :<<,
                s(:lvar, :row)))))),
      s(:defs,
        s(:self), :foreach,
        s(:args,
          s(:arg, :path),
          s(:optarg, :options,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:lvar, :block), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:send, nil, :__method__),
                s(:lvar, :path),
                s(:lvar, :options)))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :path),
              s(:lvar, :options)),
            s(:args,
              s(:arg, :csv)),
            s(:send,
              s(:lvar, :csv), :each,
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:defs,
        s(:self), :generate,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :first), :is_a?,
              s(:const, nil, :String)),
            s(:begin,
              s(:lvasgn, :io,
                s(:send,
                  s(:const, nil, :StringIO), :new,
                  s(:send,
                    s(:lvar, :args), :shift))),
              s(:send,
                s(:lvar, :io), :seek,
                s(:int, 0),
                s(:const,
                  s(:const, nil, :IO), :SEEK_END)),
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :io))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :args), :last), :is_a?,
                  s(:const, nil, :Hash)),
                s(:lvasgn, :encoding,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :[],
                      s(:int, -1)), :[],
                    s(:sym, :encoding))), nil),
              s(:lvasgn, :str,
                s(:send,
                  s(:const, nil, :String), :new)),
              s(:if,
                s(:lvar, :encoding),
                s(:send,
                  s(:lvar, :str), :force_encoding,
                  s(:lvar, :encoding)), nil),
              s(:send,
                s(:lvar, :args), :unshift,
                s(:lvar, :str)))),
          s(:lvasgn, :csv,
            s(:send, nil, :new,
              s(:splat,
                s(:lvar, :args)))),
          s(:yield,
            s(:lvar, :csv)),
          s(:send,
            s(:lvar, :csv), :string))),
      s(:defs,
        s(:self), :generate_line,
        s(:args,
          s(:arg, :row),
          s(:optarg, :options,
            s(:send,
              s(:const, nil, :Hash), :new))),
        s(:begin,
          s(:lvasgn, :options,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:sym, :row_sep),
                  s(:gvar, :$INPUT_RECORD_SEPARATOR))), :merge,
              s(:lvar, :options))),
          s(:lvasgn, :encoding,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :encoding))),
          s(:lvasgn, :str,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:if,
            s(:lvar, :encoding),
            s(:send,
              s(:lvar, :str), :force_encoding,
              s(:lvar, :encoding)),
            s(:if,
              s(:lvasgn, :field,
                s(:block,
                  s(:send,
                    s(:lvar, :row), :find),
                  s(:args,
                    s(:arg, :f)),
                  s(:send,
                    s(:send,
                      s(:lvar, :f), :nil?), :!))),
              s(:send,
                s(:lvar, :str), :force_encoding,
                s(:send,
                  s(:send, nil, :String,
                    s(:lvar, :field)), :encoding)), nil)),
          s(:send,
            s(:begin,
              s(:send,
                s(:send, nil, :new,
                  s(:lvar, :str),
                  s(:lvar, :options)), :<<,
                s(:lvar, :row))), :string))),
      s(:defs,
        s(:self), :open,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :options,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :args), :last), :is_a?,
                s(:const, nil, :Hash)),
              s(:send,
                s(:lvar, :args), :pop),
              s(:send,
                s(:const, nil, :Hash), :new))),
          s(:lvasgn, :file_opts,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:sym, :universal_newline),
                  s(:false))), :merge,
              s(:lvar, :options))),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :f,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:splat,
                    s(:lvar, :args)),
                  s(:lvar, :file_opts))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)),
                s(:lvasgn, :e),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "needs binmode"),
                          s(:regopt)),
                        s(:send,
                          s(:lvar, :e), :message)),
                      s(:send,
                        s(:send,
                          s(:lvar, :args), :size), :==,
                        s(:int, 1))), nil,
                    s(:send, nil, :raise)),
                  s(:send,
                    s(:lvar, :args), :<<,
                    s(:str, "rb")),
                  s(:lvasgn, :file_opts,
                    s(:send,
                      s(:hash,
                        s(:pair,
                          s(:sym, :encoding),
                          s(:send,
                            s(:const, nil, :Encoding), :default_external))), :merge,
                      s(:lvar, :file_opts))),
                  s(:retry))), nil)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :csv,
                s(:send, nil, :new,
                  s(:lvar, :f),
                  s(:lvar, :options))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :Exception)), nil,
                s(:begin,
                  s(:send,
                    s(:lvar, :f), :close),
                  s(:send, nil, :raise))), nil)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :csv)),
                s(:send,
                  s(:lvar, :csv), :close))),
            s(:lvar, :csv)))),
      s(:defs,
        s(:self), :parse,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :csv,
            s(:send, nil, :new,
              s(:splat,
                s(:lvar, :args)))),
          s(:if,
            s(:send,
              s(:lvar, :block), :nil?),
            s(:kwbegin,
              s(:ensure,
                s(:send,
                  s(:lvar, :csv), :read),
                s(:send,
                  s(:lvar, :csv), :close))),
            s(:send,
              s(:lvar, :csv), :each,
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:defs,
        s(:self), :parse_line,
        s(:args,
          s(:arg, :line),
          s(:optarg, :options,
            s(:send,
              s(:const, nil, :Hash), :new))),
        s(:send,
          s(:send, nil, :new,
            s(:lvar, :line),
            s(:lvar, :options)), :shift)),
      s(:defs,
        s(:self), :read,
        s(:args,
          s(:arg, :path),
          s(:restarg, :options)),
        s(:block,
          s(:send, nil, :open,
            s(:lvar, :path),
            s(:splat,
              s(:lvar, :options))),
          s(:args,
            s(:arg, :csv)),
          s(:send,
            s(:lvar, :csv), :read))),
      s(:defs,
        s(:self), :readlines,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :read,
          s(:splat,
            s(:lvar, :args)))),
      s(:defs,
        s(:self), :table,
        s(:args,
          s(:arg, :path),
          s(:optarg, :options,
            s(:send,
              s(:const, nil, :Hash), :new))),
        s(:send, nil, :read,
          s(:lvar, :path),
          s(:send,
            s(:hash,
              s(:pair,
                s(:sym, :headers),
                s(:true)),
              s(:pair,
                s(:sym, :converters),
                s(:sym, :numeric)),
              s(:pair,
                s(:sym, :header_converters),
                s(:sym, :symbol))), :merge,
            s(:lvar, :options)))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :data),
          s(:optarg, :options,
            s(:send,
              s(:const, nil, :Hash), :new))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :data), :nil?),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :ArgumentError), :new,
                s(:str, "Cannot parse nil as CSV"))), nil),
          s(:lvasgn, :options,
            s(:send,
              s(:const, nil, :DEFAULT_OPTIONS), :merge,
              s(:lvar, :options))),
          s(:ivasgn, :@io,
            s(:if,
              s(:send,
                s(:lvar, :data), :is_a?,
                s(:const, nil, :String)),
              s(:send,
                s(:const, nil, :StringIO), :new,
                s(:lvar, :data)),
              s(:lvar, :data))),
          s(:ivasgn, :@encoding,
            s(:or,
              s(:or,
                s(:or,
                  s(:or,
                    s(:send, nil, :raw_encoding,
                      s(:nil)),
                    s(:begin,
                      s(:if,
                        s(:lvasgn, :encoding,
                          s(:send,
                            s(:lvar, :options), :delete,
                            s(:sym, :internal_encoding))),
                        s(:case,
                          s(:lvar, :encoding),
                          s(:when,
                            s(:const, nil, :Encoding),
                            s(:lvar, :encoding)),
                          s(:send,
                            s(:const, nil, :Encoding), :find,
                            s(:lvar, :encoding))), nil))),
                  s(:begin,
                    s(:case,
                      s(:lvasgn, :encoding,
                        s(:send,
                          s(:lvar, :options), :delete,
                          s(:sym, :encoding))),
                      s(:when,
                        s(:const, nil, :Encoding),
                        s(:lvar, :encoding)),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A[^:]+"),
                          s(:regopt)),
                        s(:send,
                          s(:const, nil, :Encoding), :find,
                          s(:back_ref, :$&))), nil))),
                s(:send,
                  s(:const, nil, :Encoding), :default_internal)),
              s(:send,
                s(:const, nil, :Encoding), :default_external))),
          s(:ivasgn, :@re_esc,
            s(:rescue,
              s(:send,
                s(:send,
                  s(:str, "\\"), :encode,
                  s(:ivar, :@encoding)), :freeze),
              s(:resbody, nil, nil,
                s(:str, "")), nil)),
          s(:ivasgn, :@re_chars,
            s(:regexp,
              s(:begin,
                s(:send,
                  s(:str, "[-\\]\\[\\.^$?*+{}()|# \r\n\t\f\v]"), :encode,
                  s(:ivar, :@encoding))),
              s(:regopt))),
          s(:send, nil, :init_separators,
            s(:lvar, :options)),
          s(:send, nil, :init_parsers,
            s(:lvar, :options)),
          s(:send, nil, :init_converters,
            s(:lvar, :options)),
          s(:send, nil, :init_headers,
            s(:lvar, :options)),
          s(:send, nil, :init_comments,
            s(:lvar, :options)),
          s(:ivasgn, :@force_encoding,
            s(:send,
              s(:send,
                s(:begin,
                  s(:or,
                    s(:lvar, :encoding),
                    s(:send,
                      s(:lvar, :options), :delete,
                      s(:sym, :encoding)))), :!), :!)),
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :internal_encoding)),
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :external_encoding)),
          s(:if,
            s(:send,
              s(:lvar, :options), :empty?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "Unknown options:  "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :options), :keys), :join,
                    s(:str, ", "))),
                s(:str, ".")))),
          s(:ivasgn, :@lineno,
            s(:int, 0)))),
      s(:send, nil, :attr_reader,
        s(:sym, :col_sep)),
      s(:send, nil, :attr_reader,
        s(:sym, :row_sep)),
      s(:send, nil, :attr_reader,
        s(:sym, :quote_char)),
      s(:send, nil, :attr_reader,
        s(:sym, :field_size_limit)),
      s(:send, nil, :attr_reader,
        s(:sym, :skip_lines)),
      s(:def, :converters,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@converters), :map),
          s(:args,
            s(:arg, :converter)),
          s(:begin,
            s(:lvasgn, :name,
              s(:send,
                s(:const, nil, :Converters), :rassoc,
                s(:lvar, :converter))),
            s(:if,
              s(:lvar, :name),
              s(:send,
                s(:lvar, :name), :first),
              s(:lvar, :converter))))),
      s(:def, :unconverted_fields?,
        s(:args),
        s(:ivar, :@unconverted_fields)),
      s(:def, :headers,
        s(:args),
        s(:if,
          s(:ivar, :@use_headers),
          s(:or,
            s(:ivar, :@headers),
            s(:true)), nil)),
      s(:def, :return_headers?,
        s(:args),
        s(:ivar, :@return_headers)),
      s(:def, :write_headers?,
        s(:args),
        s(:ivar, :@write_headers)),
      s(:def, :header_converters,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@header_converters), :map),
          s(:args,
            s(:arg, :converter)),
          s(:begin,
            s(:lvasgn, :name,
              s(:send,
                s(:const, nil, :HeaderConverters), :rassoc,
                s(:lvar, :converter))),
            s(:if,
              s(:lvar, :name),
              s(:send,
                s(:lvar, :name), :first),
              s(:lvar, :converter))))),
      s(:def, :skip_blanks?,
        s(:args),
        s(:ivar, :@skip_blanks)),
      s(:def, :force_quotes?,
        s(:args),
        s(:ivar, :@force_quotes)),
      s(:send, nil, :attr_reader,
        s(:sym, :encoding)),
      s(:send, nil, :attr_reader,
        s(:sym, :lineno)),
      s(:send, nil, :extend,
        s(:const, nil, :Forwardable)),
      s(:send, nil, :def_delegators,
        s(:sym, :@io),
        s(:sym, :binmode),
        s(:sym, :binmode?),
        s(:sym, :close),
        s(:sym, :close_read),
        s(:sym, :close_write),
        s(:sym, :closed?),
        s(:sym, :eof),
        s(:sym, :eof?),
        s(:sym, :external_encoding),
        s(:sym, :fcntl),
        s(:sym, :fileno),
        s(:sym, :flock),
        s(:sym, :flush),
        s(:sym, :fsync),
        s(:sym, :internal_encoding),
        s(:sym, :ioctl),
        s(:sym, :isatty),
        s(:sym, :path),
        s(:sym, :pid),
        s(:sym, :pos),
        s(:sym, :pos=),
        s(:sym, :reopen),
        s(:sym, :seek),
        s(:sym, :stat),
        s(:sym, :string),
        s(:sym, :sync),
        s(:sym, :sync=),
        s(:sym, :tell),
        s(:sym, :to_i),
        s(:sym, :to_io),
        s(:sym, :truncate),
        s(:sym, :tty?)),
      s(:def, :rewind,
        s(:args),
        s(:begin,
          s(:ivasgn, :@headers,
            s(:nil)),
          s(:ivasgn, :@lineno,
            s(:int, 0)),
          s(:send,
            s(:ivar, :@io), :rewind))),
      s(:def, :<<,
        s(:args,
          s(:arg, :row)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send, nil, :header_row?),
              s(:send,
                s(:array,
                  s(:const, nil, :Array),
                  s(:const, nil, :String)), :include?,
                s(:send,
                  s(:ivar, :@use_headers), :class))),
            s(:begin,
              s(:send, nil, :parse_headers),
              s(:if,
                s(:ivar, :@write_headers),
                s(:send,
                  s(:self), :<<,
                  s(:ivar, :@headers)), nil)), nil),
          s(:lvasgn, :row,
            s(:case,
              s(:lvar, :row),
              s(:when,
                s(:const,
                  s(:send,
                    s(:self), :class), :Row),
                s(:send,
                  s(:lvar, :row), :fields)),
              s(:when,
                s(:const, nil, :Hash),
                s(:block,
                  s(:send,
                    s(:ivar, :@headers), :map),
                  s(:args,
                    s(:arg, :header)),
                  s(:send,
                    s(:lvar, :row), :[],
                    s(:lvar, :header)))),
              s(:lvar, :row))),
          s(:if,
            s(:send, nil, :header_row?),
            s(:ivasgn, :@headers,
              s(:lvar, :row)), nil),
          s(:op_asgn,
            s(:ivasgn, :@lineno), :+,
            s(:int, 1)),
          s(:lvasgn, :output,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :row), :map,
                  s(:block_pass,
                    s(:ivar, :@quote))), :join,
                s(:ivar, :@col_sep)), :+,
              s(:ivar, :@row_sep))),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@io), :is_a?,
                s(:const, nil, :StringIO)),
              s(:send,
                s(:send,
                  s(:lvar, :output), :encoding), :!=,
                s(:begin,
                  s(:lvasgn, :encoding,
                    s(:send, nil, :raw_encoding))))),
            s(:if,
              s(:ivar, :@force_encoding),
              s(:lvasgn, :output,
                s(:send,
                  s(:lvar, :output), :encode,
                  s(:lvar, :encoding))),
              s(:if,
                s(:begin,
                  s(:lvasgn, :compatible_encoding,
                    s(:send,
                      s(:const, nil, :Encoding), :compatible?,
                      s(:send,
                        s(:ivar, :@io), :string),
                      s(:lvar, :output)))),
                s(:begin,
                  s(:send,
                    s(:ivar, :@io), :set_encoding,
                    s(:lvar, :compatible_encoding)),
                  s(:send,
                    s(:ivar, :@io), :seek,
                    s(:int, 0),
                    s(:const,
                      s(:const, nil, :IO), :SEEK_END))), nil)), nil),
          s(:send,
            s(:ivar, :@io), :<<,
            s(:lvar, :output)),
          s(:self))),
      s(:send, nil, :alias_method,
        s(:sym, :add_row),
        s(:sym, :<<)),
      s(:send, nil, :alias_method,
        s(:sym, :puts),
        s(:sym, :<<)),
      s(:def, :convert,
        s(:args,
          s(:optarg, :name,
            s(:nil)),
          s(:blockarg, :converter)),
        s(:send, nil, :add_converter,
          s(:sym, :converters),
          s(:const,
            s(:send,
              s(:self), :class), :Converters),
          s(:lvar, :name),
          s(:block_pass,
            s(:lvar, :converter)))),
      s(:def, :header_convert,
        s(:args,
          s(:optarg, :name,
            s(:nil)),
          s(:blockarg, :converter)),
        s(:send, nil, :add_converter,
          s(:sym, :header_converters),
          s(:const,
            s(:send,
              s(:self), :class), :HeaderConverters),
          s(:lvar, :name),
          s(:block_pass,
            s(:lvar, :converter)))),
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)),
      s(:def, :each,
        s(:args),
        s(:if,
          s(:send, nil, :block_given?),
          s(:while,
            s(:lvasgn, :row,
              s(:send, nil, :shift)),
            s(:yield,
              s(:lvar, :row))),
          s(:send, nil, :to_enum))),
      s(:def, :read,
        s(:args),
        s(:begin,
          s(:lvasgn, :rows,
            s(:send, nil, :to_a)),
          s(:if,
            s(:ivar, :@use_headers),
            s(:send,
              s(:const, nil, :Table), :new,
              s(:lvar, :rows)),
            s(:lvar, :rows)))),
      s(:send, nil, :alias_method,
        s(:sym, :readlines),
        s(:sym, :read)),
      s(:def, :header_row?,
        s(:args),
        s(:and,
          s(:ivar, :@use_headers),
          s(:send,
            s(:ivar, :@headers), :nil?))),
      s(:def, :shift,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:and,
                s(:send, nil, :header_row?),
                s(:ivar, :@return_headers)),
              s(:send,
                s(:array,
                  s(:const, nil, :Array),
                  s(:const, nil, :String)), :include?,
                s(:send,
                  s(:ivar, :@use_headers), :class))),
            s(:if,
              s(:ivar, :@unconverted_fields),
              s(:return,
                s(:send, nil, :add_unconverted_fields,
                  s(:send, nil, :parse_headers),
                  s(:send,
                    s(:const, nil, :Array), :new))),
              s(:return,
                s(:send, nil, :parse_headers))), nil),
          s(:lvasgn, :in_extended_col,
            s(:false)),
          s(:lvasgn, :csv,
            s(:send,
              s(:const, nil, :Array), :new)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:if,
                s(:lvasgn, :parse,
                  s(:send,
                    s(:ivar, :@io), :gets,
                    s(:ivar, :@row_sep))), nil,
                s(:return,
                  s(:nil))),
              s(:send,
                s(:lvar, :parse), :sub!,
                s(:send,
                  s(:ivar, :@parsers), :[],
                  s(:sym, :line_end)),
                s(:str, "")),
              s(:if,
                s(:send,
                  s(:lvar, :csv), :empty?),
                s(:if,
                  s(:send,
                    s(:lvar, :parse), :empty?),
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@lineno), :+,
                      s(:int, 1)),
                    s(:if,
                      s(:ivar, :@skip_blanks),
                      s(:next),
                      s(:if,
                        s(:ivar, :@unconverted_fields),
                        s(:return,
                          s(:send, nil, :add_unconverted_fields,
                            s(:send,
                              s(:const, nil, :Array), :new),
                            s(:send,
                              s(:const, nil, :Array), :new))),
                        s(:if,
                          s(:ivar, :@use_headers),
                          s(:return,
                            s(:send,
                              s(:const,
                                s(:send,
                                  s(:self), :class), :Row), :new,
                              s(:send,
                                s(:const, nil, :Array), :new),
                              s(:send,
                                s(:const, nil, :Array), :new))),
                          s(:return,
                            s(:send,
                              s(:const, nil, :Array), :new)))))), nil), nil),
              s(:if,
                s(:and,
                  s(:ivar, :@skip_lines),
                  s(:send,
                    s(:ivar, :@skip_lines), :match,
                    s(:lvar, :parse))),
                s(:next), nil),
              s(:lvasgn, :parts,
                s(:send,
                  s(:lvar, :parse), :split,
                  s(:ivar, :@col_sep),
                  s(:int, -1))),
              s(:if,
                s(:send,
                  s(:lvar, :parts), :empty?),
                s(:if,
                  s(:lvar, :in_extended_col),
                  s(:send,
                    s(:send,
                      s(:lvar, :csv), :[],
                      s(:int, -1)), :<<,
                    s(:ivar, :@col_sep)),
                  s(:send,
                    s(:lvar, :csv), :<<,
                    s(:nil))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :parts), :each),
                s(:args,
                  s(:arg, :part)),
                s(:if,
                  s(:lvar, :in_extended_col),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :part), :[],
                          s(:int, -1)), :==,
                        s(:ivar, :@quote_char)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :part), :count,
                            s(:ivar, :@quote_char)), :%,
                          s(:int, 2)), :!=,
                        s(:int, 0))),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :csv), :last), :<<,
                        s(:send,
                          s(:lvar, :part), :[],
                          s(:irange,
                            s(:int, 0),
                            s(:int, -2)))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :csv), :last), :=~,
                          s(:send,
                            s(:ivar, :@parsers), :[],
                            s(:sym, :stray_quote))),
                        s(:send, nil, :raise,
                          s(:const, nil, :MalformedCSVError),
                          s(:dstr,
                            s(:str, "Missing or stray quote in line "),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :lineno), :+,
                                s(:int, 1))))), nil),
                      s(:send,
                        s(:send,
                          s(:lvar, :csv), :last), :gsub!,
                        s(:send,
                          s(:ivar, :@quote_char), :*,
                          s(:int, 2)),
                        s(:ivar, :@quote_char)),
                      s(:lvasgn, :in_extended_col,
                        s(:false))),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :csv), :last), :<<,
                        s(:lvar, :part)),
                      s(:send,
                        s(:send,
                          s(:lvar, :csv), :last), :<<,
                        s(:ivar, :@col_sep)))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :part), :[],
                        s(:int, 0)), :==,
                      s(:ivar, :@quote_char)),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:send,
                            s(:lvar, :part), :[],
                            s(:int, -1)), :!=,
                          s(:ivar, :@quote_char)),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :part), :count,
                              s(:ivar, :@quote_char)), :%,
                            s(:int, 2)), :!=,
                          s(:int, 0))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :csv), :<<,
                          s(:send,
                            s(:lvar, :part), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1)))),
                        s(:send,
                          s(:send,
                            s(:lvar, :csv), :last), :<<,
                          s(:ivar, :@col_sep)),
                        s(:lvasgn, :in_extended_col,
                          s(:true))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :csv), :<<,
                          s(:send,
                            s(:lvar, :part), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -2)))),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :csv), :last), :=~,
                            s(:send,
                              s(:ivar, :@parsers), :[],
                              s(:sym, :stray_quote))),
                          s(:send, nil, :raise,
                            s(:const, nil, :MalformedCSVError),
                            s(:dstr,
                              s(:str, "Missing or stray quote in line "),
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :lineno), :+,
                                  s(:int, 1))))), nil),
                        s(:send,
                          s(:send,
                            s(:lvar, :csv), :last), :gsub!,
                          s(:send,
                            s(:ivar, :@quote_char), :*,
                            s(:int, 2)),
                          s(:ivar, :@quote_char)))),
                    s(:if,
                      s(:send,
                        s(:lvar, :part), :=~,
                        s(:send,
                          s(:ivar, :@parsers), :[],
                          s(:sym, :quote_or_nl))),
                      s(:if,
                        s(:send,
                          s(:lvar, :part), :=~,
                          s(:send,
                            s(:ivar, :@parsers), :[],
                            s(:sym, :nl_or_lf))),
                        s(:send, nil, :raise,
                          s(:const, nil, :MalformedCSVError),
                          s(:send,
                            s(:str, "Unquoted fields do not allow "), :+,
                            s(:dstr,
                              s(:str, "\\r or \\n (line "),
                              s(:begin,
                                s(:send,
                                  s(:send, nil, :lineno), :+,
                                  s(:int, 1))),
                              s(:str, ").")))),
                        s(:send, nil, :raise,
                          s(:const, nil, :MalformedCSVError),
                          s(:dstr,
                            s(:str, "Illegal quoting in line "),
                            s(:begin,
                              s(:send,
                                s(:send, nil, :lineno), :+,
                                s(:int, 1))),
                            s(:str, ".")))),
                      s(:send,
                        s(:lvar, :csv), :<<,
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :part), :empty?),
                            s(:nil),
                            s(:lvar, :part)))))))),
              s(:if,
                s(:lvar, :in_extended_col),
                s(:send,
                  s(:send,
                    s(:lvar, :csv), :[],
                    s(:int, -1)), :[]=,
                  s(:int, -1),
                  s(:ivar, :@row_sep)), nil),
              s(:if,
                s(:lvar, :in_extended_col),
                s(:if,
                  s(:send,
                    s(:ivar, :@io), :eof?),
                  s(:send, nil, :raise,
                    s(:const, nil, :MalformedCSVError),
                    s(:dstr,
                      s(:str, "Unclosed quoted field on line "),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :lineno), :+,
                          s(:int, 1))),
                      s(:str, "."))),
                  s(:if,
                    s(:and,
                      s(:ivar, :@field_size_limit),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :csv), :last), :size), :>=,
                        s(:ivar, :@field_size_limit))),
                    s(:send, nil, :raise,
                      s(:const, nil, :MalformedCSVError),
                      s(:dstr,
                        s(:str, "Field size exceeded on line "),
                        s(:begin,
                          s(:send,
                            s(:send, nil, :lineno), :+,
                            s(:int, 1))),
                        s(:str, "."))), nil)),
                s(:begin,
                  s(:op_asgn,
                    s(:ivasgn, :@lineno), :+,
                    s(:int, 1)),
                  s(:if,
                    s(:ivar, :@unconverted_fields),
                    s(:lvasgn, :unconverted,
                      s(:send,
                        s(:lvar, :csv), :dup)), nil),
                  s(:if,
                    s(:or,
                      s(:ivar, :@use_headers),
                      s(:send,
                        s(:ivar, :@converters), :empty?)), nil,
                    s(:lvasgn, :csv,
                      s(:send, nil, :convert_fields,
                        s(:lvar, :csv)))),
                  s(:if,
                    s(:ivar, :@use_headers),
                    s(:lvasgn, :csv,
                      s(:send, nil, :parse_headers,
                        s(:lvar, :csv))), nil),
                  s(:if,
                    s(:and,
                      s(:ivar, :@unconverted_fields),
                      s(:send,
                        s(:send,
                          s(:lvar, :csv), :respond_to?,
                          s(:sym, :unconverted_fields)), :!)),
                    s(:send, nil, :add_unconverted_fields,
                      s(:lvar, :csv),
                      s(:lvar, :unconverted)), nil),
                  s(:break,
                    s(:lvar, :csv)))))))),
      s(:send, nil, :alias_method,
        s(:sym, :gets),
        s(:sym, :shift)),
      s(:send, nil, :alias_method,
        s(:sym, :readline),
        s(:sym, :shift)),
      s(:def, :inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:array,
              s(:str, "<#"),
              s(:send,
                s(:send,
                  s(:self), :class), :to_s),
              s(:str, " io_type:"))),
          s(:if,
            s(:send,
              s(:ivar, :@io), :==,
              s(:gvar, :$stdout)),
            s(:send,
              s(:lvar, :str), :<<,
              s(:str, "$stdout")),
            s(:if,
              s(:send,
                s(:ivar, :@io), :==,
                s(:gvar, :$stdin)),
              s(:send,
                s(:lvar, :str), :<<,
                s(:str, "$stdin")),
              s(:if,
                s(:send,
                  s(:ivar, :@io), :==,
                  s(:gvar, :$stderr)),
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:str, "$stderr")),
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:send,
                    s(:send,
                      s(:ivar, :@io), :class), :to_s))))),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@io), :respond_to?,
                s(:sym, :path)),
              s(:begin,
                s(:lvasgn, :p,
                  s(:send,
                    s(:ivar, :@io), :path)))),
            s(:send,
              s(:send,
                s(:lvar, :str), :<<,
                s(:str, " io_path:")), :<<,
              s(:send,
                s(:lvar, :p), :inspect)), nil),
          s(:send,
            s(:send,
              s(:lvar, :str), :<<,
              s(:str, " encoding:")), :<<,
            s(:send,
              s(:ivar, :@encoding), :name)),
          s(:block,
            s(:send,
              s(:array,
                s(:str, "lineno"),
                s(:str, "col_sep"),
                s(:str, "row_sep"),
                s(:str, "quote_char"),
                s(:str, "skip_blanks")), :each),
            s(:args,
              s(:arg, :attr_name)),
            s(:if,
              s(:lvasgn, :a,
                s(:send, nil, :instance_variable_get,
                  s(:dstr,
                    s(:str, "@"),
                    s(:begin,
                      s(:lvar, :attr_name))))),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :str), :<<,
                      s(:str, " ")), :<<,
                    s(:lvar, :attr_name)), :<<,
                  s(:str, ":")), :<<,
                s(:send,
                  s(:lvar, :a), :inspect)), nil)),
          s(:if,
            s(:ivar, :@use_headers),
            s(:send,
              s(:send,
                s(:lvar, :str), :<<,
                s(:str, " headers:")), :<<,
              s(:send,
                s(:send, nil, :headers), :inspect)), nil),
          s(:send,
            s(:lvar, :str), :<<,
            s(:str, ">")),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :str), :join,
                s(:str, "")),
              s(:resbody, nil, nil,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :str), :map),
                    s(:args,
                      s(:arg, :s)),
                    s(:begin,
                      s(:lvasgn, :e,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Encoding), :Converter), :asciicompat_encoding,
                          s(:send,
                            s(:lvar, :s), :encoding))),
                      s(:if,
                        s(:lvar, :e),
                        s(:send,
                          s(:lvar, :s), :encode,
                          s(:lvar, :e)),
                        s(:send,
                          s(:lvar, :s), :force_encoding,
                          s(:str, "ASCII-8BIT"))))), :join,
                  s(:str, ""))), nil)))),
      s(:send, nil, :private),
      s(:def, :init_separators,
        s(:args,
          s(:arg, :options)),
        s(:begin,
          s(:ivasgn, :@col_sep,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :options), :delete,
                  s(:sym, :col_sep)), :to_s), :encode,
              s(:ivar, :@encoding))),
          s(:ivasgn, :@row_sep,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :row_sep))),
          s(:ivasgn, :@quote_char,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :options), :delete,
                  s(:sym, :quote_char)), :to_s), :encode,
              s(:ivar, :@encoding))),
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@quote_char), :length), :!=,
              s(:int, 1)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, ":quote_char has to be a single character String")), nil),
          s(:if,
            s(:send,
              s(:ivar, :@row_sep), :==,
              s(:sym, :auto)),
            s(:if,
              s(:or,
                s(:send,
                  s(:array,
                    s(:const, nil, :ARGF),
                    s(:const, nil, :STDIN),
                    s(:const, nil, :STDOUT),
                    s(:const, nil, :STDERR)), :include?,
                  s(:ivar, :@io)),
                s(:begin,
                  s(:and,
                    s(:defined?,
                      s(:const, nil, :Zlib)),
                    s(:send,
                      s(:send,
                        s(:ivar, :@io), :class), :==,
                      s(:const,
                        s(:const, nil, :Zlib), :GzipWriter))))),
              s(:ivasgn, :@row_sep,
                s(:gvar, :$INPUT_RECORD_SEPARATOR)),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :saved_pos,
                        s(:send,
                          s(:ivar, :@io), :pos)),
                      s(:while,
                        s(:send,
                          s(:ivar, :@row_sep), :==,
                          s(:sym, :auto)),
                        s(:begin,
                          s(:if,
                            s(:lvasgn, :sample,
                              s(:send,
                                s(:ivar, :@io), :gets,
                                s(:nil),
                                s(:int, 1024))), nil,
                            s(:break)),
                          s(:if,
                            s(:send,
                              s(:lvar, :sample), :end_with?,
                              s(:send, nil, :encode_str,
                                s(:str, "\r"))),
                            s(:send,
                              s(:lvar, :sample), :<<,
                              s(:begin,
                                s(:or,
                                  s(:send,
                                    s(:ivar, :@io), :gets,
                                    s(:nil),
                                    s(:int, 1)),
                                  s(:str, "")))), nil),
                          s(:if,
                            s(:send,
                              s(:lvar, :sample), :=~,
                              s(:send, nil, :encode_re,
                                s(:str, "\r\n?|\n"))),
                            s(:begin,
                              s(:ivasgn, :@row_sep,
                                s(:back_ref, :$&)),
                              s(:break)), nil))),
                      s(:send,
                        s(:ivar, :@io), :rewind),
                      s(:while,
                        s(:send,
                          s(:lvar, :saved_pos), :>,
                          s(:int, 1024)),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@io), :read,
                            s(:int, 1024)),
                          s(:op_asgn,
                            s(:lvasgn, :saved_pos), :-,
                            s(:int, 1024)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :saved_pos), :nonzero?),
                        s(:send,
                          s(:ivar, :@io), :read,
                          s(:lvar, :saved_pos)), nil)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :IOError)), nil, nil),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :NoMethodError)), nil, nil),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SystemCallError)), nil, nil), nil),
                  s(:if,
                    s(:send,
                      s(:ivar, :@row_sep), :==,
                      s(:sym, :auto)),
                    s(:ivasgn, :@row_sep,
                      s(:gvar, :$INPUT_RECORD_SEPARATOR)), nil)))), nil),
          s(:ivasgn, :@row_sep,
            s(:send,
              s(:send,
                s(:ivar, :@row_sep), :to_s), :encode,
              s(:ivar, :@encoding))),
          s(:ivasgn, :@force_quotes,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :force_quotes))),
          s(:lvasgn, :do_quote,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :field)),
              s(:begin,
                s(:lvasgn, :field,
                  s(:send, nil, :String,
                    s(:lvar, :field))),
                s(:lvasgn, :encoded_quote,
                  s(:send,
                    s(:ivar, :@quote_char), :encode,
                    s(:send,
                      s(:lvar, :field), :encoding))),
                s(:send,
                  s(:send,
                    s(:lvar, :encoded_quote), :+,
                    s(:send,
                      s(:lvar, :field), :gsub,
                      s(:lvar, :encoded_quote),
                      s(:send,
                        s(:lvar, :encoded_quote), :*,
                        s(:int, 2)))), :+,
                  s(:lvar, :encoded_quote))))),
          s(:lvasgn, :quotable_chars,
            s(:send, nil, :encode_str,
              s(:str, "\r\n"),
              s(:ivar, :@col_sep),
              s(:ivar, :@quote_char))),
          s(:ivasgn, :@quote,
            s(:if,
              s(:ivar, :@force_quotes),
              s(:lvar, :do_quote),
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :field)),
                s(:if,
                  s(:send,
                    s(:lvar, :field), :nil?),
                  s(:str, ""),
                  s(:begin,
                    s(:lvasgn, :field,
                      s(:send, nil, :String,
                        s(:lvar, :field))),
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:lvar, :field), :empty?),
                        s(:send,
                          s(:send,
                            s(:lvar, :field), :count,
                            s(:lvar, :quotable_chars)), :nonzero?)),
                      s(:send,
                        s(:lvar, :do_quote), :call,
                        s(:lvar, :field)),
                      s(:lvar, :field))))))))),
      s(:def, :init_parsers,
        s(:args,
          s(:arg, :options)),
        s(:begin,
          s(:ivasgn, :@skip_blanks,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :skip_blanks))),
          s(:ivasgn, :@field_size_limit,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :field_size_limit))),
          s(:lvasgn, :esc_row_sep,
            s(:send, nil, :escape_re,
              s(:ivar, :@row_sep))),
          s(:lvasgn, :esc_quote,
            s(:send, nil, :escape_re,
              s(:ivar, :@quote_char))),
          s(:ivasgn, :@parsers,
            s(:hash,
              s(:pair,
                s(:sym, :quote_or_nl),
                s(:send, nil, :encode_re,
                  s(:str, "["),
                  s(:lvar, :esc_quote),
                  s(:str, "\r\n]"))),
              s(:pair,
                s(:sym, :nl_or_lf),
                s(:send, nil, :encode_re,
                  s(:str, "[\r\n]"))),
              s(:pair,
                s(:sym, :stray_quote),
                s(:send, nil, :encode_re,
                  s(:str, "[^"),
                  s(:lvar, :esc_quote),
                  s(:str, "]"),
                  s(:lvar, :esc_quote),
                  s(:str, "[^"),
                  s(:lvar, :esc_quote),
                  s(:str, "]"))),
              s(:pair,
                s(:sym, :line_end),
                s(:send, nil, :encode_re,
                  s(:lvar, :esc_row_sep),
                  s(:str, "\\z"))),
              s(:pair,
                s(:sym, :return_newline),
                s(:send, nil, :encode_str,
                  s(:str, "\r\n"))))))),
      s(:def, :init_converters,
        s(:args,
          s(:arg, :options),
          s(:optarg, :field_name,
            s(:sym, :converters))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :field_name), :==,
              s(:sym, :converters)),
            s(:ivasgn, :@unconverted_fields,
              s(:send,
                s(:lvar, :options), :delete,
                s(:sym, :unconverted_fields))), nil),
          s(:send, nil, :instance_variable_set,
            s(:dstr,
              s(:str, "@"),
              s(:begin,
                s(:lvar, :field_name))),
            s(:send,
              s(:const, nil, :Array), :new)),
          s(:lvasgn, :convert,
            s(:send, nil, :method,
              s(:send,
                s(:send,
                  s(:lvar, :field_name), :to_s), :sub,
                s(:regexp,
                  s(:str, "ers\\Z"),
                  s(:regopt)),
                s(:str, "")))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :options), :[],
                s(:lvar, :field_name)), :nil?), nil,
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:lvar, :field_name)), :is_a?,
                  s(:const, nil, :Array)), nil,
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:lvar, :field_name),
                  s(:array,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:lvar, :field_name))))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:lvar, :field_name)), :each),
                s(:args,
                  s(:arg, :converter)),
                s(:if,
                  s(:send,
                    s(:lvar, :converter), :is_a?,
                    s(:const, nil, :Proc)),
                  s(:send,
                    s(:lvar, :convert), :call,
                    s(:block_pass,
                      s(:lvar, :converter))),
                  s(:send,
                    s(:lvar, :convert), :call,
                    s(:lvar, :converter)))))),
          s(:send,
            s(:lvar, :options), :delete,
            s(:lvar, :field_name)))),
      s(:def, :init_headers,
        s(:args,
          s(:arg, :options)),
        s(:begin,
          s(:ivasgn, :@use_headers,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :headers))),
          s(:ivasgn, :@return_headers,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :return_headers))),
          s(:ivasgn, :@write_headers,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :write_headers))),
          s(:ivasgn, :@headers,
            s(:nil)),
          s(:send, nil, :init_converters,
            s(:lvar, :options),
            s(:sym, :header_converters)))),
      s(:def, :init_comments,
        s(:args,
          s(:arg, :options)),
        s(:begin,
          s(:ivasgn, :@skip_lines,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :skip_lines))),
          s(:if,
            s(:send,
              s(:ivar, :@skip_lines), :is_a?,
              s(:const, nil, :String)),
            s(:ivasgn, :@skip_lines,
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:ivar, :@skip_lines))), nil),
          s(:if,
            s(:and,
              s(:ivar, :@skip_lines),
              s(:send,
                s(:send,
                  s(:ivar, :@skip_lines), :respond_to?,
                  s(:sym, :match)), :!)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, ":skip_lines has to respond to matches")), nil))),
      s(:def, :add_converter,
        s(:args,
          s(:arg, :var_name),
          s(:arg, :const),
          s(:optarg, :name,
            s(:nil)),
          s(:blockarg, :converter)),
        s(:if,
          s(:send,
            s(:lvar, :name), :nil?),
          s(:send,
            s(:send, nil, :instance_variable_get,
              s(:dstr,
                s(:str, "@"),
                s(:begin,
                  s(:lvar, :var_name)))), :<<,
            s(:lvar, :converter)),
          s(:begin,
            s(:lvasgn, :combo,
              s(:send,
                s(:lvar, :const), :[],
                s(:lvar, :name))),
            s(:case,
              s(:lvar, :combo),
              s(:when,
                s(:const, nil, :Array),
                s(:block,
                  s(:send,
                    s(:lvar, :combo), :each),
                  s(:args,
                    s(:arg, :converter_name)),
                  s(:send, nil, :add_converter,
                    s(:lvar, :var_name),
                    s(:lvar, :const),
                    s(:lvar, :converter_name)))),
              s(:send,
                s(:send, nil, :instance_variable_get,
                  s(:dstr,
                    s(:str, "@"),
                    s(:begin,
                      s(:lvar, :var_name)))), :<<,
                s(:lvar, :combo)))))),
      s(:def, :convert_fields,
        s(:args,
          s(:arg, :fields),
          s(:optarg, :headers,
            s(:false))),
        s(:begin,
          s(:lvasgn, :converters,
            s(:if,
              s(:lvar, :headers),
              s(:ivar, :@header_converters),
              s(:ivar, :@converters))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :fields), :map), :with_index),
            s(:args,
              s(:arg, :field),
              s(:arg, :index)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :converters), :each),
                s(:args,
                  s(:arg, :converter)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :field), :nil?),
                    s(:break), nil),
                  s(:lvasgn, :field,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :converter), :arity), :==,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :converter), :[],
                        s(:lvar, :field)),
                      s(:begin,
                        s(:lvasgn, :header,
                          s(:if,
                            s(:and,
                              s(:ivar, :@use_headers),
                              s(:send,
                                s(:lvar, :headers), :!)),
                            s(:send,
                              s(:ivar, :@headers), :[],
                              s(:lvar, :index)),
                            s(:nil))),
                        s(:send,
                          s(:lvar, :converter), :[],
                          s(:lvar, :field),
                          s(:send,
                            s(:const, nil, :FieldInfo), :new,
                            s(:lvar, :index),
                            s(:send, nil, :lineno),
                            s(:lvar, :header)))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :field), :is_a?,
                      s(:const, nil, :String)), nil,
                    s(:break)))),
              s(:lvar, :field))))),
      s(:def, :parse_headers,
        s(:args,
          s(:optarg, :row,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@headers), :nil?),
            s(:begin,
              s(:ivasgn, :@headers,
                s(:case,
                  s(:ivar, :@use_headers),
                  s(:when,
                    s(:const, nil, :Array),
                    s(:ivar, :@use_headers)),
                  s(:when,
                    s(:const, nil, :String),
                    s(:send,
                      s(:send,
                        s(:self), :class), :parse_line,
                      s(:ivar, :@use_headers),
                      s(:hash,
                        s(:pair,
                          s(:sym, :col_sep),
                          s(:ivar, :@col_sep)),
                        s(:pair,
                          s(:sym, :row_sep),
                          s(:ivar, :@row_sep)),
                        s(:pair,
                          s(:sym, :quote_char),
                          s(:ivar, :@quote_char))))),
                  s(:lvar, :row))),
              s(:if,
                s(:send,
                  s(:lvar, :row), :nil?),
                s(:lvasgn, :row,
                  s(:ivar, :@headers)), nil),
              s(:ivasgn, :@headers,
                s(:send, nil, :convert_fields,
                  s(:ivar, :@headers),
                  s(:true))),
              s(:block,
                s(:send,
                  s(:ivar, :@headers), :each),
                s(:args,
                  s(:arg, :h)),
                s(:if,
                  s(:send,
                    s(:lvar, :h), :is_a?,
                    s(:const, nil, :String)),
                  s(:send,
                    s(:lvar, :h), :freeze), nil)),
              s(:if,
                s(:ivar, :@return_headers),
                s(:return,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:self), :class), :Row), :new,
                    s(:ivar, :@headers),
                    s(:lvar, :row),
                    s(:true))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:array,
                        s(:const, nil, :Array),
                        s(:const, nil, :String)), :include?,
                      s(:send,
                        s(:ivar, :@use_headers), :class)), :!),
                  s(:return,
                    s(:send, nil, :shift)), nil))), nil),
          s(:send,
            s(:const,
              s(:send,
                s(:self), :class), :Row), :new,
            s(:ivar, :@headers),
            s(:send, nil, :convert_fields,
              s(:lvar, :row))))),
      s(:def, :add_unconverted_fields,
        s(:args,
          s(:arg, :row),
          s(:arg, :fields)),
        s(:begin,
          s(:sclass,
            s(:lvar, :row),
            s(:send, nil, :attr_reader,
              s(:sym, :unconverted_fields))),
          s(:block,
            s(:send,
              s(:lvar, :row), :instance_eval),
            s(:args),
            s(:ivasgn, :@unconverted_fields,
              s(:lvar, :fields))),
          s(:lvar, :row))),
      s(:def, :escape_re,
        s(:args,
          s(:arg, :str)),
        s(:block,
          s(:send,
            s(:lvar, :str), :gsub,
            s(:ivar, :@re_chars)),
          s(:args,
            s(:arg, :c)),
          s(:send,
            s(:ivar, :@re_esc), :+,
            s(:lvar, :c)))),
      s(:def, :encode_re,
        s(:args,
          s(:restarg, :chunks)),
        s(:send,
          s(:const, nil, :Regexp), :new,
          s(:send, nil, :encode_str,
            s(:splat,
              s(:lvar, :chunks))))),
      s(:def, :encode_str,
        s(:args,
          s(:restarg, :chunks)),
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :chunks), :map),
            s(:args,
              s(:arg, :chunk)),
            s(:send,
              s(:lvar, :chunk), :encode,
              s(:send,
                s(:ivar, :@encoding), :name))), :join,
          s(:str, ""))),
      s(:send, nil, :private),
      s(:def, :raw_encoding,
        s(:args,
          s(:optarg, :default,
            s(:const,
              s(:const, nil, :Encoding), :ASCII_8BIT))),
        s(:if,
          s(:send,
            s(:ivar, :@io), :respond_to?,
            s(:sym, :internal_encoding)),
          s(:or,
            s(:send,
              s(:ivar, :@io), :internal_encoding),
            s(:send,
              s(:ivar, :@io), :external_encoding)),
          s(:if,
            s(:send,
              s(:ivar, :@io), :is_a?,
              s(:const, nil, :StringIO)),
            s(:send,
              s(:send,
                s(:ivar, :@io), :string), :encoding),
            s(:if,
              s(:send,
                s(:ivar, :@io), :respond_to?,
                s(:sym, :encoding)),
              s(:send,
                s(:ivar, :@io), :encoding),
              s(:lvar, :default))))))),
  s(:def, :CSV,
    s(:args,
      s(:restarg, :args),
      s(:blockarg, :block)),
    s(:send,
      s(:const, nil, :CSV), :instance,
      s(:splat,
        s(:lvar, :args)),
      s(:block_pass,
        s(:lvar, :block)))),
  s(:class,
    s(:const, nil, :Array), nil,
    s(:def, :to_csv,
      s(:args,
        s(:optarg, :options,
          s(:send,
            s(:const, nil, :Hash), :new))),
      s(:send,
        s(:const, nil, :CSV), :generate_line,
        s(:self),
        s(:lvar, :options)))),
  s(:class,
    s(:const, nil, :String), nil,
    s(:def, :parse_csv,
      s(:args,
        s(:optarg, :options,
          s(:send,
            s(:const, nil, :Hash), :new))),
      s(:send,
        s(:const, nil, :CSV), :parse_line,
        s(:self),
        s(:lvar, :options)))))
