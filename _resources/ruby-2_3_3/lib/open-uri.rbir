s(:begin,
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "time")),
  s(:module,
    s(:const, nil, :Kernel),
    s(:begin,
      s(:send, nil, :private),
      s(:alias,
        s(:sym, :open_uri_original_open),
        s(:sym, :open)),
      s(:sclass,
        s(:self),
        s(:alias,
          s(:sym, :open_uri_original_open),
          s(:sym, :open))),
      s(:def, :open,
        s(:args,
          s(:arg, :name),
          s(:restarg, :rest),
          s(:blockarg, :block)),
        s(:if,
          s(:send,
            s(:lvar, :name), :respond_to?,
            s(:sym, :open)),
          s(:send,
            s(:lvar, :name), :open,
            s(:splat,
              s(:lvar, :rest)),
            s(:block_pass,
              s(:lvar, :block))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :name), :respond_to?,
                  s(:sym, :to_str)),
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A[A-Za-z][A-Za-z0-9+\\-\\.]*://"),
                    s(:regopt)),
                  s(:lvar, :name))),
              s(:send,
                s(:begin,
                  s(:lvasgn, :uri,
                    s(:send,
                      s(:const, nil, :URI), :parse,
                      s(:lvar, :name)))), :respond_to?,
                s(:sym, :open))),
            s(:send,
              s(:lvar, :uri), :open,
              s(:splat,
                s(:lvar, :rest)),
              s(:block_pass,
                s(:lvar, :block))),
            s(:send, nil, :open_uri_original_open,
              s(:lvar, :name),
              s(:splat,
                s(:lvar, :rest)),
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:send, nil, :module_function,
        s(:sym, :open)))),
  s(:module,
    s(:const, nil, :OpenURI),
    s(:begin,
      s(:casgn, nil, :Options,
        s(:hash,
          s(:pair,
            s(:sym, :proxy),
            s(:true)),
          s(:pair,
            s(:sym, :proxy_http_basic_authentication),
            s(:true)),
          s(:pair,
            s(:sym, :progress_proc),
            s(:true)),
          s(:pair,
            s(:sym, :content_length_proc),
            s(:true)),
          s(:pair,
            s(:sym, :http_basic_authentication),
            s(:true)),
          s(:pair,
            s(:sym, :read_timeout),
            s(:true)),
          s(:pair,
            s(:sym, :open_timeout),
            s(:true)),
          s(:pair,
            s(:sym, :ssl_ca_cert),
            s(:nil)),
          s(:pair,
            s(:sym, :ssl_verify_mode),
            s(:nil)),
          s(:pair,
            s(:sym, :ftp_active_mode),
            s(:false)),
          s(:pair,
            s(:sym, :redirect),
            s(:true)))),
      s(:defs,
        s(:const, nil, :OpenURI), :check_options,
        s(:args,
          s(:arg, :options)),
        s(:block,
          s(:send,
            s(:lvar, :options), :each),
          s(:args,
            s(:arg, :k),
            s(:arg, :v)),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :Symbol), :===,
                s(:lvar, :k)), nil,
              s(:next)),
            s(:if,
              s(:send,
                s(:const, nil, :Options), :include?,
                s(:lvar, :k)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "unrecognized option: "),
                  s(:begin,
                    s(:lvar, :k)))))))),
      s(:defs,
        s(:const, nil, :OpenURI), :scan_open_optional_arguments,
        s(:args,
          s(:restarg, :rest)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :rest), :empty?), :!),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:const, nil, :String), :===,
                    s(:send,
                      s(:lvar, :rest), :first)),
                  s(:send,
                    s(:const, nil, :Integer), :===,
                    s(:send,
                      s(:lvar, :rest), :first))))),
            s(:begin,
              s(:lvasgn, :mode,
                s(:send,
                  s(:lvar, :rest), :shift)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :rest), :empty?), :!),
                  s(:send,
                    s(:const, nil, :Integer), :===,
                    s(:send,
                      s(:lvar, :rest), :first))),
                s(:lvasgn, :perm,
                  s(:send,
                    s(:lvar, :rest), :shift)), nil)), nil),
          s(:return,
            s(:lvar, :mode),
            s(:lvar, :perm),
            s(:lvar, :rest)))),
      s(:defs,
        s(:const, nil, :OpenURI), :open_uri,
        s(:args,
          s(:arg, :name),
          s(:restarg, :rest)),
        s(:begin,
          s(:lvasgn, :uri,
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :URI), :Generic), :===,
                s(:lvar, :name)),
              s(:lvar, :name),
              s(:send,
                s(:const, nil, :URI), :parse,
                s(:lvar, :name)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :mode),
              s(:lvasgn, :_),
              s(:lvasgn, :rest)),
            s(:send,
              s(:const, nil, :OpenURI), :scan_open_optional_arguments,
              s(:splat,
                s(:lvar, :rest)))),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :rest), :empty?), :!),
              s(:send,
                s(:const, nil, :Hash), :===,
                s(:send,
                  s(:lvar, :rest), :first))),
            s(:lvasgn, :options,
              s(:send,
                s(:lvar, :rest), :shift)), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :rest), :empty?), :!),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :ArgumentError), :new,
                s(:str, "extra arguments"))), nil),
          s(:or_asgn,
            s(:lvasgn, :options),
            s(:hash)),
          s(:send,
            s(:const, nil, :OpenURI), :check_options,
            s(:lvar, :options)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\Arb?(?:\\Z|:([^:]+))"),
                s(:regopt)),
              s(:lvar, :mode)),
            s(:begin,
              s(:if,
                s(:nth_ref, 1),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :encoding)),
                  s(:array,
                    s(:nth_ref, 1),
                    s(:send,
                      s(:const, nil, :Encoding), :find,
                      s(:nth_ref, 1)))), nil),
              s(:lvasgn, :mode,
                s(:nil))), nil),
          s(:if,
            s(:or,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :mode), :==,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :mode), :==,
                    s(:str, "r"))),
                s(:send,
                  s(:lvar, :mode), :==,
                  s(:str, "rb"))),
              s(:send,
                s(:lvar, :mode), :==,
                s(:const,
                  s(:const, nil, :File), :RDONLY))), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :ArgumentError), :new,
                s(:dstr,
                  s(:str, "invalid access mode "),
                  s(:begin,
                    s(:lvar, :mode)),
                  s(:str, " ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :uri), :class)),
                  s(:str, " resource is read only.)"))))),
          s(:lvasgn, :io,
            s(:send, nil, :open_loop,
              s(:lvar, :uri),
              s(:lvar, :options))),
          s(:if,
            s(:lvar, :encoding),
            s(:send,
              s(:lvar, :io), :set_encoding,
              s(:lvar, :encoding)), nil),
          s(:if,
            s(:send, nil, :block_given?),
            s(:kwbegin,
              s(:ensure,
                s(:yield,
                  s(:lvar, :io)),
                s(:if,
                  s(:send,
                    s(:lvar, :io), :respond_to?,
                    s(:sym, :close!)),
                  s(:send,
                    s(:lvar, :io), :close!),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :io), :closed?), :!),
                    s(:send,
                      s(:lvar, :io), :close), nil)))),
            s(:lvar, :io)))),
      s(:defs,
        s(:const, nil, :OpenURI), :open_loop,
        s(:args,
          s(:arg, :uri),
          s(:arg, :options)),
        s(:begin,
          s(:lvasgn, :proxy_opts,
            s(:array)),
          s(:if,
            s(:send,
              s(:lvar, :options), :include?,
              s(:sym, :proxy_http_basic_authentication)),
            s(:send,
              s(:lvar, :proxy_opts), :<<,
              s(:sym, :proxy_http_basic_authentication)), nil),
          s(:if,
            s(:send,
              s(:lvar, :options), :include?,
              s(:sym, :proxy)),
            s(:send,
              s(:lvar, :proxy_opts), :<<,
              s(:sym, :proxy)), nil),
          s(:send,
            s(:lvar, :proxy_opts), :compact!),
          s(:if,
            s(:send,
              s(:int, 1), :<,
              s(:send,
                s(:lvar, :proxy_opts), :length)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "multiple proxy options specified")), nil),
          s(:case,
            s(:send,
              s(:lvar, :proxy_opts), :first),
            s(:when,
              s(:sym, :proxy_http_basic_authentication),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :opt_proxy),
                    s(:lvasgn, :proxy_user),
                    s(:lvasgn, :proxy_pass)),
                  s(:send,
                    s(:lvar, :options), :fetch,
                    s(:sym, :proxy_http_basic_authentication))),
                s(:lvasgn, :proxy_user,
                  s(:send,
                    s(:lvar, :proxy_user), :to_str)),
                s(:lvasgn, :proxy_pass,
                  s(:send,
                    s(:lvar, :proxy_pass), :to_str)),
                s(:if,
                  s(:send,
                    s(:lvar, :opt_proxy), :==,
                    s(:true)),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ArgumentError), :new,
                      s(:dstr,
                        s(:str, "Invalid authenticated proxy option: "),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :options), :[],
                              s(:sym, :proxy_http_basic_authentication)), :inspect))))), nil))),
            s(:when,
              s(:sym, :proxy),
              s(:begin,
                s(:lvasgn, :opt_proxy,
                  s(:send,
                    s(:lvar, :options), :fetch,
                    s(:sym, :proxy))),
                s(:lvasgn, :proxy_user,
                  s(:nil)),
                s(:lvasgn, :proxy_pass,
                  s(:nil)))),
            s(:when,
              s(:nil),
              s(:begin,
                s(:lvasgn, :opt_proxy,
                  s(:true)),
                s(:lvasgn, :proxy_user,
                  s(:nil)),
                s(:lvasgn, :proxy_pass,
                  s(:nil)))), nil),
          s(:case,
            s(:lvar, :opt_proxy),
            s(:when,
              s(:true),
              s(:lvasgn, :find_proxy,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :u)),
                  s(:begin,
                    s(:lvasgn, :pxy,
                      s(:send,
                        s(:lvar, :u), :find_proxy)),
                    s(:if,
                      s(:lvar, :pxy),
                      s(:array,
                        s(:lvar, :pxy),
                        s(:nil),
                        s(:nil)),
                      s(:nil)))))),
            s(:when,
              s(:nil),
              s(:false),
              s(:lvasgn, :find_proxy,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :u)),
                  s(:nil)))),
            s(:when,
              s(:const, nil, :String),
              s(:begin,
                s(:lvasgn, :opt_proxy,
                  s(:send,
                    s(:const, nil, :URI), :parse,
                    s(:lvar, :opt_proxy))),
                s(:lvasgn, :find_proxy,
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :u)),
                    s(:array,
                      s(:lvar, :opt_proxy),
                      s(:lvar, :proxy_user),
                      s(:lvar, :proxy_pass)))))),
            s(:when,
              s(:const,
                s(:const, nil, :URI), :Generic),
              s(:lvasgn, :find_proxy,
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args,
                    s(:arg, :u)),
                  s(:array,
                    s(:lvar, :opt_proxy),
                    s(:lvar, :proxy_user),
                    s(:lvar, :proxy_pass))))),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :ArgumentError), :new,
                s(:dstr,
                  s(:str, "Invalid proxy option: "),
                  s(:begin,
                    s(:lvar, :opt_proxy)))))),
          s(:lvasgn, :uri_set,
            s(:hash)),
          s(:lvasgn, :buf,
            s(:nil)),
          s(:while,
            s(:true),
            s(:begin,
              s(:lvasgn, :redirect,
                s(:block,
                  s(:send, nil, :catch,
                    s(:sym, :open_uri_redirect)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :buf,
                      s(:send,
                        s(:const, nil, :Buffer), :new)),
                    s(:send,
                      s(:lvar, :uri), :buffer_open,
                      s(:lvar, :buf),
                      s(:send,
                        s(:lvar, :find_proxy), :call,
                        s(:lvar, :uri)),
                      s(:lvar, :options)),
                    s(:nil)))),
              s(:if,
                s(:lvar, :redirect),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :redirect), :relative?),
                    s(:lvasgn, :redirect,
                      s(:send,
                        s(:lvar, :uri), :+,
                        s(:lvar, :redirect))), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :options), :fetch,
                        s(:sym, :redirect),
                        s(:true)), :!),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :HTTPRedirect), :new,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :buf), :io), :status), :join,
                          s(:str, " ")),
                        s(:send,
                          s(:lvar, :buf), :io),
                        s(:lvar, :redirect))), nil),
                  s(:if,
                    s(:send,
                      s(:const, nil, :OpenURI), :redirectable?,
                      s(:lvar, :uri),
                      s(:lvar, :redirect)), nil,
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "redirection forbidden: "),
                        s(:begin,
                          s(:lvar, :uri)),
                        s(:str, " -> "),
                        s(:begin,
                          s(:lvar, :redirect))))),
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :include?,
                      s(:sym, :http_basic_authentication)),
                    s(:begin,
                      s(:lvasgn, :options,
                        s(:send,
                          s(:lvar, :options), :dup)),
                      s(:send,
                        s(:lvar, :options), :delete,
                        s(:sym, :http_basic_authentication))), nil),
                  s(:lvasgn, :uri,
                    s(:lvar, :redirect)),
                  s(:if,
                    s(:send,
                      s(:lvar, :uri_set), :include?,
                      s(:send,
                        s(:lvar, :uri), :to_s)),
                    s(:send, nil, :raise,
                      s(:dstr,
                        s(:str, "HTTP redirection loop: "),
                        s(:begin,
                          s(:lvar, :uri)))), nil),
                  s(:send,
                    s(:lvar, :uri_set), :[]=,
                    s(:send,
                      s(:lvar, :uri), :to_s),
                    s(:true))),
                s(:break)))),
          s(:lvasgn, :io,
            s(:send,
              s(:lvar, :buf), :io)),
          s(:send,
            s(:lvar, :io), :base_uri=,
            s(:lvar, :uri)),
          s(:lvar, :io))),
      s(:defs,
        s(:const, nil, :OpenURI), :redirectable?,
        s(:args,
          s(:arg, :uri1),
          s(:arg, :uri2)),
        s(:or,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :uri1), :scheme), :downcase), :==,
            s(:send,
              s(:send,
                s(:lvar, :uri2), :scheme), :downcase)),
          s(:begin,
            s(:and,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(?:http|ftp)\\z"),
                  s(:regopt, :i)),
                s(:send,
                  s(:lvar, :uri1), :scheme)),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A(?:http|ftp)\\z"),
                  s(:regopt, :i)),
                s(:send,
                  s(:lvar, :uri2), :scheme)))))),
      s(:defs,
        s(:const, nil, :OpenURI), :open_http,
        s(:args,
          s(:arg, :buf),
          s(:arg, :target),
          s(:arg, :proxy),
          s(:arg, :options)),
        s(:begin,
          s(:if,
            s(:lvar, :proxy),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :proxy_uri),
                  s(:lvasgn, :proxy_user),
                  s(:lvasgn, :proxy_pass)),
                s(:lvar, :proxy)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :proxy_uri), :class), :!=,
                  s(:const,
                    s(:const, nil, :URI), :HTTP)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Non-HTTP proxy URI: "),
                    s(:begin,
                      s(:lvar, :proxy_uri)))), nil)), nil),
          s(:if,
            s(:send,
              s(:lvar, :target), :userinfo),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "userinfo not supported.  [RFC3986]")), nil),
          s(:lvasgn, :header,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :options), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:if,
              s(:send,
                s(:const, nil, :String), :===,
                s(:lvar, :k)),
              s(:send,
                s(:lvar, :header), :[]=,
                s(:lvar, :k),
                s(:lvar, :v)), nil)),
          s(:send, nil, :require,
            s(:str, "net/http")),
          s(:lvasgn, :klass,
            s(:const,
              s(:const, nil, :Net), :HTTP)),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :URI), :HTTP), :===,
              s(:lvar, :target)),
            s(:begin,
              s(:if,
                s(:lvar, :proxy),
                s(:if,
                  s(:and,
                    s(:lvar, :proxy_user),
                    s(:lvar, :proxy_pass)),
                  s(:lvasgn, :klass,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Proxy,
                      s(:send,
                        s(:lvar, :proxy_uri), :hostname),
                      s(:send,
                        s(:lvar, :proxy_uri), :port),
                      s(:lvar, :proxy_user),
                      s(:lvar, :proxy_pass))),
                  s(:lvasgn, :klass,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :Proxy,
                      s(:send,
                        s(:lvar, :proxy_uri), :hostname),
                      s(:send,
                        s(:lvar, :proxy_uri), :port)))), nil),
              s(:lvasgn, :target_host,
                s(:send,
                  s(:lvar, :target), :hostname)),
              s(:lvasgn, :target_port,
                s(:send,
                  s(:lvar, :target), :port)),
              s(:lvasgn, :request_uri,
                s(:send,
                  s(:lvar, :target), :request_uri))),
            s(:begin,
              s(:lvasgn, :target_host,
                s(:send,
                  s(:lvar, :proxy_uri), :hostname)),
              s(:lvasgn, :target_port,
                s(:send,
                  s(:lvar, :proxy_uri), :port)),
              s(:lvasgn, :request_uri,
                s(:send,
                  s(:lvar, :target), :to_s)),
              s(:if,
                s(:and,
                  s(:lvar, :proxy_user),
                  s(:lvar, :proxy_pass)),
                s(:send,
                  s(:lvar, :header), :[]=,
                  s(:str, "Proxy-Authorization"),
                  s(:send,
                    s(:str, "Basic "), :+,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :proxy_user)),
                            s(:str, ":"),
                            s(:begin,
                              s(:lvar, :proxy_pass)))), :pack,
                        s(:str, "m")), :delete,
                      s(:str, "\r\n")))), nil))),
          s(:lvasgn, :http,
            s(:if,
              s(:lvar, :proxy),
              s(:send,
                s(:lvar, :klass), :new,
                s(:lvar, :target_host),
                s(:lvar, :target_port)),
              s(:send,
                s(:lvar, :klass), :new,
                s(:lvar, :target_host),
                s(:lvar, :target_port),
                s(:nil)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :target), :class), :==,
              s(:const,
                s(:const, nil, :URI), :HTTPS)),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "net/https")),
              s(:send,
                s(:lvar, :http), :use_ssl=,
                s(:true)),
              s(:send,
                s(:lvar, :http), :verify_mode=,
                s(:or,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :ssl_verify_mode)),
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER))),
              s(:lvasgn, :store,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Store), :new)),
              s(:if,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :ssl_ca_cert)),
                s(:block,
                  s(:send,
                    s(:send, nil, :Array,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :ssl_ca_cert))), :each),
                  s(:args,
                    s(:arg, :cert)),
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :cert)),
                    s(:send,
                      s(:lvar, :store), :add_path,
                      s(:lvar, :cert)),
                    s(:send,
                      s(:lvar, :store), :add_file,
                      s(:lvar, :cert)))),
                s(:send,
                  s(:lvar, :store), :set_default_paths)),
              s(:send,
                s(:lvar, :http), :cert_store=,
                s(:lvar, :store))), nil),
          s(:if,
            s(:send,
              s(:lvar, :options), :include?,
              s(:sym, :read_timeout)),
            s(:send,
              s(:lvar, :http), :read_timeout=,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :read_timeout))), nil),
          s(:if,
            s(:send,
              s(:lvar, :options), :include?,
              s(:sym, :open_timeout)),
            s(:send,
              s(:lvar, :http), :open_timeout=,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :open_timeout))), nil),
          s(:lvasgn, :resp,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :http), :start),
            s(:args),
            s(:begin,
              s(:lvasgn, :req,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Net), :HTTP), :Get), :new,
                  s(:lvar, :request_uri),
                  s(:lvar, :header))),
              s(:if,
                s(:send,
                  s(:lvar, :options), :include?,
                  s(:sym, :http_basic_authentication)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :user),
                      s(:lvasgn, :pass)),
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :http_basic_authentication))),
                  s(:send,
                    s(:lvar, :req), :basic_auth,
                    s(:lvar, :user),
                    s(:lvar, :pass))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :http), :request,
                  s(:lvar, :req)),
                s(:args,
                  s(:arg, :response)),
                s(:begin,
                  s(:lvasgn, :resp,
                    s(:lvar, :response)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :content_length_proc)),
                      s(:send,
                        s(:const,
                          s(:const, nil, :Net), :HTTPSuccess), :===,
                        s(:lvar, :resp))),
                    s(:if,
                      s(:send,
                        s(:lvar, :resp), :key?,
                        s(:str, "Content-Length")),
                      s(:send,
                        s(:send,
                          s(:lvar, :options), :[],
                          s(:sym, :content_length_proc)), :call,
                        s(:send,
                          s(:send,
                            s(:lvar, :resp), :[],
                            s(:str, "Content-Length")), :to_i)),
                      s(:send,
                        s(:send,
                          s(:lvar, :options), :[],
                          s(:sym, :content_length_proc)), :call,
                        s(:nil))), nil),
                  s(:block,
                    s(:send,
                      s(:lvar, :resp), :read_body),
                    s(:args,
                      s(:arg, :str)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :buf), :<<,
                        s(:lvar, :str)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :options), :[],
                            s(:sym, :progress_proc)),
                          s(:send,
                            s(:const,
                              s(:const, nil, :Net), :HTTPSuccess), :===,
                            s(:lvar, :resp))),
                        s(:send,
                          s(:send,
                            s(:lvar, :options), :[],
                            s(:sym, :progress_proc)), :call,
                          s(:send,
                            s(:lvar, :buf), :size)), nil))))))),
          s(:lvasgn, :io,
            s(:send,
              s(:lvar, :buf), :io)),
          s(:send,
            s(:lvar, :io), :rewind),
          s(:send,
            s(:lvar, :io), :status=,
            s(:array,
              s(:send,
                s(:lvar, :resp), :code),
              s(:send,
                s(:lvar, :resp), :message))),
          s(:block,
            s(:send,
              s(:lvar, :resp), :each_name),
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:send,
                s(:lvar, :buf), :io), :meta_add_field2,
              s(:lvar, :name),
              s(:send,
                s(:lvar, :resp), :get_fields,
                s(:lvar, :name)))),
          s(:case,
            s(:lvar, :resp),
            s(:when,
              s(:const,
                s(:const, nil, :Net), :HTTPSuccess), nil),
            s(:when,
              s(:const,
                s(:const, nil, :Net), :HTTPMovedPermanently),
              s(:const,
                s(:const, nil, :Net), :HTTPFound),
              s(:const,
                s(:const, nil, :Net), :HTTPSeeOther),
              s(:const,
                s(:const, nil, :Net), :HTTPTemporaryRedirect),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :loc_uri,
                      s(:send,
                        s(:const, nil, :URI), :parse,
                        s(:send,
                          s(:lvar, :resp), :[],
                          s(:str, "location")))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :URI), :InvalidURIError)), nil,
                      s(:send, nil, :raise,
                        s(:send,
                          s(:const,
                            s(:const, nil, :OpenURI), :HTTPError), :new,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :io), :status), :join,
                              s(:str, " ")), :+,
                            s(:str, " (Invalid Location URI)")),
                          s(:lvar, :io)))), nil)),
                s(:send, nil, :throw,
                  s(:sym, :open_uri_redirect),
                  s(:lvar, :loc_uri)))),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const, nil, :OpenURI), :HTTPError), :new,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :status), :join,
                  s(:str, " ")),
                s(:lvar, :io)))))),
      s(:class,
        s(:const, nil, :HTTPError),
        s(:const, nil, :StandardError),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :message),
              s(:arg, :io)),
            s(:begin,
              s(:super,
                s(:lvar, :message)),
              s(:ivasgn, :@io,
                s(:lvar, :io)))),
          s(:send, nil, :attr_reader,
            s(:sym, :io)))),
      s(:class,
        s(:const, nil, :HTTPRedirect),
        s(:const, nil, :HTTPError),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :message),
              s(:arg, :io),
              s(:arg, :uri)),
            s(:begin,
              s(:super,
                s(:lvar, :message),
                s(:lvar, :io)),
              s(:ivasgn, :@uri,
                s(:lvar, :uri)))),
          s(:send, nil, :attr_reader,
            s(:sym, :uri)))),
      s(:class,
        s(:const, nil, :Buffer), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@io,
                s(:send,
                  s(:const, nil, :StringIO), :new)),
              s(:ivasgn, :@size,
                s(:int, 0)))),
          s(:send, nil, :attr_reader,
            s(:sym, :size)),
          s(:casgn, nil, :StringMax,
            s(:int, 10240)),
          s(:def, :<<,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:send,
                s(:ivar, :@io), :<<,
                s(:lvar, :str)),
              s(:op_asgn,
                s(:ivasgn, :@size), :+,
                s(:send,
                  s(:lvar, :str), :length)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:const, nil, :StringIO), :===,
                    s(:ivar, :@io)),
                  s(:send,
                    s(:const, nil, :StringMax), :<,
                    s(:ivar, :@size))),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "tempfile")),
                  s(:lvasgn, :io,
                    s(:send,
                      s(:const, nil, :Tempfile), :new,
                      s(:str, "open-uri"))),
                  s(:send,
                    s(:lvar, :io), :binmode),
                  s(:if,
                    s(:send,
                      s(:const, nil, :Meta), :===,
                      s(:ivar, :@io)),
                    s(:send,
                      s(:const, nil, :Meta), :init,
                      s(:lvar, :io),
                      s(:ivar, :@io)), nil),
                  s(:send,
                    s(:lvar, :io), :<<,
                    s(:send,
                      s(:ivar, :@io), :string)),
                  s(:ivasgn, :@io,
                    s(:lvar, :io))), nil))),
          s(:def, :io,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Meta), :===,
                  s(:ivar, :@io)), nil,
                s(:send,
                  s(:const, nil, :Meta), :init,
                  s(:ivar, :@io))),
              s(:ivar, :@io))))),
      s(:module,
        s(:const, nil, :Meta),
        s(:begin,
          s(:defs,
            s(:const, nil, :Meta), :init,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :src,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:lvar, :obj), :extend,
                s(:const, nil, :Meta)),
              s(:block,
                s(:send,
                  s(:lvar, :obj), :instance_eval),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@base_uri,
                    s(:nil)),
                  s(:ivasgn, :@meta,
                    s(:hash)),
                  s(:ivasgn, :@metas,
                    s(:hash)))),
              s(:if,
                s(:lvar, :src),
                s(:begin,
                  s(:send,
                    s(:lvar, :obj), :status=,
                    s(:send,
                      s(:lvar, :src), :status)),
                  s(:send,
                    s(:lvar, :obj), :base_uri=,
                    s(:send,
                      s(:lvar, :src), :base_uri)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :src), :metas), :each),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :values)),
                    s(:send,
                      s(:lvar, :obj), :meta_add_field2,
                      s(:lvar, :name),
                      s(:lvar, :values)))), nil))),
          s(:send, nil, :attr_accessor,
            s(:sym, :status)),
          s(:send, nil, :attr_accessor,
            s(:sym, :base_uri)),
          s(:send, nil, :attr_reader,
            s(:sym, :meta)),
          s(:send, nil, :attr_reader,
            s(:sym, :metas)),
          s(:def, :meta_setup_encoding,
            s(:args),
            s(:begin,
              s(:lvasgn, :charset,
                s(:send,
                  s(:self), :charset)),
              s(:lvasgn, :enc,
                s(:nil)),
              s(:if,
                s(:lvar, :charset),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :enc,
                      s(:send,
                        s(:const, nil, :Encoding), :find,
                        s(:lvar, :charset))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ArgumentError)), nil, nil), nil)), nil),
              s(:if,
                s(:lvar, :enc), nil,
                s(:lvasgn, :enc,
                  s(:const,
                    s(:const, nil, :Encoding), :ASCII_8BIT))),
              s(:if,
                s(:send,
                  s(:self), :respond_to?,
                  s(:sym, :force_encoding)),
                s(:send,
                  s(:self), :force_encoding,
                  s(:lvar, :enc)),
                s(:if,
                  s(:send,
                    s(:self), :respond_to?,
                    s(:sym, :string)),
                  s(:send,
                    s(:send,
                      s(:self), :string), :force_encoding,
                    s(:lvar, :enc)),
                  s(:send,
                    s(:self), :set_encoding,
                    s(:lvar, :enc)))))),
          s(:def, :meta_add_field2,
            s(:args,
              s(:arg, :name),
              s(:arg, :values)),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:lvar, :name), :downcase)),
              s(:send,
                s(:ivar, :@metas), :[]=,
                s(:lvar, :name),
                s(:lvar, :values)),
              s(:send,
                s(:ivar, :@meta), :[]=,
                s(:lvar, :name),
                s(:send,
                  s(:lvar, :values), :join,
                  s(:str, ", "))),
              s(:if,
                s(:send,
                  s(:lvar, :name), :==,
                  s(:str, "content-type")),
                s(:send, nil, :meta_setup_encoding), nil))),
          s(:def, :meta_add_field,
            s(:args,
              s(:arg, :name),
              s(:arg, :value)),
            s(:send, nil, :meta_add_field2,
              s(:lvar, :name),
              s(:array,
                s(:lvar, :value)))),
          s(:def, :last_modified,
            s(:args),
            s(:if,
              s(:lvasgn, :vs,
                s(:send,
                  s(:ivar, :@metas), :[],
                  s(:str, "last-modified"))),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :vs), :join,
                    s(:str, ", "))),
                s(:send,
                  s(:const, nil, :Time), :httpdate,
                  s(:lvar, :v))),
              s(:nil))),
          s(:casgn, nil, :RE_LWS,
            s(:regexp,
              s(:str, "[\\r\\n\\t ]+"),
              s(:regopt, :n))),
          s(:casgn, nil, :RE_TOKEN,
            s(:regexp,
              s(:str, "[^\\x00- ()<>@,;:\\\\\"/\\[\\]?={}\\x7f]+"),
              s(:regopt, :n))),
          s(:casgn, nil, :RE_QUOTED_STRING,
            s(:regexp,
              s(:str, "\"(?:[\\r\\n\\t !#-\\[\\]-~\\x80-\\xff]|\\\\[\\x00-\\x7f])*\""),
              s(:regopt, :n))),
          s(:casgn, nil, :RE_PARAMETERS,
            s(:regexp,
              s(:str, "(?:;"),
              s(:begin,
                s(:const, nil, :RE_LWS)),
              s(:str, "?"),
              s(:begin,
                s(:const, nil, :RE_TOKEN)),
              s(:begin,
                s(:const, nil, :RE_LWS)),
              s(:str, "?="),
              s(:begin,
                s(:const, nil, :RE_LWS)),
              s(:str, "?(?:"),
              s(:begin,
                s(:const, nil, :RE_TOKEN)),
              s(:str, "|"),
              s(:begin,
                s(:const, nil, :RE_QUOTED_STRING)),
              s(:str, ")"),
              s(:begin,
                s(:const, nil, :RE_LWS)),
              s(:str, "?)*"),
              s(:regopt, :n))),
          s(:def, :content_type_parse,
            s(:args),
            s(:begin,
              s(:lvasgn, :vs,
                s(:send,
                  s(:ivar, :@metas), :[],
                  s(:str, "content-type"))),
              s(:if,
                s(:and,
                  s(:lvar, :vs),
                  s(:send,
                    s(:regexp,
                      s(:str, "\\A"),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?("),
                      s(:begin,
                        s(:const, nil, :RE_TOKEN)),
                      s(:str, ")"),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?/("),
                      s(:begin,
                        s(:const, nil, :RE_TOKEN)),
                      s(:str, ")"),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?("),
                      s(:begin,
                        s(:const, nil, :RE_PARAMETERS)),
                      s(:str, ")(?:;"),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?)?\\z"),
                      s(:regopt, :n, :o)), :=~,
                    s(:send,
                      s(:lvar, :vs), :join,
                      s(:str, ", ")))),
                s(:begin,
                  s(:lvasgn, :type,
                    s(:send,
                      s(:nth_ref, 1), :downcase)),
                  s(:lvasgn, :subtype,
                    s(:send,
                      s(:nth_ref, 2), :downcase)),
                  s(:lvasgn, :parameters,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:nth_ref, 3), :scan,
                      s(:regexp,
                        s(:str, ";"),
                        s(:begin,
                          s(:const, nil, :RE_LWS)),
                        s(:str, "?("),
                        s(:begin,
                          s(:const, nil, :RE_TOKEN)),
                        s(:str, ")"),
                        s(:begin,
                          s(:const, nil, :RE_LWS)),
                        s(:str, "?="),
                        s(:begin,
                          s(:const, nil, :RE_LWS)),
                        s(:str, "?(?:("),
                        s(:begin,
                          s(:const, nil, :RE_TOKEN)),
                        s(:str, ")|("),
                        s(:begin,
                          s(:const, nil, :RE_QUOTED_STRING)),
                        s(:str, "))"),
                        s(:regopt, :n, :o))),
                    s(:args,
                      s(:arg, :att),
                      s(:arg, :val),
                      s(:arg, :qval)),
                    s(:begin,
                      s(:if,
                        s(:lvar, :qval),
                        s(:lvasgn, :val,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :qval), :[],
                                s(:erange,
                                  s(:int, 1),
                                  s(:int, -1))), :gsub,
                              s(:regexp,
                                s(:str, "[\\r\\n\\t !#-\\[\\]-~\\x80-\\xff]+|(\\\\[\\x00-\\x7f])"),
                                s(:regopt, :n))),
                            s(:args),
                            s(:if,
                              s(:nth_ref, 1),
                              s(:send,
                                s(:nth_ref, 1), :[],
                                s(:int, 1),
                                s(:int, 1)),
                              s(:back_ref, :$&)))), nil),
                      s(:send,
                        s(:lvar, :parameters), :<<,
                        s(:array,
                          s(:send,
                            s(:lvar, :att), :downcase),
                          s(:lvar, :val))))),
                  s(:array,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :type)),
                      s(:str, "/"),
                      s(:begin,
                        s(:lvar, :subtype))),
                    s(:splat,
                      s(:lvar, :parameters)))),
                s(:nil)))),
          s(:def, :content_type,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:splat,
                    s(:lvasgn, :_))),
                s(:send, nil, :content_type_parse)),
              s(:or,
                s(:lvar, :type),
                s(:str, "application/octet-stream")))),
          s(:def, :charset,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:splat,
                    s(:lvasgn, :parameters))),
                s(:send, nil, :content_type_parse)),
              s(:if,
                s(:lvasgn, :pair,
                  s(:send,
                    s(:lvar, :parameters), :assoc,
                    s(:str, "charset"))),
                s(:send,
                  s(:send,
                    s(:lvar, :pair), :last), :downcase),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:lvar, :type),
                          s(:match_with_lvasgn,
                            s(:regexp,
                              s(:str, "\\Atext/"),
                              s(:regopt)),
                            s(:lvar, :type))),
                        s(:ivar, :@base_uri)),
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "\\Ahttp\\z"),
                          s(:regopt, :i)),
                        s(:send,
                          s(:ivar, :@base_uri), :scheme))),
                    s(:str, "iso-8859-1"),
                    s(:nil)))))),
          s(:def, :content_encoding,
            s(:args),
            s(:begin,
              s(:lvasgn, :vs,
                s(:send,
                  s(:ivar, :@metas), :[],
                  s(:str, "content-encoding"))),
              s(:if,
                s(:and,
                  s(:lvar, :vs),
                  s(:send,
                    s(:regexp,
                      s(:str, "\\A"),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?"),
                      s(:begin,
                        s(:const, nil, :RE_TOKEN)),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?(?:,"),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?"),
                      s(:begin,
                        s(:const, nil, :RE_TOKEN)),
                      s(:begin,
                        s(:const, nil, :RE_LWS)),
                      s(:str, "?)*"),
                      s(:regopt, :o)), :=~,
                    s(:begin,
                      s(:lvasgn, :v,
                        s(:send,
                          s(:lvar, :vs), :join,
                          s(:str, ", ")))))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :scan,
                      s(:const, nil, :RE_TOKEN)), :map),
                  s(:args,
                    s(:arg, :content_coding)),
                  s(:send,
                    s(:lvar, :content_coding), :downcase)),
                s(:array)))))),
      s(:module,
        s(:const, nil, :OpenRead),
        s(:begin,
          s(:def, :open,
            s(:args,
              s(:restarg, :rest),
              s(:blockarg, :block)),
            s(:send,
              s(:const, nil, :OpenURI), :open_uri,
              s(:self),
              s(:splat,
                s(:lvar, :rest)),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :read,
            s(:args,
              s(:optarg, :options,
                s(:hash))),
            s(:block,
              s(:send,
                s(:self), :open,
                s(:lvar, :options)),
              s(:args,
                s(:arg, :f)),
              s(:begin,
                s(:lvasgn, :str,
                  s(:send,
                    s(:lvar, :f), :read)),
                s(:send,
                  s(:const, nil, :Meta), :init,
                  s(:lvar, :str),
                  s(:lvar, :f)),
                s(:lvar, :str)))))))),
  s(:module,
    s(:const, nil, :URI),
    s(:begin,
      s(:class,
        s(:const, nil, :HTTP), nil,
        s(:begin,
          s(:def, :buffer_open,
            s(:args,
              s(:arg, :buf),
              s(:arg, :proxy),
              s(:arg, :options)),
            s(:send,
              s(:const, nil, :OpenURI), :open_http,
              s(:lvar, :buf),
              s(:self),
              s(:lvar, :proxy),
              s(:lvar, :options))),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenURI), :OpenRead)))),
      s(:class,
        s(:const, nil, :FTP), nil,
        s(:begin,
          s(:def, :buffer_open,
            s(:args,
              s(:arg, :buf),
              s(:arg, :proxy),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:lvar, :proxy),
                s(:begin,
                  s(:send,
                    s(:const, nil, :OpenURI), :open_http,
                    s(:lvar, :buf),
                    s(:self),
                    s(:lvar, :proxy),
                    s(:lvar, :options)),
                  s(:return)), nil),
              s(:send, nil, :require,
                s(:str, "net/ftp")),
              s(:lvasgn, :path,
                s(:send,
                  s(:self), :path)),
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :path), :sub,
                  s(:regexp,
                    s(:str, "\\A/"),
                    s(:regopt)),
                  s(:str, "%2F"))),
              s(:lvasgn, :directories,
                s(:send,
                  s(:lvar, :path), :split,
                  s(:regexp,
                    s(:str, "/"),
                    s(:regopt)),
                  s(:int, -1))),
              s(:block,
                s(:send,
                  s(:lvar, :directories), :each),
                s(:args,
                  s(:arg, :d)),
                s(:block,
                  s(:send,
                    s(:lvar, :d), :gsub!,
                    s(:regexp,
                      s(:str, "%([0-9A-Fa-f][0-9A-Fa-f])"),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:array,
                      s(:nth_ref, 1)), :pack,
                    s(:str, "H2")))),
              s(:if,
                s(:lvasgn, :filename,
                  s(:send,
                    s(:lvar, :directories), :pop)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "no filename: "),
                    s(:begin,
                      s(:send,
                        s(:self), :inspect))))),
              s(:block,
                s(:send,
                  s(:lvar, :directories), :each),
                s(:args,
                  s(:arg, :d)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "[\\r\\n]"),
                      s(:regopt)),
                    s(:lvar, :d)),
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "invalid directory: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :d), :inspect)))), nil)),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "[\\r\\n]"),
                    s(:regopt)),
                  s(:lvar, :filename)),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "invalid filename: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :filename), :inspect)))), nil),
              s(:lvasgn, :typecode,
                s(:send,
                  s(:self), :typecode)),
              s(:if,
                s(:and,
                  s(:lvar, :typecode),
                  s(:send,
                    s(:regexp,
                      s(:str, "\\A[aid]\\z"),
                      s(:regopt)), :!~,
                    s(:lvar, :typecode))),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "invalid typecode: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :typecode), :inspect)))), nil),
              s(:lvasgn, :ftp,
                s(:send,
                  s(:const,
                    s(:const, nil, :Net), :FTP), :new)),
              s(:send,
                s(:lvar, :ftp), :connect,
                s(:send,
                  s(:self), :hostname),
                s(:send,
                  s(:self), :port)),
              s(:send,
                s(:lvar, :ftp), :passive=,
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :ftp_active_mode)), :!)),
              s(:lvasgn, :user,
                s(:str, "anonymous")),
              s(:lvasgn, :passwd,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:self), :userinfo),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :user),
                    s(:lvasgn, :passwd)),
                  s(:send,
                    s(:send,
                      s(:self), :userinfo), :split,
                    s(:regexp,
                      s(:str, ":"),
                      s(:regopt)))), nil),
              s(:send,
                s(:lvar, :ftp), :login,
                s(:lvar, :user),
                s(:lvar, :passwd)),
              s(:block,
                s(:send,
                  s(:lvar, :directories), :each),
                s(:args,
                  s(:arg, :cwd)),
                s(:send,
                  s(:lvar, :ftp), :voidcmd,
                  s(:dstr,
                    s(:str, "CWD "),
                    s(:begin,
                      s(:lvar, :cwd))))),
              s(:if,
                s(:lvar, :typecode),
                s(:send,
                  s(:lvar, :ftp), :voidcmd,
                  s(:dstr,
                    s(:str, "TYPE "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :typecode), :upcase)))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :content_length_proc)),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :content_length_proc)), :call,
                  s(:send,
                    s(:lvar, :ftp), :size,
                    s(:lvar, :filename))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :ftp), :retrbinary,
                  s(:dstr,
                    s(:str, "RETR "),
                    s(:begin,
                      s(:lvar, :filename))),
                  s(:int, 4096)),
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:send,
                    s(:lvar, :buf), :<<,
                    s(:lvar, :str)),
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :progress_proc)),
                    s(:send,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :progress_proc)), :call,
                      s(:send,
                        s(:lvar, :buf), :size)), nil))),
              s(:send,
                s(:lvar, :ftp), :close),
              s(:send,
                s(:send,
                  s(:lvar, :buf), :io), :rewind))),
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :OpenURI), :OpenRead)))))))
