s(:begin,
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:module,
    s(:const, nil, :MonitorMixin),
    s(:begin,
      s(:class,
        s(:const, nil, :ConditionVariable), nil,
        s(:begin,
          s(:class,
            s(:const, nil, :Timeout),
            s(:const, nil, :Exception), nil),
          s(:def, :wait,
            s(:args,
              s(:optarg, :timeout,
                s(:nil))),
            s(:begin,
              s(:send,
                s(:ivar, :@monitor), :__send__,
                s(:sym, :mon_check_owner)),
              s(:lvasgn, :count,
                s(:send,
                  s(:ivar, :@monitor), :__send__,
                  s(:sym, :mon_exit_for_cond))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@cond), :wait,
                      s(:send,
                        s(:ivar, :@monitor), :instance_variable_get,
                        s(:sym, :@mon_mutex)),
                      s(:lvar, :timeout)),
                    s(:return,
                      s(:true))),
                  s(:send,
                    s(:ivar, :@monitor), :__send__,
                    s(:sym, :mon_enter_for_cond),
                    s(:lvar, :count)))))),
          s(:def, :wait_while,
            s(:args),
            s(:while,
              s(:yield),
              s(:send, nil, :wait))),
          s(:def, :wait_until,
            s(:args),
            s(:until,
              s(:yield),
              s(:send, nil, :wait))),
          s(:def, :signal,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@monitor), :__send__,
                s(:sym, :mon_check_owner)),
              s(:send,
                s(:ivar, :@cond), :signal))),
          s(:def, :broadcast,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@monitor), :__send__,
                s(:sym, :mon_check_owner)),
              s(:send,
                s(:ivar, :@cond), :broadcast))),
          s(:send, nil, :private),
          s(:def, :initialize,
            s(:args,
              s(:arg, :monitor)),
            s(:begin,
              s(:ivasgn, :@monitor,
                s(:lvar, :monitor)),
              s(:ivasgn, :@cond,
                s(:send,
                  s(:const,
                    s(:cbase), :ConditionVariable), :new)))))),
      s(:defs,
        s(:self), :extend_object,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:super,
            s(:lvar, :obj)),
          s(:send,
            s(:lvar, :obj), :__send__,
            s(:sym, :mon_initialize)))),
      s(:def, :mon_try_enter,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@mon_owner), :!=,
              s(:send,
                s(:const, nil, :Thread), :current)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@mon_mutex), :try_lock), nil,
                s(:return,
                  s(:false))),
              s(:ivasgn, :@mon_owner,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:ivasgn, :@mon_count,
                s(:int, 0))), nil),
          s(:op_asgn,
            s(:ivasgn, :@mon_count), :+,
            s(:int, 1)),
          s(:return,
            s(:true)))),
      s(:alias,
        s(:sym, :try_mon_enter),
        s(:sym, :mon_try_enter)),
      s(:def, :mon_enter,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@mon_owner), :!=,
              s(:send,
                s(:const, nil, :Thread), :current)),
            s(:begin,
              s(:send,
                s(:ivar, :@mon_mutex), :lock),
              s(:ivasgn, :@mon_owner,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:ivasgn, :@mon_count,
                s(:int, 0))), nil),
          s(:op_asgn,
            s(:ivasgn, :@mon_count), :+,
            s(:int, 1)))),
      s(:def, :mon_exit,
        s(:args),
        s(:begin,
          s(:send, nil, :mon_check_owner),
          s(:op_asgn,
            s(:ivasgn, :@mon_count), :-,
            s(:int, 1)),
          s(:if,
            s(:send,
              s(:ivar, :@mon_count), :==,
              s(:int, 0)),
            s(:begin,
              s(:ivasgn, :@mon_owner,
                s(:nil)),
              s(:send,
                s(:ivar, :@mon_mutex), :unlock)), nil))),
      s(:def, :mon_synchronize,
        s(:args),
        s(:begin,
          s(:send, nil, :mon_enter),
          s(:kwbegin,
            s(:ensure,
              s(:yield),
              s(:send, nil, :mon_exit))))),
      s(:alias,
        s(:sym, :synchronize),
        s(:sym, :mon_synchronize)),
      s(:def, :new_cond,
        s(:args),
        s(:return,
          s(:send,
            s(:const, nil, :ConditionVariable), :new,
            s(:self)))),
      s(:send, nil, :private),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :mon_initialize))),
      s(:def, :mon_initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@mon_owner,
            s(:nil)),
          s(:ivasgn, :@mon_count,
            s(:int, 0)),
          s(:ivasgn, :@mon_mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)))),
      s(:def, :mon_check_owner,
        s(:args),
        s(:if,
          s(:send,
            s(:ivar, :@mon_owner), :!=,
            s(:send,
              s(:const, nil, :Thread), :current)),
          s(:send, nil, :raise,
            s(:const, nil, :ThreadError),
            s(:str, "current thread not owner")), nil)),
      s(:def, :mon_enter_for_cond,
        s(:args,
          s(:arg, :count)),
        s(:begin,
          s(:ivasgn, :@mon_owner,
            s(:send,
              s(:const, nil, :Thread), :current)),
          s(:ivasgn, :@mon_count,
            s(:lvar, :count)))),
      s(:def, :mon_exit_for_cond,
        s(:args),
        s(:begin,
          s(:lvasgn, :count,
            s(:ivar, :@mon_count)),
          s(:ivasgn, :@mon_owner,
            s(:nil)),
          s(:ivasgn, :@mon_count,
            s(:int, 0)),
          s(:return,
            s(:lvar, :count)))))),
  s(:class,
    s(:const, nil, :Monitor), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :MonitorMixin)),
      s(:alias,
        s(:sym, :try_enter),
        s(:sym, :try_mon_enter)),
      s(:alias,
        s(:sym, :enter),
        s(:sym, :mon_enter)),
      s(:alias,
        s(:sym, :exit),
        s(:sym, :mon_exit)))))
