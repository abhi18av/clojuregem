s(:class,
  s(:const, nil, :Matrix), nil,
  s(:class,
    s(:const, nil, :LUPDecomposition), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Matrix), :ConversionHelper)),
      s(:def, :l,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Matrix), :build,
            s(:ivar, :@row_count),
            s(:send,
              s(:array,
                s(:ivar, :@column_count),
                s(:ivar, :@row_count)), :min)),
          s(:args,
            s(:arg, :i),
            s(:arg, :j)),
          s(:if,
            s(:begin,
              s(:send,
                s(:lvar, :i), :>,
                s(:lvar, :j))),
            s(:send,
              s(:send,
                s(:ivar, :@lu), :[],
                s(:lvar, :i)), :[],
              s(:lvar, :j)),
            s(:if,
              s(:begin,
                s(:send,
                  s(:lvar, :i), :==,
                  s(:lvar, :j))),
              s(:int, 1),
              s(:int, 0))))),
      s(:def, :u,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Matrix), :build,
            s(:send,
              s(:array,
                s(:ivar, :@column_count),
                s(:ivar, :@row_count)), :min),
            s(:ivar, :@column_count)),
          s(:args,
            s(:arg, :i),
            s(:arg, :j)),
          s(:if,
            s(:begin,
              s(:send,
                s(:lvar, :i), :<=,
                s(:lvar, :j))),
            s(:send,
              s(:send,
                s(:ivar, :@lu), :[],
                s(:lvar, :i)), :[],
              s(:lvar, :j)),
            s(:int, 0)))),
      s(:def, :p,
        s(:args),
        s(:begin,
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:ivar, :@row_count)),
              s(:args),
              s(:send,
                s(:const, nil, :Array), :new,
                s(:ivar, :@row_count),
                s(:int, 0)))),
          s(:block,
            s(:send,
              s(:ivar, :@pivots), :each_with_index),
            s(:args,
              s(:arg, :p),
              s(:arg, :i)),
            s(:send,
              s(:send,
                s(:lvar, :rows), :[],
                s(:lvar, :i)), :[]=,
              s(:lvar, :p),
              s(:int, 1))),
          s(:send,
            s(:const, nil, :Matrix), :send,
            s(:sym, :new),
            s(:lvar, :rows),
            s(:ivar, :@row_count)))),
      s(:def, :to_ary,
        s(:args),
        s(:array,
          s(:send, nil, :l),
          s(:send, nil, :u),
          s(:send, nil, :p))),
      s(:send, nil, :alias_method,
        s(:sym, :to_a),
        s(:sym, :to_ary)),
      s(:send, nil, :attr_reader,
        s(:sym, :pivots)),
      s(:def, :singular?,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@column_count), :times),
            s(:args,
              s(:arg, :j)),
            s(:if,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@lu), :[],
                      s(:lvar, :j)), :[],
                    s(:lvar, :j)), :==,
                  s(:int, 0))),
              s(:return,
                s(:true)), nil)),
          s(:false))),
      s(:def, :det,
        s(:args),
        s(:begin,
          s(:if,
            s(:begin,
              s(:send,
                s(:ivar, :@row_count), :!=,
                s(:ivar, :@column_count))),
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrDimensionMismatch)), nil),
          s(:lvasgn, :d,
            s(:ivar, :@pivot_sign)),
          s(:block,
            s(:send,
              s(:ivar, :@column_count), :times),
            s(:args,
              s(:arg, :j)),
            s(:op_asgn,
              s(:lvasgn, :d), :*,
              s(:send,
                s(:send,
                  s(:ivar, :@lu), :[],
                  s(:lvar, :j)), :[],
                s(:lvar, :j)))),
          s(:lvar, :d))),
      s(:send, nil, :alias_method,
        s(:sym, :determinant),
        s(:sym, :det)),
      s(:def, :solve,
        s(:args,
          s(:arg, :b)),
        s(:begin,
          s(:if,
            s(:begin,
              s(:send, nil, :singular?)),
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const,
                s(:const, nil, :Matrix), :ErrNotRegular),
              s(:str, "Matrix is singular.")), nil),
          s(:if,
            s(:send,
              s(:lvar, :b), :is_a?,
              s(:const, nil, :Matrix)),
            s(:begin,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :b), :row_count), :!=,
                    s(:ivar, :@row_count))),
                s(:send,
                  s(:const, nil, :Matrix), :Raise,
                  s(:const,
                    s(:const, nil, :Matrix), :ErrDimensionMismatch)), nil),
              s(:lvasgn, :nx,
                s(:send,
                  s(:lvar, :b), :column_count)),
              s(:lvasgn, :m,
                s(:block,
                  s(:send,
                    s(:ivar, :@pivots), :map),
                  s(:args,
                    s(:arg, :row)),
                  s(:send,
                    s(:send,
                      s(:lvar, :b), :row,
                      s(:lvar, :row)), :to_a))),
              s(:block,
                s(:send,
                  s(:ivar, :@column_count), :times),
                s(:args,
                  s(:arg, :k)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :k), :+,
                        s(:int, 1))), :upto,
                    s(:send,
                      s(:ivar, :@column_count), :-,
                      s(:int, 1))),
                  s(:args,
                    s(:arg, :i)),
                  s(:block,
                    s(:send,
                      s(:lvar, :nx), :times),
                    s(:args,
                      s(:arg, :j)),
                    s(:op_asgn,
                      s(:send,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:lvar, :i)), :[],
                        s(:lvar, :j)), :-,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:lvar, :k)), :[],
                          s(:lvar, :j)), :*,
                        s(:send,
                          s(:send,
                            s(:ivar, :@lu), :[],
                            s(:lvar, :i)), :[],
                          s(:lvar, :k))))))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@column_count), :-,
                      s(:int, 1))), :downto,
                  s(:int, 0)),
                s(:args,
                  s(:arg, :k)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :nx), :times),
                    s(:args,
                      s(:arg, :j)),
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:lvar, :k)), :[]=,
                      s(:lvar, :j),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:lvar, :k)), :[],
                          s(:lvar, :j)), :quo,
                        s(:send,
                          s(:send,
                            s(:ivar, :@lu), :[],
                            s(:lvar, :k)), :[],
                          s(:lvar, :k))))),
                  s(:block,
                    s(:send,
                      s(:lvar, :k), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:block,
                      s(:send,
                        s(:lvar, :nx), :times),
                      s(:args,
                        s(:arg, :j)),
                      s(:op_asgn,
                        s(:send,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:lvar, :i)), :[],
                          s(:lvar, :j)), :-,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :[],
                              s(:lvar, :k)), :[],
                            s(:lvar, :j)), :*,
                          s(:send,
                            s(:send,
                              s(:ivar, :@lu), :[],
                              s(:lvar, :i)), :[],
                            s(:lvar, :k)))))))),
              s(:send,
                s(:const, nil, :Matrix), :send,
                s(:sym, :new),
                s(:lvar, :m),
                s(:lvar, :nx))),
            s(:begin,
              s(:lvasgn, :b,
                s(:send, nil, :convert_to_array,
                  s(:lvar, :b))),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :b), :size), :!=,
                    s(:ivar, :@row_count))),
                s(:send,
                  s(:const, nil, :Matrix), :Raise,
                  s(:const,
                    s(:const, nil, :Matrix), :ErrDimensionMismatch)), nil),
              s(:lvasgn, :m,
                s(:send,
                  s(:lvar, :b), :values_at,
                  s(:splat,
                    s(:ivar, :@pivots)))),
              s(:block,
                s(:send,
                  s(:ivar, :@column_count), :times),
                s(:args,
                  s(:arg, :k)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :k), :+,
                        s(:int, 1))), :upto,
                    s(:send,
                      s(:ivar, :@column_count), :-,
                      s(:int, 1))),
                  s(:args,
                    s(:arg, :i)),
                  s(:op_asgn,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:lvar, :i)), :-,
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:lvar, :k)), :*,
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :i)), :[],
                        s(:lvar, :k)))))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@column_count), :-,
                      s(:int, 1))), :downto,
                  s(:int, 0)),
                s(:args,
                  s(:arg, :k)),
                s(:begin,
                  s(:send,
                    s(:lvar, :m), :[]=,
                    s(:lvar, :k),
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:lvar, :k)), :quo,
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :k)), :[],
                        s(:lvar, :k)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :k), :times),
                    s(:args,
                      s(:arg, :i)),
                    s(:op_asgn,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:lvar, :i)), :-,
                      s(:send,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:lvar, :k)), :*,
                        s(:send,
                          s(:send,
                            s(:ivar, :@lu), :[],
                            s(:lvar, :i)), :[],
                          s(:lvar, :k))))))),
              s(:send,
                s(:const, nil, :Vector), :elements,
                s(:lvar, :m),
                s(:false)))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :a)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :a), :is_a?,
              s(:const, nil, :Matrix)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:str, "Expected Matrix but got "),
                s(:begin,
                  s(:send,
                    s(:lvar, :a), :class))))),
          s(:ivasgn, :@lu,
            s(:send,
              s(:lvar, :a), :to_a)),
          s(:ivasgn, :@row_count,
            s(:send,
              s(:lvar, :a), :row_count)),
          s(:ivasgn, :@column_count,
            s(:send,
              s(:lvar, :a), :column_count)),
          s(:ivasgn, :@pivots,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:ivar, :@row_count))),
          s(:block,
            s(:send,
              s(:ivar, :@row_count), :times),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:ivar, :@pivots), :[]=,
              s(:lvar, :i),
              s(:lvar, :i))),
          s(:ivasgn, :@pivot_sign,
            s(:int, 1)),
          s(:lvasgn, :lu_col_j,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:ivar, :@row_count))),
          s(:block,
            s(:send,
              s(:ivar, :@column_count), :times),
            s(:args,
              s(:arg, :j)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@row_count), :times),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :lu_col_j), :[]=,
                  s(:lvar, :i),
                  s(:send,
                    s(:send,
                      s(:ivar, :@lu), :[],
                      s(:lvar, :i)), :[],
                    s(:lvar, :j)))),
              s(:block,
                s(:send,
                  s(:ivar, :@row_count), :times),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :lu_row_i,
                    s(:send,
                      s(:ivar, :@lu), :[],
                      s(:lvar, :i))),
                  s(:lvasgn, :kmax,
                    s(:send,
                      s(:array,
                        s(:lvar, :i),
                        s(:lvar, :j)), :min)),
                  s(:lvasgn, :s,
                    s(:int, 0)),
                  s(:block,
                    s(:send,
                      s(:lvar, :kmax), :times),
                    s(:args,
                      s(:arg, :k)),
                    s(:op_asgn,
                      s(:lvasgn, :s), :+,
                      s(:send,
                        s(:send,
                          s(:lvar, :lu_row_i), :[],
                          s(:lvar, :k)), :*,
                        s(:send,
                          s(:lvar, :lu_col_j), :[],
                          s(:lvar, :k))))),
                  s(:send,
                    s(:lvar, :lu_row_i), :[]=,
                    s(:lvar, :j),
                    s(:op_asgn,
                      s(:send,
                        s(:lvar, :lu_col_j), :[],
                        s(:lvar, :i)), :-,
                      s(:lvar, :s))))),
              s(:lvasgn, :p,
                s(:lvar, :j)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :j), :+,
                      s(:int, 1))), :upto,
                  s(:send,
                    s(:ivar, :@row_count), :-,
                    s(:int, 1))),
                s(:args,
                  s(:arg, :i)),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :lu_col_j), :[],
                          s(:lvar, :i)), :abs), :>,
                      s(:send,
                        s(:send,
                          s(:lvar, :lu_col_j), :[],
                          s(:lvar, :p)), :abs))),
                  s(:lvasgn, :p,
                    s(:lvar, :i)), nil)),
              s(:if,
                s(:begin,
                  s(:send,
                    s(:lvar, :p), :!=,
                    s(:lvar, :j))),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:ivar, :@column_count), :times),
                    s(:args,
                      s(:arg, :k)),
                    s(:begin,
                      s(:lvasgn, :t,
                        s(:send,
                          s(:send,
                            s(:ivar, :@lu), :[],
                            s(:lvar, :p)), :[],
                          s(:lvar, :k))),
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :p)), :[]=,
                        s(:lvar, :k),
                        s(:send,
                          s(:send,
                            s(:ivar, :@lu), :[],
                            s(:lvar, :j)), :[],
                          s(:lvar, :k))),
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :j)), :[]=,
                        s(:lvar, :k),
                        s(:lvar, :t)))),
                  s(:lvasgn, :k,
                    s(:send,
                      s(:ivar, :@pivots), :[],
                      s(:lvar, :p))),
                  s(:send,
                    s(:ivar, :@pivots), :[]=,
                    s(:lvar, :p),
                    s(:send,
                      s(:ivar, :@pivots), :[],
                      s(:lvar, :j))),
                  s(:send,
                    s(:ivar, :@pivots), :[]=,
                    s(:lvar, :j),
                    s(:lvar, :k)),
                  s(:ivasgn, :@pivot_sign,
                    s(:send,
                      s(:ivar, :@pivot_sign), :-@))), nil),
              s(:if,
                s(:begin,
                  s(:and,
                    s(:send,
                      s(:lvar, :j), :<,
                      s(:ivar, :@row_count)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :j)), :[],
                        s(:lvar, :j)), :!=,
                      s(:int, 0)))),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :j), :+,
                        s(:int, 1))), :upto,
                    s(:send,
                      s(:ivar, :@row_count), :-,
                      s(:int, 1))),
                  s(:args,
                    s(:arg, :i)),
                  s(:send,
                    s(:send,
                      s(:ivar, :@lu), :[],
                      s(:lvar, :i)), :[]=,
                    s(:lvar, :j),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :i)), :[],
                        s(:lvar, :j)), :quo,
                      s(:send,
                        s(:send,
                          s(:ivar, :@lu), :[],
                          s(:lvar, :j)), :[],
                        s(:lvar, :j))))), nil))))))))
