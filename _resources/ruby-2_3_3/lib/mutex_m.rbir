s(:begin,
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:module,
    s(:const, nil, :Mutex_m),
    s(:begin,
      s(:defs,
        s(:const, nil, :Mutex_m), :define_aliases,
        s(:args,
          s(:arg, :cl)),
        s(:send,
          s(:lvar, :cl), :module_eval,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      alias locked? mu_locked?\n"),
            s(:str, "      alias lock mu_lock\n"),
            s(:str, "      alias unlock mu_unlock\n"),
            s(:str, "      alias try_lock mu_try_lock\n"),
            s(:str, "      alias synchronize mu_synchronize\n"),
            s(:str, "    ")))),
      s(:defs,
        s(:const, nil, :Mutex_m), :append_features,
        s(:args,
          s(:arg, :cl)),
        s(:begin,
          s(:zsuper),
          s(:if,
            s(:send,
              s(:lvar, :cl), :instance_of?,
              s(:const, nil, :Module)), nil,
            s(:send, nil, :define_aliases,
              s(:lvar, :cl))))),
      s(:defs,
        s(:const, nil, :Mutex_m), :extend_object,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:lvar, :obj), :mu_extended))),
      s(:def, :mu_extended,
        s(:args),
        s(:begin,
          s(:if,
            s(:begin,
              s(:and,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:defined?,
                        s(:send, nil, :locked?)),
                      s(:defined?,
                        s(:send, nil, :lock))),
                    s(:defined?,
                      s(:send, nil, :unlock))),
                  s(:defined?,
                    s(:send, nil, :try_lock))),
                s(:defined?,
                  s(:send, nil, :synchronize)))), nil,
            s(:send,
              s(:const, nil, :Mutex_m), :define_aliases,
              s(:send, nil, :singleton_class))),
          s(:send, nil, :mu_initialize))),
      s(:def, :mu_synchronize,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:ivar, :@_mutex), :synchronize,
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :mu_locked?,
        s(:args),
        s(:send,
          s(:ivar, :@_mutex), :locked?)),
      s(:def, :mu_try_lock,
        s(:args),
        s(:send,
          s(:ivar, :@_mutex), :try_lock)),
      s(:def, :mu_lock,
        s(:args),
        s(:send,
          s(:ivar, :@_mutex), :lock)),
      s(:def, :mu_unlock,
        s(:args),
        s(:send,
          s(:ivar, :@_mutex), :unlock)),
      s(:def, :sleep,
        s(:args,
          s(:optarg, :timeout,
            s(:nil))),
        s(:send,
          s(:ivar, :@_mutex), :sleep,
          s(:lvar, :timeout))),
      s(:send, nil, :private),
      s(:def, :mu_initialize,
        s(:args),
        s(:ivasgn, :@_mutex,
          s(:send,
            s(:const, nil, :Mutex), :new))),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:send, nil, :mu_initialize),
          s(:zsuper))))))
