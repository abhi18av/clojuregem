s(:module,
  s(:const, nil, :FileUtils),
  s(:begin,
    s(:defs,
      s(:self), :private_module_function,
      s(:args,
        s(:arg, :name)),
      s(:begin,
        s(:send, nil, :module_function,
          s(:lvar, :name)),
        s(:send, nil, :private_class_method,
          s(:lvar, :name)))),
    s(:casgn, nil, :OPT_TABLE,
      s(:hash)),
    s(:def, :pwd,
      s(:args),
      s(:send,
        s(:const, nil, :Dir), :pwd)),
    s(:send, nil, :module_function,
      s(:sym, :pwd)),
    s(:alias,
      s(:sym, :getwd),
      s(:sym, :pwd)),
    s(:send, nil, :module_function,
      s(:sym, :getwd)),
    s(:def, :cd,
      s(:args,
        s(:arg, :dir),
        s(:optarg, :options,
          s(:hash)),
        s(:blockarg, :block)),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "cd"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "cd "),
              s(:begin,
                s(:lvar, :dir)))), nil),
        s(:send,
          s(:const, nil, :Dir), :chdir,
          s(:lvar, :dir),
          s(:block_pass,
            s(:lvar, :block))),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :verbose)),
            s(:lvar, :block)),
          s(:send, nil, :fu_output_message,
            s(:str, "cd -")), nil))),
    s(:send, nil, :module_function,
      s(:sym, :cd)),
    s(:alias,
      s(:sym, :chdir),
      s(:sym, :cd)),
    s(:send, nil, :module_function,
      s(:sym, :chdir)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "cd"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "chdir"),
        s(:array,
          s(:sym, :verbose)))),
    s(:def, :uptodate?,
      s(:args,
        s(:arg, :new),
        s(:arg, :old_list)),
      s(:begin,
        s(:if,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:lvar, :new)), nil,
          s(:return,
            s(:false))),
        s(:lvasgn, :new_time,
          s(:send,
            s(:const, nil, :File), :mtime,
            s(:lvar, :new))),
        s(:block,
          s(:send,
            s(:lvar, :old_list), :each),
          s(:args,
            s(:arg, :old)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :old)),
            s(:if,
              s(:send,
                s(:lvar, :new_time), :>,
                s(:send,
                  s(:const, nil, :File), :mtime,
                  s(:lvar, :old))), nil,
              s(:return,
                s(:false))), nil)),
        s(:true))),
    s(:send, nil, :module_function,
      s(:sym, :uptodate?)),
    s(:def, :remove_trailing_slash,
      s(:args,
        s(:arg, :dir)),
      s(:if,
        s(:send,
          s(:lvar, :dir), :==,
          s(:str, "/")),
        s(:lvar, :dir),
        s(:send,
          s(:lvar, :dir), :chomp,
          s(:str, "/")))),
    s(:send, nil, :private_module_function,
      s(:sym, :remove_trailing_slash)),
    s(:def, :mkdir,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "mkdir"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "mkdir "),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :mode)),
                  s(:begin,
                    s(:send,
                      s(:str, "-m %03o "), :%,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :mode)))),
                  s(:str, ""))),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :dir)),
          s(:send, nil, :fu_mkdir,
            s(:lvar, :dir),
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :mode)))))),
    s(:send, nil, :module_function,
      s(:sym, :mkdir)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "mkdir"),
      s(:array,
        s(:sym, :mode),
        s(:sym, :noop),
        s(:sym, :verbose))),
    s(:def, :mkdir_p,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "mkdir_p"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "mkdir -p "),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :mode)),
                  s(:begin,
                    s(:send,
                      s(:str, "-m %03o "), :%,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :mode)))),
                  s(:str, ""))),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return,
            s(:splat,
              s(:lvar, :list))), nil),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :list), :map),
              s(:args,
                s(:arg, :path)),
              s(:send, nil, :remove_trailing_slash,
                s(:lvar, :path))), :each),
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:send, nil, :fu_mkdir,
                    s(:lvar, :path),
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :mode))),
                  s(:next)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :SystemCallError)), nil,
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :path)),
                    s(:next), nil)), nil)),
            s(:lvasgn, :stack,
              s(:array)),
            s(:until,
              s(:send,
                s(:lvar, :path), :==,
                s(:send,
                  s(:lvar, :stack), :last)),
              s(:begin,
                s(:send,
                  s(:lvar, :stack), :push,
                  s(:lvar, :path)),
                s(:lvasgn, :path,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:lvar, :path))))),
            s(:block,
              s(:send,
                s(:lvar, :stack), :reverse_each),
              s(:args,
                s(:arg, :dir)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :fu_mkdir,
                    s(:lvar, :dir),
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :mode))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemCallError)), nil,
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :directory?,
                        s(:lvar, :dir)), nil,
                      s(:send, nil, :raise))), nil))))),
        s(:return,
          s(:splat,
            s(:lvar, :list))))),
    s(:send, nil, :module_function,
      s(:sym, :mkdir_p)),
    s(:alias,
      s(:sym, :mkpath),
      s(:sym, :mkdir_p)),
    s(:alias,
      s(:sym, :makedirs),
      s(:sym, :mkdir_p)),
    s(:send, nil, :module_function,
      s(:sym, :mkpath)),
    s(:send, nil, :module_function,
      s(:sym, :makedirs)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "mkdir_p"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "mkpath"),
        s(:send,
          s(:const, nil, :OPT_TABLE), :[]=,
          s(:str, "makedirs"),
          s(:array,
            s(:sym, :mode),
            s(:sym, :noop),
            s(:sym, :verbose))))),
    s(:def, :fu_mkdir,
      s(:args,
        s(:arg, :path),
        s(:arg, :mode)),
      s(:begin,
        s(:lvasgn, :path,
          s(:send, nil, :remove_trailing_slash,
            s(:lvar, :path))),
        s(:if,
          s(:lvar, :mode),
          s(:begin,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:lvar, :path),
              s(:lvar, :mode)),
            s(:send,
              s(:const, nil, :File), :chmod,
              s(:lvar, :mode),
              s(:lvar, :path))),
          s(:send,
            s(:const, nil, :Dir), :mkdir,
            s(:lvar, :path))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_mkdir)),
    s(:def, :rmdir,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "rmdir"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:lvasgn, :parents,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :parents))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "rmdir "),
              s(:begin,
                s(:if,
                  s(:lvar, :parents),
                  s(:str, "-p "),
                  s(:str, ""))),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :dir)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send,
                  s(:const, nil, :Dir), :rmdir,
                  s(:lvasgn, :dir,
                    s(:send, nil, :remove_trailing_slash,
                      s(:lvar, :dir)))),
                s(:if,
                  s(:lvar, :parents),
                  s(:until,
                    s(:or,
                      s(:send,
                        s(:begin,
                          s(:lvasgn, :parent,
                            s(:send,
                              s(:const, nil, :File), :dirname,
                              s(:lvar, :dir)))), :==,
                        s(:str, ".")),
                      s(:send,
                        s(:lvar, :parent), :==,
                        s(:lvar, :dir))),
                    s(:begin,
                      s(:lvasgn, :dir,
                        s(:lvar, :parent)),
                      s(:send,
                        s(:const, nil, :Dir), :rmdir,
                        s(:lvar, :dir)))), nil)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ENOTEMPTY),
                  s(:const,
                    s(:const, nil, :Errno), :EEXIST),
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)), nil, nil), nil))))),
    s(:send, nil, :module_function,
      s(:sym, :rmdir)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "rmdir"),
      s(:array,
        s(:sym, :parents),
        s(:sym, :noop),
        s(:sym, :verbose))),
    s(:def, :ln,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "ln"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "ln"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, " -f"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :src),
                      s(:lvar, :dest)), :flatten), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send, nil, :fu_each_src_dest0,
            s(:lvar, :src),
            s(:lvar, :dest)),
          s(:args,
            s(:arg, :s),
            s(:arg, :d)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :force)),
              s(:send, nil, :remove_file,
                s(:lvar, :d),
                s(:true)), nil),
            s(:send,
              s(:const, nil, :File), :link,
              s(:lvar, :s),
              s(:lvar, :d)))))),
    s(:send, nil, :module_function,
      s(:sym, :ln)),
    s(:alias,
      s(:sym, :link),
      s(:sym, :ln)),
    s(:send, nil, :module_function,
      s(:sym, :link)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "ln"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "link"),
        s(:array,
          s(:sym, :force),
          s(:sym, :noop),
          s(:sym, :verbose)))),
    s(:def, :ln_s,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "ln_s"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "ln -s"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, "f"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :src),
                      s(:lvar, :dest)), :flatten), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send, nil, :fu_each_src_dest0,
            s(:lvar, :src),
            s(:lvar, :dest)),
          s(:args,
            s(:arg, :s),
            s(:arg, :d)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :force)),
              s(:send, nil, :remove_file,
                s(:lvar, :d),
                s(:true)), nil),
            s(:send,
              s(:const, nil, :File), :symlink,
              s(:lvar, :s),
              s(:lvar, :d)))))),
    s(:send, nil, :module_function,
      s(:sym, :ln_s)),
    s(:alias,
      s(:sym, :symlink),
      s(:sym, :ln_s)),
    s(:send, nil, :module_function,
      s(:sym, :symlink)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "ln_s"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "symlink"),
        s(:array,
          s(:sym, :force),
          s(:sym, :noop),
          s(:sym, :verbose)))),
    s(:def, :ln_sf,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "ln_sf"))),
        s(:lvasgn, :options,
          s(:send,
            s(:lvar, :options), :dup)),
        s(:send,
          s(:lvar, :options), :[]=,
          s(:sym, :force),
          s(:true)),
        s(:send, nil, :ln_s,
          s(:lvar, :src),
          s(:lvar, :dest),
          s(:lvar, :options)))),
    s(:send, nil, :module_function,
      s(:sym, :ln_sf)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "ln_sf"),
      s(:array,
        s(:sym, :noop),
        s(:sym, :verbose))),
    s(:def, :cp,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "cp"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "cp"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :preserve)),
                  s(:str, " -p"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :src),
                      s(:lvar, :dest)), :flatten), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send, nil, :fu_each_src_dest,
            s(:lvar, :src),
            s(:lvar, :dest)),
          s(:args,
            s(:arg, :s),
            s(:arg, :d)),
          s(:send, nil, :copy_file,
            s(:lvar, :s),
            s(:lvar, :d),
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :preserve)))))),
    s(:send, nil, :module_function,
      s(:sym, :cp)),
    s(:alias,
      s(:sym, :copy),
      s(:sym, :cp)),
    s(:send, nil, :module_function,
      s(:sym, :copy)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "cp"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "copy"),
        s(:array,
          s(:sym, :preserve),
          s(:sym, :noop),
          s(:sym, :verbose)))),
    s(:def, :cp_r,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "cp_r"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "cp -r"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :preserve)),
                  s(:str, "p"),
                  s(:str, ""))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :remove_destination)),
                  s(:str, " --remove-destination"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :src),
                      s(:lvar, :dest)), :flatten), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:lvasgn, :options,
          s(:send,
            s(:lvar, :options), :dup)),
        s(:if,
          s(:send,
            s(:lvar, :options), :key?,
            s(:sym, :dereference_root)), nil,
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :dereference_root),
            s(:true))),
        s(:block,
          s(:send, nil, :fu_each_src_dest,
            s(:lvar, :src),
            s(:lvar, :dest)),
          s(:args,
            s(:arg, :s),
            s(:arg, :d)),
          s(:send, nil, :copy_entry,
            s(:lvar, :s),
            s(:lvar, :d),
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :preserve)),
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :dereference_root)),
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :remove_destination)))))),
    s(:send, nil, :module_function,
      s(:sym, :cp_r)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "cp_r"),
      s(:array,
        s(:sym, :preserve),
        s(:sym, :noop),
        s(:sym, :verbose),
        s(:sym, :dereference_root),
        s(:sym, :remove_destination))),
    s(:def, :copy_entry,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :preserve,
          s(:false)),
        s(:optarg, :dereference_root,
          s(:false)),
        s(:optarg, :remove_destination,
          s(:false))),
      s(:send,
        s(:send,
          s(:const, nil, :Entry_), :new,
          s(:lvar, :src),
          s(:nil),
          s(:lvar, :dereference_root)), :wrap_traverse,
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :ent)),
          s(:begin,
            s(:lvasgn, :destent,
              s(:send,
                s(:const, nil, :Entry_), :new,
                s(:lvar, :dest),
                s(:send,
                  s(:lvar, :ent), :rel),
                s(:false))),
            s(:if,
              s(:and,
                s(:lvar, :remove_destination),
                s(:send,
                  s(:const, nil, :File), :file?,
                  s(:send,
                    s(:lvar, :destent), :path))),
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:send,
                  s(:lvar, :destent), :path)), nil),
            s(:send,
              s(:lvar, :ent), :copy,
              s(:send,
                s(:lvar, :destent), :path)))),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :ent)),
          s(:begin,
            s(:lvasgn, :destent,
              s(:send,
                s(:const, nil, :Entry_), :new,
                s(:lvar, :dest),
                s(:send,
                  s(:lvar, :ent), :rel),
                s(:false))),
            s(:if,
              s(:lvar, :preserve),
              s(:send,
                s(:lvar, :ent), :copy_metadata,
                s(:send,
                  s(:lvar, :destent), :path)), nil))))),
    s(:send, nil, :module_function,
      s(:sym, :copy_entry)),
    s(:def, :copy_file,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :preserve,
          s(:false)),
        s(:optarg, :dereference,
          s(:true))),
      s(:begin,
        s(:lvasgn, :ent,
          s(:send,
            s(:const, nil, :Entry_), :new,
            s(:lvar, :src),
            s(:nil),
            s(:lvar, :dereference))),
        s(:send,
          s(:lvar, :ent), :copy_file,
          s(:lvar, :dest)),
        s(:if,
          s(:lvar, :preserve),
          s(:send,
            s(:lvar, :ent), :copy_metadata,
            s(:lvar, :dest)), nil))),
    s(:send, nil, :module_function,
      s(:sym, :copy_file)),
    s(:def, :copy_stream,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest)),
      s(:send,
        s(:const, nil, :IO), :copy_stream,
        s(:lvar, :src),
        s(:lvar, :dest))),
    s(:send, nil, :module_function,
      s(:sym, :copy_stream)),
    s(:def, :mv,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "mv"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "mv"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, " -f"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :src),
                      s(:lvar, :dest)), :flatten), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send, nil, :fu_each_src_dest,
            s(:lvar, :src),
            s(:lvar, :dest)),
          s(:args,
            s(:arg, :s),
            s(:arg, :d)),
          s(:begin,
            s(:lvasgn, :destent,
              s(:send,
                s(:const, nil, :Entry_), :new,
                s(:lvar, :d),
                s(:nil),
                s(:true))),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :destent), :exist?),
                    s(:if,
                      s(:send,
                        s(:lvar, :destent), :directory?),
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :Errno), :EEXIST),
                        s(:lvar, :d)),
                      s(:if,
                        s(:send, nil, :rename_cannot_overwrite_file?),
                        s(:send,
                          s(:lvar, :destent), :remove_file), nil)), nil),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :File), :rename,
                        s(:lvar, :s),
                        s(:lvar, :d)),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :EXDEV)), nil,
                        s(:begin,
                          s(:send, nil, :copy_entry,
                            s(:lvar, :s),
                            s(:lvar, :d),
                            s(:true)),
                          s(:if,
                            s(:send,
                              s(:lvar, :options), :[],
                              s(:sym, :secure)),
                            s(:send, nil, :remove_entry_secure,
                              s(:lvar, :s),
                              s(:send,
                                s(:lvar, :options), :[],
                                s(:sym, :force))),
                            s(:send, nil, :remove_entry,
                              s(:lvar, :s),
                              s(:send,
                                s(:lvar, :options), :[],
                                s(:sym, :force)))))), nil))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :SystemCallError)), nil,
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :force)), nil,
                    s(:send, nil, :raise))), nil)))))),
    s(:send, nil, :module_function,
      s(:sym, :mv)),
    s(:alias,
      s(:sym, :move),
      s(:sym, :mv)),
    s(:send, nil, :module_function,
      s(:sym, :move)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "mv"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "move"),
        s(:array,
          s(:sym, :force),
          s(:sym, :noop),
          s(:sym, :verbose),
          s(:sym, :secure)))),
    s(:def, :rename_cannot_overwrite_file?,
      s(:args),
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "emx"),
          s(:regopt)),
        s(:const, nil, :RUBY_PLATFORM))),
    s(:send, nil, :private_module_function,
      s(:sym, :rename_cannot_overwrite_file?)),
    s(:def, :rm,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "rm"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "rm"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, " -f"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :path)),
          s(:send, nil, :remove_file,
            s(:lvar, :path),
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :force)))))),
    s(:send, nil, :module_function,
      s(:sym, :rm)),
    s(:alias,
      s(:sym, :remove),
      s(:sym, :rm)),
    s(:send, nil, :module_function,
      s(:sym, :remove)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "rm"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "remove"),
        s(:array,
          s(:sym, :force),
          s(:sym, :noop),
          s(:sym, :verbose)))),
    s(:def, :rm_f,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "rm_f"))),
        s(:lvasgn, :options,
          s(:send,
            s(:lvar, :options), :dup)),
        s(:send,
          s(:lvar, :options), :[]=,
          s(:sym, :force),
          s(:true)),
        s(:send, nil, :rm,
          s(:lvar, :list),
          s(:lvar, :options)))),
    s(:send, nil, :module_function,
      s(:sym, :rm_f)),
    s(:alias,
      s(:sym, :safe_unlink),
      s(:sym, :rm_f)),
    s(:send, nil, :module_function,
      s(:sym, :safe_unlink)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "rm_f"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "safe_unlink"),
        s(:array,
          s(:sym, :noop),
          s(:sym, :verbose)))),
    s(:def, :rm_r,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "rm_r"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "rm -r"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, "f"),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :path)),
          s(:if,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :secure)),
            s(:send, nil, :remove_entry_secure,
              s(:lvar, :path),
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :force))),
            s(:send, nil, :remove_entry,
              s(:lvar, :path),
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :force))))))),
    s(:send, nil, :module_function,
      s(:sym, :rm_r)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "rm_r"),
      s(:array,
        s(:sym, :force),
        s(:sym, :noop),
        s(:sym, :verbose),
        s(:sym, :secure))),
    s(:def, :rm_rf,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "rm_rf"))),
        s(:lvasgn, :options,
          s(:send,
            s(:lvar, :options), :dup)),
        s(:send,
          s(:lvar, :options), :[]=,
          s(:sym, :force),
          s(:true)),
        s(:send, nil, :rm_r,
          s(:lvar, :list),
          s(:lvar, :options)))),
    s(:send, nil, :module_function,
      s(:sym, :rm_rf)),
    s(:alias,
      s(:sym, :rmtree),
      s(:sym, :rm_rf)),
    s(:send, nil, :module_function,
      s(:sym, :rmtree)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "rm_rf"),
      s(:send,
        s(:const, nil, :OPT_TABLE), :[]=,
        s(:str, "rmtree"),
        s(:array,
          s(:sym, :noop),
          s(:sym, :verbose),
          s(:sym, :secure)))),
    s(:def, :remove_entry_secure,
      s(:args,
        s(:arg, :path),
        s(:optarg, :force,
          s(:false))),
      s(:rescue,
        s(:begin,
          s(:if,
            s(:send, nil, :fu_have_symlink?), nil,
            s(:begin,
              s(:send, nil, :remove_entry,
                s(:lvar, :path),
                s(:lvar, :force)),
              s(:return))),
          s(:lvasgn, :fullpath,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :path))),
          s(:lvasgn, :st,
            s(:send,
              s(:const, nil, :File), :lstat,
              s(:lvar, :fullpath))),
          s(:if,
            s(:send,
              s(:lvar, :st), :directory?), nil,
            s(:begin,
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:lvar, :fullpath)),
              s(:return))),
          s(:lvasgn, :parent_st,
            s(:send,
              s(:const, nil, :File), :stat,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :fullpath)))),
          s(:if,
            s(:send,
              s(:lvar, :parent_st), :world_writable?), nil,
            s(:begin,
              s(:send, nil, :remove_entry,
                s(:lvar, :path),
                s(:lvar, :force)),
              s(:return))),
          s(:if,
            s(:send,
              s(:lvar, :parent_st), :sticky?), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "parent directory is world writable, FileUtils#remove_entry_secure does not work; abort: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :inspect)),
                s(:str, " (parent directory mode "),
                s(:begin,
                  s(:send,
                    s(:str, "%o"), :%,
                    s(:send,
                      s(:lvar, :parent_st), :mode))),
                s(:str, ")")))),
          s(:lvasgn, :euid,
            s(:send,
              s(:const, nil, :Process), :euid)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:send,
                s(:lvar, :fullpath), :+,
                s(:str, "/."))),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:if,
                s(:send, nil, :fu_stat_identical_entry?,
                  s(:lvar, :st),
                  s(:send,
                    s(:lvar, :f), :stat)), nil,
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :fullpath)),
                  s(:return))),
              s(:send,
                s(:lvar, :f), :chown,
                s(:lvar, :euid),
                s(:int, -1)),
              s(:send,
                s(:lvar, :f), :chmod,
                s(:int, 448)),
              s(:if,
                s(:send, nil, :fu_stat_identical_entry?,
                  s(:lvar, :st),
                  s(:send,
                    s(:const, nil, :File), :lstat,
                    s(:lvar, :fullpath))), nil,
                s(:begin,
                  s(:send,
                    s(:const, nil, :File), :unlink,
                    s(:lvar, :fullpath)),
                  s(:return))))),
          s(:lvasgn, :root,
            s(:send,
              s(:const, nil, :Entry_), :new,
              s(:lvar, :path))),
          s(:block,
            s(:send,
              s(:lvar, :root), :preorder_traverse),
            s(:args,
              s(:arg, :ent)),
            s(:if,
              s(:send,
                s(:lvar, :ent), :directory?),
              s(:begin,
                s(:send,
                  s(:lvar, :ent), :chown,
                  s(:lvar, :euid),
                  s(:int, -1)),
                s(:send,
                  s(:lvar, :ent), :chmod,
                  s(:int, 448))), nil)),
          s(:block,
            s(:send,
              s(:lvar, :root), :postorder_traverse),
            s(:args,
              s(:arg, :ent)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :ent), :remove),
                s(:resbody, nil, nil,
                  s(:if,
                    s(:lvar, :force), nil,
                    s(:send, nil, :raise))), nil)))),
        s(:resbody, nil, nil,
          s(:if,
            s(:lvar, :force), nil,
            s(:send, nil, :raise))), nil)),
    s(:send, nil, :module_function,
      s(:sym, :remove_entry_secure)),
    s(:def, :fu_have_symlink?,
      s(:args),
      s(:rescue,
        s(:send,
          s(:const, nil, :File), :symlink,
          s(:nil),
          s(:nil)),
        s(:resbody,
          s(:array,
            s(:const, nil, :NotImplementedError)), nil,
          s(:return,
            s(:false))),
        s(:resbody,
          s(:array,
            s(:const, nil, :TypeError)), nil,
          s(:return,
            s(:true))), nil)),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_have_symlink?)),
    s(:def, :fu_stat_identical_entry?,
      s(:args,
        s(:arg, :a),
        s(:arg, :b)),
      s(:and,
        s(:send,
          s(:send,
            s(:lvar, :a), :dev), :==,
          s(:send,
            s(:lvar, :b), :dev)),
        s(:send,
          s(:send,
            s(:lvar, :a), :ino), :==,
          s(:send,
            s(:lvar, :b), :ino)))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_stat_identical_entry?)),
    s(:def, :remove_entry,
      s(:args,
        s(:arg, :path),
        s(:optarg, :force,
          s(:false))),
      s(:rescue,
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Entry_), :new,
              s(:lvar, :path)), :postorder_traverse),
          s(:args,
            s(:arg, :ent)),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :ent), :remove),
              s(:resbody, nil, nil,
                s(:if,
                  s(:lvar, :force), nil,
                  s(:send, nil, :raise))), nil))),
        s(:resbody, nil, nil,
          s(:if,
            s(:lvar, :force), nil,
            s(:send, nil, :raise))), nil)),
    s(:send, nil, :module_function,
      s(:sym, :remove_entry)),
    s(:def, :remove_file,
      s(:args,
        s(:arg, :path),
        s(:optarg, :force,
          s(:false))),
      s(:rescue,
        s(:send,
          s(:send,
            s(:const, nil, :Entry_), :new,
            s(:lvar, :path)), :remove_file),
        s(:resbody, nil, nil,
          s(:if,
            s(:lvar, :force), nil,
            s(:send, nil, :raise))), nil)),
    s(:send, nil, :module_function,
      s(:sym, :remove_file)),
    s(:def, :remove_dir,
      s(:args,
        s(:arg, :path),
        s(:optarg, :force,
          s(:false))),
      s(:send, nil, :remove_entry,
        s(:lvar, :path),
        s(:lvar, :force))),
    s(:send, nil, :module_function,
      s(:sym, :remove_dir)),
    s(:def, :compare_file,
      s(:args,
        s(:arg, :a),
        s(:arg, :b)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:const, nil, :File), :size,
              s(:lvar, :a)), :==,
            s(:send,
              s(:const, nil, :File), :size,
              s(:lvar, :b))), nil,
          s(:return,
            s(:false))),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:lvar, :a),
            s(:str, "rb")),
          s(:args,
            s(:arg, :fa)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :b),
              s(:str, "rb")),
            s(:args,
              s(:arg, :fb)),
            s(:return,
              s(:send, nil, :compare_stream,
                s(:lvar, :fa),
                s(:lvar, :fb))))))),
    s(:send, nil, :module_function,
      s(:sym, :compare_file)),
    s(:alias,
      s(:sym, :identical?),
      s(:sym, :compare_file)),
    s(:alias,
      s(:sym, :cmp),
      s(:sym, :compare_file)),
    s(:send, nil, :module_function,
      s(:sym, :identical?)),
    s(:send, nil, :module_function,
      s(:sym, :cmp)),
    s(:def, :compare_stream,
      s(:args,
        s(:arg, :a),
        s(:arg, :b)),
      s(:begin,
        s(:lvasgn, :bsize,
          s(:send, nil, :fu_stream_blksize,
            s(:lvar, :a),
            s(:lvar, :b))),
        s(:lvasgn, :sa,
          s(:str, "")),
        s(:lvasgn, :sb,
          s(:str, "")),
        s(:while_post,
          s(:send,
            s(:lvar, :sa), :==,
            s(:lvar, :sb)),
          s(:kwbegin,
            s(:send,
              s(:lvar, :a), :read,
              s(:lvar, :bsize),
              s(:lvar, :sa)),
            s(:send,
              s(:lvar, :b), :read,
              s(:lvar, :bsize),
              s(:lvar, :sb)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :sa), :empty?),
                s(:send,
                  s(:lvar, :sb), :empty?)),
              s(:return,
                s(:true)), nil))),
        s(:false))),
    s(:send, nil, :module_function,
      s(:sym, :compare_stream)),
    s(:def, :install,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "install"))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "install -c"),
              s(:begin,
                s(:and,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :preserve)),
                  s(:str, " -p"))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :mode)),
                  s(:begin,
                    s(:send,
                      s(:str, " -m 0%o"), :%,
                      s(:send,
                        s(:lvar, :options), :[],
                        s(:sym, :mode)))),
                  s(:str, ""))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :src),
                      s(:lvar, :dest)), :flatten), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send, nil, :fu_each_src_dest,
            s(:lvar, :src),
            s(:lvar, :dest)),
          s(:args,
            s(:arg, :s),
            s(:arg, :d)),
          s(:begin,
            s(:lvasgn, :st,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:lvar, :s))),
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :d)),
                s(:send, nil, :compare_file,
                  s(:lvar, :s),
                  s(:lvar, :d))), nil,
              s(:begin,
                s(:send, nil, :remove_file,
                  s(:lvar, :d),
                  s(:true)),
                s(:send, nil, :copy_file,
                  s(:lvar, :s),
                  s(:lvar, :d)),
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :preserve)),
                  s(:send,
                    s(:const, nil, :File), :utime,
                    s(:send,
                      s(:lvar, :st), :atime),
                    s(:send,
                      s(:lvar, :st), :mtime),
                    s(:lvar, :d)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :mode)),
                  s(:send,
                    s(:const, nil, :File), :chmod,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :mode)),
                    s(:lvar, :d)), nil))))))),
    s(:send, nil, :module_function,
      s(:sym, :install)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "install"),
      s(:array,
        s(:sym, :mode),
        s(:sym, :preserve),
        s(:sym, :noop),
        s(:sym, :verbose))),
    s(:def, :user_mask,
      s(:args,
        s(:arg, :target)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :target), :each_char), :inject,
          s(:int, 0)),
        s(:args,
          s(:arg, :mask),
          s(:arg, :chr)),
        s(:case,
          s(:lvar, :chr),
          s(:when,
            s(:str, "u"),
            s(:send,
              s(:lvar, :mask), :|,
              s(:int, 2496))),
          s(:when,
            s(:str, "g"),
            s(:send,
              s(:lvar, :mask), :|,
              s(:int, 1080))),
          s(:when,
            s(:str, "o"),
            s(:send,
              s(:lvar, :mask), :|,
              s(:int, 519))),
          s(:when,
            s(:str, "a"),
            s(:send,
              s(:lvar, :mask), :|,
              s(:int, 4095))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "invalid `who' symbol in file mode: "),
              s(:begin,
                s(:lvar, :chr))))))),
    s(:send, nil, :private_module_function,
      s(:sym, :user_mask)),
    s(:def, :apply_mask,
      s(:args,
        s(:arg, :mode),
        s(:arg, :user_mask),
        s(:arg, :op),
        s(:arg, :mode_mask)),
      s(:case,
        s(:lvar, :op),
        s(:when,
          s(:str, "="),
          s(:send,
            s(:begin,
              s(:send,
                s(:lvar, :mode), :&,
                s(:send,
                  s(:lvar, :user_mask), :~))), :|,
            s(:begin,
              s(:send,
                s(:lvar, :user_mask), :&,
                s(:lvar, :mode_mask))))),
        s(:when,
          s(:str, "+"),
          s(:send,
            s(:lvar, :mode), :|,
            s(:begin,
              s(:send,
                s(:lvar, :user_mask), :&,
                s(:lvar, :mode_mask))))),
        s(:when,
          s(:str, "-"),
          s(:send,
            s(:lvar, :mode), :&,
            s(:send,
              s(:begin,
                s(:send,
                  s(:lvar, :user_mask), :&,
                  s(:lvar, :mode_mask))), :~))), nil)),
    s(:send, nil, :private_module_function,
      s(:sym, :apply_mask)),
    s(:def, :symbolic_modes_to_i,
      s(:args,
        s(:arg, :mode_sym),
        s(:arg, :path)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :mode_sym), :split,
            s(:regexp,
              s(:str, ","),
              s(:regopt))), :inject,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :File), :stat,
                s(:lvar, :path)), :mode), :&,
            s(:int, 4095))),
        s(:args,
          s(:arg, :current_mode),
          s(:arg, :clause)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :target),
              s(:splat,
                s(:lvasgn, :actions))),
            s(:send,
              s(:lvar, :clause), :split,
              s(:regexp,
                s(:str, "([=+-])"),
                s(:regopt)))),
          s(:if,
            s(:send,
              s(:lvar, :actions), :empty?),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "invalid file mode: "),
                s(:begin,
                  s(:lvar, :mode_sym)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :target), :empty?),
            s(:lvasgn, :target,
              s(:str, "a")), nil),
          s(:lvasgn, :user_mask,
            s(:send, nil, :user_mask,
              s(:lvar, :target))),
          s(:block,
            s(:send,
              s(:lvar, :actions), :each_slice,
              s(:int, 2)),
            s(:args,
              s(:arg, :op),
              s(:arg, :perm)),
            s(:begin,
              s(:lvasgn, :need_apply,
                s(:send,
                  s(:lvar, :op), :==,
                  s(:str, "="))),
              s(:lvasgn, :mode_mask,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:or,
                          s(:lvar, :perm),
                          s(:str, ""))), :each_char), :inject,
                    s(:int, 0)),
                  s(:args,
                    s(:arg, :mask),
                    s(:arg, :chr)),
                  s(:case,
                    s(:lvar, :chr),
                    s(:when,
                      s(:str, "r"),
                      s(:send,
                        s(:lvar, :mask), :|,
                        s(:int, 292))),
                    s(:when,
                      s(:str, "w"),
                      s(:send,
                        s(:lvar, :mask), :|,
                        s(:int, 146))),
                    s(:when,
                      s(:str, "x"),
                      s(:send,
                        s(:lvar, :mask), :|,
                        s(:int, 73))),
                    s(:when,
                      s(:str, "X"),
                      s(:if,
                        s(:send,
                          s(:const, nil, :FileTest), :directory?,
                          s(:lvar, :path)),
                        s(:send,
                          s(:lvar, :mask), :|,
                          s(:int, 73)),
                        s(:lvar, :mask))),
                    s(:when,
                      s(:str, "s"),
                      s(:send,
                        s(:lvar, :mask), :|,
                        s(:int, 3072))),
                    s(:when,
                      s(:str, "t"),
                      s(:send,
                        s(:lvar, :mask), :|,
                        s(:int, 512))),
                    s(:when,
                      s(:str, "u"),
                      s(:str, "g"),
                      s(:str, "o"),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :mask), :nonzero?),
                          s(:lvasgn, :current_mode,
                            s(:send, nil, :apply_mask,
                              s(:lvar, :current_mode),
                              s(:lvar, :user_mask),
                              s(:lvar, :op),
                              s(:lvar, :mask))), nil),
                        s(:lvasgn, :need_apply,
                          s(:false)),
                        s(:lvasgn, :copy_mask,
                          s(:send, nil, :user_mask,
                            s(:lvar, :chr))),
                        s(:send,
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:lvar, :current_mode), :&,
                                s(:lvar, :copy_mask))), :/,
                            s(:begin,
                              s(:send,
                                s(:lvar, :copy_mask), :&,
                                s(:int, 73)))), :*,
                          s(:begin,
                            s(:send,
                              s(:lvar, :user_mask), :&,
                              s(:int, 73)))))),
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:dstr,
                        s(:str, "invalid `perm' symbol in file mode: "),
                        s(:begin,
                          s(:lvar, :chr))))))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :mode_mask), :nonzero?),
                  s(:lvar, :need_apply)),
                s(:lvasgn, :current_mode,
                  s(:send, nil, :apply_mask,
                    s(:lvar, :current_mode),
                    s(:lvar, :user_mask),
                    s(:lvar, :op),
                    s(:lvar, :mode_mask))), nil))),
          s(:lvar, :current_mode)))),
    s(:send, nil, :private_module_function,
      s(:sym, :symbolic_modes_to_i)),
    s(:def, :fu_mode,
      s(:args,
        s(:arg, :mode),
        s(:arg, :path)),
      s(:if,
        s(:send,
          s(:lvar, :mode), :is_a?,
          s(:const, nil, :String)),
        s(:send, nil, :symbolic_modes_to_i,
          s(:lvar, :mode),
          s(:lvar, :path)),
        s(:lvar, :mode))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_mode)),
    s(:def, :mode_to_s,
      s(:args,
        s(:arg, :mode)),
      s(:if,
        s(:send,
          s(:lvar, :mode), :is_a?,
          s(:const, nil, :String)),
        s(:lvar, :mode),
        s(:send,
          s(:str, "%o"), :%,
          s(:lvar, :mode)))),
    s(:send, nil, :private_module_function,
      s(:sym, :mode_to_s)),
    s(:def, :chmod,
      s(:args,
        s(:arg, :mode),
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "chmod"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:send, nil, :sprintf,
              s(:str, "chmod %s %s"),
              s(:send, nil, :mode_to_s,
                s(:lvar, :mode)),
              s(:send,
                s(:lvar, :list), :join,
                s(:str, " ")))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:send,
              s(:const, nil, :Entry_), :new,
              s(:lvar, :path)), :chmod,
            s(:send, nil, :fu_mode,
              s(:lvar, :mode),
              s(:lvar, :path)))))),
    s(:send, nil, :module_function,
      s(:sym, :chmod)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "chmod"),
      s(:array,
        s(:sym, :noop),
        s(:sym, :verbose))),
    s(:def, :chmod_R,
      s(:args,
        s(:arg, :mode),
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "chmod_R"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:send, nil, :sprintf,
              s(:str, "chmod -R%s %s %s"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, "f"),
                  s(:str, ""))),
              s(:send, nil, :mode_to_s,
                s(:lvar, :mode)),
              s(:send,
                s(:lvar, :list), :join,
                s(:str, " ")))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :root)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Entry_), :new,
                s(:lvar, :root)), :traverse),
            s(:args,
              s(:arg, :ent)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :ent), :chmod,
                  s(:send, nil, :fu_mode,
                    s(:lvar, :mode),
                    s(:send,
                      s(:lvar, :ent), :path))),
                s(:resbody, nil, nil,
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :force)), nil,
                    s(:send, nil, :raise))), nil)))))),
    s(:send, nil, :module_function,
      s(:sym, :chmod_R)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "chmod_R"),
      s(:array,
        s(:sym, :noop),
        s(:sym, :verbose),
        s(:sym, :force))),
    s(:def, :chown,
      s(:args,
        s(:arg, :user),
        s(:arg, :group),
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "chown"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:send, nil, :sprintf,
              s(:str, "chown %s %s"),
              s(:begin,
                s(:if,
                  s(:lvar, :group),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :user)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :group))),
                  s(:or,
                    s(:lvar, :user),
                    s(:str, ":")))),
              s(:send,
                s(:lvar, :list), :join,
                s(:str, " ")))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:lvasgn, :uid,
          s(:send, nil, :fu_get_uid,
            s(:lvar, :user))),
        s(:lvasgn, :gid,
          s(:send, nil, :fu_get_gid,
            s(:lvar, :group))),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:send,
              s(:const, nil, :Entry_), :new,
              s(:lvar, :path)), :chown,
            s(:lvar, :uid),
            s(:lvar, :gid))))),
    s(:send, nil, :module_function,
      s(:sym, :chown)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "chown"),
      s(:array,
        s(:sym, :noop),
        s(:sym, :verbose))),
    s(:def, :chown_R,
      s(:args,
        s(:arg, :user),
        s(:arg, :group),
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "chown_R"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:send, nil, :sprintf,
              s(:str, "chown -R%s %s %s"),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :force)),
                  s(:str, "f"),
                  s(:str, ""))),
              s(:begin,
                s(:if,
                  s(:lvar, :group),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :user)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :group))),
                  s(:or,
                    s(:lvar, :user),
                    s(:str, ":")))),
              s(:send,
                s(:lvar, :list), :join,
                s(:str, " ")))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:lvasgn, :uid,
          s(:send, nil, :fu_get_uid,
            s(:lvar, :user))),
        s(:lvasgn, :gid,
          s(:send, nil, :fu_get_gid,
            s(:lvar, :group))),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :root)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Entry_), :new,
                s(:lvar, :root)), :traverse),
            s(:args,
              s(:arg, :ent)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :ent), :chown,
                  s(:lvar, :uid),
                  s(:lvar, :gid)),
                s(:resbody, nil, nil,
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :force)), nil,
                    s(:send, nil, :raise))), nil)))))),
    s(:send, nil, :module_function,
      s(:sym, :chown_R)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "chown_R"),
      s(:array,
        s(:sym, :noop),
        s(:sym, :verbose),
        s(:sym, :force))),
    s(:kwbegin,
      s(:rescue,
        s(:send, nil, :require,
          s(:str, "etc")),
        s(:resbody,
          s(:array,
            s(:const, nil, :LoadError)), nil, nil), nil)),
    s(:def, :fu_get_uid,
      s(:args,
        s(:arg, :user)),
      s(:begin,
        s(:if,
          s(:lvar, :user), nil,
          s(:return,
            s(:nil))),
        s(:case,
          s(:lvar, :user),
          s(:when,
            s(:const, nil, :Integer),
            s(:lvar, :user)),
          s(:when,
            s(:regexp,
              s(:str, "\\A\\d+\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :user), :to_i)),
          s(:if,
            s(:send,
              s(:const, nil, :Etc), :getpwnam,
              s(:lvar, :user)),
            s(:send,
              s(:send,
                s(:const, nil, :Etc), :getpwnam,
                s(:lvar, :user)), :uid),
            s(:nil))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_get_uid)),
    s(:def, :fu_get_gid,
      s(:args,
        s(:arg, :group)),
      s(:begin,
        s(:if,
          s(:lvar, :group), nil,
          s(:return,
            s(:nil))),
        s(:case,
          s(:lvar, :group),
          s(:when,
            s(:const, nil, :Integer),
            s(:lvar, :group)),
          s(:when,
            s(:regexp,
              s(:str, "\\A\\d+\\z"),
              s(:regopt)),
            s(:send,
              s(:lvar, :group), :to_i)),
          s(:if,
            s(:send,
              s(:const, nil, :Etc), :getgrnam,
              s(:lvar, :group)),
            s(:send,
              s(:send,
                s(:const, nil, :Etc), :getgrnam,
                s(:lvar, :group)), :gid),
            s(:nil))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_get_gid)),
    s(:def, :touch,
      s(:args,
        s(:arg, :list),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:send, nil, :fu_check_options,
          s(:lvar, :options),
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:str, "touch"))),
        s(:lvasgn, :list,
          s(:send, nil, :fu_list,
            s(:lvar, :list))),
        s(:lvasgn, :nocreate,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :nocreate))),
        s(:lvasgn, :t,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :mtime))),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :verbose)),
          s(:send, nil, :fu_output_message,
            s(:dstr,
              s(:str, "touch "),
              s(:begin,
                s(:if,
                  s(:lvar, :nocreate),
                  s(:str, "-c "),
                  s(:str, ""))),
              s(:begin,
                s(:if,
                  s(:lvar, :t),
                  s(:send,
                    s(:lvar, :t), :strftime,
                    s(:str, "-t %Y%m%d%H%M.%S ")),
                  s(:str, ""))),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, " "))))), nil),
        s(:if,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :noop)),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:lvasgn, :created,
              s(:lvar, :nocreate)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :File), :utime,
                  s(:lvar, :t),
                  s(:lvar, :t),
                  s(:lvar, :path)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT)), nil,
                  s(:begin,
                    s(:if,
                      s(:lvar, :created),
                      s(:send, nil, :raise), nil),
                    s(:block,
                      s(:send,
                        s(:const, nil, :File), :open,
                        s(:lvar, :path),
                        s(:str, "a")),
                      s(:args), nil),
                    s(:lvasgn, :created,
                      s(:true)),
                    s(:if,
                      s(:lvar, :t),
                      s(:retry), nil))), nil)))))),
    s(:send, nil, :module_function,
      s(:sym, :touch)),
    s(:send,
      s(:const, nil, :OPT_TABLE), :[]=,
      s(:str, "touch"),
      s(:array,
        s(:sym, :noop),
        s(:sym, :verbose),
        s(:sym, :mtime),
        s(:sym, :nocreate))),
    s(:send, nil, :private),
    s(:module,
      s(:const, nil, :StreamUtils_),
      s(:begin,
        s(:send, nil, :private),
        s(:def, :fu_windows?,
          s(:args),
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "mswin|mingw|bccwin|emx"),
              s(:regopt)),
            s(:const, nil, :RUBY_PLATFORM))),
        s(:def, :fu_copy_stream0,
          s(:args,
            s(:arg, :src),
            s(:arg, :dest),
            s(:optarg, :blksize,
              s(:nil))),
          s(:send,
            s(:const, nil, :IO), :copy_stream,
            s(:lvar, :src),
            s(:lvar, :dest))),
        s(:def, :fu_stream_blksize,
          s(:args,
            s(:restarg, :streams)),
          s(:begin,
            s(:block,
              s(:send,
                s(:lvar, :streams), :each),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :s), :respond_to?,
                    s(:sym, :stat)), nil,
                  s(:next)),
                s(:lvasgn, :size,
                  s(:send, nil, :fu_blksize,
                    s(:send,
                      s(:lvar, :s), :stat))),
                s(:if,
                  s(:lvar, :size),
                  s(:return,
                    s(:lvar, :size)), nil))),
            s(:send, nil, :fu_default_blksize))),
        s(:def, :fu_blksize,
          s(:args,
            s(:arg, :st)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :st), :blksize)),
            s(:if,
              s(:lvar, :s), nil,
              s(:return,
                s(:nil))),
            s(:if,
              s(:send,
                s(:lvar, :s), :==,
                s(:int, 0)),
              s(:return,
                s(:nil)), nil),
            s(:lvar, :s))),
        s(:def, :fu_default_blksize,
          s(:args),
          s(:int, 1024)))),
    s(:send, nil, :include,
      s(:const, nil, :StreamUtils_)),
    s(:send, nil, :extend,
      s(:const, nil, :StreamUtils_)),
    s(:class,
      s(:const, nil, :Entry_), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :StreamUtils_)),
        s(:def, :initialize,
          s(:args,
            s(:arg, :a),
            s(:optarg, :b,
              s(:nil)),
            s(:optarg, :deref,
              s(:false))),
          s(:begin,
            s(:ivasgn, :@prefix,
              s(:ivasgn, :@rel,
                s(:ivasgn, :@path,
                  s(:nil)))),
            s(:if,
              s(:lvar, :b),
              s(:begin,
                s(:ivasgn, :@prefix,
                  s(:lvar, :a)),
                s(:ivasgn, :@rel,
                  s(:lvar, :b))),
              s(:ivasgn, :@path,
                s(:lvar, :a))),
            s(:ivasgn, :@deref,
              s(:lvar, :deref)),
            s(:ivasgn, :@stat,
              s(:nil)),
            s(:ivasgn, :@lstat,
              s(:nil)))),
        s(:def, :inspect,
          s(:args),
          s(:dstr,
            s(:str, "#<"),
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:str, " "),
            s(:begin,
              s(:send, nil, :path)),
            s(:str, ">"))),
        s(:def, :path,
          s(:args),
          s(:if,
            s(:ivar, :@path),
            s(:send,
              s(:const, nil, :File), :path,
              s(:ivar, :@path)),
            s(:send, nil, :join,
              s(:ivar, :@prefix),
              s(:ivar, :@rel)))),
        s(:def, :prefix,
          s(:args),
          s(:or,
            s(:ivar, :@prefix),
            s(:ivar, :@path))),
        s(:def, :rel,
          s(:args),
          s(:ivar, :@rel)),
        s(:def, :dereference?,
          s(:args),
          s(:ivar, :@deref)),
        s(:def, :exist?,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :lstat),
                s(:true)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)), nil,
                s(:false)), nil))),
        s(:def, :file?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :file?)))),
        s(:def, :directory?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :directory?)))),
        s(:def, :symlink?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :symlink?)))),
        s(:def, :chardev?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :chardev?)))),
        s(:def, :blockdev?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :blockdev?)))),
        s(:def, :socket?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :socket?)))),
        s(:def, :pipe?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:send,
                s(:lvar, :s), :pipe?)))),
        s(:casgn, nil, :S_IF_DOOR,
          s(:int, 53248)),
        s(:def, :door?,
          s(:args),
          s(:begin,
            s(:lvasgn, :s,
              s(:send, nil, :lstat!)),
            s(:and,
              s(:lvar, :s),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :mode), :&,
                    s(:int, 61440)), :==,
                  s(:const, nil, :S_IF_DOOR)))))),
        s(:def, :entries,
          s(:args),
          s(:begin,
            s(:lvasgn, :opts,
              s(:hash)),
            s(:if,
              s(:send, nil, :fu_windows?),
              s(:send,
                s(:lvar, :opts), :[]=,
                s(:sym, :encoding),
                s(:const,
                  s(:const,
                    s(:cbase), :Encoding), :UTF_8)), nil),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Dir), :entries,
                      s(:send, nil, :path),
                      s(:lvar, :opts)), :reject),
                  s(:args,
                    s(:arg, :n)),
                  s(:or,
                    s(:send,
                      s(:lvar, :n), :==,
                      s(:str, ".")),
                    s(:send,
                      s(:lvar, :n), :==,
                      s(:str, "..")))), :map),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:const, nil, :Entry_), :new,
                s(:send, nil, :prefix),
                s(:send, nil, :join,
                  s(:send, nil, :rel),
                  s(:send,
                    s(:lvar, :n), :untaint)))))),
        s(:def, :stat,
          s(:args),
          s(:begin,
            s(:if,
              s(:ivar, :@stat),
              s(:return,
                s(:ivar, :@stat)), nil),
            s(:if,
              s(:and,
                s(:send, nil, :lstat),
                s(:send,
                  s(:send, nil, :lstat), :symlink?)),
              s(:ivasgn, :@stat,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:send, nil, :path))),
              s(:ivasgn, :@stat,
                s(:send, nil, :lstat))),
            s(:ivar, :@stat))),
        s(:def, :stat!,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:if,
                s(:ivar, :@stat),
                s(:return,
                  s(:ivar, :@stat)), nil),
              s(:if,
                s(:and,
                  s(:send, nil, :lstat!),
                  s(:send,
                    s(:send, nil, :lstat!), :symlink?)),
                s(:ivasgn, :@stat,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:send, nil, :path))),
                s(:ivasgn, :@stat,
                  s(:send, nil, :lstat!))),
              s(:ivar, :@stat)),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:nil)), nil)),
        s(:def, :lstat,
          s(:args),
          s(:if,
            s(:send, nil, :dereference?),
            s(:or_asgn,
              s(:ivasgn, :@lstat),
              s(:send,
                s(:const, nil, :File), :stat,
                s(:send, nil, :path))),
            s(:or_asgn,
              s(:ivasgn, :@lstat),
              s(:send,
                s(:const, nil, :File), :lstat,
                s(:send, nil, :path))))),
        s(:def, :lstat!,
          s(:args),
          s(:rescue,
            s(:send, nil, :lstat),
            s(:resbody,
              s(:array,
                s(:const, nil, :SystemCallError)), nil,
              s(:nil)), nil)),
        s(:def, :chmod,
          s(:args,
            s(:arg, :mode)),
          s(:if,
            s(:send, nil, :symlink?),
            s(:if,
              s(:send, nil, :have_lchmod?),
              s(:send,
                s(:const, nil, :File), :lchmod,
                s(:lvar, :mode),
                s(:send, nil, :path)), nil),
            s(:send,
              s(:const, nil, :File), :chmod,
              s(:lvar, :mode),
              s(:send, nil, :path)))),
        s(:def, :chown,
          s(:args,
            s(:arg, :uid),
            s(:arg, :gid)),
          s(:if,
            s(:send, nil, :symlink?),
            s(:if,
              s(:send, nil, :have_lchown?),
              s(:send,
                s(:const, nil, :File), :lchown,
                s(:lvar, :uid),
                s(:lvar, :gid),
                s(:send, nil, :path)), nil),
            s(:send,
              s(:const, nil, :File), :chown,
              s(:lvar, :uid),
              s(:lvar, :gid),
              s(:send, nil, :path)))),
        s(:def, :copy,
          s(:args,
            s(:arg, :dest)),
          s(:case, nil,
            s(:when,
              s(:send, nil, :file?),
              s(:send, nil, :copy_file,
                s(:lvar, :dest))),
            s(:when,
              s(:send, nil, :directory?),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:const, nil, :File), :exist?,
                        s(:lvar, :dest)), :!),
                    s(:send, nil, :descendant_directory?,
                      s(:lvar, :dest),
                      s(:send, nil, :path))),
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:send,
                      s(:str, "cannot copy directory %s to itself %s"), :%,
                      s(:array,
                        s(:send, nil, :path),
                        s(:lvar, :dest)))), nil),
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :Dir), :mkdir,
                      s(:lvar, :dest)),
                    s(:resbody, nil, nil,
                      s(:if,
                        s(:send,
                          s(:const, nil, :File), :directory?,
                          s(:lvar, :dest)), nil,
                        s(:send, nil, :raise))), nil)))),
            s(:when,
              s(:send, nil, :symlink?),
              s(:send,
                s(:const, nil, :File), :symlink,
                s(:send,
                  s(:const, nil, :File), :readlink,
                  s(:send, nil, :path)),
                s(:lvar, :dest))),
            s(:when,
              s(:send, nil, :chardev?),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :respond_to?,
                    s(:sym, :mknod)), nil,
                  s(:send, nil, :raise,
                    s(:str, "cannot handle device file"))),
                s(:send, nil, :mknod,
                  s(:lvar, :dest),
                  s(:str, "c"),
                  s(:int, 438),
                  s(:send,
                    s(:send, nil, :lstat), :rdev)))),
            s(:when,
              s(:send, nil, :blockdev?),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :respond_to?,
                    s(:sym, :mknod)), nil,
                  s(:send, nil, :raise,
                    s(:str, "cannot handle device file"))),
                s(:send, nil, :mknod,
                  s(:lvar, :dest),
                  s(:str, "b"),
                  s(:int, 438),
                  s(:send,
                    s(:send, nil, :lstat), :rdev)))),
            s(:when,
              s(:send, nil, :socket?),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :respond_to?,
                    s(:sym, :mknod)), nil,
                  s(:send, nil, :raise,
                    s(:str, "cannot handle socket"))),
                s(:send, nil, :mknod,
                  s(:lvar, :dest),
                  s(:nil),
                  s(:send,
                    s(:send, nil, :lstat), :mode),
                  s(:int, 0)))),
            s(:when,
              s(:send, nil, :pipe?),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :respond_to?,
                    s(:sym, :mkfifo)), nil,
                  s(:send, nil, :raise,
                    s(:str, "cannot handle FIFO"))),
                s(:send, nil, :mkfifo,
                  s(:lvar, :dest),
                  s(:int, 438)))),
            s(:when,
              s(:send, nil, :door?),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "cannot handle door: "),
                  s(:begin,
                    s(:send, nil, :path))))),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "unknown file type: "),
                s(:begin,
                  s(:send, nil, :path)))))),
        s(:def, :copy_file,
          s(:args,
            s(:arg, :dest)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:send, nil, :path)),
            s(:args,
              s(:arg, :s)),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :dest),
                s(:str, "wb"),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :stat), :mode)),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:const, nil, :IO), :copy_stream,
                s(:lvar, :s),
                s(:lvar, :f))))),
        s(:def, :copy_metadata,
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:lvasgn, :st,
              s(:send, nil, :lstat)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :st), :symlink?), :!),
              s(:send,
                s(:const, nil, :File), :utime,
                s(:send,
                  s(:lvar, :st), :atime),
                s(:send,
                  s(:lvar, :st), :mtime),
                s(:lvar, :path)), nil),
            s(:kwbegin,
              s(:rescue,
                s(:if,
                  s(:send,
                    s(:lvar, :st), :symlink?),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :File), :lchown,
                        s(:send,
                          s(:lvar, :st), :uid),
                        s(:send,
                          s(:lvar, :st), :gid),
                        s(:lvar, :path)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NotImplementedError)), nil, nil), nil)),
                  s(:send,
                    s(:const, nil, :File), :chown,
                    s(:send,
                      s(:lvar, :st), :uid),
                    s(:send,
                      s(:lvar, :st), :gid),
                    s(:lvar, :path))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EPERM)), nil,
                  s(:if,
                    s(:send,
                      s(:lvar, :st), :symlink?),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:const, nil, :File), :lchmod,
                          s(:send,
                            s(:send,
                              s(:lvar, :st), :mode), :&,
                            s(:int, 1023)),
                          s(:lvar, :path)),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :NotImplementedError)), nil, nil), nil)),
                    s(:send,
                      s(:const, nil, :File), :chmod,
                      s(:send,
                        s(:send,
                          s(:lvar, :st), :mode), :&,
                        s(:int, 1023)),
                      s(:lvar, :path)))),
                s(:if,
                  s(:send,
                    s(:lvar, :st), :symlink?),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :File), :lchmod,
                        s(:send,
                          s(:lvar, :st), :mode),
                        s(:lvar, :path)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NotImplementedError)), nil, nil), nil)),
                  s(:send,
                    s(:const, nil, :File), :chmod,
                    s(:send,
                      s(:lvar, :st), :mode),
                    s(:lvar, :path))))))),
        s(:def, :remove,
          s(:args),
          s(:if,
            s(:send, nil, :directory?),
            s(:send, nil, :remove_dir1),
            s(:send, nil, :remove_file))),
        s(:def, :remove_dir1,
          s(:args),
          s(:block,
            s(:send, nil, :platform_support),
            s(:args),
            s(:send,
              s(:const, nil, :Dir), :rmdir,
              s(:send,
                s(:send, nil, :path), :chomp,
                s(:str, "/"))))),
        s(:def, :remove_file,
          s(:args),
          s(:block,
            s(:send, nil, :platform_support),
            s(:args),
            s(:send,
              s(:const, nil, :File), :unlink,
              s(:send, nil, :path)))),
        s(:def, :platform_support,
          s(:args),
          s(:begin,
            s(:if,
              s(:send, nil, :fu_windows?), nil,
              s(:return,
                s(:yield))),
            s(:lvasgn, :first_time_p,
              s(:true)),
            s(:kwbegin,
              s(:rescue,
                s(:yield),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT)), nil,
                  s(:send, nil, :raise)),
                s(:resbody, nil,
                  s(:lvasgn, :err),
                  s(:begin,
                    s(:if,
                      s(:lvar, :first_time_p),
                      s(:begin,
                        s(:lvasgn, :first_time_p,
                          s(:false)),
                        s(:kwbegin,
                          s(:rescue,
                            s(:begin,
                              s(:send,
                                s(:const, nil, :File), :chmod,
                                s(:int, 448),
                                s(:send, nil, :path)),
                              s(:retry)),
                            s(:resbody,
                              s(:array,
                                s(:const, nil, :SystemCallError)), nil, nil), nil))), nil),
                    s(:send, nil, :raise,
                      s(:lvar, :err)))), nil)))),
        s(:def, :preorder_traverse,
          s(:args),
          s(:begin,
            s(:lvasgn, :stack,
              s(:array,
                s(:self))),
            s(:while,
              s(:lvasgn, :ent,
                s(:send,
                  s(:lvar, :stack), :pop)),
              s(:begin,
                s(:yield,
                  s(:lvar, :ent)),
                s(:if,
                  s(:send,
                    s(:lvar, :ent), :directory?),
                  s(:send,
                    s(:lvar, :stack), :concat,
                    s(:send,
                      s(:send,
                        s(:lvar, :ent), :entries), :reverse)), nil))))),
        s(:alias,
          s(:sym, :traverse),
          s(:sym, :preorder_traverse)),
        s(:def, :postorder_traverse,
          s(:args),
          s(:ensure,
            s(:if,
              s(:send, nil, :directory?),
              s(:block,
                s(:send,
                  s(:send, nil, :entries), :each),
                s(:args,
                  s(:arg, :ent)),
                s(:block,
                  s(:send,
                    s(:lvar, :ent), :postorder_traverse),
                  s(:args,
                    s(:arg, :e)),
                  s(:yield,
                    s(:lvar, :e)))), nil),
            s(:yield,
              s(:self)))),
        s(:def, :wrap_traverse,
          s(:args,
            s(:arg, :pre),
            s(:arg, :post)),
          s(:begin,
            s(:send,
              s(:lvar, :pre), :call,
              s(:self)),
            s(:if,
              s(:send, nil, :directory?),
              s(:block,
                s(:send,
                  s(:send, nil, :entries), :each),
                s(:args,
                  s(:arg, :ent)),
                s(:send,
                  s(:lvar, :ent), :wrap_traverse,
                  s(:lvar, :pre),
                  s(:lvar, :post))), nil),
            s(:send,
              s(:lvar, :post), :call,
              s(:self)))),
        s(:send, nil, :private),
        s(:gvasgn, :$fileutils_rb_have_lchmod,
          s(:nil)),
        s(:def, :have_lchmod?,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:gvar, :$fileutils_rb_have_lchmod), :==,
                s(:nil)),
              s(:gvasgn, :$fileutils_rb_have_lchmod,
                s(:send, nil, :check_have_lchmod?)), nil),
            s(:gvar, :$fileutils_rb_have_lchmod))),
        s(:def, :check_have_lchmod?,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :respond_to?,
                  s(:sym, :lchmod)), nil,
                s(:return,
                  s(:false))),
              s(:send,
                s(:const, nil, :File), :lchmod,
                s(:int, 0)),
              s(:return,
                s(:true))),
            s(:resbody,
              s(:array,
                s(:const, nil, :NotImplementedError)), nil,
              s(:return,
                s(:false))), nil)),
        s(:gvasgn, :$fileutils_rb_have_lchown,
          s(:nil)),
        s(:def, :have_lchown?,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:gvar, :$fileutils_rb_have_lchown), :==,
                s(:nil)),
              s(:gvasgn, :$fileutils_rb_have_lchown,
                s(:send, nil, :check_have_lchown?)), nil),
            s(:gvar, :$fileutils_rb_have_lchown))),
        s(:def, :check_have_lchown?,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :respond_to?,
                  s(:sym, :lchown)), nil,
                s(:return,
                  s(:false))),
              s(:send,
                s(:const, nil, :File), :lchown,
                s(:nil),
                s(:nil)),
              s(:return,
                s(:true))),
            s(:resbody,
              s(:array,
                s(:const, nil, :NotImplementedError)), nil,
              s(:return,
                s(:false))), nil)),
        s(:def, :join,
          s(:args,
            s(:arg, :dir),
            s(:arg, :base)),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :base), :!),
                s(:send,
                  s(:lvar, :base), :==,
                  s(:str, "."))),
              s(:return,
                s(:send,
                  s(:const, nil, :File), :path,
                  s(:lvar, :dir))), nil),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :dir), :!),
                s(:send,
                  s(:lvar, :dir), :==,
                  s(:str, "."))),
              s(:return,
                s(:send,
                  s(:const, nil, :File), :path,
                  s(:lvar, :base))), nil),
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dir),
              s(:lvar, :base)))),
        s(:if,
          s(:const,
            s(:const, nil, :File), :ALT_SEPARATOR),
          s(:casgn, nil, :DIRECTORY_TERM,
            s(:send,
              s(:dstr,
                s(:str, "(?=[/"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :quote,
                    s(:const,
                      s(:const, nil, :File), :ALT_SEPARATOR))),
                s(:str, "]|\\z)")), :freeze)),
          s(:casgn, nil, :DIRECTORY_TERM,
            s(:send,
              s(:str, "(?=/|\\z)"), :freeze))),
        s(:casgn, nil, :SYSCASE,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :File), :FNM_SYSCASE), :nonzero?),
            s(:str, "-i"),
            s(:str, ""))),
        s(:def, :descendant_directory?,
          s(:args,
            s(:arg, :descendant),
            s(:arg, :ascendant)),
          s(:send,
            s(:regexp,
              s(:str, "\\A(?"),
              s(:begin,
                s(:const, nil, :SYSCASE)),
              s(:str, ":"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :quote,
                  s(:lvar, :ascendant))),
              s(:str, ")"),
              s(:begin,
                s(:const, nil, :DIRECTORY_TERM)),
              s(:regopt)), :=~,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :descendant)))))),
    s(:def, :fu_list,
      s(:args,
        s(:arg, :arg)),
      s(:block,
        s(:send,
          s(:send,
            s(:array,
              s(:lvar, :arg)), :flatten), :map),
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:const, nil, :File), :path,
          s(:lvar, :path)))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_list)),
    s(:def, :fu_each_src_dest,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest)),
      s(:block,
        s(:send, nil, :fu_each_src_dest0,
          s(:lvar, :src),
          s(:lvar, :dest)),
        s(:args,
          s(:arg, :s),
          s(:arg, :d)),
        s(:begin,
          s(:if,
            s(:send, nil, :fu_same?,
              s(:lvar, :s),
              s(:lvar, :d)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "same file: "),
                s(:begin,
                  s(:lvar, :s)),
                s(:str, " and "),
                s(:begin,
                  s(:lvar, :d)))), nil),
          s(:yield,
            s(:lvar, :s),
            s(:lvar, :d))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_each_src_dest)),
    s(:def, :fu_each_src_dest0,
      s(:args,
        s(:arg, :src),
        s(:arg, :dest)),
      s(:if,
        s(:lvasgn, :tmp,
          s(:send,
            s(:const, nil, :Array), :try_convert,
            s(:lvar, :src))),
        s(:block,
          s(:send,
            s(:lvar, :tmp), :each),
          s(:args,
            s(:arg, :s)),
          s(:begin,
            s(:lvasgn, :s,
              s(:send,
                s(:const, nil, :File), :path,
                s(:lvar, :s))),
            s(:yield,
              s(:lvar, :s),
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dest),
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :s)))))),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:const, nil, :File), :path,
              s(:lvar, :src))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :dest)),
            s(:yield,
              s(:lvar, :src),
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dest),
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :src)))),
            s(:yield,
              s(:lvar, :src),
              s(:send,
                s(:const, nil, :File), :path,
                s(:lvar, :dest))))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_each_src_dest0)),
    s(:def, :fu_same?,
      s(:args,
        s(:arg, :a),
        s(:arg, :b)),
      s(:send,
        s(:const, nil, :File), :identical?,
        s(:lvar, :a),
        s(:lvar, :b))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_same?)),
    s(:def, :fu_check_options,
      s(:args,
        s(:arg, :options),
        s(:arg, :optdecl)),
      s(:begin,
        s(:lvasgn, :h,
          s(:send,
            s(:lvar, :options), :dup)),
        s(:block,
          s(:send,
            s(:lvar, :optdecl), :each),
          s(:args,
            s(:arg, :opt)),
          s(:send,
            s(:lvar, :h), :delete,
            s(:lvar, :opt))),
        s(:if,
          s(:send,
            s(:lvar, :h), :empty?), nil,
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "no such option: "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :h), :keys), :join,
                  s(:str, " ")))))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_check_options)),
    s(:def, :fu_update_option,
      s(:args,
        s(:arg, :args),
        s(:arg, :new)),
      s(:begin,
        s(:if,
          s(:lvasgn, :tmp,
            s(:send,
              s(:const, nil, :Hash), :try_convert,
              s(:send,
                s(:lvar, :args), :last))),
          s(:send,
            s(:lvar, :args), :[]=,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:lvar, :tmp), :dup), :update,
              s(:lvar, :new))),
          s(:send,
            s(:lvar, :args), :push,
            s(:lvar, :new))),
        s(:lvar, :args))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_update_option)),
    s(:ivasgn, :@fileutils_output,
      s(:gvar, :$stderr)),
    s(:ivasgn, :@fileutils_label,
      s(:str, "")),
    s(:def, :fu_output_message,
      s(:args,
        s(:arg, :msg)),
      s(:begin,
        s(:or_asgn,
          s(:ivasgn, :@fileutils_output),
          s(:gvar, :$stderr)),
        s(:or_asgn,
          s(:ivasgn, :@fileutils_label),
          s(:str, "")),
        s(:send,
          s(:ivar, :@fileutils_output), :puts,
          s(:send,
            s(:ivar, :@fileutils_label), :+,
            s(:lvar, :msg))))),
    s(:send, nil, :private_module_function,
      s(:sym, :fu_output_message)),
    s(:defs,
      s(:const, nil, :FileUtils), :commands,
      s(:args),
      s(:send,
        s(:const, nil, :OPT_TABLE), :keys)),
    s(:defs,
      s(:const, nil, :FileUtils), :options,
      s(:args),
      s(:block,
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :OPT_TABLE), :values), :flatten), :uniq), :map),
        s(:args,
          s(:arg, :sym)),
        s(:send,
          s(:lvar, :sym), :to_s))),
    s(:defs,
      s(:const, nil, :FileUtils), :have_option?,
      s(:args,
        s(:arg, :mid),
        s(:arg, :opt)),
      s(:begin,
        s(:or,
          s(:lvasgn, :li,
            s(:send,
              s(:const, nil, :OPT_TABLE), :[],
              s(:send,
                s(:lvar, :mid), :to_s))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "no such method: "),
              s(:begin,
                s(:lvar, :mid))))),
        s(:send,
          s(:lvar, :li), :include?,
          s(:lvar, :opt)))),
    s(:defs,
      s(:const, nil, :FileUtils), :options_of,
      s(:args,
        s(:arg, :mid)),
      s(:block,
        s(:send,
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:send,
              s(:lvar, :mid), :to_s)), :map),
        s(:args,
          s(:arg, :sym)),
        s(:send,
          s(:lvar, :sym), :to_s))),
    s(:defs,
      s(:const, nil, :FileUtils), :collect_method,
      s(:args,
        s(:arg, :opt)),
      s(:block,
        s(:send,
          s(:send,
            s(:const, nil, :OPT_TABLE), :keys), :select),
        s(:args,
          s(:arg, :m)),
        s(:send,
          s(:send,
            s(:const, nil, :OPT_TABLE), :[],
            s(:lvar, :m)), :include?,
          s(:lvar, :opt)))),
    s(:casgn, nil, :LOW_METHODS,
      s(:send,
        s(:send, nil, :singleton_methods,
          s(:false)), :-,
        s(:send,
          s(:send, nil, :collect_method,
            s(:sym, :noop)), :map,
          s(:block_pass,
            s(:sym, :intern))))),
    s(:module,
      s(:const, nil, :LowMethods),
      s(:send, nil, :module_eval,
        s(:send,
          s(:str, "private\n"), :+,
          s(:send,
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:cbase), :FileUtils), :LOW_METHODS), :map),
              s(:args,
                s(:arg, :name)),
              s(:dstr,
                s(:str, "def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "(*)end"))), :join,
            s(:str, "\n"))),
        s(:str, "(string)"),
        s(:int, 1678))),
    s(:casgn, nil, :METHODS,
      s(:send,
        s(:send, nil, :singleton_methods), :-,
        s(:array,
          s(:sym, :private_module_function),
          s(:sym, :commands),
          s(:sym, :options),
          s(:sym, :have_option?),
          s(:sym, :options_of),
          s(:sym, :collect_method)))),
    s(:module,
      s(:const, nil, :Verbose),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :FileUtils)),
        s(:ivasgn, :@fileutils_output,
          s(:gvar, :$stderr)),
        s(:ivasgn, :@fileutils_label,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:cbase), :FileUtils), :collect_method,
              s(:sym, :verbose)), :each),
          s(:args,
            s(:arg, :name)),
          s(:send, nil, :module_eval,
            s(:dstr,
              s(:str, "        def "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "(*args)\n"),
              s(:str, "          super(*fu_update_option(args, :verbose => true))\n"),
              s(:str, "        end\n"),
              s(:str, "        private :"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "\n")),
            s(:str, "(string)"),
            s(:send,
              s(:int, 1694), :+,
              s(:int, 1)))),
        s(:send, nil, :extend,
          s(:self)),
        s(:sclass,
          s(:self),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:cbase), :FileUtils), :METHODS), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :public,
              s(:lvar, :m)))))),
    s(:module,
      s(:const, nil, :NoWrite),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :FileUtils)),
        s(:send, nil, :include,
          s(:const, nil, :LowMethods)),
        s(:ivasgn, :@fileutils_output,
          s(:gvar, :$stderr)),
        s(:ivasgn, :@fileutils_label,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:cbase), :FileUtils), :collect_method,
              s(:sym, :noop)), :each),
          s(:args,
            s(:arg, :name)),
          s(:send, nil, :module_eval,
            s(:dstr,
              s(:str, "        def "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "(*args)\n"),
              s(:str, "          super(*fu_update_option(args, :noop => true))\n"),
              s(:str, "        end\n"),
              s(:str, "        private :"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "\n")),
            s(:str, "(string)"),
            s(:send,
              s(:int, 1720), :+,
              s(:int, 1)))),
        s(:send, nil, :extend,
          s(:self)),
        s(:sclass,
          s(:self),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:cbase), :FileUtils), :METHODS), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :public,
              s(:lvar, :m)))))),
    s(:module,
      s(:const, nil, :DryRun),
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :FileUtils)),
        s(:send, nil, :include,
          s(:const, nil, :LowMethods)),
        s(:ivasgn, :@fileutils_output,
          s(:gvar, :$stderr)),
        s(:ivasgn, :@fileutils_label,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:send,
              s(:const,
                s(:cbase), :FileUtils), :collect_method,
              s(:sym, :noop)), :each),
          s(:args,
            s(:arg, :name)),
          s(:send, nil, :module_eval,
            s(:dstr,
              s(:str, "        def "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "(*args)\n"),
              s(:str, "          super(*fu_update_option(args, :noop => true, :verbose => true))\n"),
              s(:str, "        end\n"),
              s(:str, "        private :"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "\n")),
            s(:str, "(string)"),
            s(:send,
              s(:int, 1747), :+,
              s(:int, 1)))),
        s(:send, nil, :extend,
          s(:self)),
        s(:sclass,
          s(:self),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:cbase), :FileUtils), :METHODS), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :public,
              s(:lvar, :m))))))))
