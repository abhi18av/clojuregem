s(:begin,
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:class,
    s(:const, nil, :Tracer), nil,
    s(:begin,
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :verbose)),
          s(:alias,
            s(:sym, :verbose?),
            s(:sym, :verbose)),
          s(:send, nil, :attr_accessor,
            s(:sym, :stdout)),
          s(:send, nil, :attr_reader,
            s(:sym, :stdout_mutex)),
          s(:send, nil, :attr_accessor,
            s(:sym, :display_process_id)),
          s(:alias,
            s(:sym, :display_process_id?),
            s(:sym, :display_process_id)),
          s(:send, nil, :attr_accessor,
            s(:sym, :display_thread_id)),
          s(:alias,
            s(:sym, :display_thread_id?),
            s(:sym, :display_thread_id)),
          s(:send, nil, :attr_accessor,
            s(:sym, :display_c_call)),
          s(:alias,
            s(:sym, :display_c_call?),
            s(:sym, :display_c_call)))),
      s(:send,
        s(:const, nil, :Tracer), :stdout=,
        s(:const, nil, :STDOUT)),
      s(:send,
        s(:const, nil, :Tracer), :verbose=,
        s(:false)),
      s(:send,
        s(:const, nil, :Tracer), :display_process_id=,
        s(:false)),
      s(:send,
        s(:const, nil, :Tracer), :display_thread_id=,
        s(:true)),
      s(:send,
        s(:const, nil, :Tracer), :display_c_call=,
        s(:false)),
      s(:ivasgn, :@stdout_mutex,
        s(:send,
          s(:const, nil, :Mutex), :new)),
      s(:casgn, nil, :EVENT_SYMBOL,
        s(:hash,
          s(:pair,
            s(:str, "line"),
            s(:str, "-")),
          s(:pair,
            s(:str, "call"),
            s(:str, ">")),
          s(:pair,
            s(:str, "return"),
            s(:str, "<")),
          s(:pair,
            s(:str, "class"),
            s(:str, "C")),
          s(:pair,
            s(:str, "end"),
            s(:str, "E")),
          s(:pair,
            s(:str, "raise"),
            s(:str, "^")),
          s(:pair,
            s(:str, "c-call"),
            s(:str, "}")),
          s(:pair,
            s(:str, "c-return"),
            s(:str, "{")),
          s(:pair,
            s(:str, "unknown"),
            s(:str, "?")))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@threads,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:if,
            s(:defined?,
              s(:send,
                s(:const, nil, :Thread), :main)),
            s(:send,
              s(:ivar, :@threads), :[]=,
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :main), :object_id),
              s(:int, 0)),
            s(:send,
              s(:ivar, :@threads), :[]=,
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :current), :object_id),
              s(:int, 0))),
          s(:ivasgn, :@get_line_procs,
            s(:hash)),
          s(:ivasgn, :@filters,
            s(:array)))),
      s(:def, :stdout,
        s(:args),
        s(:send,
          s(:const, nil, :Tracer), :stdout)),
      s(:def, :on,
        s(:args),
        s(:if,
          s(:send, nil, :block_given?),
          s(:begin,
            s(:send, nil, :on),
            s(:kwbegin,
              s(:ensure,
                s(:yield),
                s(:send, nil, :off)))),
          s(:begin,
            s(:send, nil, :set_trace_func,
              s(:send,
                s(:send, nil, :method,
                  s(:sym, :trace_func)), :to_proc)),
            s(:if,
              s(:send,
                s(:const, nil, :Tracer), :verbose?),
              s(:send,
                s(:send, nil, :stdout), :print,
                s(:str, "Trace on\n")), nil)))),
      s(:def, :off,
        s(:args),
        s(:begin,
          s(:send, nil, :set_trace_func,
            s(:nil)),
          s(:if,
            s(:send,
              s(:const, nil, :Tracer), :verbose?),
            s(:send,
              s(:send, nil, :stdout), :print,
              s(:str, "Trace off\n")), nil))),
      s(:def, :add_filter,
        s(:args,
          s(:optarg, :p,
            s(:send, nil, :proc))),
        s(:send,
          s(:ivar, :@filters), :push,
          s(:lvar, :p))),
      s(:def, :set_get_line_procs,
        s(:args,
          s(:arg, :file),
          s(:optarg, :p,
            s(:send, nil, :proc))),
        s(:send,
          s(:ivar, :@get_line_procs), :[]=,
          s(:lvar, :file),
          s(:lvar, :p))),
      s(:def, :get_line,
        s(:args,
          s(:arg, :file),
          s(:arg, :line)),
        s(:begin,
          s(:if,
            s(:lvasgn, :p,
              s(:send,
                s(:ivar, :@get_line_procs), :[],
                s(:lvar, :file))),
            s(:return,
              s(:send,
                s(:lvar, :p), :call,
                s(:lvar, :line))), nil),
          s(:if,
            s(:lvasgn, :list,
              s(:send,
                s(:const, nil, :SCRIPT_LINES__), :[],
                s(:lvar, :file))), nil,
            s(:begin,
              s(:lvasgn, :list,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :File), :readlines,
                    s(:lvar, :file)),
                  s(:resbody, nil, nil,
                    s(:array)), nil)),
              s(:send,
                s(:const, nil, :SCRIPT_LINES__), :[]=,
                s(:lvar, :file),
                s(:lvar, :list)))),
          s(:if,
            s(:lvasgn, :l,
              s(:send,
                s(:lvar, :list), :[],
                s(:send,
                  s(:lvar, :line), :-,
                  s(:int, 1)))),
            s(:lvar, :l),
            s(:str, "-\n")))),
      s(:def, :get_thread_no,
        s(:args),
        s(:if,
          s(:lvasgn, :no,
            s(:send,
              s(:ivar, :@threads), :[],
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :current), :object_id))),
          s(:lvar, :no),
          s(:send,
            s(:ivar, :@threads), :[]=,
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :object_id),
            s(:send,
              s(:ivar, :@threads), :size)))),
      s(:def, :trace_func,
        s(:args,
          s(:arg, :event),
          s(:arg, :file),
          s(:arg, :line),
          s(:arg, :id),
          s(:arg, :binding),
          s(:arg, :klass),
          s(:restarg)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :file), :==,
              s(:str, "(string)")),
            s(:return), nil),
          s(:for,
            s(:lvasgn, :p),
            s(:ivar, :@filters),
            s(:if,
              s(:send,
                s(:lvar, :p), :call,
                s(:lvar, :event),
                s(:lvar, :file),
                s(:lvar, :line),
                s(:lvar, :id),
                s(:lvar, :binding),
                s(:lvar, :klass)), nil,
              s(:return))),
          s(:if,
            s(:or,
              s(:send,
                s(:const, nil, :Tracer), :display_c_call?),
              s(:and,
                s(:send,
                  s(:lvar, :event), :!=,
                  s(:str, "c-call")),
                s(:send,
                  s(:lvar, :event), :!=,
                  s(:str, "c-return")))), nil,
            s(:return)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Tracer), :stdout_mutex), :synchronize),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :EVENT_SYMBOL), :[],
                s(:lvar, :event)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :Tracer), :display_process_id?),
                  s(:send,
                    s(:send, nil, :stdout), :printf,
                    s(:str, "<%d>"),
                    s(:gvar, :$$)), nil),
                s(:if,
                  s(:send,
                    s(:const, nil, :Tracer), :display_thread_id?),
                  s(:send,
                    s(:send, nil, :stdout), :printf,
                    s(:str, "#%d:"),
                    s(:send, nil, :get_thread_no)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :line), :==,
                    s(:int, 0)),
                  s(:lvasgn, :source,
                    s(:str, "?\n")),
                  s(:lvasgn, :source,
                    s(:send, nil, :get_line,
                      s(:lvar, :file),
                      s(:lvar, :line)))),
                s(:send,
                  s(:send, nil, :stdout), :printf,
                  s(:str, "%s:%d:%s:%s: %s"),
                  s(:lvar, :file),
                  s(:lvar, :line),
                  s(:or,
                    s(:lvar, :klass),
                    s(:str, "")),
                  s(:send,
                    s(:const, nil, :EVENT_SYMBOL), :[],
                    s(:lvar, :event)),
                  s(:lvar, :source))), nil)))),
      s(:casgn, nil, :Single,
        s(:send, nil, :new)),
      s(:defs,
        s(:const, nil, :Tracer), :on,
        s(:args),
        s(:if,
          s(:send, nil, :block_given?),
          s(:block,
            s(:send,
              s(:const, nil, :Single), :on),
            s(:args),
            s(:yield)),
          s(:send,
            s(:const, nil, :Single), :on))),
      s(:defs,
        s(:const, nil, :Tracer), :off,
        s(:args),
        s(:send,
          s(:const, nil, :Single), :off)),
      s(:defs,
        s(:const, nil, :Tracer), :set_get_line_procs,
        s(:args,
          s(:arg, :file_name),
          s(:optarg, :p,
            s(:send, nil, :proc))),
        s(:send,
          s(:const, nil, :Single), :set_get_line_procs,
          s(:lvar, :file_name),
          s(:lvar, :p))),
      s(:defs,
        s(:const, nil, :Tracer), :add_filter,
        s(:args,
          s(:optarg, :p,
            s(:send, nil, :proc))),
        s(:send,
          s(:const, nil, :Single), :add_filter,
          s(:lvar, :p))))),
  s(:if,
    s(:defined?,
      s(:const, nil, :SCRIPT_LINES__)), nil,
    s(:casgn, nil, :SCRIPT_LINES__,
      s(:hash))),
  s(:if,
    s(:send,
      s(:gvar, :$0), :==,
      s(:str, "(string)")),
    s(:begin,
      s(:gvasgn, :$0,
        s(:send,
          s(:const, nil, :ARGV), :[],
          s(:int, 0))),
      s(:send,
        s(:const, nil, :ARGV), :shift),
      s(:send,
        s(:const, nil, :Tracer), :on),
      s(:send, nil, :require,
        s(:gvar, :$0))),
    s(:begin,
      s(:lvasgn, :count,
        s(:block,
          s(:send,
            s(:send, nil, :caller), :count),
          s(:args,
            s(:arg, :bt)),
          s(:send,
            s(:regexp,
              s(:str, "/rubygems/core_ext/kernel_require\\.rb:"),
              s(:regopt)), :!~,
            s(:lvar, :bt)))),
      s(:if,
        s(:or,
          s(:begin,
            s(:and,
              s(:defined?,
                s(:const, nil, :Gem)),
              s(:send,
                s(:lvar, :count), :==,
                s(:int, 0)))),
          s(:begin,
            s(:and,
              s(:send,
                s(:defined?,
                  s(:const, nil, :Gem)), :!),
              s(:send,
                s(:lvar, :count), :<=,
                s(:int, 1))))),
        s(:send,
          s(:const, nil, :Tracer), :on), nil))))
