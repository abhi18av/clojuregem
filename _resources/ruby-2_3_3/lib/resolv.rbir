s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "io/wait")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "securerandom")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:class,
    s(:const, nil, :Resolv), nil,
    s(:begin,
      s(:defs,
        s(:self), :getaddress,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:const, nil, :DefaultResolver), :getaddress,
          s(:lvar, :name))),
      s(:defs,
        s(:self), :getaddresses,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:const, nil, :DefaultResolver), :getaddresses,
          s(:lvar, :name))),
      s(:defs,
        s(:self), :each_address,
        s(:args,
          s(:arg, :name),
          s(:blockarg, :block)),
        s(:send,
          s(:const, nil, :DefaultResolver), :each_address,
          s(:lvar, :name),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:defs,
        s(:self), :getname,
        s(:args,
          s(:arg, :address)),
        s(:send,
          s(:const, nil, :DefaultResolver), :getname,
          s(:lvar, :address))),
      s(:defs,
        s(:self), :getnames,
        s(:args,
          s(:arg, :address)),
        s(:send,
          s(:const, nil, :DefaultResolver), :getnames,
          s(:lvar, :address))),
      s(:defs,
        s(:self), :each_name,
        s(:args,
          s(:arg, :address),
          s(:blockarg, :proc)),
        s(:send,
          s(:const, nil, :DefaultResolver), :each_name,
          s(:lvar, :address),
          s(:block_pass,
            s(:lvar, :proc)))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :resolvers,
            s(:array,
              s(:send,
                s(:const, nil, :Hosts), :new),
              s(:send,
                s(:const, nil, :DNS), :new)))),
        s(:ivasgn, :@resolvers,
          s(:lvar, :resolvers))),
      s(:def, :getaddress,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:block,
            s(:send, nil, :each_address,
              s(:lvar, :name)),
            s(:args,
              s(:arg, :address)),
            s(:return,
              s(:lvar, :address))),
          s(:send, nil, :raise,
            s(:send,
              s(:const, nil, :ResolvError), :new,
              s(:dstr,
                s(:str, "no address for "),
                s(:begin,
                  s(:lvar, :name))))))),
      s(:def, :getaddresses,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :ret,
            s(:array)),
          s(:block,
            s(:send, nil, :each_address,
              s(:lvar, :name)),
            s(:args,
              s(:arg, :address)),
            s(:send,
              s(:lvar, :ret), :<<,
              s(:lvar, :address))),
          s(:return,
            s(:lvar, :ret)))),
      s(:def, :each_address,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :AddressRegex), :=~,
              s(:lvar, :name)),
            s(:begin,
              s(:yield,
                s(:lvar, :name)),
              s(:return)), nil),
          s(:lvasgn, :yielded,
            s(:false)),
          s(:block,
            s(:send,
              s(:ivar, :@resolvers), :each),
            s(:args,
              s(:arg, :r)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :r), :each_address,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :address)),
                s(:begin,
                  s(:yield,
                    s(:send,
                      s(:lvar, :address), :to_s)),
                  s(:lvasgn, :yielded,
                    s(:true)))),
              s(:if,
                s(:lvar, :yielded),
                s(:return), nil))))),
      s(:def, :getname,
        s(:args,
          s(:arg, :address)),
        s(:begin,
          s(:block,
            s(:send, nil, :each_name,
              s(:lvar, :address)),
            s(:args,
              s(:arg, :name)),
            s(:return,
              s(:lvar, :name))),
          s(:send, nil, :raise,
            s(:send,
              s(:const, nil, :ResolvError), :new,
              s(:dstr,
                s(:str, "no name for "),
                s(:begin,
                  s(:lvar, :address))))))),
      s(:def, :getnames,
        s(:args,
          s(:arg, :address)),
        s(:begin,
          s(:lvasgn, :ret,
            s(:array)),
          s(:block,
            s(:send, nil, :each_name,
              s(:lvar, :address)),
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:lvar, :ret), :<<,
              s(:lvar, :name))),
          s(:return,
            s(:lvar, :ret)))),
      s(:def, :each_name,
        s(:args,
          s(:arg, :address)),
        s(:begin,
          s(:lvasgn, :yielded,
            s(:false)),
          s(:block,
            s(:send,
              s(:ivar, :@resolvers), :each),
            s(:args,
              s(:arg, :r)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :r), :each_name,
                  s(:lvar, :address)),
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:yield,
                    s(:send,
                      s(:lvar, :name), :to_s)),
                  s(:lvasgn, :yielded,
                    s(:true)))),
              s(:if,
                s(:lvar, :yielded),
                s(:return), nil))))),
      s(:class,
        s(:const, nil, :ResolvError),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :ResolvTimeout),
        s(:const,
          s(:const, nil, :Timeout), :Error), nil),
      s(:class,
        s(:const, nil, :Hosts), nil,
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "mswin|mingw|cygwin"),
                      s(:regopt)),
                    s(:const, nil, :RUBY_PLATFORM)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :LoadError))),
                s(:send, nil, :require,
                  s(:str, "win32/resolv")),
                s(:casgn, nil, :DefaultFileName,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Win32), :Resolv), :get_hosts_path))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:casgn, nil, :DefaultFileName,
                  s(:str, "/etc/hosts"))), nil)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :filename,
                s(:const, nil, :DefaultFileName))),
            s(:begin,
              s(:ivasgn, :@filename,
                s(:lvar, :filename)),
              s(:ivasgn, :@mutex,
                s(:send,
                  s(:const, nil, :Mutex), :new)),
              s(:ivasgn, :@initialized,
                s(:nil)))),
          s(:def, :lazy_initialize,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@mutex), :synchronize),
                s(:args),
                s(:if,
                  s(:ivar, :@initialized), nil,
                  s(:begin,
                    s(:ivasgn, :@name2addr,
                      s(:hash)),
                    s(:ivasgn, :@addr2name,
                      s(:hash)),
                    s(:block,
                      s(:send, nil, :open,
                        s(:ivar, :@filename),
                        s(:str, "rb")),
                      s(:args,
                        s(:arg, :f)),
                      s(:block,
                        s(:send,
                          s(:lvar, :f), :each),
                        s(:args,
                          s(:arg, :line)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :line), :sub!,
                            s(:regexp,
                              s(:str, "#.*"),
                              s(:regopt)),
                            s(:str, "")),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :addr),
                              s(:lvasgn, :hostname),
                              s(:splat,
                                s(:lvasgn, :aliases))),
                            s(:send,
                              s(:lvar, :line), :split,
                              s(:regexp,
                                s(:str, "\\s+"),
                                s(:regopt)))),
                          s(:if,
                            s(:lvar, :addr), nil,
                            s(:next)),
                          s(:send,
                            s(:lvar, :addr), :untaint),
                          s(:send,
                            s(:lvar, :hostname), :untaint),
                          s(:if,
                            s(:send,
                              s(:ivar, :@addr2name), :include?,
                              s(:lvar, :addr)), nil,
                            s(:send,
                              s(:ivar, :@addr2name), :[]=,
                              s(:lvar, :addr),
                              s(:array))),
                          s(:send,
                            s(:send,
                              s(:ivar, :@addr2name), :[],
                              s(:lvar, :addr)), :<<,
                            s(:lvar, :hostname)),
                          s(:op_asgn,
                            s(:send,
                              s(:ivar, :@addr2name), :[],
                              s(:lvar, :addr)), :+,
                            s(:lvar, :aliases)),
                          s(:if,
                            s(:send,
                              s(:ivar, :@name2addr), :include?,
                              s(:lvar, :hostname)), nil,
                            s(:send,
                              s(:ivar, :@name2addr), :[]=,
                              s(:lvar, :hostname),
                              s(:array))),
                          s(:send,
                            s(:send,
                              s(:ivar, :@name2addr), :[],
                              s(:lvar, :hostname)), :<<,
                            s(:lvar, :addr)),
                          s(:block,
                            s(:send,
                              s(:lvar, :aliases), :each),
                            s(:args,
                              s(:arg, :n)),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :untaint),
                              s(:if,
                                s(:send,
                                  s(:ivar, :@name2addr), :include?,
                                  s(:lvar, :n)), nil,
                                s(:send,
                                  s(:ivar, :@name2addr), :[]=,
                                  s(:lvar, :n),
                                  s(:array))),
                              s(:send,
                                s(:send,
                                  s(:ivar, :@name2addr), :[],
                                  s(:lvar, :n)), :<<,
                                s(:lvar, :addr))))))),
                    s(:block,
                      s(:send,
                        s(:ivar, :@name2addr), :each),
                      s(:args,
                        s(:arg, :name),
                        s(:arg, :arr)),
                      s(:send,
                        s(:lvar, :arr), :reverse!)),
                    s(:ivasgn, :@initialized,
                      s(:true))))),
              s(:self))),
          s(:def, :getaddress,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:block,
                s(:send, nil, :each_address,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :address)),
                s(:return,
                  s(:lvar, :address))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ResolvError), :new,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@filename)),
                    s(:str, " has no name: "),
                    s(:begin,
                      s(:lvar, :name))))))),
          s(:def, :getaddresses,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:array)),
              s(:block,
                s(:send, nil, :each_address,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :address)),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:lvar, :address))),
              s(:return,
                s(:lvar, :ret)))),
          s(:def, :each_address,
            s(:args,
              s(:arg, :name),
              s(:blockarg, :proc)),
            s(:begin,
              s(:send, nil, :lazy_initialize),
              s(:if,
                s(:send,
                  s(:ivar, :@name2addr), :include?,
                  s(:lvar, :name)),
                s(:send,
                  s(:send,
                    s(:ivar, :@name2addr), :[],
                    s(:lvar, :name)), :each,
                  s(:block_pass,
                    s(:lvar, :proc))), nil))),
          s(:def, :getname,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:block,
                s(:send, nil, :each_name,
                  s(:lvar, :address)),
                s(:args,
                  s(:arg, :name)),
                s(:return,
                  s(:lvar, :name))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ResolvError), :new,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@filename)),
                    s(:str, " has no address: "),
                    s(:begin,
                      s(:lvar, :address))))))),
          s(:def, :getnames,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:array)),
              s(:block,
                s(:send, nil, :each_name,
                  s(:lvar, :address)),
                s(:args,
                  s(:arg, :name)),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:lvar, :name))),
              s(:return,
                s(:lvar, :ret)))),
          s(:def, :each_name,
            s(:args,
              s(:arg, :address),
              s(:blockarg, :proc)),
            s(:begin,
              s(:send, nil, :lazy_initialize),
              s(:if,
                s(:send,
                  s(:ivar, :@addr2name), :include?,
                  s(:lvar, :address)),
                s(:send,
                  s(:send,
                    s(:ivar, :@addr2name), :[],
                    s(:lvar, :address)), :each,
                  s(:block_pass,
                    s(:lvar, :proc))), nil))))),
      s(:class,
        s(:const, nil, :DNS), nil,
        s(:begin,
          s(:casgn, nil, :Port,
            s(:int, 53)),
          s(:casgn, nil, :UDPSize,
            s(:int, 512)),
          s(:defs,
            s(:self), :open,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:lvasgn, :dns,
                s(:send, nil, :new,
                  s(:splat,
                    s(:lvar, :args)))),
              s(:if,
                s(:send, nil, :block_given?), nil,
                s(:return,
                  s(:lvar, :dns))),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :dns)),
                  s(:send,
                    s(:lvar, :dns), :close))))),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :config_info,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@mutex,
                s(:send,
                  s(:const, nil, :Mutex), :new)),
              s(:ivasgn, :@config,
                s(:send,
                  s(:const, nil, :Config), :new,
                  s(:lvar, :config_info))),
              s(:ivasgn, :@initialized,
                s(:nil)))),
          s(:def, :timeouts=,
            s(:args,
              s(:arg, :values)),
            s(:send,
              s(:ivar, :@config), :timeouts=,
              s(:lvar, :values))),
          s(:def, :lazy_initialize,
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@mutex), :synchronize),
                s(:args),
                s(:if,
                  s(:ivar, :@initialized), nil,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@config), :lazy_initialize),
                    s(:ivasgn, :@initialized,
                      s(:true))))),
              s(:self))),
          s(:def, :close,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@mutex), :synchronize),
              s(:args),
              s(:if,
                s(:ivar, :@initialized),
                s(:ivasgn, :@initialized,
                  s(:false)), nil))),
          s(:def, :getaddress,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:block,
                s(:send, nil, :each_address,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :address)),
                s(:return,
                  s(:lvar, :address))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ResolvError), :new,
                  s(:dstr,
                    s(:str, "DNS result has no information for "),
                    s(:begin,
                      s(:lvar, :name))))))),
          s(:def, :getaddresses,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:array)),
              s(:block,
                s(:send, nil, :each_address,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :address)),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:lvar, :address))),
              s(:return,
                s(:lvar, :ret)))),
          s(:def, :each_address,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:block,
                s(:send, nil, :each_resource,
                  s(:lvar, :name),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Resource), :IN), :A)),
                s(:args,
                  s(:arg, :resource)),
                s(:yield,
                  s(:send,
                    s(:lvar, :resource), :address))),
              s(:if,
                s(:send, nil, :use_ipv6?),
                s(:block,
                  s(:send, nil, :each_resource,
                    s(:lvar, :name),
                    s(:const,
                      s(:const,
                        s(:const, nil, :Resource), :IN), :AAAA)),
                  s(:args,
                    s(:arg, :resource)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :resource), :address))), nil))),
          s(:def, :use_ipv6?,
            s(:args),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :list,
                    s(:send,
                      s(:const, nil, :Socket), :ip_address_list)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:return,
                      s(:true))), nil)),
              s(:block,
                s(:send,
                  s(:lvar, :list), :any?),
                s(:args,
                  s(:arg, :a)),
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :a), :ipv6?),
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :ipv6_loopback?), :!)),
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :ipv6_linklocal?), :!))))),
          s(:send, nil, :private,
            s(:sym, :use_ipv6?)),
          s(:def, :getname,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:block,
                s(:send, nil, :each_name,
                  s(:lvar, :address)),
                s(:args,
                  s(:arg, :name)),
                s(:return,
                  s(:lvar, :name))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ResolvError), :new,
                  s(:dstr,
                    s(:str, "DNS result has no information for "),
                    s(:begin,
                      s(:lvar, :address))))))),
          s(:def, :getnames,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:array)),
              s(:block,
                s(:send, nil, :each_name,
                  s(:lvar, :address)),
                s(:args,
                  s(:arg, :name)),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:lvar, :name))),
              s(:return,
                s(:lvar, :ret)))),
          s(:def, :each_name,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:case,
                s(:lvar, :address),
                s(:when,
                  s(:const, nil, :Name),
                  s(:lvasgn, :ptr,
                    s(:lvar, :address))),
                s(:when,
                  s(:const,
                    s(:const, nil, :IPv4), :Regex),
                  s(:lvasgn, :ptr,
                    s(:send,
                      s(:send,
                        s(:const, nil, :IPv4), :create,
                        s(:lvar, :address)), :to_name))),
                s(:when,
                  s(:const,
                    s(:const, nil, :IPv6), :Regex),
                  s(:lvasgn, :ptr,
                    s(:send,
                      s(:send,
                        s(:const, nil, :IPv6), :create,
                        s(:lvar, :address)), :to_name))),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :ResolvError), :new,
                    s(:dstr,
                      s(:str, "cannot interpret as address: "),
                      s(:begin,
                        s(:lvar, :address)))))),
              s(:block,
                s(:send, nil, :each_resource,
                  s(:lvar, :ptr),
                  s(:const,
                    s(:const,
                      s(:const, nil, :Resource), :IN), :PTR)),
                s(:args,
                  s(:arg, :resource)),
                s(:yield,
                  s(:send,
                    s(:lvar, :resource), :name))))),
          s(:def, :getresource,
            s(:args,
              s(:arg, :name),
              s(:arg, :typeclass)),
            s(:begin,
              s(:block,
                s(:send, nil, :each_resource,
                  s(:lvar, :name),
                  s(:lvar, :typeclass)),
                s(:args,
                  s(:arg, :resource)),
                s(:return,
                  s(:lvar, :resource))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ResolvError), :new,
                  s(:dstr,
                    s(:str, "DNS result has no information for "),
                    s(:begin,
                      s(:lvar, :name))))))),
          s(:def, :getresources,
            s(:args,
              s(:arg, :name),
              s(:arg, :typeclass)),
            s(:begin,
              s(:lvasgn, :ret,
                s(:array)),
              s(:block,
                s(:send, nil, :each_resource,
                  s(:lvar, :name),
                  s(:lvar, :typeclass)),
                s(:args,
                  s(:arg, :resource)),
                s(:send,
                  s(:lvar, :ret), :<<,
                  s(:lvar, :resource))),
              s(:return,
                s(:lvar, :ret)))),
          s(:def, :each_resource,
            s(:args,
              s(:arg, :name),
              s(:arg, :typeclass),
              s(:blockarg, :proc)),
            s(:block,
              s(:send, nil, :fetch_resource,
                s(:lvar, :name),
                s(:lvar, :typeclass)),
              s(:args,
                s(:arg, :reply),
                s(:arg, :reply_name)),
              s(:send, nil, :extract_resources,
                s(:lvar, :reply),
                s(:lvar, :reply_name),
                s(:lvar, :typeclass),
                s(:block_pass,
                  s(:lvar, :proc))))),
          s(:def, :fetch_resource,
            s(:args,
              s(:arg, :name),
              s(:arg, :typeclass)),
            s(:begin,
              s(:send, nil, :lazy_initialize),
              s(:lvasgn, :requester,
                s(:send, nil, :make_udp_requester)),
              s(:lvasgn, :senders,
                s(:hash)),
              s(:kwbegin,
                s(:ensure,
                  s(:block,
                    s(:send,
                      s(:ivar, :@config), :resolv,
                      s(:lvar, :name)),
                    s(:args,
                      s(:arg, :candidate),
                      s(:arg, :tout),
                      s(:arg, :nameserver),
                      s(:arg, :port)),
                    s(:begin,
                      s(:lvasgn, :msg,
                        s(:send,
                          s(:const, nil, :Message), :new)),
                      s(:send,
                        s(:lvar, :msg), :rd=,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :msg), :add_question,
                        s(:lvar, :candidate),
                        s(:lvar, :typeclass)),
                      s(:if,
                        s(:lvasgn, :sender,
                          s(:send,
                            s(:lvar, :senders), :[],
                            s(:array,
                              s(:lvar, :candidate),
                              s(:lvar, :nameserver),
                              s(:lvar, :port)))), nil,
                        s(:begin,
                          s(:lvasgn, :sender,
                            s(:send,
                              s(:lvar, :requester), :sender,
                              s(:lvar, :msg),
                              s(:lvar, :candidate),
                              s(:lvar, :nameserver),
                              s(:lvar, :port))),
                          s(:if,
                            s(:send,
                              s(:lvar, :sender), :!),
                            s(:next), nil),
                          s(:send,
                            s(:lvar, :senders), :[]=,
                            s(:array,
                              s(:lvar, :candidate),
                              s(:lvar, :nameserver),
                              s(:lvar, :port)),
                            s(:lvar, :sender)))),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :reply),
                          s(:lvasgn, :reply_name)),
                        s(:send,
                          s(:lvar, :requester), :request,
                          s(:lvar, :sender),
                          s(:lvar, :tout))),
                      s(:case,
                        s(:send,
                          s(:lvar, :reply), :rcode),
                        s(:when,
                          s(:const,
                            s(:const, nil, :RCode), :NoError),
                          s(:begin,
                            s(:if,
                              s(:and,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :reply), :tc), :==,
                                  s(:int, 1)),
                                s(:send,
                                  s(:send,
                                    s(:const,
                                      s(:const, nil, :Requester), :TCP), :===,
                                    s(:lvar, :requester)), :!)),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :requester), :close),
                                s(:lvasgn, :requester,
                                  s(:send, nil, :make_tcp_requester,
                                    s(:lvar, :nameserver),
                                    s(:lvar, :port))),
                                s(:lvasgn, :senders,
                                  s(:hash)),
                                s(:redo)),
                              s(:yield,
                                s(:lvar, :reply),
                                s(:lvar, :reply_name))),
                            s(:return))),
                        s(:when,
                          s(:const,
                            s(:const, nil, :RCode), :NXDomain),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Config), :NXDomain), :new,
                              s(:send,
                                s(:lvar, :reply_name), :to_s)))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Config), :OtherResolvError), :new,
                            s(:send,
                              s(:lvar, :reply_name), :to_s)))))),
                  s(:send,
                    s(:lvar, :requester), :close))))),
          s(:def, :make_udp_requester,
            s(:args),
            s(:begin,
              s(:lvasgn, :nameserver_port,
                s(:send,
                  s(:ivar, :@config), :nameserver_port)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :nameserver_port), :length), :==,
                  s(:int, 1)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Requester), :ConnectedUDP), :new,
                  s(:splat,
                    s(:send,
                      s(:lvar, :nameserver_port), :[],
                      s(:int, 0)))),
                s(:send,
                  s(:const,
                    s(:const, nil, :Requester), :UnconnectedUDP), :new,
                  s(:splat,
                    s(:lvar, :nameserver_port)))))),
          s(:def, :make_tcp_requester,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:return,
              s(:send,
                s(:const,
                  s(:const, nil, :Requester), :TCP), :new,
                s(:lvar, :host),
                s(:lvar, :port)))),
          s(:def, :extract_resources,
            s(:args,
              s(:arg, :msg),
              s(:arg, :name),
              s(:arg, :typeclass)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :typeclass), :<,
                  s(:const,
                    s(:const, nil, :Resource), :ANY)),
                s(:begin,
                  s(:lvasgn, :n0,
                    s(:send,
                      s(:const, nil, :Name), :create,
                      s(:lvar, :name))),
                  s(:block,
                    s(:send,
                      s(:lvar, :msg), :each_answer),
                    s(:args,
                      s(:arg, :n),
                      s(:arg, :ttl),
                      s(:arg, :data)),
                    s(:if,
                      s(:send,
                        s(:lvar, :n0), :==,
                        s(:lvar, :n)),
                      s(:yield,
                        s(:lvar, :data)), nil))), nil),
              s(:lvasgn, :yielded,
                s(:false)),
              s(:lvasgn, :n0,
                s(:send,
                  s(:const, nil, :Name), :create,
                  s(:lvar, :name))),
              s(:block,
                s(:send,
                  s(:lvar, :msg), :each_answer),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :ttl),
                  s(:arg, :data)),
                s(:if,
                  s(:send,
                    s(:lvar, :n0), :==,
                    s(:lvar, :n)),
                  s(:case,
                    s(:lvar, :data),
                    s(:when,
                      s(:lvar, :typeclass),
                      s(:begin,
                        s(:yield,
                          s(:lvar, :data)),
                        s(:lvasgn, :yielded,
                          s(:true)))),
                    s(:when,
                      s(:const,
                        s(:const, nil, :Resource), :CNAME),
                      s(:lvasgn, :n0,
                        s(:send,
                          s(:lvar, :data), :name))), nil), nil)),
              s(:if,
                s(:lvar, :yielded),
                s(:return), nil),
              s(:block,
                s(:send,
                  s(:lvar, :msg), :each_answer),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :ttl),
                  s(:arg, :data)),
                s(:if,
                  s(:send,
                    s(:lvar, :n0), :==,
                    s(:lvar, :n)),
                  s(:case,
                    s(:lvar, :data),
                    s(:when,
                      s(:lvar, :typeclass),
                      s(:yield,
                        s(:lvar, :data))), nil), nil)))),
          s(:if,
            s(:defined?,
              s(:const, nil, :SecureRandom)),
            s(:defs,
              s(:self), :random,
              s(:args,
                s(:arg, :arg)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :SecureRandom), :random_number,
                    s(:lvar, :arg)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NotImplementedError)), nil,
                    s(:send, nil, :rand,
                      s(:lvar, :arg))), nil))),
            s(:defs,
              s(:self), :random,
              s(:args,
                s(:arg, :arg)),
              s(:send, nil, :rand,
                s(:lvar, :arg)))),
          s(:defs,
            s(:self), :rangerand,
            s(:args,
              s(:arg, :range)),
            s(:begin,
              s(:lvasgn, :base,
                s(:send,
                  s(:lvar, :range), :begin)),
              s(:lvasgn, :len,
                s(:send,
                  s(:send,
                    s(:lvar, :range), :end), :-,
                  s(:send,
                    s(:lvar, :range), :begin))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :range), :exclude_end?), :!),
                s(:op_asgn,
                  s(:lvasgn, :len), :+,
                  s(:int, 1)), nil),
              s(:send,
                s(:lvar, :base), :+,
                s(:send, nil, :random,
                  s(:lvar, :len))))),
          s(:casgn, nil, :RequestID,
            s(:hash)),
          s(:casgn, nil, :RequestIDMutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:defs,
            s(:self), :allocate_request_id,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :id,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :RequestIDMutex), :synchronize),
                s(:args),
                s(:begin,
                  s(:lvasgn, :h,
                    s(:begin,
                      s(:or_asgn,
                        s(:send,
                          s(:const, nil, :RequestID), :[],
                          s(:array,
                            s(:lvar, :host),
                            s(:lvar, :port))),
                        s(:hash)))),
                  s(:while_post,
                    s(:send,
                      s(:lvar, :h), :[],
                      s(:lvar, :id)),
                    s(:kwbegin,
                      s(:lvasgn, :id,
                        s(:send, nil, :rangerand,
                          s(:irange,
                            s(:int, 0),
                            s(:int, 65535)))))),
                  s(:send,
                    s(:lvar, :h), :[]=,
                    s(:lvar, :id),
                    s(:true)))),
              s(:lvar, :id))),
          s(:defs,
            s(:self), :free_request_id,
            s(:args,
              s(:arg, :host),
              s(:arg, :port),
              s(:arg, :id)),
            s(:block,
              s(:send,
                s(:const, nil, :RequestIDMutex), :synchronize),
              s(:args),
              s(:begin,
                s(:lvasgn, :key,
                  s(:array,
                    s(:lvar, :host),
                    s(:lvar, :port))),
                s(:if,
                  s(:lvasgn, :h,
                    s(:send,
                      s(:const, nil, :RequestID), :[],
                      s(:lvar, :key))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :h), :delete,
                      s(:lvar, :id)),
                    s(:if,
                      s(:send,
                        s(:lvar, :h), :empty?),
                      s(:send,
                        s(:const, nil, :RequestID), :delete,
                        s(:lvar, :key)), nil)), nil)))),
          s(:defs,
            s(:self), :bind_random_port,
            s(:args,
              s(:arg, :udpsock),
              s(:optarg, :bind_host,
                s(:str, "0.0.0.0"))),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :port,
                    s(:send, nil, :rangerand,
                      s(:irange,
                        s(:int, 1024),
                        s(:int, 65535)))),
                  s(:send,
                    s(:lvar, :udpsock), :bind,
                    s(:lvar, :bind_host),
                    s(:lvar, :port))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EADDRINUSE),
                    s(:const,
                      s(:const, nil, :Errno), :EACCES),
                    s(:const,
                      s(:const, nil, :Errno), :EPERM)), nil,
                  s(:retry)), nil))),
          s(:class,
            s(:const, nil, :Requester), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:ivasgn, :@senders,
                    s(:hash)),
                  s(:ivasgn, :@socks,
                    s(:nil)))),
              s(:def, :request,
                s(:args,
                  s(:arg, :sender),
                  s(:arg, :tout)),
                s(:begin,
                  s(:lvasgn, :start,
                    s(:send,
                      s(:const, nil, :Process), :clock_gettime,
                      s(:const,
                        s(:const, nil, :Process), :CLOCK_MONOTONIC))),
                  s(:lvasgn, :timelimit,
                    s(:send,
                      s(:lvar, :start), :+,
                      s(:lvar, :tout))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:lvar, :sender), :send),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :EHOSTUNREACH),
                          s(:const,
                            s(:const, nil, :Errno), :ENETUNREACH)), nil,
                        s(:send, nil, :raise,
                          s(:const, nil, :ResolvTimeout))), nil)),
                  s(:while,
                    s(:true),
                    s(:begin,
                      s(:lvasgn, :before_select,
                        s(:send,
                          s(:const, nil, :Process), :clock_gettime,
                          s(:const,
                            s(:const, nil, :Process), :CLOCK_MONOTONIC))),
                      s(:lvasgn, :timeout,
                        s(:send,
                          s(:lvar, :timelimit), :-,
                          s(:lvar, :before_select))),
                      s(:if,
                        s(:send,
                          s(:lvar, :timeout), :<=,
                          s(:int, 0)),
                        s(:send, nil, :raise,
                          s(:const, nil, :ResolvTimeout)), nil),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@socks), :size), :==,
                          s(:int, 1)),
                        s(:lvasgn, :select_result,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:ivar, :@socks), :[],
                                s(:int, 0)), :wait_readable,
                              s(:lvar, :timeout)),
                            s(:array,
                              s(:ivar, :@socks)),
                            s(:nil))),
                        s(:lvasgn, :select_result,
                          s(:send,
                            s(:const, nil, :IO), :select,
                            s(:ivar, :@socks),
                            s(:nil),
                            s(:nil),
                            s(:lvar, :timeout)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :select_result), :!),
                        s(:begin,
                          s(:lvasgn, :after_select,
                            s(:send,
                              s(:const, nil, :Process), :clock_gettime,
                              s(:const,
                                s(:const, nil, :Process), :CLOCK_MONOTONIC))),
                          s(:if,
                            s(:send,
                              s(:lvar, :after_select), :<,
                              s(:lvar, :timelimit)),
                            s(:next), nil),
                          s(:send, nil, :raise,
                            s(:const, nil, :ResolvTimeout))), nil),
                      s(:kwbegin,
                        s(:rescue,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :reply),
                              s(:lvasgn, :from)),
                            s(:send, nil, :recv_reply,
                              s(:send,
                                s(:lvar, :select_result), :[],
                                s(:int, 0)))),
                          s(:resbody,
                            s(:array,
                              s(:const,
                                s(:const, nil, :Errno), :ECONNREFUSED),
                              s(:const,
                                s(:const, nil, :Errno), :ECONNRESET)), nil,
                            s(:send, nil, :raise,
                              s(:const, nil, :ResolvTimeout))), nil)),
                      s(:kwbegin,
                        s(:rescue,
                          s(:lvasgn, :msg,
                            s(:send,
                              s(:const, nil, :Message), :decode,
                              s(:lvar, :reply))),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :DecodeError)), nil,
                            s(:next)), nil)),
                      s(:if,
                        s(:lvasgn, :s,
                          s(:send, nil, :sender_for,
                            s(:lvar, :from),
                            s(:lvar, :msg))),
                        s(:break), nil))),
                  s(:return,
                    s(:lvar, :msg),
                    s(:send,
                      s(:lvar, :s), :data)))),
              s(:def, :sender_for,
                s(:args,
                  s(:arg, :addr),
                  s(:arg, :msg)),
                s(:send,
                  s(:ivar, :@senders), :[],
                  s(:array,
                    s(:lvar, :addr),
                    s(:send,
                      s(:lvar, :msg), :id)))),
              s(:def, :close,
                s(:args),
                s(:begin,
                  s(:lvasgn, :socks,
                    s(:ivar, :@socks)),
                  s(:ivasgn, :@socks,
                    s(:nil)),
                  s(:if,
                    s(:lvar, :socks),
                    s(:block,
                      s(:send,
                        s(:lvar, :socks), :each),
                      s(:args,
                        s(:arg, :sock)),
                      s(:send,
                        s(:lvar, :sock), :close)), nil))),
              s(:class,
                s(:const, nil, :Sender), nil,
                s(:def, :initialize,
                  s(:args,
                    s(:arg, :msg),
                    s(:arg, :data),
                    s(:arg, :sock)),
                  s(:begin,
                    s(:ivasgn, :@msg,
                      s(:lvar, :msg)),
                    s(:ivasgn, :@data,
                      s(:lvar, :data)),
                    s(:ivasgn, :@sock,
                      s(:lvar, :sock))))),
              s(:class,
                s(:const, nil, :UnconnectedUDP),
                s(:const, nil, :Requester),
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:restarg, :nameserver_port)),
                    s(:begin,
                      s(:super),
                      s(:ivasgn, :@nameserver_port,
                        s(:lvar, :nameserver_port)),
                      s(:ivasgn, :@socks_hash,
                        s(:hash)),
                      s(:ivasgn, :@socks,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:lvar, :nameserver_port), :each),
                        s(:args,
                          s(:arg, :host),
                          s(:arg, :port)),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :host), :index,
                              s(:str, ":")),
                            s(:begin,
                              s(:lvasgn, :bind_host,
                                s(:str, "::")),
                              s(:lvasgn, :af,
                                s(:const,
                                  s(:const, nil, :Socket), :AF_INET6))),
                            s(:begin,
                              s(:lvasgn, :bind_host,
                                s(:str, "0.0.0.0")),
                              s(:lvasgn, :af,
                                s(:const,
                                  s(:const, nil, :Socket), :AF_INET)))),
                          s(:if,
                            s(:send,
                              s(:ivar, :@socks_hash), :[],
                              s(:lvar, :bind_host)),
                            s(:next), nil),
                          s(:kwbegin,
                            s(:rescue,
                              s(:lvasgn, :sock,
                                s(:send,
                                  s(:const, nil, :UDPSocket), :new,
                                  s(:lvar, :af))),
                              s(:resbody,
                                s(:array,
                                  s(:const,
                                    s(:const, nil, :Errno), :EAFNOSUPPORT)), nil,
                                s(:next)), nil)),
                          s(:send,
                            s(:lvar, :sock), :do_not_reverse_lookup=,
                            s(:true)),
                          s(:send,
                            s(:const, nil, :DNS), :bind_random_port,
                            s(:lvar, :sock),
                            s(:lvar, :bind_host)),
                          s(:send,
                            s(:ivar, :@socks), :<<,
                            s(:lvar, :sock)),
                          s(:send,
                            s(:ivar, :@socks_hash), :[]=,
                            s(:lvar, :bind_host),
                            s(:lvar, :sock)))))),
                  s(:def, :recv_reply,
                    s(:args,
                      s(:arg, :readable_socks)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :reply),
                          s(:lvasgn, :from)),
                        s(:send,
                          s(:send,
                            s(:lvar, :readable_socks), :[],
                            s(:int, 0)), :recvfrom,
                          s(:const, nil, :UDPSize))),
                      s(:return,
                        s(:lvar, :reply),
                        s(:array,
                          s(:send,
                            s(:lvar, :from), :[],
                            s(:int, 3)),
                          s(:send,
                            s(:lvar, :from), :[],
                            s(:int, 1)))))),
                  s(:def, :sender,
                    s(:args,
                      s(:arg, :msg),
                      s(:arg, :data),
                      s(:arg, :host),
                      s(:optarg, :port,
                        s(:const, nil, :Port))),
                    s(:begin,
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:ivar, :@socks_hash), :[],
                          s(:if,
                            s(:send,
                              s(:lvar, :host), :index,
                              s(:str, ":")),
                            s(:str, "::"),
                            s(:str, "0.0.0.0")))),
                      s(:if,
                        s(:send,
                          s(:lvar, :sock), :!),
                        s(:return,
                          s(:nil)), nil),
                      s(:lvasgn, :service,
                        s(:array,
                          s(:lvar, :host),
                          s(:lvar, :port))),
                      s(:lvasgn, :id,
                        s(:send,
                          s(:const, nil, :DNS), :allocate_request_id,
                          s(:lvar, :host),
                          s(:lvar, :port))),
                      s(:lvasgn, :request,
                        s(:send,
                          s(:lvar, :msg), :encode)),
                      s(:send,
                        s(:lvar, :request), :[]=,
                        s(:int, 0),
                        s(:int, 2),
                        s(:send,
                          s(:array,
                            s(:lvar, :id)), :pack,
                          s(:str, "n"))),
                      s(:return,
                        s(:send,
                          s(:ivar, :@senders), :[]=,
                          s(:array,
                            s(:lvar, :service),
                            s(:lvar, :id)),
                          s(:send,
                            s(:const, nil, :Sender), :new,
                            s(:lvar, :request),
                            s(:lvar, :data),
                            s(:lvar, :sock),
                            s(:lvar, :host),
                            s(:lvar, :port)))))),
                  s(:def, :close,
                    s(:args),
                    s(:begin,
                      s(:zsuper),
                      s(:block,
                        s(:send,
                          s(:ivar, :@senders), :each_key),
                        s(:args,
                          s(:arg, :service),
                          s(:arg, :id)),
                        s(:send,
                          s(:const, nil, :DNS), :free_request_id,
                          s(:send,
                            s(:lvar, :service), :[],
                            s(:int, 0)),
                          s(:send,
                            s(:lvar, :service), :[],
                            s(:int, 1)),
                          s(:lvar, :id))))),
                  s(:class,
                    s(:const, nil, :Sender),
                    s(:const,
                      s(:const, nil, :Requester), :Sender),
                    s(:begin,
                      s(:def, :initialize,
                        s(:args,
                          s(:arg, :msg),
                          s(:arg, :data),
                          s(:arg, :sock),
                          s(:arg, :host),
                          s(:arg, :port)),
                        s(:begin,
                          s(:super,
                            s(:lvar, :msg),
                            s(:lvar, :data),
                            s(:lvar, :sock)),
                          s(:ivasgn, :@host,
                            s(:lvar, :host)),
                          s(:ivasgn, :@port,
                            s(:lvar, :port)))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :data)),
                      s(:def, :send,
                        s(:args),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:ivar, :@sock), :nil?),
                            s(:send, nil, :raise,
                              s(:str, "@sock is nil.")), nil),
                          s(:send,
                            s(:ivar, :@sock), :send,
                            s(:ivar, :@msg),
                            s(:int, 0),
                            s(:ivar, :@host),
                            s(:ivar, :@port)))))))),
              s(:class,
                s(:const, nil, :ConnectedUDP),
                s(:const, nil, :Requester),
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :host),
                      s(:optarg, :port,
                        s(:const, nil, :Port))),
                    s(:begin,
                      s(:super),
                      s(:ivasgn, :@host,
                        s(:lvar, :host)),
                      s(:ivasgn, :@port,
                        s(:lvar, :port)),
                      s(:lvasgn, :is_ipv6,
                        s(:send,
                          s(:lvar, :host), :index,
                          s(:str, ":"))),
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:const, nil, :UDPSocket), :new,
                          s(:if,
                            s(:lvar, :is_ipv6),
                            s(:const,
                              s(:const, nil, :Socket), :AF_INET6),
                            s(:const,
                              s(:const, nil, :Socket), :AF_INET)))),
                      s(:ivasgn, :@socks,
                        s(:array,
                          s(:lvar, :sock))),
                      s(:send,
                        s(:lvar, :sock), :do_not_reverse_lookup=,
                        s(:true)),
                      s(:send,
                        s(:const, nil, :DNS), :bind_random_port,
                        s(:lvar, :sock),
                        s(:if,
                          s(:lvar, :is_ipv6),
                          s(:str, "::"),
                          s(:str, "0.0.0.0"))),
                      s(:send,
                        s(:lvar, :sock), :connect,
                        s(:lvar, :host),
                        s(:lvar, :port)))),
                  s(:def, :recv_reply,
                    s(:args,
                      s(:arg, :readable_socks)),
                    s(:begin,
                      s(:lvasgn, :reply,
                        s(:send,
                          s(:send,
                            s(:lvar, :readable_socks), :[],
                            s(:int, 0)), :recv,
                          s(:const, nil, :UDPSize))),
                      s(:return,
                        s(:lvar, :reply),
                        s(:nil)))),
                  s(:def, :sender,
                    s(:args,
                      s(:arg, :msg),
                      s(:arg, :data),
                      s(:optarg, :host,
                        s(:ivar, :@host)),
                      s(:optarg, :port,
                        s(:ivar, :@port))),
                    s(:begin,
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :host), :==,
                            s(:ivar, :@host)),
                          s(:send,
                            s(:lvar, :port), :==,
                            s(:ivar, :@port))), nil,
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :RequestError), :new,
                            s(:dstr,
                              s(:str, "host/port don't match: "),
                              s(:begin,
                                s(:lvar, :host)),
                              s(:str, ":"),
                              s(:begin,
                                s(:lvar, :port)))))),
                      s(:lvasgn, :id,
                        s(:send,
                          s(:const, nil, :DNS), :allocate_request_id,
                          s(:ivar, :@host),
                          s(:ivar, :@port))),
                      s(:lvasgn, :request,
                        s(:send,
                          s(:lvar, :msg), :encode)),
                      s(:send,
                        s(:lvar, :request), :[]=,
                        s(:int, 0),
                        s(:int, 2),
                        s(:send,
                          s(:array,
                            s(:lvar, :id)), :pack,
                          s(:str, "n"))),
                      s(:return,
                        s(:send,
                          s(:ivar, :@senders), :[]=,
                          s(:array,
                            s(:nil),
                            s(:lvar, :id)),
                          s(:send,
                            s(:const, nil, :Sender), :new,
                            s(:lvar, :request),
                            s(:lvar, :data),
                            s(:send,
                              s(:ivar, :@socks), :[],
                              s(:int, 0))))))),
                  s(:def, :close,
                    s(:args),
                    s(:begin,
                      s(:zsuper),
                      s(:block,
                        s(:send,
                          s(:ivar, :@senders), :each_key),
                        s(:args,
                          s(:arg, :from),
                          s(:arg, :id)),
                        s(:send,
                          s(:const, nil, :DNS), :free_request_id,
                          s(:ivar, :@host),
                          s(:ivar, :@port),
                          s(:lvar, :id))))),
                  s(:class,
                    s(:const, nil, :Sender),
                    s(:const,
                      s(:const, nil, :Requester), :Sender),
                    s(:begin,
                      s(:def, :send,
                        s(:args),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:ivar, :@sock), :nil?),
                            s(:send, nil, :raise,
                              s(:str, "@sock is nil.")), nil),
                          s(:send,
                            s(:ivar, :@sock), :send,
                            s(:ivar, :@msg),
                            s(:int, 0)))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :data)))))),
              s(:class,
                s(:const, nil, :MDNSOneShot),
                s(:const, nil, :UnconnectedUDP),
                s(:begin,
                  s(:def, :sender,
                    s(:args,
                      s(:arg, :msg),
                      s(:arg, :data),
                      s(:arg, :host),
                      s(:optarg, :port,
                        s(:const, nil, :Port))),
                    s(:begin,
                      s(:lvasgn, :id,
                        s(:send,
                          s(:const, nil, :DNS), :allocate_request_id,
                          s(:lvar, :host),
                          s(:lvar, :port))),
                      s(:lvasgn, :request,
                        s(:send,
                          s(:lvar, :msg), :encode)),
                      s(:send,
                        s(:lvar, :request), :[]=,
                        s(:int, 0),
                        s(:int, 2),
                        s(:send,
                          s(:array,
                            s(:lvar, :id)), :pack,
                          s(:str, "n"))),
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:ivar, :@socks_hash), :[],
                          s(:if,
                            s(:send,
                              s(:lvar, :host), :index,
                              s(:str, ":")),
                            s(:str, "::"),
                            s(:str, "0.0.0.0")))),
                      s(:return,
                        s(:send,
                          s(:ivar, :@senders), :[]=,
                          s(:lvar, :id),
                          s(:send,
                            s(:const,
                              s(:const, nil, :UnconnectedUDP), :Sender), :new,
                            s(:lvar, :request),
                            s(:lvar, :data),
                            s(:lvar, :sock),
                            s(:lvar, :host),
                            s(:lvar, :port)))))),
                  s(:def, :sender_for,
                    s(:args,
                      s(:arg, :addr),
                      s(:arg, :msg)),
                    s(:send,
                      s(:ivar, :@senders), :[],
                      s(:send,
                        s(:lvar, :msg), :id))))),
              s(:class,
                s(:const, nil, :TCP),
                s(:const, nil, :Requester),
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :host),
                      s(:optarg, :port,
                        s(:const, nil, :Port))),
                    s(:begin,
                      s(:super),
                      s(:ivasgn, :@host,
                        s(:lvar, :host)),
                      s(:ivasgn, :@port,
                        s(:lvar, :port)),
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:const, nil, :TCPSocket), :new,
                          s(:ivar, :@host),
                          s(:ivar, :@port))),
                      s(:ivasgn, :@socks,
                        s(:array,
                          s(:lvar, :sock))),
                      s(:ivasgn, :@senders,
                        s(:hash)))),
                  s(:def, :recv_reply,
                    s(:args,
                      s(:arg, :readable_socks)),
                    s(:begin,
                      s(:lvasgn, :len,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :readable_socks), :[],
                                s(:int, 0)), :read,
                              s(:int, 2)), :unpack,
                            s(:str, "n")), :[],
                          s(:int, 0))),
                      s(:lvasgn, :reply,
                        s(:send,
                          s(:send,
                            s(:ivar, :@socks), :[],
                            s(:int, 0)), :read,
                          s(:lvar, :len))),
                      s(:return,
                        s(:lvar, :reply),
                        s(:nil)))),
                  s(:def, :sender,
                    s(:args,
                      s(:arg, :msg),
                      s(:arg, :data),
                      s(:optarg, :host,
                        s(:ivar, :@host)),
                      s(:optarg, :port,
                        s(:ivar, :@port))),
                    s(:begin,
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :host), :==,
                            s(:ivar, :@host)),
                          s(:send,
                            s(:lvar, :port), :==,
                            s(:ivar, :@port))), nil,
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :RequestError), :new,
                            s(:dstr,
                              s(:str, "host/port don't match: "),
                              s(:begin,
                                s(:lvar, :host)),
                              s(:str, ":"),
                              s(:begin,
                                s(:lvar, :port)))))),
                      s(:lvasgn, :id,
                        s(:send,
                          s(:const, nil, :DNS), :allocate_request_id,
                          s(:ivar, :@host),
                          s(:ivar, :@port))),
                      s(:lvasgn, :request,
                        s(:send,
                          s(:lvar, :msg), :encode)),
                      s(:send,
                        s(:lvar, :request), :[]=,
                        s(:int, 0),
                        s(:int, 2),
                        s(:send,
                          s(:array,
                            s(:send,
                              s(:lvar, :request), :length),
                            s(:lvar, :id)), :pack,
                          s(:str, "nn"))),
                      s(:return,
                        s(:send,
                          s(:ivar, :@senders), :[]=,
                          s(:array,
                            s(:nil),
                            s(:lvar, :id)),
                          s(:send,
                            s(:const, nil, :Sender), :new,
                            s(:lvar, :request),
                            s(:lvar, :data),
                            s(:send,
                              s(:ivar, :@socks), :[],
                              s(:int, 0))))))),
                  s(:class,
                    s(:const, nil, :Sender),
                    s(:const,
                      s(:const, nil, :Requester), :Sender),
                    s(:begin,
                      s(:def, :send,
                        s(:args),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@sock), :print,
                            s(:ivar, :@msg)),
                          s(:send,
                            s(:ivar, :@sock), :flush))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :data)))),
                  s(:def, :close,
                    s(:args),
                    s(:begin,
                      s(:zsuper),
                      s(:block,
                        s(:send,
                          s(:ivar, :@senders), :each_key),
                        s(:args,
                          s(:arg, :from),
                          s(:arg, :id)),
                        s(:send,
                          s(:const, nil, :DNS), :free_request_id,
                          s(:ivar, :@host),
                          s(:ivar, :@port),
                          s(:lvar, :id))))))),
              s(:class,
                s(:const, nil, :RequestError),
                s(:const, nil, :StandardError), nil))),
          s(:class,
            s(:const, nil, :Config), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:optarg, :config_info,
                    s(:nil))),
                s(:begin,
                  s(:ivasgn, :@mutex,
                    s(:send,
                      s(:const, nil, :Mutex), :new)),
                  s(:ivasgn, :@config_info,
                    s(:lvar, :config_info)),
                  s(:ivasgn, :@initialized,
                    s(:nil)),
                  s(:ivasgn, :@timeouts,
                    s(:nil)))),
              s(:def, :timeouts=,
                s(:args,
                  s(:arg, :values)),
                s(:if,
                  s(:lvar, :values),
                  s(:begin,
                    s(:lvasgn, :values,
                      s(:send, nil, :Array,
                        s(:lvar, :values))),
                    s(:block,
                      s(:send,
                        s(:lvar, :values), :each),
                      s(:args,
                        s(:arg, :t)),
                      s(:begin,
                        s(:or,
                          s(:send,
                            s(:const, nil, :Numeric), :===,
                            s(:lvar, :t)),
                          s(:send, nil, :raise,
                            s(:const, nil, :ArgumentError),
                            s(:dstr,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :t), :inspect)),
                              s(:str, " is not numeric")))),
                        s(:or,
                          s(:send,
                            s(:lvar, :t), :>,
                            s(:float, 0.0)),
                          s(:send, nil, :raise,
                            s(:const, nil, :ArgumentError),
                            s(:dstr,
                              s(:str, "timeout="),
                              s(:begin,
                                s(:lvar, :t)),
                              s(:str, " must be positive")))))),
                    s(:ivasgn, :@timeouts,
                      s(:lvar, :values))),
                  s(:ivasgn, :@timeouts,
                    s(:nil)))),
              s(:defs,
                s(:const, nil, :Config), :parse_resolv_conf,
                s(:args,
                  s(:arg, :filename)),
                s(:begin,
                  s(:lvasgn, :nameserver,
                    s(:array)),
                  s(:lvasgn, :search,
                    s(:nil)),
                  s(:lvasgn, :ndots,
                    s(:int, 1)),
                  s(:block,
                    s(:send, nil, :open,
                      s(:lvar, :filename),
                      s(:str, "rb")),
                    s(:args,
                      s(:arg, :f)),
                    s(:block,
                      s(:send,
                        s(:lvar, :f), :each),
                      s(:args,
                        s(:arg, :line)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :line), :sub!,
                          s(:regexp,
                            s(:str, "[#;].*"),
                            s(:regopt)),
                          s(:str, "")),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :keyword),
                            s(:splat,
                              s(:lvasgn, :args))),
                          s(:send,
                            s(:lvar, :line), :split,
                            s(:regexp,
                              s(:str, "\\s+"),
                              s(:regopt)))),
                        s(:block,
                          s(:send,
                            s(:lvar, :args), :each),
                          s(:args,
                            s(:arg, :arg)),
                          s(:send,
                            s(:lvar, :arg), :untaint)),
                        s(:if,
                          s(:lvar, :keyword), nil,
                          s(:next)),
                        s(:case,
                          s(:lvar, :keyword),
                          s(:when,
                            s(:str, "nameserver"),
                            s(:op_asgn,
                              s(:lvasgn, :nameserver), :+,
                              s(:lvar, :args))),
                          s(:when,
                            s(:str, "domain"),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:lvar, :args), :empty?),
                                s(:next), nil),
                              s(:lvasgn, :search,
                                s(:array,
                                  s(:send,
                                    s(:lvar, :args), :[],
                                    s(:int, 0)))))),
                          s(:when,
                            s(:str, "search"),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:lvar, :args), :empty?),
                                s(:next), nil),
                              s(:lvasgn, :search,
                                s(:lvar, :args)))),
                          s(:when,
                            s(:str, "options"),
                            s(:block,
                              s(:send,
                                s(:lvar, :args), :each),
                              s(:args,
                                s(:arg, :arg)),
                              s(:case,
                                s(:lvar, :arg),
                                s(:when,
                                  s(:regexp,
                                    s(:str, "\\Andots:(\\d+)\\z"),
                                    s(:regopt)),
                                  s(:lvasgn, :ndots,
                                    s(:send,
                                      s(:nth_ref, 1), :to_i))), nil))), nil)))),
                  s(:return,
                    s(:hash,
                      s(:pair,
                        s(:sym, :nameserver),
                        s(:lvar, :nameserver)),
                      s(:pair,
                        s(:sym, :search),
                        s(:lvar, :search)),
                      s(:pair,
                        s(:sym, :ndots),
                        s(:lvar, :ndots)))))),
              s(:defs,
                s(:const, nil, :Config), :default_config_hash,
                s(:args,
                  s(:optarg, :filename,
                    s(:str, "/etc/resolv.conf"))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :filename)),
                    s(:lvasgn, :config_hash,
                      s(:send,
                        s(:const, nil, :Config), :parse_resolv_conf,
                        s(:lvar, :filename))),
                    s(:if,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "mswin|cygwin|mingw|bccwin"),
                          s(:regopt)),
                        s(:const, nil, :RUBY_PLATFORM)),
                      s(:begin,
                        s(:send, nil, :require,
                          s(:str, "win32/resolv")),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :search),
                            s(:lvasgn, :nameserver)),
                          s(:send,
                            s(:const,
                              s(:const, nil, :Win32), :Resolv), :get_resolv_info)),
                        s(:lvasgn, :config_hash,
                          s(:hash)),
                        s(:if,
                          s(:lvar, :nameserver),
                          s(:send,
                            s(:lvar, :config_hash), :[]=,
                            s(:sym, :nameserver),
                            s(:lvar, :nameserver)), nil),
                        s(:if,
                          s(:lvar, :search),
                          s(:send,
                            s(:lvar, :config_hash), :[]=,
                            s(:sym, :search),
                            s(:send,
                              s(:array,
                                s(:lvar, :search)), :flatten)), nil)), nil)),
                  s(:or,
                    s(:lvar, :config_hash),
                    s(:hash)))),
              s(:def, :lazy_initialize,
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:ivar, :@mutex), :synchronize),
                    s(:args),
                    s(:if,
                      s(:ivar, :@initialized), nil,
                      s(:begin,
                        s(:ivasgn, :@nameserver_port,
                          s(:array)),
                        s(:ivasgn, :@search,
                          s(:nil)),
                        s(:ivasgn, :@ndots,
                          s(:int, 1)),
                        s(:case,
                          s(:ivar, :@config_info),
                          s(:when,
                            s(:nil),
                            s(:lvasgn, :config_hash,
                              s(:send,
                                s(:const, nil, :Config), :default_config_hash))),
                          s(:when,
                            s(:const, nil, :String),
                            s(:lvasgn, :config_hash,
                              s(:send,
                                s(:const, nil, :Config), :parse_resolv_conf,
                                s(:ivar, :@config_info)))),
                          s(:when,
                            s(:const, nil, :Hash),
                            s(:begin,
                              s(:lvasgn, :config_hash,
                                s(:send,
                                  s(:ivar, :@config_info), :dup)),
                              s(:if,
                                s(:send,
                                  s(:const, nil, :String), :===,
                                  s(:send,
                                    s(:lvar, :config_hash), :[],
                                    s(:sym, :nameserver))),
                                s(:send,
                                  s(:lvar, :config_hash), :[]=,
                                  s(:sym, :nameserver),
                                  s(:array,
                                    s(:send,
                                      s(:lvar, :config_hash), :[],
                                      s(:sym, :nameserver)))), nil),
                              s(:if,
                                s(:send,
                                  s(:const, nil, :String), :===,
                                  s(:send,
                                    s(:lvar, :config_hash), :[],
                                    s(:sym, :search))),
                                s(:send,
                                  s(:lvar, :config_hash), :[]=,
                                  s(:sym, :search),
                                  s(:array,
                                    s(:send,
                                      s(:lvar, :config_hash), :[],
                                      s(:sym, :search)))), nil))),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :ArgumentError), :new,
                              s(:dstr,
                                s(:str, "invalid resolv configuration: "),
                                s(:begin,
                                  s(:send,
                                    s(:ivar, :@config_info), :inspect)))))),
                        s(:if,
                          s(:send,
                            s(:lvar, :config_hash), :include?,
                            s(:sym, :nameserver)),
                          s(:ivasgn, :@nameserver_port,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :config_hash), :[],
                                  s(:sym, :nameserver)), :map),
                              s(:args,
                                s(:arg, :ns)),
                              s(:array,
                                s(:lvar, :ns),
                                s(:const, nil, :Port)))), nil),
                        s(:if,
                          s(:send,
                            s(:lvar, :config_hash), :include?,
                            s(:sym, :nameserver_port)),
                          s(:ivasgn, :@nameserver_port,
                            s(:block,
                              s(:send,
                                s(:send,
                                  s(:lvar, :config_hash), :[],
                                  s(:sym, :nameserver_port)), :map),
                              s(:args,
                                s(:arg, :ns),
                                s(:arg, :port)),
                              s(:array,
                                s(:lvar, :ns),
                                s(:begin,
                                  s(:or,
                                    s(:lvar, :port),
                                    s(:const, nil, :Port)))))), nil),
                        s(:if,
                          s(:send,
                            s(:lvar, :config_hash), :include?,
                            s(:sym, :search)),
                          s(:ivasgn, :@search,
                            s(:send,
                              s(:lvar, :config_hash), :[],
                              s(:sym, :search))), nil),
                        s(:if,
                          s(:send,
                            s(:lvar, :config_hash), :include?,
                            s(:sym, :ndots)),
                          s(:ivasgn, :@ndots,
                            s(:send,
                              s(:lvar, :config_hash), :[],
                              s(:sym, :ndots))), nil),
                        s(:if,
                          s(:send,
                            s(:ivar, :@nameserver_port), :empty?),
                          s(:send,
                            s(:ivar, :@nameserver_port), :<<,
                            s(:array,
                              s(:str, "0.0.0.0"),
                              s(:const, nil, :Port))), nil),
                        s(:if,
                          s(:ivar, :@search),
                          s(:ivasgn, :@search,
                            s(:block,
                              s(:send,
                                s(:ivar, :@search), :map),
                              s(:args,
                                s(:arg, :arg)),
                              s(:send,
                                s(:const, nil, :Label), :split,
                                s(:lvar, :arg)))),
                          s(:begin,
                            s(:lvasgn, :hostname,
                              s(:send,
                                s(:const, nil, :Socket), :gethostname)),
                            s(:if,
                              s(:match_with_lvasgn,
                                s(:regexp,
                                  s(:str, "\\."),
                                  s(:regopt)),
                                s(:lvar, :hostname)),
                              s(:ivasgn, :@search,
                                s(:array,
                                  s(:send,
                                    s(:const, nil, :Label), :split,
                                    s(:back_ref, :$')))),
                              s(:ivasgn, :@search,
                                s(:array,
                                  s(:array)))))),
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:send,
                                s(:ivar, :@nameserver_port), :kind_of?,
                                s(:const, nil, :Array)), :!),
                            s(:block,
                              s(:send,
                                s(:ivar, :@nameserver_port), :any?),
                              s(:args,
                                s(:arg, :ns_port)),
                              s(:begin,
                                s(:or,
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:const, nil, :Array), :===,
                                        s(:lvar, :ns_port))), :!),
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :ns_port), :length), :!=,
                                    s(:int, 2))),
                                s(:or,
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:const, nil, :String), :===,
                                        s(:send,
                                          s(:lvar, :ns_port), :[],
                                          s(:int, 0)))), :!),
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:const, nil, :Integer), :===,
                                        s(:send,
                                          s(:lvar, :ns_port), :[],
                                          s(:int, 1)))), :!))))),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :ArgumentError), :new,
                              s(:dstr,
                                s(:str, "invalid nameserver config: "),
                                s(:begin,
                                  s(:send,
                                    s(:ivar, :@nameserver_port), :inspect))))), nil),
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:send,
                                s(:ivar, :@search), :kind_of?,
                                s(:const, nil, :Array)), :!),
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:ivar, :@search), :all?),
                                s(:args,
                                  s(:arg, :ls)),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :ls), :all?),
                                  s(:args,
                                    s(:arg, :l)),
                                  s(:send,
                                    s(:const,
                                      s(:const, nil, :Label), :Str), :===,
                                    s(:lvar, :l)))), :!)),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :ArgumentError), :new,
                              s(:dstr,
                                s(:str, "invalid search config: "),
                                s(:begin,
                                  s(:send,
                                    s(:ivar, :@search), :inspect))))), nil),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:ivar, :@ndots), :kind_of?,
                              s(:const, nil, :Integer)), :!),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :ArgumentError), :new,
                              s(:dstr,
                                s(:str, "invalid ndots config: "),
                                s(:begin,
                                  s(:send,
                                    s(:ivar, :@ndots), :inspect))))), nil),
                        s(:ivasgn, :@initialized,
                          s(:true))))),
                  s(:self))),
              s(:def, :single?,
                s(:args),
                s(:begin,
                  s(:send, nil, :lazy_initialize),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@nameserver_port), :length), :==,
                      s(:int, 1)),
                    s(:return,
                      s(:send,
                        s(:ivar, :@nameserver_port), :[],
                        s(:int, 0))),
                    s(:return,
                      s(:nil))))),
              s(:def, :nameserver_port,
                s(:args),
                s(:ivar, :@nameserver_port)),
              s(:def, :generate_candidates,
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:lvasgn, :candidates,
                    s(:nil)),
                  s(:lvasgn, :name,
                    s(:send,
                      s(:const, nil, :Name), :create,
                      s(:lvar, :name))),
                  s(:if,
                    s(:send,
                      s(:lvar, :name), :absolute?),
                    s(:lvasgn, :candidates,
                      s(:array,
                        s(:lvar, :name))),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:ivar, :@ndots), :<=,
                          s(:send,
                            s(:send,
                              s(:lvar, :name), :length), :-,
                            s(:int, 1))),
                        s(:lvasgn, :candidates,
                          s(:array,
                            s(:send,
                              s(:const, nil, :Name), :new,
                              s(:send,
                                s(:lvar, :name), :to_a)))),
                        s(:lvasgn, :candidates,
                          s(:array))),
                      s(:send,
                        s(:lvar, :candidates), :concat,
                        s(:block,
                          s(:send,
                            s(:ivar, :@search), :map),
                          s(:args,
                            s(:arg, :domain)),
                          s(:send,
                            s(:const, nil, :Name), :new,
                            s(:send,
                              s(:send,
                                s(:lvar, :name), :to_a), :+,
                              s(:lvar, :domain))))),
                      s(:lvasgn, :fname,
                        s(:send,
                          s(:const, nil, :Name), :create,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :name)),
                            s(:str, ".")))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :candidates), :include?,
                            s(:lvar, :fname)), :!),
                        s(:send,
                          s(:lvar, :candidates), :<<,
                          s(:lvar, :fname)), nil))),
                  s(:return,
                    s(:lvar, :candidates)))),
              s(:casgn, nil, :InitialTimeout,
                s(:int, 5)),
              s(:def, :generate_timeouts,
                s(:args),
                s(:begin,
                  s(:lvasgn, :ts,
                    s(:array,
                      s(:const, nil, :InitialTimeout))),
                  s(:send,
                    s(:lvar, :ts), :<<,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :ts), :[],
                          s(:int, -1)), :*,
                        s(:int, 2)), :/,
                      s(:send,
                        s(:ivar, :@nameserver_port), :length))),
                  s(:send,
                    s(:lvar, :ts), :<<,
                    s(:send,
                      s(:send,
                        s(:lvar, :ts), :[],
                        s(:int, -1)), :*,
                      s(:int, 2))),
                  s(:send,
                    s(:lvar, :ts), :<<,
                    s(:send,
                      s(:send,
                        s(:lvar, :ts), :[],
                        s(:int, -1)), :*,
                      s(:int, 2))),
                  s(:return,
                    s(:lvar, :ts)))),
              s(:def, :resolv,
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:lvasgn, :candidates,
                    s(:send, nil, :generate_candidates,
                      s(:lvar, :name))),
                  s(:lvasgn, :timeouts,
                    s(:or,
                      s(:ivar, :@timeouts),
                      s(:send, nil, :generate_timeouts))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:block,
                        s(:send,
                          s(:lvar, :candidates), :each),
                        s(:args,
                          s(:arg, :candidate)),
                        s(:kwbegin,
                          s(:rescue,
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :timeouts), :each),
                                s(:args,
                                  s(:arg, :tout)),
                                s(:block,
                                  s(:send,
                                    s(:ivar, :@nameserver_port), :each),
                                  s(:args,
                                    s(:arg, :nameserver),
                                    s(:arg, :port)),
                                  s(:kwbegin,
                                    s(:rescue,
                                      s(:yield,
                                        s(:lvar, :candidate),
                                        s(:lvar, :tout),
                                        s(:lvar, :nameserver),
                                        s(:lvar, :port)),
                                      s(:resbody,
                                        s(:array,
                                          s(:const, nil, :ResolvTimeout)), nil, nil), nil)))),
                              s(:send, nil, :raise,
                                s(:send,
                                  s(:const, nil, :ResolvError), :new,
                                  s(:dstr,
                                    s(:str, "DNS resolv timeout: "),
                                    s(:begin,
                                      s(:lvar, :name)))))),
                            s(:resbody,
                              s(:array,
                                s(:const, nil, :NXDomain)), nil, nil), nil))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ResolvError)), nil, nil), nil)))),
              s(:class,
                s(:const, nil, :NXDomain),
                s(:const, nil, :ResolvError), nil),
              s(:class,
                s(:const, nil, :OtherResolvError),
                s(:const, nil, :ResolvError), nil))),
          s(:module,
            s(:const, nil, :OpCode),
            s(:begin,
              s(:casgn, nil, :Query,
                s(:int, 0)),
              s(:casgn, nil, :IQuery,
                s(:int, 1)),
              s(:casgn, nil, :Status,
                s(:int, 2)),
              s(:casgn, nil, :Notify,
                s(:int, 4)),
              s(:casgn, nil, :Update,
                s(:int, 5)))),
          s(:module,
            s(:const, nil, :RCode),
            s(:begin,
              s(:casgn, nil, :NoError,
                s(:int, 0)),
              s(:casgn, nil, :FormErr,
                s(:int, 1)),
              s(:casgn, nil, :ServFail,
                s(:int, 2)),
              s(:casgn, nil, :NXDomain,
                s(:int, 3)),
              s(:casgn, nil, :NotImp,
                s(:int, 4)),
              s(:casgn, nil, :Refused,
                s(:int, 5)),
              s(:casgn, nil, :YXDomain,
                s(:int, 6)),
              s(:casgn, nil, :YXRRSet,
                s(:int, 7)),
              s(:casgn, nil, :NXRRSet,
                s(:int, 8)),
              s(:casgn, nil, :NotAuth,
                s(:int, 9)),
              s(:casgn, nil, :NotZone,
                s(:int, 10)),
              s(:casgn, nil, :BADVERS,
                s(:int, 16)),
              s(:casgn, nil, :BADSIG,
                s(:int, 16)),
              s(:casgn, nil, :BADKEY,
                s(:int, 17)),
              s(:casgn, nil, :BADTIME,
                s(:int, 18)),
              s(:casgn, nil, :BADMODE,
                s(:int, 19)),
              s(:casgn, nil, :BADNAME,
                s(:int, 20)),
              s(:casgn, nil, :BADALG,
                s(:int, 21)))),
          s(:class,
            s(:const, nil, :DecodeError),
            s(:const, nil, :StandardError), nil),
          s(:class,
            s(:const, nil, :EncodeError),
            s(:const, nil, :StandardError), nil),
          s(:module,
            s(:const, nil, :Label),
            s(:begin,
              s(:defs,
                s(:self), :split,
                s(:args,
                  s(:arg, :arg)),
                s(:begin,
                  s(:lvasgn, :labels,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :arg), :scan,
                      s(:regexp,
                        s(:str, "[^\\.]+"),
                        s(:regopt))),
                    s(:args),
                    s(:send,
                      s(:lvar, :labels), :<<,
                      s(:send,
                        s(:const, nil, :Str), :new,
                        s(:back_ref, :$&)))),
                  s(:return,
                    s(:lvar, :labels)))),
              s(:class,
                s(:const, nil, :Str), nil,
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :string)),
                    s(:begin,
                      s(:ivasgn, :@string,
                        s(:lvar, :string)),
                      s(:ivasgn, :@downcase,
                        s(:send,
                          s(:send,
                            s(:lvar, :string), :b), :downcase)))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :string),
                    s(:sym, :downcase)),
                  s(:def, :to_s,
                    s(:args),
                    s(:return,
                      s(:ivar, :@string))),
                  s(:def, :inspect,
                    s(:args),
                    s(:return,
                      s(:dstr,
                        s(:str, "#<"),
                        s(:begin,
                          s(:send,
                            s(:self), :class)),
                        s(:str, " "),
                        s(:begin,
                          s(:self)),
                        s(:str, ">")))),
                  s(:def, :==,
                    s(:args,
                      s(:arg, :other)),
                    s(:return,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:self), :class), :==,
                          s(:send,
                            s(:lvar, :other), :class)),
                        s(:send,
                          s(:ivar, :@downcase), :==,
                          s(:send,
                            s(:lvar, :other), :downcase))))),
                  s(:def, :eql?,
                    s(:args,
                      s(:arg, :other)),
                    s(:return,
                      s(:send,
                        s(:self), :==,
                        s(:lvar, :other)))),
                  s(:def, :hash,
                    s(:args),
                    s(:return,
                      s(:send,
                        s(:ivar, :@downcase), :hash))))))),
          s(:class,
            s(:const, nil, :Name), nil,
            s(:begin,
              s(:defs,
                s(:self), :create,
                s(:args,
                  s(:arg, :arg)),
                s(:case,
                  s(:lvar, :arg),
                  s(:when,
                    s(:const, nil, :Name),
                    s(:return,
                      s(:lvar, :arg))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:return,
                      s(:send,
                        s(:const, nil, :Name), :new,
                        s(:send,
                          s(:const, nil, :Label), :split,
                          s(:lvar, :arg)),
                        s(:if,
                          s(:match_with_lvasgn,
                            s(:regexp,
                              s(:str, "\\.\\z"),
                              s(:regopt)),
                            s(:lvar, :arg)),
                          s(:true),
                          s(:false))))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ArgumentError), :new,
                      s(:dstr,
                        s(:str, "cannot interpret as DNS name: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :arg), :inspect))))))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :labels),
                  s(:optarg, :absolute,
                    s(:true))),
                s(:begin,
                  s(:lvasgn, :labels,
                    s(:block,
                      s(:send,
                        s(:lvar, :labels), :map),
                      s(:args,
                        s(:arg, :label)),
                      s(:case,
                        s(:lvar, :label),
                        s(:when,
                          s(:const, nil, :String),
                          s(:send,
                            s(:const,
                              s(:const, nil, :Label), :Str), :new,
                            s(:lvar, :label))),
                        s(:when,
                          s(:const,
                            s(:const, nil, :Label), :Str),
                          s(:lvar, :label)),
                        s(:send, nil, :raise,
                          s(:const, nil, :ArgumentError),
                          s(:dstr,
                            s(:str, "unexpected label: "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :label), :inspect))))))),
                  s(:ivasgn, :@labels,
                    s(:lvar, :labels)),
                  s(:ivasgn, :@absolute,
                    s(:lvar, :absolute)))),
              s(:def, :inspect,
                s(:args),
                s(:dstr,
                  s(:str, "#<"),
                  s(:begin,
                    s(:send,
                      s(:self), :class)),
                  s(:str, ": "),
                  s(:begin,
                    s(:self)),
                  s(:begin,
                    s(:if,
                      s(:ivar, :@absolute),
                      s(:str, "."),
                      s(:str, ""))),
                  s(:str, ">"))),
              s(:def, :absolute?,
                s(:args),
                s(:return,
                  s(:ivar, :@absolute))),
              s(:def, :==,
                s(:args,
                  s(:arg, :other)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Name), :===,
                      s(:lvar, :other)), nil,
                    s(:return,
                      s(:false))),
                  s(:if,
                    s(:send,
                      s(:ivar, :@absolute), :==,
                      s(:send,
                        s(:lvar, :other), :absolute?)), nil,
                    s(:return,
                      s(:false))),
                  s(:return,
                    s(:send,
                      s(:ivar, :@labels), :==,
                      s(:send,
                        s(:lvar, :other), :to_a))))),
              s(:alias,
                s(:sym, :eql?),
                s(:sym, :==)),
              s(:def, :subdomain_of?,
                s(:args,
                  s(:arg, :other)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Name), :===,
                      s(:lvar, :other)), nil,
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:dstr,
                        s(:str, "not a domain name: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :other), :inspect))))),
                  s(:if,
                    s(:send,
                      s(:ivar, :@absolute), :!=,
                      s(:send,
                        s(:lvar, :other), :absolute?)),
                    s(:return,
                      s(:false)), nil),
                  s(:lvasgn, :other_len,
                    s(:send,
                      s(:lvar, :other), :length)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@labels), :length), :<=,
                      s(:lvar, :other_len)),
                    s(:return,
                      s(:false)), nil),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:ivar, :@labels), :[],
                        s(:send,
                          s(:lvar, :other_len), :-@),
                        s(:lvar, :other_len)), :==,
                      s(:send,
                        s(:lvar, :other), :to_a))))),
              s(:def, :hash,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:ivar, :@labels), :hash), :^,
                    s(:send,
                      s(:ivar, :@absolute), :hash)))),
              s(:def, :to_a,
                s(:args),
                s(:return,
                  s(:ivar, :@labels))),
              s(:def, :length,
                s(:args),
                s(:return,
                  s(:send,
                    s(:ivar, :@labels), :length))),
              s(:def, :[],
                s(:args,
                  s(:arg, :i)),
                s(:return,
                  s(:send,
                    s(:ivar, :@labels), :[],
                    s(:lvar, :i)))),
              s(:def, :to_s,
                s(:args),
                s(:return,
                  s(:send,
                    s(:ivar, :@labels), :join,
                    s(:str, ".")))))),
          s(:class,
            s(:const, nil, :Message), nil,
            s(:begin,
              s(:cvasgn, :@@identifier,
                s(:int, -1)),
              s(:def, :initialize,
                s(:args,
                  s(:optarg, :id,
                    s(:send,
                      s(:begin,
                        s(:op_asgn,
                          s(:cvasgn, :@@identifier), :+,
                          s(:int, 1))), :&,
                      s(:int, 65535)))),
                s(:begin,
                  s(:ivasgn, :@id,
                    s(:lvar, :id)),
                  s(:ivasgn, :@qr,
                    s(:int, 0)),
                  s(:ivasgn, :@opcode,
                    s(:int, 0)),
                  s(:ivasgn, :@aa,
                    s(:int, 0)),
                  s(:ivasgn, :@tc,
                    s(:int, 0)),
                  s(:ivasgn, :@rd,
                    s(:int, 0)),
                  s(:ivasgn, :@ra,
                    s(:int, 0)),
                  s(:ivasgn, :@rcode,
                    s(:int, 0)),
                  s(:ivasgn, :@question,
                    s(:array)),
                  s(:ivasgn, :@answer,
                    s(:array)),
                  s(:ivasgn, :@authority,
                    s(:array)),
                  s(:ivasgn, :@additional,
                    s(:array)))),
              s(:send, nil, :attr_accessor,
                s(:sym, :id),
                s(:sym, :qr),
                s(:sym, :opcode),
                s(:sym, :aa),
                s(:sym, :tc),
                s(:sym, :rd),
                s(:sym, :ra),
                s(:sym, :rcode)),
              s(:send, nil, :attr_reader,
                s(:sym, :question),
                s(:sym, :answer),
                s(:sym, :authority),
                s(:sym, :additional)),
              s(:def, :==,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:and,
                            s(:and,
                              s(:and,
                                s(:and,
                                  s(:and,
                                    s(:and,
                                      s(:and,
                                        s(:send,
                                          s(:ivar, :@id), :==,
                                          s(:send,
                                            s(:lvar, :other), :id)),
                                        s(:send,
                                          s(:ivar, :@qr), :==,
                                          s(:send,
                                            s(:lvar, :other), :qr))),
                                      s(:send,
                                        s(:ivar, :@opcode), :==,
                                        s(:send,
                                          s(:lvar, :other), :opcode))),
                                    s(:send,
                                      s(:ivar, :@aa), :==,
                                      s(:send,
                                        s(:lvar, :other), :aa))),
                                  s(:send,
                                    s(:ivar, :@tc), :==,
                                    s(:send,
                                      s(:lvar, :other), :tc))),
                                s(:send,
                                  s(:ivar, :@rd), :==,
                                  s(:send,
                                    s(:lvar, :other), :rd))),
                              s(:send,
                                s(:ivar, :@ra), :==,
                                s(:send,
                                  s(:lvar, :other), :ra))),
                            s(:send,
                              s(:ivar, :@rcode), :==,
                              s(:send,
                                s(:lvar, :other), :rcode))),
                          s(:send,
                            s(:ivar, :@question), :==,
                            s(:send,
                              s(:lvar, :other), :question))),
                        s(:send,
                          s(:ivar, :@answer), :==,
                          s(:send,
                            s(:lvar, :other), :answer))),
                      s(:send,
                        s(:ivar, :@authority), :==,
                        s(:send,
                          s(:lvar, :other), :authority))),
                    s(:send,
                      s(:ivar, :@additional), :==,
                      s(:send,
                        s(:lvar, :other), :additional))))),
              s(:def, :add_question,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :typeclass)),
                s(:send,
                  s(:ivar, :@question), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :Name), :create,
                      s(:lvar, :name)),
                    s(:lvar, :typeclass)))),
              s(:def, :each_question,
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@question), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :typeclass)),
                  s(:yield,
                    s(:lvar, :name),
                    s(:lvar, :typeclass)))),
              s(:def, :add_answer,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :ttl),
                  s(:arg, :data)),
                s(:send,
                  s(:ivar, :@answer), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :Name), :create,
                      s(:lvar, :name)),
                    s(:lvar, :ttl),
                    s(:lvar, :data)))),
              s(:def, :each_answer,
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@answer), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :ttl),
                    s(:arg, :data)),
                  s(:yield,
                    s(:lvar, :name),
                    s(:lvar, :ttl),
                    s(:lvar, :data)))),
              s(:def, :add_authority,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :ttl),
                  s(:arg, :data)),
                s(:send,
                  s(:ivar, :@authority), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :Name), :create,
                      s(:lvar, :name)),
                    s(:lvar, :ttl),
                    s(:lvar, :data)))),
              s(:def, :each_authority,
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@authority), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :ttl),
                    s(:arg, :data)),
                  s(:yield,
                    s(:lvar, :name),
                    s(:lvar, :ttl),
                    s(:lvar, :data)))),
              s(:def, :add_additional,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :ttl),
                  s(:arg, :data)),
                s(:send,
                  s(:ivar, :@additional), :<<,
                  s(:array,
                    s(:send,
                      s(:const, nil, :Name), :create,
                      s(:lvar, :name)),
                    s(:lvar, :ttl),
                    s(:lvar, :data)))),
              s(:def, :each_additional,
                s(:args),
                s(:block,
                  s(:send,
                    s(:ivar, :@additional), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :ttl),
                    s(:arg, :data)),
                  s(:yield,
                    s(:lvar, :name),
                    s(:lvar, :ttl),
                    s(:lvar, :data)))),
              s(:def, :each_resource,
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send, nil, :each_answer),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :ttl),
                      s(:arg, :data)),
                    s(:yield,
                      s(:lvar, :name),
                      s(:lvar, :ttl),
                      s(:lvar, :data))),
                  s(:block,
                    s(:send, nil, :each_authority),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :ttl),
                      s(:arg, :data)),
                    s(:yield,
                      s(:lvar, :name),
                      s(:lvar, :ttl),
                      s(:lvar, :data))),
                  s(:block,
                    s(:send, nil, :each_additional),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :ttl),
                      s(:arg, :data)),
                    s(:yield,
                      s(:lvar, :name),
                      s(:lvar, :ttl),
                      s(:lvar, :data))))),
              s(:def, :encode,
                s(:args),
                s(:return,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :MessageEncoder), :new),
                      s(:args,
                        s(:arg, :msg)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :msg), :put_pack,
                          s(:str, "nnnnnn"),
                          s(:ivar, :@id),
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:begin,
                                          s(:send,
                                            s(:ivar, :@qr), :&,
                                            s(:int, 1))), :<<,
                                        s(:int, 15)), :|,
                                      s(:send,
                                        s(:begin,
                                          s(:send,
                                            s(:ivar, :@opcode), :&,
                                            s(:int, 15))), :<<,
                                        s(:int, 11))), :|,
                                    s(:send,
                                      s(:begin,
                                        s(:send,
                                          s(:ivar, :@aa), :&,
                                          s(:int, 1))), :<<,
                                      s(:int, 10))), :|,
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:ivar, :@tc), :&,
                                        s(:int, 1))), :<<,
                                    s(:int, 9))), :|,
                                s(:send,
                                  s(:begin,
                                    s(:send,
                                      s(:ivar, :@rd), :&,
                                      s(:int, 1))), :<<,
                                  s(:int, 8))), :|,
                              s(:send,
                                s(:begin,
                                  s(:send,
                                    s(:ivar, :@ra), :&,
                                    s(:int, 1))), :<<,
                                s(:int, 7))), :|,
                            s(:begin,
                              s(:send,
                                s(:ivar, :@rcode), :&,
                                s(:int, 15)))),
                          s(:send,
                            s(:ivar, :@question), :length),
                          s(:send,
                            s(:ivar, :@answer), :length),
                          s(:send,
                            s(:ivar, :@authority), :length),
                          s(:send,
                            s(:ivar, :@additional), :length)),
                        s(:block,
                          s(:send,
                            s(:ivar, :@question), :each),
                          s(:args,
                            s(:arg, :q)),
                          s(:begin,
                            s(:masgn,
                              s(:mlhs,
                                s(:lvasgn, :name),
                                s(:lvasgn, :typeclass)),
                              s(:lvar, :q)),
                            s(:send,
                              s(:lvar, :msg), :put_name,
                              s(:lvar, :name)),
                            s(:send,
                              s(:lvar, :msg), :put_pack,
                              s(:str, "nn"),
                              s(:const,
                                s(:lvar, :typeclass), :TypeValue),
                              s(:const,
                                s(:lvar, :typeclass), :ClassValue)))),
                        s(:block,
                          s(:send,
                            s(:array,
                              s(:ivar, :@answer),
                              s(:ivar, :@authority),
                              s(:ivar, :@additional)), :each),
                          s(:args,
                            s(:arg, :rr)),
                          s(:block,
                            s(:send,
                              s(:lvar, :rr), :each),
                            s(:args,
                              s(:arg, :r)),
                            s(:begin,
                              s(:masgn,
                                s(:mlhs,
                                  s(:lvasgn, :name),
                                  s(:lvasgn, :ttl),
                                  s(:lvasgn, :data)),
                                s(:lvar, :r)),
                              s(:send,
                                s(:lvar, :msg), :put_name,
                                s(:lvar, :name)),
                              s(:send,
                                s(:lvar, :msg), :put_pack,
                                s(:str, "nnN"),
                                s(:const,
                                  s(:send,
                                    s(:lvar, :data), :class), :TypeValue),
                                s(:const,
                                  s(:send,
                                    s(:lvar, :data), :class), :ClassValue),
                                s(:lvar, :ttl)),
                              s(:block,
                                s(:send,
                                  s(:lvar, :msg), :put_length16),
                                s(:args),
                                s(:send,
                                  s(:lvar, :data), :encode_rdata,
                                  s(:lvar, :msg)))))))), :to_s))),
              s(:class,
                s(:const, nil, :MessageEncoder), nil,
                s(:begin,
                  s(:def, :initialize,
                    s(:args),
                    s(:begin,
                      s(:ivasgn, :@data,
                        s(:send,
                          s(:str, ""), :dup)),
                      s(:ivasgn, :@names,
                        s(:hash)),
                      s(:yield,
                        s(:self)))),
                  s(:def, :to_s,
                    s(:args),
                    s(:return,
                      s(:ivar, :@data))),
                  s(:def, :put_bytes,
                    s(:args,
                      s(:arg, :d)),
                    s(:send,
                      s(:ivar, :@data), :<<,
                      s(:lvar, :d))),
                  s(:def, :put_pack,
                    s(:args,
                      s(:arg, :template),
                      s(:restarg, :d)),
                    s(:send,
                      s(:ivar, :@data), :<<,
                      s(:send,
                        s(:lvar, :d), :pack,
                        s(:lvar, :template)))),
                  s(:def, :put_length16,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :length_index,
                        s(:send,
                          s(:ivar, :@data), :length)),
                      s(:send,
                        s(:ivar, :@data), :<<,
                        s(:str, "\u0000\u0000")),
                      s(:lvasgn, :data_start,
                        s(:send,
                          s(:ivar, :@data), :length)),
                      s(:yield),
                      s(:lvasgn, :data_end,
                        s(:send,
                          s(:ivar, :@data), :length)),
                      s(:send,
                        s(:ivar, :@data), :[]=,
                        s(:lvar, :length_index),
                        s(:int, 2),
                        s(:send,
                          s(:array,
                            s(:send,
                              s(:lvar, :data_end), :-,
                              s(:lvar, :data_start))), :pack,
                          s(:str, "n"))))),
                  s(:def, :put_string,
                    s(:args,
                      s(:arg, :d)),
                    s(:begin,
                      s(:send,
                        s(:self), :put_pack,
                        s(:str, "C"),
                        s(:send,
                          s(:lvar, :d), :length)),
                      s(:send,
                        s(:ivar, :@data), :<<,
                        s(:lvar, :d)))),
                  s(:def, :put_string_list,
                    s(:args,
                      s(:arg, :ds)),
                    s(:block,
                      s(:send,
                        s(:lvar, :ds), :each),
                      s(:args,
                        s(:arg, :d)),
                      s(:send,
                        s(:self), :put_string,
                        s(:lvar, :d)))),
                  s(:def, :put_name,
                    s(:args,
                      s(:arg, :d)),
                    s(:send, nil, :put_labels,
                      s(:send,
                        s(:lvar, :d), :to_a))),
                  s(:def, :put_labels,
                    s(:args,
                      s(:arg, :d)),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:lvar, :d), :each_index),
                        s(:args,
                          s(:arg, :i)),
                        s(:begin,
                          s(:lvasgn, :domain,
                            s(:send,
                              s(:lvar, :d), :[],
                              s(:irange,
                                s(:lvar, :i),
                                s(:int, -1)))),
                          s(:if,
                            s(:lvasgn, :idx,
                              s(:send,
                                s(:ivar, :@names), :[],
                                s(:lvar, :domain))),
                            s(:begin,
                              s(:send,
                                s(:self), :put_pack,
                                s(:str, "n"),
                                s(:send,
                                  s(:int, 49152), :|,
                                  s(:lvar, :idx))),
                              s(:return)),
                            s(:begin,
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@data), :length), :<,
                                  s(:int, 16384)),
                                s(:send,
                                  s(:ivar, :@names), :[]=,
                                  s(:lvar, :domain),
                                  s(:send,
                                    s(:ivar, :@data), :length)), nil),
                              s(:send,
                                s(:self), :put_label,
                                s(:send,
                                  s(:lvar, :d), :[],
                                  s(:lvar, :i))))))),
                      s(:send,
                        s(:ivar, :@data), :<<,
                        s(:str, "\u0000")))),
                  s(:def, :put_label,
                    s(:args,
                      s(:arg, :d)),
                    s(:send,
                      s(:self), :put_string,
                      s(:send,
                        s(:lvar, :d), :to_s))))),
              s(:defs,
                s(:const, nil, :Message), :decode,
                s(:args,
                  s(:arg, :m)),
                s(:begin,
                  s(:lvasgn, :o,
                    s(:send,
                      s(:const, nil, :Message), :new,
                      s(:int, 0))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :MessageDecoder), :new,
                      s(:lvar, :m)),
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :id),
                          s(:lvasgn, :flag),
                          s(:lvasgn, :qdcount),
                          s(:lvasgn, :ancount),
                          s(:lvasgn, :nscount),
                          s(:lvasgn, :arcount)),
                        s(:send,
                          s(:lvar, :msg), :get_unpack,
                          s(:str, "nnnnnn"))),
                      s(:send,
                        s(:lvar, :o), :id=,
                        s(:lvar, :id)),
                      s(:send,
                        s(:lvar, :o), :qr=,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :flag), :>>,
                              s(:int, 15))), :&,
                          s(:int, 1))),
                      s(:send,
                        s(:lvar, :o), :opcode=,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :flag), :>>,
                              s(:int, 11))), :&,
                          s(:int, 15))),
                      s(:send,
                        s(:lvar, :o), :aa=,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :flag), :>>,
                              s(:int, 10))), :&,
                          s(:int, 1))),
                      s(:send,
                        s(:lvar, :o), :tc=,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :flag), :>>,
                              s(:int, 9))), :&,
                          s(:int, 1))),
                      s(:send,
                        s(:lvar, :o), :rd=,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :flag), :>>,
                              s(:int, 8))), :&,
                          s(:int, 1))),
                      s(:send,
                        s(:lvar, :o), :ra=,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :flag), :>>,
                              s(:int, 7))), :&,
                          s(:int, 1))),
                      s(:send,
                        s(:lvar, :o), :rcode=,
                        s(:send,
                          s(:lvar, :flag), :&,
                          s(:int, 15))),
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 1),
                              s(:lvar, :qdcount))), :each),
                        s(:args),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :name),
                              s(:lvasgn, :typeclass)),
                            s(:send,
                              s(:lvar, :msg), :get_question)),
                          s(:send,
                            s(:lvar, :o), :add_question,
                            s(:lvar, :name),
                            s(:lvar, :typeclass)))),
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 1),
                              s(:lvar, :ancount))), :each),
                        s(:args),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :name),
                              s(:lvasgn, :ttl),
                              s(:lvasgn, :data)),
                            s(:send,
                              s(:lvar, :msg), :get_rr)),
                          s(:send,
                            s(:lvar, :o), :add_answer,
                            s(:lvar, :name),
                            s(:lvar, :ttl),
                            s(:lvar, :data)))),
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 1),
                              s(:lvar, :nscount))), :each),
                        s(:args),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :name),
                              s(:lvasgn, :ttl),
                              s(:lvasgn, :data)),
                            s(:send,
                              s(:lvar, :msg), :get_rr)),
                          s(:send,
                            s(:lvar, :o), :add_authority,
                            s(:lvar, :name),
                            s(:lvar, :ttl),
                            s(:lvar, :data)))),
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 1),
                              s(:lvar, :arcount))), :each),
                        s(:args),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :name),
                              s(:lvasgn, :ttl),
                              s(:lvasgn, :data)),
                            s(:send,
                              s(:lvar, :msg), :get_rr)),
                          s(:send,
                            s(:lvar, :o), :add_additional,
                            s(:lvar, :name),
                            s(:lvar, :ttl),
                            s(:lvar, :data)))))),
                  s(:return,
                    s(:lvar, :o)))),
              s(:class,
                s(:const, nil, :MessageDecoder), nil,
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :data)),
                    s(:begin,
                      s(:ivasgn, :@data,
                        s(:lvar, :data)),
                      s(:ivasgn, :@index,
                        s(:int, 0)),
                      s(:ivasgn, :@limit,
                        s(:send,
                          s(:lvar, :data), :length)),
                      s(:yield,
                        s(:self)))),
                  s(:def, :inspect,
                    s(:args),
                    s(:dstr,
                      s(:str, "#<"),
                      s(:begin,
                        s(:send,
                          s(:self), :class)),
                      s(:str, ": "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@data), :[],
                            s(:int, 0),
                            s(:ivar, :@index)), :inspect)),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:ivar, :@data), :[],
                            s(:irange,
                              s(:ivar, :@index),
                              s(:int, -1))), :inspect)),
                      s(:str, ">"))),
                  s(:def, :get_length16,
                    s(:args),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :len)),
                        s(:send,
                          s(:self), :get_unpack,
                          s(:str, "n"))),
                      s(:lvasgn, :save_limit,
                        s(:ivar, :@limit)),
                      s(:ivasgn, :@limit,
                        s(:send,
                          s(:ivar, :@index), :+,
                          s(:lvar, :len))),
                      s(:lvasgn, :d,
                        s(:yield,
                          s(:lvar, :len))),
                      s(:if,
                        s(:send,
                          s(:ivar, :@index), :<,
                          s(:ivar, :@limit)),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :DecodeError), :new,
                            s(:str, "junk exists"))),
                        s(:if,
                          s(:send,
                            s(:ivar, :@limit), :<,
                            s(:ivar, :@index)),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :DecodeError), :new,
                              s(:str, "limit exceeded"))), nil)),
                      s(:ivasgn, :@limit,
                        s(:lvar, :save_limit)),
                      s(:return,
                        s(:lvar, :d)))),
                  s(:def, :get_bytes,
                    s(:args,
                      s(:optarg, :len,
                        s(:send,
                          s(:ivar, :@limit), :-,
                          s(:ivar, :@index)))),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:ivar, :@limit), :<,
                          s(:send,
                            s(:ivar, :@index), :+,
                            s(:lvar, :len))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :DecodeError), :new,
                            s(:str, "limit exceeded"))), nil),
                      s(:lvasgn, :d,
                        s(:send,
                          s(:ivar, :@data), :[],
                          s(:ivar, :@index),
                          s(:lvar, :len))),
                      s(:op_asgn,
                        s(:ivasgn, :@index), :+,
                        s(:lvar, :len)),
                      s(:return,
                        s(:lvar, :d)))),
                  s(:def, :get_unpack,
                    s(:args,
                      s(:arg, :template)),
                    s(:begin,
                      s(:lvasgn, :len,
                        s(:int, 0)),
                      s(:block,
                        s(:send,
                          s(:lvar, :template), :each_byte),
                        s(:args,
                          s(:arg, :byte)),
                        s(:begin,
                          s(:lvasgn, :byte,
                            s(:send,
                              s(:str, "%c"), :%,
                              s(:lvar, :byte))),
                          s(:case,
                            s(:lvar, :byte),
                            s(:when,
                              s(:str, "c"),
                              s(:str, "C"),
                              s(:op_asgn,
                                s(:lvasgn, :len), :+,
                                s(:int, 1))),
                            s(:when,
                              s(:str, "n"),
                              s(:op_asgn,
                                s(:lvasgn, :len), :+,
                                s(:int, 2))),
                            s(:when,
                              s(:str, "N"),
                              s(:op_asgn,
                                s(:lvasgn, :len), :+,
                                s(:int, 4))),
                            s(:send, nil, :raise,
                              s(:send,
                                s(:const, nil, :StandardError), :new,
                                s(:dstr,
                                  s(:str, "unsupported template: '"),
                                  s(:begin,
                                    s(:send,
                                      s(:lvar, :byte), :chr)),
                                  s(:str, "' in '"),
                                  s(:begin,
                                    s(:lvar, :template)),
                                  s(:str, "'"))))))),
                      s(:if,
                        s(:send,
                          s(:ivar, :@limit), :<,
                          s(:send,
                            s(:ivar, :@index), :+,
                            s(:lvar, :len))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :DecodeError), :new,
                            s(:str, "limit exceeded"))), nil),
                      s(:lvasgn, :arr,
                        s(:send,
                          s(:ivar, :@data), :unpack,
                          s(:dstr,
                            s(:str, "@"),
                            s(:begin,
                              s(:ivar, :@index)),
                            s(:begin,
                              s(:lvar, :template))))),
                      s(:op_asgn,
                        s(:ivasgn, :@index), :+,
                        s(:lvar, :len)),
                      s(:return,
                        s(:lvar, :arr)))),
                  s(:def, :get_string,
                    s(:args),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:ivar, :@limit), :<=,
                          s(:ivar, :@index)),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :DecodeError), :new,
                            s(:str, "limit exceeded"))), nil),
                      s(:lvasgn, :len,
                        s(:send,
                          s(:send,
                            s(:ivar, :@data), :[],
                            s(:ivar, :@index)), :ord)),
                      s(:if,
                        s(:send,
                          s(:ivar, :@limit), :<,
                          s(:send,
                            s(:send,
                              s(:ivar, :@index), :+,
                              s(:int, 1)), :+,
                            s(:lvar, :len))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :DecodeError), :new,
                            s(:str, "limit exceeded"))), nil),
                      s(:lvasgn, :d,
                        s(:send,
                          s(:ivar, :@data), :[],
                          s(:send,
                            s(:ivar, :@index), :+,
                            s(:int, 1)),
                          s(:lvar, :len))),
                      s(:op_asgn,
                        s(:ivasgn, :@index), :+,
                        s(:send,
                          s(:int, 1), :+,
                          s(:lvar, :len))),
                      s(:return,
                        s(:lvar, :d)))),
                  s(:def, :get_string_list,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :strings,
                        s(:array)),
                      s(:while,
                        s(:send,
                          s(:ivar, :@index), :<,
                          s(:ivar, :@limit)),
                        s(:send,
                          s(:lvar, :strings), :<<,
                          s(:send,
                            s(:self), :get_string))),
                      s(:lvar, :strings))),
                  s(:def, :get_name,
                    s(:args),
                    s(:return,
                      s(:send,
                        s(:const, nil, :Name), :new,
                        s(:send,
                          s(:self), :get_labels)))),
                  s(:def, :get_labels,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :prev_index,
                        s(:ivar, :@index)),
                      s(:lvasgn, :save_index,
                        s(:nil)),
                      s(:lvasgn, :d,
                        s(:array)),
                      s(:while,
                        s(:true),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:ivar, :@limit), :<=,
                              s(:ivar, :@index)),
                            s(:send, nil, :raise,
                              s(:send,
                                s(:const, nil, :DecodeError), :new,
                                s(:str, "limit exceeded"))), nil),
                          s(:case,
                            s(:send,
                              s(:send,
                                s(:ivar, :@data), :[],
                                s(:ivar, :@index)), :ord),
                            s(:when,
                              s(:int, 0),
                              s(:begin,
                                s(:op_asgn,
                                  s(:ivasgn, :@index), :+,
                                  s(:int, 1)),
                                s(:if,
                                  s(:lvar, :save_index),
                                  s(:ivasgn, :@index,
                                    s(:lvar, :save_index)), nil),
                                s(:return,
                                  s(:lvar, :d)))),
                            s(:when,
                              s(:irange,
                                s(:int, 192),
                                s(:int, 255)),
                              s(:begin,
                                s(:lvasgn, :idx,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:self), :get_unpack,
                                        s(:str, "n")), :[],
                                      s(:int, 0)), :&,
                                    s(:int, 16383))),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :prev_index), :<=,
                                    s(:lvar, :idx)),
                                  s(:send, nil, :raise,
                                    s(:send,
                                      s(:const, nil, :DecodeError), :new,
                                      s(:str, "non-backward name pointer"))), nil),
                                s(:lvasgn, :prev_index,
                                  s(:lvar, :idx)),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :save_index), :!),
                                  s(:lvasgn, :save_index,
                                    s(:ivar, :@index)), nil),
                                s(:ivasgn, :@index,
                                  s(:lvar, :idx)))),
                            s(:send,
                              s(:lvar, :d), :<<,
                              s(:send,
                                s(:self), :get_label))))))),
                  s(:def, :get_label,
                    s(:args),
                    s(:return,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Label), :Str), :new,
                        s(:send,
                          s(:self), :get_string)))),
                  s(:def, :get_question,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:send,
                          s(:self), :get_name)),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :type),
                          s(:lvasgn, :klass)),
                        s(:send,
                          s(:self), :get_unpack,
                          s(:str, "nn"))),
                      s(:return,
                        s(:lvar, :name),
                        s(:send,
                          s(:const, nil, :Resource), :get_class,
                          s(:lvar, :type),
                          s(:lvar, :klass))))),
                  s(:def, :get_rr,
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:send,
                          s(:self), :get_name)),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :type),
                          s(:lvasgn, :klass),
                          s(:lvasgn, :ttl)),
                        s(:send,
                          s(:self), :get_unpack,
                          s(:str, "nnN"))),
                      s(:lvasgn, :typeclass,
                        s(:send,
                          s(:const, nil, :Resource), :get_class,
                          s(:lvar, :type),
                          s(:lvar, :klass))),
                      s(:lvasgn, :res,
                        s(:block,
                          s(:send,
                            s(:self), :get_length16),
                          s(:args),
                          s(:send,
                            s(:lvar, :typeclass), :decode_rdata,
                            s(:self)))),
                      s(:send,
                        s(:lvar, :res), :instance_variable_set,
                        s(:sym, :@ttl),
                        s(:lvar, :ttl)),
                      s(:return,
                        s(:lvar, :name),
                        s(:lvar, :ttl),
                        s(:lvar, :res)))))))),
          s(:class,
            s(:const, nil, :Query), nil,
            s(:begin,
              s(:def, :encode_rdata,
                s(:args,
                  s(:arg, :msg)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :EncodeError), :new,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:self), :class)),
                      s(:str, " is query."))))),
              s(:defs,
                s(:self), :decode_rdata,
                s(:args,
                  s(:arg, :msg)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :DecodeError), :new,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:self), :class)),
                      s(:str, " is query."))))))),
          s(:class,
            s(:const, nil, :Resource),
            s(:const, nil, :Query),
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :ttl)),
              s(:casgn, nil, :ClassHash,
                s(:hash)),
              s(:def, :encode_rdata,
                s(:args,
                  s(:arg, :msg)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :NotImplementedError), :new))),
              s(:defs,
                s(:self), :decode_rdata,
                s(:args,
                  s(:arg, :msg)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :NotImplementedError), :new))),
              s(:def, :==,
                s(:args,
                  s(:arg, :other)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:self), :class), :==,
                      s(:send,
                        s(:lvar, :other), :class)), nil,
                    s(:return,
                      s(:false))),
                  s(:lvasgn, :s_ivars,
                    s(:send,
                      s(:self), :instance_variables)),
                  s(:send,
                    s(:lvar, :s_ivars), :sort!),
                  s(:send,
                    s(:lvar, :s_ivars), :delete,
                    s(:sym, :@ttl)),
                  s(:lvasgn, :o_ivars,
                    s(:send,
                      s(:lvar, :other), :instance_variables)),
                  s(:send,
                    s(:lvar, :o_ivars), :sort!),
                  s(:send,
                    s(:lvar, :o_ivars), :delete,
                    s(:sym, :@ttl)),
                  s(:return,
                    s(:and,
                      s(:send,
                        s(:lvar, :s_ivars), :==,
                        s(:lvar, :o_ivars)),
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :s_ivars), :collect),
                          s(:args,
                            s(:arg, :name)),
                          s(:send,
                            s(:self), :instance_variable_get,
                            s(:lvar, :name))), :==,
                        s(:block,
                          s(:send,
                            s(:lvar, :o_ivars), :collect),
                          s(:args,
                            s(:arg, :name)),
                          s(:send,
                            s(:lvar, :other), :instance_variable_get,
                            s(:lvar, :name)))))))),
              s(:def, :eql?,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:self), :==,
                    s(:lvar, :other)))),
              s(:def, :hash,
                s(:args),
                s(:begin,
                  s(:lvasgn, :h,
                    s(:int, 0)),
                  s(:lvasgn, :vars,
                    s(:send,
                      s(:self), :instance_variables)),
                  s(:send,
                    s(:lvar, :vars), :delete,
                    s(:sym, :@ttl)),
                  s(:block,
                    s(:send,
                      s(:lvar, :vars), :each),
                    s(:args,
                      s(:arg, :name)),
                    s(:op_asgn,
                      s(:lvasgn, :h), :^,
                      s(:send,
                        s(:send,
                          s(:self), :instance_variable_get,
                          s(:lvar, :name)), :hash))),
                  s(:return,
                    s(:lvar, :h)))),
              s(:defs,
                s(:self), :get_class,
                s(:args,
                  s(:arg, :type_value),
                  s(:arg, :class_value)),
                s(:return,
                  s(:or,
                    s(:send,
                      s(:const, nil, :ClassHash), :[],
                      s(:array,
                        s(:lvar, :type_value),
                        s(:lvar, :class_value))),
                    s(:send,
                      s(:const, nil, :Generic), :create,
                      s(:lvar, :type_value),
                      s(:lvar, :class_value))))),
              s(:class,
                s(:const, nil, :Generic),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :data)),
                    s(:ivasgn, :@data,
                      s(:lvar, :data))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :data)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:send,
                      s(:lvar, :msg), :put_bytes,
                      s(:send, nil, :data))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:return,
                      s(:send,
                        s(:self), :new,
                        s(:send,
                          s(:lvar, :msg), :get_bytes)))),
                  s(:defs,
                    s(:self), :create,
                    s(:args,
                      s(:arg, :type_value),
                      s(:arg, :class_value)),
                    s(:begin,
                      s(:lvasgn, :c,
                        s(:send,
                          s(:const, nil, :Class), :new,
                          s(:const, nil, :Generic))),
                      s(:send,
                        s(:lvar, :c), :const_set,
                        s(:sym, :TypeValue),
                        s(:lvar, :type_value)),
                      s(:send,
                        s(:lvar, :c), :const_set,
                        s(:sym, :ClassValue),
                        s(:lvar, :class_value)),
                      s(:send,
                        s(:const, nil, :Generic), :const_set,
                        s(:dstr,
                          s(:str, "Type"),
                          s(:begin,
                            s(:lvar, :type_value)),
                          s(:str, "_Class"),
                          s(:begin,
                            s(:lvar, :class_value))),
                        s(:lvar, :c)),
                      s(:send,
                        s(:const, nil, :ClassHash), :[]=,
                        s(:array,
                          s(:lvar, :type_value),
                          s(:lvar, :class_value)),
                        s(:lvar, :c)),
                      s(:return,
                        s(:lvar, :c)))))),
              s(:class,
                s(:const, nil, :DomainName),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :name)),
                    s(:ivasgn, :@name,
                      s(:lvar, :name))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :name)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:send,
                      s(:lvar, :msg), :put_name,
                      s(:ivar, :@name))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:return,
                      s(:send,
                        s(:self), :new,
                        s(:send,
                          s(:lvar, :msg), :get_name)))))),
              s(:casgn, nil, :ClassValue,
                s(:nil)),
              s(:class,
                s(:const, nil, :NS),
                s(:const, nil, :DomainName),
                s(:casgn, nil, :TypeValue,
                  s(:int, 2))),
              s(:class,
                s(:const, nil, :CNAME),
                s(:const, nil, :DomainName),
                s(:casgn, nil, :TypeValue,
                  s(:int, 5))),
              s(:class,
                s(:const, nil, :SOA),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:casgn, nil, :TypeValue,
                    s(:int, 6)),
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :mname),
                      s(:arg, :rname),
                      s(:arg, :serial),
                      s(:arg, :refresh),
                      s(:arg, :retry_),
                      s(:arg, :expire),
                      s(:arg, :minimum)),
                    s(:begin,
                      s(:ivasgn, :@mname,
                        s(:lvar, :mname)),
                      s(:ivasgn, :@rname,
                        s(:lvar, :rname)),
                      s(:ivasgn, :@serial,
                        s(:lvar, :serial)),
                      s(:ivasgn, :@refresh,
                        s(:lvar, :refresh)),
                      s(:ivasgn, :@retry,
                        s(:lvar, :retry_)),
                      s(:ivasgn, :@expire,
                        s(:lvar, :expire)),
                      s(:ivasgn, :@minimum,
                        s(:lvar, :minimum)))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :mname)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :rname)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :serial)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :refresh)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :retry)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :expire)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :minimum)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :put_name,
                        s(:ivar, :@mname)),
                      s(:send,
                        s(:lvar, :msg), :put_name,
                        s(:ivar, :@rname)),
                      s(:send,
                        s(:lvar, :msg), :put_pack,
                        s(:str, "NNNNN"),
                        s(:ivar, :@serial),
                        s(:ivar, :@refresh),
                        s(:ivar, :@retry),
                        s(:ivar, :@expire),
                        s(:ivar, :@minimum)))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:lvasgn, :mname,
                        s(:send,
                          s(:lvar, :msg), :get_name)),
                      s(:lvasgn, :rname,
                        s(:send,
                          s(:lvar, :msg), :get_name)),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :serial),
                          s(:lvasgn, :refresh),
                          s(:lvasgn, :retry_),
                          s(:lvasgn, :expire),
                          s(:lvasgn, :minimum)),
                        s(:send,
                          s(:lvar, :msg), :get_unpack,
                          s(:str, "NNNNN"))),
                      s(:return,
                        s(:send,
                          s(:self), :new,
                          s(:lvar, :mname),
                          s(:lvar, :rname),
                          s(:lvar, :serial),
                          s(:lvar, :refresh),
                          s(:lvar, :retry_),
                          s(:lvar, :expire),
                          s(:lvar, :minimum))))))),
              s(:class,
                s(:const, nil, :PTR),
                s(:const, nil, :DomainName),
                s(:casgn, nil, :TypeValue,
                  s(:int, 12))),
              s(:class,
                s(:const, nil, :HINFO),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:casgn, nil, :TypeValue,
                    s(:int, 13)),
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :cpu),
                      s(:arg, :os)),
                    s(:begin,
                      s(:ivasgn, :@cpu,
                        s(:lvar, :cpu)),
                      s(:ivasgn, :@os,
                        s(:lvar, :os)))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :cpu)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :os)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :put_string,
                        s(:ivar, :@cpu)),
                      s(:send,
                        s(:lvar, :msg), :put_string,
                        s(:ivar, :@os)))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:lvasgn, :cpu,
                        s(:send,
                          s(:lvar, :msg), :get_string)),
                      s(:lvasgn, :os,
                        s(:send,
                          s(:lvar, :msg), :get_string)),
                      s(:return,
                        s(:send,
                          s(:self), :new,
                          s(:lvar, :cpu),
                          s(:lvar, :os))))))),
              s(:class,
                s(:const, nil, :MINFO),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:casgn, nil, :TypeValue,
                    s(:int, 14)),
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :rmailbx),
                      s(:arg, :emailbx)),
                    s(:begin,
                      s(:ivasgn, :@rmailbx,
                        s(:lvar, :rmailbx)),
                      s(:ivasgn, :@emailbx,
                        s(:lvar, :emailbx)))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :rmailbx)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :emailbx)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :put_name,
                        s(:ivar, :@rmailbx)),
                      s(:send,
                        s(:lvar, :msg), :put_name,
                        s(:ivar, :@emailbx)))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:lvasgn, :rmailbx,
                        s(:send,
                          s(:lvar, :msg), :get_string)),
                      s(:lvasgn, :emailbx,
                        s(:send,
                          s(:lvar, :msg), :get_string)),
                      s(:return,
                        s(:send,
                          s(:self), :new,
                          s(:lvar, :rmailbx),
                          s(:lvar, :emailbx))))))),
              s(:class,
                s(:const, nil, :MX),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:casgn, nil, :TypeValue,
                    s(:int, 15)),
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :preference),
                      s(:arg, :exchange)),
                    s(:begin,
                      s(:ivasgn, :@preference,
                        s(:lvar, :preference)),
                      s(:ivasgn, :@exchange,
                        s(:lvar, :exchange)))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :preference)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :exchange)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :put_pack,
                        s(:str, "n"),
                        s(:ivar, :@preference)),
                      s(:send,
                        s(:lvar, :msg), :put_name,
                        s(:ivar, :@exchange)))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :preference)),
                        s(:send,
                          s(:lvar, :msg), :get_unpack,
                          s(:str, "n"))),
                      s(:lvasgn, :exchange,
                        s(:send,
                          s(:lvar, :msg), :get_name)),
                      s(:return,
                        s(:send,
                          s(:self), :new,
                          s(:lvar, :preference),
                          s(:lvar, :exchange))))))),
              s(:class,
                s(:const, nil, :TXT),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:casgn, nil, :TypeValue,
                    s(:int, 16)),
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :first_string),
                      s(:restarg, :rest_strings)),
                    s(:ivasgn, :@strings,
                      s(:array,
                        s(:lvar, :first_string),
                        s(:splat,
                          s(:lvar, :rest_strings))))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :strings)),
                  s(:def, :data,
                    s(:args),
                    s(:send,
                      s(:ivar, :@strings), :join,
                      s(:str, ""))),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:send,
                      s(:lvar, :msg), :put_string_list,
                      s(:ivar, :@strings))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:lvasgn, :strings,
                        s(:send,
                          s(:lvar, :msg), :get_string_list)),
                      s(:return,
                        s(:send,
                          s(:self), :new,
                          s(:splat,
                            s(:lvar, :strings)))))))),
              s(:class,
                s(:const, nil, :LOC),
                s(:const, nil, :Resource),
                s(:begin,
                  s(:casgn, nil, :TypeValue,
                    s(:int, 29)),
                  s(:def, :initialize,
                    s(:args,
                      s(:arg, :version),
                      s(:arg, :ssize),
                      s(:arg, :hprecision),
                      s(:arg, :vprecision),
                      s(:arg, :latitude),
                      s(:arg, :longitude),
                      s(:arg, :altitude)),
                    s(:begin,
                      s(:ivasgn, :@version,
                        s(:lvar, :version)),
                      s(:ivasgn, :@ssize,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Resolv), :LOC), :Size), :create,
                          s(:lvar, :ssize))),
                      s(:ivasgn, :@hprecision,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Resolv), :LOC), :Size), :create,
                          s(:lvar, :hprecision))),
                      s(:ivasgn, :@vprecision,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Resolv), :LOC), :Size), :create,
                          s(:lvar, :vprecision))),
                      s(:ivasgn, :@latitude,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Resolv), :LOC), :Coord), :create,
                          s(:lvar, :latitude))),
                      s(:ivasgn, :@longitude,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Resolv), :LOC), :Coord), :create,
                          s(:lvar, :longitude))),
                      s(:ivasgn, :@altitude,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Resolv), :LOC), :Alt), :create,
                          s(:lvar, :altitude))))),
                  s(:send, nil, :attr_reader,
                    s(:sym, :version)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :ssize)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :hprecision)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :vprecision)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :latitude)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :longitude)),
                  s(:send, nil, :attr_reader,
                    s(:sym, :altitude)),
                  s(:def, :encode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:ivar, :@version)),
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:send,
                          s(:ivar, :@ssize), :scalar)),
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:send,
                          s(:ivar, :@hprecision), :scalar)),
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:send,
                          s(:ivar, :@vprecision), :scalar)),
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:send,
                          s(:ivar, :@latitude), :coordinates)),
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:send,
                          s(:ivar, :@longitude), :coordinates)),
                      s(:send,
                        s(:lvar, :msg), :put_bytes,
                        s(:send,
                          s(:ivar, :@altitude), :altitude)))),
                  s(:defs,
                    s(:self), :decode_rdata,
                    s(:args,
                      s(:arg, :msg)),
                    s(:begin,
                      s(:lvasgn, :version,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 1))),
                      s(:lvasgn, :ssize,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 1))),
                      s(:lvasgn, :hprecision,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 1))),
                      s(:lvasgn, :vprecision,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 1))),
                      s(:lvasgn, :latitude,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 4))),
                      s(:lvasgn, :longitude,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 4))),
                      s(:lvasgn, :altitude,
                        s(:send,
                          s(:lvar, :msg), :get_bytes,
                          s(:int, 4))),
                      s(:return,
                        s(:send,
                          s(:self), :new,
                          s(:lvar, :version),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Resolv), :LOC), :Size), :new,
                            s(:lvar, :ssize)),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Resolv), :LOC), :Size), :new,
                            s(:lvar, :hprecision)),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Resolv), :LOC), :Size), :new,
                            s(:lvar, :vprecision)),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Resolv), :LOC), :Coord), :new,
                            s(:lvar, :latitude),
                            s(:str, "lat")),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Resolv), :LOC), :Coord), :new,
                            s(:lvar, :longitude),
                            s(:str, "lon")),
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Resolv), :LOC), :Alt), :new,
                            s(:lvar, :altitude)))))))),
              s(:class,
                s(:const, nil, :ANY),
                s(:const, nil, :Query),
                s(:casgn, nil, :TypeValue,
                  s(:int, 255))),
              s(:casgn, nil, :ClassInsensitiveTypes,
                s(:array,
                  s(:const, nil, :NS),
                  s(:const, nil, :CNAME),
                  s(:const, nil, :SOA),
                  s(:const, nil, :PTR),
                  s(:const, nil, :HINFO),
                  s(:const, nil, :MINFO),
                  s(:const, nil, :MX),
                  s(:const, nil, :TXT),
                  s(:const, nil, :LOC),
                  s(:const, nil, :ANY))),
              s(:module,
                s(:const, nil, :IN),
                s(:begin,
                  s(:casgn, nil, :ClassValue,
                    s(:int, 1)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :ClassInsensitiveTypes), :each),
                    s(:args,
                      s(:arg, :s)),
                    s(:begin,
                      s(:lvasgn, :c,
                        s(:send,
                          s(:const, nil, :Class), :new,
                          s(:lvar, :s))),
                      s(:send,
                        s(:lvar, :c), :const_set,
                        s(:sym, :TypeValue),
                        s(:const,
                          s(:lvar, :s), :TypeValue)),
                      s(:send,
                        s(:lvar, :c), :const_set,
                        s(:sym, :ClassValue),
                        s(:const, nil, :ClassValue)),
                      s(:send,
                        s(:const, nil, :ClassHash), :[]=,
                        s(:array,
                          s(:const,
                            s(:lvar, :s), :TypeValue),
                          s(:const, nil, :ClassValue)),
                        s(:lvar, :c)),
                      s(:send,
                        s(:self), :const_set,
                        s(:send,
                          s(:send,
                            s(:lvar, :s), :name), :sub,
                          s(:regexp,
                            s(:str, ".*::"),
                            s(:regopt)),
                          s(:str, "")),
                        s(:lvar, :c)))),
                  s(:class,
                    s(:const, nil, :A),
                    s(:const, nil, :Resource),
                    s(:begin,
                      s(:casgn, nil, :TypeValue,
                        s(:int, 1)),
                      s(:casgn, nil, :ClassValue,
                        s(:const,
                          s(:const, nil, :IN), :ClassValue)),
                      s(:send,
                        s(:const, nil, :ClassHash), :[]=,
                        s(:array,
                          s(:const, nil, :TypeValue),
                          s(:const, nil, :ClassValue)),
                        s(:self)),
                      s(:def, :initialize,
                        s(:args,
                          s(:arg, :address)),
                        s(:ivasgn, :@address,
                          s(:send,
                            s(:const, nil, :IPv4), :create,
                            s(:lvar, :address)))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :address)),
                      s(:def, :encode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:send,
                          s(:lvar, :msg), :put_bytes,
                          s(:send,
                            s(:ivar, :@address), :address))),
                      s(:defs,
                        s(:self), :decode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:return,
                          s(:send,
                            s(:self), :new,
                            s(:send,
                              s(:const, nil, :IPv4), :new,
                              s(:send,
                                s(:lvar, :msg), :get_bytes,
                                s(:int, 4)))))))),
                  s(:class,
                    s(:const, nil, :WKS),
                    s(:const, nil, :Resource),
                    s(:begin,
                      s(:casgn, nil, :TypeValue,
                        s(:int, 11)),
                      s(:casgn, nil, :ClassValue,
                        s(:const,
                          s(:const, nil, :IN), :ClassValue)),
                      s(:send,
                        s(:const, nil, :ClassHash), :[]=,
                        s(:array,
                          s(:const, nil, :TypeValue),
                          s(:const, nil, :ClassValue)),
                        s(:self)),
                      s(:def, :initialize,
                        s(:args,
                          s(:arg, :address),
                          s(:arg, :protocol),
                          s(:arg, :bitmap)),
                        s(:begin,
                          s(:ivasgn, :@address,
                            s(:send,
                              s(:const, nil, :IPv4), :create,
                              s(:lvar, :address))),
                          s(:ivasgn, :@protocol,
                            s(:lvar, :protocol)),
                          s(:ivasgn, :@bitmap,
                            s(:lvar, :bitmap)))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :address)),
                      s(:send, nil, :attr_reader,
                        s(:sym, :protocol)),
                      s(:send, nil, :attr_reader,
                        s(:sym, :bitmap)),
                      s(:def, :encode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :msg), :put_bytes,
                            s(:send,
                              s(:ivar, :@address), :address)),
                          s(:send,
                            s(:lvar, :msg), :put_pack,
                            s(:str, "n"),
                            s(:ivar, :@protocol)),
                          s(:send,
                            s(:lvar, :msg), :put_bytes,
                            s(:ivar, :@bitmap)))),
                      s(:defs,
                        s(:self), :decode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:begin,
                          s(:lvasgn, :address,
                            s(:send,
                              s(:const, nil, :IPv4), :new,
                              s(:send,
                                s(:lvar, :msg), :get_bytes,
                                s(:int, 4)))),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :protocol)),
                            s(:send,
                              s(:lvar, :msg), :get_unpack,
                              s(:str, "n"))),
                          s(:lvasgn, :bitmap,
                            s(:send,
                              s(:lvar, :msg), :get_bytes)),
                          s(:return,
                            s(:send,
                              s(:self), :new,
                              s(:lvar, :address),
                              s(:lvar, :protocol),
                              s(:lvar, :bitmap))))))),
                  s(:class,
                    s(:const, nil, :AAAA),
                    s(:const, nil, :Resource),
                    s(:begin,
                      s(:casgn, nil, :TypeValue,
                        s(:int, 28)),
                      s(:casgn, nil, :ClassValue,
                        s(:const,
                          s(:const, nil, :IN), :ClassValue)),
                      s(:send,
                        s(:const, nil, :ClassHash), :[]=,
                        s(:array,
                          s(:const, nil, :TypeValue),
                          s(:const, nil, :ClassValue)),
                        s(:self)),
                      s(:def, :initialize,
                        s(:args,
                          s(:arg, :address)),
                        s(:ivasgn, :@address,
                          s(:send,
                            s(:const, nil, :IPv6), :create,
                            s(:lvar, :address)))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :address)),
                      s(:def, :encode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:send,
                          s(:lvar, :msg), :put_bytes,
                          s(:send,
                            s(:ivar, :@address), :address))),
                      s(:defs,
                        s(:self), :decode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:return,
                          s(:send,
                            s(:self), :new,
                            s(:send,
                              s(:const, nil, :IPv6), :new,
                              s(:send,
                                s(:lvar, :msg), :get_bytes,
                                s(:int, 16)))))))),
                  s(:class,
                    s(:const, nil, :SRV),
                    s(:const, nil, :Resource),
                    s(:begin,
                      s(:casgn, nil, :TypeValue,
                        s(:int, 33)),
                      s(:casgn, nil, :ClassValue,
                        s(:const,
                          s(:const, nil, :IN), :ClassValue)),
                      s(:send,
                        s(:const, nil, :ClassHash), :[]=,
                        s(:array,
                          s(:const, nil, :TypeValue),
                          s(:const, nil, :ClassValue)),
                        s(:self)),
                      s(:def, :initialize,
                        s(:args,
                          s(:arg, :priority),
                          s(:arg, :weight),
                          s(:arg, :port),
                          s(:arg, :target)),
                        s(:begin,
                          s(:ivasgn, :@priority,
                            s(:send,
                              s(:lvar, :priority), :to_int)),
                          s(:ivasgn, :@weight,
                            s(:send,
                              s(:lvar, :weight), :to_int)),
                          s(:ivasgn, :@port,
                            s(:send,
                              s(:lvar, :port), :to_int)),
                          s(:ivasgn, :@target,
                            s(:send,
                              s(:const, nil, :Name), :create,
                              s(:lvar, :target))))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :priority)),
                      s(:send, nil, :attr_reader,
                        s(:sym, :weight)),
                      s(:send, nil, :attr_reader,
                        s(:sym, :port)),
                      s(:send, nil, :attr_reader,
                        s(:sym, :target)),
                      s(:def, :encode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :msg), :put_pack,
                            s(:str, "n"),
                            s(:ivar, :@priority)),
                          s(:send,
                            s(:lvar, :msg), :put_pack,
                            s(:str, "n"),
                            s(:ivar, :@weight)),
                          s(:send,
                            s(:lvar, :msg), :put_pack,
                            s(:str, "n"),
                            s(:ivar, :@port)),
                          s(:send,
                            s(:lvar, :msg), :put_name,
                            s(:ivar, :@target)))),
                      s(:defs,
                        s(:self), :decode_rdata,
                        s(:args,
                          s(:arg, :msg)),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :priority)),
                            s(:send,
                              s(:lvar, :msg), :get_unpack,
                              s(:str, "n"))),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :weight)),
                            s(:send,
                              s(:lvar, :msg), :get_unpack,
                              s(:str, "n"))),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :port)),
                            s(:send,
                              s(:lvar, :msg), :get_unpack,
                              s(:str, "n"))),
                          s(:lvasgn, :target,
                            s(:send,
                              s(:lvar, :msg), :get_name)),
                          s(:return,
                            s(:send,
                              s(:self), :new,
                              s(:lvar, :priority),
                              s(:lvar, :weight),
                              s(:lvar, :port),
                              s(:lvar, :target))))))))))))),
      s(:class,
        s(:const, nil, :IPv4), nil,
        s(:begin,
          s(:casgn, nil, :Regex256,
            s(:regexp,
              s(:str, "0\n"),
              s(:str, "               |1(?:[0-9][0-9]?)?\n"),
              s(:str, "               |2(?:[0-4][0-9]?|5[0-5]?|[6-9])?\n"),
              s(:str, "               |[3-9][0-9]?"),
              s(:regopt, :x))),
          s(:casgn, nil, :Regex,
            s(:regexp,
              s(:str, "\\A("),
              s(:begin,
                s(:const, nil, :Regex256)),
              s(:str, ")\\.("),
              s(:begin,
                s(:const, nil, :Regex256)),
              s(:str, ")\\.("),
              s(:begin,
                s(:const, nil, :Regex256)),
              s(:str, ")\\.("),
              s(:begin,
                s(:const, nil, :Regex256)),
              s(:str, ")\\z"),
              s(:regopt))),
          s(:defs,
            s(:self), :create,
            s(:args,
              s(:arg, :arg)),
            s(:case,
              s(:lvar, :arg),
              s(:when,
                s(:const, nil, :IPv4),
                s(:return,
                  s(:lvar, :arg))),
              s(:when,
                s(:const, nil, :Regex),
                s(:if,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 0),
                              s(:int, 255))), :===,
                          s(:begin,
                            s(:lvasgn, :a,
                              s(:send,
                                s(:nth_ref, 1), :to_i)))),
                        s(:send,
                          s(:begin,
                            s(:irange,
                              s(:int, 0),
                              s(:int, 255))), :===,
                          s(:begin,
                            s(:lvasgn, :b,
                              s(:send,
                                s(:nth_ref, 2), :to_i))))),
                      s(:send,
                        s(:begin,
                          s(:irange,
                            s(:int, 0),
                            s(:int, 255))), :===,
                        s(:begin,
                          s(:lvasgn, :c,
                            s(:send,
                              s(:nth_ref, 3), :to_i))))),
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 0),
                          s(:int, 255))), :===,
                      s(:begin,
                        s(:lvasgn, :d,
                          s(:send,
                            s(:nth_ref, 4), :to_i))))),
                  s(:return,
                    s(:send,
                      s(:self), :new,
                      s(:send,
                        s(:array,
                          s(:lvar, :a),
                          s(:lvar, :b),
                          s(:lvar, :c),
                          s(:lvar, :d)), :pack,
                        s(:str, "CCCC")))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ArgumentError), :new,
                      s(:send,
                        s(:str, "IPv4 address with invalid value: "), :+,
                        s(:lvar, :arg)))))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ArgumentError), :new,
                  s(:dstr,
                    s(:str, "cannot interpret as IPv4 address: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :arg), :inspect))))))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :address), :kind_of?,
                  s(:const, nil, :String)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "IPv4 address must be a string"))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :address), :length), :==,
                  s(:int, 4)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "IPv4 address expects 4 bytes but "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :address), :length)),
                    s(:str, " bytes")))),
              s(:ivasgn, :@address,
                s(:lvar, :address)))),
          s(:send, nil, :attr_reader,
            s(:sym, :address)),
          s(:def, :to_s,
            s(:args),
            s(:return,
              s(:send, nil, :sprintf,
                s(:str, "%d.%d.%d.%d"),
                s(:splat,
                  s(:send,
                    s(:ivar, :@address), :unpack,
                    s(:str, "CCCC")))))),
          s(:def, :inspect,
            s(:args),
            s(:return,
              s(:dstr,
                s(:str, "#<"),
                s(:begin,
                  s(:send,
                    s(:self), :class)),
                s(:str, " "),
                s(:begin,
                  s(:self)),
                s(:str, ">")))),
          s(:def, :to_name,
            s(:args),
            s(:return,
              s(:send,
                s(:const,
                  s(:const, nil, :DNS), :Name), :create,
                s(:send,
                  s(:str, "%d.%d.%d.%d.in-addr.arpa."), :%,
                  s(:send,
                    s(:send,
                      s(:ivar, :@address), :unpack,
                      s(:str, "CCCC")), :reverse))))),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:return,
              s(:send,
                s(:ivar, :@address), :==,
                s(:send,
                  s(:lvar, :other), :address)))),
          s(:def, :eql?,
            s(:args,
              s(:arg, :other)),
            s(:return,
              s(:send,
                s(:self), :==,
                s(:lvar, :other)))),
          s(:def, :hash,
            s(:args),
            s(:return,
              s(:send,
                s(:ivar, :@address), :hash))))),
      s(:class,
        s(:const, nil, :IPv6), nil,
        s(:begin,
          s(:casgn, nil, :Regex_8Hex,
            s(:regexp,
              s(:str, "\\A\n"),
              s(:str, "      (?:[0-9A-Fa-f]{1,4}:){7}\n"),
              s(:str, "         [0-9A-Fa-f]{1,4}\n"),
              s(:str, "      \\z"),
              s(:regopt, :x))),
          s(:casgn, nil, :Regex_CompressedHex,
            s(:regexp,
              s(:str, "\\A\n"),
              s(:str, "      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?) ::\n"),
              s(:str, "      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)\n"),
              s(:str, "      \\z"),
              s(:regopt, :x))),
          s(:casgn, nil, :Regex_6Hex4Dec,
            s(:regexp,
              s(:str, "\\A\n"),
              s(:str, "      ((?:[0-9A-Fa-f]{1,4}:){6,6})\n"),
              s(:str, "      (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\n"),
              s(:str, "      \\z"),
              s(:regopt, :x))),
          s(:casgn, nil, :Regex_CompressedHex4Dec,
            s(:regexp,
              s(:str, "\\A\n"),
              s(:str, "      ((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?) ::\n"),
              s(:str, "      ((?:[0-9A-Fa-f]{1,4}:)*)\n"),
              s(:str, "      (\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\n"),
              s(:str, "      \\z"),
              s(:regopt, :x))),
          s(:casgn, nil, :Regex,
            s(:regexp,
              s(:str, "\n"),
              s(:str, "      (?:"),
              s(:begin,
                s(:const, nil, :Regex_8Hex)),
              s(:str, ") |\n"),
              s(:str, "      (?:"),
              s(:begin,
                s(:const, nil, :Regex_CompressedHex)),
              s(:str, ") |\n"),
              s(:str, "      (?:"),
              s(:begin,
                s(:const, nil, :Regex_6Hex4Dec)),
              s(:str, ") |\n"),
              s(:str, "      (?:"),
              s(:begin,
                s(:const, nil, :Regex_CompressedHex4Dec)),
              s(:str, ")"),
              s(:regopt, :x))),
          s(:defs,
            s(:self), :create,
            s(:args,
              s(:arg, :arg)),
            s(:case,
              s(:lvar, :arg),
              s(:when,
                s(:const, nil, :IPv6),
                s(:return,
                  s(:lvar, :arg))),
              s(:when,
                s(:const, nil, :String),
                s(:begin,
                  s(:lvasgn, :address,
                    s(:send,
                      s(:str, ""), :b)),
                  s(:if,
                    s(:send,
                      s(:const, nil, :Regex_8Hex), :=~,
                      s(:lvar, :arg)),
                    s(:block,
                      s(:send,
                        s(:lvar, :arg), :scan,
                        s(:regexp,
                          s(:str, "[0-9A-Fa-f]+"),
                          s(:regopt))),
                      s(:args,
                        s(:arg, :hex)),
                      s(:send,
                        s(:lvar, :address), :<<,
                        s(:send,
                          s(:array,
                            s(:send,
                              s(:lvar, :hex), :hex)), :pack,
                          s(:str, "n")))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :Regex_CompressedHex), :=~,
                        s(:lvar, :arg)),
                      s(:begin,
                        s(:lvasgn, :prefix,
                          s(:nth_ref, 1)),
                        s(:lvasgn, :suffix,
                          s(:nth_ref, 2)),
                        s(:lvasgn, :a1,
                          s(:send,
                            s(:str, ""), :b)),
                        s(:lvasgn, :a2,
                          s(:send,
                            s(:str, ""), :b)),
                        s(:block,
                          s(:send,
                            s(:lvar, :prefix), :scan,
                            s(:regexp,
                              s(:str, "[0-9A-Fa-f]+"),
                              s(:regopt))),
                          s(:args,
                            s(:arg, :hex)),
                          s(:send,
                            s(:lvar, :a1), :<<,
                            s(:send,
                              s(:array,
                                s(:send,
                                  s(:lvar, :hex), :hex)), :pack,
                              s(:str, "n")))),
                        s(:block,
                          s(:send,
                            s(:lvar, :suffix), :scan,
                            s(:regexp,
                              s(:str, "[0-9A-Fa-f]+"),
                              s(:regopt))),
                          s(:args,
                            s(:arg, :hex)),
                          s(:send,
                            s(:lvar, :a2), :<<,
                            s(:send,
                              s(:array,
                                s(:send,
                                  s(:lvar, :hex), :hex)), :pack,
                              s(:str, "n")))),
                        s(:lvasgn, :omitlen,
                          s(:send,
                            s(:send,
                              s(:int, 16), :-,
                              s(:send,
                                s(:lvar, :a1), :length)), :-,
                            s(:send,
                              s(:lvar, :a2), :length))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :address), :<<,
                              s(:lvar, :a1)), :<<,
                            s(:send,
                              s(:str, "\u0000"), :*,
                              s(:lvar, :omitlen))), :<<,
                          s(:lvar, :a2))),
                      s(:if,
                        s(:send,
                          s(:const, nil, :Regex_6Hex4Dec), :=~,
                          s(:lvar, :arg)),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :prefix),
                              s(:lvasgn, :a),
                              s(:lvasgn, :b),
                              s(:lvasgn, :c),
                              s(:lvasgn, :d)),
                            s(:array,
                              s(:nth_ref, 1),
                              s(:send,
                                s(:nth_ref, 2), :to_i),
                              s(:send,
                                s(:nth_ref, 3), :to_i),
                              s(:send,
                                s(:nth_ref, 4), :to_i),
                              s(:send,
                                s(:nth_ref, 5), :to_i))),
                          s(:if,
                            s(:and,
                              s(:and,
                                s(:and,
                                  s(:send,
                                    s(:begin,
                                      s(:irange,
                                        s(:int, 0),
                                        s(:int, 255))), :===,
                                    s(:lvar, :a)),
                                  s(:send,
                                    s(:begin,
                                      s(:irange,
                                        s(:int, 0),
                                        s(:int, 255))), :===,
                                    s(:lvar, :b))),
                                s(:send,
                                  s(:begin,
                                    s(:irange,
                                      s(:int, 0),
                                      s(:int, 255))), :===,
                                  s(:lvar, :c))),
                              s(:send,
                                s(:begin,
                                  s(:irange,
                                    s(:int, 0),
                                    s(:int, 255))), :===,
                                s(:lvar, :d))),
                            s(:begin,
                              s(:block,
                                s(:send,
                                  s(:lvar, :prefix), :scan,
                                  s(:regexp,
                                    s(:str, "[0-9A-Fa-f]+"),
                                    s(:regopt))),
                                s(:args,
                                  s(:arg, :hex)),
                                s(:send,
                                  s(:lvar, :address), :<<,
                                  s(:send,
                                    s(:array,
                                      s(:send,
                                        s(:lvar, :hex), :hex)), :pack,
                                    s(:str, "n")))),
                              s(:send,
                                s(:lvar, :address), :<<,
                                s(:send,
                                  s(:array,
                                    s(:lvar, :a),
                                    s(:lvar, :b),
                                    s(:lvar, :c),
                                    s(:lvar, :d)), :pack,
                                  s(:str, "CCCC")))),
                            s(:send, nil, :raise,
                              s(:send,
                                s(:const, nil, :ArgumentError), :new,
                                s(:send,
                                  s(:str, "not numeric IPv6 address: "), :+,
                                  s(:lvar, :arg)))))),
                        s(:if,
                          s(:send,
                            s(:const, nil, :Regex_CompressedHex4Dec), :=~,
                            s(:lvar, :arg)),
                          s(:begin,
                            s(:masgn,
                              s(:mlhs,
                                s(:lvasgn, :prefix),
                                s(:lvasgn, :suffix),
                                s(:lvasgn, :a),
                                s(:lvasgn, :b),
                                s(:lvasgn, :c),
                                s(:lvasgn, :d)),
                              s(:array,
                                s(:nth_ref, 1),
                                s(:nth_ref, 2),
                                s(:send,
                                  s(:nth_ref, 3), :to_i),
                                s(:send,
                                  s(:nth_ref, 4), :to_i),
                                s(:send,
                                  s(:nth_ref, 5), :to_i),
                                s(:send,
                                  s(:nth_ref, 6), :to_i))),
                            s(:if,
                              s(:and,
                                s(:and,
                                  s(:and,
                                    s(:send,
                                      s(:begin,
                                        s(:irange,
                                          s(:int, 0),
                                          s(:int, 255))), :===,
                                      s(:lvar, :a)),
                                    s(:send,
                                      s(:begin,
                                        s(:irange,
                                          s(:int, 0),
                                          s(:int, 255))), :===,
                                      s(:lvar, :b))),
                                  s(:send,
                                    s(:begin,
                                      s(:irange,
                                        s(:int, 0),
                                        s(:int, 255))), :===,
                                    s(:lvar, :c))),
                                s(:send,
                                  s(:begin,
                                    s(:irange,
                                      s(:int, 0),
                                      s(:int, 255))), :===,
                                  s(:lvar, :d))),
                              s(:begin,
                                s(:lvasgn, :a1,
                                  s(:send,
                                    s(:str, ""), :b)),
                                s(:lvasgn, :a2,
                                  s(:send,
                                    s(:str, ""), :b)),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :prefix), :scan,
                                    s(:regexp,
                                      s(:str, "[0-9A-Fa-f]+"),
                                      s(:regopt))),
                                  s(:args,
                                    s(:arg, :hex)),
                                  s(:send,
                                    s(:lvar, :a1), :<<,
                                    s(:send,
                                      s(:array,
                                        s(:send,
                                          s(:lvar, :hex), :hex)), :pack,
                                      s(:str, "n")))),
                                s(:block,
                                  s(:send,
                                    s(:lvar, :suffix), :scan,
                                    s(:regexp,
                                      s(:str, "[0-9A-Fa-f]+"),
                                      s(:regopt))),
                                  s(:args,
                                    s(:arg, :hex)),
                                  s(:send,
                                    s(:lvar, :a2), :<<,
                                    s(:send,
                                      s(:array,
                                        s(:send,
                                          s(:lvar, :hex), :hex)), :pack,
                                      s(:str, "n")))),
                                s(:lvasgn, :omitlen,
                                  s(:send,
                                    s(:send,
                                      s(:int, 12), :-,
                                      s(:send,
                                        s(:lvar, :a1), :length)), :-,
                                    s(:send,
                                      s(:lvar, :a2), :length))),
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :address), :<<,
                                        s(:lvar, :a1)), :<<,
                                      s(:send,
                                        s(:str, "\u0000"), :*,
                                        s(:lvar, :omitlen))), :<<,
                                    s(:lvar, :a2)), :<<,
                                  s(:send,
                                    s(:array,
                                      s(:lvar, :a),
                                      s(:lvar, :b),
                                      s(:lvar, :c),
                                      s(:lvar, :d)), :pack,
                                    s(:str, "CCCC")))),
                              s(:send, nil, :raise,
                                s(:send,
                                  s(:const, nil, :ArgumentError), :new,
                                  s(:send,
                                    s(:str, "not numeric IPv6 address: "), :+,
                                    s(:lvar, :arg)))))),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :ArgumentError), :new,
                              s(:send,
                                s(:str, "not numeric IPv6 address: "), :+,
                                s(:lvar, :arg)))))))),
                  s(:return,
                    s(:send,
                      s(:const, nil, :IPv6), :new,
                      s(:lvar, :address))))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ArgumentError), :new,
                  s(:dstr,
                    s(:str, "cannot interpret as IPv6 address: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :arg), :inspect))))))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :address), :kind_of?,
                    s(:const, nil, :String)),
                  s(:send,
                    s(:send,
                      s(:lvar, :address), :length), :==,
                    s(:int, 16))), nil,
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :ArgumentError), :new,
                    s(:str, "IPv6 address must be 16 bytes")))),
              s(:ivasgn, :@address,
                s(:lvar, :address)))),
          s(:send, nil, :attr_reader,
            s(:sym, :address)),
          s(:def, :to_s,
            s(:args),
            s(:begin,
              s(:lvasgn, :address,
                s(:send, nil, :sprintf,
                  s(:str, "%X:%X:%X:%X:%X:%X:%X:%X"),
                  s(:splat,
                    s(:send,
                      s(:ivar, :@address), :unpack,
                      s(:str, "nnnnnnnn"))))),
              s(:if,
                s(:send,
                  s(:lvar, :address), :sub!,
                  s(:regexp,
                    s(:str, "(^|:)0(:0)+(:|$)"),
                    s(:regopt)),
                  s(:str, "::")), nil,
                s(:send,
                  s(:lvar, :address), :sub!,
                  s(:regexp,
                    s(:str, "(^|:)0(:|$)"),
                    s(:regopt)),
                  s(:str, "::"))),
              s(:return,
                s(:lvar, :address)))),
          s(:def, :inspect,
            s(:args),
            s(:return,
              s(:dstr,
                s(:str, "#<"),
                s(:begin,
                  s(:send,
                    s(:self), :class)),
                s(:str, " "),
                s(:begin,
                  s(:self)),
                s(:str, ">")))),
          s(:def, :to_name,
            s(:args),
            s(:return,
              s(:send,
                s(:const,
                  s(:const, nil, :DNS), :Name), :new,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@address), :unpack,
                          s(:str, "H32")), :[],
                        s(:int, 0)), :split,
                      s(:regexp,
                        s(:regopt))), :reverse), :+,
                  s(:array,
                    s(:str, "ip6"),
                    s(:str, "arpa")))))),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:return,
              s(:send,
                s(:ivar, :@address), :==,
                s(:send,
                  s(:lvar, :other), :address)))),
          s(:def, :eql?,
            s(:args,
              s(:arg, :other)),
            s(:return,
              s(:send,
                s(:self), :==,
                s(:lvar, :other)))),
          s(:def, :hash,
            s(:args),
            s(:return,
              s(:send,
                s(:ivar, :@address), :hash))))),
      s(:class,
        s(:const, nil, :MDNS),
        s(:const, nil, :DNS),
        s(:begin,
          s(:casgn, nil, :Port,
            s(:int, 5353)),
          s(:casgn, nil, :AddressV4,
            s(:str, "224.0.0.251")),
          s(:casgn, nil, :AddressV6,
            s(:str, "ff02::fb")),
          s(:casgn, nil, :Addresses,
            s(:array,
              s(:array,
                s(:const, nil, :AddressV4),
                s(:const, nil, :Port)),
              s(:array,
                s(:const, nil, :AddressV6),
                s(:const, nil, :Port)))),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :config_info,
                s(:nil))),
            s(:if,
              s(:lvar, :config_info),
              s(:super,
                s(:send,
                  s(:hash,
                    s(:pair,
                      s(:sym, :nameserver_port),
                      s(:const, nil, :Addresses))), :merge,
                  s(:lvar, :config_info))),
              s(:super,
                s(:hash,
                  s(:pair,
                    s(:sym, :nameserver_port),
                    s(:const, nil, :Addresses)))))),
          s(:def, :each_address,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Resolv), :DNS), :Name), :create,
                  s(:lvar, :name))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :name), :to_a), :last), :==,
                  s(:str, "local")), nil,
                s(:return)),
              s(:super,
                s(:lvar, :name)))),
          s(:def, :make_udp_requester,
            s(:args),
            s(:begin,
              s(:lvasgn, :nameserver_port,
                s(:send,
                  s(:ivar, :@config), :nameserver_port)),
              s(:send,
                s(:const,
                  s(:const, nil, :Requester), :MDNSOneShot), :new,
                s(:splat,
                  s(:lvar, :nameserver_port))))))),
      s(:module,
        s(:const, nil, :LOC),
        s(:begin,
          s(:class,
            s(:const, nil, :Size), nil,
            s(:begin,
              s(:casgn, nil, :Regex,
                s(:regexp,
                  s(:str, "^(\\d+\\.*\\d*)[m]$"),
                  s(:regopt))),
              s(:defs,
                s(:self), :create,
                s(:args,
                  s(:arg, :arg)),
                s(:case,
                  s(:lvar, :arg),
                  s(:when,
                    s(:const, nil, :Size),
                    s(:return,
                      s(:lvar, :arg))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:begin,
                      s(:lvasgn, :scalar,
                        s(:str, "")),
                      s(:if,
                        s(:send,
                          s(:const, nil, :Regex), :=~,
                          s(:lvar, :arg)),
                        s(:lvasgn, :scalar,
                          s(:send,
                            s(:array,
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:begin,
                                              s(:send,
                                                s(:send,
                                                  s(:nth_ref, 1), :to_f), :*,
                                                s(:begin,
                                                  s(:float, 100.0)))), :to_i), :to_s), :[],
                                        s(:int, 0)), :to_i), :*,
                                    s(:begin,
                                      s(:send,
                                        s(:int, 2), :**,
                                        s(:int, 4)))), :+,
                                  s(:begin,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:begin,
                                              s(:send,
                                                s(:send,
                                                  s(:nth_ref, 1), :to_f), :*,
                                                s(:begin,
                                                  s(:float, 100.0)))), :to_i), :to_s), :length), :-,
                                      s(:int, 1)))))), :pack,
                            s(:str, "C"))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :ArgumentError), :new,
                            s(:send,
                              s(:str, "not a properly formed Size string: "), :+,
                              s(:lvar, :arg))))),
                      s(:return,
                        s(:send,
                          s(:const, nil, :Size), :new,
                          s(:lvar, :scalar))))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ArgumentError), :new,
                      s(:dstr,
                        s(:str, "cannot interpret as Size: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :arg), :inspect))))))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :scalar)),
                s(:ivasgn, :@scalar,
                  s(:lvar, :scalar))),
              s(:send, nil, :attr_reader,
                s(:sym, :scalar)),
              s(:def, :to_s,
                s(:args),
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@scalar), :unpack,
                          s(:str, "H2")), :join), :to_s)),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :s), :[],
                                  s(:int, 0)), :to_i)), :*,
                            s(:begin,
                              s(:send,
                                s(:int, 10), :**,
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :s), :[],
                                        s(:int, 1)), :to_i), :-,
                                    s(:int, 2))))))), :to_s), :<<,
                      s(:str, "m"))))),
              s(:def, :inspect,
                s(:args),
                s(:return,
                  s(:dstr,
                    s(:str, "#<"),
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, " "),
                    s(:begin,
                      s(:self)),
                    s(:str, ">")))),
              s(:def, :==,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:ivar, :@scalar), :==,
                    s(:send,
                      s(:lvar, :other), :scalar)))),
              s(:def, :eql?,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:self), :==,
                    s(:lvar, :other)))),
              s(:def, :hash,
                s(:args),
                s(:return,
                  s(:send,
                    s(:ivar, :@scalar), :hash))))),
          s(:class,
            s(:const, nil, :Coord), nil,
            s(:begin,
              s(:casgn, nil, :Regex,
                s(:regexp,
                  s(:str, "^(\\d+)\\s(\\d+)\\s(\\d+\\.\\d+)\\s([NESW])$"),
                  s(:regopt))),
              s(:defs,
                s(:self), :create,
                s(:args,
                  s(:arg, :arg)),
                s(:case,
                  s(:lvar, :arg),
                  s(:when,
                    s(:const, nil, :Coord),
                    s(:return,
                      s(:lvar, :arg))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:begin,
                      s(:lvasgn, :coordinates,
                        s(:str, "")),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:const, nil, :Regex), :=~,
                            s(:lvar, :arg)),
                          s(:send,
                            s(:nth_ref, 1), :<,
                            s(:int, 180))),
                        s(:begin,
                          s(:lvasgn, :hemi,
                            s(:if,
                              s(:or,
                                s(:begin,
                                  s(:send,
                                    s(:nth_ref, 4), :[],
                                    s(:regexp,
                                      s(:str, "([NE])"),
                                      s(:regopt)),
                                    s(:int, 1))),
                                s(:begin,
                                  s(:send,
                                    s(:nth_ref, 4), :[],
                                    s(:regexp,
                                      s(:str, "([SW])"),
                                      s(:regopt)),
                                    s(:int, 1)))),
                              s(:int, 1),
                              s(:int, -1))),
                          s(:lvasgn, :coordinates,
                            s(:send,
                              s(:array,
                                s(:send,
                                  s(:send,
                                    s(:begin,
                                      s(:send,
                                        s(:send,
                                          s(:begin,
                                            s(:send,
                                              s(:send,
                                                s(:nth_ref, 1), :to_i), :*,
                                              s(:begin,
                                                s(:float, 3600000.0)))), :+,
                                          s(:begin,
                                            s(:send,
                                              s(:send,
                                                s(:nth_ref, 2), :to_i), :*,
                                              s(:begin,
                                                s(:float, 60000.0))))), :+,
                                        s(:begin,
                                          s(:send,
                                            s(:send,
                                              s(:nth_ref, 3), :to_f), :*,
                                            s(:begin,
                                              s(:float, 1000.0)))))), :*,
                                    s(:lvar, :hemi)), :+,
                                  s(:begin,
                                    s(:send,
                                      s(:int, 2), :**,
                                      s(:int, 31))))), :pack,
                              s(:str, "N"))),
                          s(:if,
                            s(:send,
                              s(:begin,
                                s(:or_asgn,
                                  s(:lvasgn, :orientation),
                                  s(:str, ""))), :<<,
                              s(:send,
                                s(:nth_ref, 4), :[],
                                s(:array,
                                  s(:regexp,
                                    s(:str, "NS"),
                                    s(:regopt))),
                                s(:int, 1))),
                            s(:str, "lat"),
                            s(:str, "lon"))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :ArgumentError), :new,
                            s(:send,
                              s(:str, "not a properly formed Coord string: "), :+,
                              s(:lvar, :arg))))),
                      s(:return,
                        s(:send,
                          s(:const, nil, :Coord), :new,
                          s(:lvar, :coordinates),
                          s(:lvar, :orientation))))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ArgumentError), :new,
                      s(:dstr,
                        s(:str, "cannot interpret as Coord: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :arg), :inspect))))))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :coordinates),
                  s(:arg, :orientation)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :coordinates), :kind_of?,
                      s(:const, nil, :String)), nil,
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :ArgumentError), :new,
                        s(:dstr,
                          s(:str, "Coord must be a 32bit unsigned integer in hex format: "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :coordinates), :inspect)))))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :orientation), :kind_of?,
                        s(:const, nil, :String)),
                      s(:send,
                        s(:lvar, :orientation), :[],
                        s(:regexp,
                          s(:str, "^lon$|^lat$"),
                          s(:regopt)))), nil,
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :ArgumentError), :new,
                        s(:str, "Coord expects orientation to be a String argument of \"lat\" or \"lon\"")))),
                  s(:ivasgn, :@coordinates,
                    s(:lvar, :coordinates)),
                  s(:ivasgn, :@orientation,
                    s(:lvar, :orientation)))),
              s(:send, nil, :attr_reader,
                s(:sym, :coordinates)),
              s(:send, nil, :attr_reader,
                s(:sym, :orientation)),
              s(:def, :to_s,
                s(:args),
                s(:begin,
                  s(:lvasgn, :c,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@coordinates), :unpack,
                          s(:str, "N")), :join), :to_i)),
                  s(:lvasgn, :val,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :c), :-,
                          s(:begin,
                            s(:send,
                              s(:int, 2), :**,
                              s(:int, 31))))), :abs)),
                  s(:lvasgn, :fracsecs,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :val), :%,
                            s(:float, 1000.0))), :to_i), :to_s)),
                  s(:lvasgn, :val,
                    s(:send,
                      s(:lvar, :val), :/,
                      s(:float, 1000.0))),
                  s(:lvasgn, :secs,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :val), :%,
                            s(:int, 60))), :to_i), :to_s)),
                  s(:lvasgn, :val,
                    s(:send,
                      s(:lvar, :val), :/,
                      s(:int, 60))),
                  s(:lvasgn, :mins,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :val), :%,
                            s(:int, 60))), :to_i), :to_s)),
                  s(:lvasgn, :degs,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :val), :/,
                            s(:int, 60))), :to_i), :to_s)),
                  s(:lvasgn, :posi,
                    s(:begin,
                      s(:send,
                        s(:lvar, :c), :>=,
                        s(:send,
                          s(:int, 2), :**,
                          s(:int, 31))))),
                  s(:case,
                    s(:lvar, :posi),
                    s(:when,
                      s(:true),
                      s(:lvasgn, :hemi,
                        s(:if,
                          s(:send,
                            s(:ivar, :@orientation), :[],
                            s(:regexp,
                              s(:str, "^lat$"),
                              s(:regopt))),
                          s(:str, "N"),
                          s(:str, "E")))),
                    s(:lvasgn, :hemi,
                      s(:if,
                        s(:send,
                          s(:ivar, :@orientation), :[],
                          s(:regexp,
                            s(:str, "^lon$"),
                            s(:regopt))),
                        s(:str, "W"),
                        s(:str, "S")))),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :degs), :<<,
                                    s(:str, " ")), :<<,
                                  s(:lvar, :mins)), :<<,
                                s(:str, " ")), :<<,
                              s(:lvar, :secs)), :<<,
                            s(:str, ".")), :<<,
                          s(:lvar, :fracsecs)), :<<,
                        s(:str, " ")), :<<,
                      s(:lvar, :hemi))))),
              s(:def, :inspect,
                s(:args),
                s(:return,
                  s(:dstr,
                    s(:str, "#<"),
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, " "),
                    s(:begin,
                      s(:self)),
                    s(:str, ">")))),
              s(:def, :==,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:ivar, :@coordinates), :==,
                    s(:send,
                      s(:lvar, :other), :coordinates)))),
              s(:def, :eql?,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:self), :==,
                    s(:lvar, :other)))),
              s(:def, :hash,
                s(:args),
                s(:return,
                  s(:send,
                    s(:ivar, :@coordinates), :hash))))),
          s(:class,
            s(:const, nil, :Alt), nil,
            s(:begin,
              s(:casgn, nil, :Regex,
                s(:regexp,
                  s(:str, "^([+-]*\\d+\\.*\\d*)[m]$"),
                  s(:regopt))),
              s(:defs,
                s(:self), :create,
                s(:args,
                  s(:arg, :arg)),
                s(:case,
                  s(:lvar, :arg),
                  s(:when,
                    s(:const, nil, :Alt),
                    s(:return,
                      s(:lvar, :arg))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:begin,
                      s(:lvasgn, :altitude,
                        s(:str, "")),
                      s(:if,
                        s(:send,
                          s(:const, nil, :Regex), :=~,
                          s(:lvar, :arg)),
                        s(:lvasgn, :altitude,
                          s(:send,
                            s(:array,
                              s(:send,
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:nth_ref, 1), :to_f), :*,
                                    s(:begin,
                                      s(:float, 100.0)))), :+,
                                s(:begin,
                                  s(:float, 10000000.0)))), :pack,
                            s(:str, "N"))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :ArgumentError), :new,
                            s(:send,
                              s(:str, "not a properly formed Alt string: "), :+,
                              s(:lvar, :arg))))),
                      s(:return,
                        s(:send,
                          s(:const, nil, :Alt), :new,
                          s(:lvar, :altitude))))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :ArgumentError), :new,
                      s(:dstr,
                        s(:str, "cannot interpret as Alt: "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :arg), :inspect))))))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :altitude)),
                s(:ivasgn, :@altitude,
                  s(:lvar, :altitude))),
              s(:send, nil, :attr_reader,
                s(:sym, :altitude)),
              s(:def, :to_s,
                s(:args),
                s(:begin,
                  s(:lvasgn, :a,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@altitude), :unpack,
                          s(:str, "N")), :join), :to_i)),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :a), :to_f), :/,
                                s(:float, 100.0))), :-,
                            s(:float, 100000.0))), :to_s), :+,
                      s(:str, "m"))))),
              s(:def, :inspect,
                s(:args),
                s(:return,
                  s(:dstr,
                    s(:str, "#<"),
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, " "),
                    s(:begin,
                      s(:self)),
                    s(:str, ">")))),
              s(:def, :==,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:ivar, :@altitude), :==,
                    s(:send,
                      s(:lvar, :other), :altitude)))),
              s(:def, :eql?,
                s(:args,
                  s(:arg, :other)),
                s(:return,
                  s(:send,
                    s(:self), :==,
                    s(:lvar, :other)))),
              s(:def, :hash,
                s(:args),
                s(:return,
                  s(:send,
                    s(:ivar, :@altitude), :hash))))))),
      s(:casgn, nil, :DefaultResolver,
        s(:send,
          s(:self), :new)),
      s(:defs,
        s(:const, nil, :DefaultResolver), :replace_resolvers,
        s(:args,
          s(:arg, :new_resolvers)),
        s(:ivasgn, :@resolvers,
          s(:lvar, :new_resolvers))),
      s(:casgn, nil, :AddressRegex,
        s(:regexp,
          s(:str, "(?:"),
          s(:begin,
            s(:const,
              s(:const, nil, :IPv4), :Regex)),
          s(:str, ")|(?:"),
          s(:begin,
            s(:const,
              s(:const, nil, :IPv6), :Regex)),
          s(:str, ")"),
          s(:regopt))))))
