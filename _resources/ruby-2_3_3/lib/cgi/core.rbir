s(:class,
  s(:const, nil, :CGI), nil,
  s(:begin,
    s(:gvasgn, :$CGI_ENV,
      s(:const, nil, :ENV)),
    s(:casgn, nil, :CR,
      s(:str, "\r")),
    s(:casgn, nil, :LF,
      s(:str, "\n")),
    s(:casgn, nil, :EOL,
      s(:send,
        s(:const, nil, :CR), :+,
        s(:const, nil, :LF))),
    s(:casgn, nil, :REVISION,
      s(:str, "$Id$")),
    s(:casgn, nil, :NEEDS_BINMODE,
      s(:send,
        s(:const,
          s(:const, nil, :File), :BINARY), :!=,
        s(:int, 0))),
    s(:casgn, nil, :PATH_SEPARATOR,
      s(:hash,
        s(:pair,
          s(:str, "UNIX"),
          s(:str, "/")),
        s(:pair,
          s(:str, "WINDOWS"),
          s(:str, "\\")),
        s(:pair,
          s(:str, "MACINTOSH"),
          s(:str, ":")))),
    s(:casgn, nil, :HTTP_STATUS,
      s(:hash,
        s(:pair,
          s(:str, "OK"),
          s(:str, "200 OK")),
        s(:pair,
          s(:str, "PARTIAL_CONTENT"),
          s(:str, "206 Partial Content")),
        s(:pair,
          s(:str, "MULTIPLE_CHOICES"),
          s(:str, "300 Multiple Choices")),
        s(:pair,
          s(:str, "MOVED"),
          s(:str, "301 Moved Permanently")),
        s(:pair,
          s(:str, "REDIRECT"),
          s(:str, "302 Found")),
        s(:pair,
          s(:str, "NOT_MODIFIED"),
          s(:str, "304 Not Modified")),
        s(:pair,
          s(:str, "BAD_REQUEST"),
          s(:str, "400 Bad Request")),
        s(:pair,
          s(:str, "AUTH_REQUIRED"),
          s(:str, "401 Authorization Required")),
        s(:pair,
          s(:str, "FORBIDDEN"),
          s(:str, "403 Forbidden")),
        s(:pair,
          s(:str, "NOT_FOUND"),
          s(:str, "404 Not Found")),
        s(:pair,
          s(:str, "METHOD_NOT_ALLOWED"),
          s(:str, "405 Method Not Allowed")),
        s(:pair,
          s(:str, "NOT_ACCEPTABLE"),
          s(:str, "406 Not Acceptable")),
        s(:pair,
          s(:str, "LENGTH_REQUIRED"),
          s(:str, "411 Length Required")),
        s(:pair,
          s(:str, "PRECONDITION_FAILED"),
          s(:str, "412 Precondition Failed")),
        s(:pair,
          s(:str, "SERVER_ERROR"),
          s(:str, "500 Internal Server Error")),
        s(:pair,
          s(:str, "NOT_IMPLEMENTED"),
          s(:str, "501 Method Not Implemented")),
        s(:pair,
          s(:str, "BAD_GATEWAY"),
          s(:str, "502 Bad Gateway")),
        s(:pair,
          s(:str, "VARIANT_ALSO_VARIES"),
          s(:str, "506 Variant Also Negotiates")))),
    s(:def, :env_table,
      s(:args),
      s(:const, nil, :ENV)),
    s(:def, :stdinput,
      s(:args),
      s(:gvar, :$stdin)),
    s(:def, :stdoutput,
      s(:args),
      s(:gvar, :$stdout)),
    s(:send, nil, :private,
      s(:sym, :env_table),
      s(:sym, :stdinput),
      s(:sym, :stdoutput)),
    s(:def, :http_header,
      s(:args,
        s(:optarg, :options,
          s(:str, "text/html"))),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :options), :is_a?,
            s(:const, nil, :String)),
          s(:begin,
            s(:lvasgn, :content_type,
              s(:lvar, :options)),
            s(:lvasgn, :buf,
              s(:send, nil, :_header_for_string,
                s(:lvar, :content_type)))),
          s(:if,
            s(:send,
              s(:lvar, :options), :is_a?,
              s(:const, nil, :Hash)),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :options), :size), :==,
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :options), :has_key?,
                  s(:str, "type"))),
              s(:begin,
                s(:lvasgn, :content_type,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:str, "type"))),
                s(:lvasgn, :buf,
                  s(:send, nil, :_header_for_string,
                    s(:lvar, :content_type)))),
              s(:lvasgn, :buf,
                s(:send, nil, :_header_for_hash,
                  s(:send,
                    s(:lvar, :options), :dup)))),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :ArgumentError), :new,
                s(:dstr,
                  s(:str, "expected String or Hash but got "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :options), :class))))))),
        s(:if,
          s(:defined?,
            s(:const, nil, :MOD_RUBY)),
          s(:begin,
            s(:send, nil, :_header_for_modruby,
              s(:lvar, :buf)),
            s(:return,
              s(:str, ""))),
          s(:begin,
            s(:send,
              s(:lvar, :buf), :<<,
              s(:const, nil, :EOL)),
            s(:return,
              s(:lvar, :buf)))))),
    s(:alias,
      s(:sym, :header),
      s(:sym, :http_header)),
    s(:def, :_header_for_string,
      s(:args,
        s(:arg, :content_type)),
      s(:begin,
        s(:lvasgn, :buf,
          s(:str, "")),
        s(:if,
          s(:send, nil, :nph?),
          s(:begin,
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:gvar, :$CGI_ENV), :[],
                      s(:str, "SERVER_PROTOCOL")),
                    s(:str, "HTTP/1.0"))),
                s(:str, " 200 OK"),
                s(:begin,
                  s(:const, nil, :EOL)))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Date: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :CGI), :rfc1123_date,
                    s(:send,
                      s(:const, nil, :Time), :now))),
                s(:begin,
                  s(:const, nil, :EOL)))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Server: "),
                s(:begin,
                  s(:send,
                    s(:gvar, :$CGI_ENV), :[],
                    s(:str, "SERVER_SOFTWARE"))),
                s(:begin,
                  s(:const, nil, :EOL)))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Connection: close"),
                s(:begin,
                  s(:const, nil, :EOL))))), nil),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "Content-Type: "),
            s(:begin,
              s(:lvar, :content_type)),
            s(:begin,
              s(:const, nil, :EOL)))),
        s(:if,
          s(:ivar, :@output_cookies),
          s(:block,
            s(:send,
              s(:ivar, :@output_cookies), :each),
            s(:args,
              s(:arg, :cookie)),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Set-Cookie: "),
                s(:begin,
                  s(:lvar, :cookie)),
                s(:begin,
                  s(:const, nil, :EOL))))), nil),
        s(:return,
          s(:lvar, :buf)))),
    s(:send, nil, :private,
      s(:sym, :_header_for_string)),
    s(:def, :_header_for_hash,
      s(:args,
        s(:arg, :options)),
      s(:begin,
        s(:lvasgn, :buf,
          s(:str, "")),
        s(:or_asgn,
          s(:send,
            s(:lvar, :options), :[],
            s(:str, "type")),
          s(:str, "text/html")),
        s(:lvasgn, :charset,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "charset"))),
        s(:if,
          s(:lvar, :charset),
          s(:op_asgn,
            s(:send,
              s(:lvar, :options), :[],
              s(:str, "type")), :+,
            s(:dstr,
              s(:str, "; charset="),
              s(:begin,
                s(:lvar, :charset)))), nil),
        s(:if,
          s(:defined?,
            s(:const, nil, :MOD_RUBY)),
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "nph")), nil),
        s(:if,
          s(:or,
            s(:send,
              s(:lvar, :options), :delete,
              s(:str, "nph")),
            s(:send, nil, :nph?)),
          s(:begin,
            s(:lvasgn, :protocol,
              s(:or,
                s(:send,
                  s(:gvar, :$CGI_ENV), :[],
                  s(:str, "SERVER_PROTOCOL")),
                s(:str, "HTTP/1.0"))),
            s(:lvasgn, :status,
              s(:send,
                s(:lvar, :options), :delete,
                s(:str, "status"))),
            s(:lvasgn, :status,
              s(:or,
                s(:or,
                  s(:send,
                    s(:const, nil, :HTTP_STATUS), :[],
                    s(:lvar, :status)),
                  s(:lvar, :status)),
                s(:str, "200 OK"))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:begin,
                  s(:lvar, :protocol)),
                s(:str, " "),
                s(:begin,
                  s(:lvar, :status)),
                s(:begin,
                  s(:const, nil, :EOL)))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Date: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :CGI), :rfc1123_date,
                    s(:send,
                      s(:const, nil, :Time), :now))),
                s(:begin,
                  s(:const, nil, :EOL)))),
            s(:or_asgn,
              s(:send,
                s(:lvar, :options), :[],
                s(:str, "server")),
              s(:or,
                s(:send,
                  s(:gvar, :$CGI_ENV), :[],
                  s(:str, "SERVER_SOFTWARE")),
                s(:str, ""))),
            s(:or_asgn,
              s(:send,
                s(:lvar, :options), :[],
                s(:str, "connection")),
              s(:str, "close"))), nil),
        s(:lvasgn, :status,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "status"))),
        s(:if,
          s(:lvar, :status),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Status: "),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:const, nil, :HTTP_STATUS), :[],
                    s(:lvar, :status)),
                  s(:lvar, :status))),
              s(:begin,
                s(:const, nil, :EOL)))), nil),
        s(:lvasgn, :server,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "server"))),
        s(:if,
          s(:lvar, :server),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Server: "),
              s(:begin,
                s(:lvar, :server)),
              s(:begin,
                s(:const, nil, :EOL)))), nil),
        s(:lvasgn, :connection,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "connection"))),
        s(:if,
          s(:lvar, :connection),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Connection: "),
              s(:begin,
                s(:lvar, :connection)),
              s(:begin,
                s(:const, nil, :EOL)))), nil),
        s(:lvasgn, :type,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "type"))),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "Content-Type: "),
            s(:begin,
              s(:lvar, :type)),
            s(:begin,
              s(:const, nil, :EOL)))),
        s(:lvasgn, :length,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "length"))),
        s(:if,
          s(:lvar, :length),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Content-Length: "),
              s(:begin,
                s(:lvar, :length)),
              s(:begin,
                s(:const, nil, :EOL)))), nil),
        s(:lvasgn, :language,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "language"))),
        s(:if,
          s(:lvar, :language),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Content-Language: "),
              s(:begin,
                s(:lvar, :language)),
              s(:begin,
                s(:const, nil, :EOL)))), nil),
        s(:lvasgn, :expires,
          s(:send,
            s(:lvar, :options), :delete,
            s(:str, "expires"))),
        s(:if,
          s(:lvar, :expires),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:str, "Expires: "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CGI), :rfc1123_date,
                  s(:lvar, :expires))),
              s(:begin,
                s(:const, nil, :EOL)))), nil),
        s(:if,
          s(:lvasgn, :cookie,
            s(:send,
              s(:lvar, :options), :delete,
              s(:str, "cookie"))),
          s(:case,
            s(:lvar, :cookie),
            s(:when,
              s(:const, nil, :String),
              s(:const, nil, :Cookie),
              s(:send,
                s(:lvar, :buf), :<<,
                s(:dstr,
                  s(:str, "Set-Cookie: "),
                  s(:begin,
                    s(:lvar, :cookie)),
                  s(:begin,
                    s(:const, nil, :EOL))))),
            s(:when,
              s(:const, nil, :Array),
              s(:begin,
                s(:lvasgn, :arr,
                  s(:lvar, :cookie)),
                s(:block,
                  s(:send,
                    s(:lvar, :arr), :each),
                  s(:args,
                    s(:arg, :c)),
                  s(:send,
                    s(:lvar, :buf), :<<,
                    s(:dstr,
                      s(:str, "Set-Cookie: "),
                      s(:begin,
                        s(:lvar, :c)),
                      s(:begin,
                        s(:const, nil, :EOL))))))),
            s(:when,
              s(:const, nil, :Hash),
              s(:begin,
                s(:lvasgn, :hash,
                  s(:lvar, :cookie)),
                s(:block,
                  s(:send,
                    s(:lvar, :hash), :each_value),
                  s(:args,
                    s(:arg, :c)),
                  s(:send,
                    s(:lvar, :buf), :<<,
                    s(:dstr,
                      s(:str, "Set-Cookie: "),
                      s(:begin,
                        s(:lvar, :c)),
                      s(:begin,
                        s(:const, nil, :EOL))))))), nil), nil),
        s(:if,
          s(:ivar, :@output_cookies),
          s(:block,
            s(:send,
              s(:ivar, :@output_cookies), :each),
            s(:args,
              s(:arg, :c)),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "Set-Cookie: "),
                s(:begin,
                  s(:lvar, :c)),
                s(:begin,
                  s(:const, nil, :EOL))))), nil),
        s(:block,
          s(:send,
            s(:lvar, :options), :each),
          s(:args,
            s(:arg, :key),
            s(:arg, :value)),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:begin,
                s(:lvar, :key)),
              s(:str, ": "),
              s(:begin,
                s(:lvar, :value)),
              s(:begin,
                s(:const, nil, :EOL))))),
        s(:return,
          s(:lvar, :buf)))),
    s(:send, nil, :private,
      s(:sym, :_header_for_hash)),
    s(:def, :nph?,
      s(:args),
      s(:return,
        s(:and,
          s(:send,
            s(:regexp,
              s(:str, "IIS/(\\d+)"),
              s(:regopt)), :match,
            s(:send,
              s(:gvar, :$CGI_ENV), :[],
              s(:str, "SERVER_SOFTWARE"))),
          s(:send,
            s(:send,
              s(:nth_ref, 1), :to_i), :<,
            s(:int, 5))))),
    s(:def, :_header_for_modruby,
      s(:args,
        s(:arg, :buf)),
      s(:begin,
        s(:lvasgn, :request,
          s(:send,
            s(:const, nil, :Apache), :request)),
        s(:block,
          s(:send,
            s(:lvar, :buf), :scan,
            s(:regexp,
              s(:str, "([^:]+): (.+)"),
              s(:begin,
                s(:const, nil, :EOL)),
              s(:regopt, :o))),
          s(:args,
            s(:arg, :name),
            s(:arg, :value)),
          s(:begin,
            s(:if,
              s(:gvar, :$DEBUG),
              s(:send, nil, :warn,
                s(:send, nil, :sprintf,
                  s(:str, "name:%s value:%s\n"),
                  s(:lvar, :name),
                  s(:lvar, :value))), nil),
            s(:case,
              s(:lvar, :name),
              s(:when,
                s(:str, "Set-Cookie"),
                s(:send,
                  s(:send,
                    s(:lvar, :request), :headers_out), :add,
                  s(:lvar, :name),
                  s(:lvar, :value))),
              s(:when,
                s(:regexp,
                  s(:str, "^status$"),
                  s(:regopt, :i)),
                s(:begin,
                  s(:send,
                    s(:lvar, :request), :status_line=,
                    s(:lvar, :value)),
                  s(:send,
                    s(:lvar, :request), :status=,
                    s(:send,
                      s(:lvar, :value), :to_i)))),
              s(:when,
                s(:regexp,
                  s(:str, "^content-type$"),
                  s(:regopt, :i)),
                s(:send,
                  s(:lvar, :request), :content_type=,
                  s(:lvar, :value))),
              s(:when,
                s(:regexp,
                  s(:str, "^content-encoding$"),
                  s(:regopt, :i)),
                s(:send,
                  s(:lvar, :request), :content_encoding=,
                  s(:lvar, :value))),
              s(:when,
                s(:regexp,
                  s(:str, "^location$"),
                  s(:regopt, :i)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :request), :status), :==,
                      s(:int, 200)),
                    s(:send,
                      s(:lvar, :request), :status=,
                      s(:int, 302)), nil),
                  s(:send,
                    s(:send,
                      s(:lvar, :request), :headers_out), :[]=,
                    s(:lvar, :name),
                    s(:lvar, :value)))),
              s(:send,
                s(:send,
                  s(:lvar, :request), :headers_out), :[]=,
                s(:lvar, :name),
                s(:lvar, :value))))),
        s(:send,
          s(:lvar, :request), :send_http_header),
        s(:return,
          s(:str, "")))),
    s(:send, nil, :private,
      s(:sym, :_header_for_modruby)),
    s(:def, :out,
      s(:args,
        s(:optarg, :options,
          s(:str, "text/html"))),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :options), :kind_of?,
            s(:const, nil, :String)),
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:str, "type"),
                s(:lvar, :options)))), nil),
        s(:lvasgn, :content,
          s(:yield)),
        s(:send,
          s(:lvar, :options), :[]=,
          s(:str, "length"),
          s(:send,
            s(:send,
              s(:lvar, :content), :bytesize), :to_s)),
        s(:lvasgn, :output,
          s(:send, nil, :stdoutput)),
        s(:if,
          s(:defined?,
            s(:send,
              s(:lvar, :output), :binmode)),
          s(:send,
            s(:lvar, :output), :binmode), nil),
        s(:send,
          s(:lvar, :output), :print,
          s(:send, nil, :http_header,
            s(:lvar, :options))),
        s(:if,
          s(:send,
            s(:str, "HEAD"), :==,
            s(:send,
              s(:send, nil, :env_table), :[],
              s(:str, "REQUEST_METHOD"))), nil,
          s(:send,
            s(:lvar, :output), :print,
            s(:lvar, :content))))),
    s(:def, :print,
      s(:args,
        s(:restarg, :options)),
      s(:send,
        s(:send, nil, :stdoutput), :print,
        s(:splat,
          s(:lvar, :options)))),
    s(:defs,
      s(:const, nil, :CGI), :parse,
      s(:args,
        s(:arg, :query)),
      s(:begin,
        s(:lvasgn, :params,
          s(:hash)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :query), :split,
              s(:regexp,
                s(:str, "[&;]"),
                s(:regopt))), :each),
          s(:args,
            s(:arg, :pairs)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :key),
                s(:lvasgn, :value)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :pairs), :split,
                    s(:str, "="),
                    s(:int, 2)), :collect),
                s(:args,
                  s(:arg, :v)),
                s(:send,
                  s(:const, nil, :CGI), :unescape,
                  s(:lvar, :v)))),
            s(:if,
              s(:lvar, :key), nil,
              s(:next)),
            s(:or_asgn,
              s(:send,
                s(:lvar, :params), :[],
                s(:lvar, :key)),
              s(:array)),
            s(:if,
              s(:lvar, :value),
              s(:send,
                s(:send,
                  s(:lvar, :params), :[],
                  s(:lvar, :key)), :push,
                s(:lvar, :value)), nil))),
        s(:send,
          s(:lvar, :params), :default=,
          s(:send,
            s(:array), :freeze)),
        s(:lvar, :params))),
    s(:casgn, nil, :MAX_MULTIPART_COUNT,
      s(:int, 128)),
    s(:module,
      s(:const, nil, :QueryExtension),
      s(:begin,
        s(:block,
          s(:send,
            s(:array,
              s(:str, "CONTENT_LENGTH"),
              s(:str, "SERVER_PORT")), :each),
          s(:args,
            s(:arg, :env)),
          s(:block,
            s(:send, nil, :define_method,
              s(:send,
                s(:send,
                  s(:lvar, :env), :sub,
                  s(:regexp,
                    s(:str, "^HTTP_"),
                    s(:regopt)),
                  s(:str, "")), :downcase)),
            s(:args),
            s(:and,
              s(:begin,
                s(:lvasgn, :val,
                  s(:send,
                    s(:send, nil, :env_table), :[],
                    s(:lvar, :env)))),
              s(:send, nil, :Integer,
                s(:lvar, :val))))),
        s(:block,
          s(:send,
            s(:array,
              s(:str, "AUTH_TYPE"),
              s(:str, "CONTENT_TYPE"),
              s(:str, "GATEWAY_INTERFACE"),
              s(:str, "PATH_INFO"),
              s(:str, "PATH_TRANSLATED"),
              s(:str, "QUERY_STRING"),
              s(:str, "REMOTE_ADDR"),
              s(:str, "REMOTE_HOST"),
              s(:str, "REMOTE_IDENT"),
              s(:str, "REMOTE_USER"),
              s(:str, "REQUEST_METHOD"),
              s(:str, "SCRIPT_NAME"),
              s(:str, "SERVER_NAME"),
              s(:str, "SERVER_PROTOCOL"),
              s(:str, "SERVER_SOFTWARE"),
              s(:str, "HTTP_ACCEPT"),
              s(:str, "HTTP_ACCEPT_CHARSET"),
              s(:str, "HTTP_ACCEPT_ENCODING"),
              s(:str, "HTTP_ACCEPT_LANGUAGE"),
              s(:str, "HTTP_CACHE_CONTROL"),
              s(:str, "HTTP_FROM"),
              s(:str, "HTTP_HOST"),
              s(:str, "HTTP_NEGOTIATE"),
              s(:str, "HTTP_PRAGMA"),
              s(:str, "HTTP_REFERER"),
              s(:str, "HTTP_USER_AGENT")), :each),
          s(:args,
            s(:arg, :env)),
          s(:block,
            s(:send, nil, :define_method,
              s(:send,
                s(:send,
                  s(:lvar, :env), :sub,
                  s(:regexp,
                    s(:str, "^HTTP_"),
                    s(:regopt)),
                  s(:str, "")), :downcase)),
            s(:args),
            s(:send,
              s(:send, nil, :env_table), :[],
              s(:lvar, :env)))),
        s(:def, :raw_cookie,
          s(:args),
          s(:send,
            s(:send, nil, :env_table), :[],
            s(:str, "HTTP_COOKIE"))),
        s(:def, :raw_cookie2,
          s(:args),
          s(:send,
            s(:send, nil, :env_table), :[],
            s(:str, "HTTP_COOKIE2"))),
        s(:send, nil, :attr_accessor,
          s(:sym, :cookies)),
        s(:send, nil, :attr_reader,
          s(:sym, :params)),
        s(:send, nil, :attr_reader,
          s(:sym, :files)),
        s(:def, :params=,
          s(:args,
            s(:arg, :hash)),
          s(:begin,
            s(:send,
              s(:ivar, :@params), :clear),
            s(:send,
              s(:ivar, :@params), :update,
              s(:lvar, :hash)))),
        s(:def, :read_multipart,
          s(:args,
            s(:arg, :boundary),
            s(:arg, :content_length)),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :stdin,
                s(:send, nil, :stdinput)),
              s(:lvasgn, :first_line,
                s(:dstr,
                  s(:str, "--"),
                  s(:begin,
                    s(:lvar, :boundary)),
                  s(:begin,
                    s(:const, nil, :EOL)))),
              s(:op_asgn,
                s(:lvasgn, :content_length), :-,
                s(:send,
                  s(:lvar, :first_line), :bytesize)),
              s(:lvasgn, :status,
                s(:send,
                  s(:lvar, :stdin), :read,
                  s(:send,
                    s(:lvar, :first_line), :bytesize))),
              s(:if,
                s(:lvar, :status), nil,
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :EOFError), :new,
                    s(:str, "no content body")))),
              s(:if,
                s(:send,
                  s(:lvar, :first_line), :==,
                  s(:lvar, :status)), nil,
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :EOFError), :new,
                    s(:str, "bad content body")))),
              s(:lvasgn, :params,
                s(:hash)),
              s(:ivasgn, :@files,
                s(:hash)),
              s(:lvasgn, :boundary_rexp,
                s(:regexp,
                  s(:str, "--"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Regexp), :quote,
                      s(:lvar, :boundary))),
                  s(:str, "("),
                  s(:begin,
                    s(:const, nil, :EOL)),
                  s(:str, "|--)"),
                  s(:regopt))),
              s(:lvasgn, :boundary_size,
                s(:send,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :EOL)),
                    s(:str, "--"),
                    s(:begin,
                      s(:lvar, :boundary)),
                    s(:begin,
                      s(:const, nil, :EOL))), :bytesize)),
              s(:lvasgn, :buf,
                s(:str, "")),
              s(:lvasgn, :bufsize,
                s(:send,
                  s(:int, 10), :*,
                  s(:int, 1024))),
              s(:lvasgn, :max_count,
                s(:const, nil, :MAX_MULTIPART_COUNT)),
              s(:lvasgn, :n,
                s(:int, 0)),
              s(:lvasgn, :tempfiles,
                s(:array)),
              s(:while,
                s(:true),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:begin,
                        s(:op_asgn,
                          s(:lvasgn, :n), :+,
                          s(:int, 1))), :<,
                      s(:lvar, :max_count)),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :StandardError), :new,
                        s(:str, "too many parameters.")))),
                  s(:lvasgn, :body,
                    s(:send, nil, :create_body,
                      s(:send,
                        s(:lvar, :bufsize), :<,
                        s(:lvar, :content_length)))),
                  s(:if,
                    s(:and,
                      s(:defined?,
                        s(:const, nil, :Tempfile)),
                      s(:send,
                        s(:lvar, :body), :kind_of?,
                        s(:const, nil, :Tempfile))),
                    s(:send,
                      s(:lvar, :tempfiles), :<<,
                      s(:lvar, :body)), nil),
                  s(:sclass,
                    s(:lvar, :body),
                    s(:begin,
                      s(:if,
                        s(:send, nil, :method_defined?,
                          s(:sym, :path)),
                        s(:alias,
                          s(:sym, :local_path),
                          s(:sym, :path)),
                        s(:def, :local_path,
                          s(:args),
                          s(:nil))),
                      s(:send, nil, :attr_reader,
                        s(:sym, :original_filename),
                        s(:sym, :content_type)))),
                  s(:lvasgn, :head,
                    s(:nil)),
                  s(:lvasgn, :separator,
                    s(:send,
                      s(:const, nil, :EOL), :*,
                      s(:int, 2))),
                  s(:until,
                    s(:and,
                      s(:lvar, :head),
                      s(:lvasgn, :matched,
                        s(:send,
                          s(:lvar, :boundary_rexp), :match,
                          s(:lvar, :buf)))),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :head), :!),
                        s(:lvasgn, :pos,
                          s(:send,
                            s(:lvar, :buf), :index,
                            s(:lvar, :separator)))),
                      s(:begin,
                        s(:lvasgn, :len,
                          s(:send,
                            s(:lvar, :pos), :+,
                            s(:send,
                              s(:const, nil, :EOL), :bytesize))),
                        s(:lvasgn, :head,
                          s(:send,
                            s(:lvar, :buf), :[],
                            s(:int, 0),
                            s(:lvar, :len))),
                        s(:lvasgn, :buf,
                          s(:send,
                            s(:lvar, :buf), :[],
                            s(:irange,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :pos), :+,
                                  s(:send,
                                    s(:lvar, :separator), :bytesize))),
                              s(:int, -1))))),
                      s(:begin,
                        s(:if,
                          s(:and,
                            s(:lvar, :head),
                            s(:send,
                              s(:send,
                                s(:lvar, :buf), :size), :>,
                              s(:lvar, :boundary_size))),
                          s(:begin,
                            s(:lvasgn, :len,
                              s(:send,
                                s(:send,
                                  s(:lvar, :buf), :size), :-,
                                s(:lvar, :boundary_size))),
                            s(:send,
                              s(:lvar, :body), :print,
                              s(:send,
                                s(:lvar, :buf), :[],
                                s(:int, 0),
                                s(:lvar, :len))),
                            s(:send,
                              s(:lvar, :buf), :[]=,
                              s(:int, 0),
                              s(:lvar, :len),
                              s(:str, ""))), nil),
                        s(:lvasgn, :c,
                          s(:send,
                            s(:lvar, :stdin), :read,
                            s(:if,
                              s(:send,
                                s(:lvar, :bufsize), :<,
                                s(:lvar, :content_length)),
                              s(:lvar, :bufsize),
                              s(:lvar, :content_length)))),
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:lvar, :c), :nil?),
                            s(:send,
                              s(:lvar, :c), :empty?)),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :EOFError), :new,
                              s(:str, "bad content body"))), nil),
                        s(:send,
                          s(:lvar, :buf), :<<,
                          s(:lvar, :c)),
                        s(:op_asgn,
                          s(:lvasgn, :content_length), :-,
                          s(:send,
                            s(:lvar, :c), :bytesize))))),
                  s(:lvasgn, :m,
                    s(:lvar, :matched)),
                  s(:lvasgn, :len,
                    s(:send,
                      s(:lvar, :m), :begin,
                      s(:int, 0))),
                  s(:lvasgn, :s,
                    s(:send,
                      s(:lvar, :buf), :[],
                      s(:int, 0),
                      s(:lvar, :len))),
                  s(:if,
                    s(:send,
                      s(:lvar, :s), :=~,
                      s(:regexp,
                        s(:str, "(\\r?\\n)\\z"),
                        s(:regopt))),
                    s(:lvasgn, :s,
                      s(:send,
                        s(:lvar, :buf), :[],
                        s(:int, 0),
                        s(:send,
                          s(:lvar, :len), :-,
                          s(:send,
                            s(:nth_ref, 1), :bytesize)))), nil),
                  s(:send,
                    s(:lvar, :body), :print,
                    s(:lvar, :s)),
                  s(:lvasgn, :buf,
                    s(:send,
                      s(:lvar, :buf), :[],
                      s(:irange,
                        s(:send,
                          s(:lvar, :m), :end,
                          s(:int, 0)),
                        s(:int, -1)))),
                  s(:lvasgn, :boundary_end,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 1))),
                  s(:if,
                    s(:send,
                      s(:lvar, :boundary_end), :==,
                      s(:str, "--")),
                    s(:lvasgn, :content_length,
                      s(:int, -1)), nil),
                  s(:send,
                    s(:lvar, :body), :rewind),
                  s(:send,
                    s(:regexp,
                      s(:str, "Content-Disposition:.* filename=(?:\"(.*?)\"|([^;\\r\\n]*))"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :head)),
                  s(:lvasgn, :filename,
                    s(:or,
                      s(:or,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2)),
                      s(:str, ""))),
                  s(:if,
                    s(:send, nil, :unescape_filename?),
                    s(:lvasgn, :filename,
                      s(:send,
                        s(:const, nil, :CGI), :unescape,
                        s(:lvar, :filename))), nil),
                  s(:send,
                    s(:lvar, :body), :instance_variable_set,
                    s(:sym, :@original_filename),
                    s(:send,
                      s(:lvar, :filename), :taint)),
                  s(:send,
                    s(:regexp,
                      s(:str, "Content-Type: (.*)"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :head)),
                  s(:send,
                    s(:begin,
                      s(:lvasgn, :content_type,
                        s(:or,
                          s(:nth_ref, 1),
                          s(:str, "")))), :chomp!),
                  s(:send,
                    s(:lvar, :body), :instance_variable_set,
                    s(:sym, :@content_type),
                    s(:send,
                      s(:lvar, :content_type), :taint)),
                  s(:send,
                    s(:regexp,
                      s(:str, "Content-Disposition:.* name=(?:\"(.*?)\"|([^;\\r\\n]*))"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :head)),
                  s(:lvasgn, :name,
                    s(:or,
                      s(:or,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2)),
                      s(:str, ""))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :body), :original_filename), :empty?),
                    s(:begin,
                      s(:lvasgn, :value,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :body), :read), :dup), :force_encoding,
                          s(:ivar, :@accept_charset))),
                      s(:if,
                        s(:and,
                          s(:defined?,
                            s(:const, nil, :Tempfile)),
                          s(:send,
                            s(:lvar, :body), :kind_of?,
                            s(:const, nil, :Tempfile))),
                        s(:send,
                          s(:lvar, :body), :close!), nil),
                      s(:send,
                        s(:begin,
                          s(:or_asgn,
                            s(:send,
                              s(:lvar, :params), :[],
                              s(:lvar, :name)),
                            s(:array))), :<<,
                        s(:lvar, :value)),
                      s(:if,
                        s(:send,
                          s(:lvar, :value), :valid_encoding?), nil,
                        s(:if,
                          s(:ivar, :@accept_charset_error_block),
                          s(:send,
                            s(:ivar, :@accept_charset_error_block), :call,
                            s(:lvar, :name),
                            s(:lvar, :value)),
                          s(:send, nil, :raise,
                            s(:const, nil, :InvalidEncoding),
                            s(:str, "Accept-Charset encoding error")))),
                      s(:block,
                        s(:send,
                          s(:sclass,
                            s(:send,
                              s(:send,
                                s(:lvar, :params), :[],
                                s(:lvar, :name)), :last),
                            s(:self)), :class_eval),
                        s(:args),
                        s(:begin,
                          s(:block,
                            s(:send, nil, :define_method,
                              s(:sym, :read)),
                            s(:args),
                            s(:self)),
                          s(:block,
                            s(:send, nil, :define_method,
                              s(:sym, :original_filename)),
                            s(:args),
                            s(:str, "")),
                          s(:block,
                            s(:send, nil, :define_method,
                              s(:sym, :content_type)),
                            s(:args),
                            s(:str, ""))))),
                    s(:begin,
                      s(:send,
                        s(:begin,
                          s(:or_asgn,
                            s(:send,
                              s(:lvar, :params), :[],
                              s(:lvar, :name)),
                            s(:array))), :<<,
                        s(:lvar, :body)),
                      s(:send,
                        s(:ivar, :@files), :[]=,
                        s(:lvar, :name),
                        s(:lvar, :body)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :content_length), :==,
                      s(:int, -1)),
                    s(:break), nil))),
              s(:if,
                s(:send,
                  s(:lvar, :boundary_end), :=~,
                  s(:regexp,
                    s(:str, "--"),
                    s(:regopt))), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :EOFError),
                  s(:str, "bad boundary end of body part"))),
              s(:send,
                s(:lvar, :params), :default=,
                s(:array)),
              s(:lvar, :params)),
            s(:resbody,
              s(:array,
                s(:const, nil, :Exception)), nil,
              s(:begin,
                s(:if,
                  s(:lvar, :tempfiles),
                  s(:block,
                    s(:send,
                      s(:lvar, :tempfiles), :each),
                    s(:args,
                      s(:arg, :t)),
                    s(:if,
                      s(:send,
                        s(:lvar, :t), :path),
                      s(:send,
                        s(:lvar, :t), :close!), nil)), nil),
                s(:send, nil, :raise))), nil)),
        s(:send, nil, :private,
          s(:sym, :read_multipart)),
        s(:def, :create_body,
          s(:args,
            s(:arg, :is_large)),
          s(:begin,
            s(:if,
              s(:lvar, :is_large),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "tempfile")),
                s(:lvasgn, :body,
                  s(:send,
                    s(:const, nil, :Tempfile), :new,
                    s(:str, "CGI"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :encoding),
                        s(:const,
                          s(:const, nil, :Encoding), :ASCII_8BIT)))))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:send, nil, :require,
                      s(:str, "stringio")),
                    s(:lvasgn, :body,
                      s(:send,
                        s(:const, nil, :StringIO), :new,
                        s(:send,
                          s(:str, ""), :force_encoding,
                          s(:const,
                            s(:const, nil, :Encoding), :ASCII_8BIT))))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :LoadError)), nil,
                    s(:begin,
                      s(:send, nil, :require,
                        s(:str, "tempfile")),
                      s(:lvasgn, :body,
                        s(:send,
                          s(:const, nil, :Tempfile), :new,
                          s(:str, "CGI"),
                          s(:hash,
                            s(:pair,
                              s(:sym, :encoding),
                              s(:const,
                                s(:const, nil, :Encoding), :ASCII_8BIT))))))), nil))),
            s(:if,
              s(:defined?,
                s(:send,
                  s(:lvar, :body), :binmode)),
              s(:send,
                s(:lvar, :body), :binmode), nil),
            s(:return,
              s(:lvar, :body)))),
        s(:def, :unescape_filename?,
          s(:args),
          s(:begin,
            s(:lvasgn, :user_agent,
              s(:send,
                s(:gvar, :$CGI_ENV), :[],
                s(:str, "HTTP_USER_AGENT"))),
            s(:return,
              s(:and,
                s(:and,
                  s(:send,
                    s(:regexp,
                      s(:str, "Mac"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :user_agent)),
                  s(:send,
                    s(:regexp,
                      s(:str, "Mozilla"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :user_agent))),
                s(:send,
                  s(:send,
                    s(:regexp,
                      s(:str, "MSIE"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :user_agent)), :!))))),
        s(:def, :read_from_cmdline,
          s(:args),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "shellwords")),
            s(:lvasgn, :string,
              s(:send,
                s(:send,
                  s(:if,
                    s(:send,
                      s(:const, nil, :ARGV), :empty?),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:const, nil, :STDIN), :tty?),
                        s(:send,
                          s(:const, nil, :STDERR), :print,
                          s(:str, "(offline mode: enter name=value pairs on standard input)\n")), nil),
                      s(:lvasgn, :array,
                        s(:rescue,
                          s(:send, nil, :readlines),
                          s(:resbody, nil, nil,
                            s(:nil)), nil)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :array), :nil?), :!),
                        s(:send,
                          s(:send,
                            s(:lvar, :array), :join,
                            s(:str, " ")), :gsub,
                          s(:regexp,
                            s(:str, "\\n"),
                            s(:regopt, :n)),
                          s(:str, "")),
                        s(:str, ""))),
                    s(:send,
                      s(:const, nil, :ARGV), :join,
                      s(:str, " "))), :gsub,
                  s(:regexp,
                    s(:str, "\\\\="),
                    s(:regopt, :n)),
                  s(:str, "%3D")), :gsub,
                s(:regexp,
                  s(:str, "\\\\&"),
                  s(:regopt, :n)),
                s(:str, "%26"))),
            s(:lvasgn, :words,
              s(:send,
                s(:const, nil, :Shellwords), :shellwords,
                s(:lvar, :string))),
            s(:if,
              s(:block,
                s(:send,
                  s(:lvar, :words), :find),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:regexp,
                    s(:str, "="),
                    s(:regopt, :n)), :match,
                  s(:lvar, :x))),
              s(:send,
                s(:lvar, :words), :join,
                s(:str, "&")),
              s(:send,
                s(:lvar, :words), :join,
                s(:str, "+"))))),
        s(:send, nil, :private,
          s(:sym, :read_from_cmdline)),
        s(:def, :initialize_query,
          s(:args),
          s(:begin,
            s(:if,
              s(:and,
                s(:begin,
                  s(:send,
                    s(:str, "POST"), :==,
                    s(:send,
                      s(:send, nil, :env_table), :[],
                      s(:str, "REQUEST_METHOD")))),
                s(:send,
                  s(:regexp,
                    s(:str, "\\Amultipart/form-data.*boundary=\\\"?([^\\\";,]+)\\\"?"),
                    s(:regopt)), :match,
                  s(:send,
                    s(:send, nil, :env_table), :[],
                    s(:str, "CONTENT_TYPE")))),
              s(:begin,
                s(:lvasgn, :current_max_multipart_length,
                  s(:if,
                    s(:send,
                      s(:ivar, :@max_multipart_length), :respond_to?,
                      s(:sym, :call)),
                    s(:send,
                      s(:ivar, :@max_multipart_length), :call),
                    s(:ivar, :@max_multipart_length))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send, nil, :env_table), :[],
                        s(:str, "CONTENT_LENGTH")), :to_i), :>,
                    s(:lvar, :current_max_multipart_length)),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :StandardError), :new,
                      s(:str, "too large multipart data."))), nil),
                s(:lvasgn, :boundary,
                  s(:send,
                    s(:nth_ref, 1), :dup)),
                s(:ivasgn, :@multipart,
                  s(:true)),
                s(:ivasgn, :@params,
                  s(:send, nil, :read_multipart,
                    s(:lvar, :boundary),
                    s(:send, nil, :Integer,
                      s(:send,
                        s(:send, nil, :env_table), :[],
                        s(:str, "CONTENT_LENGTH")))))),
              s(:begin,
                s(:ivasgn, :@multipart,
                  s(:false)),
                s(:ivasgn, :@params,
                  s(:send,
                    s(:const, nil, :CGI), :parse,
                    s(:send,
                      s(:send,
                        s(:case,
                          s(:send,
                            s(:send, nil, :env_table), :[],
                            s(:str, "REQUEST_METHOD")),
                          s(:when,
                            s(:str, "GET"),
                            s(:str, "HEAD"),
                            s(:if,
                              s(:defined?,
                                s(:const, nil, :MOD_RUBY)),
                              s(:or,
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :Apache), :request), :args),
                                s(:str, "")),
                              s(:or,
                                s(:send,
                                  s(:send, nil, :env_table), :[],
                                  s(:str, "QUERY_STRING")),
                                s(:str, "")))),
                          s(:when,
                            s(:str, "POST"),
                            s(:begin,
                              s(:if,
                                s(:defined?,
                                  s(:send,
                                    s(:send, nil, :stdinput), :binmode)),
                                s(:send,
                                  s(:send, nil, :stdinput), :binmode), nil),
                              s(:or,
                                s(:send,
                                  s(:send, nil, :stdinput), :read,
                                  s(:send, nil, :Integer,
                                    s(:send,
                                      s(:send, nil, :env_table), :[],
                                      s(:str, "CONTENT_LENGTH")))),
                                s(:str, "")))),
                          s(:send, nil, :read_from_cmdline)), :dup), :force_encoding,
                      s(:ivar, :@accept_charset)))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Encoding), :find,
                      s(:ivar, :@accept_charset)), :==,
                    s(:const,
                      s(:const, nil, :Encoding), :ASCII_8BIT)), nil,
                  s(:block,
                    s(:send,
                      s(:ivar, :@params), :each),
                    s(:args,
                      s(:arg, :key),
                      s(:arg, :values)),
                    s(:block,
                      s(:send,
                        s(:lvar, :values), :each),
                      s(:args,
                        s(:arg, :value)),
                      s(:if,
                        s(:send,
                          s(:lvar, :value), :valid_encoding?), nil,
                        s(:if,
                          s(:ivar, :@accept_charset_error_block),
                          s(:send,
                            s(:ivar, :@accept_charset_error_block), :call,
                            s(:lvar, :key),
                            s(:lvar, :value)),
                          s(:send, nil, :raise,
                            s(:const, nil, :InvalidEncoding),
                            s(:str, "Accept-Charset encoding error"))))))))),
            s(:ivasgn, :@cookies,
              s(:send,
                s(:const,
                  s(:const, nil, :CGI), :Cookie), :parse,
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:send, nil, :env_table), :[],
                      s(:str, "HTTP_COOKIE")),
                    s(:send,
                      s(:send, nil, :env_table), :[],
                      s(:str, "COOKIE")))))))),
        s(:send, nil, :private,
          s(:sym, :initialize_query)),
        s(:def, :multipart?,
          s(:args),
          s(:ivar, :@multipart)),
        s(:def, :[],
          s(:args,
            s(:arg, :key)),
          s(:begin,
            s(:lvasgn, :params,
              s(:send,
                s(:ivar, :@params), :[],
                s(:lvar, :key))),
            s(:if,
              s(:lvar, :params), nil,
              s(:return,
                s(:str, ""))),
            s(:lvasgn, :value,
              s(:send,
                s(:lvar, :params), :[],
                s(:int, 0))),
            s(:if,
              s(:ivar, :@multipart),
              s(:if,
                s(:lvar, :value),
                s(:return,
                  s(:lvar, :value)),
                s(:if,
                  s(:defined?,
                    s(:const, nil, :StringIO)),
                  s(:send,
                    s(:const, nil, :StringIO), :new,
                    s(:send,
                      s(:str, ""), :force_encoding,
                      s(:const,
                        s(:const, nil, :Encoding), :ASCII_8BIT))),
                  s(:send,
                    s(:const, nil, :Tempfile), :new,
                    s(:str, "CGI"),
                    s(:hash,
                      s(:pair,
                        s(:sym, :encoding),
                        s(:const,
                          s(:const, nil, :Encoding), :ASCII_8BIT)))))),
              s(:begin,
                s(:lvasgn, :str,
                  s(:if,
                    s(:lvar, :value),
                    s(:send,
                      s(:lvar, :value), :dup),
                    s(:str, ""))),
                s(:lvar, :str))))),
        s(:def, :keys,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:ivar, :@params), :keys,
            s(:splat,
              s(:lvar, :args)))),
        s(:def, :has_key?,
          s(:args,
            s(:restarg, :args)),
          s(:send,
            s(:ivar, :@params), :has_key?,
            s(:splat,
              s(:lvar, :args)))),
        s(:alias,
          s(:sym, :key?),
          s(:sym, :has_key?)),
        s(:alias,
          s(:sym, :include?),
          s(:sym, :has_key?)))),
    s(:class,
      s(:const, nil, :InvalidEncoding),
      s(:const, nil, :Exception), nil),
    s(:cvasgn, :@@accept_charset,
      s(:str, "UTF-8")),
    s(:defs,
      s(:self), :accept_charset,
      s(:args),
      s(:cvar, :@@accept_charset)),
    s(:defs,
      s(:self), :accept_charset=,
      s(:args,
        s(:arg, :accept_charset)),
      s(:cvasgn, :@@accept_charset,
        s(:lvar, :accept_charset))),
    s(:send, nil, :attr_reader,
      s(:sym, :accept_charset)),
    s(:cvasgn, :@@max_multipart_length,
      s(:send,
        s(:send,
          s(:int, 128), :*,
          s(:int, 1024)), :*,
        s(:int, 1024))),
    s(:def, :initialize,
      s(:args,
        s(:optarg, :options,
          s(:hash)),
        s(:blockarg, :block)),
      s(:begin,
        s(:ivasgn, :@accept_charset_error_block,
          s(:if,
            s(:send, nil, :block_given?),
            s(:lvar, :block),
            s(:nil))),
        s(:ivasgn, :@options,
          s(:hash,
            s(:pair,
              s(:sym, :accept_charset),
              s(:cvar, :@@accept_charset)),
            s(:pair,
              s(:sym, :max_multipart_length),
              s(:cvar, :@@max_multipart_length)))),
        s(:case,
          s(:lvar, :options),
          s(:when,
            s(:const, nil, :Hash),
            s(:send,
              s(:ivar, :@options), :merge!,
              s(:lvar, :options))),
          s(:when,
            s(:const, nil, :String),
            s(:send,
              s(:ivar, :@options), :[]=,
              s(:sym, :tag_maker),
              s(:lvar, :options))), nil),
        s(:ivasgn, :@accept_charset,
          s(:send,
            s(:ivar, :@options), :[],
            s(:sym, :accept_charset))),
        s(:ivasgn, :@max_multipart_length,
          s(:send,
            s(:ivar, :@options), :[],
            s(:sym, :max_multipart_length))),
        s(:if,
          s(:and,
            s(:defined?,
              s(:const, nil, :MOD_RUBY)),
            s(:send,
              s(:send,
                s(:const, nil, :ENV), :key?,
                s(:str, "GATEWAY_INTERFACE")), :!)),
          s(:send,
            s(:send,
              s(:const, nil, :Apache), :request), :setup_cgi_env), nil),
        s(:send, nil, :extend,
          s(:const, nil, :QueryExtension)),
        s(:ivasgn, :@multipart,
          s(:false)),
        s(:send, nil, :initialize_query),
        s(:ivasgn, :@output_cookies,
          s(:nil)),
        s(:ivasgn, :@output_hidden,
          s(:nil)),
        s(:case,
          s(:send,
            s(:ivar, :@options), :[],
            s(:sym, :tag_maker)),
          s(:when,
            s(:str, "html3"),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "cgi/html")),
              s(:send, nil, :extend,
                s(:const, nil, :Html3)),
              s(:send, nil, :extend,
                s(:const, nil, :HtmlExtension)))),
          s(:when,
            s(:str, "html4"),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "cgi/html")),
              s(:send, nil, :extend,
                s(:const, nil, :Html4)),
              s(:send, nil, :extend,
                s(:const, nil, :HtmlExtension)))),
          s(:when,
            s(:str, "html4Tr"),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "cgi/html")),
              s(:send, nil, :extend,
                s(:const, nil, :Html4Tr)),
              s(:send, nil, :extend,
                s(:const, nil, :HtmlExtension)))),
          s(:when,
            s(:str, "html4Fr"),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "cgi/html")),
              s(:send, nil, :extend,
                s(:const, nil, :Html4Tr)),
              s(:send, nil, :extend,
                s(:const, nil, :Html4Fr)),
              s(:send, nil, :extend,
                s(:const, nil, :HtmlExtension)))),
          s(:when,
            s(:str, "html5"),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "cgi/html")),
              s(:send, nil, :extend,
                s(:const, nil, :Html5)),
              s(:send, nil, :extend,
                s(:const, nil, :HtmlExtension)))), nil)))))
