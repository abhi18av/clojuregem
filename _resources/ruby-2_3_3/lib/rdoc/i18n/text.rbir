s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :I18n), :Text), nil,
  s(:begin,
    s(:def, :initialize,
      s(:args,
        s(:arg, :raw)),
      s(:ivasgn, :@raw,
        s(:lvar, :raw))),
    s(:def, :extract_messages,
      s(:args),
      s(:block,
        s(:send, nil, :parse),
        s(:args,
          s(:arg, :part)),
        s(:case,
          s(:send,
            s(:lvar, :part), :[],
            s(:sym, :type)),
          s(:when,
            s(:sym, :empty_line), nil),
          s(:when,
            s(:sym, :paragraph),
            s(:yield,
              s(:lvar, :part))), nil))),
    s(:def, :translate,
      s(:args,
        s(:arg, :locale)),
      s(:begin,
        s(:lvasgn, :translated_text,
          s(:str, "")),
        s(:block,
          s(:send, nil, :parse),
          s(:args,
            s(:arg, :part)),
          s(:case,
            s(:send,
              s(:lvar, :part), :[],
              s(:sym, :type)),
            s(:when,
              s(:sym, :paragraph),
              s(:send,
                s(:lvar, :translated_text), :<<,
                s(:send,
                  s(:lvar, :locale), :translate,
                  s(:send,
                    s(:lvar, :part), :[],
                    s(:sym, :paragraph))))),
            s(:when,
              s(:sym, :empty_line),
              s(:send,
                s(:lvar, :translated_text), :<<,
                s(:send,
                  s(:lvar, :part), :[],
                  s(:sym, :line)))),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "should not reach here: unexpected type: "),
                s(:begin,
                  s(:send, nil, :type)))))),
        s(:lvar, :translated_text))),
    s(:send, nil, :private),
    s(:def, :parse,
      s(:args,
        s(:blockarg, :block)),
      s(:begin,
        s(:lvasgn, :paragraph,
          s(:str, "")),
        s(:lvasgn, :paragraph_start_line,
          s(:int, 0)),
        s(:lvasgn, :line_no,
          s(:int, 0)),
        s(:block,
          s(:send, nil, :each_line,
            s(:ivar, :@raw)),
          s(:args,
            s(:arg, :line)),
          s(:begin,
            s(:op_asgn,
              s(:lvasgn, :line_no), :+,
              s(:int, 1)),
            s(:case,
              s(:lvar, :line),
              s(:when,
                s(:regexp,
                  s(:str, "\\A\\s*\\z"),
                  s(:regopt)),
                s(:if,
                  s(:send,
                    s(:lvar, :paragraph), :empty?),
                  s(:send, nil, :emit_empty_line_event,
                    s(:lvar, :line),
                    s(:lvar, :line_no),
                    s(:block_pass,
                      s(:lvar, :block))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :paragraph), :<<,
                      s(:lvar, :line)),
                    s(:send, nil, :emit_paragraph_event,
                      s(:lvar, :paragraph),
                      s(:lvar, :paragraph_start_line),
                      s(:lvar, :line_no),
                      s(:block_pass,
                        s(:lvar, :block))),
                    s(:lvasgn, :paragraph,
                      s(:str, ""))))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :paragraph), :empty?),
                  s(:lvasgn, :paragraph_start_line,
                    s(:lvar, :line_no)), nil),
                s(:send,
                  s(:lvar, :paragraph), :<<,
                  s(:lvar, :line)))))),
        s(:if,
          s(:send,
            s(:lvar, :paragraph), :empty?), nil,
          s(:send, nil, :emit_paragraph_event,
            s(:lvar, :paragraph),
            s(:lvar, :paragraph_start_line),
            s(:lvar, :line_no),
            s(:block_pass,
              s(:lvar, :block)))))),
    s(:def, :each_line,
      s(:args,
        s(:arg, :raw),
        s(:blockarg, :block)),
      s(:case,
        s(:lvar, :raw),
        s(:when,
          s(:const,
            s(:const, nil, :RDoc), :Comment),
          s(:send,
            s(:send,
              s(:lvar, :raw), :text), :each_line,
            s(:block_pass,
              s(:lvar, :block)))),
        s(:when,
          s(:const, nil, :Array),
          s(:block,
            s(:send,
              s(:lvar, :raw), :each),
            s(:args,
              s(:arg, :comment),
              s(:arg, :location)),
            s(:send, nil, :each_line,
              s(:lvar, :comment),
              s(:block_pass,
                s(:lvar, :block))))),
        s(:send,
          s(:lvar, :raw), :each_line,
          s(:block_pass,
            s(:lvar, :block))))),
    s(:def, :emit_empty_line_event,
      s(:args,
        s(:arg, :line),
        s(:arg, :line_no)),
      s(:begin,
        s(:lvasgn, :part,
          s(:hash,
            s(:pair,
              s(:sym, :type),
              s(:sym, :empty_line)),
            s(:pair,
              s(:sym, :line),
              s(:lvar, :line)),
            s(:pair,
              s(:sym, :line_no),
              s(:lvar, :line_no)))),
        s(:yield,
          s(:lvar, :part)))),
    s(:def, :emit_paragraph_event,
      s(:args,
        s(:arg, :paragraph),
        s(:arg, :paragraph_start_line),
        s(:arg, :line_no),
        s(:blockarg, :block)),
      s(:begin,
        s(:lvasgn, :paragraph_part,
          s(:hash,
            s(:pair,
              s(:sym, :type),
              s(:sym, :paragraph)),
            s(:pair,
              s(:sym, :line_no),
              s(:lvar, :paragraph_start_line)))),
        s(:lvasgn, :match_data,
          s(:send,
            s(:regexp,
              s(:str, "(\\s*)\\z"),
              s(:regopt)), :match,
            s(:lvar, :paragraph))),
        s(:if,
          s(:lvar, :match_data),
          s(:begin,
            s(:send,
              s(:lvar, :paragraph_part), :[]=,
              s(:sym, :paragraph),
              s(:send,
                s(:lvar, :match_data), :pre_match)),
            s(:yield,
              s(:lvar, :paragraph_part)),
            s(:send, nil, :emit_empty_line_event,
              s(:send,
                s(:lvar, :match_data), :[],
                s(:int, 1)),
              s(:lvar, :line_no),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:begin,
            s(:send,
              s(:lvar, :paragraph_part), :[]=,
              s(:sym, :paragraph),
              s(:lvar, :paragraph)),
            s(:yield,
              s(:lvar, :paragraph_part))))))))
