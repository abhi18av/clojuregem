s(:begin,
  s(:send, nil, :require,
    s(:str, "strscan")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :gem,
        s(:str, "json")),
      s(:resbody,
        s(:array,
          s(:const, nil, :NameError)),
        s(:lvasgn, :e),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :e), :name), :==,
            s(:sym, :gem)), nil,
          s(:send, nil, :raise))),
      s(:resbody,
        s(:array,
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:module,
    s(:const,
      s(:const, nil, :RDoc), :Text),
    s(:begin,
      s(:casgn, nil, :MARKUP_FORMAT,
        s(:hash,
          s(:pair,
            s(:str, "markdown"),
            s(:const,
              s(:const, nil, :RDoc), :Markdown)),
          s(:pair,
            s(:str, "rdoc"),
            s(:const,
              s(:const, nil, :RDoc), :Markup)),
          s(:pair,
            s(:str, "rd"),
            s(:const,
              s(:const, nil, :RDoc), :RD)),
          s(:pair,
            s(:str, "tomdoc"),
            s(:const,
              s(:const, nil, :RDoc), :TomDoc)))),
      s(:send,
        s(:const, nil, :MARKUP_FORMAT), :default=,
        s(:const,
          s(:const, nil, :RDoc), :Markup)),
      s(:if,
        s(:send,
          s(:const, nil, :Object), :const_defined?,
          s(:sym, :Encoding)),
        s(:casgn, nil, :TO_HTML_CHARACTERS,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :h),
              s(:arg, :encoding)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :encoding),
              s(:hash,
                s(:pair,
                  s(:sym, :close_dquote),
                  s(:send, nil, :encode_fallback,
                    s(:str, "”"),
                    s(:lvar, :encoding),
                    s(:str, "\""))),
                s(:pair,
                  s(:sym, :close_squote),
                  s(:send, nil, :encode_fallback,
                    s(:str, "’"),
                    s(:lvar, :encoding),
                    s(:str, "'"))),
                s(:pair,
                  s(:sym, :copyright),
                  s(:send, nil, :encode_fallback,
                    s(:str, "©"),
                    s(:lvar, :encoding),
                    s(:str, "(c)"))),
                s(:pair,
                  s(:sym, :ellipsis),
                  s(:send, nil, :encode_fallback,
                    s(:str, "…"),
                    s(:lvar, :encoding),
                    s(:str, "..."))),
                s(:pair,
                  s(:sym, :em_dash),
                  s(:send, nil, :encode_fallback,
                    s(:str, "—"),
                    s(:lvar, :encoding),
                    s(:str, "---"))),
                s(:pair,
                  s(:sym, :en_dash),
                  s(:send, nil, :encode_fallback,
                    s(:str, "–"),
                    s(:lvar, :encoding),
                    s(:str, "--"))),
                s(:pair,
                  s(:sym, :open_dquote),
                  s(:send, nil, :encode_fallback,
                    s(:str, "“"),
                    s(:lvar, :encoding),
                    s(:str, "\""))),
                s(:pair,
                  s(:sym, :open_squote),
                  s(:send, nil, :encode_fallback,
                    s(:str, "‘"),
                    s(:lvar, :encoding),
                    s(:str, "'"))),
                s(:pair,
                  s(:sym, :trademark),
                  s(:send, nil, :encode_fallback,
                    s(:str, "®"),
                    s(:lvar, :encoding),
                    s(:str, "(r)"))))))), nil),
      s(:defs,
        s(:self), :encode_fallback,
        s(:args,
          s(:arg, :character),
          s(:arg, :encoding),
          s(:arg, :fallback)),
        s(:send,
          s(:lvar, :character), :encode,
          s(:lvar, :encoding),
          s(:hash,
            s(:pair,
              s(:sym, :fallback),
              s(:hash,
                s(:pair,
                  s(:lvar, :character),
                  s(:lvar, :fallback)))),
            s(:pair,
              s(:sym, :undef),
              s(:sym, :replace)),
            s(:pair,
              s(:sym, :replace),
              s(:lvar, :fallback))))),
      s(:def, :expand_tabs,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:lvasgn, :expanded,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :text), :each_line),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:while,
                s(:block,
                  s(:send,
                    s(:lvar, :line), :gsub!,
                    s(:regexp,
                      s(:str, "(?:\\G|\\r)((?:.{8})*?)([^\\t\\r\\n]{0,7})\\t"),
                      s(:regopt))),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :r,
                      s(:dstr,
                        s(:begin,
                          s(:nth_ref, 1)),
                        s(:begin,
                          s(:nth_ref, 2)),
                        s(:begin,
                          s(:send,
                            s(:str, " "), :*,
                            s(:begin,
                              s(:send,
                                s(:int, 8), :-,
                                s(:send,
                                  s(:nth_ref, 2), :size))))))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :Object), :const_defined?,
                        s(:sym, :Encoding)),
                      s(:send,
                        s(:lvar, :r), :force_encoding,
                        s(:send,
                          s(:lvar, :text), :encoding)), nil),
                    s(:lvar, :r))),
                s(:nil)),
              s(:send,
                s(:lvar, :expanded), :<<,
                s(:lvar, :line)))),
          s(:send,
            s(:lvar, :expanded), :join))),
      s(:def, :flush_left,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:lvasgn, :indent,
            s(:int, 9999)),
          s(:block,
            s(:send,
              s(:lvar, :text), :each_line),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:lvasgn, :line_indent,
                s(:or,
                  s(:send,
                    s(:lvar, :line), :=~,
                    s(:regexp,
                      s(:str, "\\S"),
                      s(:regopt))),
                  s(:int, 9999))),
              s(:if,
                s(:send,
                  s(:lvar, :indent), :>,
                  s(:lvar, :line_indent)),
                s(:lvasgn, :indent,
                  s(:lvar, :line_indent)), nil))),
          s(:lvasgn, :empty,
            s(:str, "")),
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)),
            s(:send,
              s(:lvar, :empty), :force_encoding,
              s(:send,
                s(:lvar, :text), :encoding)), nil),
          s(:send,
            s(:lvar, :text), :gsub,
            s(:regexp,
              s(:str, "^ {0,"),
              s(:begin,
                s(:lvar, :indent)),
              s(:str, "}"),
              s(:regopt)),
            s(:lvar, :empty)))),
      s(:def, :markup,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@store), :rdoc), :options),
            s(:lvasgn, :locale,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@store), :rdoc), :options), :locale)),
            s(:lvasgn, :locale,
              s(:nil))),
          s(:if,
            s(:lvar, :locale),
            s(:begin,
              s(:lvasgn, :i18n_text,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :I18n), :Text), :new,
                  s(:lvar, :text))),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :i18n_text), :translate,
                  s(:lvar, :locale)))), nil),
          s(:send,
            s(:send, nil, :parse,
              s(:lvar, :text)), :accept,
            s(:send, nil, :formatter)))),
      s(:def, :normalize_comment,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :text), :empty?),
            s(:return,
              s(:lvar, :text)), nil),
          s(:lvasgn, :text,
            s(:send, nil, :strip_stars,
              s(:lvar, :text))),
          s(:lvasgn, :text,
            s(:send, nil, :strip_hashes,
              s(:lvar, :text))),
          s(:lvasgn, :text,
            s(:send, nil, :expand_tabs,
              s(:lvar, :text))),
          s(:lvasgn, :text,
            s(:send, nil, :flush_left,
              s(:lvar, :text))),
          s(:lvasgn, :text,
            s(:send, nil, :strip_newlines,
              s(:lvar, :text))),
          s(:lvar, :text))),
      s(:def, :parse,
        s(:args,
          s(:arg, :text),
          s(:optarg, :format,
            s(:str, "rdoc"))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :===,
              s(:lvar, :text)),
            s(:return,
              s(:lvar, :text)), nil),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :===,
              s(:lvar, :text)),
            s(:return,
              s(:send,
                s(:lvar, :text), :parse)), nil),
          s(:lvasgn, :text,
            s(:send, nil, :normalize_comment,
              s(:lvar, :text))),
          s(:if,
            s(:send,
              s(:lvar, :text), :=~,
              s(:regexp,
                s(:str, "\\A\\n*\\z"),
                s(:regopt))),
            s(:return,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Document), :new)), nil),
          s(:send,
            s(:send,
              s(:const, nil, :MARKUP_FORMAT), :[],
              s(:lvar, :format)), :parse,
            s(:lvar, :text)))),
      s(:def, :snippet,
        s(:args,
          s(:arg, :text),
          s(:optarg, :limit,
            s(:int, 100))),
        s(:begin,
          s(:lvasgn, :document,
            s(:send, nil, :parse,
              s(:lvar, :text))),
          s(:send,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet), :new,
              s(:send, nil, :options),
              s(:lvar, :limit)), :convert,
            s(:lvar, :document)))),
      s(:def, :strip_hashes,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :text), :=~,
              s(:regexp,
                s(:str, "^(?>\\s*)[^\\#]"),
                s(:regopt))),
            s(:return,
              s(:lvar, :text)), nil),
          s(:lvasgn, :empty,
            s(:str, "")),
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)),
            s(:send,
              s(:lvar, :empty), :force_encoding,
              s(:send,
                s(:lvar, :text), :encoding)), nil),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :text), :gsub,
                s(:regexp,
                  s(:str, "^\\s*(#+)"),
                  s(:regopt))),
              s(:args),
              s(:send,
                s(:nth_ref, 1), :tr,
                s(:str, "#"),
                s(:str, " "))), :gsub,
            s(:regexp,
              s(:str, "^\\s+$"),
              s(:regopt)),
            s(:lvar, :empty)))),
      s(:def, :strip_newlines,
        s(:args,
          s(:arg, :text)),
        s(:block,
          s(:send,
            s(:lvar, :text), :gsub,
            s(:regexp,
              s(:str, "\\A\\n*(.*?)\\n*\\z"),
              s(:regopt, :m))),
          s(:args),
          s(:nth_ref, 1))),
      s(:def, :strip_stars,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :text), :=~,
              s(:regexp,
                s(:str, "/\\*.*\\*/"),
                s(:regopt, :m))), nil,
            s(:return,
              s(:lvar, :text))),
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)),
            s(:lvasgn, :encoding,
              s(:send,
                s(:lvar, :text), :encoding)), nil),
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :text), :gsub,
              s(:regexp,
                s(:str, "Document-method:\\s+[\\w:.#=!?]+"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :space,
            s(:str, " ")),
          s(:if,
            s(:lvar, :encoding),
            s(:send,
              s(:lvar, :space), :force_encoding,
              s(:lvar, :encoding)), nil),
          s(:block,
            s(:send,
              s(:lvar, :text), :sub!,
              s(:regexp,
                s(:str, "/\\*+"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :space), :*,
              s(:send,
                s(:back_ref, :$&), :length))),
          s(:block,
            s(:send,
              s(:lvar, :text), :sub!,
              s(:regexp,
                s(:str, "\\*+/"),
                s(:regopt))),
            s(:args),
            s(:send,
              s(:lvar, :space), :*,
              s(:send,
                s(:back_ref, :$&), :length))),
          s(:block,
            s(:send,
              s(:lvar, :text), :gsub!,
              s(:regexp,
                s(:str, "^[ \\t]*\\*"),
                s(:regopt, :m))),
            s(:args),
            s(:send,
              s(:lvar, :space), :*,
              s(:send,
                s(:back_ref, :$&), :length))),
          s(:lvasgn, :empty,
            s(:str, "")),
          s(:if,
            s(:lvar, :encoding),
            s(:send,
              s(:lvar, :empty), :force_encoding,
              s(:lvar, :encoding)), nil),
          s(:send,
            s(:lvar, :text), :gsub,
            s(:regexp,
              s(:str, "^\\s+$"),
              s(:regopt)),
            s(:lvar, :empty)))),
      s(:def, :to_html,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)),
            s(:begin,
              s(:lvasgn, :html,
                s(:send,
                  s(:str, ""), :encode,
                  s(:send,
                    s(:lvar, :text), :encoding))),
              s(:lvasgn, :encoded,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Text), :TO_HTML_CHARACTERS), :[],
                  s(:send,
                    s(:lvar, :text), :encoding)))),
            s(:begin,
              s(:lvasgn, :html,
                s(:str, "")),
              s(:lvasgn, :encoded,
                s(:hash,
                  s(:pair,
                    s(:sym, :close_dquote),
                    s(:str, "”")),
                  s(:pair,
                    s(:sym, :close_squote),
                    s(:str, "’")),
                  s(:pair,
                    s(:sym, :copyright),
                    s(:str, "©")),
                  s(:pair,
                    s(:sym, :ellipsis),
                    s(:str, "…")),
                  s(:pair,
                    s(:sym, :em_dash),
                    s(:str, "—")),
                  s(:pair,
                    s(:sym, :en_dash),
                    s(:str, "–")),
                  s(:pair,
                    s(:sym, :open_dquote),
                    s(:str, "“")),
                  s(:pair,
                    s(:sym, :open_squote),
                    s(:str, "‘")),
                  s(:pair,
                    s(:sym, :trademark),
                    s(:str, "®")))))),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :StringScanner), :new,
              s(:lvar, :text))),
          s(:lvasgn, :insquotes,
            s(:false)),
          s(:lvasgn, :indquotes,
            s(:false)),
          s(:lvasgn, :after_word,
            s(:nil)),
          s(:until,
            s(:send,
              s(:lvar, :s), :eos?),
            s(:case, nil,
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "<(tt|code)>.*?</\\1>"),
                    s(:regopt))),
                s(:send,
                  s(:lvar, :html), :<<,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :matched), :gsub,
                    s(:str, "\\\\"),
                    s(:str, "\\")))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "<(tt|code)>.*?"),
                    s(:regopt))),
                s(:begin,
                  s(:send, nil, :warn,
                    s(:dstr,
                      s(:str, "mismatched <"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :[],
                          s(:int, 1))),
                      s(:str, "> tag"))),
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :s), :matched)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "<[^>]+/?s*>"),
                    s(:regopt))),
                s(:send,
                  s(:lvar, :html), :<<,
                  s(:send,
                    s(:lvar, :s), :matched))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "\\\\(\\S)"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :s), :[],
                      s(:int, 1))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "\\.\\.\\.(\\.?)"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :html), :<<,
                      s(:send,
                        s(:lvar, :s), :[],
                        s(:int, 1))), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :ellipsis))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "\\(c\\)"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :copyright))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "\\(r\\)"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :trademark))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "---"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :em_dash))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "--"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :en_dash))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "&quot;|\""),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:if,
                        s(:lvar, :indquotes),
                        s(:sym, :close_dquote),
                        s(:sym, :open_dquote)))),
                  s(:lvasgn, :indquotes,
                    s(:send,
                      s(:lvar, :indquotes), :!)),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "``"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :open_dquote))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "''"),
                    s(:regopt))),
                s(:begin,
                  s(:send,
                    s(:lvar, :html), :<<,
                    s(:send,
                      s(:lvar, :encoded), :[],
                      s(:sym, :close_dquote))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:when,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "'"),
                    s(:regopt))),
                s(:begin,
                  s(:if,
                    s(:lvar, :insquotes),
                    s(:begin,
                      s(:send,
                        s(:lvar, :html), :<<,
                        s(:send,
                          s(:lvar, :encoded), :[],
                          s(:sym, :close_squote))),
                      s(:lvasgn, :insquotes,
                        s(:false))),
                    s(:if,
                      s(:lvar, :after_word),
                      s(:send,
                        s(:lvar, :html), :<<,
                        s(:send,
                          s(:lvar, :encoded), :[],
                          s(:sym, :close_squote))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :html), :<<,
                          s(:send,
                            s(:lvar, :encoded), :[],
                            s(:sym, :open_squote))),
                        s(:lvasgn, :insquotes,
                          s(:true))))),
                  s(:lvasgn, :after_word,
                    s(:nil)))),
              s(:begin,
                s(:lvasgn, :match,
                  s(:send,
                    s(:lvar, :s), :scan,
                    s(:regexp,
                      s(:str, ".+?(?=[<\\\\.(\"'`&-])"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :match),
                  s(:begin,
                    s(:send,
                      s(:lvar, :html), :<<,
                      s(:lvar, :match)),
                    s(:lvasgn, :after_word,
                      s(:send,
                        s(:lvar, :match), :=~,
                        s(:regexp,
                          s(:str, "\\w$"),
                          s(:regopt))))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :html), :<<,
                      s(:send,
                        s(:lvar, :s), :rest)),
                    s(:break)))))),
          s(:lvar, :html))),
      s(:def, :wrap,
        s(:args,
          s(:arg, :txt),
          s(:optarg, :line_len,
            s(:int, 76))),
        s(:begin,
          s(:lvasgn, :res,
            s(:array)),
          s(:lvasgn, :sp,
            s(:int, 0)),
          s(:lvasgn, :ep,
            s(:send,
              s(:lvar, :txt), :length)),
          s(:while,
            s(:send,
              s(:lvar, :sp), :<,
              s(:lvar, :ep)),
            s(:begin,
              s(:lvasgn, :p,
                s(:send,
                  s(:send,
                    s(:lvar, :sp), :+,
                    s(:lvar, :line_len)), :-,
                  s(:int, 1))),
              s(:if,
                s(:send,
                  s(:lvar, :p), :>=,
                  s(:lvar, :ep)),
                s(:lvasgn, :p,
                  s(:lvar, :ep)),
                s(:begin,
                  s(:while,
                    s(:and,
                      s(:send,
                        s(:lvar, :p), :>,
                        s(:lvar, :sp)),
                      s(:send,
                        s(:send,
                          s(:lvar, :txt), :[],
                          s(:lvar, :p)), :!=,
                        s(:str, " "))),
                    s(:op_asgn,
                      s(:lvasgn, :p), :-,
                      s(:int, 1))),
                  s(:if,
                    s(:send,
                      s(:lvar, :p), :<=,
                      s(:lvar, :sp)),
                    s(:begin,
                      s(:lvasgn, :p,
                        s(:send,
                          s(:lvar, :sp), :+,
                          s(:lvar, :line_len))),
                      s(:while,
                        s(:and,
                          s(:send,
                            s(:lvar, :p), :<,
                            s(:lvar, :ep)),
                          s(:send,
                            s(:send,
                              s(:lvar, :txt), :[],
                              s(:lvar, :p)), :!=,
                            s(:str, " "))),
                        s(:op_asgn,
                          s(:lvasgn, :p), :+,
                          s(:int, 1)))), nil))),
              s(:send,
                s(:send,
                  s(:lvar, :res), :<<,
                  s(:send,
                    s(:lvar, :txt), :[],
                    s(:erange,
                      s(:lvar, :sp),
                      s(:lvar, :p)))), :<<,
                s(:str, "\n")),
              s(:lvasgn, :sp,
                s(:lvar, :p)),
              s(:while,
                s(:and,
                  s(:send,
                    s(:lvar, :sp), :<,
                    s(:lvar, :ep)),
                  s(:send,
                    s(:send,
                      s(:lvar, :txt), :[],
                      s(:lvar, :sp)), :==,
                    s(:str, " "))),
                s(:op_asgn,
                  s(:lvasgn, :sp), :+,
                  s(:int, 1))))),
          s(:send,
            s(:send,
              s(:lvar, :res), :join), :strip))))))
