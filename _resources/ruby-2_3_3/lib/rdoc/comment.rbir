s(:class,
  s(:const,
    s(:const, nil, :RDoc), :Comment), nil,
  s(:begin,
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :RDoc), :Text)),
    s(:send, nil, :attr_reader,
      s(:sym, :format)),
    s(:send, nil, :attr_accessor,
      s(:sym, :location)),
    s(:alias,
      s(:sym, :file),
      s(:sym, :location)),
    s(:send, nil, :attr_reader,
      s(:sym, :text)),
    s(:send, nil, :attr_writer,
      s(:sym, :document)),
    s(:def, :initialize,
      s(:args,
        s(:optarg, :text,
          s(:nil)),
        s(:optarg, :location,
          s(:nil))),
      s(:begin,
        s(:ivasgn, :@location,
          s(:lvar, :location)),
        s(:ivasgn, :@text,
          s(:lvar, :text)),
        s(:ivasgn, :@document,
          s(:nil)),
        s(:ivasgn, :@format,
          s(:str, "rdoc")),
        s(:ivasgn, :@normalized,
          s(:false)))),
    s(:def, :initialize_copy,
      s(:args,
        s(:arg, :copy)),
      s(:ivasgn, :@text,
        s(:send,
          s(:send,
            s(:lvar, :copy), :text), :dup))),
    s(:def, :==,
      s(:args,
        s(:arg, :other)),
      s(:and,
        s(:and,
          s(:send,
            s(:send,
              s(:self), :class), :===,
            s(:lvar, :other)),
          s(:send,
            s(:send,
              s(:lvar, :other), :text), :==,
            s(:ivar, :@text))),
        s(:send,
          s(:send,
            s(:lvar, :other), :location), :==,
          s(:ivar, :@location)))),
    s(:def, :extract_call_seq,
      s(:args,
        s(:arg, :method)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@text), :=~,
            s(:regexp,
              s(:str, "^\\s*:?call-seq:(.*?(?:\\S).*?)^\\s*$"),
              s(:regopt, :m))),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :all_start),
                s(:lvasgn, :all_stop)),
              s(:send,
                s(:gvar, :$~), :offset,
                s(:int, 0))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :seq_start),
                s(:lvasgn, :seq_stop)),
              s(:send,
                s(:gvar, :$~), :offset,
                s(:int, 1))),
            s(:if,
              s(:send,
                s(:nth_ref, 1), :=~,
                s(:regexp,
                  s(:str, "(^\\s*\\n)+^(\\s*\\w+)"),
                  s(:regopt, :m))),
              s(:begin,
                s(:lvasgn, :leading,
                  s(:nth_ref, 2)),
                s(:lvasgn, :re,
                  s(:regexp,
                    s(:str, "\n"),
                    s(:str, "          \\A(\n"),
                    s(:str, "             (^\\s*\\n)+\n"),
                    s(:str, "             (^"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Regexp), :escape,
                        s(:lvar, :leading))),
                    s(:str, ".*?\\n)+\n"),
                    s(:str, "            )+\n"),
                    s(:str, "          ^\\s*$\n"),
                    s(:str, "        "),
                    s(:regopt, :m, :x))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@text), :[],
                      s(:irange,
                        s(:lvar, :seq_stop),
                        s(:int, -1))), :=~,
                    s(:lvar, :re)),
                  s(:begin,
                    s(:lvasgn, :all_stop,
                      s(:send,
                        s(:lvar, :seq_stop), :+,
                        s(:send,
                          s(:send,
                            s(:gvar, :$~), :offset,
                            s(:int, 0)), :last))),
                    s(:lvasgn, :seq_stop,
                      s(:send,
                        s(:lvar, :seq_stop), :+,
                        s(:send,
                          s(:send,
                            s(:gvar, :$~), :offset,
                            s(:int, 1)), :last)))), nil)), nil),
            s(:lvasgn, :seq,
              s(:send,
                s(:ivar, :@text), :[],
                s(:irange,
                  s(:lvar, :seq_start),
                  s(:lvar, :seq_stop)))),
            s(:send,
              s(:lvar, :seq), :gsub!,
              s(:regexp,
                s(:str, "^\\s*(\\S|\\n)"),
                s(:regopt, :m)),
              s(:str, "\\1")),
            s(:send,
              s(:ivar, :@text), :slice!,
              s(:erange,
                s(:lvar, :all_start),
                s(:lvar, :all_stop))),
            s(:send,
              s(:lvar, :method), :call_seq=,
              s(:send,
                s(:lvar, :seq), :chomp))),
          s(:if,
            s(:send,
              s(:ivar, :@text), :sub!,
              s(:regexp,
                s(:str, "^\\s*:?call-seq:(.*?)(^\\s*$|\\z)"),
                s(:regopt, :m)),
              s(:str, "")),
            s(:begin,
              s(:lvasgn, :seq,
                s(:nth_ref, 1)),
              s(:send,
                s(:lvar, :seq), :gsub!,
                s(:regexp,
                  s(:str, "^\\s*"),
                  s(:regopt)),
                s(:str, "")),
              s(:send,
                s(:lvar, :method), :call_seq=,
                s(:lvar, :seq))), nil)),
        s(:lvar, :method))),
    s(:def, :empty?,
      s(:args),
      s(:send,
        s(:ivar, :@text), :empty?)),
    s(:def, :force_encoding,
      s(:args,
        s(:arg, :encoding)),
      s(:send,
        s(:ivar, :@text), :force_encoding,
        s(:lvar, :encoding))),
    s(:def, :format=,
      s(:args,
        s(:arg, :format)),
      s(:begin,
        s(:ivasgn, :@format,
          s(:lvar, :format)),
        s(:ivasgn, :@document,
          s(:nil)))),
    s(:def, :inspect,
      s(:args),
      s(:begin,
        s(:lvasgn, :location,
          s(:if,
            s(:ivar, :@location),
            s(:send,
              s(:ivar, :@location), :relative_name),
            s(:str, "(unknown)"))),
        s(:send,
          s(:str, "#<%s:%x %s %p>"), :%,
          s(:array,
            s(:send,
              s(:self), :class),
            s(:send, nil, :object_id),
            s(:lvar, :location),
            s(:ivar, :@text))))),
    s(:def, :normalize,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@text), nil,
          s(:return,
            s(:self))),
        s(:if,
          s(:ivar, :@normalized),
          s(:return,
            s(:self)), nil),
        s(:ivasgn, :@text,
          s(:send, nil, :normalize_comment,
            s(:ivar, :@text))),
        s(:ivasgn, :@normalized,
          s(:true)),
        s(:self))),
    s(:def, :normalized?,
      s(:args),
      s(:ivar, :@normalized)),
    s(:def, :parse,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@document),
          s(:return,
            s(:ivar, :@document)), nil),
        s(:ivasgn, :@document,
          s(:super,
            s(:ivar, :@text),
            s(:ivar, :@format))),
        s(:send,
          s(:ivar, :@document), :file=,
          s(:ivar, :@location)),
        s(:ivar, :@document))),
    s(:def, :remove_private,
      s(:args),
      s(:begin,
        s(:lvasgn, :empty,
          s(:str, "")),
        s(:if,
          s(:send,
            s(:const, nil, :Object), :const_defined?,
            s(:sym, :Encoding)),
          s(:send,
            s(:lvar, :empty), :force_encoding,
            s(:send,
              s(:ivar, :@text), :encoding)), nil),
        s(:ivasgn, :@text,
          s(:send,
            s(:ivar, :@text), :gsub,
            s(:regexp,
              s(:str, "^\\s*([#*]?)--.*?^\\s*(\\1)\\+\\+\\n?"),
              s(:regopt, :m)),
            s(:lvar, :empty))),
        s(:ivasgn, :@text,
          s(:send,
            s(:ivar, :@text), :sub,
            s(:regexp,
              s(:str, "^\\s*[#*]?--.*"),
              s(:regopt, :m)),
            s(:str, ""))))),
    s(:def, :text=,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:if,
          s(:and,
            s(:send,
              s(:ivar, :@text), :nil?),
            s(:ivar, :@document)),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :RDoc), :Error),
            s(:str, "replacing document-only comment is not allowed")), nil),
        s(:ivasgn, :@document,
          s(:nil)),
        s(:ivasgn, :@text,
          s(:lvar, :text)))),
    s(:def, :tomdoc?,
      s(:args),
      s(:send,
        s(:ivar, :@format), :==,
        s(:str, "tomdoc")))))
