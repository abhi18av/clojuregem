s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc")),
  s(:send, nil, :require,
    s(:str, "find")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "pathname")),
  s(:send, nil, :require,
    s(:str, "time")),
  s(:class,
    s(:const,
      s(:const, nil, :RDoc), :RDoc), nil,
    s(:begin,
      s(:ivasgn, :@current,
        s(:nil)),
      s(:casgn, nil, :GENERATORS,
        s(:hash)),
      s(:send, nil, :attr_accessor,
        s(:sym, :exclude)),
      s(:send, nil, :attr_accessor,
        s(:sym, :generator)),
      s(:send, nil, :attr_reader,
        s(:sym, :last_modified)),
      s(:send, nil, :attr_accessor,
        s(:sym, :options)),
      s(:send, nil, :attr_reader,
        s(:sym, :stats)),
      s(:send, nil, :attr_reader,
        s(:sym, :store)),
      s(:defs,
        s(:self), :add_generator,
        s(:args,
          s(:arg, :klass)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :name), :sub,
                s(:regexp,
                  s(:str, "^RDoc::Generator::"),
                  s(:regopt)),
                s(:str, "")), :downcase)),
          s(:send,
            s(:const, nil, :GENERATORS), :[]=,
            s(:lvar, :name),
            s(:lvar, :klass)))),
      s(:defs,
        s(:self), :current,
        s(:args),
        s(:ivar, :@current)),
      s(:defs,
        s(:self), :current=,
        s(:args,
          s(:arg, :rdoc)),
        s(:ivasgn, :@current,
          s(:lvar, :rdoc))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@current,
            s(:nil)),
          s(:ivasgn, :@exclude,
            s(:nil)),
          s(:ivasgn, :@generator,
            s(:nil)),
          s(:ivasgn, :@last_modified,
            s(:hash)),
          s(:ivasgn, :@old_siginfo,
            s(:nil)),
          s(:ivasgn, :@options,
            s(:nil)),
          s(:ivasgn, :@stats,
            s(:nil)),
          s(:ivasgn, :@store,
            s(:nil)))),
      s(:def, :error,
        s(:args,
          s(:arg, :msg)),
        s(:send, nil, :raise,
          s(:const,
            s(:const, nil, :RDoc), :Error),
          s(:lvar, :msg))),
      s(:def, :gather_files,
        s(:args,
          s(:arg, :files)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :files), :empty?),
            s(:lvasgn, :files,
              s(:array,
                s(:str, "."))), nil),
          s(:lvasgn, :file_list,
            s(:send, nil, :normalized_file_list,
              s(:lvar, :files),
              s(:true),
              s(:ivar, :@exclude))),
          s(:lvasgn, :file_list,
            s(:send,
              s(:lvar, :file_list), :uniq)),
          s(:lvasgn, :file_list,
            s(:send, nil, :remove_unparseable,
              s(:lvar, :file_list))),
          s(:send,
            s(:lvar, :file_list), :sort))),
      s(:def, :handle_pipe,
        s(:args),
        s(:begin,
          s(:ivasgn, :@html,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToHtml), :new,
              s(:ivar, :@options))),
          s(:lvasgn, :parser,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Text), :MARKUP_FORMAT), :[],
              s(:send,
                s(:ivar, :@options), :markup))),
          s(:lvasgn, :document,
            s(:send,
              s(:lvar, :parser), :parse,
              s(:send,
                s(:gvar, :$stdin), :read))),
          s(:lvasgn, :out,
            s(:send,
              s(:ivar, :@html), :convert,
              s(:lvar, :document))),
          s(:send,
            s(:gvar, :$stdout), :write,
            s(:lvar, :out)))),
      s(:def, :install_siginfo_handler,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :include?,
              s(:str, "INFO")), nil,
            s(:return)),
          s(:ivasgn, :@old_siginfo,
            s(:block,
              s(:send, nil, :trap,
                s(:str, "INFO")),
              s(:args),
              s(:if,
                s(:ivar, :@current),
                s(:send, nil, :puts,
                  s(:ivar, :@current)), nil))))),
      s(:def, :load_options,
        s(:args),
        s(:begin,
          s(:lvasgn, :options_file,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, ".rdoc_options"))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :options_file)), nil,
            s(:return,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Options), :new))),
          s(:send,
            s(:const, nil, :RDoc), :load_yaml),
          s(:lvasgn, :parse_error,
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Psych)),
              s(:const,
                s(:const, nil, :Psych), :SyntaxError),
              s(:const, nil, :ArgumentError))),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :options,
                s(:send,
                  s(:const, nil, :YAML), :load_file,
                  s(:str, ".rdoc_options"))),
              s(:resbody,
                s(:array,
                  s(:splat,
                    s(:lvar, :parse_error))), nil, nil), nil)),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :===,
              s(:lvar, :options)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :RDoc), :Error),
              s(:dstr,
                s(:begin,
                  s(:lvar, :options_file)),
                s(:str, " is not a valid rdoc options file")))),
          s(:lvar, :options))),
      s(:def, :setup_output_dir,
        s(:args,
          s(:arg, :dir),
          s(:arg, :force)),
        s(:begin,
          s(:lvasgn, :flag_file,
            s(:send, nil, :output_flag_file,
              s(:lvar, :dir))),
          s(:lvasgn, :last,
            s(:hash)),
          s(:if,
            s(:send,
              s(:ivar, :@options), :dry_run), nil,
            s(:if,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :dir)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :directory?,
                    s(:lvar, :dir)), nil,
                  s(:send, nil, :error,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :dir)),
                      s(:str, " exists and is not a directory")))),
                s(:if,
                  s(:send,
                    s(:ivar, :@options), :force_output), nil,
                  s(:kwbegin,
                    s(:rescue,
                      s(:block,
                        s(:send, nil, :open,
                          s(:lvar, :flag_file)),
                        s(:args,
                          s(:arg, :io)),
                        s(:if,
                          s(:lvar, :force), nil,
                          s(:begin,
                            s(:send,
                              s(:const, nil, :Time), :parse,
                              s(:send,
                                s(:lvar, :io), :gets)),
                            s(:block,
                              s(:send,
                                s(:lvar, :io), :each),
                              s(:args,
                                s(:arg, :line)),
                              s(:begin,
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :file),
                                    s(:lvasgn, :time)),
                                  s(:send,
                                    s(:lvar, :line), :split,
                                    s(:str, "\t"),
                                    s(:int, 2))),
                                s(:lvasgn, :time,
                                  s(:rescue,
                                    s(:send,
                                      s(:const, nil, :Time), :parse,
                                      s(:lvar, :time)),
                                    s(:resbody, nil, nil,
                                      s(:next)), nil)),
                                s(:send,
                                  s(:lvar, :last), :[]=,
                                  s(:lvar, :file),
                                  s(:lvar, :time))))))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :SystemCallError),
                          s(:const, nil, :TypeError)), nil,
                        s(:send, nil, :error,
                          s(:dstr,
                            s(:str, "\n"),
                            s(:str, "Directory "),
                            s(:begin,
                              s(:lvar, :dir)),
                            s(:str, " already exists, but it looks like it isn't an RDoc directory.\n"),
                            s(:str, "\n"),
                            s(:str, "Because RDoc doesn't want to risk destroying any of your existing files,\n"),
                            s(:str, "you'll need to specify a different output directory name (using the --op <dir>\n"),
                            s(:str, "option)\n"),
                            s(:str, "\n")))), nil)))),
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :mkdir_p,
                  s(:lvar, :dir)),
                s(:send,
                  s(:const, nil, :FileUtils), :touch,
                  s(:lvar, :flag_file))))),
          s(:lvar, :last))),
      s(:def, :store=,
        s(:args,
          s(:arg, :store)),
        s(:begin,
          s(:ivasgn, :@store,
            s(:lvar, :store)),
          s(:send,
            s(:ivar, :@store), :rdoc=,
            s(:self)))),
      s(:def, :update_output_dir,
        s(:args,
          s(:arg, :op_dir),
          s(:arg, :time),
          s(:optarg, :last,
            s(:hash))),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:ivar, :@options), :dry_run),
              s(:send,
                s(:send,
                  s(:ivar, :@options), :update_output_dir), :!)),
            s(:return), nil),
          s(:block,
            s(:send, nil, :open,
              s(:send, nil, :output_flag_file,
                s(:lvar, :op_dir)),
              s(:str, "w")),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :puts,
                s(:send,
                  s(:lvar, :time), :rfc2822)),
              s(:block,
                s(:send,
                  s(:lvar, :last), :each),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :t)),
                s(:send,
                  s(:lvar, :f), :puts,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :n)),
                    s(:str, "\t"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :t), :rfc2822))))))))),
      s(:def, :output_flag_file,
        s(:args,
          s(:arg, :op_dir)),
        s(:send,
          s(:const, nil, :File), :join,
          s(:lvar, :op_dir),
          s(:str, "created.rid"))),
      s(:def, :parse_dot_doc_file,
        s(:args,
          s(:arg, :in_dir),
          s(:arg, :filename)),
        s(:begin,
          s(:lvasgn, :patterns,
            s(:send,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :filename)), :gsub,
              s(:regexp,
                s(:str, "#.*"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :result,
            s(:array)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :patterns), :split), :each),
            s(:args,
              s(:arg, :patt)),
            s(:begin,
              s(:lvasgn, :candidates,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :in_dir),
                    s(:lvar, :patt)))),
              s(:send,
                s(:lvar, :result), :concat,
                s(:send, nil, :normalized_file_list,
                  s(:lvar, :candidates))))),
          s(:lvar, :result))),
      s(:def, :normalized_file_list,
        s(:args,
          s(:arg, :relative_files),
          s(:optarg, :force_doc,
            s(:false)),
          s(:optarg, :exclude_pattern,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :file_list,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :relative_files), :each),
            s(:args,
              s(:arg, :rel_file_name)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :rel_file_name), :end_with?,
                  s(:str, "created.rid")),
                s(:next), nil),
              s(:if,
                s(:and,
                  s(:lvar, :exclude_pattern),
                  s(:send,
                    s(:lvar, :exclude_pattern), :=~,
                    s(:lvar, :rel_file_name))),
                s(:next), nil),
              s(:rescue,
                s(:lvasgn, :stat,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :rel_file_name))),
                s(:resbody, nil, nil,
                  s(:next)), nil),
              s(:case,
                s(:lvasgn, :type,
                  s(:send,
                    s(:lvar, :stat), :ftype)),
                s(:when,
                  s(:str, "file"),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:lvasgn, :last_modified,
                          s(:send,
                            s(:ivar, :@last_modified), :[],
                            s(:lvar, :rel_file_name))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :stat), :mtime), :to_i), :<=,
                          s(:send,
                            s(:lvar, :last_modified), :to_i))),
                      s(:next), nil),
                    s(:if,
                      s(:or,
                        s(:lvar, :force_doc),
                        s(:send,
                          s(:const,
                            s(:const, nil, :RDoc), :Parser), :can_parse,
                          s(:lvar, :rel_file_name))),
                      s(:begin,
                        s(:send,
                          s(:lvar, :file_list), :<<,
                          s(:send,
                            s(:lvar, :rel_file_name), :sub,
                            s(:regexp,
                              s(:str, "^\\./"),
                              s(:regopt)),
                            s(:str, ""))),
                        s(:send,
                          s(:ivar, :@last_modified), :[]=,
                          s(:lvar, :rel_file_name),
                          s(:send,
                            s(:lvar, :stat), :mtime))), nil))),
                s(:when,
                  s(:str, "directory"),
                  s(:begin,
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:lvar, :rel_file_name), :==,
                          s(:str, "CVS")),
                        s(:send,
                          s(:lvar, :rel_file_name), :==,
                          s(:str, ".svn"))),
                      s(:next), nil),
                    s(:lvasgn, :created_rid,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :rel_file_name),
                        s(:str, "created.rid"))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :file?,
                        s(:lvar, :created_rid)),
                      s(:next), nil),
                    s(:lvasgn, :dot_doc,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :rel_file_name),
                        s(:const,
                          s(:const, nil, :RDoc), :DOT_DOC_FILENAME))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :file?,
                        s(:lvar, :dot_doc)),
                      s(:send,
                        s(:lvar, :file_list), :<<,
                        s(:send, nil, :parse_dot_doc_file,
                          s(:lvar, :rel_file_name),
                          s(:lvar, :dot_doc))),
                      s(:send,
                        s(:lvar, :file_list), :<<,
                        s(:send, nil, :list_files_in_directory,
                          s(:lvar, :rel_file_name)))))),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "rdoc can't parse the "),
                    s(:begin,
                      s(:lvar, :type)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :rel_file_name))))))),
          s(:send,
            s(:lvar, :file_list), :flatten))),
      s(:def, :list_files_in_directory,
        s(:args,
          s(:arg, :dir)),
        s(:begin,
          s(:lvasgn, :files,
            s(:send,
              s(:const, nil, :Dir), :glob,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dir),
                s(:str, "*")))),
          s(:send, nil, :normalized_file_list,
            s(:lvar, :files),
            s(:false),
            s(:send,
              s(:ivar, :@options), :exclude)))),
      s(:def, :parse_file,
        s(:args,
          s(:arg, :filename)),
        s(:rescue,
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Encoding)),
              s(:begin,
                s(:lvasgn, :encoding,
                  s(:send,
                    s(:ivar, :@options), :encoding)),
                s(:lvasgn, :filename,
                  s(:send,
                    s(:lvar, :filename), :encode,
                    s(:lvar, :encoding)))), nil),
            s(:send,
              s(:ivar, :@stats), :add_file,
              s(:lvar, :filename)),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Parser), :binary?,
                s(:lvar, :filename)),
              s(:return), nil),
            s(:lvasgn, :content,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Encoding), :read_file,
                s(:lvar, :filename),
                s(:lvar, :encoding))),
            s(:if,
              s(:lvar, :content), nil,
              s(:return)),
            s(:lvasgn, :filename_path,
              s(:send,
                s(:send, nil, :Pathname,
                  s(:lvar, :filename)), :expand_path)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :relative_path,
                  s(:send,
                    s(:lvar, :filename_path), :relative_path_from,
                    s(:send,
                      s(:ivar, :@options), :root))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :ArgumentError)), nil,
                  s(:lvasgn, :relative_path,
                    s(:lvar, :filename_path))), nil)),
            s(:if,
              s(:and,
                s(:send,
                  s(:ivar, :@options), :page_dir),
                s(:send,
                  s(:send,
                    s(:lvar, :relative_path), :to_s), :start_with?,
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :page_dir), :to_s))),
              s(:lvasgn, :relative_path,
                s(:send,
                  s(:lvar, :relative_path), :relative_path_from,
                  s(:send,
                    s(:ivar, :@options), :page_dir))), nil),
            s(:lvasgn, :top_level,
              s(:send,
                s(:ivar, :@store), :add_file,
                s(:lvar, :filename),
                s(:send,
                  s(:lvar, :relative_path), :to_s))),
            s(:lvasgn, :parser,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Parser), :for,
                s(:lvar, :top_level),
                s(:lvar, :filename),
                s(:lvar, :content),
                s(:ivar, :@options),
                s(:ivar, :@stats))),
            s(:if,
              s(:lvar, :parser), nil,
              s(:return)),
            s(:send,
              s(:lvar, :parser), :scan),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :top_level), :classes_or_modules), :each),
              s(:args,
                s(:arg, :cm)),
              s(:send,
                s(:lvar, :cm), :done_documenting=,
                s(:false))),
            s(:lvar, :top_level)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :EACCES)),
            s(:lvasgn, :e),
            s(:send,
              s(:gvar, :$stderr), :puts,
              s(:dstr,
                s(:str, "Unable to read "),
                s(:begin,
                  s(:lvar, :filename)),
                s(:str, ", "),
                s(:begin,
                  s(:send,
                    s(:lvar, :e), :message)),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "Please check the permissions for this file.  Perhaps you do not have access to\n"),
                s(:str, "it or perhaps the original author's permissions are to restrictive.  If the\n"),
                s(:str, "this is not your library please report a bug to the author.\n")))),
          s(:resbody, nil,
            s(:lvasgn, :e),
            s(:begin,
              s(:send,
                s(:gvar, :$stderr), :puts,
                s(:dstr,
                  s(:str, "Before reporting this, could you check that the file you're documenting\n"),
                  s(:str, "has proper syntax:\n"),
                  s(:str, "\n"),
                  s(:str, "  "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Gem), :ruby)),
                  s(:str, " -c "),
                  s(:begin,
                    s(:lvar, :filename)),
                  s(:str, "\n"),
                  s(:str, "\n"),
                  s(:str, "RDoc is not a full Ruby parser and will fail when fed invalid ruby programs.\n"),
                  s(:str, "\n"),
                  s(:str, "The internal error was:\n"),
                  s(:str, "\n"),
                  s(:str, "\t("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :class)),
                  s(:str, ") "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :e), :message)),
                  s(:str, "\n"),
                  s(:str, "\n"))),
              s(:if,
                s(:gvar, :$DEBUG_RDOC),
                s(:send,
                  s(:gvar, :$stderr), :puts,
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :backtrace), :join,
                    s(:str, "\n\t"))), nil),
              s(:send, nil, :raise,
                s(:lvar, :e)),
              s(:nil))), nil)),
      s(:def, :parse_files,
        s(:args,
          s(:arg, :files)),
        s(:begin,
          s(:lvasgn, :file_list,
            s(:send, nil, :gather_files,
              s(:lvar, :files))),
          s(:ivasgn, :@stats,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Stats), :new,
              s(:ivar, :@store),
              s(:send,
                s(:lvar, :file_list), :length),
              s(:send,
                s(:ivar, :@options), :verbosity))),
          s(:if,
            s(:send,
              s(:lvar, :file_list), :empty?),
            s(:return,
              s(:array)), nil),
          s(:send,
            s(:ivar, :@stats), :begin_adding),
          s(:lvasgn, :file_info,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :file_list), :map),
                s(:args,
                  s(:arg, :filename)),
                s(:begin,
                  s(:ivasgn, :@current,
                    s(:lvar, :filename)),
                  s(:send, nil, :parse_file,
                    s(:lvar, :filename)))), :compact)),
          s(:send,
            s(:ivar, :@stats), :done_adding),
          s(:lvar, :file_info))),
      s(:def, :remove_unparseable,
        s(:args,
          s(:arg, :files)),
        s(:block,
          s(:send,
            s(:lvar, :files), :reject),
          s(:args,
            s(:arg, :file)),
          s(:or,
            s(:send,
              s(:lvar, :file), :=~,
              s(:regexp,
                s(:str, "\\.(?:class|eps|erb|scpt\\.txt|ttf|yml)$"),
                s(:regopt, :i))),
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :file), :=~,
                  s(:regexp,
                    s(:str, "tags$"),
                    s(:regopt, :i))),
                s(:block,
                  s(:send, nil, :open,
                    s(:lvar, :file),
                    s(:str, "rb")),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:send,
                      s(:lvar, :io), :read,
                      s(:int, 100)), :=~,
                    s(:regexp,
                      s(:str, "\\A(\\f\\n[^,]+,\\d+$|!_TAG_)"),
                      s(:regopt))))))))),
      s(:def, :document,
        s(:args,
          s(:arg, :options)),
        s(:begin,
          s(:send,
            s(:self), :store=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :===,
              s(:lvar, :options)),
            s(:begin,
              s(:ivasgn, :@options,
                s(:lvar, :options)),
              s(:send,
                s(:ivar, :@options), :finish)),
            s(:begin,
              s(:ivasgn, :@options,
                s(:send, nil, :load_options)),
              s(:send,
                s(:ivar, :@options), :parse,
                s(:lvar, :options)))),
          s(:if,
            s(:send,
              s(:ivar, :@options), :pipe),
            s(:begin,
              s(:send, nil, :handle_pipe),
              s(:send, nil, :exit)), nil),
          s(:ivasgn, :@exclude,
            s(:send,
              s(:ivar, :@options), :exclude)),
          s(:if,
            s(:send,
              s(:ivar, :@options), :coverage_report), nil,
            s(:ivasgn, :@last_modified,
              s(:send, nil, :setup_output_dir,
                s(:send,
                  s(:ivar, :@options), :op_dir),
                s(:send,
                  s(:ivar, :@options), :force_update)))),
          s(:if,
            s(:send,
              s(:ivar, :@options), :respond_to?,
              s(:sym, :encoding)),
            s(:send,
              s(:ivar, :@store), :encoding=,
              s(:send,
                s(:ivar, :@options), :encoding)), nil),
          s(:send,
            s(:ivar, :@store), :dry_run=,
            s(:send,
              s(:ivar, :@options), :dry_run)),
          s(:send,
            s(:ivar, :@store), :main=,
            s(:send,
              s(:ivar, :@options), :main_page)),
          s(:send,
            s(:ivar, :@store), :title=,
            s(:send,
              s(:ivar, :@options), :title)),
          s(:send,
            s(:ivar, :@store), :path=,
            s(:send,
              s(:ivar, :@options), :op_dir)),
          s(:ivasgn, :@start_time,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:send,
            s(:ivar, :@store), :load_cache),
          s(:lvasgn, :file_info,
            s(:send, nil, :parse_files,
              s(:send,
                s(:ivar, :@options), :files))),
          s(:send,
            s(:ivar, :@options), :default_title=,
            s(:str, "RDoc Documentation")),
          s(:send,
            s(:ivar, :@store), :complete,
            s(:send,
              s(:ivar, :@options), :visibility)),
          s(:send,
            s(:ivar, :@stats), :coverage_level=,
            s(:send,
              s(:ivar, :@options), :coverage_report)),
          s(:if,
            s(:send,
              s(:ivar, :@options), :coverage_report),
            s(:begin,
              s(:send, nil, :puts),
              s(:send, nil, :puts,
                s(:send,
                  s(:send,
                    s(:ivar, :@stats), :report), :accept,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :ToRdoc), :new)))),
            s(:if,
              s(:send,
                s(:lvar, :file_info), :empty?),
              s(:if,
                s(:send,
                  s(:ivar, :@options), :quiet), nil,
                s(:send,
                  s(:gvar, :$stderr), :puts,
                  s(:str, "\nNo newer files."))),
              s(:begin,
                s(:lvasgn, :gen_klass,
                  s(:send,
                    s(:ivar, :@options), :generator)),
                s(:ivasgn, :@generator,
                  s(:send,
                    s(:lvar, :gen_klass), :new,
                    s(:ivar, :@store),
                    s(:ivar, :@options))),
                s(:send, nil, :generate)))),
          s(:if,
            s(:and,
              s(:ivar, :@stats),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:ivar, :@options), :coverage_report),
                  s(:send,
                    s(:send,
                      s(:ivar, :@options), :quiet), :!)))),
            s(:begin,
              s(:send, nil, :puts),
              s(:send, nil, :puts,
                s(:send,
                  s(:send,
                    s(:ivar, :@stats), :summary), :accept,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :ToRdoc), :new)))), nil),
          s(:if,
            s(:send,
              s(:ivar, :@options), :coverage_report),
            s(:send, nil, :exit,
              s(:send,
                s(:ivar, :@stats), :fully_documented?)), nil))),
      s(:def, :generate,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:send,
              s(:ivar, :@options), :op_dir)),
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@options), :quiet), nil,
              s(:send,
                s(:gvar, :$stderr), :puts,
                s(:dstr,
                  s(:str, "\nGenerating "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@generator), :class), :name), :sub,
                      s(:regexp,
                        s(:str, "^.*::"),
                        s(:regopt)),
                      s(:str, ""))),
                  s(:str, " format into "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Dir), :pwd)),
                  s(:str, "...")))),
            s(:send,
              s(:ivar, :@generator), :generate),
            s(:send, nil, :update_output_dir,
              s(:str, "."),
              s(:ivar, :@start_time),
              s(:ivar, :@last_modified))))),
      s(:def, :remove_siginfo_handler,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Signal), :list), :key?,
              s(:str, "INFO")), nil,
            s(:return)),
          s(:lvasgn, :handler,
            s(:or,
              s(:ivar, :@old_siginfo),
              s(:str, "DEFAULT"))),
          s(:send, nil, :trap,
            s(:str, "INFO"),
            s(:lvar, :handler)))))),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :require,
          s(:str, "rubygems")),
        s(:if,
          s(:send,
            s(:const, nil, :Gem), :respond_to?,
            s(:sym, :find_files)),
          s(:begin,
            s(:lvasgn, :rdoc_extensions,
              s(:send,
                s(:const, nil, :Gem), :find_files,
                s(:str, "rdoc/discover"))),
            s(:block,
              s(:send,
                s(:lvar, :rdoc_extensions), :each),
              s(:args,
                s(:arg, :extension)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :load,
                    s(:lvar, :extension)),
                  s(:resbody, nil,
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:send, nil, :warn,
                        s(:dstr,
                          s(:str, "error loading "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :extension), :inspect)),
                          s(:str, ": "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :message)),
                          s(:str, " ("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :class)),
                          s(:str, ")"))),
                      s(:if,
                        s(:gvar, :$DEBUG),
                        s(:send, nil, :warn,
                          s(:dstr,
                            s(:str, "\t"),
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :e), :backtrace), :join,
                                s(:str, "\n\t"))))), nil))), nil)))), nil)),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "rdoc/generator/darkfish")),
  s(:send, nil, :require,
    s(:str, "rdoc/generator/ri")),
  s(:send, nil, :require,
    s(:str, "rdoc/generator/pot")))
