s(:class,
  s(:const,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Generator), :POT), :POEntry), nil,
  s(:begin,
    s(:send, nil, :attr_reader,
      s(:sym, :msgid)),
    s(:send, nil, :attr_reader,
      s(:sym, :msgstr)),
    s(:send, nil, :attr_reader,
      s(:sym, :translator_comment)),
    s(:send, nil, :attr_reader,
      s(:sym, :extracted_comment)),
    s(:send, nil, :attr_reader,
      s(:sym, :references)),
    s(:send, nil, :attr_reader,
      s(:sym, :flags)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :msgid),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:ivasgn, :@msgid,
          s(:lvar, :msgid)),
        s(:ivasgn, :@msgstr,
          s(:or,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :msgstr)),
            s(:str, ""))),
        s(:ivasgn, :@translator_comment,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :translator_comment))),
        s(:ivasgn, :@extracted_comment,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :extracted_comment))),
        s(:ivasgn, :@references,
          s(:or,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :references)),
            s(:array))),
        s(:ivasgn, :@flags,
          s(:or,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :flags)),
            s(:array))))),
    s(:def, :to_s,
      s(:args),
      s(:begin,
        s(:lvasgn, :entry,
          s(:str, "")),
        s(:send,
          s(:lvar, :entry), :<<,
          s(:send, nil, :format_translator_comment)),
        s(:send,
          s(:lvar, :entry), :<<,
          s(:send, nil, :format_extracted_comment)),
        s(:send,
          s(:lvar, :entry), :<<,
          s(:send, nil, :format_references)),
        s(:send,
          s(:lvar, :entry), :<<,
          s(:send, nil, :format_flags)),
        s(:send,
          s(:lvar, :entry), :<<,
          s(:dstr,
            s(:str, "msgid "),
            s(:begin,
              s(:send, nil, :format_message,
                s(:ivar, :@msgid))),
            s(:str, "\n"),
            s(:str, "msgstr "),
            s(:begin,
              s(:send, nil, :format_message,
                s(:ivar, :@msgstr))),
            s(:str, "\n"))))),
    s(:def, :merge,
      s(:args,
        s(:arg, :other_entry)),
      s(:begin,
        s(:lvasgn, :options,
          s(:hash,
            s(:pair,
              s(:sym, :extracted_comment),
              s(:send, nil, :merge_string,
                s(:ivar, :@extracted_comment),
                s(:send,
                  s(:lvar, :other_entry), :extracted_comment))),
            s(:pair,
              s(:sym, :translator_comment),
              s(:send, nil, :merge_string,
                s(:ivar, :@translator_comment),
                s(:send,
                  s(:lvar, :other_entry), :translator_comment))),
            s(:pair,
              s(:sym, :references),
              s(:send, nil, :merge_array,
                s(:ivar, :@references),
                s(:send,
                  s(:lvar, :other_entry), :references))),
            s(:pair,
              s(:sym, :flags),
              s(:send, nil, :merge_array,
                s(:ivar, :@flags),
                s(:send,
                  s(:lvar, :other_entry), :flags))))),
        s(:send,
          s(:send,
            s(:self), :class), :new,
          s(:ivar, :@msgid),
          s(:lvar, :options)))),
    s(:send, nil, :private),
    s(:def, :format_comment,
      s(:args,
        s(:arg, :mark),
        s(:arg, :comment)),
      s(:begin,
        s(:if,
          s(:lvar, :comment), nil,
          s(:return,
            s(:str, ""))),
        s(:if,
          s(:send,
            s(:lvar, :comment), :empty?),
          s(:return,
            s(:str, "")), nil),
        s(:lvasgn, :formatted_comment,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:lvar, :comment), :each_line),
          s(:args,
            s(:arg, :line)),
          s(:send,
            s(:lvar, :formatted_comment), :<<,
            s(:dstr,
              s(:begin,
                s(:lvar, :mark)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :line))))),
        s(:if,
          s(:send,
            s(:lvar, :formatted_comment), :end_with?,
            s(:str, "\n")), nil,
          s(:send,
            s(:lvar, :formatted_comment), :<<,
            s(:str, "\n"))),
        s(:lvar, :formatted_comment))),
    s(:def, :format_translator_comment,
      s(:args),
      s(:send, nil, :format_comment,
        s(:str, "#"),
        s(:ivar, :@translator_comment))),
    s(:def, :format_extracted_comment,
      s(:args),
      s(:send, nil, :format_comment,
        s(:str, "#."),
        s(:ivar, :@extracted_comment))),
    s(:def, :format_references,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@references), :empty?),
          s(:return,
            s(:str, "")), nil),
        s(:lvasgn, :formatted_references,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:send,
              s(:ivar, :@references), :sort), :each),
          s(:args,
            s(:arg, :file),
            s(:arg, :line)),
          s(:send,
            s(:lvar, :formatted_references), :<<,
            s(:dstr,
              s(:str, "#: "),
              s(:begin,
                s(:lvar, :file)),
              s(:str, ":"),
              s(:begin,
                s(:lvar, :line)),
              s(:str, "\n")))),
        s(:lvar, :formatted_references))),
    s(:def, :format_flags,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@flags), :empty?),
          s(:return,
            s(:str, "")), nil),
        s(:lvasgn, :formatted_flags,
          s(:send,
            s(:send, nil, :flags), :join,
            s(:str, ","))),
        s(:dstr,
          s(:str, "#, "),
          s(:begin,
            s(:lvar, :formatted_flags)),
          s(:str, "\n")))),
    s(:def, :format_message,
      s(:args,
        s(:arg, :message)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :message), :include?,
            s(:str, "\n")), nil,
          s(:return,
            s(:dstr,
              s(:str, "\""),
              s(:begin,
                s(:send, nil, :escape,
                  s(:lvar, :message))),
              s(:str, "\"")))),
        s(:lvasgn, :formatted_message,
          s(:str, "\"\"")),
        s(:block,
          s(:send,
            s(:lvar, :message), :each_line),
          s(:args,
            s(:arg, :line)),
          s(:begin,
            s(:send,
              s(:lvar, :formatted_message), :<<,
              s(:str, "\n")),
            s(:send,
              s(:lvar, :formatted_message), :<<,
              s(:dstr,
                s(:str, "\""),
                s(:begin,
                  s(:send, nil, :escape,
                    s(:lvar, :line))),
                s(:str, "\""))))),
        s(:lvar, :formatted_message))),
    s(:def, :escape,
      s(:args,
        s(:arg, :string)),
      s(:block,
        s(:send,
          s(:lvar, :string), :gsub,
          s(:regexp,
            s(:str, "[\"\\\\\\t\\n]"),
            s(:regopt))),
        s(:args,
          s(:arg, :special_character)),
        s(:case,
          s(:lvar, :special_character),
          s(:when,
            s(:str, "\t"),
            s(:str, "\\t")),
          s(:when,
            s(:str, "\n"),
            s(:str, "\\n")),
          s(:dstr,
            s(:str, "\\"),
            s(:begin,
              s(:lvar, :special_character)))))),
    s(:def, :merge_string,
      s(:args,
        s(:arg, :string1),
        s(:arg, :string2)),
      s(:send,
        s(:send,
          s(:array,
            s(:lvar, :string1),
            s(:lvar, :string2)), :compact), :join,
        s(:str, "\n"))),
    s(:def, :merge_array,
      s(:args,
        s(:arg, :array1),
        s(:arg, :array2)),
      s(:send,
        s(:begin,
          s(:send,
            s(:lvar, :array1), :+,
            s(:lvar, :array2))), :uniq))))
