s(:begin,
  s(:send, nil, :require,
    s(:str, "time")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Parser), :ChangeLog),
    s(:const,
      s(:const, nil, :RDoc), :Parser),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :RDoc), :Parser), :Text)),
      s(:send, nil, :parse_files_matching,
        s(:regexp,
          s(:str, "(/|\\\\|\\A)ChangeLog[^/\\\\]*\\z"),
          s(:regopt))),
      s(:def, :continue_entry_body,
        s(:args,
          s(:arg, :entry_body),
          s(:arg, :continuation)),
        s(:begin,
          s(:if,
            s(:lvasgn, :last,
              s(:send,
                s(:lvar, :entry_body), :last)), nil,
            s(:return)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :last), :=~,
                s(:regexp,
                  s(:str, "\\)\\s*\\z"),
                  s(:regopt))),
              s(:send,
                s(:lvar, :continuation), :=~,
                s(:regexp,
                  s(:str, "\\A\\("),
                  s(:regopt)))),
            s(:begin,
              s(:send,
                s(:lvar, :last), :sub!,
                s(:regexp,
                  s(:str, "\\)\\s*\\z"),
                  s(:regopt)),
                s(:str, ",")),
              s(:send,
                s(:lvar, :continuation), :sub!,
                s(:regexp,
                  s(:str, "\\A\\("),
                  s(:regopt)),
                s(:str, ""))), nil),
          s(:if,
            s(:send,
              s(:lvar, :last), :=~,
              s(:regexp,
                s(:str, "\\s\\z"),
                s(:regopt))),
            s(:send,
              s(:lvar, :last), :<<,
              s(:lvar, :continuation)),
            s(:send,
              s(:send,
                s(:lvar, :last), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :continuation))))),
      s(:def, :create_document,
        s(:args,
          s(:arg, :groups)),
        s(:begin,
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send,
            s(:lvar, :doc), :omit_headings_below=,
            s(:int, 2)),
          s(:send,
            s(:lvar, :doc), :file=,
            s(:ivar, :@top_level)),
          s(:send,
            s(:lvar, :doc), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:send,
                s(:const, nil, :File), :basename,
                s(:ivar, :@file_name)))),
          s(:send,
            s(:lvar, :doc), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :groups), :sort_by),
                s(:args,
                  s(:arg, :day)),
                s(:lvar, :day)), :reverse_each),
            s(:args,
              s(:arg, :day),
              s(:arg, :entries)),
            s(:begin,
              s(:send,
                s(:lvar, :doc), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :new,
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :day), :dup))),
              s(:send,
                s(:lvar, :doc), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
              s(:send,
                s(:lvar, :doc), :concat,
                s(:send, nil, :create_entries,
                  s(:lvar, :entries))))),
          s(:lvar, :doc))),
      s(:def, :create_entries,
        s(:args,
          s(:arg, :entries)),
        s(:begin,
          s(:lvasgn, :out,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :entries), :each),
            s(:args,
              s(:arg, :entry),
              s(:arg, :items)),
            s(:begin,
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :new,
                  s(:int, 3),
                  s(:lvar, :entry))),
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
              s(:send,
                s(:lvar, :out), :<<,
                s(:send, nil, :create_items,
                  s(:lvar, :items))))),
          s(:lvar, :out))),
      s(:def, :create_items,
        s(:args,
          s(:arg, :items)),
        s(:begin,
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :List), :new,
              s(:sym, :NOTE))),
          s(:block,
            s(:send,
              s(:lvar, :items), :each),
            s(:args,
              s(:arg, :item)),
            s(:begin,
              s(:send,
                s(:lvar, :item), :=~,
                s(:regexp,
                  s(:str, "\\A(.*?(?:\\([^)]+\\))?):\\s*"),
                  s(:regopt))),
              s(:lvasgn, :title,
                s(:nth_ref, 1)),
              s(:lvasgn, :body,
                s(:back_ref, :$')),
              s(:lvasgn, :paragraph,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                  s(:lvar, :body))),
              s(:lvasgn, :list_item,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                  s(:lvar, :title),
                  s(:lvar, :paragraph))),
              s(:send,
                s(:lvar, :list), :<<,
                s(:lvar, :list_item)))),
          s(:lvar, :list))),
      s(:def, :group_entries,
        s(:args,
          s(:arg, :entries)),
        s(:block,
          s(:send,
            s(:lvar, :entries), :group_by),
          s(:args,
            s(:arg, :title),
            s(:arg, :_)),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :parse,
                  s(:lvar, :title)), :strftime,
                s(:str, "%Y-%m-%d")),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NoMethodError),
                  s(:const, nil, :ArgumentError)), nil,
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :time)),
                    s(:send,
                      s(:lvar, :title), :split,
                      s(:str, "  "),
                      s(:int, 2))),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Time), :parse,
                      s(:lvar, :time)), :strftime,
                    s(:str, "%Y-%m-%d")))), nil)))),
      s(:def, :parse_entries,
        s(:args),
        s(:begin,
          s(:lvasgn, :entries,
            s(:array)),
          s(:lvasgn, :entry_name,
            s(:nil)),
          s(:lvasgn, :entry_body,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@content), :each_line),
            s(:args,
              s(:arg, :line)),
            s(:case,
              s(:lvar, :line),
              s(:when,
                s(:regexp,
                  s(:str, "^\\s*$"),
                  s(:regopt)),
                s(:next)),
              s(:when,
                s(:regexp,
                  s(:str, "^\\w.*"),
                  s(:regopt)),
                s(:begin,
                  s(:if,
                    s(:lvar, :entry_name),
                    s(:send,
                      s(:lvar, :entries), :<<,
                      s(:array,
                        s(:lvar, :entry_name),
                        s(:lvar, :entry_body))), nil),
                  s(:lvasgn, :entry_name,
                    s(:back_ref, :$&)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :time,
                          s(:send,
                            s(:const, nil, :Time), :parse,
                            s(:lvar, :entry_name))),
                        s(:if,
                          s(:send,
                            s(:lvar, :entry_name), :=~,
                            s(:regexp,
                              s(:begin,
                                s(:send,
                                  s(:lvar, :time), :year)),
                              s(:regopt))), nil,
                          s(:lvasgn, :entry_name,
                            s(:nil)))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NoMethodError)), nil,
                        s(:send,
                          s(:lvar, :entry_name), :split,
                          s(:str, "  "),
                          s(:int, 2))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ArgumentError)), nil,
                        s(:if,
                          s(:match_with_lvasgn,
                            s(:regexp,
                              s(:str, "out of range"),
                              s(:regopt)),
                            s(:send,
                              s(:gvar, :$!), :message)),
                          s(:rescue,
                            s(:send,
                              s(:const, nil, :Time), :parse,
                              s(:send,
                                s(:send,
                                  s(:lvar, :entry_name), :split,
                                  s(:str, "  "),
                                  s(:int, 2)), :[],
                                s(:int, 0))),
                            s(:resbody, nil, nil,
                              s(:lvasgn, :entry_name,
                                s(:nil))), nil),
                          s(:lvasgn, :entry_name,
                            s(:nil)))), nil)),
                  s(:lvasgn, :entry_body,
                    s(:array)))),
              s(:when,
                s(:regexp,
                  s(:str, "^(\\t| {8})?\\*\\s*(.*)"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :entry_body), :<<,
                  s(:nth_ref, 2))),
              s(:when,
                s(:regexp,
                  s(:str, "^(\\t| {8})?\\s*(\\(.*)"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :entry,
                    s(:nth_ref, 2)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :entry_body), :last), :=~,
                      s(:regexp,
                        s(:str, ":"),
                        s(:regopt))),
                    s(:send,
                      s(:lvar, :entry_body), :<<,
                      s(:lvar, :entry)),
                    s(:send, nil, :continue_entry_body,
                      s(:lvar, :entry_body),
                      s(:lvar, :entry))))),
              s(:when,
                s(:regexp,
                  s(:str, "^(\\t| {8})?\\s*(.*)"),
                  s(:regopt)),
                s(:send, nil, :continue_entry_body,
                  s(:lvar, :entry_body),
                  s(:nth_ref, 2))), nil)),
          s(:if,
            s(:lvar, :entry_name),
            s(:send,
              s(:lvar, :entries), :<<,
              s(:array,
                s(:lvar, :entry_name),
                s(:lvar, :entry_body))), nil),
          s(:block,
            s(:send,
              s(:lvar, :entries), :reject!),
            s(:args,
              s(:mlhs,
                s(:arg, :entry),
                s(:arg, :_))),
            s(:send,
              s(:lvar, :entry), :==,
              s(:nil))),
          s(:lvar, :entries))),
      s(:def, :scan,
        s(:args),
        s(:begin,
          s(:lvasgn, :entries,
            s(:send, nil, :parse_entries)),
          s(:lvasgn, :grouped_entries,
            s(:send, nil, :group_entries,
              s(:lvar, :entries))),
          s(:lvasgn, :doc,
            s(:send, nil, :create_document,
              s(:lvar, :grouped_entries))),
          s(:send,
            s(:ivar, :@top_level), :comment=,
            s(:lvar, :doc)),
          s(:ivar, :@top_level))))))
