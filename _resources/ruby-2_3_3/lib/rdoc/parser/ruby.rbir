s(:begin,
  s(:or_asgn,
    s(:gvasgn, :$TOKEN_DEBUG),
    s(:nil)),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Parser), :Ruby),
    s(:const,
      s(:const, nil, :RDoc), :Parser),
    s(:begin,
      s(:send, nil, :parse_files_matching,
        s(:regexp,
          s(:str, "\\.rbw?$"),
          s(:regopt))),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :RDoc), :RubyToken)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :RDoc), :TokenStream)),
      s(:send, nil, :include,
        s(:const,
          s(:const,
            s(:const, nil, :RDoc), :Parser), :RubyTools)),
      s(:casgn, nil, :NORMAL,
        s(:str, "::")),
      s(:casgn, nil, :SINGLE,
        s(:str, "<<")),
      s(:def, :initialize,
        s(:args,
          s(:arg, :top_level),
          s(:arg, :file_name),
          s(:arg, :content),
          s(:arg, :options),
          s(:arg, :stats)),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@size,
            s(:int, 0)),
          s(:ivasgn, :@token_listeners,
            s(:nil)),
          s(:ivasgn, :@scanner,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RubyLex), :new,
              s(:lvar, :content),
              s(:ivar, :@options))),
          s(:send,
            s(:ivar, :@scanner), :exception_on_syntax_error=,
            s(:false)),
          s(:ivasgn, :@prev_seek,
            s(:nil)),
          s(:ivasgn, :@markup,
            s(:send,
              s(:ivar, :@options), :markup)),
          s(:ivasgn, :@track_visibility,
            s(:send,
              s(:sym, :nodoc), :!=,
              s(:send,
                s(:ivar, :@options), :visibility))),
          s(:ivasgn, :@encoding,
            s(:nil)),
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)),
            s(:ivasgn, :@encoding,
              s(:send,
                s(:ivar, :@options), :encoding)), nil),
          s(:send, nil, :reset))),
      s(:def, :get_tkread_clean,
        s(:args,
          s(:arg, :pattern),
          s(:arg, :replacement)),
        s(:begin,
          s(:lvasgn, :read,
            s(:send,
              s(:send,
                s(:send, nil, :get_tkread), :gsub,
                s(:lvar, :pattern),
                s(:lvar, :replacement)), :strip)),
          s(:if,
            s(:send,
              s(:lvar, :read), :==,
              s(:str, ";")),
            s(:return,
              s(:str, "")), nil),
          s(:lvar, :read))),
      s(:def, :get_visibility_information,
        s(:args,
          s(:arg, :tk),
          s(:arg, :single)),
        s(:begin,
          s(:lvasgn, :vis_type,
            s(:send,
              s(:lvar, :tk), :name)),
          s(:lvasgn, :singleton,
            s(:send,
              s(:lvar, :single), :==,
              s(:const, nil, :SINGLE))),
          s(:lvasgn, :vis,
            s(:case,
              s(:lvar, :vis_type),
              s(:when,
                s(:str, "private"),
                s(:sym, :private)),
              s(:when,
                s(:str, "protected"),
                s(:sym, :protected)),
              s(:when,
                s(:str, "public"),
                s(:sym, :public)),
              s(:when,
                s(:str, "private_class_method"),
                s(:begin,
                  s(:lvasgn, :singleton,
                    s(:true)),
                  s(:sym, :private))),
              s(:when,
                s(:str, "public_class_method"),
                s(:begin,
                  s(:lvasgn, :singleton,
                    s(:true)),
                  s(:sym, :public))),
              s(:when,
                s(:str, "module_function"),
                s(:begin,
                  s(:lvasgn, :singleton,
                    s(:true)),
                  s(:sym, :public))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :RDoc), :Error),
                s(:dstr,
                  s(:str, "Invalid visibility: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :tk), :name)))))),
          s(:return,
            s(:lvar, :vis_type),
            s(:lvar, :vis),
            s(:lvar, :singleton)))),
      s(:def, :collect_first_comment,
        s(:args),
        s(:begin,
          s(:send, nil, :skip_tkspace),
          s(:lvasgn, :comment,
            s(:str, "")),
          s(:if,
            s(:ivar, :@encoding),
            s(:send,
              s(:lvar, :comment), :force_encoding,
              s(:ivar, :@encoding)), nil),
          s(:lvasgn, :first_line,
            s(:true)),
          s(:lvasgn, :first_comment_tk_class,
            s(:nil)),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:while,
            s(:send,
              s(:const, nil, :TkCOMMENT), :===,
              s(:lvar, :tk)),
            s(:if,
              s(:and,
                s(:lvar, :first_line),
                s(:send,
                  s(:send,
                    s(:lvar, :tk), :text), :=~,
                  s(:regexp,
                    s(:str, "\\A#!"),
                    s(:regopt)))),
              s(:begin,
                s(:send, nil, :skip_tkspace),
                s(:lvasgn, :tk,
                  s(:send, nil, :get_tk))),
              s(:if,
                s(:and,
                  s(:lvar, :first_line),
                  s(:send,
                    s(:send,
                      s(:lvar, :tk), :text), :=~,
                    s(:regexp,
                      s(:str, "\\A#\\s*-\\*-"),
                      s(:regopt)))),
                s(:begin,
                  s(:lvasgn, :first_line,
                    s(:false)),
                  s(:send, nil, :skip_tkspace),
                  s(:lvasgn, :tk,
                    s(:send, nil, :get_tk))),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:lvar, :first_comment_tk_class),
                      s(:send,
                        s(:send,
                          s(:lvar, :first_comment_tk_class), :===,
                          s(:lvar, :tk)), :!)),
                    s(:break), nil),
                  s(:lvasgn, :first_comment_tk_class,
                    s(:send,
                      s(:lvar, :tk), :class)),
                  s(:lvasgn, :first_line,
                    s(:false)),
                  s(:send,
                    s(:send,
                      s(:lvar, :comment), :<<,
                      s(:send,
                        s(:lvar, :tk), :text)), :<<,
                    s(:str, "\n")),
                  s(:lvasgn, :tk,
                    s(:send, nil, :get_tk)),
                  s(:if,
                    s(:send,
                      s(:const, nil, :TkNL), :===,
                      s(:lvar, :tk)),
                    s(:begin,
                      s(:send, nil, :skip_tkspace,
                        s(:false)),
                      s(:lvasgn, :tk,
                        s(:send, nil, :get_tk))), nil))))),
          s(:send, nil, :unget_tk,
            s(:lvar, :tk)),
          s(:send, nil, :new_comment,
            s(:lvar, :comment)))),
      s(:def, :consume_trailing_spaces,
        s(:args),
        s(:begin,
          s(:send, nil, :get_tkread),
          s(:send, nil, :skip_tkspace,
            s(:false)))),
      s(:def, :create_attr,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :name),
          s(:arg, :rw),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :att,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Attr), :new,
              s(:send, nil, :get_tkread),
              s(:lvar, :name),
              s(:lvar, :rw),
              s(:lvar, :comment),
              s(:send,
                s(:lvar, :single), :==,
                s(:const, nil, :SINGLE)))),
          s(:send, nil, :record_location,
            s(:lvar, :att)),
          s(:send,
            s(:lvar, :container), :add_attribute,
            s(:lvar, :att)),
          s(:send,
            s(:ivar, :@stats), :add_attribute,
            s(:lvar, :att)),
          s(:lvar, :att))),
      s(:def, :create_module_alias,
        s(:args,
          s(:arg, :container),
          s(:arg, :constant),
          s(:arg, :rhs_name)),
        s(:begin,
          s(:lvasgn, :mod,
            s(:if,
              s(:send,
                s(:lvar, :rhs_name), :=~,
                s(:regexp,
                  s(:str, "^::"),
                  s(:regopt))),
              s(:send,
                s(:ivar, :@store), :find_class_or_module,
                s(:lvar, :rhs_name)),
              s(:send,
                s(:lvar, :container), :find_module_named,
                s(:lvar, :rhs_name)))),
          s(:if,
            s(:lvar, :mod),
            s(:send,
              s(:lvar, :container), :add_module_alias,
              s(:lvar, :mod),
              s(:send,
                s(:lvar, :constant), :name),
              s(:ivar, :@top_level)), nil))),
      s(:def, :error,
        s(:args,
          s(:arg, :msg)),
        s(:begin,
          s(:lvasgn, :msg,
            s(:send, nil, :make_message,
              s(:lvar, :msg))),
          s(:send, nil, :abort,
            s(:lvar, :msg)))),
      s(:def, :get_bool,
        s(:args),
        s(:begin,
          s(:send, nil, :skip_tkspace),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:case,
            s(:lvar, :tk),
            s(:when,
              s(:const, nil, :TkTRUE),
              s(:true)),
            s(:when,
              s(:const, nil, :TkFALSE),
              s(:const, nil, :TkNIL),
              s(:false)),
            s(:begin,
              s(:send, nil, :unget_tk,
                s(:lvar, :tk)),
              s(:true))))),
      s(:def, :get_class_or_module,
        s(:args,
          s(:arg, :container),
          s(:optarg, :ignore_constants,
            s(:false))),
        s(:begin,
          s(:send, nil, :skip_tkspace),
          s(:lvasgn, :name_t,
            s(:send, nil, :get_tk)),
          s(:lvasgn, :given_name,
            s(:str, "")),
          s(:case,
            s(:lvar, :name_t),
            s(:when,
              s(:const, nil, :TkCOLON2),
              s(:const, nil, :TkCOLON3),
              s(:begin,
                s(:lvasgn, :name_t,
                  s(:send, nil, :get_tk)),
                s(:lvasgn, :container,
                  s(:ivar, :@top_level)),
                s(:send,
                  s(:lvar, :given_name), :<<,
                  s(:str, "::")))), nil),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:send,
            s(:lvar, :given_name), :<<,
            s(:send,
              s(:lvar, :name_t), :name)),
          s(:while,
            s(:send,
              s(:const, nil, :TkCOLON2), :===,
              s(:send, nil, :peek_tk)),
            s(:begin,
              s(:lvasgn, :prev_container,
                s(:lvar, :container)),
              s(:lvasgn, :container,
                s(:send,
                  s(:lvar, :container), :find_module_named,
                  s(:send,
                    s(:lvar, :name_t), :name))),
              s(:or_asgn,
                s(:lvasgn, :container),
                s(:if,
                  s(:lvar, :ignore_constants),
                  s(:send,
                    s(:const,
                      s(:const, nil, :RDoc), :Context), :new),
                  s(:begin,
                    s(:lvasgn, :c,
                      s(:send,
                        s(:lvar, :prev_container), :add_module,
                        s(:const,
                          s(:const, nil, :RDoc), :NormalModule),
                        s(:send,
                          s(:lvar, :name_t), :name))),
                    s(:if,
                      s(:send,
                        s(:lvar, :prev_container), :document_children), nil,
                      s(:send,
                        s(:lvar, :c), :ignore)),
                    s(:send,
                      s(:ivar, :@top_level), :add_to_classes_or_modules,
                      s(:lvar, :c)),
                    s(:lvar, :c)))),
              s(:send, nil, :record_location,
                s(:lvar, :container)),
              s(:send, nil, :get_tk),
              s(:send, nil, :skip_tkspace,
                s(:false)),
              s(:lvasgn, :name_t,
                s(:send, nil, :get_tk)),
              s(:send,
                s(:send,
                  s(:lvar, :given_name), :<<,
                  s(:str, "::")), :<<,
                s(:send,
                  s(:lvar, :name_t), :name)))),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:return,
            s(:array,
              s(:lvar, :container),
              s(:lvar, :name_t),
              s(:lvar, :given_name))))),
      s(:def, :get_class_specification,
        s(:args),
        s(:begin,
          s(:case,
            s(:send, nil, :peek_tk),
            s(:when,
              s(:const, nil, :TkSELF),
              s(:return,
                s(:str, "self"))),
            s(:when,
              s(:const, nil, :TkGVAR),
              s(:return,
                s(:str, ""))), nil),
          s(:lvasgn, :res,
            s(:send, nil, :get_constant)),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:send, nil, :get_tkread),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:case,
            s(:lvar, :tk),
            s(:when,
              s(:const, nil, :TkNL),
              s(:const, nil, :TkCOMMENT),
              s(:const, nil, :TkSEMICOLON),
              s(:begin,
                s(:send, nil, :unget_tk,
                  s(:lvar, :tk)),
                s(:return,
                  s(:lvar, :res)))), nil),
          s(:op_asgn,
            s(:lvasgn, :res), :+,
            s(:send, nil, :parse_call_parameters,
              s(:lvar, :tk))),
          s(:lvar, :res))),
      s(:def, :get_constant,
        s(:args),
        s(:begin,
          s(:lvasgn, :res,
            s(:str, "")),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:while,
            s(:or,
              s(:or,
                s(:send,
                  s(:const, nil, :TkCOLON2), :===,
                  s(:lvar, :tk)),
                s(:send,
                  s(:const, nil, :TkCOLON3), :===,
                  s(:lvar, :tk))),
              s(:send,
                s(:const, nil, :TkCONSTANT), :===,
                s(:lvar, :tk))),
            s(:begin,
              s(:op_asgn,
                s(:lvasgn, :res), :+,
                s(:send,
                  s(:lvar, :tk), :name)),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)))),
          s(:send, nil, :unget_tk,
            s(:lvar, :tk)),
          s(:lvar, :res))),
      s(:def, :get_constant_with_optional_parens,
        s(:args),
        s(:begin,
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:lvasgn, :nest,
            s(:int, 0)),
          s(:while,
            s(:or,
              s(:send,
                s(:const, nil, :TkLPAREN), :===,
                s(:begin,
                  s(:lvasgn, :tk,
                    s(:send, nil, :peek_tk)))),
              s(:send,
                s(:const, nil, :TkfLPAREN), :===,
                s(:lvar, :tk))),
            s(:begin,
              s(:send, nil, :get_tk),
              s(:send, nil, :skip_tkspace),
              s(:op_asgn,
                s(:lvasgn, :nest), :+,
                s(:int, 1)))),
          s(:lvasgn, :name,
            s(:send, nil, :get_constant)),
          s(:while,
            s(:send,
              s(:lvar, :nest), :>,
              s(:int, 0)),
            s(:begin,
              s(:send, nil, :skip_tkspace),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)),
              s(:if,
                s(:send,
                  s(:const, nil, :TkRPAREN), :===,
                  s(:lvar, :tk)),
                s(:op_asgn,
                  s(:lvasgn, :nest), :-,
                  s(:int, 1)), nil))),
          s(:lvar, :name))),
      s(:def, :get_end_token,
        s(:args,
          s(:arg, :tk)),
        s(:case,
          s(:lvar, :tk),
          s(:when,
            s(:const, nil, :TkLPAREN),
            s(:const, nil, :TkfLPAREN),
            s(:const, nil, :TkRPAREN)),
          s(:when,
            s(:const, nil, :TkRPAREN),
            s(:nil)),
          s(:const, nil, :TkNL))),
      s(:def, :get_method_container,
        s(:args,
          s(:arg, :container),
          s(:arg, :name_t)),
        s(:begin,
          s(:lvasgn, :prev_container,
            s(:lvar, :container)),
          s(:lvasgn, :container,
            s(:send,
              s(:lvar, :container), :find_module_named,
              s(:send,
                s(:lvar, :name_t), :name))),
          s(:if,
            s(:lvar, :container), nil,
            s(:begin,
              s(:lvasgn, :constant,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :prev_container), :constants), :find),
                  s(:args,
                    s(:arg, :const)),
                  s(:send,
                    s(:send,
                      s(:lvar, :const), :name), :==,
                    s(:send,
                      s(:lvar, :name_t), :name)))),
              s(:if,
                s(:lvar, :constant),
                s(:begin,
                  s(:send, nil, :parse_method_dummy,
                    s(:lvar, :prev_container)),
                  s(:return)), nil))),
          s(:if,
            s(:lvar, :container), nil,
            s(:begin,
              s(:lvasgn, :obj,
                s(:rescue,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :name_t), :name), :split,
                        s(:str, "::")), :inject,
                      s(:const, nil, :Object)),
                    s(:args,
                      s(:arg, :state),
                      s(:arg, :item)),
                    s(:send,
                      s(:lvar, :state), :const_get,
                      s(:lvar, :item))),
                  s(:resbody, nil, nil,
                    s(:nil)), nil)),
              s(:lvasgn, :type,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :obj), :class), :==,
                    s(:const, nil, :Class)),
                  s(:const,
                    s(:const, nil, :RDoc), :NormalClass),
                  s(:const,
                    s(:const, nil, :RDoc), :NormalModule))),
              s(:if,
                s(:send,
                  s(:array,
                    s(:const, nil, :Class),
                    s(:const, nil, :Module)), :include?,
                  s(:send,
                    s(:lvar, :obj), :class)), nil,
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "Couldn't find "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :name_t), :name)),
                    s(:str, ". Assuming it's a module")))),
              s(:if,
                s(:send,
                  s(:lvar, :type), :==,
                  s(:const,
                    s(:const, nil, :RDoc), :NormalClass)),
                s(:begin,
                  s(:lvasgn, :sclass,
                    s(:if,
                      s(:send,
                        s(:lvar, :obj), :superclass),
                      s(:send,
                        s(:send,
                          s(:lvar, :obj), :superclass), :name),
                      s(:nil))),
                  s(:lvasgn, :container,
                    s(:send,
                      s(:lvar, :prev_container), :add_class,
                      s(:lvar, :type),
                      s(:send,
                        s(:lvar, :name_t), :name),
                      s(:lvar, :sclass)))),
                s(:lvasgn, :container,
                  s(:send,
                    s(:lvar, :prev_container), :add_module,
                    s(:lvar, :type),
                    s(:send,
                      s(:lvar, :name_t), :name)))),
              s(:send, nil, :record_location,
                s(:lvar, :container)))),
          s(:lvar, :container))),
      s(:def, :get_symbol_or_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:case,
            s(:lvar, :tk),
            s(:when,
              s(:const, nil, :TkSYMBOL),
              s(:begin,
                s(:lvasgn, :text,
                  s(:send,
                    s(:send,
                      s(:lvar, :tk), :text), :sub,
                    s(:regexp,
                      s(:str, "^:"),
                      s(:regopt)),
                    s(:str, ""))),
                s(:if,
                  s(:send,
                    s(:const, nil, :TkASSIGN), :===,
                    s(:send, nil, :peek_tk)),
                  s(:begin,
                    s(:send, nil, :get_tk),
                    s(:send,
                      s(:lvar, :text), :<<,
                      s(:str, "="))), nil),
                s(:lvar, :text))),
            s(:when,
              s(:const, nil, :TkId),
              s(:const, nil, :TkOp),
              s(:send,
                s(:lvar, :tk), :name)),
            s(:when,
              s(:const, nil, :TkAMPER),
              s(:const, nil, :TkDSTRING),
              s(:const, nil, :TkSTAR),
              s(:const, nil, :TkSTRING),
              s(:send,
                s(:lvar, :tk), :text)),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :RDoc), :Error),
              s(:dstr,
                s(:str, "Name or symbol expected (got "),
                s(:begin,
                  s(:lvar, :tk)),
                s(:str, ")")))))),
      s(:def, :stop_at_EXPR_END,
        s(:args),
        s(:or,
          s(:send,
            s(:send,
              s(:ivar, :@scanner), :lex_state), :==,
            s(:sym, :EXPR_END)),
          s(:send,
            s(:send,
              s(:ivar, :@scanner), :continue), :!))),
      s(:def, :suppress_parents,
        s(:args,
          s(:arg, :container),
          s(:arg, :ancestor)),
        s(:while,
          s(:and,
            s(:lvar, :container),
            s(:send,
              s(:lvar, :container), :!=,
              s(:lvar, :ancestor))),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :container), :documented?), nil,
              s(:send,
                s(:lvar, :container), :suppress)),
            s(:lvasgn, :container,
              s(:send,
                s(:lvar, :container), :parent))))),
      s(:def, :look_for_directives_in,
        s(:args,
          s(:arg, :context),
          s(:arg, :comment)),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@preprocess), :handle,
              s(:lvar, :comment),
              s(:lvar, :context)),
            s(:args,
              s(:arg, :directive),
              s(:arg, :param)),
            s(:case,
              s(:lvar, :directive),
              s(:when,
                s(:str, "method"),
                s(:str, "singleton-method"),
                s(:str, "attr"),
                s(:str, "attr_accessor"),
                s(:str, "attr_reader"),
                s(:str, "attr_writer"),
                s(:false)),
              s(:when,
                s(:str, "section"),
                s(:begin,
                  s(:send,
                    s(:lvar, :context), :set_current_section,
                    s(:lvar, :param),
                    s(:send,
                      s(:lvar, :comment), :dup)),
                  s(:send,
                    s(:lvar, :comment), :text=,
                    s(:str, "")),
                  s(:break))), nil)),
          s(:send, nil, :remove_private_comments,
            s(:lvar, :comment)))),
      s(:def, :make_message,
        s(:args,
          s(:arg, :message)),
        s(:begin,
          s(:lvasgn, :prefix,
            s(:dstr,
              s(:begin,
                s(:ivar, :@file_name)),
              s(:str, ":"))),
          s(:if,
            s(:ivar, :@scanner),
            s(:send,
              s(:lvar, :prefix), :<<,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@scanner), :line_no)),
                s(:str, ":"),
                s(:begin,
                  s(:send,
                    s(:ivar, :@scanner), :char_no)),
                s(:str, ":"))), nil),
          s(:dstr,
            s(:begin,
              s(:lvar, :prefix)),
            s(:str, " "),
            s(:begin,
              s(:lvar, :message))))),
      s(:def, :new_comment,
        s(:args,
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :c,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :new,
              s(:lvar, :comment),
              s(:ivar, :@top_level))),
          s(:send,
            s(:lvar, :c), :format=,
            s(:ivar, :@markup)),
          s(:lvar, :c))),
      s(:def, :parse_attr,
        s(:args,
          s(:arg, :context),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:lvasgn, :args,
            s(:send, nil, :parse_symbol_arg,
              s(:int, 1))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :size), :>,
              s(:int, 0)),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))),
              s(:lvasgn, :rw,
                s(:str, "R")),
              s(:send, nil, :skip_tkspace,
                s(:false)),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)),
              s(:if,
                s(:send,
                  s(:const, nil, :TkCOMMA), :===,
                  s(:lvar, :tk)),
                s(:if,
                  s(:send, nil, :get_bool),
                  s(:lvasgn, :rw,
                    s(:str, "RW")), nil),
                s(:send, nil, :unget_tk,
                  s(:lvar, :tk))),
              s(:lvasgn, :att,
                s(:send, nil, :create_attr,
                  s(:lvar, :context),
                  s(:lvar, :single),
                  s(:lvar, :name),
                  s(:lvar, :rw),
                  s(:lvar, :comment))),
              s(:send,
                s(:lvar, :att), :offset=,
                s(:lvar, :offset)),
              s(:send,
                s(:lvar, :att), :line=,
                s(:lvar, :line_no)),
              s(:send, nil, :read_documentation_modifiers,
                s(:lvar, :att),
                s(:const,
                  s(:const, nil, :RDoc), :ATTR_MODIFIERS))),
            s(:send, nil, :warn,
              s(:str, "'attr' ignored - looks like a variable"))))),
      s(:def, :parse_attr_accessor,
        s(:args,
          s(:arg, :context),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:lvasgn, :args,
            s(:send, nil, :parse_symbol_arg)),
          s(:lvasgn, :rw,
            s(:str, "?")),
          s(:lvasgn, :tmp,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :tmp),
            s(:const,
              s(:const, nil, :RDoc), :ATTR_MODIFIERS)),
          s(:if,
            s(:and,
              s(:ivar, :@track_visibility),
              s(:send,
                s(:send,
                  s(:lvar, :tmp), :document_self), :!)),
            s(:return), nil),
          s(:case,
            s(:send,
              s(:lvar, :tk), :name),
            s(:when,
              s(:str, "attr_reader"),
              s(:lvasgn, :rw,
                s(:str, "R"))),
            s(:when,
              s(:str, "attr_writer"),
              s(:lvasgn, :rw,
                s(:str, "W"))),
            s(:when,
              s(:str, "attr_accessor"),
              s(:lvasgn, :rw,
                s(:str, "RW"))),
            s(:lvasgn, :rw,
              s(:str, "?"))),
          s(:for,
            s(:lvasgn, :name),
            s(:lvar, :args),
            s(:begin,
              s(:lvasgn, :att,
                s(:send, nil, :create_attr,
                  s(:lvar, :context),
                  s(:lvar, :single),
                  s(:lvar, :name),
                  s(:lvar, :rw),
                  s(:lvar, :comment))),
              s(:send,
                s(:lvar, :att), :offset=,
                s(:lvar, :offset)),
              s(:send,
                s(:lvar, :att), :line=,
                s(:lvar, :line_no)))))),
      s(:def, :parse_alias,
        s(:args,
          s(:arg, :context),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:send, nil, :skip_tkspace),
          s(:if,
            s(:send,
              s(:const, nil, :TkLPAREN), :===,
              s(:send, nil, :peek_tk)),
            s(:begin,
              s(:send, nil, :get_tk),
              s(:send, nil, :skip_tkspace)), nil),
          s(:lvasgn, :new_name,
            s(:send, nil, :get_symbol_or_name)),
          s(:send,
            s(:ivar, :@scanner), :lex_state=,
            s(:sym, :EXPR_FNAME)),
          s(:send, nil, :skip_tkspace),
          s(:if,
            s(:send,
              s(:const, nil, :TkCOMMA), :===,
              s(:send, nil, :peek_tk)),
            s(:begin,
              s(:send, nil, :get_tk),
              s(:send, nil, :skip_tkspace)), nil),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :old_name,
                s(:send, nil, :get_symbol_or_name)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :RDoc), :Error)), nil,
                s(:return)), nil)),
          s(:lvasgn, :al,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:send, nil, :get_tkread),
              s(:lvar, :old_name),
              s(:lvar, :new_name),
              s(:lvar, :comment),
              s(:send,
                s(:lvar, :single), :==,
                s(:const, nil, :SINGLE)))),
          s(:send, nil, :record_location,
            s(:lvar, :al)),
          s(:send,
            s(:lvar, :al), :offset=,
            s(:lvar, :offset)),
          s(:send,
            s(:lvar, :al), :line=,
            s(:lvar, :line_no)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :al),
            s(:const,
              s(:const, nil, :RDoc), :ATTR_MODIFIERS)),
          s(:send,
            s(:lvar, :context), :add_alias,
            s(:lvar, :al)),
          s(:send,
            s(:ivar, :@stats), :add_alias,
            s(:lvar, :al)),
          s(:lvar, :al))),
      s(:def, :parse_call_parameters,
        s(:args,
          s(:arg, :tk)),
        s(:begin,
          s(:lvasgn, :end_token,
            s(:case,
              s(:lvar, :tk),
              s(:when,
                s(:const, nil, :TkLPAREN),
                s(:const, nil, :TkfLPAREN),
                s(:const, nil, :TkRPAREN)),
              s(:when,
                s(:const, nil, :TkRPAREN),
                s(:return,
                  s(:str, ""))),
              s(:const, nil, :TkNL))),
          s(:lvasgn, :nest,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkSEMICOLON),
                  s(:break)),
                s(:when,
                  s(:const, nil, :TkLPAREN),
                  s(:const, nil, :TkfLPAREN),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:lvar, :end_token),
                  s(:if,
                    s(:send,
                      s(:lvar, :end_token), :==,
                      s(:const, nil, :TkRPAREN)),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :nest), :-,
                        s(:int, 1)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:ivar, :@scanner), :lex_state), :==,
                            s(:sym, :EXPR_END)),
                          s(:send,
                            s(:lvar, :nest), :<=,
                            s(:int, 0))),
                        s(:break), nil)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@scanner), :continue), nil,
                      s(:break)))),
                s(:when,
                  s(:const, nil, :TkCOMMENT),
                  s(:const, nil, :TkASSIGN),
                  s(:const, nil, :TkOPASGN),
                  s(:begin,
                    s(:send, nil, :unget_tk,
                      s(:lvar, :tk)),
                    s(:break))),
                s(:when,
                  s(:nil),
                  s(:break)), nil),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)))),
          s(:send, nil, :get_tkread_clean,
            s(:str, "\n"),
            s(:str, " ")))),
      s(:def, :parse_class,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:lvasgn, :declaration_context,
            s(:lvar, :container)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :container),
              s(:lvasgn, :name_t),
              s(:lvasgn, :given_name)),
            s(:send, nil, :get_class_or_module,
              s(:lvar, :container))),
          s(:lvasgn, :cls,
            s(:case,
              s(:lvar, :name_t),
              s(:when,
                s(:const, nil, :TkCONSTANT),
                s(:send, nil, :parse_class_regular,
                  s(:lvar, :container),
                  s(:lvar, :declaration_context),
                  s(:lvar, :single),
                  s(:lvar, :name_t),
                  s(:lvar, :given_name),
                  s(:lvar, :comment))),
              s(:when,
                s(:const, nil, :TkLSHFT),
                s(:case,
                  s(:lvasgn, :name,
                    s(:send, nil, :get_class_specification)),
                  s(:when,
                    s(:str, "self"),
                    s(:send,
                      s(:lvar, :container), :name),
                    s(:begin,
                      s(:send, nil, :parse_statements,
                        s(:lvar, :container),
                        s(:const, nil, :SINGLE)),
                      s(:return))),
                  s(:send, nil, :parse_class_singleton,
                    s(:lvar, :container),
                    s(:lvar, :name),
                    s(:lvar, :comment)))),
              s(:begin,
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "Expected class name or '<<'. Got "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :name_t), :class)),
                    s(:str, ": "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :name_t), :text), :inspect)))),
                s(:return)))),
          s(:send,
            s(:lvar, :cls), :offset=,
            s(:lvar, :offset)),
          s(:send,
            s(:lvar, :cls), :line=,
            s(:lvar, :line_no)),
          s(:lvar, :cls))),
      s(:def, :parse_class_regular,
        s(:args,
          s(:arg, :container),
          s(:arg, :declaration_context),
          s(:arg, :single),
          s(:arg, :name_t),
          s(:arg, :given_name),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :superclass,
            s(:str, "::Object")),
          s(:if,
            s(:send,
              s(:lvar, :given_name), :=~,
              s(:regexp,
                s(:str, "^::"),
                s(:regopt))),
            s(:begin,
              s(:lvasgn, :declaration_context,
                s(:ivar, :@top_level)),
              s(:lvasgn, :given_name,
                s(:back_ref, :$'))), nil),
          s(:if,
            s(:send,
              s(:const, nil, :TkLT), :===,
              s(:send, nil, :peek_tk)),
            s(:begin,
              s(:send, nil, :get_tk),
              s(:send, nil, :skip_tkspace),
              s(:lvasgn, :superclass,
                s(:send, nil, :get_class_specification)),
              s(:if,
                s(:send,
                  s(:lvar, :superclass), :empty?),
                s(:lvasgn, :superclass,
                  s(:str, "(unknown)")), nil)), nil),
          s(:lvasgn, :cls_type,
            s(:if,
              s(:send,
                s(:lvar, :single), :==,
                s(:const, nil, :SINGLE)),
              s(:const,
                s(:const, nil, :RDoc), :SingleClass),
              s(:const,
                s(:const, nil, :RDoc), :NormalClass))),
          s(:lvasgn, :cls,
            s(:send,
              s(:lvar, :declaration_context), :add_class,
              s(:lvar, :cls_type),
              s(:lvar, :given_name),
              s(:lvar, :superclass))),
          s(:if,
            s(:send,
              s(:lvar, :container), :document_children), nil,
            s(:send,
              s(:lvar, :cls), :ignore)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :cls),
            s(:const,
              s(:const, nil, :RDoc), :CLASS_MODIFIERS)),
          s(:send, nil, :record_location,
            s(:lvar, :cls)),
          s(:send,
            s(:lvar, :cls), :add_comment,
            s(:lvar, :comment),
            s(:ivar, :@top_level)),
          s(:send,
            s(:ivar, :@top_level), :add_to_classes_or_modules,
            s(:lvar, :cls)),
          s(:send,
            s(:ivar, :@stats), :add_class,
            s(:lvar, :cls)),
          s(:if,
            s(:send,
              s(:lvar, :cls), :document_self), nil,
            s(:send, nil, :suppress_parents,
              s(:lvar, :container),
              s(:lvar, :declaration_context))),
          s(:send, nil, :parse_statements,
            s(:lvar, :cls)),
          s(:lvar, :cls))),
      s(:def, :parse_class_singleton,
        s(:args,
          s(:arg, :container),
          s(:arg, :name),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :other,
            s(:send,
              s(:ivar, :@store), :find_class_named,
              s(:lvar, :name))),
          s(:if,
            s(:lvar, :other), nil,
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :name), :=~,
                  s(:regexp,
                    s(:str, "^::"),
                    s(:regopt))),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:back_ref, :$')),
                  s(:lvasgn, :container,
                    s(:ivar, :@top_level))), nil),
              s(:lvasgn, :other,
                s(:send,
                  s(:lvar, :container), :add_module,
                  s(:const,
                    s(:const, nil, :RDoc), :NormalModule),
                  s(:lvar, :name))),
              s(:send, nil, :record_location,
                s(:lvar, :other)),
              s(:if,
                s(:send,
                  s(:lvar, :name), :empty?),
                s(:send,
                  s(:lvar, :other), :ignore), nil),
              s(:send,
                s(:lvar, :other), :add_comment,
                s(:lvar, :comment),
                s(:ivar, :@top_level)))),
          s(:if,
            s(:send,
              s(:lvar, :name), :=~,
              s(:regexp,
                s(:str, "\\A(::)?[A-Z]"),
                s(:regopt))), nil,
            s(:begin,
              s(:send,
                s(:lvar, :other), :document_self=,
                s(:nil)),
              s(:send,
                s(:lvar, :other), :document_children=,
                s(:false)),
              s(:send,
                s(:lvar, :other), :clear_comment))),
          s(:send,
            s(:ivar, :@top_level), :add_to_classes_or_modules,
            s(:lvar, :other)),
          s(:send,
            s(:ivar, :@stats), :add_class,
            s(:lvar, :other)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :other),
            s(:const,
              s(:const, nil, :RDoc), :CLASS_MODIFIERS)),
          s(:send, nil, :parse_statements,
            s(:lvar, :other),
            s(:const, nil, :SINGLE)),
          s(:lvar, :other))),
      s(:def, :parse_constant,
        s(:args,
          s(:arg, :container),
          s(:arg, :tk),
          s(:arg, :comment),
          s(:optarg, :ignore_constants,
            s(:false))),
        s(:begin,
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :tk), :name)),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:if,
            s(:send,
              s(:lvar, :name), :=~,
              s(:regexp,
                s(:str, "^\\w+$"),
                s(:regopt))), nil,
            s(:return)),
          s(:lvasgn, :eq_tk,
            s(:send, nil, :get_tk)),
          s(:if,
            s(:send,
              s(:const, nil, :TkCOLON2), :===,
              s(:lvar, :eq_tk)),
            s(:begin,
              s(:send, nil, :unget_tk,
                s(:lvar, :eq_tk)),
              s(:send, nil, :unget_tk,
                s(:lvar, :tk)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :container),
                  s(:lvasgn, :name_t)),
                s(:send, nil, :get_class_or_module,
                  s(:lvar, :container),
                  s(:lvar, :ignore_constants))),
              s(:lvasgn, :name,
                s(:send,
                  s(:lvar, :name_t), :name)),
              s(:lvasgn, :eq_tk,
                s(:send, nil, :get_tk))), nil),
          s(:if,
            s(:send,
              s(:const, nil, :TkASSIGN), :===,
              s(:lvar, :eq_tk)), nil,
            s(:begin,
              s(:send, nil, :unget_tk,
                s(:lvar, :eq_tk)),
              s(:return,
                s(:false)))),
          s(:if,
            s(:send,
              s(:const, nil, :TkGT), :===,
              s(:send, nil, :peek_tk)),
            s(:begin,
              s(:send, nil, :unget_tk,
                s(:lvar, :eq_tk)),
              s(:return)), nil),
          s(:lvasgn, :value,
            s(:str, "")),
          s(:lvasgn, :con,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:lvar, :name),
              s(:lvar, :value),
              s(:lvar, :comment))),
          s(:lvasgn, :body,
            s(:send, nil, :parse_constant_body,
              s(:lvar, :container),
              s(:lvar, :con))),
          s(:if,
            s(:lvar, :body), nil,
            s(:return)),
          s(:send,
            s(:lvar, :value), :replace,
            s(:lvar, :body)),
          s(:send, nil, :record_location,
            s(:lvar, :con)),
          s(:send,
            s(:lvar, :con), :offset=,
            s(:lvar, :offset)),
          s(:send,
            s(:lvar, :con), :line=,
            s(:lvar, :line_no)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :con),
            s(:const,
              s(:const, nil, :RDoc), :CONSTANT_MODIFIERS)),
          s(:send,
            s(:ivar, :@stats), :add_constant,
            s(:lvar, :con)),
          s(:send,
            s(:lvar, :container), :add_constant,
            s(:lvar, :con)),
          s(:true))),
      s(:def, :parse_constant_body,
        s(:args,
          s(:arg, :container),
          s(:arg, :constant)),
        s(:begin,
          s(:lvasgn, :nest,
            s(:int, 0)),
          s(:lvasgn, :rhs_name,
            s(:str, "")),
          s(:send, nil, :get_tkread),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkSEMICOLON),
                  s(:if,
                    s(:send,
                      s(:lvar, :nest), :<=,
                      s(:int, 0)),
                    s(:break), nil)),
                s(:when,
                  s(:const, nil, :TkLPAREN),
                  s(:const, nil, :TkfLPAREN),
                  s(:const, nil, :TkLBRACE),
                  s(:const, nil, :TkfLBRACE),
                  s(:const, nil, :TkLBRACK),
                  s(:const, nil, :TkfLBRACK),
                  s(:const, nil, :TkDO),
                  s(:const, nil, :TkIF),
                  s(:const, nil, :TkUNLESS),
                  s(:const, nil, :TkCASE),
                  s(:const, nil, :TkDEF),
                  s(:const, nil, :TkBEGIN),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkRPAREN),
                  s(:const, nil, :TkRBRACE),
                  s(:const, nil, :TkRBRACK),
                  s(:const, nil, :TkEND),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :-,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkCOMMENT),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :nest), :<=,
                        s(:int, 0)),
                      s(:send, nil, :stop_at_EXPR_END)),
                    s(:begin,
                      s(:send, nil, :unget_tk,
                        s(:lvar, :tk)),
                      s(:break)),
                    s(:begin,
                      s(:send, nil, :unget_tk,
                        s(:lvar, :tk)),
                      s(:send, nil, :read_documentation_modifiers,
                        s(:lvar, :constant),
                        s(:const,
                          s(:const, nil, :RDoc), :CONSTANT_MODIFIERS))))),
                s(:when,
                  s(:const, nil, :TkCONSTANT),
                  s(:begin,
                    s(:send,
                      s(:lvar, :rhs_name), :<<,
                      s(:send,
                        s(:lvar, :tk), :name)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :nest), :<=,
                          s(:int, 0)),
                        s(:send,
                          s(:const, nil, :TkNL), :===,
                          s(:send, nil, :peek_tk))),
                      s(:begin,
                        s(:send, nil, :create_module_alias,
                          s(:lvar, :container),
                          s(:lvar, :constant),
                          s(:lvar, :rhs_name)),
                        s(:break)), nil))),
                s(:when,
                  s(:const, nil, :TkNL),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :nest), :<=,
                        s(:int, 0)),
                      s(:send, nil, :stop_at_EXPR_END)),
                    s(:begin,
                      s(:send, nil, :unget_tk,
                        s(:lvar, :tk)),
                      s(:break)), nil)),
                s(:when,
                  s(:const, nil, :TkCOLON2),
                  s(:const, nil, :TkCOLON3),
                  s(:send,
                    s(:lvar, :rhs_name), :<<,
                    s(:str, "::"))),
                s(:when,
                  s(:nil),
                  s(:break)), nil),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)))),
          s(:send, nil, :get_tkread_clean,
            s(:regexp,
              s(:str, "^[ \\t]+"),
              s(:regopt)),
            s(:str, "")))),
      s(:def, :parse_comment,
        s(:args,
          s(:arg, :container),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@markup), :==,
              s(:str, "tomdoc")),
            s(:return,
              s(:send, nil, :parse_comment_tomdoc,
                s(:lvar, :container),
                s(:lvar, :tk),
                s(:lvar, :comment))), nil),
          s(:lvasgn, :column,
            s(:send,
              s(:lvar, :tk), :char_no)),
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :comment), :text)),
          s(:lvasgn, :singleton,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :text), :sub!,
                  s(:regexp,
                    s(:str, "(^# +:?)(singleton-)(method:)"),
                    s(:regopt)),
                  s(:str, "\\1\\3")), :!), :!)),
          s(:lvasgn, :co,
            s(:if,
              s(:send,
                s(:lvar, :text), :sub!,
                s(:regexp,
                  s(:str, "^# +:?method: *(\\S*).*?\\n"),
                  s(:regopt, :i)),
                s(:str, "")),
              s(:send, nil, :parse_comment_ghost,
                s(:lvar, :container),
                s(:lvar, :text),
                s(:nth_ref, 1),
                s(:lvar, :column),
                s(:lvar, :line_no),
                s(:lvar, :comment)),
              s(:if,
                s(:send,
                  s(:lvar, :text), :sub!,
                  s(:regexp,
                    s(:str, "# +:?(attr(_reader|_writer|_accessor)?): *(\\S*).*?\\n"),
                    s(:regopt, :i)),
                  s(:str, "")),
                s(:send, nil, :parse_comment_attr,
                  s(:lvar, :container),
                  s(:nth_ref, 1),
                  s(:nth_ref, 3),
                  s(:lvar, :comment)), nil))),
          s(:if,
            s(:lvar, :co),
            s(:begin,
              s(:send,
                s(:lvar, :co), :singleton=,
                s(:lvar, :singleton)),
              s(:send,
                s(:lvar, :co), :offset=,
                s(:lvar, :offset)),
              s(:send,
                s(:lvar, :co), :line=,
                s(:lvar, :line_no))), nil),
          s(:true))),
      s(:def, :parse_comment_attr,
        s(:args,
          s(:arg, :container),
          s(:arg, :type),
          s(:arg, :name),
          s(:arg, :comment)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :name), :empty?),
            s(:return), nil),
          s(:lvasgn, :rw,
            s(:case,
              s(:lvar, :type),
              s(:when,
                s(:str, "attr_reader"),
                s(:str, "R")),
              s(:when,
                s(:str, "attr_writer"),
                s(:str, "W")),
              s(:str, "RW"))),
          s(:send, nil, :create_attr,
            s(:lvar, :container),
            s(:const, nil, :NORMAL),
            s(:lvar, :name),
            s(:lvar, :rw),
            s(:lvar, :comment)))),
      s(:def, :parse_comment_ghost,
        s(:args,
          s(:arg, :container),
          s(:arg, :text),
          s(:arg, :name),
          s(:arg, :column),
          s(:arg, :line_no),
          s(:arg, :comment)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :name), :empty?),
            s(:lvasgn, :name,
              s(:nil)), nil),
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :GhostMethod), :new,
              s(:send, nil, :get_tkread),
              s(:lvar, :name))),
          s(:send, nil, :record_location,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :start_collecting_tokens),
          s(:lvasgn, :indent,
            s(:send,
              s(:const, nil, :TkSPACE), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 1))),
          s(:send,
            s(:lvar, :indent), :set_text,
            s(:send,
              s(:str, " "), :*,
              s(:lvar, :column))),
          s(:lvasgn, :position_comment,
            s(:send,
              s(:const, nil, :TkCOMMENT), :new,
              s(:int, 0),
              s(:lvar, :line_no),
              s(:int, 1))),
          s(:send,
            s(:lvar, :position_comment), :set_text,
            s(:dstr,
              s(:str, "# File "),
              s(:begin,
                s(:send,
                  s(:ivar, :@top_level), :relative_name)),
              s(:str, ", line "),
              s(:begin,
                s(:lvar, :line_no)))),
          s(:send,
            s(:lvar, :meth), :add_tokens,
            s(:array,
              s(:lvar, :position_comment),
              s(:const, nil, :NEWLINE_TOKEN),
              s(:lvar, :indent))),
          s(:send,
            s(:lvar, :meth), :params=,
            s(:if,
              s(:send,
                s(:lvar, :text), :sub!,
                s(:regexp,
                  s(:str, "^#\\s+:?args?:\\s*(.*?)\\s*$"),
                  s(:regopt, :i)),
                s(:str, "")),
              s(:nth_ref, 1),
              s(:str, ""))),
          s(:send,
            s(:lvar, :comment), :normalize),
          s(:send,
            s(:lvar, :comment), :extract_call_seq,
            s(:lvar, :meth)),
          s(:if,
            s(:send,
              s(:lvar, :meth), :name), nil,
            s(:return)),
          s(:send,
            s(:lvar, :container), :add_method,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :comment=,
            s(:lvar, :comment)),
          s(:send,
            s(:ivar, :@stats), :add_method,
            s(:lvar, :meth)),
          s(:lvar, :meth))),
      s(:def, :parse_comment_tomdoc,
        s(:args,
          s(:arg, :container),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:if,
            s(:lvasgn, :signature,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :TomDoc), :signature,
                s(:lvar, :comment))), nil,
            s(:return)),
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name)),
            s(:send,
              s(:lvar, :signature), :split,
              s(:regexp,
                s(:str, "[ \\(]"),
                s(:regopt)),
              s(:int, 2))),
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :GhostMethod), :new,
              s(:send, nil, :get_tkread),
              s(:lvar, :name))),
          s(:send, nil, :record_location,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :offset=,
            s(:lvar, :offset)),
          s(:send,
            s(:lvar, :meth), :line=,
            s(:lvar, :line_no)),
          s(:send,
            s(:lvar, :meth), :start_collecting_tokens),
          s(:lvasgn, :indent,
            s(:send,
              s(:const, nil, :TkSPACE), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 1))),
          s(:send,
            s(:lvar, :indent), :set_text,
            s(:send,
              s(:str, " "), :*,
              s(:lvar, :offset))),
          s(:lvasgn, :position_comment,
            s(:send,
              s(:const, nil, :TkCOMMENT), :new,
              s(:int, 0),
              s(:lvar, :line_no),
              s(:int, 1))),
          s(:send,
            s(:lvar, :position_comment), :set_text,
            s(:dstr,
              s(:str, "# File "),
              s(:begin,
                s(:send,
                  s(:ivar, :@top_level), :relative_name)),
              s(:str, ", line "),
              s(:begin,
                s(:lvar, :line_no)))),
          s(:send,
            s(:lvar, :meth), :add_tokens,
            s(:array,
              s(:lvar, :position_comment),
              s(:const, nil, :NEWLINE_TOKEN),
              s(:lvar, :indent))),
          s(:send,
            s(:lvar, :meth), :call_seq=,
            s(:lvar, :signature)),
          s(:send,
            s(:lvar, :comment), :normalize),
          s(:if,
            s(:send,
              s(:lvar, :meth), :name), nil,
            s(:return)),
          s(:send,
            s(:lvar, :container), :add_method,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :comment=,
            s(:lvar, :comment)),
          s(:send,
            s(:ivar, :@stats), :add_method,
            s(:lvar, :meth)))),
      s(:def, :parse_extend_or_include,
        s(:args,
          s(:arg, :klass),
          s(:arg, :container),
          s(:arg, :comment)),
        s(:block,
          s(:send, nil, :loop),
          s(:args),
          s(:begin,
            s(:send, nil, :skip_tkspace_comment),
            s(:lvasgn, :name,
              s(:send, nil, :get_constant_with_optional_parens)),
            s(:if,
              s(:send,
                s(:lvar, :name), :empty?), nil,
              s(:begin,
                s(:lvasgn, :obj,
                  s(:send,
                    s(:lvar, :container), :add,
                    s(:lvar, :klass),
                    s(:lvar, :name),
                    s(:lvar, :comment))),
                s(:send, nil, :record_location,
                  s(:lvar, :obj)))),
            s(:if,
              s(:send,
                s(:const, nil, :TkCOMMA), :===,
                s(:send, nil, :peek_tk)), nil,
              s(:return)),
            s(:send, nil, :get_tk)))),
      s(:def, :parse_identifier,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:case,
            s(:send,
              s(:lvar, :tk), :name),
            s(:when,
              s(:str, "private"),
              s(:str, "protected"),
              s(:str, "public"),
              s(:str, "private_class_method"),
              s(:str, "public_class_method"),
              s(:str, "module_function"),
              s(:begin,
                s(:send, nil, :parse_visibility,
                  s(:lvar, :container),
                  s(:lvar, :single),
                  s(:lvar, :tk)),
                s(:return,
                  s(:true)))),
            s(:when,
              s(:str, "attr"),
              s(:send, nil, :parse_attr,
                s(:lvar, :container),
                s(:lvar, :single),
                s(:lvar, :tk),
                s(:lvar, :comment))),
            s(:when,
              s(:regexp,
                s(:str, "^attr_(reader|writer|accessor)$"),
                s(:regopt)),
              s(:send, nil, :parse_attr_accessor,
                s(:lvar, :container),
                s(:lvar, :single),
                s(:lvar, :tk),
                s(:lvar, :comment))),
            s(:when,
              s(:str, "alias_method"),
              s(:send, nil, :parse_alias,
                s(:lvar, :container),
                s(:lvar, :single),
                s(:lvar, :tk),
                s(:lvar, :comment))),
            s(:when,
              s(:str, "require"),
              s(:str, "include"), nil),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :comment), :text), :=~,
                s(:regexp,
                  s(:str, "\\A#\\\#$"),
                  s(:regopt))),
              s(:case,
                s(:send,
                  s(:lvar, :comment), :text),
                s(:when,
                  s(:regexp,
                    s(:str, "^# +:?attr(_reader|_writer|_accessor)?:"),
                    s(:regopt)),
                  s(:send, nil, :parse_meta_attr,
                    s(:lvar, :container),
                    s(:lvar, :single),
                    s(:lvar, :tk),
                    s(:lvar, :comment))),
                s(:begin,
                  s(:lvasgn, :method,
                    s(:send, nil, :parse_meta_method,
                      s(:lvar, :container),
                      s(:lvar, :single),
                      s(:lvar, :tk),
                      s(:lvar, :comment))),
                  s(:if,
                    s(:send,
                      s(:lvar, :container), :params),
                    s(:send,
                      s(:lvar, :method), :params=,
                      s(:send,
                        s(:lvar, :container), :params)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :container), :block_params),
                    s(:send,
                      s(:lvar, :method), :block_params=,
                      s(:send,
                        s(:lvar, :container), :block_params)), nil))), nil)),
          s(:false))),
      s(:def, :parse_meta_attr,
        s(:args,
          s(:arg, :context),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :args,
            s(:send, nil, :parse_symbol_arg)),
          s(:lvasgn, :rw,
            s(:str, "?")),
          s(:lvasgn, :tmp,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :new)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :tmp),
            s(:const,
              s(:const, nil, :RDoc), :ATTR_MODIFIERS)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :comment), :text), :sub!,
              s(:regexp,
                s(:str, "^# +:?(attr(_reader|_writer|_accessor)?): *(\\S*).*?\\n"),
                s(:regopt, :i)),
              s(:str, "")),
            s(:begin,
              s(:lvasgn, :rw,
                s(:case,
                  s(:nth_ref, 1),
                  s(:when,
                    s(:str, "attr_reader"),
                    s(:str, "R")),
                  s(:when,
                    s(:str, "attr_writer"),
                    s(:str, "W")),
                  s(:str, "RW"))),
              s(:if,
                s(:send,
                  s(:nth_ref, 3), :empty?), nil,
                s(:lvasgn, :name,
                  s(:nth_ref, 3)))), nil),
          s(:if,
            s(:lvar, :name),
            s(:lvasgn, :att,
              s(:send, nil, :create_attr,
                s(:lvar, :context),
                s(:lvar, :single),
                s(:lvar, :name),
                s(:lvar, :rw),
                s(:lvar, :comment))),
            s(:block,
              s(:send,
                s(:lvar, :args), :each),
              s(:args,
                s(:arg, :attr_name)),
              s(:lvasgn, :att,
                s(:send, nil, :create_attr,
                  s(:lvar, :context),
                  s(:lvar, :single),
                  s(:lvar, :attr_name),
                  s(:lvar, :rw),
                  s(:lvar, :comment))))),
          s(:lvar, :att))),
      s(:def, :parse_meta_method,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :column,
            s(:send,
              s(:lvar, :tk), :char_no)),
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:send, nil, :start_collecting_tokens),
          s(:send, nil, :add_token,
            s(:lvar, :tk)),
          s(:send, nil, :add_token_listener,
            s(:self)),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:lvasgn, :singleton,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :comment), :text), :sub!,
                  s(:regexp,
                    s(:str, "(^# +:?)(singleton-)(method:)"),
                    s(:regopt)),
                  s(:str, "\\1\\3")), :!), :!)),
          s(:lvasgn, :name,
            s(:send, nil, :parse_meta_method_name,
              s(:lvar, :comment),
              s(:lvar, :tk))),
          s(:if,
            s(:lvar, :name), nil,
            s(:return)),
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :MetaMethod), :new,
              s(:send, nil, :get_tkread),
              s(:lvar, :name))),
          s(:send, nil, :record_location,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :offset=,
            s(:lvar, :offset)),
          s(:send,
            s(:lvar, :meth), :line=,
            s(:lvar, :line_no)),
          s(:send,
            s(:lvar, :meth), :singleton=,
            s(:lvar, :singleton)),
          s(:send, nil, :remove_token_listener,
            s(:self)),
          s(:send,
            s(:lvar, :meth), :start_collecting_tokens),
          s(:lvasgn, :indent,
            s(:send,
              s(:const, nil, :TkSPACE), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 1))),
          s(:send,
            s(:lvar, :indent), :set_text,
            s(:send,
              s(:str, " "), :*,
              s(:lvar, :column))),
          s(:lvasgn, :position_comment,
            s(:send,
              s(:const, nil, :TkCOMMENT), :new,
              s(:int, 0),
              s(:lvar, :line_no),
              s(:int, 1))),
          s(:send,
            s(:lvar, :position_comment), :value=,
            s(:dstr,
              s(:str, "# File "),
              s(:begin,
                s(:send,
                  s(:ivar, :@top_level), :relative_name)),
              s(:str, ", line "),
              s(:begin,
                s(:lvar, :line_no)))),
          s(:send,
            s(:lvar, :meth), :add_tokens,
            s(:array,
              s(:lvar, :position_comment),
              s(:const, nil, :NEWLINE_TOKEN),
              s(:lvar, :indent))),
          s(:send,
            s(:lvar, :meth), :add_tokens,
            s(:ivar, :@token_stream)),
          s(:send, nil, :parse_meta_method_params,
            s(:lvar, :container),
            s(:lvar, :single),
            s(:lvar, :meth),
            s(:lvar, :tk),
            s(:lvar, :comment)),
          s(:send,
            s(:lvar, :meth), :comment=,
            s(:lvar, :comment)),
          s(:send,
            s(:ivar, :@stats), :add_method,
            s(:lvar, :meth)),
          s(:lvar, :meth))),
      s(:def, :parse_meta_method_name,
        s(:args,
          s(:arg, :comment),
          s(:arg, :tk)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :comment), :text), :sub!,
              s(:regexp,
                s(:str, "^# +:?method: *(\\S*).*?\\n"),
                s(:regopt, :i)),
              s(:str, "")),
            s(:if,
              s(:send,
                s(:nth_ref, 1), :empty?), nil,
              s(:return,
                s(:nth_ref, 1))), nil),
          s(:lvasgn, :name_t,
            s(:send, nil, :get_tk)),
          s(:case,
            s(:lvar, :name_t),
            s(:when,
              s(:const, nil, :TkSYMBOL),
              s(:send,
                s(:send,
                  s(:lvar, :name_t), :text), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1)))),
            s(:when,
              s(:const, nil, :TkSTRING),
              s(:send,
                s(:send,
                  s(:lvar, :name_t), :value), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -2)))),
            s(:when,
              s(:const, nil, :TkASSIGN),
              s(:begin,
                s(:send, nil, :remove_token_listener,
                  s(:self)),
                s(:nil))),
            s(:begin,
              s(:send, nil, :warn,
                s(:dstr,
                  s(:str, "unknown name token "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :name_t), :inspect)),
                  s(:str, " for meta-method '"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :tk), :name)),
                  s(:str, "'"))),
              s(:str, "unknown"))))),
      s(:def, :parse_meta_method_params,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :meth),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:block,
          s(:send, nil, :token_listener,
            s(:lvar, :meth)),
          s(:args),
          s(:begin,
            s(:send,
              s(:lvar, :meth), :params=,
              s(:str, "")),
            s(:send,
              s(:lvar, :comment), :normalize),
            s(:send,
              s(:lvar, :comment), :extract_call_seq,
              s(:lvar, :meth)),
            s(:send,
              s(:lvar, :container), :add_method,
              s(:lvar, :meth)),
            s(:lvasgn, :last_tk,
              s(:lvar, :tk)),
            s(:while,
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)),
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkSEMICOLON),
                  s(:break)),
                s(:when,
                  s(:const, nil, :TkNL),
                  s(:if,
                    s(:and,
                      s(:lvar, :last_tk),
                      s(:send,
                        s(:const, nil, :TkCOMMA), :===,
                        s(:lvar, :last_tk))), nil,
                    s(:break))),
                s(:when,
                  s(:const, nil, :TkSPACE), nil),
                s(:when,
                  s(:const, nil, :TkDO),
                  s(:begin,
                    s(:send, nil, :parse_statements,
                      s(:lvar, :container),
                      s(:lvar, :single),
                      s(:lvar, :meth)),
                    s(:break))),
                s(:lvasgn, :last_tk,
                  s(:lvar, :tk))))))),
      s(:def, :parse_method,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:lvasgn, :singleton,
            s(:nil)),
          s(:lvasgn, :added_container,
            s(:false)),
          s(:lvasgn, :name,
            s(:nil)),
          s(:lvasgn, :column,
            s(:send,
              s(:lvar, :tk), :char_no)),
          s(:lvasgn, :offset,
            s(:send,
              s(:lvar, :tk), :seek)),
          s(:lvasgn, :line_no,
            s(:send,
              s(:lvar, :tk), :line_no)),
          s(:send, nil, :start_collecting_tokens),
          s(:send, nil, :add_token,
            s(:lvar, :tk)),
          s(:block,
            s(:send, nil, :token_listener,
              s(:self)),
            s(:args),
            s(:begin,
              s(:lvasgn, :prev_container,
                s(:lvar, :container)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :name),
                  s(:lvasgn, :container),
                  s(:lvasgn, :singleton)),
                s(:send, nil, :parse_method_name,
                  s(:lvar, :container))),
              s(:lvasgn, :added_container,
                s(:send,
                  s(:lvar, :container), :!=,
                  s(:lvar, :prev_container))))),
          s(:if,
            s(:lvar, :name), nil,
            s(:return)),
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:send, nil, :get_tkread),
              s(:lvar, :name))),
          s(:send,
            s(:lvar, :meth), :singleton=,
            s(:if,
              s(:send,
                s(:lvar, :single), :==,
                s(:const, nil, :SINGLE)),
              s(:true),
              s(:lvar, :singleton))),
          s(:send, nil, :record_location,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :offset=,
            s(:lvar, :offset)),
          s(:send,
            s(:lvar, :meth), :line=,
            s(:lvar, :line_no)),
          s(:send,
            s(:lvar, :meth), :start_collecting_tokens),
          s(:lvasgn, :indent,
            s(:send,
              s(:const, nil, :TkSPACE), :new,
              s(:int, 0),
              s(:int, 1),
              s(:int, 1))),
          s(:send,
            s(:lvar, :indent), :set_text,
            s(:send,
              s(:str, " "), :*,
              s(:lvar, :column))),
          s(:lvasgn, :token,
            s(:send,
              s(:const, nil, :TkCOMMENT), :new,
              s(:int, 0),
              s(:lvar, :line_no),
              s(:int, 1))),
          s(:send,
            s(:lvar, :token), :set_text,
            s(:dstr,
              s(:str, "# File "),
              s(:begin,
                s(:send,
                  s(:ivar, :@top_level), :relative_name)),
              s(:str, ", line "),
              s(:begin,
                s(:lvar, :line_no)))),
          s(:send,
            s(:lvar, :meth), :add_tokens,
            s(:array,
              s(:lvar, :token),
              s(:const, nil, :NEWLINE_TOKEN),
              s(:lvar, :indent))),
          s(:send,
            s(:lvar, :meth), :add_tokens,
            s(:ivar, :@token_stream)),
          s(:send, nil, :parse_method_params_and_body,
            s(:lvar, :container),
            s(:lvar, :single),
            s(:lvar, :meth),
            s(:lvar, :added_container)),
          s(:send,
            s(:lvar, :comment), :normalize),
          s(:send,
            s(:lvar, :comment), :extract_call_seq,
            s(:lvar, :meth)),
          s(:send,
            s(:lvar, :meth), :comment=,
            s(:lvar, :comment)),
          s(:send,
            s(:ivar, :@stats), :add_method,
            s(:lvar, :meth)))),
      s(:def, :parse_method_params_and_body,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :meth),
          s(:arg, :added_container)),
        s(:block,
          s(:send, nil, :token_listener,
            s(:lvar, :meth)),
          s(:args),
          s(:begin,
            s(:send,
              s(:ivar, :@scanner), :continue=,
              s(:false)),
            s(:send, nil, :parse_method_parameters,
              s(:lvar, :meth)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :meth), :document_self),
                s(:send,
                  s(:ivar, :@track_visibility), :!)),
              s(:send,
                s(:lvar, :container), :add_method,
                s(:lvar, :meth)),
              s(:if,
                s(:lvar, :added_container),
                s(:send,
                  s(:lvar, :container), :document_self=,
                  s(:false)), nil)),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :meth), :name), :==,
                  s(:str, "initialize")),
                s(:send,
                  s(:send,
                    s(:lvar, :meth), :singleton), :!)),
              s(:if,
                s(:send,
                  s(:lvar, :meth), :dont_rename_initialize),
                s(:send,
                  s(:lvar, :meth), :visibility=,
                  s(:sym, :protected)),
                s(:begin,
                  s(:send,
                    s(:lvar, :meth), :singleton=,
                    s(:true)),
                  s(:send,
                    s(:lvar, :meth), :name=,
                    s(:str, "new")),
                  s(:send,
                    s(:lvar, :meth), :visibility=,
                    s(:sym, :public)))), nil),
            s(:send, nil, :parse_statements,
              s(:lvar, :container),
              s(:lvar, :single),
              s(:lvar, :meth))))),
      s(:def, :parse_method_dummy,
        s(:args,
          s(:arg, :container)),
        s(:begin,
          s(:lvasgn, :dummy,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Context), :new)),
          s(:send,
            s(:lvar, :dummy), :parent=,
            s(:lvar, :container)),
          s(:send,
            s(:lvar, :dummy), :store=,
            s(:send,
              s(:lvar, :container), :store)),
          s(:send, nil, :skip_method,
            s(:lvar, :dummy)))),
      s(:def, :parse_method_name,
        s(:args,
          s(:arg, :container)),
        s(:begin,
          s(:send,
            s(:ivar, :@scanner), :lex_state=,
            s(:sym, :EXPR_FNAME)),
          s(:send, nil, :skip_tkspace),
          s(:lvasgn, :name_t,
            s(:send, nil, :get_tk)),
          s(:lvasgn, :back_tk,
            s(:send, nil, :skip_tkspace)),
          s(:lvasgn, :singleton,
            s(:false)),
          s(:case,
            s(:lvasgn, :dot,
              s(:send, nil, :get_tk)),
            s(:when,
              s(:const, nil, :TkDOT),
              s(:const, nil, :TkCOLON2),
              s(:begin,
                s(:lvasgn, :singleton,
                  s(:true)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :name),
                    s(:lvasgn, :container)),
                  s(:send, nil, :parse_method_name_singleton,
                    s(:lvar, :container),
                    s(:lvar, :name_t))))),
            s(:begin,
              s(:send, nil, :unget_tk,
                s(:lvar, :dot)),
              s(:block,
                s(:send,
                  s(:lvar, :back_tk), :reverse_each),
                s(:args,
                  s(:arg, :token)),
                s(:send, nil, :unget_tk,
                  s(:lvar, :token))),
              s(:lvasgn, :name,
                s(:send, nil, :parse_method_name_regular,
                  s(:lvar, :container),
                  s(:lvar, :name_t))))),
          s(:return,
            s(:lvar, :name),
            s(:lvar, :container),
            s(:lvar, :singleton)))),
      s(:def, :parse_method_name_regular,
        s(:args,
          s(:arg, :container),
          s(:arg, :name_t)),
        s(:case,
          s(:lvar, :name_t),
          s(:when,
            s(:const, nil, :TkSTAR),
            s(:const, nil, :TkAMPER),
            s(:send,
              s(:lvar, :name_t), :text)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :name_t), :respond_to?,
                s(:sym, :name)), nil,
              s(:begin,
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "expected method name token, . or ::, got "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :name_t), :inspect)))),
                s(:send, nil, :skip_method,
                  s(:lvar, :container)),
                s(:return))),
            s(:send,
              s(:lvar, :name_t), :name)))),
      s(:def, :parse_method_name_singleton,
        s(:args,
          s(:arg, :container),
          s(:arg, :name_t)),
        s(:begin,
          s(:send,
            s(:ivar, :@scanner), :lex_state=,
            s(:sym, :EXPR_FNAME)),
          s(:send, nil, :skip_tkspace),
          s(:lvasgn, :name_t2,
            s(:send, nil, :get_tk)),
          s(:lvasgn, :name,
            s(:case,
              s(:lvar, :name_t),
              s(:when,
                s(:const, nil, :TkSELF),
                s(:const, nil, :TkMOD),
                s(:case,
                  s(:lvar, :name_t2),
                  s(:when,
                    s(:const, nil, :TkfLBRACK),
                    s(:begin,
                      s(:send, nil, :get_tk),
                      s(:str, "[]"))),
                  s(:send,
                    s(:lvar, :name_t2), :name))),
              s(:when,
                s(:const, nil, :TkCONSTANT),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send,
                      s(:lvar, :name_t2), :name)),
                  s(:lvasgn, :container,
                    s(:send, nil, :get_method_container,
                      s(:lvar, :container),
                      s(:lvar, :name_t))),
                  s(:if,
                    s(:lvar, :container), nil,
                    s(:return)),
                  s(:lvar, :name))),
              s(:when,
                s(:const, nil, :TkIDENTIFIER),
                s(:const, nil, :TkIVAR),
                s(:const, nil, :TkGVAR),
                s(:begin,
                  s(:send, nil, :parse_method_dummy,
                    s(:lvar, :container)),
                  s(:nil))),
              s(:when,
                s(:const, nil, :TkTRUE),
                s(:const, nil, :TkFALSE),
                s(:const, nil, :TkNIL),
                s(:begin,
                  s(:lvasgn, :klass_name,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :name_t), :name), :capitalize)),
                      s(:str, "Class"))),
                  s(:lvasgn, :container,
                    s(:send,
                      s(:ivar, :@store), :find_class_named,
                      s(:lvar, :klass_name))),
                  s(:or_asgn,
                    s(:lvasgn, :container),
                    s(:send,
                      s(:ivar, :@top_level), :add_class,
                      s(:const,
                        s(:const, nil, :RDoc), :NormalClass),
                      s(:lvar, :klass_name))),
                  s(:send,
                    s(:lvar, :name_t2), :name))),
              s(:begin,
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "unexpected method name token "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :name_t), :inspect)))),
                s(:send, nil, :skip_method,
                  s(:lvar, :container)),
                s(:nil)))),
          s(:return,
            s(:lvar, :name),
            s(:lvar, :container)))),
      s(:def, :parse_method_or_yield_parameters,
        s(:args,
          s(:optarg, :method,
            s(:nil)),
          s(:optarg, :modifiers,
            s(:const,
              s(:const, nil, :RDoc), :METHOD_MODIFIERS))),
        s(:begin,
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:lvasgn, :end_token,
            s(:send, nil, :get_end_token,
              s(:lvar, :tk))),
          s(:if,
            s(:lvar, :end_token), nil,
            s(:return,
              s(:str, ""))),
          s(:lvasgn, :nest,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkSEMICOLON),
                  s(:if,
                    s(:send,
                      s(:lvar, :nest), :==,
                      s(:int, 0)),
                    s(:break), nil)),
                s(:when,
                  s(:const, nil, :TkLBRACE),
                  s(:const, nil, :TkfLBRACE),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkRBRACE),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :nest), :-,
                      s(:int, 1)),
                    s(:if,
                      s(:send,
                        s(:lvar, :nest), :<=,
                        s(:int, 0)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :nest), :<,
                            s(:int, 0)),
                          s(:send, nil, :unget_tk,
                            s(:lvar, :tk)), nil),
                        s(:break)), nil))),
                s(:when,
                  s(:const, nil, :TkLPAREN),
                  s(:const, nil, :TkfLPAREN),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:lvar, :end_token),
                  s(:if,
                    s(:send,
                      s(:lvar, :end_token), :==,
                      s(:const, nil, :TkRPAREN)),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :nest), :-,
                        s(:int, 1)),
                      s(:if,
                        s(:send,
                          s(:lvar, :nest), :<=,
                          s(:int, 0)),
                        s(:break), nil)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@scanner), :continue), nil,
                      s(:break)))),
                s(:when,
                  s(:const, nil, :TkRPAREN),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :-,
                    s(:int, 1))),
                s(:when,
                  s(:and,
                    s(:and,
                      s(:lvar, :method),
                      s(:send,
                        s(:send,
                          s(:lvar, :method), :block_params), :nil?)),
                    s(:const, nil, :TkCOMMENT)),
                  s(:begin,
                    s(:send, nil, :unget_tk,
                      s(:lvar, :tk)),
                    s(:send, nil, :read_documentation_modifiers,
                      s(:lvar, :method),
                      s(:lvar, :modifiers)),
                    s(:send,
                      s(:ivar, :@read), :pop))),
                s(:when,
                  s(:const, nil, :TkCOMMENT),
                  s(:send,
                    s(:ivar, :@read), :pop)),
                s(:when,
                  s(:nil),
                  s(:break)), nil),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)))),
          s(:send, nil, :get_tkread_clean,
            s(:regexp,
              s(:str, "\\s+"),
              s(:regopt)),
            s(:str, " ")))),
      s(:def, :parse_method_parameters,
        s(:args,
          s(:arg, :method)),
        s(:begin,
          s(:lvasgn, :res,
            s(:send, nil, :parse_method_or_yield_parameters,
              s(:lvar, :method))),
          s(:if,
            s(:send,
              s(:lvar, :res), :=~,
              s(:regexp,
                s(:str, "\\A\\("),
                s(:regopt))), nil,
            s(:lvasgn, :res,
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :res)),
                s(:str, ")")))),
          s(:if,
            s(:send,
              s(:lvar, :method), :params), nil,
            s(:send,
              s(:lvar, :method), :params=,
              s(:lvar, :res))),
          s(:if,
            s(:send,
              s(:lvar, :method), :block_params),
            s(:return), nil),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :method),
            s(:const,
              s(:const, nil, :RDoc), :METHOD_MODIFIERS)))),
      s(:def, :parse_module,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :comment)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :container),
              s(:lvasgn, :name_t)),
            s(:send, nil, :get_class_or_module,
              s(:lvar, :container))),
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :name_t), :name)),
          s(:lvasgn, :mod,
            s(:send,
              s(:lvar, :container), :add_module,
              s(:const,
                s(:const, nil, :RDoc), :NormalModule),
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:lvar, :container), :document_children), nil,
            s(:send,
              s(:lvar, :mod), :ignore)),
          s(:send, nil, :record_location,
            s(:lvar, :mod)),
          s(:send, nil, :read_documentation_modifiers,
            s(:lvar, :mod),
            s(:const,
              s(:const, nil, :RDoc), :CLASS_MODIFIERS)),
          s(:send,
            s(:lvar, :mod), :add_comment,
            s(:lvar, :comment),
            s(:ivar, :@top_level)),
          s(:send, nil, :parse_statements,
            s(:lvar, :mod)),
          s(:send,
            s(:ivar, :@stats), :add_module,
            s(:lvar, :mod)))),
      s(:def, :parse_require,
        s(:args,
          s(:arg, :context),
          s(:arg, :comment)),
        s(:begin,
          s(:send, nil, :skip_tkspace_comment),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:if,
            s(:send,
              s(:const, nil, :TkLPAREN), :===,
              s(:lvar, :tk)),
            s(:begin,
              s(:send, nil, :skip_tkspace_comment),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk))), nil),
          s(:if,
            s(:send,
              s(:const, nil, :TkSTRING), :===,
              s(:lvar, :tk)),
            s(:lvasgn, :name,
              s(:send,
                s(:lvar, :tk), :text)), nil),
          s(:if,
            s(:lvar, :name),
            s(:send,
              s(:ivar, :@top_level), :add_require,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Require), :new,
                s(:lvar, :name),
                s(:lvar, :comment))),
            s(:send, nil, :unget_tk,
              s(:lvar, :tk))))),
      s(:def, :parse_rescue,
        s(:args),
        s(:begin,
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:while,
            s(:lvasgn, :tk,
              s(:send, nil, :get_tk)),
            s(:begin,
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkNL),
                  s(:const, nil, :TkSEMICOLON),
                  s(:break)),
                s(:when,
                  s(:const, nil, :TkCOMMA),
                  s(:begin,
                    s(:send, nil, :skip_tkspace,
                      s(:false)),
                    s(:if,
                      s(:send,
                        s(:const, nil, :TkNL), :===,
                        s(:send, nil, :peek_tk)),
                      s(:send, nil, :get_tk), nil))), nil),
              s(:send, nil, :skip_tkspace,
                s(:false)))))),
      s(:def, :parse_statements,
        s(:args,
          s(:arg, :container),
          s(:optarg, :single,
            s(:const, nil, :NORMAL)),
          s(:optarg, :current_method,
            s(:nil)),
          s(:optarg, :comment,
            s(:send, nil, :new_comment,
              s(:str, "")))),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Comment), :===,
              s(:lvar, :comment)), nil,
            s(:send, nil, :raise,
              s(:str, "no"))),
          s(:if,
            s(:ivar, :@encoding),
            s(:send,
              s(:lvar, :comment), :force_encoding,
              s(:ivar, :@encoding)), nil),
          s(:lvasgn, :nest,
            s(:int, 1)),
          s(:lvasgn, :save_visibility,
            s(:send,
              s(:lvar, :container), :visibility)),
          s(:lvasgn, :non_comment_seen,
            s(:true)),
          s(:while,
            s(:lvasgn, :tk,
              s(:send, nil, :get_tk)),
            s(:begin,
              s(:lvasgn, :keep_comment,
                s(:false)),
              s(:lvasgn, :try_parse_comment,
                s(:false)),
              s(:if,
                s(:send,
                  s(:const, nil, :TkCOMMENT), :===,
                  s(:lvar, :tk)), nil,
                s(:lvasgn, :non_comment_seen,
                  s(:true))),
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkNL),
                  s(:begin,
                    s(:send, nil, :skip_tkspace),
                    s(:lvasgn, :tk,
                      s(:send, nil, :get_tk)),
                    s(:if,
                      s(:send,
                        s(:const, nil, :TkCOMMENT), :===,
                        s(:lvar, :tk)),
                      s(:begin,
                        s(:if,
                          s(:lvar, :non_comment_seen),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :comment), :empty?), nil,
                              s(:lvasgn, :non_comment_seen,
                                s(:send, nil, :parse_comment,
                                  s(:lvar, :container),
                                  s(:lvar, :tk),
                                  s(:lvar, :comment)))),
                            s(:lvasgn, :comment,
                              s(:str, "")),
                            s(:if,
                              s(:ivar, :@encoding),
                              s(:send,
                                s(:lvar, :comment), :force_encoding,
                                s(:ivar, :@encoding)), nil)), nil),
                        s(:while,
                          s(:send,
                            s(:const, nil, :TkCOMMENT), :===,
                            s(:lvar, :tk)),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :comment), :<<,
                                s(:send,
                                  s(:lvar, :tk), :text)), :<<,
                              s(:str, "\n")),
                            s(:lvasgn, :tk,
                              s(:send, nil, :get_tk)),
                            s(:if,
                              s(:send,
                                s(:const, nil, :TkNL), :===,
                                s(:lvar, :tk)),
                              s(:begin,
                                s(:send, nil, :skip_tkspace,
                                  s(:false)),
                                s(:lvasgn, :tk,
                                  s(:send, nil, :get_tk))), nil))),
                        s(:lvasgn, :comment,
                          s(:send, nil, :new_comment,
                            s(:lvar, :comment))),
                        s(:if,
                          s(:send,
                            s(:lvar, :comment), :empty?), nil,
                          s(:begin,
                            s(:send, nil, :look_for_directives_in,
                              s(:lvar, :container),
                              s(:lvar, :comment)),
                            s(:if,
                              s(:send,
                                s(:lvar, :container), :done_documenting),
                              s(:begin,
                                s(:if,
                                  s(:send,
                                    s(:const,
                                      s(:const, nil, :RDoc), :TopLevel), :===,
                                    s(:lvar, :container)),
                                  s(:send, nil, :throw,
                                    s(:sym, :eof)), nil),
                                s(:send,
                                  s(:lvar, :container), :ongoing_visibility=,
                                  s(:lvar, :save_visibility))), nil))),
                        s(:lvasgn, :keep_comment,
                          s(:true))),
                      s(:lvasgn, :non_comment_seen,
                        s(:true))),
                    s(:send, nil, :unget_tk,
                      s(:lvar, :tk)),
                    s(:lvasgn, :keep_comment,
                      s(:true)))),
                s(:when,
                  s(:const, nil, :TkCLASS),
                  s(:send, nil, :parse_class,
                    s(:lvar, :container),
                    s(:lvar, :single),
                    s(:lvar, :tk),
                    s(:lvar, :comment))),
                s(:when,
                  s(:const, nil, :TkMODULE),
                  s(:send, nil, :parse_module,
                    s(:lvar, :container),
                    s(:lvar, :single),
                    s(:lvar, :tk),
                    s(:lvar, :comment))),
                s(:when,
                  s(:const, nil, :TkDEF),
                  s(:send, nil, :parse_method,
                    s(:lvar, :container),
                    s(:lvar, :single),
                    s(:lvar, :tk),
                    s(:lvar, :comment))),
                s(:when,
                  s(:const, nil, :TkCONSTANT),
                  s(:if,
                    s(:send, nil, :parse_constant,
                      s(:lvar, :container),
                      s(:lvar, :tk),
                      s(:lvar, :comment),
                      s(:lvar, :current_method)), nil,
                    s(:lvasgn, :try_parse_comment,
                      s(:true)))),
                s(:when,
                  s(:const, nil, :TkALIAS),
                  s(:if,
                    s(:lvar, :current_method), nil,
                    s(:send, nil, :parse_alias,
                      s(:lvar, :container),
                      s(:lvar, :single),
                      s(:lvar, :tk),
                      s(:lvar, :comment)))),
                s(:when,
                  s(:const, nil, :TkYIELD),
                  s(:if,
                    s(:send,
                      s(:lvar, :current_method), :nil?),
                    s(:if,
                      s(:send,
                        s(:lvar, :container), :document_self),
                      s(:send, nil, :warn,
                        s(:str, "Warning: yield outside of method")), nil),
                    s(:send, nil, :parse_yield,
                      s(:lvar, :container),
                      s(:lvar, :single),
                      s(:lvar, :tk),
                      s(:lvar, :current_method)))),
                s(:when,
                  s(:const, nil, :TkUNTIL),
                  s(:const, nil, :TkWHILE),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :nest), :+,
                      s(:int, 1)),
                    s(:send, nil, :skip_optional_do_after_expression))),
                s(:when,
                  s(:const, nil, :TkFOR),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :nest), :+,
                      s(:int, 1)),
                    s(:send, nil, :skip_for_variable),
                    s(:send, nil, :skip_optional_do_after_expression))),
                s(:when,
                  s(:const, nil, :TkCASE),
                  s(:const, nil, :TkDO),
                  s(:const, nil, :TkIF),
                  s(:const, nil, :TkUNLESS),
                  s(:const, nil, :TkBEGIN),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkSUPER),
                  s(:if,
                    s(:lvar, :current_method),
                    s(:send,
                      s(:lvar, :current_method), :calls_super=,
                      s(:true)), nil)),
                s(:when,
                  s(:const, nil, :TkRESCUE),
                  s(:send, nil, :parse_rescue)),
                s(:when,
                  s(:const, nil, :TkIDENTIFIER),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :nest), :==,
                          s(:int, 1)),
                        s(:send,
                          s(:lvar, :current_method), :nil?)),
                      s(:lvasgn, :keep_comment,
                        s(:send, nil, :parse_identifier,
                          s(:lvar, :container),
                          s(:lvar, :single),
                          s(:lvar, :tk),
                          s(:lvar, :comment))), nil),
                    s(:case,
                      s(:send,
                        s(:lvar, :tk), :name),
                      s(:when,
                        s(:str, "require"),
                        s(:send, nil, :parse_require,
                          s(:lvar, :container),
                          s(:lvar, :comment))),
                      s(:when,
                        s(:str, "include"),
                        s(:send, nil, :parse_extend_or_include,
                          s(:const,
                            s(:const, nil, :RDoc), :Include),
                          s(:lvar, :container),
                          s(:lvar, :comment))),
                      s(:when,
                        s(:str, "extend"),
                        s(:send, nil, :parse_extend_or_include,
                          s(:const,
                            s(:const, nil, :RDoc), :Extend),
                          s(:lvar, :container),
                          s(:lvar, :comment))), nil))),
                s(:when,
                  s(:const, nil, :TkEND),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :nest), :-,
                      s(:int, 1)),
                    s(:if,
                      s(:send,
                        s(:lvar, :nest), :==,
                        s(:int, 0)),
                      s(:begin,
                        s(:send, nil, :read_documentation_modifiers,
                          s(:lvar, :container),
                          s(:const,
                            s(:const, nil, :RDoc), :CLASS_MODIFIERS)),
                        s(:send,
                          s(:lvar, :container), :ongoing_visibility=,
                          s(:lvar, :save_visibility)),
                        s(:if,
                          s(:send,
                            s(:lvar, :comment), :empty?), nil,
                          s(:send, nil, :parse_comment,
                            s(:lvar, :container),
                            s(:lvar, :tk),
                            s(:lvar, :comment))),
                        s(:return)), nil))),
                s(:lvasgn, :try_parse_comment,
                  s(:send,
                    s(:lvar, :nest), :==,
                    s(:int, 1)))),
              s(:if,
                s(:lvar, :try_parse_comment),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :comment), :empty?), nil,
                    s(:lvasgn, :non_comment_seen,
                      s(:send, nil, :parse_comment,
                        s(:lvar, :container),
                        s(:lvar, :tk),
                        s(:lvar, :comment)))),
                  s(:lvasgn, :keep_comment,
                    s(:false))), nil),
              s(:if,
                s(:lvar, :keep_comment), nil,
                s(:begin,
                  s(:lvasgn, :comment,
                    s(:send, nil, :new_comment,
                      s(:str, ""))),
                  s(:if,
                    s(:ivar, :@encoding),
                    s(:send,
                      s(:lvar, :comment), :force_encoding,
                      s(:ivar, :@encoding)), nil),
                  s(:send,
                    s(:lvar, :container), :params=,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :container), :block_params=,
                    s(:nil)))),
              s(:send, nil, :consume_trailing_spaces))),
          s(:send,
            s(:lvar, :container), :params=,
            s(:nil)),
          s(:send,
            s(:lvar, :container), :block_params=,
            s(:nil)))),
      s(:def, :parse_symbol_arg,
        s(:args,
          s(:optarg, :no,
            s(:nil))),
        s(:begin,
          s(:send, nil, :skip_tkspace_comment),
          s(:case,
            s(:lvasgn, :tk,
              s(:send, nil, :get_tk)),
            s(:when,
              s(:const, nil, :TkLPAREN),
              s(:send, nil, :parse_symbol_arg_paren,
                s(:lvar, :no))),
            s(:send, nil, :parse_symbol_arg_space,
              s(:lvar, :no),
              s(:lvar, :tk))))),
      s(:def, :parse_symbol_arg_paren,
        s(:args,
          s(:arg, :no)),
        s(:begin,
          s(:lvasgn, :args,
            s(:array)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:send, nil, :skip_tkspace_comment),
              s(:if,
                s(:lvasgn, :tk1,
                  s(:send, nil, :parse_symbol_in_arg)),
                s(:begin,
                  s(:send,
                    s(:lvar, :args), :push,
                    s(:lvar, :tk1)),
                  s(:if,
                    s(:and,
                      s(:lvar, :no),
                      s(:send,
                        s(:send,
                          s(:lvar, :args), :size), :>=,
                        s(:lvar, :no))),
                    s(:break), nil)), nil),
              s(:send, nil, :skip_tkspace_comment),
              s(:case,
                s(:lvasgn, :tk2,
                  s(:send, nil, :get_tk)),
                s(:when,
                  s(:const, nil, :TkRPAREN),
                  s(:break)),
                s(:when,
                  s(:const, nil, :TkCOMMA), nil),
                s(:begin,
                  s(:if,
                    s(:gvar, :$DEBUG_RDOC),
                    s(:send, nil, :warn,
                      s(:dstr,
                        s(:str, "unexpected token: '"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :tk2), :inspect)),
                        s(:str, "'"))), nil),
                  s(:break))))),
          s(:lvar, :args))),
      s(:def, :parse_symbol_arg_space,
        s(:args,
          s(:arg, :no),
          s(:arg, :tk)),
        s(:begin,
          s(:lvasgn, :args,
            s(:array)),
          s(:send, nil, :unget_tk,
            s(:lvar, :tk)),
          s(:if,
            s(:lvasgn, :tk,
              s(:send, nil, :parse_symbol_in_arg)),
            s(:begin,
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :tk)),
              s(:if,
                s(:and,
                  s(:lvar, :no),
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :size), :>=,
                    s(:lvar, :no))),
                s(:return,
                  s(:lvar, :args)), nil)), nil),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:send, nil, :skip_tkspace,
                s(:false)),
              s(:lvasgn, :tk1,
                s(:send, nil, :get_tk)),
              s(:if,
                s(:send,
                  s(:const, nil, :TkCOMMA), :===,
                  s(:lvar, :tk1)), nil,
                s(:begin,
                  s(:send, nil, :unget_tk,
                    s(:lvar, :tk1)),
                  s(:break))),
              s(:send, nil, :skip_tkspace_comment),
              s(:if,
                s(:lvasgn, :tk,
                  s(:send, nil, :parse_symbol_in_arg)),
                s(:begin,
                  s(:send,
                    s(:lvar, :args), :push,
                    s(:lvar, :tk)),
                  s(:if,
                    s(:and,
                      s(:lvar, :no),
                      s(:send,
                        s(:send,
                          s(:lvar, :args), :size), :>=,
                        s(:lvar, :no))),
                    s(:break), nil)), nil))),
          s(:lvar, :args))),
      s(:def, :parse_symbol_in_arg,
        s(:args),
        s(:case,
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:when,
            s(:const, nil, :TkSYMBOL),
            s(:send,
              s(:send,
                s(:lvar, :tk), :text), :sub,
              s(:regexp,
                s(:str, "^:"),
                s(:regopt)),
              s(:str, ""))),
          s(:when,
            s(:const, nil, :TkSTRING),
            s(:send, nil, :eval,
              s(:send,
                s(:ivar, :@read), :[],
                s(:int, -1)))),
          s(:when,
            s(:const, nil, :TkDSTRING),
            s(:const, nil, :TkIDENTIFIER),
            s(:nil)),
          s(:begin,
            s(:if,
              s(:gvar, :$DEBUG_RDOC),
              s(:send, nil, :warn,
                s(:dstr,
                  s(:str, "Expected symbol or string, got "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :tk), :inspect)))), nil),
            s(:nil)))),
      s(:def, :parse_top_level_statements,
        s(:args,
          s(:arg, :container)),
        s(:begin,
          s(:lvasgn, :comment,
            s(:send, nil, :collect_first_comment)),
          s(:send, nil, :look_for_directives_in,
            s(:lvar, :container),
            s(:lvar, :comment)),
          s(:if,
            s(:send,
              s(:lvar, :container), :done_documenting),
            s(:send, nil, :throw,
              s(:sym, :eof)), nil),
          s(:ivasgn, :@markup,
            s(:send,
              s(:lvar, :comment), :format)),
          s(:if,
            s(:send,
              s(:lvar, :comment), :empty?), nil,
            s(:if,
              s(:send,
                s(:lvar, :container), :document_self),
              s(:send,
                s(:lvar, :container), :comment=,
                s(:lvar, :comment)), nil)),
          s(:send, nil, :parse_statements,
            s(:lvar, :container),
            s(:const, nil, :NORMAL),
            s(:nil),
            s(:lvar, :comment)))),
      s(:def, :parse_visibility,
        s(:args,
          s(:arg, :container),
          s(:arg, :single),
          s(:arg, :tk)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :vis_type),
              s(:lvasgn, :vis),
              s(:lvasgn, :singleton)),
            s(:send, nil, :get_visibility_information,
              s(:lvar, :tk),
              s(:lvar, :single))),
          s(:send, nil, :skip_tkspace_comment,
            s(:false)),
          s(:case,
            s(:send, nil, :peek_tk),
            s(:when,
              s(:const, nil, :TkNL),
              s(:const, nil, :TkUNLESS_MOD),
              s(:const, nil, :TkIF_MOD),
              s(:const, nil, :TkSEMICOLON),
              s(:send,
                s(:lvar, :container), :ongoing_visibility=,
                s(:lvar, :vis))),
            s(:send, nil, :update_visibility,
              s(:lvar, :container),
              s(:lvar, :vis_type),
              s(:lvar, :vis),
              s(:lvar, :singleton))))),
      s(:def, :parse_yield,
        s(:args,
          s(:arg, :context),
          s(:arg, :single),
          s(:arg, :tk),
          s(:arg, :method)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :method), :block_params),
            s(:return), nil),
          s(:send, nil, :get_tkread),
          s(:send,
            s(:ivar, :@scanner), :continue=,
            s(:false)),
          s(:send,
            s(:lvar, :method), :block_params=,
            s(:send, nil, :parse_method_or_yield_parameters)))),
      s(:def, :read_directive,
        s(:args,
          s(:arg, :allowed)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :tokens,
              s(:array)),
            s(:while,
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)),
              s(:begin,
                s(:send,
                  s(:lvar, :tokens), :<<,
                  s(:lvar, :tk)),
                s(:case,
                  s(:lvar, :tk),
                  s(:when,
                    s(:const, nil, :TkNL),
                    s(:const, nil, :TkDEF),
                    s(:return)),
                  s(:when,
                    s(:const, nil, :TkCOMMENT),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :tk), :text), :=~,
                          s(:regexp,
                            s(:str, "\\s*:?([\\w-]+):\\s*(.*)"),
                            s(:regopt))), nil,
                        s(:return)),
                      s(:lvasgn, :directive,
                        s(:send,
                          s(:nth_ref, 1), :downcase)),
                      s(:if,
                        s(:send,
                          s(:lvar, :allowed), :include?,
                          s(:lvar, :directive)),
                        s(:return,
                          s(:array,
                            s(:lvar, :directive),
                            s(:nth_ref, 2))), nil),
                      s(:return))), nil)))),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :tokens), :length), :==,
                s(:int, 1)),
              s(:send,
                s(:const, nil, :TkCOMMENT), :===,
                s(:send,
                  s(:lvar, :tokens), :first))), nil,
            s(:block,
              s(:send,
                s(:lvar, :tokens), :reverse_each),
              s(:args,
                s(:arg, :token)),
              s(:send, nil, :unget_tk,
                s(:lvar, :token)))))),
      s(:def, :read_documentation_modifiers,
        s(:args,
          s(:arg, :context),
          s(:arg, :allowed)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :directive),
              s(:lvasgn, :value)),
            s(:send, nil, :read_directive,
              s(:lvar, :allowed))),
          s(:if,
            s(:lvar, :directive), nil,
            s(:return)),
          s(:block,
            s(:send,
              s(:ivar, :@preprocess), :handle_directive,
              s(:str, ""),
              s(:lvar, :directive),
              s(:lvar, :value),
              s(:lvar, :context)),
            s(:args,
              s(:arg, :dir),
              s(:arg, :param)),
            s(:if,
              s(:send,
                s(:array,
                  s(:str, "notnew"),
                  s(:str, "not_new"),
                  s(:str, "not-new")), :include?,
                s(:lvar, :dir)),
              s(:begin,
                s(:send,
                  s(:lvar, :context), :dont_rename_initialize=,
                  s(:true)),
                s(:true)), nil)))),
      s(:def, :record_location,
        s(:args,
          s(:arg, :container)),
        s(:begin,
          s(:case,
            s(:lvar, :container),
            s(:when,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule),
              s(:send,
                s(:ivar, :@top_level), :add_to_classes_or_modules,
                s(:lvar, :container))), nil),
          s(:send,
            s(:lvar, :container), :record_location,
            s(:ivar, :@top_level)))),
      s(:def, :remove_private_comments,
        s(:args,
          s(:arg, :comment)),
        s(:send,
          s(:lvar, :comment), :remove_private)),
      s(:def, :scan,
        s(:args),
        s(:begin,
          s(:send, nil, :reset),
          s(:block,
            s(:send, nil, :catch,
              s(:sym, :eof)),
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :parse_top_level_statements,
                  s(:ivar, :@top_level)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :StandardError)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:lvasgn, :bytes,
                      s(:str, "")),
                    s(:block,
                      s(:send,
                        s(:int, 20), :times),
                      s(:args),
                      s(:send,
                        s(:ivar, :@scanner), :ungetc)),
                    s(:lvasgn, :count,
                      s(:int, 0)),
                    s(:block,
                      s(:send,
                        s(:int, 60), :times),
                      s(:args,
                        s(:arg, :i)),
                      s(:begin,
                        s(:lvasgn, :count,
                          s(:lvar, :i)),
                        s(:lvasgn, :byte,
                          s(:send,
                            s(:ivar, :@scanner), :getc)),
                        s(:if,
                          s(:lvar, :byte), nil,
                          s(:break)),
                        s(:send,
                          s(:lvar, :bytes), :<<,
                          s(:lvar, :byte)))),
                    s(:op_asgn,
                      s(:lvasgn, :count), :-,
                      s(:int, 20)),
                    s(:block,
                      s(:send,
                        s(:lvar, :count), :times),
                      s(:args),
                      s(:send,
                        s(:ivar, :@scanner), :ungetc)),
                    s(:send,
                      s(:gvar, :$stderr), :puts,
                      s(:dstr,
                        s(:str, "\n"),
                        s(:begin,
                          s(:send,
                            s(:self), :class)),
                        s(:str, " failure around line "),
                        s(:begin,
                          s(:send,
                            s(:ivar, :@scanner), :line_no)),
                        s(:str, " of\n"),
                        s(:begin,
                          s(:ivar, :@file_name)),
                        s(:str, "\n"),
                        s(:str, "\n"))),
                    s(:if,
                      s(:send,
                        s(:lvar, :bytes), :empty?), nil,
                      s(:begin,
                        s(:send,
                          s(:gvar, :$stderr), :puts),
                        s(:send,
                          s(:gvar, :$stderr), :puts,
                          s(:send,
                            s(:lvar, :bytes), :inspect)))),
                    s(:send, nil, :raise,
                      s(:lvar, :e)))), nil))),
          s(:ivar, :@top_level))),
      s(:def, :skip_optional_do_after_expression,
        s(:args),
        s(:begin,
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:lvasgn, :end_token,
            s(:send, nil, :get_end_token,
              s(:lvar, :tk))),
          s(:lvasgn, :b_nest,
            s(:int, 0)),
          s(:lvasgn, :nest,
            s(:int, 0)),
          s(:send,
            s(:ivar, :@scanner), :continue=,
            s(:false)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:case,
                s(:lvar, :tk),
                s(:when,
                  s(:const, nil, :TkSEMICOLON),
                  s(:if,
                    s(:send,
                      s(:lvar, :b_nest), :zero?),
                    s(:break), nil)),
                s(:when,
                  s(:const, nil, :TkLPAREN),
                  s(:const, nil, :TkfLPAREN),
                  s(:op_asgn,
                    s(:lvasgn, :nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkBEGIN),
                  s(:op_asgn,
                    s(:lvasgn, :b_nest), :+,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkEND),
                  s(:op_asgn,
                    s(:lvasgn, :b_nest), :-,
                    s(:int, 1))),
                s(:when,
                  s(:const, nil, :TkDO),
                  s(:if,
                    s(:send,
                      s(:lvar, :nest), :zero?),
                    s(:break), nil)),
                s(:when,
                  s(:lvar, :end_token),
                  s(:if,
                    s(:send,
                      s(:lvar, :end_token), :==,
                      s(:const, nil, :TkRPAREN)),
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :nest), :-,
                        s(:int, 1)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:ivar, :@scanner), :lex_state), :==,
                            s(:sym, :EXPR_END)),
                          s(:send,
                            s(:lvar, :nest), :zero?)),
                        s(:break), nil)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@scanner), :continue), nil,
                      s(:break)))),
                s(:when,
                  s(:nil),
                  s(:break)), nil),
              s(:lvasgn, :tk,
                s(:send, nil, :get_tk)))),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:if,
            s(:send,
              s(:const, nil, :TkDO), :===,
              s(:send, nil, :peek_tk)),
            s(:send, nil, :get_tk), nil))),
      s(:def, :skip_for_variable,
        s(:args),
        s(:begin,
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:send, nil, :get_tk),
          s(:send, nil, :skip_tkspace,
            s(:false)),
          s(:lvasgn, :tk,
            s(:send, nil, :get_tk)),
          s(:if,
            s(:send,
              s(:const, nil, :TkIN), :===,
              s(:lvar, :tk)), nil,
            s(:send, nil, :unget_tk,
              s(:lvar, :tk))))),
      s(:def, :skip_method,
        s(:args,
          s(:arg, :container)),
        s(:begin,
          s(:lvasgn, :meth,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :AnyMethod), :new,
              s(:str, ""),
              s(:str, "anon"))),
          s(:send, nil, :parse_method_parameters,
            s(:lvar, :meth)),
          s(:send, nil, :parse_statements,
            s(:lvar, :container),
            s(:false),
            s(:lvar, :meth)))),
      s(:def, :skip_tkspace_comment,
        s(:args,
          s(:optarg, :skip_nl,
            s(:true))),
        s(:block,
          s(:send, nil, :loop),
          s(:args),
          s(:begin,
            s(:send, nil, :skip_tkspace,
              s(:lvar, :skip_nl)),
            s(:if,
              s(:send,
                s(:const, nil, :TkCOMMENT), :===,
                s(:send, nil, :peek_tk)), nil,
              s(:return)),
            s(:send, nil, :get_tk)))),
      s(:def, :update_visibility,
        s(:args,
          s(:arg, :container),
          s(:arg, :vis_type),
          s(:arg, :vis),
          s(:arg, :singleton)),
        s(:begin,
          s(:lvasgn, :new_methods,
            s(:array)),
          s(:case,
            s(:lvar, :vis_type),
            s(:when,
              s(:str, "module_function"),
              s(:begin,
                s(:lvasgn, :args,
                  s(:send, nil, :parse_symbol_arg)),
                s(:send,
                  s(:lvar, :container), :set_visibility_for,
                  s(:lvar, :args),
                  s(:sym, :private),
                  s(:false)),
                s(:block,
                  s(:send,
                    s(:lvar, :container), :methods_matching,
                    s(:lvar, :args)),
                  s(:args,
                    s(:arg, :m)),
                  s(:begin,
                    s(:lvasgn, :s_m,
                      s(:send,
                        s(:lvar, :m), :dup)),
                    s(:send, nil, :record_location,
                      s(:lvar, :s_m)),
                    s(:send,
                      s(:lvar, :s_m), :singleton=,
                      s(:true)),
                    s(:send,
                      s(:lvar, :new_methods), :<<,
                      s(:lvar, :s_m)))))),
            s(:when,
              s(:str, "public_class_method"),
              s(:str, "private_class_method"),
              s(:begin,
                s(:lvasgn, :args,
                  s(:send, nil, :parse_symbol_arg)),
                s(:block,
                  s(:send,
                    s(:lvar, :container), :methods_matching,
                    s(:lvar, :args),
                    s(:true)),
                  s(:args,
                    s(:arg, :m)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :m), :parent), :!=,
                        s(:lvar, :container)),
                      s(:begin,
                        s(:lvasgn, :m,
                          s(:send,
                            s(:lvar, :m), :dup)),
                        s(:send, nil, :record_location,
                          s(:lvar, :m)),
                        s(:send,
                          s(:lvar, :new_methods), :<<,
                          s(:lvar, :m))), nil),
                    s(:send,
                      s(:lvar, :m), :visibility=,
                      s(:lvar, :vis)))))),
            s(:begin,
              s(:lvasgn, :args,
                s(:send, nil, :parse_symbol_arg)),
              s(:send,
                s(:lvar, :container), :set_visibility_for,
                s(:lvar, :args),
                s(:lvar, :vis),
                s(:lvar, :singleton)))),
          s(:block,
            s(:send,
              s(:lvar, :new_methods), :each),
            s(:args,
              s(:arg, :method)),
            s(:begin,
              s(:case,
                s(:lvar, :method),
                s(:when,
                  s(:const,
                    s(:const, nil, :RDoc), :AnyMethod),
                  s(:send,
                    s(:lvar, :container), :add_method,
                    s(:lvar, :method))),
                s(:when,
                  s(:const,
                    s(:const, nil, :RDoc), :Attr),
                  s(:send,
                    s(:lvar, :container), :add_attribute,
                    s(:lvar, :method))), nil),
              s(:send,
                s(:lvar, :method), :visibility=,
                s(:lvar, :vis)))))),
      s(:def, :warn,
        s(:args,
          s(:arg, :message)),
        s(:send,
          s(:ivar, :@options), :warn,
          s(:send, nil, :make_message,
            s(:lvar, :message)))))))
