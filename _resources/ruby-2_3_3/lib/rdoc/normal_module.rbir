s(:class,
  s(:const,
    s(:const, nil, :RDoc), :NormalModule),
  s(:const,
    s(:const, nil, :RDoc), :ClassModule),
  s(:begin,
    s(:def, :aref_prefix,
      s(:args),
      s(:str, "module")),
    s(:def, :inspect,
      s(:args),
      s(:send,
        s(:str, "#<%s:0x%x module %s includes: %p extends: %p attributes: %p methods: %p aliases: %p>"), :%,
        s(:array,
          s(:send,
            s(:self), :class),
          s(:send, nil, :object_id),
          s(:send, nil, :full_name),
          s(:ivar, :@includes),
          s(:ivar, :@extends),
          s(:ivar, :@attributes),
          s(:ivar, :@method_list),
          s(:ivar, :@aliases)))),
    s(:def, :definition,
      s(:args),
      s(:dstr,
        s(:str, "module "),
        s(:begin,
          s(:send, nil, :full_name)))),
    s(:def, :module?,
      s(:args),
      s(:true)),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:block,
        s(:send,
          s(:lvar, :q), :group,
          s(:int, 2),
          s(:dstr,
            s(:str, "[module "),
            s(:begin,
              s(:send, nil, :full_name)),
            s(:str, ": ")),
          s(:str, "]")),
        s(:args),
        s(:begin,
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "includes:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:ivar, :@includes)),
            s(:args,
              s(:arg, :inc)),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :inc))),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "constants:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:ivar, :@constants)),
            s(:args,
              s(:arg, :const)),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :const))),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "attributes:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:ivar, :@attributes)),
            s(:args,
              s(:arg, :attr)),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :attr))),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "methods:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:ivar, :@method_list)),
            s(:args,
              s(:arg, :meth)),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :meth))),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "aliases:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:ivar, :@aliases)),
            s(:args,
              s(:arg, :aliaz)),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :aliaz))),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "comment:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :pp,
            s(:send, nil, :comment))))),
    s(:def, :superclass,
      s(:args),
      s(:send, nil, :raise,
        s(:const, nil, :NoMethodError),
        s(:dstr,
          s(:begin,
            s(:send, nil, :full_name)),
          s(:str, " is a module"))))))
