s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:kwbegin,
    s(:rescue,
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :Test), :Unit)), nil,
        s(:send, nil, :gem,
          s(:str, "minitest"),
          s(:str, "~> 4.0"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :NoMethodError),
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "minitest/autorun")),
  s(:if,
    s(:send,
      s(:const, nil, :ENV), :[],
      s(:str, "BENCHMARK")),
    s(:send, nil, :require,
      s(:str, "minitest/benchmark")), nil),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:send, nil, :require,
    s(:str, "rdoc")),
  s(:class,
    s(:const,
      s(:const, nil, :RDoc), :TestCase),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@top_level,
            s(:nil)),
          s(:ivasgn, :@have_encoding,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding))),
          s(:ivasgn, :@RM,
            s(:const,
              s(:const, nil, :RDoc), :Markup)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :PreProcess), :reset),
          s(:ivasgn, :@pwd,
            s(:send,
              s(:const, nil, :Dir), :pwd)),
          s(:ivasgn, :@store,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new)),
          s(:ivasgn, :@rdoc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :new)),
          s(:send,
            s(:ivar, :@rdoc), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:ivar, :@rdoc), :options=,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:lvasgn, :g,
            s(:send,
              s(:const, nil, :Object), :new)),
          s(:defs,
            s(:lvar, :g), :class_dir,
            s(:args), nil),
          s(:defs,
            s(:lvar, :g), :file_dir,
            s(:args), nil),
          s(:send,
            s(:ivar, :@rdoc), :generator=,
            s(:lvar, :g)))),
      s(:def, :assert_file,
        s(:args,
          s(:arg, :path)),
        s(:send, nil, :assert,
          s(:send,
            s(:const, nil, :File), :file?,
            s(:lvar, :path)),
          s(:dstr,
            s(:begin,
              s(:lvar, :path)),
            s(:str, " is not a file")))),
      s(:def, :assert_directory,
        s(:args,
          s(:arg, :path)),
        s(:send, nil, :assert,
          s(:send,
            s(:const, nil, :File), :directory?,
            s(:lvar, :path)),
          s(:dstr,
            s(:begin,
              s(:lvar, :path)),
            s(:str, " is not a directory")))),
      s(:def, :refute_file,
        s(:args,
          s(:arg, :path)),
        s(:send, nil, :refute,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:lvar, :path)),
          s(:dstr,
            s(:begin,
              s(:lvar, :path)),
            s(:str, " exists")))),
      s(:def, :blank_line,
        s(:args),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :BlankLine), :new)),
      s(:def, :block,
        s(:args,
          s(:restarg, :contents)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :BlockQuote), :new,
          s(:splat,
            s(:lvar, :contents)))),
      s(:def, :comment,
        s(:args,
          s(:arg, :text),
          s(:optarg, :top_level,
            s(:ivar, :@top_level))),
        s(:send,
          s(:const,
            s(:const, nil, :RDoc), :Comment), :new,
          s(:lvar, :text),
          s(:lvar, :top_level))),
      s(:def, :doc,
        s(:args,
          s(:restarg, :contents)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :Document), :new,
          s(:splat,
            s(:lvar, :contents)))),
      s(:def, :hard_break,
        s(:args),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :HardBreak), :new)),
      s(:def, :head,
        s(:args,
          s(:arg, :level),
          s(:arg, :text)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :Heading), :new,
          s(:lvar, :level),
          s(:lvar, :text))),
      s(:def, :item,
        s(:args,
          s(:optarg, :label,
            s(:nil)),
          s(:restarg, :parts)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :ListItem), :new,
          s(:lvar, :label),
          s(:splat,
            s(:lvar, :parts)))),
      s(:def, :list,
        s(:args,
          s(:optarg, :type,
            s(:nil)),
          s(:restarg, :items)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :List), :new,
          s(:lvar, :type),
          s(:splat,
            s(:lvar, :items)))),
      s(:def, :mu_pp,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:lvasgn, :s,
            s(:str, "")),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :PP), :pp,
              s(:lvar, :obj),
              s(:lvar, :s))),
          s(:if,
            s(:defined?,
              s(:const, nil, :Encoding)),
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :s), :force_encoding,
                s(:send,
                  s(:const, nil, :Encoding), :default_external))), nil),
          s(:send,
            s(:lvar, :s), :chomp))),
      s(:def, :para,
        s(:args,
          s(:restarg, :a)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :Paragraph), :new,
          s(:splat,
            s(:lvar, :a)))),
      s(:def, :rule,
        s(:args,
          s(:arg, :weight)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :Rule), :new,
          s(:lvar, :weight))),
      s(:def, :raw,
        s(:args,
          s(:restarg, :contents)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :Raw), :new,
          s(:splat,
            s(:lvar, :contents)))),
      s(:def, :temp_dir,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Dir), :respond_to?,
              s(:sym, :mktmpdir)), nil,
            s(:send, nil, :skip,
              s(:str, "No Dir::mktmpdir, upgrade your ruby"))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :mktmpdir),
            s(:args,
              s(:arg, :temp_dir)),
            s(:block,
              s(:send,
                s(:const, nil, :Dir), :chdir,
                s(:lvar, :temp_dir)),
              s(:args),
              s(:yield,
                s(:lvar, :temp_dir)))))),
      s(:def, :verb,
        s(:args,
          s(:restarg, :parts)),
        s(:send,
          s(:const,
            s(:ivar, :@RM), :Verbatim), :new,
          s(:splat,
            s(:lvar, :parts)))),
      s(:def, :verbose_capture_io,
        s(:args),
        s(:block,
          s(:send, nil, :capture_io),
          s(:args),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :orig_verbose,
                  s(:gvar, :$VERBOSE)),
                s(:gvasgn, :$VERBOSE,
                  s(:true)),
                s(:yield)),
              s(:gvasgn, :$VERBOSE,
                s(:lvar, :orig_verbose)))))))),
  s(:if,
    s(:send,
      s(:const, nil, :RUBY_VERSION), :<,
      s(:str, "1.9")),
    s(:block,
      s(:send,
        s(:gvar, :$LOAD_PATH), :each),
      s(:args,
        s(:arg, :load_path)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :load_path), :[],
              s(:int, 0)), :==,
            s(:str, "/")),
          s(:break), nil),
        s(:send,
          s(:lvar, :load_path), :replace,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :load_path))))), nil))
