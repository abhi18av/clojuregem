s(:class,
  s(:const,
    s(:const, nil, :RDoc), :TomDoc),
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :Parser),
  s(:begin,
    s(:send, nil, :attr_reader,
      s(:sym, :tokens)),
    s(:defs,
      s(:self), :add_post_processor,
      s(:args),
      s(:block,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :PreProcess), :post_process),
        s(:args,
          s(:arg, :comment),
          s(:arg, :code_object)),
        s(:begin,
          s(:if,
            s(:and,
              s(:and,
                s(:lvar, :code_object),
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Comment), :===,
                  s(:lvar, :comment))),
              s(:send,
                s(:send,
                  s(:lvar, :comment), :format), :==,
                s(:str, "tomdoc"))), nil,
            s(:next)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :comment), :text), :gsub!,
              s(:regexp,
                s(:str, "(\\A\\s*# )(Public|Internal|Deprecated):\\s+"),
                s(:regopt))),
            s(:args),
            s(:begin,
              s(:lvasgn, :section,
                s(:send,
                  s(:lvar, :code_object), :add_section,
                  s(:nth_ref, 2))),
              s(:send,
                s(:lvar, :code_object), :temporary_section=,
                s(:lvar, :section)),
              s(:nth_ref, 1)))))),
    s(:send, nil, :add_post_processor),
    s(:defs,
      s(:self), :parse,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:lvasgn, :parser,
          s(:send, nil, :new)),
        s(:send,
          s(:lvar, :parser), :tokenize,
          s(:lvar, :text)),
        s(:lvasgn, :doc,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new)),
        s(:send,
          s(:lvar, :parser), :parse,
          s(:lvar, :doc)),
        s(:lvar, :doc))),
    s(:defs,
      s(:self), :signature,
      s(:args,
        s(:arg, :comment)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :comment), :tomdoc?), nil,
          s(:return)),
        s(:lvasgn, :document,
          s(:send,
            s(:lvar, :comment), :parse)),
        s(:lvasgn, :signature,
          s(:nil)),
        s(:lvasgn, :found_heading,
          s(:false)),
        s(:lvasgn, :found_signature,
          s(:false)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :document), :parts), :delete_if),
          s(:args,
            s(:arg, :part)),
          s(:begin,
            s(:if,
              s(:lvar, :found_signature),
              s(:next,
                s(:false)), nil),
            s(:or_asgn,
              s(:lvasgn, :found_heading),
              s(:and,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :===,
                  s(:lvar, :part)),
                s(:send,
                  s(:send,
                    s(:lvar, :part), :text), :==,
                  s(:str, "Signature")))),
            s(:if,
              s(:lvar, :found_heading), nil,
              s(:next,
                s(:false))),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :BlankLine), :===,
                s(:lvar, :part)),
              s(:next,
                s(:true)), nil),
            s(:if,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Verbatim), :===,
                s(:lvar, :part)),
              s(:begin,
                s(:lvasgn, :signature,
                  s(:lvar, :part)),
                s(:lvasgn, :found_signature,
                  s(:true))), nil))),
        s(:and,
          s(:lvar, :signature),
          s(:send,
            s(:lvar, :signature), :text)))),
    s(:def, :initialize,
      s(:args),
      s(:begin,
        s(:zsuper),
        s(:ivasgn, :@section,
          s(:nil)),
        s(:ivasgn, :@seen_returns,
          s(:false)))),
    s(:def, :build_heading,
      s(:args,
        s(:arg, :level)),
      s(:begin,
        s(:lvasgn, :heading,
          s(:zsuper)),
        s(:ivasgn, :@section,
          s(:send,
            s(:lvar, :heading), :text)),
        s(:lvar, :heading))),
    s(:def, :build_verbatim,
      s(:args,
        s(:arg, :margin)),
      s(:begin,
        s(:lvasgn, :verbatim,
          s(:zsuper)),
        s(:if,
          s(:send,
            s(:ivar, :@section), :==,
            s(:str, "Examples")),
          s(:send,
            s(:lvar, :verbatim), :format=,
            s(:sym, :ruby)), nil),
        s(:lvar, :verbatim))),
    s(:def, :build_paragraph,
      s(:args,
        s(:arg, :margin)),
      s(:begin,
        s(:if,
          s(:ivar, :@debug),
          s(:send, nil, :p,
            s(:hash,
              s(:pair,
                s(:sym, :paragraph_start),
                s(:lvar, :margin)))), nil),
        s(:lvasgn, :paragraph,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Paragraph), :new)),
        s(:until,
          s(:send,
            s(:ivar, :@tokens), :empty?),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :type),
                s(:lvasgn, :data)),
              s(:send, nil, :get)),
            s(:case,
              s(:lvar, :type),
              s(:when,
                s(:sym, :TEXT),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :data), :=~,
                      s(:regexp,
                        s(:str, "\\AReturns"),
                        s(:regopt))),
                    s(:ivasgn, :@section,
                      s(:str, "Returns")), nil),
                  s(:send,
                    s(:lvar, :paragraph), :<<,
                    s(:lvar, :data)))),
              s(:when,
                s(:sym, :NEWLINE),
                s(:if,
                  s(:send,
                    s(:sym, :TEXT), :==,
                    s(:send,
                      s(:send, nil, :peek_token), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:lvar, :paragraph), :<<,
                    s(:str, " ")),
                  s(:break))),
              s(:begin,
                s(:send, nil, :unget),
                s(:break))))),
        s(:if,
          s(:ivar, :@debug),
          s(:send, nil, :p,
            s(:hash,
              s(:pair,
                s(:sym, :paragraph_end),
                s(:lvar, :margin)))), nil),
        s(:lvar, :paragraph))),
    s(:def, :parse_text,
      s(:args,
        s(:arg, :parent),
        s(:arg, :indent)),
      s(:begin,
        s(:lvasgn, :paragraph,
          s(:send, nil, :build_paragraph,
            s(:lvar, :indent))),
        s(:if,
          s(:and,
            s(:send,
              s(:false), :==,
              s(:ivar, :@seen_returns)),
            s(:send,
              s(:str, "Returns"), :==,
              s(:ivar, :@section))),
          s(:begin,
            s(:ivasgn, :@seen_returns,
              s(:true)),
            s(:send,
              s(:lvar, :parent), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Heading), :new,
                s(:int, 3),
                s(:str, "Returns"))),
            s(:send,
              s(:lvar, :parent), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :BlankLine), :new))), nil),
        s(:send,
          s(:lvar, :parent), :<<,
          s(:lvar, :paragraph)))),
    s(:def, :tokenize,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:send,
          s(:lvar, :text), :sub!,
          s(:regexp,
            s(:str, "\\A(Public|Internal|Deprecated):\\s+"),
            s(:regopt)),
          s(:str, "")),
        s(:send, nil, :setup_scanner,
          s(:lvar, :text)),
        s(:until,
          s(:send,
            s(:ivar, :@s), :eos?),
          s(:begin,
            s(:lvasgn, :pos,
              s(:send,
                s(:ivar, :@s), :pos)),
            s(:if,
              s(:send,
                s(:ivar, :@s), :scan,
                s(:regexp,
                  s(:str, " +"),
                  s(:regopt))),
              s(:next), nil),
            s(:send,
              s(:ivar, :@tokens), :<<,
              s(:case, nil,
                s(:when,
                  s(:send,
                    s(:ivar, :@s), :scan,
                    s(:regexp,
                      s(:str, "\\r?\\n"),
                      s(:regopt))),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:array,
                        s(:sym, :NEWLINE),
                        s(:send,
                          s(:ivar, :@s), :matched),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos))))),
                    s(:ivasgn, :@line_pos,
                      s(:send, nil, :char_pos,
                        s(:send,
                          s(:ivar, :@s), :pos))),
                    s(:op_asgn,
                      s(:ivasgn, :@line), :+,
                      s(:int, 1)),
                    s(:lvar, :token))),
                s(:when,
                  s(:send,
                    s(:ivar, :@s), :scan,
                    s(:regexp,
                      s(:str, "(Examples|Signature)$"),
                      s(:regopt))),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@tokens), :<<,
                      s(:array,
                        s(:sym, :HEADER),
                        s(:int, 3),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos))))),
                    s(:array,
                      s(:sym, :TEXT),
                      s(:send,
                        s(:ivar, :@s), :[],
                        s(:int, 1)),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos)))))),
                s(:when,
                  s(:send,
                    s(:ivar, :@s), :scan,
                    s(:regexp,
                      s(:str, "([:\\w][\\w\\[\\]]*)[ ]+- "),
                      s(:regopt))),
                  s(:array,
                    s(:sym, :NOTE),
                    s(:send,
                      s(:ivar, :@s), :[],
                      s(:int, 1)),
                    s(:splat,
                      s(:send, nil, :token_pos,
                        s(:lvar, :pos))))),
                s(:begin,
                  s(:send,
                    s(:ivar, :@s), :scan,
                    s(:regexp,
                      s(:str, ".*"),
                      s(:regopt))),
                  s(:array,
                    s(:sym, :TEXT),
                    s(:send,
                      s(:send,
                        s(:ivar, :@s), :matched), :sub,
                      s(:regexp,
                        s(:str, "\\r$"),
                        s(:regopt)),
                      s(:str, "")),
                    s(:splat,
                      s(:send, nil, :token_pos,
                        s(:lvar, :pos))))))))),
        s(:self)))))
