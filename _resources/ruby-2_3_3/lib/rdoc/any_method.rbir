s(:class,
  s(:const,
    s(:const, nil, :RDoc), :AnyMethod),
  s(:const,
    s(:const, nil, :RDoc), :MethodAttr),
  s(:begin,
    s(:casgn, nil, :MARSHAL_VERSION,
      s(:int, 3)),
    s(:send, nil, :attr_accessor,
      s(:sym, :dont_rename_initialize)),
    s(:send, nil, :attr_accessor,
      s(:sym, :c_function)),
    s(:send, nil, :attr_reader,
      s(:sym, :call_seq)),
    s(:send, nil, :attr_accessor,
      s(:sym, :params)),
    s(:send, nil, :attr_accessor,
      s(:sym, :calls_super)),
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :RDoc), :TokenStream)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :text),
        s(:arg, :name)),
      s(:begin,
        s(:zsuper),
        s(:ivasgn, :@c_function,
          s(:nil)),
        s(:ivasgn, :@dont_rename_initialize,
          s(:false)),
        s(:ivasgn, :@token_stream,
          s(:nil)),
        s(:ivasgn, :@calls_super,
          s(:false)),
        s(:ivasgn, :@superclass_method,
          s(:nil)))),
    s(:def, :add_alias,
      s(:args,
        s(:arg, :an_alias),
        s(:optarg, :context,
          s(:nil))),
      s(:begin,
        s(:lvasgn, :method,
          s(:send,
            s(:send,
              s(:self), :class), :new,
            s(:send,
              s(:lvar, :an_alias), :text),
            s(:send,
              s(:lvar, :an_alias), :new_name))),
        s(:send,
          s(:lvar, :method), :record_location,
          s(:send,
            s(:lvar, :an_alias), :file)),
        s(:send,
          s(:lvar, :method), :singleton=,
          s(:send,
            s(:self), :singleton)),
        s(:send,
          s(:lvar, :method), :params=,
          s(:send,
            s(:self), :params)),
        s(:send,
          s(:lvar, :method), :visibility=,
          s(:send,
            s(:self), :visibility)),
        s(:send,
          s(:lvar, :method), :comment=,
          s(:send,
            s(:lvar, :an_alias), :comment)),
        s(:send,
          s(:lvar, :method), :is_alias_for=,
          s(:self)),
        s(:send,
          s(:ivar, :@aliases), :<<,
          s(:lvar, :method)),
        s(:if,
          s(:lvar, :context),
          s(:send,
            s(:lvar, :context), :add_method,
            s(:lvar, :method)), nil),
        s(:lvar, :method))),
    s(:def, :aref_prefix,
      s(:args),
      s(:str, "method")),
    s(:def, :arglists,
      s(:args),
      s(:if,
        s(:ivar, :@call_seq),
        s(:ivar, :@call_seq),
        s(:if,
          s(:ivar, :@params),
          s(:dstr,
            s(:begin,
              s(:send, nil, :name)),
            s(:begin,
              s(:send, nil, :param_seq))), nil))),
    s(:def, :call_seq=,
      s(:args,
        s(:arg, :call_seq)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :call_seq), :empty?),
          s(:return), nil),
        s(:ivasgn, :@call_seq,
          s(:lvar, :call_seq)))),
    s(:def, :is_alias_for,
      s(:args),
      s(:case,
        s(:ivar, :@is_alias_for),
        s(:when,
          s(:const,
            s(:const, nil, :RDoc), :MethodAttr),
          s(:ivar, :@is_alias_for)),
        s(:when,
          s(:const, nil, :Array),
          s(:begin,
            s(:if,
              s(:ivar, :@store), nil,
              s(:return,
                s(:nil))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :klass_name),
                s(:lvasgn, :singleton),
                s(:lvasgn, :method_name)),
              s(:ivar, :@is_alias_for)),
            s(:if,
              s(:lvasgn, :klass,
                s(:send,
                  s(:ivar, :@store), :find_class_or_module,
                  s(:lvar, :klass_name))), nil,
              s(:return,
                s(:nil))),
            s(:ivasgn, :@is_alias_for,
              s(:send,
                s(:lvar, :klass), :find_method,
                s(:lvar, :method_name),
                s(:lvar, :singleton))))), nil)),
    s(:def, :marshal_dump,
      s(:args),
      s(:begin,
        s(:lvasgn, :aliases,
          s(:block,
            s(:send,
              s(:ivar, :@aliases), :map),
            s(:args,
              s(:arg, :a)),
            s(:array,
              s(:send,
                s(:lvar, :a), :name),
              s(:send, nil, :parse,
                s(:send,
                  s(:lvar, :a), :comment))))),
        s(:if,
          s(:ivar, :@is_alias_for),
          s(:lvasgn, :is_alias_for,
            s(:array,
              s(:send,
                s(:send,
                  s(:ivar, :@is_alias_for), :parent), :full_name),
              s(:send,
                s(:ivar, :@is_alias_for), :singleton),
              s(:send,
                s(:ivar, :@is_alias_for), :name))), nil),
        s(:array,
          s(:const, nil, :MARSHAL_VERSION),
          s(:ivar, :@name),
          s(:send, nil, :full_name),
          s(:ivar, :@singleton),
          s(:ivar, :@visibility),
          s(:send, nil, :parse,
            s(:ivar, :@comment)),
          s(:ivar, :@call_seq),
          s(:ivar, :@block_params),
          s(:lvar, :aliases),
          s(:ivar, :@params),
          s(:send,
            s(:ivar, :@file), :relative_name),
          s(:ivar, :@calls_super),
          s(:send,
            s(:ivar, :@parent), :name),
          s(:send,
            s(:ivar, :@parent), :class),
          s(:send,
            s(:ivar, :@section), :title),
          s(:lvar, :is_alias_for)))),
    s(:def, :marshal_load,
      s(:args,
        s(:arg, :array)),
      s(:begin,
        s(:send, nil, :initialize_visibility),
        s(:ivasgn, :@dont_rename_initialize,
          s(:nil)),
        s(:ivasgn, :@token_stream,
          s(:nil)),
        s(:ivasgn, :@aliases,
          s(:array)),
        s(:ivasgn, :@parent,
          s(:nil)),
        s(:ivasgn, :@parent_name,
          s(:nil)),
        s(:ivasgn, :@parent_class,
          s(:nil)),
        s(:ivasgn, :@section,
          s(:nil)),
        s(:ivasgn, :@file,
          s(:nil)),
        s(:lvasgn, :version,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 0))),
        s(:ivasgn, :@name,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 1))),
        s(:ivasgn, :@full_name,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 2))),
        s(:ivasgn, :@singleton,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 3))),
        s(:ivasgn, :@visibility,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 4))),
        s(:ivasgn, :@comment,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 5))),
        s(:ivasgn, :@call_seq,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 6))),
        s(:ivasgn, :@block_params,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 7))),
        s(:ivasgn, :@params,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 9))),
        s(:ivasgn, :@calls_super,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 11))),
        s(:ivasgn, :@parent_name,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 12))),
        s(:ivasgn, :@parent_title,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 13))),
        s(:ivasgn, :@section_title,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 14))),
        s(:ivasgn, :@is_alias_for,
          s(:send,
            s(:lvar, :array), :[],
            s(:int, 15))),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 8)), :each),
          s(:args,
            s(:arg, :new_name),
            s(:arg, :comment)),
          s(:send, nil, :add_alias,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Alias), :new,
              s(:nil),
              s(:ivar, :@name),
              s(:lvar, :new_name),
              s(:lvar, :comment),
              s(:ivar, :@singleton)))),
        s(:or_asgn,
          s(:ivasgn, :@parent_name),
          s(:if,
            s(:send,
              s(:ivar, :@full_name), :=~,
              s(:regexp,
                s(:str, "#"),
                s(:regopt))),
            s(:back_ref, :$`),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:ivar, :@full_name), :split,
                  s(:str, "::"))),
              s(:send,
                s(:lvar, :name), :pop),
              s(:send,
                s(:lvar, :name), :join,
                s(:str, "::"))))),
        s(:if,
          s(:send,
            s(:lvar, :version), :>,
            s(:int, 0)),
          s(:ivasgn, :@file,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :new,
              s(:send,
                s(:lvar, :array), :[],
                s(:int, 10)))), nil))),
    s(:def, :name,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@name),
          s(:return,
            s(:ivar, :@name)), nil),
        s(:if,
          s(:ivar, :@call_seq),
          s(:ivasgn, :@name,
            s(:or,
              s(:or,
                s(:send,
                  s(:ivar, :@call_seq), :[],
                  s(:regexp,
                    s(:str, "^.*?\\.(\\w+)"),
                    s(:regopt)),
                  s(:int, 1)),
                s(:send,
                  s(:ivar, :@call_seq), :[],
                  s(:regexp,
                    s(:str, "^.*?(\\w+)"),
                    s(:regopt)),
                  s(:int, 1))),
              s(:ivar, :@call_seq))), nil))),
    s(:def, :param_list,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@call_seq),
          s(:begin,
            s(:lvasgn, :params,
              s(:send,
                s(:send,
                  s(:ivar, :@call_seq), :split,
                  s(:str, "\n")), :last)),
            s(:lvasgn, :params,
              s(:send,
                s(:lvar, :params), :sub,
                s(:regexp,
                  s(:str, ".*?\\((.*)\\)"),
                  s(:regopt)),
                s(:str, "\\1"))),
            s(:lvasgn, :params,
              s(:send,
                s(:lvar, :params), :sub,
                s(:regexp,
                  s(:str, "(\\{|do)\\s*\\|([^|]*)\\|.*"),
                  s(:regopt)),
                s(:str, ",\\2")))),
          s(:if,
            s(:ivar, :@params),
            s(:begin,
              s(:lvasgn, :params,
                s(:send,
                  s(:ivar, :@params), :sub,
                  s(:regexp,
                    s(:str, "\\((.*)\\)"),
                    s(:regopt)),
                  s(:str, "\\1"))),
              s(:if,
                s(:ivar, :@block_params),
                s(:send,
                  s(:lvar, :params), :<<,
                  s(:dstr,
                    s(:str, ","),
                    s(:begin,
                      s(:ivar, :@block_params)))), nil)),
            s(:if,
              s(:ivar, :@block_params),
              s(:lvasgn, :params,
                s(:ivar, :@block_params)),
              s(:return,
                s(:array))))),
        s(:if,
          s(:ivar, :@block_params),
          s(:send,
            s(:lvar, :params), :sub!,
            s(:regexp,
              s(:str, ",?\\s*&\\w+"),
              s(:regopt)),
            s(:str, "")),
          s(:send,
            s(:lvar, :params), :sub!,
            s(:regexp,
              s(:str, "\\&(\\w+)"),
              s(:regopt)),
            s(:str, "\\1"))),
        s(:lvasgn, :params,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :params), :gsub,
                s(:regexp,
                  s(:str, "\\s+"),
                  s(:regopt)),
                s(:str, "")), :split,
              s(:str, ",")), :reject,
            s(:block_pass,
              s(:sym, :empty?)))),
        s(:block,
          s(:send,
            s(:lvar, :params), :map),
          s(:args,
            s(:arg, :param)),
          s(:send,
            s(:lvar, :param), :sub,
            s(:regexp,
              s(:str, "=.*"),
              s(:regopt)),
            s(:str, ""))))),
    s(:def, :param_seq,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@call_seq),
          s(:begin,
            s(:lvasgn, :params,
              s(:send,
                s(:send,
                  s(:ivar, :@call_seq), :split,
                  s(:str, "\n")), :last)),
            s(:lvasgn, :params,
              s(:send,
                s(:lvar, :params), :sub,
                s(:regexp,
                  s(:str, "[^( ]+"),
                  s(:regopt)),
                s(:str, ""))),
            s(:lvasgn, :params,
              s(:send,
                s(:lvar, :params), :sub,
                s(:regexp,
                  s(:str, "(\\|[^|]+\\|)\\s*\\.\\.\\.\\s*(end|\\})"),
                  s(:regopt)),
                s(:str, "\\1 \\2")))),
          s(:if,
            s(:ivar, :@params),
            s(:begin,
              s(:lvasgn, :params,
                s(:send,
                  s(:ivar, :@params), :gsub,
                  s(:regexp,
                    s(:str, "\\s*\\#.*"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:lvasgn, :params,
                s(:send,
                  s(:send,
                    s(:lvar, :params), :tr,
                    s(:str, "\n"),
                    s(:str, " ")), :squeeze,
                  s(:str, " "))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :params), :[],
                    s(:int, 0)), :==,
                  s(:str, "(")), nil,
                s(:lvasgn, :params,
                  s(:dstr,
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :params)),
                    s(:str, ")"))))),
            s(:lvasgn, :params,
              s(:str, "")))),
        s(:if,
          s(:ivar, :@block_params),
          s(:begin,
            s(:send,
              s(:lvar, :params), :sub!,
              s(:regexp,
                s(:str, ",?\\s*&\\w+"),
                s(:regopt)),
              s(:str, "")),
            s(:lvasgn, :block,
              s(:send,
                s(:ivar, :@block_params), :gsub,
                s(:regexp,
                  s(:str, "\\s*\\#.*"),
                  s(:regopt)),
                s(:str, ""))),
            s(:lvasgn, :block,
              s(:send,
                s(:send,
                  s(:lvar, :block), :tr,
                  s(:str, "\n"),
                  s(:str, " ")), :squeeze,
                s(:str, " "))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :block), :[],
                  s(:int, 0)), :==,
                s(:str, "(")),
              s(:send,
                s(:send,
                  s(:lvar, :block), :sub!,
                  s(:regexp,
                    s(:str, "^\\("),
                    s(:regopt)),
                  s(:str, "")), :sub!,
                s(:regexp,
                  s(:str, "\\)"),
                  s(:regopt)),
                s(:str, "")), nil),
            s(:send,
              s(:lvar, :params), :<<,
              s(:dstr,
                s(:str, " { |"),
                s(:begin,
                  s(:lvar, :block)),
                s(:str, "| ... }")))), nil),
        s(:lvar, :params))),
    s(:def, :store=,
      s(:args,
        s(:arg, :store)),
      s(:begin,
        s(:zsuper),
        s(:if,
          s(:ivar, :@file),
          s(:ivasgn, :@file,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:send,
                s(:ivar, :@file), :full_name))), nil))),
    s(:def, :superclass_method,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@calls_super), nil,
          s(:return)),
        s(:if,
          s(:ivar, :@superclass_method),
          s(:return,
            s(:ivar, :@superclass_method)), nil),
        s(:block,
          s(:send,
            s(:send, nil, :parent), :each_ancestor),
          s(:args,
            s(:arg, :ancestor)),
          s(:if,
            s(:lvasgn, :method,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :ancestor), :method_list), :find),
                s(:args,
                  s(:arg, :m)),
                s(:send,
                  s(:send,
                    s(:lvar, :m), :name), :==,
                  s(:ivar, :@name)))),
            s(:begin,
              s(:ivasgn, :@superclass_method,
                s(:lvar, :method)),
              s(:break)), nil)),
        s(:ivar, :@superclass_method)))))
