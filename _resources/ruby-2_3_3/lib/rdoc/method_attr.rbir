s(:class,
  s(:const,
    s(:const, nil, :RDoc), :MethodAttr),
  s(:const,
    s(:const, nil, :RDoc), :CodeObject),
  s(:begin,
    s(:send, nil, :include,
      s(:const, nil, :Comparable)),
    s(:send, nil, :attr_accessor,
      s(:sym, :name)),
    s(:send, nil, :attr_accessor,
      s(:sym, :visibility)),
    s(:send, nil, :attr_accessor,
      s(:sym, :singleton)),
    s(:send, nil, :attr_reader,
      s(:sym, :text)),
    s(:send, nil, :attr_reader,
      s(:sym, :aliases)),
    s(:send, nil, :attr_accessor,
      s(:sym, :is_alias_for)),
    s(:send, nil, :attr_reader,
      s(:sym, :block_params)),
    s(:send, nil, :attr_accessor,
      s(:sym, :params)),
    s(:send, nil, :attr_accessor,
      s(:sym, :call_seq)),
    s(:send, nil, :attr_reader,
      s(:sym, :arglists)),
    s(:send, nil, :attr_reader,
      s(:sym, :param_seq)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :text),
        s(:arg, :name)),
      s(:begin,
        s(:super),
        s(:ivasgn, :@text,
          s(:lvar, :text)),
        s(:ivasgn, :@name,
          s(:lvar, :name)),
        s(:ivasgn, :@aliases,
          s(:array)),
        s(:ivasgn, :@is_alias_for,
          s(:nil)),
        s(:ivasgn, :@parent_name,
          s(:nil)),
        s(:ivasgn, :@singleton,
          s(:nil)),
        s(:ivasgn, :@visibility,
          s(:sym, :public)),
        s(:ivasgn, :@see,
          s(:false)),
        s(:ivasgn, :@arglists,
          s(:nil)),
        s(:ivasgn, :@block_params,
          s(:nil)),
        s(:ivasgn, :@call_seq,
          s(:nil)),
        s(:ivasgn, :@param_seq,
          s(:nil)),
        s(:ivasgn, :@params,
          s(:nil)))),
    s(:def, :initialize_copy,
      s(:args,
        s(:arg, :other)),
      s(:ivasgn, :@full_name,
        s(:nil))),
    s(:def, :initialize_visibility,
      s(:args),
      s(:begin,
        s(:zsuper),
        s(:ivasgn, :@see,
          s(:nil)))),
    s(:def, :<=>,
      s(:args,
        s(:arg, :other)),
      s(:begin,
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :other), :respond_to?,
              s(:sym, :singleton)),
            s(:send,
              s(:lvar, :other), :respond_to?,
              s(:sym, :name))), nil,
          s(:return)),
        s(:send,
          s(:array,
            s(:if,
              s(:ivar, :@singleton),
              s(:int, 0),
              s(:int, 1)),
            s(:send, nil, :name)), :<=>,
          s(:array,
            s(:if,
              s(:send,
                s(:lvar, :other), :singleton),
              s(:int, 0),
              s(:int, 1)),
            s(:send,
              s(:lvar, :other), :name))))),
    s(:def, :==,
      s(:args,
        s(:arg, :other)),
      s(:and,
        s(:or,
          s(:send, nil, :equal?,
            s(:lvar, :other)),
          s(:send,
            s(:send,
              s(:self), :class), :==,
            s(:send,
              s(:lvar, :other), :class))),
        s(:send,
          s(:send, nil, :full_name), :==,
          s(:send,
            s(:lvar, :other), :full_name)))),
    s(:def, :documented?,
      s(:args),
      s(:or,
        s(:or,
          s(:zsuper),
          s(:begin,
            s(:and,
              s(:send, nil, :is_alias_for),
              s(:send,
                s(:send, nil, :is_alias_for), :documented?)))),
        s(:begin,
          s(:and,
            s(:send, nil, :see),
            s(:send,
              s(:send, nil, :see), :documented?))))),
    s(:def, :see,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@see), :==,
            s(:false)),
          s(:ivasgn, :@see,
            s(:send, nil, :find_see)), nil),
        s(:ivar, :@see))),
    s(:def, :store=,
      s(:args,
        s(:arg, :store)),
      s(:begin,
        s(:zsuper),
        s(:if,
          s(:ivar, :@file),
          s(:ivasgn, :@file,
            s(:send,
              s(:ivar, :@store), :add_file,
              s(:send,
                s(:ivar, :@file), :full_name))), nil))),
    s(:def, :find_see,
      s(:args),
      s(:begin,
        s(:if,
          s(:or,
            s(:send, nil, :singleton),
            s(:send, nil, :is_alias_for)),
          s(:return,
            s(:nil)), nil),
        s(:lvasgn, :other,
          s(:send, nil, :find_method_or_attribute,
            s(:send, nil, :name))),
        s(:if,
          s(:lvar, :other),
          s(:return,
            s(:lvar, :other)), nil),
        s(:if,
          s(:send,
            s(:send, nil, :name), :=~,
            s(:regexp,
              s(:str, "[a-z_]=$"),
              s(:regopt, :i))), nil,
          s(:return,
            s(:nil))),
        s(:return,
          s(:send, nil, :find_method_or_attribute,
            s(:send,
              s(:send, nil, :name), :[],
              s(:irange,
                s(:int, 0),
                s(:int, -2))))))),
    s(:def, :find_method_or_attribute,
      s(:args,
        s(:arg, :name)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send, nil, :parent), :respond_to?,
            s(:sym, :ancestors)), nil,
          s(:return,
            s(:nil))),
        s(:lvasgn, :searched,
          s(:send,
            s(:send, nil, :parent), :ancestors)),
        s(:lvasgn, :kernel,
          s(:send,
            s(:send,
              s(:ivar, :@store), :modules_hash), :[],
            s(:str, "Kernel"))),
        s(:if,
          s(:and,
            s(:and,
              s(:lvar, :kernel),
              s(:send,
                s(:send, nil, :parent), :!=,
                s(:lvar, :kernel))),
            s(:send,
              s(:send,
                s(:lvar, :searched), :include?,
                s(:lvar, :kernel)), :!)),
          s(:send,
            s(:lvar, :searched), :<<,
            s(:lvar, :kernel)), nil),
        s(:block,
          s(:send,
            s(:lvar, :searched), :each),
          s(:args,
            s(:arg, :ancestor)),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :String), :===,
                s(:lvar, :ancestor)),
              s(:next), nil),
            s(:if,
              s(:send,
                s(:send, nil, :parent), :==,
                s(:lvar, :ancestor)),
              s(:next), nil),
            s(:lvasgn, :other,
              s(:or,
                s(:send,
                  s(:lvar, :ancestor), :find_method_named,
                  s(:send,
                    s(:str, "#"), :<<,
                    s(:lvar, :name))),
                s(:send,
                  s(:lvar, :ancestor), :find_attribute_named,
                  s(:lvar, :name)))),
            s(:if,
              s(:lvar, :other),
              s(:return,
                s(:lvar, :other)), nil))),
        s(:nil))),
    s(:def, :add_alias,
      s(:args,
        s(:arg, :an_alias),
        s(:arg, :context)),
      s(:send, nil, :raise,
        s(:const, nil, :NotImplementedError))),
    s(:def, :aref,
      s(:args),
      s(:begin,
        s(:lvasgn, :type,
          s(:if,
            s(:send, nil, :singleton),
            s(:str, "c"),
            s(:str, "i"))),
        s(:dstr,
          s(:begin,
            s(:send, nil, :aref_prefix)),
          s(:str, "-"),
          s(:begin,
            s(:lvar, :type)),
          s(:str, "-"),
          s(:begin,
            s(:send, nil, :html_name))))),
    s(:def, :aref_prefix,
      s(:args),
      s(:send, nil, :raise,
        s(:const, nil, :NotImplementedError))),
    s(:def, :block_params=,
      s(:args,
        s(:arg, :value)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^[\\.,]"),
              s(:regopt))),
          s(:return,
            s(:ivasgn, :@block_params,
              s(:str, ""))), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^(if|unless)\\s"),
              s(:regopt))),
          s(:return,
            s(:ivasgn, :@block_params,
              s(:str, ""))), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^(.+)\\s(if|unless)\\s"),
              s(:regopt))),
          s(:lvasgn, :value,
            s(:send,
              s(:nth_ref, 1), :strip)), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^\\s*\\((.*)\\)\\s*$"),
              s(:regopt))),
          s(:lvasgn, :value,
            s(:nth_ref, 1)), nil),
        s(:lvasgn, :value,
          s(:send,
            s(:lvar, :value), :strip)),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^(proc|lambda)(\\s*\\{|\\sdo)"),
              s(:regopt))),
          s(:return,
            s(:ivasgn, :@block_params,
              s(:nth_ref, 1))), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^\\+(.*)\\+$"),
              s(:regopt))),
          s(:lvasgn, :value,
            s(:send,
              s(:nth_ref, 1), :strip)), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^\\[(.*)\\]$"),
              s(:regopt))),
          s(:lvasgn, :value,
            s(:send,
              s(:nth_ref, 1), :strip)), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :empty?),
          s(:return,
            s(:ivasgn, :@block_params,
              s(:str, ""))), nil),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^\\$[&0-9]$"),
              s(:regopt))),
          s(:return,
            s(:ivasgn, :@block_params,
              s(:str, "str"))), nil),
        s(:send,
          s(:lvar, :value), :gsub!,
          s(:regexp,
            s(:str, "(\\w)\\[[^\\[]+\\]"),
            s(:regopt)),
          s(:str, "\\1")),
        s(:send,
          s(:lvar, :value), :gsub!,
          s(:regexp,
            s(:str, "@@?([a-z0-9_]+)"),
            s(:regopt)),
          s(:str, "\\1")),
        s(:block,
          s(:send,
            s(:lvar, :value), :gsub!,
            s(:regexp,
              s(:str, "([A-Z:a-z0-9_]+)\\.([a-z0-9_]+)(\\s*\\(\\s*[a-z0-9_.,\\s]*\\s*\\)\\s*)?"),
              s(:regopt))),
          s(:args),
          s(:case,
            s(:nth_ref, 2),
            s(:when,
              s(:str, "to_s"),
              s(:nth_ref, 1)),
            s(:when,
              s(:str, "const_get"),
              s(:str, "const")),
            s(:when,
              s(:str, "new"),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:nth_ref, 1), :split,
                        s(:str, "::")), :last), :gsub,
                    s(:regexp,
                      s(:str, "([A-Z]+)([A-Z][a-z])"),
                      s(:regopt)),
                    s(:str, "\\1_\\2")), :gsub,
                  s(:regexp,
                    s(:str, "([a-z\\d])([A-Z])"),
                    s(:regopt)),
                  s(:str, "\\1_\\2")), :downcase)),
            s(:nth_ref, 2))),
        s(:send,
          s(:lvar, :value), :gsub!,
          s(:regexp,
            s(:str, "[A-Za-z0-9_:]+::"),
            s(:regopt)),
          s(:str, "")),
        s(:if,
          s(:send,
            s(:lvar, :value), :=~,
            s(:regexp,
              s(:str, "^([a-z0-9_]+)\\s*[-*+/]"),
              s(:regopt))),
          s(:lvasgn, :value,
            s(:nth_ref, 1)), nil),
        s(:ivasgn, :@block_params,
          s(:send,
            s(:lvar, :value), :strip)))),
    s(:def, :html_name,
      s(:args),
      s(:begin,
        s(:send, nil, :require,
          s(:str, "cgi")),
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :CGI), :escape,
              s(:send,
                s(:ivar, :@name), :gsub,
                s(:str, "-"),
                s(:str, "-2D"))), :gsub,
            s(:str, "%"),
            s(:str, "-")), :sub,
          s(:regexp,
            s(:str, "^-"),
            s(:regopt)),
          s(:str, "")))),
    s(:def, :full_name,
      s(:args),
      s(:or_asgn,
        s(:ivasgn, :@full_name),
        s(:dstr,
          s(:begin,
            s(:send, nil, :parent_name)),
          s(:begin,
            s(:send, nil, :pretty_name))))),
    s(:def, :inspect,
      s(:args),
      s(:begin,
        s(:lvasgn, :alias_for,
          s(:if,
            s(:ivar, :@is_alias_for),
            s(:dstr,
              s(:str, " (alias for "),
              s(:begin,
                s(:send,
                  s(:ivar, :@is_alias_for), :name)),
              s(:str, ")")),
            s(:nil))),
        s(:lvasgn, :visibility,
          s(:send,
            s(:self), :visibility)),
        s(:if,
          s(:send, nil, :force_documentation),
          s(:lvasgn, :visibility,
            s(:dstr,
              s(:str, "forced "),
              s(:begin,
                s(:lvar, :visibility)))), nil),
        s(:send,
          s(:str, "#<%s:0x%x %s (%s)%s>"), :%,
          s(:array,
            s(:send,
              s(:self), :class),
            s(:send, nil, :object_id),
            s(:send, nil, :full_name),
            s(:lvar, :visibility),
            s(:lvar, :alias_for))))),
    s(:def, :name_prefix,
      s(:args),
      s(:if,
        s(:ivar, :@singleton),
        s(:str, "::"),
        s(:str, "#"))),
    s(:def, :output_name,
      s(:args,
        s(:arg, :context)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :context), :==,
            s(:send, nil, :parent)),
          s(:return,
            s(:dstr,
              s(:begin,
                s(:send, nil, :name_prefix)),
              s(:begin,
                s(:ivar, :@name)))), nil),
        s(:dstr,
          s(:begin,
            s(:send, nil, :parent_name)),
          s(:begin,
            s(:if,
              s(:ivar, :@singleton),
              s(:str, "."),
              s(:str, "#"))),
          s(:begin,
            s(:ivar, :@name))))),
    s(:def, :pretty_name,
      s(:args),
      s(:dstr,
        s(:begin,
          s(:send, nil, :name_prefix)),
        s(:begin,
          s(:ivar, :@name)))),
    s(:def, :type,
      s(:args),
      s(:if,
        s(:send, nil, :singleton),
        s(:str, "class"),
        s(:str, "instance"))),
    s(:def, :path,
      s(:args),
      s(:dstr,
        s(:begin,
          s(:send,
            s(:ivar, :@parent), :path)),
        s(:str, "#"),
        s(:begin,
          s(:send, nil, :aref)))),
    s(:def, :parent_name,
      s(:args),
      s(:or,
        s(:ivar, :@parent_name),
        s(:zsuper))),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:begin,
        s(:lvasgn, :alias_for,
          s(:if,
            s(:send,
              s(:ivar, :@is_alias_for), :respond_to?,
              s(:sym, :name)),
            s(:dstr,
              s(:str, "alias for "),
              s(:begin,
                s(:send,
                  s(:ivar, :@is_alias_for), :name))),
            s(:if,
              s(:send,
                s(:const, nil, :Array), :===,
                s(:ivar, :@is_alias_for)),
              s(:dstr,
                s(:str, "alias for "),
                s(:begin,
                  s(:send,
                    s(:ivar, :@is_alias_for), :last))), nil))),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 2),
            s(:dstr,
              s(:str, "["),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:self), :class), :name)),
              s(:str, " "),
              s(:begin,
                s(:send, nil, :full_name)),
              s(:str, " "),
              s(:begin,
                s(:send, nil, :visibility))),
            s(:str, "]")),
          s(:args),
          s(:begin,
            s(:if,
              s(:lvar, :alias_for),
              s(:begin,
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:lvar, :alias_for))), nil),
            s(:if,
              s(:send, nil, :text),
              s(:begin,
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, "text:")),
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :pp,
                  s(:ivar, :@text))), nil),
            s(:if,
              s(:send,
                s(:send, nil, :comment), :empty?), nil,
              s(:begin,
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, "comment:")),
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :pp,
                  s(:ivar, :@comment)))))))),
    s(:def, :search_record,
      s(:args),
      s(:array,
        s(:ivar, :@name),
        s(:send, nil, :full_name),
        s(:ivar, :@name),
        s(:send,
          s(:ivar, :@parent), :full_name),
        s(:send, nil, :path),
        s(:send, nil, :params),
        s(:send, nil, :snippet,
          s(:ivar, :@comment)))),
    s(:def, :to_s,
      s(:args),
      s(:if,
        s(:ivar, :@is_alias_for),
        s(:dstr,
          s(:begin,
            s(:send,
              s(:send,
                s(:self), :class), :name)),
          s(:str, ": "),
          s(:begin,
            s(:send, nil, :full_name)),
          s(:str, " -> "),
          s(:begin,
            s(:send, nil, :is_alias_for))),
        s(:dstr,
          s(:begin,
            s(:send,
              s(:send,
                s(:self), :class), :name)),
          s(:str, ": "),
          s(:begin,
            s(:send, nil, :full_name)))))))
