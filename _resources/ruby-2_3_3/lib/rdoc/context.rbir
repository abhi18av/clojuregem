s(:begin,
  s(:send, nil, :require,
    s(:str, "cgi")),
  s(:class,
    s(:const,
      s(:const, nil, :RDoc), :Context),
    s(:const,
      s(:const, nil, :RDoc), :CodeObject),
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Comparable)),
      s(:casgn, nil, :TYPES,
        s(:array,
          s(:str, "class"),
          s(:str, "instance"))),
      s(:casgn, nil, :TOMDOC_TITLES,
        s(:array,
          s(:nil),
          s(:str, "Public"),
          s(:str, "Internal"),
          s(:str, "Deprecated"))),
      s(:casgn, nil, :TOMDOC_TITLES_SORT,
        s(:block,
          s(:send,
            s(:const, nil, :TOMDOC_TITLES), :sort_by),
          s(:args,
            s(:arg, :title)),
          s(:send,
            s(:lvar, :title), :to_s))),
      s(:send, nil, :attr_reader,
        s(:sym, :aliases)),
      s(:send, nil, :attr_reader,
        s(:sym, :attributes)),
      s(:send, nil, :attr_accessor,
        s(:sym, :block_params)),
      s(:send, nil, :attr_reader,
        s(:sym, :constants)),
      s(:send, nil, :attr_writer,
        s(:sym, :current_section)),
      s(:send, nil, :attr_reader,
        s(:sym, :in_files)),
      s(:send, nil, :attr_reader,
        s(:sym, :includes)),
      s(:send, nil, :attr_reader,
        s(:sym, :extends)),
      s(:send, nil, :attr_reader,
        s(:sym, :method_list)),
      s(:send, nil, :attr_reader,
        s(:sym, :name)),
      s(:send, nil, :attr_reader,
        s(:sym, :requires)),
      s(:send, nil, :attr_accessor,
        s(:sym, :temporary_section)),
      s(:send, nil, :attr_accessor,
        s(:sym, :unmatched_alias_lists)),
      s(:send, nil, :attr_reader,
        s(:sym, :external_aliases)),
      s(:send, nil, :attr_accessor,
        s(:sym, :visibility)),
      s(:send, nil, :attr_reader,
        s(:sym, :methods_hash)),
      s(:send, nil, :attr_accessor,
        s(:sym, :params)),
      s(:send, nil, :attr_reader,
        s(:sym, :constants_hash)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@in_files,
            s(:array)),
          s(:or_asgn,
            s(:ivasgn, :@name),
            s(:str, "unknown")),
          s(:ivasgn, :@parent,
            s(:nil)),
          s(:ivasgn, :@visibility,
            s(:sym, :public)),
          s(:ivasgn, :@current_section,
            s(:send,
              s(:const, nil, :Section), :new,
              s(:self),
              s(:nil),
              s(:nil))),
          s(:ivasgn, :@sections,
            s(:hash,
              s(:pair,
                s(:nil),
                s(:ivar, :@current_section)))),
          s(:ivasgn, :@temporary_section,
            s(:nil)),
          s(:ivasgn, :@classes,
            s(:hash)),
          s(:ivasgn, :@modules,
            s(:hash)),
          s(:send, nil, :initialize_methods_etc))),
      s(:def, :initialize_methods_etc,
        s(:args),
        s(:begin,
          s(:ivasgn, :@method_list,
            s(:array)),
          s(:ivasgn, :@attributes,
            s(:array)),
          s(:ivasgn, :@aliases,
            s(:array)),
          s(:ivasgn, :@requires,
            s(:array)),
          s(:ivasgn, :@includes,
            s(:array)),
          s(:ivasgn, :@extends,
            s(:array)),
          s(:ivasgn, :@constants,
            s(:array)),
          s(:ivasgn, :@external_aliases,
            s(:array)),
          s(:ivasgn, :@unmatched_alias_lists,
            s(:hash)),
          s(:ivasgn, :@methods_hash,
            s(:hash)),
          s(:ivasgn, :@constants_hash,
            s(:hash)),
          s(:ivasgn, :@params,
            s(:nil)),
          s(:or_asgn,
            s(:ivasgn, :@store),
            s(:nil)))),
      s(:def, :<=>,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :CodeObject), :===,
              s(:lvar, :other)), nil,
            s(:return,
              s(:nil))),
          s(:send,
            s(:send, nil, :full_name), :<=>,
            s(:send,
              s(:lvar, :other), :full_name)))),
      s(:def, :add,
        s(:args,
          s(:arg, :klass),
          s(:arg, :name),
          s(:arg, :comment)),
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :RDoc), :Extend), :==,
            s(:lvar, :klass)),
          s(:begin,
            s(:lvasgn, :ext,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Extend), :new,
                s(:lvar, :name),
                s(:lvar, :comment))),
            s(:send, nil, :add_extend,
              s(:lvar, :ext))),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Include), :==,
              s(:lvar, :klass)),
            s(:begin,
              s(:lvasgn, :incl,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Include), :new,
                  s(:lvar, :name),
                  s(:lvar, :comment))),
              s(:send, nil, :add_include,
                s(:lvar, :incl))),
            s(:send, nil, :raise,
              s(:const, nil, :NotImplementedError),
              s(:dstr,
                s(:str, "adding a "),
                s(:begin,
                  s(:lvar, :klass)),
                s(:str, " is not implemented")))))),
      s(:def, :add_alias,
        s(:args,
          s(:arg, :an_alias)),
        s(:begin,
          s(:if,
            s(:ivar, :@document_self), nil,
            s(:return,
              s(:lvar, :an_alias))),
          s(:lvasgn, :method_attr,
            s(:or,
              s(:send, nil, :find_method,
                s(:send,
                  s(:lvar, :an_alias), :old_name),
                s(:send,
                  s(:lvar, :an_alias), :singleton)),
              s(:send, nil, :find_attribute,
                s(:send,
                  s(:lvar, :an_alias), :old_name),
                s(:send,
                  s(:lvar, :an_alias), :singleton)))),
          s(:if,
            s(:lvar, :method_attr),
            s(:send,
              s(:lvar, :method_attr), :add_alias,
              s(:lvar, :an_alias),
              s(:self)),
            s(:begin,
              s(:send, nil, :add_to,
                s(:ivar, :@external_aliases),
                s(:lvar, :an_alias)),
              s(:lvasgn, :unmatched_alias_list,
                s(:or_asgn,
                  s(:send,
                    s(:ivar, :@unmatched_alias_lists), :[],
                    s(:send,
                      s(:lvar, :an_alias), :pretty_old_name)),
                  s(:array))),
              s(:send,
                s(:lvar, :unmatched_alias_list), :push,
                s(:lvar, :an_alias)))),
          s(:lvar, :an_alias))),
      s(:def, :add_attribute,
        s(:args,
          s(:arg, :attribute)),
        s(:begin,
          s(:if,
            s(:ivar, :@document_self), nil,
            s(:return,
              s(:lvar, :attribute))),
          s(:lvasgn, :register,
            s(:false)),
          s(:lvasgn, :key,
            s(:nil)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :attribute), :rw), :index,
              s(:str, "R")),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:lvar, :attribute), :pretty_name)),
              s(:lvasgn, :known,
                s(:send,
                  s(:ivar, :@methods_hash), :[],
                  s(:lvar, :key))),
              s(:if,
                s(:lvar, :known),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :known), :comment), :empty?),
                  s(:send,
                    s(:lvar, :known), :comment=,
                    s(:send,
                      s(:lvar, :attribute), :comment)), nil),
                s(:if,
                  s(:and,
                    s(:lvasgn, :registered,
                      s(:send,
                        s(:ivar, :@methods_hash), :[],
                        s(:send,
                          s(:send,
                            s(:lvar, :attribute), :pretty_name), :<<,
                          s(:str, "=")))),
                    s(:send,
                      s(:const,
                        s(:const, nil, :RDoc), :Attr), :===,
                      s(:lvar, :registered))),
                  s(:send,
                    s(:lvar, :registered), :rw=,
                    s(:str, "RW")),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@methods_hash), :[]=,
                      s(:lvar, :key),
                      s(:lvar, :attribute)),
                    s(:lvasgn, :register,
                      s(:true)))))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :attribute), :rw), :index,
              s(:str, "W")),
            s(:begin,
              s(:lvasgn, :key,
                s(:send,
                  s(:send,
                    s(:lvar, :attribute), :pretty_name), :<<,
                  s(:str, "="))),
              s(:lvasgn, :known,
                s(:send,
                  s(:ivar, :@methods_hash), :[],
                  s(:lvar, :key))),
              s(:if,
                s(:lvar, :known),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :known), :comment), :empty?),
                  s(:send,
                    s(:lvar, :known), :comment=,
                    s(:send,
                      s(:lvar, :attribute), :comment)), nil),
                s(:if,
                  s(:and,
                    s(:lvasgn, :registered,
                      s(:send,
                        s(:ivar, :@methods_hash), :[],
                        s(:send,
                          s(:lvar, :attribute), :pretty_name))),
                    s(:send,
                      s(:const,
                        s(:const, nil, :RDoc), :Attr), :===,
                      s(:lvar, :registered))),
                  s(:send,
                    s(:lvar, :registered), :rw=,
                    s(:str, "RW")),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@methods_hash), :[]=,
                      s(:lvar, :key),
                      s(:lvar, :attribute)),
                    s(:lvasgn, :register,
                      s(:true)))))), nil),
          s(:if,
            s(:lvar, :register),
            s(:begin,
              s(:send,
                s(:lvar, :attribute), :visibility=,
                s(:ivar, :@visibility)),
              s(:send, nil, :add_to,
                s(:ivar, :@attributes),
                s(:lvar, :attribute)),
              s(:send, nil, :resolve_aliases,
                s(:lvar, :attribute))), nil),
          s(:lvar, :attribute))),
      s(:def, :add_class,
        s(:args,
          s(:arg, :class_type),
          s(:arg, :given_name),
          s(:optarg, :superclass,
            s(:str, "::Object"))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :given_name), :=~,
              s(:regexp,
                s(:str, "^:+(\\w+)$"),
                s(:regopt))),
            s(:begin,
              s(:lvasgn, :full_name,
                s(:nth_ref, 1)),
              s(:lvasgn, :enclosing,
                s(:send, nil, :top_level)),
              s(:lvasgn, :name,
                s(:send,
                  s(:send,
                    s(:lvar, :full_name), :split,
                    s(:regexp,
                      s(:str, ":+"),
                      s(:regopt))), :last))),
            s(:begin,
              s(:lvasgn, :full_name,
                s(:send, nil, :child_name,
                  s(:lvar, :given_name))),
              s(:if,
                s(:send,
                  s(:lvar, :full_name), :=~,
                  s(:regexp,
                    s(:str, "^(.+)::(\\w+)$"),
                    s(:regopt))),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:nth_ref, 2)),
                  s(:lvasgn, :ename,
                    s(:nth_ref, 1)),
                  s(:lvasgn, :enclosing,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:ivar, :@store), :classes_hash), :[],
                        s(:lvar, :ename)),
                      s(:send,
                        s(:send,
                          s(:ivar, :@store), :modules_hash), :[],
                        s(:lvar, :ename)))),
                  s(:if,
                    s(:lvar, :enclosing), nil,
                    s(:begin,
                      s(:lvasgn, :enclosing,
                        s(:or,
                          s(:send,
                            s(:send,
                              s(:ivar, :@store), :classes_hash), :[],
                            s(:lvar, :given_name)),
                          s(:send,
                            s(:send,
                              s(:ivar, :@store), :modules_hash), :[],
                            s(:lvar, :given_name)))),
                      s(:if,
                        s(:lvar, :enclosing),
                        s(:return,
                          s(:lvar, :enclosing)), nil),
                      s(:lvasgn, :names,
                        s(:send,
                          s(:lvar, :ename), :split,
                          s(:str, "::"))),
                      s(:lvasgn, :enclosing,
                        s(:self)),
                      s(:block,
                        s(:send,
                          s(:lvar, :names), :each),
                        s(:args,
                          s(:arg, :n)),
                        s(:lvasgn, :enclosing,
                          s(:or,
                            s(:or,
                              s(:send,
                                s(:send,
                                  s(:lvar, :enclosing), :classes_hash), :[],
                                s(:lvar, :n)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :enclosing), :modules_hash), :[],
                                s(:lvar, :n))),
                            s(:send,
                              s(:lvar, :enclosing), :add_module,
                              s(:const,
                                s(:const, nil, :RDoc), :NormalModule),
                              s(:lvar, :n)))))))),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:lvar, :full_name)),
                  s(:lvasgn, :enclosing,
                    s(:self)))))),
          s(:if,
            s(:send,
              s(:lvar, :full_name), :==,
              s(:str, "BasicObject")),
            s(:lvasgn, :superclass,
              s(:nil)),
            s(:if,
              s(:send,
                s(:lvar, :full_name), :==,
                s(:str, "Object")),
              s(:lvasgn, :superclass,
                s(:if,
                  s(:defined?,
                    s(:const,
                      s(:cbase), :BasicObject)),
                  s(:str, "::BasicObject"),
                  s(:nil))), nil)),
          s(:if,
            s(:lvar, :superclass),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :superclass), :=~,
                  s(:regexp,
                    s(:str, "^:+"),
                    s(:regopt))),
                s(:lvasgn, :superclass,
                  s(:back_ref, :$')),
                s(:if,
                  s(:send,
                    s(:lvar, :superclass), :=~,
                    s(:regexp,
                      s(:str, "^(\\w+):+(.+)$"),
                      s(:regopt))),
                  s(:begin,
                    s(:lvasgn, :suffix,
                      s(:nth_ref, 2)),
                    s(:lvasgn, :mod,
                      s(:send, nil, :find_module_named,
                        s(:nth_ref, 1))),
                    s(:if,
                      s(:lvar, :mod),
                      s(:lvasgn, :superclass,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :mod), :full_name), :+,
                            s(:str, "::")), :+,
                          s(:lvar, :suffix))), nil)),
                  s(:begin,
                    s(:lvasgn, :mod,
                      s(:send, nil, :find_module_named,
                        s(:lvar, :superclass))),
                    s(:if,
                      s(:lvar, :mod),
                      s(:lvasgn, :superclass,
                        s(:send,
                          s(:lvar, :mod), :full_name)), nil)))),
              s(:lvasgn, :mod,
                s(:send,
                  s(:send,
                    s(:ivar, :@store), :modules_hash), :delete,
                  s(:lvar, :superclass))),
              s(:if,
                s(:lvar, :mod),
                s(:send, nil, :upgrade_to_class,
                  s(:lvar, :mod),
                  s(:const,
                    s(:const, nil, :RDoc), :NormalClass),
                  s(:send,
                    s(:lvar, :mod), :parent)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :superclass), :==,
                  s(:lvar, :full_name)),
                s(:lvasgn, :superclass,
                  s(:nil)), nil)), nil),
          s(:lvasgn, :klass,
            s(:send,
              s(:send,
                s(:ivar, :@store), :classes_hash), :[],
              s(:lvar, :full_name))),
          s(:if,
            s(:lvar, :klass),
            s(:begin,
              s(:send,
                s(:send,
                  s(:lvar, :enclosing), :classes_hash), :[]=,
                s(:lvar, :name),
                s(:lvar, :klass)),
              s(:if,
                s(:lvar, :superclass),
                s(:begin,
                  s(:lvasgn, :existing,
                    s(:send,
                      s(:lvar, :klass), :superclass)),
                  s(:if,
                    s(:lvar, :existing),
                    s(:if,
                      s(:send,
                        s(:lvar, :existing), :is_a?,
                        s(:const, nil, :String)), nil,
                      s(:lvasgn, :existing,
                        s(:send,
                          s(:lvar, :existing), :full_name))), nil),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :existing), :nil?),
                      s(:begin,
                        s(:and,
                          s(:send,
                            s(:lvar, :existing), :==,
                            s(:str, "Object")),
                          s(:send,
                            s(:lvar, :superclass), :!=,
                            s(:str, "Object"))))),
                    s(:send,
                      s(:lvar, :klass), :superclass=,
                      s(:lvar, :superclass)), nil)), nil)),
            s(:begin,
              s(:lvasgn, :mod,
                s(:send,
                  s(:send,
                    s(:ivar, :@store), :modules_hash), :delete,
                  s(:lvar, :full_name))),
              s(:if,
                s(:lvar, :mod),
                s(:begin,
                  s(:lvasgn, :klass,
                    s(:send, nil, :upgrade_to_class,
                      s(:lvar, :mod),
                      s(:const,
                        s(:const, nil, :RDoc), :NormalClass),
                      s(:lvar, :enclosing))),
                  s(:if,
                    s(:send,
                      s(:lvar, :superclass), :nil?), nil,
                    s(:send,
                      s(:lvar, :klass), :superclass=,
                      s(:lvar, :superclass)))),
                s(:begin,
                  s(:lvasgn, :klass,
                    s(:send,
                      s(:lvar, :class_type), :new,
                      s(:lvar, :name),
                      s(:lvar, :superclass))),
                  s(:send,
                    s(:lvar, :enclosing), :add_class_or_module,
                    s(:lvar, :klass),
                    s(:send,
                      s(:lvar, :enclosing), :classes_hash),
                    s(:send,
                      s(:ivar, :@store), :classes_hash)))))),
          s(:send,
            s(:lvar, :klass), :parent=,
            s(:self)),
          s(:lvar, :klass))),
      s(:def, :add_class_or_module,
        s(:args,
          s(:arg, :mod),
          s(:arg, :self_hash),
          s(:arg, :all_hash)),
        s(:begin,
          s(:send,
            s(:lvar, :mod), :section=,
            s(:send, nil, :current_section)),
          s(:send,
            s(:lvar, :mod), :parent=,
            s(:self)),
          s(:send,
            s(:lvar, :mod), :store=,
            s(:ivar, :@store)),
          s(:if,
            s(:ivar, :@done_documenting), nil,
            s(:begin,
              s(:send,
                s(:lvar, :self_hash), :[]=,
                s(:send,
                  s(:lvar, :mod), :name),
                s(:lvar, :mod)),
              s(:send,
                s(:lvar, :all_hash), :[]=,
                s(:send,
                  s(:lvar, :mod), :full_name),
                s(:lvar, :mod)))),
          s(:lvar, :mod))),
      s(:def, :add_constant,
        s(:args,
          s(:arg, :constant)),
        s(:begin,
          s(:if,
            s(:ivar, :@document_self), nil,
            s(:return,
              s(:lvar, :constant))),
          s(:lvasgn, :known,
            s(:send,
              s(:ivar, :@constants_hash), :[],
              s(:send,
                s(:lvar, :constant), :name))),
          s(:if,
            s(:lvar, :known),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :known), :comment), :empty?),
                s(:send,
                  s(:lvar, :known), :comment=,
                  s(:send,
                    s(:lvar, :constant), :comment)), nil),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :known), :value), :nil?),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :known), :value), :strip), :empty?)),
                s(:send,
                  s(:lvar, :known), :value=,
                  s(:send,
                    s(:lvar, :constant), :value)), nil),
              s(:or_asgn,
                s(:send,
                  s(:lvar, :known), :is_alias_for),
                s(:send,
                  s(:lvar, :constant), :is_alias_for))),
            s(:begin,
              s(:send,
                s(:ivar, :@constants_hash), :[]=,
                s(:send,
                  s(:lvar, :constant), :name),
                s(:lvar, :constant)),
              s(:send, nil, :add_to,
                s(:ivar, :@constants),
                s(:lvar, :constant)))),
          s(:lvar, :constant))),
      s(:def, :add_include,
        s(:args,
          s(:arg, :include)),
        s(:begin,
          s(:send, nil, :add_to,
            s(:ivar, :@includes),
            s(:lvar, :include)),
          s(:lvar, :include))),
      s(:def, :add_extend,
        s(:args,
          s(:arg, :ext)),
        s(:begin,
          s(:send, nil, :add_to,
            s(:ivar, :@extends),
            s(:lvar, :ext)),
          s(:lvar, :ext))),
      s(:def, :add_method,
        s(:args,
          s(:arg, :method)),
        s(:begin,
          s(:if,
            s(:ivar, :@document_self), nil,
            s(:return,
              s(:lvar, :method))),
          s(:lvasgn, :key,
            s(:send,
              s(:lvar, :method), :pretty_name)),
          s(:lvasgn, :known,
            s(:send,
              s(:ivar, :@methods_hash), :[],
              s(:lvar, :key))),
          s(:if,
            s(:lvar, :known),
            s(:if,
              s(:ivar, :@store),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :known), :comment), :empty?),
                  s(:send,
                    s(:lvar, :known), :comment=,
                    s(:send,
                      s(:lvar, :method), :comment)), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :method), :file), :==,
                    s(:send,
                      s(:lvar, :known), :file)), nil,
                  s(:lvasgn, :previously,
                    s(:dstr,
                      s(:str, ", previously in "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :known), :file))))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@store), :rdoc), :options), :warn,
                  s(:dstr,
                    s(:str, "Duplicate method "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :known), :full_name)),
                    s(:str, " in "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :method), :file)),
                    s(:begin,
                      s(:lvar, :previously))))), nil),
            s(:begin,
              s(:send,
                s(:ivar, :@methods_hash), :[]=,
                s(:lvar, :key),
                s(:lvar, :method)),
              s(:send,
                s(:lvar, :method), :visibility=,
                s(:ivar, :@visibility)),
              s(:send, nil, :add_to,
                s(:ivar, :@method_list),
                s(:lvar, :method)),
              s(:send, nil, :resolve_aliases,
                s(:lvar, :method)))),
          s(:lvar, :method))),
      s(:def, :add_module,
        s(:args,
          s(:arg, :class_type),
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :mod,
            s(:or,
              s(:send,
                s(:ivar, :@classes), :[],
                s(:lvar, :name)),
              s(:send,
                s(:ivar, :@modules), :[],
                s(:lvar, :name)))),
          s(:if,
            s(:lvar, :mod),
            s(:return,
              s(:lvar, :mod)), nil),
          s(:lvasgn, :full_name,
            s(:send, nil, :child_name,
              s(:lvar, :name))),
          s(:lvasgn, :mod,
            s(:or,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :modules_hash), :[],
                s(:lvar, :full_name)),
              s(:send,
                s(:lvar, :class_type), :new,
                s(:lvar, :name)))),
          s(:send, nil, :add_class_or_module,
            s(:lvar, :mod),
            s(:ivar, :@modules),
            s(:send,
              s(:ivar, :@store), :modules_hash)))),
      s(:def, :add_module_alias,
        s(:args,
          s(:arg, :from),
          s(:arg, :name),
          s(:arg, :file)),
        s(:begin,
          s(:if,
            s(:ivar, :@done_documenting),
            s(:return,
              s(:lvar, :from)), nil),
          s(:lvasgn, :to_name,
            s(:send, nil, :child_name,
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:ivar, :@store), :find_class_or_module,
              s(:lvar, :to_name)),
            s(:return,
              s(:lvar, :from)), nil),
          s(:lvasgn, :to,
            s(:send,
              s(:lvar, :from), :dup)),
          s(:send,
            s(:lvar, :to), :name=,
            s(:lvar, :name)),
          s(:send,
            s(:lvar, :to), :full_name=,
            s(:nil)),
          s(:if,
            s(:send,
              s(:lvar, :to), :module?),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :modules_hash), :[]=,
                s(:lvar, :to_name),
                s(:lvar, :to)),
              s(:send,
                s(:ivar, :@modules), :[]=,
                s(:lvar, :name),
                s(:lvar, :to))),
            s(:begin,
              s(:send,
                s(:send,
                  s(:ivar, :@store), :classes_hash), :[]=,
                s(:lvar, :to_name),
                s(:lvar, :to)),
              s(:send,
                s(:ivar, :@classes), :[]=,
                s(:lvar, :name),
                s(:lvar, :to)))),
          s(:lvasgn, :const,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Constant), :new,
              s(:lvar, :name),
              s(:nil),
              s(:send,
                s(:lvar, :to), :comment))),
          s(:send,
            s(:lvar, :const), :record_location,
            s(:lvar, :file)),
          s(:send,
            s(:lvar, :const), :is_alias_for=,
            s(:lvar, :from)),
          s(:send, nil, :add_constant,
            s(:lvar, :const)),
          s(:lvar, :to))),
      s(:def, :add_require,
        s(:args,
          s(:arg, :require)),
        s(:begin,
          s(:if,
            s(:ivar, :@document_self), nil,
            s(:return,
              s(:lvar, :require))),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :===,
              s(:self)),
            s(:send, nil, :add_to,
              s(:ivar, :@requires),
              s(:lvar, :require)),
            s(:send,
              s(:send, nil, :parent), :add_require,
              s(:lvar, :require))))),
      s(:def, :add_section,
        s(:args,
          s(:arg, :title),
          s(:optarg, :comment,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvasgn, :section,
              s(:send,
                s(:ivar, :@sections), :[],
                s(:lvar, :title))),
            s(:if,
              s(:lvar, :comment),
              s(:send,
                s(:lvar, :section), :add_comment,
                s(:lvar, :comment)), nil),
            s(:begin,
              s(:lvasgn, :section,
                s(:send,
                  s(:const, nil, :Section), :new,
                  s(:self),
                  s(:lvar, :title),
                  s(:lvar, :comment))),
              s(:send,
                s(:ivar, :@sections), :[]=,
                s(:lvar, :title),
                s(:lvar, :section)))),
          s(:lvar, :section))),
      s(:def, :add_to,
        s(:args,
          s(:arg, :array),
          s(:arg, :thing)),
        s(:begin,
          s(:if,
            s(:ivar, :@document_self),
            s(:send,
              s(:lvar, :array), :<<,
              s(:lvar, :thing)), nil),
          s(:send,
            s(:lvar, :thing), :parent=,
            s(:self)),
          s(:if,
            s(:ivar, :@store),
            s(:send,
              s(:lvar, :thing), :store=,
              s(:ivar, :@store)), nil),
          s(:send,
            s(:lvar, :thing), :section=,
            s(:send, nil, :current_section)))),
      s(:def, :any_content,
        s(:args,
          s(:optarg, :includes,
            s(:true))),
        s(:begin,
          s(:or_asgn,
            s(:ivasgn, :@any_content),
            s(:send,
              s(:begin,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:and,
                            s(:send,
                              s(:ivar, :@comment), :empty?),
                            s(:send,
                              s(:ivar, :@method_list), :empty?)),
                          s(:send,
                            s(:ivar, :@attributes), :empty?)),
                        s(:send,
                          s(:ivar, :@aliases), :empty?)),
                      s(:send,
                        s(:ivar, :@external_aliases), :empty?)),
                    s(:send,
                      s(:ivar, :@requires), :empty?)),
                  s(:send,
                    s(:ivar, :@constants), :empty?))), :!)),
          s(:or,
            s(:ivar, :@any_content),
            s(:begin,
              s(:and,
                s(:lvar, :includes),
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@includes), :+,
                        s(:ivar, :@extends))), :empty?), :!)))))),
      s(:def, :child_name,
        s(:args,
          s(:arg, :name)),
        s(:if,
          s(:send,
            s(:lvar, :name), :=~,
            s(:regexp,
              s(:str, "^:+"),
              s(:regopt))),
          s(:back_ref, :$'),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :===,
              s(:self)),
            s(:lvar, :name),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :full_name)),
              s(:str, "::"),
              s(:begin,
                s(:lvar, :name)))))),
      s(:def, :class_attributes,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@class_attributes),
          s(:block,
            s(:send,
              s(:send, nil, :attributes), :select),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :singleton)))),
      s(:def, :class_method_list,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@class_method_list),
          s(:block,
            s(:send,
              s(:send, nil, :method_list), :select),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :singleton)))),
      s(:def, :classes,
        s(:args),
        s(:send,
          s(:ivar, :@classes), :values)),
      s(:def, :classes_and_modules,
        s(:args),
        s(:send,
          s(:send, nil, :classes), :+,
          s(:send, nil, :modules))),
      s(:def, :classes_hash,
        s(:args),
        s(:ivar, :@classes)),
      s(:def, :current_section,
        s(:args),
        s(:begin,
          s(:if,
            s(:lvasgn, :section,
              s(:ivar, :@temporary_section)),
            s(:ivasgn, :@temporary_section,
              s(:nil)),
            s(:lvasgn, :section,
              s(:ivar, :@current_section))),
          s(:lvar, :section))),
      s(:def, :defined_in?,
        s(:args,
          s(:arg, :file)),
        s(:send,
          s(:ivar, :@in_files), :include?,
          s(:lvar, :file))),
      s(:def, :display,
        s(:args,
          s(:arg, :method_attr)),
        s(:if,
          s(:send,
            s(:lvar, :method_attr), :is_a?,
            s(:const,
              s(:const, nil, :RDoc), :Attr)),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:lvar, :method_attr), :definition)),
            s(:str, " "),
            s(:begin,
              s(:send,
                s(:lvar, :method_attr), :pretty_name))),
          s(:dstr,
            s(:str, "method "),
            s(:begin,
              s(:send,
                s(:lvar, :method_attr), :pretty_name))))),
      s(:def, :each_ancestor,
        s(:args), nil),
      s(:def, :each_attribute,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@attributes), :each),
          s(:args,
            s(:arg, :a)),
          s(:yield,
            s(:lvar, :a)))),
      s(:def, :each_classmodule,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:send,
            s(:send, nil, :classes_and_modules), :sort), :each,
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :each_constant,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@constants), :each),
          s(:args,
            s(:arg, :c)),
          s(:yield,
            s(:lvar, :c)))),
      s(:def, :each_include,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@includes), :each),
          s(:args,
            s(:arg, :i)),
          s(:yield,
            s(:lvar, :i)))),
      s(:def, :each_extend,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@extends), :each),
          s(:args,
            s(:arg, :e)),
          s(:yield,
            s(:lvar, :e)))),
      s(:def, :each_method,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :enum_for,
                s(:send, nil, :__method__)))),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@method_list), :sort), :each),
            s(:args,
              s(:arg, :m)),
            s(:yield,
              s(:lvar, :m))))),
      s(:def, :each_section,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :enum_for,
                s(:send, nil, :__method__)))),
          s(:lvasgn, :constants,
            s(:block,
              s(:send,
                s(:ivar, :@constants), :group_by),
              s(:args,
                s(:arg, :constant)),
              s(:send,
                s(:lvar, :constant), :section))),
          s(:lvasgn, :attributes,
            s(:block,
              s(:send,
                s(:ivar, :@attributes), :group_by),
              s(:args,
                s(:arg, :attribute)),
              s(:send,
                s(:lvar, :attribute), :section))),
          s(:send,
            s(:lvar, :constants), :default=,
            s(:array)),
          s(:send,
            s(:lvar, :attributes), :default=,
            s(:array)),
          s(:block,
            s(:send,
              s(:send, nil, :sort_sections), :each),
            s(:args,
              s(:arg, :section)),
            s(:yield,
              s(:lvar, :section),
              s(:send,
                s(:send,
                  s(:lvar, :constants), :[],
                  s(:lvar, :section)), :sort),
              s(:send,
                s(:send,
                  s(:lvar, :attributes), :[],
                  s(:lvar, :section)), :sort))))),
      s(:def, :find_attribute,
        s(:args,
          s(:arg, :name),
          s(:arg, :singleton)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :name), :=~,
              s(:regexp,
                s(:str, "^(.*)=$"),
                s(:regopt))),
            s(:lvasgn, :name,
              s(:nth_ref, 1)), nil),
          s(:block,
            s(:send,
              s(:ivar, :@attributes), :find),
            s(:args,
              s(:arg, :a)),
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :a), :name), :==,
                s(:lvar, :name)),
              s(:send,
                s(:send,
                  s(:lvar, :a), :singleton), :==,
                s(:lvar, :singleton)))))),
      s(:def, :find_attribute_named,
        s(:args,
          s(:arg, :name)),
        s(:case,
          s(:lvar, :name),
          s(:when,
            s(:regexp,
              s(:str, "\\A#"),
              s(:regopt)),
            s(:send, nil, :find_attribute,
              s(:send,
                s(:lvar, :name), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1))),
              s(:false))),
          s(:when,
            s(:regexp,
              s(:str, "\\A::"),
              s(:regopt)),
            s(:send, nil, :find_attribute,
              s(:send,
                s(:lvar, :name), :[],
                s(:irange,
                  s(:int, 2),
                  s(:int, -1))),
              s(:true))),
          s(:block,
            s(:send,
              s(:ivar, :@attributes), :find),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:send,
                s(:lvar, :a), :name), :==,
              s(:lvar, :name))))),
      s(:def, :find_class_method_named,
        s(:args,
          s(:arg, :name)),
        s(:block,
          s(:send,
            s(:ivar, :@method_list), :find),
          s(:args,
            s(:arg, :meth)),
          s(:and,
            s(:send,
              s(:lvar, :meth), :singleton),
            s(:send,
              s(:send,
                s(:lvar, :meth), :name), :==,
              s(:lvar, :name))))),
      s(:def, :find_constant_named,
        s(:args,
          s(:arg, :name)),
        s(:block,
          s(:send,
            s(:ivar, :@constants), :find),
          s(:args,
            s(:arg, :m)),
          s(:send,
            s(:send,
              s(:lvar, :m), :name), :==,
            s(:lvar, :name)))),
      s(:def, :find_enclosing_module_named,
        s(:args,
          s(:arg, :name)),
        s(:and,
          s(:send, nil, :parent),
          s(:send,
            s(:send, nil, :parent), :find_module_named,
            s(:lvar, :name)))),
      s(:def, :find_external_alias,
        s(:args,
          s(:arg, :name),
          s(:arg, :singleton)),
        s(:block,
          s(:send,
            s(:ivar, :@external_aliases), :find),
          s(:args,
            s(:arg, :m)),
          s(:and,
            s(:send,
              s(:send,
                s(:lvar, :m), :name), :==,
              s(:lvar, :name)),
            s(:send,
              s(:send,
                s(:lvar, :m), :singleton), :==,
              s(:lvar, :singleton))))),
      s(:def, :find_external_alias_named,
        s(:args,
          s(:arg, :name)),
        s(:case,
          s(:lvar, :name),
          s(:when,
            s(:regexp,
              s(:str, "\\A#"),
              s(:regopt)),
            s(:send, nil, :find_external_alias,
              s(:send,
                s(:lvar, :name), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1))),
              s(:false))),
          s(:when,
            s(:regexp,
              s(:str, "\\A::"),
              s(:regopt)),
            s(:send, nil, :find_external_alias,
              s(:send,
                s(:lvar, :name), :[],
                s(:irange,
                  s(:int, 2),
                  s(:int, -1))),
              s(:true))),
          s(:block,
            s(:send,
              s(:ivar, :@external_aliases), :find),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:send,
                s(:lvar, :a), :name), :==,
              s(:lvar, :name))))),
      s(:def, :find_file_named,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:ivar, :@store), :find_file_named,
          s(:lvar, :name))),
      s(:def, :find_instance_method_named,
        s(:args,
          s(:arg, :name)),
        s(:block,
          s(:send,
            s(:ivar, :@method_list), :find),
          s(:args,
            s(:arg, :meth)),
          s(:and,
            s(:send,
              s(:send,
                s(:lvar, :meth), :singleton), :!),
            s(:send,
              s(:send,
                s(:lvar, :meth), :name), :==,
              s(:lvar, :name))))),
      s(:def, :find_local_symbol,
        s(:args,
          s(:arg, :symbol)),
        s(:or,
          s(:or,
            s(:or,
              s(:or,
                s(:or,
                  s(:send, nil, :find_method_named,
                    s(:lvar, :symbol)),
                  s(:send, nil, :find_constant_named,
                    s(:lvar, :symbol))),
                s(:send, nil, :find_attribute_named,
                  s(:lvar, :symbol))),
              s(:send, nil, :find_external_alias_named,
                s(:lvar, :symbol))),
            s(:send, nil, :find_module_named,
              s(:lvar, :symbol))),
          s(:send, nil, :find_file_named,
            s(:lvar, :symbol)))),
      s(:def, :find_method,
        s(:args,
          s(:arg, :name),
          s(:arg, :singleton)),
        s(:block,
          s(:send,
            s(:ivar, :@method_list), :find),
          s(:args,
            s(:arg, :m)),
          s(:and,
            s(:send,
              s(:send,
                s(:lvar, :m), :name), :==,
              s(:lvar, :name)),
            s(:send,
              s(:send,
                s(:lvar, :m), :singleton), :==,
              s(:lvar, :singleton))))),
      s(:def, :find_method_named,
        s(:args,
          s(:arg, :name)),
        s(:case,
          s(:lvar, :name),
          s(:when,
            s(:regexp,
              s(:str, "\\A#"),
              s(:regopt)),
            s(:send, nil, :find_method,
              s(:send,
                s(:lvar, :name), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1))),
              s(:false))),
          s(:when,
            s(:regexp,
              s(:str, "\\A::"),
              s(:regopt)),
            s(:send, nil, :find_method,
              s(:send,
                s(:lvar, :name), :[],
                s(:irange,
                  s(:int, 2),
                  s(:int, -1))),
              s(:true))),
          s(:block,
            s(:send,
              s(:ivar, :@method_list), :find),
            s(:args,
              s(:arg, :meth)),
            s(:send,
              s(:send,
                s(:lvar, :meth), :name), :==,
              s(:lvar, :name))))),
      s(:def, :find_module_named,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :res,
            s(:or,
              s(:send,
                s(:ivar, :@modules), :[],
                s(:lvar, :name)),
              s(:send,
                s(:ivar, :@classes), :[],
                s(:lvar, :name)))),
          s(:if,
            s(:lvar, :res),
            s(:return,
              s(:lvar, :res)), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:self), :name), :==,
              s(:lvar, :name)),
            s(:return,
              s(:self)), nil),
          s(:send, nil, :find_enclosing_module_named,
            s(:lvar, :name)))),
      s(:def, :find_symbol,
        s(:args,
          s(:arg, :symbol)),
        s(:or,
          s(:send, nil, :find_symbol_module,
            s(:lvar, :symbol)),
          s(:send, nil, :find_local_symbol,
            s(:lvar, :symbol)))),
      s(:def, :find_symbol_module,
        s(:args,
          s(:arg, :symbol)),
        s(:begin,
          s(:lvasgn, :result,
            s(:nil)),
          s(:case,
            s(:lvar, :symbol),
            s(:when,
              s(:regexp,
                s(:str, "^::"),
                s(:regopt)),
              s(:lvasgn, :result,
                s(:send,
                  s(:ivar, :@store), :find_class_or_module,
                  s(:lvar, :symbol)))),
            s(:when,
              s(:regexp,
                s(:str, "^(\\w+):+(.+)$"),
                s(:regopt)),
              s(:begin,
                s(:lvasgn, :suffix,
                  s(:nth_ref, 2)),
                s(:lvasgn, :top,
                  s(:nth_ref, 1)),
                s(:lvasgn, :searched,
                  s(:self)),
                s(:while,
                  s(:lvar, :searched),
                  s(:begin,
                    s(:lvasgn, :mod,
                      s(:send,
                        s(:lvar, :searched), :find_module_named,
                        s(:lvar, :top))),
                    s(:if,
                      s(:lvar, :mod), nil,
                      s(:break)),
                    s(:lvasgn, :result,
                      s(:send,
                        s(:ivar, :@store), :find_class_or_module,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :mod), :full_name)),
                          s(:str, "::"),
                          s(:begin,
                            s(:lvar, :suffix))))),
                    s(:if,
                      s(:or,
                        s(:lvar, :result),
                        s(:send,
                          s(:lvar, :searched), :is_a?,
                          s(:const,
                            s(:const, nil, :RDoc), :TopLevel))),
                      s(:break), nil),
                    s(:lvasgn, :searched,
                      s(:send,
                        s(:lvar, :searched), :parent)))))),
            s(:begin,
              s(:lvasgn, :searched,
                s(:self)),
              s(:while,
                s(:lvar, :searched),
                s(:begin,
                  s(:lvasgn, :result,
                    s(:send,
                      s(:lvar, :searched), :find_module_named,
                      s(:lvar, :symbol))),
                  s(:if,
                    s(:or,
                      s(:lvar, :result),
                      s(:send,
                        s(:lvar, :searched), :is_a?,
                        s(:const,
                          s(:const, nil, :RDoc), :TopLevel))),
                    s(:break), nil),
                  s(:lvasgn, :searched,
                    s(:send,
                      s(:lvar, :searched), :parent)))))),
          s(:lvar, :result))),
      s(:def, :full_name,
        s(:args),
        s(:str, "(unknown)")),
      s(:def, :fully_documented?,
        s(:args),
        s(:and,
          s(:and,
            s(:and,
              s(:send, nil, :documented?),
              s(:block,
                s(:send,
                  s(:send, nil, :attributes), :all?),
                s(:args,
                  s(:arg, :a)),
                s(:send,
                  s(:lvar, :a), :documented?))),
            s(:block,
              s(:send,
                s(:send, nil, :method_list), :all?),
              s(:args,
                s(:arg, :m)),
              s(:send,
                s(:lvar, :m), :documented?))),
          s(:block,
            s(:send,
              s(:send, nil, :constants), :all?),
            s(:args,
              s(:arg, :c)),
            s(:send,
              s(:lvar, :c), :documented?)))),
      s(:def, :http_url,
        s(:args,
          s(:arg, :prefix)),
        s(:begin,
          s(:lvasgn, :path,
            s(:send, nil, :name_for_path)),
          s(:if,
            s(:send,
              s(:lvar, :path), :=~,
              s(:regexp,
                s(:str, "<<"),
                s(:regopt))),
            s(:lvasgn, :path,
              s(:send,
                s(:lvar, :path), :gsub,
                s(:regexp,
                  s(:str, "<<\\s*(\\w*)"),
                  s(:regopt)),
                s(:str, "from-\\1"))), nil),
          s(:lvasgn, :path,
            s(:send,
              s(:array,
                s(:lvar, :prefix)), :+,
              s(:send,
                s(:lvar, :path), :split,
                s(:str, "::")))),
          s(:send,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:send,
                  s(:lvar, :path), :compact))), :+,
            s(:str, ".html")))),
      s(:def, :instance_attributes,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@instance_attributes),
          s(:block,
            s(:send,
              s(:send, nil, :attributes), :reject),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :singleton)))),
      s(:def, :instance_method_list,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@instance_method_list),
          s(:block,
            s(:send,
              s(:send, nil, :method_list), :reject),
            s(:args,
              s(:arg, :a)),
            s(:send,
              s(:lvar, :a), :singleton)))),
      s(:def, :methods_by_type,
        s(:args,
          s(:optarg, :section,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :methods,
            s(:hash)),
          s(:block,
            s(:send,
              s(:const, nil, :TYPES), :each),
            s(:args,
              s(:arg, :type)),
            s(:begin,
              s(:lvasgn, :visibilities,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :VISIBILITIES), :each),
                s(:args,
                  s(:arg, :vis)),
                s(:send,
                  s(:lvar, :visibilities), :[]=,
                  s(:lvar, :vis),
                  s(:array))),
              s(:send,
                s(:lvar, :methods), :[]=,
                s(:lvar, :type),
                s(:lvar, :visibilities)))),
          s(:block,
            s(:send, nil, :each_method),
            s(:args,
              s(:arg, :method)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :section),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :method), :section), :==,
                      s(:lvar, :section)), :!)),
                s(:next), nil),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :methods), :[],
                    s(:send,
                      s(:lvar, :method), :type)), :[],
                  s(:send,
                    s(:lvar, :method), :visibility)), :<<,
                s(:lvar, :method)))),
          s(:lvar, :methods))),
      s(:def, :methods_matching,
        s(:args,
          s(:arg, :methods),
          s(:optarg, :singleton,
            s(:false)),
          s(:blockarg, :block)),
        s(:begin,
          s(:block,
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@method_list), :+,
                  s(:ivar, :@attributes))), :each),
            s(:args,
              s(:arg, :m)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :methods), :include?,
                  s(:send,
                    s(:lvar, :m), :name)),
                s(:send,
                  s(:send,
                    s(:lvar, :m), :singleton), :==,
                  s(:lvar, :singleton))),
              s(:yield,
                s(:lvar, :m)), nil)),
          s(:block,
            s(:send, nil, :each_ancestor),
            s(:args,
              s(:arg, :parent)),
            s(:send,
              s(:lvar, :parent), :methods_matching,
              s(:lvar, :methods),
              s(:lvar, :singleton),
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:def, :modules,
        s(:args),
        s(:send,
          s(:ivar, :@modules), :values)),
      s(:def, :modules_hash,
        s(:args),
        s(:ivar, :@modules)),
      s(:def, :name_for_path,
        s(:args),
        s(:send, nil, :full_name)),
      s(:def, :ongoing_visibility=,
        s(:args,
          s(:arg, :visibility)),
        s(:ivasgn, :@visibility,
          s(:lvar, :visibility))),
      s(:def, :record_location,
        s(:args,
          s(:arg, :top_level)),
        s(:if,
          s(:send,
            s(:ivar, :@in_files), :include?,
            s(:lvar, :top_level)), nil,
          s(:send,
            s(:ivar, :@in_files), :<<,
            s(:lvar, :top_level)))),
      s(:def, :remove_from_documentation?,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@remove_from_documentation),
          s(:and,
            s(:and,
              s(:and,
                s(:ivar, :@received_nodoc),
                s(:send,
                  s(:send, nil, :any_content,
                    s(:false)), :!)),
              s(:block,
                s(:send,
                  s(:ivar, :@includes), :all?),
                s(:args,
                  s(:arg, :i)),
                s(:and,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :i), :module), :is_a?,
                      s(:const, nil, :String)), :!),
                  s(:send,
                    s(:send,
                      s(:lvar, :i), :module), :remove_from_documentation?)))),
            s(:block,
              s(:send,
                s(:send, nil, :classes_and_modules), :all?),
              s(:args,
                s(:arg, :cm)),
              s(:send,
                s(:lvar, :cm), :remove_from_documentation?))))),
      s(:def, :remove_invisible,
        s(:args,
          s(:arg, :min_visibility)),
        s(:begin,
          s(:if,
            s(:send,
              s(:array,
                s(:sym, :private),
                s(:sym, :nodoc)), :include?,
              s(:lvar, :min_visibility)),
            s(:return), nil),
          s(:send, nil, :remove_invisible_in,
            s(:ivar, :@method_list),
            s(:lvar, :min_visibility)),
          s(:send, nil, :remove_invisible_in,
            s(:ivar, :@attributes),
            s(:lvar, :min_visibility)))),
      s(:def, :remove_invisible_in,
        s(:args,
          s(:arg, :array),
          s(:arg, :min_visibility)),
        s(:if,
          s(:send,
            s(:lvar, :min_visibility), :==,
            s(:sym, :public)),
          s(:block,
            s(:send,
              s(:lvar, :array), :reject!),
            s(:args,
              s(:arg, :e)),
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :e), :visibility), :!=,
                s(:sym, :public)),
              s(:send,
                s(:send,
                  s(:lvar, :e), :force_documentation), :!))),
          s(:block,
            s(:send,
              s(:lvar, :array), :reject!),
            s(:args,
              s(:arg, :e)),
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :e), :visibility), :==,
                s(:sym, :private)),
              s(:send,
                s(:send,
                  s(:lvar, :e), :force_documentation), :!))))),
      s(:def, :resolve_aliases,
        s(:args,
          s(:arg, :added)),
        s(:begin,
          s(:lvasgn, :key,
            s(:send,
              s(:lvar, :added), :pretty_name)),
          s(:lvasgn, :unmatched_alias_list,
            s(:send,
              s(:ivar, :@unmatched_alias_lists), :[],
              s(:lvar, :key))),
          s(:if,
            s(:lvar, :unmatched_alias_list), nil,
            s(:return)),
          s(:block,
            s(:send,
              s(:lvar, :unmatched_alias_list), :each),
            s(:args,
              s(:arg, :unmatched_alias)),
            s(:begin,
              s(:send,
                s(:lvar, :added), :add_alias,
                s(:lvar, :unmatched_alias),
                s(:self)),
              s(:send,
                s(:ivar, :@external_aliases), :delete,
                s(:lvar, :unmatched_alias)))),
          s(:send,
            s(:ivar, :@unmatched_alias_lists), :delete,
            s(:lvar, :key)))),
      s(:def, :section_contents,
        s(:args),
        s(:begin,
          s(:lvasgn, :used_sections,
            s(:hash)),
          s(:block,
            s(:send, nil, :each_method),
            s(:args,
              s(:arg, :method)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :method), :display?), nil,
                s(:next)),
              s(:send,
                s(:lvar, :used_sections), :[]=,
                s(:send,
                  s(:lvar, :method), :section),
                s(:true)))),
          s(:lvasgn, :sections,
            s(:block,
              s(:send,
                s(:send, nil, :sort_sections), :select),
              s(:args,
                s(:arg, :section)),
              s(:send,
                s(:lvar, :used_sections), :[],
                s(:lvar, :section)))),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :sections), :length), :==,
                s(:int, 1)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :sections), :first), :title), :!)),
            s(:return,
              s(:array)), nil),
          s(:lvar, :sections))),
      s(:def, :sections,
        s(:args),
        s(:send,
          s(:ivar, :@sections), :values)),
      s(:def, :sections_hash,
        s(:args),
        s(:ivar, :@sections)),
      s(:def, :set_current_section,
        s(:args,
          s(:arg, :title),
          s(:arg, :comment)),
        s(:ivasgn, :@current_section,
          s(:send, nil, :add_section,
            s(:lvar, :title),
            s(:lvar, :comment)))),
      s(:def, :set_visibility_for,
        s(:args,
          s(:arg, :methods),
          s(:arg, :visibility),
          s(:optarg, :singleton,
            s(:false))),
        s(:block,
          s(:send, nil, :methods_matching,
            s(:lvar, :methods),
            s(:lvar, :singleton)),
          s(:args,
            s(:arg, :m)),
          s(:send,
            s(:lvar, :m), :visibility=,
            s(:lvar, :visibility)))),
      s(:def, :sort_sections,
        s(:args),
        s(:begin,
          s(:lvasgn, :titles,
            s(:block,
              s(:send,
                s(:ivar, :@sections), :map),
              s(:args,
                s(:arg, :title),
                s(:arg, :_)),
              s(:lvar, :title))),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :titles), :length), :>,
                s(:int, 1)),
              s(:send,
                s(:const, nil, :TOMDOC_TITLES_SORT), :==,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :titles), :|,
                        s(:const, nil, :TOMDOC_TITLES))), :sort_by),
                  s(:args,
                    s(:arg, :title)),
                  s(:send,
                    s(:lvar, :title), :to_s)))),
            s(:send,
              s(:send,
                s(:ivar, :@sections), :values_at,
                s(:splat,
                  s(:const, nil, :TOMDOC_TITLES))), :compact),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:ivar, :@sections), :sort_by),
                  s(:args,
                    s(:arg, :title),
                    s(:arg, :_)),
                  s(:send,
                    s(:lvar, :title), :to_s)), :map),
              s(:args,
                s(:arg, :_),
                s(:arg, :section)),
              s(:lvar, :section))))),
      s(:def, :to_s,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send,
              s(:send,
                s(:self), :class), :name)),
          s(:str, " "),
          s(:begin,
            s(:send,
              s(:self), :full_name)))),
      s(:def, :top_level,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@top_level)),
            s(:return,
              s(:ivar, :@top_level)), nil),
          s(:ivasgn, :@top_level,
            s(:self)),
          s(:until,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :TopLevel), :===,
              s(:ivar, :@top_level)),
            s(:ivasgn, :@top_level,
              s(:send,
                s(:ivar, :@top_level), :parent))),
          s(:ivar, :@top_level))),
      s(:def, :upgrade_to_class,
        s(:args,
          s(:arg, :mod),
          s(:arg, :class_type),
          s(:arg, :enclosing)),
        s(:begin,
          s(:send,
            s(:send,
              s(:lvar, :enclosing), :modules_hash), :delete,
            s(:send,
              s(:lvar, :mod), :name)),
          s(:lvasgn, :klass,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :ClassModule), :from_module,
              s(:lvar, :class_type),
              s(:lvar, :mod))),
          s(:send,
            s(:lvar, :klass), :store=,
            s(:ivar, :@store)),
          s(:send,
            s(:send,
              s(:ivar, :@store), :classes_hash), :[]=,
            s(:send,
              s(:lvar, :mod), :full_name),
            s(:lvar, :klass)),
          s(:send,
            s(:send,
              s(:lvar, :enclosing), :classes_hash), :[]=,
            s(:send,
              s(:lvar, :mod), :name),
            s(:lvar, :klass)),
          s(:lvar, :klass))),
      s(:send, nil, :autoload,
        s(:sym, :Section),
        s(:str, "rdoc/context/section")))))
