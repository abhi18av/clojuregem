s(:class,
  s(:const,
    s(:const, nil, :RDoc), :Markdown), nil,
  s(:begin,
    s(:def, :initialize,
      s(:args,
        s(:arg, :str),
        s(:optarg, :debug,
          s(:false))),
      s(:send, nil, :setup_parser,
        s(:lvar, :str),
        s(:lvar, :debug))),
    s(:def, :setup_parser,
      s(:args,
        s(:arg, :str),
        s(:optarg, :debug,
          s(:false))),
      s(:begin,
        s(:send, nil, :set_string,
          s(:lvar, :str),
          s(:int, 0)),
        s(:ivasgn, :@memoizations,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :h),
              s(:arg, :k)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :k),
              s(:hash)))),
        s(:ivasgn, :@result,
          s(:nil)),
        s(:ivasgn, :@failed_rule,
          s(:nil)),
        s(:ivasgn, :@failing_rule_offset,
          s(:int, -1)),
        s(:send, nil, :setup_foreign_grammar))),
    s(:send, nil, :attr_reader,
      s(:sym, :string)),
    s(:send, nil, :attr_reader,
      s(:sym, :failing_rule_offset)),
    s(:send, nil, :attr_accessor,
      s(:sym, :result),
      s(:sym, :pos)),
    s(:def, :current_column,
      s(:args,
        s(:optarg, :target,
          s(:send, nil, :pos))),
      s(:begin,
        s(:if,
          s(:lvasgn, :c,
            s(:send,
              s(:send, nil, :string), :rindex,
              s(:str, "\n"),
              s(:send,
                s(:lvar, :target), :-,
                s(:int, 1)))),
          s(:return,
            s(:send,
              s(:send,
                s(:lvar, :target), :-,
                s(:lvar, :c)), :-,
              s(:int, 1))), nil),
        s(:send,
          s(:lvar, :target), :+,
          s(:int, 1)))),
    s(:def, :current_line,
      s(:args,
        s(:optarg, :target,
          s(:send, nil, :pos))),
      s(:begin,
        s(:lvasgn, :cur_offset,
          s(:int, 0)),
        s(:lvasgn, :cur_line,
          s(:int, 0)),
        s(:block,
          s(:send,
            s(:send, nil, :string), :each_line),
          s(:args,
            s(:arg, :line)),
          s(:begin,
            s(:op_asgn,
              s(:lvasgn, :cur_line), :+,
              s(:int, 1)),
            s(:op_asgn,
              s(:lvasgn, :cur_offset), :+,
              s(:send,
                s(:lvar, :line), :size)),
            s(:if,
              s(:send,
                s(:lvar, :cur_offset), :>=,
                s(:lvar, :target)),
              s(:return,
                s(:lvar, :cur_line)), nil))),
        s(:int, -1))),
    s(:def, :lines,
      s(:args),
      s(:begin,
        s(:lvasgn, :lines,
          s(:array)),
        s(:block,
          s(:send,
            s(:send, nil, :string), :each_line),
          s(:args,
            s(:arg, :l)),
          s(:send,
            s(:lvar, :lines), :<<,
            s(:lvar, :l))),
        s(:lvar, :lines))),
    s(:def, :get_text,
      s(:args,
        s(:arg, :start)),
      s(:send,
        s(:ivar, :@string), :[],
        s(:irange,
          s(:lvar, :start),
          s(:send,
            s(:ivar, :@pos), :-,
            s(:int, 1))))),
    s(:def, :set_string,
      s(:args,
        s(:arg, :string),
        s(:arg, :pos)),
      s(:begin,
        s(:ivasgn, :@string,
          s(:lvar, :string)),
        s(:ivasgn, :@string_size,
          s(:if,
            s(:lvar, :string),
            s(:send,
              s(:lvar, :string), :size),
            s(:int, 0))),
        s(:ivasgn, :@pos,
          s(:lvar, :pos)))),
    s(:def, :show_pos,
      s(:args),
      s(:begin,
        s(:lvasgn, :width,
          s(:int, 10)),
        s(:if,
          s(:send,
            s(:ivar, :@pos), :<,
            s(:lvar, :width)),
          s(:dstr,
            s(:begin,
              s(:ivar, :@pos)),
            s(:str, " (\""),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:int, 0),
                s(:ivar, :@pos))),
            s(:str, "\" @ \""),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:ivar, :@pos),
                s(:lvar, :width))),
            s(:str, "\")")),
          s(:dstr,
            s(:begin,
              s(:ivar, :@pos)),
            s(:str, " (\"... "),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:send,
                  s(:ivar, :@pos), :-,
                  s(:lvar, :width)),
                s(:lvar, :width))),
            s(:str, "\" @ \""),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:ivar, :@pos),
                s(:lvar, :width))),
            s(:str, "\")"))))),
    s(:def, :failure_info,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:if,
          s(:send,
            s(:ivar, :@failed_rule), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:begin,
            s(:lvasgn, :info,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :Rules), :[],
                s(:ivar, :@failed_rule))),
            s(:dstr,
              s(:str, "line "),
              s(:begin,
                s(:lvar, :l)),
              s(:str, ", column "),
              s(:begin,
                s(:lvar, :c)),
              s(:str, ": failed rule '"),
              s(:begin,
                s(:send,
                  s(:lvar, :info), :name)),
              s(:str, "' = '"),
              s(:begin,
                s(:send,
                  s(:lvar, :info), :rendered)),
              s(:str, "'"))),
          s(:dstr,
            s(:str, "line "),
            s(:begin,
              s(:lvar, :l)),
            s(:str, ", column "),
            s(:begin,
              s(:lvar, :c)),
            s(:str, ": failed rule '"),
            s(:begin,
              s(:ivar, :@failed_rule)),
            s(:str, "'"))))),
    s(:def, :failure_caret,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :line,
          s(:send,
            s(:send, nil, :lines), :[],
            s(:send,
              s(:lvar, :l), :-,
              s(:int, 1)))),
        s(:dstr,
          s(:begin,
            s(:lvar, :line)),
          s(:str, "\n"),
          s(:begin,
            s(:send,
              s(:str, " "), :*,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-,
                  s(:int, 1))))),
          s(:str, "^")))),
    s(:def, :failure_character,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:send,
          s(:send,
            s(:send, nil, :lines), :[],
            s(:send,
              s(:lvar, :l), :-,
              s(:int, 1))), :[],
          s(:send,
            s(:lvar, :c), :-,
            s(:int, 1)),
          s(:int, 1)))),
    s(:def, :failure_oneline,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :char,
          s(:send,
            s(:send,
              s(:send, nil, :lines), :[],
              s(:send,
                s(:lvar, :l), :-,
                s(:int, 1))), :[],
            s(:send,
              s(:lvar, :c), :-,
              s(:int, 1)),
            s(:int, 1))),
        s(:if,
          s(:send,
            s(:ivar, :@failed_rule), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:begin,
            s(:lvasgn, :info,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :Rules), :[],
                s(:ivar, :@failed_rule))),
            s(:dstr,
              s(:str, "@"),
              s(:begin,
                s(:lvar, :l)),
              s(:str, ":"),
              s(:begin,
                s(:lvar, :c)),
              s(:str, " failed rule '"),
              s(:begin,
                s(:send,
                  s(:lvar, :info), :name)),
              s(:str, "', got '"),
              s(:begin,
                s(:lvar, :char)),
              s(:str, "'"))),
          s(:dstr,
            s(:str, "@"),
            s(:begin,
              s(:lvar, :l)),
            s(:str, ":"),
            s(:begin,
              s(:lvar, :c)),
            s(:str, " failed rule '"),
            s(:begin,
              s(:ivar, :@failed_rule)),
            s(:str, "', got '"),
            s(:begin,
              s(:lvar, :char)),
            s(:str, "'"))))),
    s(:class,
      s(:const, nil, :ParseError),
      s(:const, nil, :RuntimeError), nil),
    s(:def, :raise_error,
      s(:args),
      s(:send, nil, :raise,
        s(:const, nil, :ParseError),
        s(:send, nil, :failure_oneline))),
    s(:def, :show_error,
      s(:args,
        s(:optarg, :io,
          s(:const, nil, :STDOUT))),
      s(:begin,
        s(:lvasgn, :error_pos,
          s(:ivar, :@failing_rule_offset)),
        s(:lvasgn, :line_no,
          s(:send, nil, :current_line,
            s(:lvar, :error_pos))),
        s(:lvasgn, :col_no,
          s(:send, nil, :current_column,
            s(:lvar, :error_pos))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:dstr,
            s(:str, "On line "),
            s(:begin,
              s(:lvar, :line_no)),
            s(:str, ", column "),
            s(:begin,
              s(:lvar, :col_no)),
            s(:str, ":"))),
        s(:if,
          s(:send,
            s(:ivar, :@failed_rule), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:begin,
            s(:lvasgn, :info,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :Rules), :[],
                s(:ivar, :@failed_rule))),
            s(:send,
              s(:lvar, :io), :puts,
              s(:dstr,
                s(:str, "Failed to match '"),
                s(:begin,
                  s(:send,
                    s(:lvar, :info), :rendered)),
                s(:str, "' (rule '"),
                s(:begin,
                  s(:send,
                    s(:lvar, :info), :name)),
                s(:str, "')")))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:dstr,
              s(:str, "Failed to match rule '"),
              s(:begin,
                s(:ivar, :@failed_rule)),
              s(:str, "'")))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:dstr,
            s(:str, "Got: "),
            s(:begin,
              s(:send,
                s(:send,
                  s(:send, nil, :string), :[],
                  s(:lvar, :error_pos),
                  s(:int, 1)), :inspect)))),
        s(:lvasgn, :line,
          s(:send,
            s(:send, nil, :lines), :[],
            s(:send,
              s(:lvar, :line_no), :-,
              s(:int, 1)))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:dstr,
            s(:str, "=> "),
            s(:begin,
              s(:lvar, :line)))),
        s(:send,
          s(:lvar, :io), :print,
          s(:send,
            s(:str, " "), :*,
            s(:begin,
              s(:send,
                s(:lvar, :col_no), :+,
                s(:int, 3))))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:str, "^")))),
    s(:def, :set_failed_rule,
      s(:args,
        s(:arg, :name)),
      s(:if,
        s(:send,
          s(:ivar, :@pos), :>,
          s(:ivar, :@failing_rule_offset)),
        s(:begin,
          s(:ivasgn, :@failed_rule,
            s(:lvar, :name)),
          s(:ivasgn, :@failing_rule_offset,
            s(:ivar, :@pos))), nil)),
    s(:send, nil, :attr_reader,
      s(:sym, :failed_rule)),
    s(:def, :match_string,
      s(:args,
        s(:arg, :str)),
      s(:begin,
        s(:lvasgn, :len,
          s(:send,
            s(:lvar, :str), :size)),
        s(:if,
          s(:send,
            s(:send,
              s(:ivar, :@string), :[],
              s(:send, nil, :pos),
              s(:lvar, :len)), :==,
            s(:lvar, :str)),
          s(:begin,
            s(:op_asgn,
              s(:ivasgn, :@pos), :+,
              s(:lvar, :len)),
            s(:return,
              s(:lvar, :str))), nil),
        s(:return,
          s(:nil)))),
    s(:def, :scan,
      s(:args,
        s(:arg, :reg)),
      s(:begin,
        s(:if,
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :reg), :match,
              s(:send,
                s(:ivar, :@string), :[],
                s(:irange,
                  s(:ivar, :@pos),
                  s(:int, -1))))),
          s(:begin,
            s(:lvasgn, :width,
              s(:send,
                s(:lvar, :m), :end,
                s(:int, 0))),
            s(:op_asgn,
              s(:ivasgn, :@pos), :+,
              s(:lvar, :width)),
            s(:return,
              s(:true))), nil),
        s(:return,
          s(:nil)))),
    s(:if,
      s(:send,
        s(:str, ""), :respond_to?,
        s(:sym, :ord)),
      s(:def, :get_byte,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@pos), :>=,
              s(:ivar, :@string_size)),
            s(:return,
              s(:nil)), nil),
          s(:lvasgn, :s,
            s(:send,
              s(:send,
                s(:ivar, :@string), :[],
                s(:ivar, :@pos)), :ord)),
          s(:op_asgn,
            s(:ivasgn, :@pos), :+,
            s(:int, 1)),
          s(:lvar, :s))),
      s(:def, :get_byte,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@pos), :>=,
              s(:ivar, :@string_size)),
            s(:return,
              s(:nil)), nil),
          s(:lvasgn, :s,
            s(:send,
              s(:ivar, :@string), :[],
              s(:ivar, :@pos))),
          s(:op_asgn,
            s(:ivasgn, :@pos), :+,
            s(:int, 1)),
          s(:lvar, :s)))),
    s(:def, :parse,
      s(:args,
        s(:optarg, :rule,
          s(:nil))),
      s(:if,
        s(:send,
          s(:lvar, :rule), :!),
        s(:send, nil, :apply,
          s(:sym, :_root)),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:lvar, :rule), :gsub,
              s(:str, "-"),
              s(:str, "_hyphen_"))),
          s(:send, nil, :apply,
            s(:dsym,
              s(:str, "_"),
              s(:begin,
                s(:lvar, :method))))))),
    s(:class,
      s(:const, nil, :MemoEntry), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :ans),
            s(:arg, :pos)),
          s(:begin,
            s(:ivasgn, :@ans,
              s(:lvar, :ans)),
            s(:ivasgn, :@pos,
              s(:lvar, :pos)),
            s(:ivasgn, :@result,
              s(:nil)),
            s(:ivasgn, :@set,
              s(:false)),
            s(:ivasgn, :@left_rec,
              s(:false)))),
        s(:send, nil, :attr_reader,
          s(:sym, :ans),
          s(:sym, :pos),
          s(:sym, :result),
          s(:sym, :set)),
        s(:send, nil, :attr_accessor,
          s(:sym, :left_rec)),
        s(:def, :move!,
          s(:args,
            s(:arg, :ans),
            s(:arg, :pos),
            s(:arg, :result)),
          s(:begin,
            s(:ivasgn, :@ans,
              s(:lvar, :ans)),
            s(:ivasgn, :@pos,
              s(:lvar, :pos)),
            s(:ivasgn, :@result,
              s(:lvar, :result)),
            s(:ivasgn, :@set,
              s(:true)),
            s(:ivasgn, :@left_rec,
              s(:false)))))),
    s(:def, :external_invoke,
      s(:args,
        s(:arg, :other),
        s(:arg, :rule),
        s(:restarg, :args)),
      s(:begin,
        s(:lvasgn, :old_pos,
          s(:ivar, :@pos)),
        s(:lvasgn, :old_string,
          s(:ivar, :@string)),
        s(:send, nil, :set_string,
          s(:send,
            s(:lvar, :other), :string),
          s(:send,
            s(:lvar, :other), :pos)),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:if,
                s(:lvasgn, :val,
                  s(:send, nil, :__send__,
                    s(:lvar, :rule),
                    s(:splat,
                      s(:lvar, :args)))),
                s(:begin,
                  s(:send,
                    s(:lvar, :other), :pos=,
                    s(:ivar, :@pos)),
                  s(:send,
                    s(:lvar, :other), :result=,
                    s(:ivar, :@result))),
                s(:send,
                  s(:lvar, :other), :set_failed_rule,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, "#"),
                    s(:begin,
                      s(:lvar, :rule))))),
              s(:lvar, :val)),
            s(:send, nil, :set_string,
              s(:lvar, :old_string),
              s(:lvar, :old_pos)))))),
    s(:def, :apply_with_args,
      s(:args,
        s(:arg, :rule),
        s(:restarg, :args)),
      s(:begin,
        s(:lvasgn, :memo_key,
          s(:array,
            s(:lvar, :rule),
            s(:lvar, :args))),
        s(:if,
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:ivar, :@memoizations), :[],
                s(:lvar, :memo_key)), :[],
              s(:ivar, :@pos))),
          s(:begin,
            s(:ivasgn, :@pos,
              s(:send,
                s(:lvar, :m), :pos)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :m), :set), :!),
              s(:begin,
                s(:send,
                  s(:lvar, :m), :left_rec=,
                  s(:true)),
                s(:return,
                  s(:nil))), nil),
            s(:ivasgn, :@result,
              s(:send,
                s(:lvar, :m), :result)),
            s(:return,
              s(:send,
                s(:lvar, :m), :ans))),
          s(:begin,
            s(:lvasgn, :m,
              s(:send,
                s(:const, nil, :MemoEntry), :new,
                s(:nil),
                s(:ivar, :@pos))),
            s(:send,
              s(:send,
                s(:ivar, :@memoizations), :[],
                s(:lvar, :memo_key)), :[]=,
              s(:ivar, :@pos),
              s(:lvar, :m)),
            s(:lvasgn, :start_pos,
              s(:ivar, :@pos)),
            s(:lvasgn, :ans,
              s(:send, nil, :__send__,
                s(:lvar, :rule),
                s(:splat,
                  s(:lvar, :args)))),
            s(:lvasgn, :lr,
              s(:send,
                s(:lvar, :m), :left_rec)),
            s(:send,
              s(:lvar, :m), :move!,
              s(:lvar, :ans),
              s(:ivar, :@pos),
              s(:ivar, :@result)),
            s(:if,
              s(:and,
                s(:lvar, :ans),
                s(:lvar, :lr)),
              s(:return,
                s(:send, nil, :grow_lr,
                  s(:lvar, :rule),
                  s(:lvar, :args),
                  s(:lvar, :start_pos),
                  s(:lvar, :m))),
              s(:return,
                s(:lvar, :ans))),
            s(:return,
              s(:lvar, :ans)))))),
    s(:def, :apply,
      s(:args,
        s(:arg, :rule)),
      s(:if,
        s(:lvasgn, :m,
          s(:send,
            s(:send,
              s(:ivar, :@memoizations), :[],
              s(:lvar, :rule)), :[],
            s(:ivar, :@pos))),
        s(:begin,
          s(:ivasgn, :@pos,
            s(:send,
              s(:lvar, :m), :pos)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :m), :set), :!),
            s(:begin,
              s(:send,
                s(:lvar, :m), :left_rec=,
                s(:true)),
              s(:return,
                s(:nil))), nil),
          s(:ivasgn, :@result,
            s(:send,
              s(:lvar, :m), :result)),
          s(:return,
            s(:send,
              s(:lvar, :m), :ans))),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :MemoEntry), :new,
              s(:nil),
              s(:ivar, :@pos))),
          s(:send,
            s(:send,
              s(:ivar, :@memoizations), :[],
              s(:lvar, :rule)), :[]=,
            s(:ivar, :@pos),
            s(:lvar, :m)),
          s(:lvasgn, :start_pos,
            s(:ivar, :@pos)),
          s(:lvasgn, :ans,
            s(:send, nil, :__send__,
              s(:lvar, :rule))),
          s(:lvasgn, :lr,
            s(:send,
              s(:lvar, :m), :left_rec)),
          s(:send,
            s(:lvar, :m), :move!,
            s(:lvar, :ans),
            s(:ivar, :@pos),
            s(:ivar, :@result)),
          s(:if,
            s(:and,
              s(:lvar, :ans),
              s(:lvar, :lr)),
            s(:return,
              s(:send, nil, :grow_lr,
                s(:lvar, :rule),
                s(:nil),
                s(:lvar, :start_pos),
                s(:lvar, :m))),
            s(:return,
              s(:lvar, :ans))),
          s(:return,
            s(:lvar, :ans))))),
    s(:def, :grow_lr,
      s(:args,
        s(:arg, :rule),
        s(:arg, :args),
        s(:arg, :start_pos),
        s(:arg, :m)),
      s(:begin,
        s(:while,
          s(:true),
          s(:begin,
            s(:ivasgn, :@pos,
              s(:lvar, :start_pos)),
            s(:ivasgn, :@result,
              s(:send,
                s(:lvar, :m), :result)),
            s(:if,
              s(:lvar, :args),
              s(:lvasgn, :ans,
                s(:send, nil, :__send__,
                  s(:lvar, :rule),
                  s(:splat,
                    s(:lvar, :args)))),
              s(:lvasgn, :ans,
                s(:send, nil, :__send__,
                  s(:lvar, :rule)))),
            s(:if,
              s(:lvar, :ans), nil,
              s(:return,
                s(:nil))),
            s(:if,
              s(:send,
                s(:ivar, :@pos), :<=,
                s(:send,
                  s(:lvar, :m), :pos)),
              s(:break), nil),
            s(:send,
              s(:lvar, :m), :move!,
              s(:lvar, :ans),
              s(:ivar, :@pos),
              s(:ivar, :@result)))),
        s(:ivasgn, :@result,
          s(:send,
            s(:lvar, :m), :result)),
        s(:ivasgn, :@pos,
          s(:send,
            s(:lvar, :m), :pos)),
        s(:return,
          s(:send,
            s(:lvar, :m), :ans)))),
    s(:class,
      s(:const, nil, :RuleInfo), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :name),
            s(:arg, :rendered)),
          s(:begin,
            s(:ivasgn, :@name,
              s(:lvar, :name)),
            s(:ivasgn, :@rendered,
              s(:lvar, :rendered)))),
        s(:send, nil, :attr_reader,
          s(:sym, :name),
          s(:sym, :rendered)))),
    s(:defs,
      s(:self), :rule_info,
      s(:args,
        s(:arg, :name),
        s(:arg, :rendered)),
      s(:send,
        s(:const, nil, :RuleInfo), :new,
        s(:lvar, :name),
        s(:lvar, :rendered))),
    s(:send, nil, :require,
      s(:str, "rubygems")),
    s(:send, nil, :require,
      s(:str, "rdoc")),
    s(:send, nil, :require,
      s(:str, "rdoc/markup/to_joined_paragraph")),
    s(:send, nil, :require,
      s(:str, "rdoc/markdown/entities")),
    s(:if,
      s(:send,
        s(:const, nil, :RUBY_VERSION), :>,
        s(:str, "1.9")),
      s(:send, nil, :require,
        s(:str, "rdoc/markdown/literals_1_9")),
      s(:send, nil, :require,
        s(:str, "rdoc/markdown/literals_1_8"))),
    s(:casgn, nil, :EXTENSIONS,
      s(:array)),
    s(:casgn, nil, :DEFAULT_EXTENSIONS,
      s(:array,
        s(:sym, :definition_lists),
        s(:sym, :github),
        s(:sym, :html),
        s(:sym, :notes))),
    s(:defs,
      s(:self), :extension,
      s(:args,
        s(:arg, :name)),
      s(:begin,
        s(:send,
          s(:const, nil, :EXTENSIONS), :<<,
          s(:lvar, :name)),
        s(:block,
          s(:send, nil, :define_method,
            s(:dstr,
              s(:begin,
                s(:lvar, :name)),
              s(:str, "?"))),
          s(:args),
          s(:send, nil, :extension?,
            s(:lvar, :name))),
        s(:block,
          s(:send, nil, :define_method,
            s(:dstr,
              s(:begin,
                s(:lvar, :name)),
              s(:str, "="))),
          s(:args,
            s(:arg, :enable)),
          s(:send, nil, :extension,
            s(:lvar, :name),
            s(:lvar, :enable))))),
    s(:send, nil, :extension,
      s(:sym, :break_on_newline)),
    s(:send, nil, :extension,
      s(:sym, :css)),
    s(:send, nil, :extension,
      s(:sym, :definition_lists)),
    s(:send, nil, :extension,
      s(:sym, :github)),
    s(:send, nil, :extension,
      s(:sym, :html)),
    s(:send, nil, :extension,
      s(:sym, :notes)),
    s(:defs,
      s(:self), :parse,
      s(:args,
        s(:arg, :markdown)),
      s(:begin,
        s(:lvasgn, :parser,
          s(:send, nil, :new)),
        s(:send,
          s(:lvar, :parser), :parse,
          s(:lvar, :markdown)))),
    s(:alias,
      s(:sym, :orig_initialize),
      s(:sym, :initialize)),
    s(:def, :initialize,
      s(:args,
        s(:optarg, :extensions,
          s(:const, nil, :DEFAULT_EXTENSIONS)),
        s(:optarg, :debug,
          s(:false))),
      s(:begin,
        s(:ivasgn, :@debug,
          s(:lvar, :debug)),
        s(:ivasgn, :@formatter,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :ToJoinedParagraph), :new)),
        s(:ivasgn, :@extensions,
          s(:lvar, :extensions)),
        s(:ivasgn, :@references,
          s(:nil)),
        s(:ivasgn, :@unlinked_references,
          s(:nil)),
        s(:ivasgn, :@footnotes,
          s(:nil)),
        s(:ivasgn, :@note_order,
          s(:nil)))),
    s(:def, :emphasis,
      s(:args,
        s(:arg, :text)),
      s(:if,
        s(:send,
          s(:lvar, :text), :=~,
          s(:regexp,
            s(:str, "\\A[a-z\\d./]+\\z"),
            s(:regopt, :i))),
        s(:dstr,
          s(:str, "_"),
          s(:begin,
            s(:lvar, :text)),
          s(:str, "_")),
        s(:dstr,
          s(:str, "<em>"),
          s(:begin,
            s(:lvar, :text)),
          s(:str, "</em>")))),
    s(:def, :extension?,
      s(:args,
        s(:arg, :name)),
      s(:send,
        s(:ivar, :@extensions), :include?,
        s(:lvar, :name))),
    s(:def, :extension,
      s(:args,
        s(:arg, :name),
        s(:arg, :enable)),
      s(:if,
        s(:lvar, :enable),
        s(:op_asgn,
          s(:ivasgn, :@extensions), :|,
          s(:array,
            s(:lvar, :name))),
        s(:op_asgn,
          s(:ivasgn, :@extensions), :-,
          s(:array,
            s(:lvar, :name))))),
    s(:def, :inner_parse,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:lvasgn, :parser,
          s(:send, nil, :clone)),
        s(:send,
          s(:lvar, :parser), :setup_parser,
          s(:lvar, :text),
          s(:ivar, :@debug)),
        s(:send,
          s(:lvar, :parser), :peg_parse),
        s(:lvasgn, :doc,
          s(:send,
            s(:lvar, :parser), :result)),
        s(:send,
          s(:lvar, :doc), :accept,
          s(:ivar, :@formatter)),
        s(:send,
          s(:lvar, :doc), :parts))),
    s(:def, :link_to,
      s(:args,
        s(:arg, :content),
        s(:optarg, :label,
          s(:lvar, :content)),
        s(:optarg, :text,
          s(:nil))),
      s(:begin,
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :content), :start_with?,
              s(:str, "^")),
            s(:send,
              s(:lvar, :label), :equal?,
              s(:lvar, :content))),
          s(:send, nil, :raise,
            s(:str, "enable notes extension")), nil),
        s(:if,
          s(:lvasgn, :ref,
            s(:send,
              s(:ivar, :@references), :[],
              s(:lvar, :label))),
          s(:dstr,
            s(:str, "{"),
            s(:begin,
              s(:lvar, :content)),
            s(:str, "}["),
            s(:begin,
              s(:lvar, :ref)),
            s(:str, "]")),
          s(:if,
            s(:send,
              s(:lvar, :label), :equal?,
              s(:lvar, :content)),
            s(:dstr,
              s(:str, "["),
              s(:begin,
                s(:lvar, :content)),
              s(:str, "]"),
              s(:begin,
                s(:lvar, :text))),
            s(:dstr,
              s(:str, "["),
              s(:begin,
                s(:lvar, :content)),
              s(:str, "]"),
              s(:begin,
                s(:lvar, :text)),
              s(:str, "["),
              s(:begin,
                s(:lvar, :label)),
              s(:str, "]")))))),
    s(:def, :list_item_from,
      s(:args,
        s(:arg, :unparsed)),
      s(:begin,
        s(:lvasgn, :parsed,
          s(:send, nil, :inner_parse,
            s(:send,
              s(:lvar, :unparsed), :join))),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :ListItem), :new,
          s(:nil),
          s(:splat,
            s(:lvar, :parsed))))),
    s(:def, :note,
      s(:args,
        s(:arg, :label)),
      s(:send,
        s(:ivar, :@notes), :[]=,
        s(:lvar, :label),
        s(:send, nil, :foottext))),
    s(:def, :note_for,
      s(:args,
        s(:arg, :ref)),
      s(:begin,
        s(:send,
          s(:ivar, :@note_order), :<<,
          s(:lvar, :ref)),
        s(:lvasgn, :label,
          s(:send,
            s(:ivar, :@note_order), :length)),
        s(:dstr,
          s(:str, "{*"),
          s(:begin,
            s(:lvar, :label)),
          s(:str, "}[rdoc-label:foottext-"),
          s(:begin,
            s(:lvar, :label)),
          s(:str, ":footmark-"),
          s(:begin,
            s(:lvar, :label)),
          s(:str, "]")))),
    s(:alias,
      s(:sym, :peg_parse),
      s(:sym, :parse)),
    s(:def, :paragraph,
      s(:args,
        s(:arg, :parts)),
      s(:begin,
        s(:if,
          s(:send, nil, :break_on_newline?),
          s(:lvasgn, :parts,
            s(:block,
              s(:send,
                s(:lvar, :parts), :map),
              s(:args,
                s(:arg, :part)),
              s(:if,
                s(:send,
                  s(:str, "\n"), :==,
                  s(:lvar, :part)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :HardBreak), :new),
                s(:lvar, :part)))), nil),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
          s(:splat,
            s(:lvar, :parts))))),
    s(:def, :parse,
      s(:args,
        s(:arg, :markdown)),
      s(:begin,
        s(:ivasgn, :@references,
          s(:hash)),
        s(:ivasgn, :@unlinked_references,
          s(:hash)),
        s(:op_asgn,
          s(:lvasgn, :markdown), :+,
          s(:str, "\n\n")),
        s(:send, nil, :setup_parser,
          s(:lvar, :markdown),
          s(:ivar, :@debug)),
        s(:send, nil, :peg_parse,
          s(:str, "References")),
        s(:if,
          s(:send, nil, :notes?),
          s(:begin,
            s(:ivasgn, :@footnotes,
              s(:hash)),
            s(:send, nil, :setup_parser,
              s(:lvar, :markdown),
              s(:ivar, :@debug)),
            s(:send, nil, :peg_parse,
              s(:str, "Notes")),
            s(:ivasgn, :@note_order,
              s(:array))), nil),
        s(:send, nil, :setup_parser,
          s(:lvar, :markdown),
          s(:ivar, :@debug)),
        s(:send, nil, :peg_parse),
        s(:lvasgn, :doc,
          s(:send, nil, :result)),
        s(:if,
          s(:and,
            s(:send, nil, :notes?),
            s(:send,
              s(:send,
                s(:ivar, :@footnotes), :empty?), :!)),
          s(:begin,
            s(:send,
              s(:lvar, :doc), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Rule), :new,
                s(:int, 1))),
            s(:block,
              s(:send,
                s(:ivar, :@note_order), :each_with_index),
              s(:args,
                s(:arg, :ref),
                s(:arg, :index)),
              s(:begin,
                s(:lvasgn, :label,
                  s(:send,
                    s(:lvar, :index), :+,
                    s(:int, 1))),
                s(:lvasgn, :note,
                  s(:send,
                    s(:ivar, :@footnotes), :[],
                    s(:lvar, :ref))),
                s(:lvasgn, :link,
                  s(:dstr,
                    s(:str, "{^"),
                    s(:begin,
                      s(:lvar, :label)),
                    s(:str, "}[rdoc-label:footmark-"),
                    s(:begin,
                      s(:lvar, :label)),
                    s(:str, ":foottext-"),
                    s(:begin,
                      s(:lvar, :label)),
                    s(:str, "] "))),
                s(:send,
                  s(:send,
                    s(:lvar, :note), :parts), :unshift,
                  s(:lvar, :link)),
                s(:send,
                  s(:lvar, :doc), :<<,
                  s(:lvar, :note))))), nil),
        s(:send,
          s(:lvar, :doc), :accept,
          s(:ivar, :@formatter)),
        s(:lvar, :doc))),
    s(:def, :reference,
      s(:args,
        s(:arg, :label),
        s(:arg, :link)),
      s(:begin,
        s(:if,
          s(:lvasgn, :ref,
            s(:send,
              s(:ivar, :@unlinked_references), :delete,
              s(:lvar, :label))),
          s(:send,
            s(:lvar, :ref), :replace,
            s(:lvar, :link)), nil),
        s(:send,
          s(:ivar, :@references), :[]=,
          s(:lvar, :label),
          s(:lvar, :link)))),
    s(:def, :strong,
      s(:args,
        s(:arg, :text)),
      s(:if,
        s(:send,
          s(:lvar, :text), :=~,
          s(:regexp,
            s(:str, "\\A[a-z\\d./-]+\\z"),
            s(:regopt, :i))),
        s(:dstr,
          s(:str, "*"),
          s(:begin,
            s(:lvar, :text)),
          s(:str, "*")),
        s(:dstr,
          s(:str, "<b>"),
          s(:begin,
            s(:lvar, :text)),
          s(:str, "</b>")))),
    s(:def, :setup_foreign_grammar,
      s(:args),
      s(:ivasgn, :@_grammar_literals,
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markdown), :Literals), :new,
          s(:nil)))),
    s(:def, :_root,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :apply,
            s(:sym, :_Doc))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_root))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Doc,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_BOM))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Block))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:send,
                    s(:lvar, :_ary), :<<,
                    s(:ivar, :@result)), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:ivasgn, :@result,
              s(:lvar, :_ary)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Document), :new,
                  s(:splat,
                    s(:send,
                      s(:lvar, :a), :compact))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Doc))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Block,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_BlockQuote))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Verbatim))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_CodeFence))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Note))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Reference))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HorizontalRule))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Heading))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_OrderedList))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_BulletList))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_DefinitionList))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlBlock))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_StyleBlock))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Para))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Plain))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Block))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Para,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inlines))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :paragraph,
                  s(:lvar, :a)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Para))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Plain,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inlines))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :paragraph,
                  s(:lvar, :a)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Plain))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AtxInline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save4,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Sp)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?-mix:#*)"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Sp)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save3))),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inline))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AtxInline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AtxStart,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:\\\#{1,6})"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :text), :length))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AtxStart))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AtxHeading,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AtxStart))),
            s(:lvasgn, :s,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AtxInline))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_AtxInline))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Sp)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?-mix:#*)"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Sp)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save4))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save3)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :new,
                  s(:lvar, :s),
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AtxHeading))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SetextHeading,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_SetextHeading1))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_SetextHeading2))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SetextHeading))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SetextBottom1,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:={3,})"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SetextBottom1))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SetextBottom2,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:-{3,})"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SetextBottom2))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SetextHeading1,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_RawLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_SetextBottom1))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Endline)),
                s(:lvasgn, :_tmp,
                  s(:if,
                    s(:lvar, :_tmp),
                    s(:nil),
                    s(:true))),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save5)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Inline))),
                s(:lvasgn, :b,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:lvar, :b)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save4))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save6,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Endline)),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save6)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Inline))),
                        s(:lvasgn, :b,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save6)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :b)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save6))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save3))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save8,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save8)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_SetextBottom1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :new,
                  s(:int, 1),
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SetextHeading1))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SetextHeading2,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_RawLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_SetextBottom2))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Endline)),
                s(:lvasgn, :_tmp,
                  s(:if,
                    s(:lvar, :_tmp),
                    s(:nil),
                    s(:true))),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save5)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Inline))),
                s(:lvasgn, :b,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:lvar, :b)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save4))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save6,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Endline)),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save6)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Inline))),
                        s(:lvasgn, :b,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save6)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :b)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save6))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save3))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save8,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save8)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_SetextBottom2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Heading), :new,
                  s(:int, 2),
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SetextHeading2))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Heading,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_SetextHeading))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AtxHeading))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Heading))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_BlockQuote,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_BlockQuoteRaw))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :BlockQuote), :new,
                  s(:splat,
                    s(:lvar, :a))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_BlockQuote))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_BlockQuoteRaw,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, ">"))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, " "))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Line))),
                s(:lvasgn, :l,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:lvar, :l)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, ">"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save6)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_BlankLine)),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Line))),
                        s(:lvasgn, :c,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :c)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save5))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save9,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_BlankLine)),
                        s(:lvasgn, :n,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save9)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :n)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save9))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save10,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, ">"))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:break))),
                        s(:lvasgn, :_save11,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, " "))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:true)),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save11)))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Line))),
                        s(:lvasgn, :l,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :l)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:break))),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save13,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save14,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :match_string,
                                    s(:str, ">"))),
                                s(:lvasgn, :_tmp,
                                  s(:if,
                                    s(:lvar, :_tmp),
                                    s(:nil),
                                    s(:true))),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save14)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save13)),
                                    s(:break))),
                                s(:lvasgn, :_save15,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_BlankLine)),
                                s(:lvasgn, :_tmp,
                                  s(:if,
                                    s(:lvar, :_tmp),
                                    s(:nil),
                                    s(:true))),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save15)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save13)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Line))),
                                s(:lvasgn, :c,
                                  s(:ivar, :@result)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save13)),
                                    s(:break))),
                                s(:ivasgn, :@result,
                                  s(:kwbegin,
                                    s(:send,
                                      s(:lvar, :a), :<<,
                                      s(:lvar, :c)))),
                                s(:lvasgn, :_tmp,
                                  s(:true)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save13))),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:break))),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save17,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_BlankLine)),
                                s(:lvasgn, :n,
                                  s(:ivar, :@result)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save17)),
                                    s(:break))),
                                s(:ivasgn, :@result,
                                  s(:kwbegin,
                                    s(:send,
                                      s(:lvar, :a), :<<,
                                      s(:lvar, :n)))),
                                s(:lvasgn, :_tmp,
                                  s(:true)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save17))),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save10))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :inner_parse,
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_BlockQuoteRaw))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NonblankIndentedLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_IndentedLine))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NonblankIndentedLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_VerbatimChunk,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_ary,
              s(:array)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:send,
                    s(:lvar, :_ary), :<<,
                    s(:ivar, :@result)), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:ivasgn, :@result,
              s(:lvar, :_ary)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_NonblankIndentedLine))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_NonblankIndentedLine))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:lvasgn, :b,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :concat,
                  s(:lvar, :b)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_VerbatimChunk))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Verbatim,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_VerbatimChunk))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_VerbatimChunk))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
                  s(:splat,
                    s(:send,
                      s(:lvar, :a), :flatten))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Verbatim))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HorizontalRule,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "*"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "*"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "*"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Sp)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save4)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "*"))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save4))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "-"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "-"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "-"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Sp)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save7)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "-"))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save7))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save5))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save8,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "_"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save8)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save8)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "_"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save8)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save8)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "_"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save8)),
                        s(:break))),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save10,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Sp)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save10)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "_"))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save10))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save8))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save11,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save11))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Rule), :new,
                  s(:int, 1)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HorizontalRule))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Bullet,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HorizontalRule))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:[+*-])"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Bullet))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_BulletList,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Bullet))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListTight))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListLoose))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :List), :new,
                  s(:sym, :BULLET),
                  s(:splat,
                    s(:lvar, :a))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_BulletList))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListTight,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ListItemTight))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_ListItemTight))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Bullet))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save4)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Enumerator))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save4)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save3)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListTight))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListLoose,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListItem))),
                s(:lvasgn, :b,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:lvar, :b)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_ListItem))),
                        s(:lvasgn, :b,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_BlankLine)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :b)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save4))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListLoose))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListItem,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Bullet))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Enumerator))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ListBlock))),
            s(:lvasgn, :b,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :b)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_ListContinuationBlock))),
                    s(:lvasgn, :c,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :push,
                          s(:splat,
                            s(:lvar, :c))))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :list_item_from,
                  s(:lvar, :a)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListItem))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListItemTight,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Bullet))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Enumerator))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ListBlock))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_ListContinuationBlock))),
                    s(:lvasgn, :b,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :push,
                          s(:splat,
                            s(:lvar, :b))))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save5,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ListContinuationBlock))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save5)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :list_item_from,
                  s(:lvar, :a)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListItemTight))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListBlock,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Line))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListBlockLine))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:send,
                    s(:lvar, :_ary), :<<,
                    s(:ivar, :@result)), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:ivasgn, :@result,
              s(:lvar, :_ary)),
            s(:lvasgn, :c,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:array,
                  s(:lvar, :a),
                  s(:splat,
                    s(:lvar, :c))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListBlock))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListContinuationBlock,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:str, "\n")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Indent))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListBlock))),
                s(:lvasgn, :b,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :concat,
                      s(:lvar, :b)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save3))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Indent))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_ListBlock))),
                        s(:lvasgn, :b,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :concat,
                              s(:lvar, :b)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save4))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListContinuationBlock))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Enumerator,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :get_byte)),
            s(:if,
              s(:lvar, :_tmp),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :_tmp), :>=,
                    s(:int, 48)),
                  s(:send,
                    s(:lvar, :_tmp), :<=,
                    s(:int, 57))), nil,
                s(:begin,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2)),
                  s(:lvasgn, :_tmp,
                    s(:nil)))), nil),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :_tmp), :>=,
                            s(:int, 48)),
                          s(:send,
                            s(:lvar, :_tmp), :<=,
                            s(:int, 57))), nil,
                        s(:begin,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3)),
                          s(:lvasgn, :_tmp,
                            s(:nil)))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "."))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save4))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Enumerator))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_OrderedList,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Enumerator))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListTight))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ListLoose))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :List), :new,
                  s(:sym, :NUMBER),
                  s(:splat,
                    s(:lvar, :a))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_OrderedList))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ListBlockLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save4,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Indent))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Bullet))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Enumerator))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save3))),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save6,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HorizontalRule))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save6)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_OptionallyIndentedLine))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ListBlockLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlOpenAnchor,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "a"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "A"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlOpenAnchor))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlCloseAnchor,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "a"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "A"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlCloseAnchor))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlAnchor,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlOpenAnchor))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlAnchor))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlCloseAnchor))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlCloseAnchor))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlAnchor))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenAddress,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "address"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "ADDRESS"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenAddress))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseAddress,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "address"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "ADDRESS"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseAddress))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockAddress,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenAddress))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockAddress))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseAddress))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseAddress))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockAddress))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenBlockquote,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "blockquote"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "BLOCKQUOTE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenBlockquote))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseBlockquote,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "blockquote"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "BLOCKQUOTE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseBlockquote))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockBlockquote,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenBlockquote))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockBlockquote))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseBlockquote))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseBlockquote))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockBlockquote))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenCenter,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "center"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "CENTER"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenCenter))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseCenter,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "center"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "CENTER"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseCenter))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCenter,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenCenter))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockCenter))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseCenter))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseCenter))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCenter))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenDir,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dir"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DIR"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenDir))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseDir,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dir"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DIR"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseDir))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockDir,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenDir))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockDir))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseDir))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseDir))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockDir))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenDiv,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "div"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DIV"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenDiv))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseDiv,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "div"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DIV"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseDiv))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockDiv,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenDiv))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockDiv))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseDiv))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseDiv))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockDiv))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenDl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dl"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DL"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenDl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseDl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dl"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DL"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseDl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockDl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenDl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockDl))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseDl))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseDl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockDl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenFieldset,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "fieldset"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "FIELDSET"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenFieldset))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseFieldset,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "fieldset"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "FIELDSET"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseFieldset))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockFieldset,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenFieldset))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockFieldset))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseFieldset))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseFieldset))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockFieldset))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenForm,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "form"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "FORM"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenForm))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseForm,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "form"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "FORM"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseForm))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockForm,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenForm))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockForm))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseForm))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseForm))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockForm))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenH1,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h1"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H1"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenH1))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseH1,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h1"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H1"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseH1))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockH1,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenH1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockH1))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseH1))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseH1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockH1))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenH2,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h2"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H2"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenH2))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseH2,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h2"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H2"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseH2))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockH2,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenH2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockH2))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseH2))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseH2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockH2))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenH3,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h3"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H3"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenH3))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseH3,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h3"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H3"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseH3))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockH3,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenH3))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockH3))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseH3))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseH3))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockH3))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenH4,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h4"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H4"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenH4))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseH4,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h4"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H4"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseH4))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockH4,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenH4))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockH4))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseH4))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseH4))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockH4))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenH5,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h5"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H5"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenH5))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseH5,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h5"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H5"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseH5))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockH5,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenH5))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockH5))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseH5))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseH5))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockH5))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenH6,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h6"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H6"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenH6))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseH6,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "h6"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "H6"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseH6))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockH6,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenH6))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockH6))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseH6))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseH6))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockH6))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenMenu,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "menu"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "MENU"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenMenu))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseMenu,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "menu"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "MENU"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseMenu))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockMenu,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenMenu))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockMenu))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseMenu))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseMenu))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockMenu))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenNoframes,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "noframes"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "NOFRAMES"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenNoframes))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseNoframes,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "noframes"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "NOFRAMES"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseNoframes))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockNoframes,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenNoframes))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockNoframes))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseNoframes))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseNoframes))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockNoframes))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenNoscript,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "noscript"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "NOSCRIPT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenNoscript))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseNoscript,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "noscript"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "NOSCRIPT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseNoscript))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockNoscript,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenNoscript))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockNoscript))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseNoscript))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseNoscript))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockNoscript))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenOl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "ol"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "OL"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenOl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseOl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "ol"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "OL"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseOl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenOl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockOl))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseOl))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseOl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenP,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "p"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "P"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenP))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseP,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "p"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "P"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseP))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockP,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenP))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockP))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseP))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseP))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockP))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenPre,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "pre"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "PRE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenPre))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockClosePre,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "pre"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "PRE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockClosePre))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockPre,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenPre))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockPre))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockClosePre))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockClosePre))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockPre))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenTable,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "table"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TABLE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenTable))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseTable,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "table"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TABLE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseTable))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockTable,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenTable))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockTable))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseTable))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseTable))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockTable))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenUl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "ul"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "UL"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenUl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseUl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "ul"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "UL"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseUl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockUl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenUl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockUl))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseUl))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseUl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockUl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenDd,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dd"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DD"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenDd))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseDd,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dd"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DD"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseDd))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockDd,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenDd))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockDd))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseDd))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseDd))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockDd))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenDt,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dt"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenDt))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseDt,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "dt"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "DT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseDt))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockDt,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenDt))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockDt))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseDt))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseDt))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockDt))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenFrameset,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "frameset"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "FRAMESET"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenFrameset))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseFrameset,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "frameset"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "FRAMESET"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseFrameset))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockFrameset,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenFrameset))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockFrameset))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseFrameset))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseFrameset))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockFrameset))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenLi,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "li"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "LI"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenLi))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseLi,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "li"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "LI"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseLi))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockLi,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenLi))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockLi))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseLi))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseLi))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockLi))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenTbody,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "tbody"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TBODY"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenTbody))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseTbody,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "tbody"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TBODY"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseTbody))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockTbody,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenTbody))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockTbody))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseTbody))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseTbody))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockTbody))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenTd,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "td"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TD"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenTd))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseTd,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "td"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TD"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseTd))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockTd,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenTd))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockTd))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseTd))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseTd))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockTd))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenTfoot,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "tfoot"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TFOOT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenTfoot))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseTfoot,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "tfoot"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TFOOT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseTfoot))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockTfoot,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenTfoot))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockTfoot))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseTfoot))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseTfoot))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockTfoot))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenTh,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "th"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TH"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenTh))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseTh,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "th"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TH"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseTh))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockTh,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenTh))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockTh))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseTh))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseTh))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockTh))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenThead,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "thead"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "THEAD"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenThead))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseThead,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "thead"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "THEAD"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseThead))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockThead,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenThead))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockThead))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseThead))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseThead))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockThead))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenTr,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "tr"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TR"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenTr))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseTr,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "tr"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "TR"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseTr))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockTr,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenTr))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockTr))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_HtmlBlockCloseTr))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseTr))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockTr))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockOpenScript,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "script"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "SCRIPT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockOpenScript))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockCloseScript,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "script"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "SCRIPT"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockCloseScript))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockScript,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOpenScript))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_HtmlBlockCloseScript))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCloseScript))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockScript))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockInTags,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlAnchor))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockAddress))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockBlockquote))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockCenter))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockDir))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockDiv))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockDl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockFieldset))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockForm))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockH1))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockH2))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockH3))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockH4))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockH5))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockH6))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockMenu))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockNoframes))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockNoscript))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockOl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockP))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockPre))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockTable))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockUl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockDd))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockDt))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockFrameset))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockLi))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockTbody))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockTd))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockTfoot))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockTh))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockThead))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockTr))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockScript))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockInTags))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlock,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlBlockInTags))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlComment))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlBlockSelfClosing))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlUnclosed))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:if,
                  s(:send, nil, :html?),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :Raw), :new,
                    s(:lvar, :text)), nil))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlock))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlUnclosed,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlUnclosedType))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlUnclosed))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlUnclosedType,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "HR"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "hr"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlUnclosedType))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockSelfClosing,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlockType))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockSelfClosing))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlBlockType,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "ADDRESS"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "BLOCKQUOTE"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "CENTER"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "DD"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "DIR"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "DIV"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "DL"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "DT"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "FIELDSET"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "FORM"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "FRAMESET"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "H1"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "H2"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "H3"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "H4"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "H5"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "H6"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "HR"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "ISINDEX"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "LI"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "MENU"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "NOFRAMES"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "NOSCRIPT"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "OL"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "P"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "PRE"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "SCRIPT"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "TABLE"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "TBODY"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "TD"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "TFOOT"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "TH"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "THEAD"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "TR"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "UL"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "address"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "blockquote"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "center"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "dd"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "dir"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "div"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "dl"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "dt"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "fieldset"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "form"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "frameset"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "h1"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "h2"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "h3"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "h4"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "h5"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "h6"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "hr"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "isindex"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "li"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "menu"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "noframes"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "noscript"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "ol"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "p"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "pre"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "script"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "table"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "tbody"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "td"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "tfoot"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "th"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "thead"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "tr"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "ul"))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlBlockType))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StyleOpen,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "style"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "STYLE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StyleOpen))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StyleClose,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "style"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "STYLE"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StyleClose))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_InStyleTags,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StyleOpen))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_StyleClose))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StyleClose))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_InStyleTags))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StyleBlock,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_InStyleTags))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:if,
                  s(:send, nil, :css?),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :Raw), :new,
                    s(:lvar, :text)), nil))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StyleBlock))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Inlines,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Endline)),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:lvasgn, :i,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:lvar, :i))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Endline)),
                    s(:lvasgn, :c,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:lvasgn, :_save6,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save6)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:lvar, :c))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save5))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save7,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save8,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save9,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Endline)),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save9)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save8)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Inline))),
                            s(:lvasgn, :i,
                              s(:ivar, :@result)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save8)),
                                s(:break))),
                            s(:ivasgn, :@result,
                              s(:kwbegin,
                                s(:lvar, :i))),
                            s(:lvasgn, :_tmp,
                              s(:true)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save8))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:lvasgn, :_save10,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Endline)),
                            s(:lvasgn, :c,
                              s(:ivar, :@result)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save10)),
                                s(:break))),
                            s(:lvasgn, :_save11,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Inline))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save11)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save10)),
                                s(:break))),
                            s(:ivasgn, :@result,
                              s(:kwbegin,
                                s(:lvar, :c))),
                            s(:lvasgn, :_tmp,
                              s(:true)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save10))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:lvasgn, :chunks,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save12,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Endline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save12)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :chunks))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Inlines))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Inline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Str))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Endline)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_UlOrStarLine))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Space)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Strong))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Emph))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Image))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Link))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_NoteReference))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_InlineNote))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Code))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RawHtml))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Entity))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_EscapedChar))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Symbol))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Inline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Space,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:str, " "))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Space))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Str,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NormalChar)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_NormalChar)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvasgn, :a,
                  s(:lvar, :text)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_StrChunk))),
                    s(:lvasgn, :c,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :<<,
                          s(:lvar, :c)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Str))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StrChunk,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_NormalChar)),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :scan,
                        s(:regexp,
                          s(:str, "\\A(?-mix:_+)"),
                          s(:regopt)))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Alphanumeric))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_NormalChar)),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:_+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save6)),
                                s(:break))),
                            s(:lvasgn, :_save7,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Alphanumeric))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save7)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save6))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StrChunk))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_EscapedChar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "\\"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:[:\\\\`|*_{}\\[\\]()#+.!><-])"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_EscapedChar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Entity,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HexEntity))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_DecEntity))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_CharEntity))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Entity))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Endline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_LineBreak)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_TerminalEndline)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NormalEndline)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Endline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NormalEndline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AtxStart))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save3)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save5,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Line))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?-mix:={3,}|-{3,}=)"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save5))),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save4)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:str, "\n"))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NormalEndline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TerminalEndline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Eof)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TerminalEndline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_LineBreak,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "  "))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NormalEndline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :HardBreak), :new))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_LineBreak))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Symbol,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_SpecialChar)),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Symbol))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_UlOrStarLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_UlLine))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_StarLine))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_UlOrStarLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StarLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_text_start,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?-mix:\\*{4,})"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:lvasgn, :text,
                    s(:send, nil, :get_text,
                      s(:lvar, :_text_start))), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:lvar, :text))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save1))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_text_start,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :scan,
                        s(:regexp,
                          s(:str, "\\A(?-mix:\\*+)"),
                          s(:regopt)))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:lvasgn, :text,
                    s(:send, nil, :get_text,
                      s(:lvar, :_text_start))), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:lvar, :text))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StarLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_UlLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_text_start,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?-mix:_{4,})"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:lvasgn, :text,
                    s(:send, nil, :get_text,
                      s(:lvar, :_text_start))), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:lvar, :text))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save1))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_text_start,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :scan,
                        s(:regexp,
                          s(:str, "\\A(?-mix:_+)"),
                          s(:regopt)))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Spacechar)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:lvasgn, :text,
                    s(:send, nil, :get_text,
                      s(:lvar, :_text_start))), nil),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:lvar, :text))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_UlLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Emph,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_EmphStar))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_EmphUl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Emph))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_OneStarOpen,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StarLine))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "*"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save3)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_OneStarOpen))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_OneStarClose,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inline))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "*"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_OneStarClose))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_EmphStar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_OneStarOpen))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_OneStarClose))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:lvasgn, :l,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :<<,
                          s(:lvar, :l)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_OneStarClose))),
            s(:lvasgn, :l,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :l)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :emphasis,
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_EmphStar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_OneUlOpen,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_UlLine))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "_"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save3)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_OneUlOpen))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_OneUlClose,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inline))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "_"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_OneUlClose))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_EmphUl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_OneUlOpen))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_OneUlClose))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:lvasgn, :l,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :<<,
                          s(:lvar, :l)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_OneUlClose))),
            s(:lvasgn, :l,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :l)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :emphasis,
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_EmphUl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Strong,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StrongStar))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StrongUl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Strong))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TwoStarOpen,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StarLine))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "**"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save3)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TwoStarOpen))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TwoStarClose,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inline))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "**"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TwoStarClose))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StrongStar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_TwoStarOpen))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_TwoStarClose))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:lvasgn, :l,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :<<,
                          s(:lvar, :l)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_TwoStarClose))),
            s(:lvasgn, :l,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :l)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :strong,
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StrongStar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TwoUlOpen,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_UlLine))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "__"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save3)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TwoUlOpen))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TwoUlClose,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inline))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "__"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TwoUlClose))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StrongUl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_TwoUlOpen))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_TwoUlClose))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:lvasgn, :i,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :<<,
                          s(:lvar, :i)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_TwoUlClose))),
            s(:lvasgn, :l,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :l)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :strong,
                  s(:send,
                    s(:lvar, :a), :join)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StrongUl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Image,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "!"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ExplicitLink))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_ReferenceLink))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:dstr,
                  s(:str, "rdoc-image:"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:regexp,
                        s(:str, "\\[(.*)\\]"),
                        s(:regopt)),
                      s(:int, 1)))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Image))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Link,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ExplicitLink))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ReferenceLink))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AutoLink))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Link))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ReferenceLink,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ReferenceLinkDouble))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_ReferenceLinkSingle))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ReferenceLink))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ReferenceLinkDouble,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Label))),
            s(:lvasgn, :content,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "[]"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Label))),
            s(:lvasgn, :label,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :link_to,
                  s(:lvar, :content),
                  s(:lvar, :label),
                  s(:lvar, :text)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ReferenceLinkDouble))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ReferenceLinkSingle,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Label))),
            s(:lvasgn, :content,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Spnl))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "[]"))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :link_to,
                  s(:lvar, :content),
                  s(:lvar, :content),
                  s(:lvar, :text)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ReferenceLinkSingle))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ExplicitLink,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Label))),
            s(:lvasgn, :l,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "("))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Source))),
            s(:lvasgn, :s,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Title))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ")"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:dstr,
                  s(:str, "{"),
                  s(:begin,
                    s(:lvar, :l)),
                  s(:str, "}["),
                  s(:begin,
                    s(:lvar, :s)),
                  s(:str, "]")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ExplicitLink))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Source,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "<"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_SourceContents))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, ">"))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_text_start,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_SourceContents))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:lvasgn, :text,
                    s(:send, nil, :get_text,
                      s(:lvar, :_text_start))), nil),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Source))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SourceContents,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "("))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, ")"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save6)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, ">"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Nonspacechar))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save4))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save8,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save9,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :match_string,
                                    s(:str, "("))),
                                s(:lvasgn, :_tmp,
                                  s(:if,
                                    s(:lvar, :_tmp),
                                    s(:nil),
                                    s(:true))),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save9)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save8)),
                                    s(:break))),
                                s(:lvasgn, :_save10,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :match_string,
                                    s(:str, ")"))),
                                s(:lvasgn, :_tmp,
                                  s(:if,
                                    s(:lvar, :_tmp),
                                    s(:nil),
                                    s(:true))),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save10)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save8)),
                                    s(:break))),
                                s(:lvasgn, :_save11,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :match_string,
                                    s(:str, ">"))),
                                s(:lvasgn, :_tmp,
                                  s(:if,
                                    s(:lvar, :_tmp),
                                    s(:nil),
                                    s(:true))),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save11)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save8)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Nonspacechar))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save8))),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:lvasgn, :_save12,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "("))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save12)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_SourceContents))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save12)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, ")"))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save12))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ""))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SourceContents))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Title,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_TitleSingle))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_TitleDouble))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, ""))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Title))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TitleSingle,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "'"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "'"))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Sp)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, ")"))),
                            s(:if,
                              s(:lvar, :_tmp),
                              s(:break), nil),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:if,
                              s(:lvar, :_tmp),
                              s(:break), nil),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save4))),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "'"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TitleSingle))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_TitleDouble,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "\""))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "\""))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Sp)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, ")"))),
                            s(:if,
                              s(:lvar, :_tmp),
                              s(:break), nil),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:if,
                              s(:lvar, :_tmp),
                              s(:break), nil),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save4))),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "\""))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_TitleDouble))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AutoLink,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AutoLinkUrl))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AutoLinkEmail))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AutoLink))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AutoLinkUrl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?-mix:[A-Za-z]+)"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "://"))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Newline)),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, ">"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:begin,
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save7,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save7)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save6)),
                                s(:break))),
                            s(:lvasgn, :_save8,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, ">"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save8)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save6)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :get_byte)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save6))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true))),
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save1))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AutoLinkUrl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AutoLinkEmail,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "mailto:"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :scan,
                    s(:regexp,
                      s(:str, "\\A(?i-mx:[\\w+./!%~$-]+)"),
                      s(:regopt)))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "@"))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save4,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Newline)),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:break))),
                    s(:lvasgn, :_save6,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, ">"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save6)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save4))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:begin,
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save8,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save8)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save7)),
                                s(:break))),
                            s(:lvasgn, :_save9,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, ">"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save9)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save7)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :get_byte)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save7))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true))),
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save3))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:dstr,
                  s(:str, "mailto:"),
                  s(:begin,
                    s(:lvar, :text))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AutoLinkEmail))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Reference,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "[]"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Label))),
            s(:lvasgn, :label,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ":"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RefSrc))),
            s(:lvasgn, :link,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RefTitle))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :reference,
                  s(:lvar, :label),
                  s(:lvar, :link)),
                s(:nil))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Reference))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Label,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "["))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "^"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:kwbegin,
                        s(:send, nil, :notes?))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save5,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save6,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save6)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:break))),
                    s(:lvasgn, :_save7,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:kwbegin,
                        s(:send,
                          s(:send, nil, :notes?), :!))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save7)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save5))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save9,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save10,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "]"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save10)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save9)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Inline))),
                    s(:lvasgn, :l,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save9)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :<<,
                          s(:lvar, :l)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save9))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "]"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :join), :gsub,
                  s(:regexp,
                    s(:str, "\\s+"),
                    s(:regopt)),
                  s(:str, " ")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Label))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RefSrc,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Nonspacechar))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Nonspacechar))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RefSrc))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RefTitle,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RefTitleSingle))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RefTitleDouble))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RefTitleParens))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_EmptyTitle))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RefTitle))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_EmptyTitle,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :match_string,
            s(:str, ""))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_EmptyTitle))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RefTitleSingle,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "'"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "'"))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save5)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Sp)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save5)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save5))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Newline)),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "'"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RefTitleSingle))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RefTitleDouble,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "\""))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "\""))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save5)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Sp)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save5)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save5))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Newline)),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "\""))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RefTitleDouble))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RefTitleParens,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "("))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, ")"))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save5)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Sp)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save5)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_Newline)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save5))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Newline)),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ")"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RefTitleParens))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_References,
      s(:args),
      s(:begin,
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Reference))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_SkipBlock))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:break)))),
        s(:lvasgn, :_tmp,
          s(:true)),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_References))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Ticks1,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Ticks1))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Ticks2,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "``"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Ticks2))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Ticks3,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "```"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Ticks3))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Ticks4,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "````"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Ticks4))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Ticks5,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`````"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "`"))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Ticks5))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Code,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks1))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save7,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save7)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save6)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save6))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:begin,
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save8,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save9,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save9)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save8)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save8))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:break)))),
                            s(:lvasgn, :_tmp,
                              s(:true))),
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save5))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:lvasgn, :_save10,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save11,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Ticks1))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save11)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save10)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:`+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save10))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:lvasgn, :_save12,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save13,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_save14,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Sp)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save14)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Ticks1))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save14))),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save13)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save12)),
                                s(:break))),
                            s(:lvasgn, :_save15,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Spacechar)),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save15)),
                                s(:lvasgn, :_save16,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_Newline)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save16)),
                                        s(:break))),
                                    s(:lvasgn, :_save17,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_BlankLine)),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save17)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save16))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save15)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save12))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save18,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save19,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_save20,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save21,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save21)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save20)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save20))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:begin,
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_save22,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_save23,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :match_string,
                                                s(:str, "`"))),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save23)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save22)),
                                                s(:break))),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :apply,
                                                s(:sym, :_Nonspacechar))),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save22))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:break)))),
                                    s(:lvasgn, :_tmp,
                                      s(:true))),
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save19))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save18)),
                                s(:lvasgn, :_save24,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save25,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Ticks1))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save25)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save24)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :scan,
                                        s(:regexp,
                                          s(:str, "\\A(?-mix:`+)"),
                                          s(:regopt)))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save24))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save18)),
                                s(:lvasgn, :_save26,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save27,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_save28,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Sp)),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:begin,
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save28)),
                                            s(:break))),
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :apply,
                                            s(:sym, :_Ticks1))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:send,
                                            s(:self), :pos=,
                                            s(:lvar, :_save28))),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save27)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save26)),
                                        s(:break))),
                                    s(:lvasgn, :_save29,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Spacechar)),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save29)),
                                        s(:lvasgn, :_save30,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_Newline)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save30)),
                                                s(:break))),
                                            s(:lvasgn, :_save31,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_BlankLine)),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save31)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save30))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save29)),
                                        s(:break))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save26))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save18)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks1))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save32,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks2))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save32)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save32)),
                        s(:break))),
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save33,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save34,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save35,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_save36,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save37,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save37)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save36)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save36))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:begin,
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save38,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save39,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save39)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save38)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save38))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:break)))),
                            s(:lvasgn, :_tmp,
                              s(:true))),
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save35))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save34)),
                        s(:lvasgn, :_save40,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save41,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Ticks2))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save41)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save40)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:`+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save40))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save34)),
                        s(:lvasgn, :_save42,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save43,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_save44,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Sp)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save44)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Ticks2))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save44))),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save43)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save42)),
                                s(:break))),
                            s(:lvasgn, :_save45,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Spacechar)),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save45)),
                                s(:lvasgn, :_save46,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_Newline)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save46)),
                                        s(:break))),
                                    s(:lvasgn, :_save47,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_BlankLine)),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save47)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save46))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save45)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save42))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save34)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save48,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save49,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_save50,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save51,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save51)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save50)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save50))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:begin,
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_save52,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_save53,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :match_string,
                                                s(:str, "`"))),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save53)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save52)),
                                                s(:break))),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :apply,
                                                s(:sym, :_Nonspacechar))),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save52))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:break)))),
                                    s(:lvasgn, :_tmp,
                                      s(:true))),
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save49))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save48)),
                                s(:lvasgn, :_save54,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save55,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Ticks2))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save55)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save54)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :scan,
                                        s(:regexp,
                                          s(:str, "\\A(?-mix:`+)"),
                                          s(:regopt)))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save54))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save48)),
                                s(:lvasgn, :_save56,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save57,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_save58,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Sp)),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:begin,
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save58)),
                                            s(:break))),
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :apply,
                                            s(:sym, :_Ticks2))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:send,
                                            s(:self), :pos=,
                                            s(:lvar, :_save58))),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save57)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save56)),
                                        s(:break))),
                                    s(:lvasgn, :_save59,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Spacechar)),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save59)),
                                        s(:lvasgn, :_save60,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_Newline)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save60)),
                                                s(:break))),
                                            s(:lvasgn, :_save61,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_BlankLine)),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save61)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save60))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save59)),
                                        s(:break))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save56))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save48)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save33))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save32)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save32)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks2))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save32))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save62,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks3))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save62)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save62)),
                        s(:break))),
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save63,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save64,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save65,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_save66,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save67,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save67)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save66)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save66))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:begin,
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save68,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save69,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save69)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save68)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save68))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:break)))),
                            s(:lvasgn, :_tmp,
                              s(:true))),
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save65))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save64)),
                        s(:lvasgn, :_save70,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save71,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Ticks3))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save71)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save70)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:`+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save70))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save64)),
                        s(:lvasgn, :_save72,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save73,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_save74,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Sp)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save74)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Ticks3))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save74))),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save73)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save72)),
                                s(:break))),
                            s(:lvasgn, :_save75,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Spacechar)),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save75)),
                                s(:lvasgn, :_save76,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_Newline)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save76)),
                                        s(:break))),
                                    s(:lvasgn, :_save77,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_BlankLine)),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save77)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save76))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save75)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save72))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save64)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save78,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save79,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_save80,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save81,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save81)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save80)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save80))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:begin,
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_save82,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_save83,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :match_string,
                                                s(:str, "`"))),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save83)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save82)),
                                                s(:break))),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :apply,
                                                s(:sym, :_Nonspacechar))),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save82))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:break)))),
                                    s(:lvasgn, :_tmp,
                                      s(:true))),
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save79))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save78)),
                                s(:lvasgn, :_save84,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save85,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Ticks3))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save85)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save84)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :scan,
                                        s(:regexp,
                                          s(:str, "\\A(?-mix:`+)"),
                                          s(:regopt)))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save84))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save78)),
                                s(:lvasgn, :_save86,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save87,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_save88,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Sp)),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:begin,
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save88)),
                                            s(:break))),
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :apply,
                                            s(:sym, :_Ticks3))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:send,
                                            s(:self), :pos=,
                                            s(:lvar, :_save88))),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save87)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save86)),
                                        s(:break))),
                                    s(:lvasgn, :_save89,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Spacechar)),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save89)),
                                        s(:lvasgn, :_save90,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_Newline)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save90)),
                                                s(:break))),
                                            s(:lvasgn, :_save91,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_BlankLine)),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save91)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save90))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save89)),
                                        s(:break))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save86))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save78)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save63))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save62)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save62)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks3))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save62))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save92,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks4))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save92)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save92)),
                        s(:break))),
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save93,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save94,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save95,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_save96,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save97,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save97)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save96)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save96))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:begin,
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save98,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save99,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save99)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save98)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save98))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:break)))),
                            s(:lvasgn, :_tmp,
                              s(:true))),
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save95))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save94)),
                        s(:lvasgn, :_save100,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save101,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Ticks4))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save101)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save100)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:`+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save100))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save94)),
                        s(:lvasgn, :_save102,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save103,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_save104,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Sp)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save104)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Ticks4))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save104))),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save103)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save102)),
                                s(:break))),
                            s(:lvasgn, :_save105,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Spacechar)),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save105)),
                                s(:lvasgn, :_save106,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_Newline)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save106)),
                                        s(:break))),
                                    s(:lvasgn, :_save107,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_BlankLine)),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save107)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save106))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save105)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save102))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save94)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save108,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save109,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_save110,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save111,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save111)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save110)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save110))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:begin,
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_save112,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_save113,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :match_string,
                                                s(:str, "`"))),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save113)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save112)),
                                                s(:break))),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :apply,
                                                s(:sym, :_Nonspacechar))),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save112))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:break)))),
                                    s(:lvasgn, :_tmp,
                                      s(:true))),
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save109))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save108)),
                                s(:lvasgn, :_save114,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save115,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Ticks4))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save115)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save114)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :scan,
                                        s(:regexp,
                                          s(:str, "\\A(?-mix:`+)"),
                                          s(:regopt)))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save114))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save108)),
                                s(:lvasgn, :_save116,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save117,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_save118,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Sp)),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:begin,
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save118)),
                                            s(:break))),
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :apply,
                                            s(:sym, :_Ticks4))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:send,
                                            s(:self), :pos=,
                                            s(:lvar, :_save118))),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save117)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save116)),
                                        s(:break))),
                                    s(:lvasgn, :_save119,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Spacechar)),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save119)),
                                        s(:lvasgn, :_save120,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_Newline)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save120)),
                                                s(:break))),
                                            s(:lvasgn, :_save121,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_BlankLine)),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save121)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save120))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save119)),
                                        s(:break))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save116))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save108)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save93))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save92)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save92)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks4))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save92))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save122,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks5))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save122)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save122)),
                        s(:break))),
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save123,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save124,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save125,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_save126,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save127,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save127)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save126)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save126))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:begin,
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save128,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save129,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save129)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save128)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save128))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:break)))),
                            s(:lvasgn, :_tmp,
                              s(:true))),
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save125))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save124)),
                        s(:lvasgn, :_save130,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save131,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Ticks5))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save131)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save130)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:`+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save130))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save124)),
                        s(:lvasgn, :_save132,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save133,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_save134,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Sp)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save134)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Ticks5))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save134))),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save133)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save132)),
                                s(:break))),
                            s(:lvasgn, :_save135,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :_Spacechar)),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save135)),
                                s(:lvasgn, :_save136,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_Newline)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save136)),
                                        s(:break))),
                                    s(:lvasgn, :_save137,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :_BlankLine)),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save137)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save136))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save135)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save132))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save124)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save138,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save139,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_save140,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save141,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save141)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save140)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save140))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:begin,
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_save142,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_save143,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :match_string,
                                                s(:str, "`"))),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save143)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save142)),
                                                s(:break))),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :apply,
                                                s(:sym, :_Nonspacechar))),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save142))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:break)))),
                                    s(:lvasgn, :_tmp,
                                      s(:true))),
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save139))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save138)),
                                s(:lvasgn, :_save144,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save145,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Ticks5))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save145)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save144)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :scan,
                                        s(:regexp,
                                          s(:str, "\\A(?-mix:`+)"),
                                          s(:regopt)))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save144))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save138)),
                                s(:lvasgn, :_save146,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save147,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_save148,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Sp)),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:begin,
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save148)),
                                            s(:break))),
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :apply,
                                            s(:sym, :_Ticks5))),
                                        s(:if,
                                          s(:lvar, :_tmp), nil,
                                          s(:send,
                                            s(:self), :pos=,
                                            s(:lvar, :_save148))),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save147)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save146)),
                                        s(:break))),
                                    s(:lvasgn, :_save149,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:while,
                                      s(:true),
                                      s(:begin,
                                        s(:lvasgn, :_tmp,
                                          s(:send, nil, :_Spacechar)),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save149)),
                                        s(:lvasgn, :_save150,
                                          s(:send,
                                            s(:self), :pos)),
                                        s(:while,
                                          s(:true),
                                          s(:begin,
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_Newline)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:begin,
                                                s(:send,
                                                  s(:self), :pos=,
                                                  s(:lvar, :_save150)),
                                                s(:break))),
                                            s(:lvasgn, :_save151,
                                              s(:send,
                                                s(:self), :pos)),
                                            s(:lvasgn, :_tmp,
                                              s(:send, nil, :_BlankLine)),
                                            s(:lvasgn, :_tmp,
                                              s(:if,
                                                s(:lvar, :_tmp),
                                                s(:nil),
                                                s(:true))),
                                            s(:send,
                                              s(:self), :pos=,
                                              s(:lvar, :_save151)),
                                            s(:if,
                                              s(:lvar, :_tmp), nil,
                                              s(:send,
                                                s(:self), :pos=,
                                                s(:lvar, :_save150))),
                                            s(:break))),
                                        s(:if,
                                          s(:lvar, :_tmp),
                                          s(:break), nil),
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save149)),
                                        s(:break))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save146))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp),
                                  s(:break), nil),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save138)),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save123))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save122)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Sp)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save122)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks5))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save122))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:dstr,
                  s(:str, "<code>"),
                  s(:begin,
                    s(:lvar, :text)),
                  s(:str, "</code>")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Code))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RawHtml,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlComment))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlBlockScript))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlTag))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:if,
                  s(:send, nil, :html?),
                  s(:lvar, :text),
                  s(:str, "")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RawHtml))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_BlankLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:str, "\n"))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_BlankLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Quoted,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "\""))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "\""))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save4)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save3)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save3))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "\""))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save1))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_save5,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "'"))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save7,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save8,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "'"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save8)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save7)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save7))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "'"))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save5))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Quoted))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlAttribute,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_AlphanumericAscii))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "-"))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_AlphanumericAscii))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "-"))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save5,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "="))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Spnl))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:break))),
                s(:lvasgn, :_save6,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Quoted))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save6)),
                    s(:lvasgn, :_save7,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save8,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save9,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, ">"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save9)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save8)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Nonspacechar))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save8))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save10,
                              s(:send,
                                s(:self), :pos)),
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save11,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :match_string,
                                    s(:str, ">"))),
                                s(:lvasgn, :_tmp,
                                  s(:if,
                                    s(:lvar, :_tmp),
                                    s(:nil),
                                    s(:true))),
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save11)),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:begin,
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save10)),
                                    s(:break))),
                                s(:lvasgn, :_tmp,
                                  s(:send, nil, :apply,
                                    s(:sym, :_Nonspacechar))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:send,
                                    s(:self), :pos=,
                                    s(:lvar, :_save10))),
                                s(:break))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save7))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:break), nil),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save6)),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save5))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save4)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlAttribute))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlComment,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<!--"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save3,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "-->"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "-->"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlComment))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HtmlTag,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "<"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_AlphanumericAscii))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_AlphanumericAscii))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_HtmlAttribute))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "/"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save4)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ">"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HtmlTag))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Eof,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:lvasgn, :_tmp,
          s(:send, nil, :get_byte)),
        s(:lvasgn, :_tmp,
          s(:if,
            s(:lvar, :_tmp),
            s(:nil),
            s(:true))),
        s(:send,
          s(:self), :pos=,
          s(:lvar, :_save)),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Eof))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Nonspacechar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save2)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :get_byte)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Nonspacechar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Sp,
      s(:args),
      s(:begin,
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Spacechar)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:break)))),
        s(:lvasgn, :_tmp,
          s(:true)),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Sp))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Spnl,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Sp)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Spnl))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SpecialChar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:[*_`&\\[\\]()<!#\\\\'\"])"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_ExtendedSpecialChar)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SpecialChar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NormalChar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_SpecialChar)),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Spacechar)),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:if,
                s(:lvar, :_tmp),
                s(:nil),
                s(:true))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :get_byte)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NormalChar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Digit,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:lvasgn, :_tmp,
          s(:send, nil, :get_byte)),
        s(:if,
          s(:lvar, :_tmp),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :_tmp), :>=,
                s(:int, 48)),
              s(:send,
                s(:lvar, :_tmp), :<=,
                s(:int, 57))), nil,
            s(:begin,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save)),
              s(:lvasgn, :_tmp,
                s(:nil)))), nil),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Digit))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Alphanumeric,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send,
            s(:ivar, :@_grammar_literals), :external_invoke,
            s(:self),
            s(:sym, :_Alphanumeric))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Alphanumeric))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AlphanumericAscii,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send,
            s(:ivar, :@_grammar_literals), :external_invoke,
            s(:self),
            s(:sym, :_AlphanumericAscii))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AlphanumericAscii))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_BOM,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send,
            s(:ivar, :@_grammar_literals), :external_invoke,
            s(:self),
            s(:sym, :_BOM))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_BOM))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Newline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send,
            s(:ivar, :@_grammar_literals), :external_invoke,
            s(:self),
            s(:sym, :_Newline))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Newline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NonAlphanumeric,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send,
            s(:ivar, :@_grammar_literals), :external_invoke,
            s(:self),
            s(:sym, :_NonAlphanumeric))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NonAlphanumeric))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Spacechar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send,
            s(:ivar, :@_grammar_literals), :external_invoke,
            s(:self),
            s(:sym, :_Spacechar))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Spacechar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_HexEntity,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?i-mx:&#x)"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:[0-9a-fA-F]+)"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ";"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :text), :to_i,
                      s(:int, 16))), :pack,
                  s(:str, "U")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_HexEntity))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_DecEntity,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "&#"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:[0-9]+)"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ";"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :text), :to_i)), :pack,
                  s(:str, "U")))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_DecEntity))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_CharEntity,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "&"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :scan,
                s(:regexp,
                  s(:str, "\\A(?-mix:[A-Za-z0-9]+)"),
                  s(:regopt)))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ";"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:if,
                  s(:lvasgn, :entity,
                    s(:send,
                      s(:const, nil, :HTML_ENTITIES), :[],
                      s(:lvar, :text))),
                  s(:send,
                    s(:lvar, :entity), :pack,
                    s(:str, "U*")),
                  s(:dstr,
                    s(:str, "&"),
                    s(:begin,
                      s(:lvar, :text)),
                    s(:str, ";"))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_CharEntity))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NonindentSpace,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix: {0,3})"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NonindentSpace))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Indent,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix:\\t|    )"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Indent))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_IndentedLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Indent))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Line))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_IndentedLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_OptionallyIndentedLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Indent))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Line))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_OptionallyIndentedLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_StartList,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :get_byte)),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:array))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_StartList))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Line,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_RawLine)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Line))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RawLine,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_text_start,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save4,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save5,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "\r"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save4)),
                                s(:break))),
                            s(:lvasgn, :_save6,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "\n"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save6)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save4)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :get_byte)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save4))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save2)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Newline)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save2))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:lvasgn, :text,
                    s(:send, nil, :get_text,
                      s(:lvar, :_text_start))), nil),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_save7,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_text_start,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_save8,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :get_byte)),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:begin,
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :get_byte)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:break)))),
                        s(:lvasgn, :_tmp,
                          s(:true))),
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save8))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:lvasgn, :text,
                        s(:send, nil, :get_text,
                          s(:lvar, :_text_start))), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_Eof)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save7))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RawLine))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_SkipBlock,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_HtmlBlock))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save2,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "#"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_SetextBottom1))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save5)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save6,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_SetextBottom2))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save6)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_save7,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save7)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_RawLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:begin,
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save8,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save9,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "#"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save9)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save8)),
                                s(:break))),
                            s(:lvasgn, :_save10,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_SetextBottom1))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save8)),
                                s(:break))),
                            s(:lvasgn, :_save11,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_SetextBottom2))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save11)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save8)),
                                s(:break))),
                            s(:lvasgn, :_save12,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_BlankLine)),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save12)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save8)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :_RawLine)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save8))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true))),
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save1)),
                    s(:break))),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save1))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_save14,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save14))),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_RawLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:break), nil),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save)),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_SkipBlock))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_ExtendedSpecialChar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:kwbegin,
                s(:send, nil, :notes?))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "^"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_ExtendedSpecialChar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NoteReference,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:kwbegin,
                s(:send, nil, :notes?))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RawNoteReference))),
            s(:lvasgn, :ref,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :note_for,
                  s(:lvar, :ref)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NoteReference))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RawNoteReference,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "[^"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:lvasgn, :_tmp,
                  s(:if,
                    s(:lvar, :_tmp),
                    s(:nil),
                    s(:true))),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save3)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_save4,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "]"))),
                s(:lvasgn, :_tmp,
                  s(:if,
                    s(:lvar, :_tmp),
                    s(:nil),
                    s(:true))),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save4)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :get_byte)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Newline)),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save6)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:lvasgn, :_save7,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "]"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :get_byte)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save5))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "]"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :text))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RawNoteReference))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Note,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:kwbegin,
                s(:send, nil, :notes?))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RawNoteReference))),
            s(:lvasgn, :ref,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ":"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_RawNoteBlock))),
            s(:lvasgn, :i,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :concat,
                  s(:lvar, :i)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Indent))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save4)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_RawNoteBlock))),
                    s(:lvasgn, :i,
                      s(:ivar, :@result)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save3)),
                        s(:break))),
                    s(:ivasgn, :@result,
                      s(:kwbegin,
                        s(:send,
                          s(:lvar, :a), :concat,
                          s(:lvar, :i)))),
                    s(:lvasgn, :_tmp,
                      s(:true)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save3))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:ivar, :@footnotes), :[]=,
                  s(:lvar, :ref),
                  s(:send, nil, :paragraph,
                    s(:lvar, :a))),
                s(:nil))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Note))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_InlineNote,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:kwbegin,
                s(:send, nil, :notes?))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "^["))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save4,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :match_string,
                    s(:str, "]"))),
                s(:lvasgn, :_tmp,
                  s(:if,
                    s(:lvar, :_tmp),
                    s(:nil),
                    s(:true))),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save4)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Inline))),
                s(:lvasgn, :l,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:lvar, :l)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save3))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save5,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save6,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :match_string,
                            s(:str, "]"))),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save6)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Inline))),
                        s(:lvasgn, :l,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save5)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :l)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save5))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, "]"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvasgn, :ref,
                  s(:array,
                    s(:sym, :inline),
                    s(:send,
                      s(:ivar, :@note_order), :length))),
                s(:send,
                  s(:ivar, :@footnotes), :[]=,
                  s(:lvar, :ref),
                  s(:send, nil, :paragraph,
                    s(:lvar, :a))),
                s(:send, nil, :note_for,
                  s(:lvar, :ref)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_InlineNote))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Notes,
      s(:args),
      s(:begin,
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Note))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_SkipBlock))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save1)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:break)))),
        s(:lvasgn, :_tmp,
          s(:true)),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Notes))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_RawNoteBlock,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_StartList)),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save3,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:lvasgn, :_tmp,
                  s(:if,
                    s(:lvar, :_tmp),
                    s(:nil),
                    s(:true))),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save3)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_OptionallyIndentedLine))),
                s(:lvasgn, :l,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save2)),
                    s(:break))),
                s(:ivasgn, :@result,
                  s(:kwbegin,
                    s(:send,
                      s(:lvar, :a), :<<,
                      s(:lvar, :l)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save2))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save4,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save5,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_BlankLine)),
                        s(:lvasgn, :_tmp,
                          s(:if,
                            s(:lvar, :_tmp),
                            s(:nil),
                            s(:true))),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save5)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_OptionallyIndentedLine))),
                        s(:lvasgn, :l,
                          s(:ivar, :@result)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:begin,
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save4)),
                            s(:break))),
                        s(:ivasgn, :@result,
                          s(:kwbegin,
                            s(:send,
                              s(:lvar, :a), :<<,
                              s(:lvar, :l)))),
                        s(:lvasgn, :_tmp,
                          s(:true)),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save4))),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_BlankLine)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:lvar, :text)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :a))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_RawNoteBlock))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_CodeFence,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:kwbegin,
                s(:send, nil, :github?))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Ticks3))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save3,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Sp)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:begin,
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save3)),
                    s(:break))),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_StrChunk))),
                s(:lvasgn, :format,
                  s(:ivar, :@result)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save3))),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save2)))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Spnl))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_text_start,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save4,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_save5,
              s(:send,
                s(:self), :pos)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_save6,
                  s(:send,
                    s(:self), :pos)),
                s(:lvasgn, :_save7,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save8,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :match_string,
                        s(:str, "`"))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save8)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save7)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Nonspacechar))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save7))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:begin,
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save9,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save10,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save10)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save9)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save9))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp), nil,
                          s(:break)))),
                    s(:lvasgn, :_tmp,
                      s(:true))),
                  s(:send,
                    s(:self), :pos=,
                    s(:lvar, :_save6))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save5)),
                s(:lvasgn, :_save11,
                  s(:send,
                    s(:self), :pos)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save12,
                      s(:send,
                        s(:self), :pos)),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_Ticks3))),
                    s(:lvasgn, :_tmp,
                      s(:if,
                        s(:lvar, :_tmp),
                        s(:nil),
                        s(:true))),
                    s(:send,
                      s(:self), :pos=,
                      s(:lvar, :_save12)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:begin,
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save11)),
                        s(:break))),
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :scan,
                        s(:regexp,
                          s(:str, "\\A(?-mix:`+)"),
                          s(:regopt)))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:send,
                        s(:self), :pos=,
                        s(:lvar, :_save11))),
                    s(:break))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save5)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :apply,
                    s(:sym, :_Spacechar))),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save5)),
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:if,
                  s(:lvar, :_tmp),
                  s(:break), nil),
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save5)),
                s(:break))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_save13,
                      s(:send,
                        s(:self), :pos)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :_save14,
                          s(:send,
                            s(:self), :pos)),
                        s(:lvasgn, :_save15,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save16,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :match_string,
                                s(:str, "`"))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save16)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save15)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Nonspacechar))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save15))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:begin,
                            s(:while,
                              s(:true),
                              s(:begin,
                                s(:lvasgn, :_save17,
                                  s(:send,
                                    s(:self), :pos)),
                                s(:while,
                                  s(:true),
                                  s(:begin,
                                    s(:lvasgn, :_save18,
                                      s(:send,
                                        s(:self), :pos)),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :match_string,
                                        s(:str, "`"))),
                                    s(:lvasgn, :_tmp,
                                      s(:if,
                                        s(:lvar, :_tmp),
                                        s(:nil),
                                        s(:true))),
                                    s(:send,
                                      s(:self), :pos=,
                                      s(:lvar, :_save18)),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:begin,
                                        s(:send,
                                          s(:self), :pos=,
                                          s(:lvar, :_save17)),
                                        s(:break))),
                                    s(:lvasgn, :_tmp,
                                      s(:send, nil, :apply,
                                        s(:sym, :_Nonspacechar))),
                                    s(:if,
                                      s(:lvar, :_tmp), nil,
                                      s(:send,
                                        s(:self), :pos=,
                                        s(:lvar, :_save17))),
                                    s(:break))),
                                s(:if,
                                  s(:lvar, :_tmp), nil,
                                  s(:break)))),
                            s(:lvasgn, :_tmp,
                              s(:true))),
                          s(:send,
                            s(:self), :pos=,
                            s(:lvar, :_save14))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save13)),
                        s(:lvasgn, :_save19,
                          s(:send,
                            s(:self), :pos)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:lvasgn, :_save20,
                              s(:send,
                                s(:self), :pos)),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :apply,
                                s(:sym, :_Ticks3))),
                            s(:lvasgn, :_tmp,
                              s(:if,
                                s(:lvar, :_tmp),
                                s(:nil),
                                s(:true))),
                            s(:send,
                              s(:self), :pos=,
                              s(:lvar, :_save20)),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:begin,
                                s(:send,
                                  s(:self), :pos=,
                                  s(:lvar, :_save19)),
                                s(:break))),
                            s(:lvasgn, :_tmp,
                              s(:send, nil, :scan,
                                s(:regexp,
                                  s(:str, "\\A(?-mix:`+)"),
                                  s(:regopt)))),
                            s(:if,
                              s(:lvar, :_tmp), nil,
                              s(:send,
                                s(:self), :pos=,
                                s(:lvar, :_save19))),
                            s(:break))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save13)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :apply,
                            s(:sym, :_Spacechar))),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save13)),
                        s(:lvasgn, :_tmp,
                          s(:send, nil, :_Newline)),
                        s(:if,
                          s(:lvar, :_tmp),
                          s(:break), nil),
                        s(:send,
                          s(:self), :pos=,
                          s(:lvar, :_save13)),
                        s(:break))),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save4))),
            s(:if,
              s(:lvar, :_tmp),
              s(:lvasgn, :text,
                s(:send, nil, :get_text,
                  s(:lvar, :_text_start))), nil),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Ticks3))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :_tmp,
                  s(:send, nil, :_Newline)),
                s(:if,
                  s(:lvar, :_tmp), nil,
                  s(:break)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvasgn, :verbatim,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
                    s(:lvar, :text))),
                s(:if,
                  s(:lvar, :format),
                  s(:send,
                    s(:lvar, :verbatim), :format=,
                    s(:send,
                      s(:lvar, :format), :intern)), nil),
                s(:lvar, :verbatim))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_CodeFence))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_DefinitionList,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:kwbegin,
                s(:send, nil, :definition_lists?))),
            s(:send,
              s(:self), :pos=,
              s(:lvar, :_save1)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_DefinitionListItem))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_DefinitionListItem))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:lvasgn, :list,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :List), :new,
                  s(:sym, :NOTE),
                  s(:splat,
                    s(:send,
                      s(:lvar, :list), :flatten))))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_DefinitionList))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_DefinitionListItem,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_DefinitionListLabel))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_DefinitionListLabel))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:lvasgn, :label,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save2,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_ary,
              s(:array)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_DefinitionListDefinition))),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:send,
                  s(:lvar, :_ary), :<<,
                  s(:ivar, :@result)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :apply,
                        s(:sym, :_DefinitionListDefinition))),
                    s(:if,
                      s(:lvar, :_tmp),
                      s(:send,
                        s(:lvar, :_ary), :<<,
                        s(:ivar, :@result)), nil),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true)),
                s(:ivasgn, :@result,
                  s(:lvar, :_ary))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save2))),
            s(:lvasgn, :defns,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvasgn, :list_items,
                  s(:array)),
                s(:send,
                  s(:lvar, :list_items), :<<,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                    s(:lvar, :label),
                    s(:send,
                      s(:lvar, :defns), :shift))),
                s(:if,
                  s(:send,
                    s(:lvar, :list_items), :empty?), nil,
                  s(:send,
                    s(:lvar, :list_items), :concat,
                    s(:block,
                      s(:send,
                        s(:lvar, :defns), :map),
                      s(:args,
                        s(:arg, :defn)),
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                        s(:nil),
                        s(:lvar, :defn))))),
                s(:lvar, :list_items))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_DefinitionListItem))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_DefinitionListLabel,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_StrChunk))),
            s(:lvasgn, :label,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Sp)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Newline)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:lvar, :label))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_DefinitionListLabel))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_DefinitionListDefinition,
      s(:args),
      s(:begin,
        s(:lvasgn, :_save,
          s(:send,
            s(:self), :pos)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :_tmp,
              s(:send, nil, :_NonindentSpace)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :match_string,
                s(:str, ":"))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_Space)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_tmp,
              s(:send, nil, :apply,
                s(:sym, :_Inlines))),
            s(:lvasgn, :a,
              s(:ivar, :@result)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:lvasgn, :_save1,
              s(:send,
                s(:self), :pos)),
            s(:lvasgn, :_tmp,
              s(:send, nil, :_BlankLine)),
            s(:if,
              s(:lvar, :_tmp),
              s(:begin,
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :_tmp,
                      s(:send, nil, :_BlankLine)),
                    s(:if,
                      s(:lvar, :_tmp), nil,
                      s(:break)))),
                s(:lvasgn, :_tmp,
                  s(:true))),
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save1))),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:begin,
                s(:send,
                  s(:self), :pos=,
                  s(:lvar, :_save)),
                s(:break))),
            s(:ivasgn, :@result,
              s(:kwbegin,
                s(:send, nil, :paragraph,
                  s(:lvar, :a)))),
            s(:lvasgn, :_tmp,
              s(:true)),
            s(:if,
              s(:lvar, :_tmp), nil,
              s(:send,
                s(:self), :pos=,
                s(:lvar, :_save))),
            s(:break))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_DefinitionListDefinition))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:casgn, nil, :Rules,
      s(:hash)),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_root),
      s(:send, nil, :rule_info,
        s(:str, "root"),
        s(:str, "Doc"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Doc),
      s(:send, nil, :rule_info,
        s(:str, "Doc"),
        s(:str, "BOM? Block*:a { RDoc::Markup::Document.new(*a.compact) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Block),
      s(:send, nil, :rule_info,
        s(:str, "Block"),
        s(:str, "@BlankLine* (BlockQuote | Verbatim | CodeFence | Note | Reference | HorizontalRule | Heading | OrderedList | BulletList | DefinitionList | HtmlBlock | StyleBlock | Para | Plain)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Para),
      s(:send, nil, :rule_info,
        s(:str, "Para"),
        s(:str, "@NonindentSpace Inlines:a @BlankLine+ { paragraph a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Plain),
      s(:send, nil, :rule_info,
        s(:str, "Plain"),
        s(:str, "Inlines:a { paragraph a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AtxInline),
      s(:send, nil, :rule_info,
        s(:str, "AtxInline"),
        s(:str, "!@Newline !(@Sp? /#*/ @Sp @Newline) Inline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AtxStart),
      s(:send, nil, :rule_info,
        s(:str, "AtxStart"),
        s(:str, "< /\\\#{1,6}/ > { text.length }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AtxHeading),
      s(:send, nil, :rule_info,
        s(:str, "AtxHeading"),
        s(:str, "AtxStart:s @Sp? AtxInline+:a (@Sp? /#*/ @Sp)? @Newline { RDoc::Markup::Heading.new(s, a.join) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SetextHeading),
      s(:send, nil, :rule_info,
        s(:str, "SetextHeading"),
        s(:str, "(SetextHeading1 | SetextHeading2)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SetextBottom1),
      s(:send, nil, :rule_info,
        s(:str, "SetextBottom1"),
        s(:str, "/={3,}/ @Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SetextBottom2),
      s(:send, nil, :rule_info,
        s(:str, "SetextBottom2"),
        s(:str, "/-{3,}/ @Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SetextHeading1),
      s(:send, nil, :rule_info,
        s(:str, "SetextHeading1"),
        s(:str, "&(@RawLine SetextBottom1) @StartList:a (!@Endline Inline:b { a << b })+ @Sp? @Newline SetextBottom1 { RDoc::Markup::Heading.new(1, a.join) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SetextHeading2),
      s(:send, nil, :rule_info,
        s(:str, "SetextHeading2"),
        s(:str, "&(@RawLine SetextBottom2) @StartList:a (!@Endline Inline:b { a << b })+ @Sp? @Newline SetextBottom2 { RDoc::Markup::Heading.new(2, a.join) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Heading),
      s(:send, nil, :rule_info,
        s(:str, "Heading"),
        s(:str, "(SetextHeading | AtxHeading)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_BlockQuote),
      s(:send, nil, :rule_info,
        s(:str, "BlockQuote"),
        s(:str, "BlockQuoteRaw:a { RDoc::Markup::BlockQuote.new(*a) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_BlockQuoteRaw),
      s(:send, nil, :rule_info,
        s(:str, "BlockQuoteRaw"),
        s(:str, "@StartList:a (\">\" \" \"? Line:l { a << l } (!\">\" !@BlankLine Line:c { a << c })* (@BlankLine:n { a << n })*)+ { inner_parse a.join }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NonblankIndentedLine),
      s(:send, nil, :rule_info,
        s(:str, "NonblankIndentedLine"),
        s(:str, "!@BlankLine IndentedLine"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_VerbatimChunk),
      s(:send, nil, :rule_info,
        s(:str, "VerbatimChunk"),
        s(:str, "@BlankLine*:a NonblankIndentedLine+:b { a.concat b }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Verbatim),
      s(:send, nil, :rule_info,
        s(:str, "Verbatim"),
        s(:str, "VerbatimChunk+:a { RDoc::Markup::Verbatim.new(*a.flatten) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HorizontalRule),
      s(:send, nil, :rule_info,
        s(:str, "HorizontalRule"),
        s(:str, "@NonindentSpace (\"*\" @Sp \"*\" @Sp \"*\" (@Sp \"*\")* | \"-\" @Sp \"-\" @Sp \"-\" (@Sp \"-\")* | \"_\" @Sp \"_\" @Sp \"_\" (@Sp \"_\")*) @Sp @Newline @BlankLine+ { RDoc::Markup::Rule.new 1 }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Bullet),
      s(:send, nil, :rule_info,
        s(:str, "Bullet"),
        s(:str, "!HorizontalRule @NonindentSpace /[+*-]/ @Spacechar+"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_BulletList),
      s(:send, nil, :rule_info,
        s(:str, "BulletList"),
        s(:str, "&Bullet (ListTight | ListLoose):a { RDoc::Markup::List.new(:BULLET, *a) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListTight),
      s(:send, nil, :rule_info,
        s(:str, "ListTight"),
        s(:str, "ListItemTight+:a @BlankLine* !(Bullet | Enumerator) { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListLoose),
      s(:send, nil, :rule_info,
        s(:str, "ListLoose"),
        s(:str, "@StartList:a (ListItem:b @BlankLine* { a << b })+ { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListItem),
      s(:send, nil, :rule_info,
        s(:str, "ListItem"),
        s(:str, "(Bullet | Enumerator) @StartList:a ListBlock:b { a << b } (ListContinuationBlock:c { a.push(*c) })* { list_item_from a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListItemTight),
      s(:send, nil, :rule_info,
        s(:str, "ListItemTight"),
        s(:str, "(Bullet | Enumerator) ListBlock:a (!@BlankLine ListContinuationBlock:b { a.push(*b) })* !ListContinuationBlock { list_item_from a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListBlock),
      s(:send, nil, :rule_info,
        s(:str, "ListBlock"),
        s(:str, "!@BlankLine Line:a ListBlockLine*:c { [a, *c] }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListContinuationBlock),
      s(:send, nil, :rule_info,
        s(:str, "ListContinuationBlock"),
        s(:str, "@StartList:a @BlankLine* { a << \"\\n\" } (Indent ListBlock:b { a.concat b })+ { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Enumerator),
      s(:send, nil, :rule_info,
        s(:str, "Enumerator"),
        s(:str, "@NonindentSpace [0-9]+ \".\" @Spacechar+"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_OrderedList),
      s(:send, nil, :rule_info,
        s(:str, "OrderedList"),
        s(:str, "&Enumerator (ListTight | ListLoose):a { RDoc::Markup::List.new(:NUMBER, *a) }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ListBlockLine),
      s(:send, nil, :rule_info,
        s(:str, "ListBlockLine"),
        s(:str, "!@BlankLine !(Indent? (Bullet | Enumerator)) !HorizontalRule OptionallyIndentedLine"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlOpenAnchor),
      s(:send, nil, :rule_info,
        s(:str, "HtmlOpenAnchor"),
        s(:str, "\"<\" Spnl (\"a\" | \"A\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlCloseAnchor),
      s(:send, nil, :rule_info,
        s(:str, "HtmlCloseAnchor"),
        s(:str, "\"<\" Spnl \"/\" (\"a\" | \"A\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlAnchor),
      s(:send, nil, :rule_info,
        s(:str, "HtmlAnchor"),
        s(:str, "HtmlOpenAnchor (HtmlAnchor | !HtmlCloseAnchor .)* HtmlCloseAnchor"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenAddress),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenAddress"),
        s(:str, "\"<\" Spnl (\"address\" | \"ADDRESS\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseAddress),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseAddress"),
        s(:str, "\"<\" Spnl \"/\" (\"address\" | \"ADDRESS\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockAddress),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockAddress"),
        s(:str, "HtmlBlockOpenAddress (HtmlBlockAddress | !HtmlBlockCloseAddress .)* HtmlBlockCloseAddress"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenBlockquote),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenBlockquote"),
        s(:str, "\"<\" Spnl (\"blockquote\" | \"BLOCKQUOTE\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseBlockquote),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseBlockquote"),
        s(:str, "\"<\" Spnl \"/\" (\"blockquote\" | \"BLOCKQUOTE\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockBlockquote),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockBlockquote"),
        s(:str, "HtmlBlockOpenBlockquote (HtmlBlockBlockquote | !HtmlBlockCloseBlockquote .)* HtmlBlockCloseBlockquote"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenCenter),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenCenter"),
        s(:str, "\"<\" Spnl (\"center\" | \"CENTER\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseCenter),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseCenter"),
        s(:str, "\"<\" Spnl \"/\" (\"center\" | \"CENTER\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCenter),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCenter"),
        s(:str, "HtmlBlockOpenCenter (HtmlBlockCenter | !HtmlBlockCloseCenter .)* HtmlBlockCloseCenter"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenDir),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenDir"),
        s(:str, "\"<\" Spnl (\"dir\" | \"DIR\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseDir),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseDir"),
        s(:str, "\"<\" Spnl \"/\" (\"dir\" | \"DIR\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockDir),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockDir"),
        s(:str, "HtmlBlockOpenDir (HtmlBlockDir | !HtmlBlockCloseDir .)* HtmlBlockCloseDir"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenDiv),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenDiv"),
        s(:str, "\"<\" Spnl (\"div\" | \"DIV\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseDiv),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseDiv"),
        s(:str, "\"<\" Spnl \"/\" (\"div\" | \"DIV\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockDiv),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockDiv"),
        s(:str, "HtmlBlockOpenDiv (HtmlBlockDiv | !HtmlBlockCloseDiv .)* HtmlBlockCloseDiv"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenDl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenDl"),
        s(:str, "\"<\" Spnl (\"dl\" | \"DL\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseDl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseDl"),
        s(:str, "\"<\" Spnl \"/\" (\"dl\" | \"DL\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockDl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockDl"),
        s(:str, "HtmlBlockOpenDl (HtmlBlockDl | !HtmlBlockCloseDl .)* HtmlBlockCloseDl"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenFieldset),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenFieldset"),
        s(:str, "\"<\" Spnl (\"fieldset\" | \"FIELDSET\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseFieldset),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseFieldset"),
        s(:str, "\"<\" Spnl \"/\" (\"fieldset\" | \"FIELDSET\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockFieldset),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockFieldset"),
        s(:str, "HtmlBlockOpenFieldset (HtmlBlockFieldset | !HtmlBlockCloseFieldset .)* HtmlBlockCloseFieldset"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenForm),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenForm"),
        s(:str, "\"<\" Spnl (\"form\" | \"FORM\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseForm),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseForm"),
        s(:str, "\"<\" Spnl \"/\" (\"form\" | \"FORM\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockForm),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockForm"),
        s(:str, "HtmlBlockOpenForm (HtmlBlockForm | !HtmlBlockCloseForm .)* HtmlBlockCloseForm"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenH1),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenH1"),
        s(:str, "\"<\" Spnl (\"h1\" | \"H1\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseH1),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseH1"),
        s(:str, "\"<\" Spnl \"/\" (\"h1\" | \"H1\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockH1),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockH1"),
        s(:str, "HtmlBlockOpenH1 (HtmlBlockH1 | !HtmlBlockCloseH1 .)* HtmlBlockCloseH1"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenH2),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenH2"),
        s(:str, "\"<\" Spnl (\"h2\" | \"H2\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseH2),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseH2"),
        s(:str, "\"<\" Spnl \"/\" (\"h2\" | \"H2\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockH2),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockH2"),
        s(:str, "HtmlBlockOpenH2 (HtmlBlockH2 | !HtmlBlockCloseH2 .)* HtmlBlockCloseH2"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenH3),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenH3"),
        s(:str, "\"<\" Spnl (\"h3\" | \"H3\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseH3),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseH3"),
        s(:str, "\"<\" Spnl \"/\" (\"h3\" | \"H3\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockH3),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockH3"),
        s(:str, "HtmlBlockOpenH3 (HtmlBlockH3 | !HtmlBlockCloseH3 .)* HtmlBlockCloseH3"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenH4),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenH4"),
        s(:str, "\"<\" Spnl (\"h4\" | \"H4\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseH4),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseH4"),
        s(:str, "\"<\" Spnl \"/\" (\"h4\" | \"H4\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockH4),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockH4"),
        s(:str, "HtmlBlockOpenH4 (HtmlBlockH4 | !HtmlBlockCloseH4 .)* HtmlBlockCloseH4"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenH5),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenH5"),
        s(:str, "\"<\" Spnl (\"h5\" | \"H5\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseH5),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseH5"),
        s(:str, "\"<\" Spnl \"/\" (\"h5\" | \"H5\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockH5),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockH5"),
        s(:str, "HtmlBlockOpenH5 (HtmlBlockH5 | !HtmlBlockCloseH5 .)* HtmlBlockCloseH5"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenH6),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenH6"),
        s(:str, "\"<\" Spnl (\"h6\" | \"H6\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseH6),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseH6"),
        s(:str, "\"<\" Spnl \"/\" (\"h6\" | \"H6\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockH6),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockH6"),
        s(:str, "HtmlBlockOpenH6 (HtmlBlockH6 | !HtmlBlockCloseH6 .)* HtmlBlockCloseH6"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenMenu),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenMenu"),
        s(:str, "\"<\" Spnl (\"menu\" | \"MENU\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseMenu),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseMenu"),
        s(:str, "\"<\" Spnl \"/\" (\"menu\" | \"MENU\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockMenu),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockMenu"),
        s(:str, "HtmlBlockOpenMenu (HtmlBlockMenu | !HtmlBlockCloseMenu .)* HtmlBlockCloseMenu"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenNoframes),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenNoframes"),
        s(:str, "\"<\" Spnl (\"noframes\" | \"NOFRAMES\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseNoframes),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseNoframes"),
        s(:str, "\"<\" Spnl \"/\" (\"noframes\" | \"NOFRAMES\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockNoframes),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockNoframes"),
        s(:str, "HtmlBlockOpenNoframes (HtmlBlockNoframes | !HtmlBlockCloseNoframes .)* HtmlBlockCloseNoframes"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenNoscript),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenNoscript"),
        s(:str, "\"<\" Spnl (\"noscript\" | \"NOSCRIPT\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseNoscript),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseNoscript"),
        s(:str, "\"<\" Spnl \"/\" (\"noscript\" | \"NOSCRIPT\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockNoscript),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockNoscript"),
        s(:str, "HtmlBlockOpenNoscript (HtmlBlockNoscript | !HtmlBlockCloseNoscript .)* HtmlBlockCloseNoscript"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenOl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenOl"),
        s(:str, "\"<\" Spnl (\"ol\" | \"OL\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseOl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseOl"),
        s(:str, "\"<\" Spnl \"/\" (\"ol\" | \"OL\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOl"),
        s(:str, "HtmlBlockOpenOl (HtmlBlockOl | !HtmlBlockCloseOl .)* HtmlBlockCloseOl"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenP),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenP"),
        s(:str, "\"<\" Spnl (\"p\" | \"P\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseP),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseP"),
        s(:str, "\"<\" Spnl \"/\" (\"p\" | \"P\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockP),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockP"),
        s(:str, "HtmlBlockOpenP (HtmlBlockP | !HtmlBlockCloseP .)* HtmlBlockCloseP"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenPre),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenPre"),
        s(:str, "\"<\" Spnl (\"pre\" | \"PRE\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockClosePre),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockClosePre"),
        s(:str, "\"<\" Spnl \"/\" (\"pre\" | \"PRE\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockPre),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockPre"),
        s(:str, "HtmlBlockOpenPre (HtmlBlockPre | !HtmlBlockClosePre .)* HtmlBlockClosePre"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenTable),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenTable"),
        s(:str, "\"<\" Spnl (\"table\" | \"TABLE\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseTable),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseTable"),
        s(:str, "\"<\" Spnl \"/\" (\"table\" | \"TABLE\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockTable),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockTable"),
        s(:str, "HtmlBlockOpenTable (HtmlBlockTable | !HtmlBlockCloseTable .)* HtmlBlockCloseTable"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenUl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenUl"),
        s(:str, "\"<\" Spnl (\"ul\" | \"UL\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseUl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseUl"),
        s(:str, "\"<\" Spnl \"/\" (\"ul\" | \"UL\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockUl),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockUl"),
        s(:str, "HtmlBlockOpenUl (HtmlBlockUl | !HtmlBlockCloseUl .)* HtmlBlockCloseUl"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenDd),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenDd"),
        s(:str, "\"<\" Spnl (\"dd\" | \"DD\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseDd),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseDd"),
        s(:str, "\"<\" Spnl \"/\" (\"dd\" | \"DD\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockDd),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockDd"),
        s(:str, "HtmlBlockOpenDd (HtmlBlockDd | !HtmlBlockCloseDd .)* HtmlBlockCloseDd"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenDt),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenDt"),
        s(:str, "\"<\" Spnl (\"dt\" | \"DT\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseDt),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseDt"),
        s(:str, "\"<\" Spnl \"/\" (\"dt\" | \"DT\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockDt),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockDt"),
        s(:str, "HtmlBlockOpenDt (HtmlBlockDt | !HtmlBlockCloseDt .)* HtmlBlockCloseDt"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenFrameset),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenFrameset"),
        s(:str, "\"<\" Spnl (\"frameset\" | \"FRAMESET\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseFrameset),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseFrameset"),
        s(:str, "\"<\" Spnl \"/\" (\"frameset\" | \"FRAMESET\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockFrameset),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockFrameset"),
        s(:str, "HtmlBlockOpenFrameset (HtmlBlockFrameset | !HtmlBlockCloseFrameset .)* HtmlBlockCloseFrameset"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenLi),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenLi"),
        s(:str, "\"<\" Spnl (\"li\" | \"LI\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseLi),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseLi"),
        s(:str, "\"<\" Spnl \"/\" (\"li\" | \"LI\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockLi),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockLi"),
        s(:str, "HtmlBlockOpenLi (HtmlBlockLi | !HtmlBlockCloseLi .)* HtmlBlockCloseLi"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenTbody),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenTbody"),
        s(:str, "\"<\" Spnl (\"tbody\" | \"TBODY\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseTbody),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseTbody"),
        s(:str, "\"<\" Spnl \"/\" (\"tbody\" | \"TBODY\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockTbody),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockTbody"),
        s(:str, "HtmlBlockOpenTbody (HtmlBlockTbody | !HtmlBlockCloseTbody .)* HtmlBlockCloseTbody"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenTd),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenTd"),
        s(:str, "\"<\" Spnl (\"td\" | \"TD\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseTd),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseTd"),
        s(:str, "\"<\" Spnl \"/\" (\"td\" | \"TD\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockTd),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockTd"),
        s(:str, "HtmlBlockOpenTd (HtmlBlockTd | !HtmlBlockCloseTd .)* HtmlBlockCloseTd"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenTfoot),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenTfoot"),
        s(:str, "\"<\" Spnl (\"tfoot\" | \"TFOOT\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseTfoot),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseTfoot"),
        s(:str, "\"<\" Spnl \"/\" (\"tfoot\" | \"TFOOT\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockTfoot),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockTfoot"),
        s(:str, "HtmlBlockOpenTfoot (HtmlBlockTfoot | !HtmlBlockCloseTfoot .)* HtmlBlockCloseTfoot"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenTh),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenTh"),
        s(:str, "\"<\" Spnl (\"th\" | \"TH\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseTh),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseTh"),
        s(:str, "\"<\" Spnl \"/\" (\"th\" | \"TH\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockTh),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockTh"),
        s(:str, "HtmlBlockOpenTh (HtmlBlockTh | !HtmlBlockCloseTh .)* HtmlBlockCloseTh"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenThead),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenThead"),
        s(:str, "\"<\" Spnl (\"thead\" | \"THEAD\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseThead),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseThead"),
        s(:str, "\"<\" Spnl \"/\" (\"thead\" | \"THEAD\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockThead),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockThead"),
        s(:str, "HtmlBlockOpenThead (HtmlBlockThead | !HtmlBlockCloseThead .)* HtmlBlockCloseThead"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenTr),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenTr"),
        s(:str, "\"<\" Spnl (\"tr\" | \"TR\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseTr),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseTr"),
        s(:str, "\"<\" Spnl \"/\" (\"tr\" | \"TR\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockTr),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockTr"),
        s(:str, "HtmlBlockOpenTr (HtmlBlockTr | !HtmlBlockCloseTr .)* HtmlBlockCloseTr"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockOpenScript),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockOpenScript"),
        s(:str, "\"<\" Spnl (\"script\" | \"SCRIPT\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockCloseScript),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockCloseScript"),
        s(:str, "\"<\" Spnl \"/\" (\"script\" | \"SCRIPT\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockScript),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockScript"),
        s(:str, "HtmlBlockOpenScript (!HtmlBlockCloseScript .)* HtmlBlockCloseScript"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockInTags),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockInTags"),
        s(:str, "(HtmlAnchor | HtmlBlockAddress | HtmlBlockBlockquote | HtmlBlockCenter | HtmlBlockDir | HtmlBlockDiv | HtmlBlockDl | HtmlBlockFieldset | HtmlBlockForm | HtmlBlockH1 | HtmlBlockH2 | HtmlBlockH3 | HtmlBlockH4 | HtmlBlockH5 | HtmlBlockH6 | HtmlBlockMenu | HtmlBlockNoframes | HtmlBlockNoscript | HtmlBlockOl | HtmlBlockP | HtmlBlockPre | HtmlBlockTable | HtmlBlockUl | HtmlBlockDd | HtmlBlockDt | HtmlBlockFrameset | HtmlBlockLi | HtmlBlockTbody | HtmlBlockTd | HtmlBlockTfoot | HtmlBlockTh | HtmlBlockThead | HtmlBlockTr | HtmlBlockScript)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlock),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlock"),
        s(:str, "< (HtmlBlockInTags | HtmlComment | HtmlBlockSelfClosing | HtmlUnclosed) > @BlankLine+ { if html? then                 RDoc::Markup::Raw.new text               end }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlUnclosed),
      s(:send, nil, :rule_info,
        s(:str, "HtmlUnclosed"),
        s(:str, "\"<\" Spnl HtmlUnclosedType Spnl HtmlAttribute* Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlUnclosedType),
      s(:send, nil, :rule_info,
        s(:str, "HtmlUnclosedType"),
        s(:str, "(\"HR\" | \"hr\")"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockSelfClosing),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockSelfClosing"),
        s(:str, "\"<\" Spnl HtmlBlockType Spnl HtmlAttribute* \"/\" Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlBlockType),
      s(:send, nil, :rule_info,
        s(:str, "HtmlBlockType"),
        s(:str, "(\"ADDRESS\" | \"BLOCKQUOTE\" | \"CENTER\" | \"DD\" | \"DIR\" | \"DIV\" | \"DL\" | \"DT\" | \"FIELDSET\" | \"FORM\" | \"FRAMESET\" | \"H1\" | \"H2\" | \"H3\" | \"H4\" | \"H5\" | \"H6\" | \"HR\" | \"ISINDEX\" | \"LI\" | \"MENU\" | \"NOFRAMES\" | \"NOSCRIPT\" | \"OL\" | \"P\" | \"PRE\" | \"SCRIPT\" | \"TABLE\" | \"TBODY\" | \"TD\" | \"TFOOT\" | \"TH\" | \"THEAD\" | \"TR\" | \"UL\" | \"address\" | \"blockquote\" | \"center\" | \"dd\" | \"dir\" | \"div\" | \"dl\" | \"dt\" | \"fieldset\" | \"form\" | \"frameset\" | \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"hr\" | \"isindex\" | \"li\" | \"menu\" | \"noframes\" | \"noscript\" | \"ol\" | \"p\" | \"pre\" | \"script\" | \"table\" | \"tbody\" | \"td\" | \"tfoot\" | \"th\" | \"thead\" | \"tr\" | \"ul\")"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StyleOpen),
      s(:send, nil, :rule_info,
        s(:str, "StyleOpen"),
        s(:str, "\"<\" Spnl (\"style\" | \"STYLE\") Spnl HtmlAttribute* \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StyleClose),
      s(:send, nil, :rule_info,
        s(:str, "StyleClose"),
        s(:str, "\"<\" Spnl \"/\" (\"style\" | \"STYLE\") Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_InStyleTags),
      s(:send, nil, :rule_info,
        s(:str, "InStyleTags"),
        s(:str, "StyleOpen (!StyleClose .)* StyleClose"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StyleBlock),
      s(:send, nil, :rule_info,
        s(:str, "StyleBlock"),
        s(:str, "< InStyleTags > @BlankLine* { if css? then                     RDoc::Markup::Raw.new text                   end }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Inlines),
      s(:send, nil, :rule_info,
        s(:str, "Inlines"),
        s(:str, "(!@Endline Inline:i { i } | @Endline:c &Inline { c })+:chunks @Endline? { chunks }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Inline),
      s(:send, nil, :rule_info,
        s(:str, "Inline"),
        s(:str, "(Str | @Endline | UlOrStarLine | @Space | Strong | Emph | Image | Link | NoteReference | InlineNote | Code | RawHtml | Entity | EscapedChar | Symbol)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Space),
      s(:send, nil, :rule_info,
        s(:str, "Space"),
        s(:str, "@Spacechar+ { \" \" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Str),
      s(:send, nil, :rule_info,
        s(:str, "Str"),
        s(:str, "@StartList:a < @NormalChar+ > { a = text } (StrChunk:c { a << c })* { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StrChunk),
      s(:send, nil, :rule_info,
        s(:str, "StrChunk"),
        s(:str, "< (@NormalChar | /_+/ &Alphanumeric)+ > { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_EscapedChar),
      s(:send, nil, :rule_info,
        s(:str, "EscapedChar"),
        s(:str, "\"\\\\\" !@Newline < /[:\\\\`|*_{}\\[\\]()#+.!><-]/ > { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Entity),
      s(:send, nil, :rule_info,
        s(:str, "Entity"),
        s(:str, "(HexEntity | DecEntity | CharEntity):a { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Endline),
      s(:send, nil, :rule_info,
        s(:str, "Endline"),
        s(:str, "(@LineBreak | @TerminalEndline | @NormalEndline)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NormalEndline),
      s(:send, nil, :rule_info,
        s(:str, "NormalEndline"),
        s(:str, "@Sp @Newline !@BlankLine !\">\" !AtxStart !(Line /={3,}|-{3,}=/ @Newline) { \"\\n\" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TerminalEndline),
      s(:send, nil, :rule_info,
        s(:str, "TerminalEndline"),
        s(:str, "@Sp @Newline @Eof"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_LineBreak),
      s(:send, nil, :rule_info,
        s(:str, "LineBreak"),
        s(:str, "\"  \" @NormalEndline { RDoc::Markup::HardBreak.new }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Symbol),
      s(:send, nil, :rule_info,
        s(:str, "Symbol"),
        s(:str, "< @SpecialChar > { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_UlOrStarLine),
      s(:send, nil, :rule_info,
        s(:str, "UlOrStarLine"),
        s(:str, "(UlLine | StarLine):a { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StarLine),
      s(:send, nil, :rule_info,
        s(:str, "StarLine"),
        s(:str, "(< /\\*{4,}/ > { text } | < @Spacechar /\\*+/ &@Spacechar > { text })"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_UlLine),
      s(:send, nil, :rule_info,
        s(:str, "UlLine"),
        s(:str, "(< /_{4,}/ > { text } | < @Spacechar /_+/ &@Spacechar > { text })"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Emph),
      s(:send, nil, :rule_info,
        s(:str, "Emph"),
        s(:str, "(EmphStar | EmphUl)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_OneStarOpen),
      s(:send, nil, :rule_info,
        s(:str, "OneStarOpen"),
        s(:str, "!StarLine \"*\" !@Spacechar !@Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_OneStarClose),
      s(:send, nil, :rule_info,
        s(:str, "OneStarClose"),
        s(:str, "!@Spacechar !@Newline Inline:a \"*\" { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_EmphStar),
      s(:send, nil, :rule_info,
        s(:str, "EmphStar"),
        s(:str, "OneStarOpen @StartList:a (!OneStarClose Inline:l { a << l })* OneStarClose:l { a << l } { emphasis a.join }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_OneUlOpen),
      s(:send, nil, :rule_info,
        s(:str, "OneUlOpen"),
        s(:str, "!UlLine \"_\" !@Spacechar !@Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_OneUlClose),
      s(:send, nil, :rule_info,
        s(:str, "OneUlClose"),
        s(:str, "!@Spacechar !@Newline Inline:a \"_\" { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_EmphUl),
      s(:send, nil, :rule_info,
        s(:str, "EmphUl"),
        s(:str, "OneUlOpen @StartList:a (!OneUlClose Inline:l { a << l })* OneUlClose:l { a << l } { emphasis a.join }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Strong),
      s(:send, nil, :rule_info,
        s(:str, "Strong"),
        s(:str, "(StrongStar | StrongUl)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TwoStarOpen),
      s(:send, nil, :rule_info,
        s(:str, "TwoStarOpen"),
        s(:str, "!StarLine \"**\" !@Spacechar !@Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TwoStarClose),
      s(:send, nil, :rule_info,
        s(:str, "TwoStarClose"),
        s(:str, "!@Spacechar !@Newline Inline:a \"**\" { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StrongStar),
      s(:send, nil, :rule_info,
        s(:str, "StrongStar"),
        s(:str, "TwoStarOpen @StartList:a (!TwoStarClose Inline:l { a << l })* TwoStarClose:l { a << l } { strong a.join }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TwoUlOpen),
      s(:send, nil, :rule_info,
        s(:str, "TwoUlOpen"),
        s(:str, "!UlLine \"__\" !@Spacechar !@Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TwoUlClose),
      s(:send, nil, :rule_info,
        s(:str, "TwoUlClose"),
        s(:str, "!@Spacechar !@Newline Inline:a \"__\" { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StrongUl),
      s(:send, nil, :rule_info,
        s(:str, "StrongUl"),
        s(:str, "TwoUlOpen @StartList:a (!TwoUlClose Inline:i { a << i })* TwoUlClose:l { a << l } { strong a.join }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Image),
      s(:send, nil, :rule_info,
        s(:str, "Image"),
        s(:str, "\"!\" (ExplicitLink | ReferenceLink):a { \"rdoc-image:\#{a[/\\[(.*)\\]/, 1]}\" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Link),
      s(:send, nil, :rule_info,
        s(:str, "Link"),
        s(:str, "(ExplicitLink | ReferenceLink | AutoLink)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ReferenceLink),
      s(:send, nil, :rule_info,
        s(:str, "ReferenceLink"),
        s(:str, "(ReferenceLinkDouble | ReferenceLinkSingle)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ReferenceLinkDouble),
      s(:send, nil, :rule_info,
        s(:str, "ReferenceLinkDouble"),
        s(:str, "Label:content < Spnl > !\"[]\" Label:label { link_to content, label, text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ReferenceLinkSingle),
      s(:send, nil, :rule_info,
        s(:str, "ReferenceLinkSingle"),
        s(:str, "Label:content < (Spnl \"[]\")? > { link_to content, content, text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ExplicitLink),
      s(:send, nil, :rule_info,
        s(:str, "ExplicitLink"),
        s(:str, "Label:l Spnl \"(\" @Sp Source:s Spnl Title @Sp \")\" { \"{\#{l}}[\#{s}]\" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Source),
      s(:send, nil, :rule_info,
        s(:str, "Source"),
        s(:str, "(\"<\" < SourceContents > \">\" | < SourceContents >) { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SourceContents),
      s(:send, nil, :rule_info,
        s(:str, "SourceContents"),
        s(:str, "(((!\"(\" !\")\" !\">\" Nonspacechar)+ | \"(\" SourceContents \")\")* | \"\")"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Title),
      s(:send, nil, :rule_info,
        s(:str, "Title"),
        s(:str, "(TitleSingle | TitleDouble | \"\"):a { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TitleSingle),
      s(:send, nil, :rule_info,
        s(:str, "TitleSingle"),
        s(:str, "\"'\" (!(\"'\" @Sp (\")\" | @Newline)) .)* \"'\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_TitleDouble),
      s(:send, nil, :rule_info,
        s(:str, "TitleDouble"),
        s(:str, "\"\\\"\" (!(\"\\\"\" @Sp (\")\" | @Newline)) .)* \"\\\"\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AutoLink),
      s(:send, nil, :rule_info,
        s(:str, "AutoLink"),
        s(:str, "(AutoLinkUrl | AutoLinkEmail)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AutoLinkUrl),
      s(:send, nil, :rule_info,
        s(:str, "AutoLinkUrl"),
        s(:str, "\"<\" < /[A-Za-z]+/ \"://\" (!@Newline !\">\" .)+ > \">\" { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AutoLinkEmail),
      s(:send, nil, :rule_info,
        s(:str, "AutoLinkEmail"),
        s(:str, "\"<\" \"mailto:\"? < /[\\w+.\\/!%~$-]+/i \"@\" (!@Newline !\">\" .)+ > \">\" { \"mailto:\#{text}\" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Reference),
      s(:send, nil, :rule_info,
        s(:str, "Reference"),
        s(:str, "@NonindentSpace !\"[]\" Label:label \":\" Spnl RefSrc:link RefTitle @BlankLine+ { # TODO use title               reference label, link               nil             }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Label),
      s(:send, nil, :rule_info,
        s(:str, "Label"),
        s(:str, "\"[\" (!\"^\" &{ notes? } | &. &{ !notes? }) @StartList:a (!\"]\" Inline:l { a << l })* \"]\" { a.join.gsub(/\\s+/, ' ') }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RefSrc),
      s(:send, nil, :rule_info,
        s(:str, "RefSrc"),
        s(:str, "< Nonspacechar+ > { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RefTitle),
      s(:send, nil, :rule_info,
        s(:str, "RefTitle"),
        s(:str, "(RefTitleSingle | RefTitleDouble | RefTitleParens | EmptyTitle)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_EmptyTitle),
      s(:send, nil, :rule_info,
        s(:str, "EmptyTitle"),
        s(:str, "\"\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RefTitleSingle),
      s(:send, nil, :rule_info,
        s(:str, "RefTitleSingle"),
        s(:str, "Spnl \"'\" < (!(\"'\" @Sp @Newline | @Newline) .)* > \"'\" { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RefTitleDouble),
      s(:send, nil, :rule_info,
        s(:str, "RefTitleDouble"),
        s(:str, "Spnl \"\\\"\" < (!(\"\\\"\" @Sp @Newline | @Newline) .)* > \"\\\"\" { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RefTitleParens),
      s(:send, nil, :rule_info,
        s(:str, "RefTitleParens"),
        s(:str, "Spnl \"(\" < (!(\")\" @Sp @Newline | @Newline) .)* > \")\" { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_References),
      s(:send, nil, :rule_info,
        s(:str, "References"),
        s(:str, "(Reference | SkipBlock)*"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Ticks1),
      s(:send, nil, :rule_info,
        s(:str, "Ticks1"),
        s(:str, "\"`\" !\"`\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Ticks2),
      s(:send, nil, :rule_info,
        s(:str, "Ticks2"),
        s(:str, "\"``\" !\"`\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Ticks3),
      s(:send, nil, :rule_info,
        s(:str, "Ticks3"),
        s(:str, "\"```\" !\"`\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Ticks4),
      s(:send, nil, :rule_info,
        s(:str, "Ticks4"),
        s(:str, "\"````\" !\"`\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Ticks5),
      s(:send, nil, :rule_info,
        s(:str, "Ticks5"),
        s(:str, "\"`````\" !\"`\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Code),
      s(:send, nil, :rule_info,
        s(:str, "Code"),
        s(:str, "(Ticks1 @Sp < ((!\"`\" Nonspacechar)+ | !Ticks1 /`+/ | !(@Sp Ticks1) (@Spacechar | @Newline !@BlankLine))+ > @Sp Ticks1 | Ticks2 @Sp < ((!\"`\" Nonspacechar)+ | !Ticks2 /`+/ | !(@Sp Ticks2) (@Spacechar | @Newline !@BlankLine))+ > @Sp Ticks2 | Ticks3 @Sp < ((!\"`\" Nonspacechar)+ | !Ticks3 /`+/ | !(@Sp Ticks3) (@Spacechar | @Newline !@BlankLine))+ > @Sp Ticks3 | Ticks4 @Sp < ((!\"`\" Nonspacechar)+ | !Ticks4 /`+/ | !(@Sp Ticks4) (@Spacechar | @Newline !@BlankLine))+ > @Sp Ticks4 | Ticks5 @Sp < ((!\"`\" Nonspacechar)+ | !Ticks5 /`+/ | !(@Sp Ticks5) (@Spacechar | @Newline !@BlankLine))+ > @Sp Ticks5) { \"<code>\#{text}</code>\" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RawHtml),
      s(:send, nil, :rule_info,
        s(:str, "RawHtml"),
        s(:str, "< (HtmlComment | HtmlBlockScript | HtmlTag) > { if html? then text else '' end }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_BlankLine),
      s(:send, nil, :rule_info,
        s(:str, "BlankLine"),
        s(:str, "@Sp @Newline { \"\\n\" }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Quoted),
      s(:send, nil, :rule_info,
        s(:str, "Quoted"),
        s(:str, "(\"\\\"\" (!\"\\\"\" .)* \"\\\"\" | \"'\" (!\"'\" .)* \"'\")"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlAttribute),
      s(:send, nil, :rule_info,
        s(:str, "HtmlAttribute"),
        s(:str, "(AlphanumericAscii | \"-\")+ Spnl (\"=\" Spnl (Quoted | (!\">\" Nonspacechar)+))? Spnl"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlComment),
      s(:send, nil, :rule_info,
        s(:str, "HtmlComment"),
        s(:str, "\"<!--\" (!\"-->\" .)* \"-->\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HtmlTag),
      s(:send, nil, :rule_info,
        s(:str, "HtmlTag"),
        s(:str, "\"<\" Spnl \"/\"? AlphanumericAscii+ Spnl HtmlAttribute* \"/\"? Spnl \">\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Eof),
      s(:send, nil, :rule_info,
        s(:str, "Eof"),
        s(:str, "!."))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Nonspacechar),
      s(:send, nil, :rule_info,
        s(:str, "Nonspacechar"),
        s(:str, "!@Spacechar !@Newline ."))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Sp),
      s(:send, nil, :rule_info,
        s(:str, "Sp"),
        s(:str, "@Spacechar*"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Spnl),
      s(:send, nil, :rule_info,
        s(:str, "Spnl"),
        s(:str, "@Sp (@Newline @Sp)?"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SpecialChar),
      s(:send, nil, :rule_info,
        s(:str, "SpecialChar"),
        s(:str, "(/[*_`&\\[\\]()<!#\\\\'\"]/ | @ExtendedSpecialChar)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NormalChar),
      s(:send, nil, :rule_info,
        s(:str, "NormalChar"),
        s(:str, "!(@SpecialChar | @Spacechar | @Newline) ."))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Digit),
      s(:send, nil, :rule_info,
        s(:str, "Digit"),
        s(:str, "[0-9]"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Alphanumeric),
      s(:send, nil, :rule_info,
        s(:str, "Alphanumeric"),
        s(:str, "%literals.Alphanumeric"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AlphanumericAscii),
      s(:send, nil, :rule_info,
        s(:str, "AlphanumericAscii"),
        s(:str, "%literals.AlphanumericAscii"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_BOM),
      s(:send, nil, :rule_info,
        s(:str, "BOM"),
        s(:str, "%literals.BOM"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Newline),
      s(:send, nil, :rule_info,
        s(:str, "Newline"),
        s(:str, "%literals.Newline"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NonAlphanumeric),
      s(:send, nil, :rule_info,
        s(:str, "NonAlphanumeric"),
        s(:str, "%literals.NonAlphanumeric"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Spacechar),
      s(:send, nil, :rule_info,
        s(:str, "Spacechar"),
        s(:str, "%literals.Spacechar"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_HexEntity),
      s(:send, nil, :rule_info,
        s(:str, "HexEntity"),
        s(:str, "/&#x/i < /[0-9a-fA-F]+/ > \";\" { [text.to_i(16)].pack 'U' }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_DecEntity),
      s(:send, nil, :rule_info,
        s(:str, "DecEntity"),
        s(:str, "\"&#\" < /[0-9]+/ > \";\" { [text.to_i].pack 'U' }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_CharEntity),
      s(:send, nil, :rule_info,
        s(:str, "CharEntity"),
        s(:str, "\"&\" < /[A-Za-z0-9]+/ > \";\" { if entity = HTML_ENTITIES[text] then                  entity.pack 'U*'                else                  \"&\#{text};\"                end              }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NonindentSpace),
      s(:send, nil, :rule_info,
        s(:str, "NonindentSpace"),
        s(:str, "/ {0,3}/"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Indent),
      s(:send, nil, :rule_info,
        s(:str, "Indent"),
        s(:str, "/\\t|    /"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_IndentedLine),
      s(:send, nil, :rule_info,
        s(:str, "IndentedLine"),
        s(:str, "Indent Line"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_OptionallyIndentedLine),
      s(:send, nil, :rule_info,
        s(:str, "OptionallyIndentedLine"),
        s(:str, "Indent? Line"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_StartList),
      s(:send, nil, :rule_info,
        s(:str, "StartList"),
        s(:str, "&. { [] }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Line),
      s(:send, nil, :rule_info,
        s(:str, "Line"),
        s(:str, "@RawLine:a { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RawLine),
      s(:send, nil, :rule_info,
        s(:str, "RawLine"),
        s(:str, "(< (!\"\\r\" !\"\\n\" .)* @Newline > | < .+ > @Eof) { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_SkipBlock),
      s(:send, nil, :rule_info,
        s(:str, "SkipBlock"),
        s(:str, "(HtmlBlock | (!\"#\" !SetextBottom1 !SetextBottom2 !@BlankLine @RawLine)+ @BlankLine* | @BlankLine+ | @RawLine)"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_ExtendedSpecialChar),
      s(:send, nil, :rule_info,
        s(:str, "ExtendedSpecialChar"),
        s(:str, "&{ notes? } \"^\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NoteReference),
      s(:send, nil, :rule_info,
        s(:str, "NoteReference"),
        s(:str, "&{ notes? } RawNoteReference:ref { note_for ref }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RawNoteReference),
      s(:send, nil, :rule_info,
        s(:str, "RawNoteReference"),
        s(:str, "\"[^\" < (!@Newline !\"]\" .)+ > \"]\" { text }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Note),
      s(:send, nil, :rule_info,
        s(:str, "Note"),
        s(:str, "&{ notes? } @NonindentSpace RawNoteReference:ref \":\" @Sp @StartList:a RawNoteBlock:i { a.concat i } (&Indent RawNoteBlock:i { a.concat i })* { @footnotes[ref] = paragraph a                    nil                 }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_InlineNote),
      s(:send, nil, :rule_info,
        s(:str, "InlineNote"),
        s(:str, "&{ notes? } \"^[\" @StartList:a (!\"]\" Inline:l { a << l })+ \"]\" {                ref = [:inline, @note_order.length]                @footnotes[ref] = paragraph a                 note_for ref              }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Notes),
      s(:send, nil, :rule_info,
        s(:str, "Notes"),
        s(:str, "(Note | SkipBlock)*"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_RawNoteBlock),
      s(:send, nil, :rule_info,
        s(:str, "RawNoteBlock"),
        s(:str, "@StartList:a (!@BlankLine OptionallyIndentedLine:l { a << l })+ < @BlankLine* > { a << text } { a }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_CodeFence),
      s(:send, nil, :rule_info,
        s(:str, "CodeFence"),
        s(:str, "&{ github? } Ticks3 (@Sp StrChunk:format)? Spnl < ((!\"`\" Nonspacechar)+ | !Ticks3 /`+/ | Spacechar | @Newline)+ > Ticks3 @Sp @Newline* { verbatim = RDoc::Markup::Verbatim.new text               verbatim.format = format.intern if format               verbatim             }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_DefinitionList),
      s(:send, nil, :rule_info,
        s(:str, "DefinitionList"),
        s(:str, "&{ definition_lists? } DefinitionListItem+:list { RDoc::Markup::List.new :NOTE, *list.flatten }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_DefinitionListItem),
      s(:send, nil, :rule_info,
        s(:str, "DefinitionListItem"),
        s(:str, "DefinitionListLabel+:label DefinitionListDefinition+:defns { list_items = []                        list_items <<                          RDoc::Markup::ListItem.new(label, defns.shift)                         list_items.concat defns.map { |defn|                          RDoc::Markup::ListItem.new nil, defn                        } unless list_items.empty?                         list_items                      }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_DefinitionListLabel),
      s(:send, nil, :rule_info,
        s(:str, "DefinitionListLabel"),
        s(:str, "StrChunk:label @Sp @Newline { label }"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_DefinitionListDefinition),
      s(:send, nil, :rule_info,
        s(:str, "DefinitionListDefinition"),
        s(:str, "@NonindentSpace \":\" @Space Inlines:a @BlankLine+ { paragraph a }")))))
