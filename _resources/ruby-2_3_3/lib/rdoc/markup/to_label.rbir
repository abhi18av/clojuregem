s(:begin,
  s(:send, nil, :require,
    s(:str, "cgi")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :ToLabel),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :Formatter),
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :res)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :markup,
            s(:nil))),
        s(:begin,
          s(:super,
            s(:nil),
            s(:lvar, :markup)),
          s(:send,
            s(:ivar, :@markup), :add_special,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :CrossReference), :CROSSREF_REGEXP),
            s(:sym, :CROSSREF)),
          s(:send,
            s(:ivar, :@markup), :add_special,
            s(:regexp,
              s(:str, "(((\\{.*?\\})|\\b\\S+?)\\[\\S+?\\])"),
              s(:regopt)),
            s(:sym, :TIDYLINK)),
          s(:send, nil, :add_tag,
            s(:sym, :BOLD),
            s(:str, ""),
            s(:str, "")),
          s(:send, nil, :add_tag,
            s(:sym, :TT),
            s(:str, ""),
            s(:str, "")),
          s(:send, nil, :add_tag,
            s(:sym, :EM),
            s(:str, ""),
            s(:str, "")),
          s(:ivasgn, :@res,
            s(:array)))),
      s(:def, :convert,
        s(:args,
          s(:arg, :text)),
        s(:begin,
          s(:lvasgn, :label,
            s(:send, nil, :convert_flow,
              s(:send,
                s(:ivar, :@am), :flow,
                s(:lvar, :text)))),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :CGI), :escape,
                s(:lvar, :label)), :gsub,
              s(:str, "%"),
              s(:str, "-")), :sub,
            s(:regexp,
              s(:str, "^-"),
              s(:regopt)),
            s(:str, "")))),
      s(:def, :handle_special_CROSSREF,
        s(:args,
          s(:arg, :special)),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :special), :text)),
          s(:send,
            s(:lvar, :text), :sub,
            s(:regexp,
              s(:str, "^\\\\"),
              s(:regopt)),
            s(:str, "")))),
      s(:def, :handle_special_TIDYLINK,
        s(:args,
          s(:arg, :special)),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :special), :text)),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :text), :=~,
                s(:regexp,
                  s(:str, "\\{(.*?)\\}\\[(.*?)\\]"),
                  s(:regopt))),
              s(:send,
                s(:lvar, :text), :=~,
                s(:regexp,
                  s(:str, "(\\S+)\\[(.*?)\\]"),
                  s(:regopt)))), nil,
            s(:return,
              s(:lvar, :text))),
          s(:nth_ref, 1))),
      s(:alias,
        s(:sym, :accept_blank_line),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_block_quote),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_heading),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_list_end),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_list_item_end),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_list_item_start),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_list_start),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_paragraph),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_raw),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_rule),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :accept_verbatim),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :end_accepting),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :handle_special_HARD_BREAK),
        s(:sym, :ignore)),
      s(:alias,
        s(:sym, :start_accepting),
        s(:sym, :ignore)))))
