s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :ToRdoc),
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :Formatter),
  s(:begin,
    s(:send, nil, :attr_accessor,
      s(:sym, :indent)),
    s(:send, nil, :attr_accessor,
      s(:sym, :width)),
    s(:send, nil, :attr_reader,
      s(:sym, :list_index)),
    s(:send, nil, :attr_reader,
      s(:sym, :list_type)),
    s(:send, nil, :attr_reader,
      s(:sym, :list_width)),
    s(:send, nil, :attr_reader,
      s(:sym, :prefix)),
    s(:send, nil, :attr_reader,
      s(:sym, :res)),
    s(:def, :initialize,
      s(:args,
        s(:optarg, :markup,
          s(:nil))),
      s(:begin,
        s(:super,
          s(:nil),
          s(:lvar, :markup)),
        s(:send,
          s(:ivar, :@markup), :add_special,
          s(:regexp,
            s(:str, "\\\\\\S"),
            s(:regopt)),
          s(:sym, :SUPPRESSED_CROSSREF)),
        s(:ivasgn, :@width,
          s(:int, 78)),
        s(:send, nil, :init_tags),
        s(:ivasgn, :@headings,
          s(:hash)),
        s(:send,
          s(:ivar, :@headings), :default=,
          s(:array)),
        s(:send,
          s(:ivar, :@headings), :[]=,
          s(:int, 1),
          s(:array,
            s(:str, "= "),
            s(:str, ""))),
        s(:send,
          s(:ivar, :@headings), :[]=,
          s(:int, 2),
          s(:array,
            s(:str, "== "),
            s(:str, ""))),
        s(:send,
          s(:ivar, :@headings), :[]=,
          s(:int, 3),
          s(:array,
            s(:str, "=== "),
            s(:str, ""))),
        s(:send,
          s(:ivar, :@headings), :[]=,
          s(:int, 4),
          s(:array,
            s(:str, "==== "),
            s(:str, ""))),
        s(:send,
          s(:ivar, :@headings), :[]=,
          s(:int, 5),
          s(:array,
            s(:str, "===== "),
            s(:str, ""))),
        s(:send,
          s(:ivar, :@headings), :[]=,
          s(:int, 6),
          s(:array,
            s(:str, "====== "),
            s(:str, ""))),
        s(:ivasgn, :@hard_break,
          s(:str, "\n")))),
    s(:def, :init_tags,
      s(:args),
      s(:begin,
        s(:send, nil, :add_tag,
          s(:sym, :BOLD),
          s(:str, "<b>"),
          s(:str, "</b>")),
        s(:send, nil, :add_tag,
          s(:sym, :TT),
          s(:str, "<tt>"),
          s(:str, "</tt>")),
        s(:send, nil, :add_tag,
          s(:sym, :EM),
          s(:str, "<em>"),
          s(:str, "</em>")))),
    s(:def, :accept_blank_line,
      s(:args,
        s(:arg, :blank_line)),
      s(:send,
        s(:ivar, :@res), :<<,
        s(:str, "\n"))),
    s(:def, :accept_block_quote,
      s(:args,
        s(:arg, :block_quote)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@indent), :+,
          s(:int, 2)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :block_quote), :parts), :each),
          s(:args,
            s(:arg, :part)),
          s(:begin,
            s(:ivasgn, :@prefix,
              s(:str, "> ")),
            s(:send,
              s(:lvar, :part), :accept,
              s(:self)))),
        s(:op_asgn,
          s(:ivasgn, :@indent), :-,
          s(:int, 2)))),
    s(:def, :accept_heading,
      s(:args,
        s(:arg, :heading)),
      s(:begin,
        s(:or,
          s(:send, nil, :use_prefix),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:send,
              s(:str, " "), :*,
              s(:ivar, :@indent)))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:send,
            s(:send,
              s(:ivar, :@headings), :[],
              s(:send,
                s(:lvar, :heading), :level)), :[],
            s(:int, 0))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:send, nil, :attributes,
            s(:send,
              s(:lvar, :heading), :text))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:send,
            s(:send,
              s(:ivar, :@headings), :[],
              s(:send,
                s(:lvar, :heading), :level)), :[],
            s(:int, 1))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:str, "\n")))),
    s(:def, :accept_list_end,
      s(:args,
        s(:arg, :list)),
      s(:begin,
        s(:send,
          s(:ivar, :@list_index), :pop),
        s(:send,
          s(:ivar, :@list_type), :pop),
        s(:send,
          s(:ivar, :@list_width), :pop))),
    s(:def, :accept_list_item_end,
      s(:args,
        s(:arg, :list_item)),
      s(:begin,
        s(:lvasgn, :width,
          s(:case,
            s(:send,
              s(:ivar, :@list_type), :last),
            s(:when,
              s(:sym, :BULLET),
              s(:int, 2)),
            s(:when,
              s(:sym, :NOTE),
              s(:sym, :LABEL),
              s(:begin,
                s(:if,
                  s(:ivar, :@prefix),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@res), :<<,
                      s(:send,
                        s(:ivar, :@prefix), :strip)),
                    s(:ivasgn, :@prefix,
                      s(:nil))), nil),
                s(:send,
                  s(:ivar, :@res), :<<,
                  s(:str, "\n")),
                s(:int, 2))),
            s(:begin,
              s(:lvasgn, :bullet,
                s(:send,
                  s(:send,
                    s(:ivar, :@list_index), :last), :to_s)),
              s(:send,
                s(:ivar, :@list_index), :[]=,
                s(:int, -1),
                s(:send,
                  s(:send,
                    s(:ivar, :@list_index), :last), :succ)),
              s(:send,
                s(:send,
                  s(:lvar, :bullet), :length), :+,
                s(:int, 2))))),
        s(:op_asgn,
          s(:ivasgn, :@indent), :-,
          s(:lvar, :width)))),
    s(:def, :accept_list_item_start,
      s(:args,
        s(:arg, :list_item)),
      s(:begin,
        s(:lvasgn, :type,
          s(:send,
            s(:ivar, :@list_type), :last)),
        s(:case,
          s(:lvar, :type),
          s(:when,
            s(:sym, :NOTE),
            s(:sym, :LABEL),
            s(:begin,
              s(:lvasgn, :bullets,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send, nil, :Array,
                        s(:send,
                          s(:lvar, :list_item), :label)), :map),
                    s(:args,
                      s(:arg, :label)),
                    s(:send,
                      s(:send, nil, :attributes,
                        s(:lvar, :label)), :strip)), :join,
                  s(:str, "\n"))),
              s(:if,
                s(:send,
                  s(:lvar, :bullets), :empty?), nil,
                s(:send,
                  s(:lvar, :bullets), :<<,
                  s(:str, ":\n"))),
              s(:ivasgn, :@prefix,
                s(:send,
                  s(:str, " "), :*,
                  s(:ivar, :@indent))),
              s(:op_asgn,
                s(:ivasgn, :@indent), :+,
                s(:int, 2)),
              s(:send,
                s(:ivar, :@prefix), :<<,
                s(:send,
                  s(:lvar, :bullets), :+,
                  s(:begin,
                    s(:send,
                      s(:str, " "), :*,
                      s(:ivar, :@indent))))))),
          s(:begin,
            s(:lvasgn, :bullet,
              s(:if,
                s(:send,
                  s(:lvar, :type), :==,
                  s(:sym, :BULLET)),
                s(:str, "*"),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@list_index), :last), :to_s), :+,
                  s(:str, ".")))),
            s(:ivasgn, :@prefix,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:str, " "), :*,
                    s(:ivar, :@indent))), :+,
                s(:send,
                  s(:lvar, :bullet), :ljust,
                  s(:send,
                    s(:send,
                      s(:lvar, :bullet), :length), :+,
                    s(:int, 1))))),
            s(:lvasgn, :width,
              s(:send,
                s(:send,
                  s(:lvar, :bullet), :length), :+,
                s(:int, 1))),
            s(:op_asgn,
              s(:ivasgn, :@indent), :+,
              s(:lvar, :width)))))),
    s(:def, :accept_list_start,
      s(:args,
        s(:arg, :list)),
      s(:begin,
        s(:case,
          s(:send,
            s(:lvar, :list), :type),
          s(:when,
            s(:sym, :BULLET),
            s(:begin,
              s(:send,
                s(:ivar, :@list_index), :<<,
                s(:nil)),
              s(:send,
                s(:ivar, :@list_width), :<<,
                s(:int, 1)))),
          s(:when,
            s(:sym, :LABEL),
            s(:sym, :NOTE),
            s(:begin,
              s(:send,
                s(:ivar, :@list_index), :<<,
                s(:nil)),
              s(:send,
                s(:ivar, :@list_width), :<<,
                s(:int, 2)))),
          s(:when,
            s(:sym, :LALPHA),
            s(:begin,
              s(:send,
                s(:ivar, :@list_index), :<<,
                s(:str, "a")),
              s(:send,
                s(:ivar, :@list_width), :<<,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :list), :items), :length), :to_s), :length)))),
          s(:when,
            s(:sym, :NUMBER),
            s(:begin,
              s(:send,
                s(:ivar, :@list_index), :<<,
                s(:int, 1)),
              s(:send,
                s(:ivar, :@list_width), :<<,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :list), :items), :length), :to_s), :length)))),
          s(:when,
            s(:sym, :UALPHA),
            s(:begin,
              s(:send,
                s(:ivar, :@list_index), :<<,
                s(:str, "A")),
              s(:send,
                s(:ivar, :@list_width), :<<,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :list), :items), :length), :to_s), :length)))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :RDoc), :Error),
            s(:dstr,
              s(:str, "invalid list type "),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :type))))),
        s(:send,
          s(:ivar, :@list_type), :<<,
          s(:send,
            s(:lvar, :list), :type)))),
    s(:def, :accept_paragraph,
      s(:args,
        s(:arg, :paragraph)),
      s(:begin,
        s(:lvasgn, :text,
          s(:send,
            s(:lvar, :paragraph), :text,
            s(:ivar, :@hard_break))),
        s(:send, nil, :wrap,
          s(:send, nil, :attributes,
            s(:lvar, :text))))),
    s(:def, :accept_indented_paragraph,
      s(:args,
        s(:arg, :paragraph)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@indent), :+,
          s(:send,
            s(:lvar, :paragraph), :indent)),
        s(:lvasgn, :text,
          s(:send,
            s(:lvar, :paragraph), :text,
            s(:ivar, :@hard_break))),
        s(:send, nil, :wrap,
          s(:send, nil, :attributes,
            s(:lvar, :text))),
        s(:op_asgn,
          s(:ivasgn, :@indent), :-,
          s(:send,
            s(:lvar, :paragraph), :indent)))),
    s(:def, :accept_raw,
      s(:args,
        s(:arg, :raw)),
      s(:send,
        s(:ivar, :@res), :<<,
        s(:send,
          s(:send,
            s(:lvar, :raw), :parts), :join,
          s(:str, "\n")))),
    s(:def, :accept_rule,
      s(:args,
        s(:arg, :rule)),
      s(:begin,
        s(:or,
          s(:send, nil, :use_prefix),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:send,
              s(:str, " "), :*,
              s(:ivar, :@indent)))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:send,
            s(:str, "-"), :*,
            s(:begin,
              s(:send,
                s(:ivar, :@width), :-,
                s(:ivar, :@indent))))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:str, "\n")))),
    s(:def, :accept_verbatim,
      s(:args,
        s(:arg, :verbatim)),
      s(:begin,
        s(:lvasgn, :indent,
          s(:send,
            s(:str, " "), :*,
            s(:begin,
              s(:send,
                s(:ivar, :@indent), :+,
                s(:int, 2))))),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :verbatim), :parts), :each),
          s(:args,
            s(:arg, :part)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :part), :==,
                s(:str, "\n")), nil,
              s(:send,
                s(:ivar, :@res), :<<,
                s(:lvar, :indent))),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:lvar, :part)))),
        s(:if,
          s(:send,
            s(:ivar, :@res), :=~,
            s(:regexp,
              s(:str, "\\n\\z"),
              s(:regopt))), nil,
          s(:send,
            s(:ivar, :@res), :<<,
            s(:str, "\n"))))),
    s(:def, :attributes,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:lvasgn, :flow,
          s(:send,
            s(:ivar, :@am), :flow,
            s(:send,
              s(:lvar, :text), :dup))),
        s(:send, nil, :convert_flow,
          s(:lvar, :flow)))),
    s(:def, :end_accepting,
      s(:args),
      s(:send,
        s(:ivar, :@res), :join)),
    s(:def, :handle_special_SUPPRESSED_CROSSREF,
      s(:args,
        s(:arg, :special)),
      s(:begin,
        s(:lvasgn, :text,
          s(:send,
            s(:lvar, :special), :text)),
        s(:if,
          s(:send, nil, :in_tt?), nil,
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :text), :sub,
              s(:str, "\\"),
              s(:str, "")))),
        s(:lvar, :text))),
    s(:def, :handle_special_HARD_BREAK,
      s(:args,
        s(:arg, :special)),
      s(:str, "\n")),
    s(:def, :start_accepting,
      s(:args),
      s(:begin,
        s(:ivasgn, :@res,
          s(:array,
            s(:str, ""))),
        s(:ivasgn, :@indent,
          s(:int, 0)),
        s(:ivasgn, :@prefix,
          s(:nil)),
        s(:ivasgn, :@list_index,
          s(:array)),
        s(:ivasgn, :@list_type,
          s(:array)),
        s(:ivasgn, :@list_width,
          s(:array)))),
    s(:def, :use_prefix,
      s(:args),
      s(:begin,
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :prefix),
            s(:ivasgn, :@prefix)),
          s(:array,
            s(:ivar, :@prefix),
            s(:nil))),
        s(:if,
          s(:lvar, :prefix),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:lvar, :prefix)), nil),
        s(:lvar, :prefix))),
    s(:def, :wrap,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:if,
          s(:and,
            s(:lvar, :text),
            s(:send,
              s(:send,
                s(:lvar, :text), :empty?), :!)), nil,
          s(:return)),
        s(:lvasgn, :text_len,
          s(:send,
            s(:ivar, :@width), :-,
            s(:ivar, :@indent))),
        s(:if,
          s(:send,
            s(:lvar, :text_len), :<,
            s(:int, 20)),
          s(:lvasgn, :text_len,
            s(:int, 20)), nil),
        s(:lvasgn, :re,
          s(:regexp,
            s(:str, "^(.{0,"),
            s(:begin,
              s(:lvar, :text_len)),
            s(:str, "})[ \\n]"),
            s(:regopt))),
        s(:lvasgn, :next_prefix,
          s(:send,
            s(:str, " "), :*,
            s(:ivar, :@indent))),
        s(:lvasgn, :prefix,
          s(:or,
            s(:ivar, :@prefix),
            s(:lvar, :next_prefix))),
        s(:ivasgn, :@prefix,
          s(:nil)),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:lvar, :prefix)),
        s(:while,
          s(:send,
            s(:send,
              s(:lvar, :text), :length), :>,
            s(:lvar, :text_len)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :text), :=~,
                s(:lvar, :re)),
              s(:begin,
                s(:send,
                  s(:ivar, :@res), :<<,
                  s(:nth_ref, 1)),
                s(:send,
                  s(:lvar, :text), :slice!,
                  s(:int, 0),
                  s(:send,
                    s(:back_ref, :$&), :length))),
              s(:send,
                s(:ivar, :@res), :<<,
                s(:send,
                  s(:lvar, :text), :slice!,
                  s(:int, 0),
                  s(:lvar, :text_len)))),
            s(:send,
              s(:send,
                s(:ivar, :@res), :<<,
                s(:str, "\n")), :<<,
              s(:lvar, :next_prefix)))),
        s(:if,
          s(:send,
            s(:lvar, :text), :empty?),
          s(:begin,
            s(:send,
              s(:ivar, :@res), :pop),
            s(:send,
              s(:ivar, :@res), :pop)),
          s(:begin,
            s(:send,
              s(:ivar, :@res), :<<,
              s(:lvar, :text)),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:str, "\n"))))))))
