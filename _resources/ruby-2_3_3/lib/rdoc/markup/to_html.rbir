s(:begin,
  s(:send, nil, :require,
    s(:str, "cgi")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :ToHtml),
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :Formatter),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :RDoc), :Text)),
      s(:casgn, nil, :LIST_TYPE_TO_HTML,
        s(:hash,
          s(:pair,
            s(:sym, :BULLET),
            s(:array,
              s(:str, "<ul>"),
              s(:str, "</ul>"))),
          s(:pair,
            s(:sym, :LABEL),
            s(:array,
              s(:str, "<dl class=\"rdoc-list label-list\">"),
              s(:str, "</dl>"))),
          s(:pair,
            s(:sym, :LALPHA),
            s(:array,
              s(:str, "<ol style=\"list-style-type: lower-alpha\">"),
              s(:str, "</ol>"))),
          s(:pair,
            s(:sym, :NOTE),
            s(:array,
              s(:str, "<dl class=\"rdoc-list note-list\">"),
              s(:str, "</dl>"))),
          s(:pair,
            s(:sym, :NUMBER),
            s(:array,
              s(:str, "<ol>"),
              s(:str, "</ol>"))),
          s(:pair,
            s(:sym, :UALPHA),
            s(:array,
              s(:str, "<ol style=\"list-style-type: upper-alpha\">"),
              s(:str, "</ol>"))))),
      s(:send, nil, :attr_reader,
        s(:sym, :res)),
      s(:send, nil, :attr_reader,
        s(:sym, :in_list_entry)),
      s(:send, nil, :attr_reader,
        s(:sym, :list)),
      s(:send, nil, :attr_accessor,
        s(:sym, :code_object)),
      s(:send, nil, :attr_accessor,
        s(:sym, :from_path)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :options),
          s(:optarg, :markup,
            s(:nil))),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@code_object,
            s(:nil)),
          s(:ivasgn, :@from_path,
            s(:str, "")),
          s(:ivasgn, :@in_list_entry,
            s(:nil)),
          s(:ivasgn, :@list,
            s(:nil)),
          s(:ivasgn, :@th,
            s(:nil)),
          s(:ivasgn, :@hard_break,
            s(:str, "<br>\n")),
          s(:send,
            s(:ivar, :@markup), :add_special,
            s(:regexp,
              s(:str, "(?:link:|https?:|mailto:|ftp:|irc:|www\\.)\\S+\\w"),
              s(:regopt)),
            s(:sym, :HYPERLINK)),
          s(:send, nil, :add_special_RDOCLINK),
          s(:send, nil, :add_special_TIDYLINK),
          s(:send, nil, :init_tags))),
      s(:def, :handle_RDOCLINK,
        s(:args,
          s(:arg, :url)),
        s(:case,
          s(:lvar, :url),
          s(:when,
            s(:regexp,
              s(:str, "^rdoc-ref:"),
              s(:regopt)),
            s(:back_ref, :$')),
          s(:when,
            s(:regexp,
              s(:str, "^rdoc-label:"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :text,
                s(:back_ref, :$')),
              s(:lvasgn, :text,
                s(:case,
                  s(:lvar, :text),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\Alabel-"),
                      s(:regopt)),
                    s(:back_ref, :$')),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\Afootmark-"),
                      s(:regopt)),
                    s(:back_ref, :$')),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\Afoottext-"),
                      s(:regopt)),
                    s(:back_ref, :$')),
                  s(:lvar, :text))),
              s(:send, nil, :gen_url,
                s(:lvar, :url),
                s(:lvar, :text)))),
          s(:when,
            s(:regexp,
              s(:str, "^rdoc-image:"),
              s(:regopt)),
            s(:dstr,
              s(:str, "<img src=\""),
              s(:begin,
                s(:back_ref, :$')),
              s(:str, "\">"))),
          s(:begin,
            s(:send,
              s(:lvar, :url), :=~,
              s(:regexp,
                s(:str, "\\Ardoc-[a-z]+:"),
                s(:regopt))),
            s(:back_ref, :$')))),
      s(:def, :handle_special_HARD_BREAK,
        s(:args,
          s(:arg, :special)),
        s(:str, "<br>")),
      s(:def, :handle_special_HYPERLINK,
        s(:args,
          s(:arg, :special)),
        s(:begin,
          s(:lvasgn, :url,
            s(:send,
              s(:lvar, :special), :text)),
          s(:send, nil, :gen_url,
            s(:lvar, :url),
            s(:lvar, :url)))),
      s(:def, :handle_special_RDOCLINK,
        s(:args,
          s(:arg, :special)),
        s(:send, nil, :handle_RDOCLINK,
          s(:send,
            s(:lvar, :special), :text))),
      s(:def, :handle_special_TIDYLINK,
        s(:args,
          s(:arg, :special)),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :special), :text)),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :text), :=~,
                s(:regexp,
                  s(:str, "^\\{(.*)\\}\\[(.*?)\\]$"),
                  s(:regopt))),
              s(:send,
                s(:lvar, :text), :=~,
                s(:regexp,
                  s(:str, "^(\\S+)\\[(.*?)\\]$"),
                  s(:regopt)))), nil,
            s(:return,
              s(:lvar, :text))),
          s(:lvasgn, :label,
            s(:nth_ref, 1)),
          s(:lvasgn, :url,
            s(:nth_ref, 2)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^rdoc-image:"),
                s(:regopt)),
              s(:lvar, :label)),
            s(:lvasgn, :label,
              s(:send, nil, :handle_RDOCLINK,
                s(:lvar, :label))), nil),
          s(:send, nil, :gen_url,
            s(:lvar, :url),
            s(:lvar, :label)))),
      s(:def, :start_accepting,
        s(:args),
        s(:begin,
          s(:ivasgn, :@res,
            s(:array)),
          s(:ivasgn, :@in_list_entry,
            s(:array)),
          s(:ivasgn, :@list,
            s(:array)))),
      s(:def, :end_accepting,
        s(:args),
        s(:send,
          s(:ivar, :@res), :join)),
      s(:def, :accept_block_quote,
        s(:args,
          s(:arg, :block_quote)),
        s(:begin,
          s(:send,
            s(:ivar, :@res), :<<,
            s(:str, "\n<blockquote>")),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :block_quote), :parts), :each),
            s(:args,
              s(:arg, :part)),
            s(:send,
              s(:lvar, :part), :accept,
              s(:self))),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:str, "</blockquote>\n")))),
      s(:def, :accept_paragraph,
        s(:args,
          s(:arg, :paragraph)),
        s(:begin,
          s(:send,
            s(:ivar, :@res), :<<,
            s(:str, "\n<p>")),
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :paragraph), :text,
              s(:ivar, :@hard_break))),
          s(:lvasgn, :text,
            s(:send,
              s(:lvar, :text), :gsub,
              s(:regexp,
                s(:str, "\\r?\\n"),
                s(:regopt)),
              s(:str, " "))),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:send, nil, :wrap,
              s(:send, nil, :to_html,
                s(:lvar, :text)))),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:str, "</p>\n")))),
      s(:def, :accept_verbatim,
        s(:args,
          s(:arg, :verbatim)),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:send,
                s(:lvar, :verbatim), :text), :rstrip)),
          s(:lvasgn, :klass,
            s(:nil)),
          s(:lvasgn, :content,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :verbatim), :ruby?),
                s(:send, nil, :parseable?,
                  s(:lvar, :text))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:lvasgn, :tokens,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RDoc), :RubyLex), :tokenize,
                        s(:lvar, :text),
                        s(:ivar, :@options))),
                    s(:lvasgn, :klass,
                      s(:str, " class=\"ruby\"")),
                    s(:send,
                      s(:const,
                        s(:const, nil, :RDoc), :TokenStream), :to_html,
                      s(:lvar, :tokens))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :RDoc), :RubyLex), :Error)), nil,
                    s(:send,
                      s(:const, nil, :CGI), :escapeHTML,
                      s(:lvar, :text))), nil)),
              s(:send,
                s(:const, nil, :CGI), :escapeHTML,
                s(:lvar, :text)))),
          s(:if,
            s(:send,
              s(:ivar, :@options), :pipe),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:dstr,
                s(:str, "\n<pre><code>"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :CGI), :escapeHTML,
                    s(:lvar, :text))),
                s(:str, "</code></pre>\n"))),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:dstr,
                s(:str, "\n<pre"),
                s(:begin,
                  s(:lvar, :klass)),
                s(:str, ">"),
                s(:begin,
                  s(:lvar, :content)),
                s(:str, "</pre>\n")))))),
      s(:def, :accept_rule,
        s(:args,
          s(:arg, :rule)),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:str, "<hr>\n"))),
      s(:def, :accept_list_start,
        s(:args,
          s(:arg, :list)),
        s(:begin,
          s(:send,
            s(:ivar, :@list), :<<,
            s(:send,
              s(:lvar, :list), :type)),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:send, nil, :html_list_name,
              s(:send,
                s(:lvar, :list), :type),
              s(:true))),
          s(:send,
            s(:ivar, :@in_list_entry), :push,
            s(:false)))),
      s(:def, :accept_list_end,
        s(:args,
          s(:arg, :list)),
        s(:begin,
          s(:send,
            s(:ivar, :@list), :pop),
          s(:if,
            s(:lvasgn, :tag,
              s(:send,
                s(:ivar, :@in_list_entry), :pop)),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:lvar, :tag)), nil),
          s(:send,
            s(:send,
              s(:ivar, :@res), :<<,
              s(:send, nil, :html_list_name,
                s(:send,
                  s(:lvar, :list), :type),
                s(:false))), :<<,
            s(:str, "\n")))),
      s(:def, :accept_list_item_start,
        s(:args,
          s(:arg, :list_item)),
        s(:begin,
          s(:if,
            s(:lvasgn, :tag,
              s(:send,
                s(:ivar, :@in_list_entry), :last)),
            s(:send,
              s(:ivar, :@res), :<<,
              s(:lvar, :tag)), nil),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:send, nil, :list_item_start,
              s(:lvar, :list_item),
              s(:send,
                s(:ivar, :@list), :last))))),
      s(:def, :accept_list_item_end,
        s(:args,
          s(:arg, :list_item)),
        s(:send,
          s(:ivar, :@in_list_entry), :[]=,
          s(:int, -1),
          s(:send, nil, :list_end_for,
            s(:send,
              s(:ivar, :@list), :last)))),
      s(:def, :accept_blank_line,
        s(:args,
          s(:arg, :blank_line)), nil),
      s(:def, :accept_heading,
        s(:args,
          s(:arg, :heading)),
        s(:begin,
          s(:lvasgn, :level,
            s(:send,
              s(:array,
                s(:int, 6),
                s(:send,
                  s(:lvar, :heading), :level)), :min)),
          s(:lvasgn, :label,
            s(:send,
              s(:lvar, :heading), :label,
              s(:ivar, :@code_object))),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:if,
              s(:send,
                s(:ivar, :@options), :output_decoration),
              s(:dstr,
                s(:str, "\n<h"),
                s(:begin,
                  s(:lvar, :level)),
                s(:str, " id=\""),
                s(:begin,
                  s(:lvar, :label)),
                s(:str, "\">")),
              s(:dstr,
                s(:str, "\n<h"),
                s(:begin,
                  s(:lvar, :level)),
                s(:str, ">")))),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:send, nil, :to_html,
              s(:send,
                s(:lvar, :heading), :text))),
          s(:if,
            s(:send,
              s(:ivar, :@options), :pipe), nil,
            s(:begin,
              s(:send,
                s(:ivar, :@res), :<<,
                s(:dstr,
                  s(:str, "<span><a href=\"#"),
                  s(:begin,
                    s(:lvar, :label)),
                  s(:str, "\">&para;</a>"))),
              s(:send,
                s(:ivar, :@res), :<<,
                s(:str, " <a href=\"#top\">&uarr;</a></span>")))),
          s(:send,
            s(:ivar, :@res), :<<,
            s(:dstr,
              s(:str, "</h"),
              s(:begin,
                s(:lvar, :level)),
              s(:str, ">\n"))))),
      s(:def, :accept_raw,
        s(:args,
          s(:arg, :raw)),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:send,
            s(:send,
              s(:lvar, :raw), :parts), :join,
            s(:str, "\n")))),
      s(:def, :convert_string,
        s(:args,
          s(:arg, :text)),
        s(:send,
          s(:const, nil, :CGI), :escapeHTML,
          s(:lvar, :text))),
      s(:def, :gen_url,
        s(:args,
          s(:arg, :url),
          s(:arg, :text)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :scheme),
              s(:lvasgn, :url),
              s(:lvasgn, :id)),
            s(:send, nil, :parse_url,
              s(:lvar, :url))),
          s(:if,
            s(:and,
              s(:send,
                s(:array,
                  s(:str, "http"),
                  s(:str, "https"),
                  s(:str, "link")), :include?,
                s(:lvar, :scheme)),
              s(:send,
                s(:lvar, :url), :=~,
                s(:regexp,
                  s(:str, "\\.(gif|png|jpg|jpeg|bmp)$"),
                  s(:regopt)))),
            s(:dstr,
              s(:str, "<img src=\""),
              s(:begin,
                s(:lvar, :url)),
              s(:str, "\" />")),
            s(:begin,
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :text), :sub,
                  s(:regexp,
                    s(:str, "^"),
                    s(:begin,
                      s(:lvar, :scheme)),
                    s(:str, ":/*"),
                    s(:regopt, :i)),
                  s(:str, ""))),
              s(:lvasgn, :text,
                s(:send,
                  s(:lvar, :text), :sub,
                  s(:regexp,
                    s(:str, "^[*\\^](\\d+)$"),
                    s(:regopt)),
                  s(:str, "\\1"))),
              s(:lvasgn, :link,
                s(:dstr,
                  s(:str, "<a"),
                  s(:begin,
                    s(:lvar, :id)),
                  s(:str, " href=\""),
                  s(:begin,
                    s(:lvar, :url)),
                  s(:str, "\">"),
                  s(:begin,
                    s(:lvar, :text)),
                  s(:str, "</a>"))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\"foot"),
                    s(:regopt)),
                  s(:lvar, :id)),
                s(:lvasgn, :link,
                  s(:dstr,
                    s(:str, "<sup>"),
                    s(:begin,
                      s(:lvar, :link)),
                    s(:str, "</sup>"))), nil),
              s(:lvar, :link))))),
      s(:def, :html_list_name,
        s(:args,
          s(:arg, :list_type),
          s(:arg, :open_tag)),
        s(:begin,
          s(:lvasgn, :tags,
            s(:send,
              s(:const, nil, :LIST_TYPE_TO_HTML), :[],
              s(:lvar, :list_type))),
          s(:if,
            s(:lvar, :tags), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :RDoc), :Error),
              s(:dstr,
                s(:str, "Invalid list type: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :list_type), :inspect))))),
          s(:send,
            s(:lvar, :tags), :[],
            s(:if,
              s(:lvar, :open_tag),
              s(:int, 0),
              s(:int, 1))))),
      s(:def, :init_tags,
        s(:args),
        s(:begin,
          s(:send, nil, :add_tag,
            s(:sym, :BOLD),
            s(:str, "<strong>"),
            s(:str, "</strong>")),
          s(:send, nil, :add_tag,
            s(:sym, :TT),
            s(:str, "<code>"),
            s(:str, "</code>")),
          s(:send, nil, :add_tag,
            s(:sym, :EM),
            s(:str, "<em>"),
            s(:str, "</em>")))),
      s(:def, :list_item_start,
        s(:args,
          s(:arg, :list_item),
          s(:arg, :list_type)),
        s(:case,
          s(:lvar, :list_type),
          s(:when,
            s(:sym, :BULLET),
            s(:sym, :LALPHA),
            s(:sym, :NUMBER),
            s(:sym, :UALPHA),
            s(:str, "<li>")),
          s(:when,
            s(:sym, :LABEL),
            s(:sym, :NOTE),
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send, nil, :Array,
                      s(:send,
                        s(:lvar, :list_item), :label)), :map),
                  s(:args,
                    s(:arg, :label)),
                  s(:dstr,
                    s(:str, "<dt>"),
                    s(:begin,
                      s(:send, nil, :to_html,
                        s(:lvar, :label))),
                    s(:str, "\n"))), :join), :<<,
              s(:str, "<dd>"))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :RDoc), :Error),
            s(:dstr,
              s(:str, "Invalid list type: "),
              s(:begin,
                s(:send,
                  s(:lvar, :list_type), :inspect)))))),
      s(:def, :list_end_for,
        s(:args,
          s(:arg, :list_type)),
        s(:case,
          s(:lvar, :list_type),
          s(:when,
            s(:sym, :BULLET),
            s(:sym, :LALPHA),
            s(:sym, :NUMBER),
            s(:sym, :UALPHA),
            s(:str, "</li>")),
          s(:when,
            s(:sym, :LABEL),
            s(:sym, :NOTE),
            s(:str, "</dd>")),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :RDoc), :Error),
            s(:dstr,
              s(:str, "Invalid list type: "),
              s(:begin,
                s(:send,
                  s(:lvar, :list_type), :inspect)))))),
      s(:def, :parseable?,
        s(:args,
          s(:arg, :text)),
        s(:rescue,
          s(:send, nil, :eval,
            s(:dstr,
              s(:str, "BEGIN {return true}\n"),
              s(:begin,
                s(:lvar, :text)))),
          s(:resbody,
            s(:array,
              s(:const, nil, :SyntaxError)), nil,
            s(:false)), nil)),
      s(:def, :to_html,
        s(:args,
          s(:arg, :item)),
        s(:super,
          s(:send, nil, :convert_flow,
            s(:send,
              s(:ivar, :@am), :flow,
              s(:lvar, :item))))))))
