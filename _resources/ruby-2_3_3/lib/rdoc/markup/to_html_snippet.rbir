s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :ToHtmlSnippet),
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :ToHtml),
  s(:begin,
    s(:send, nil, :attr_reader,
      s(:sym, :character_limit)),
    s(:send, nil, :attr_reader,
      s(:sym, :characters)),
    s(:send, nil, :attr_reader,
      s(:sym, :mask)),
    s(:send, nil, :attr_reader,
      s(:sym, :paragraph_limit)),
    s(:send, nil, :attr_reader,
      s(:sym, :paragraphs)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :options),
        s(:optarg, :characters,
          s(:int, 100)),
        s(:optarg, :paragraphs,
          s(:int, 3)),
        s(:optarg, :markup,
          s(:nil))),
      s(:begin,
        s(:super,
          s(:lvar, :options),
          s(:lvar, :markup)),
        s(:ivasgn, :@character_limit,
          s(:lvar, :characters)),
        s(:ivasgn, :@paragraph_limit,
          s(:lvar, :paragraphs)),
        s(:ivasgn, :@characters,
          s(:int, 0)),
        s(:ivasgn, :@mask,
          s(:int, 0)),
        s(:ivasgn, :@paragraphs,
          s(:int, 0)),
        s(:send,
          s(:ivar, :@markup), :add_special,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :CrossReference), :CROSSREF_REGEXP),
          s(:sym, :CROSSREF)))),
    s(:def, :accept_heading,
      s(:args,
        s(:arg, :heading)),
      s(:begin,
        s(:send,
          s(:ivar, :@res), :<<,
          s(:dstr,
            s(:str, "<p>"),
            s(:begin,
              s(:send, nil, :to_html,
                s(:send,
                  s(:lvar, :heading), :text))),
            s(:str, "\n"))),
        s(:send, nil, :add_paragraph))),
    s(:alias,
      s(:sym, :accept_raw),
      s(:sym, :ignore)),
    s(:alias,
      s(:sym, :accept_rule),
      s(:sym, :ignore)),
    s(:def, :accept_paragraph,
      s(:args,
        s(:arg, :paragraph)),
      s(:begin,
        s(:lvasgn, :para,
          s(:or,
            s(:send,
              s(:ivar, :@in_list_entry), :last),
            s(:str, "<p>"))),
        s(:lvasgn, :text,
          s(:send,
            s(:lvar, :paragraph), :text,
            s(:ivar, :@hard_break))),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:dstr,
            s(:begin,
              s(:lvar, :para)),
            s(:begin,
              s(:send, nil, :wrap,
                s(:send, nil, :to_html,
                  s(:lvar, :text)))),
            s(:str, "\n"))),
        s(:send, nil, :add_paragraph))),
    s(:def, :accept_list_item_end,
      s(:args,
        s(:arg, :list_item)), nil),
    s(:def, :accept_list_item_start,
      s(:args,
        s(:arg, :list_item)),
      s(:send,
        s(:ivar, :@res), :<<,
        s(:send, nil, :list_item_start,
          s(:lvar, :list_item),
          s(:send,
            s(:ivar, :@list), :last)))),
    s(:def, :accept_list_start,
      s(:args,
        s(:arg, :list)),
      s(:begin,
        s(:send,
          s(:ivar, :@list), :<<,
          s(:send,
            s(:lvar, :list), :type)),
        s(:send,
          s(:ivar, :@res), :<<,
          s(:send, nil, :html_list_name,
            s(:send,
              s(:lvar, :list), :type),
            s(:true))),
        s(:send,
          s(:ivar, :@in_list_entry), :push,
          s(:str, "")))),
    s(:def, :accept_verbatim,
      s(:args,
        s(:arg, :verbatim)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@characters), :>=,
            s(:ivar, :@character_limit)),
          s(:send, nil, :throw,
            s(:sym, :done)), nil),
        s(:lvasgn, :input,
          s(:send,
            s(:send,
              s(:lvar, :verbatim), :text), :rstrip)),
        s(:lvasgn, :text,
          s(:send, nil, :truncate,
            s(:lvar, :input))),
        s(:if,
          s(:send,
            s(:lvar, :text), :==,
            s(:lvar, :input)), nil,
          s(:send,
            s(:lvar, :text), :<<,
            s(:str, " ..."))),
        s(:super,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
            s(:lvar, :text))),
        s(:send, nil, :add_paragraph))),
    s(:def, :start_accepting,
      s(:args),
      s(:begin,
        s(:zsuper),
        s(:ivasgn, :@characters,
          s(:int, 0)))),
    s(:def, :handle_special_CROSSREF,
      s(:args,
        s(:arg, :special)),
      s(:send,
        s(:send,
          s(:lvar, :special), :text), :sub,
        s(:regexp,
          s(:str, "\\A\\\\"),
          s(:regopt)),
        s(:str, ""))),
    s(:def, :handle_special_HARD_BREAK,
      s(:args,
        s(:arg, :special)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@characters), :-,
          s(:int, 4)),
        s(:str, "<br>"))),
    s(:def, :list_item_start,
      s(:args,
        s(:arg, :list_item),
        s(:arg, :list_type)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@characters), :>=,
            s(:ivar, :@character_limit)),
          s(:send, nil, :throw,
            s(:sym, :done)), nil),
        s(:case,
          s(:lvar, :list_type),
          s(:when,
            s(:sym, :BULLET),
            s(:sym, :LALPHA),
            s(:sym, :NUMBER),
            s(:sym, :UALPHA),
            s(:str, "<p>")),
          s(:when,
            s(:sym, :LABEL),
            s(:sym, :NOTE),
            s(:begin,
              s(:lvasgn, :labels,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send, nil, :Array,
                        s(:send,
                          s(:lvar, :list_item), :label)), :map),
                    s(:args,
                      s(:arg, :label)),
                    s(:send, nil, :to_html,
                      s(:lvar, :label))), :join,
                  s(:str, ", "))),
              s(:if,
                s(:send,
                  s(:lvar, :labels), :empty?), nil,
                s(:send,
                  s(:lvar, :labels), :<<,
                  s(:str, " &mdash; "))),
              s(:lvasgn, :start,
                s(:dstr,
                  s(:str, "<p>"),
                  s(:begin,
                    s(:lvar, :labels)))),
              s(:op_asgn,
                s(:ivasgn, :@characters), :+,
                s(:int, 1)),
              s(:lvar, :start))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :RDoc), :Error),
            s(:dstr,
              s(:str, "Invalid list type: "),
              s(:begin,
                s(:send,
                  s(:lvar, :list_type), :inspect))))))),
    s(:def, :gen_url,
      s(:args,
        s(:arg, :url),
        s(:arg, :text)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :url), :=~,
            s(:regexp,
              s(:str, "^rdoc-label:([^:]*)(?::(.*))?"),
              s(:regopt))),
          s(:lvasgn, :type,
            s(:str, "link")),
          s(:if,
            s(:send,
              s(:lvar, :url), :=~,
              s(:regexp,
                s(:str, "([A-Za-z]+):(.*)"),
                s(:regopt))),
            s(:lvasgn, :type,
              s(:nth_ref, 1)),
            s(:lvasgn, :type,
              s(:str, "http")))),
        s(:if,
          s(:and,
            s(:begin,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :type), :==,
                    s(:str, "http")),
                  s(:send,
                    s(:lvar, :type), :==,
                    s(:str, "https"))),
                s(:send,
                  s(:lvar, :type), :==,
                  s(:str, "link")))),
            s(:send,
              s(:lvar, :url), :=~,
              s(:regexp,
                s(:str, "\\.(gif|png|jpg|jpeg|bmp)$"),
                s(:regopt)))),
          s(:str, ""),
          s(:send,
            s(:lvar, :text), :sub,
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:lvar, :type)),
              s(:str, ":/*"),
              s(:regopt)),
            s(:str, ""))))),
    s(:def, :html_list_name,
      s(:args,
        s(:arg, :list_type),
        s(:arg, :open_tag)),
      s(:str, "")),
    s(:def, :add_paragraph,
      s(:args),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@paragraphs), :+,
          s(:int, 1)),
        s(:if,
          s(:send,
            s(:ivar, :@paragraphs), :>=,
            s(:ivar, :@paragraph_limit)),
          s(:send, nil, :throw,
            s(:sym, :done)), nil))),
    s(:def, :convert,
      s(:args,
        s(:arg, :content)),
      s(:begin,
        s(:block,
          s(:send, nil, :catch,
            s(:sym, :done)),
          s(:args),
          s(:return,
            s(:zsuper))),
        s(:send, nil, :end_accepting))),
    s(:def, :convert_flow,
      s(:args,
        s(:arg, :flow)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@characters), :>=,
            s(:ivar, :@character_limit)),
          s(:send, nil, :throw,
            s(:sym, :done)), nil),
        s(:lvasgn, :res,
          s(:array)),
        s(:ivasgn, :@mask,
          s(:int, 0)),
        s(:block,
          s(:send,
            s(:lvar, :flow), :each),
          s(:args,
            s(:arg, :item)),
          s(:begin,
            s(:case,
              s(:lvar, :item),
              s(:when,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :AttrChanger),
                s(:begin,
                  s(:send, nil, :off_tags,
                    s(:lvar, :res),
                    s(:lvar, :item)),
                  s(:send, nil, :on_tags,
                    s(:lvar, :res),
                    s(:lvar, :item)))),
              s(:when,
                s(:const, nil, :String),
                s(:begin,
                  s(:lvasgn, :text,
                    s(:send, nil, :convert_string,
                      s(:lvar, :item))),
                  s(:send,
                    s(:lvar, :res), :<<,
                    s(:send, nil, :truncate,
                      s(:lvar, :text))))),
              s(:when,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Special),
                s(:begin,
                  s(:lvasgn, :text,
                    s(:send, nil, :convert_special,
                      s(:lvar, :item))),
                  s(:send,
                    s(:lvar, :res), :<<,
                    s(:send, nil, :truncate,
                      s(:lvar, :text))))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "Unknown flow element: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :item), :inspect))))),
            s(:if,
              s(:send,
                s(:ivar, :@characters), :>=,
                s(:ivar, :@character_limit)),
              s(:begin,
                s(:send, nil, :off_tags,
                  s(:lvar, :res),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :AttrChanger), :new,
                    s(:int, 0),
                    s(:ivar, :@mask))),
                s(:break)), nil))),
        s(:if,
          s(:send,
            s(:ivar, :@characters), :>=,
            s(:ivar, :@character_limit)),
          s(:send,
            s(:lvar, :res), :<<,
            s(:str, " ...")), nil),
        s(:send,
          s(:lvar, :res), :join))),
    s(:def, :on_tags,
      s(:args,
        s(:arg, :res),
        s(:arg, :item)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@mask), :^,
          s(:send,
            s(:lvar, :item), :turn_on)),
        s(:zsuper))),
    s(:def, :off_tags,
      s(:args,
        s(:arg, :res),
        s(:arg, :item)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@mask), :^,
          s(:send,
            s(:lvar, :item), :turn_off)),
        s(:zsuper))),
    s(:def, :truncate,
      s(:args,
        s(:arg, :text)),
      s(:begin,
        s(:lvasgn, :length,
          s(:send,
            s(:lvar, :text), :length)),
        s(:lvasgn, :characters,
          s(:ivar, :@characters)),
        s(:op_asgn,
          s(:ivasgn, :@characters), :+,
          s(:lvar, :length)),
        s(:if,
          s(:send,
            s(:ivar, :@characters), :<,
            s(:ivar, :@character_limit)),
          s(:return,
            s(:lvar, :text)), nil),
        s(:lvasgn, :remaining,
          s(:send,
            s(:ivar, :@character_limit), :-,
            s(:lvar, :characters))),
        s(:send,
          s(:lvar, :text), :=~,
          s(:regexp,
            s(:str, "\\A(.{"),
            s(:begin,
              s(:lvar, :remaining)),
            s(:str, ",}?)(\\s|$)"),
            s(:regopt, :m))),
        s(:nth_ref, 1)))))
