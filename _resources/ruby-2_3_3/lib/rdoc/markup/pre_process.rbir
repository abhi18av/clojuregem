s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :PreProcess), nil,
  s(:begin,
    s(:send, nil, :attr_accessor,
      s(:sym, :options)),
    s(:defs,
      s(:self), :post_process,
      s(:args,
        s(:blockarg, :block)),
      s(:send,
        s(:ivar, :@post_processors), :<<,
        s(:lvar, :block))),
    s(:defs,
      s(:self), :post_processors,
      s(:args),
      s(:ivar, :@post_processors)),
    s(:defs,
      s(:self), :register,
      s(:args,
        s(:arg, :directive),
        s(:blockarg, :block)),
      s(:send,
        s(:ivar, :@registered), :[]=,
        s(:lvar, :directive),
        s(:lvar, :block))),
    s(:defs,
      s(:self), :registered,
      s(:args),
      s(:ivar, :@registered)),
    s(:defs,
      s(:self), :reset,
      s(:args),
      s(:begin,
        s(:ivasgn, :@post_processors,
          s(:array)),
        s(:ivasgn, :@registered,
          s(:hash)))),
    s(:send, nil, :reset),
    s(:def, :initialize,
      s(:args,
        s(:arg, :input_file_name),
        s(:arg, :include_path)),
      s(:begin,
        s(:ivasgn, :@input_file_name,
          s(:lvar, :input_file_name)),
        s(:ivasgn, :@include_path,
          s(:lvar, :include_path)),
        s(:ivasgn, :@options,
          s(:nil)))),
    s(:def, :handle,
      s(:args,
        s(:arg, :text),
        s(:optarg, :code_object,
          s(:nil)),
        s(:blockarg, :block)),
      s(:begin,
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :RDoc), :Comment), :===,
            s(:lvar, :text)),
          s(:begin,
            s(:lvasgn, :comment,
              s(:lvar, :text)),
            s(:lvasgn, :text,
              s(:send,
                s(:lvar, :text), :text))), nil),
        s(:if,
          s(:defined?,
            s(:const, nil, :Encoding)),
          s(:lvasgn, :encoding,
            s(:send,
              s(:lvar, :text), :encoding)), nil),
        s(:block,
          s(:send,
            s(:lvar, :text), :gsub!,
            s(:regexp,
              s(:str, "^([ \\t]*(?:#|/?\\*)?[ \\t]*)(\\\\?):(\\w+):([ \\t]*)(.+)?(\\r?\\n|$)"),
              s(:regopt))),
          s(:args),
          s(:begin,
            s(:if,
              s(:and,
                s(:and,
                  s(:send,
                    s(:nth_ref, 4), :empty?),
                  s(:nth_ref, 5)),
                s(:send,
                  s(:send,
                    s(:nth_ref, 5), :[],
                    s(:int, 0),
                    s(:int, 1)), :==,
                  s(:str, ":"))),
              s(:next,
                s(:back_ref, :$&)), nil),
            s(:if,
              s(:send,
                s(:nth_ref, 2), :empty?), nil,
              s(:next,
                s(:dstr,
                  s(:nth_ref, 1),
                  s(:str, ":"),
                  s(:nth_ref, 3),
                  s(:str, ":"),
                  s(:nth_ref, 4),
                  s(:nth_ref, 5),
                  s(:str, "\n")))),
            s(:if,
              s(:and,
                s(:lvar, :comment),
                s(:send,
                  s(:nth_ref, 3), :==,
                  s(:str, "markup"))),
              s(:begin,
                s(:if,
                  s(:nth_ref, 5), nil,
                  s(:next,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:nth_ref, 1), :strip)),
                      s(:str, "\n")))),
                s(:send,
                  s(:lvar, :comment), :format=,
                  s(:send,
                    s(:nth_ref, 5), :downcase)),
                s(:next,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:nth_ref, 1), :strip)),
                    s(:str, "\n")))), nil),
            s(:send, nil, :handle_directive,
              s(:nth_ref, 1),
              s(:nth_ref, 3),
              s(:nth_ref, 5),
              s(:lvar, :code_object),
              s(:lvar, :encoding),
              s(:block_pass,
                s(:lvar, :block))))),
        s(:if,
          s(:lvar, :comment), nil,
          s(:lvasgn, :comment,
            s(:lvar, :text))),
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:self), :class), :post_processors), :each),
          s(:args,
            s(:arg, :handler)),
          s(:send,
            s(:lvar, :handler), :call,
            s(:lvar, :comment),
            s(:lvar, :code_object))),
        s(:lvar, :text))),
    s(:def, :handle_directive,
      s(:args,
        s(:arg, :prefix),
        s(:arg, :directive),
        s(:arg, :param),
        s(:optarg, :code_object,
          s(:nil)),
        s(:optarg, :encoding,
          s(:nil))),
      s(:begin,
        s(:lvasgn, :blankline,
          s(:dstr,
            s(:begin,
              s(:send,
                s(:lvar, :prefix), :strip)),
            s(:str, "\n"))),
        s(:lvasgn, :directive,
          s(:send,
            s(:lvar, :directive), :downcase)),
        s(:case,
          s(:lvar, :directive),
          s(:when,
            s(:str, "arg"),
            s(:str, "args"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :prefix)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :directive)),
                    s(:str, ": "),
                    s(:begin,
                      s(:lvar, :param)),
                    s(:str, "\n")))),
              s(:send,
                s(:lvar, :code_object), :params=,
                s(:lvar, :param)),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "category"),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Context), :===,
                  s(:lvar, :code_object)),
                s(:begin,
                  s(:lvasgn, :section,
                    s(:send,
                      s(:lvar, :code_object), :add_section,
                      s(:lvar, :param))),
                  s(:send,
                    s(:lvar, :code_object), :temporary_section=,
                    s(:lvar, :section))), nil),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "doc"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:send,
                s(:lvar, :code_object), :document_self=,
                s(:true)),
              s(:send,
                s(:lvar, :code_object), :force_documentation=,
                s(:true)),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "enddoc"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:send,
                s(:lvar, :code_object), :done_documenting=,
                s(:true)),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "include"),
            s(:begin,
              s(:lvasgn, :filename,
                s(:send,
                  s(:send,
                    s(:lvar, :param), :split), :first)),
              s(:send, nil, :include_file,
                s(:lvar, :filename),
                s(:lvar, :prefix),
                s(:lvar, :encoding)))),
          s(:when,
            s(:str, "main"),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@options), :respond_to?,
                  s(:sym, :main_page)),
                s(:send,
                  s(:ivar, :@options), :main_page=,
                  s(:lvar, :param)), nil),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "nodoc"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:send,
                s(:lvar, :code_object), :document_self=,
                s(:nil)),
              s(:send,
                s(:lvar, :code_object), :document_children=,
                s(:send,
                  s(:lvar, :param), :!~,
                  s(:regexp,
                    s(:str, "all"),
                    s(:regopt, :i)))),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "notnew"),
            s(:str, "not_new"),
            s(:str, "not-new"),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :AnyMethod), :===,
                  s(:lvar, :code_object)), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:send,
                s(:lvar, :code_object), :dont_rename_initialize=,
                s(:true)),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "startdoc"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:send,
                s(:lvar, :code_object), :start_doc),
              s(:send,
                s(:lvar, :code_object), :force_documentation=,
                s(:true)),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "stopdoc"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:send,
                s(:lvar, :code_object), :stop_doc),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "title"),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@options), :respond_to?,
                  s(:sym, :default_title=)),
                s(:send,
                  s(:ivar, :@options), :default_title=,
                  s(:lvar, :param)), nil),
              s(:lvar, :blankline))),
          s(:when,
            s(:str, "yield"),
            s(:str, "yields"),
            s(:begin,
              s(:if,
                s(:lvar, :code_object), nil,
                s(:return,
                  s(:lvar, :blankline))),
              s(:if,
                s(:send,
                  s(:lvar, :code_object), :params),
                s(:send,
                  s(:send,
                    s(:lvar, :code_object), :params), :sub!,
                  s(:regexp,
                    s(:str, ",?\\s*&\\w+"),
                    s(:regopt)),
                  s(:str, "")), nil),
              s(:send,
                s(:lvar, :code_object), :block_params=,
                s(:lvar, :param)),
              s(:lvar, :blankline))),
          s(:begin,
            s(:if,
              s(:send, nil, :block_given?),
              s(:lvasgn, :result,
                s(:yield,
                  s(:lvar, :directive),
                  s(:lvar, :param))), nil),
            s(:case,
              s(:lvar, :result),
              s(:when,
                s(:nil),
                s(:begin,
                  s(:if,
                    s(:lvar, :code_object),
                    s(:send,
                      s(:send,
                        s(:lvar, :code_object), :metadata), :[]=,
                      s(:lvar, :directive),
                      s(:lvar, :param)), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :PreProcess), :registered), :include?,
                      s(:lvar, :directive)),
                    s(:begin,
                      s(:lvasgn, :handler,
                        s(:send,
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :RDoc), :Markup), :PreProcess), :registered), :[],
                          s(:lvar, :directive))),
                      s(:if,
                        s(:lvar, :handler),
                        s(:lvasgn, :result,
                          s(:send,
                            s(:lvar, :handler), :call,
                            s(:lvar, :directive),
                            s(:lvar, :param))), nil)),
                    s(:lvasgn, :result,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :prefix)),
                        s(:str, ":"),
                        s(:begin,
                          s(:lvar, :directive)),
                        s(:str, ": "),
                        s(:begin,
                          s(:lvar, :param)),
                        s(:str, "\n")))))),
              s(:when,
                s(:false),
                s(:lvasgn, :result,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :prefix)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :directive)),
                    s(:str, ": "),
                    s(:begin,
                      s(:lvar, :param)),
                    s(:str, "\n")))), nil),
            s(:lvar, :result))))),
    s(:def, :include_file,
      s(:args,
        s(:arg, :name),
        s(:arg, :indent),
        s(:arg, :encoding)),
      s(:begin,
        s(:lvasgn, :full_name,
          s(:send, nil, :find_include_file,
            s(:lvar, :name))),
        s(:if,
          s(:lvar, :full_name), nil,
          s(:begin,
            s(:send, nil, :warn,
              s(:dstr,
                s(:str, "Couldn't find file to include '"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "' from "),
                s(:begin,
                  s(:ivar, :@input_file_name)))),
            s(:return,
              s(:str, "")))),
        s(:lvasgn, :content,
          s(:send,
            s(:const,
              s(:const, nil, :RDoc), :Encoding), :read_file,
            s(:lvar, :full_name),
            s(:lvar, :encoding),
            s(:true))),
        s(:lvasgn, :content,
          s(:send,
            s(:send,
              s(:lvar, :content), :sub,
              s(:regexp,
                s(:str, "\\A# .*coding[=:].*$"),
                s(:regopt)),
              s(:str, "")), :lstrip)),
        s(:if,
          s(:send,
            s(:lvar, :content), :=~,
            s(:regexp,
              s(:str, "^[^#]"),
              s(:regopt))),
          s(:send,
            s(:lvar, :content), :gsub,
            s(:regexp,
              s(:str, "^"),
              s(:regopt)),
            s(:lvar, :indent)),
          s(:send,
            s(:lvar, :content), :gsub,
            s(:regexp,
              s(:str, "^#?"),
              s(:regopt)),
            s(:lvar, :indent))))),
    s(:def, :find_include_file,
      s(:args,
        s(:arg, :name)),
      s(:begin,
        s(:lvasgn, :to_search,
          s(:send,
            s(:array,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:ivar, :@input_file_name))), :concat,
            s(:ivar, :@include_path))),
        s(:block,
          s(:send,
            s(:lvar, :to_search), :each),
          s(:args,
            s(:arg, :dir)),
          s(:begin,
            s(:lvasgn, :full_name,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dir),
                s(:lvar, :name))),
            s(:lvasgn, :stat,
              s(:rescue,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:lvar, :full_name)),
                s(:resbody, nil, nil,
                  s(:next)), nil)),
            s(:if,
              s(:send,
                s(:lvar, :stat), :readable?),
              s(:return,
                s(:lvar, :full_name)), nil))),
        s(:nil)))))
