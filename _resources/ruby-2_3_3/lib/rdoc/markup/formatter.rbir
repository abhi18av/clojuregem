s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markup), :Formatter), nil,
  s(:begin,
    s(:casgn, nil, :InlineTag,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:sym, :bit),
        s(:sym, :on),
        s(:sym, :off))),
    s(:defs,
      s(:self), :gen_relative_url,
      s(:args,
        s(:arg, :path),
        s(:arg, :target)),
      s(:begin,
        s(:lvasgn, :from,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:lvar, :path))),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :to),
            s(:lvasgn, :to_file)),
          s(:send,
            s(:const, nil, :File), :split,
            s(:lvar, :target))),
        s(:lvasgn, :from,
          s(:send,
            s(:lvar, :from), :split,
            s(:str, "/"))),
        s(:lvasgn, :to,
          s(:send,
            s(:lvar, :to), :split,
            s(:str, "/"))),
        s(:send,
          s(:lvar, :from), :delete,
          s(:str, ".")),
        s(:send,
          s(:lvar, :to), :delete,
          s(:str, ".")),
        s(:while,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :from), :size), :>,
                s(:int, 0)),
              s(:send,
                s(:send,
                  s(:lvar, :to), :size), :>,
                s(:int, 0))),
            s(:send,
              s(:send,
                s(:lvar, :from), :[],
                s(:int, 0)), :==,
              s(:send,
                s(:lvar, :to), :[],
                s(:int, 0)))),
          s(:begin,
            s(:send,
              s(:lvar, :from), :shift),
            s(:send,
              s(:lvar, :to), :shift))),
        s(:send,
          s(:lvar, :from), :fill,
          s(:str, "..")),
        s(:send,
          s(:lvar, :from), :concat,
          s(:lvar, :to)),
        s(:send,
          s(:lvar, :from), :<<,
          s(:lvar, :to_file)),
        s(:send,
          s(:const, nil, :File), :join,
          s(:splat,
            s(:lvar, :from))))),
    s(:def, :initialize,
      s(:args,
        s(:arg, :options),
        s(:optarg, :markup,
          s(:nil))),
      s(:begin,
        s(:ivasgn, :@options,
          s(:lvar, :options)),
        s(:ivasgn, :@markup,
          s(:or,
            s(:lvar, :markup),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :new))),
        s(:ivasgn, :@am,
          s(:send,
            s(:ivar, :@markup), :attribute_manager)),
        s(:send,
          s(:ivar, :@am), :add_special,
          s(:regexp,
            s(:str, "<br>"),
            s(:regopt)),
          s(:sym, :HARD_BREAK)),
        s(:ivasgn, :@attributes,
          s(:send,
            s(:ivar, :@am), :attributes)),
        s(:ivasgn, :@attr_tags,
          s(:array)),
        s(:ivasgn, :@in_tt,
          s(:int, 0)),
        s(:ivasgn, :@tt_bit,
          s(:send,
            s(:ivar, :@attributes), :bitmap_for,
            s(:sym, :TT))),
        s(:ivasgn, :@hard_break,
          s(:str, "")),
        s(:ivasgn, :@from_path,
          s(:str, ".")))),
    s(:def, :accept_document,
      s(:args,
        s(:arg, :document)),
      s(:block,
        s(:send,
          s(:send,
            s(:lvar, :document), :parts), :each),
        s(:args,
          s(:arg, :item)),
        s(:case,
          s(:lvar, :item),
          s(:when,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document),
            s(:send, nil, :accept_document,
              s(:lvar, :item))),
          s(:send,
            s(:lvar, :item), :accept,
            s(:self))))),
    s(:def, :add_special_RDOCLINK,
      s(:args),
      s(:send,
        s(:ivar, :@markup), :add_special,
        s(:regexp,
          s(:str, "rdoc-[a-z]+:[^\\s\\]]+"),
          s(:regopt)),
        s(:sym, :RDOCLINK))),
    s(:def, :add_special_TIDYLINK,
      s(:args),
      s(:send,
        s(:ivar, :@markup), :add_special,
        s(:regexp,
          s(:str, "(?:\n"),
          s(:str, "                          \\{.*?\\} |    # multi-word label\n"),
          s(:str, "                          \\b[^\\s{}]+? # single-word label\n"),
          s(:str, "                         )\n"),
          s(:str, "\n"),
          s(:str, "                         \\[\\S+?\\]     # link target\n"),
          s(:str, "                        "),
          s(:regopt, :x)),
        s(:sym, :TIDYLINK))),
    s(:def, :add_tag,
      s(:args,
        s(:arg, :name),
        s(:arg, :start),
        s(:arg, :stop)),
      s(:begin,
        s(:lvasgn, :attr,
          s(:send,
            s(:ivar, :@attributes), :bitmap_for,
            s(:lvar, :name))),
        s(:send,
          s(:ivar, :@attr_tags), :<<,
          s(:send,
            s(:const, nil, :InlineTag), :new,
            s(:lvar, :attr),
            s(:lvar, :start),
            s(:lvar, :stop))))),
    s(:def, :annotate,
      s(:args,
        s(:arg, :tag)),
      s(:lvar, :tag)),
    s(:def, :convert,
      s(:args,
        s(:arg, :content)),
      s(:send,
        s(:ivar, :@markup), :convert,
        s(:lvar, :content),
        s(:self))),
    s(:def, :convert_flow,
      s(:args,
        s(:arg, :flow)),
      s(:begin,
        s(:lvasgn, :res,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :flow), :each),
          s(:args,
            s(:arg, :item)),
          s(:case,
            s(:lvar, :item),
            s(:when,
              s(:const, nil, :String),
              s(:send,
                s(:lvar, :res), :<<,
                s(:send, nil, :convert_string,
                  s(:lvar, :item)))),
            s(:when,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :AttrChanger),
              s(:begin,
                s(:send, nil, :off_tags,
                  s(:lvar, :res),
                  s(:lvar, :item)),
                s(:send, nil, :on_tags,
                  s(:lvar, :res),
                  s(:lvar, :item)))),
            s(:when,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Special),
              s(:send,
                s(:lvar, :res), :<<,
                s(:send, nil, :convert_special,
                  s(:lvar, :item)))),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "Unknown flow element: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :item), :inspect)))))),
        s(:send,
          s(:lvar, :res), :join))),
    s(:def, :convert_special,
      s(:args,
        s(:arg, :special)),
      s(:begin,
        s(:if,
          s(:send, nil, :in_tt?),
          s(:return,
            s(:send,
              s(:lvar, :special), :text)), nil),
        s(:lvasgn, :handled,
          s(:false)),
        s(:block,
          s(:send,
            s(:ivar, :@attributes), :each_name_of,
            s(:send,
              s(:lvar, :special), :type)),
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :method_name,
              s(:dstr,
                s(:str, "handle_special_"),
                s(:begin,
                  s(:lvar, :name)))),
            s(:if,
              s(:send, nil, :respond_to?,
                s(:lvar, :method_name)),
              s(:begin,
                s(:send,
                  s(:lvar, :special), :text=,
                  s(:send, nil, :send,
                    s(:lvar, :method_name),
                    s(:lvar, :special))),
                s(:lvasgn, :handled,
                  s(:true))), nil))),
        s(:if,
          s(:lvar, :handled), nil,
          s(:begin,
            s(:lvasgn, :special_name,
              s(:send,
                s(:ivar, :@attributes), :as_string,
                s(:send,
                  s(:lvar, :special), :type))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :RDoc), :Error),
              s(:dstr,
                s(:str, "Unhandled special "),
                s(:begin,
                  s(:lvar, :special_name)),
                s(:str, ": "),
                s(:begin,
                  s(:lvar, :special)))))),
        s(:send,
          s(:lvar, :special), :text))),
    s(:def, :convert_string,
      s(:args,
        s(:arg, :string)),
      s(:lvar, :string)),
    s(:def, :ignore,
      s(:args,
        s(:restarg, :node)), nil),
    s(:def, :in_tt?,
      s(:args),
      s(:send,
        s(:ivar, :@in_tt), :>,
        s(:int, 0))),
    s(:def, :on_tags,
      s(:args,
        s(:arg, :res),
        s(:arg, :item)),
      s(:begin,
        s(:lvasgn, :attr_mask,
          s(:send,
            s(:lvar, :item), :turn_on)),
        s(:if,
          s(:send,
            s(:lvar, :attr_mask), :zero?),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:ivar, :@attr_tags), :each),
          s(:args,
            s(:arg, :tag)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :attr_mask), :&,
                s(:send,
                  s(:lvar, :tag), :bit)), :!=,
              s(:int, 0)),
            s(:begin,
              s(:send,
                s(:lvar, :res), :<<,
                s(:send, nil, :annotate,
                  s(:send,
                    s(:lvar, :tag), :on))),
              s(:if,
                s(:send, nil, :tt?,
                  s(:lvar, :tag)),
                s(:op_asgn,
                  s(:ivasgn, :@in_tt), :+,
                  s(:int, 1)), nil)), nil)))),
    s(:def, :off_tags,
      s(:args,
        s(:arg, :res),
        s(:arg, :item)),
      s(:begin,
        s(:lvasgn, :attr_mask,
          s(:send,
            s(:lvar, :item), :turn_off)),
        s(:if,
          s(:send,
            s(:lvar, :attr_mask), :zero?),
          s(:return), nil),
        s(:block,
          s(:send,
            s(:ivar, :@attr_tags), :reverse_each),
          s(:args,
            s(:arg, :tag)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :attr_mask), :&,
                s(:send,
                  s(:lvar, :tag), :bit)), :!=,
              s(:int, 0)),
            s(:begin,
              s(:if,
                s(:send, nil, :tt?,
                  s(:lvar, :tag)),
                s(:op_asgn,
                  s(:ivasgn, :@in_tt), :-,
                  s(:int, 1)), nil),
              s(:send,
                s(:lvar, :res), :<<,
                s(:send, nil, :annotate,
                  s(:send,
                    s(:lvar, :tag), :off)))), nil)))),
    s(:def, :parse_url,
      s(:args,
        s(:arg, :url)),
      s(:begin,
        s(:case,
          s(:lvar, :url),
          s(:when,
            s(:regexp,
              s(:str, "^rdoc-label:([^:]*)(?::(.*))?"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :scheme,
                s(:str, "link")),
              s(:lvasgn, :path,
                s(:dstr,
                  s(:str, "#"),
                  s(:begin,
                    s(:nth_ref, 1)))),
              s(:if,
                s(:nth_ref, 2),
                s(:lvasgn, :id,
                  s(:dstr,
                    s(:str, " id=\""),
                    s(:begin,
                      s(:nth_ref, 2)),
                    s(:str, "\""))), nil))),
          s(:when,
            s(:regexp,
              s(:str, "([A-Za-z]+):(.*)"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :scheme,
                s(:send,
                  s(:nth_ref, 1), :downcase)),
              s(:lvasgn, :path,
                s(:nth_ref, 2)))),
          s(:when,
            s(:regexp,
              s(:str, "^#"),
              s(:regopt)), nil),
          s(:begin,
            s(:lvasgn, :scheme,
              s(:str, "http")),
            s(:lvasgn, :path,
              s(:lvar, :url)),
            s(:lvasgn, :url,
              s(:lvar, :url)))),
        s(:if,
          s(:send,
            s(:lvar, :scheme), :==,
            s(:str, "link")),
          s(:lvasgn, :url,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :path), :[],
                  s(:int, 0),
                  s(:int, 1)), :==,
                s(:str, "#")),
              s(:lvar, :path),
              s(:send,
                s(:send,
                  s(:self), :class), :gen_relative_url,
                s(:ivar, :@from_path),
                s(:lvar, :path)))), nil),
        s(:array,
          s(:lvar, :scheme),
          s(:lvar, :url),
          s(:lvar, :id)))),
    s(:def, :tt?,
      s(:args,
        s(:arg, :tag)),
      s(:send,
        s(:send,
          s(:lvar, :tag), :bit), :==,
        s(:ivar, :@tt_bit)))))
