s(:begin,
  s(:send, nil, :require,
    s(:str, "strscan")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :Markup), :Parser), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :RDoc), :Text)),
      s(:casgn, nil, :LIST_TOKENS,
        s(:array,
          s(:sym, :BULLET),
          s(:sym, :LABEL),
          s(:sym, :LALPHA),
          s(:sym, :NOTE),
          s(:sym, :NUMBER),
          s(:sym, :UALPHA))),
      s(:class,
        s(:const, nil, :Error),
        s(:const, nil, :RuntimeError), nil),
      s(:class,
        s(:const, nil, :ParseError),
        s(:const, nil, :Error), nil),
      s(:send, nil, :attr_accessor,
        s(:sym, :debug)),
      s(:send, nil, :attr_reader,
        s(:sym, :tokens)),
      s(:defs,
        s(:self), :parse,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :new)),
          s(:send,
            s(:lvar, :parser), :tokenize,
            s(:lvar, :str)),
          s(:lvasgn, :doc,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send,
            s(:lvar, :parser), :parse,
            s(:lvar, :doc)))),
      s(:defs,
        s(:self), :tokenize,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:lvasgn, :parser,
            s(:send, nil, :new)),
          s(:send,
            s(:lvar, :parser), :tokenize,
            s(:lvar, :str)),
          s(:send,
            s(:lvar, :parser), :tokens))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@binary_input,
            s(:nil)),
          s(:ivasgn, :@current_token,
            s(:nil)),
          s(:ivasgn, :@debug,
            s(:false)),
          s(:ivasgn, :@have_encoding,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding))),
          s(:ivasgn, :@have_byteslice,
            s(:send,
              s(:str, ""), :respond_to?,
              s(:sym, :byteslice))),
          s(:ivasgn, :@input,
            s(:nil)),
          s(:ivasgn, :@input_encoding,
            s(:nil)),
          s(:ivasgn, :@line,
            s(:int, 0)),
          s(:ivasgn, :@line_pos,
            s(:int, 0)),
          s(:ivasgn, :@s,
            s(:nil)),
          s(:ivasgn, :@tokens,
            s(:array)))),
      s(:def, :build_heading,
        s(:args,
          s(:arg, :level)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :type),
              s(:lvasgn, :text)),
            s(:send, nil, :get)),
          s(:lvasgn, :text,
            s(:case,
              s(:lvar, :type),
              s(:when,
                s(:sym, :TEXT),
                s(:begin,
                  s(:send, nil, :skip,
                    s(:sym, :NEWLINE)),
                  s(:lvar, :text))),
              s(:begin,
                s(:send, nil, :unget),
                s(:str, "")))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Heading), :new,
            s(:lvar, :level),
            s(:lvar, :text)))),
      s(:def, :build_list,
        s(:args,
          s(:arg, :margin)),
        s(:begin,
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :list_start),
                  s(:lvar, :margin)))), nil),
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :List), :new)),
          s(:lvasgn, :label,
            s(:nil)),
          s(:until,
            s(:send,
              s(:ivar, :@tokens), :empty?),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data),
                  s(:lvasgn, :column)),
                s(:send, nil, :get)),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:splat,
                    s(:const, nil, :LIST_TOKENS)),
                  s(:begin,
                    s(:if,
                      s(:or,
                        s(:send,
                          s(:lvar, :column), :<,
                          s(:lvar, :margin)),
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:lvar, :list), :type),
                            s(:send,
                              s(:send,
                                s(:lvar, :list), :type), :!=,
                              s(:lvar, :type))))),
                      s(:begin,
                        s(:send, nil, :unget),
                        s(:break)), nil),
                    s(:send,
                      s(:lvar, :list), :type=,
                      s(:lvar, :type)),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :peek_type),
                        s(:lvasgn, :_),
                        s(:lvasgn, :column)),
                      s(:send, nil, :peek_token)),
                    s(:case,
                      s(:lvar, :type),
                      s(:when,
                        s(:sym, :NOTE),
                        s(:sym, :LABEL),
                        s(:begin,
                          s(:if,
                            s(:lvar, :label), nil,
                            s(:lvasgn, :label,
                              s(:array))),
                          s(:if,
                            s(:send,
                              s(:lvar, :peek_type), :==,
                              s(:sym, :NEWLINE)),
                            s(:begin,
                              s(:while,
                                s(:send,
                                  s(:lvar, :peek_type), :==,
                                  s(:sym, :NEWLINE)),
                                s(:begin,
                                  s(:send, nil, :get),
                                  s(:masgn,
                                    s(:mlhs,
                                      s(:lvasgn, :peek_type),
                                      s(:lvasgn, :_),
                                      s(:lvasgn, :column)),
                                    s(:send, nil, :peek_token)))),
                              s(:if,
                                s(:or,
                                  s(:send,
                                    s(:lvar, :peek_type), :nil?),
                                  s(:send,
                                    s(:lvar, :column), :<,
                                    s(:lvar, :margin))),
                                s(:lvasgn, :empty,
                                  s(:true)),
                                s(:if,
                                  s(:send,
                                    s(:lvar, :column), :==,
                                    s(:lvar, :margin)),
                                  s(:case,
                                    s(:lvar, :peek_type),
                                    s(:when,
                                      s(:lvar, :type),
                                      s(:lvasgn, :empty,
                                        s(:sym, :continue))),
                                    s(:when,
                                      s(:splat,
                                        s(:const, nil, :LIST_TOKENS)),
                                      s(:lvasgn, :empty,
                                        s(:true))),
                                    s(:lvasgn, :empty,
                                      s(:false))),
                                  s(:lvasgn, :empty,
                                    s(:false)))),
                              s(:if,
                                s(:lvar, :empty),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :label), :<<,
                                    s(:lvar, :data)),
                                  s(:if,
                                    s(:send,
                                      s(:lvar, :empty), :==,
                                      s(:sym, :continue)),
                                    s(:next), nil),
                                  s(:break)), nil)), nil))),
                      s(:lvasgn, :data,
                        s(:nil))),
                    s(:if,
                      s(:lvar, :label),
                      s(:begin,
                        s(:lvasgn, :data,
                          s(:send,
                            s(:lvar, :label), :<<,
                            s(:lvar, :data))),
                        s(:lvasgn, :label,
                          s(:nil))), nil),
                    s(:lvasgn, :list_item,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                        s(:lvar, :data))),
                    s(:send, nil, :parse,
                      s(:lvar, :list_item),
                      s(:lvar, :column)),
                    s(:send,
                      s(:lvar, :list), :<<,
                      s(:lvar, :list_item)))),
                s(:begin,
                  s(:send, nil, :unget),
                  s(:break))))),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :list_end),
                  s(:lvar, :margin)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :list), :empty?),
            s(:begin,
              s(:if,
                s(:lvar, :label), nil,
                s(:return,
                  s(:nil))),
              s(:if,
                s(:send,
                  s(:array,
                    s(:sym, :LABEL),
                    s(:sym, :NOTE)), :include?,
                  s(:send,
                    s(:lvar, :list), :type)), nil,
                s(:return,
                  s(:nil))),
              s(:lvasgn, :list_item,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                  s(:lvar, :label),
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :RDoc), :Markup), :BlankLine), :new))),
              s(:send,
                s(:lvar, :list), :<<,
                s(:lvar, :list_item))), nil),
          s(:lvar, :list))),
      s(:def, :build_paragraph,
        s(:args,
          s(:arg, :margin)),
        s(:begin,
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :paragraph_start),
                  s(:lvar, :margin)))), nil),
          s(:lvasgn, :paragraph,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new)),
          s(:until,
            s(:send,
              s(:ivar, :@tokens), :empty?),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data),
                  s(:lvasgn, :column)),
                s(:send, nil, :get)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :type), :==,
                    s(:sym, :TEXT)),
                  s(:send,
                    s(:lvar, :column), :==,
                    s(:lvar, :margin))),
                s(:begin,
                  s(:send,
                    s(:lvar, :paragraph), :<<,
                    s(:lvar, :data)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send, nil, :peek_token), :first), :==,
                      s(:sym, :BREAK)),
                    s(:break), nil),
                  s(:if,
                    s(:send, nil, :skip,
                      s(:sym, :NEWLINE)),
                    s(:send,
                      s(:lvar, :data), :<<,
                      s(:str, " ")), nil)),
                s(:begin,
                  s(:send, nil, :unget),
                  s(:break))))),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :paragraph), :parts), :last), :sub!,
            s(:regexp,
              s(:str, " \\z"),
              s(:regopt)),
            s(:str, "")),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :paragraph_end),
                  s(:lvar, :margin)))), nil),
          s(:lvar, :paragraph))),
      s(:def, :build_verbatim,
        s(:args,
          s(:arg, :margin)),
        s(:begin,
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :verbatim_begin),
                  s(:lvar, :margin)))), nil),
          s(:lvasgn, :verbatim,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Verbatim), :new)),
          s(:lvasgn, :min_indent,
            s(:nil)),
          s(:lvasgn, :generate_leading_spaces,
            s(:true)),
          s(:lvasgn, :line,
            s(:str, "")),
          s(:until,
            s(:send,
              s(:ivar, :@tokens), :empty?),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data),
                  s(:lvasgn, :column)),
                s(:send, nil, :get)),
              s(:if,
                s(:send,
                  s(:lvar, :type), :==,
                  s(:sym, :NEWLINE)),
                s(:begin,
                  s(:send,
                    s(:lvar, :line), :<<,
                    s(:lvar, :data)),
                  s(:send,
                    s(:lvar, :verbatim), :<<,
                    s(:lvar, :line)),
                  s(:lvasgn, :line,
                    s(:str, "")),
                  s(:lvasgn, :generate_leading_spaces,
                    s(:true)),
                  s(:next)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :column), :<=,
                  s(:lvar, :margin)),
                s(:begin,
                  s(:send, nil, :unget),
                  s(:break)), nil),
              s(:if,
                s(:lvar, :generate_leading_spaces),
                s(:begin,
                  s(:lvasgn, :indent,
                    s(:send,
                      s(:lvar, :column), :-,
                      s(:lvar, :margin))),
                  s(:send,
                    s(:lvar, :line), :<<,
                    s(:send,
                      s(:str, " "), :*,
                      s(:lvar, :indent))),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :min_indent), :nil?),
                      s(:send,
                        s(:lvar, :indent), :<,
                        s(:lvar, :min_indent))),
                    s(:lvasgn, :min_indent,
                      s(:lvar, :indent)), nil),
                  s(:lvasgn, :generate_leading_spaces,
                    s(:false))), nil),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:sym, :HEADER),
                  s(:begin,
                    s(:send,
                      s(:lvar, :line), :<<,
                      s(:send,
                        s(:str, "="), :*,
                        s(:lvar, :data))),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :_),
                        s(:lvasgn, :_),
                        s(:lvasgn, :peek_column)),
                      s(:send, nil, :peek_token)),
                    s(:or_asgn,
                      s(:lvasgn, :peek_column),
                      s(:send,
                        s(:lvar, :column), :+,
                        s(:lvar, :data))),
                    s(:lvasgn, :indent,
                      s(:send,
                        s(:send,
                          s(:lvar, :peek_column), :-,
                          s(:lvar, :column)), :-,
                        s(:lvar, :data))),
                    s(:send,
                      s(:lvar, :line), :<<,
                      s(:send,
                        s(:str, " "), :*,
                        s(:lvar, :indent))))),
                s(:when,
                  s(:sym, :RULE),
                  s(:begin,
                    s(:lvasgn, :width,
                      s(:send,
                        s(:int, 2), :+,
                        s(:lvar, :data))),
                    s(:send,
                      s(:lvar, :line), :<<,
                      s(:send,
                        s(:str, "-"), :*,
                        s(:lvar, :width))),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :_),
                        s(:lvasgn, :_),
                        s(:lvasgn, :peek_column)),
                      s(:send, nil, :peek_token)),
                    s(:or_asgn,
                      s(:lvasgn, :peek_column),
                      s(:send,
                        s(:lvar, :column), :+,
                        s(:lvar, :width))),
                    s(:lvasgn, :indent,
                      s(:send,
                        s(:send,
                          s(:lvar, :peek_column), :-,
                          s(:lvar, :column)), :-,
                        s(:lvar, :width))),
                    s(:send,
                      s(:lvar, :line), :<<,
                      s(:send,
                        s(:str, " "), :*,
                        s(:lvar, :indent))))),
                s(:when,
                  s(:sym, :BREAK),
                  s(:sym, :TEXT),
                  s(:send,
                    s(:lvar, :line), :<<,
                    s(:lvar, :data))),
                s(:begin,
                  s(:lvasgn, :list_marker,
                    s(:case,
                      s(:lvar, :type),
                      s(:when,
                        s(:sym, :BULLET),
                        s(:lvar, :data)),
                      s(:when,
                        s(:sym, :LABEL),
                        s(:dstr,
                          s(:str, "["),
                          s(:begin,
                            s(:lvar, :data)),
                          s(:str, "]"))),
                      s(:when,
                        s(:sym, :NOTE),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :data)),
                          s(:str, "::"))),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :data)),
                        s(:str, ".")))),
                  s(:send,
                    s(:lvar, :line), :<<,
                    s(:lvar, :list_marker)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :peek_type),
                      s(:lvasgn, :_),
                      s(:lvasgn, :peek_column)),
                    s(:send, nil, :peek_token)),
                  s(:if,
                    s(:send,
                      s(:lvar, :peek_type), :==,
                      s(:sym, :NEWLINE)), nil,
                    s(:begin,
                      s(:or_asgn,
                        s(:lvasgn, :peek_column),
                        s(:send,
                          s(:lvar, :column), :+,
                          s(:send,
                            s(:lvar, :list_marker), :length))),
                      s(:lvasgn, :indent,
                        s(:send,
                          s(:send,
                            s(:lvar, :peek_column), :-,
                            s(:lvar, :column)), :-,
                          s(:send,
                            s(:lvar, :list_marker), :length))),
                      s(:send,
                        s(:lvar, :line), :<<,
                        s(:send,
                          s(:str, " "), :*,
                          s(:lvar, :indent))))))))),
          s(:if,
            s(:send,
              s(:lvar, :line), :empty?), nil,
            s(:send,
              s(:send,
                s(:lvar, :verbatim), :<<,
                s(:lvar, :line)), :<<,
              s(:str, "\n"))),
          s(:if,
            s(:send,
              s(:lvar, :min_indent), :>,
              s(:int, 0)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :verbatim), :parts), :each),
              s(:args,
                s(:arg, :p)),
              s(:if,
                s(:send,
                  s(:lvar, :p), :==,
                  s(:str, "\n")), nil,
                s(:send,
                  s(:lvar, :p), :slice!,
                  s(:int, 0),
                  s(:lvar, :min_indent)))), nil),
          s(:send,
            s(:lvar, :verbatim), :normalize),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :verbatim_end),
                  s(:lvar, :margin)))), nil),
          s(:lvar, :verbatim))),
      s(:def, :char_pos,
        s(:args,
          s(:arg, :byte_offset)),
        s(:if,
          s(:ivar, :@have_byteslice),
          s(:send,
            s(:send,
              s(:ivar, :@input), :byteslice,
              s(:int, 0),
              s(:lvar, :byte_offset)), :length),
          s(:if,
            s(:ivar, :@have_encoding),
            s(:begin,
              s(:lvasgn, :matched,
                s(:send,
                  s(:ivar, :@binary_input), :[],
                  s(:int, 0),
                  s(:lvar, :byte_offset))),
              s(:send,
                s(:lvar, :matched), :force_encoding,
                s(:ivar, :@input_encoding)),
              s(:send,
                s(:lvar, :matched), :length)),
            s(:lvar, :byte_offset)))),
      s(:def, :get,
        s(:args),
        s(:begin,
          s(:ivasgn, :@current_token,
            s(:send,
              s(:ivar, :@tokens), :shift)),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :get),
                  s(:ivar, :@current_token)))), nil),
          s(:ivar, :@current_token))),
      s(:def, :parse,
        s(:args,
          s(:arg, :parent),
          s(:optarg, :indent,
            s(:int, 0))),
        s(:begin,
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :parse_start),
                  s(:lvar, :indent)))), nil),
          s(:until,
            s(:send,
              s(:ivar, :@tokens), :empty?),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :type),
                  s(:lvasgn, :data),
                  s(:lvasgn, :column)),
                s(:send, nil, :get)),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:sym, :BREAK),
                  s(:begin,
                    s(:send,
                      s(:lvar, :parent), :<<,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
                    s(:send, nil, :skip,
                      s(:sym, :NEWLINE),
                      s(:false)),
                    s(:next))),
                s(:when,
                  s(:sym, :NEWLINE),
                  s(:begin,
                    s(:send,
                      s(:lvar, :parent), :<<,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
                    s(:send, nil, :skip,
                      s(:sym, :NEWLINE),
                      s(:false)),
                    s(:next))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :column), :<,
                  s(:lvar, :indent)),
                s(:begin,
                  s(:send, nil, :unget),
                  s(:break)),
                s(:if,
                  s(:send,
                    s(:lvar, :column), :>,
                    s(:lvar, :indent)),
                  s(:begin,
                    s(:send, nil, :unget),
                    s(:send,
                      s(:lvar, :parent), :<<,
                      s(:send, nil, :build_verbatim,
                        s(:lvar, :indent))),
                    s(:next)), nil)),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:sym, :HEADER),
                  s(:send,
                    s(:lvar, :parent), :<<,
                    s(:send, nil, :build_heading,
                      s(:lvar, :data)))),
                s(:when,
                  s(:sym, :RULE),
                  s(:begin,
                    s(:send,
                      s(:lvar, :parent), :<<,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :Rule), :new,
                        s(:lvar, :data))),
                    s(:send, nil, :skip,
                      s(:sym, :NEWLINE)))),
                s(:when,
                  s(:sym, :TEXT),
                  s(:begin,
                    s(:send, nil, :unget),
                    s(:send, nil, :parse_text,
                      s(:lvar, :parent),
                      s(:lvar, :indent)))),
                s(:when,
                  s(:splat,
                    s(:const, nil, :LIST_TOKENS)),
                  s(:begin,
                    s(:send, nil, :unget),
                    s(:send,
                      s(:lvar, :parent), :<<,
                      s(:send, nil, :build_list,
                        s(:lvar, :indent))))),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :type),
                      s(:lvasgn, :data),
                      s(:lvasgn, :column),
                      s(:lvasgn, :line)),
                    s(:ivar, :@current_token)),
                  s(:send, nil, :raise,
                    s(:const, nil, :ParseError),
                    s(:dstr,
                      s(:str, "Unhandled token "),
                      s(:begin,
                        s(:lvar, :type)),
                      s(:str, " ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :data), :inspect)),
                      s(:str, ") at "),
                      s(:begin,
                        s(:lvar, :line)),
                      s(:str, ":"),
                      s(:begin,
                        s(:lvar, :column)))))))),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :parse_end),
                  s(:lvar, :indent)))), nil),
          s(:lvar, :parent))),
      s(:def, :parse_text,
        s(:args,
          s(:arg, :parent),
          s(:arg, :indent)),
        s(:send,
          s(:lvar, :parent), :<<,
          s(:send, nil, :build_paragraph,
            s(:lvar, :indent)))),
      s(:def, :peek_token,
        s(:args),
        s(:begin,
          s(:lvasgn, :token,
            s(:or,
              s(:send,
                s(:ivar, :@tokens), :first),
              s(:array))),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :peek),
                  s(:lvar, :token)))), nil),
          s(:lvar, :token))),
      s(:def, :setup_scanner,
        s(:args,
          s(:arg, :input)),
        s(:begin,
          s(:ivasgn, :@line,
            s(:int, 0)),
          s(:ivasgn, :@line_pos,
            s(:int, 0)),
          s(:ivasgn, :@input,
            s(:send,
              s(:lvar, :input), :dup)),
          s(:if,
            s(:and,
              s(:ivar, :@have_encoding),
              s(:send,
                s(:ivar, :@have_byteslice), :!)),
            s(:begin,
              s(:ivasgn, :@input_encoding,
                s(:send,
                  s(:ivar, :@input), :encoding)),
              s(:ivasgn, :@binary_input,
                s(:send,
                  s(:ivar, :@input), :force_encoding,
                  s(:const,
                    s(:const, nil, :Encoding), :BINARY)))), nil),
          s(:ivasgn, :@s,
            s(:send,
              s(:const, nil, :StringScanner), :new,
              s(:lvar, :input))))),
      s(:def, :skip,
        s(:args,
          s(:arg, :token_type),
          s(:optarg, :error,
            s(:true))),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :type)),
            s(:send, nil, :get)),
          s(:if,
            s(:lvar, :type), nil,
            s(:return)),
          s(:if,
            s(:send,
              s(:lvar, :token_type), :==,
              s(:lvar, :type)),
            s(:return,
              s(:ivar, :@current_token)), nil),
          s(:send, nil, :unget),
          s(:if,
            s(:lvar, :error),
            s(:send, nil, :raise,
              s(:const, nil, :ParseError),
              s(:dstr,
                s(:str, "expected "),
                s(:begin,
                  s(:lvar, :token_type)),
                s(:str, " got "),
                s(:begin,
                  s(:send,
                    s(:ivar, :@current_token), :inspect)))), nil))),
      s(:def, :tokenize,
        s(:args,
          s(:arg, :input)),
        s(:begin,
          s(:send, nil, :setup_scanner,
            s(:lvar, :input)),
          s(:until,
            s(:send,
              s(:ivar, :@s), :eos?),
            s(:begin,
              s(:lvasgn, :pos,
                s(:send,
                  s(:ivar, :@s), :pos)),
              s(:if,
                s(:send,
                  s(:ivar, :@s), :scan,
                  s(:regexp,
                    s(:str, " +"),
                    s(:regopt))),
                s(:next), nil),
              s(:send,
                s(:ivar, :@tokens), :<<,
                s(:case, nil,
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "\\r?\\n"),
                        s(:regopt))),
                    s(:begin,
                      s(:lvasgn, :token,
                        s(:array,
                          s(:sym, :NEWLINE),
                          s(:send,
                            s(:ivar, :@s), :matched),
                          s(:splat,
                            s(:send, nil, :token_pos,
                              s(:lvar, :pos))))),
                      s(:ivasgn, :@line_pos,
                        s(:send, nil, :char_pos,
                          s(:send,
                            s(:ivar, :@s), :pos))),
                      s(:op_asgn,
                        s(:ivasgn, :@line), :+,
                        s(:int, 1)),
                      s(:lvar, :token))),
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "(=+)(\\s*)"),
                        s(:regopt))),
                    s(:begin,
                      s(:lvasgn, :level,
                        s(:send,
                          s(:send,
                            s(:ivar, :@s), :[],
                            s(:int, 1)), :length)),
                      s(:lvasgn, :header,
                        s(:array,
                          s(:sym, :HEADER),
                          s(:lvar, :level),
                          s(:splat,
                            s(:send, nil, :token_pos,
                              s(:lvar, :pos))))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@s), :[],
                            s(:int, 2)), :=~,
                          s(:regexp,
                            s(:str, "^\\r?\\n"),
                            s(:regopt))),
                        s(:begin,
                          s(:op_asgn,
                            s(:send,
                              s(:ivar, :@s), :pos), :-,
                            s(:send,
                              s(:send,
                                s(:ivar, :@s), :[],
                                s(:int, 2)), :length)),
                          s(:lvar, :header)),
                        s(:begin,
                          s(:lvasgn, :pos,
                            s(:send,
                              s(:ivar, :@s), :pos)),
                          s(:send,
                            s(:ivar, :@s), :scan,
                            s(:regexp,
                              s(:str, ".*"),
                              s(:regopt))),
                          s(:send,
                            s(:ivar, :@tokens), :<<,
                            s(:lvar, :header)),
                          s(:array,
                            s(:sym, :TEXT),
                            s(:send,
                              s(:send,
                                s(:ivar, :@s), :matched), :sub,
                              s(:regexp,
                                s(:str, "\\r$"),
                                s(:regopt)),
                              s(:str, "")),
                            s(:splat,
                              s(:send, nil, :token_pos,
                                s(:lvar, :pos)))))))),
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "(-{3,}) *\\r?$"),
                        s(:regopt))),
                    s(:array,
                      s(:sym, :RULE),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@s), :[],
                            s(:int, 1)), :length), :-,
                        s(:int, 2)),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "([*-]) +(\\S)"),
                        s(:regopt))),
                    s(:begin,
                      s(:op_asgn,
                        s(:send,
                          s(:ivar, :@s), :pos), :-,
                        s(:send,
                          s(:send,
                            s(:ivar, :@s), :[],
                            s(:int, 2)), :bytesize)),
                      s(:array,
                        s(:sym, :BULLET),
                        s(:send,
                          s(:ivar, :@s), :[],
                          s(:int, 1)),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos)))))),
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "([a-z]|\\d+)\\. +(\\S)"),
                        s(:regopt, :i))),
                    s(:begin,
                      s(:lvasgn, :list_label,
                        s(:send,
                          s(:ivar, :@s), :[],
                          s(:int, 1))),
                      s(:op_asgn,
                        s(:send,
                          s(:ivar, :@s), :pos), :-,
                        s(:send,
                          s(:send,
                            s(:ivar, :@s), :[],
                            s(:int, 2)), :bytesize)),
                      s(:lvasgn, :list_type,
                        s(:case,
                          s(:lvar, :list_label),
                          s(:when,
                            s(:regexp,
                              s(:str, "[a-z]"),
                              s(:regopt)),
                            s(:sym, :LALPHA)),
                          s(:when,
                            s(:regexp,
                              s(:str, "[A-Z]"),
                              s(:regopt)),
                            s(:sym, :UALPHA)),
                          s(:when,
                            s(:regexp,
                              s(:str, "\\d"),
                              s(:regopt)),
                            s(:sym, :NUMBER)),
                          s(:send, nil, :raise,
                            s(:const, nil, :ParseError),
                            s(:dstr,
                              s(:str, "BUG token "),
                              s(:begin,
                                s(:lvar, :list_label)))))),
                      s(:array,
                        s(:lvar, :list_type),
                        s(:lvar, :list_label),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos)))))),
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "\\[(.*?)\\]( +|\\r?$)"),
                        s(:regopt))),
                    s(:array,
                      s(:sym, :LABEL),
                      s(:send,
                        s(:ivar, :@s), :[],
                        s(:int, 1)),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "(.*?)::( +|\\r?$)"),
                        s(:regopt))),
                    s(:array,
                      s(:sym, :NOTE),
                      s(:send,
                        s(:ivar, :@s), :[],
                        s(:int, 1)),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@s), :scan,
                      s(:regexp,
                        s(:str, "(.*?)(  )?\\r?$"),
                        s(:regopt))),
                    s(:lvasgn, :token,
                      s(:array,
                        s(:sym, :TEXT),
                        s(:send,
                          s(:ivar, :@s), :[],
                          s(:int, 1)),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos))))),
                    s(:if,
                      s(:send,
                        s(:ivar, :@s), :[],
                        s(:int, 2)),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@tokens), :<<,
                          s(:lvar, :token)),
                        s(:array,
                          s(:sym, :BREAK),
                          s(:send,
                            s(:ivar, :@s), :[],
                            s(:int, 2)),
                          s(:splat,
                            s(:send, nil, :token_pos,
                              s(:send,
                                s(:lvar, :pos), :+,
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@s), :[],
                                    s(:int, 1)), :length)))))),
                      s(:lvar, :token))))))),
          s(:self))),
      s(:def, :token_pos,
        s(:args,
          s(:arg, :byte_offset)),
        s(:begin,
          s(:lvasgn, :offset,
            s(:send, nil, :char_pos,
              s(:lvar, :byte_offset))),
          s(:array,
            s(:send,
              s(:lvar, :offset), :-,
              s(:ivar, :@line_pos)),
            s(:ivar, :@line)))),
      s(:def, :unget,
        s(:args),
        s(:begin,
          s(:lvasgn, :token,
            s(:ivar, :@current_token)),
          s(:if,
            s(:ivar, :@debug),
            s(:send, nil, :p,
              s(:hash,
                s(:pair,
                  s(:sym, :unget),
                  s(:lvar, :token)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :token), :==,
              s(:send,
                s(:ivar, :@tokens), :first)),
            s(:send, nil, :raise,
              s(:const, nil, :Error),
              s(:str, "too many #ungets")), nil),
          s(:if,
            s(:lvar, :token),
            s(:send,
              s(:ivar, :@tokens), :unshift,
              s(:lvar, :token)), nil))))))
