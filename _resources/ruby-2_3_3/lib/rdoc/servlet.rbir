s(:begin,
  s(:send, nil, :require,
    s(:str, "rdoc")),
  s(:send, nil, :require,
    s(:str, "time")),
  s(:send, nil, :require,
    s(:str, "json")),
  s(:send, nil, :require,
    s(:str, "webrick")),
  s(:class,
    s(:const,
      s(:const, nil, :RDoc), :Servlet),
    s(:const,
      s(:const,
        s(:const, nil, :WEBrick), :HTTPServlet), :AbstractServlet),
    s(:begin,
      s(:ivasgn, :@server_stores,
        s(:block,
          s(:send,
            s(:const, nil, :Hash), :new),
          s(:args,
            s(:arg, :hash),
            s(:arg, :server)),
          s(:send,
            s(:lvar, :hash), :[]=,
            s(:lvar, :server),
            s(:hash)))),
      s(:ivasgn, :@cache,
        s(:block,
          s(:send,
            s(:const, nil, :Hash), :new),
          s(:args,
            s(:arg, :hash),
            s(:arg, :store)),
          s(:send,
            s(:lvar, :hash), :[]=,
            s(:lvar, :store),
            s(:hash)))),
      s(:send, nil, :attr_reader,
        s(:sym, :asset_dirs)),
      s(:send, nil, :attr_reader,
        s(:sym, :options)),
      s(:defs,
        s(:self), :get_instance,
        s(:args,
          s(:arg, :server),
          s(:restarg, :options)),
        s(:begin,
          s(:lvasgn, :stores,
            s(:send,
              s(:ivar, :@server_stores), :[],
              s(:lvar, :server))),
          s(:send, nil, :new,
            s(:lvar, :server),
            s(:lvar, :stores),
            s(:ivar, :@cache),
            s(:splat,
              s(:lvar, :options))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :server),
          s(:arg, :stores),
          s(:arg, :cache),
          s(:optarg, :mount_path,
            s(:nil)),
          s(:optarg, :extra_doc_dirs,
            s(:array))),
        s(:begin,
          s(:super,
            s(:lvar, :server)),
          s(:ivasgn, :@cache,
            s(:lvar, :cache)),
          s(:ivasgn, :@mount_path,
            s(:lvar, :mount_path)),
          s(:ivasgn, :@extra_doc_dirs,
            s(:lvar, :extra_doc_dirs)),
          s(:ivasgn, :@stores,
            s(:lvar, :stores)),
          s(:ivasgn, :@options,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Options), :new)),
          s(:send,
            s(:ivar, :@options), :op_dir=,
            s(:str, ".")),
          s(:lvasgn, :darkfish_dir,
            s(:nil)),
          s(:block,
            s(:send,
              s(:gvar, :$LOAD_PATH), :each),
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :darkfish_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :path),
                  s(:str, "rdoc/generator/template/darkfish/"))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :darkfish_dir)), nil,
                s(:next)),
              s(:send,
                s(:ivar, :@options), :template_dir=,
                s(:lvar, :darkfish_dir)),
              s(:break))),
          s(:ivasgn, :@asset_dirs,
            s(:hash,
              s(:pair,
                s(:sym, :darkfish),
                s(:lvar, :darkfish_dir)),
              s(:pair,
                s(:sym, :json_index),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:str, "../generator/template/json_index/"),
                  s(:str, "(string)"))))))),
      s(:def, :asset,
        s(:args,
          s(:arg, :generator_name),
          s(:arg, :req),
          s(:arg, :res)),
        s(:begin,
          s(:lvasgn, :asset_dir,
            s(:send,
              s(:ivar, :@asset_dirs), :[],
              s(:lvar, :generator_name))),
          s(:lvasgn, :asset_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :asset_dir),
              s(:send,
                s(:lvar, :req), :path))),
          s(:send, nil, :if_modified_since,
            s(:lvar, :req),
            s(:lvar, :res),
            s(:lvar, :asset_path)),
          s(:send,
            s(:lvar, :res), :body=,
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :asset_path))),
          s(:send,
            s(:lvar, :res), :content_type=,
            s(:case,
              s(:send,
                s(:lvar, :req), :path),
              s(:when,
                s(:regexp,
                  s(:str, "css$"),
                  s(:regopt)),
                s(:str, "text/css")),
              s(:when,
                s(:regexp,
                  s(:str, "js$"),
                  s(:regopt)),
                s(:str, "application/javascript")),
              s(:str, "application/octet-stream"))))),
      s(:def, :do_GET,
        s(:args,
          s(:arg, :req),
          s(:arg, :res)),
        s(:rescue,
          s(:begin,
            s(:if,
              s(:ivar, :@mount_path),
              s(:send,
                s(:send,
                  s(:lvar, :req), :path), :sub!,
                s(:regexp,
                  s(:str, "^"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Regexp), :escape,
                      s(:ivar, :@mount_path))),
                  s(:regopt, :o)),
                s(:str, "")), nil),
            s(:case,
              s(:send,
                s(:lvar, :req), :path),
              s(:when,
                s(:str, "/"),
                s(:send, nil, :root,
                  s(:lvar, :req),
                  s(:lvar, :res))),
              s(:when,
                s(:str, "/rdoc.css"),
                s(:str, "/js/darkfish.js"),
                s(:str, "/js/jquery.js"),
                s(:str, "/js/search.js"),
                s(:regexp,
                  s(:str, "^/images/"),
                  s(:regopt)),
                s(:send, nil, :asset,
                  s(:sym, :darkfish),
                  s(:lvar, :req),
                  s(:lvar, :res))),
              s(:when,
                s(:str, "/js/navigation.js"),
                s(:str, "/js/searcher.js"),
                s(:send, nil, :asset,
                  s(:sym, :json_index),
                  s(:lvar, :req),
                  s(:lvar, :res))),
              s(:when,
                s(:str, "/js/search_index.js"),
                s(:send, nil, :root_search,
                  s(:lvar, :req),
                  s(:lvar, :res))),
              s(:send, nil, :show_documentation,
                s(:lvar, :req),
                s(:lvar, :res)))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :NotFound)),
            s(:lvasgn, :e),
            s(:begin,
              s(:lvasgn, :generator,
                s(:send, nil, :generator_for,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RDoc), :Store), :new))),
              s(:send, nil, :not_found,
                s(:lvar, :generator),
                s(:lvar, :req),
                s(:lvar, :res),
                s(:send,
                  s(:lvar, :e), :message)))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :Status)), nil,
            s(:send, nil, :raise)),
          s(:resbody, nil,
            s(:lvasgn, :e),
            s(:send, nil, :error,
              s(:lvar, :e),
              s(:lvar, :req),
              s(:lvar, :res))), nil)),
      s(:def, :documentation_page,
        s(:args,
          s(:arg, :store),
          s(:arg, :generator),
          s(:arg, :path),
          s(:arg, :req),
          s(:arg, :res)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:send,
                s(:lvar, :path), :sub,
                s(:regexp,
                  s(:str, ".html$"),
                  s(:regopt)),
                s(:str, "")), :gsub,
              s(:str, "/"),
              s(:str, "::"))),
          s(:if,
            s(:lvasgn, :klass,
              s(:send,
                s(:lvar, :store), :find_class_or_module,
                s(:lvar, :name))),
            s(:send,
              s(:lvar, :res), :body=,
              s(:send,
                s(:lvar, :generator), :generate_class,
                s(:lvar, :klass))),
            s(:if,
              s(:lvasgn, :page,
                s(:send,
                  s(:lvar, :store), :find_text_page,
                  s(:send,
                    s(:lvar, :name), :sub,
                    s(:regexp,
                      s(:str, "_([^_]*)$"),
                      s(:regopt)),
                    s(:str, ".\\1")))),
              s(:send,
                s(:lvar, :res), :body=,
                s(:send,
                  s(:lvar, :generator), :generate_page,
                  s(:lvar, :page))),
              s(:send, nil, :not_found,
                s(:lvar, :generator),
                s(:lvar, :req),
                s(:lvar, :res)))))),
      s(:def, :documentation_search,
        s(:args,
          s(:arg, :store),
          s(:arg, :generator),
          s(:arg, :req),
          s(:arg, :res)),
        s(:begin,
          s(:lvasgn, :json_index,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@cache), :[],
                  s(:lvar, :store)), :fetch,
                s(:sym, :json_index)),
              s(:args),
              s(:send,
                s(:send,
                  s(:ivar, :@cache), :[],
                  s(:lvar, :store)), :[]=,
                s(:sym, :json_index),
                s(:send,
                  s(:const, nil, :JSON), :dump,
                  s(:send,
                    s(:send,
                      s(:lvar, :generator), :json_index), :build_index))))),
          s(:send,
            s(:lvar, :res), :content_type=,
            s(:str, "application/javascript")),
          s(:send,
            s(:lvar, :res), :body=,
            s(:dstr,
              s(:str, "var search_data = "),
              s(:begin,
                s(:lvar, :json_index)))))),
      s(:def, :documentation_source,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :source_name),
              s(:lvasgn, :path)),
            s(:send,
              s(:lvar, :path), :split,
              s(:str, "/"),
              s(:int, 3))),
          s(:lvasgn, :store,
            s(:send,
              s(:ivar, :@stores), :[],
              s(:lvar, :source_name))),
          s(:if,
            s(:lvar, :store),
            s(:return,
              s(:lvar, :store),
              s(:lvar, :path)), nil),
          s(:lvasgn, :store,
            s(:send, nil, :store_for,
              s(:lvar, :source_name))),
          s(:send,
            s(:lvar, :store), :load_all),
          s(:send,
            s(:ivar, :@stores), :[]=,
            s(:lvar, :source_name),
            s(:lvar, :store)),
          s(:return,
            s(:lvar, :store),
            s(:lvar, :path)))),
      s(:def, :error,
        s(:args,
          s(:arg, :exception),
          s(:arg, :req),
          s(:arg, :res)),
        s(:begin,
          s(:lvasgn, :backtrace,
            s(:send,
              s(:send,
                s(:lvar, :exception), :backtrace), :join,
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :res), :content_type=,
            s(:str, "text/html")),
          s(:send,
            s(:lvar, :res), :status=,
            s(:int, 500)),
          s(:send,
            s(:lvar, :res), :body=,
            s(:dstr,
              s(:str, "<!DOCTYPE html>\n"),
              s(:str, "<html>\n"),
              s(:str, "<head>\n"),
              s(:str, "<meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\">\n"),
              s(:str, "\n"),
              s(:str, "<title>Error - "),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :html_escape,
                  s(:send,
                    s(:lvar, :exception), :class))),
              s(:str, "</title>\n"),
              s(:str, "\n"),
              s(:str, "<link type=\"text/css\" media=\"screen\" href=\""),
              s(:begin,
                s(:ivar, :@mount_path)),
              s(:str, "/rdoc.css\" rel=\"stylesheet\">\n"),
              s(:str, "</head>\n"),
              s(:str, "<body>\n"),
              s(:str, "<h1>Error</h1>\n"),
              s(:str, "\n"),
              s(:str, "<p>While processing <code>"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :html_escape,
                  s(:send,
                    s(:lvar, :req), :request_uri))),
              s(:str, "</code> the\n"),
              s(:str, "RDoc ("),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :html_escape,
                  s(:const,
                    s(:const, nil, :RDoc), :VERSION))),
              s(:str, ") server has encountered a\n"),
              s(:str, "<code>"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :html_escape,
                  s(:send,
                    s(:lvar, :exception), :class))),
              s(:str, "</code>\n"),
              s(:str, "exception:\n"),
              s(:str, "\n"),
              s(:str, "<pre>"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :html_escape,
                  s(:send,
                    s(:lvar, :exception), :message))),
              s(:str, "</pre>\n"),
              s(:str, "\n"),
              s(:str, "<p>Please report this to the\n"),
              s(:str, "<a href=\"https://github.com/rdoc/rdoc/issues\">RDoc issues tracker</a>.  Please\n"),
              s(:str, "include the RDoc version, the URI above and exception class, message and\n"),
              s(:str, "backtrace.  If you're viewing a gem's documentation, include the gem name and\n"),
              s(:str, "version.  If you're viewing Ruby's documentation, include the version of ruby.\n"),
              s(:str, "\n"),
              s(:str, "<p>Backtrace:\n"),
              s(:str, "\n"),
              s(:str, "<pre>"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :html_escape,
                  s(:lvar, :backtrace))),
              s(:str, "</pre>\n"),
              s(:str, "\n"),
              s(:str, "</body>\n"),
              s(:str, "</html>\n"))))),
      s(:def, :generator_for,
        s(:args,
          s(:arg, :store)),
        s(:begin,
          s(:lvasgn, :generator,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Generator), :Darkfish), :new,
              s(:lvar, :store),
              s(:ivar, :@options))),
          s(:send,
            s(:lvar, :generator), :file_output=,
            s(:false)),
          s(:send,
            s(:lvar, :generator), :asset_rel_path=,
            s(:str, "..")),
          s(:lvasgn, :rdoc,
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :new)),
          s(:send,
            s(:lvar, :rdoc), :store=,
            s(:lvar, :store)),
          s(:send,
            s(:lvar, :rdoc), :generator=,
            s(:lvar, :generator)),
          s(:send,
            s(:lvar, :rdoc), :options=,
            s(:ivar, :@options)),
          s(:send,
            s(:ivar, :@options), :main_page=,
            s(:send,
              s(:lvar, :store), :main)),
          s(:send,
            s(:ivar, :@options), :title=,
            s(:send,
              s(:lvar, :store), :title)),
          s(:lvar, :generator))),
      s(:def, :if_modified_since,
        s(:args,
          s(:arg, :req),
          s(:arg, :res),
          s(:optarg, :path,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :path),
            s(:lvasgn, :last_modified,
              s(:send,
                s(:send,
                  s(:const, nil, :File), :stat,
                  s(:lvar, :path)), :mtime)), nil),
          s(:send,
            s(:lvar, :res), :[]=,
            s(:str, "last-modified"),
            s(:send,
              s(:lvar, :last_modified), :httpdate)),
          s(:if,
            s(:lvasgn, :ims,
              s(:send,
                s(:lvar, :req), :[],
                s(:str, "if-modified-since"))), nil,
            s(:return)),
          s(:lvasgn, :ims,
            s(:send,
              s(:const, nil, :Time), :parse,
              s(:lvar, :ims))),
          s(:if,
            s(:send,
              s(:lvar, :ims), :<,
              s(:lvar, :last_modified)), nil,
            s(:begin,
              s(:send,
                s(:lvar, :res), :body=,
                s(:str, "")),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPStatus), :NotModified)))))),
      s(:def, :installed_docs,
        s(:args),
        s(:begin,
          s(:lvasgn, :extra_counter,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send, nil, :ri_paths), :map),
            s(:args,
              s(:arg, :path),
              s(:arg, :type)),
            s(:begin,
              s(:lvasgn, :store,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :Store), :new,
                  s(:lvar, :path),
                  s(:lvar, :type))),
              s(:lvasgn, :exists,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:send,
                    s(:lvar, :store), :cache_path))),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:sym, :gem),
                  s(:begin,
                    s(:lvasgn, :gem_path,
                      s(:send,
                        s(:lvar, :path), :[],
                        s(:regexp,
                          s(:str, "/([^/]*)/ri$"),
                          s(:regopt)),
                        s(:int, 1))),
                    s(:array,
                      s(:lvar, :gem_path),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :gem_path)),
                        s(:str, "/")),
                      s(:lvar, :exists),
                      s(:lvar, :type),
                      s(:lvar, :path)))),
                s(:when,
                  s(:sym, :system),
                  s(:array,
                    s(:str, "Ruby Documentation"),
                    s(:str, "ruby/"),
                    s(:lvar, :exists),
                    s(:lvar, :type),
                    s(:lvar, :path))),
                s(:when,
                  s(:sym, :site),
                  s(:array,
                    s(:str, "Site Documentation"),
                    s(:str, "site/"),
                    s(:lvar, :exists),
                    s(:lvar, :type),
                    s(:lvar, :path))),
                s(:when,
                  s(:sym, :home),
                  s(:array,
                    s(:str, "Home Documentation"),
                    s(:str, "home/"),
                    s(:lvar, :exists),
                    s(:lvar, :type),
                    s(:lvar, :path))),
                s(:when,
                  s(:sym, :extra),
                  s(:begin,
                    s(:op_asgn,
                      s(:lvasgn, :extra_counter), :+,
                      s(:int, 1)),
                    s(:if,
                      s(:lvar, :exists),
                      s(:send,
                        s(:lvar, :store), :load_cache), nil),
                    s(:lvasgn, :title,
                      s(:or,
                        s(:send,
                          s(:lvar, :store), :title),
                        s(:str, "Extra Documentation"))),
                    s(:array,
                      s(:lvar, :title),
                      s(:dstr,
                        s(:str, "extra-"),
                        s(:begin,
                          s(:lvar, :extra_counter)),
                        s(:str, "/")),
                      s(:lvar, :exists),
                      s(:lvar, :type),
                      s(:lvar, :path)))), nil))))),
      s(:def, :not_found,
        s(:args,
          s(:arg, :generator),
          s(:arg, :req),
          s(:arg, :res),
          s(:optarg, :message,
            s(:nil))),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :message),
            s(:dstr,
              s(:str, "The page <kbd>"),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :ERB), :Util), :h,
                  s(:send,
                    s(:lvar, :req), :path))),
              s(:str, "</kbd> was not found"))),
          s(:send,
            s(:lvar, :res), :body=,
            s(:send,
              s(:lvar, :generator), :generate_servlet_not_found,
              s(:lvar, :message))),
          s(:send,
            s(:lvar, :res), :status=,
            s(:int, 404)))),
      s(:def, :ri_paths,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :RI), :Paths), :each,
          s(:true),
          s(:true),
          s(:true),
          s(:sym, :all),
          s(:splat,
            s(:ivar, :@extra_doc_dirs)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :root,
        s(:args,
          s(:arg, :req),
          s(:arg, :res)),
        s(:begin,
          s(:lvasgn, :generator,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Generator), :Darkfish), :new,
              s(:nil),
              s(:ivar, :@options))),
          s(:send,
            s(:lvar, :res), :body=,
            s(:send,
              s(:lvar, :generator), :generate_servlet_root,
              s(:send, nil, :installed_docs))),
          s(:send,
            s(:lvar, :res), :content_type=,
            s(:str, "text/html")))),
      s(:def, :root_search,
        s(:args,
          s(:arg, :req),
          s(:arg, :res)),
        s(:begin,
          s(:lvasgn, :search_index,
            s(:array)),
          s(:lvasgn, :info,
            s(:array)),
          s(:block,
            s(:send,
              s(:send, nil, :installed_docs), :map),
            s(:args,
              s(:arg, :name),
              s(:arg, :href),
              s(:arg, :exists),
              s(:arg, :type),
              s(:arg, :path)),
            s(:begin,
              s(:if,
                s(:lvar, :exists), nil,
                s(:next)),
              s(:send,
                s(:lvar, :search_index), :<<,
                s(:lvar, :name)),
              s(:case,
                s(:lvar, :type),
                s(:when,
                  s(:sym, :gem),
                  s(:begin,
                    s(:lvasgn, :gemspec,
                      s(:send,
                        s(:lvar, :path), :gsub,
                        s(:regexp,
                          s(:str, "/doc/([^/]*?)/ri$"),
                          s(:regopt)),
                        s(:str, "/specifications/\\1.gemspec"))),
                    s(:lvasgn, :spec,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Specification), :load,
                        s(:lvar, :gemspec))),
                    s(:lvasgn, :path,
                      s(:send,
                        s(:lvar, :spec), :full_name)),
                    s(:lvasgn, :comment,
                      s(:send,
                        s(:lvar, :spec), :summary)))),
                s(:when,
                  s(:sym, :system),
                  s(:begin,
                    s(:lvasgn, :path,
                      s(:str, "ruby")),
                    s(:lvasgn, :comment,
                      s(:str, "Documentation for the Ruby standard library")))),
                s(:when,
                  s(:sym, :site),
                  s(:begin,
                    s(:lvasgn, :path,
                      s(:str, "site")),
                    s(:lvasgn, :comment,
                      s(:str, "Documentation for non-gem libraries")))),
                s(:when,
                  s(:sym, :home),
                  s(:begin,
                    s(:lvasgn, :path,
                      s(:str, "home")),
                    s(:lvasgn, :comment,
                      s(:str, "Documentation from your home directory")))),
                s(:when,
                  s(:sym, :extra),
                  s(:lvasgn, :comment,
                    s(:lvar, :name))), nil),
              s(:send,
                s(:lvar, :info), :<<,
                s(:array,
                  s(:lvar, :name),
                  s(:str, ""),
                  s(:lvar, :path),
                  s(:str, ""),
                  s(:lvar, :comment))))),
          s(:lvasgn, :index,
            s(:hash,
              s(:pair,
                s(:sym, :index),
                s(:hash,
                  s(:pair,
                    s(:sym, :searchIndex),
                    s(:lvar, :search_index)),
                  s(:pair,
                    s(:sym, :longSearchIndex),
                    s(:lvar, :search_index)),
                  s(:pair,
                    s(:sym, :info),
                    s(:lvar, :info)))))),
          s(:send,
            s(:lvar, :res), :body=,
            s(:dstr,
              s(:str, "var search_data = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :JSON), :dump,
                  s(:lvar, :index))),
              s(:str, ";"))),
          s(:send,
            s(:lvar, :res), :content_type=,
            s(:str, "application/javascript")))),
      s(:def, :show_documentation,
        s(:args,
          s(:arg, :req),
          s(:arg, :res)),
        s(:ensure,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :store),
                s(:lvasgn, :path)),
              s(:send, nil, :documentation_source,
                s(:send,
                  s(:lvar, :req), :path))),
            s(:send, nil, :if_modified_since,
              s(:lvar, :req),
              s(:lvar, :res),
              s(:send,
                s(:lvar, :store), :cache_path)),
            s(:lvasgn, :generator,
              s(:send, nil, :generator_for,
                s(:lvar, :store))),
            s(:case,
              s(:lvar, :path),
              s(:when,
                s(:nil),
                s(:str, ""),
                s(:str, "index.html"),
                s(:send,
                  s(:lvar, :res), :body=,
                  s(:send,
                    s(:lvar, :generator), :generate_index))),
              s(:when,
                s(:str, "table_of_contents.html"),
                s(:send,
                  s(:lvar, :res), :body=,
                  s(:send,
                    s(:lvar, :generator), :generate_table_of_contents))),
              s(:when,
                s(:str, "js/search_index.js"),
                s(:send, nil, :documentation_search,
                  s(:lvar, :store),
                  s(:lvar, :generator),
                  s(:lvar, :req),
                  s(:lvar, :res))),
              s(:send, nil, :documentation_page,
                s(:lvar, :store),
                s(:lvar, :generator),
                s(:lvar, :path),
                s(:lvar, :req),
                s(:lvar, :res)))),
          s(:or_asgn,
            s(:send,
              s(:lvar, :res), :content_type),
            s(:str, "text/html")))),
      s(:def, :store_for,
        s(:args,
          s(:arg, :source_name)),
        s(:case,
          s(:lvar, :source_name),
          s(:when,
            s(:str, "home"),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Paths), :home_dir),
              s(:sym, :home))),
          s(:when,
            s(:str, "ruby"),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Paths), :system_dir),
              s(:sym, :system))),
          s(:when,
            s(:str, "site"),
            s(:send,
              s(:const,
                s(:const, nil, :RDoc), :Store), :new,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RI), :Paths), :site_dir),
              s(:sym, :site))),
          s(:when,
            s(:regexp,
              s(:str, "^extra-(\\d+)$"),
              s(:regopt)),
            s(:begin,
              s(:lvasgn, :index,
                s(:send,
                  s(:send,
                    s(:nth_ref, 1), :to_i), :-,
                  s(:int, 1))),
              s(:lvasgn, :ri_dir,
                s(:send,
                  s(:send,
                    s(:send, nil, :installed_docs), :[],
                    s(:lvar, :index)), :[],
                  s(:int, 4))),
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Store), :new,
                s(:lvar, :ri_dir),
                s(:sym, :extra)))),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ri_dir),
                s(:lvasgn, :type)),
              s(:block,
                s(:send,
                  s(:send, nil, :ri_paths), :find),
                s(:args,
                  s(:arg, :dir),
                  s(:arg, :dir_type)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :dir_type), :==,
                      s(:sym, :gem)), nil,
                    s(:next)),
                  s(:send,
                    s(:lvar, :source_name), :==,
                    s(:send,
                      s(:lvar, :dir), :[],
                      s(:regexp,
                        s(:str, "/([^/]*)/ri$"),
                        s(:regopt)),
                      s(:int, 1)))))),
            s(:if,
              s(:lvar, :ri_dir), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPStatus), :NotFound),
                s(:dstr,
                  s(:str, "Could not find gem \""),
                  s(:begin,
                    s(:lvar, :source_name)),
                  s(:str, "\". Are you sure you installed it?")))),
            s(:lvasgn, :store,
              s(:send,
                s(:const,
                  s(:const, nil, :RDoc), :Store), :new,
                s(:lvar, :ri_dir),
                s(:lvar, :type))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:send,
                  s(:lvar, :store), :cache_path)),
              s(:return,
                s(:lvar, :store)), nil),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :WEBrick), :HTTPStatus), :NotFound),
              s(:dstr,
                s(:str, "Could not find documentation for \""),
                s(:begin,
                  s(:lvar, :source_name)),
                s(:str, "\". Please run `gem rdoc --ri gem_name`")))))))))
