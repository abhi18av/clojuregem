s(:begin,
  s(:send, nil, :require,
    s(:str, "abbrev")),
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "readline")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "win32console")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "rdoc")),
  s(:send, nil, :require,
    s(:str, "rdoc/ri/formatter")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :RDoc), :RI), :Driver), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Error),
        s(:const,
          s(:const,
            s(:const, nil, :RDoc), :RI), :Error), nil),
      s(:class,
        s(:const, nil, :NotFoundError),
        s(:const, nil, :Error),
        s(:begin,
          s(:alias,
            s(:sym, :name),
            s(:sym, :message)),
          s(:def, :message,
            s(:args),
            s(:dstr,
              s(:str, "Nothing known about "),
              s(:begin,
                s(:zsuper)))))),
      s(:send, nil, :attr_accessor,
        s(:sym, :show_all)),
      s(:send, nil, :attr_accessor,
        s(:sym, :stores)),
      s(:send, nil, :attr_accessor,
        s(:sym, :use_stdout)),
      s(:defs,
        s(:self), :default_options,
        s(:args),
        s(:begin,
          s(:lvasgn, :options,
            s(:hash)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :interactive),
            s(:false)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :profile),
            s(:false)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :show_all),
            s(:false)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :use_cache),
            s(:true)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :use_stdout),
            s(:send,
              s(:send,
                s(:gvar, :$stdout), :tty?), :!)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :width),
            s(:int, 72)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :use_system),
            s(:true)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :use_site),
            s(:true)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :use_home),
            s(:true)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :use_gems),
            s(:true)),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :extra_doc_dirs),
            s(:array)),
          s(:return,
            s(:lvar, :options)))),
      s(:defs,
        s(:self), :dump,
        s(:args,
          s(:arg, :data_path)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "pp")),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :data_path),
              s(:str, "rb")),
            s(:args,
              s(:arg, :io)),
            s(:send, nil, :pp,
              s(:send,
                s(:const, nil, :Marshal), :load,
                s(:send,
                  s(:lvar, :io), :read)))))),
      s(:defs,
        s(:self), :process_args,
        s(:args,
          s(:arg, :argv)),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :options,
              s(:send, nil, :default_options)),
            s(:lvasgn, :opts,
              s(:block,
                s(:send,
                  s(:const, nil, :OptionParser), :new),
                s(:args,
                  s(:arg, :opt)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :accept,
                      s(:const, nil, :File)),
                    s(:args,
                      s(:arg, :file)),
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:const, nil, :File), :readable?,
                          s(:lvar, :file)),
                        s(:send,
                          s(:send,
                            s(:const, nil, :File), :directory?,
                            s(:lvar, :file)), :!)),
                      s(:lvar, :file))),
                  s(:send,
                    s(:lvar, :opt), :program_name=,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:gvar, :$0))),
                  s(:send,
                    s(:lvar, :opt), :version=,
                    s(:const,
                      s(:const, nil, :RDoc), :VERSION)),
                  s(:send,
                    s(:lvar, :opt), :release=,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :opt), :summary_indent=,
                    s(:send,
                      s(:str, " "), :*,
                      s(:int, 4))),
                  s(:send,
                    s(:lvar, :opt), :banner=,
                    s(:dstr,
                      s(:str, "Usage: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " [options] [names...]\n"),
                      s(:str, "\n"),
                      s(:str, "Where name can be:\n"),
                      s(:str, "\n"),
                      s(:str, "  Class | Module | Module::Class\n"),
                      s(:str, "\n"),
                      s(:str, "  Class::method | Class#method | Class.method | method\n"),
                      s(:str, "\n"),
                      s(:str, "  gem_name: | gem_name:README | gem_name:History\n"),
                      s(:str, "\n"),
                      s(:str, "All class names may be abbreviated to their minimum unambiguous form. If a name\n"),
                      s(:str, "is ambiguous, all valid options will be listed.\n"),
                      s(:str, "\n"),
                      s(:str, "A '.' matches either class or instance methods, while #method\n"),
                      s(:str, "matches only instance and ::method matches only class methods.\n"),
                      s(:str, "\n"),
                      s(:str, "README and other files may be displayed by prefixing them with the gem name\n"),
                      s(:str, "they're contained in.  If the gem name is followed by a ':' all files in the\n"),
                      s(:str, "gem will be shown.  The file name extension may be omitted where it is\n"),
                      s(:str, "unambiguous.\n"),
                      s(:str, "\n"),
                      s(:str, "For example:\n"),
                      s(:str, "\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " Fil\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " File\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " File.new\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " zip\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " rdoc:README\n"),
                      s(:str, "\n"),
                      s(:str, "Note that shell quoting or escaping may be required for method names containing\n"),
                      s(:str, "punctuation:\n"),
                      s(:str, "\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " 'Array.[]'\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " compact\\!\n"),
                      s(:str, "\n"),
                      s(:str, "To see the default directories ri will search, run:\n"),
                      s(:str, "\n"),
                      s(:str, "    "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :opt), :program_name)),
                      s(:str, " --list-doc-dirs\n"),
                      s(:str, "\n"),
                      s(:str, "Specifying the --system, --site, --home, --gems or --doc-dir options will\n"),
                      s(:str, "limit ri to searching only the specified directories.\n"),
                      s(:str, "\n"),
                      s(:str, "ri options may be set in the 'RI' environment variable.\n"),
                      s(:str, "\n"),
                      s(:str, "The ri pager can be set with the 'RI_PAGER' environment variable or the\n"),
                      s(:str, "'PAGER' environment variable.\n"))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:str, "Options:")),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]interactive"),
                      s(:str, "-i"),
                      s(:str, "In interactive mode you can repeatedly"),
                      s(:str, "look up methods with autocomplete.")),
                    s(:args,
                      s(:arg, :interactive)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :interactive),
                      s(:lvar, :interactive))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]all"),
                      s(:str, "-a"),
                      s(:str, "Show all documentation for a class or"),
                      s(:str, "module.")),
                    s(:args,
                      s(:arg, :show_all)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :show_all),
                      s(:lvar, :show_all))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]list"),
                      s(:str, "-l"),
                      s(:str, "List classes ri knows about.")),
                    s(:args,
                      s(:arg, :list)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :list),
                      s(:lvar, :list))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]pager"),
                      s(:str, "Send output directly to stdout,"),
                      s(:str, "rather than to a pager.")),
                    s(:args,
                      s(:arg, :use_pager)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :use_stdout),
                      s(:send,
                        s(:lvar, :use_pager), :!))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "-T"),
                      s(:str, "Synonym for --no-pager")),
                    s(:args),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :use_stdout),
                      s(:true))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--width=WIDTH"),
                      s(:str, "-w"),
                      s(:const,
                        s(:const, nil, :OptionParser), :DecimalInteger),
                      s(:str, "Set the width of the output.")),
                    s(:args,
                      s(:arg, :width)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :width),
                      s(:lvar, :width))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--server [PORT]"),
                      s(:const, nil, :Integer),
                      s(:str, "Run RDoc server on the given port."),
                      s(:str, "The default port is 8214.")),
                    s(:args,
                      s(:arg, :port)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :server),
                      s(:or,
                        s(:lvar, :port),
                        s(:int, 8214)))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:lvasgn, :formatters,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :RDoc), :Markup), :constants), :grep,
                        s(:regexp,
                          s(:str, "^To[A-Z][a-z]+$"),
                          s(:regopt))), :sort)),
                  s(:lvasgn, :formatters,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :formatters), :sort), :map),
                      s(:args,
                        s(:arg, :formatter)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :formatter), :to_s), :sub,
                          s(:str, "To"),
                          s(:str, "")), :downcase))),
                  s(:op_asgn,
                    s(:lvasgn, :formatters), :-,
                    s(:array,
                      s(:str, "html"),
                      s(:str, "label"),
                      s(:str, "test"))),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--format=NAME"),
                      s(:str, "-f"),
                      s(:str, "Uses the selected formatter. The default"),
                      s(:str, "formatter is bs for paged output and ansi"),
                      s(:str, "otherwise. Valid formatters are:"),
                      s(:send,
                        s(:lvar, :formatters), :join,
                        s(:str, " ")),
                      s(:lvar, :formatters)),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :formatter),
                      s(:send,
                        s(:const,
                          s(:const, nil, :RDoc), :Markup), :const_get,
                        s(:dstr,
                          s(:str, "To"),
                          s(:begin,
                            s(:send,
                              s(:lvar, :value), :capitalize)))))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:str, "Data source options:")),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]list-doc-dirs"),
                      s(:str, "List the directories from which ri will"),
                      s(:str, "source documentation on stdout and exit.")),
                    s(:args,
                      s(:arg, :list_doc_dirs)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :list_doc_dirs),
                      s(:lvar, :list_doc_dirs))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--doc-dir=DIRNAME"),
                      s(:str, "-d"),
                      s(:const, nil, :Array),
                      s(:str, "List of directories from which to source"),
                      s(:str, "documentation in addition to the standard"),
                      s(:str, "directories.  May be repeated.")),
                    s(:args,
                      s(:arg, :value)),
                    s(:block,
                      s(:send,
                        s(:lvar, :value), :each),
                      s(:args,
                        s(:arg, :dir)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:const, nil, :File), :directory?,
                            s(:lvar, :dir)), nil,
                          s(:send, nil, :raise,
                            s(:const,
                              s(:const, nil, :OptionParser), :InvalidArgument),
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :dir)),
                              s(:str, " is not a directory")))),
                        s(:send,
                          s(:send,
                            s(:lvar, :options), :[],
                            s(:sym, :extra_doc_dirs)), :<<,
                          s(:send,
                            s(:const, nil, :File), :expand_path,
                            s(:lvar, :dir)))))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--no-standard-docs"),
                      s(:str, "Do not include documentation from"),
                      s(:str, "the Ruby standard library, site_lib,"),
                      s(:str, "installed gems, or ~/.rdoc."),
                      s(:str, "Use with --doc-dir")),
                    s(:args),
                    s(:begin,
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :use_system),
                        s(:false)),
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :use_site),
                        s(:false)),
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :use_gems),
                        s(:false)),
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :use_home),
                        s(:false)))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]system"),
                      s(:str, "Include documentation from Ruby's standard"),
                      s(:str, "library.  Defaults to true.")),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :use_system),
                      s(:lvar, :value))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]site"),
                      s(:str, "Include documentation from libraries"),
                      s(:str, "installed in site_lib."),
                      s(:str, "Defaults to true.")),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :use_site),
                      s(:lvar, :value))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]gems"),
                      s(:str, "Include documentation from RubyGems."),
                      s(:str, "Defaults to true.")),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :use_gems),
                      s(:lvar, :value))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]home"),
                      s(:str, "Include documentation stored in ~/.rdoc."),
                      s(:str, "Defaults to true.")),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :use_home),
                      s(:lvar, :value))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:str, "Debug options:")),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--[no-]profile"),
                      s(:str, "Run with the ruby profiler")),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :profile),
                      s(:lvar, :value))),
                  s(:send,
                    s(:lvar, :opt), :separator,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:lvar, :opt), :on,
                      s(:str, "--dump=CACHE"),
                      s(:const, nil, :File),
                      s(:str, "Dumps data from an ri cache or data file")),
                    s(:args,
                      s(:arg, :value)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :dump_path),
                      s(:lvar, :value)))))),
            s(:lvasgn, :argv,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "RI")), :to_s), :split), :concat,
                s(:lvar, :argv))),
            s(:send,
              s(:lvar, :opts), :parse!,
              s(:lvar, :argv)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :names),
              s(:lvar, :argv)),
            s(:or_asgn,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :use_stdout)),
              s(:send,
                s(:send,
                  s(:gvar, :$stdout), :tty?), :!)),
            s(:or_asgn,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :use_stdout)),
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :interactive))),
            s(:or_asgn,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :width)),
              s(:int, 72)),
            s(:lvar, :options)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :OptionParser), :InvalidArgument),
              s(:const,
                s(:const, nil, :OptionParser), :InvalidOption)),
            s(:lvasgn, :e),
            s(:begin,
              s(:send, nil, :puts,
                s(:lvar, :opts)),
              s(:send, nil, :puts),
              s(:send, nil, :puts,
                s(:lvar, :e)),
              s(:send, nil, :exit,
                s(:int, 1)))), nil)),
      s(:defs,
        s(:self), :run,
        s(:args,
          s(:optarg, :argv,
            s(:const, nil, :ARGV))),
        s(:begin,
          s(:lvasgn, :options,
            s(:send, nil, :process_args,
              s(:lvar, :argv))),
          s(:if,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :dump_path)),
            s(:begin,
              s(:send, nil, :dump,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :dump_path))),
              s(:return)), nil),
          s(:lvasgn, :ri,
            s(:send, nil, :new,
              s(:lvar, :options))),
          s(:send,
            s(:lvar, :ri), :run))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :initial_options,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@paging,
            s(:false)),
          s(:ivasgn, :@classes,
            s(:nil)),
          s(:lvasgn, :options,
            s(:send,
              s(:send,
                s(:send,
                  s(:self), :class), :default_options), :update,
              s(:lvar, :initial_options))),
          s(:ivasgn, :@formatter_klass,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :formatter))),
          s(:if,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :profile)),
            s(:send, nil, :require,
              s(:str, "profile")), nil),
          s(:ivasgn, :@names,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :names))),
          s(:ivasgn, :@list,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :list))),
          s(:ivasgn, :@doc_dirs,
            s(:array)),
          s(:ivasgn, :@stores,
            s(:array)),
          s(:block,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Paths), :each,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :use_system)),
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :use_site)),
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :use_home)),
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :use_gems)),
              s(:splat,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :extra_doc_dirs)))),
            s(:args,
              s(:arg, :path),
              s(:arg, :type)),
            s(:begin,
              s(:send,
                s(:ivar, :@doc_dirs), :<<,
                s(:lvar, :path)),
              s(:lvasgn, :store,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :RI), :Store), :new,
                  s(:lvar, :path),
                  s(:lvar, :type))),
              s(:send,
                s(:lvar, :store), :load_cache),
              s(:send,
                s(:ivar, :@stores), :<<,
                s(:lvar, :store)))),
          s(:ivasgn, :@list_doc_dirs,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :list_doc_dirs))),
          s(:ivasgn, :@interactive,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :interactive))),
          s(:ivasgn, :@server,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :server))),
          s(:ivasgn, :@use_stdout,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :use_stdout))),
          s(:ivasgn, :@show_all,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :show_all))),
          s(:ivasgn, :@jruby_pager_process,
            s(:nil)))),
      s(:def, :add_also_in,
        s(:args,
          s(:arg, :out),
          s(:arg, :also_in)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :also_in), :empty?),
            s(:return), nil),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Rule), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
              s(:str, "Also found in:"))),
          s(:lvasgn, :paths,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Verbatim), :new)),
          s(:block,
            s(:send,
              s(:lvar, :also_in), :each),
            s(:args,
              s(:arg, :store)),
            s(:send,
              s(:send,
                s(:lvar, :paths), :parts), :push,
              s(:send,
                s(:lvar, :store), :friendly_path),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:lvar, :paths)))),
      s(:def, :add_class,
        s(:args,
          s(:arg, :out),
          s(:arg, :name),
          s(:arg, :classes)),
        s(:begin,
          s(:lvasgn, :heading,
            s(:if,
              s(:block,
                s(:send,
                  s(:lvar, :classes), :all?),
                s(:args,
                  s(:arg, :klass)),
                s(:send,
                  s(:lvar, :klass), :module?)),
              s(:lvar, :name),
              s(:begin,
                s(:lvasgn, :superclass,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :classes), :map),
                          s(:args,
                            s(:arg, :klass)),
                          s(:if,
                            s(:send,
                              s(:lvar, :klass), :module?), nil,
                            s(:send,
                              s(:lvar, :klass), :superclass))), :compact), :shift),
                    s(:str, "Object"))),
                s(:if,
                  s(:send,
                    s(:const, nil, :String), :===,
                    s(:lvar, :superclass)), nil,
                  s(:lvasgn, :superclass,
                    s(:send,
                      s(:lvar, :superclass), :full_name))),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, " < "),
                  s(:begin,
                    s(:lvar, :superclass)))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:lvar, :heading))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)))),
      s(:def, :add_from,
        s(:args,
          s(:arg, :out),
          s(:arg, :store)),
        s(:send,
          s(:lvar, :out), :<<,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
            s(:dstr,
              s(:str, "(from "),
              s(:begin,
                s(:send,
                  s(:lvar, :store), :friendly_path)),
              s(:str, ")"))))),
      s(:def, :add_extends,
        s(:args,
          s(:arg, :out),
          s(:arg, :extends)),
        s(:send, nil, :add_extension_modules,
          s(:lvar, :out),
          s(:str, "Extended by"),
          s(:lvar, :extends))),
      s(:def, :add_extension_modules,
        s(:args,
          s(:arg, :out),
          s(:arg, :type),
          s(:arg, :extensions)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :extensions), :empty?),
            s(:return), nil),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Rule), :new,
              s(:int, 1))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:dstr,
                s(:begin,
                  s(:lvar, :type)),
                s(:str, ":")))),
          s(:block,
            s(:send,
              s(:lvar, :extensions), :each),
            s(:args,
              s(:arg, :modules),
              s(:arg, :store)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :modules), :length), :==,
                s(:int, 1)),
              s(:send, nil, :add_extension_modules_single,
                s(:lvar, :out),
                s(:lvar, :store),
                s(:send,
                  s(:lvar, :modules), :first)),
              s(:send, nil, :add_extension_modules_multiple,
                s(:lvar, :out),
                s(:lvar, :store),
                s(:lvar, :modules)))))),
      s(:def, :add_extension_modules_multiple,
        s(:args,
          s(:arg, :out),
          s(:arg, :store),
          s(:arg, :modules)),
        s(:begin,
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
              s(:dstr,
                s(:str, "(from "),
                s(:begin,
                  s(:send,
                    s(:lvar, :store), :friendly_path)),
                s(:str, ")")))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :wout),
              s(:lvasgn, :with)),
            s(:block,
              s(:send,
                s(:lvar, :modules), :partition),
              s(:args,
                s(:arg, :incl)),
              s(:send,
                s(:send,
                  s(:lvar, :incl), :comment), :empty?))),
          s(:if,
            s(:send,
              s(:lvar, :with), :empty?), nil,
            s(:send,
              s(:lvar, :out), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :BlankLine), :new))),
          s(:block,
            s(:send,
              s(:lvar, :with), :each),
            s(:args,
              s(:arg, :incl)),
            s(:begin,
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                  s(:send,
                    s(:lvar, :incl), :name))),
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:lvar, :incl), :comment)))),
          s(:if,
            s(:send,
              s(:lvar, :wout), :empty?), nil,
            s(:begin,
              s(:lvasgn, :verb,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Verbatim), :new)),
              s(:block,
                s(:send,
                  s(:lvar, :wout), :each),
                s(:args,
                  s(:arg, :incl)),
                s(:send,
                  s(:lvar, :verb), :push,
                  s(:send,
                    s(:lvar, :incl), :name),
                  s(:str, "\n"))),
              s(:send,
                s(:lvar, :out), :<<,
                s(:lvar, :verb)))))),
      s(:def, :add_extension_modules_single,
        s(:args,
          s(:arg, :out),
          s(:arg, :store),
          s(:arg, :include)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:lvar, :include), :name)),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :store), :friendly_path)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
              s(:dstr,
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " (from "),
                s(:begin,
                  s(:lvar, :path)),
                s(:str, ")")))),
          s(:if,
            s(:send,
              s(:lvar, :include), :comment),
            s(:begin,
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
              s(:send,
                s(:lvar, :out), :<<,
                s(:send,
                  s(:lvar, :include), :comment))), nil))),
      s(:def, :add_includes,
        s(:args,
          s(:arg, :out),
          s(:arg, :includes)),
        s(:send, nil, :add_extension_modules,
          s(:lvar, :out),
          s(:str, "Includes"),
          s(:lvar, :includes))),
      s(:def, :add_method,
        s(:args,
          s(:arg, :out),
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :filtered,
            s(:send, nil, :lookup_method,
              s(:lvar, :name))),
          s(:lvasgn, :method_out,
            s(:send, nil, :method_document,
              s(:lvar, :name),
              s(:lvar, :filtered))),
          s(:send,
            s(:lvar, :out), :concat,
            s(:send,
              s(:lvar, :method_out), :parts)))),
      s(:def, :add_method_documentation,
        s(:args,
          s(:arg, :out),
          s(:arg, :klass)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :klass), :method_list), :each),
          s(:args,
            s(:arg, :method)),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :add_method,
                s(:lvar, :out),
                s(:send,
                  s(:lvar, :method), :full_name)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NotFoundError)), nil,
                s(:next)), nil)))),
      s(:def, :add_method_list,
        s(:args,
          s(:arg, :out),
          s(:arg, :methods),
          s(:arg, :name)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :methods), :empty?),
            s(:return), nil),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:dstr,
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ":")))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:if,
            s(:and,
              s(:ivar, :@use_stdout),
              s(:send,
                s(:ivar, :@interactive), :!)),
            s(:send,
              s(:lvar, :out), :concat,
              s(:block,
                s(:send,
                  s(:lvar, :methods), :map),
                s(:args,
                  s(:arg, :method)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
                  s(:lvar, :method)))),
            s(:send,
              s(:lvar, :out), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :IndentedParagraph), :new,
                s(:int, 2),
                s(:send,
                  s(:lvar, :methods), :join,
                  s(:str, ", "))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)))),
      s(:def, :ancestors_of,
        s(:args,
          s(:arg, :klass)),
        s(:begin,
          s(:lvasgn, :ancestors,
            s(:array)),
          s(:lvasgn, :unexamined,
            s(:array,
              s(:lvar, :klass))),
          s(:lvasgn, :seen,
            s(:array)),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :unexamined), :empty?),
                s(:break), nil),
              s(:lvasgn, :current,
                s(:send,
                  s(:lvar, :unexamined), :shift)),
              s(:send,
                s(:lvar, :seen), :<<,
                s(:lvar, :current)),
              s(:lvasgn, :stores,
                s(:send,
                  s(:send, nil, :classes), :[],
                  s(:lvar, :current))),
              s(:if,
                s(:and,
                  s(:lvar, :stores),
                  s(:send,
                    s(:send,
                      s(:lvar, :stores), :empty?), :!)), nil,
                s(:break)),
              s(:lvasgn, :klasses,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :stores), :map),
                      s(:args,
                        s(:arg, :store)),
                      s(:send,
                        s(:send,
                          s(:lvar, :store), :ancestors), :[],
                        s(:lvar, :current))), :flatten), :uniq)),
              s(:lvasgn, :klasses,
                s(:send,
                  s(:lvar, :klasses), :-,
                  s(:lvar, :seen))),
              s(:send,
                s(:lvar, :ancestors), :concat,
                s(:lvar, :klasses)),
              s(:send,
                s(:lvar, :unexamined), :concat,
                s(:lvar, :klasses)))),
          s(:send,
            s(:lvar, :ancestors), :reverse))),
      s(:def, :class_cache,
        s(:args), nil),
      s(:def, :class_document,
        s(:args,
          s(:arg, :name),
          s(:arg, :found),
          s(:arg, :klasses),
          s(:arg, :includes),
          s(:arg, :extends)),
        s(:begin,
          s(:lvasgn, :also_in,
            s(:array)),
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send, nil, :add_class,
            s(:lvar, :out),
            s(:lvar, :name),
            s(:lvar, :klasses)),
          s(:send, nil, :add_includes,
            s(:lvar, :out),
            s(:lvar, :includes)),
          s(:send, nil, :add_extends,
            s(:lvar, :out),
            s(:lvar, :extends)),
          s(:block,
            s(:send,
              s(:lvar, :found), :each),
            s(:args,
              s(:arg, :store),
              s(:arg, :klass)),
            s(:send, nil, :render_class,
              s(:lvar, :out),
              s(:lvar, :store),
              s(:lvar, :klass),
              s(:lvar, :also_in))),
          s(:send, nil, :add_also_in,
            s(:lvar, :out),
            s(:lvar, :also_in)),
          s(:lvar, :out))),
      s(:def, :class_document_comment,
        s(:args,
          s(:arg, :out),
          s(:arg, :comment)),
        s(:if,
          s(:send,
            s(:lvar, :comment), :empty?), nil,
          s(:begin,
            s(:send,
              s(:lvar, :out), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Rule), :new,
                s(:int, 1))),
            s(:if,
              s(:send,
                s(:lvar, :comment), :merged?),
              s(:begin,
                s(:lvasgn, :parts,
                  s(:send,
                    s(:lvar, :comment), :parts)),
                s(:lvasgn, :parts,
                  s(:send,
                    s(:lvar, :parts), :zip,
                    s(:send,
                      s(:array,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :RDoc), :Markup), :BlankLine), :new)), :*,
                      s(:send,
                        s(:lvar, :parts), :length)))),
                s(:send,
                  s(:lvar, :parts), :flatten!),
                s(:send,
                  s(:lvar, :parts), :pop),
                s(:send,
                  s(:lvar, :out), :concat,
                  s(:lvar, :parts))),
              s(:send,
                s(:lvar, :out), :<<,
                s(:lvar, :comment)))))),
      s(:def, :class_document_constants,
        s(:args,
          s(:arg, :out),
          s(:arg, :klass)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :klass), :constants), :empty?),
            s(:return), nil),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:str, "Constants:"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :List), :new,
              s(:sym, :NOTE))),
          s(:lvasgn, :constants,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :klass), :constants), :sort_by),
              s(:args,
                s(:arg, :constant)),
              s(:send,
                s(:lvar, :constant), :name))),
          s(:send,
            s(:send,
              s(:lvar, :list), :items), :concat,
            s(:block,
              s(:send,
                s(:lvar, :constants), :map),
              s(:args,
                s(:arg, :constant)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :constant), :comment),
                  s(:lvasgn, :parts,
                    s(:send,
                      s(:send,
                        s(:lvar, :constant), :comment), :parts)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :parts), :empty?),
                  s(:send,
                    s(:lvar, :parts), :<<,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                      s(:str, "[not documented]"))), nil),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                  s(:send,
                    s(:lvar, :constant), :name),
                  s(:splat,
                    s(:lvar, :parts)))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:lvar, :list)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)))),
      s(:def, :classes,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@classes),
            s(:return,
              s(:ivar, :@classes)), nil),
          s(:ivasgn, :@classes,
            s(:hash)),
          s(:block,
            s(:send,
              s(:ivar, :@stores), :each),
            s(:args,
              s(:arg, :store)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :store), :cache), :[],
                  s(:sym, :modules)), :each),
              s(:args,
                s(:arg, :mod)),
              s(:begin,
                s(:or_asgn,
                  s(:send,
                    s(:ivar, :@classes), :[],
                    s(:lvar, :mod)),
                  s(:array)),
                s(:send,
                  s(:send,
                    s(:ivar, :@classes), :[],
                    s(:lvar, :mod)), :<<,
                  s(:lvar, :store))))),
          s(:ivar, :@classes))),
      s(:def, :classes_and_includes_and_extends_for,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :klasses,
            s(:array)),
          s(:lvasgn, :extends,
            s(:array)),
          s(:lvasgn, :includes,
            s(:array)),
          s(:lvasgn, :found,
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@stores), :map),
                s(:args,
                  s(:arg, :store)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :klass,
                        s(:send,
                          s(:lvar, :store), :load_class,
                          s(:lvar, :name))),
                      s(:send,
                        s(:lvar, :klasses), :<<,
                        s(:lvar, :klass)),
                      s(:if,
                        s(:send,
                          s(:lvar, :klass), :extends),
                        s(:send,
                          s(:lvar, :extends), :<<,
                          s(:array,
                            s(:send,
                              s(:lvar, :klass), :extends),
                            s(:lvar, :store))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :klass), :includes),
                        s(:send,
                          s(:lvar, :includes), :<<,
                          s(:array,
                            s(:send,
                              s(:lvar, :klass), :includes),
                            s(:lvar, :store))), nil),
                      s(:array,
                        s(:lvar, :store),
                        s(:lvar, :klass))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :Store), :MissingFileError)), nil, nil), nil))), :compact)),
          s(:block,
            s(:send,
              s(:lvar, :extends), :reject!),
            s(:args,
              s(:arg, :modules)),
            s(:send,
              s(:lvar, :modules), :empty?)),
          s(:block,
            s(:send,
              s(:lvar, :includes), :reject!),
            s(:args,
              s(:arg, :modules)),
            s(:send,
              s(:lvar, :modules), :empty?)),
          s(:array,
            s(:lvar, :found),
            s(:lvar, :klasses),
            s(:lvar, :includes),
            s(:lvar, :extends)))),
      s(:def, :complete,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :completions,
            s(:array)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :selector),
              s(:lvasgn, :method)),
            s(:send, nil, :parse_name,
              s(:lvar, :name))),
          s(:send, nil, :complete_klass,
            s(:lvar, :name),
            s(:lvar, :klass),
            s(:lvar, :selector),
            s(:lvar, :method),
            s(:lvar, :completions)),
          s(:send, nil, :complete_method,
            s(:lvar, :name),
            s(:lvar, :klass),
            s(:lvar, :selector),
            s(:lvar, :completions)),
          s(:send,
            s(:send,
              s(:lvar, :completions), :sort), :uniq))),
      s(:def, :complete_klass,
        s(:args,
          s(:arg, :name),
          s(:arg, :klass),
          s(:arg, :selector),
          s(:arg, :method),
          s(:arg, :completions)),
        s(:begin,
          s(:lvasgn, :klasses,
            s(:send,
              s(:send, nil, :classes), :keys)),
          s(:lvasgn, :klass_name,
            s(:if,
              s(:lvar, :method),
              s(:lvar, :name),
              s(:lvar, :klass))),
          s(:if,
            s(:send,
              s(:lvar, :name), :!~,
              s(:regexp,
                s(:str, "#|\\."),
                s(:regopt))),
            s(:begin,
              s(:send,
                s(:lvar, :completions), :replace,
                s(:send,
                  s(:lvar, :klasses), :grep,
                  s(:regexp,
                    s(:str, "^"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Regexp), :escape,
                        s(:lvar, :klass_name))),
                    s(:str, "[^:]*$"),
                    s(:regopt)))),
              s(:if,
                s(:send,
                  s(:lvar, :name), :=~,
                  s(:regexp,
                    s(:str, "::$"),
                    s(:regopt))),
                s(:send,
                  s(:lvar, :completions), :concat,
                  s(:send,
                    s(:lvar, :klasses), :grep,
                    s(:regexp,
                      s(:str, "^"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:lvar, :name))),
                      s(:str, "[^:]*$"),
                      s(:regopt)))), nil),
              s(:if,
                s(:send,
                  s(:send, nil, :classes), :key?,
                  s(:lvar, :klass)),
                s(:send,
                  s(:lvar, :completions), :<<,
                  s(:lvar, :klass)), nil)),
            s(:if,
              s(:lvar, :selector),
              s(:if,
                s(:send,
                  s(:send, nil, :classes), :key?,
                  s(:lvar, :klass)),
                s(:send,
                  s(:lvar, :completions), :<<,
                  s(:lvar, :klass)), nil),
              s(:if,
                s(:send,
                  s(:send, nil, :classes), :key?,
                  s(:lvar, :klass_name)),
                s(:send,
                  s(:lvar, :completions), :<<,
                  s(:lvar, :klass_name)), nil))))),
      s(:def, :complete_method,
        s(:args,
          s(:arg, :name),
          s(:arg, :klass),
          s(:arg, :selector),
          s(:arg, :completions)),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :completions), :include?,
              s(:lvar, :klass)),
            s(:send,
              s(:lvar, :name), :=~,
              s(:regexp,
                s(:str, "#|\\.|::"),
                s(:regopt)))),
          s(:begin,
            s(:lvasgn, :methods,
              s(:send, nil, :list_methods_matching,
                s(:lvar, :name))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :methods), :empty?), :!),
              s(:send,
                s(:lvar, :completions), :delete,
                s(:lvar, :klass)),
              s(:if,
                s(:lvar, :selector),
                s(:begin,
                  s(:send,
                    s(:lvar, :completions), :delete,
                    s(:lvar, :klass)),
                  s(:send,
                    s(:lvar, :completions), :<<,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :klass)),
                      s(:begin,
                        s(:lvar, :selector))))), nil)),
            s(:send,
              s(:lvar, :completions), :concat,
              s(:lvar, :methods))), nil)),
      s(:def, :display,
        s(:args,
          s(:arg, :document)),
        s(:block,
          s(:send, nil, :page),
          s(:args,
            s(:arg, :io)),
          s(:begin,
            s(:lvasgn, :text,
              s(:send,
                s(:lvar, :document), :accept,
                s(:send, nil, :formatter,
                  s(:lvar, :io)))),
            s(:send,
              s(:lvar, :io), :write,
              s(:lvar, :text))))),
      s(:def, :display_class,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :name), :=~,
              s(:regexp,
                s(:str, "#|\\."),
                s(:regopt))),
            s(:return), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :found),
              s(:lvasgn, :klasses),
              s(:lvasgn, :includes),
              s(:lvasgn, :extends)),
            s(:send, nil, :classes_and_includes_and_extends_for,
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:lvar, :found), :empty?),
            s(:return), nil),
          s(:lvasgn, :out,
            s(:send, nil, :class_document,
              s(:lvar, :name),
              s(:lvar, :found),
              s(:lvar, :klasses),
              s(:lvar, :includes),
              s(:lvar, :extends))),
          s(:send, nil, :display,
            s(:lvar, :out)))),
      s(:def, :display_method,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send, nil, :add_method,
            s(:lvar, :out),
            s(:lvar, :name)),
          s(:send, nil, :display,
            s(:lvar, :out)))),
      s(:def, :display_name,
        s(:args,
          s(:arg, :name)),
        s(:rescue,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :name), :=~,
                s(:regexp,
                  s(:str, "\\w:(\\w|$)"),
                  s(:regopt))),
              s(:begin,
                s(:send, nil, :display_page,
                  s(:lvar, :name)),
                s(:return,
                  s(:true))), nil),
            s(:if,
              s(:send, nil, :display_class,
                s(:lvar, :name)),
              s(:return,
                s(:true)), nil),
            s(:if,
              s(:send,
                s(:lvar, :name), :=~,
                s(:regexp,
                  s(:str, "::|#|\\."),
                  s(:regopt))),
              s(:send, nil, :display_method,
                s(:lvar, :name)), nil),
            s(:true)),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotFoundError)), nil,
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :name), :=~,
                  s(:regexp,
                    s(:str, "::|#|\\."),
                    s(:regopt))),
                s(:lvasgn, :matches,
                  s(:send, nil, :list_methods_matching,
                    s(:lvar, :name))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :matches), :empty?),
                s(:lvasgn, :matches,
                  s(:send,
                    s(:send,
                      s(:send, nil, :classes), :keys), :grep,
                    s(:regexp,
                      s(:str, "^"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:lvar, :name))),
                      s(:regopt)))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :matches), :empty?),
                s(:send, nil, :raise), nil),
              s(:block,
                s(:send, nil, :page),
                s(:args,
                  s(:arg, :io)),
                s(:begin,
                  s(:send,
                    s(:lvar, :io), :puts,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, " not found, maybe you meant:"))),
                  s(:send,
                    s(:lvar, :io), :puts),
                  s(:send,
                    s(:lvar, :io), :puts,
                    s(:send,
                      s(:send,
                        s(:lvar, :matches), :sort), :join,
                      s(:str, "\n"))))),
              s(:false))), nil)),
      s(:def, :display_names,
        s(:args,
          s(:arg, :names)),
        s(:block,
          s(:send,
            s(:lvar, :names), :each),
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :name,
              s(:send, nil, :expand_name,
                s(:lvar, :name))),
            s(:send, nil, :display_name,
              s(:lvar, :name))))),
      s(:def, :display_page,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :store_name),
              s(:lvasgn, :page_name)),
            s(:send,
              s(:lvar, :name), :split,
              s(:str, ":"),
              s(:int, 2))),
          s(:lvasgn, :store,
            s(:block,
              s(:send,
                s(:ivar, :@stores), :find),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :s), :source), :==,
                s(:lvar, :store_name)))),
          s(:if,
            s(:send,
              s(:lvar, :page_name), :empty?),
            s(:return,
              s(:send, nil, :display_page_list,
                s(:lvar, :store))), nil),
          s(:lvasgn, :pages,
            s(:send,
              s(:send,
                s(:lvar, :store), :cache), :[],
              s(:sym, :pages))),
          s(:if,
            s(:send,
              s(:lvar, :pages), :include?,
              s(:lvar, :page_name)), nil,
            s(:begin,
              s(:lvasgn, :found_names,
                s(:block,
                  s(:send,
                    s(:lvar, :pages), :select),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :n), :=~,
                    s(:regexp,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:lvar, :page_name))),
                      s(:str, "\\.[^.]+$"),
                      s(:regopt))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :found_names), :length), :zero?),
                s(:return,
                  s(:send, nil, :display_page_list,
                    s(:lvar, :store),
                    s(:lvar, :pages))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :found_names), :length), :>,
                    s(:int, 1)),
                  s(:return,
                    s(:send, nil, :display_page_list,
                      s(:lvar, :store),
                      s(:lvar, :found_names),
                      s(:lvar, :page_name))), nil)),
              s(:lvasgn, :page_name,
                s(:send,
                  s(:lvar, :found_names), :first)))),
          s(:lvasgn, :page,
            s(:send,
              s(:lvar, :store), :load_page,
              s(:lvar, :page_name))),
          s(:send, nil, :display,
            s(:send,
              s(:lvar, :page), :comment)))),
      s(:def, :display_page_list,
        s(:args,
          s(:arg, :store),
          s(:optarg, :pages,
            s(:send,
              s(:send,
                s(:lvar, :store), :cache), :[],
              s(:sym, :pages))),
          s(:optarg, :search,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:lvasgn, :title,
            s(:if,
              s(:lvar, :search),
              s(:dstr,
                s(:begin,
                  s(:lvar, :search)),
                s(:str, " pages")),
              s(:str, "Pages"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:dstr,
                s(:begin,
                  s(:lvar, :title)),
                s(:str, " in "),
                s(:begin,
                  s(:send,
                    s(:lvar, :store), :friendly_path))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:lvasgn, :list,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :List), :new,
              s(:sym, :BULLET))),
          s(:block,
            s(:send,
              s(:lvar, :pages), :each),
            s(:args,
              s(:arg, :page)),
            s(:send,
              s(:lvar, :list), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:lvar, :page)))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:lvar, :list)),
          s(:send, nil, :display,
            s(:lvar, :out)))),
      s(:def, :expand_class,
        s(:args,
          s(:arg, :klass)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :klass), :split,
              s(:str, "::")), :inject,
            s(:str, "")),
          s(:args,
            s(:arg, :expanded),
            s(:arg, :klass_part)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :expanded), :empty?), nil,
              s(:send,
                s(:lvar, :expanded), :<<,
                s(:str, "::"))),
            s(:lvasgn, :short,
              s(:send,
                s(:lvar, :expanded), :<<,
                s(:lvar, :klass_part))),
            s(:lvasgn, :subset,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :classes), :keys), :select),
                s(:args,
                  s(:arg, :klass_name)),
                s(:send,
                  s(:lvar, :klass_name), :=~,
                  s(:regexp,
                    s(:str, "^"),
                    s(:begin,
                      s(:lvar, :expanded)),
                    s(:str, "[^:]*$"),
                    s(:regopt))))),
            s(:lvasgn, :abbrevs,
              s(:send,
                s(:const, nil, :Abbrev), :abbrev,
                s(:lvar, :subset))),
            s(:lvasgn, :expanded,
              s(:send,
                s(:lvar, :abbrevs), :[],
                s(:lvar, :short))),
            s(:if,
              s(:lvar, :expanded), nil,
              s(:send, nil, :raise,
                s(:const, nil, :NotFoundError),
                s(:lvar, :short))),
            s(:send,
              s(:lvar, :expanded), :dup)))),
      s(:def, :expand_name,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :selector),
              s(:lvasgn, :method)),
            s(:send, nil, :parse_name,
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:lvar, :klass), :empty?),
            s(:return,
              s(:send,
                s(:array,
                  s(:lvar, :selector),
                  s(:lvar, :method)), :join)), nil),
          s(:send,
            s(:case,
              s(:lvar, :selector),
              s(:when,
                s(:str, ":"),
                s(:array,
                  s(:send, nil, :find_store,
                    s(:lvar, :klass)),
                  s(:lvar, :selector),
                  s(:lvar, :method))),
              s(:array,
                s(:send, nil, :expand_class,
                  s(:lvar, :klass)),
                s(:lvar, :selector),
                s(:lvar, :method))), :join))),
      s(:def, :filter_methods,
        s(:args,
          s(:arg, :found),
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :regexp,
            s(:send, nil, :name_regexp,
              s(:lvar, :name))),
          s(:lvasgn, :filtered,
            s(:block,
              s(:send,
                s(:lvar, :found), :find_all),
              s(:args,
                s(:arg, :store),
                s(:arg, :methods)),
              s(:block,
                s(:send,
                  s(:lvar, :methods), :any?),
                s(:args,
                  s(:arg, :method)),
                s(:send,
                  s(:send,
                    s(:lvar, :method), :full_name), :=~,
                  s(:lvar, :regexp))))),
          s(:if,
            s(:send,
              s(:lvar, :filtered), :empty?), nil,
            s(:return,
              s(:lvar, :filtered))),
          s(:lvar, :found))),
      s(:def, :find_methods,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :selector),
              s(:lvasgn, :method)),
            s(:send, nil, :parse_name,
              s(:lvar, :name))),
          s(:lvasgn, :types,
            s(:send, nil, :method_type,
              s(:lvar, :selector))),
          s(:lvasgn, :klasses,
            s(:nil)),
          s(:lvasgn, :ambiguous,
            s(:send,
              s(:lvar, :klass), :empty?)),
          s(:if,
            s(:lvar, :ambiguous),
            s(:lvasgn, :klasses,
              s(:send,
                s(:send, nil, :classes), :keys)),
            s(:begin,
              s(:lvasgn, :klasses,
                s(:send, nil, :ancestors_of,
                  s(:lvar, :klass))),
              s(:send,
                s(:lvar, :klasses), :unshift,
                s(:lvar, :klass)))),
          s(:lvasgn, :methods,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :klasses), :each),
            s(:args,
              s(:arg, :ancestor)),
            s(:begin,
              s(:lvasgn, :ancestors,
                s(:send,
                  s(:send, nil, :classes), :[],
                  s(:lvar, :ancestor))),
              s(:if,
                s(:lvar, :ancestors), nil,
                s(:next)),
              s(:if,
                s(:lvar, :ambiguous),
                s(:lvasgn, :klass,
                  s(:lvar, :ancestor)), nil),
              s(:block,
                s(:send,
                  s(:lvar, :ancestors), :each),
                s(:args,
                  s(:arg, :store)),
                s(:send,
                  s(:lvar, :methods), :<<,
                  s(:array,
                    s(:lvar, :store),
                    s(:lvar, :klass),
                    s(:lvar, :ancestor),
                    s(:lvar, :types),
                    s(:lvar, :method)))))),
          s(:lvasgn, :methods,
            s(:block,
              s(:send,
                s(:lvar, :methods), :sort_by),
              s(:args,
                s(:arg, :_),
                s(:arg, :k),
                s(:arg, :a),
                s(:arg, :_),
                s(:arg, :m)),
              s(:send,
                s(:array,
                  s(:lvar, :k),
                  s(:lvar, :a),
                  s(:lvar, :m)), :compact))),
          s(:block,
            s(:send,
              s(:lvar, :methods), :each),
            s(:args,
              s(:arg, :item)),
            s(:yield,
              s(:splat,
                s(:lvar, :item)))),
          s(:self))),
      s(:def, :find_pager_jruby,
        s(:args,
          s(:arg, :pager)),
        s(:rescue,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "java")),
            s(:send, nil, :require,
              s(:str, "shellwords")),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send, nil, :java), :lang), :ProcessBuilder), :constants), :include?,
                s(:sym, :Redirect)), nil,
              s(:return,
                s(:nil))),
            s(:lvasgn, :pager,
              s(:send,
                s(:const, nil, :Shellwords), :split,
                s(:lvar, :pager))),
            s(:lvasgn, :pb,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :java), :lang), :ProcessBuilder), :new,
                s(:splat,
                  s(:lvar, :pager)))),
            s(:lvasgn, :pb,
              s(:send,
                s(:lvar, :pb), :redirect_output,
                s(:const,
                  s(:const,
                    s(:send,
                      s(:send,
                        s(:send, nil, :java), :lang), :ProcessBuilder), :Redirect), :INHERIT))),
            s(:ivasgn, :@jruby_pager_process,
              s(:send,
                s(:lvar, :pb), :start)),
            s(:lvasgn, :input,
              s(:send,
                s(:ivar, :@jruby_pager_process), :output_stream)),
            s(:lvasgn, :io,
              s(:send,
                s(:lvar, :input), :to_io)),
            s(:send,
              s(:lvar, :io), :sync=,
              s(:true)),
            s(:lvar, :io)),
          s(:resbody,
            s(:array,
              s(:send,
                s(:send,
                  s(:send, nil, :java), :io), :IOException)), nil,
            s(:false)), nil)),
      s(:def, :find_store,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@stores), :each),
            s(:args,
              s(:arg, :store)),
            s(:begin,
              s(:lvasgn, :source,
                s(:send,
                  s(:lvar, :store), :source)),
              s(:if,
                s(:send,
                  s(:lvar, :source), :==,
                  s(:lvar, :name)),
                s(:return,
                  s(:lvar, :source)), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :store), :type), :==,
                    s(:sym, :gem)),
                  s(:send,
                    s(:lvar, :source), :=~,
                    s(:regexp,
                      s(:str, "^"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:lvar, :name))),
                      s(:str, "-\\d"),
                      s(:regopt)))),
                s(:return,
                  s(:lvar, :source)), nil))),
          s(:send, nil, :raise,
            s(:const,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :RI), :Driver), :NotFoundError),
            s(:lvar, :name)))),
      s(:def, :formatter,
        s(:args,
          s(:arg, :io)),
        s(:if,
          s(:ivar, :@formatter_klass),
          s(:send,
            s(:ivar, :@formatter_klass), :new),
          s(:if,
            s(:or,
              s(:send, nil, :paging?),
              s(:send,
                s(:send,
                  s(:lvar, :io), :tty?), :!)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToBs), :new),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :ToAnsi), :new)))),
      s(:def, :interactive,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:send, nil, :puts,
              s(:str, "\nEnter the method name you want to look up.")),
            s(:if,
              s(:defined?,
                s(:const, nil, :Readline)),
              s(:begin,
                s(:send,
                  s(:const, nil, :Readline), :completion_proc=,
                  s(:send, nil, :method,
                    s(:sym, :complete))),
                s(:send, nil, :puts,
                  s(:str, "You can use tab to autocomplete."))), nil),
            s(:send, nil, :puts,
              s(:str, "Enter a blank line to exit.\n\n")),
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:begin,
                s(:lvasgn, :name,
                  s(:if,
                    s(:defined?,
                      s(:const, nil, :Readline)),
                    s(:send,
                      s(:const, nil, :Readline), :readline,
                      s(:str, ">> ")),
                    s(:begin,
                      s(:send, nil, :print,
                        s(:str, ">> ")),
                      s(:send,
                        s(:gvar, :$stdin), :gets)))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :name), :nil?),
                    s(:send,
                      s(:lvar, :name), :empty?)),
                  s(:return), nil),
                s(:lvasgn, :name,
                  s(:send, nil, :expand_name,
                    s(:send,
                      s(:lvar, :name), :strip))),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :display_name,
                      s(:lvar, :name)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :NotFoundError)),
                      s(:lvasgn, :e),
                      s(:send, nil, :puts,
                        s(:send,
                          s(:lvar, :e), :message))), nil))))),
          s(:resbody,
            s(:array,
              s(:const, nil, :Interrupt)), nil,
            s(:send, nil, :exit)), nil)),
      s(:def, :in_path?,
        s(:args,
          s(:arg, :file)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :file), :=~,
                s(:regexp,
                  s(:str, "\\A/"),
                  s(:regopt))),
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :file))),
            s(:return,
              s(:true)), nil),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "PATH")), :split,
                s(:const,
                  s(:const, nil, :File), :PATH_SEPARATOR)), :any?),
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :path),
                s(:lvar, :file)))))),
      s(:def, :list_known_classes,
        s(:args,
          s(:optarg, :names,
            s(:array))),
        s(:begin,
          s(:lvasgn, :classes,
            s(:array)),
          s(:block,
            s(:send,
              s(:send, nil, :stores), :each),
            s(:args,
              s(:arg, :store)),
            s(:send,
              s(:lvar, :classes), :<<,
              s(:send,
                s(:lvar, :store), :module_names))),
          s(:lvasgn, :classes,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :classes), :flatten), :uniq), :sort)),
          s(:if,
            s(:send,
              s(:lvar, :names), :empty?), nil,
            s(:begin,
              s(:lvasgn, :filter,
                s(:send,
                  s(:const, nil, :Regexp), :union,
                  s(:block,
                    s(:send,
                      s(:lvar, :names), :map),
                    s(:args,
                      s(:arg, :name)),
                    s(:regexp,
                      s(:str, "^"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:regopt))))),
              s(:lvasgn, :classes,
                s(:send,
                  s(:lvar, :classes), :grep,
                  s(:lvar, :filter))))),
          s(:block,
            s(:send, nil, :page),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send, nil, :paging?),
                  s(:send,
                    s(:lvar, :io), :tty?)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :names), :empty?),
                    s(:send,
                      s(:lvar, :io), :puts,
                      s(:str, "Classes and Modules known to ri:")),
                    s(:send,
                      s(:lvar, :io), :puts,
                      s(:dstr,
                        s(:str, "Classes and Modules starting with "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :names), :join,
                            s(:str, ", "))),
                        s(:str, ":")))),
                  s(:send,
                    s(:lvar, :io), :puts)), nil),
              s(:send,
                s(:lvar, :io), :puts,
                s(:send,
                  s(:lvar, :classes), :join,
                  s(:str, "\n"))))))),
      s(:def, :list_methods_matching,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :found,
            s(:array)),
          s(:block,
            s(:send, nil, :find_methods,
              s(:lvar, :name)),
            s(:args,
              s(:arg, :store),
              s(:arg, :klass),
              s(:arg, :ancestor),
              s(:arg, :types),
              s(:arg, :method)),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :types), :==,
                    s(:sym, :instance)),
                  s(:send,
                    s(:lvar, :types), :==,
                    s(:sym, :both))),
                s(:begin,
                  s(:lvasgn, :methods,
                    s(:send,
                      s(:send,
                        s(:lvar, :store), :instance_methods), :[],
                      s(:lvar, :ancestor))),
                  s(:if,
                    s(:lvar, :methods),
                    s(:begin,
                      s(:lvasgn, :matches,
                        s(:send,
                          s(:lvar, :methods), :grep,
                          s(:regexp,
                            s(:str, "^"),
                            s(:begin,
                              s(:send,
                                s(:const, nil, :Regexp), :escape,
                                s(:send,
                                  s(:lvar, :method), :to_s))),
                            s(:regopt)))),
                      s(:lvasgn, :matches,
                        s(:block,
                          s(:send,
                            s(:lvar, :matches), :map),
                          s(:args,
                            s(:arg, :match)),
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :klass)),
                            s(:str, "#"),
                            s(:begin,
                              s(:lvar, :match))))),
                      s(:send,
                        s(:lvar, :found), :concat,
                        s(:lvar, :matches))), nil)), nil),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :types), :==,
                    s(:sym, :class)),
                  s(:send,
                    s(:lvar, :types), :==,
                    s(:sym, :both))),
                s(:begin,
                  s(:lvasgn, :methods,
                    s(:send,
                      s(:send,
                        s(:lvar, :store), :class_methods), :[],
                      s(:lvar, :ancestor))),
                  s(:if,
                    s(:lvar, :methods), nil,
                    s(:next)),
                  s(:lvasgn, :matches,
                    s(:send,
                      s(:lvar, :methods), :grep,
                      s(:regexp,
                        s(:str, "^"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :escape,
                            s(:send,
                              s(:lvar, :method), :to_s))),
                        s(:regopt)))),
                  s(:lvasgn, :matches,
                    s(:block,
                      s(:send,
                        s(:lvar, :matches), :map),
                      s(:args,
                        s(:arg, :match)),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :klass)),
                        s(:str, "::"),
                        s(:begin,
                          s(:lvar, :match))))),
                  s(:send,
                    s(:lvar, :found), :concat,
                    s(:lvar, :matches))), nil))),
          s(:send,
            s(:lvar, :found), :uniq))),
      s(:def, :load_method,
        s(:args,
          s(:arg, :store),
          s(:arg, :cache),
          s(:arg, :klass),
          s(:arg, :type),
          s(:arg, :name)),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :methods,
              s(:send,
                s(:send,
                  s(:lvar, :store), :send,
                  s(:lvar, :cache)), :[],
                s(:lvar, :klass))),
            s(:if,
              s(:lvar, :methods), nil,
              s(:return)),
            s(:lvasgn, :method,
              s(:block,
                s(:send,
                  s(:lvar, :methods), :find),
                s(:args,
                  s(:arg, :method_name)),
                s(:send,
                  s(:lvar, :method_name), :==,
                  s(:lvar, :name)))),
            s(:if,
              s(:lvar, :method), nil,
              s(:return)),
            s(:send,
              s(:lvar, :store), :load_method,
              s(:lvar, :klass),
              s(:dstr,
                s(:begin,
                  s(:lvar, :type)),
                s(:begin,
                  s(:lvar, :method))))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Store), :MissingFileError)),
            s(:lvasgn, :e),
            s(:begin,
              s(:lvasgn, :comment,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RDoc), :Comment), :new,
                    s(:dstr,
                      s(:str, "missing documentation at "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :e), :file)))), :parse)),
              s(:lvasgn, :method,
                s(:send,
                  s(:const,
                    s(:const, nil, :RDoc), :AnyMethod), :new,
                  s(:nil),
                  s(:lvar, :name))),
              s(:send,
                s(:lvar, :method), :comment=,
                s(:lvar, :comment)),
              s(:lvar, :method))), nil)),
      s(:def, :load_methods_matching,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :found,
            s(:array)),
          s(:block,
            s(:send, nil, :find_methods,
              s(:lvar, :name)),
            s(:args,
              s(:arg, :store),
              s(:arg, :klass),
              s(:arg, :ancestor),
              s(:arg, :types),
              s(:arg, :method)),
            s(:begin,
              s(:lvasgn, :methods,
                s(:array)),
              s(:if,
                s(:send,
                  s(:array,
                    s(:sym, :class),
                    s(:sym, :both)), :include?,
                  s(:lvar, :types)),
                s(:send,
                  s(:lvar, :methods), :<<,
                  s(:send, nil, :load_method,
                    s(:lvar, :store),
                    s(:sym, :class_methods),
                    s(:lvar, :ancestor),
                    s(:str, "::"),
                    s(:lvar, :method))), nil),
              s(:if,
                s(:send,
                  s(:array,
                    s(:sym, :instance),
                    s(:sym, :both)), :include?,
                  s(:lvar, :types)),
                s(:send,
                  s(:lvar, :methods), :<<,
                  s(:send, nil, :load_method,
                    s(:lvar, :store),
                    s(:sym, :instance_methods),
                    s(:lvar, :ancestor),
                    s(:str, "#"),
                    s(:lvar, :method))), nil),
              s(:send,
                s(:lvar, :found), :<<,
                s(:array,
                  s(:lvar, :store),
                  s(:send,
                    s(:lvar, :methods), :compact))))),
          s(:block,
            s(:send,
              s(:lvar, :found), :reject),
            s(:args,
              s(:arg, :path),
              s(:arg, :methods)),
            s(:send,
              s(:lvar, :methods), :empty?)))),
      s(:def, :lookup_method,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :found,
            s(:send, nil, :load_methods_matching,
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:lvar, :found), :empty?),
            s(:send, nil, :raise,
              s(:const, nil, :NotFoundError),
              s(:lvar, :name)), nil),
          s(:send, nil, :filter_methods,
            s(:lvar, :found),
            s(:lvar, :name)))),
      s(:def, :method_document,
        s(:args,
          s(:arg, :name),
          s(:arg, :filtered)),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Document), :new)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 1),
              s(:lvar, :name))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:block,
            s(:send,
              s(:lvar, :filtered), :each),
            s(:args,
              s(:arg, :store),
              s(:arg, :methods)),
            s(:block,
              s(:send,
                s(:lvar, :methods), :each),
              s(:args,
                s(:arg, :method)),
              s(:send, nil, :render_method,
                s(:lvar, :out),
                s(:lvar, :store),
                s(:lvar, :method),
                s(:lvar, :name)))),
          s(:lvar, :out))),
      s(:def, :method_type,
        s(:args,
          s(:arg, :selector)),
        s(:case,
          s(:lvar, :selector),
          s(:when,
            s(:str, "."),
            s(:nil),
            s(:sym, :both)),
          s(:when,
            s(:str, "#"),
            s(:sym, :instance)),
          s(:sym, :class))),
      s(:def, :name_regexp,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :klass),
              s(:lvasgn, :type),
              s(:lvasgn, :name)),
            s(:send, nil, :parse_name,
              s(:lvar, :name))),
          s(:case,
            s(:lvar, :type),
            s(:when,
              s(:str, "#"),
              s(:str, "::"),
              s(:regexp,
                s(:str, "^"),
                s(:begin,
                  s(:lvar, :klass)),
                s(:begin,
                  s(:lvar, :type)),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:lvar, :name))),
                s(:str, "$"),
                s(:regopt))),
            s(:regexp,
              s(:str, "^"),
              s(:begin,
                s(:lvar, :klass)),
              s(:str, "(#|::)"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :escape,
                  s(:lvar, :name))),
              s(:str, "$"),
              s(:regopt))))),
      s(:def, :page,
        s(:args),
        s(:ensure,
          s(:rescue,
            s(:if,
              s(:lvasgn, :pager,
                s(:send, nil, :setup_pager)),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :pager)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :pager), :close),
                    s(:if,
                      s(:ivar, :@jruby_pager_process),
                      s(:send,
                        s(:ivar, :@jruby_pager_process), :wait_for), nil)))),
              s(:yield,
                s(:gvar, :$stdout))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Errno), :EPIPE)), nil, nil), nil),
          s(:ivasgn, :@paging,
            s(:false)))),
      s(:def, :paging?,
        s(:args),
        s(:ivar, :@paging)),
      s(:def, :parse_name,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :parts,
            s(:send,
              s(:lvar, :name), :split,
              s(:regexp,
                s(:str, "(::?|#|\\.)"),
                s(:regopt)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :parts), :length), :==,
              s(:int, 1)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :parts), :first), :=~,
                s(:regexp,
                  s(:str, "^[a-z]|^([%&*+/<>^`|~-]|\\+@|-@|<<|<=>?|===?|=>|=~|>>|\\[\\]=?|~@)$"),
                  s(:regopt))),
              s(:begin,
                s(:lvasgn, :type,
                  s(:str, ".")),
                s(:lvasgn, :meth,
                  s(:send,
                    s(:lvar, :parts), :pop))),
              s(:begin,
                s(:lvasgn, :type,
                  s(:nil)),
                s(:lvasgn, :meth,
                  s(:nil)))),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:lvar, :parts), :length), :==,
                  s(:int, 2)),
                s(:send,
                  s(:send,
                    s(:lvar, :parts), :last), :=~,
                  s(:regexp,
                    s(:str, "::|#|\\."),
                    s(:regopt)))),
              s(:begin,
                s(:lvasgn, :type,
                  s(:send,
                    s(:lvar, :parts), :pop)),
                s(:lvasgn, :meth,
                  s(:nil))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :parts), :[],
                    s(:int, 1)), :==,
                  s(:str, ":")),
                s(:begin,
                  s(:lvasgn, :klass,
                    s(:send,
                      s(:lvar, :parts), :shift)),
                  s(:lvasgn, :type,
                    s(:send,
                      s(:lvar, :parts), :shift)),
                  s(:lvasgn, :meth,
                    s(:send,
                      s(:lvar, :parts), :join))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :parts), :[],
                        s(:int, -2)), :!=,
                      s(:str, "::")),
                    s(:send,
                      s(:send,
                        s(:lvar, :parts), :last), :!~,
                      s(:regexp,
                        s(:str, "^[A-Z]"),
                        s(:regopt)))),
                  s(:begin,
                    s(:lvasgn, :meth,
                      s(:send,
                        s(:lvar, :parts), :pop)),
                    s(:lvasgn, :type,
                      s(:send,
                        s(:lvar, :parts), :pop))), nil)))),
          s(:or_asgn,
            s(:lvasgn, :klass),
            s(:send,
              s(:lvar, :parts), :join)),
          s(:array,
            s(:lvar, :klass),
            s(:lvar, :type),
            s(:lvar, :meth)))),
      s(:def, :render_class,
        s(:args,
          s(:arg, :out),
          s(:arg, :store),
          s(:arg, :klass),
          s(:arg, :also_in)),
        s(:begin,
          s(:lvasgn, :comment,
            s(:send,
              s(:lvar, :klass), :comment)),
          s(:lvasgn, :class_methods,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :store), :class_methods), :[],
                s(:send,
                  s(:lvar, :klass), :full_name)),
              s(:array))),
          s(:lvasgn, :instance_methods,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :store), :instance_methods), :[],
                s(:send,
                  s(:lvar, :klass), :full_name)),
              s(:array))),
          s(:lvasgn, :attributes,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :store), :attributes), :[],
                s(:send,
                  s(:lvar, :klass), :full_name)),
              s(:array))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :comment), :empty?),
                s(:send,
                  s(:lvar, :instance_methods), :empty?)),
              s(:send,
                s(:lvar, :class_methods), :empty?)),
            s(:begin,
              s(:send,
                s(:lvar, :also_in), :<<,
                s(:lvar, :store)),
              s(:return)), nil),
          s(:send, nil, :add_from,
            s(:lvar, :out),
            s(:lvar, :store)),
          s(:send, nil, :class_document_comment,
            s(:lvar, :out),
            s(:lvar, :comment)),
          s(:if,
            s(:or,
              s(:or,
                s(:lvar, :class_methods),
                s(:lvar, :instance_methods)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :constants), :empty?), :!)),
            s(:send,
              s(:lvar, :out), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Rule), :new,
                s(:int, 1))), nil),
          s(:send, nil, :class_document_constants,
            s(:lvar, :out),
            s(:lvar, :klass)),
          s(:send, nil, :add_method_list,
            s(:lvar, :out),
            s(:lvar, :class_methods),
            s(:str, "Class methods")),
          s(:send, nil, :add_method_list,
            s(:lvar, :out),
            s(:lvar, :instance_methods),
            s(:str, "Instance methods")),
          s(:send, nil, :add_method_list,
            s(:lvar, :out),
            s(:lvar, :attributes),
            s(:str, "Attributes")),
          s(:if,
            s(:ivar, :@show_all),
            s(:send, nil, :add_method_documentation,
              s(:lvar, :out),
              s(:lvar, :klass)), nil))),
      s(:def, :render_method,
        s(:args,
          s(:arg, :out),
          s(:arg, :store),
          s(:arg, :method),
          s(:arg, :name)),
        s(:begin,
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
              s(:dstr,
                s(:str, "(from "),
                s(:begin,
                  s(:send,
                    s(:lvar, :store), :friendly_path)),
                s(:str, ")")))),
          s(:if,
            s(:send,
              s(:lvar, :name), :=~,
              s(:regexp,
                s(:str, "^"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Regexp), :escape,
                    s(:send,
                      s(:lvar, :method), :parent_name))),
                s(:regopt))), nil,
            s(:send,
              s(:lvar, :out), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Heading), :new,
                s(:int, 3),
                s(:dstr,
                  s(:str, "Implementation from "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :method), :parent_name)))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Rule), :new,
              s(:int, 1))),
          s(:send, nil, :render_method_arguments,
            s(:lvar, :out),
            s(:send,
              s(:lvar, :method), :arglists)),
          s(:send, nil, :render_method_superclass,
            s(:lvar, :out),
            s(:lvar, :method)),
          s(:send, nil, :render_method_comment,
            s(:lvar, :out),
            s(:lvar, :method)))),
      s(:def, :render_method_arguments,
        s(:args,
          s(:arg, :out),
          s(:arg, :arglists)),
        s(:begin,
          s(:if,
            s(:lvar, :arglists), nil,
            s(:return)),
          s(:lvasgn, :arglists,
            s(:send,
              s(:send,
                s(:lvar, :arglists), :chomp), :split,
              s(:str, "\n"))),
          s(:lvasgn, :arglists,
            s(:block,
              s(:send,
                s(:lvar, :arglists), :map),
              s(:args,
                s(:arg, :line)),
              s(:send,
                s(:lvar, :line), :+,
                s(:str, "\n")))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
              s(:splat,
                s(:lvar, :arglists)))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Rule), :new,
              s(:int, 1))))),
      s(:def, :render_method_comment,
        s(:args,
          s(:arg, :out),
          s(:arg, :method)),
        s(:begin,
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:lvar, :method), :comment)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)))),
      s(:def, :render_method_superclass,
        s(:args,
          s(:arg, :out),
          s(:arg, :method)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :method), :respond_to?,
                s(:sym, :superclass_method)),
              s(:send,
                s(:lvar, :method), :superclass_method)), nil,
            s(:return)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Heading), :new,
              s(:int, 4),
              s(:dstr,
                s(:str, "(Uses superclass method "),
                s(:begin,
                  s(:send,
                    s(:lvar, :method), :superclass_method)),
                s(:str, ")")))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :RDoc), :Markup), :Rule), :new,
              s(:int, 1))))),
      s(:def, :run,
        s(:args),
        s(:rescue,
          s(:if,
            s(:ivar, :@list_doc_dirs),
            s(:send, nil, :puts,
              s(:ivar, :@doc_dirs)),
            s(:if,
              s(:ivar, :@list),
              s(:send, nil, :list_known_classes,
                s(:ivar, :@names)),
              s(:if,
                s(:ivar, :@server),
                s(:send, nil, :start_server),
                s(:if,
                  s(:or,
                    s(:ivar, :@interactive),
                    s(:send,
                      s(:ivar, :@names), :empty?)),
                  s(:send, nil, :interactive),
                  s(:send, nil, :display_names,
                    s(:ivar, :@names)))))),
          s(:resbody,
            s(:array,
              s(:const, nil, :NotFoundError)),
            s(:lvasgn, :e),
            s(:send, nil, :abort,
              s(:send,
                s(:lvar, :e), :message))), nil)),
      s(:def, :setup_pager,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@use_stdout),
            s(:return), nil),
          s(:lvasgn, :jruby,
            s(:and,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :RUBY_ENGINE)),
              s(:send,
                s(:const, nil, :RUBY_ENGINE), :==,
                s(:str, "jruby")))),
          s(:lvasgn, :pagers,
            s(:array,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RI_PAGER")),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PAGER")),
              s(:str, "pager"),
              s(:str, "less"),
              s(:str, "more"))),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :pagers), :compact), :uniq), :each),
            s(:args,
              s(:arg, :pager)),
            s(:begin,
              s(:if,
                s(:lvar, :pager), nil,
                s(:next)),
              s(:lvasgn, :pager_cmd,
                s(:send,
                  s(:send,
                    s(:lvar, :pager), :split), :first)),
              s(:if,
                s(:send, nil, :in_path?,
                  s(:lvar, :pager_cmd)), nil,
                s(:next)),
              s(:if,
                s(:lvar, :jruby),
                s(:case,
                  s(:lvasgn, :io,
                    s(:send, nil, :find_pager_jruby,
                      s(:lvar, :pager))),
                  s(:when,
                    s(:nil),
                    s(:break)),
                  s(:when,
                    s(:false),
                    s(:next)),
                  s(:lvar, :io)),
                s(:lvasgn, :io,
                  s(:rescue,
                    s(:send,
                      s(:const, nil, :IO), :popen,
                      s(:lvar, :pager),
                      s(:str, "w")),
                    s(:resbody, nil, nil,
                      s(:next)), nil))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:gvar, :$?),
                    s(:send,
                      s(:send,
                        s(:gvar, :$?), :pid), :==,
                      s(:send,
                        s(:lvar, :io), :pid))),
                  s(:send,
                    s(:gvar, :$?), :exited?)),
                s(:next), nil),
              s(:ivasgn, :@paging,
                s(:true)),
              s(:return,
                s(:lvar, :io)))),
          s(:ivasgn, :@use_stdout,
            s(:true)),
          s(:nil))),
      s(:def, :start_server,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "webrick")),
          s(:lvasgn, :server,
            s(:send,
              s(:const,
                s(:const, nil, :WEBrick), :HTTPServer), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :Port),
                  s(:ivar, :@server))))),
          s(:lvasgn, :extra_doc_dirs,
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@stores), :map),
                s(:args,
                  s(:arg, :s)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :type), :==,
                    s(:sym, :extra)),
                  s(:send,
                    s(:lvar, :s), :path),
                  s(:nil))), :compact)),
          s(:send,
            s(:lvar, :server), :mount,
            s(:str, "/"),
            s(:const,
              s(:const, nil, :RDoc), :Servlet),
            s(:nil),
            s(:lvar, :extra_doc_dirs)),
          s(:block,
            s(:send, nil, :trap,
              s(:str, "INT")),
            s(:args),
            s(:send,
              s(:lvar, :server), :shutdown)),
          s(:block,
            s(:send, nil, :trap,
              s(:str, "TERM")),
            s(:args),
            s(:send,
              s(:lvar, :server), :shutdown)),
          s(:send,
            s(:lvar, :server), :start))))))
