s(:begin,
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:str, "pathname")),
  s(:class,
    s(:const,
      s(:const, nil, :RDoc), :Options), nil,
    s(:begin,
      s(:casgn, nil, :DEPRECATED,
        s(:hash,
          s(:pair,
            s(:str, "--accessor"),
            s(:str, "support discontinued")),
          s(:pair,
            s(:str, "--diagram"),
            s(:str, "support discontinued")),
          s(:pair,
            s(:str, "--help-output"),
            s(:str, "support discontinued")),
          s(:pair,
            s(:str, "--image-format"),
            s(:str, "was an option for --diagram")),
          s(:pair,
            s(:str, "--inline-source"),
            s(:str, "source code is now always inlined")),
          s(:pair,
            s(:str, "--merge"),
            s(:str, "ri now always merges class information")),
          s(:pair,
            s(:str, "--one-file"),
            s(:str, "support discontinued")),
          s(:pair,
            s(:str, "--op-name"),
            s(:str, "support discontinued")),
          s(:pair,
            s(:str, "--opname"),
            s(:str, "support discontinued")),
          s(:pair,
            s(:str, "--promiscuous"),
            s(:str, "files always only document their content")),
          s(:pair,
            s(:str, "--ri-system"),
            s(:str, "Ruby installers use other techniques")))),
      s(:casgn, nil, :SPECIAL,
        s(:array,
          s(:str, "coverage_report"),
          s(:str, "dry_run"),
          s(:str, "encoding"),
          s(:str, "files"),
          s(:str, "force_output"),
          s(:str, "force_update"),
          s(:str, "generator"),
          s(:str, "generator_name"),
          s(:str, "generator_options"),
          s(:str, "generators"),
          s(:str, "op_dir"),
          s(:str, "option_parser"),
          s(:str, "pipe"),
          s(:str, "rdoc_include"),
          s(:str, "root"),
          s(:str, "static_path"),
          s(:str, "stylesheet_url"),
          s(:str, "template"),
          s(:str, "template_dir"),
          s(:str, "update_output_dir"),
          s(:str, "verbosity"),
          s(:str, "write_options"))),
      s(:casgn, nil, :Directory,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:casgn, nil, :Path,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:casgn, nil, :PathArray,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:casgn, nil, :Template,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:send, nil, :attr_accessor,
        s(:sym, :charset)),
      s(:send, nil, :attr_accessor,
        s(:sym, :dry_run)),
      s(:send, nil, :attr_accessor,
        s(:sym, :encoding)),
      s(:send, nil, :attr_accessor,
        s(:sym, :exclude)),
      s(:send, nil, :attr_accessor,
        s(:sym, :files)),
      s(:send, nil, :attr_accessor,
        s(:sym, :force_output)),
      s(:send, nil, :attr_accessor,
        s(:sym, :force_update)),
      s(:send, nil, :attr_accessor,
        s(:sym, :formatter)),
      s(:send, nil, :attr_accessor,
        s(:sym, :generator)),
      s(:send, nil, :attr_reader,
        s(:sym, :generator_name)),
      s(:send, nil, :attr_accessor,
        s(:sym, :generator_options)),
      s(:send, nil, :attr_accessor,
        s(:sym, :hyperlink_all)),
      s(:send, nil, :attr_accessor,
        s(:sym, :line_numbers)),
      s(:send, nil, :attr_accessor,
        s(:sym, :locale)),
      s(:send, nil, :attr_accessor,
        s(:sym, :locale_dir)),
      s(:send, nil, :attr_accessor,
        s(:sym, :main_page)),
      s(:send, nil, :attr_accessor,
        s(:sym, :markup)),
      s(:send, nil, :attr_accessor,
        s(:sym, :coverage_report)),
      s(:send, nil, :attr_accessor,
        s(:sym, :op_dir)),
      s(:send, nil, :attr_accessor,
        s(:sym, :option_parser)),
      s(:send, nil, :attr_accessor,
        s(:sym, :output_decoration)),
      s(:send, nil, :attr_accessor,
        s(:sym, :page_dir)),
      s(:send, nil, :attr_accessor,
        s(:sym, :pipe)),
      s(:send, nil, :attr_accessor,
        s(:sym, :rdoc_include)),
      s(:send, nil, :attr_accessor,
        s(:sym, :root)),
      s(:send, nil, :attr_accessor,
        s(:sym, :show_hash)),
      s(:send, nil, :attr_accessor,
        s(:sym, :static_path)),
      s(:send, nil, :attr_accessor,
        s(:sym, :tab_width)),
      s(:send, nil, :attr_accessor,
        s(:sym, :template)),
      s(:send, nil, :attr_accessor,
        s(:sym, :template_dir)),
      s(:send, nil, :attr_accessor,
        s(:sym, :template_stylesheets)),
      s(:send, nil, :attr_accessor,
        s(:sym, :title)),
      s(:send, nil, :attr_accessor,
        s(:sym, :update_output_dir)),
      s(:send, nil, :attr_accessor,
        s(:sym, :verbosity)),
      s(:send, nil, :attr_accessor,
        s(:sym, :webcvs)),
      s(:send, nil, :attr_reader,
        s(:sym, :visibility)),
      s(:def, :initialize,
        s(:args),
        s(:send, nil, :init_ivars)),
      s(:def, :init_ivars,
        s(:args),
        s(:begin,
          s(:ivasgn, :@dry_run,
            s(:false)),
          s(:ivasgn, :@exclude,
            s(:array)),
          s(:ivasgn, :@files,
            s(:nil)),
          s(:ivasgn, :@force_output,
            s(:false)),
          s(:ivasgn, :@force_update,
            s(:true)),
          s(:ivasgn, :@generator,
            s(:nil)),
          s(:ivasgn, :@generator_name,
            s(:nil)),
          s(:ivasgn, :@generator_options,
            s(:array)),
          s(:ivasgn, :@generators,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :RDoc), :GENERATORS)),
          s(:ivasgn, :@hyperlink_all,
            s(:false)),
          s(:ivasgn, :@line_numbers,
            s(:false)),
          s(:ivasgn, :@locale,
            s(:nil)),
          s(:ivasgn, :@locale_name,
            s(:nil)),
          s(:ivasgn, :@locale_dir,
            s(:str, "locale")),
          s(:ivasgn, :@main_page,
            s(:nil)),
          s(:ivasgn, :@markup,
            s(:str, "rdoc")),
          s(:ivasgn, :@coverage_report,
            s(:false)),
          s(:ivasgn, :@op_dir,
            s(:nil)),
          s(:ivasgn, :@page_dir,
            s(:nil)),
          s(:ivasgn, :@pipe,
            s(:false)),
          s(:ivasgn, :@output_decoration,
            s(:true)),
          s(:ivasgn, :@rdoc_include,
            s(:array)),
          s(:ivasgn, :@root,
            s(:send, nil, :Pathname,
              s(:send,
                s(:const, nil, :Dir), :pwd))),
          s(:ivasgn, :@show_hash,
            s(:false)),
          s(:ivasgn, :@static_path,
            s(:array)),
          s(:ivasgn, :@stylesheet_url,
            s(:nil)),
          s(:ivasgn, :@tab_width,
            s(:int, 8)),
          s(:ivasgn, :@template,
            s(:nil)),
          s(:ivasgn, :@template_dir,
            s(:nil)),
          s(:ivasgn, :@template_stylesheets,
            s(:array)),
          s(:ivasgn, :@title,
            s(:nil)),
          s(:ivasgn, :@update_output_dir,
            s(:true)),
          s(:ivasgn, :@verbosity,
            s(:int, 1)),
          s(:ivasgn, :@visibility,
            s(:sym, :protected)),
          s(:ivasgn, :@webcvs,
            s(:nil)),
          s(:ivasgn, :@write_options,
            s(:false)),
          s(:if,
            s(:send,
              s(:const, nil, :Object), :const_defined?,
              s(:sym, :Encoding)),
            s(:begin,
              s(:ivasgn, :@encoding,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)),
              s(:ivasgn, :@charset,
                s(:send,
                  s(:ivar, :@encoding), :name))),
            s(:begin,
              s(:ivasgn, :@encoding,
                s(:nil)),
              s(:ivasgn, :@charset,
                s(:str, "UTF-8")))))),
      s(:def, :init_with,
        s(:args,
          s(:arg, :map)),
        s(:begin,
          s(:send, nil, :init_ivars),
          s(:lvasgn, :encoding,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "encoding"))),
          s(:ivasgn, :@encoding,
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Encoding)),
              s(:if,
                s(:lvar, :encoding),
                s(:send,
                  s(:const, nil, :Encoding), :find,
                  s(:lvar, :encoding)),
                s(:lvar, :encoding)), nil)),
          s(:ivasgn, :@charset,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "charset"))),
          s(:ivasgn, :@exclude,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "exclude"))),
          s(:ivasgn, :@generator_name,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "generator_name"))),
          s(:ivasgn, :@hyperlink_all,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "hyperlink_all"))),
          s(:ivasgn, :@line_numbers,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "line_numbers"))),
          s(:ivasgn, :@locale_name,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "locale_name"))),
          s(:ivasgn, :@locale_dir,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "locale_dir"))),
          s(:ivasgn, :@main_page,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "main_page"))),
          s(:ivasgn, :@markup,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "markup"))),
          s(:ivasgn, :@op_dir,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "op_dir"))),
          s(:ivasgn, :@show_hash,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "show_hash"))),
          s(:ivasgn, :@tab_width,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "tab_width"))),
          s(:ivasgn, :@template_dir,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "template_dir"))),
          s(:ivasgn, :@title,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "title"))),
          s(:ivasgn, :@visibility,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "visibility"))),
          s(:ivasgn, :@webcvs,
            s(:send,
              s(:lvar, :map), :[],
              s(:str, "webcvs"))),
          s(:ivasgn, :@rdoc_include,
            s(:send, nil, :sanitize_path,
              s(:send,
                s(:lvar, :map), :[],
                s(:str, "rdoc_include")))),
          s(:ivasgn, :@static_path,
            s(:send, nil, :sanitize_path,
              s(:send,
                s(:lvar, :map), :[],
                s(:str, "static_path")))))),
      s(:def, :yaml_initialize,
        s(:args,
          s(:arg, :tag),
          s(:arg, :map)),
        s(:send, nil, :init_with,
          s(:lvar, :map))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:and,
            s(:and,
              s(:and,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:and,
                            s(:and,
                              s(:and,
                                s(:and,
                                  s(:and,
                                    s(:and,
                                      s(:and,
                                        s(:and,
                                          s(:send,
                                            s(:send,
                                              s(:self), :class), :===,
                                            s(:lvar, :other)),
                                          s(:send,
                                            s(:ivar, :@encoding), :==,
                                            s(:send,
                                              s(:lvar, :other), :encoding))),
                                        s(:send,
                                          s(:ivar, :@generator_name), :==,
                                          s(:send,
                                            s(:lvar, :other), :generator_name))),
                                      s(:send,
                                        s(:ivar, :@hyperlink_all), :==,
                                        s(:send,
                                          s(:lvar, :other), :hyperlink_all))),
                                    s(:send,
                                      s(:ivar, :@line_numbers), :==,
                                      s(:send,
                                        s(:lvar, :other), :line_numbers))),
                                  s(:send,
                                    s(:ivar, :@locale), :==,
                                    s(:send,
                                      s(:lvar, :other), :locale))),
                                s(:send,
                                  s(:ivar, :@locale_dir), :==,
                                  s(:send,
                                    s(:lvar, :other), :locale_dir))),
                              s(:send,
                                s(:ivar, :@main_page), :==,
                                s(:send,
                                  s(:lvar, :other), :main_page))),
                            s(:send,
                              s(:ivar, :@markup), :==,
                              s(:send,
                                s(:lvar, :other), :markup))),
                          s(:send,
                            s(:ivar, :@op_dir), :==,
                            s(:send,
                              s(:lvar, :other), :op_dir))),
                        s(:send,
                          s(:ivar, :@rdoc_include), :==,
                          s(:send,
                            s(:lvar, :other), :rdoc_include))),
                      s(:send,
                        s(:ivar, :@show_hash), :==,
                        s(:send,
                          s(:lvar, :other), :show_hash))),
                    s(:send,
                      s(:ivar, :@static_path), :==,
                      s(:send,
                        s(:lvar, :other), :static_path))),
                  s(:send,
                    s(:ivar, :@tab_width), :==,
                    s(:send,
                      s(:lvar, :other), :tab_width))),
                s(:send,
                  s(:ivar, :@template), :==,
                  s(:send,
                    s(:lvar, :other), :template))),
              s(:send,
                s(:ivar, :@title), :==,
                s(:send,
                  s(:lvar, :other), :title))),
            s(:send,
              s(:ivar, :@visibility), :==,
              s(:send,
                s(:lvar, :other), :visibility))),
          s(:send,
            s(:ivar, :@webcvs), :==,
            s(:send,
              s(:lvar, :other), :webcvs)))),
      s(:def, :check_files,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@files), :delete_if),
          s(:args,
            s(:arg, :file)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :file)),
            s(:if,
              s(:send,
                s(:const, nil, :File), :readable?,
                s(:lvar, :file)),
              s(:false),
              s(:begin,
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "file '"),
                    s(:begin,
                      s(:lvar, :file)),
                    s(:str, "' not readable"))),
                s(:true))),
            s(:begin,
              s(:send, nil, :warn,
                s(:dstr,
                  s(:str, "file '"),
                  s(:begin,
                    s(:lvar, :file)),
                  s(:str, "' not found"))),
              s(:true))))),
      s(:def, :check_generator,
        s(:args),
        s(:if,
          s(:ivar, :@generator),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :OptionParser), :InvalidOption),
            s(:dstr,
              s(:str, "generator already set to "),
              s(:begin,
                s(:ivar, :@generator_name)))), nil)),
      s(:def, :default_title=,
        s(:args,
          s(:arg, :string)),
        s(:or_asgn,
          s(:ivasgn, :@title),
          s(:lvar, :string))),
      s(:def, :encode_with,
        s(:args,
          s(:arg, :coder)),
        s(:begin,
          s(:lvasgn, :encoding,
            s(:if,
              s(:ivar, :@encoding),
              s(:send,
                s(:ivar, :@encoding), :name),
              s(:nil))),
          s(:send,
            s(:lvar, :coder), :add,
            s(:str, "encoding"),
            s(:lvar, :encoding)),
          s(:send,
            s(:lvar, :coder), :add,
            s(:str, "static_path"),
            s(:send, nil, :sanitize_path,
              s(:ivar, :@static_path))),
          s(:send,
            s(:lvar, :coder), :add,
            s(:str, "rdoc_include"),
            s(:send, nil, :sanitize_path,
              s(:ivar, :@rdoc_include))),
          s(:lvasgn, :ivars,
            s(:block,
              s(:send,
                s(:send, nil, :instance_variables), :map),
              s(:args,
                s(:arg, :ivar)),
              s(:send,
                s(:send,
                  s(:lvar, :ivar), :to_s), :[],
                s(:irange,
                  s(:int, 1),
                  s(:int, -1))))),
          s(:op_asgn,
            s(:lvasgn, :ivars), :-,
            s(:const, nil, :SPECIAL)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :ivars), :sort), :each),
            s(:args,
              s(:arg, :ivar)),
            s(:send,
              s(:lvar, :coder), :add,
              s(:lvar, :ivar),
              s(:send, nil, :instance_variable_get,
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :ivar)))))))),
      s(:def, :finish,
        s(:args),
        s(:begin,
          s(:or_asgn,
            s(:ivasgn, :@op_dir),
            s(:str, "doc")),
          s(:if,
            s(:send,
              s(:ivar, :@rdoc_include), :empty?),
            s(:send,
              s(:ivar, :@rdoc_include), :<<,
              s(:str, ".")), nil),
          s(:lvasgn, :root,
            s(:send,
              s(:ivar, :@root), :to_s)),
          s(:if,
            s(:send,
              s(:ivar, :@rdoc_include), :include?,
              s(:lvar, :root)), nil,
            s(:send,
              s(:ivar, :@rdoc_include), :<<,
              s(:lvar, :root))),
          s(:if,
            s(:or,
              s(:send,
                s(:ivar, :@exclude), :nil?),
              s(:send,
                s(:const, nil, :Regexp), :===,
                s(:ivar, :@exclude))), nil,
            s(:if,
              s(:send,
                s(:ivar, :@exclude), :empty?),
              s(:ivasgn, :@exclude,
                s(:nil)),
              s(:ivasgn, :@exclude,
                s(:send,
                  s(:const, nil, :Regexp), :new,
                  s(:send,
                    s(:ivar, :@exclude), :join,
                    s(:str, "|")))))),
          s(:send, nil, :finish_page_dir),
          s(:send, nil, :check_files),
          s(:if,
            s(:ivar, :@template), nil,
            s(:begin,
              s(:ivasgn, :@template,
                s(:ivar, :@generator_name)),
              s(:ivasgn, :@template_dir,
                s(:send, nil, :template_dir_for,
                  s(:ivar, :@template))))),
          s(:if,
            s(:ivar, :@locale_name),
            s(:begin,
              s(:ivasgn, :@locale,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :I18n), :Locale), :[],
                  s(:ivar, :@locale_name))),
              s(:send,
                s(:ivar, :@locale), :load,
                s(:ivar, :@locale_dir))),
            s(:ivasgn, :@locale,
              s(:nil))),
          s(:self))),
      s(:def, :finish_page_dir,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@page_dir), nil,
            s(:return)),
          s(:send,
            s(:ivar, :@files), :<<,
            s(:send,
              s(:ivar, :@page_dir), :to_s)),
          s(:lvasgn, :page_dir,
            s(:send,
              s(:send,
                s(:ivar, :@page_dir), :expand_path), :relative_path_from,
              s(:ivar, :@root))),
          s(:ivasgn, :@page_dir,
            s(:lvar, :page_dir)))),
      s(:def, :generator_descriptions,
        s(:args),
        s(:begin,
          s(:lvasgn, :lengths,
            s(:array)),
          s(:lvasgn, :generators,
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :RDoc), :GENERATORS), :map),
              s(:args,
                s(:arg, :name),
                s(:arg, :generator)),
              s(:begin,
                s(:send,
                  s(:lvar, :lengths), :<<,
                  s(:send,
                    s(:lvar, :name), :length)),
                s(:if,
                  s(:send,
                    s(:lvar, :generator), :const_defined?,
                    s(:sym, :DESCRIPTION)),
                  s(:lvasgn, :description,
                    s(:const,
                      s(:lvar, :generator), :DESCRIPTION)), nil),
                s(:array,
                  s(:lvar, :name),
                  s(:lvar, :description))))),
          s(:lvasgn, :longest,
            s(:send,
              s(:lvar, :lengths), :max)),
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :generators), :sort), :map),
              s(:args,
                s(:arg, :name),
                s(:arg, :description)),
              s(:if,
                s(:lvar, :description),
                s(:send,
                  s(:str, "  %-*s - %s"), :%,
                  s(:array,
                    s(:lvar, :longest),
                    s(:lvar, :name),
                    s(:lvar, :description))),
                s(:dstr,
                  s(:str, "  "),
                  s(:begin,
                    s(:lvar, :name))))), :join,
            s(:str, "\n")))),
      s(:def, :parse,
        s(:args,
          s(:arg, :argv)),
        s(:begin,
          s(:lvasgn, :ignore_invalid,
            s(:true)),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "RDOCOPT")),
            s(:send,
              s(:lvar, :argv), :insert,
              s(:int, 0),
              s(:splat,
                s(:send,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "RDOCOPT")), :split))), nil),
          s(:lvasgn, :opts,
            s(:block,
              s(:send,
                s(:const, nil, :OptionParser), :new),
              s(:args,
                s(:arg, :opt)),
              s(:begin,
                s(:ivasgn, :@option_parser,
                  s(:lvar, :opt)),
                s(:send,
                  s(:lvar, :opt), :program_name=,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:gvar, :$0))),
                s(:send,
                  s(:lvar, :opt), :version=,
                  s(:const,
                    s(:const, nil, :RDoc), :VERSION)),
                s(:send,
                  s(:lvar, :opt), :release=,
                  s(:nil)),
                s(:send,
                  s(:lvar, :opt), :summary_indent=,
                  s(:send,
                    s(:str, " "), :*,
                    s(:int, 4))),
                s(:send,
                  s(:lvar, :opt), :banner=,
                  s(:dstr,
                    s(:str, "Usage: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :opt), :program_name)),
                    s(:str, " [options] [names...]\n"),
                    s(:str, "\n"),
                    s(:str, "  Files are parsed, and the information they contain collected, before any\n"),
                    s(:str, "  output is produced. This allows cross references between all files to be\n"),
                    s(:str, "  resolved. If a name is a directory, it is traversed. If no names are\n"),
                    s(:str, "  specified, all Ruby files in the current directory (and subdirectories) are\n"),
                    s(:str, "  processed.\n"),
                    s(:str, "\n"),
                    s(:str, "  How RDoc generates output depends on the output formatter being used, and on\n"),
                    s(:str, "  the options you give.\n"),
                    s(:str, "\n"),
                    s(:str, "  Options can be specified via the RDOCOPT environment variable, which\n"),
                    s(:str, "  functions similar to the RUBYOPT environment variable for ruby.\n"),
                    s(:str, "\n"),
                    s(:str, "    $ export RDOCOPT=\"--show-hash\"\n"),
                    s(:str, "\n"),
                    s(:str, "  will make rdoc show hashes in method links by default.  Command-line options\n"),
                    s(:str, "  always will override those in RDOCOPT.\n"),
                    s(:str, "\n"),
                    s(:str, "  Available formatters:\n"),
                    s(:str, "\n"),
                    s(:begin,
                      s(:send, nil, :generator_descriptions)),
                    s(:str, "\n"),
                    s(:str, "\n"),
                    s(:str, "  RDoc understands the following file formats:\n"),
                    s(:str, "\n"))),
                s(:lvasgn, :parsers,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Hash), :new),
                    s(:args,
                      s(:arg, :h),
                      s(:arg, :parser)),
                    s(:send,
                      s(:lvar, :h), :[]=,
                      s(:lvar, :parser),
                      s(:array)))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RDoc), :Parser), :parsers), :each),
                  s(:args,
                    s(:arg, :regexp),
                    s(:arg, :parser)),
                  s(:send,
                    s(:send,
                      s(:lvar, :parsers), :[],
                      s(:send,
                        s(:send,
                          s(:lvar, :parser), :name), :sub,
                        s(:str, "RDoc::Parser::"),
                        s(:str, ""))), :<<,
                    s(:send,
                      s(:lvar, :regexp), :source))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :parsers), :sort), :each),
                  s(:args,
                    s(:arg, :parser),
                    s(:arg, :regexp)),
                  s(:send,
                    s(:send,
                      s(:lvar, :opt), :banner), :<<,
                    s(:dstr,
                      s(:str, "  - "),
                      s(:begin,
                        s(:lvar, :parser)),
                      s(:str, ": "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :regexp), :join,
                          s(:str, ", "))),
                      s(:str, "\n")))),
                s(:send,
                  s(:send,
                    s(:lvar, :opt), :banner), :<<,
                  s(:str, "  - TomDoc:  Only in ruby files\n")),
                s(:send,
                  s(:send,
                    s(:lvar, :opt), :banner), :<<,
                  s(:str, "\n  The following options are deprecated:\n\n")),
                s(:lvasgn, :name_length,
                  s(:send,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:const, nil, :DEPRECATED), :keys), :sort_by),
                        s(:args,
                          s(:arg, :k)),
                        s(:send,
                          s(:lvar, :k), :length)), :last), :length)),
                s(:block,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :DEPRECATED), :sort_by),
                      s(:args,
                        s(:arg, :k)),
                      s(:lvar, :k)), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :reason)),
                  s(:send,
                    s(:send,
                      s(:lvar, :opt), :banner), :<<,
                    s(:send,
                      s(:str, "    %*1$2$s  %3$s\n"), :%,
                      s(:array,
                        s(:send,
                          s(:lvar, :name_length), :-@),
                        s(:lvar, :name),
                        s(:lvar, :reason))))),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :accept,
                    s(:const, nil, :Template)),
                  s(:args,
                    s(:arg, :template)),
                  s(:begin,
                    s(:lvasgn, :template_dir,
                      s(:send, nil, :template_dir_for,
                        s(:lvar, :template))),
                    s(:if,
                      s(:lvar, :template_dir),
                      s(:array,
                        s(:lvar, :template),
                        s(:lvar, :template_dir)),
                      s(:begin,
                        s(:send,
                          s(:gvar, :$stderr), :puts,
                          s(:dstr,
                            s(:str, "could not find template "),
                            s(:begin,
                              s(:lvar, :template)))),
                        s(:nil))))),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :accept,
                    s(:const, nil, :Directory)),
                  s(:args,
                    s(:arg, :directory)),
                  s(:begin,
                    s(:lvasgn, :directory,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :directory))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :directory?,
                        s(:lvar, :directory)), nil,
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument))),
                    s(:lvar, :directory))),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :accept,
                    s(:const, nil, :Path)),
                  s(:args,
                    s(:arg, :path)),
                  s(:begin,
                    s(:lvasgn, :path,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :path))),
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :exist?,
                        s(:lvar, :path)), nil,
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument))),
                    s(:lvar, :path))),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :accept,
                    s(:const, nil, :PathArray)),
                  s(:args,
                    s(:arg, :paths)),
                  s(:begin,
                    s(:lvasgn, :paths,
                      s(:if,
                        s(:lvar, :paths),
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :paths), :split,
                              s(:str, ",")), :map),
                          s(:args,
                            s(:arg, :d)),
                          s(:if,
                            s(:send,
                              s(:lvar, :d), :empty?), nil,
                            s(:lvar, :d))), nil)),
                    s(:block,
                      s(:send,
                        s(:lvar, :paths), :map),
                      s(:args,
                        s(:arg, :path)),
                      s(:begin,
                        s(:lvasgn, :path,
                          s(:send,
                            s(:const, nil, :File), :expand_path,
                            s(:lvar, :path))),
                        s(:if,
                          s(:send,
                            s(:const, nil, :File), :exist?,
                            s(:lvar, :path)), nil,
                          s(:send, nil, :raise,
                            s(:const,
                              s(:const, nil, :OptionParser), :InvalidArgument))),
                        s(:lvar, :path))))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:str, "Parsing options:")),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:if,
                  s(:send,
                    s(:const, nil, :Object), :const_defined?,
                    s(:sym, :Encoding)),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :opt), :on,
                        s(:str, "--encoding=ENCODING"),
                        s(:str, "-e"),
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Encoding), :list), :map),
                          s(:args,
                            s(:arg, :e)),
                          s(:send,
                            s(:lvar, :e), :name)),
                        s(:str, "Specifies the output encoding.  All files"),
                        s(:str, "read will be converted to this encoding."),
                        s(:str, "The default encoding is UTF-8."),
                        s(:str, "--encoding is preferred over --charset")),
                      s(:args,
                        s(:arg, :value)),
                      s(:begin,
                        s(:ivasgn, :@encoding,
                          s(:send,
                            s(:const, nil, :Encoding), :find,
                            s(:lvar, :value))),
                        s(:ivasgn, :@charset,
                          s(:send,
                            s(:ivar, :@encoding), :name)))),
                    s(:send,
                      s(:lvar, :opt), :separator,
                      s(:nil))), nil),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--locale=NAME"),
                    s(:str, "Specifies the output locale.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@locale_name,
                    s(:lvar, :value))),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--locale-data-dir=DIR"),
                    s(:str, "Specifies the directory where locale data live.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@locale_dir,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--all"),
                    s(:str, "-a"),
                    s(:str, "Synonym for --visibility=private.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@visibility,
                    s(:sym, :private))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--exclude=PATTERN"),
                    s(:str, "-x"),
                    s(:const, nil, :Regexp),
                    s(:str, "Do not process files or directories"),
                    s(:str, "matching PATTERN.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:send,
                    s(:ivar, :@exclude), :<<,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--extension=NEW=OLD"),
                    s(:str, "-E"),
                    s(:str, "Treat files ending with .new as if they"),
                    s(:str, "ended with .old. Using '-E cgi=rb' will"),
                    s(:str, "cause xxx.cgi to be parsed as a Ruby file.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :new),
                        s(:lvasgn, :old)),
                      s(:send,
                        s(:lvar, :value), :split,
                        s(:regexp,
                          s(:str, "="),
                          s(:regopt)),
                        s(:int, 2))),
                    s(:if,
                      s(:and,
                        s(:lvar, :new),
                        s(:lvar, :old)), nil,
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument),
                        s(:str, "Invalid parameter to '-E'"))),
                    s(:if,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RDoc), :Parser), :alias_extension,
                        s(:lvar, :old),
                        s(:lvar, :new)), nil,
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument),
                        s(:dstr,
                          s(:str, "Unknown extension ."),
                          s(:begin,
                            s(:lvar, :old)),
                          s(:str, " to -E")))))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--[no-]force-update"),
                    s(:str, "-U"),
                    s(:str, "Forces rdoc to scan all sources even if"),
                    s(:str, "newer than the flag file.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@force_update,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--pipe"),
                    s(:str, "-p"),
                    s(:str, "Convert RDoc on stdin to HTML")),
                  s(:args),
                  s(:ivasgn, :@pipe,
                    s(:true))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--tab-width=WIDTH"),
                    s(:str, "-w"),
                    s(:const, nil, :Integer),
                    s(:str, "Set the width of tab characters.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :value), :<=,
                        s(:int, 0)),
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :value)),
                          s(:str, " is an invalid tab width"))), nil),
                    s(:ivasgn, :@tab_width,
                      s(:lvar, :value)))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--visibility=VISIBILITY"),
                    s(:str, "-V"),
                    s(:send,
                      s(:const,
                        s(:const, nil, :RDoc), :VISIBILITIES), :+,
                      s(:array,
                        s(:sym, :nodoc))),
                    s(:str, "Minimum visibility to document a method."),
                    s(:str, "One of 'public', 'protected' (the default),"),
                    s(:str, "'private' or 'nodoc' (show everything)")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@visibility,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:lvasgn, :markup_formats,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :RDoc), :Text), :MARKUP_FORMAT), :keys), :sort)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--markup=MARKUP"),
                    s(:lvar, :markup_formats),
                    s(:str, "The markup format for the named files."),
                    s(:str, "The default is rdoc.  Valid values are:"),
                    s(:send,
                      s(:lvar, :markup_formats), :join,
                      s(:str, ", "))),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@markup,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--root=ROOT"),
                    s(:const, nil, :Directory),
                    s(:str, "Root of the source tree documentation"),
                    s(:str, "will be generated for.  Set this when"),
                    s(:str, "building documentation outside the"),
                    s(:str, "source directory.  Default is the"),
                    s(:str, "current directory.")),
                  s(:args,
                    s(:arg, :root)),
                  s(:ivasgn, :@root,
                    s(:send, nil, :Pathname,
                      s(:lvar, :root)))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--page-dir=DIR"),
                    s(:const, nil, :Directory),
                    s(:str, "Directory where guides, your FAQ or"),
                    s(:str, "other pages not associated with a class"),
                    s(:str, "live.  Set this when you don't store"),
                    s(:str, "such files at your project root."),
                    s(:str, "NOTE: Do not use the same file name in"),
                    s(:str, "the page dir and the root of your project")),
                  s(:args,
                    s(:arg, :page_dir)),
                  s(:ivasgn, :@page_dir,
                    s(:send, nil, :Pathname,
                      s(:lvar, :page_dir)))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:str, "Common generator options:")),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--force-output"),
                    s(:str, "-O"),
                    s(:str, "Forces rdoc to write the output files,"),
                    s(:str, "even if the output directory exists"),
                    s(:str, "and does not seem to have been created"),
                    s(:str, "by rdoc.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@force_output,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:lvasgn, :generator_text,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:ivar, :@generators), :keys), :map),
                      s(:args,
                        s(:arg, :name)),
                      s(:dstr,
                        s(:str, "  "),
                        s(:begin,
                          s(:lvar, :name)))), :sort)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "-f"),
                    s(:str, "--fmt=FORMAT"),
                    s(:str, "--format=FORMAT"),
                    s(:send,
                      s(:ivar, :@generators), :keys),
                    s(:str, "Set the output formatter.  One of:"),
                    s(:splat,
                      s(:lvar, :generator_text))),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:send, nil, :check_generator),
                    s(:ivasgn, :@generator_name,
                      s(:send,
                        s(:lvar, :value), :downcase)),
                    s(:send, nil, :setup_generator))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--include=DIRECTORIES"),
                    s(:str, "-i"),
                    s(:const, nil, :PathArray),
                    s(:str, "Set (or add to) the list of directories to"),
                    s(:str, "be searched when satisfying :include:"),
                    s(:str, "requests. Can be used more than once.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:send,
                    s(:ivar, :@rdoc_include), :concat,
                    s(:block,
                      s(:send,
                        s(:lvar, :value), :map),
                      s(:args,
                        s(:arg, :dir)),
                      s(:send,
                        s(:lvar, :dir), :strip)))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--[no-]coverage-report=[LEVEL]"),
                    s(:str, "--[no-]dcov"),
                    s(:str, "-C"),
                    s(:const, nil, :Integer),
                    s(:str, "Prints a report on undocumented items."),
                    s(:str, "Does not generate files.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :value), :nil?),
                      s(:lvasgn, :value,
                        s(:int, 0)), nil),
                    s(:ivasgn, :@coverage_report,
                      s(:lvar, :value)),
                    s(:if,
                      s(:lvar, :value),
                      s(:ivasgn, :@force_update,
                        s(:true)), nil))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--output=DIR"),
                    s(:str, "--op"),
                    s(:str, "-o"),
                    s(:str, "Set the output directory.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@op_dir,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "-d"),
                    s(:str, "Deprecated --diagram option."),
                    s(:str, "Prevents firing debug mode"),
                    s(:str, "with legacy invocation.")),
                  s(:args,
                    s(:arg, :value)), nil),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:str, "HTML generator options:")),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--charset=CHARSET"),
                    s(:str, "-c"),
                    s(:str, "Specifies the output HTML character-set."),
                    s(:str, "Use --encoding instead of --charset if"),
                    s(:str, "available.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@charset,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--hyperlink-all"),
                    s(:str, "-A"),
                    s(:str, "Generate hyperlinks for all words that"),
                    s(:str, "correspond to known methods, even if they"),
                    s(:str, "do not start with '#' or '::' (legacy"),
                    s(:str, "behavior).")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@hyperlink_all,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--main=NAME"),
                    s(:str, "-m"),
                    s(:str, "NAME will be the initial page displayed.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@main_page,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--[no-]line-numbers"),
                    s(:str, "-N"),
                    s(:str, "Include line numbers in the source code."),
                    s(:str, "By default, only the number of the first"),
                    s(:str, "line is displayed, in a leading comment.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@line_numbers,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--show-hash"),
                    s(:str, "-H"),
                    s(:str, "A name of the form #name in a comment is a"),
                    s(:str, "possible hyperlink to an instance method"),
                    s(:str, "name. When displayed, the '#' is removed"),
                    s(:str, "unless this option is specified.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@show_hash,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--template=NAME"),
                    s(:str, "-T"),
                    s(:const, nil, :Template),
                    s(:str, "Set the template used when generating"),
                    s(:str, "output. The default depends on the"),
                    s(:str, "formatter used.")),
                  s(:args,
                    s(:mlhs,
                      s(:arg, :template),
                      s(:arg, :template_dir))),
                  s(:begin,
                    s(:ivasgn, :@template,
                      s(:lvar, :template)),
                    s(:ivasgn, :@template_dir,
                      s(:lvar, :template_dir)))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--template-stylesheets=FILES"),
                    s(:const, nil, :PathArray),
                    s(:str, "Set (or add to) the list of files to"),
                    s(:str, "include with the html template.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:send,
                    s(:ivar, :@template_stylesheets), :<<,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--title=TITLE"),
                    s(:str, "-t"),
                    s(:str, "Set TITLE as the title for HTML output.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@title,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--copy-files=PATH"),
                    s(:const, nil, :Path),
                    s(:str, "Specify a file or directory to copy static"),
                    s(:str, "files from."),
                    s(:str, "If a file is given it will be copied into"),
                    s(:str, "the output dir.  If a directory is given the"),
                    s(:str, "entire directory will be copied."),
                    s(:str, "You can use this multiple times")),
                  s(:args,
                    s(:arg, :value)),
                  s(:send,
                    s(:ivar, :@static_path), :<<,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--webcvs=URL"),
                    s(:str, "-W"),
                    s(:str, "Specify a URL for linking to a web frontend"),
                    s(:str, "to CVS. If the URL contains a '%s', the"),
                    s(:str, "name of the current file will be"),
                    s(:str, "substituted; if the URL doesn't contain a"),
                    s(:str, "'%s', the filename will be appended to it.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@webcvs,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:str, "ri generator options:")),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--ri"),
                    s(:str, "-r"),
                    s(:str, "Generate output for use by `ri`. The files"),
                    s(:str, "are stored in the '.rdoc' directory under"),
                    s(:str, "your home directory unless overridden by a"),
                    s(:str, "subsequent --op parameter, so no special"),
                    s(:str, "privileges are needed.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:send, nil, :check_generator),
                    s(:ivasgn, :@generator_name,
                      s(:str, "ri")),
                    s(:or_asgn,
                      s(:ivasgn, :@op_dir),
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :RI), :Paths), :HOMEDIR)),
                    s(:send, nil, :setup_generator))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--ri-site"),
                    s(:str, "-R"),
                    s(:str, "Generate output for use by `ri`. The files"),
                    s(:str, "are stored in a site-wide directory,"),
                    s(:str, "making them accessible to others, so"),
                    s(:str, "special privileges are needed.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:begin,
                    s(:send, nil, :check_generator),
                    s(:ivasgn, :@generator_name,
                      s(:str, "ri")),
                    s(:ivasgn, :@op_dir,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :RI), :Paths), :site_dir)),
                    s(:send, nil, :setup_generator))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:str, "Generic options:")),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--write-options"),
                    s(:str, "Write .rdoc_options to the current"),
                    s(:str, "directory with the given options.  Not all"),
                    s(:str, "options will be used.  See RDoc::Options"),
                    s(:str, "for details.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@write_options,
                    s(:true))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--[no-]dry-run"),
                    s(:str, "Don't write any files")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@dry_run,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "-D"),
                    s(:str, "--[no-]debug"),
                    s(:str, "Displays lots on internal stuff.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:gvasgn, :$DEBUG_RDOC,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--[no-]ignore-invalid"),
                    s(:str, "Ignore invalid options and continue"),
                    s(:str, "(default true).")),
                  s(:args,
                    s(:arg, :value)),
                  s(:lvasgn, :ignore_invalid,
                    s(:lvar, :value))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--quiet"),
                    s(:str, "-q"),
                    s(:str, "Don't show progress as we parse.")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@verbosity,
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--verbose"),
                    s(:str, "-V"),
                    s(:str, "Display extra progress as RDoc parses")),
                  s(:args,
                    s(:arg, :value)),
                  s(:ivasgn, :@verbosity,
                    s(:int, 2))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--version"),
                    s(:str, "-v"),
                    s(:str, "print the version")),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :puts,
                      s(:send,
                        s(:lvar, :opt), :version)),
                    s(:send, nil, :exit))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil)),
                s(:block,
                  s(:send,
                    s(:lvar, :opt), :on,
                    s(:str, "--help"),
                    s(:str, "-h"),
                    s(:str, "Display this help")),
                  s(:args),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :RDoc), :RDoc), :GENERATORS), :each_key),
                      s(:args,
                        s(:arg, :generator)),
                      s(:send, nil, :setup_generator,
                        s(:lvar, :generator))),
                    s(:send, nil, :puts,
                      s(:send,
                        s(:lvar, :opt), :help)),
                    s(:send, nil, :exit))),
                s(:send,
                  s(:lvar, :opt), :separator,
                  s(:nil))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :argv), :grep,
                s(:regexp,
                  s(:str, "\\A(-f|--fmt|--format|-r|-R|--ri|--ri-site)\\b"),
                  s(:regopt))), :empty?),
            s(:send, nil, :setup_generator,
              s(:str, "darkfish")), nil),
          s(:lvasgn, :deprecated,
            s(:array)),
          s(:lvasgn, :invalid,
            s(:array)),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :opts), :parse!,
                s(:lvar, :argv)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :OptionParser), :ParseError)),
                s(:lvasgn, :e),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :DEPRECATED), :[],
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :args), :first)),
                    s(:send,
                      s(:lvar, :deprecated), :<<,
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :args), :first)),
                    s(:if,
                      s(:send,
                        s(:array,
                          s(:str, "--format"),
                          s(:str, "--ri"),
                          s(:str, "-r"),
                          s(:str, "--ri-site"),
                          s(:str, "-R")), :include?,
                        s(:send,
                          s(:send,
                            s(:lvar, :e), :args), :first)),
                      s(:send, nil, :raise),
                      s(:send,
                        s(:lvar, :invalid), :<<,
                        s(:send,
                          s(:send,
                            s(:lvar, :e), :args), :join,
                          s(:str, " "))))),
                  s(:retry))), nil)),
          s(:if,
            s(:ivar, :@generator), nil,
            s(:begin,
              s(:ivasgn, :@generator,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Generator), :Darkfish)),
              s(:ivasgn, :@generator_name,
                s(:str, "darkfish")))),
          s(:if,
            s(:and,
              s(:ivar, :@pipe),
              s(:send,
                s(:send,
                  s(:lvar, :argv), :empty?), :!)),
            s(:begin,
              s(:ivasgn, :@pipe,
                s(:false)),
              s(:send,
                s(:lvar, :invalid), :<<,
                s(:str, "-p (with files)"))), nil),
          s(:if,
            s(:send, nil, :quiet), nil,
            s(:block,
              s(:send,
                s(:lvar, :deprecated), :each),
              s(:args,
                s(:arg, :opt)),
              s(:send,
                s(:gvar, :$stderr), :puts,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:str, "option "), :<<,
                      s(:lvar, :opt)), :<<,
                    s(:str, " is deprecated: ")), :<<,
                  s(:send,
                    s(:const, nil, :DEPRECATED), :[],
                    s(:lvar, :opt)))))),
          s(:if,
            s(:send,
              s(:lvar, :invalid), :empty?), nil,
            s(:begin,
              s(:lvasgn, :invalid,
                s(:dstr,
                  s(:str, "invalid options: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :invalid), :join,
                      s(:str, ", "))))),
              s(:if,
                s(:lvar, :ignore_invalid),
                s(:if,
                  s(:send, nil, :quiet), nil,
                  s(:begin,
                    s(:send,
                      s(:gvar, :$stderr), :puts,
                      s(:lvar, :invalid)),
                    s(:send,
                      s(:gvar, :$stderr), :puts,
                      s(:str, "(invalid options are ignored)")))),
                s(:begin,
                  s(:if,
                    s(:send, nil, :quiet), nil,
                    s(:send,
                      s(:gvar, :$stderr), :puts,
                      s(:lvar, :opts))),
                  s(:send,
                    s(:gvar, :$stderr), :puts,
                    s(:lvar, :invalid)),
                  s(:send, nil, :exit,
                    s(:int, 1)))))),
          s(:ivasgn, :@files,
            s(:send,
              s(:lvar, :argv), :dup)),
          s(:send, nil, :finish),
          s(:if,
            s(:ivar, :@write_options),
            s(:begin,
              s(:send, nil, :write_options),
              s(:send, nil, :exit)), nil),
          s(:self))),
      s(:def, :quiet,
        s(:args),
        s(:send,
          s(:ivar, :@verbosity), :zero?)),
      s(:def, :quiet=,
        s(:args,
          s(:arg, :bool)),
        s(:ivasgn, :@verbosity,
          s(:if,
            s(:lvar, :bool),
            s(:int, 0),
            s(:int, 1)))),
      s(:def, :sanitize_path,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "pathname")),
          s(:lvasgn, :dot,
            s(:send,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:str, ".")), :expand_path)),
          s(:block,
            s(:send,
              s(:lvar, :path), :reject),
            s(:args,
              s(:arg, :item)),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:lvar, :item)), :expand_path)),
              s(:lvasgn, :relative,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :relative_path_from,
                    s(:lvar, :dot)), :to_s)),
              s(:send,
                s(:lvar, :relative), :start_with?,
                s(:str, "..")))))),
      s(:def, :setup_generator,
        s(:args,
          s(:optarg, :generator_name,
            s(:ivar, :@generator_name))),
        s(:begin,
          s(:ivasgn, :@generator,
            s(:send,
              s(:ivar, :@generators), :[],
              s(:lvar, :generator_name))),
          s(:if,
            s(:ivar, :@generator), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :OptionParser), :InvalidArgument),
              s(:dstr,
                s(:str, "Invalid output formatter "),
                s(:begin,
                  s(:lvar, :generator_name))))),
          s(:if,
            s(:send,
              s(:ivar, :@generator_options), :include?,
              s(:ivar, :@generator)),
            s(:return), nil),
          s(:ivasgn, :@generator_name,
            s(:lvar, :generator_name)),
          s(:send,
            s(:ivar, :@generator_options), :<<,
            s(:ivar, :@generator)),
          s(:if,
            s(:send,
              s(:ivar, :@generator), :respond_to?,
              s(:sym, :setup_options)),
            s(:begin,
              s(:or_asgn,
                s(:ivasgn, :@option_parser),
                s(:send,
                  s(:const, nil, :OptionParser), :new)),
              s(:send,
                s(:ivar, :@generator), :setup_options,
                s(:self))), nil))),
      s(:def, :template_dir_for,
        s(:args,
          s(:arg, :template)),
        s(:begin,
          s(:lvasgn, :template_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:str, "rdoc"),
              s(:str, "generator"),
              s(:str, "template"),
              s(:lvar, :template))),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:gvar, :$LOAD_PATH), :map),
                s(:args,
                  s(:arg, :path)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :path)),
                  s(:lvar, :template_path))), :find),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :dir))))),
      s(:def, :to_yaml,
        s(:args,
          s(:optarg, :opts,
            s(:hash))),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :YAML), :const_defined?,
                s(:sym, :ENGINE)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :YAML), :ENGINE), :syck?), :!)),
            s(:return,
              s(:zsuper)), nil),
          s(:block,
            s(:send,
              s(:const, nil, :YAML), :quick_emit,
              s(:self),
              s(:lvar, :opts)),
            s(:args,
              s(:arg, :out)),
            s(:block,
              s(:send,
                s(:lvar, :out), :map,
                s(:send, nil, :taguri),
                s(:send, nil, :to_yaml_style)),
              s(:args,
                s(:arg, :map)),
              s(:send, nil, :encode_with,
                s(:lvar, :map)))))),
      s(:def, :visibility=,
        s(:args,
          s(:arg, :visibility)),
        s(:case,
          s(:lvar, :visibility),
          s(:when,
            s(:sym, :all),
            s(:ivasgn, :@visibility,
              s(:sym, :private))),
          s(:ivasgn, :@visibility,
            s(:lvar, :visibility)))),
      s(:def, :warn,
        s(:args,
          s(:arg, :message)),
        s(:if,
          s(:send,
            s(:ivar, :@verbosity), :>,
            s(:int, 1)),
          s(:super,
            s(:lvar, :message)), nil)),
      s(:def, :write_options,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :RDoc), :load_yaml),
          s(:block,
            s(:send, nil, :open,
              s(:str, ".rdoc_options"),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Object), :const_defined?,
                  s(:sym, :Encoding)),
                s(:send,
                  s(:lvar, :io), :set_encoding,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8)), nil),
              s(:send,
                s(:const, nil, :YAML), :dump,
                s(:self),
                s(:lvar, :io)))))))))
