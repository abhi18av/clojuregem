s(:class,
  s(:const,
    s(:const, nil, :RDoc), :Stats), nil,
  s(:begin,
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :RDoc), :Text)),
    s(:send, nil, :attr_reader,
      s(:sym, :coverage_level)),
    s(:send, nil, :attr_reader,
      s(:sym, :files_so_far)),
    s(:send, nil, :attr_reader,
      s(:sym, :num_files)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :store),
        s(:arg, :num_files),
        s(:optarg, :verbosity,
          s(:int, 1))),
      s(:begin,
        s(:ivasgn, :@num_files,
          s(:lvar, :num_files)),
        s(:ivasgn, :@store,
          s(:lvar, :store)),
        s(:ivasgn, :@coverage_level,
          s(:int, 0)),
        s(:ivasgn, :@doc_items,
          s(:nil)),
        s(:ivasgn, :@files_so_far,
          s(:int, 0)),
        s(:ivasgn, :@fully_documented,
          s(:false)),
        s(:ivasgn, :@num_params,
          s(:int, 0)),
        s(:ivasgn, :@percent_doc,
          s(:nil)),
        s(:ivasgn, :@start,
          s(:send,
            s(:const, nil, :Time), :now)),
        s(:ivasgn, :@undoc_params,
          s(:int, 0)),
        s(:ivasgn, :@display,
          s(:case,
            s(:lvar, :verbosity),
            s(:when,
              s(:int, 0),
              s(:send,
                s(:const, nil, :Quiet), :new,
                s(:lvar, :num_files))),
            s(:when,
              s(:int, 1),
              s(:send,
                s(:const, nil, :Normal), :new,
                s(:lvar, :num_files))),
            s(:send,
              s(:const, nil, :Verbose), :new,
              s(:lvar, :num_files)))))),
    s(:def, :add_alias,
      s(:args,
        s(:arg, :as)),
      s(:send,
        s(:ivar, :@display), :print_alias,
        s(:lvar, :as))),
    s(:def, :add_attribute,
      s(:args,
        s(:arg, :attribute)),
      s(:send,
        s(:ivar, :@display), :print_attribute,
        s(:lvar, :attribute))),
    s(:def, :add_class,
      s(:args,
        s(:arg, :klass)),
      s(:send,
        s(:ivar, :@display), :print_class,
        s(:lvar, :klass))),
    s(:def, :add_constant,
      s(:args,
        s(:arg, :constant)),
      s(:send,
        s(:ivar, :@display), :print_constant,
        s(:lvar, :constant))),
    s(:def, :add_file,
      s(:args,
        s(:arg, :file)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@files_so_far), :+,
          s(:int, 1)),
        s(:send,
          s(:ivar, :@display), :print_file,
          s(:ivar, :@files_so_far),
          s(:lvar, :file)))),
    s(:def, :add_method,
      s(:args,
        s(:arg, :method)),
      s(:send,
        s(:ivar, :@display), :print_method,
        s(:lvar, :method))),
    s(:def, :add_module,
      s(:args,
        s(:arg, :mod)),
      s(:send,
        s(:ivar, :@display), :print_module,
        s(:lvar, :mod))),
    s(:def, :begin_adding,
      s(:args),
      s(:send,
        s(:ivar, :@display), :begin_adding)),
    s(:def, :calculate,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@doc_items),
          s(:return), nil),
        s(:lvasgn, :ucm,
          s(:send,
            s(:ivar, :@store), :unique_classes_and_modules)),
        s(:lvasgn, :classes,
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@store), :unique_classes), :reject),
            s(:args,
              s(:arg, :cm)),
            s(:send,
              s(:send,
                s(:lvar, :cm), :full_name), :==,
              s(:str, "Object")))),
        s(:lvasgn, :constants,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :ucm), :each),
          s(:args,
            s(:arg, :cm)),
          s(:send,
            s(:lvar, :constants), :concat,
            s(:send,
              s(:lvar, :cm), :constants))),
        s(:lvasgn, :methods,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :ucm), :each),
          s(:args,
            s(:arg, :cm)),
          s(:send,
            s(:lvar, :methods), :concat,
            s(:send,
              s(:lvar, :cm), :method_list))),
        s(:lvasgn, :attributes,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :ucm), :each),
          s(:args,
            s(:arg, :cm)),
          s(:send,
            s(:lvar, :attributes), :concat,
            s(:send,
              s(:lvar, :cm), :attributes))),
        s(:masgn,
          s(:mlhs,
            s(:ivasgn, :@num_attributes),
            s(:ivasgn, :@undoc_attributes)),
          s(:send, nil, :doc_stats,
            s(:lvar, :attributes))),
        s(:masgn,
          s(:mlhs,
            s(:ivasgn, :@num_classes),
            s(:ivasgn, :@undoc_classes)),
          s(:send, nil, :doc_stats,
            s(:lvar, :classes))),
        s(:masgn,
          s(:mlhs,
            s(:ivasgn, :@num_constants),
            s(:ivasgn, :@undoc_constants)),
          s(:send, nil, :doc_stats,
            s(:lvar, :constants))),
        s(:masgn,
          s(:mlhs,
            s(:ivasgn, :@num_methods),
            s(:ivasgn, :@undoc_methods)),
          s(:send, nil, :doc_stats,
            s(:lvar, :methods))),
        s(:masgn,
          s(:mlhs,
            s(:ivasgn, :@num_modules),
            s(:ivasgn, :@undoc_modules)),
          s(:send, nil, :doc_stats,
            s(:send,
              s(:ivar, :@store), :unique_modules))),
        s(:ivasgn, :@num_items,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@num_attributes), :+,
                    s(:ivar, :@num_classes)), :+,
                  s(:ivar, :@num_constants)), :+,
                s(:ivar, :@num_methods)), :+,
              s(:ivar, :@num_modules)), :+,
            s(:ivar, :@num_params))),
        s(:ivasgn, :@undoc_items,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@undoc_attributes), :+,
                    s(:ivar, :@undoc_classes)), :+,
                  s(:ivar, :@undoc_constants)), :+,
                s(:ivar, :@undoc_methods)), :+,
              s(:ivar, :@undoc_modules)), :+,
            s(:ivar, :@undoc_params))),
        s(:ivasgn, :@doc_items,
          s(:send,
            s(:ivar, :@num_items), :-,
            s(:ivar, :@undoc_items))))),
    s(:def, :coverage_level=,
      s(:args,
        s(:arg, :level)),
      s(:begin,
        s(:if,
          s(:lvar, :level), nil,
          s(:lvasgn, :level,
            s(:int, -1))),
        s(:ivasgn, :@coverage_level,
          s(:lvar, :level)))),
    s(:def, :doc_stats,
      s(:args,
        s(:arg, :collection)),
      s(:begin,
        s(:lvasgn, :visible,
          s(:block,
            s(:send,
              s(:lvar, :collection), :select),
            s(:args,
              s(:arg, :item)),
            s(:send,
              s(:lvar, :item), :display?))),
        s(:array,
          s(:send,
            s(:lvar, :visible), :length),
          s(:block,
            s(:send,
              s(:lvar, :visible), :count),
            s(:args,
              s(:arg, :item)),
            s(:send,
              s(:send,
                s(:lvar, :item), :documented?), :!))))),
    s(:def, :done_adding,
      s(:args),
      s(:send,
        s(:ivar, :@display), :done_adding)),
    s(:def, :fully_documented?,
      s(:args),
      s(:ivar, :@fully_documented)),
    s(:def, :great_job,
      s(:args),
      s(:begin,
        s(:lvasgn, :report,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new)),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
            s(:str, "100% documentation!"))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
            s(:str, "Great Job!"))),
        s(:lvar, :report))),
    s(:def, :percent_doc,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@percent_doc),
          s(:return,
            s(:ivar, :@percent_doc)), nil),
        s(:ivasgn, :@fully_documented,
          s(:send,
            s(:begin,
              s(:send,
                s(:ivar, :@num_items), :-,
                s(:ivar, :@doc_items))), :==,
            s(:int, 0))),
        s(:if,
          s(:send,
            s(:ivar, :@num_items), :nonzero?),
          s(:ivasgn, :@percent_doc,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@doc_items), :to_f), :/,
                s(:ivar, :@num_items)), :*,
              s(:int, 100))), nil),
        s(:or_asgn,
          s(:ivasgn, :@percent_doc),
          s(:int, 0)),
        s(:ivar, :@percent_doc))),
    s(:def, :report,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@coverage_level), :>,
            s(:int, 0)),
          s(:send, nil, :extend,
            s(:const,
              s(:const, nil, :RDoc), :Text)), nil),
        s(:if,
          s(:send,
            s(:ivar, :@coverage_level), :zero?),
          s(:begin,
            s(:send, nil, :calculate),
            s(:if,
              s(:send,
                s(:ivar, :@num_items), :==,
                s(:ivar, :@doc_items)),
              s(:return,
                s(:send, nil, :great_job)), nil)), nil),
        s(:lvasgn, :ucm,
          s(:send,
            s(:ivar, :@store), :unique_classes_and_modules)),
        s(:lvasgn, :report,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new)),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
            s(:str, "The following items are not documented:"))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :ucm), :sort), :each),
          s(:args,
            s(:arg, :cm)),
          s(:begin,
            s(:lvasgn, :body,
              s(:block,
                s(:send, nil, :report_class_module,
                  s(:lvar, :cm)),
                s(:args),
                s(:send,
                  s(:array,
                    s(:send, nil, :report_constants,
                      s(:lvar, :cm)),
                    s(:send, nil, :report_attributes,
                      s(:lvar, :cm)),
                    s(:send, nil, :report_methods,
                      s(:lvar, :cm))), :compact))),
            s(:if,
              s(:lvar, :body),
              s(:send,
                s(:lvar, :report), :<<,
                s(:lvar, :body)), nil))),
        s(:if,
          s(:send,
            s(:ivar, :@coverage_level), :>,
            s(:int, 0)),
          s(:begin,
            s(:send, nil, :calculate),
            s(:if,
              s(:send,
                s(:ivar, :@num_items), :==,
                s(:ivar, :@doc_items)),
              s(:return,
                s(:send, nil, :great_job)), nil)), nil),
        s(:lvar, :report))),
    s(:def, :report_attributes,
      s(:args,
        s(:arg, :cm)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :cm), :attributes), :empty?),
          s(:return), nil),
        s(:lvasgn, :report,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :cm), :each_attribute),
          s(:args,
            s(:arg, :attr)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :attr), :documented?),
              s(:next), nil),
            s(:lvasgn, :line,
              s(:if,
                s(:send,
                  s(:lvar, :attr), :line),
                s(:dstr,
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :attr), :line))),
                s(:nil))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:dstr,
                s(:str, "  "),
                s(:begin,
                  s(:send,
                    s(:lvar, :attr), :definition)),
                s(:str, " :"),
                s(:begin,
                  s(:send,
                    s(:lvar, :attr), :name)),
                s(:str, " # in file "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :attr), :file), :full_name)),
                s(:begin,
                  s(:lvar, :line)),
                s(:str, "\n"))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:str, "\n")))),
        s(:lvar, :report))),
    s(:def, :report_class_module,
      s(:args,
        s(:arg, :cm)),
      s(:begin,
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :cm), :fully_documented?),
            s(:send,
              s(:ivar, :@coverage_level), :zero?)),
          s(:return), nil),
        s(:if,
          s(:send,
            s(:lvar, :cm), :display?), nil,
          s(:return)),
        s(:lvasgn, :report,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Document), :new)),
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :cm), :in_files), :empty?),
          s(:begin,
            s(:send,
              s(:lvar, :report), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :cm), :definition)),
                  s(:str, " is referenced but empty.")))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                s(:str, "It probably came from another project.  I'm sorry I'm holding it against you."))),
            s(:return,
              s(:lvar, :report))),
          s(:if,
            s(:send,
              s(:lvar, :cm), :documented?),
            s(:begin,
              s(:lvasgn, :documented,
                s(:true)),
              s(:lvasgn, :klass,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :cm), :definition)),
                    s(:str, " # is documented\n"))))),
            s(:begin,
              s(:send,
                s(:lvar, :report), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                  s(:str, "In files:"))),
              s(:lvasgn, :list,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :List), :new,
                  s(:sym, :BULLET))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :cm), :in_files), :each),
                s(:args,
                  s(:arg, :file)),
                s(:begin,
                  s(:lvasgn, :para,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :RDoc), :Markup), :Paragraph), :new,
                      s(:send,
                        s(:lvar, :file), :full_name))),
                  s(:send,
                    s(:lvar, :list), :<<,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :RDoc), :Markup), :ListItem), :new,
                      s(:nil),
                      s(:lvar, :para))))),
              s(:send,
                s(:lvar, :report), :<<,
                s(:lvar, :list)),
              s(:send,
                s(:lvar, :report), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :BlankLine), :new)),
              s(:lvasgn, :klass,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :RDoc), :Markup), :Verbatim), :new,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :cm), :definition)),
                    s(:str, "\n"))))))),
        s(:send,
          s(:lvar, :klass), :<<,
          s(:str, "\n")),
        s(:lvasgn, :body,
          s(:send,
            s(:yield), :flatten)),
        s(:if,
          s(:send,
            s(:lvar, :body), :empty?),
          s(:begin,
            s(:if,
              s(:lvar, :documented),
              s(:return), nil),
            s(:send,
              s(:send,
                s(:lvar, :klass), :parts), :pop)),
          s(:send,
            s(:send,
              s(:lvar, :klass), :parts), :concat,
            s(:lvar, :body))),
        s(:send,
          s(:lvar, :klass), :<<,
          s(:str, "end\n")),
        s(:send,
          s(:lvar, :report), :<<,
          s(:lvar, :klass)),
        s(:lvar, :report))),
    s(:def, :report_constants,
      s(:args,
        s(:arg, :cm)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :cm), :constants), :empty?),
          s(:return), nil),
        s(:lvasgn, :report,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :cm), :each_constant),
          s(:args,
            s(:arg, :constant)),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :constant), :documented?),
                s(:send,
                  s(:lvar, :constant), :is_alias_for)),
              s(:next), nil),
            s(:lvasgn, :line,
              s(:if,
                s(:send,
                  s(:lvar, :constant), :line),
                s(:dstr,
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :constant), :line))),
                s(:lvar, :line))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:dstr,
                s(:str, "  # in file "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :constant), :file), :full_name)),
                s(:begin,
                  s(:lvar, :line)),
                s(:str, "\n"))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:dstr,
                s(:str, "  "),
                s(:begin,
                  s(:send,
                    s(:lvar, :constant), :name)),
                s(:str, " = nil\n"))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:str, "\n")))),
        s(:lvar, :report))),
    s(:def, :report_methods,
      s(:args,
        s(:arg, :cm)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :cm), :method_list), :empty?),
          s(:return), nil),
        s(:lvasgn, :report,
          s(:array)),
        s(:block,
          s(:send,
            s(:lvar, :cm), :each_method),
          s(:args,
            s(:arg, :method)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :method), :documented?),
                s(:send,
                  s(:ivar, :@coverage_level), :zero?)),
              s(:next), nil),
            s(:if,
              s(:send,
                s(:ivar, :@coverage_level), :>,
                s(:int, 0)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :params),
                    s(:lvasgn, :undoc)),
                  s(:send, nil, :undoc_params,
                    s(:lvar, :method))),
                s(:op_asgn,
                  s(:ivasgn, :@num_params), :+,
                  s(:lvar, :params)),
                s(:if,
                  s(:send,
                    s(:lvar, :undoc), :empty?), nil,
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@undoc_params), :+,
                      s(:send,
                        s(:lvar, :undoc), :length)),
                    s(:lvasgn, :undoc,
                      s(:block,
                        s(:send,
                          s(:lvar, :undoc), :map),
                        s(:args,
                          s(:arg, :param)),
                        s(:dstr,
                          s(:str, "+"),
                          s(:begin,
                            s(:lvar, :param)),
                          s(:str, "+")))),
                    s(:lvasgn, :param_report,
                      s(:dstr,
                        s(:str, "  # "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :undoc), :join,
                            s(:str, ", "))),
                        s(:str, " is not documented\n")))))), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :method), :documented?),
                s(:send,
                  s(:lvar, :param_report), :!)),
              s(:next), nil),
            s(:lvasgn, :line,
              s(:if,
                s(:send,
                  s(:lvar, :method), :line),
                s(:dstr,
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :method), :line))),
                s(:nil))),
            s(:lvasgn, :scope,
              s(:if,
                s(:send,
                  s(:lvar, :method), :singleton),
                s(:str, "self."),
                s(:nil))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:dstr,
                s(:str, "  # in file "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :method), :file), :full_name)),
                s(:begin,
                  s(:lvar, :line)),
                s(:str, "\n"))),
            s(:if,
              s(:lvar, :param_report),
              s(:send,
                s(:lvar, :report), :<<,
                s(:lvar, :param_report)), nil),
            s(:send,
              s(:lvar, :report), :<<,
              s(:dstr,
                s(:str, "  def "),
                s(:begin,
                  s(:lvar, :scope)),
                s(:begin,
                  s(:send,
                    s(:lvar, :method), :name)),
                s(:begin,
                  s(:send,
                    s(:lvar, :method), :params)),
                s(:str, "; end\n"))),
            s(:send,
              s(:lvar, :report), :<<,
              s(:str, "\n")))),
        s(:lvar, :report))),
    s(:def, :summary,
      s(:args),
      s(:begin,
        s(:send, nil, :calculate),
        s(:lvasgn, :num_width,
          s(:send,
            s(:send,
              s(:send,
                s(:array,
                  s(:ivar, :@num_files),
                  s(:ivar, :@num_items)), :max), :to_s), :length)),
        s(:lvasgn, :undoc_width,
          s(:send,
            s(:send,
              s(:send,
                s(:array,
                  s(:ivar, :@undoc_attributes),
                  s(:ivar, :@undoc_classes),
                  s(:ivar, :@undoc_constants),
                  s(:ivar, :@undoc_items),
                  s(:ivar, :@undoc_methods),
                  s(:ivar, :@undoc_modules),
                  s(:ivar, :@undoc_params)), :max), :to_s), :length)),
        s(:lvasgn, :report,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :Verbatim), :new)),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Files:      %*d\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_files)))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:str, "\n")),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Classes:    %*d (%*d undocumented)\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_classes),
              s(:lvar, :undoc_width),
              s(:ivar, :@undoc_classes)))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Modules:    %*d (%*d undocumented)\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_modules),
              s(:lvar, :undoc_width),
              s(:ivar, :@undoc_modules)))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Constants:  %*d (%*d undocumented)\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_constants),
              s(:lvar, :undoc_width),
              s(:ivar, :@undoc_constants)))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Attributes: %*d (%*d undocumented)\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_attributes),
              s(:lvar, :undoc_width),
              s(:ivar, :@undoc_attributes)))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Methods:    %*d (%*d undocumented)\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_methods),
              s(:lvar, :undoc_width),
              s(:ivar, :@undoc_methods)))),
        s(:if,
          s(:send,
            s(:ivar, :@coverage_level), :>,
            s(:int, 0)),
          s(:send,
            s(:lvar, :report), :<<,
            s(:send,
              s(:str, "Parameters: %*d (%*d undocumented)\n"), :%,
              s(:array,
                s(:lvar, :num_width),
                s(:ivar, :@num_params),
                s(:lvar, :undoc_width),
                s(:ivar, :@undoc_params)))), nil),
        s(:send,
          s(:lvar, :report), :<<,
          s(:str, "\n")),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Total:      %*d (%*d undocumented)\n"), :%,
            s(:array,
              s(:lvar, :num_width),
              s(:ivar, :@num_items),
              s(:lvar, :undoc_width),
              s(:ivar, :@undoc_items)))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "%6.2f%% documented\n"), :%,
            s(:send, nil, :percent_doc))),
        s(:send,
          s(:lvar, :report), :<<,
          s(:str, "\n")),
        s(:send,
          s(:lvar, :report), :<<,
          s(:send,
            s(:str, "Elapsed: %0.1fs\n"), :%,
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :Time), :now), :-,
                s(:ivar, :@start))))),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :RDoc), :Markup), :Document), :new,
          s(:lvar, :report)))),
    s(:def, :undoc_params,
      s(:args,
        s(:arg, :method)),
      s(:begin,
        s(:or_asgn,
          s(:ivasgn, :@formatter),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :RDoc), :Markup), :ToTtOnly), :new)),
        s(:lvasgn, :params,
          s(:send,
            s(:lvar, :method), :param_list)),
        s(:lvasgn, :params,
          s(:block,
            s(:send,
              s(:lvar, :params), :map),
            s(:args,
              s(:arg, :param)),
            s(:send,
              s(:lvar, :param), :gsub,
              s(:regexp,
                s(:str, "^\\*\\*?"),
                s(:regopt)),
              s(:str, "")))),
        s(:if,
          s(:send,
            s(:lvar, :params), :empty?),
          s(:return,
            s(:int, 0),
            s(:array)), nil),
        s(:lvasgn, :document,
          s(:send, nil, :parse,
            s(:send,
              s(:lvar, :method), :comment))),
        s(:lvasgn, :tts,
          s(:send,
            s(:lvar, :document), :accept,
            s(:ivar, :@formatter))),
        s(:lvasgn, :undoc,
          s(:send,
            s(:lvar, :params), :-,
            s(:lvar, :tts))),
        s(:array,
          s(:send,
            s(:lvar, :params), :length),
          s(:lvar, :undoc)))),
    s(:send, nil, :autoload,
      s(:sym, :Quiet),
      s(:str, "rdoc/stats/quiet")),
    s(:send, nil, :autoload,
      s(:sym, :Normal),
      s(:str, "rdoc/stats/normal")),
    s(:send, nil, :autoload,
      s(:sym, :Verbose),
      s(:str, "rdoc/stats/verbose"))))
