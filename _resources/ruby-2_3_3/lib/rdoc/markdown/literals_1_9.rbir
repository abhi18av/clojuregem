s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :RDoc), :Markdown), :Literals), nil,
  s(:begin,
    s(:def, :initialize,
      s(:args,
        s(:arg, :str),
        s(:optarg, :debug,
          s(:false))),
      s(:send, nil, :setup_parser,
        s(:lvar, :str),
        s(:lvar, :debug))),
    s(:def, :setup_parser,
      s(:args,
        s(:arg, :str),
        s(:optarg, :debug,
          s(:false))),
      s(:begin,
        s(:send, nil, :set_string,
          s(:lvar, :str),
          s(:int, 0)),
        s(:ivasgn, :@memoizations,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :h),
              s(:arg, :k)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :k),
              s(:hash)))),
        s(:ivasgn, :@result,
          s(:nil)),
        s(:ivasgn, :@failed_rule,
          s(:nil)),
        s(:ivasgn, :@failing_rule_offset,
          s(:int, -1)),
        s(:send, nil, :setup_foreign_grammar))),
    s(:send, nil, :attr_reader,
      s(:sym, :string)),
    s(:send, nil, :attr_reader,
      s(:sym, :failing_rule_offset)),
    s(:send, nil, :attr_accessor,
      s(:sym, :result),
      s(:sym, :pos)),
    s(:def, :current_column,
      s(:args,
        s(:optarg, :target,
          s(:send, nil, :pos))),
      s(:begin,
        s(:if,
          s(:lvasgn, :c,
            s(:send,
              s(:send, nil, :string), :rindex,
              s(:str, "\n"),
              s(:send,
                s(:lvar, :target), :-,
                s(:int, 1)))),
          s(:return,
            s(:send,
              s(:send,
                s(:lvar, :target), :-,
                s(:lvar, :c)), :-,
              s(:int, 1))), nil),
        s(:send,
          s(:lvar, :target), :+,
          s(:int, 1)))),
    s(:def, :current_line,
      s(:args,
        s(:optarg, :target,
          s(:send, nil, :pos))),
      s(:begin,
        s(:lvasgn, :cur_offset,
          s(:int, 0)),
        s(:lvasgn, :cur_line,
          s(:int, 0)),
        s(:block,
          s(:send,
            s(:send, nil, :string), :each_line),
          s(:args,
            s(:arg, :line)),
          s(:begin,
            s(:op_asgn,
              s(:lvasgn, :cur_line), :+,
              s(:int, 1)),
            s(:op_asgn,
              s(:lvasgn, :cur_offset), :+,
              s(:send,
                s(:lvar, :line), :size)),
            s(:if,
              s(:send,
                s(:lvar, :cur_offset), :>=,
                s(:lvar, :target)),
              s(:return,
                s(:lvar, :cur_line)), nil))),
        s(:int, -1))),
    s(:def, :lines,
      s(:args),
      s(:begin,
        s(:lvasgn, :lines,
          s(:array)),
        s(:block,
          s(:send,
            s(:send, nil, :string), :each_line),
          s(:args,
            s(:arg, :l)),
          s(:send,
            s(:lvar, :lines), :<<,
            s(:lvar, :l))),
        s(:lvar, :lines))),
    s(:def, :get_text,
      s(:args,
        s(:arg, :start)),
      s(:send,
        s(:ivar, :@string), :[],
        s(:irange,
          s(:lvar, :start),
          s(:send,
            s(:ivar, :@pos), :-,
            s(:int, 1))))),
    s(:def, :set_string,
      s(:args,
        s(:arg, :string),
        s(:arg, :pos)),
      s(:begin,
        s(:ivasgn, :@string,
          s(:lvar, :string)),
        s(:ivasgn, :@string_size,
          s(:if,
            s(:lvar, :string),
            s(:send,
              s(:lvar, :string), :size),
            s(:int, 0))),
        s(:ivasgn, :@pos,
          s(:lvar, :pos)))),
    s(:def, :show_pos,
      s(:args),
      s(:begin,
        s(:lvasgn, :width,
          s(:int, 10)),
        s(:if,
          s(:send,
            s(:ivar, :@pos), :<,
            s(:lvar, :width)),
          s(:dstr,
            s(:begin,
              s(:ivar, :@pos)),
            s(:str, " (\""),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:int, 0),
                s(:ivar, :@pos))),
            s(:str, "\" @ \""),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:ivar, :@pos),
                s(:lvar, :width))),
            s(:str, "\")")),
          s(:dstr,
            s(:begin,
              s(:ivar, :@pos)),
            s(:str, " (\"... "),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:send,
                  s(:ivar, :@pos), :-,
                  s(:lvar, :width)),
                s(:lvar, :width))),
            s(:str, "\" @ \""),
            s(:begin,
              s(:send,
                s(:ivar, :@string), :[],
                s(:ivar, :@pos),
                s(:lvar, :width))),
            s(:str, "\")"))))),
    s(:def, :failure_info,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:if,
          s(:send,
            s(:ivar, :@failed_rule), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:begin,
            s(:lvasgn, :info,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :Rules), :[],
                s(:ivar, :@failed_rule))),
            s(:dstr,
              s(:str, "line "),
              s(:begin,
                s(:lvar, :l)),
              s(:str, ", column "),
              s(:begin,
                s(:lvar, :c)),
              s(:str, ": failed rule '"),
              s(:begin,
                s(:send,
                  s(:lvar, :info), :name)),
              s(:str, "' = '"),
              s(:begin,
                s(:send,
                  s(:lvar, :info), :rendered)),
              s(:str, "'"))),
          s(:dstr,
            s(:str, "line "),
            s(:begin,
              s(:lvar, :l)),
            s(:str, ", column "),
            s(:begin,
              s(:lvar, :c)),
            s(:str, ": failed rule '"),
            s(:begin,
              s(:ivar, :@failed_rule)),
            s(:str, "'"))))),
    s(:def, :failure_caret,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :line,
          s(:send,
            s(:send, nil, :lines), :[],
            s(:send,
              s(:lvar, :l), :-,
              s(:int, 1)))),
        s(:dstr,
          s(:begin,
            s(:lvar, :line)),
          s(:str, "\n"),
          s(:begin,
            s(:send,
              s(:str, " "), :*,
              s(:begin,
                s(:send,
                  s(:lvar, :c), :-,
                  s(:int, 1))))),
          s(:str, "^")))),
    s(:def, :failure_character,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:send,
          s(:send,
            s(:send, nil, :lines), :[],
            s(:send,
              s(:lvar, :l), :-,
              s(:int, 1))), :[],
          s(:send,
            s(:lvar, :c), :-,
            s(:int, 1)),
          s(:int, 1)))),
    s(:def, :failure_oneline,
      s(:args),
      s(:begin,
        s(:lvasgn, :l,
          s(:send, nil, :current_line,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :c,
          s(:send, nil, :current_column,
            s(:ivar, :@failing_rule_offset))),
        s(:lvasgn, :char,
          s(:send,
            s(:send,
              s(:send, nil, :lines), :[],
              s(:send,
                s(:lvar, :l), :-,
                s(:int, 1))), :[],
            s(:send,
              s(:lvar, :c), :-,
              s(:int, 1)),
            s(:int, 1))),
        s(:if,
          s(:send,
            s(:ivar, :@failed_rule), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:begin,
            s(:lvasgn, :info,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :Rules), :[],
                s(:ivar, :@failed_rule))),
            s(:dstr,
              s(:str, "@"),
              s(:begin,
                s(:lvar, :l)),
              s(:str, ":"),
              s(:begin,
                s(:lvar, :c)),
              s(:str, " failed rule '"),
              s(:begin,
                s(:send,
                  s(:lvar, :info), :name)),
              s(:str, "', got '"),
              s(:begin,
                s(:lvar, :char)),
              s(:str, "'"))),
          s(:dstr,
            s(:str, "@"),
            s(:begin,
              s(:lvar, :l)),
            s(:str, ":"),
            s(:begin,
              s(:lvar, :c)),
            s(:str, " failed rule '"),
            s(:begin,
              s(:ivar, :@failed_rule)),
            s(:str, "', got '"),
            s(:begin,
              s(:lvar, :char)),
            s(:str, "'"))))),
    s(:class,
      s(:const, nil, :ParseError),
      s(:const, nil, :RuntimeError), nil),
    s(:def, :raise_error,
      s(:args),
      s(:send, nil, :raise,
        s(:const, nil, :ParseError),
        s(:send, nil, :failure_oneline))),
    s(:def, :show_error,
      s(:args,
        s(:optarg, :io,
          s(:const, nil, :STDOUT))),
      s(:begin,
        s(:lvasgn, :error_pos,
          s(:ivar, :@failing_rule_offset)),
        s(:lvasgn, :line_no,
          s(:send, nil, :current_line,
            s(:lvar, :error_pos))),
        s(:lvasgn, :col_no,
          s(:send, nil, :current_column,
            s(:lvar, :error_pos))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:dstr,
            s(:str, "On line "),
            s(:begin,
              s(:lvar, :line_no)),
            s(:str, ", column "),
            s(:begin,
              s(:lvar, :col_no)),
            s(:str, ":"))),
        s(:if,
          s(:send,
            s(:ivar, :@failed_rule), :kind_of?,
            s(:const, nil, :Symbol)),
          s(:begin,
            s(:lvasgn, :info,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :Rules), :[],
                s(:ivar, :@failed_rule))),
            s(:send,
              s(:lvar, :io), :puts,
              s(:dstr,
                s(:str, "Failed to match '"),
                s(:begin,
                  s(:send,
                    s(:lvar, :info), :rendered)),
                s(:str, "' (rule '"),
                s(:begin,
                  s(:send,
                    s(:lvar, :info), :name)),
                s(:str, "')")))),
          s(:send,
            s(:lvar, :io), :puts,
            s(:dstr,
              s(:str, "Failed to match rule '"),
              s(:begin,
                s(:ivar, :@failed_rule)),
              s(:str, "'")))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:dstr,
            s(:str, "Got: "),
            s(:begin,
              s(:send,
                s(:send,
                  s(:send, nil, :string), :[],
                  s(:lvar, :error_pos),
                  s(:int, 1)), :inspect)))),
        s(:lvasgn, :line,
          s(:send,
            s(:send, nil, :lines), :[],
            s(:send,
              s(:lvar, :line_no), :-,
              s(:int, 1)))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:dstr,
            s(:str, "=> "),
            s(:begin,
              s(:lvar, :line)))),
        s(:send,
          s(:lvar, :io), :print,
          s(:send,
            s(:str, " "), :*,
            s(:begin,
              s(:send,
                s(:lvar, :col_no), :+,
                s(:int, 3))))),
        s(:send,
          s(:lvar, :io), :puts,
          s(:str, "^")))),
    s(:def, :set_failed_rule,
      s(:args,
        s(:arg, :name)),
      s(:if,
        s(:send,
          s(:ivar, :@pos), :>,
          s(:ivar, :@failing_rule_offset)),
        s(:begin,
          s(:ivasgn, :@failed_rule,
            s(:lvar, :name)),
          s(:ivasgn, :@failing_rule_offset,
            s(:ivar, :@pos))), nil)),
    s(:send, nil, :attr_reader,
      s(:sym, :failed_rule)),
    s(:def, :match_string,
      s(:args,
        s(:arg, :str)),
      s(:begin,
        s(:lvasgn, :len,
          s(:send,
            s(:lvar, :str), :size)),
        s(:if,
          s(:send,
            s(:send,
              s(:ivar, :@string), :[],
              s(:send, nil, :pos),
              s(:lvar, :len)), :==,
            s(:lvar, :str)),
          s(:begin,
            s(:op_asgn,
              s(:ivasgn, :@pos), :+,
              s(:lvar, :len)),
            s(:return,
              s(:lvar, :str))), nil),
        s(:return,
          s(:nil)))),
    s(:def, :scan,
      s(:args,
        s(:arg, :reg)),
      s(:begin,
        s(:if,
          s(:lvasgn, :m,
            s(:send,
              s(:lvar, :reg), :match,
              s(:send,
                s(:ivar, :@string), :[],
                s(:irange,
                  s(:ivar, :@pos),
                  s(:int, -1))))),
          s(:begin,
            s(:lvasgn, :width,
              s(:send,
                s(:lvar, :m), :end,
                s(:int, 0))),
            s(:op_asgn,
              s(:ivasgn, :@pos), :+,
              s(:lvar, :width)),
            s(:return,
              s(:true))), nil),
        s(:return,
          s(:nil)))),
    s(:if,
      s(:send,
        s(:str, ""), :respond_to?,
        s(:sym, :ord)),
      s(:def, :get_byte,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@pos), :>=,
              s(:ivar, :@string_size)),
            s(:return,
              s(:nil)), nil),
          s(:lvasgn, :s,
            s(:send,
              s(:send,
                s(:ivar, :@string), :[],
                s(:ivar, :@pos)), :ord)),
          s(:op_asgn,
            s(:ivasgn, :@pos), :+,
            s(:int, 1)),
          s(:lvar, :s))),
      s(:def, :get_byte,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@pos), :>=,
              s(:ivar, :@string_size)),
            s(:return,
              s(:nil)), nil),
          s(:lvasgn, :s,
            s(:send,
              s(:ivar, :@string), :[],
              s(:ivar, :@pos))),
          s(:op_asgn,
            s(:ivasgn, :@pos), :+,
            s(:int, 1)),
          s(:lvar, :s)))),
    s(:def, :parse,
      s(:args,
        s(:optarg, :rule,
          s(:nil))),
      s(:if,
        s(:send,
          s(:lvar, :rule), :!),
        s(:send, nil, :apply,
          s(:sym, :_root)),
        s(:begin,
          s(:lvasgn, :method,
            s(:send,
              s(:lvar, :rule), :gsub,
              s(:str, "-"),
              s(:str, "_hyphen_"))),
          s(:send, nil, :apply,
            s(:dsym,
              s(:str, "_"),
              s(:begin,
                s(:lvar, :method))))))),
    s(:class,
      s(:const, nil, :MemoEntry), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :ans),
            s(:arg, :pos)),
          s(:begin,
            s(:ivasgn, :@ans,
              s(:lvar, :ans)),
            s(:ivasgn, :@pos,
              s(:lvar, :pos)),
            s(:ivasgn, :@result,
              s(:nil)),
            s(:ivasgn, :@set,
              s(:false)),
            s(:ivasgn, :@left_rec,
              s(:false)))),
        s(:send, nil, :attr_reader,
          s(:sym, :ans),
          s(:sym, :pos),
          s(:sym, :result),
          s(:sym, :set)),
        s(:send, nil, :attr_accessor,
          s(:sym, :left_rec)),
        s(:def, :move!,
          s(:args,
            s(:arg, :ans),
            s(:arg, :pos),
            s(:arg, :result)),
          s(:begin,
            s(:ivasgn, :@ans,
              s(:lvar, :ans)),
            s(:ivasgn, :@pos,
              s(:lvar, :pos)),
            s(:ivasgn, :@result,
              s(:lvar, :result)),
            s(:ivasgn, :@set,
              s(:true)),
            s(:ivasgn, :@left_rec,
              s(:false)))))),
    s(:def, :external_invoke,
      s(:args,
        s(:arg, :other),
        s(:arg, :rule),
        s(:restarg, :args)),
      s(:begin,
        s(:lvasgn, :old_pos,
          s(:ivar, :@pos)),
        s(:lvasgn, :old_string,
          s(:ivar, :@string)),
        s(:send, nil, :set_string,
          s(:send,
            s(:lvar, :other), :string),
          s(:send,
            s(:lvar, :other), :pos)),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:if,
                s(:lvasgn, :val,
                  s(:send, nil, :__send__,
                    s(:lvar, :rule),
                    s(:splat,
                      s(:lvar, :args)))),
                s(:begin,
                  s(:send,
                    s(:lvar, :other), :pos=,
                    s(:ivar, :@pos)),
                  s(:send,
                    s(:lvar, :other), :result=,
                    s(:ivar, :@result))),
                s(:send,
                  s(:lvar, :other), :set_failed_rule,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, "#"),
                    s(:begin,
                      s(:lvar, :rule))))),
              s(:lvar, :val)),
            s(:send, nil, :set_string,
              s(:lvar, :old_string),
              s(:lvar, :old_pos)))))),
    s(:def, :apply_with_args,
      s(:args,
        s(:arg, :rule),
        s(:restarg, :args)),
      s(:begin,
        s(:lvasgn, :memo_key,
          s(:array,
            s(:lvar, :rule),
            s(:lvar, :args))),
        s(:if,
          s(:lvasgn, :m,
            s(:send,
              s(:send,
                s(:ivar, :@memoizations), :[],
                s(:lvar, :memo_key)), :[],
              s(:ivar, :@pos))),
          s(:begin,
            s(:ivasgn, :@pos,
              s(:send,
                s(:lvar, :m), :pos)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :m), :set), :!),
              s(:begin,
                s(:send,
                  s(:lvar, :m), :left_rec=,
                  s(:true)),
                s(:return,
                  s(:nil))), nil),
            s(:ivasgn, :@result,
              s(:send,
                s(:lvar, :m), :result)),
            s(:return,
              s(:send,
                s(:lvar, :m), :ans))),
          s(:begin,
            s(:lvasgn, :m,
              s(:send,
                s(:const, nil, :MemoEntry), :new,
                s(:nil),
                s(:ivar, :@pos))),
            s(:send,
              s(:send,
                s(:ivar, :@memoizations), :[],
                s(:lvar, :memo_key)), :[]=,
              s(:ivar, :@pos),
              s(:lvar, :m)),
            s(:lvasgn, :start_pos,
              s(:ivar, :@pos)),
            s(:lvasgn, :ans,
              s(:send, nil, :__send__,
                s(:lvar, :rule),
                s(:splat,
                  s(:lvar, :args)))),
            s(:lvasgn, :lr,
              s(:send,
                s(:lvar, :m), :left_rec)),
            s(:send,
              s(:lvar, :m), :move!,
              s(:lvar, :ans),
              s(:ivar, :@pos),
              s(:ivar, :@result)),
            s(:if,
              s(:and,
                s(:lvar, :ans),
                s(:lvar, :lr)),
              s(:return,
                s(:send, nil, :grow_lr,
                  s(:lvar, :rule),
                  s(:lvar, :args),
                  s(:lvar, :start_pos),
                  s(:lvar, :m))),
              s(:return,
                s(:lvar, :ans))),
            s(:return,
              s(:lvar, :ans)))))),
    s(:def, :apply,
      s(:args,
        s(:arg, :rule)),
      s(:if,
        s(:lvasgn, :m,
          s(:send,
            s(:send,
              s(:ivar, :@memoizations), :[],
              s(:lvar, :rule)), :[],
            s(:ivar, :@pos))),
        s(:begin,
          s(:ivasgn, :@pos,
            s(:send,
              s(:lvar, :m), :pos)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :m), :set), :!),
            s(:begin,
              s(:send,
                s(:lvar, :m), :left_rec=,
                s(:true)),
              s(:return,
                s(:nil))), nil),
          s(:ivasgn, :@result,
            s(:send,
              s(:lvar, :m), :result)),
          s(:return,
            s(:send,
              s(:lvar, :m), :ans))),
        s(:begin,
          s(:lvasgn, :m,
            s(:send,
              s(:const, nil, :MemoEntry), :new,
              s(:nil),
              s(:ivar, :@pos))),
          s(:send,
            s(:send,
              s(:ivar, :@memoizations), :[],
              s(:lvar, :rule)), :[]=,
            s(:ivar, :@pos),
            s(:lvar, :m)),
          s(:lvasgn, :start_pos,
            s(:ivar, :@pos)),
          s(:lvasgn, :ans,
            s(:send, nil, :__send__,
              s(:lvar, :rule))),
          s(:lvasgn, :lr,
            s(:send,
              s(:lvar, :m), :left_rec)),
          s(:send,
            s(:lvar, :m), :move!,
            s(:lvar, :ans),
            s(:ivar, :@pos),
            s(:ivar, :@result)),
          s(:if,
            s(:and,
              s(:lvar, :ans),
              s(:lvar, :lr)),
            s(:return,
              s(:send, nil, :grow_lr,
                s(:lvar, :rule),
                s(:nil),
                s(:lvar, :start_pos),
                s(:lvar, :m))),
            s(:return,
              s(:lvar, :ans))),
          s(:return,
            s(:lvar, :ans))))),
    s(:def, :grow_lr,
      s(:args,
        s(:arg, :rule),
        s(:arg, :args),
        s(:arg, :start_pos),
        s(:arg, :m)),
      s(:begin,
        s(:while,
          s(:true),
          s(:begin,
            s(:ivasgn, :@pos,
              s(:lvar, :start_pos)),
            s(:ivasgn, :@result,
              s(:send,
                s(:lvar, :m), :result)),
            s(:if,
              s(:lvar, :args),
              s(:lvasgn, :ans,
                s(:send, nil, :__send__,
                  s(:lvar, :rule),
                  s(:splat,
                    s(:lvar, :args)))),
              s(:lvasgn, :ans,
                s(:send, nil, :__send__,
                  s(:lvar, :rule)))),
            s(:if,
              s(:lvar, :ans), nil,
              s(:return,
                s(:nil))),
            s(:if,
              s(:send,
                s(:ivar, :@pos), :<=,
                s(:send,
                  s(:lvar, :m), :pos)),
              s(:break), nil),
            s(:send,
              s(:lvar, :m), :move!,
              s(:lvar, :ans),
              s(:ivar, :@pos),
              s(:ivar, :@result)))),
        s(:ivasgn, :@result,
          s(:send,
            s(:lvar, :m), :result)),
        s(:ivasgn, :@pos,
          s(:send,
            s(:lvar, :m), :pos)),
        s(:return,
          s(:send,
            s(:lvar, :m), :ans)))),
    s(:class,
      s(:const, nil, :RuleInfo), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :name),
            s(:arg, :rendered)),
          s(:begin,
            s(:ivasgn, :@name,
              s(:lvar, :name)),
            s(:ivasgn, :@rendered,
              s(:lvar, :rendered)))),
        s(:send, nil, :attr_reader,
          s(:sym, :name),
          s(:sym, :rendered)))),
    s(:defs,
      s(:self), :rule_info,
      s(:args,
        s(:arg, :name),
        s(:arg, :rendered)),
      s(:send,
        s(:const, nil, :RuleInfo), :new,
        s(:lvar, :name),
        s(:lvar, :rendered))),
    s(:def, :setup_foreign_grammar,
      s(:args), nil),
    s(:def, :_Alphanumeric,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix:\\p{Word})"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Alphanumeric))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_AlphanumericAscii,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix:[A-Za-z0-9])"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_AlphanumericAscii))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_BOM,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :match_string,
            s(:str, "uFEFF"))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_BOM))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Newline,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix:\\n|\\r\\n?|\\p{Zl}|\\p{Zp})"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Newline))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_NonAlphanumeric,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix:\\p{^Word})"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_NonAlphanumeric))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:def, :_Spacechar,
      s(:args),
      s(:begin,
        s(:lvasgn, :_tmp,
          s(:send, nil, :scan,
            s(:regexp,
              s(:str, "\\A(?-mix:\\t|\\p{Zs})"),
              s(:regopt)))),
        s(:if,
          s(:lvar, :_tmp), nil,
          s(:send, nil, :set_failed_rule,
            s(:sym, :_Spacechar))),
        s(:return,
          s(:lvar, :_tmp)))),
    s(:casgn, nil, :Rules,
      s(:hash)),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Alphanumeric),
      s(:send, nil, :rule_info,
        s(:str, "Alphanumeric"),
        s(:str, "/\\p{Word}/"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_AlphanumericAscii),
      s(:send, nil, :rule_info,
        s(:str, "AlphanumericAscii"),
        s(:str, "/[A-Za-z0-9]/"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_BOM),
      s(:send, nil, :rule_info,
        s(:str, "BOM"),
        s(:str, "\"uFEFF\""))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Newline),
      s(:send, nil, :rule_info,
        s(:str, "Newline"),
        s(:str, "/\\n|\\r\\n?|\\p{Zl}|\\p{Zp}/"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_NonAlphanumeric),
      s(:send, nil, :rule_info,
        s(:str, "NonAlphanumeric"),
        s(:str, "/\\p{^Word}/"))),
    s(:send,
      s(:const, nil, :Rules), :[]=,
      s(:sym, :_Spacechar),
      s(:send, nil, :rule_info,
        s(:str, "Spacechar"),
        s(:str, "/\\t|\\p{Zs}/")))))
