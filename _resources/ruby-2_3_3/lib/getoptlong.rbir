s(:class,
  s(:const, nil, :GetoptLong), nil,
  s(:begin,
    s(:casgn, nil, :ORDERINGS,
      s(:array,
        s(:casgn, nil, :REQUIRE_ORDER,
          s(:int, 0)),
        s(:casgn, nil, :PERMUTE,
          s(:int, 1)),
        s(:casgn, nil, :RETURN_IN_ORDER,
          s(:int, 2)))),
    s(:casgn, nil, :ARGUMENT_FLAGS,
      s(:array,
        s(:casgn, nil, :NO_ARGUMENT,
          s(:int, 0)),
        s(:casgn, nil, :REQUIRED_ARGUMENT,
          s(:int, 1)),
        s(:casgn, nil, :OPTIONAL_ARGUMENT,
          s(:int, 2)))),
    s(:masgn,
      s(:mlhs,
        s(:casgn, nil, :STATUS_YET),
        s(:casgn, nil, :STATUS_STARTED),
        s(:casgn, nil, :STATUS_TERMINATED)),
      s(:array,
        s(:int, 0),
        s(:int, 1),
        s(:int, 2))),
    s(:class,
      s(:const, nil, :Error),
      s(:const, nil, :StandardError), nil),
    s(:class,
      s(:const, nil, :AmbiguousOption),
      s(:const, nil, :Error), nil),
    s(:class,
      s(:const, nil, :NeedlessArgument),
      s(:const, nil, :Error), nil),
    s(:class,
      s(:const, nil, :MissingArgument),
      s(:const, nil, :Error), nil),
    s(:class,
      s(:const, nil, :InvalidOption),
      s(:const, nil, :Error), nil),
    s(:def, :initialize,
      s(:args,
        s(:restarg, :arguments)),
      s(:begin,
        s(:if,
          s(:send,
            s(:const, nil, :ENV), :include?,
            s(:str, "POSIXLY_CORRECT")),
          s(:ivasgn, :@ordering,
            s(:const, nil, :REQUIRE_ORDER)),
          s(:ivasgn, :@ordering,
            s(:const, nil, :PERMUTE))),
        s(:ivasgn, :@canonical_names,
          s(:send,
            s(:const, nil, :Hash), :new)),
        s(:ivasgn, :@argument_flags,
          s(:send,
            s(:const, nil, :Hash), :new)),
        s(:ivasgn, :@quiet,
          s(:const, nil, :FALSE)),
        s(:ivasgn, :@status,
          s(:const, nil, :STATUS_YET)),
        s(:ivasgn, :@error,
          s(:nil)),
        s(:ivasgn, :@error_message,
          s(:nil)),
        s(:ivasgn, :@rest_singles,
          s(:str, "")),
        s(:ivasgn, :@non_option_arguments,
          s(:send,
            s(:const, nil, :Array), :new)),
        s(:if,
          s(:send,
            s(:int, 0), :<,
            s(:send,
              s(:lvar, :arguments), :length)),
          s(:send, nil, :set_options,
            s(:splat,
              s(:lvar, :arguments))), nil))),
    s(:def, :ordering=,
      s(:args,
        s(:arg, :ordering)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@status), :!=,
            s(:const, nil, :STATUS_YET)),
          s(:begin,
            s(:send, nil, :set_error,
              s(:const, nil, :ArgumentError),
              s(:str, "argument error")),
            s(:send, nil, :raise,
              s(:const, nil, :RuntimeError),
              s(:str, "invoke ordering=, but option processing has already started"))), nil),
        s(:if,
          s(:send,
            s(:send,
              s(:const, nil, :ORDERINGS), :include?,
              s(:lvar, :ordering)), :!),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "invalid ordering `"),
              s(:begin,
                s(:lvar, :ordering)),
              s(:str, "'"))), nil),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :ordering), :==,
              s(:const, nil, :PERMUTE)),
            s(:send,
              s(:const, nil, :ENV), :include?,
              s(:str, "POSIXLY_CORRECT"))),
          s(:ivasgn, :@ordering,
            s(:const, nil, :REQUIRE_ORDER)),
          s(:ivasgn, :@ordering,
            s(:lvar, :ordering))))),
    s(:send, nil, :attr_reader,
      s(:sym, :ordering)),
    s(:def, :set_options,
      s(:args,
        s(:restarg, :arguments)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@status), :!=,
            s(:const, nil, :STATUS_YET)),
          s(:send, nil, :raise,
            s(:const, nil, :RuntimeError),
            s(:str, "invoke set_options, but option processing has already started")), nil),
        s(:send,
          s(:ivar, :@canonical_names), :clear),
        s(:send,
          s(:ivar, :@argument_flags), :clear),
        s(:block,
          s(:send,
            s(:lvar, :arguments), :each),
          s(:args,
            s(:arg, :arg)),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :arg), :is_a?,
                  s(:const, nil, :Array)), :!),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "the option list contains non-Array argument")), nil),
            s(:lvasgn, :argument_flag,
              s(:nil)),
            s(:block,
              s(:send,
                s(:lvar, :arg), :each),
              s(:args,
                s(:arg, :i)),
              s(:if,
                s(:send,
                  s(:const, nil, :ARGUMENT_FLAGS), :include?,
                  s(:lvar, :i)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :argument_flag), :!=,
                      s(:nil)),
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:str, "too many argument-flags")), nil),
                  s(:lvasgn, :argument_flag,
                    s(:lvar, :i))), nil)),
            s(:if,
              s(:send,
                s(:lvar, :argument_flag), :==,
                s(:nil)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "no argument-flag")), nil),
            s(:lvasgn, :canonical_name,
              s(:nil)),
            s(:block,
              s(:send,
                s(:lvar, :arg), :each),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :i), :==,
                    s(:lvar, :argument_flag)),
                  s(:next), nil),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:if,
                        s(:or,
                          s(:send,
                            s(:send,
                              s(:lvar, :i), :is_a?,
                              s(:const, nil, :String)), :!),
                          s(:send,
                            s(:lvar, :i), :!~,
                            s(:regexp,
                              s(:str, "^-([^-]|-.+)$"),
                              s(:regopt)))),
                        s(:send, nil, :raise,
                          s(:const, nil, :ArgumentError),
                          s(:dstr,
                            s(:str, "an invalid option `"),
                            s(:begin,
                              s(:lvar, :i)),
                            s(:str, "'"))), nil),
                      s(:if,
                        s(:begin,
                          s(:send,
                            s(:ivar, :@canonical_names), :include?,
                            s(:lvar, :i))),
                        s(:send, nil, :raise,
                          s(:const, nil, :ArgumentError),
                          s(:dstr,
                            s(:str, "option redefined `"),
                            s(:begin,
                              s(:lvar, :i)),
                            s(:str, "'"))), nil)),
                    s(:resbody, nil, nil,
                      s(:begin,
                        s(:send,
                          s(:ivar, :@canonical_names), :clear),
                        s(:send,
                          s(:ivar, :@argument_flags), :clear),
                        s(:send, nil, :raise))), nil)),
                s(:if,
                  s(:send,
                    s(:lvar, :canonical_name), :==,
                    s(:nil)),
                  s(:lvasgn, :canonical_name,
                    s(:lvar, :i)), nil),
                s(:send,
                  s(:ivar, :@canonical_names), :[]=,
                  s(:lvar, :i),
                  s(:lvar, :canonical_name)),
                s(:send,
                  s(:ivar, :@argument_flags), :[]=,
                  s(:lvar, :i),
                  s(:lvar, :argument_flag)))),
            s(:if,
              s(:send,
                s(:lvar, :canonical_name), :==,
                s(:nil)),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "no option name")), nil))),
        s(:return,
          s(:self)))),
    s(:send, nil, :attr_writer,
      s(:sym, :quiet)),
    s(:send, nil, :attr_reader,
      s(:sym, :quiet)),
    s(:alias,
      s(:sym, :quiet?),
      s(:sym, :quiet)),
    s(:def, :terminate,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@status), :==,
            s(:const, nil, :STATUS_TERMINATED)),
          s(:return,
            s(:nil)), nil),
        s(:if,
          s(:send,
            s(:ivar, :@error), :!=,
            s(:nil)),
          s(:send, nil, :raise,
            s(:const, nil, :RuntimeError),
            s(:str, "an error has occurred")), nil),
        s(:ivasgn, :@status,
          s(:const, nil, :STATUS_TERMINATED)),
        s(:block,
          s(:send,
            s(:ivar, :@non_option_arguments), :reverse_each),
          s(:args,
            s(:arg, :argument)),
          s(:send,
            s(:const, nil, :ARGV), :unshift,
            s(:lvar, :argument))),
        s(:ivasgn, :@canonical_names,
          s(:nil)),
        s(:ivasgn, :@argument_flags,
          s(:nil)),
        s(:ivasgn, :@rest_singles,
          s(:nil)),
        s(:ivasgn, :@non_option_arguments,
          s(:nil)),
        s(:return,
          s(:self)))),
    s(:def, :terminated?,
      s(:args),
      s(:return,
        s(:send,
          s(:ivar, :@status), :==,
          s(:const, nil, :STATUS_TERMINATED)))),
    s(:def, :set_error,
      s(:args,
        s(:arg, :type),
        s(:arg, :message)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@quiet), :!),
          s(:send,
            s(:gvar, :$stderr), :print,
            s(:dstr,
              s(:begin,
                s(:gvar, :$0)),
              s(:str, ": "),
              s(:begin,
                s(:lvar, :message)),
              s(:str, "\n"))), nil),
        s(:ivasgn, :@error,
          s(:lvar, :type)),
        s(:ivasgn, :@error_message,
          s(:lvar, :message)),
        s(:ivasgn, :@canonical_names,
          s(:nil)),
        s(:ivasgn, :@argument_flags,
          s(:nil)),
        s(:ivasgn, :@rest_singles,
          s(:nil)),
        s(:ivasgn, :@non_option_arguments,
          s(:nil)),
        s(:send, nil, :raise,
          s(:lvar, :type),
          s(:lvar, :message)))),
    s(:send, nil, :protected,
      s(:sym, :set_error)),
    s(:send, nil, :attr_reader,
      s(:sym, :error)),
    s(:alias,
      s(:sym, :error?),
      s(:sym, :error)),
    s(:def, :error_message,
      s(:args),
      s(:return,
        s(:ivar, :@error_message))),
    s(:def, :get,
      s(:args),
      s(:begin,
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :option_name),
            s(:lvasgn, :option_argument)),
          s(:array,
            s(:nil),
            s(:str, ""))),
        s(:if,
          s(:send,
            s(:ivar, :@error), :!=,
            s(:nil)),
          s(:return,
            s(:nil)), nil),
        s(:case,
          s(:ivar, :@status),
          s(:when,
            s(:const, nil, :STATUS_YET),
            s(:ivasgn, :@status,
              s(:const, nil, :STATUS_STARTED))),
          s(:when,
            s(:const, nil, :STATUS_TERMINATED),
            s(:return,
              s(:nil))), nil),
        s(:if,
          s(:send,
            s(:int, 0), :<,
            s(:send,
              s(:ivar, :@rest_singles), :length)),
          s(:lvasgn, :argument,
            s(:send,
              s(:str, "-"), :+,
              s(:ivar, :@rest_singles))),
          s(:if,
            s(:begin,
              s(:send,
                s(:send,
                  s(:const, nil, :ARGV), :length), :==,
                s(:int, 0))),
            s(:begin,
              s(:send, nil, :terminate),
              s(:return,
                s(:nil))),
            s(:if,
              s(:send,
                s(:ivar, :@ordering), :==,
                s(:const, nil, :PERMUTE)),
              s(:begin,
                s(:while,
                  s(:and,
                    s(:send,
                      s(:int, 0), :<,
                      s(:send,
                        s(:const, nil, :ARGV), :length)),
                    s(:send,
                      s(:send,
                        s(:const, nil, :ARGV), :[],
                        s(:int, 0)), :!~,
                      s(:regexp,
                        s(:str, "^-."),
                        s(:regopt)))),
                  s(:send,
                    s(:ivar, :@non_option_arguments), :push,
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :ARGV), :length), :==,
                    s(:int, 0)),
                  s(:begin,
                    s(:send, nil, :terminate),
                    s(:return,
                      s(:nil))), nil),
                s(:lvasgn, :argument,
                  s(:send,
                    s(:const, nil, :ARGV), :shift))),
              s(:if,
                s(:send,
                  s(:ivar, :@ordering), :==,
                  s(:const, nil, :REQUIRE_ORDER)),
                s(:begin,
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:const, nil, :ARGV), :[],
                          s(:int, 0)), :!~,
                        s(:regexp,
                          s(:str, "^-."),
                          s(:regopt)))),
                    s(:begin,
                      s(:send, nil, :terminate),
                      s(:return,
                        s(:nil))), nil),
                  s(:lvasgn, :argument,
                    s(:send,
                      s(:const, nil, :ARGV), :shift))),
                s(:lvasgn, :argument,
                  s(:send,
                    s(:const, nil, :ARGV), :shift)))))),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :argument), :==,
              s(:str, "--")),
            s(:send,
              s(:send,
                s(:ivar, :@rest_singles), :length), :==,
              s(:int, 0))),
          s(:begin,
            s(:send, nil, :terminate),
            s(:return,
              s(:nil))), nil),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :argument), :=~,
              s(:regexp,
                s(:str, "^(--[^=]+)"),
                s(:regopt))),
            s(:send,
              s(:send,
                s(:ivar, :@rest_singles), :length), :==,
              s(:int, 0))),
          s(:begin,
            s(:lvasgn, :pattern,
              s(:nth_ref, 1)),
            s(:if,
              s(:send,
                s(:ivar, :@canonical_names), :include?,
                s(:lvar, :pattern)),
              s(:lvasgn, :option_name,
                s(:lvar, :pattern)),
              s(:begin,
                s(:lvasgn, :matches,
                  s(:array)),
                s(:block,
                  s(:send,
                    s(:ivar, :@canonical_names), :each_key),
                  s(:args,
                    s(:arg, :key)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :key), :index,
                        s(:lvar, :pattern)), :==,
                      s(:int, 0)),
                    s(:begin,
                      s(:lvasgn, :option_name,
                        s(:lvar, :key)),
                      s(:send,
                        s(:lvar, :matches), :<<,
                        s(:lvar, :key))), nil)),
                s(:if,
                  s(:send,
                    s(:int, 2), :<=,
                    s(:send,
                      s(:lvar, :matches), :length)),
                  s(:send, nil, :set_error,
                    s(:const, nil, :AmbiguousOption),
                    s(:dstr,
                      s(:str, "option `"),
                      s(:begin,
                        s(:lvar, :argument)),
                      s(:str, "' is ambiguous between "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :matches), :join,
                          s(:str, ", "))))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :matches), :length), :==,
                      s(:int, 0)),
                    s(:send, nil, :set_error,
                      s(:const, nil, :InvalidOption),
                      s(:dstr,
                        s(:str, "unrecognized option `"),
                        s(:begin,
                          s(:lvar, :argument)),
                        s(:str, "'"))), nil)))),
            s(:if,
              s(:send,
                s(:send,
                  s(:ivar, :@argument_flags), :[],
                  s(:lvar, :option_name)), :==,
                s(:const, nil, :REQUIRED_ARGUMENT)),
              s(:if,
                s(:send,
                  s(:lvar, :argument), :=~,
                  s(:regexp,
                    s(:str, "=(.*)$"),
                    s(:regopt))),
                s(:lvasgn, :option_argument,
                  s(:nth_ref, 1)),
                s(:if,
                  s(:send,
                    s(:int, 0), :<,
                    s(:send,
                      s(:const, nil, :ARGV), :length)),
                  s(:lvasgn, :option_argument,
                    s(:send,
                      s(:const, nil, :ARGV), :shift)),
                  s(:send, nil, :set_error,
                    s(:const, nil, :MissingArgument),
                    s(:dstr,
                      s(:str, "option `"),
                      s(:begin,
                        s(:lvar, :argument)),
                      s(:str, "' requires an argument"))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@argument_flags), :[],
                    s(:lvar, :option_name)), :==,
                  s(:const, nil, :OPTIONAL_ARGUMENT)),
                s(:if,
                  s(:send,
                    s(:lvar, :argument), :=~,
                    s(:regexp,
                      s(:str, "=(.*)$"),
                      s(:regopt))),
                  s(:lvasgn, :option_argument,
                    s(:nth_ref, 1)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:int, 0), :<,
                        s(:send,
                          s(:const, nil, :ARGV), :length)),
                      s(:send,
                        s(:send,
                          s(:const, nil, :ARGV), :[],
                          s(:int, 0)), :!~,
                        s(:regexp,
                          s(:str, "^-."),
                          s(:regopt)))),
                    s(:lvasgn, :option_argument,
                      s(:send,
                        s(:const, nil, :ARGV), :shift)),
                    s(:lvasgn, :option_argument,
                      s(:str, "")))),
                s(:if,
                  s(:send,
                    s(:lvar, :argument), :=~,
                    s(:regexp,
                      s(:str, "=(.*)$"),
                      s(:regopt))),
                  s(:send, nil, :set_error,
                    s(:const, nil, :NeedlessArgument),
                    s(:dstr,
                      s(:str, "option `"),
                      s(:begin,
                        s(:lvar, :option_name)),
                      s(:str, "' doesn't allow an argument"))), nil)))),
          s(:if,
            s(:send,
              s(:lvar, :argument), :=~,
              s(:regexp,
                s(:str, "^(-(.))(.*)"),
                s(:regopt))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :option_name),
                  s(:lvasgn, :ch),
                  s(:ivasgn, :@rest_singles)),
                s(:array,
                  s(:nth_ref, 1),
                  s(:nth_ref, 2),
                  s(:nth_ref, 3))),
              s(:if,
                s(:send,
                  s(:ivar, :@canonical_names), :include?,
                  s(:lvar, :option_name)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@argument_flags), :[],
                      s(:lvar, :option_name)), :==,
                    s(:const, nil, :REQUIRED_ARGUMENT)),
                  s(:if,
                    s(:send,
                      s(:int, 0), :<,
                      s(:send,
                        s(:ivar, :@rest_singles), :length)),
                    s(:begin,
                      s(:lvasgn, :option_argument,
                        s(:ivar, :@rest_singles)),
                      s(:ivasgn, :@rest_singles,
                        s(:str, ""))),
                    s(:if,
                      s(:send,
                        s(:int, 0), :<,
                        s(:send,
                          s(:const, nil, :ARGV), :length)),
                      s(:lvasgn, :option_argument,
                        s(:send,
                          s(:const, nil, :ARGV), :shift)),
                      s(:send, nil, :set_error,
                        s(:const, nil, :MissingArgument),
                        s(:dstr,
                          s(:str, "option requires an argument -- "),
                          s(:begin,
                            s(:lvar, :ch)))))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@argument_flags), :[],
                        s(:lvar, :option_name)), :==,
                      s(:const, nil, :OPTIONAL_ARGUMENT)),
                    s(:if,
                      s(:send,
                        s(:int, 0), :<,
                        s(:send,
                          s(:ivar, :@rest_singles), :length)),
                      s(:begin,
                        s(:lvasgn, :option_argument,
                          s(:ivar, :@rest_singles)),
                        s(:ivasgn, :@rest_singles,
                          s(:str, ""))),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:int, 0), :<,
                            s(:send,
                              s(:const, nil, :ARGV), :length)),
                          s(:send,
                            s(:send,
                              s(:const, nil, :ARGV), :[],
                              s(:int, 0)), :!~,
                            s(:regexp,
                              s(:str, "^-."),
                              s(:regopt)))),
                        s(:lvasgn, :option_argument,
                          s(:send,
                            s(:const, nil, :ARGV), :shift)),
                        s(:lvasgn, :option_argument,
                          s(:str, "")))), nil)),
                s(:if,
                  s(:send,
                    s(:const, nil, :ENV), :include?,
                    s(:str, "POSIXLY_CORRECT")),
                  s(:send, nil, :set_error,
                    s(:const, nil, :InvalidOption),
                    s(:dstr,
                      s(:str, "invalid option -- "),
                      s(:begin,
                        s(:lvar, :ch)))),
                  s(:send, nil, :set_error,
                    s(:const, nil, :InvalidOption),
                    s(:dstr,
                      s(:str, "invalid option -- "),
                      s(:begin,
                        s(:lvar, :ch))))))),
            s(:return,
              s(:str, ""),
              s(:lvar, :argument)))),
        s(:return,
          s(:send,
            s(:ivar, :@canonical_names), :[],
            s(:lvar, :option_name)),
          s(:lvar, :option_argument)))),
    s(:alias,
      s(:sym, :get_option),
      s(:sym, :get)),
    s(:def, :each,
      s(:args),
      s(:block,
        s(:send, nil, :loop),
        s(:args),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :option_name),
              s(:lvasgn, :option_argument)),
            s(:send, nil, :get_option)),
          s(:if,
            s(:send,
              s(:lvar, :option_name), :==,
              s(:nil)),
            s(:break), nil),
          s(:yield,
            s(:lvar, :option_name),
            s(:lvar, :option_argument))))),
    s(:alias,
      s(:sym, :each_option),
      s(:sym, :each))))
