s(:begin,
  s(:send, nil, :require,
    s(:str, "e2mmap.rb")),
  s(:module,
    s(:const, nil, :ExceptionForMatrix),
    s(:begin,
      s(:send, nil, :extend,
        s(:const, nil, :Exception2MessageMapper)),
      s(:send, nil, :def_e2message,
        s(:const, nil, :TypeError),
        s(:str, "wrong argument type %s (expected %s)")),
      s(:send, nil, :def_e2message,
        s(:const, nil, :ArgumentError),
        s(:str, "Wrong # of arguments(%d for %d)")),
      s(:send, nil, :def_exception,
        s(:str, "ErrDimensionMismatch"),
        s(:str, "\#{self.name} dimension mismatch")),
      s(:send, nil, :def_exception,
        s(:str, "ErrNotRegular"),
        s(:str, "Not Regular Matrix")),
      s(:send, nil, :def_exception,
        s(:str, "ErrOperationNotDefined"),
        s(:str, "Operation(%s) can\\'t be defined: %s op %s")),
      s(:send, nil, :def_exception,
        s(:str, "ErrOperationNotImplemented"),
        s(:str, "Sorry, Operation(%s) not implemented: %s op %s")))),
  s(:class,
    s(:const, nil, :Matrix), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)),
      s(:send, nil, :include,
        s(:const, nil, :ExceptionForMatrix)),
      s(:send, nil, :autoload,
        s(:sym, :EigenvalueDecomposition),
        s(:str, "matrix/eigenvalue_decomposition")),
      s(:send, nil, :autoload,
        s(:sym, :LUPDecomposition),
        s(:str, "matrix/lup_decomposition")),
      s(:send, nil, :private_class_method,
        s(:sym, :new)),
      s(:send, nil, :attr_reader,
        s(:sym, :rows)),
      s(:send, nil, :protected,
        s(:sym, :rows)),
      s(:defs,
        s(:const, nil, :Matrix), :[],
        s(:args,
          s(:restarg, :rows)),
        s(:send, nil, :rows,
          s(:lvar, :rows),
          s(:false))),
      s(:defs,
        s(:const, nil, :Matrix), :rows,
        s(:args,
          s(:arg, :rows),
          s(:optarg, :copy,
            s(:true))),
        s(:begin,
          s(:lvasgn, :rows,
            s(:send, nil, :convert_to_array,
              s(:lvar, :rows),
              s(:lvar, :copy))),
          s(:block,
            s(:send,
              s(:lvar, :rows), :map!),
            s(:args,
              s(:arg, :row)),
            s(:send, nil, :convert_to_array,
              s(:lvar, :row),
              s(:lvar, :copy))),
          s(:lvasgn, :size,
            s(:send,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:lvar, :rows), :[],
                    s(:int, 0)),
                  s(:array))), :size)),
          s(:block,
            s(:send,
              s(:lvar, :rows), :each),
            s(:args,
              s(:arg, :row)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :row), :size), :==,
                s(:lvar, :size)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ErrDimensionMismatch),
                s(:dstr,
                  s(:str, "row size differs ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :row), :size)),
                  s(:str, " should be "),
                  s(:begin,
                    s(:lvar, :size)),
                  s(:str, ")"))))),
          s(:send, nil, :new,
            s(:lvar, :rows),
            s(:lvar, :size)))),
      s(:defs,
        s(:const, nil, :Matrix), :columns,
        s(:args,
          s(:arg, :columns)),
        s(:send,
          s(:send, nil, :rows,
            s(:lvar, :columns),
            s(:false)), :transpose)),
      s(:defs,
        s(:const, nil, :Matrix), :build,
        s(:args,
          s(:arg, :row_count),
          s(:optarg, :column_count,
            s(:lvar, :row_count))),
        s(:begin,
          s(:lvasgn, :row_count,
            s(:send,
              s(:const, nil, :CoercionHelper), :coerce_to_int,
              s(:lvar, :row_count))),
          s(:lvasgn, :column_count,
            s(:send,
              s(:const, nil, :CoercionHelper), :coerce_to_int,
              s(:lvar, :column_count))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :row_count), :<,
                s(:int, 0)),
              s(:send,
                s(:lvar, :column_count), :<,
                s(:int, 0))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError)), nil),
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :build),
                s(:lvar, :row_count),
                s(:lvar, :column_count)))),
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:lvar, :row_count)),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:const, nil, :Array), :new,
                  s(:lvar, :column_count)),
                s(:args,
                  s(:arg, :j)),
                s(:yield,
                  s(:lvar, :i),
                  s(:lvar, :j))))),
          s(:send, nil, :new,
            s(:lvar, :rows),
            s(:lvar, :column_count)))),
      s(:defs,
        s(:const, nil, :Matrix), :diagonal,
        s(:args,
          s(:restarg, :values)),
        s(:begin,
          s(:lvasgn, :size,
            s(:send,
              s(:lvar, :values), :size)),
          s(:if,
            s(:send,
              s(:lvar, :size), :==,
              s(:int, 0)),
            s(:return,
              s(:send,
                s(:const, nil, :Matrix), :empty)), nil),
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:lvar, :size)),
              s(:args,
                s(:arg, :j)),
              s(:begin,
                s(:lvasgn, :row,
                  s(:send,
                    s(:const, nil, :Array), :new,
                    s(:lvar, :size),
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :row), :[]=,
                  s(:lvar, :j),
                  s(:send,
                    s(:lvar, :values), :[],
                    s(:lvar, :j))),
                s(:lvar, :row)))),
          s(:send, nil, :new,
            s(:lvar, :rows)))),
      s(:defs,
        s(:const, nil, :Matrix), :scalar,
        s(:args,
          s(:arg, :n),
          s(:arg, :value)),
        s(:send, nil, :diagonal,
          s(:splat,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:lvar, :n),
              s(:lvar, :value))))),
      s(:defs,
        s(:const, nil, :Matrix), :identity,
        s(:args,
          s(:arg, :n)),
        s(:send, nil, :scalar,
          s(:lvar, :n),
          s(:int, 1))),
      s(:sclass,
        s(:const, nil, :Matrix),
        s(:begin,
          s(:alias,
            s(:sym, :unit),
            s(:sym, :identity)),
          s(:alias,
            s(:sym, :I),
            s(:sym, :identity)))),
      s(:defs,
        s(:const, nil, :Matrix), :zero,
        s(:args,
          s(:arg, :row_count),
          s(:optarg, :column_count,
            s(:lvar, :row_count))),
        s(:begin,
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:lvar, :row_count)),
              s(:args),
              s(:send,
                s(:const, nil, :Array), :new,
                s(:lvar, :column_count),
                s(:int, 0)))),
          s(:send, nil, :new,
            s(:lvar, :rows),
            s(:lvar, :column_count)))),
      s(:defs,
        s(:const, nil, :Matrix), :row_vector,
        s(:args,
          s(:arg, :row)),
        s(:begin,
          s(:lvasgn, :row,
            s(:send, nil, :convert_to_array,
              s(:lvar, :row))),
          s(:send, nil, :new,
            s(:array,
              s(:lvar, :row))))),
      s(:defs,
        s(:const, nil, :Matrix), :column_vector,
        s(:args,
          s(:arg, :column)),
        s(:begin,
          s(:lvasgn, :column,
            s(:send, nil, :convert_to_array,
              s(:lvar, :column))),
          s(:send, nil, :new,
            s(:send,
              s(:array,
                s(:lvar, :column)), :transpose),
            s(:int, 1)))),
      s(:defs,
        s(:const, nil, :Matrix), :empty,
        s(:args,
          s(:optarg, :row_count,
            s(:int, 0)),
          s(:optarg, :column_count,
            s(:int, 0))),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :column_count), :!=,
                s(:int, 0)),
              s(:send,
                s(:lvar, :row_count), :!=,
                s(:int, 0))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "One size must be 0")), nil),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :column_count), :<,
                s(:int, 0)),
              s(:send,
                s(:lvar, :row_count), :<,
                s(:int, 0))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "Negative size")), nil),
          s(:send, nil, :new,
            s(:send,
              s(:array,
                s(:array)), :*,
              s(:lvar, :row_count)),
            s(:lvar, :column_count)))),
      s(:defs,
        s(:const, nil, :Matrix), :vstack,
        s(:args,
          s(:arg, :x),
          s(:restarg, :matrices)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :x), :is_a?,
              s(:const, nil, :Matrix)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:str, "Expected a Matrix, got a "),
                s(:begin,
                  s(:send,
                    s(:lvar, :x), :class))))),
          s(:lvasgn, :result,
            s(:send,
              s(:send,
                s(:lvar, :x), :send,
                s(:sym, :rows)), :map,
              s(:block_pass,
                s(:sym, :dup)))),
          s(:block,
            s(:send,
              s(:lvar, :matrices), :each),
            s(:args,
              s(:arg, :m)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :is_a?,
                  s(:const, nil, :Matrix)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Expected a Matrix, got a "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :m), :class))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :column_count), :!=,
                  s(:send,
                    s(:lvar, :x), :column_count)),
                s(:send, nil, :raise,
                  s(:const, nil, :ErrDimensionMismatch),
                  s(:dstr,
                    s(:str, "The given matrices must have "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :x), :column_count)),
                    s(:str, " columns, but one has "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :m), :column_count)))), nil),
              s(:send,
                s(:lvar, :result), :concat,
                s(:send,
                  s(:lvar, :m), :send,
                  s(:sym, :rows))))),
          s(:send, nil, :new,
            s(:lvar, :result),
            s(:send,
              s(:lvar, :x), :column_count)))),
      s(:defs,
        s(:const, nil, :Matrix), :hstack,
        s(:args,
          s(:arg, :x),
          s(:restarg, :matrices)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :x), :is_a?,
              s(:const, nil, :Matrix)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:str, "Expected a Matrix, got a "),
                s(:begin,
                  s(:send,
                    s(:lvar, :x), :class))))),
          s(:lvasgn, :result,
            s(:send,
              s(:send,
                s(:lvar, :x), :send,
                s(:sym, :rows)), :map,
              s(:block_pass,
                s(:sym, :dup)))),
          s(:lvasgn, :total_column_count,
            s(:send,
              s(:lvar, :x), :column_count)),
          s(:block,
            s(:send,
              s(:lvar, :matrices), :each),
            s(:args,
              s(:arg, :m)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :m), :is_a?,
                  s(:const, nil, :Matrix)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Expected a Matrix, got a "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :m), :class))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :row_count), :!=,
                  s(:send,
                    s(:lvar, :x), :row_count)),
                s(:send, nil, :raise,
                  s(:const, nil, :ErrDimensionMismatch),
                  s(:dstr,
                    s(:str, "The given matrices must have "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :x), :row_count)),
                    s(:str, " rows, but one has "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :m), :row_count)))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :result), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :row), :concat,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :send,
                      s(:sym, :rows)), :[],
                    s(:lvar, :i)))),
              s(:op_asgn,
                s(:lvasgn, :total_column_count), :+,
                s(:send,
                  s(:lvar, :m), :column_count)))),
          s(:send, nil, :new,
            s(:lvar, :result),
            s(:lvar, :total_column_count)))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :rows),
          s(:optarg, :column_count,
            s(:send,
              s(:send,
                s(:lvar, :rows), :[],
                s(:int, 0)), :size))),
        s(:begin,
          s(:ivasgn, :@rows,
            s(:lvar, :rows)),
          s(:ivasgn, :@column_count,
            s(:lvar, :column_count)))),
      s(:def, :new_matrix,
        s(:args,
          s(:arg, :rows),
          s(:optarg, :column_count,
            s(:send,
              s(:send,
                s(:lvar, :rows), :[],
                s(:int, 0)), :size))),
        s(:send,
          s(:send,
            s(:self), :class), :send,
          s(:sym, :new),
          s(:lvar, :rows),
          s(:lvar, :column_count))),
      s(:send, nil, :private,
        s(:sym, :new_matrix)),
      s(:def, :[],
        s(:args,
          s(:arg, :i),
          s(:arg, :j)),
        s(:send,
          s(:block,
            s(:send,
              s(:ivar, :@rows), :fetch,
              s(:lvar, :i)),
            s(:args),
            s(:return,
              s(:nil))), :[],
          s(:lvar, :j))),
      s(:alias,
        s(:sym, :element),
        s(:sym, :[])),
      s(:alias,
        s(:sym, :component),
        s(:sym, :[])),
      s(:def, :[]=,
        s(:args,
          s(:arg, :i),
          s(:arg, :j),
          s(:arg, :v)),
        s(:send,
          s(:send,
            s(:ivar, :@rows), :[],
            s(:lvar, :i)), :[]=,
          s(:lvar, :j),
          s(:lvar, :v))),
      s(:alias,
        s(:sym, :set_element),
        s(:sym, :[]=)),
      s(:alias,
        s(:sym, :set_component),
        s(:sym, :[]=)),
      s(:send, nil, :private,
        s(:sym, :[]=),
        s(:sym, :set_element),
        s(:sym, :set_component)),
      s(:def, :row_count,
        s(:args),
        s(:send,
          s(:ivar, :@rows), :size)),
      s(:send, nil, :alias_method,
        s(:sym, :row_size),
        s(:sym, :row_count)),
      s(:send, nil, :attr_reader,
        s(:sym, :column_count)),
      s(:send, nil, :alias_method,
        s(:sym, :column_size),
        s(:sym, :column_count)),
      s(:def, :row,
        s(:args,
          s(:arg, :i),
          s(:blockarg, :block)),
        s(:if,
          s(:send, nil, :block_given?),
          s(:begin,
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :fetch,
                  s(:lvar, :i)),
                s(:args),
                s(:return,
                  s(:self))), :each,
              s(:block_pass,
                s(:lvar, :block))),
            s(:self)),
          s(:send,
            s(:const, nil, :Vector), :elements,
            s(:block,
              s(:send,
                s(:ivar, :@rows), :fetch,
                s(:lvar, :i)),
              s(:args),
              s(:return,
                s(:nil)))))),
      s(:def, :column,
        s(:args,
          s(:arg, :j)),
        s(:if,
          s(:send, nil, :block_given?),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :j), :>=,
                  s(:send, nil, :column_count)),
                s(:send,
                  s(:lvar, :j), :<,
                  s(:send,
                    s(:send, nil, :column_count), :-@))),
              s(:return,
                s(:self)), nil),
            s(:block,
              s(:send,
                s(:send, nil, :row_count), :times),
              s(:args,
                s(:arg, :i)),
              s(:yield,
                s(:send,
                  s(:send,
                    s(:ivar, :@rows), :[],
                    s(:lvar, :i)), :[],
                  s(:lvar, :j)))),
            s(:self)),
          s(:begin,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :j), :>=,
                  s(:send, nil, :column_count)),
                s(:send,
                  s(:lvar, :j), :<,
                  s(:send,
                    s(:send, nil, :column_count), :-@))),
              s(:return,
                s(:nil)), nil),
            s(:lvasgn, :col,
              s(:block,
                s(:send,
                  s(:const, nil, :Array), :new,
                  s(:send, nil, :row_count)),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:send,
                    s(:ivar, :@rows), :[],
                    s(:lvar, :i)), :[],
                  s(:lvar, :j)))),
            s(:send,
              s(:const, nil, :Vector), :elements,
              s(:lvar, :col),
              s(:false))))),
      s(:def, :collect,
        s(:args,
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :collect)))),
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:ivar, :@rows), :collect),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:lvar, :row), :collect,
                s(:block_pass,
                  s(:lvar, :block))))),
          s(:send, nil, :new_matrix,
            s(:lvar, :rows),
            s(:send, nil, :column_count)))),
      s(:alias,
        s(:sym, :map),
        s(:sym, :collect)),
      s(:def, :each,
        s(:args,
          s(:optarg, :which,
            s(:sym, :all))),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :each),
                s(:lvar, :which)))),
          s(:lvasgn, :last,
            s(:send,
              s(:send, nil, :column_count), :-,
              s(:int, 1))),
          s(:case,
            s(:lvar, :which),
            s(:when,
              s(:sym, :all),
              s(:begin,
                s(:lvasgn, :block,
                  s(:send,
                    s(:const, nil, :Proc), :new)),
                s(:block,
                  s(:send,
                    s(:ivar, :@rows), :each),
                  s(:args,
                    s(:arg, :row)),
                  s(:send,
                    s(:lvar, :row), :each,
                    s(:block_pass,
                      s(:lvar, :block)))))),
            s(:when,
              s(:sym, :diagonal),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:yield,
                  s(:block,
                    s(:send,
                      s(:lvar, :row), :fetch,
                      s(:lvar, :row_index)),
                    s(:args),
                    s(:return,
                      s(:self)))))),
            s(:when,
              s(:sym, :off_diagonal),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:send, nil, :column_count), :times),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:if,
                    s(:send,
                      s(:lvar, :row_index), :==,
                      s(:lvar, :col_index)), nil,
                    s(:yield,
                      s(:send,
                        s(:lvar, :row), :[],
                        s(:lvar, :col_index))))))),
            s(:when,
              s(:sym, :lower),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:int, 0), :upto,
                    s(:send,
                      s(:array,
                        s(:lvar, :row_index),
                        s(:lvar, :last)), :min)),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)))))),
            s(:when,
              s(:sym, :strict_lower),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:array,
                        s(:lvar, :row_index),
                        s(:send, nil, :column_count)), :min), :times),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)))))),
            s(:when,
              s(:sym, :strict_upper),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :row_index), :+,
                        s(:int, 1))), :upto,
                    s(:lvar, :last)),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)))))),
            s(:when,
              s(:sym, :upper),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:lvar, :row_index), :upto,
                    s(:lvar, :last)),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)))))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "expected "),
                s(:begin,
                  s(:send,
                    s(:lvar, :which), :inspect)),
                s(:str, " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")))),
          s(:self))),
      s(:def, :each_with_index,
        s(:args,
          s(:optarg, :which,
            s(:sym, :all))),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :each_with_index),
                s(:lvar, :which)))),
          s(:lvasgn, :last,
            s(:send,
              s(:send, nil, :column_count), :-,
              s(:int, 1))),
          s(:case,
            s(:lvar, :which),
            s(:when,
              s(:sym, :all),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:lvar, :row), :each_with_index),
                  s(:args,
                    s(:arg, :e),
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:lvar, :e),
                    s(:lvar, :row_index),
                    s(:lvar, :col_index))))),
            s(:when,
              s(:sym, :diagonal),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:yield,
                  s(:block,
                    s(:send,
                      s(:lvar, :row), :fetch,
                      s(:lvar, :row_index)),
                    s(:args),
                    s(:return,
                      s(:self))),
                  s(:lvar, :row_index),
                  s(:lvar, :row_index)))),
            s(:when,
              s(:sym, :off_diagonal),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:send, nil, :column_count), :times),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:if,
                    s(:send,
                      s(:lvar, :row_index), :==,
                      s(:lvar, :col_index)), nil,
                    s(:yield,
                      s(:send,
                        s(:lvar, :row), :[],
                        s(:lvar, :col_index)),
                      s(:lvar, :row_index),
                      s(:lvar, :col_index)))))),
            s(:when,
              s(:sym, :lower),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:int, 0), :upto,
                    s(:send,
                      s(:array,
                        s(:lvar, :row_index),
                        s(:lvar, :last)), :min)),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)),
                    s(:lvar, :row_index),
                    s(:lvar, :col_index))))),
            s(:when,
              s(:sym, :strict_lower),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:array,
                        s(:lvar, :row_index),
                        s(:send, nil, :column_count)), :min), :times),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)),
                    s(:lvar, :row_index),
                    s(:lvar, :col_index))))),
            s(:when,
              s(:sym, :strict_upper),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :row_index), :+,
                        s(:int, 1))), :upto,
                    s(:lvar, :last)),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)),
                    s(:lvar, :row_index),
                    s(:lvar, :col_index))))),
            s(:when,
              s(:sym, :upper),
              s(:block,
                s(:send,
                  s(:ivar, :@rows), :each_with_index),
                s(:args,
                  s(:arg, :row),
                  s(:arg, :row_index)),
                s(:block,
                  s(:send,
                    s(:lvar, :row_index), :upto,
                    s(:lvar, :last)),
                  s(:args,
                    s(:arg, :col_index)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :row), :[],
                      s(:lvar, :col_index)),
                    s(:lvar, :row_index),
                    s(:lvar, :col_index))))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "expected "),
                s(:begin,
                  s(:send,
                    s(:lvar, :which), :inspect)),
                s(:str, " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")))),
          s(:self))),
      s(:casgn, nil, :SELECTORS,
        s(:send,
          s(:hash,
            s(:pair,
              s(:sym, :all),
              s(:true)),
            s(:pair,
              s(:sym, :diagonal),
              s(:true)),
            s(:pair,
              s(:sym, :off_diagonal),
              s(:true)),
            s(:pair,
              s(:sym, :lower),
              s(:true)),
            s(:pair,
              s(:sym, :strict_lower),
              s(:true)),
            s(:pair,
              s(:sym, :strict_upper),
              s(:true)),
            s(:pair,
              s(:sym, :upper),
              s(:true))), :freeze)),
      s(:def, :index,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :size), :>,
              s(:int, 2)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "wrong number of arguments("),
                s(:begin,
                  s(:send,
                    s(:lvar, :args), :size)),
                s(:str, " for 0-2)"))), nil),
          s(:lvasgn, :which,
            s(:if,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :args), :size), :==,
                    s(:int, 2)),
                  s(:send,
                    s(:const, nil, :SELECTORS), :include?,
                    s(:send,
                      s(:lvar, :args), :last)))),
              s(:send,
                s(:lvar, :args), :pop),
              s(:sym, :all))),
          s(:if,
            s(:or,
              s(:send, nil, :block_given?),
              s(:send,
                s(:send,
                  s(:lvar, :args), :size), :==,
                s(:int, 1))), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :find_index),
                s(:lvar, :which),
                s(:splat,
                  s(:lvar, :args))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :size), :==,
              s(:int, 1)),
            s(:begin,
              s(:lvasgn, :value,
                s(:send,
                  s(:lvar, :args), :first)),
              s(:block,
                s(:send, nil, :each_with_index,
                  s(:lvar, :which)),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :row_index),
                  s(:arg, :col_index)),
                s(:if,
                  s(:send,
                    s(:lvar, :e), :==,
                    s(:lvar, :value)),
                  s(:return,
                    s(:lvar, :row_index),
                    s(:lvar, :col_index)), nil))),
            s(:block,
              s(:send, nil, :each_with_index,
                s(:lvar, :which)),
              s(:args,
                s(:arg, :e),
                s(:arg, :row_index),
                s(:arg, :col_index)),
              s(:if,
                s(:yield,
                  s(:lvar, :e)),
                s(:return,
                  s(:lvar, :row_index),
                  s(:lvar, :col_index)), nil))),
          s(:nil))),
      s(:send, nil, :alias_method,
        s(:sym, :find_index),
        s(:sym, :index)),
      s(:def, :minor,
        s(:args,
          s(:restarg, :param)),
        s(:begin,
          s(:case,
            s(:send,
              s(:lvar, :param), :size),
            s(:when,
              s(:int, 2),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :row_range),
                    s(:lvasgn, :col_range)),
                  s(:lvar, :param)),
                s(:lvasgn, :from_row,
                  s(:send,
                    s(:lvar, :row_range), :first)),
                s(:if,
                  s(:send,
                    s(:lvar, :from_row), :<,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :from_row), :+,
                    s(:send, nil, :row_count)), nil),
                s(:lvasgn, :to_row,
                  s(:send,
                    s(:lvar, :row_range), :end)),
                s(:if,
                  s(:send,
                    s(:lvar, :to_row), :<,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :to_row), :+,
                    s(:send, nil, :row_count)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :row_range), :exclude_end?), nil,
                  s(:op_asgn,
                    s(:lvasgn, :to_row), :+,
                    s(:int, 1))),
                s(:lvasgn, :size_row,
                  s(:send,
                    s(:lvar, :to_row), :-,
                    s(:lvar, :from_row))),
                s(:lvasgn, :from_col,
                  s(:send,
                    s(:lvar, :col_range), :first)),
                s(:if,
                  s(:send,
                    s(:lvar, :from_col), :<,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :from_col), :+,
                    s(:send, nil, :column_count)), nil),
                s(:lvasgn, :to_col,
                  s(:send,
                    s(:lvar, :col_range), :end)),
                s(:if,
                  s(:send,
                    s(:lvar, :to_col), :<,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :to_col), :+,
                    s(:send, nil, :column_count)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :col_range), :exclude_end?), nil,
                  s(:op_asgn,
                    s(:lvasgn, :to_col), :+,
                    s(:int, 1))),
                s(:lvasgn, :size_col,
                  s(:send,
                    s(:lvar, :to_col), :-,
                    s(:lvar, :from_col))))),
            s(:when,
              s(:int, 4),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :from_row),
                    s(:lvasgn, :size_row),
                    s(:lvasgn, :from_col),
                    s(:lvasgn, :size_col)),
                  s(:lvar, :param)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :size_row), :<,
                      s(:int, 0)),
                    s(:send,
                      s(:lvar, :size_col), :<,
                      s(:int, 0))),
                  s(:return,
                    s(:nil)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :from_row), :<,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :from_row), :+,
                    s(:send, nil, :row_count)), nil),
                s(:if,
                  s(:send,
                    s(:lvar, :from_col), :<,
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:lvasgn, :from_col), :+,
                    s(:send, nil, :column_count)), nil))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:send,
                s(:lvar, :param), :inspect))),
          s(:if,
            s(:or,
              s(:or,
                s(:or,
                  s(:send,
                    s(:lvar, :from_row), :>,
                    s(:send, nil, :row_count)),
                  s(:send,
                    s(:lvar, :from_col), :>,
                    s(:send, nil, :column_count))),
                s(:send,
                  s(:lvar, :from_row), :<,
                  s(:int, 0))),
              s(:send,
                s(:lvar, :from_col), :<,
                s(:int, 0))),
            s(:return,
              s(:nil)), nil),
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:send,
                  s(:ivar, :@rows), :[],
                  s(:lvar, :from_row),
                  s(:lvar, :size_row)), :collect),
              s(:args,
                s(:arg, :row)),
              s(:send,
                s(:lvar, :row), :[],
                s(:lvar, :from_col),
                s(:lvar, :size_col)))),
          s(:send, nil, :new_matrix,
            s(:lvar, :rows),
            s(:send,
              s(:array,
                s(:send,
                  s(:send, nil, :column_count), :-,
                  s(:lvar, :from_col)),
                s(:lvar, :size_col)), :min)))),
      s(:def, :first_minor,
        s(:args,
          s(:arg, :row),
          s(:arg, :column)),
        s(:begin,
          s(:if,
            s(:send, nil, :empty?),
            s(:send, nil, :raise,
              s(:const, nil, :RuntimeError),
              s(:str, "first_minor of empty matrix is not defined")), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:int, 0), :<=,
                s(:lvar, :row)),
              s(:send,
                s(:lvar, :row), :<,
                s(:send, nil, :row_count))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "invalid row ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :row), :inspect)),
                s(:str, " for 0.."),
                s(:begin,
                  s(:send,
                    s(:send, nil, :row_count), :-,
                    s(:int, 1))),
                s(:str, ")")))),
          s(:if,
            s(:and,
              s(:send,
                s(:int, 0), :<=,
                s(:lvar, :column)),
              s(:send,
                s(:lvar, :column), :<,
                s(:send, nil, :column_count))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "invalid column ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :column), :inspect)),
                s(:str, " for 0.."),
                s(:begin,
                  s(:send,
                    s(:send, nil, :column_count), :-,
                    s(:int, 1))),
                s(:str, ")")))),
          s(:lvasgn, :arrays,
            s(:send, nil, :to_a)),
          s(:send,
            s(:lvar, :arrays), :delete_at,
            s(:lvar, :row)),
          s(:block,
            s(:send,
              s(:lvar, :arrays), :each),
            s(:args,
              s(:arg, :array)),
            s(:send,
              s(:lvar, :array), :delete_at,
              s(:lvar, :column))),
          s(:send, nil, :new_matrix,
            s(:lvar, :arrays),
            s(:send,
              s(:send, nil, :column_count), :-,
              s(:int, 1))))),
      s(:def, :cofactor,
        s(:args,
          s(:arg, :row),
          s(:arg, :column)),
        s(:begin,
          s(:if,
            s(:send, nil, :empty?),
            s(:send, nil, :raise,
              s(:const, nil, :RuntimeError),
              s(:str, "cofactor of empty matrix is not defined")), nil),
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:lvasgn, :det_of_minor,
            s(:send,
              s(:send, nil, :first_minor,
                s(:lvar, :row),
                s(:lvar, :column)), :determinant)),
          s(:send,
            s(:lvar, :det_of_minor), :*,
            s(:send,
              s(:begin,
                s(:int, -1)), :**,
              s(:begin,
                s(:send,
                  s(:lvar, :row), :+,
                  s(:lvar, :column))))))),
      s(:def, :adjugate,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send,
              s(:const, nil, :Matrix), :build,
              s(:send, nil, :row_count),
              s(:send, nil, :column_count)),
            s(:args,
              s(:arg, :row),
              s(:arg, :column)),
            s(:send, nil, :cofactor,
              s(:lvar, :column),
              s(:lvar, :row))))),
      s(:def, :laplace_expansion,
        s(:args,
          s(:kwoptarg, :row,
            s(:nil)),
          s(:kwoptarg, :column,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :num,
            s(:or,
              s(:lvar, :row),
              s(:lvar, :column))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :num), :!),
              s(:begin,
                s(:and,
                  s(:lvar, :row),
                  s(:lvar, :column)))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "exactly one the row or column arguments must be specified")), nil),
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:if,
            s(:send, nil, :empty?),
            s(:send, nil, :raise,
              s(:const, nil, :RuntimeError),
              s(:str, "laplace_expansion of empty matrix is not defined")), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:int, 0), :<=,
                s(:lvar, :num)),
              s(:send,
                s(:lvar, :num), :<,
                s(:send, nil, :row_count))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "invalid num ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :num), :inspect)),
                s(:str, " for 0.."),
                s(:begin,
                  s(:send,
                    s(:send, nil, :row_count), :-,
                    s(:int, 1))),
                s(:str, ")")))),
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :send,
                    s(:if,
                      s(:lvar, :row),
                      s(:sym, :row),
                      s(:sym, :column)),
                    s(:lvar, :num)), :map), :with_index),
              s(:args,
                s(:arg, :e),
                s(:arg, :k)),
              s(:send,
                s(:lvar, :e), :*,
                s(:send, nil, :cofactor,
                  s(:splat,
                    s(:begin,
                      s(:if,
                        s(:lvar, :row),
                        s(:array,
                          s(:lvar, :num),
                          s(:lvar, :k)),
                        s(:array,
                          s(:lvar, :k),
                          s(:lvar, :num)))))))), :inject,
            s(:sym, :+)))),
      s(:send, nil, :alias_method,
        s(:sym, :cofactor_expansion),
        s(:sym, :laplace_expansion)),
      s(:def, :diagonal?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:send,
            s(:send, nil, :each,
              s(:sym, :off_diagonal)), :all?,
            s(:block_pass,
              s(:sym, :zero?))))),
      s(:def, :empty?,
        s(:args),
        s(:or,
          s(:send,
            s(:send, nil, :column_count), :==,
            s(:int, 0)),
          s(:send,
            s(:send, nil, :row_count), :==,
            s(:int, 0)))),
      s(:def, :hermitian?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send,
              s(:send, nil, :each_with_index,
                s(:sym, :upper)), :all?),
            s(:args,
              s(:arg, :e),
              s(:arg, :row),
              s(:arg, :col)),
            s(:send,
              s(:lvar, :e), :==,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :rows), :[],
                    s(:lvar, :col)), :[],
                  s(:lvar, :row)), :conj))))),
      s(:def, :lower_triangular?,
        s(:args),
        s(:send,
          s(:send, nil, :each,
            s(:sym, :strict_upper)), :all?,
          s(:block_pass,
            s(:sym, :zero?)))),
      s(:def, :normal?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send,
              s(:send, nil, :rows), :each_with_index),
            s(:args,
              s(:arg, :row_i),
              s(:arg, :i)),
            s(:block,
              s(:send,
                s(:send, nil, :rows), :each_with_index),
              s(:args,
                s(:arg, :row_j),
                s(:arg, :j)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:send, nil, :rows), :each_with_index),
                  s(:args,
                    s(:arg, :row_k),
                    s(:arg, :k)),
                  s(:op_asgn,
                    s(:lvasgn, :s), :+,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :row_i), :[],
                          s(:lvar, :k)), :*,
                        s(:send,
                          s(:send,
                            s(:lvar, :row_j), :[],
                            s(:lvar, :k)), :conj)), :-,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :row_k), :[],
                            s(:lvar, :i)), :conj), :*,
                        s(:send,
                          s(:lvar, :row_k), :[],
                          s(:lvar, :j)))))),
                s(:if,
                  s(:send,
                    s(:lvar, :s), :==,
                    s(:int, 0)), nil,
                  s(:return,
                    s(:false)))))),
          s(:true))),
      s(:def, :orthogonal?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send,
              s(:send, nil, :rows), :each_with_index),
            s(:args,
              s(:arg, :row),
              s(:arg, :i)),
            s(:block,
              s(:send,
                s(:send, nil, :column_count), :times),
              s(:args,
                s(:arg, :j)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:send, nil, :row_count), :times),
                  s(:args,
                    s(:arg, :k)),
                  s(:op_asgn,
                    s(:lvasgn, :s), :+,
                    s(:send,
                      s(:send,
                        s(:lvar, :row), :[],
                        s(:lvar, :k)), :*,
                      s(:send,
                        s(:send,
                          s(:send, nil, :rows), :[],
                          s(:lvar, :k)), :[],
                        s(:lvar, :j))))),
                s(:if,
                  s(:send,
                    s(:lvar, :s), :==,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :i), :==,
                          s(:lvar, :j)),
                        s(:int, 1),
                        s(:int, 0)))), nil,
                  s(:return,
                    s(:false)))))),
          s(:true))),
      s(:def, :permutation?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:lvasgn, :cols,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:send, nil, :column_count))),
          s(:block,
            s(:send,
              s(:send, nil, :rows), :each_with_index),
            s(:args,
              s(:arg, :row),
              s(:arg, :i)),
            s(:begin,
              s(:lvasgn, :found,
                s(:false)),
              s(:block,
                s(:send,
                  s(:lvar, :row), :each_with_index),
                s(:args,
                  s(:arg, :e),
                  s(:arg, :j)),
                s(:if,
                  s(:send,
                    s(:lvar, :e), :==,
                    s(:int, 1)),
                  s(:begin,
                    s(:if,
                      s(:or,
                        s(:lvar, :found),
                        s(:send,
                          s(:lvar, :cols), :[],
                          s(:lvar, :j))),
                      s(:return,
                        s(:false)), nil),
                    s(:lvasgn, :found,
                      s(:send,
                        s(:lvar, :cols), :[]=,
                        s(:lvar, :j),
                        s(:true)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :e), :!=,
                      s(:int, 0)),
                    s(:return,
                      s(:false)), nil))),
              s(:if,
                s(:lvar, :found), nil,
                s(:return,
                  s(:false))))),
          s(:true))),
      s(:def, :real?,
        s(:args),
        s(:send, nil, :all?,
          s(:block_pass,
            s(:sym, :real?)))),
      s(:def, :regular?,
        s(:args),
        s(:send,
          s(:send, nil, :singular?), :!)),
      s(:def, :singular?,
        s(:args),
        s(:send,
          s(:send, nil, :determinant), :==,
          s(:int, 0))),
      s(:def, :square?,
        s(:args),
        s(:send,
          s(:send, nil, :column_count), :==,
          s(:send, nil, :row_count))),
      s(:def, :symmetric?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send, nil, :each_with_index,
              s(:sym, :strict_upper)),
            s(:args,
              s(:arg, :e),
              s(:arg, :row),
              s(:arg, :col)),
            s(:if,
              s(:send,
                s(:lvar, :e), :!=,
                s(:send,
                  s(:send,
                    s(:send, nil, :rows), :[],
                    s(:lvar, :col)), :[],
                  s(:lvar, :row))),
              s(:return,
                s(:false)), nil)),
          s(:true))),
      s(:def, :unitary?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send,
              s(:send, nil, :rows), :each_with_index),
            s(:args,
              s(:arg, :row),
              s(:arg, :i)),
            s(:block,
              s(:send,
                s(:send, nil, :column_count), :times),
              s(:args,
                s(:arg, :j)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:int, 0)),
                s(:block,
                  s(:send,
                    s(:send, nil, :row_count), :times),
                  s(:args,
                    s(:arg, :k)),
                  s(:op_asgn,
                    s(:lvasgn, :s), :+,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :row), :[],
                          s(:lvar, :k)), :conj), :*,
                      s(:send,
                        s(:send,
                          s(:send, nil, :rows), :[],
                          s(:lvar, :k)), :[],
                        s(:lvar, :j))))),
                s(:if,
                  s(:send,
                    s(:lvar, :s), :==,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :i), :==,
                          s(:lvar, :j)),
                        s(:int, 1),
                        s(:int, 0)))), nil,
                  s(:return,
                    s(:false)))))),
          s(:true))),
      s(:def, :upper_triangular?,
        s(:args),
        s(:send,
          s(:send, nil, :each,
            s(:sym, :strict_lower)), :all?,
          s(:block_pass,
            s(:sym, :zero?)))),
      s(:def, :zero?,
        s(:args),
        s(:send, nil, :all?,
          s(:block_pass,
            s(:sym, :zero?)))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :Matrix), :===,
                s(:lvar, :other)),
              s(:send,
                s(:send, nil, :column_count), :==,
                s(:send,
                  s(:lvar, :other), :column_count))), nil,
            s(:return,
              s(:false))),
          s(:send,
            s(:send, nil, :rows), :==,
            s(:send,
              s(:lvar, :other), :rows)))),
      s(:def, :eql?,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :Matrix), :===,
                s(:lvar, :other)),
              s(:send,
                s(:send, nil, :column_count), :==,
                s(:send,
                  s(:lvar, :other), :column_count))), nil,
            s(:return,
              s(:false))),
          s(:send,
            s(:send, nil, :rows), :eql?,
            s(:send,
              s(:lvar, :other), :rows)))),
      s(:def, :clone,
        s(:args),
        s(:send, nil, :new_matrix,
          s(:send,
            s(:ivar, :@rows), :map,
            s(:block_pass,
              s(:sym, :dup))),
          s(:send, nil, :column_count))),
      s(:def, :hash,
        s(:args),
        s(:send,
          s(:ivar, :@rows), :hash)),
      s(:def, :*,
        s(:args,
          s(:arg, :m)),
        s(:case,
          s(:begin,
            s(:lvar, :m)),
          s(:when,
            s(:const, nil, :Numeric),
            s(:begin,
              s(:lvasgn, :rows,
                s(:block,
                  s(:send,
                    s(:ivar, :@rows), :collect),
                  s(:args,
                    s(:arg, :row)),
                  s(:block,
                    s(:send,
                      s(:lvar, :row), :collect),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:lvar, :e), :*,
                      s(:lvar, :m))))),
              s(:return,
                s(:send, nil, :new_matrix,
                  s(:lvar, :rows),
                  s(:send, nil, :column_count))))),
          s(:when,
            s(:const, nil, :Vector),
            s(:begin,
              s(:lvasgn, :m,
                s(:send,
                  s(:send,
                    s(:self), :class), :column_vector,
                  s(:lvar, :m))),
              s(:lvasgn, :r,
                s(:send,
                  s(:self), :*,
                  s(:lvar, :m))),
              s(:return,
                s(:send,
                  s(:lvar, :r), :column,
                  s(:int, 0))))),
          s(:when,
            s(:const, nil, :Matrix),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :column_count), :!=,
                  s(:send,
                    s(:lvar, :m), :row_count)),
                s(:send,
                  s(:const, nil, :Matrix), :Raise,
                  s(:const, nil, :ErrDimensionMismatch)), nil),
              s(:lvasgn, :rows,
                s(:block,
                  s(:send,
                    s(:const, nil, :Array), :new,
                    s(:send, nil, :row_count)),
                  s(:args,
                    s(:arg, :i)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Array), :new,
                      s(:send,
                        s(:lvar, :m), :column_count)),
                    s(:args,
                      s(:arg, :j)),
                    s(:block,
                      s(:send,
                        s(:begin,
                          s(:erange,
                            s(:int, 0),
                            s(:send, nil, :column_count))), :inject,
                        s(:int, 0)),
                      s(:args,
                        s(:arg, :vij),
                        s(:arg, :k)),
                      s(:send,
                        s(:lvar, :vij), :+,
                        s(:send,
                          s(:send,
                            s(:self), :[],
                            s(:lvar, :i),
                            s(:lvar, :k)), :*,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:lvar, :k),
                            s(:lvar, :j)))))))),
              s(:return,
                s(:send, nil, :new_matrix,
                  s(:lvar, :rows),
                  s(:send,
                    s(:lvar, :m), :column_count))))),
          s(:return,
            s(:send, nil, :apply_through_coercion,
              s(:lvar, :m),
              s(:send, nil, :__method__))))),
      s(:def, :+,
        s(:args,
          s(:arg, :m)),
        s(:begin,
          s(:case,
            s(:lvar, :m),
            s(:when,
              s(:const, nil, :Numeric),
              s(:send,
                s(:const, nil, :Matrix), :Raise,
                s(:const, nil, :ErrOperationNotDefined),
                s(:str, "+"),
                s(:send,
                  s(:self), :class),
                s(:send,
                  s(:lvar, :m), :class))),
            s(:when,
              s(:const, nil, :Vector),
              s(:lvasgn, :m,
                s(:send,
                  s(:send,
                    s(:self), :class), :column_vector,
                  s(:lvar, :m)))),
            s(:when,
              s(:const, nil, :Matrix), nil),
            s(:return,
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :m),
                s(:send, nil, :__method__)))),
          s(:if,
            s(:and,
              s(:send,
                s(:send, nil, :row_count), :==,
                s(:send,
                  s(:lvar, :m), :row_count)),
              s(:send,
                s(:send, nil, :column_count), :==,
                s(:send,
                  s(:lvar, :m), :column_count))), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:send, nil, :row_count)),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:const, nil, :Array), :new,
                  s(:send, nil, :column_count)),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:send,
                    s(:self), :[],
                    s(:lvar, :i),
                    s(:lvar, :j)), :+,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:lvar, :i),
                    s(:lvar, :j)))))),
          s(:send, nil, :new_matrix,
            s(:lvar, :rows),
            s(:send, nil, :column_count)))),
      s(:def, :-,
        s(:args,
          s(:arg, :m)),
        s(:begin,
          s(:case,
            s(:lvar, :m),
            s(:when,
              s(:const, nil, :Numeric),
              s(:send,
                s(:const, nil, :Matrix), :Raise,
                s(:const, nil, :ErrOperationNotDefined),
                s(:str, "-"),
                s(:send,
                  s(:self), :class),
                s(:send,
                  s(:lvar, :m), :class))),
            s(:when,
              s(:const, nil, :Vector),
              s(:lvasgn, :m,
                s(:send,
                  s(:send,
                    s(:self), :class), :column_vector,
                  s(:lvar, :m)))),
            s(:when,
              s(:const, nil, :Matrix), nil),
            s(:return,
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :m),
                s(:send, nil, :__method__)))),
          s(:if,
            s(:and,
              s(:send,
                s(:send, nil, :row_count), :==,
                s(:send,
                  s(:lvar, :m), :row_count)),
              s(:send,
                s(:send, nil, :column_count), :==,
                s(:send,
                  s(:lvar, :m), :column_count))), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:lvasgn, :rows,
            s(:block,
              s(:send,
                s(:const, nil, :Array), :new,
                s(:send, nil, :row_count)),
              s(:args,
                s(:arg, :i)),
              s(:block,
                s(:send,
                  s(:const, nil, :Array), :new,
                  s(:send, nil, :column_count)),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:send,
                    s(:self), :[],
                    s(:lvar, :i),
                    s(:lvar, :j)), :-,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:lvar, :i),
                    s(:lvar, :j)))))),
          s(:send, nil, :new_matrix,
            s(:lvar, :rows),
            s(:send, nil, :column_count)))),
      s(:def, :/,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :Numeric),
            s(:begin,
              s(:lvasgn, :rows,
                s(:block,
                  s(:send,
                    s(:ivar, :@rows), :collect),
                  s(:args,
                    s(:arg, :row)),
                  s(:block,
                    s(:send,
                      s(:lvar, :row), :collect),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:lvar, :e), :/,
                      s(:lvar, :other))))),
              s(:return,
                s(:send, nil, :new_matrix,
                  s(:lvar, :rows),
                  s(:send, nil, :column_count))))),
          s(:when,
            s(:const, nil, :Matrix),
            s(:return,
              s(:send,
                s(:self), :*,
                s(:send,
                  s(:lvar, :other), :inverse)))),
          s(:return,
            s(:send, nil, :apply_through_coercion,
              s(:lvar, :other),
              s(:send, nil, :__method__))))),
      s(:def, :inverse,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:send,
            s(:send,
              s(:send,
                s(:self), :class), :I,
              s(:send, nil, :row_count)), :send,
            s(:sym, :inverse_from),
            s(:self)))),
      s(:alias,
        s(:sym, :inv),
        s(:sym, :inverse)),
      s(:def, :inverse_from,
        s(:args,
          s(:arg, :src)),
        s(:begin,
          s(:lvasgn, :last,
            s(:send,
              s(:send, nil, :row_count), :-,
              s(:int, 1))),
          s(:lvasgn, :a,
            s(:send,
              s(:lvar, :src), :to_a)),
          s(:block,
            s(:send,
              s(:int, 0), :upto,
              s(:lvar, :last)),
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:lvasgn, :i,
                s(:lvar, :k)),
              s(:lvasgn, :akk,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:lvar, :k)), :[],
                    s(:lvar, :k)), :abs)),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :+,
                      s(:int, 1))), :upto,
                  s(:lvar, :last)),
                s(:args,
                  s(:arg, :j)),
                s(:begin,
                  s(:lvasgn, :v,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :j)), :[],
                        s(:lvar, :k)), :abs)),
                  s(:if,
                    s(:send,
                      s(:lvar, :v), :>,
                      s(:lvar, :akk)),
                    s(:begin,
                      s(:lvasgn, :i,
                        s(:lvar, :j)),
                      s(:lvasgn, :akk,
                        s(:lvar, :v))), nil))),
              s(:if,
                s(:send,
                  s(:lvar, :akk), :==,
                  s(:int, 0)),
                s(:send,
                  s(:const, nil, :Matrix), :Raise,
                  s(:const, nil, :ErrNotRegular)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :i), :!=,
                  s(:lvar, :k)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:send,
                        s(:lvar, :a), :[]=,
                        s(:lvar, :i)),
                      s(:send,
                        s(:lvar, :a), :[]=,
                        s(:lvar, :k))),
                    s(:array,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :k)),
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :i)))),
                  s(:masgn,
                    s(:mlhs,
                      s(:send,
                        s(:ivar, :@rows), :[]=,
                        s(:lvar, :i)),
                      s(:send,
                        s(:ivar, :@rows), :[]=,
                        s(:lvar, :k))),
                    s(:array,
                      s(:send,
                        s(:ivar, :@rows), :[],
                        s(:lvar, :k)),
                      s(:send,
                        s(:ivar, :@rows), :[],
                        s(:lvar, :i))))), nil),
              s(:lvasgn, :akk,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :[],
                    s(:lvar, :k)), :[],
                  s(:lvar, :k))),
              s(:block,
                s(:send,
                  s(:int, 0), :upto,
                  s(:lvar, :last)),
                s(:args,
                  s(:arg, :ii)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :ii), :==,
                      s(:lvar, :k)),
                    s(:next), nil),
                  s(:lvasgn, :q,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :ii)), :[],
                        s(:lvar, :k)), :quo,
                      s(:lvar, :akk))),
                  s(:send,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:lvar, :ii)), :[]=,
                    s(:lvar, :k),
                    s(:int, 0)),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :k), :+,
                          s(:int, 1))), :upto,
                      s(:lvar, :last)),
                    s(:args,
                      s(:arg, :j)),
                    s(:op_asgn,
                      s(:send,
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :ii)), :[],
                        s(:lvar, :j)), :-,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :a), :[],
                            s(:lvar, :k)), :[],
                          s(:lvar, :j)), :*,
                        s(:lvar, :q)))),
                  s(:block,
                    s(:send,
                      s(:int, 0), :upto,
                      s(:lvar, :last)),
                    s(:args,
                      s(:arg, :j)),
                    s(:op_asgn,
                      s(:send,
                        s(:send,
                          s(:ivar, :@rows), :[],
                          s(:lvar, :ii)), :[],
                        s(:lvar, :j)), :-,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:ivar, :@rows), :[],
                            s(:lvar, :k)), :[],
                          s(:lvar, :j)), :*,
                        s(:lvar, :q)))))),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :+,
                      s(:int, 1))), :upto,
                  s(:lvar, :last)),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:send,
                    s(:lvar, :a), :[],
                    s(:lvar, :k)), :[]=,
                  s(:lvar, :j),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :k)), :[],
                      s(:lvar, :j)), :quo,
                    s(:lvar, :akk)))),
              s(:block,
                s(:send,
                  s(:int, 0), :upto,
                  s(:lvar, :last)),
                s(:args,
                  s(:arg, :j)),
                s(:send,
                  s(:send,
                    s(:ivar, :@rows), :[],
                    s(:lvar, :k)), :[]=,
                  s(:lvar, :j),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@rows), :[],
                        s(:lvar, :k)), :[],
                      s(:lvar, :j)), :quo,
                    s(:lvar, :akk)))))),
          s(:self))),
      s(:send, nil, :private,
        s(:sym, :inverse_from)),
      s(:def, :**,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :Integer),
            s(:begin,
              s(:lvasgn, :x,
                s(:self)),
              s(:if,
                s(:send,
                  s(:lvar, :other), :<=,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :x,
                    s(:send,
                      s(:self), :inverse)),
                  s(:if,
                    s(:send,
                      s(:lvar, :other), :==,
                      s(:int, 0)),
                    s(:return,
                      s(:send,
                        s(:send,
                          s(:self), :class), :identity,
                        s(:send,
                          s(:self), :column_count))), nil),
                  s(:lvasgn, :other,
                    s(:send,
                      s(:lvar, :other), :-@))), nil),
              s(:lvasgn, :z,
                s(:nil)),
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :other), :[],
                        s(:int, 0)), :==,
                      s(:int, 1)),
                    s(:lvasgn, :z,
                      s(:if,
                        s(:lvar, :z),
                        s(:send,
                          s(:lvar, :z), :*,
                          s(:lvar, :x)),
                        s(:lvar, :x))), nil),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:op_asgn,
                          s(:lvasgn, :other), :>>,
                          s(:int, 1))), :zero?),
                    s(:return,
                      s(:lvar, :z)), nil),
                  s(:op_asgn,
                    s(:lvasgn, :x), :*,
                    s(:lvar, :x)))))),
          s(:when,
            s(:const, nil, :Numeric),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :v),
                  s(:lvasgn, :d),
                  s(:lvasgn, :v_inv)),
                s(:send, nil, :eigensystem)),
              s(:send,
                s(:send,
                  s(:lvar, :v), :*,
                  s(:send,
                    s(:send,
                      s(:self), :class), :diagonal,
                    s(:splat,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :d), :each,
                            s(:sym, :diagonal)), :map),
                        s(:args,
                          s(:arg, :e)),
                        s(:send,
                          s(:lvar, :e), :**,
                          s(:lvar, :other)))))), :*,
                s(:lvar, :v_inv)))),
          s(:send,
            s(:const, nil, :Matrix), :Raise,
            s(:const, nil, :ErrOperationNotDefined),
            s(:str, "**"),
            s(:send,
              s(:self), :class),
            s(:send,
              s(:lvar, :other), :class)))),
      s(:def, :+@,
        s(:args),
        s(:self)),
      s(:def, :-@,
        s(:args),
        s(:block,
          s(:send, nil, :collect),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:lvar, :e), :-@))),
      s(:def, :determinant,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:lvasgn, :m,
            s(:ivar, :@rows)),
          s(:case,
            s(:send, nil, :row_count),
            s(:when,
              s(:int, 0),
              s(:int, 1)),
            s(:when,
              s(:int, 1),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 0)), :[],
                  s(:int, 0)), :+@)),
            s(:when,
              s(:int, 2),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 0)), :[],
                      s(:int, 0)), :+@), :*,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 1)), :[],
                    s(:int, 1))), :-,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 0)), :[],
                    s(:int, 1)), :*,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 1)), :[],
                    s(:int, 0))))),
            s(:when,
              s(:int, 3),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :m0),
                    s(:lvasgn, :m1),
                    s(:lvasgn, :m2)),
                  s(:lvar, :m)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m0), :[],
                                  s(:int, 0)), :+@), :*,
                              s(:send,
                                s(:lvar, :m1), :[],
                                s(:int, 1))), :*,
                            s(:send,
                              s(:lvar, :m2), :[],
                              s(:int, 2))), :-,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :m0), :[],
                                s(:int, 0)), :*,
                              s(:send,
                                s(:lvar, :m1), :[],
                                s(:int, 2))), :*,
                            s(:send,
                              s(:lvar, :m2), :[],
                              s(:int, 1)))), :-,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :m0), :[],
                              s(:int, 1)), :*,
                            s(:send,
                              s(:lvar, :m1), :[],
                              s(:int, 0))), :*,
                          s(:send,
                            s(:lvar, :m2), :[],
                            s(:int, 2)))), :+,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :m0), :[],
                            s(:int, 1)), :*,
                          s(:send,
                            s(:lvar, :m1), :[],
                            s(:int, 2))), :*,
                        s(:send,
                          s(:lvar, :m2), :[],
                          s(:int, 0)))), :+,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :m0), :[],
                          s(:int, 2)), :*,
                        s(:send,
                          s(:lvar, :m1), :[],
                          s(:int, 0))), :*,
                      s(:send,
                        s(:lvar, :m2), :[],
                        s(:int, 1)))), :-,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :m0), :[],
                        s(:int, 2)), :*,
                      s(:send,
                        s(:lvar, :m1), :[],
                        s(:int, 1))), :*,
                    s(:send,
                      s(:lvar, :m2), :[],
                      s(:int, 0)))))),
            s(:when,
              s(:int, 4),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :m0),
                    s(:lvasgn, :m1),
                    s(:lvasgn, :m2),
                    s(:lvasgn, :m3)),
                  s(:lvar, :m)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:send,
                                              s(:send,
                                                s(:send,
                                                  s(:send,
                                                    s(:send,
                                                      s(:send,
                                                        s(:send,
                                                          s(:send,
                                                            s(:send,
                                                              s(:send,
                                                                s(:send,
                                                                  s(:send,
                                                                    s(:send,
                                                                      s(:send,
                                                                        s(:lvar, :m0), :[],
                                                                        s(:int, 0)), :+@), :*,
                                                                    s(:send,
                                                                      s(:lvar, :m1), :[],
                                                                      s(:int, 1))), :*,
                                                                  s(:send,
                                                                    s(:lvar, :m2), :[],
                                                                    s(:int, 2))), :*,
                                                                s(:send,
                                                                  s(:lvar, :m3), :[],
                                                                  s(:int, 3))), :-,
                                                              s(:send,
                                                                s(:send,
                                                                  s(:send,
                                                                    s(:send,
                                                                      s(:lvar, :m0), :[],
                                                                      s(:int, 0)), :*,
                                                                    s(:send,
                                                                      s(:lvar, :m1), :[],
                                                                      s(:int, 1))), :*,
                                                                  s(:send,
                                                                    s(:lvar, :m2), :[],
                                                                    s(:int, 3))), :*,
                                                                s(:send,
                                                                  s(:lvar, :m3), :[],
                                                                  s(:int, 2)))), :-,
                                                            s(:send,
                                                              s(:send,
                                                                s(:send,
                                                                  s(:send,
                                                                    s(:lvar, :m0), :[],
                                                                    s(:int, 0)), :*,
                                                                  s(:send,
                                                                    s(:lvar, :m1), :[],
                                                                    s(:int, 2))), :*,
                                                                s(:send,
                                                                  s(:lvar, :m2), :[],
                                                                  s(:int, 1))), :*,
                                                              s(:send,
                                                                s(:lvar, :m3), :[],
                                                                s(:int, 3)))), :+,
                                                          s(:send,
                                                            s(:send,
                                                              s(:send,
                                                                s(:send,
                                                                  s(:lvar, :m0), :[],
                                                                  s(:int, 0)), :*,
                                                                s(:send,
                                                                  s(:lvar, :m1), :[],
                                                                  s(:int, 2))), :*,
                                                              s(:send,
                                                                s(:lvar, :m2), :[],
                                                                s(:int, 3))), :*,
                                                            s(:send,
                                                              s(:lvar, :m3), :[],
                                                              s(:int, 1)))), :+,
                                                        s(:send,
                                                          s(:send,
                                                            s(:send,
                                                              s(:send,
                                                                s(:lvar, :m0), :[],
                                                                s(:int, 0)), :*,
                                                              s(:send,
                                                                s(:lvar, :m1), :[],
                                                                s(:int, 3))), :*,
                                                            s(:send,
                                                              s(:lvar, :m2), :[],
                                                              s(:int, 1))), :*,
                                                          s(:send,
                                                            s(:lvar, :m3), :[],
                                                            s(:int, 2)))), :-,
                                                      s(:send,
                                                        s(:send,
                                                          s(:send,
                                                            s(:send,
                                                              s(:lvar, :m0), :[],
                                                              s(:int, 0)), :*,
                                                            s(:send,
                                                              s(:lvar, :m1), :[],
                                                              s(:int, 3))), :*,
                                                          s(:send,
                                                            s(:lvar, :m2), :[],
                                                            s(:int, 2))), :*,
                                                        s(:send,
                                                          s(:lvar, :m3), :[],
                                                          s(:int, 1)))), :-,
                                                    s(:send,
                                                      s(:send,
                                                        s(:send,
                                                          s(:send,
                                                            s(:lvar, :m0), :[],
                                                            s(:int, 1)), :*,
                                                          s(:send,
                                                            s(:lvar, :m1), :[],
                                                            s(:int, 0))), :*,
                                                        s(:send,
                                                          s(:lvar, :m2), :[],
                                                          s(:int, 2))), :*,
                                                      s(:send,
                                                        s(:lvar, :m3), :[],
                                                        s(:int, 3)))), :+,
                                                  s(:send,
                                                    s(:send,
                                                      s(:send,
                                                        s(:send,
                                                          s(:lvar, :m0), :[],
                                                          s(:int, 1)), :*,
                                                        s(:send,
                                                          s(:lvar, :m1), :[],
                                                          s(:int, 0))), :*,
                                                      s(:send,
                                                        s(:lvar, :m2), :[],
                                                        s(:int, 3))), :*,
                                                    s(:send,
                                                      s(:lvar, :m3), :[],
                                                      s(:int, 2)))), :+,
                                                s(:send,
                                                  s(:send,
                                                    s(:send,
                                                      s(:send,
                                                        s(:lvar, :m0), :[],
                                                        s(:int, 1)), :*,
                                                      s(:send,
                                                        s(:lvar, :m1), :[],
                                                        s(:int, 2))), :*,
                                                    s(:send,
                                                      s(:lvar, :m2), :[],
                                                      s(:int, 0))), :*,
                                                  s(:send,
                                                    s(:lvar, :m3), :[],
                                                    s(:int, 3)))), :-,
                                              s(:send,
                                                s(:send,
                                                  s(:send,
                                                    s(:send,
                                                      s(:lvar, :m0), :[],
                                                      s(:int, 1)), :*,
                                                    s(:send,
                                                      s(:lvar, :m1), :[],
                                                      s(:int, 2))), :*,
                                                  s(:send,
                                                    s(:lvar, :m2), :[],
                                                    s(:int, 3))), :*,
                                                s(:send,
                                                  s(:lvar, :m3), :[],
                                                  s(:int, 0)))), :-,
                                            s(:send,
                                              s(:send,
                                                s(:send,
                                                  s(:send,
                                                    s(:lvar, :m0), :[],
                                                    s(:int, 1)), :*,
                                                  s(:send,
                                                    s(:lvar, :m1), :[],
                                                    s(:int, 3))), :*,
                                                s(:send,
                                                  s(:lvar, :m2), :[],
                                                  s(:int, 0))), :*,
                                              s(:send,
                                                s(:lvar, :m3), :[],
                                                s(:int, 2)))), :+,
                                          s(:send,
                                            s(:send,
                                              s(:send,
                                                s(:send,
                                                  s(:lvar, :m0), :[],
                                                  s(:int, 1)), :*,
                                                s(:send,
                                                  s(:lvar, :m1), :[],
                                                  s(:int, 3))), :*,
                                              s(:send,
                                                s(:lvar, :m2), :[],
                                                s(:int, 2))), :*,
                                            s(:send,
                                              s(:lvar, :m3), :[],
                                              s(:int, 0)))), :+,
                                        s(:send,
                                          s(:send,
                                            s(:send,
                                              s(:send,
                                                s(:lvar, :m0), :[],
                                                s(:int, 2)), :*,
                                              s(:send,
                                                s(:lvar, :m1), :[],
                                                s(:int, 0))), :*,
                                            s(:send,
                                              s(:lvar, :m2), :[],
                                              s(:int, 1))), :*,
                                          s(:send,
                                            s(:lvar, :m3), :[],
                                            s(:int, 3)))), :-,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:send,
                                              s(:lvar, :m0), :[],
                                              s(:int, 2)), :*,
                                            s(:send,
                                              s(:lvar, :m1), :[],
                                              s(:int, 0))), :*,
                                          s(:send,
                                            s(:lvar, :m2), :[],
                                            s(:int, 3))), :*,
                                        s(:send,
                                          s(:lvar, :m3), :[],
                                          s(:int, 1)))), :-,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:send,
                                            s(:lvar, :m0), :[],
                                            s(:int, 2)), :*,
                                          s(:send,
                                            s(:lvar, :m1), :[],
                                            s(:int, 1))), :*,
                                        s(:send,
                                          s(:lvar, :m2), :[],
                                          s(:int, 0))), :*,
                                      s(:send,
                                        s(:lvar, :m3), :[],
                                        s(:int, 3)))), :+,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :m0), :[],
                                          s(:int, 2)), :*,
                                        s(:send,
                                          s(:lvar, :m1), :[],
                                          s(:int, 1))), :*,
                                      s(:send,
                                        s(:lvar, :m2), :[],
                                        s(:int, 3))), :*,
                                    s(:send,
                                      s(:lvar, :m3), :[],
                                      s(:int, 0)))), :+,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :m0), :[],
                                        s(:int, 2)), :*,
                                      s(:send,
                                        s(:lvar, :m1), :[],
                                        s(:int, 3))), :*,
                                    s(:send,
                                      s(:lvar, :m2), :[],
                                      s(:int, 0))), :*,
                                  s(:send,
                                    s(:lvar, :m3), :[],
                                    s(:int, 1)))), :-,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :m0), :[],
                                      s(:int, 2)), :*,
                                    s(:send,
                                      s(:lvar, :m1), :[],
                                      s(:int, 3))), :*,
                                  s(:send,
                                    s(:lvar, :m2), :[],
                                    s(:int, 1))), :*,
                                s(:send,
                                  s(:lvar, :m3), :[],
                                  s(:int, 0)))), :-,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :m0), :[],
                                    s(:int, 3)), :*,
                                  s(:send,
                                    s(:lvar, :m1), :[],
                                    s(:int, 0))), :*,
                                s(:send,
                                  s(:lvar, :m2), :[],
                                  s(:int, 1))), :*,
                              s(:send,
                                s(:lvar, :m3), :[],
                                s(:int, 2)))), :+,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m0), :[],
                                  s(:int, 3)), :*,
                                s(:send,
                                  s(:lvar, :m1), :[],
                                  s(:int, 0))), :*,
                              s(:send,
                                s(:lvar, :m2), :[],
                                s(:int, 2))), :*,
                            s(:send,
                              s(:lvar, :m3), :[],
                              s(:int, 1)))), :+,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :m0), :[],
                                s(:int, 3)), :*,
                              s(:send,
                                s(:lvar, :m1), :[],
                                s(:int, 1))), :*,
                            s(:send,
                              s(:lvar, :m2), :[],
                              s(:int, 0))), :*,
                          s(:send,
                            s(:lvar, :m3), :[],
                            s(:int, 2)))), :-,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :m0), :[],
                              s(:int, 3)), :*,
                            s(:send,
                              s(:lvar, :m1), :[],
                              s(:int, 1))), :*,
                          s(:send,
                            s(:lvar, :m2), :[],
                            s(:int, 2))), :*,
                        s(:send,
                          s(:lvar, :m3), :[],
                          s(:int, 0)))), :-,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :m0), :[],
                            s(:int, 3)), :*,
                          s(:send,
                            s(:lvar, :m1), :[],
                            s(:int, 2))), :*,
                        s(:send,
                          s(:lvar, :m2), :[],
                          s(:int, 0))), :*,
                      s(:send,
                        s(:lvar, :m3), :[],
                        s(:int, 1)))), :+,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :m0), :[],
                          s(:int, 3)), :*,
                        s(:send,
                          s(:lvar, :m1), :[],
                          s(:int, 2))), :*,
                      s(:send,
                        s(:lvar, :m2), :[],
                        s(:int, 1))), :*,
                    s(:send,
                      s(:lvar, :m3), :[],
                      s(:int, 0)))))),
            s(:send, nil, :determinant_bareiss)))),
      s(:send, nil, :alias_method,
        s(:sym, :det),
        s(:sym, :determinant)),
      s(:def, :determinant_bareiss,
        s(:args),
        s(:begin,
          s(:lvasgn, :size,
            s(:send, nil, :row_count)),
          s(:lvasgn, :last,
            s(:send,
              s(:lvar, :size), :-,
              s(:int, 1))),
          s(:lvasgn, :a,
            s(:send, nil, :to_a)),
          s(:lvasgn, :no_pivot,
            s(:block,
              s(:send,
                s(:const, nil, :Proc), :new),
              s(:args),
              s(:return,
                s(:int, 0)))),
          s(:lvasgn, :sign,
            s(:int, 1)),
          s(:lvasgn, :pivot,
            s(:int, 1)),
          s(:block,
            s(:send,
              s(:lvar, :size), :times),
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:lvasgn, :previous_pivot,
                s(:lvar, :pivot)),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :pivot,
                      s(:send,
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :k)), :[],
                        s(:lvar, :k)))), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :switch,
                    s(:block,
                      s(:send,
                        s(:begin,
                          s(:erange,
                            s(:send,
                              s(:lvar, :k), :+,
                              s(:int, 1)),
                            s(:lvar, :size))), :find,
                        s(:lvar, :no_pivot)),
                      s(:args,
                        s(:arg, :row)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :a), :[],
                            s(:lvar, :row)), :[],
                          s(:lvar, :k)), :!=,
                        s(:int, 0)))),
                  s(:masgn,
                    s(:mlhs,
                      s(:send,
                        s(:lvar, :a), :[]=,
                        s(:lvar, :switch)),
                      s(:send,
                        s(:lvar, :a), :[]=,
                        s(:lvar, :k))),
                    s(:array,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :k)),
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :switch)))),
                  s(:lvasgn, :pivot,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :k)), :[],
                      s(:lvar, :k))),
                  s(:lvasgn, :sign,
                    s(:send,
                      s(:lvar, :sign), :-@))), nil),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :k), :+,
                      s(:int, 1))), :upto,
                  s(:lvar, :last)),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:lvasgn, :ai,
                    s(:send,
                      s(:lvar, :a), :[],
                      s(:lvar, :i))),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :k), :+,
                          s(:int, 1))), :upto,
                      s(:lvar, :last)),
                    s(:args,
                      s(:arg, :j)),
                    s(:send,
                      s(:lvar, :ai), :[]=,
                      s(:lvar, :j),
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :pivot), :*,
                              s(:send,
                                s(:lvar, :ai), :[],
                                s(:lvar, :j))), :-,
                            s(:send,
                              s(:send,
                                s(:lvar, :ai), :[],
                                s(:lvar, :k)), :*,
                              s(:send,
                                s(:send,
                                  s(:lvar, :a), :[],
                                  s(:lvar, :k)), :[],
                                s(:lvar, :j))))), :/,
                        s(:lvar, :previous_pivot)))))))),
          s(:send,
            s(:lvar, :sign), :*,
            s(:lvar, :pivot)))),
      s(:send, nil, :private,
        s(:sym, :determinant_bareiss)),
      s(:def, :determinant_e,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Matrix#determinant_e is deprecated; use #determinant"))),
          s(:send, nil, :determinant))),
      s(:alias,
        s(:sym, :det_e),
        s(:sym, :determinant_e)),
      s(:def, :hstack,
        s(:args,
          s(:restarg, :matrices)),
        s(:send,
          s(:send,
            s(:self), :class), :hstack,
          s(:self),
          s(:splat,
            s(:lvar, :matrices)))),
      s(:def, :rank,
        s(:args),
        s(:begin,
          s(:lvasgn, :a,
            s(:send, nil, :to_a)),
          s(:lvasgn, :last_column,
            s(:send,
              s(:send, nil, :column_count), :-,
              s(:int, 1))),
          s(:lvasgn, :last_row,
            s(:send,
              s(:send, nil, :row_count), :-,
              s(:int, 1))),
          s(:lvasgn, :pivot_row,
            s(:int, 0)),
          s(:lvasgn, :previous_pivot,
            s(:int, 1)),
          s(:block,
            s(:send,
              s(:int, 0), :upto,
              s(:lvar, :last_column)),
            s(:args,
              s(:arg, :k)),
            s(:begin,
              s(:lvasgn, :switch_row,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:lvar, :pivot_row),
                        s(:lvar, :last_row))), :find),
                  s(:args,
                    s(:arg, :row)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :row)), :[],
                      s(:lvar, :k)), :!=,
                    s(:int, 0)))),
              s(:if,
                s(:lvar, :switch_row),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :pivot_row), :==,
                      s(:lvar, :switch_row)), nil,
                    s(:masgn,
                      s(:mlhs,
                        s(:send,
                          s(:lvar, :a), :[]=,
                          s(:lvar, :switch_row)),
                        s(:send,
                          s(:lvar, :a), :[]=,
                          s(:lvar, :pivot_row))),
                      s(:array,
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :pivot_row)),
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :switch_row))))),
                  s(:lvasgn, :pivot,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:lvar, :pivot_row)), :[],
                      s(:lvar, :k))),
                  s(:block,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :pivot_row), :+,
                          s(:int, 1))), :upto,
                      s(:lvar, :last_row)),
                    s(:args,
                      s(:arg, :i)),
                    s(:begin,
                      s(:lvasgn, :ai,
                        s(:send,
                          s(:lvar, :a), :[],
                          s(:lvar, :i))),
                      s(:block,
                        s(:send,
                          s(:begin,
                            s(:send,
                              s(:lvar, :k), :+,
                              s(:int, 1))), :upto,
                          s(:lvar, :last_column)),
                        s(:args,
                          s(:arg, :j)),
                        s(:send,
                          s(:lvar, :ai), :[]=,
                          s(:lvar, :j),
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:lvar, :pivot), :*,
                                  s(:send,
                                    s(:lvar, :ai), :[],
                                    s(:lvar, :j))), :-,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :ai), :[],
                                    s(:lvar, :k)), :*,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :a), :[],
                                      s(:lvar, :pivot_row)), :[],
                                    s(:lvar, :j))))), :/,
                            s(:lvar, :previous_pivot)))))),
                  s(:op_asgn,
                    s(:lvasgn, :pivot_row), :+,
                    s(:int, 1)),
                  s(:lvasgn, :previous_pivot,
                    s(:lvar, :pivot))), nil))),
          s(:lvar, :pivot_row))),
      s(:def, :rank_e,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Matrix#rank_e is deprecated; use #rank"))),
          s(:send, nil, :rank))),
      s(:def, :round,
        s(:args,
          s(:optarg, :ndigits,
            s(:int, 0))),
        s(:block,
          s(:send, nil, :map),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:lvar, :e), :round,
            s(:lvar, :ndigits)))),
      s(:def, :trace,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :square?), nil,
            s(:send,
              s(:const, nil, :Matrix), :Raise,
              s(:const, nil, :ErrDimensionMismatch))),
          s(:block,
            s(:send,
              s(:begin,
                s(:erange,
                  s(:int, 0),
                  s(:send, nil, :column_count))), :inject,
              s(:int, 0)),
            s(:args,
              s(:arg, :tr),
              s(:arg, :i)),
            s(:send,
              s(:lvar, :tr), :+,
              s(:send,
                s(:send,
                  s(:ivar, :@rows), :[],
                  s(:lvar, :i)), :[],
                s(:lvar, :i)))))),
      s(:alias,
        s(:sym, :tr),
        s(:sym, :trace)),
      s(:def, :transpose,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :row_count), :zero?),
            s(:return,
              s(:send,
                s(:send,
                  s(:self), :class), :empty,
                s(:send, nil, :column_count),
                s(:int, 0))), nil),
          s(:send, nil, :new_matrix,
            s(:send,
              s(:ivar, :@rows), :transpose),
            s(:send, nil, :row_count)))),
      s(:alias,
        s(:sym, :t),
        s(:sym, :transpose)),
      s(:def, :vstack,
        s(:args,
          s(:restarg, :matrices)),
        s(:send,
          s(:send,
            s(:self), :class), :vstack,
          s(:self),
          s(:splat,
            s(:lvar, :matrices)))),
      s(:def, :eigensystem,
        s(:args),
        s(:send,
          s(:const, nil, :EigenvalueDecomposition), :new,
          s(:self))),
      s(:alias,
        s(:sym, :eigen),
        s(:sym, :eigensystem)),
      s(:def, :lup,
        s(:args),
        s(:send,
          s(:const, nil, :LUPDecomposition), :new,
          s(:self))),
      s(:alias,
        s(:sym, :lup_decomposition),
        s(:sym, :lup)),
      s(:def, :conjugate,
        s(:args),
        s(:send, nil, :collect,
          s(:block_pass,
            s(:sym, :conjugate)))),
      s(:alias,
        s(:sym, :conj),
        s(:sym, :conjugate)),
      s(:def, :imaginary,
        s(:args),
        s(:send, nil, :collect,
          s(:block_pass,
            s(:sym, :imaginary)))),
      s(:alias,
        s(:sym, :imag),
        s(:sym, :imaginary)),
      s(:def, :real,
        s(:args),
        s(:send, nil, :collect,
          s(:block_pass,
            s(:sym, :real)))),
      s(:def, :rect,
        s(:args),
        s(:array,
          s(:send, nil, :real),
          s(:send, nil, :imag))),
      s(:alias,
        s(:sym, :rectangular),
        s(:sym, :rect)),
      s(:def, :coerce,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :Numeric),
            s(:return,
              s(:send,
                s(:const, nil, :Scalar), :new,
                s(:lvar, :other)),
              s(:self))),
          s(:send, nil, :raise,
            s(:const, nil, :TypeError),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, " can't be coerced into "),
              s(:begin,
                s(:send,
                  s(:lvar, :other), :class)))))),
      s(:def, :row_vectors,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Array), :new,
            s(:send, nil, :row_count)),
          s(:args,
            s(:arg, :i)),
          s(:send, nil, :row,
            s(:lvar, :i)))),
      s(:def, :column_vectors,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :Array), :new,
            s(:send, nil, :column_count)),
          s(:args,
            s(:arg, :i)),
          s(:send, nil, :column,
            s(:lvar, :i)))),
      s(:def, :to_a,
        s(:args),
        s(:send,
          s(:ivar, :@rows), :collect,
          s(:block_pass,
            s(:sym, :dup)))),
      s(:def, :elements_to_f,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Matrix#elements_to_f is deprecated, use map(&:to_f)"))),
          s(:send, nil, :map,
            s(:block_pass,
              s(:sym, :to_f))))),
      s(:def, :elements_to_i,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Matrix#elements_to_i is deprecated, use map(&:to_i)"))),
          s(:send, nil, :map,
            s(:block_pass,
              s(:sym, :to_i))))),
      s(:def, :elements_to_r,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Matrix#elements_to_r is deprecated, use map(&:to_r)"))),
          s(:send, nil, :map,
            s(:block_pass,
              s(:sym, :to_r))))),
      s(:def, :to_s,
        s(:args),
        s(:if,
          s(:send, nil, :empty?),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:str, ".empty("),
            s(:begin,
              s(:send, nil, :row_count)),
            s(:str, ", "),
            s(:begin,
              s(:send, nil, :column_count)),
            s(:str, ")")),
          s(:send,
            s(:send,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:self), :class)),
                s(:str, "[")), :+,
              s(:send,
                s(:block,
                  s(:send,
                    s(:ivar, :@rows), :collect),
                  s(:args,
                    s(:arg, :row)),
                  s(:send,
                    s(:send,
                      s(:str, "["), :+,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :row), :collect),
                          s(:args,
                            s(:arg, :e)),
                          s(:send,
                            s(:lvar, :e), :to_s)), :join,
                        s(:str, ", "))), :+,
                    s(:str, "]"))), :join,
                s(:str, ", "))), :+,
            s(:str, "]")))),
      s(:def, :inspect,
        s(:args),
        s(:if,
          s(:send, nil, :empty?),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:str, ".empty("),
            s(:begin,
              s(:send, nil, :row_count)),
            s(:str, ", "),
            s(:begin,
              s(:send, nil, :column_count)),
            s(:str, ")")),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:begin,
              s(:send,
                s(:ivar, :@rows), :inspect))))),
      s(:module,
        s(:const, nil, :ConversionHelper),
        s(:begin,
          s(:def, :convert_to_array,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :copy,
                s(:false))),
            s(:case,
              s(:lvar, :obj),
              s(:when,
                s(:const, nil, :Array),
                s(:if,
                  s(:lvar, :copy),
                  s(:send,
                    s(:lvar, :obj), :dup),
                  s(:lvar, :obj))),
              s(:when,
                s(:const, nil, :Vector),
                s(:send,
                  s(:lvar, :obj), :to_a)),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :converted,
                      s(:send,
                        s(:lvar, :obj), :to_ary)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :e),
                      s(:send, nil, :raise,
                        s(:const, nil, :TypeError),
                        s(:dstr,
                          s(:str, "can't convert "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :obj), :class)),
                          s(:str, " into an Array ("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :message)),
                          s(:str, ")")))), nil)),
                s(:if,
                  s(:send,
                    s(:lvar, :converted), :is_a?,
                    s(:const, nil, :Array)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError),
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :obj), :class)),
                      s(:str, "#to_ary should return an Array")))),
                s(:lvar, :converted)))),
          s(:send, nil, :private,
            s(:sym, :convert_to_array)))),
      s(:send, nil, :extend,
        s(:const, nil, :ConversionHelper)),
      s(:module,
        s(:const, nil, :CoercionHelper),
        s(:begin,
          s(:def, :apply_through_coercion,
            s(:args,
              s(:arg, :obj),
              s(:arg, :oper)),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :coercion,
                  s(:send,
                    s(:lvar, :obj), :coerce,
                    s(:self))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :coercion), :is_a?,
                      s(:const, nil, :Array)),
                    s(:send,
                      s(:send,
                        s(:lvar, :coercion), :length), :==,
                      s(:int, 2))), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError))),
                s(:send,
                  s(:send,
                    s(:lvar, :coercion), :[],
                    s(:int, 0)), :public_send,
                  s(:lvar, :oper),
                  s(:send,
                    s(:lvar, :coercion), :[],
                    s(:int, 1)))),
              s(:resbody, nil, nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :obj), :inspect)),
                    s(:str, " can't be coerced into "),
                    s(:begin,
                      s(:send,
                        s(:self), :class))))), nil)),
          s(:send, nil, :private,
            s(:sym, :apply_through_coercion)),
          s(:defs,
            s(:self), :coerce_to,
            s(:args,
              s(:arg, :obj),
              s(:arg, :cls),
              s(:arg, :meth)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :obj), :kind_of?,
                  s(:lvar, :cls)),
                s(:return,
                  s(:lvar, :obj)), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :ret,
                    s(:send,
                      s(:lvar, :obj), :__send__,
                      s(:lvar, :meth))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)),
                    s(:lvasgn, :e),
                    s(:send, nil, :raise,
                      s(:const, nil, :TypeError),
                      s(:dstr,
                        s(:dstr,
                          s(:str, "Coercion error: "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :obj), :inspect)),
                          s(:str, "."),
                          s(:begin,
                            s(:lvar, :meth)),
                          s(:str, " => "),
                          s(:begin,
                            s(:lvar, :cls)),
                          s(:str, " failed:\n")),
                        s(:dstr,
                          s(:str, "("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :message)),
                          s(:str, ")"))))), nil)),
              s(:if,
                s(:send,
                  s(:lvar, :ret), :kind_of?,
                  s(:lvar, :cls)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Coercion error: obj."),
                    s(:begin,
                      s(:lvar, :meth)),
                    s(:str, " did NOT return a "),
                    s(:begin,
                      s(:lvar, :cls)),
                    s(:str, " (was "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :ret), :class)),
                    s(:str, ")")))),
              s(:lvar, :ret))),
          s(:defs,
            s(:self), :coerce_to_int,
            s(:args,
              s(:arg, :obj)),
            s(:send, nil, :coerce_to,
              s(:lvar, :obj),
              s(:const, nil, :Integer),
              s(:sym, :to_int))))),
      s(:send, nil, :include,
        s(:const, nil, :CoercionHelper)),
      s(:class,
        s(:const, nil, :Scalar),
        s(:const, nil, :Numeric),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :ExceptionForMatrix)),
          s(:send, nil, :include,
            s(:const, nil, :CoercionHelper)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :value)),
            s(:ivasgn, :@value,
              s(:lvar, :value))),
          s(:def, :+,
            s(:args,
              s(:arg, :other)),
            s(:case,
              s(:lvar, :other),
              s(:when,
                s(:const, nil, :Numeric),
                s(:send,
                  s(:const, nil, :Scalar), :new,
                  s(:send,
                    s(:ivar, :@value), :+,
                    s(:lvar, :other)))),
              s(:when,
                s(:const, nil, :Vector),
                s(:const, nil, :Matrix),
                s(:send,
                  s(:const, nil, :Scalar), :Raise,
                  s(:const, nil, :ErrOperationNotDefined),
                  s(:str, "+"),
                  s(:send,
                    s(:ivar, :@value), :class),
                  s(:send,
                    s(:lvar, :other), :class))),
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :other),
                s(:send, nil, :__method__)))),
          s(:def, :-,
            s(:args,
              s(:arg, :other)),
            s(:case,
              s(:lvar, :other),
              s(:when,
                s(:const, nil, :Numeric),
                s(:send,
                  s(:const, nil, :Scalar), :new,
                  s(:send,
                    s(:ivar, :@value), :-,
                    s(:lvar, :other)))),
              s(:when,
                s(:const, nil, :Vector),
                s(:const, nil, :Matrix),
                s(:send,
                  s(:const, nil, :Scalar), :Raise,
                  s(:const, nil, :ErrOperationNotDefined),
                  s(:str, "-"),
                  s(:send,
                    s(:ivar, :@value), :class),
                  s(:send,
                    s(:lvar, :other), :class))),
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :other),
                s(:send, nil, :__method__)))),
          s(:def, :*,
            s(:args,
              s(:arg, :other)),
            s(:case,
              s(:lvar, :other),
              s(:when,
                s(:const, nil, :Numeric),
                s(:send,
                  s(:const, nil, :Scalar), :new,
                  s(:send,
                    s(:ivar, :@value), :*,
                    s(:lvar, :other)))),
              s(:when,
                s(:const, nil, :Vector),
                s(:const, nil, :Matrix),
                s(:block,
                  s(:send,
                    s(:lvar, :other), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:ivar, :@value), :*,
                    s(:lvar, :e)))),
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :other),
                s(:send, nil, :__method__)))),
          s(:def, :/,
            s(:args,
              s(:arg, :other)),
            s(:case,
              s(:lvar, :other),
              s(:when,
                s(:const, nil, :Numeric),
                s(:send,
                  s(:const, nil, :Scalar), :new,
                  s(:send,
                    s(:ivar, :@value), :/,
                    s(:lvar, :other)))),
              s(:when,
                s(:const, nil, :Vector),
                s(:send,
                  s(:const, nil, :Scalar), :Raise,
                  s(:const, nil, :ErrOperationNotDefined),
                  s(:str, "/"),
                  s(:send,
                    s(:ivar, :@value), :class),
                  s(:send,
                    s(:lvar, :other), :class))),
              s(:when,
                s(:const, nil, :Matrix),
                s(:send,
                  s(:self), :*,
                  s(:send,
                    s(:lvar, :other), :inverse))),
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :other),
                s(:send, nil, :__method__)))),
          s(:def, :**,
            s(:args,
              s(:arg, :other)),
            s(:case,
              s(:lvar, :other),
              s(:when,
                s(:const, nil, :Numeric),
                s(:send,
                  s(:const, nil, :Scalar), :new,
                  s(:send,
                    s(:ivar, :@value), :**,
                    s(:lvar, :other)))),
              s(:when,
                s(:const, nil, :Vector),
                s(:send,
                  s(:const, nil, :Scalar), :Raise,
                  s(:const, nil, :ErrOperationNotDefined),
                  s(:str, "**"),
                  s(:send,
                    s(:ivar, :@value), :class),
                  s(:send,
                    s(:lvar, :other), :class))),
              s(:when,
                s(:const, nil, :Matrix),
                s(:send,
                  s(:const, nil, :Scalar), :Raise,
                  s(:const, nil, :ErrOperationNotImplemented),
                  s(:str, "**"),
                  s(:send,
                    s(:ivar, :@value), :class),
                  s(:send,
                    s(:lvar, :other), :class))),
              s(:send, nil, :apply_through_coercion,
                s(:lvar, :other),
                s(:send, nil, :__method__)))))))),
  s(:class,
    s(:const, nil, :Vector), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const, nil, :ExceptionForMatrix)),
      s(:send, nil, :include,
        s(:const, nil, :Enumerable)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Matrix), :CoercionHelper)),
      s(:send, nil, :extend,
        s(:const,
          s(:const, nil, :Matrix), :ConversionHelper)),
      s(:send, nil, :private_class_method,
        s(:sym, :new)),
      s(:send, nil, :attr_reader,
        s(:sym, :elements)),
      s(:send, nil, :protected,
        s(:sym, :elements)),
      s(:defs,
        s(:const, nil, :Vector), :[],
        s(:args,
          s(:restarg, :array)),
        s(:send, nil, :new,
          s(:send, nil, :convert_to_array,
            s(:lvar, :array),
            s(:false)))),
      s(:defs,
        s(:const, nil, :Vector), :elements,
        s(:args,
          s(:arg, :array),
          s(:optarg, :copy,
            s(:true))),
        s(:send, nil, :new,
          s(:send, nil, :convert_to_array,
            s(:lvar, :array),
            s(:lvar, :copy)))),
      s(:defs,
        s(:const, nil, :Vector), :basis,
        s(:args,
          s(:kwarg, :size),
          s(:kwarg, :index)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :size), :<,
              s(:int, 1)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "invalid size ("),
                s(:begin,
                  s(:lvar, :size)),
                s(:str, " for 1..)"))), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:int, 0), :<=,
                s(:lvar, :index)),
              s(:send,
                s(:lvar, :index), :<,
                s(:lvar, :size))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "invalid index ("),
                s(:begin,
                  s(:lvar, :index)),
                s(:str, " for 0..."),
                s(:begin,
                  s(:lvar, :size)),
                s(:str, ")")))),
          s(:lvasgn, :array,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:lvar, :size),
              s(:int, 0))),
          s(:send,
            s(:lvar, :array), :[]=,
            s(:lvar, :index),
            s(:int, 1)),
          s(:send, nil, :new,
            s(:send, nil, :convert_to_array,
              s(:lvar, :array),
              s(:false))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :array)),
        s(:ivasgn, :@elements,
          s(:lvar, :array))),
      s(:def, :[],
        s(:args,
          s(:arg, :i)),
        s(:send,
          s(:ivar, :@elements), :[],
          s(:lvar, :i))),
      s(:alias,
        s(:sym, :element),
        s(:sym, :[])),
      s(:alias,
        s(:sym, :component),
        s(:sym, :[])),
      s(:def, :[]=,
        s(:args,
          s(:arg, :i),
          s(:arg, :v)),
        s(:send,
          s(:ivar, :@elements), :[]=,
          s(:lvar, :i),
          s(:lvar, :v))),
      s(:alias,
        s(:sym, :set_element),
        s(:sym, :[]=)),
      s(:alias,
        s(:sym, :set_component),
        s(:sym, :[]=)),
      s(:send, nil, :private,
        s(:sym, :[]=),
        s(:sym, :set_element),
        s(:sym, :set_component)),
      s(:def, :round,
        s(:args,
          s(:optarg, :ndigits,
            s(:int, 0))),
        s(:block,
          s(:send, nil, :map),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:lvar, :e), :round,
            s(:lvar, :ndigits)))),
      s(:def, :size,
        s(:args),
        s(:send,
          s(:ivar, :@elements), :size)),
      s(:def, :each,
        s(:args,
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :each)))),
          s(:send,
            s(:ivar, :@elements), :each,
            s(:block_pass,
              s(:lvar, :block))),
          s(:self))),
      s(:def, :each2,
        s(:args,
          s(:arg, :v)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :v), :kind_of?,
              s(:const, nil, :Integer)),
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:str, "Integer is not like Vector")), nil),
          s(:if,
            s(:send,
              s(:send, nil, :size), :!=,
              s(:send,
                s(:lvar, :v), :size)),
            s(:send,
              s(:const, nil, :Vector), :Raise,
              s(:const, nil, :ErrDimensionMismatch)), nil),
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :each2),
                s(:lvar, :v)))),
          s(:block,
            s(:send,
              s(:send, nil, :size), :times),
            s(:args,
              s(:arg, :i)),
            s(:yield,
              s(:send,
                s(:ivar, :@elements), :[],
                s(:lvar, :i)),
              s(:send,
                s(:lvar, :v), :[],
                s(:lvar, :i)))),
          s(:self))),
      s(:def, :collect2,
        s(:args,
          s(:arg, :v)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :v), :kind_of?,
              s(:const, nil, :Integer)),
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:str, "Integer is not like Vector")), nil),
          s(:if,
            s(:send,
              s(:send, nil, :size), :!=,
              s(:send,
                s(:lvar, :v), :size)),
            s(:send,
              s(:const, nil, :Vector), :Raise,
              s(:const, nil, :ErrDimensionMismatch)), nil),
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :collect2),
                s(:lvar, :v)))),
          s(:block,
            s(:send,
              s(:const, nil, :Array), :new,
              s(:send, nil, :size)),
            s(:args,
              s(:arg, :i)),
            s(:yield,
              s(:send,
                s(:ivar, :@elements), :[],
                s(:lvar, :i)),
              s(:send,
                s(:lvar, :v), :[],
                s(:lvar, :i)))))),
      s(:defs,
        s(:const, nil, :Vector), :independent?,
        s(:args,
          s(:restarg, :vs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :vs), :each),
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :v), :is_a?,
                  s(:const, nil, :Vector)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "expected Vector, got "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :v), :class))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :size), :==,
                  s(:send,
                    s(:send,
                      s(:lvar, :vs), :first), :size)), nil,
                s(:send,
                  s(:const, nil, :Vector), :Raise,
                  s(:const, nil, :ErrDimensionMismatch))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :vs), :count), :>,
              s(:send,
                s(:send,
                  s(:lvar, :vs), :first), :size)),
            s(:return,
              s(:false)), nil),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :[],
                s(:splat,
                  s(:lvar, :vs))), :rank), :eql?,
            s(:send,
              s(:lvar, :vs), :count)))),
      s(:def, :independent?,
        s(:args,
          s(:restarg, :vs)),
        s(:send,
          s(:send,
            s(:self), :class), :independent?,
          s(:self),
          s(:splat,
            s(:lvar, :vs)))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Vector), :===,
              s(:lvar, :other)), nil,
            s(:return,
              s(:false))),
          s(:send,
            s(:ivar, :@elements), :==,
            s(:send,
              s(:lvar, :other), :elements)))),
      s(:def, :eql?,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Vector), :===,
              s(:lvar, :other)), nil,
            s(:return,
              s(:false))),
          s(:send,
            s(:ivar, :@elements), :eql?,
            s(:send,
              s(:lvar, :other), :elements)))),
      s(:def, :clone,
        s(:args),
        s(:send,
          s(:send,
            s(:self), :class), :elements,
          s(:ivar, :@elements))),
      s(:def, :hash,
        s(:args),
        s(:send,
          s(:ivar, :@elements), :hash)),
      s(:def, :*,
        s(:args,
          s(:arg, :x)),
        s(:case,
          s(:lvar, :x),
          s(:when,
            s(:const, nil, :Numeric),
            s(:begin,
              s(:lvasgn, :els,
                s(:block,
                  s(:send,
                    s(:ivar, :@elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :*,
                    s(:lvar, :x)))),
              s(:send,
                s(:send,
                  s(:self), :class), :elements,
                s(:lvar, :els),
                s(:false)))),
          s(:when,
            s(:const, nil, :Matrix),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :column_vector,
                s(:self)), :*,
              s(:lvar, :x))),
          s(:when,
            s(:const, nil, :Vector),
            s(:send,
              s(:const, nil, :Vector), :Raise,
              s(:const, nil, :ErrOperationNotDefined),
              s(:str, "*"),
              s(:send,
                s(:self), :class),
              s(:send,
                s(:lvar, :x), :class))),
          s(:send, nil, :apply_through_coercion,
            s(:lvar, :x),
            s(:send, nil, :__method__)))),
      s(:def, :+,
        s(:args,
          s(:arg, :v)),
        s(:case,
          s(:lvar, :v),
          s(:when,
            s(:const, nil, :Vector),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :size), :!=,
                  s(:send,
                    s(:lvar, :v), :size)),
                s(:send,
                  s(:const, nil, :Vector), :Raise,
                  s(:const, nil, :ErrDimensionMismatch)), nil),
              s(:lvasgn, :els,
                s(:block,
                  s(:send, nil, :collect2,
                    s(:lvar, :v)),
                  s(:args,
                    s(:arg, :v1),
                    s(:arg, :v2)),
                  s(:send,
                    s(:lvar, :v1), :+,
                    s(:lvar, :v2)))),
              s(:send,
                s(:send,
                  s(:self), :class), :elements,
                s(:lvar, :els),
                s(:false)))),
          s(:when,
            s(:const, nil, :Matrix),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :column_vector,
                s(:self)), :+,
              s(:lvar, :v))),
          s(:send, nil, :apply_through_coercion,
            s(:lvar, :v),
            s(:send, nil, :__method__)))),
      s(:def, :-,
        s(:args,
          s(:arg, :v)),
        s(:case,
          s(:lvar, :v),
          s(:when,
            s(:const, nil, :Vector),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :size), :!=,
                  s(:send,
                    s(:lvar, :v), :size)),
                s(:send,
                  s(:const, nil, :Vector), :Raise,
                  s(:const, nil, :ErrDimensionMismatch)), nil),
              s(:lvasgn, :els,
                s(:block,
                  s(:send, nil, :collect2,
                    s(:lvar, :v)),
                  s(:args,
                    s(:arg, :v1),
                    s(:arg, :v2)),
                  s(:send,
                    s(:lvar, :v1), :-,
                    s(:lvar, :v2)))),
              s(:send,
                s(:send,
                  s(:self), :class), :elements,
                s(:lvar, :els),
                s(:false)))),
          s(:when,
            s(:const, nil, :Matrix),
            s(:send,
              s(:send,
                s(:const, nil, :Matrix), :column_vector,
                s(:self)), :-,
              s(:lvar, :v))),
          s(:send, nil, :apply_through_coercion,
            s(:lvar, :v),
            s(:send, nil, :__method__)))),
      s(:def, :/,
        s(:args,
          s(:arg, :x)),
        s(:case,
          s(:lvar, :x),
          s(:when,
            s(:const, nil, :Numeric),
            s(:begin,
              s(:lvasgn, :els,
                s(:block,
                  s(:send,
                    s(:ivar, :@elements), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :/,
                    s(:lvar, :x)))),
              s(:send,
                s(:send,
                  s(:self), :class), :elements,
                s(:lvar, :els),
                s(:false)))),
          s(:when,
            s(:const, nil, :Matrix),
            s(:const, nil, :Vector),
            s(:send,
              s(:const, nil, :Vector), :Raise,
              s(:const, nil, :ErrOperationNotDefined),
              s(:str, "/"),
              s(:send,
                s(:self), :class),
              s(:send,
                s(:lvar, :x), :class))),
          s(:send, nil, :apply_through_coercion,
            s(:lvar, :x),
            s(:send, nil, :__method__)))),
      s(:def, :+@,
        s(:args),
        s(:self)),
      s(:def, :-@,
        s(:args),
        s(:block,
          s(:send, nil, :collect),
          s(:args,
            s(:arg, :e)),
          s(:send,
            s(:lvar, :e), :-@))),
      s(:def, :inner_product,
        s(:args,
          s(:arg, :v)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :size), :!=,
              s(:send,
                s(:lvar, :v), :size)),
            s(:send,
              s(:const, nil, :Vector), :Raise,
              s(:const, nil, :ErrDimensionMismatch)), nil),
          s(:lvasgn, :p,
            s(:int, 0)),
          s(:block,
            s(:send, nil, :each2,
              s(:lvar, :v)),
            s(:args,
              s(:arg, :v1),
              s(:arg, :v2)),
            s(:op_asgn,
              s(:lvasgn, :p), :+,
              s(:send,
                s(:lvar, :v1), :*,
                s(:send,
                  s(:lvar, :v2), :conj)))),
          s(:lvar, :p))),
      s(:send, nil, :alias_method,
        s(:sym, :dot),
        s(:sym, :inner_product)),
      s(:def, :cross_product,
        s(:args,
          s(:restarg, :vs)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :size), :>=,
              s(:int, 2)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ErrOperationNotDefined),
              s(:dstr,
                s(:str, "cross product is not defined on vectors of dimension "),
                s(:begin,
                  s(:send, nil, :size))))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :vs), :size), :==,
              s(:send,
                s(:send, nil, :size), :-,
                s(:int, 2))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "wrong number of arguments ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :vs), :size)),
                s(:str, " for "),
                s(:begin,
                  s(:send,
                    s(:send, nil, :size), :-,
                    s(:int, 2))),
                s(:str, ")")))),
          s(:block,
            s(:send,
              s(:lvar, :vs), :each),
            s(:args,
              s(:arg, :v)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :v), :is_a?,
                  s(:const, nil, :Vector)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "expected Vector, got "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :v), :class))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :v), :size), :==,
                  s(:send, nil, :size)), nil,
                s(:send,
                  s(:const, nil, :Vector), :Raise,
                  s(:const, nil, :ErrDimensionMismatch))))),
          s(:case,
            s(:send, nil, :size),
            s(:when,
              s(:int, 2),
              s(:send,
                s(:const, nil, :Vector), :[],
                s(:send,
                  s(:send,
                    s(:ivar, :@elements), :[],
                    s(:int, 1)), :-@),
                s(:send,
                  s(:ivar, :@elements), :[],
                  s(:int, 0)))),
            s(:when,
              s(:int, 3),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :vs), :[],
                    s(:int, 0))),
                s(:send,
                  s(:const, nil, :Vector), :[],
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 2)), :*,
                      s(:send,
                        s(:ivar, :@elements), :[],
                        s(:int, 1))), :-,
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 1)), :*,
                      s(:send,
                        s(:ivar, :@elements), :[],
                        s(:int, 2)))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 0)), :*,
                      s(:send,
                        s(:ivar, :@elements), :[],
                        s(:int, 2))), :-,
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 2)), :*,
                      s(:send,
                        s(:ivar, :@elements), :[],
                        s(:int, 0)))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 1)), :*,
                      s(:send,
                        s(:ivar, :@elements), :[],
                        s(:int, 0))), :-,
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :[],
                        s(:int, 0)), :*,
                      s(:send,
                        s(:ivar, :@elements), :[],
                        s(:int, 1))))))),
            s(:begin,
              s(:lvasgn, :rows,
                s(:array,
                  s(:self),
                  s(:splat,
                    s(:lvar, :vs)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Array), :new,
                      s(:send, nil, :size)),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:const, nil, :Vector), :basis,
                      s(:hash,
                        s(:pair,
                          s(:sym, :size),
                          s(:send, nil, :size)),
                        s(:pair,
                          s(:sym, :index),
                          s(:lvar, :i))))))),
              s(:send,
                s(:send,
                  s(:const, nil, :Matrix), :rows,
                  s(:lvar, :rows)), :laplace_expansion,
                s(:hash,
                  s(:pair,
                    s(:sym, :row),
                    s(:send,
                      s(:send, nil, :size), :-,
                      s(:int, 1))))))))),
      s(:send, nil, :alias_method,
        s(:sym, :cross),
        s(:sym, :cross_product)),
      s(:def, :collect,
        s(:args,
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :collect)))),
          s(:lvasgn, :els,
            s(:send,
              s(:ivar, :@elements), :collect,
              s(:block_pass,
                s(:lvar, :block)))),
          s(:send,
            s(:send,
              s(:self), :class), :elements,
            s(:lvar, :els),
            s(:false)))),
      s(:alias,
        s(:sym, :map),
        s(:sym, :collect)),
      s(:def, :magnitude,
        s(:args),
        s(:send,
          s(:const, nil, :Math), :sqrt,
          s(:block,
            s(:send,
              s(:ivar, :@elements), :inject,
              s(:int, 0)),
            s(:args,
              s(:arg, :v),
              s(:arg, :e)),
            s(:send,
              s(:lvar, :v), :+,
              s(:send,
                s(:lvar, :e), :abs2))))),
      s(:alias,
        s(:sym, :r),
        s(:sym, :magnitude)),
      s(:alias,
        s(:sym, :norm),
        s(:sym, :magnitude)),
      s(:def, :map2,
        s(:args,
          s(:arg, :v),
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :to_enum,
                s(:sym, :map2),
                s(:lvar, :v)))),
          s(:lvasgn, :els,
            s(:send, nil, :collect2,
              s(:lvar, :v),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:send,
            s(:send,
              s(:self), :class), :elements,
            s(:lvar, :els),
            s(:false)))),
      s(:class,
        s(:const, nil, :ZeroVectorError),
        s(:const, nil, :StandardError), nil),
      s(:def, :normalize,
        s(:args),
        s(:begin,
          s(:lvasgn, :n,
            s(:send, nil, :magnitude)),
          s(:if,
            s(:send,
              s(:lvar, :n), :==,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ZeroVectorError),
              s(:str, "Zero vectors can not be normalized")), nil),
          s(:send,
            s(:self), :/,
            s(:lvar, :n)))),
      s(:def, :angle_with,
        s(:args,
          s(:arg, :v)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :v), :is_a?,
              s(:const, nil, :Vector)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:str, "Expected a Vector, got a "),
                s(:begin,
                  s(:send,
                    s(:lvar, :v), :class))))),
          s(:if,
            s(:send,
              s(:send, nil, :size), :!=,
              s(:send,
                s(:lvar, :v), :size)),
            s(:send,
              s(:const, nil, :Vector), :Raise,
              s(:const, nil, :ErrDimensionMismatch)), nil),
          s(:lvasgn, :prod,
            s(:send,
              s(:send, nil, :magnitude), :*,
              s(:send,
                s(:lvar, :v), :magnitude))),
          s(:if,
            s(:send,
              s(:lvar, :prod), :==,
              s(:int, 0)),
            s(:send, nil, :raise,
              s(:const, nil, :ZeroVectorError),
              s(:str, "Can't get angle of zero vector")), nil),
          s(:send,
            s(:const, nil, :Math), :acos,
            s(:send,
              s(:send, nil, :inner_product,
                s(:lvar, :v)), :/,
              s(:lvar, :prod))))),
      s(:def, :covector,
        s(:args),
        s(:send,
          s(:const, nil, :Matrix), :row_vector,
          s(:self))),
      s(:def, :to_a,
        s(:args),
        s(:send,
          s(:ivar, :@elements), :dup)),
      s(:def, :elements_to_f,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Vector#elements_to_f is deprecated"))),
          s(:send, nil, :map,
            s(:block_pass,
              s(:sym, :to_f))))),
      s(:def, :elements_to_i,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Vector#elements_to_i is deprecated"))),
          s(:send, nil, :map,
            s(:block_pass,
              s(:sym, :to_i))))),
      s(:def, :elements_to_r,
        s(:args),
        s(:begin,
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Vector#elements_to_r is deprecated"))),
          s(:send, nil, :map,
            s(:block_pass,
              s(:sym, :to_r))))),
      s(:def, :coerce,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :Numeric),
            s(:return,
              s(:send,
                s(:const,
                  s(:const, nil, :Matrix), :Scalar), :new,
                s(:lvar, :other)),
              s(:self))),
          s(:send, nil, :raise,
            s(:const, nil, :TypeError),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, " can't be coerced into "),
              s(:begin,
                s(:send,
                  s(:lvar, :other), :class)))))),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:send,
            s(:str, "Vector["), :+,
            s(:send,
              s(:ivar, :@elements), :join,
              s(:str, ", "))), :+,
          s(:str, "]"))),
      s(:def, :inspect,
        s(:args),
        s(:send,
          s(:str, "Vector"), :+,
          s(:send,
            s(:ivar, :@elements), :inspect))))))
