s(:begin,
  s(:class,
    s(:const, nil, :Delegator),
    s(:const, nil, :BasicObject),
    s(:begin,
      s(:lvasgn, :kernel,
        s(:send,
          s(:const,
            s(:cbase), :Kernel), :dup)),
      s(:block,
        s(:send,
          s(:lvar, :kernel), :class_eval),
        s(:args),
        s(:begin,
          s(:alias,
            s(:sym, :__raise__),
            s(:sym, :raise)),
          s(:block,
            s(:send,
              s(:array,
                s(:sym, :to_s),
                s(:sym, :inspect),
                s(:sym, :=~),
                s(:sym, :!~),
                s(:sym, :===),
                s(:sym, :<=>),
                s(:sym, :eql?),
                s(:sym, :hash)), :each),
            s(:args,
              s(:arg, :m)),
            s(:send, nil, :undef_method,
              s(:lvar, :m))),
          s(:block,
            s(:send,
              s(:send, nil, :private_instance_methods), :each),
            s(:args,
              s(:arg, :m)),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\Ablock_given\\?\\z|iterator\\?\\z|\\A__.*__\\z"),
                    s(:regopt)),
                  s(:lvar, :m)),
                s(:next), nil),
              s(:send, nil, :undef_method,
                s(:lvar, :m)))))),
      s(:send, nil, :include,
        s(:lvar, :kernel)),
      s(:defs,
        s(:self), :const_missing,
        s(:args,
          s(:arg, :n)),
        s(:send,
          s(:const,
            s(:cbase), :Object), :const_get,
          s(:lvar, :n))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :obj)),
        s(:send, nil, :__setobj__,
          s(:lvar, :obj))),
      s(:def, :method_missing,
        s(:args,
          s(:arg, :m),
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :r,
            s(:true)),
          s(:lvasgn, :target,
            s(:block,
              s(:send,
                s(:self), :__getobj__),
              s(:args),
              s(:lvasgn, :r,
                s(:false)))),
          s(:if,
            s(:and,
              s(:lvar, :r),
              s(:send,
                s(:lvar, :target), :respond_to?,
                s(:lvar, :m))),
            s(:send,
              s(:lvar, :target), :__send__,
              s(:lvar, :m),
              s(:splat,
                s(:lvar, :args)),
              s(:block_pass,
                s(:lvar, :block))),
            s(:if,
              s(:send,
                s(:const,
                  s(:cbase), :Kernel), :respond_to?,
                s(:lvar, :m),
                s(:true)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:cbase), :Kernel), :instance_method,
                    s(:lvar, :m)), :bind,
                  s(:self)), :call,
                s(:splat,
                  s(:lvar, :args)),
                s(:block_pass,
                  s(:lvar, :block))),
              s(:super,
                s(:lvar, :m),
                s(:splat,
                  s(:lvar, :args)),
                s(:block_pass,
                  s(:lvar, :block))))))),
      s(:def, :respond_to_missing?,
        s(:args,
          s(:arg, :m),
          s(:arg, :include_private)),
        s(:begin,
          s(:lvasgn, :r,
            s(:true)),
          s(:lvasgn, :target,
            s(:block,
              s(:send,
                s(:self), :__getobj__),
              s(:args),
              s(:lvasgn, :r,
                s(:false)))),
          s(:and_asgn,
            s(:lvasgn, :r),
            s(:send,
              s(:lvar, :target), :respond_to?,
              s(:lvar, :m),
              s(:lvar, :include_private))),
          s(:if,
            s(:and,
              s(:and,
                s(:lvar, :r),
                s(:lvar, :include_private)),
              s(:send,
                s(:send,
                  s(:lvar, :target), :respond_to?,
                  s(:lvar, :m),
                  s(:false)), :!)),
            s(:begin,
              s(:send, nil, :warn,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :caller,
                        s(:int, 3)), :[],
                      s(:int, 0))),
                  s(:str, ": delegator does not forward private method #"),
                  s(:begin,
                    s(:lvar, :m)))),
              s(:return,
                s(:false))), nil),
          s(:lvar, :r))),
      s(:def, :methods,
        s(:args,
          s(:optarg, :all,
            s(:true))),
        s(:send,
          s(:send,
            s(:send, nil, :__getobj__), :methods,
            s(:lvar, :all)), :|,
          s(:zsuper))),
      s(:def, :public_methods,
        s(:args,
          s(:optarg, :all,
            s(:true))),
        s(:send,
          s(:send,
            s(:send, nil, :__getobj__), :public_methods,
            s(:lvar, :all)), :|,
          s(:zsuper))),
      s(:def, :protected_methods,
        s(:args,
          s(:optarg, :all,
            s(:true))),
        s(:send,
          s(:send,
            s(:send, nil, :__getobj__), :protected_methods,
            s(:lvar, :all)), :|,
          s(:zsuper))),
      s(:def, :==,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :obj), :equal?,
              s(:self)),
            s(:return,
              s(:true)), nil),
          s(:send,
            s(:send,
              s(:self), :__getobj__), :==,
            s(:lvar, :obj)))),
      s(:def, :!=,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :obj), :equal?,
              s(:self)),
            s(:return,
              s(:false)), nil),
          s(:send,
            s(:send, nil, :__getobj__), :!=,
            s(:lvar, :obj)))),
      s(:def, :!,
        s(:args),
        s(:send,
          s(:send, nil, :__getobj__), :!)),
      s(:def, :__getobj__,
        s(:args),
        s(:send, nil, :__raise__,
          s(:const,
            s(:cbase), :NotImplementedError),
          s(:str, "need to define `__getobj__'"))),
      s(:def, :__setobj__,
        s(:args,
          s(:arg, :obj)),
        s(:send, nil, :__raise__,
          s(:const,
            s(:cbase), :NotImplementedError),
          s(:str, "need to define `__setobj__'"))),
      s(:def, :marshal_dump,
        s(:args),
        s(:begin,
          s(:lvasgn, :ivars,
            s(:block,
              s(:send,
                s(:send, nil, :instance_variables), :reject),
              s(:args,
                s(:arg, :var)),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A@delegate_"),
                  s(:regopt)),
                s(:lvar, :var)))),
          s(:array,
            s(:sym, :__v2__),
            s(:lvar, :ivars),
            s(:block,
              s(:send,
                s(:lvar, :ivars), :map),
              s(:args,
                s(:arg, :var)),
              s(:send, nil, :instance_variable_get,
                s(:lvar, :var))),
            s(:send, nil, :__getobj__)))),
      s(:def, :marshal_load,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :version),
              s(:lvasgn, :vars),
              s(:lvasgn, :values),
              s(:lvasgn, :obj)),
            s(:lvar, :data)),
          s(:if,
            s(:send,
              s(:lvar, :version), :==,
              s(:sym, :__v2__)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :vars), :each_with_index),
                s(:args,
                  s(:arg, :var),
                  s(:arg, :i)),
                s(:send, nil, :instance_variable_set,
                  s(:lvar, :var),
                  s(:send,
                    s(:lvar, :values), :[],
                    s(:lvar, :i)))),
              s(:send, nil, :__setobj__,
                s(:lvar, :obj))),
            s(:send, nil, :__setobj__,
              s(:lvar, :data))))),
      s(:def, :initialize_clone,
        s(:args,
          s(:arg, :obj)),
        s(:send,
          s(:self), :__setobj__,
          s(:send,
            s(:send,
              s(:lvar, :obj), :__getobj__), :clone))),
      s(:def, :initialize_dup,
        s(:args,
          s(:arg, :obj)),
        s(:send,
          s(:self), :__setobj__,
          s(:send,
            s(:send,
              s(:lvar, :obj), :__getobj__), :dup))),
      s(:send, nil, :private,
        s(:sym, :initialize_clone),
        s(:sym, :initialize_dup)),
      s(:block,
        s(:send,
          s(:array,
            s(:sym, :trust),
            s(:sym, :untrust),
            s(:sym, :taint),
            s(:sym, :untaint),
            s(:sym, :freeze)), :each),
        s(:args,
          s(:arg, :method)),
        s(:block,
          s(:send, nil, :define_method,
            s(:lvar, :method)),
          s(:args),
          s(:begin,
            s(:send,
              s(:send, nil, :__getobj__), :send,
              s(:lvar, :method)),
            s(:super)))),
      s(:ivasgn, :@delegator_api,
        s(:send,
          s(:self), :public_instance_methods)),
      s(:defs,
        s(:self), :public_api,
        s(:args),
        s(:ivar, :@delegator_api)))),
  s(:class,
    s(:const, nil, :SimpleDelegator),
    s(:const, nil, :Delegator),
    s(:begin,
      s(:def, :__getobj__,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@delegate_sd_obj)), nil,
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:return,
                  s(:yield)), nil),
              s(:send, nil, :__raise__,
                s(:const,
                  s(:cbase), :ArgumentError),
                s(:str, "not delegated")))),
          s(:ivar, :@delegate_sd_obj))),
      s(:def, :__setobj__,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:send,
              s(:self), :equal?,
              s(:lvar, :obj)),
            s(:send, nil, :__raise__,
              s(:const,
                s(:cbase), :ArgumentError),
              s(:str, "cannot delegate to self")), nil),
          s(:ivasgn, :@delegate_sd_obj,
            s(:lvar, :obj)))))),
  s(:defs,
    s(:const, nil, :Delegator), :delegating_block,
    s(:args,
      s(:arg, :mid)),
    s(:block,
      s(:send, nil, :lambda),
      s(:args,
        s(:restarg, :args),
        s(:blockarg, :block)),
      s(:begin,
        s(:lvasgn, :target,
          s(:send,
            s(:self), :__getobj__)),
        s(:send,
          s(:lvar, :target), :__send__,
          s(:lvar, :mid),
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :block)))))),
  s(:def, :DelegateClass,
    s(:args,
      s(:arg, :superclass)),
    s(:begin,
      s(:lvasgn, :klass,
        s(:send,
          s(:const, nil, :Class), :new,
          s(:const, nil, :Delegator))),
      s(:lvasgn, :methods,
        s(:send,
          s(:lvar, :superclass), :instance_methods)),
      s(:op_asgn,
        s(:lvasgn, :methods), :-,
        s(:send,
          s(:const,
            s(:cbase), :Delegator), :public_api)),
      s(:op_asgn,
        s(:lvasgn, :methods), :-,
        s(:array,
          s(:sym, :to_s),
          s(:sym, :inspect),
          s(:sym, :=~),
          s(:sym, :!~),
          s(:sym, :===))),
      s(:block,
        s(:send,
          s(:lvar, :klass), :module_eval),
        s(:args),
        s(:begin,
          s(:def, :__getobj__,
            s(:args),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:ivar, :@delegate_dc_obj)), nil,
                s(:begin,
                  s(:if,
                    s(:send, nil, :block_given?),
                    s(:return,
                      s(:yield)), nil),
                  s(:send, nil, :__raise__,
                    s(:const,
                      s(:cbase), :ArgumentError),
                    s(:str, "not delegated")))),
              s(:ivar, :@delegate_dc_obj))),
          s(:def, :__setobj__,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:self), :equal?,
                  s(:lvar, :obj)),
                s(:send, nil, :__raise__,
                  s(:const,
                    s(:cbase), :ArgumentError),
                  s(:str, "cannot delegate to self")), nil),
              s(:ivasgn, :@delegate_dc_obj,
                s(:lvar, :obj)))),
          s(:block,
            s(:send,
              s(:lvar, :methods), :each),
            s(:args,
              s(:arg, :method)),
            s(:send, nil, :define_method,
              s(:lvar, :method),
              s(:send,
                s(:const, nil, :Delegator), :delegating_block,
                s(:lvar, :method)))))),
      s(:block,
        s(:send,
          s(:lvar, :klass), :define_singleton_method,
          s(:sym, :public_instance_methods)),
        s(:args,
          s(:optarg, :all,
            s(:true))),
        s(:send,
          s(:super,
            s(:lvar, :all)), :-,
          s(:send,
            s(:lvar, :superclass), :protected_instance_methods))),
      s(:block,
        s(:send,
          s(:lvar, :klass), :define_singleton_method,
          s(:sym, :protected_instance_methods)),
        s(:args,
          s(:optarg, :all,
            s(:true))),
        s(:send,
          s(:super,
            s(:lvar, :all)), :|,
          s(:send,
            s(:lvar, :superclass), :protected_instance_methods))),
      s(:return,
        s(:lvar, :klass)))))
