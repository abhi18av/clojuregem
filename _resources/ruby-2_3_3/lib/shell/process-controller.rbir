s(:begin,
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "sync")),
  s(:class,
    s(:const, nil, :Shell), nil,
    s(:class,
      s(:const, nil, :ProcessController), nil,
      s(:begin,
        s(:ivasgn, :@ProcessControllers,
          s(:hash)),
        s(:ivasgn, :@ProcessControllersMonitor,
          s(:send,
            s(:const, nil, :Mutex), :new)),
        s(:ivasgn, :@ProcessControllersCV,
          s(:send,
            s(:const, nil, :ConditionVariable), :new)),
        s(:ivasgn, :@BlockOutputMonitor,
          s(:send,
            s(:const, nil, :Mutex), :new)),
        s(:ivasgn, :@BlockOutputCV,
          s(:send,
            s(:const, nil, :ConditionVariable), :new)),
        s(:sclass,
          s(:self),
          s(:begin,
            s(:send, nil, :extend,
              s(:const, nil, :Forwardable)),
            s(:send, nil, :def_delegator,
              s(:str, "@ProcessControllersMonitor"),
              s(:str, "synchronize"),
              s(:str, "process_controllers_exclusive")),
            s(:def, :active_process_controllers,
              s(:args),
              s(:block,
                s(:send, nil, :process_controllers_exclusive),
                s(:args),
                s(:send,
                  s(:ivar, :@ProcessControllers), :dup))),
            s(:def, :activate,
              s(:args,
                s(:arg, :pc)),
              s(:block,
                s(:send, nil, :process_controllers_exclusive),
                s(:args),
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:ivar, :@ProcessControllers), :[],
                      s(:lvar, :pc)),
                    s(:int, 0)),
                  s(:op_asgn,
                    s(:send,
                      s(:ivar, :@ProcessControllers), :[],
                      s(:lvar, :pc)), :+,
                    s(:int, 1))))),
            s(:def, :inactivate,
              s(:args,
                s(:arg, :pc)),
              s(:block,
                s(:send, nil, :process_controllers_exclusive),
                s(:args),
                s(:if,
                  s(:send,
                    s(:ivar, :@ProcessControllers), :[],
                    s(:lvar, :pc)),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:op_asgn,
                          s(:send,
                            s(:ivar, :@ProcessControllers), :[],
                            s(:lvar, :pc)), :-,
                          s(:int, 1))), :==,
                      s(:int, 0)),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@ProcessControllers), :delete,
                        s(:lvar, :pc)),
                      s(:send,
                        s(:ivar, :@ProcessControllersCV), :signal)), nil), nil))),
            s(:def, :each_active_object,
              s(:args),
              s(:block,
                s(:send, nil, :process_controllers_exclusive),
                s(:args),
                s(:for,
                  s(:lvasgn, :ref),
                  s(:send,
                    s(:ivar, :@ProcessControllers), :keys),
                  s(:yield,
                    s(:lvar, :ref))))),
            s(:def, :block_output_synchronize,
              s(:args,
                s(:blockarg, :b)),
              s(:send,
                s(:ivar, :@BlockOutputMonitor), :synchronize,
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:def, :wait_to_finish_all_process_controllers,
              s(:args),
              s(:block,
                s(:send, nil, :process_controllers_exclusive),
                s(:args),
                s(:while,
                  s(:send,
                    s(:send,
                      s(:ivar, :@ProcessControllers), :empty?), :!),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Shell), :notify,
                      s(:str, "Process finishing, but active shell exists"),
                      s(:str, "You can use Shell#transact or Shell#check_point for more safe execution.")),
                    s(:if,
                      s(:send,
                        s(:const, nil, :Shell), :debug?),
                      s(:for,
                        s(:lvasgn, :pc),
                        s(:send,
                          s(:ivar, :@ProcessControllers), :keys),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Shell), :notify,
                            s(:send,
                              s(:str, " Not finished jobs in "), :+,
                              s(:send,
                                s(:send,
                                  s(:lvar, :pc), :shell), :to_s))),
                          s(:for,
                            s(:lvasgn, :com),
                            s(:send,
                              s(:lvar, :pc), :jobs),
                            s(:send,
                              s(:lvar, :com), :notify,
                              s(:str, "  Jobs: %id"))))), nil),
                    s(:send,
                      s(:ivar, :@ProcessControllersCV), :wait,
                      s(:ivar, :@ProcessControllersMonitor)))))))),
        s(:casgn, nil, :USING_AT_EXIT_WHEN_PROCESS_EXIT,
          s(:true)),
        s(:block,
          s(:send, nil, :at_exit),
          s(:args),
          s(:if,
            s(:gvar, :$@), nil,
            s(:send, nil, :wait_to_finish_all_process_controllers))),
        s(:def, :initialize,
          s(:args,
            s(:arg, :shell)),
          s(:begin,
            s(:ivasgn, :@shell,
              s(:lvar, :shell)),
            s(:ivasgn, :@waiting_jobs,
              s(:array)),
            s(:ivasgn, :@active_jobs,
              s(:array)),
            s(:ivasgn, :@jobs_sync,
              s(:send,
                s(:const, nil, :Sync), :new)),
            s(:ivasgn, :@job_monitor,
              s(:send,
                s(:const, nil, :Mutex), :new)),
            s(:ivasgn, :@job_condition,
              s(:send,
                s(:const, nil, :ConditionVariable), :new)))),
        s(:send, nil, :attr_reader,
          s(:sym, :shell)),
        s(:def, :jobs,
          s(:args),
          s(:begin,
            s(:lvasgn, :jobs,
              s(:array)),
            s(:block,
              s(:send,
                s(:ivar, :@jobs_sync), :synchronize,
                s(:sym, :SH)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :jobs), :concat,
                  s(:ivar, :@waiting_jobs)),
                s(:send,
                  s(:lvar, :jobs), :concat,
                  s(:ivar, :@active_jobs)))),
            s(:lvar, :jobs))),
        s(:def, :active_jobs,
          s(:args),
          s(:ivar, :@active_jobs)),
        s(:def, :waiting_jobs,
          s(:args),
          s(:ivar, :@waiting_jobs)),
        s(:def, :jobs_exist?,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :SH)),
            s(:args),
            s(:or,
              s(:send,
                s(:ivar, :@active_jobs), :empty?),
              s(:send,
                s(:ivar, :@waiting_jobs), :empty?)))),
        s(:def, :active_jobs_exist?,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :SH)),
            s(:args),
            s(:send,
              s(:ivar, :@active_jobs), :empty?))),
        s(:def, :waiting_jobs_exist?,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :SH)),
            s(:args),
            s(:send,
              s(:ivar, :@waiting_jobs), :empty?))),
        s(:def, :add_schedule,
          s(:args,
            s(:arg, :command)),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :EX)),
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :ProcessController), :activate,
                s(:self)),
              s(:if,
                s(:send,
                  s(:ivar, :@active_jobs), :empty?),
                s(:send, nil, :start_job,
                  s(:lvar, :command)),
                s(:send,
                  s(:ivar, :@waiting_jobs), :push,
                  s(:lvar, :command)))))),
        s(:def, :start_job,
          s(:args,
            s(:optarg, :command,
              s(:nil))),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :EX)),
            s(:args),
            s(:begin,
              s(:if,
                s(:lvar, :command),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :command), :active?),
                    s(:return), nil),
                  s(:send,
                    s(:ivar, :@waiting_jobs), :delete,
                    s(:lvar, :command))),
                s(:begin,
                  s(:lvasgn, :command,
                    s(:send,
                      s(:ivar, :@waiting_jobs), :shift)),
                  s(:if,
                    s(:lvar, :command), nil,
                    s(:return)))),
              s(:send,
                s(:ivar, :@active_jobs), :push,
                s(:lvar, :command)),
              s(:send,
                s(:lvar, :command), :start),
              s(:for,
                s(:lvasgn, :job),
                s(:send,
                  s(:ivar, :@waiting_jobs), :dup),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :job), :input), :==,
                    s(:lvar, :command)),
                  s(:send, nil, :start_job,
                    s(:lvar, :job)), nil))))),
        s(:def, :waiting_job?,
          s(:args,
            s(:arg, :job)),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :SH)),
            s(:args),
            s(:send,
              s(:ivar, :@waiting_jobs), :include?,
              s(:lvar, :job)))),
        s(:def, :active_job?,
          s(:args,
            s(:arg, :job)),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :SH)),
            s(:args),
            s(:send,
              s(:ivar, :@active_jobs), :include?,
              s(:lvar, :job)))),
        s(:def, :terminate_job,
          s(:args,
            s(:arg, :command)),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :EX)),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@active_jobs), :delete,
                s(:lvar, :command)),
              s(:send,
                s(:const, nil, :ProcessController), :inactivate,
                s(:self)),
              s(:if,
                s(:send,
                  s(:ivar, :@active_jobs), :empty?),
                s(:begin,
                  s(:send,
                    s(:lvar, :command), :notify,
                    s(:str, "start_job in terminate_job(%id)"),
                    s(:send,
                      s(:const, nil, :Shell), :debug?)),
                  s(:send, nil, :start_job)), nil)))),
        s(:def, :kill_job,
          s(:args,
            s(:arg, :sig),
            s(:arg, :command)),
          s(:block,
            s(:send,
              s(:ivar, :@jobs_sync), :synchronize,
              s(:sym, :EX)),
            s(:args),
            s(:if,
              s(:send,
                s(:ivar, :@waiting_jobs), :delete,
                s(:lvar, :command)),
              s(:begin,
                s(:send,
                  s(:const, nil, :ProcessController), :inactivate,
                  s(:self)),
                s(:return)),
              s(:if,
                s(:send,
                  s(:ivar, :@active_jobs), :include?,
                  s(:lvar, :command)),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :r,
                          s(:send,
                            s(:lvar, :command), :kill,
                            s(:lvar, :sig))),
                        s(:send,
                          s(:const, nil, :ProcessController), :inactivate,
                          s(:self))),
                      s(:resbody, nil, nil,
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:ivar, :@shell), :verbose?),
                            s(:send, nil, :print,
                              s(:str, "Shell: Warn: $!\n")), nil),
                          s(:return,
                            s(:nil)))), nil)),
                  s(:send,
                    s(:ivar, :@active_jobs), :delete,
                    s(:lvar, :command)),
                  s(:lvar, :r)), nil)))),
        s(:def, :wait_all_jobs_execution,
          s(:args),
          s(:block,
            s(:send,
              s(:ivar, :@job_monitor), :synchronize),
            s(:args),
            s(:kwbegin,
              s(:ensure,
                s(:while,
                  s(:send,
                    s(:send,
                      s(:send, nil, :jobs), :empty?), :!),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@job_condition), :wait,
                      s(:ivar, :@job_monitor)),
                    s(:for,
                      s(:lvasgn, :job),
                      s(:send, nil, :jobs),
                      s(:send,
                        s(:lvar, :job), :notify,
                        s(:str, "waiting job(%id)"),
                        s(:send,
                          s(:const, nil, :Shell), :debug?))))),
                s(:if,
                  s(:send,
                    s(:send, nil, :jobs), :empty?), nil,
                  s(:redo)))))),
        s(:def, :sfork,
          s(:args,
            s(:arg, :command)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :pipe_me_in),
                s(:lvasgn, :pipe_peer_out)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :pipe_peer_in),
                s(:lvasgn, :pipe_me_out)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:lvasgn, :pid,
              s(:nil)),
            s(:lvasgn, :pid_mutex,
              s(:send,
                s(:const, nil, :Mutex), :new)),
            s(:lvasgn, :pid_cv,
              s(:send,
                s(:const, nil, :ConditionVariable), :new)),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:const, nil, :ProcessController), :block_output_synchronize),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :STDOUT), :flush),
                    s(:block,
                      s(:send,
                        s(:const, nil, :ProcessController), :each_active_object),
                      s(:args,
                        s(:arg, :pc)),
                      s(:for,
                        s(:lvasgn, :jobs),
                        s(:send,
                          s(:lvar, :pc), :active_jobs),
                        s(:send,
                          s(:lvar, :jobs), :flush))),
                    s(:lvasgn, :pid,
                      s(:block,
                        s(:send, nil, :fork),
                        s(:args),
                        s(:begin,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:const, nil, :Thread), :list), :each),
                            s(:args,
                              s(:arg, :th)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Thread), :current), :==,
                                s(:lvar, :th)), nil,
                              s(:send,
                                s(:lvar, :th), :kill))),
                          s(:send,
                            s(:const, nil, :STDIN), :reopen,
                            s(:lvar, :pipe_peer_in)),
                          s(:send,
                            s(:const, nil, :STDOUT), :reopen,
                            s(:lvar, :pipe_peer_out)),
                          s(:block,
                            s(:send,
                              s(:const, nil, :ObjectSpace), :each_object,
                              s(:const, nil, :IO)),
                            s(:args,
                              s(:arg, :io)),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:array,
                                    s(:const, nil, :STDIN),
                                    s(:const, nil, :STDOUT),
                                    s(:const, nil, :STDERR)), :include?,
                                  s(:lvar, :io)), :!),
                              s(:if,
                                s(:send,
                                  s(:lvar, :io), :closed?), nil,
                                s(:send,
                                  s(:lvar, :io), :close)), nil)),
                          s(:yield)))))),
                s(:send,
                  s(:lvar, :pid_cv), :signal),
                s(:send,
                  s(:lvar, :pipe_peer_in), :close),
                s(:send,
                  s(:lvar, :pipe_peer_out), :close),
                s(:send,
                  s(:lvar, :command), :notify,
                  s(:dstr,
                    s(:str, "job(%name:#"),
                    s(:begin,
                      s(:lvar, :pid)),
                    s(:str, ") start")),
                  s(:send,
                    s(:ivar, :@shell), :debug?)),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :_pid,
                          s(:nil)),
                        s(:send,
                          s(:lvar, :command), :notify,
                          s(:str, "job(%id) start to waiting finish."),
                          s(:send,
                            s(:ivar, :@shell), :debug?)),
                        s(:lvasgn, :_pid,
                          s(:send,
                            s(:const, nil, :Process), :waitpid,
                            s(:lvar, :pid),
                            s(:nil)))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const, nil, :Errno), :ECHILD)), nil,
                        s(:begin,
                          s(:send,
                            s(:lvar, :command), :notify,
                            s(:str, "warn: job(%id) was done already waitpid.")),
                          s(:lvasgn, :_pid,
                            s(:true)))), nil),
                    s(:begin,
                      s(:send,
                        s(:lvar, :command), :notify,
                        s(:str, "Job(%id): Wait to finish when Process finished."),
                        s(:send,
                          s(:ivar, :@shell), :debug?)),
                      s(:if,
                        s(:or,
                          s(:const, nil, :USING_AT_EXIT_WHEN_PROCESS_EXIT),
                          s(:lvar, :_pid)), nil,
                        s(:begin,
                          s(:send,
                            s(:lvar, :command), :notify,
                            s(:str, "notice: Process finishing..."),
                            s(:str, "wait for Job[%id] to finish."),
                            s(:str, "You can use Shell#transact or Shell#check_point for more safe execution.")),
                          s(:redo))),
                      s(:block,
                        s(:send,
                          s(:ivar, :@job_monitor), :synchronize),
                        s(:args),
                        s(:begin,
                          s(:send, nil, :terminate_job,
                            s(:lvar, :command)),
                          s(:send,
                            s(:ivar, :@job_condition), :signal),
                          s(:send,
                            s(:lvar, :command), :notify,
                            s(:str, "job(%id) finish."),
                            s(:send,
                              s(:ivar, :@shell), :debug?))))))))),
            s(:block,
              s(:send,
                s(:lvar, :pid_mutex), :synchronize),
              s(:args),
              s(:while,
                s(:send,
                  s(:lvar, :pid), :!),
                s(:send,
                  s(:lvar, :pid_cv), :wait,
                  s(:lvar, :pid_mutex)))),
            s(:return,
              s(:lvar, :pid),
              s(:lvar, :pipe_me_in),
              s(:lvar, :pipe_me_out))))))))
