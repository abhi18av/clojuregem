s(:begin,
  s(:send, nil, :require,
    s(:str, "e2mmap")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "shell/error")),
  s(:send, nil, :require,
    s(:str, "shell/filter")),
  s(:send, nil, :require,
    s(:str, "shell/system-command")),
  s(:send, nil, :require,
    s(:str, "shell/builtin-command")),
  s(:class,
    s(:const, nil, :Shell), nil,
    s(:class,
      s(:const, nil, :CommandProcessor), nil,
      s(:begin,
        s(:lvasgn, :m,
          s(:array,
            s(:sym, :initialize),
            s(:sym, :expand_path))),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Object), :methods), :first), :kind_of?,
            s(:const, nil, :String)),
          s(:casgn, nil, :NoDelegateMethods,
            s(:block,
              s(:send,
                s(:lvar, :m), :collect),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :id2name))),
          s(:casgn, nil, :NoDelegateMethods,
            s(:lvar, :m))),
        s(:defs,
          s(:self), :initialize,
          s(:args),
          s(:begin,
            s(:send, nil, :install_builtin_commands),
            s(:for,
              s(:lvasgn, :m),
              s(:send,
                s(:send,
                  s(:const, nil, :CommandProcessor), :instance_methods,
                  s(:false)), :-,
                s(:const, nil, :NoDelegateMethods)),
              s(:send, nil, :add_delegate_command_to_shell,
                s(:lvar, :m))),
            s(:defs,
              s(:self), :method_added,
              s(:args,
                s(:arg, :id)),
              s(:send, nil, :add_delegate_command_to_shell,
                s(:lvar, :id))))),
        s(:defs,
          s(:self), :run_config,
          s(:args),
          s(:kwbegin,
            s(:rescue,
              s(:if,
                s(:send,
                  s(:const, nil, :ENV), :key?,
                  s(:str, "HOME")),
                s(:send, nil, :load,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:str, "~/.rb_shell"))), nil),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError),
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)), nil, nil),
              s(:resbody, nil, nil,
                s(:begin,
                  s(:send, nil, :print,
                    s(:dstr,
                      s(:str, "load error: "),
                      s(:begin,
                        s(:send, nil, :rc)),
                      s(:str, "\n"))),
                  s(:send, nil, :print,
                    s(:send,
                      s(:gvar, :$!), :class),
                    s(:str, ": "),
                    s(:gvar, :$!),
                    s(:str, "\n")),
                  s(:for,
                    s(:lvasgn, :err),
                    s(:send,
                      s(:gvar, :$@), :[],
                      s(:int, 0),
                      s(:send,
                        s(:send,
                          s(:gvar, :$@), :size), :-,
                        s(:int, 2))),
                    s(:send, nil, :print,
                      s(:str, "\t"),
                      s(:lvar, :err),
                      s(:str, "\n"))))), nil))),
        s(:def, :initialize,
          s(:args,
            s(:arg, :shell)),
          s(:begin,
            s(:ivasgn, :@shell,
              s(:lvar, :shell)),
            s(:ivasgn, :@system_commands,
              s(:hash)))),
        s(:def, :expand_path,
          s(:args,
            s(:arg, :path)),
          s(:send,
            s(:ivar, :@shell), :expand_path,
            s(:lvar, :path))),
        s(:def, :foreach,
          s(:args,
            s(:optarg, :path,
              s(:nil)),
            s(:restarg, :rs)),
          s(:begin,
            s(:if,
              s(:lvar, :path), nil,
              s(:lvasgn, :path,
                s(:str, "."))),
            s(:lvasgn, :path,
              s(:send, nil, :expand_path,
                s(:lvar, :path))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :path)),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :foreach,
                  s(:lvar, :path)),
                s(:args,
                  s(:arg, :fn)),
                s(:yield,
                  s(:lvar, :fn))),
              s(:block,
                s(:send,
                  s(:const, nil, :IO), :foreach,
                  s(:lvar, :path),
                  s(:splat,
                    s(:lvar, :rs))),
                s(:args,
                  s(:arg, :l)),
                s(:yield,
                  s(:lvar, :l)))))),
        s(:def, :open,
          s(:args,
            s(:arg, :path),
            s(:optarg, :mode,
              s(:nil)),
            s(:optarg, :perm,
              s(:int, 438)),
            s(:blockarg, :b)),
          s(:begin,
            s(:lvasgn, :path,
              s(:send, nil, :expand_path,
                s(:lvar, :path))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :path)),
              s(:send,
                s(:const, nil, :Dir), :open,
                s(:lvar, :path),
                s(:block_pass,
                  s(:lvar, :b))),
              s(:if,
                s(:send,
                  s(:ivar, :@shell), :umask),
                s(:begin,
                  s(:lvasgn, :f,
                    s(:send,
                      s(:const, nil, :File), :open,
                      s(:lvar, :path),
                      s(:lvar, :mode),
                      s(:lvar, :perm))),
                  s(:send,
                    s(:const, nil, :File), :chmod,
                    s(:send,
                      s(:lvar, :perm), :&,
                      s(:send,
                        s(:send,
                          s(:ivar, :@shell), :umask), :~)),
                    s(:lvar, :path)),
                  s(:if,
                    s(:send, nil, :block_given?),
                    s(:send,
                      s(:lvar, :f), :each,
                      s(:block_pass,
                        s(:lvar, :b))), nil),
                  s(:lvar, :f)),
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :path),
                  s(:lvar, :mode),
                  s(:lvar, :perm),
                  s(:block_pass,
                    s(:lvar, :b))))))),
        s(:def, :unlink,
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:send,
              s(:ivar, :@shell), :check_point),
            s(:lvasgn, :path,
              s(:send, nil, :expand_path,
                s(:lvar, :path))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:lvar, :path)),
              s(:send,
                s(:const, nil, :Dir), :unlink,
                s(:lvar, :path)),
              s(:send,
                s(:const, nil, :IO), :unlink,
                s(:lvar, :path))),
            s(:send,
              s(:const, nil, :Void), :new,
              s(:ivar, :@shell)))),
        s(:alias,
          s(:sym, :top_level_test),
          s(:sym, :test)),
        s(:def, :test,
          s(:args,
            s(:arg, :command),
            s(:arg, :file1),
            s(:optarg, :file2,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :file1,
              s(:send, nil, :expand_path,
                s(:lvar, :file1))),
            s(:if,
              s(:lvar, :file2),
              s(:lvasgn, :file2,
                s(:send, nil, :expand_path,
                  s(:lvar, :file2))), nil),
            s(:if,
              s(:send,
                s(:lvar, :command), :kind_of?,
                s(:const, nil, :Symbol)),
              s(:lvasgn, :command,
                s(:send,
                  s(:lvar, :command), :id2name)), nil),
            s(:case,
              s(:lvar, :command),
              s(:when,
                s(:const, nil, :Integer),
                s(:if,
                  s(:lvar, :file2),
                  s(:send, nil, :top_level_test,
                    s(:lvar, :command),
                    s(:lvar, :file1),
                    s(:lvar, :file2)),
                  s(:send, nil, :top_level_test,
                    s(:lvar, :command),
                    s(:lvar, :file1)))),
              s(:when,
                s(:const, nil, :String),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :command), :size), :==,
                    s(:int, 1)),
                  s(:if,
                    s(:lvar, :file2),
                    s(:send, nil, :top_level_test,
                      s(:lvar, :command),
                      s(:lvar, :file1),
                      s(:lvar, :file2)),
                    s(:send, nil, :top_level_test,
                      s(:lvar, :command),
                      s(:lvar, :file1))),
                  s(:if,
                    s(:lvar, :file2),
                    s(:send,
                      s(:const, nil, :FileTest), :send,
                      s(:lvar, :command),
                      s(:lvar, :file1),
                      s(:lvar, :file2)),
                    s(:send,
                      s(:const, nil, :FileTest), :send,
                      s(:lvar, :command),
                      s(:lvar, :file1))))), nil))),
        s(:alias,
          s(:sym, :[]),
          s(:sym, :test)),
        s(:def, :mkdir,
          s(:args,
            s(:restarg, :path)),
          s(:begin,
            s(:send,
              s(:ivar, :@shell), :check_point),
            s(:send, nil, :notify,
              s(:dstr,
                s(:str, "mkdir "),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :join,
                    s(:str, " "))))),
            s(:lvasgn, :perm,
              s(:nil)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :path), :last), :kind_of?,
                s(:const, nil, :Integer)),
              s(:lvasgn, :perm,
                s(:send,
                  s(:lvar, :path), :pop)), nil),
            s(:for,
              s(:lvasgn, :dir),
              s(:lvar, :path),
              s(:begin,
                s(:lvasgn, :d,
                  s(:send, nil, :expand_path,
                    s(:lvar, :dir))),
                s(:if,
                  s(:lvar, :perm),
                  s(:send,
                    s(:const, nil, :Dir), :mkdir,
                    s(:lvar, :d),
                    s(:lvar, :perm)),
                  s(:send,
                    s(:const, nil, :Dir), :mkdir,
                    s(:lvar, :d))),
                s(:if,
                  s(:send,
                    s(:ivar, :@shell), :umask),
                  s(:send,
                    s(:const, nil, :File), :chmod,
                    s(:lvar, :d),
                    s(:send,
                      s(:int, 438), :&,
                      s(:send,
                        s(:send,
                          s(:ivar, :@shell), :umask), :~))), nil))),
            s(:send,
              s(:const, nil, :Void), :new,
              s(:ivar, :@shell)))),
        s(:def, :rmdir,
          s(:args,
            s(:restarg, :path)),
          s(:begin,
            s(:send,
              s(:ivar, :@shell), :check_point),
            s(:send, nil, :notify,
              s(:dstr,
                s(:str, "rmdir "),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :join,
                    s(:str, " "))))),
            s(:for,
              s(:lvasgn, :dir),
              s(:lvar, :path),
              s(:send,
                s(:const, nil, :Dir), :rmdir,
                s(:send, nil, :expand_path,
                  s(:lvar, :dir)))),
            s(:send,
              s(:const, nil, :Void), :new,
              s(:ivar, :@shell)))),
        s(:def, :system,
          s(:args,
            s(:arg, :command),
            s(:restarg, :opts)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :opts), :empty?),
              s(:if,
                s(:send,
                  s(:lvar, :command), :=~,
                  s(:regexp,
                    s(:str, "\\*|\\?|\\{|\\}|\\[|\\]|<|>|\\(|\\)|~|&|\\||\\\\|\\$|;|'|`|\"|\\n"),
                    s(:regopt))),
                s(:return,
                  s(:send,
                    s(:const, nil, :SystemCommand), :new,
                    s(:ivar, :@shell),
                    s(:send, nil, :find_system_command,
                      s(:str, "sh")),
                    s(:str, "-c"),
                    s(:lvar, :command))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :command),
                    s(:splat,
                      s(:lvasgn, :opts))),
                  s(:send,
                    s(:lvar, :command), :split,
                    s(:regexp,
                      s(:str, "\\s+"),
                      s(:regopt))))), nil),
            s(:send,
              s(:const, nil, :SystemCommand), :new,
              s(:ivar, :@shell),
              s(:send, nil, :find_system_command,
                s(:lvar, :command)),
              s(:splat,
                s(:lvar, :opts))))),
        s(:def, :rehash,
          s(:args),
          s(:ivasgn, :@system_commands,
            s(:hash))),
        s(:def, :check_point,
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@shell), :process_controller), :wait_all_jobs_execution)),
        s(:alias,
          s(:sym, :finish_all_jobs),
          s(:sym, :check_point)),
        s(:def, :transact,
          s(:args,
            s(:blockarg, :block)),
          s(:kwbegin,
            s(:ensure,
              s(:send,
                s(:ivar, :@shell), :instance_eval,
                s(:block_pass,
                  s(:lvar, :block))),
              s(:send, nil, :check_point)))),
        s(:def, :out,
          s(:args,
            s(:optarg, :dev,
              s(:const, nil, :STDOUT)),
            s(:blockarg, :block)),
          s(:send,
            s(:lvar, :dev), :print,
            s(:send, nil, :transact,
              s(:block_pass,
                s(:lvar, :block))))),
        s(:def, :echo,
          s(:args,
            s(:restarg, :strings)),
          s(:send,
            s(:const, nil, :Echo), :new,
            s(:ivar, :@shell),
            s(:splat,
              s(:lvar, :strings)))),
        s(:def, :cat,
          s(:args,
            s(:restarg, :filenames)),
          s(:send,
            s(:const, nil, :Cat), :new,
            s(:ivar, :@shell),
            s(:splat,
              s(:lvar, :filenames)))),
        s(:def, :glob,
          s(:args,
            s(:arg, :pattern)),
          s(:send,
            s(:const, nil, :Glob), :new,
            s(:ivar, :@shell),
            s(:lvar, :pattern))),
        s(:def, :append,
          s(:args,
            s(:arg, :to),
            s(:arg, :filter)),
          s(:case,
            s(:lvar, :to),
            s(:when,
              s(:const, nil, :String),
              s(:send,
                s(:const, nil, :AppendFile), :new,
                s(:ivar, :@shell),
                s(:lvar, :to),
                s(:lvar, :filter))),
            s(:when,
              s(:const, nil, :IO),
              s(:send,
                s(:const, nil, :AppendIO), :new,
                s(:ivar, :@shell),
                s(:lvar, :to),
                s(:lvar, :filter))),
            s(:send,
              s(:const, nil, :Shell), :Fail,
              s(:const,
                s(:const, nil, :Error), :CantApplyMethod),
              s(:str, "append"),
              s(:send,
                s(:lvar, :to), :class)))),
        s(:def, :tee,
          s(:args,
            s(:arg, :file)),
          s(:send,
            s(:const, nil, :Tee), :new,
            s(:ivar, :@shell),
            s(:lvar, :file))),
        s(:def, :concat,
          s(:args,
            s(:restarg, :jobs)),
          s(:send,
            s(:const, nil, :Concat), :new,
            s(:ivar, :@shell),
            s(:splat,
              s(:lvar, :jobs)))),
        s(:def, :notify,
          s(:args,
            s(:restarg, :opts)),
          s(:block,
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:splat,
                s(:lvar, :opts))),
            s(:args,
              s(:arg, :mes)),
            s(:begin,
              s(:if,
                s(:send, nil, :iterator?),
                s(:yield,
                  s(:lvar, :mes)), nil),
              s(:send,
                s(:lvar, :mes), :gsub!,
                s(:str, "%pwd"),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@cwd)))),
              s(:send,
                s(:lvar, :mes), :gsub!,
                s(:str, "%cwd"),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@cwd))))))),
        s(:def, :find_system_command,
          s(:args,
            s(:arg, :command)),
          s(:begin,
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^/"),
                  s(:regopt)),
                s(:lvar, :command)),
              s(:return,
                s(:lvar, :command)), nil),
            s(:case,
              s(:lvasgn, :path,
                s(:send,
                  s(:ivar, :@system_commands), :[],
                  s(:lvar, :command))),
              s(:when,
                s(:const, nil, :String),
                s(:if,
                  s(:send, nil, :exists?,
                    s(:lvar, :path)),
                  s(:return,
                    s(:lvar, :path)),
                  s(:send,
                    s(:const, nil, :Shell), :Fail,
                    s(:const,
                      s(:const, nil, :Error), :CommandNotFound),
                    s(:lvar, :command)))),
              s(:when,
                s(:false),
                s(:send,
                  s(:const, nil, :Shell), :Fail,
                  s(:const,
                    s(:const, nil, :Error), :CommandNotFound),
                  s(:lvar, :command))), nil),
            s(:for,
              s(:lvasgn, :p),
              s(:send,
                s(:ivar, :@shell), :system_path),
              s(:begin,
                s(:lvasgn, :path,
                  s(:send, nil, :join,
                    s(:lvar, :p),
                    s(:lvar, :command))),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :st,
                      s(:send,
                        s(:const, nil, :File), :stat,
                        s(:lvar, :path))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SystemCallError)), nil,
                      s(:next)),
                    s(:begin,
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :st), :executable?),
                          s(:send,
                            s(:send,
                              s(:lvar, :st), :directory?), :!)), nil,
                        s(:next)),
                      s(:send,
                        s(:ivar, :@system_commands), :[]=,
                        s(:lvar, :command),
                        s(:lvar, :path)),
                      s(:return,
                        s(:lvar, :path))))))),
            s(:send,
              s(:ivar, :@system_commands), :[]=,
              s(:lvar, :command),
              s(:false)),
            s(:send,
              s(:const, nil, :Shell), :Fail,
              s(:const,
                s(:const, nil, :Error), :CommandNotFound),
              s(:lvar, :command)))),
        s(:defs,
          s(:self), :def_system_command,
          s(:args,
            s(:arg, :command),
            s(:optarg, :path,
              s(:lvar, :command))),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :eval,
                  s(:begin,
                    s(:lvasgn, :d,
                      s(:dstr,
                        s(:str, "def "),
                        s(:begin,
                          s(:lvar, :command)),
                        s(:str, "(*opts)\n"),
                        s(:str, "                  SystemCommand.new(@shell, '"),
                        s(:begin,
                          s(:lvar, :path)),
                        s(:str, "', *opts)\n"),
                        s(:str, "               end")))),
                  s(:nil),
                  s(:str, "(string)"),
                  s(:send,
                    s(:int, 401), :-,
                    s(:int, 1))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :SyntaxError)), nil,
                  s(:send,
                    s(:const, nil, :Shell), :notify,
                    s(:dstr,
                      s(:str, "warn: Can't define "),
                      s(:begin,
                        s(:lvar, :command)),
                      s(:str, " path: "),
                      s(:begin,
                        s(:lvar, :path)),
                      s(:str, ".")))), nil)),
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:dstr,
                s(:str, "Define "),
                s(:begin,
                  s(:lvar, :command)),
                s(:str, " path: "),
                s(:begin,
                  s(:lvar, :path)),
                s(:str, ".")),
              s(:send,
                s(:const, nil, :Shell), :debug?)),
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:dstr,
                s(:str, "Definition of "),
                s(:begin,
                  s(:lvar, :command)),
                s(:str, ": ")),
              s(:lvar, :d),
              s(:and,
                s(:send,
                  s(:send,
                    s(:const, nil, :Shell), :debug), :kind_of?,
                  s(:const, nil, :Integer)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Shell), :debug), :>,
                  s(:int, 1)))))),
        s(:defs,
          s(:self), :undef_system_command,
          s(:args,
            s(:arg, :command)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :command), :kind_of?,
                s(:const, nil, :Symbol)),
              s(:lvasgn, :command,
                s(:send,
                  s(:lvar, :command), :id2name)), nil),
            s(:send, nil, :remove_method,
              s(:lvar, :command)),
            s(:block,
              s(:send,
                s(:const, nil, :Shell), :module_eval),
              s(:args),
              s(:send, nil, :remove_method,
                s(:lvar, :command))),
            s(:block,
              s(:send,
                s(:const, nil, :Filter), :module_eval),
              s(:args),
              s(:send, nil, :remove_method,
                s(:lvar, :command))),
            s(:self))),
        s(:ivasgn, :@alias_map,
          s(:hash)),
        s(:defs,
          s(:self), :alias_map,
          s(:args),
          s(:ivar, :@alias_map)),
        s(:defs,
          s(:self), :alias_command,
          s(:args,
            s(:arg, :ali),
            s(:arg, :command),
            s(:restarg, :opts)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :ali), :kind_of?,
                s(:const, nil, :Symbol)),
              s(:lvasgn, :ali,
                s(:send,
                  s(:lvar, :ali), :id2name)), nil),
            s(:if,
              s(:send,
                s(:lvar, :command), :kind_of?,
                s(:const, nil, :Symbol)),
              s(:lvasgn, :command,
                s(:send,
                  s(:lvar, :command), :id2name)), nil),
            s(:kwbegin,
              s(:rescue,
                s(:if,
                  s(:send, nil, :iterator?),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@alias_map), :[]=,
                      s(:send,
                        s(:lvar, :ali), :intern),
                      s(:send, nil, :proc)),
                    s(:send, nil, :eval,
                      s(:begin,
                        s(:lvasgn, :d,
                          s(:dstr,
                            s(:str, "def "),
                            s(:begin,
                              s(:lvar, :ali)),
                            s(:str, "(*opts)\n"),
                            s(:str, "                          @shell.__send__(:"),
                            s(:begin,
                              s(:lvar, :command)),
                            s(:str, ",\n"),
                            s(:str, "                                          *(CommandProcessor.alias_map[:"),
                            s(:begin,
                              s(:lvar, :ali)),
                            s(:str, "].call *opts))\n"),
                            s(:str, "                        end")))),
                      s(:nil),
                      s(:str, "(string)"),
                      s(:send,
                        s(:int, 446), :-,
                        s(:int, 1)))),
                  s(:begin,
                    s(:lvasgn, :args,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:lvar, :opts), :collect),
                          s(:args,
                            s(:arg, :opt)),
                          s(:send,
                            s(:send,
                              s(:str, "\""), :+,
                              s(:lvar, :opt)), :+,
                            s(:str, "\""))), :join,
                        s(:str, ","))),
                    s(:send, nil, :eval,
                      s(:begin,
                        s(:lvasgn, :d,
                          s(:dstr,
                            s(:str, "def "),
                            s(:begin,
                              s(:lvar, :ali)),
                            s(:str, "(*opts)\n"),
                            s(:str, "                          @shell.__send__(:"),
                            s(:begin,
                              s(:lvar, :command)),
                            s(:str, ", "),
                            s(:begin,
                              s(:lvar, :args)),
                            s(:str, ", *opts)\n"),
                            s(:str, "                        end")))),
                      s(:nil),
                      s(:str, "(string)"),
                      s(:send,
                        s(:int, 452), :-,
                        s(:int, 1))))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :SyntaxError)), nil,
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Shell), :notify,
                      s(:dstr,
                        s(:str, "warn: Can't alias "),
                        s(:begin,
                          s(:lvar, :ali)),
                        s(:str, " command: "),
                        s(:begin,
                          s(:lvar, :command)),
                        s(:str, "."))),
                    s(:send,
                      s(:const, nil, :Shell), :notify,
                      s(:dstr,
                        s(:str, "Definition of "),
                        s(:begin,
                          s(:lvar, :ali)),
                        s(:str, ": ")),
                      s(:lvar, :d)),
                    s(:send, nil, :raise))), nil)),
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:dstr,
                s(:str, "Define "),
                s(:begin,
                  s(:lvar, :ali)),
                s(:str, " command: "),
                s(:begin,
                  s(:lvar, :command)),
                s(:str, ".")),
              s(:send,
                s(:const, nil, :Shell), :debug?)),
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:dstr,
                s(:str, "Definition of "),
                s(:begin,
                  s(:lvar, :ali)),
                s(:str, ": ")),
              s(:lvar, :d),
              s(:and,
                s(:send,
                  s(:send,
                    s(:const, nil, :Shell), :debug), :kind_of?,
                  s(:const, nil, :Integer)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Shell), :debug), :>,
                  s(:int, 1)))),
            s(:self))),
        s(:defs,
          s(:self), :unalias_command,
          s(:args,
            s(:arg, :ali)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :ali), :kind_of?,
                s(:const, nil, :Symbol)),
              s(:lvasgn, :ali,
                s(:send,
                  s(:lvar, :ali), :id2name)), nil),
            s(:send,
              s(:ivar, :@alias_map), :delete,
              s(:send,
                s(:lvar, :ali), :intern)),
            s(:send, nil, :undef_system_command,
              s(:lvar, :ali)))),
        s(:defs,
          s(:self), :def_builtin_commands,
          s(:args,
            s(:arg, :delegation_class),
            s(:arg, :command_specs)),
          s(:for,
            s(:mlhs,
              s(:lvasgn, :meth),
              s(:lvasgn, :args)),
            s(:lvar, :command_specs),
            s(:begin,
              s(:lvasgn, :arg_str,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :args), :collect),
                    s(:args,
                      s(:arg, :arg)),
                    s(:send,
                      s(:lvar, :arg), :downcase)), :join,
                  s(:str, ", "))),
              s(:lvasgn, :call_arg_str,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :args), :collect),
                    s(:args,
                      s(:arg, :arg)),
                    s(:case,
                      s(:lvar, :arg),
                      s(:when,
                        s(:regexp,
                          s(:str, "^(FILENAME.*)$"),
                          s(:regopt)),
                        s(:send, nil, :format,
                          s(:str, "expand_path(%s)"),
                          s(:send,
                            s(:nth_ref, 1), :downcase))),
                      s(:when,
                        s(:regexp,
                          s(:str, "^(\\*FILENAME.*)$"),
                          s(:regopt)),
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :downcase), :+,
                          s(:str, ".collect{|fn| expand_path(fn)}"))),
                      s(:lvar, :arg))), :join,
                  s(:str, ", "))),
              s(:lvasgn, :d,
                s(:dstr,
                  s(:str, "def "),
                  s(:begin,
                    s(:lvar, :meth)),
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :arg_str)),
                  s(:str, ")\n"),
                  s(:str, "                    "),
                  s(:begin,
                    s(:lvar, :delegation_class)),
                  s(:str, "."),
                  s(:begin,
                    s(:lvar, :meth)),
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :call_arg_str)),
                  s(:str, ")\n"),
                  s(:str, "                 end"))),
              s(:send,
                s(:const, nil, :Shell), :notify,
                s(:dstr,
                  s(:str, "Define "),
                  s(:begin,
                    s(:lvar, :meth)),
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :arg_str)),
                  s(:str, ")")),
                s(:send,
                  s(:const, nil, :Shell), :debug?)),
              s(:send,
                s(:const, nil, :Shell), :notify,
                s(:dstr,
                  s(:str, "Definition of "),
                  s(:begin,
                    s(:lvar, :meth)),
                  s(:str, ": ")),
                s(:lvar, :d),
                s(:and,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Shell), :debug), :kind_of?,
                    s(:const, nil, :Integer)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Shell), :debug), :>,
                    s(:int, 1)))),
              s(:send, nil, :eval,
                s(:lvar, :d))))),
        s(:defs,
          s(:self), :install_system_commands,
          s(:args,
            s(:optarg, :pre,
              s(:str, "sys_"))),
          s(:begin,
            s(:lvasgn, :defined_meth,
              s(:hash)),
            s(:for,
              s(:lvasgn, :m),
              s(:send,
                s(:const, nil, :Shell), :methods),
              s(:send,
                s(:lvar, :defined_meth), :[]=,
                s(:lvar, :m),
                s(:true))),
            s(:lvasgn, :sh,
              s(:send,
                s(:const, nil, :Shell), :new)),
            s(:for,
              s(:lvasgn, :path),
              s(:send,
                s(:const, nil, :Shell), :default_system_path),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :sh), :directory?,
                    s(:lvar, :path)), nil,
                  s(:next)),
                s(:send,
                  s(:lvar, :sh), :cd,
                  s(:lvar, :path)),
                s(:block,
                  s(:send,
                    s(:lvar, :sh), :foreach),
                  s(:args,
                    s(:arg, :cn)),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:lvar, :defined_meth), :[],
                            s(:send,
                              s(:lvar, :pre), :+,
                              s(:lvar, :cn))), :!),
                        s(:send,
                          s(:lvar, :sh), :file?,
                          s(:lvar, :cn))),
                      s(:send,
                        s(:lvar, :sh), :executable?,
                        s(:lvar, :cn))),
                    s(:begin,
                      s(:lvasgn, :command,
                        s(:send,
                          s(:send,
                            s(:begin,
                              s(:send,
                                s(:lvar, :pre), :+,
                                s(:lvar, :cn))), :gsub,
                            s(:regexp,
                              s(:str, "\\W"),
                              s(:regopt)),
                            s(:str, "_")), :sub,
                          s(:regexp,
                            s(:str, "^([0-9])"),
                            s(:regopt)),
                          s(:str, "_\\1"))),
                      s(:kwbegin,
                        s(:rescue,
                          s(:send, nil, :def_system_command,
                            s(:lvar, :command),
                            s(:send,
                              s(:lvar, :sh), :expand_path,
                              s(:lvar, :cn))),
                          s(:resbody, nil, nil,
                            s(:send,
                              s(:const, nil, :Shell), :notify,
                              s(:dstr,
                                s(:str, "warn: Can't define "),
                                s(:begin,
                                  s(:lvar, :command)),
                                s(:str, " path: "),
                                s(:begin,
                                  s(:lvar, :cn))))), nil)),
                      s(:send,
                        s(:lvar, :defined_meth), :[]=,
                        s(:lvar, :command),
                        s(:lvar, :command))), nil)))))),
        s(:defs,
          s(:self), :add_delegate_command_to_shell,
          s(:args,
            s(:arg, :id)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :id), :kind_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :id,
                s(:send,
                  s(:lvar, :id), :intern)), nil),
            s(:lvasgn, :name,
              s(:send,
                s(:lvar, :id), :id2name)),
            s(:if,
              s(:send,
                s(:const, nil, :Shell), :method_defined?,
                s(:lvar, :id)),
              s(:begin,
                s(:send,
                  s(:const, nil, :Shell), :notify,
                  s(:dstr,
                    s(:str, "warn: override definition of Shell#"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "."))),
                s(:send,
                  s(:const, nil, :Shell), :notify,
                  s(:dstr,
                    s(:str, "warn: alias Shell#"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, " to Shell#"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "_org.\n"))),
                s(:send,
                  s(:const, nil, :Shell), :module_eval,
                  s(:dstr,
                    s(:str, "alias "),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "_org "),
                    s(:begin,
                      s(:lvar, :name))))), nil),
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:dstr,
                s(:str, "method added: Shell#"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ".")),
              s(:send,
                s(:const, nil, :Shell), :debug?)),
            s(:send,
              s(:const, nil, :Shell), :module_eval,
              s(:dstr,
                s(:str, "def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "(*args, &block)\n"),
                s(:str, "                            begin\n"),
                s(:str, "                              @command_processor.__send__(:"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ", *args, &block)\n"),
                s(:str, "                            rescue Exception\n"),
                s(:str, "                              $@.delete_if{|s| /:in `__getobj__'$/ =~ s} #`\n"),
                s(:str, "                              $@.delete_if{|s| /^\\(eval\\):/ =~ s}\n"),
                s(:str, "                            raise\n"),
                s(:str, "                            end\n"),
                s(:str, "                          end")),
              s(:str, "(string)"),
              s(:int, 593)),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :Shell), :Filter), :method_defined?,
                s(:lvar, :id)),
              s(:begin,
                s(:send,
                  s(:const, nil, :Shell), :notify,
                  s(:dstr,
                    s(:str, "warn: override definition of Shell::Filter#"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "."))),
                s(:send,
                  s(:const, nil, :Shell), :notify,
                  s(:dstr,
                    s(:str, "warn: alias Shell#"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, " to Shell::Filter#"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "_org."))),
                s(:send,
                  s(:const, nil, :Filter), :module_eval,
                  s(:dstr,
                    s(:str, "alias "),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "_org "),
                    s(:begin,
                      s(:lvar, :name))))), nil),
            s(:send,
              s(:const, nil, :Shell), :notify,
              s(:dstr,
                s(:str, "method added: Shell::Filter#"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ".")),
              s(:send,
                s(:const, nil, :Shell), :debug?)),
            s(:send,
              s(:const, nil, :Filter), :module_eval,
              s(:dstr,
                s(:str, "def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "(*args, &block)\n"),
                s(:str, "                            begin\n"),
                s(:str, "                              self | @shell.__send__(:"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ", *args, &block)\n"),
                s(:str, "                            rescue Exception\n"),
                s(:str, "                              $@.delete_if{|s| /:in `__getobj__'$/ =~ s} #`\n"),
                s(:str, "                              $@.delete_if{|s| /^\\(eval\\):/ =~ s}\n"),
                s(:str, "                            raise\n"),
                s(:str, "                            end\n"),
                s(:str, "                          end")),
              s(:str, "(string)"),
              s(:int, 609)))),
        s(:defs,
          s(:self), :install_builtin_commands,
          s(:args),
          s(:begin,
            s(:lvasgn, :normal_delegation_file_methods,
              s(:array,
                s(:array,
                  s(:str, "atime"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "basename"),
                  s(:array,
                    s(:str, "fn"),
                    s(:str, "*opts"))),
                s(:array,
                  s(:str, "chmod"),
                  s(:array,
                    s(:str, "mode"),
                    s(:str, "*FILENAMES"))),
                s(:array,
                  s(:str, "chown"),
                  s(:array,
                    s(:str, "owner"),
                    s(:str, "group"),
                    s(:str, "*FILENAME"))),
                s(:array,
                  s(:str, "ctime"),
                  s(:array,
                    s(:str, "FILENAMES"))),
                s(:array,
                  s(:str, "delete"),
                  s(:array,
                    s(:str, "*FILENAMES"))),
                s(:array,
                  s(:str, "dirname"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "ftype"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "join"),
                  s(:array,
                    s(:str, "*items"))),
                s(:array,
                  s(:str, "link"),
                  s(:array,
                    s(:str, "FILENAME_O"),
                    s(:str, "FILENAME_N"))),
                s(:array,
                  s(:str, "lstat"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "mtime"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "readlink"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "rename"),
                  s(:array,
                    s(:str, "FILENAME_FROM"),
                    s(:str, "FILENAME_TO"))),
                s(:array,
                  s(:str, "split"),
                  s(:array,
                    s(:str, "pathname"))),
                s(:array,
                  s(:str, "stat"),
                  s(:array,
                    s(:str, "FILENAME"))),
                s(:array,
                  s(:str, "symlink"),
                  s(:array,
                    s(:str, "FILENAME_O"),
                    s(:str, "FILENAME_N"))),
                s(:array,
                  s(:str, "truncate"),
                  s(:array,
                    s(:str, "FILENAME"),
                    s(:str, "length"))),
                s(:array,
                  s(:str, "utime"),
                  s(:array,
                    s(:str, "atime"),
                    s(:str, "mtime"),
                    s(:str, "*FILENAMES"))))),
            s(:send, nil, :def_builtin_commands,
              s(:const, nil, :File),
              s(:lvar, :normal_delegation_file_methods)),
            s(:send, nil, :alias_method,
              s(:sym, :rm),
              s(:sym, :delete)),
            s(:send, nil, :def_builtin_commands,
              s(:const, nil, :FileTest),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :FileTest), :singleton_methods,
                    s(:false)), :collect),
                s(:args,
                  s(:arg, :m)),
                s(:array,
                  s(:lvar, :m),
                  s(:array,
                    s(:str, "FILENAME")))))))))))
