s(:begin,
  s(:send, nil, :require,
    s(:str, "shell/filter")),
  s(:class,
    s(:const, nil, :Shell), nil,
    s(:class,
      s(:const, nil, :SystemCommand),
      s(:const, nil, :Filter),
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :sh),
            s(:arg, :command),
            s(:restarg, :opts)),
          s(:begin,
            s(:if,
              s(:lvasgn, :t,
                s(:block,
                  s(:send,
                    s(:lvar, :opts), :find),
                  s(:args,
                    s(:arg, :opt)),
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :opt), :kind_of?,
                        s(:const, nil, :String)), :!),
                    s(:send,
                      s(:lvar, :opt), :class)))),
              s(:send,
                s(:const, nil, :Shell), :Fail,
                s(:const,
                  s(:const, nil, :Error), :TypeError),
                s(:send,
                  s(:lvar, :t), :class),
                s(:str, "String")), nil),
            s(:super,
              s(:lvar, :sh)),
            s(:ivasgn, :@command,
              s(:lvar, :command)),
            s(:ivasgn, :@opts,
              s(:lvar, :opts)),
            s(:ivasgn, :@input_queue,
              s(:send,
                s(:const, nil, :Queue), :new)),
            s(:ivasgn, :@pid,
              s(:nil)),
            s(:send,
              s(:send,
                s(:lvar, :sh), :process_controller), :add_schedule,
              s(:self)))),
        s(:send, nil, :attr_reader,
          s(:sym, :command)),
        s(:alias,
          s(:sym, :name),
          s(:sym, :command)),
        s(:def, :wait?,
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@shell), :process_controller), :waiting_job?,
            s(:self))),
        s(:def, :active?,
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@shell), :process_controller), :active_job?,
            s(:self))),
        s(:def, :input=,
          s(:args,
            s(:arg, :inp)),
          s(:begin,
            s(:zsuper),
            s(:if,
              s(:send, nil, :active?),
              s(:send, nil, :start_export), nil))),
        s(:def, :start,
          s(:args),
          s(:begin,
            s(:send, nil, :notify,
              s(:send,
                s(:array,
                  s(:ivar, :@command),
                  s(:splat,
                    s(:ivar, :@opts))), :join,
                s(:str, " "))),
            s(:masgn,
              s(:mlhs,
                s(:ivasgn, :@pid),
                s(:ivasgn, :@pipe_in),
                s(:ivasgn, :@pipe_out)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@shell), :process_controller), :sfork,
                  s(:self)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:send,
                      s(:ivar, :@shell), :pwd)),
                  s(:gvasgn, :$0,
                    s(:ivar, :@command)),
                  s(:send, nil, :exec,
                    s(:ivar, :@command),
                    s(:splat,
                      s(:ivar, :@opts)))))),
            s(:if,
              s(:ivar, :@input),
              s(:send, nil, :start_export), nil),
            s(:send, nil, :start_import))),
        s(:def, :flush,
          s(:args),
          s(:if,
            s(:and,
              s(:ivar, :@pipe_out),
              s(:send,
                s(:send,
                  s(:ivar, :@pipe_out), :closed?), :!)),
            s(:send,
              s(:ivar, :@pipe_out), :flush), nil)),
        s(:def, :terminate,
          s(:args),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:ivar, :@pipe_in), :close),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :IOError)), nil, nil), nil)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:ivar, :@pipe_out), :close),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :IOError)), nil, nil), nil)))),
        s(:def, :kill,
          s(:args,
            s(:arg, :sig)),
          s(:if,
            s(:ivar, :@pid),
            s(:send,
              s(:const, nil, :Process), :kill,
              s(:lvar, :sig),
              s(:ivar, :@pid)), nil)),
        s(:def, :start_import,
          s(:args),
          s(:begin,
            s(:send, nil, :notify,
              s(:str, "Job(%id) start imp-pipe."),
              s(:send,
                s(:ivar, :@shell), :debug?)),
            s(:lvasgn, :_eop,
              s(:true)),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:while,
                        s(:lvasgn, :l,
                          s(:send,
                            s(:ivar, :@pipe_in), :gets)),
                        s(:send,
                          s(:ivar, :@input_queue), :push,
                          s(:lvar, :l))),
                      s(:lvasgn, :_eop,
                        s(:false))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPIPE)), nil,
                      s(:lvasgn, :_eop,
                        s(:false))), nil),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:const,
                            s(:const, nil, :ProcessController), :USING_AT_EXIT_WHEN_PROCESS_EXIT), :!),
                        s(:lvar, :_eop)),
                      s(:begin,
                        s(:send, nil, :notify,
                          s(:str, "warn: Process finishing..."),
                          s(:str, "wait for Job[%id] to finish pipe importing."),
                          s(:str, "You can use Shell#transact or Shell#check_point for more safe execution.")),
                        s(:redo)), nil),
                    s(:send, nil, :notify,
                      s(:str, "job(%id}) close imp-pipe."),
                      s(:send,
                        s(:ivar, :@shell), :debug?)),
                    s(:send,
                      s(:ivar, :@input_queue), :push,
                      s(:sym, :EOF)),
                    s(:send,
                      s(:ivar, :@pipe_in), :close))))))),
        s(:def, :start_export,
          s(:args),
          s(:begin,
            s(:send, nil, :notify,
              s(:str, "job(%id) start exp-pipe."),
              s(:send,
                s(:ivar, :@shell), :debug?)),
            s(:lvasgn, :_eop,
              s(:true)),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:rescue,
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:ivar, :@input), :each),
                        s(:args,
                          s(:arg, :l)),
                        s(:block,
                          s(:send,
                            s(:const, nil, :ProcessController), :block_output_synchronize),
                          s(:args),
                          s(:send,
                            s(:ivar, :@pipe_out), :print,
                            s(:lvar, :l)))),
                      s(:lvasgn, :_eop,
                        s(:false))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EPIPE),
                        s(:const,
                          s(:const, nil, :Errno), :EIO)), nil,
                      s(:lvasgn, :_eop,
                        s(:false))), nil),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:const,
                            s(:const, nil, :ProcessController), :USING_AT_EXIT_WHEN_PROCESS_EXIT), :!),
                        s(:lvar, :_eop)),
                      s(:begin,
                        s(:send, nil, :notify,
                          s(:str, "shell: warn: Process finishing..."),
                          s(:str, "wait for Job(%id) to finish pipe exporting."),
                          s(:str, "You can use Shell#transact or Shell#check_point for more safe execution.")),
                        s(:redo)), nil),
                    s(:send, nil, :notify,
                      s(:str, "job(%id) close exp-pipe."),
                      s(:send,
                        s(:ivar, :@shell), :debug?)),
                    s(:send,
                      s(:ivar, :@pipe_out), :close))))))),
        s(:alias,
          s(:sym, :super_each),
          s(:sym, :each)),
        s(:def, :each,
          s(:args,
            s(:optarg, :rs,
              s(:nil))),
          s(:while,
            s(:send,
              s(:begin,
                s(:lvasgn, :l,
                  s(:send,
                    s(:ivar, :@input_queue), :pop))), :!=,
              s(:sym, :EOF)),
            s(:yield,
              s(:lvar, :l)))),
        s(:def, :notify,
          s(:args,
            s(:restarg, :opts)),
          s(:block,
            s(:send,
              s(:ivar, :@shell), :notify,
              s(:splat,
                s(:lvar, :opts))),
            s(:args,
              s(:arg, :mes)),
            s(:begin,
              s(:if,
                s(:send, nil, :iterator?),
                s(:yield,
                  s(:lvar, :mes)), nil),
              s(:send,
                s(:lvar, :mes), :gsub!,
                s(:str, "%id"),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@command)),
                  s(:str, ":#"),
                  s(:begin,
                    s(:ivar, :@pid)))),
              s(:send,
                s(:lvar, :mes), :gsub!,
                s(:str, "%name"),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@command)))),
              s(:send,
                s(:lvar, :mes), :gsub!,
                s(:str, "%pid"),
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@pid)))),
              s(:lvar, :mes))))))))
