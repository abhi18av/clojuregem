s(:class,
  s(:const, nil, :PrettyPrint), nil,
  s(:begin,
    s(:defs,
      s(:const, nil, :PrettyPrint), :format,
      s(:args,
        s(:optarg, :output,
          s(:send,
            s(:str, ""), :dup)),
        s(:optarg, :maxwidth,
          s(:int, 79)),
        s(:optarg, :newline,
          s(:str, "\n")),
        s(:optarg, :genspace,
          s(:block,
            s(:send, nil, :lambda),
            s(:args,
              s(:arg, :n)),
            s(:send,
              s(:str, " "), :*,
              s(:lvar, :n))))),
      s(:begin,
        s(:lvasgn, :q,
          s(:send,
            s(:const, nil, :PrettyPrint), :new,
            s(:lvar, :output),
            s(:lvar, :maxwidth),
            s(:lvar, :newline),
            s(:block_pass,
              s(:lvar, :genspace)))),
        s(:yield,
          s(:lvar, :q)),
        s(:send,
          s(:lvar, :q), :flush),
        s(:lvar, :output))),
    s(:defs,
      s(:const, nil, :PrettyPrint), :singleline_format,
      s(:args,
        s(:optarg, :output,
          s(:send,
            s(:str, ""), :dup)),
        s(:optarg, :maxwidth,
          s(:nil)),
        s(:optarg, :newline,
          s(:nil)),
        s(:optarg, :genspace,
          s(:nil))),
      s(:begin,
        s(:lvasgn, :q,
          s(:send,
            s(:const, nil, :SingleLine), :new,
            s(:lvar, :output))),
        s(:yield,
          s(:lvar, :q)),
        s(:lvar, :output))),
    s(:def, :initialize,
      s(:args,
        s(:optarg, :output,
          s(:send,
            s(:str, ""), :dup)),
        s(:optarg, :maxwidth,
          s(:int, 79)),
        s(:optarg, :newline,
          s(:str, "\n")),
        s(:blockarg, :genspace)),
      s(:begin,
        s(:ivasgn, :@output,
          s(:lvar, :output)),
        s(:ivasgn, :@maxwidth,
          s(:lvar, :maxwidth)),
        s(:ivasgn, :@newline,
          s(:lvar, :newline)),
        s(:ivasgn, :@genspace,
          s(:or,
            s(:lvar, :genspace),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:str, " "), :*,
                s(:lvar, :n))))),
        s(:ivasgn, :@output_width,
          s(:int, 0)),
        s(:ivasgn, :@buffer_width,
          s(:int, 0)),
        s(:ivasgn, :@buffer,
          s(:array)),
        s(:lvasgn, :root_group,
          s(:send,
            s(:const, nil, :Group), :new,
            s(:int, 0))),
        s(:ivasgn, :@group_stack,
          s(:array,
            s(:lvar, :root_group))),
        s(:ivasgn, :@group_queue,
          s(:send,
            s(:const, nil, :GroupQueue), :new,
            s(:lvar, :root_group))),
        s(:ivasgn, :@indent,
          s(:int, 0)))),
    s(:send, nil, :attr_reader,
      s(:sym, :output)),
    s(:send, nil, :attr_reader,
      s(:sym, :maxwidth)),
    s(:send, nil, :attr_reader,
      s(:sym, :newline)),
    s(:send, nil, :attr_reader,
      s(:sym, :genspace)),
    s(:send, nil, :attr_reader,
      s(:sym, :indent)),
    s(:send, nil, :attr_reader,
      s(:sym, :group_queue)),
    s(:def, :current_group,
      s(:args),
      s(:send,
        s(:ivar, :@group_stack), :last)),
    s(:def, :break_outmost_groups,
      s(:args),
      s(:while,
        s(:send,
          s(:ivar, :@maxwidth), :<,
          s(:send,
            s(:ivar, :@output_width), :+,
            s(:ivar, :@buffer_width))),
        s(:begin,
          s(:if,
            s(:lvasgn, :group,
              s(:send,
                s(:ivar, :@group_queue), :deq)), nil,
            s(:return)),
          s(:until,
            s(:send,
              s(:send,
                s(:lvar, :group), :breakables), :empty?),
            s(:begin,
              s(:lvasgn, :data,
                s(:send,
                  s(:ivar, :@buffer), :shift)),
              s(:ivasgn, :@output_width,
                s(:send,
                  s(:lvar, :data), :output,
                  s(:ivar, :@output),
                  s(:ivar, :@output_width))),
              s(:op_asgn,
                s(:ivasgn, :@buffer_width), :-,
                s(:send,
                  s(:lvar, :data), :width)))),
          s(:while,
            s(:and,
              s(:send,
                s(:send,
                  s(:ivar, :@buffer), :empty?), :!),
              s(:send,
                s(:const, nil, :Text), :===,
                s(:send,
                  s(:ivar, :@buffer), :first))),
            s(:begin,
              s(:lvasgn, :text,
                s(:send,
                  s(:ivar, :@buffer), :shift)),
              s(:ivasgn, :@output_width,
                s(:send,
                  s(:lvar, :text), :output,
                  s(:ivar, :@output),
                  s(:ivar, :@output_width))),
              s(:op_asgn,
                s(:ivasgn, :@buffer_width), :-,
                s(:send,
                  s(:lvar, :text), :width))))))),
    s(:def, :text,
      s(:args,
        s(:arg, :obj),
        s(:optarg, :width,
          s(:send,
            s(:lvar, :obj), :length))),
      s(:if,
        s(:send,
          s(:ivar, :@buffer), :empty?),
        s(:begin,
          s(:send,
            s(:ivar, :@output), :<<,
            s(:lvar, :obj)),
          s(:op_asgn,
            s(:ivasgn, :@output_width), :+,
            s(:lvar, :width))),
        s(:begin,
          s(:lvasgn, :text,
            s(:send,
              s(:ivar, :@buffer), :last)),
          s(:if,
            s(:send,
              s(:const, nil, :Text), :===,
              s(:lvar, :text)), nil,
            s(:begin,
              s(:lvasgn, :text,
                s(:send,
                  s(:const, nil, :Text), :new)),
              s(:send,
                s(:ivar, :@buffer), :<<,
                s(:lvar, :text)))),
          s(:send,
            s(:lvar, :text), :add,
            s(:lvar, :obj),
            s(:lvar, :width)),
          s(:op_asgn,
            s(:ivasgn, :@buffer_width), :+,
            s(:lvar, :width)),
          s(:send, nil, :break_outmost_groups)))),
    s(:def, :fill_breakable,
      s(:args,
        s(:optarg, :sep,
          s(:str, " ")),
        s(:optarg, :width,
          s(:send,
            s(:lvar, :sep), :length))),
      s(:block,
        s(:send, nil, :group),
        s(:args),
        s(:send, nil, :breakable,
          s(:lvar, :sep),
          s(:lvar, :width)))),
    s(:def, :breakable,
      s(:args,
        s(:optarg, :sep,
          s(:str, " ")),
        s(:optarg, :width,
          s(:send,
            s(:lvar, :sep), :length))),
      s(:begin,
        s(:lvasgn, :group,
          s(:send,
            s(:ivar, :@group_stack), :last)),
        s(:if,
          s(:send,
            s(:lvar, :group), :break?),
          s(:begin,
            s(:send, nil, :flush),
            s(:send,
              s(:ivar, :@output), :<<,
              s(:ivar, :@newline)),
            s(:send,
              s(:ivar, :@output), :<<,
              s(:send,
                s(:ivar, :@genspace), :call,
                s(:ivar, :@indent))),
            s(:ivasgn, :@output_width,
              s(:ivar, :@indent)),
            s(:ivasgn, :@buffer_width,
              s(:int, 0))),
          s(:begin,
            s(:send,
              s(:ivar, :@buffer), :<<,
              s(:send,
                s(:const, nil, :Breakable), :new,
                s(:lvar, :sep),
                s(:lvar, :width),
                s(:self))),
            s(:op_asgn,
              s(:ivasgn, :@buffer_width), :+,
              s(:lvar, :width)),
            s(:send, nil, :break_outmost_groups))))),
    s(:def, :group,
      s(:args,
        s(:optarg, :indent,
          s(:int, 0)),
        s(:optarg, :open_obj,
          s(:str, "")),
        s(:optarg, :close_obj,
          s(:str, "")),
        s(:optarg, :open_width,
          s(:send,
            s(:lvar, :open_obj), :length)),
        s(:optarg, :close_width,
          s(:send,
            s(:lvar, :close_obj), :length))),
      s(:begin,
        s(:send, nil, :text,
          s(:lvar, :open_obj),
          s(:lvar, :open_width)),
        s(:block,
          s(:send, nil, :group_sub),
          s(:args),
          s(:block,
            s(:send, nil, :nest,
              s(:lvar, :indent)),
            s(:args),
            s(:yield))),
        s(:send, nil, :text,
          s(:lvar, :close_obj),
          s(:lvar, :close_width)))),
    s(:def, :group_sub,
      s(:args),
      s(:begin,
        s(:lvasgn, :group,
          s(:send,
            s(:const, nil, :Group), :new,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@group_stack), :last), :depth), :+,
              s(:int, 1)))),
        s(:send,
          s(:ivar, :@group_stack), :push,
          s(:lvar, :group)),
        s(:send,
          s(:ivar, :@group_queue), :enq,
          s(:lvar, :group)),
        s(:kwbegin,
          s(:ensure,
            s(:yield),
            s(:begin,
              s(:send,
                s(:ivar, :@group_stack), :pop),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :group), :breakables), :empty?),
                s(:send,
                  s(:ivar, :@group_queue), :delete,
                  s(:lvar, :group)), nil)))))),
    s(:def, :nest,
      s(:args,
        s(:arg, :indent)),
      s(:begin,
        s(:op_asgn,
          s(:ivasgn, :@indent), :+,
          s(:lvar, :indent)),
        s(:kwbegin,
          s(:ensure,
            s(:yield),
            s(:op_asgn,
              s(:ivasgn, :@indent), :-,
              s(:lvar, :indent)))))),
    s(:def, :flush,
      s(:args),
      s(:begin,
        s(:block,
          s(:send,
            s(:ivar, :@buffer), :each),
          s(:args,
            s(:arg, :data)),
          s(:ivasgn, :@output_width,
            s(:send,
              s(:lvar, :data), :output,
              s(:ivar, :@output),
              s(:ivar, :@output_width)))),
        s(:send,
          s(:ivar, :@buffer), :clear),
        s(:ivasgn, :@buffer_width,
          s(:int, 0)))),
    s(:class,
      s(:const, nil, :Text), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args),
          s(:begin,
            s(:ivasgn, :@objs,
              s(:array)),
            s(:ivasgn, :@width,
              s(:int, 0)))),
        s(:send, nil, :attr_reader,
          s(:sym, :width)),
        s(:def, :output,
          s(:args,
            s(:arg, :out),
            s(:arg, :output_width)),
          s(:begin,
            s(:block,
              s(:send,
                s(:ivar, :@objs), :each),
              s(:args,
                s(:arg, :obj)),
              s(:send,
                s(:lvar, :out), :<<,
                s(:lvar, :obj))),
            s(:send,
              s(:lvar, :output_width), :+,
              s(:ivar, :@width)))),
        s(:def, :add,
          s(:args,
            s(:arg, :obj),
            s(:arg, :width)),
          s(:begin,
            s(:send,
              s(:ivar, :@objs), :<<,
              s(:lvar, :obj)),
            s(:op_asgn,
              s(:ivasgn, :@width), :+,
              s(:lvar, :width)))))),
    s(:class,
      s(:const, nil, :Breakable), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :sep),
            s(:arg, :width),
            s(:arg, :q)),
          s(:begin,
            s(:ivasgn, :@obj,
              s(:lvar, :sep)),
            s(:ivasgn, :@width,
              s(:lvar, :width)),
            s(:ivasgn, :@pp,
              s(:lvar, :q)),
            s(:ivasgn, :@indent,
              s(:send,
                s(:lvar, :q), :indent)),
            s(:ivasgn, :@group,
              s(:send,
                s(:lvar, :q), :current_group)),
            s(:send,
              s(:send,
                s(:ivar, :@group), :breakables), :push,
              s(:self)))),
        s(:send, nil, :attr_reader,
          s(:sym, :obj)),
        s(:send, nil, :attr_reader,
          s(:sym, :width)),
        s(:send, nil, :attr_reader,
          s(:sym, :indent)),
        s(:def, :output,
          s(:args,
            s(:arg, :out),
            s(:arg, :output_width)),
          s(:begin,
            s(:send,
              s(:send,
                s(:ivar, :@group), :breakables), :shift),
            s(:if,
              s(:send,
                s(:ivar, :@group), :break?),
              s(:begin,
                s(:send,
                  s(:lvar, :out), :<<,
                  s(:send,
                    s(:ivar, :@pp), :newline)),
                s(:send,
                  s(:lvar, :out), :<<,
                  s(:send,
                    s(:send,
                      s(:ivar, :@pp), :genspace), :call,
                    s(:ivar, :@indent))),
                s(:ivar, :@indent)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@group), :breakables), :empty?),
                  s(:send,
                    s(:send,
                      s(:ivar, :@pp), :group_queue), :delete,
                    s(:ivar, :@group)), nil),
                s(:send,
                  s(:lvar, :out), :<<,
                  s(:ivar, :@obj)),
                s(:send,
                  s(:lvar, :output_width), :+,
                  s(:ivar, :@width)))))))),
    s(:class,
      s(:const, nil, :Group), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :depth)),
          s(:begin,
            s(:ivasgn, :@depth,
              s(:lvar, :depth)),
            s(:ivasgn, :@breakables,
              s(:array)),
            s(:ivasgn, :@break,
              s(:false)))),
        s(:send, nil, :attr_reader,
          s(:sym, :depth)),
        s(:send, nil, :attr_reader,
          s(:sym, :breakables)),
        s(:def, :break,
          s(:args),
          s(:ivasgn, :@break,
            s(:true))),
        s(:def, :break?,
          s(:args),
          s(:ivar, :@break)),
        s(:def, :first?,
          s(:args),
          s(:if,
            s(:defined?,
              s(:ivar, :@first)),
            s(:false),
            s(:begin,
              s(:ivasgn, :@first,
                s(:false)),
              s(:true)))))),
    s(:class,
      s(:const, nil, :GroupQueue), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:restarg, :groups)),
          s(:begin,
            s(:ivasgn, :@queue,
              s(:array)),
            s(:block,
              s(:send,
                s(:lvar, :groups), :each),
              s(:args,
                s(:arg, :g)),
              s(:send, nil, :enq,
                s(:lvar, :g))))),
        s(:def, :enq,
          s(:args,
            s(:arg, :group)),
          s(:begin,
            s(:lvasgn, :depth,
              s(:send,
                s(:lvar, :group), :depth)),
            s(:until,
              s(:send,
                s(:lvar, :depth), :<,
                s(:send,
                  s(:ivar, :@queue), :length)),
              s(:send,
                s(:ivar, :@queue), :<<,
                s(:array))),
            s(:send,
              s(:send,
                s(:ivar, :@queue), :[],
                s(:lvar, :depth)), :<<,
              s(:lvar, :group)))),
        s(:def, :deq,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:ivar, :@queue), :each),
              s(:args,
                s(:arg, :gs)),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :gs), :length), :-,
                        s(:int, 1))), :downto,
                    s(:int, 0)),
                  s(:args,
                    s(:arg, :i)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :gs), :[],
                          s(:lvar, :i)), :breakables), :empty?), nil,
                    s(:begin,
                      s(:lvasgn, :group,
                        s(:send,
                          s(:send,
                            s(:lvar, :gs), :slice!,
                            s(:lvar, :i),
                            s(:int, 1)), :first)),
                      s(:send,
                        s(:lvar, :group), :break),
                      s(:return,
                        s(:lvar, :group))))),
                s(:block,
                  s(:send,
                    s(:lvar, :gs), :each),
                  s(:args,
                    s(:arg, :group)),
                  s(:send,
                    s(:lvar, :group), :break)),
                s(:send,
                  s(:lvar, :gs), :clear))),
            s(:return,
              s(:nil)))),
        s(:def, :delete,
          s(:args,
            s(:arg, :group)),
          s(:send,
            s(:send,
              s(:ivar, :@queue), :[],
              s(:send,
                s(:lvar, :group), :depth)), :delete,
            s(:lvar, :group))))),
    s(:class,
      s(:const, nil, :SingleLine), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :output),
            s(:optarg, :maxwidth,
              s(:nil)),
            s(:optarg, :newline,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@output,
              s(:lvar, :output)),
            s(:ivasgn, :@first,
              s(:array,
                s(:true))))),
        s(:def, :text,
          s(:args,
            s(:arg, :obj),
            s(:optarg, :width,
              s(:nil))),
          s(:send,
            s(:ivar, :@output), :<<,
            s(:lvar, :obj))),
        s(:def, :breakable,
          s(:args,
            s(:optarg, :sep,
              s(:str, " ")),
            s(:optarg, :width,
              s(:nil))),
          s(:send,
            s(:ivar, :@output), :<<,
            s(:lvar, :sep))),
        s(:def, :nest,
          s(:args,
            s(:arg, :indent)),
          s(:yield)),
        s(:def, :group,
          s(:args,
            s(:optarg, :indent,
              s(:nil)),
            s(:optarg, :open_obj,
              s(:str, "")),
            s(:optarg, :close_obj,
              s(:str, "")),
            s(:optarg, :open_width,
              s(:nil)),
            s(:optarg, :close_width,
              s(:nil))),
          s(:begin,
            s(:send,
              s(:ivar, :@first), :push,
              s(:true)),
            s(:send,
              s(:ivar, :@output), :<<,
              s(:lvar, :open_obj)),
            s(:yield),
            s(:send,
              s(:ivar, :@output), :<<,
              s(:lvar, :close_obj)),
            s(:send,
              s(:ivar, :@first), :pop))),
        s(:def, :flush,
          s(:args), nil),
        s(:def, :first?,
          s(:args),
          s(:begin,
            s(:lvasgn, :result,
              s(:send,
                s(:ivar, :@first), :[],
                s(:int, -1))),
            s(:send,
              s(:ivar, :@first), :[]=,
              s(:int, -1),
              s(:false)),
            s(:lvar, :result)))))))
