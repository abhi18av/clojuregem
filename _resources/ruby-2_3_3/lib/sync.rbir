s(:begin,
  s(:if,
    s(:defined?,
      s(:const, nil, :Thread)), nil,
    s(:send, nil, :raise,
      s(:str, "Thread not available for this ruby interpreter"))),
  s(:module,
    s(:const, nil, :Sync_m),
    s(:begin,
      s(:casgn, nil, :UN,
        s(:sym, :UN)),
      s(:casgn, nil, :SH,
        s(:sym, :SH)),
      s(:casgn, nil, :EX,
        s(:sym, :EX)),
      s(:class,
        s(:const, nil, :Err),
        s(:const, nil, :StandardError),
        s(:begin,
          s(:defs,
            s(:const, nil, :Err), :Fail,
            s(:args,
              s(:restarg, :opt)),
            s(:send, nil, :fail,
              s(:self),
              s(:send, nil, :sprintf,
                s(:const,
                  s(:self), :Message),
                s(:splat,
                  s(:lvar, :opt))))),
          s(:class,
            s(:const, nil, :UnknownLocker),
            s(:const, nil, :Err),
            s(:begin,
              s(:casgn, nil, :Message,
                s(:str, "Thread(%s) not locked.")),
              s(:defs,
                s(:const, nil, :UnknownLocker), :Fail,
                s(:args,
                  s(:arg, :th)),
                s(:super,
                  s(:send,
                    s(:lvar, :th), :inspect))))),
          s(:class,
            s(:const, nil, :LockModeFailer),
            s(:const, nil, :Err),
            s(:begin,
              s(:casgn, nil, :Message,
                s(:str, "Unknown lock mode(%s)")),
              s(:defs,
                s(:const, nil, :LockModeFailer), :Fail,
                s(:args,
                  s(:arg, :mode)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :mode), :id2name),
                    s(:lvasgn, :mode,
                      s(:send, nil, :id2name)), nil),
                  s(:super,
                    s(:lvar, :mode)))))))),
      s(:defs,
        s(:const, nil, :Sync_m), :define_aliases,
        s(:args,
          s(:arg, :cl)),
        s(:send,
          s(:lvar, :cl), :module_eval,
          s(:dstr,
            s(:str, "\n"),
            s(:str, "      alias locked? sync_locked?\n"),
            s(:str, "      alias shared? sync_shared?\n"),
            s(:str, "      alias exclusive? sync_exclusive?\n"),
            s(:str, "      alias lock sync_lock\n"),
            s(:str, "      alias unlock sync_unlock\n"),
            s(:str, "      alias try_lock sync_try_lock\n"),
            s(:str, "      alias synchronize sync_synchronize\n"),
            s(:str, "    ")))),
      s(:defs,
        s(:const, nil, :Sync_m), :append_features,
        s(:args,
          s(:arg, :cl)),
        s(:begin,
          s(:zsuper),
          s(:if,
            s(:send,
              s(:lvar, :cl), :instance_of?,
              s(:const, nil, :Module)), nil,
            s(:send, nil, :define_aliases,
              s(:lvar, :cl))),
          s(:self))),
      s(:defs,
        s(:const, nil, :Sync_m), :extend_object,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:zsuper),
          s(:send,
            s(:lvar, :obj), :sync_extend))),
      s(:def, :sync_extend,
        s(:args),
        s(:begin,
          s(:if,
            s(:begin,
              s(:and,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:defined?,
                            s(:send, nil, :locked?)),
                          s(:defined?,
                            s(:send, nil, :shared?))),
                        s(:defined?,
                          s(:send, nil, :exclusive?))),
                      s(:defined?,
                        s(:send, nil, :lock))),
                    s(:defined?,
                      s(:send, nil, :unlock))),
                  s(:defined?,
                    s(:send, nil, :try_lock))),
                s(:defined?,
                  s(:send, nil, :synchronize)))), nil,
            s(:send,
              s(:const, nil, :Sync_m), :define_aliases,
              s(:send, nil, :singleton_class))),
          s(:send, nil, :sync_initialize))),
      s(:def, :sync_locked?,
        s(:args),
        s(:send,
          s(:send, nil, :sync_mode), :!=,
          s(:const, nil, :UN))),
      s(:def, :sync_shared?,
        s(:args),
        s(:send,
          s(:send, nil, :sync_mode), :==,
          s(:const, nil, :SH))),
      s(:def, :sync_exclusive?,
        s(:args),
        s(:send,
          s(:send, nil, :sync_mode), :==,
          s(:const, nil, :EX))),
      s(:def, :sync_try_lock,
        s(:args,
          s(:optarg, :mode,
            s(:const, nil, :EX))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :mode), :==,
              s(:const, nil, :UN)),
            s(:return,
              s(:send, nil, :unlock)), nil),
          s(:block,
            s(:send,
              s(:ivar, :@sync_mutex), :synchronize),
            s(:args),
            s(:send, nil, :sync_try_lock_sub,
              s(:lvar, :mode))))),
      s(:def, :sync_lock,
        s(:args,
          s(:optarg, :m,
            s(:const, nil, :EX))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :m), :==,
              s(:const, nil, :UN)),
            s(:return,
              s(:send, nil, :unlock)), nil),
          s(:block,
            s(:send,
              s(:const, nil, :Thread), :handle_interrupt,
              s(:hash,
                s(:pair,
                  s(:const, nil, :StandardError),
                  s(:sym, :on_blocking)))),
            s(:args),
            s(:while,
              s(:true),
              s(:block,
                s(:send,
                  s(:ivar, :@sync_mutex), :synchronize),
                s(:args),
                s(:kwbegin,
                  s(:ensure,
                    s(:if,
                      s(:send, nil, :sync_try_lock_sub,
                        s(:lvar, :m)),
                      s(:return,
                        s(:self)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send, nil, :sync_sh_locker), :[],
                            s(:send,
                              s(:const, nil, :Thread), :current)),
                          s(:begin,
                            s(:send,
                              s(:send, nil, :sync_upgrade_waiting), :push,
                              s(:array,
                                s(:send,
                                  s(:const, nil, :Thread), :current),
                                s(:send,
                                  s(:send, nil, :sync_sh_locker), :[],
                                  s(:send,
                                    s(:const, nil, :Thread), :current)))),
                            s(:send,
                              s(:send, nil, :sync_sh_locker), :delete,
                              s(:send,
                                s(:const, nil, :Thread), :current))),
                          s(:if,
                            s(:or,
                              s(:send,
                                s(:send, nil, :sync_waiting), :include?,
                                s(:send,
                                  s(:const, nil, :Thread), :current)),
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:send, nil, :sync_upgrade_waiting), :reverse_each), :any?),
                                s(:args,
                                  s(:arg, :w)),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :w), :first), :==,
                                  s(:send,
                                    s(:const, nil, :Thread), :current)))), nil,
                            s(:send,
                              s(:send, nil, :sync_waiting), :push,
                              s(:send,
                                s(:const, nil, :Thread), :current)))),
                        s(:send,
                          s(:ivar, :@sync_mutex), :sleep))),
                    s(:send,
                      s(:send, nil, :sync_waiting), :delete,
                      s(:send,
                        s(:const, nil, :Thread), :current))))))),
          s(:self))),
      s(:def, :sync_unlock,
        s(:args,
          s(:optarg, :m,
            s(:const, nil, :EX))),
        s(:begin,
          s(:lvasgn, :wakeup_threads,
            s(:array)),
          s(:block,
            s(:send,
              s(:ivar, :@sync_mutex), :synchronize),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send, nil, :sync_mode), :==,
                  s(:const, nil, :UN)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Err), :UnknownLocker), :Fail,
                  s(:send,
                    s(:const, nil, :Thread), :current)), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :m), :==,
                    s(:const, nil, :EX)),
                  s(:send,
                    s(:send, nil, :sync_mode), :==,
                    s(:const, nil, :SH))),
                s(:lvasgn, :m,
                  s(:send, nil, :sync_mode)), nil),
              s(:lvasgn, :runnable,
                s(:false)),
              s(:case,
                s(:lvar, :m),
                s(:when,
                  s(:const, nil, :UN),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Err), :UnknownLocker), :Fail,
                    s(:send,
                      s(:const, nil, :Thread), :current))),
                s(:when,
                  s(:const, nil, :EX),
                  s(:if,
                    s(:send,
                      s(:send, nil, :sync_ex_locker), :==,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:if,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:self), :sync_ex_count=,
                            s(:send,
                              s(:send, nil, :sync_ex_count), :-,
                              s(:int, 1)))), :==,
                        s(:int, 0)),
                      s(:begin,
                        s(:send,
                          s(:self), :sync_ex_locker=,
                          s(:nil)),
                        s(:if,
                          s(:send,
                            s(:send, nil, :sync_sh_locker), :include?,
                            s(:send,
                              s(:const, nil, :Thread), :current)),
                          s(:send,
                            s(:self), :sync_mode=,
                            s(:const, nil, :SH)),
                          s(:send,
                            s(:self), :sync_mode=,
                            s(:const, nil, :UN))),
                        s(:lvasgn, :runnable,
                          s(:true))), nil),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Err), :UnknownLocker), :Fail,
                      s(:send,
                        s(:const, nil, :Thread), :current)))),
                s(:when,
                  s(:const, nil, :SH),
                  s(:if,
                    s(:send,
                      s(:begin,
                        s(:lvasgn, :count,
                          s(:send,
                            s(:send, nil, :sync_sh_locker), :[],
                            s(:send,
                              s(:const, nil, :Thread), :current)))), :nil?),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Err), :UnknownLocker), :Fail,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:if,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send, nil, :sync_sh_locker), :[]=,
                            s(:send,
                              s(:const, nil, :Thread), :current),
                            s(:send,
                              s(:lvar, :count), :-,
                              s(:int, 1)))), :==,
                        s(:int, 0)),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :sync_sh_locker), :delete,
                          s(:send,
                            s(:const, nil, :Thread), :current)),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:send, nil, :sync_sh_locker), :empty?),
                            s(:send,
                              s(:send, nil, :sync_ex_count), :==,
                              s(:int, 0))),
                          s(:begin,
                            s(:send,
                              s(:self), :sync_mode=,
                              s(:const, nil, :UN)),
                            s(:lvasgn, :runnable,
                              s(:true))), nil)), nil))), nil),
              s(:if,
                s(:lvar, :runnable),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send, nil, :sync_upgrade_waiting), :size), :>,
                    s(:int, 0)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :th),
                        s(:lvasgn, :count)),
                      s(:send,
                        s(:send, nil, :sync_upgrade_waiting), :shift)),
                    s(:send,
                      s(:send, nil, :sync_sh_locker), :[]=,
                      s(:lvar, :th),
                      s(:lvar, :count)),
                    s(:send,
                      s(:lvar, :th), :wakeup),
                    s(:send,
                      s(:lvar, :wakeup_threads), :push,
                      s(:lvar, :th))),
                  s(:begin,
                    s(:lvasgn, :wait,
                      s(:send, nil, :sync_waiting)),
                    s(:send,
                      s(:self), :sync_waiting=,
                      s(:array)),
                    s(:for,
                      s(:lvasgn, :th),
                      s(:lvar, :wait),
                      s(:begin,
                        s(:send,
                          s(:lvar, :th), :wakeup),
                        s(:send,
                          s(:lvar, :wakeup_threads), :push,
                          s(:lvar, :th)))))), nil))),
          s(:for,
            s(:lvasgn, :th),
            s(:lvar, :wakeup_threads),
            s(:send,
              s(:lvar, :th), :run)),
          s(:self))),
      s(:def, :sync_synchronize,
        s(:args,
          s(:optarg, :mode,
            s(:const, nil, :EX))),
        s(:block,
          s(:send,
            s(:const, nil, :Thread), :handle_interrupt,
            s(:hash,
              s(:pair,
                s(:const, nil, :StandardError),
                s(:sym, :on_blocking)))),
          s(:args),
          s(:begin,
            s(:send, nil, :sync_lock,
              s(:lvar, :mode)),
            s(:kwbegin,
              s(:ensure,
                s(:yield),
                s(:send, nil, :sync_unlock)))))),
      s(:send, nil, :attr_accessor,
        s(:sym, :sync_mode)),
      s(:send, nil, :attr_accessor,
        s(:sym, :sync_waiting)),
      s(:send, nil, :attr_accessor,
        s(:sym, :sync_upgrade_waiting)),
      s(:send, nil, :attr_accessor,
        s(:sym, :sync_sh_locker)),
      s(:send, nil, :attr_accessor,
        s(:sym, :sync_ex_locker)),
      s(:send, nil, :attr_accessor,
        s(:sym, :sync_ex_count)),
      s(:def, :sync_inspect,
        s(:args),
        s(:begin,
          s(:lvasgn, :sync_iv,
            s(:send,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send, nil, :instance_variables), :select),
                    s(:args,
                      s(:arg, :iv)),
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^@sync_"),
                        s(:regopt)),
                      s(:send,
                        s(:lvar, :iv), :id2name))), :collect),
                s(:args,
                  s(:arg, :iv)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :iv), :id2name), :+,
                    s(:str, "=")), :+,
                  s(:send,
                    s(:send, nil, :instance_eval,
                      s(:send,
                        s(:lvar, :iv), :id2name)), :inspect))), :join,
              s(:str, ","))),
          s(:send, nil, :print,
            s(:dstr,
              s(:str, "<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, ".extend Sync_m: "),
              s(:begin,
                s(:send, nil, :inspect)),
              s(:str, ", <Sync_m: "),
              s(:begin,
                s(:lvar, :sync_iv)),
              s(:str, ">"))))),
      s(:send, nil, :private),
      s(:def, :sync_initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@sync_mode,
            s(:const, nil, :UN)),
          s(:ivasgn, :@sync_waiting,
            s(:array)),
          s(:ivasgn, :@sync_upgrade_waiting,
            s(:array)),
          s(:ivasgn, :@sync_sh_locker,
            s(:send,
              s(:const, nil, :Hash), :new)),
          s(:ivasgn, :@sync_ex_locker,
            s(:nil)),
          s(:ivasgn, :@sync_ex_count,
            s(:int, 0)),
          s(:ivasgn, :@sync_mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)))),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:zsuper),
          s(:send, nil, :sync_initialize))),
      s(:def, :sync_try_lock_sub,
        s(:args,
          s(:arg, :m)),
        s(:begin,
          s(:case,
            s(:lvar, :m),
            s(:when,
              s(:const, nil, :SH),
              s(:case,
                s(:send, nil, :sync_mode),
                s(:when,
                  s(:const, nil, :UN),
                  s(:begin,
                    s(:send,
                      s(:self), :sync_mode=,
                      s(:lvar, :m)),
                    s(:send,
                      s(:send, nil, :sync_sh_locker), :[]=,
                      s(:send,
                        s(:const, nil, :Thread), :current),
                      s(:int, 1)),
                    s(:lvasgn, :ret,
                      s(:true)))),
                s(:when,
                  s(:const, nil, :SH),
                  s(:begin,
                    s(:if,
                      s(:lvasgn, :count,
                        s(:send,
                          s(:send, nil, :sync_sh_locker), :[],
                          s(:send,
                            s(:const, nil, :Thread), :current))), nil,
                      s(:lvasgn, :count,
                        s(:int, 0))),
                    s(:send,
                      s(:send, nil, :sync_sh_locker), :[]=,
                      s(:send,
                        s(:const, nil, :Thread), :current),
                      s(:send,
                        s(:lvar, :count), :+,
                        s(:int, 1))),
                    s(:lvasgn, :ret,
                      s(:true)))),
                s(:when,
                  s(:const, nil, :EX),
                  s(:if,
                    s(:send,
                      s(:send, nil, :sync_ex_locker), :==,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:begin,
                      s(:send,
                        s(:self), :sync_ex_count=,
                        s(:send,
                          s(:send, nil, :sync_ex_count), :+,
                          s(:int, 1))),
                      s(:lvasgn, :ret,
                        s(:true))),
                    s(:lvasgn, :ret,
                      s(:false)))), nil)),
            s(:when,
              s(:const, nil, :EX),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send, nil, :sync_mode), :==,
                    s(:const, nil, :UN)),
                  s(:and,
                    s(:and,
                      s(:send,
                        s(:send, nil, :sync_mode), :==,
                        s(:const, nil, :SH)),
                      s(:send,
                        s(:send,
                          s(:send, nil, :sync_sh_locker), :size), :==,
                        s(:int, 1))),
                    s(:send,
                      s(:send, nil, :sync_sh_locker), :include?,
                      s(:send,
                        s(:const, nil, :Thread), :current)))),
                s(:begin,
                  s(:send,
                    s(:self), :sync_mode=,
                    s(:lvar, :m)),
                  s(:send,
                    s(:self), :sync_ex_locker=,
                    s(:send,
                      s(:const, nil, :Thread), :current)),
                  s(:send,
                    s(:self), :sync_ex_count=,
                    s(:int, 1)),
                  s(:lvasgn, :ret,
                    s(:true))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send, nil, :sync_mode), :==,
                      s(:const, nil, :EX)),
                    s(:send,
                      s(:send, nil, :sync_ex_locker), :==,
                      s(:send,
                        s(:const, nil, :Thread), :current))),
                  s(:begin,
                    s(:send,
                      s(:self), :sync_ex_count=,
                      s(:send,
                        s(:send, nil, :sync_ex_count), :+,
                        s(:int, 1))),
                    s(:lvasgn, :ret,
                      s(:true))),
                  s(:lvasgn, :ret,
                    s(:false))))),
            s(:send,
              s(:const,
                s(:const, nil, :Err), :LockModeFailer), :Fail,
              s(:send, nil, :mode))),
          s(:return,
            s(:lvar, :ret)))))),
  s(:casgn, nil, :Synchronizer_m,
    s(:const, nil, :Sync_m)),
  s(:class,
    s(:const, nil, :Sync), nil,
    s(:send, nil, :include,
      s(:const, nil, :Sync_m))),
  s(:casgn, nil, :Synchronizer,
    s(:const, nil, :Sync)))
