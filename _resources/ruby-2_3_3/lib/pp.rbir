s(:begin,
  s(:send, nil, :require,
    s(:str, "prettyprint")),
  s(:module,
    s(:const, nil, :Kernel),
    s(:begin,
      s(:def, :pretty_inspect,
        s(:args),
        s(:send,
          s(:const, nil, :PP), :pp,
          s(:self),
          s(:send,
            s(:str, ""), :dup))),
      s(:send, nil, :private),
      s(:def, :pp,
        s(:args,
          s(:restarg, :objs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :objs), :each),
            s(:args,
              s(:arg, :obj)),
            s(:send,
              s(:const, nil, :PP), :pp,
              s(:lvar, :obj))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :objs), :size), :<=,
              s(:int, 1)),
            s(:send,
              s(:lvar, :objs), :first),
            s(:lvar, :objs)))),
      s(:send, nil, :module_function,
        s(:sym, :pp)))),
  s(:class,
    s(:const, nil, :PP),
    s(:const, nil, :PrettyPrint),
    s(:begin,
      s(:defs,
        s(:const, nil, :PP), :pp,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :out,
            s(:gvar, :$>)),
          s(:optarg, :width,
            s(:int, 79))),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :PP), :new,
              s(:lvar, :out),
              s(:lvar, :width))),
          s(:block,
            s(:send,
              s(:lvar, :q), :guard_inspect_key),
            s(:args),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :obj))),
          s(:send,
            s(:lvar, :q), :flush),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "\n")))),
      s(:defs,
        s(:const, nil, :PP), :singleline_pp,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :out,
            s(:gvar, :$>))),
        s(:begin,
          s(:lvasgn, :q,
            s(:send,
              s(:const, nil, :SingleLine), :new,
              s(:lvar, :out))),
          s(:block,
            s(:send,
              s(:lvar, :q), :guard_inspect_key),
            s(:args),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :obj))),
          s(:send,
            s(:lvar, :q), :flush),
          s(:lvar, :out))),
      s(:defs,
        s(:const, nil, :PP), :mcall,
        s(:args,
          s(:arg, :obj),
          s(:arg, :mod),
          s(:arg, :meth),
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :mod), :instance_method,
              s(:lvar, :meth)), :bind,
            s(:lvar, :obj)), :call,
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:ivasgn, :@sharing_detection,
        s(:false)),
      s(:sclass,
        s(:self),
        s(:send, nil, :attr_accessor,
          s(:sym, :sharing_detection))),
      s(:module,
        s(:const, nil, :PPMethods),
        s(:begin,
          s(:def, :guard_inspect_key,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :__recursive_key__)), :==,
                  s(:nil)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[]=,
                  s(:sym, :__recursive_key__),
                  s(:send,
                    s(:hash), :taint)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[],
                      s(:sym, :__recursive_key__)), :[],
                    s(:sym, :inspect)), :==,
                  s(:nil)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :__recursive_key__)), :[]=,
                  s(:sym, :inspect),
                  s(:send,
                    s(:hash), :taint)), nil),
              s(:lvasgn, :save,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :__recursive_key__)), :[],
                  s(:sym, :inspect))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[],
                        s(:sym, :__recursive_key__)), :[]=,
                      s(:sym, :inspect),
                      s(:send,
                        s(:hash), :taint)),
                    s(:yield)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :current), :[],
                      s(:sym, :__recursive_key__)), :[]=,
                    s(:sym, :inspect),
                    s(:lvar, :save)))))),
          s(:def, :check_inspect_key,
            s(:args,
              s(:arg, :id)),
            s(:and,
              s(:and,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:sym, :__recursive_key__)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :__recursive_key__)), :[],
                  s(:sym, :inspect))),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:sym, :__recursive_key__)), :[],
                  s(:sym, :inspect)), :include?,
                s(:lvar, :id)))),
          s(:def, :push_inspect_key,
            s(:args,
              s(:arg, :id)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:sym, :__recursive_key__)), :[],
                s(:sym, :inspect)), :[]=,
              s(:lvar, :id),
              s(:true))),
          s(:def, :pop_inspect_key,
            s(:args,
              s(:arg, :id)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[],
                  s(:sym, :__recursive_key__)), :[],
                s(:sym, :inspect)), :delete,
              s(:lvar, :id))),
          s(:def, :pp,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:lvasgn, :id,
                s(:send,
                  s(:lvar, :obj), :object_id)),
              s(:if,
                s(:send, nil, :check_inspect_key,
                  s(:lvar, :id)),
                s(:begin,
                  s(:block,
                    s(:send, nil, :group),
                    s(:args),
                    s(:send,
                      s(:lvar, :obj), :pretty_print_cycle,
                      s(:self))),
                  s(:return)), nil),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send, nil, :push_inspect_key,
                      s(:lvar, :id)),
                    s(:block,
                      s(:send, nil, :group),
                      s(:args),
                      s(:send,
                        s(:lvar, :obj), :pretty_print,
                        s(:self)))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :PP), :sharing_detection), nil,
                    s(:send, nil, :pop_inspect_key,
                      s(:lvar, :id))))))),
          s(:def, :object_group,
            s(:args,
              s(:arg, :obj),
              s(:blockarg, :block)),
            s(:send, nil, :group,
              s(:int, 1),
              s(:send,
                s(:str, "#<"), :+,
                s(:send,
                  s(:send,
                    s(:lvar, :obj), :class), :name)),
              s(:str, ">"),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :object_address_group,
            s(:args,
              s(:arg, :obj),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :str,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Kernel), :instance_method,
                      s(:sym, :to_s)), :bind,
                    s(:lvar, :obj)), :call)),
              s(:send,
                s(:lvar, :str), :chomp!,
                s(:str, ">")),
              s(:send, nil, :group,
                s(:int, 1),
                s(:lvar, :str),
                s(:str, ">"),
                s(:block_pass,
                  s(:lvar, :block))))),
          s(:def, :comma_breakable,
            s(:args),
            s(:begin,
              s(:send, nil, :text,
                s(:str, ",")),
              s(:send, nil, :breakable))),
          s(:def, :seplist,
            s(:args,
              s(:arg, :list),
              s(:optarg, :sep,
                s(:nil)),
              s(:optarg, :iter_method,
                s(:sym, :each))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :sep),
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:send, nil, :comma_breakable))),
              s(:lvasgn, :first,
                s(:true)),
              s(:block,
                s(:send,
                  s(:lvar, :list), :__send__,
                  s(:lvar, :iter_method)),
                s(:args,
                  s(:restarg, :v)),
                s(:begin,
                  s(:if,
                    s(:lvar, :first),
                    s(:lvasgn, :first,
                      s(:false)),
                    s(:send,
                      s(:lvar, :sep), :call)),
                  s(:yield,
                    s(:splat,
                      s(:lvar, :v))))))),
          s(:def, :pp_object,
            s(:args,
              s(:arg, :obj)),
            s(:block,
              s(:send, nil, :object_address_group,
                s(:lvar, :obj)),
              s(:args),
              s(:block,
                s(:send, nil, :seplist,
                  s(:send,
                    s(:lvar, :obj), :pretty_print_instance_variables),
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args),
                    s(:send, nil, :text,
                      s(:str, ",")))),
                s(:args,
                  s(:arg, :v)),
                s(:begin,
                  s(:send, nil, :breakable),
                  s(:if,
                    s(:send,
                      s(:const, nil, :Symbol), :===,
                      s(:lvar, :v)),
                    s(:lvasgn, :v,
                      s(:send,
                        s(:lvar, :v), :to_s)), nil),
                  s(:send, nil, :text,
                    s(:lvar, :v)),
                  s(:send, nil, :text,
                    s(:str, "=")),
                  s(:block,
                    s(:send, nil, :group,
                      s(:int, 1)),
                    s(:args),
                    s(:begin,
                      s(:send, nil, :breakable,
                        s(:str, "")),
                      s(:send, nil, :pp,
                        s(:send,
                          s(:lvar, :obj), :instance_eval,
                          s(:lvar, :v))))))))),
          s(:def, :pp_hash,
            s(:args,
              s(:arg, :obj)),
            s(:block,
              s(:send, nil, :group,
                s(:int, 1),
                s(:str, "{"),
                s(:str, "}")),
              s(:args),
              s(:block,
                s(:send, nil, :seplist,
                  s(:lvar, :obj),
                  s(:nil),
                  s(:sym, :each_pair)),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:block,
                  s(:send, nil, :group),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :pp,
                      s(:lvar, :k)),
                    s(:send, nil, :text,
                      s(:str, "=>")),
                    s(:block,
                      s(:send, nil, :group,
                        s(:int, 1)),
                      s(:args),
                      s(:begin,
                        s(:send, nil, :breakable,
                          s(:str, "")),
                        s(:send, nil, :pp,
                          s(:lvar, :v))))))))))),
      s(:send, nil, :include,
        s(:const, nil, :PPMethods)),
      s(:class,
        s(:const, nil, :SingleLine),
        s(:const,
          s(:const, nil, :PrettyPrint), :SingleLine),
        s(:send, nil, :include,
          s(:const, nil, :PPMethods))),
      s(:module,
        s(:const, nil, :ObjectMixin),
        s(:begin,
          s(:def, :pretty_print,
            s(:args,
              s(:arg, :q)),
            s(:begin,
              s(:lvasgn, :method_method,
                s(:send,
                  s(:send,
                    s(:const, nil, :Object), :instance_method,
                    s(:sym, :method)), :bind,
                  s(:self))),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :inspect_method,
                    s(:send,
                      s(:lvar, :method_method), :call,
                      s(:sym, :inspect))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :NameError)), nil, nil), nil)),
              s(:if,
                s(:and,
                  s(:lvar, :inspect_method),
                  s(:send,
                    s(:regexp,
                      s(:str, "\\(Kernel\\)#"),
                      s(:regopt)), :!~,
                    s(:send,
                      s(:lvar, :inspect_method), :inspect))),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:send,
                    s(:self), :inspect)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :inspect_method), :!),
                    s(:send,
                      s(:self), :respond_to?,
                      s(:sym, :inspect))),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:send,
                      s(:self), :inspect)),
                  s(:send,
                    s(:lvar, :q), :pp_object,
                    s(:self)))))),
          s(:def, :pretty_print_cycle,
            s(:args,
              s(:arg, :q)),
            s(:block,
              s(:send,
                s(:lvar, :q), :object_address_group,
                s(:self)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, "..."))))),
          s(:def, :pretty_print_instance_variables,
            s(:args),
            s(:send,
              s(:send, nil, :instance_variables), :sort)),
          s(:def, :pretty_print_inspect,
            s(:args),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\(PP::ObjectMixin\\)#"),
                    s(:regopt)),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Object), :instance_method,
                          s(:sym, :method)), :bind,
                        s(:self)), :call,
                      s(:sym, :pretty_print)), :inspect)),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "pretty_print is not overridden for "),
                    s(:begin,
                      s(:send,
                        s(:self), :class)))), nil),
              s(:send,
                s(:const, nil, :PP), :singleline_pp,
                s(:self),
                s(:send,
                  s(:str, ""), :dup)))))))),
  s(:class,
    s(:const, nil, :Array), nil,
    s(:begin,
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 1),
            s(:str, "["),
            s(:str, "]")),
          s(:args),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:self)),
            s(:args,
              s(:arg, :v)),
            s(:send,
              s(:lvar, :q), :pp,
              s(:lvar, :v))))),
      s(:def, :pretty_print_cycle,
        s(:args,
          s(:arg, :q)),
        s(:send,
          s(:lvar, :q), :text,
          s(:if,
            s(:send, nil, :empty?),
            s(:str, "[]"),
            s(:str, "[...]")))))),
  s(:class,
    s(:const, nil, :Hash), nil,
    s(:begin,
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:send,
          s(:lvar, :q), :pp_hash,
          s(:self))),
      s(:def, :pretty_print_cycle,
        s(:args,
          s(:arg, :q)),
        s(:send,
          s(:lvar, :q), :text,
          s(:if,
            s(:send, nil, :empty?),
            s(:str, "{}"),
            s(:str, "{...}")))))),
  s(:sclass,
    s(:const, nil, :ENV),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:begin,
        s(:lvasgn, :h,
          s(:hash)),
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :ENV), :keys), :sort), :each),
          s(:args,
            s(:arg, :k)),
          s(:send,
            s(:lvar, :h), :[]=,
            s(:lvar, :k),
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:lvar, :k)))),
        s(:send,
          s(:lvar, :q), :pp_hash,
          s(:lvar, :h))))),
  s(:class,
    s(:const, nil, :Struct), nil,
    s(:begin,
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 1),
            s(:send, nil, :sprintf,
              s(:str, "#<struct %s"),
              s(:send,
                s(:send,
                  s(:const, nil, :PP), :mcall,
                  s(:self),
                  s(:const, nil, :Kernel),
                  s(:sym, :class)), :name)),
            s(:str, ">")),
          s(:args),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:send,
                s(:const, nil, :PP), :mcall,
                s(:self),
                s(:const, nil, :Struct),
                s(:sym, :members)),
              s(:block,
                s(:send, nil, :lambda),
                s(:args),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, ",")))),
            s(:args,
              s(:arg, :member)),
            s(:begin,
              s(:send,
                s(:lvar, :q), :breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:send,
                  s(:lvar, :member), :to_s)),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "=")),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group,
                  s(:int, 1)),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :q), :breakable,
                    s(:str, "")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:send,
                      s(:self), :[],
                      s(:lvar, :member))))))))),
      s(:def, :pretty_print_cycle,
        s(:args,
          s(:arg, :q)),
        s(:send,
          s(:lvar, :q), :text,
          s(:send, nil, :sprintf,
            s(:str, "#<struct %s:...>"),
            s(:send,
              s(:send,
                s(:const, nil, :PP), :mcall,
                s(:self),
                s(:const, nil, :Kernel),
                s(:sym, :class)), :name)))))),
  s(:class,
    s(:const, nil, :Range), nil,
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:begin,
        s(:send,
          s(:lvar, :q), :pp,
          s(:send,
            s(:self), :begin)),
        s(:send,
          s(:lvar, :q), :breakable,
          s(:str, "")),
        s(:send,
          s(:lvar, :q), :text,
          s(:if,
            s(:send,
              s(:self), :exclude_end?),
            s(:str, "..."),
            s(:str, ".."))),
        s(:send,
          s(:lvar, :q), :breakable,
          s(:str, "")),
        s(:send,
          s(:lvar, :q), :pp,
          s(:send,
            s(:self), :end))))),
  s(:class,
    s(:const, nil, :File),
    s(:const, nil, :IO),
    s(:class,
      s(:const, nil, :Stat), nil,
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "etc.so")),
          s(:block,
            s(:send,
              s(:lvar, :q), :object_group,
              s(:self)),
            s(:args),
            s(:begin,
              s(:send,
                s(:lvar, :q), :breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:send, nil, :sprintf,
                  s(:str, "dev=0x%x"),
                  s(:send,
                    s(:self), :dev))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "ino=")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:send,
                  s(:self), :ino)),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:self), :mode)),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:send, nil, :sprintf,
                      s(:str, "mode=0%o"),
                      s(:lvar, :m))),
                  s(:send,
                    s(:lvar, :q), :breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:send, nil, :sprintf,
                      s(:str, "(%s %c%c%c%c%c%c%c%c%c)"),
                      s(:send,
                        s(:self), :ftype),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 256)), :==,
                            s(:int, 0)),
                          s(:str, "-"),
                          s(:str, "r"))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 128)), :==,
                            s(:int, 0)),
                          s(:str, "-"),
                          s(:str, "w"))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 64)), :==,
                            s(:int, 0)),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :&,
                                  s(:int, 2048)), :==,
                                s(:int, 0)),
                              s(:str, "-"),
                              s(:str, "S"))),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :&,
                                  s(:int, 2048)), :==,
                                s(:int, 0)),
                              s(:str, "x"),
                              s(:str, "s"))))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 32)), :==,
                            s(:int, 0)),
                          s(:str, "-"),
                          s(:str, "r"))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 16)), :==,
                            s(:int, 0)),
                          s(:str, "-"),
                          s(:str, "w"))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 8)), :==,
                            s(:int, 0)),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :&,
                                  s(:int, 1024)), :==,
                                s(:int, 0)),
                              s(:str, "-"),
                              s(:str, "S"))),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :&,
                                  s(:int, 1024)), :==,
                                s(:int, 0)),
                              s(:str, "x"),
                              s(:str, "s"))))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 4)), :==,
                            s(:int, 0)),
                          s(:str, "-"),
                          s(:str, "r"))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 2)), :==,
                            s(:int, 0)),
                          s(:str, "-"),
                          s(:str, "w"))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :m), :&,
                              s(:int, 1)), :==,
                            s(:int, 0)),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :&,
                                  s(:int, 512)), :==,
                                s(:int, 0)),
                              s(:str, "-"),
                              s(:str, "T"))),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :m), :&,
                                  s(:int, 512)), :==,
                                s(:int, 0)),
                              s(:str, "x"),
                              s(:str, "t"))))))))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "nlink=")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:send,
                  s(:self), :nlink)),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "uid=")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:send,
                      s(:self), :uid)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :pw,
                        s(:send,
                          s(:const, nil, :Etc), :getpwuid,
                          s(:send,
                            s(:self), :uid))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ArgumentError)), nil, nil), nil)),
                  s(:if,
                    s(:lvar, :pw),
                    s(:begin,
                      s(:send,
                        s(:lvar, :q), :breakable),
                      s(:send,
                        s(:lvar, :q), :text,
                        s(:dstr,
                          s(:str, "("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :pw), :name)),
                          s(:str, ")")))), nil))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "gid=")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:send,
                      s(:self), :gid)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :gr,
                        s(:send,
                          s(:const, nil, :Etc), :getgrgid,
                          s(:send,
                            s(:self), :gid))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ArgumentError)), nil, nil), nil)),
                  s(:if,
                    s(:lvar, :gr),
                    s(:begin,
                      s(:send,
                        s(:lvar, :q), :breakable),
                      s(:send,
                        s(:lvar, :q), :text,
                        s(:dstr,
                          s(:str, "("),
                          s(:begin,
                            s(:send,
                              s(:lvar, :gr), :name)),
                          s(:str, ")")))), nil))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:send, nil, :sprintf,
                      s(:str, "rdev=0x%x"),
                      s(:send,
                        s(:self), :rdev))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:self), :rdev_major),
                      s(:send,
                        s(:self), :rdev_minor)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :q), :breakable),
                      s(:send,
                        s(:lvar, :q), :text,
                        s(:send, nil, :sprintf,
                          s(:str, "(%d, %d)"),
                          s(:send,
                            s(:self), :rdev_major),
                          s(:send,
                            s(:self), :rdev_minor)))), nil))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "size=")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:send,
                  s(:self), :size)),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "blksize=")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:send,
                  s(:self), :blksize)),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, "blocks=")),
              s(:send,
                s(:lvar, :q), :pp,
                s(:send,
                  s(:self), :blocks)),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:lvasgn, :t,
                    s(:send,
                      s(:self), :atime)),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "atime=")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:lvar, :t)),
                  s(:send,
                    s(:lvar, :q), :breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :t), :tv_sec)),
                      s(:str, ")"))))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:lvasgn, :t,
                    s(:send,
                      s(:self), :mtime)),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "mtime=")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:lvar, :t)),
                  s(:send,
                    s(:lvar, :q), :breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :t), :tv_sec)),
                      s(:str, ")"))))),
              s(:send,
                s(:lvar, :q), :comma_breakable),
              s(:block,
                s(:send,
                  s(:lvar, :q), :group),
                s(:args),
                s(:begin,
                  s(:lvasgn, :t,
                    s(:send,
                      s(:self), :ctime)),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, "ctime=")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:lvar, :t)),
                  s(:send,
                    s(:lvar, :q), :breakable),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :t), :tv_sec)),
                      s(:str, ")"))))))))))),
  s(:class,
    s(:const, nil, :MatchData), nil,
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:begin,
        s(:lvasgn, :nc,
          s(:array)),
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:self), :regexp), :named_captures), :each),
          s(:args,
            s(:arg, :name),
            s(:arg, :indexes)),
          s(:block,
            s(:send,
              s(:lvar, :indexes), :each),
            s(:args,
              s(:arg, :i)),
            s(:send,
              s(:lvar, :nc), :[]=,
              s(:lvar, :i),
              s(:lvar, :name)))),
        s(:block,
          s(:send,
            s(:lvar, :q), :object_group,
            s(:self)),
          s(:args),
          s(:begin,
            s(:send,
              s(:lvar, :q), :breakable),
            s(:block,
              s(:send,
                s(:lvar, :q), :seplist,
                s(:erange,
                  s(:int, 0),
                  s(:send,
                    s(:self), :size)),
                s(:block,
                  s(:send, nil, :lambda),
                  s(:args),
                  s(:send,
                    s(:lvar, :q), :breakable))),
              s(:args,
                s(:arg, :i)),
              s(:if,
                s(:send,
                  s(:lvar, :i), :==,
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :q), :pp,
                  s(:send,
                    s(:self), :[],
                    s(:lvar, :i))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :nc), :[],
                      s(:lvar, :i)),
                    s(:send,
                      s(:lvar, :q), :text,
                      s(:send,
                        s(:lvar, :nc), :[],
                        s(:lvar, :i))),
                    s(:send,
                      s(:lvar, :q), :pp,
                      s(:lvar, :i))),
                  s(:send,
                    s(:lvar, :q), :text,
                    s(:str, ":")),
                  s(:send,
                    s(:lvar, :q), :pp,
                    s(:send,
                      s(:self), :[],
                      s(:lvar, :i))))))))))),
  s(:class,
    s(:const, nil, :Object),
    s(:const, nil, :BasicObject),
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :PP), :ObjectMixin))),
  s(:block,
    s(:send,
      s(:array,
        s(:const, nil, :Numeric),
        s(:const, nil, :Symbol),
        s(:const, nil, :FalseClass),
        s(:const, nil, :TrueClass),
        s(:const, nil, :NilClass),
        s(:const, nil, :Module)), :each),
    s(:args,
      s(:arg, :c)),
    s(:block,
      s(:send,
        s(:lvar, :c), :class_eval),
      s(:args),
      s(:def, :pretty_print_cycle,
        s(:args,
          s(:arg, :q)),
        s(:send,
          s(:lvar, :q), :text,
          s(:send, nil, :inspect))))),
  s(:block,
    s(:send,
      s(:array,
        s(:const, nil, :Numeric),
        s(:const, nil, :FalseClass),
        s(:const, nil, :TrueClass),
        s(:const, nil, :Module)), :each),
    s(:args,
      s(:arg, :c)),
    s(:block,
      s(:send,
        s(:lvar, :c), :class_eval),
      s(:args),
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:send,
          s(:lvar, :q), :text,
          s(:send, nil, :inspect))))))
