s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:module,
    s(:const,
      s(:const, nil, :Gem), :VersionOption),
    s(:begin,
      s(:def, :add_platform_option,
        s(:args,
          s(:optarg, :task,
            s(:send, nil, :command)),
          s(:restarg, :wrap)),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :OptionParser), :accept,
              s(:const,
                s(:const, nil, :Gem), :Platform)),
            s(:args,
              s(:arg, :value)),
            s(:if,
              s(:send,
                s(:lvar, :value), :==,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY)),
              s(:lvar, :value),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :new,
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--platform PLATFORM"),
              s(:const,
                s(:const, nil, :Gem), :Platform),
              s(:dstr,
                s(:str, "Specify the platform of gem to "),
                s(:begin,
                  s(:lvar, :task))),
              s(:splat,
                s(:lvar, :wrap))),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :added_platform)), nil,
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :platforms=,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Platform), :RUBY))),
                  s(:send,
                    s(:lvar, :options), :[]=,
                    s(:sym, :added_platform),
                    s(:true)))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :platforms), :include?,
                  s(:lvar, :value)), nil,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :platforms), :<<,
                  s(:lvar, :value))))))),
      s(:def, :add_prerelease_option,
        s(:args,
          s(:restarg, :wrap)),
        s(:block,
          s(:send, nil, :add_option,
            s(:str, "--[no-]prerelease"),
            s(:str, "Allow prerelease versions of a gem"),
            s(:splat,
              s(:lvar, :wrap))),
          s(:args,
            s(:arg, :value),
            s(:arg, :options)),
          s(:begin,
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :prerelease),
              s(:lvar, :value)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :explicit_prerelease),
              s(:true))))),
      s(:def, :add_version_option,
        s(:args,
          s(:optarg, :task,
            s(:send, nil, :command)),
          s(:restarg, :wrap)),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :OptionParser), :accept,
              s(:const,
                s(:const, nil, :Gem), :Requirement)),
            s(:args,
              s(:arg, :value)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:splat,
                s(:send,
                  s(:lvar, :value), :split,
                  s(:regexp,
                    s(:str, "\\s*,\\s*"),
                    s(:regopt)))))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-v"),
              s(:str, "--version VERSION"),
              s(:const,
                s(:const, nil, :Gem), :Requirement),
              s(:dstr,
                s(:str, "Specify version of gem to "),
                s(:begin,
                  s(:lvar, :task))),
              s(:splat,
                s(:lvar, :wrap))),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :version),
                s(:lvar, :value)),
              s(:lvasgn, :explicit_prerelease_set,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :explicit_prerelease)), :nil?), :!)),
              s(:if,
                s(:lvar, :explicit_prerelease_set), nil,
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :explicit_prerelease),
                  s(:false))),
              s(:if,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :explicit_prerelease)), nil,
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :prerelease),
                  s(:send,
                    s(:lvar, :value), :prerelease?))))))))))
