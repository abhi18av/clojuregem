s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:send, nil, :require,
    s(:str, "rubygems/request")),
  s(:send, nil, :require,
    s(:str, "rubygems/uri_formatter")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:send, nil, :require,
    s(:str, "rubygems/request/connection_pools")),
  s(:send, nil, :require,
    s(:str, "resolv")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RemoteFetcher), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:class,
        s(:const, nil, :FetchError),
        s(:const,
          s(:const, nil, :Gem), :Exception),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :uri)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :message),
              s(:arg, :uri)),
            s(:begin,
              s(:super,
                s(:lvar, :message)),
              s(:ivasgn, :@uri,
                s(:lvar, :uri)))),
          s(:def, :to_s,
            s(:args),
            s(:dstr,
              s(:begin,
                s(:zsuper)),
              s(:str, " ("),
              s(:begin,
                s(:send, nil, :uri)),
              s(:str, ")"))))),
      s(:class,
        s(:const, nil, :UnknownHostError),
        s(:const, nil, :FetchError), nil),
      s(:ivasgn, :@fetcher,
        s(:nil)),
      s(:defs,
        s(:self), :fetcher,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@fetcher),
          s(:send,
            s(:self), :new,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :[],
              s(:sym, :http_proxy))))),
      s(:send, nil, :attr_accessor,
        s(:sym, :headers)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :proxy,
            s(:nil)),
          s(:optarg, :dns,
            s(:send,
              s(:const,
                s(:const, nil, :Resolv), :DNS), :new)),
          s(:optarg, :headers,
            s(:hash))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "net/http")),
          s(:send, nil, :require,
            s(:str, "stringio")),
          s(:send, nil, :require,
            s(:str, "time")),
          s(:send, nil, :require,
            s(:str, "uri")),
          s(:send,
            s(:const, nil, :Socket), :do_not_reverse_lookup=,
            s(:true)),
          s(:ivasgn, :@proxy,
            s(:lvar, :proxy)),
          s(:ivasgn, :@pools,
            s(:hash)),
          s(:ivasgn, :@pool_lock,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:ivasgn, :@cert_files,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Request), :get_cert_files)),
          s(:ivasgn, :@dns,
            s(:lvar, :dns)),
          s(:ivasgn, :@headers,
            s(:lvar, :headers)))),
      s(:def, :api_endpoint,
        s(:args,
          s(:arg, :uri)),
        s(:begin,
          s(:lvasgn, :host,
            s(:send,
              s(:lvar, :uri), :host)),
          s(:kwbegin,
            s(:rescue,
              s(:lvasgn, :res,
                s(:send,
                  s(:ivar, :@dns), :getresource,
                  s(:dstr,
                    s(:str, "_rubygems._tcp."),
                    s(:begin,
                      s(:lvar, :host))),
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Resolv), :DNS), :Resource), :IN), :SRV))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Resolv), :ResolvError)),
                s(:lvasgn, :e),
                s(:begin,
                  s(:send, nil, :verbose,
                    s(:dstr,
                      s(:str, "Getting SRV record failed: "),
                      s(:begin,
                        s(:lvar, :e)))),
                  s(:lvar, :uri))),
              s(:begin,
                s(:lvasgn, :target,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :res), :target), :to_s), :strip)),
                s(:if,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\."),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :quote,
                          s(:lvar, :host))),
                      s(:str, "\\z"),
                      s(:regopt)), :=~,
                    s(:lvar, :target)),
                  s(:return,
                    s(:send,
                      s(:const, nil, :URI), :parse,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :uri), :scheme)),
                        s(:str, "://"),
                        s(:begin,
                          s(:lvar, :target)),
                        s(:begin,
                          s(:send,
                            s(:lvar, :uri), :path))))), nil),
                s(:lvar, :uri)))))),
      s(:def, :download_to_cache,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :found),
              s(:lvasgn, :_)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :SpecFetcher), :fetcher), :spec_for_dependency,
              s(:lvar, :dependency))),
          s(:if,
            s(:send,
              s(:lvar, :found), :empty?),
            s(:return), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :spec),
              s(:lvasgn, :source)),
            s(:block,
              s(:send,
                s(:lvar, :found), :max_by),
              s(:args,
                s(:mlhs,
                  s(:arg, :s),
                  s(:arg, :_))),
              s(:send,
                s(:lvar, :s), :version))),
          s(:send, nil, :download,
            s(:lvar, :spec),
            s(:send,
              s(:send,
                s(:lvar, :source), :uri), :to_s)))),
      s(:def, :download,
        s(:args,
          s(:arg, :spec),
          s(:arg, :source_uri),
          s(:optarg, :install_dir,
            s(:send,
              s(:const, nil, :Gem), :dir))),
        s(:begin,
          s(:lvasgn, :cache_dir,
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Dir), :pwd), :==,
                s(:lvar, :install_dir)),
              s(:lvar, :install_dir),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :writable?,
                  s(:lvar, :install_dir)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :install_dir),
                  s(:str, "cache")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :Gem), :user_dir),
                  s(:str, "cache"))))),
          s(:lvasgn, :gem_file_name,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:lvar, :spec), :cache_file))),
          s(:lvasgn, :local_gem_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :cache_dir),
              s(:lvar, :gem_file_name))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :cache_dir)), nil,
            s(:rescue,
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:lvar, :cache_dir)),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:if,
            s(:send,
              s(:lvar, :source_uri), :is_a?,
              s(:const,
                s(:const, nil, :URI), :Generic)), nil,
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :source_uri,
                  s(:send,
                    s(:const, nil, :URI), :parse,
                    s(:lvar, :source_uri))),
                s(:resbody, nil, nil,
                  s(:lvasgn, :source_uri,
                    s(:send,
                      s(:const, nil, :URI), :parse,
                      s(:if,
                        s(:send,
                          s(:const, nil, :URI), :const_defined?,
                          s(:sym, :DEFAULT_PARSER)),
                        s(:send,
                          s(:const,
                            s(:const, nil, :URI), :DEFAULT_PARSER), :escape,
                          s(:send,
                            s(:lvar, :source_uri), :to_s)),
                        s(:send,
                          s(:const, nil, :URI), :escape,
                          s(:send,
                            s(:lvar, :source_uri), :to_s)))))), nil))),
          s(:lvasgn, :scheme,
            s(:send,
              s(:lvar, :source_uri), :scheme)),
          s(:if,
            s(:send,
              s(:lvar, :scheme), :=~,
              s(:regexp,
                s(:str, "^[a-z]$"),
                s(:regopt, :i))),
            s(:lvasgn, :scheme,
              s(:nil)), nil),
          s(:case,
            s(:lvar, :scheme),
            s(:when,
              s(:str, "http"),
              s(:str, "https"),
              s(:str, "s3"),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :local_gem_path)), nil,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :verbose,
                        s(:dstr,
                          s(:str, "Downloading gem "),
                          s(:begin,
                            s(:lvar, :gem_file_name)))),
                      s(:lvasgn, :remote_gem_path,
                        s(:send,
                          s(:lvar, :source_uri), :+,
                          s(:dstr,
                            s(:str, "gems/"),
                            s(:begin,
                              s(:lvar, :gem_file_name))))),
                      s(:send,
                        s(:self), :cache_update_path,
                        s(:lvar, :remote_gem_path),
                        s(:lvar, :local_gem_path))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :RemoteFetcher), :FetchError)), nil,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :spec), :original_platform), :==,
                            s(:send,
                              s(:lvar, :spec), :platform)),
                          s(:send, nil, :raise), nil),
                        s(:lvasgn, :alternate_name,
                          s(:dstr,
                            s(:begin,
                              s(:send,
                                s(:lvar, :spec), :original_name)),
                            s(:str, ".gem"))),
                        s(:send, nil, :verbose,
                          s(:dstr,
                            s(:str, "Failed, downloading gem "),
                            s(:begin,
                              s(:lvar, :alternate_name)))),
                        s(:lvasgn, :remote_gem_path,
                          s(:send,
                            s(:lvar, :source_uri), :+,
                            s(:dstr,
                              s(:str, "gems/"),
                              s(:begin,
                                s(:lvar, :alternate_name))))),
                        s(:send,
                          s(:self), :cache_update_path,
                          s(:lvar, :remote_gem_path),
                          s(:lvar, :local_gem_path)))), nil)))),
            s(:when,
              s(:str, "file"),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :path,
                        s(:send,
                          s(:lvar, :source_uri), :path)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:const, nil, :File), :extname,
                            s(:lvar, :path)), :==,
                          s(:str, ".gem")),
                        s(:lvasgn, :path,
                          s(:send,
                            s(:const, nil, :File), :dirname,
                            s(:lvar, :path))), nil),
                      s(:lvasgn, :remote_gem_path,
                        s(:send, nil, :correct_for_windows_path,
                          s(:send,
                            s(:const, nil, :File), :join,
                            s(:lvar, :path),
                            s(:str, "gems"),
                            s(:lvar, :gem_file_name)))),
                      s(:send,
                        s(:const, nil, :FileUtils), :cp,
                        s(:lvar, :remote_gem_path),
                        s(:lvar, :local_gem_path))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EACCES)), nil,
                      s(:lvasgn, :local_gem_path,
                        s(:send,
                          s(:lvar, :source_uri), :to_s))), nil)),
                s(:send, nil, :verbose,
                  s(:dstr,
                    s(:str, "Using local gem "),
                    s(:begin,
                      s(:lvar, :local_gem_path)))))),
            s(:when,
              s(:nil),
              s(:begin,
                s(:lvasgn, :source_path,
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:const, nil, :Gem), :win_platform?),
                        s(:send,
                          s(:lvar, :source_uri), :scheme)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :source_uri), :path), :include?,
                          s(:str, ":")), :!)),
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :source_uri), :scheme)),
                      s(:str, ":"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :source_uri), :path))),
                    s(:send,
                      s(:lvar, :source_uri), :path))),
                s(:lvasgn, :source_path,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :UriFormatter), :new,
                      s(:lvar, :source_path)), :unescape)),
                s(:kwbegin,
                  s(:rescue,
                    s(:if,
                      s(:send,
                        s(:const, nil, :File), :identical?,
                        s(:lvar, :source_path),
                        s(:lvar, :local_gem_path)), nil,
                      s(:send,
                        s(:const, nil, :FileUtils), :cp,
                        s(:lvar, :source_path),
                        s(:lvar, :local_gem_path))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :EACCES)), nil,
                      s(:lvasgn, :local_gem_path,
                        s(:send,
                          s(:lvar, :source_uri), :to_s))), nil)),
                s(:send, nil, :verbose,
                  s(:dstr,
                    s(:str, "Using local gem "),
                    s(:begin,
                      s(:lvar, :local_gem_path)))))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "unsupported URI scheme "),
                s(:begin,
                  s(:send,
                    s(:lvar, :source_uri), :scheme))))),
          s(:lvar, :local_gem_path))),
      s(:def, :fetch_file,
        s(:args,
          s(:arg, :uri),
          s(:restarg, :_)),
        s(:send,
          s(:const, nil, :Gem), :read_binary,
          s(:send, nil, :correct_for_windows_path,
            s(:send,
              s(:lvar, :uri), :path)))),
      s(:def, :fetch_http,
        s(:args,
          s(:arg, :uri),
          s(:optarg, :last_modified,
            s(:nil)),
          s(:optarg, :head,
            s(:false)),
          s(:optarg, :depth,
            s(:int, 0))),
        s(:begin,
          s(:lvasgn, :fetch_type,
            s(:if,
              s(:lvar, :head),
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Head),
              s(:const,
                s(:const,
                  s(:const, nil, :Net), :HTTP), :Get))),
          s(:lvasgn, :response,
            s(:block,
              s(:send, nil, :request,
                s(:lvar, :uri),
                s(:lvar, :fetch_type),
                s(:lvar, :last_modified)),
              s(:args,
                s(:arg, :req)),
              s(:block,
                s(:send,
                  s(:send, nil, :headers), :each),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:send,
                  s(:lvar, :req), :add_field,
                  s(:lvar, :k),
                  s(:lvar, :v))))),
          s(:case,
            s(:lvar, :response),
            s(:when,
              s(:const,
                s(:const, nil, :Net), :HTTPOK),
              s(:const,
                s(:const, nil, :Net), :HTTPNotModified),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :response), :respond_to?,
                    s(:sym, :uri)),
                  s(:send,
                    s(:lvar, :response), :uri=,
                    s(:lvar, :uri)), nil),
                s(:if,
                  s(:lvar, :head),
                  s(:lvar, :response),
                  s(:send,
                    s(:lvar, :response), :body)))),
            s(:when,
              s(:const,
                s(:const, nil, :Net), :HTTPMovedPermanently),
              s(:const,
                s(:const, nil, :Net), :HTTPFound),
              s(:const,
                s(:const, nil, :Net), :HTTPSeeOther),
              s(:const,
                s(:const, nil, :Net), :HTTPTemporaryRedirect),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :depth), :>,
                    s(:int, 10)),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :FetchError), :new,
                      s(:str, "too many redirects"),
                      s(:lvar, :uri))), nil),
                s(:lvasgn, :location,
                  s(:send,
                    s(:const, nil, :URI), :parse,
                    s(:send,
                      s(:lvar, :response), :[],
                      s(:str, "Location")))),
                s(:if,
                  s(:and,
                    s(:send, nil, :https?,
                      s(:lvar, :uri)),
                    s(:send,
                      s(:send, nil, :https?,
                        s(:lvar, :location)), :!)),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :FetchError), :new,
                      s(:dstr,
                        s(:str, "redirecting to non-https resource: "),
                        s(:begin,
                          s(:lvar, :location))),
                      s(:lvar, :uri))), nil),
                s(:send, nil, :fetch_http,
                  s(:lvar, :location),
                  s(:lvar, :last_modified),
                  s(:lvar, :head),
                  s(:send,
                    s(:lvar, :depth), :+,
                    s(:int, 1))))),
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :FetchError), :new,
                s(:dstr,
                  s(:str, "bad response "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :response), :message)),
                  s(:str, " "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :response), :code))),
                s(:lvar, :uri)))))),
      s(:alias,
        s(:sym, :fetch_https),
        s(:sym, :fetch_http)),
      s(:def, :fetch_path,
        s(:args,
          s(:arg, :uri),
          s(:optarg, :mtime,
            s(:nil)),
          s(:optarg, :head,
            s(:false))),
        s(:rescue,
          s(:begin,
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :URI), :Generic), :===,
                s(:lvar, :uri)), nil,
              s(:lvasgn, :uri,
                s(:send,
                  s(:const, nil, :URI), :parse,
                  s(:lvar, :uri)))),
            s(:if,
              s(:lvar, :uri), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "bad uri: "),
                  s(:begin,
                    s(:lvar, :uri))))),
            s(:if,
              s(:send,
                s(:lvar, :uri), :scheme), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "uri scheme is invalid: "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :uri), :scheme), :inspect))))),
            s(:lvasgn, :data,
              s(:send, nil, :send,
                s(:dstr,
                  s(:str, "fetch_"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :uri), :scheme))),
                s(:lvar, :uri),
                s(:lvar, :mtime),
                s(:lvar, :head))),
            s(:if,
              s(:and,
                s(:and,
                  s(:lvar, :data),
                  s(:send,
                    s(:lvar, :head), :!)),
                s(:send,
                  s(:send,
                    s(:lvar, :uri), :to_s), :=~,
                  s(:regexp,
                    s(:str, "\\.gz$"),
                    s(:regopt)))),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :data,
                    s(:send,
                      s(:const, nil, :Gem), :gunzip,
                      s(:lvar, :data))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Zlib), :GzipFile), :Error)), nil,
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :FetchError), :new,
                        s(:str, "server did not return a valid file"),
                        s(:send,
                          s(:lvar, :uri), :to_s)))), nil)), nil),
            s(:lvar, :data)),
          s(:resbody,
            s(:array,
              s(:const, nil, :FetchError)), nil,
            s(:send, nil, :raise)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Timeout), :Error)), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :UnknownHostError), :new,
                s(:str, "timed out"),
                s(:send,
                  s(:lvar, :uri), :to_s)))),
          s(:resbody,
            s(:array,
              s(:const, nil, :IOError),
              s(:const, nil, :SocketError),
              s(:const, nil, :SystemCallError)),
            s(:lvasgn, :e),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :e), :message), :=~,
                s(:regexp,
                  s(:str, "getaddrinfo"),
                  s(:regopt))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :UnknownHostError), :new,
                  s(:str, "no such name"),
                  s(:send,
                    s(:lvar, :uri), :to_s))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :FetchError), :new,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :e), :class)),
                    s(:str, ": "),
                    s(:begin,
                      s(:lvar, :e))),
                  s(:send,
                    s(:lvar, :uri), :to_s))))), nil)),
      s(:def, :fetch_s3,
        s(:args,
          s(:arg, :uri),
          s(:optarg, :mtime,
            s(:nil)),
          s(:optarg, :head,
            s(:false))),
        s(:begin,
          s(:lvasgn, :public_uri,
            s(:send, nil, :sign_s3_url,
              s(:lvar, :uri))),
          s(:send, nil, :fetch_https,
            s(:lvar, :public_uri),
            s(:lvar, :mtime),
            s(:lvar, :head)))),
      s(:def, :cache_update_path,
        s(:args,
          s(:arg, :uri),
          s(:optarg, :path,
            s(:nil)),
          s(:optarg, :update,
            s(:true))),
        s(:begin,
          s(:lvasgn, :mtime,
            s(:rescue,
              s(:and,
                s(:lvar, :path),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :path)), :mtime)),
              s(:resbody, nil, nil,
                s(:nil)), nil)),
          s(:lvasgn, :data,
            s(:send, nil, :fetch_path,
              s(:lvar, :uri),
              s(:lvar, :mtime))),
          s(:if,
            s(:send,
              s(:lvar, :data), :==,
              s(:nil)),
            s(:return,
              s(:send,
                s(:const, nil, :Gem), :read_binary,
                s(:lvar, :path))), nil),
          s(:if,
            s(:and,
              s(:lvar, :update),
              s(:lvar, :path)),
            s(:kwbegin,
              s(:rescue,
                s(:block,
                  s(:send, nil, :open,
                    s(:lvar, :path),
                    s(:str, "wb")),
                  s(:args,
                    s(:arg, :io)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :io), :flock,
                      s(:const,
                        s(:const, nil, :File), :LOCK_EX)),
                    s(:send,
                      s(:lvar, :io), :write,
                      s(:lvar, :data)))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :ENOLCK)), nil,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Thread), :main), :!=,
                      s(:send,
                        s(:const, nil, :Thread), :current)),
                    s(:send, nil, :raise),
                    s(:block,
                      s(:send, nil, :open,
                        s(:lvar, :path),
                        s(:str, "wb")),
                      s(:args,
                        s(:arg, :io)),
                      s(:send,
                        s(:lvar, :io), :write,
                        s(:lvar, :data))))), nil)), nil),
          s(:lvar, :data))),
      s(:def, :fetch_size,
        s(:args,
          s(:arg, :uri)),
        s(:begin,
          s(:lvasgn, :response,
            s(:send, nil, :fetch_path,
              s(:lvar, :uri),
              s(:nil),
              s(:true))),
          s(:send,
            s(:send,
              s(:lvar, :response), :[],
              s(:str, "content-length")), :to_i))),
      s(:def, :correct_for_windows_path,
        s(:args,
          s(:arg, :path)),
        s(:if,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :[],
                    s(:int, 0)), :chr), :==,
                s(:str, "/")),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :[],
                    s(:int, 1)), :chr), :=~,
                s(:regexp,
                  s(:str, "[a-z]"),
                  s(:regopt, :i)))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :path), :[],
                  s(:int, 2)), :chr), :==,
              s(:str, ":"))),
          s(:send,
            s(:lvar, :path), :[],
            s(:irange,
              s(:int, 1),
              s(:int, -1))),
          s(:lvar, :path))),
      s(:def, :request,
        s(:args,
          s(:arg, :uri),
          s(:arg, :request_class),
          s(:optarg, :last_modified,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :proxy,
            s(:send, nil, :proxy_for,
              s(:ivar, :@proxy),
              s(:lvar, :uri))),
          s(:lvasgn, :pool,
            s(:send,
              s(:send, nil, :pools_for,
                s(:lvar, :proxy)), :pool_for,
              s(:lvar, :uri))),
          s(:lvasgn, :request,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Request), :new,
              s(:lvar, :uri),
              s(:lvar, :request_class),
              s(:lvar, :last_modified),
              s(:lvar, :pool))),
          s(:block,
            s(:send,
              s(:lvar, :request), :fetch),
            s(:args,
              s(:arg, :req)),
            s(:if,
              s(:send, nil, :block_given?),
              s(:yield,
                s(:lvar, :req)), nil)))),
      s(:def, :https?,
        s(:args,
          s(:arg, :uri)),
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :uri), :scheme), :downcase), :==,
          s(:str, "https"))),
      s(:def, :close_all,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@pools), :each_value),
          s(:args,
            s(:arg, :pool)),
          s(:send,
            s(:lvar, :pool), :close_all))),
      s(:send, nil, :protected),
      s(:def, :sign_s3_url,
        s(:args,
          s(:arg, :uri),
          s(:optarg, :expiration,
            s(:nil))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "base64")),
          s(:send, nil, :require,
            s(:str, "openssl")),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :uri), :user),
              s(:send,
                s(:lvar, :uri), :password)), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const, nil, :FetchError), :new,
                s(:str, "credentials needed in s3 source, like s3://key:secret@bucket-name/"),
                s(:send,
                  s(:lvar, :uri), :to_s)))),
          s(:or_asgn,
            s(:lvasgn, :expiration),
            s(:send, nil, :s3_expiration)),
          s(:lvasgn, :canonical_path,
            s(:dstr,
              s(:str, "/"),
              s(:begin,
                s(:send,
                  s(:lvar, :uri), :host)),
              s(:begin,
                s(:send,
                  s(:lvar, :uri), :path)))),
          s(:lvasgn, :payload,
            s(:dstr,
              s(:str, "GET\n\n\n"),
              s(:begin,
                s(:lvar, :expiration)),
              s(:str, "\n"),
              s(:begin,
                s(:lvar, :canonical_path)))),
          s(:lvasgn, :digest,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :HMAC), :digest,
              s(:str, "sha1"),
              s(:send,
                s(:lvar, :uri), :password),
              s(:lvar, :payload))),
          s(:lvasgn, :signature,
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :Base64), :encode64,
                    s(:lvar, :digest)), :gsub,
                  s(:str, "\n"),
                  s(:str, "")), :gsub,
                s(:regexp,
                  s(:str, "[\\+/=]"),
                  s(:regopt))),
              s(:args,
                s(:arg, :c)),
              s(:send,
                s(:const, nil, :BASE64_URI_TRANSLATE), :[],
                s(:lvar, :c)))),
          s(:send,
            s(:const, nil, :URI), :parse,
            s(:dstr,
              s(:str, "https://"),
              s(:begin,
                s(:send,
                  s(:lvar, :uri), :host)),
              s(:str, ".s3.amazonaws.com"),
              s(:begin,
                s(:send,
                  s(:lvar, :uri), :path)),
              s(:str, "?AWSAccessKeyId="),
              s(:begin,
                s(:send,
                  s(:lvar, :uri), :user)),
              s(:str, "&Expires="),
              s(:begin,
                s(:lvar, :expiration)),
              s(:str, "&Signature="),
              s(:begin,
                s(:lvar, :signature)))))),
      s(:def, :s3_expiration,
        s(:args),
        s(:send,
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :+,
              s(:int, 3600))), :to_i)),
      s(:casgn, nil, :BASE64_URI_TRANSLATE,
        s(:send,
          s(:hash,
            s(:pair,
              s(:str, "+"),
              s(:str, "%2B")),
            s(:pair,
              s(:str, "/"),
              s(:str, "%2F")),
            s(:pair,
              s(:str, "="),
              s(:str, "%3D"))), :freeze)),
      s(:send, nil, :private),
      s(:def, :proxy_for,
        s(:args,
          s(:arg, :proxy),
          s(:arg, :uri)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Request), :proxy_uri,
          s(:or,
            s(:lvar, :proxy),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Request), :get_proxy_from_env,
              s(:send,
                s(:lvar, :uri), :scheme))))),
      s(:def, :pools_for,
        s(:args,
          s(:arg, :proxy)),
        s(:block,
          s(:send,
            s(:ivar, :@pool_lock), :synchronize),
          s(:args),
          s(:or_asgn,
            s(:send,
              s(:ivar, :@pools), :[],
              s(:lvar, :proxy)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Request), :ConnectionPools), :new,
              s(:lvar, :proxy),
              s(:ivar, :@cert_files))))))))
