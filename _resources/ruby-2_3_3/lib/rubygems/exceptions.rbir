s(:begin,
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Exception),
    s(:const, nil, :RuntimeError),
    s(:send, nil, :attr_accessor,
      s(:sym, :source_exception))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :CommandLineError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :DependencyError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :DependencyRemovalException),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :DependencyResolutionError),
    s(:const,
      s(:const, nil, :Gem), :DependencyError),
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :conflict)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :conflict)),
        s(:begin,
          s(:ivasgn, :@conflict,
            s(:lvar, :conflict)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:lvasgn, :b)),
            s(:send, nil, :conflicting_dependencies)),
          s(:super,
            s(:dstr,
              s(:str, "conflicting dependencies "),
              s(:begin,
                s(:lvar, :a)),
              s(:str, " and "),
              s(:begin,
                s(:lvar, :b)),
              s(:str, "\n"),
              s(:begin,
                s(:send,
                  s(:ivar, :@conflict), :explanation)))))),
      s(:def, :conflicting_dependencies,
        s(:args),
        s(:send,
          s(:ivar, :@conflict), :conflicting_dependencies)))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :GemNotInHomeException),
    s(:const,
      s(:const, nil, :Gem), :Exception),
    s(:send, nil, :attr_accessor,
      s(:sym, :spec))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :DocumentError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :EndOfYAMLException),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :FilePermissionError),
    s(:const,
      s(:const, nil, :Gem), :Exception),
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :directory)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :directory)),
        s(:begin,
          s(:ivasgn, :@directory,
            s(:lvar, :directory)),
          s(:super,
            s(:dstr,
              s(:str, "You don't have write permissions for the "),
              s(:begin,
                s(:lvar, :directory)),
              s(:str, " directory."))))))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :FormatException),
    s(:const,
      s(:const, nil, :Gem), :Exception),
    s(:send, nil, :attr_accessor,
      s(:sym, :file_path))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :GemNotFoundException),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :SpecificGemNotFoundException),
    s(:const,
      s(:const, nil, :Gem), :GemNotFoundException),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :errors,
            s(:nil))),
        s(:begin,
          s(:super,
            s(:dstr,
              s(:str, "Could not find a valid gem '"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "' ("),
              s(:begin,
                s(:lvar, :version)),
              s(:str, ") locally or in a repository"))),
          s(:ivasgn, :@name,
            s(:lvar, :name)),
          s(:ivasgn, :@version,
            s(:lvar, :version)),
          s(:ivasgn, :@errors,
            s(:lvar, :errors)))),
      s(:send, nil, :attr_reader,
        s(:sym, :name)),
      s(:send, nil, :attr_reader,
        s(:sym, :version)),
      s(:send, nil, :attr_reader,
        s(:sym, :errors)))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :ImpossibleDependenciesError),
    s(:const,
      s(:const, nil, :Gem), :Exception),
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :conflicts)),
      s(:send, nil, :attr_reader,
        s(:sym, :request)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :request),
          s(:arg, :conflicts)),
        s(:begin,
          s(:ivasgn, :@request,
            s(:lvar, :request)),
          s(:ivasgn, :@conflicts,
            s(:lvar, :conflicts)),
          s(:super,
            s(:send, nil, :build_message)))),
      s(:def, :build_message,
        s(:args),
        s(:begin,
          s(:lvasgn, :requester,
            s(:send,
              s(:ivar, :@request), :requester)),
          s(:lvasgn, :requester,
            s(:if,
              s(:lvar, :requester),
              s(:send,
                s(:send,
                  s(:lvar, :requester), :spec), :full_name),
              s(:str, "The user"))),
          s(:lvasgn, :dependency,
            s(:send,
              s(:ivar, :@request), :dependency)),
          s(:lvasgn, :message,
            s(:send,
              s(:dstr,
                s(:begin,
                  s(:lvar, :requester)),
                s(:str, " requires "),
                s(:begin,
                  s(:lvar, :dependency)),
                s(:str, " but it conflicted:\n")), :dup)),
          s(:block,
            s(:send,
              s(:ivar, :@conflicts), :each),
            s(:args,
              s(:arg, :_),
              s(:arg, :conflict)),
            s(:send,
              s(:lvar, :message), :<<,
              s(:send,
                s(:lvar, :conflict), :explanation))),
          s(:lvar, :message))),
      s(:def, :dependency,
        s(:args),
        s(:send,
          s(:ivar, :@request), :dependency)))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :InstallError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :InvalidSpecificationException),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :OperationNotSupportedError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RemoteError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RemoteInstallationCancelled),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RemoteInstallationSkipped),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RemoteSourceException),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RubyVersionMismatch),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :VerificationError),
    s(:const,
      s(:const, nil, :Gem), :Exception), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :SystemExitException),
    s(:const, nil, :SystemExit),
    s(:begin,
      s(:send, nil, :attr_accessor,
        s(:sym, :exit_code)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :exit_code)),
        s(:begin,
          s(:ivasgn, :@exit_code,
            s(:lvar, :exit_code)),
          s(:super,
            s(:dstr,
              s(:str, "Exiting RubyGems with exit_code "),
              s(:begin,
                s(:lvar, :exit_code)))))))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :UnsatisfiableDependencyError),
    s(:const,
      s(:const, nil, :Gem), :DependencyError),
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :dependency)),
      s(:send, nil, :attr_accessor,
        s(:sym, :errors)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :dep),
          s(:optarg, :platform_mismatch,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :platform_mismatch),
              s(:send,
                s(:send,
                  s(:lvar, :platform_mismatch), :empty?), :!)),
            s(:begin,
              s(:lvasgn, :plats,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :platform_mismatch), :map),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:send,
                          s(:lvar, :x), :platform), :to_s)), :sort), :uniq)),
              s(:super,
                s(:dstr,
                  s(:str, "Unable to resolve dependency: No match for '"),
                  s(:begin,
                    s(:lvar, :dep)),
                  s(:str, "' on this platform. Found: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :plats), :join,
                      s(:str, ", ")))))),
            s(:if,
              s(:send,
                s(:lvar, :dep), :explicit?),
              s(:super,
                s(:dstr,
                  s(:str, "Unable to resolve dependency: user requested '"),
                  s(:begin,
                    s(:lvar, :dep)),
                  s(:str, "'"))),
              s(:super,
                s(:dstr,
                  s(:str, "Unable to resolve dependency: '"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :dep), :request_context)),
                  s(:str, "' requires '"),
                  s(:begin,
                    s(:lvar, :dep)),
                  s(:str, "'"))))),
          s(:ivasgn, :@dependency,
            s(:lvar, :dep)),
          s(:ivasgn, :@errors,
            s(:array)))),
      s(:def, :name,
        s(:args),
        s(:send,
          s(:ivar, :@dependency), :name)),
      s(:def, :version,
        s(:args),
        s(:send,
          s(:ivar, :@dependency), :requirement)))),
  s(:casgn,
    s(:const, nil, :Gem), :UnsatisfiableDepedencyError,
    s(:const,
      s(:const, nil, :Gem), :UnsatisfiableDependencyError)))
