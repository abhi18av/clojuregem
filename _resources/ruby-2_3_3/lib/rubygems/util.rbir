s(:module,
  s(:const,
    s(:const, nil, :Gem), :Util),
  s(:begin,
    s(:ivasgn, :@silent_mutex,
      s(:nil)),
    s(:defs,
      s(:self), :gunzip,
      s(:args,
        s(:arg, :data)),
      s(:begin,
        s(:send, nil, :require,
          s(:str, "zlib")),
        s(:send, nil, :require,
          s(:str, "stringio")),
        s(:lvasgn, :data,
          s(:send,
            s(:const, nil, :StringIO), :new,
            s(:lvar, :data),
            s(:str, "r"))),
        s(:lvasgn, :unzipped,
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Zlib), :GzipReader), :new,
              s(:lvar, :data)), :read)),
        s(:if,
          s(:send,
            s(:const, nil, :Object), :const_defined?,
            s(:sym, :Encoding)),
          s(:send,
            s(:lvar, :unzipped), :force_encoding,
            s(:const,
              s(:const, nil, :Encoding), :BINARY)), nil),
        s(:lvar, :unzipped))),
    s(:defs,
      s(:self), :gzip,
      s(:args,
        s(:arg, :data)),
      s(:begin,
        s(:send, nil, :require,
          s(:str, "zlib")),
        s(:send, nil, :require,
          s(:str, "stringio")),
        s(:lvasgn, :zipped,
          s(:send,
            s(:const, nil, :StringIO), :new,
            s(:send,
              s(:const, nil, :String), :new),
            s(:str, "w"))),
        s(:if,
          s(:send,
            s(:const, nil, :Object), :const_defined?,
            s(:sym, :Encoding)),
          s(:send,
            s(:lvar, :zipped), :set_encoding,
            s(:const,
              s(:const, nil, :Encoding), :BINARY)), nil),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :Zlib), :GzipWriter), :wrap,
            s(:lvar, :zipped)),
          s(:args,
            s(:arg, :io)),
          s(:send,
            s(:lvar, :io), :write,
            s(:lvar, :data))),
        s(:send,
          s(:lvar, :zipped), :string))),
    s(:defs,
      s(:self), :inflate,
      s(:args,
        s(:arg, :data)),
      s(:begin,
        s(:send, nil, :require,
          s(:str, "zlib")),
        s(:send,
          s(:const,
            s(:const, nil, :Zlib), :Inflate), :inflate,
          s(:lvar, :data)))),
    s(:defs,
      s(:self), :popen,
      s(:args,
        s(:restarg, :command)),
      s(:rescue,
        s(:send,
          s(:const, nil, :IO), :popen,
          s(:lvar, :command),
          s(:block_pass,
            s(:sym, :read))),
        s(:resbody,
          s(:array,
            s(:const, nil, :TypeError)), nil,
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :r),
                s(:lvasgn, :w)),
              s(:send,
                s(:const, nil, :IO), :pipe)),
            s(:lvasgn, :pid,
              s(:block,
                s(:send, nil, :fork),
                s(:args),
                s(:begin,
                  s(:send,
                    s(:const, nil, :STDIN), :close),
                  s(:send,
                    s(:const, nil, :STDOUT), :reopen,
                    s(:lvar, :w)),
                  s(:send, nil, :exec,
                    s(:splat,
                      s(:lvar, :command)))))),
            s(:send,
              s(:lvar, :w), :close),
            s(:kwbegin,
              s(:ensure,
                s(:return,
                  s(:send,
                    s(:lvar, :r), :read)),
                s(:send,
                  s(:const, nil, :Process), :wait,
                  s(:lvar, :pid)))))), nil)),
    s(:casgn, nil, :NULL_DEVICE,
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :IO), :NULL)),
        s(:const,
          s(:const, nil, :IO), :NULL),
        s(:if,
          s(:send,
            s(:const, nil, :Gem), :win_platform?),
          s(:str, "NUL"),
          s(:str, "/dev/null")))),
    s(:defs,
      s(:self), :silent_system,
      s(:args,
        s(:restarg, :command)),
      s(:rescue,
        s(:begin,
          s(:lvasgn, :opt,
            s(:hash,
              s(:pair,
                s(:sym, :out),
                s(:const, nil, :NULL_DEVICE)),
              s(:pair,
                s(:sym, :err),
                s(:array,
                  s(:sym, :child),
                  s(:sym, :out))))),
          s(:if,
            s(:send,
              s(:const, nil, :Hash), :===,
              s(:send,
                s(:lvar, :command), :last)),
            s(:begin,
              s(:send,
                s(:lvar, :opt), :update,
                s(:send,
                  s(:lvar, :command), :last)),
              s(:lvasgn, :cmds,
                s(:send,
                  s(:lvar, :command), :[],
                  s(:erange,
                    s(:int, 0),
                    s(:int, -1))))),
            s(:lvasgn, :cmds,
              s(:send,
                s(:lvar, :command), :dup))),
          s(:return,
            s(:send, nil, :system,
              s(:splat,
                s(:begin,
                  s(:send,
                    s(:lvar, :cmds), :<<,
                    s(:lvar, :opt))))))),
        s(:resbody,
          s(:array,
            s(:const, nil, :TypeError)), nil,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "thread")),
            s(:or_asgn,
              s(:ivasgn, :@silent_mutex),
              s(:send,
                s(:const, nil, :Mutex), :new)),
            s(:lvasgn, :null_device,
              s(:const, nil, :NULL_DEVICE)),
            s(:block,
              s(:send,
                s(:ivar, :@silent_mutex), :synchronize),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:lvasgn, :stdout,
                      s(:send,
                        s(:const, nil, :STDOUT), :dup)),
                    s(:lvasgn, :stderr,
                      s(:send,
                        s(:const, nil, :STDERR), :dup)),
                    s(:send,
                      s(:const, nil, :STDOUT), :reopen,
                      s(:lvar, :null_device),
                      s(:str, "w")),
                    s(:send,
                      s(:const, nil, :STDERR), :reopen,
                      s(:lvar, :null_device),
                      s(:str, "w")),
                    s(:return,
                      s(:send, nil, :system,
                        s(:splat,
                          s(:lvar, :command))))),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :STDOUT), :reopen,
                      s(:lvar, :stdout)),
                    s(:send,
                      s(:const, nil, :STDERR), :reopen,
                      s(:lvar, :stderr)),
                    s(:send,
                      s(:lvar, :stdout), :close),
                    s(:send,
                      s(:lvar, :stderr), :close))))))), nil)),
    s(:defs,
      s(:self), :traverse_parents,
      s(:args,
        s(:arg, :directory)),
      s(:begin,
        s(:if,
          s(:send, nil, :block_given?), nil,
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__),
              s(:lvar, :directory)))),
        s(:lvasgn, :here,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :directory))),
        s(:lvasgn, :start,
          s(:lvar, :here)),
        s(:send,
          s(:const, nil, :Dir), :chdir,
          s(:lvar, :start)),
        s(:kwbegin,
          s(:ensure,
            s(:block,
              s(:send, nil, :loop),
              s(:args),
              s(:begin,
                s(:yield,
                  s(:lvar, :here)),
                s(:send,
                  s(:const, nil, :Dir), :chdir,
                  s(:str, "..")),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Dir), :pwd), :==,
                    s(:lvar, :here)),
                  s(:return), nil),
                s(:lvasgn, :here,
                  s(:send,
                    s(:const, nil, :Dir), :pwd)))),
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :start))))))))
