s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/dependency")),
  s(:send, nil, :require,
    s(:str, "rubygems/exceptions")),
  s(:send, nil, :require,
    s(:str, "rubygems/util")),
  s(:send, nil, :require,
    s(:str, "rubygems/util/list")),
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Resolver), nil,
    s(:begin,
      s(:send, nil, :require,
        s(:str, "rubygems/resolver/molinillo")),
      s(:casgn, nil, :DEBUG_RESOLVER,
        s(:send,
          s(:send,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "DEBUG_RESOLVER")), :nil?), :!)),
      s(:send, nil, :attr_accessor,
        s(:sym, :development)),
      s(:send, nil, :attr_accessor,
        s(:sym, :development_shallow)),
      s(:send, nil, :attr_accessor,
        s(:sym, :ignore_dependencies)),
      s(:send, nil, :attr_reader,
        s(:sym, :missing)),
      s(:send, nil, :attr_reader,
        s(:sym, :stats)),
      s(:send, nil, :attr_accessor,
        s(:sym, :skip_gems)),
      s(:send, nil, :attr_accessor,
        s(:sym, :soft_missing)),
      s(:defs,
        s(:self), :compose_sets,
        s(:args,
          s(:restarg, :sets)),
        s(:begin,
          s(:send,
            s(:lvar, :sets), :compact!),
          s(:lvasgn, :sets,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :sets), :map),
                s(:args,
                  s(:arg, :set)),
                s(:case,
                  s(:lvar, :set),
                  s(:when,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Resolver), :BestSet),
                    s(:lvar, :set)),
                  s(:when,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Resolver), :ComposedSet),
                    s(:send,
                      s(:lvar, :set), :sets)),
                  s(:lvar, :set))), :flatten)),
          s(:case,
            s(:send,
              s(:lvar, :sets), :length),
            s(:when,
              s(:int, 0),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "one set in the composition must be non-nil"))),
            s(:when,
              s(:int, 1),
              s(:send,
                s(:lvar, :sets), :first)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ComposedSet), :new,
              s(:splat,
                s(:lvar, :sets)))))),
      s(:defs,
        s(:self), :for_current_gems,
        s(:args,
          s(:arg, :needed)),
        s(:send, nil, :new,
          s(:lvar, :needed),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :CurrentSet), :new))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :needed),
          s(:optarg, :set,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@set,
            s(:or,
              s(:lvar, :set),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :IndexSet), :new))),
          s(:ivasgn, :@needed,
            s(:lvar, :needed)),
          s(:ivasgn, :@development,
            s(:false)),
          s(:ivasgn, :@development_shallow,
            s(:false)),
          s(:ivasgn, :@ignore_dependencies,
            s(:false)),
          s(:ivasgn, :@missing,
            s(:array)),
          s(:ivasgn, :@skip_gems,
            s(:hash)),
          s(:ivasgn, :@soft_missing,
            s(:false)),
          s(:ivasgn, :@stats,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :Stats), :new)))),
      s(:def, :explain,
        s(:args,
          s(:arg, :stage),
          s(:restarg, :data)),
        s(:begin,
          s(:if,
            s(:const, nil, :DEBUG_RESOLVER), nil,
            s(:return)),
          s(:lvasgn, :d,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :data), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :pretty_inspect)), :join,
              s(:str, ", "))),
          s(:send,
            s(:gvar, :$stderr), :printf,
            s(:str, "%10s %s\n"),
            s(:send,
              s(:send,
                s(:lvar, :stage), :to_s), :upcase),
            s(:lvar, :d)))),
      s(:def, :explain_list,
        s(:args,
          s(:arg, :stage)),
        s(:begin,
          s(:if,
            s(:const, nil, :DEBUG_RESOLVER), nil,
            s(:return)),
          s(:lvasgn, :data,
            s(:yield)),
          s(:send,
            s(:gvar, :$stderr), :printf,
            s(:str, "%10s (%d entries)\n"),
            s(:send,
              s(:send,
                s(:lvar, :stage), :to_s), :upcase),
            s(:send,
              s(:lvar, :data), :size)),
          s(:if,
            s(:send,
              s(:lvar, :data), :empty?), nil,
            s(:send,
              s(:const, nil, :PP), :pp,
              s(:lvar, :data),
              s(:gvar, :$stderr))))),
      s(:def, :activation_request,
        s(:args,
          s(:arg, :dep),
          s(:arg, :possible)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :possible), :pop)),
          s(:send, nil, :explain,
            s(:sym, :activate),
            s(:array,
              s(:send,
                s(:lvar, :spec), :full_name),
              s(:send,
                s(:lvar, :possible), :size))),
          s(:send, nil, :explain,
            s(:sym, :possible),
            s(:lvar, :possible)),
          s(:lvasgn, :activation_request,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :spec),
              s(:lvar, :dep),
              s(:lvar, :possible))),
          s(:return,
            s(:lvar, :spec),
            s(:lvar, :activation_request)))),
      s(:def, :requests,
        s(:args,
          s(:arg, :s),
          s(:arg, :act),
          s(:optarg, :reqs,
            s(:array))),
        s(:begin,
          s(:if,
            s(:ivar, :@ignore_dependencies),
            s(:return,
              s(:lvar, :reqs)), nil),
          s(:if,
            s(:ivar, :@development),
            s(:send,
              s(:lvar, :s), :fetch_development_dependencies), nil),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :s), :dependencies), :reverse_each),
            s(:args,
              s(:arg, :d)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :d), :type), :==,
                    s(:sym, :development)),
                  s(:send,
                    s(:ivar, :@development), :!)),
                s(:next), nil),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :d), :type), :==,
                      s(:sym, :development)),
                    s(:ivar, :@development_shallow)),
                  s(:send,
                    s(:lvar, :act), :development?)),
                s(:next), nil),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :d), :type), :==,
                      s(:sym, :development)),
                    s(:ivar, :@development_shallow)),
                  s(:send,
                    s(:lvar, :act), :parent)),
                s(:next), nil),
              s(:send,
                s(:lvar, :reqs), :<<,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
                  s(:lvar, :d),
                  s(:lvar, :act))),
              s(:send,
                s(:ivar, :@stats), :requirement!))),
          s(:send,
            s(:ivar, :@set), :prefetch,
            s(:lvar, :reqs)),
          s(:send,
            s(:ivar, :@stats), :record_requirements,
            s(:lvar, :reqs)),
          s(:lvar, :reqs))),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Molinillo), :UI)),
      s(:def, :output,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@output),
          s(:if,
            s(:send, nil, :debug?),
            s(:gvar, :$stdout),
            s(:send,
              s(:const, nil, :File), :open,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Util), :NULL_DEVICE),
              s(:str, "w"))))),
      s(:def, :debug?,
        s(:args),
        s(:const, nil, :DEBUG_RESOLVER)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Molinillo), :SpecificationProvider)),
      s(:def, :resolve,
        s(:args),
        s(:ensure,
          s(:rescue,
            s(:begin,
              s(:lvasgn, :locking_dg,
                s(:send,
                  s(:const,
                    s(:const, nil, :Molinillo), :DependencyGraph), :new)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Molinillo), :Resolver), :new,
                        s(:self),
                        s(:self)), :resolve,
                      s(:block,
                        s(:send,
                          s(:ivar, :@needed), :map),
                        s(:args,
                          s(:arg, :d)),
                        s(:send,
                          s(:const, nil, :DependencyRequest), :new,
                          s(:lvar, :d),
                          s(:nil))),
                      s(:lvar, :locking_dg)), :tsort), :map,
                  s(:block_pass,
                    s(:sym, :payload))), :compact)),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Molinillo), :VersionConflict)),
              s(:lvasgn, :e),
              s(:begin,
                s(:lvasgn, :conflict,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :e), :conflicts), :values), :first)),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :DependencyResolutionError),
                  s(:send,
                    s(:const, nil, :Conflict), :new,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :conflict), :requirement_trees), :first), :first),
                    s(:send,
                      s(:lvar, :conflict), :existing),
                    s(:send,
                      s(:lvar, :conflict), :requirement))))), nil),
          s(:if,
            s(:and,
              s(:ivar, :@output),
              s(:send,
                s(:send, nil, :debug?), :!)),
            s(:send,
              s(:ivar, :@output), :close), nil))),
      s(:def, :find_possible,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:lvasgn, :all,
            s(:send,
              s(:ivar, :@set), :find_all,
              s(:lvar, :dependency))),
          s(:if,
            s(:and,
              s(:begin,
                s(:lvasgn, :skip_dep_gems,
                  s(:send,
                    s(:send, nil, :skip_gems), :[],
                    s(:send,
                      s(:lvar, :dependency), :name)))),
              s(:send,
                s(:send,
                  s(:lvar, :skip_dep_gems), :empty?), :!)),
            s(:begin,
              s(:lvasgn, :matching,
                s(:block,
                  s(:send,
                    s(:lvar, :all), :select),
                  s(:args,
                    s(:arg, :api_spec)),
                  s(:block,
                    s(:send,
                      s(:lvar, :skip_dep_gems), :any?),
                    s(:args,
                      s(:arg, :s)),
                    s(:send,
                      s(:send,
                        s(:lvar, :api_spec), :version), :==,
                      s(:send,
                        s(:lvar, :s), :version))))),
              s(:if,
                s(:send,
                  s(:lvar, :matching), :empty?), nil,
                s(:lvasgn, :all,
                  s(:lvar, :matching)))), nil),
          s(:lvasgn, :matching_platform,
            s(:send, nil, :select_local_platforms,
              s(:lvar, :all))),
          s(:return,
            s(:lvar, :matching_platform),
            s(:lvar, :all)))),
      s(:def, :select_local_platforms,
        s(:args,
          s(:arg, :specs)),
        s(:block,
          s(:send,
            s(:lvar, :specs), :select),
          s(:args,
            s(:arg, :spec)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Platform), :installable?,
            s(:lvar, :spec)))),
      s(:def, :search_for,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :possibles),
              s(:lvasgn, :all)),
            s(:send, nil, :find_possible,
              s(:lvar, :dependency))),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@soft_missing), :!),
              s(:send,
                s(:lvar, :possibles), :empty?)),
            s(:begin,
              s(:send,
                s(:ivar, :@missing), :<<,
                s(:lvar, :dependency)),
              s(:lvasgn, :exc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :UnsatisfiableDependencyError), :new,
                  s(:lvar, :dependency),
                  s(:lvar, :all))),
              s(:send,
                s(:lvar, :exc), :errors=,
                s(:send,
                  s(:ivar, :@set), :errors)),
              s(:send, nil, :raise,
                s(:lvar, :exc))), nil),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :possibles), :sort_by),
                s(:args,
                  s(:arg, :s)),
                s(:array,
                  s(:send,
                    s(:lvar, :s), :source),
                  s(:send,
                    s(:lvar, :s), :version),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :platform), :to_s), :==,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Gem), :Platform), :local), :to_s)),
                    s(:int, 1),
                    s(:int, 0)))), :map),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :ActivationRequest), :new,
              s(:lvar, :s),
              s(:lvar, :dependency),
              s(:array))))),
      s(:def, :dependencies_for,
        s(:args,
          s(:arg, :specification)),
        s(:begin,
          s(:if,
            s(:ivar, :@ignore_dependencies),
            s(:return,
              s(:array)), nil),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :specification), :spec)),
          s(:send, nil, :requests,
            s(:lvar, :spec),
            s(:lvar, :specification)))),
      s(:def, :requirement_satisfied_by?,
        s(:args,
          s(:arg, :requirement),
          s(:arg, :activated),
          s(:arg, :spec)),
        s(:send,
          s(:lvar, :requirement), :matches_spec?,
          s(:lvar, :spec))),
      s(:def, :name_for,
        s(:args,
          s(:arg, :dependency)),
        s(:send,
          s(:lvar, :dependency), :name)),
      s(:def, :allow_missing?,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:send,
            s(:ivar, :@missing), :<<,
            s(:lvar, :dependency)),
          s(:ivar, :@soft_missing))))),
  s(:casgn,
    s(:const, nil, :Gem), :DependencyResolver,
    s(:const,
      s(:const, nil, :Gem), :Resolver)),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/activation_request")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/conflict")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/dependency_request")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/requirement_list")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/stats")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/api_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/composed_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/best_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/current_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/git_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/index_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/installer_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/lock_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/vendor_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/source_set")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/spec_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/api_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/git_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/index_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/installed_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/local_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/lock_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/resolver/vendor_specification")))
