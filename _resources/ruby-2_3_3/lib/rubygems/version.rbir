s(:class,
  s(:const,
    s(:const, nil, :Gem), :Version), nil,
  s(:begin,
    s(:send, nil, :autoload,
      s(:sym, :Requirement),
      s(:str, "rubygems/requirement")),
    s(:send, nil, :include,
      s(:const, nil, :Comparable)),
    s(:casgn, nil, :VERSION_PATTERN,
      s(:str, "[0-9]+(?>\\.[0-9a-zA-Z]+)*(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?")),
    s(:casgn, nil, :ANCHORED_VERSION_PATTERN,
      s(:regexp,
        s(:str, "\\A\\s*("),
        s(:begin,
          s(:const, nil, :VERSION_PATTERN)),
        s(:str, ")?\\s*\\z"),
        s(:regopt))),
    s(:def, :version,
      s(:args),
      s(:send,
        s(:ivar, :@version), :dup)),
    s(:alias,
      s(:sym, :to_s),
      s(:sym, :version)),
    s(:defs,
      s(:self), :correct?,
      s(:args,
        s(:arg, :version)),
      s(:send,
        s(:send,
          s(:lvar, :version), :to_s), :=~,
        s(:const, nil, :ANCHORED_VERSION_PATTERN))),
    s(:defs,
      s(:self), :create,
      s(:args,
        s(:arg, :input)),
      s(:if,
        s(:send,
          s(:self), :===,
          s(:lvar, :input)),
        s(:lvar, :input),
        s(:if,
          s(:send,
            s(:lvar, :input), :nil?),
          s(:nil),
          s(:send, nil, :new,
            s(:lvar, :input))))),
    s(:cvasgn, :@@all,
      s(:hash)),
    s(:defs,
      s(:self), :new,
      s(:args,
        s(:arg, :version)),
      s(:begin,
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :==,
            s(:self)), nil,
          s(:return,
            s(:zsuper))),
        s(:or_asgn,
          s(:send,
            s(:cvar, :@@all), :[],
            s(:lvar, :version)),
          s(:zsuper)))),
    s(:def, :initialize,
      s(:args,
        s(:arg, :version)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:self), :class), :correct?,
            s(:lvar, :version)), nil,
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "Malformed version number string "),
              s(:begin,
                s(:lvar, :version))))),
        s(:ivasgn, :@version,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :version), :to_s), :strip), :gsub,
            s(:str, "-"),
            s(:str, ".pre."))),
        s(:ivasgn, :@segments,
          s(:nil)))),
    s(:def, :bump,
      s(:args),
      s(:or_asgn,
        s(:ivasgn, :@bump),
        s(:kwbegin,
          s(:lvasgn, :segments,
            s(:send,
              s(:send,
                s(:self), :segments), :dup)),
          s(:while,
            s(:block,
              s(:send,
                s(:lvar, :segments), :any?),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:const, nil, :String), :===,
                s(:lvar, :s))),
            s(:send,
              s(:lvar, :segments), :pop)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :segments), :size), :>,
              s(:int, 1)),
            s(:send,
              s(:lvar, :segments), :pop), nil),
          s(:send,
            s(:lvar, :segments), :[]=,
            s(:int, -1),
            s(:send,
              s(:send,
                s(:lvar, :segments), :[],
                s(:int, -1)), :succ)),
          s(:send,
            s(:send,
              s(:self), :class), :new,
            s(:send,
              s(:lvar, :segments), :join,
              s(:str, ".")))))),
    s(:def, :eql?,
      s(:args,
        s(:arg, :other)),
      s(:and,
        s(:send,
          s(:send,
            s(:self), :class), :===,
          s(:lvar, :other)),
        s(:send,
          s(:ivar, :@version), :==,
          s(:send,
            s(:lvar, :other), :_version)))),
    s(:def, :hash,
      s(:args),
      s(:send,
        s(:ivar, :@version), :hash)),
    s(:def, :init_with,
      s(:args,
        s(:arg, :coder)),
      s(:send, nil, :yaml_initialize,
        s(:send,
          s(:lvar, :coder), :tag),
        s(:send,
          s(:lvar, :coder), :map))),
    s(:def, :inspect,
      s(:args),
      s(:dstr,
        s(:str, "#<"),
        s(:begin,
          s(:send,
            s(:self), :class)),
        s(:str, " "),
        s(:begin,
          s(:send,
            s(:send, nil, :version), :inspect)),
        s(:str, ">"))),
    s(:def, :marshal_dump,
      s(:args),
      s(:array,
        s(:send, nil, :version))),
    s(:def, :marshal_load,
      s(:args,
        s(:arg, :array)),
      s(:send, nil, :initialize,
        s(:send,
          s(:lvar, :array), :[],
          s(:int, 0)))),
    s(:def, :yaml_initialize,
      s(:args,
        s(:arg, :tag),
        s(:arg, :map)),
      s(:begin,
        s(:ivasgn, :@version,
          s(:send,
            s(:lvar, :map), :[],
            s(:str, "version"))),
        s(:ivasgn, :@segments,
          s(:nil)),
        s(:ivasgn, :@hash,
          s(:nil)))),
    s(:def, :to_yaml_properties,
      s(:args),
      s(:array,
        s(:str, "@version"))),
    s(:def, :encode_with,
      s(:args,
        s(:arg, :coder)),
      s(:send,
        s(:lvar, :coder), :add,
        s(:str, "version"),
        s(:ivar, :@version))),
    s(:def, :prerelease?,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :instance_variable_defined?,
            s(:sym, :@prerelease)), nil,
          s(:ivasgn, :@prerelease,
            s(:send,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:ivar, :@version), :=~,
                    s(:regexp,
                      s(:str, "[a-zA-Z]"),
                      s(:regopt)))), :!), :!))),
        s(:ivar, :@prerelease))),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:send,
        s(:lvar, :q), :text,
        s(:dstr,
          s(:str, "Gem::Version.new("),
          s(:begin,
            s(:send,
              s(:send, nil, :version), :inspect)),
          s(:str, ")")))),
    s(:def, :release,
      s(:args),
      s(:or_asgn,
        s(:ivasgn, :@release),
        s(:if,
          s(:send, nil, :prerelease?),
          s(:begin,
            s(:lvasgn, :segments,
              s(:send,
                s(:send,
                  s(:self), :segments), :dup)),
            s(:while,
              s(:block,
                s(:send,
                  s(:lvar, :segments), :any?),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :s))),
              s(:send,
                s(:lvar, :segments), :pop)),
            s(:send,
              s(:send,
                s(:self), :class), :new,
              s(:send,
                s(:lvar, :segments), :join,
                s(:str, ".")))),
          s(:self)))),
    s(:def, :segments,
      s(:args),
      s(:or_asgn,
        s(:ivasgn, :@segments),
        s(:block,
          s(:send,
            s(:send,
              s(:ivar, :@version), :scan,
              s(:regexp,
                s(:str, "[0-9]+|[a-z]+"),
                s(:regopt, :i))), :map),
          s(:args,
            s(:arg, :s)),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^\\d+$"),
                s(:regopt)),
              s(:lvar, :s)),
            s(:send,
              s(:lvar, :s), :to_i),
            s(:lvar, :s))))),
    s(:def, :approximate_recommendation,
      s(:args),
      s(:begin,
        s(:lvasgn, :segments,
          s(:send,
            s(:send,
              s(:self), :segments), :dup)),
        s(:while,
          s(:block,
            s(:send,
              s(:lvar, :segments), :any?),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :String), :===,
              s(:lvar, :s))),
          s(:send,
            s(:lvar, :segments), :pop)),
        s(:while,
          s(:send,
            s(:send,
              s(:lvar, :segments), :size), :>,
            s(:int, 2)),
          s(:send,
            s(:lvar, :segments), :pop)),
        s(:while,
          s(:send,
            s(:send,
              s(:lvar, :segments), :size), :<,
            s(:int, 2)),
          s(:send,
            s(:lvar, :segments), :push,
            s(:int, 0))),
        s(:dstr,
          s(:str, "~> "),
          s(:begin,
            s(:send,
              s(:lvar, :segments), :join,
              s(:str, ".")))))),
    s(:def, :<=>,
      s(:args,
        s(:arg, :other)),
      s(:begin,
        s(:if,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :===,
            s(:lvar, :other)), nil,
          s(:return)),
        s(:if,
          s(:send,
            s(:ivar, :@version), :==,
            s(:send,
              s(:lvar, :other), :_version)),
          s(:return,
            s(:int, 0)), nil),
        s(:lvasgn, :lhsegments,
          s(:send, nil, :segments)),
        s(:lvasgn, :rhsegments,
          s(:send,
            s(:lvar, :other), :segments)),
        s(:lvasgn, :lhsize,
          s(:send,
            s(:lvar, :lhsegments), :size)),
        s(:lvasgn, :rhsize,
          s(:send,
            s(:lvar, :rhsegments), :size)),
        s(:lvasgn, :limit,
          s(:send,
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :lhsize), :>,
                  s(:lvar, :rhsize)),
                s(:lvar, :lhsize),
                s(:lvar, :rhsize))), :-,
            s(:int, 1))),
        s(:lvasgn, :i,
          s(:int, 0)),
        s(:while,
          s(:send,
            s(:lvar, :i), :<=,
            s(:lvar, :limit)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :lhs),
                s(:lvasgn, :rhs)),
              s(:array,
                s(:or,
                  s(:send,
                    s(:lvar, :lhsegments), :[],
                    s(:lvar, :i)),
                  s(:int, 0)),
                s(:or,
                  s(:send,
                    s(:lvar, :rhsegments), :[],
                    s(:lvar, :i)),
                  s(:int, 0)))),
            s(:op_asgn,
              s(:lvasgn, :i), :+,
              s(:int, 1)),
            s(:if,
              s(:send,
                s(:lvar, :lhs), :==,
                s(:lvar, :rhs)),
              s(:next), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :lhs)),
                s(:send,
                  s(:const, nil, :Numeric), :===,
                  s(:lvar, :rhs))),
              s(:return,
                s(:int, -1)), nil),
            s(:if,
              s(:and,
                s(:send,
                  s(:const, nil, :Numeric), :===,
                  s(:lvar, :lhs)),
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :rhs))),
              s(:return,
                s(:int, 1)), nil),
            s(:return,
              s(:send,
                s(:lvar, :lhs), :<=>,
                s(:lvar, :rhs))))),
        s(:return,
          s(:int, 0)))),
    s(:send, nil, :protected),
    s(:def, :_version,
      s(:args),
      s(:ivar, :@version))))
