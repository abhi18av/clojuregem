s(:class,
  s(:const,
    s(:const, nil, :Gem), :AvailableSet), nil,
  s(:begin,
    s(:send, nil, :include,
      s(:const, nil, :Enumerable)),
    s(:casgn, nil, :Tuple,
      s(:send,
        s(:const, nil, :Struct), :new,
        s(:sym, :spec),
        s(:sym, :source))),
    s(:send, nil, :attr_accessor,
      s(:sym, :remote)),
    s(:def, :initialize,
      s(:args),
      s(:begin,
        s(:ivasgn, :@set,
          s(:array)),
        s(:ivasgn, :@sorted,
          s(:nil)),
        s(:ivasgn, :@remote,
          s(:true)))),
    s(:send, nil, :attr_reader,
      s(:sym, :set)),
    s(:def, :add,
      s(:args,
        s(:arg, :spec),
        s(:arg, :source)),
      s(:begin,
        s(:send,
          s(:ivar, :@set), :<<,
          s(:send,
            s(:const, nil, :Tuple), :new,
            s(:lvar, :spec),
            s(:lvar, :source))),
        s(:ivasgn, :@sorted,
          s(:nil)),
        s(:self))),
    s(:def, :<<,
      s(:args,
        s(:arg, :o)),
      s(:begin,
        s(:case,
          s(:lvar, :o),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :AvailableSet),
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :o), :set))),
          s(:when,
            s(:const, nil, :Array),
            s(:lvasgn, :s,
              s(:block,
                s(:send,
                  s(:lvar, :o), :map),
                s(:args,
                  s(:arg, :sp),
                  s(:arg, :so)),
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:lvar, :sp), :kind_of?,
                          s(:const,
                            s(:const, nil, :Gem), :Specification)), :!),
                      s(:send,
                        s(:send,
                          s(:lvar, :so), :kind_of?,
                          s(:const,
                            s(:const, nil, :Gem), :Source)), :!)),
                    s(:send, nil, :raise,
                      s(:const, nil, :TypeError),
                      s(:str, "Array must be in [[spec, source], ...] form")), nil),
                  s(:send,
                    s(:const, nil, :Tuple), :new,
                    s(:lvar, :sp),
                    s(:lvar, :so)))))),
          s(:send, nil, :raise,
            s(:const, nil, :TypeError),
            s(:str, "must be a Gem::AvailableSet"))),
        s(:op_asgn,
          s(:ivasgn, :@set), :+,
          s(:lvar, :s)),
        s(:ivasgn, :@sorted,
          s(:nil)),
        s(:self))),
    s(:def, :each,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :block_given?), nil,
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:block,
          s(:send,
            s(:ivar, :@set), :each),
          s(:args,
            s(:arg, :tuple)),
          s(:yield,
            s(:lvar, :tuple))))),
    s(:def, :each_spec,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :block_given?), nil,
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:block,
          s(:send, nil, :each),
          s(:args,
            s(:arg, :tuple)),
          s(:yield,
            s(:send,
              s(:lvar, :tuple), :spec))))),
    s(:def, :empty?,
      s(:args),
      s(:send,
        s(:ivar, :@set), :empty?)),
    s(:def, :all_specs,
      s(:args),
      s(:block,
        s(:send,
          s(:ivar, :@set), :map),
        s(:args,
          s(:arg, :t)),
        s(:send,
          s(:lvar, :t), :spec))),
    s(:def, :match_platform!,
      s(:args),
      s(:begin,
        s(:block,
          s(:send,
            s(:ivar, :@set), :reject!),
          s(:args,
            s(:arg, :t)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :match,
              s(:send,
                s(:send,
                  s(:lvar, :t), :spec), :platform)), :!)),
        s(:ivasgn, :@sorted,
          s(:nil)),
        s(:self))),
    s(:def, :sorted,
      s(:args),
      s(:or_asgn,
        s(:ivasgn, :@sorted),
        s(:block,
          s(:send,
            s(:ivar, :@set), :sort),
          s(:args,
            s(:arg, :a),
            s(:arg, :b)),
          s(:begin,
            s(:lvasgn, :i,
              s(:send,
                s(:send,
                  s(:lvar, :b), :spec), :<=>,
                s(:send,
                  s(:lvar, :a), :spec))),
            s(:if,
              s(:send,
                s(:lvar, :i), :!=,
                s(:int, 0)),
              s(:lvar, :i),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :a), :source), :<=>,
                  s(:send,
                    s(:lvar, :b), :source)))))))),
    s(:def, :size,
      s(:args),
      s(:send,
        s(:ivar, :@set), :size)),
    s(:def, :source_for,
      s(:args,
        s(:arg, :spec)),
      s(:begin,
        s(:lvasgn, :f,
          s(:block,
            s(:send,
              s(:ivar, :@set), :find),
            s(:args,
              s(:arg, :t)),
            s(:send,
              s(:send,
                s(:lvar, :t), :spec), :==,
              s(:lvar, :spec)))),
        s(:send,
          s(:lvar, :f), :source))),
    s(:def, :to_request_set,
      s(:args,
        s(:optarg, :development,
          s(:sym, :none))),
      s(:begin,
        s(:lvasgn, :request_set,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RequestSet), :new)),
        s(:send,
          s(:lvar, :request_set), :development=,
          s(:send,
            s(:sym, :all), :==,
            s(:lvar, :development))),
        s(:block,
          s(:send, nil, :each_spec),
          s(:args,
            s(:arg, :spec)),
          s(:begin,
            s(:send,
              s(:send,
                s(:lvar, :request_set), :always_install), :<<,
              s(:lvar, :spec)),
            s(:send,
              s(:lvar, :request_set), :gem,
              s(:send,
                s(:lvar, :spec), :name),
              s(:send,
                s(:lvar, :spec), :version)),
            s(:if,
              s(:send,
                s(:sym, :shallow), :==,
                s(:lvar, :development)),
              s(:send,
                s(:lvar, :request_set), :import,
                s(:send,
                  s(:lvar, :spec), :development_dependencies)), nil))),
        s(:lvar, :request_set))),
    s(:def, :find_all,
      s(:args,
        s(:arg, :req)),
      s(:begin,
        s(:lvasgn, :dep,
          s(:send,
            s(:lvar, :req), :dependency)),
        s(:lvasgn, :match,
          s(:block,
            s(:send,
              s(:ivar, :@set), :find_all),
            s(:args,
              s(:arg, :t)),
            s(:send,
              s(:lvar, :dep), :match?,
              s(:send,
                s(:lvar, :t), :spec)))),
        s(:block,
          s(:send,
            s(:lvar, :match), :map),
          s(:args,
            s(:arg, :t)),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :LocalSpecification), :new,
            s(:self),
            s(:send,
              s(:lvar, :t), :spec),
            s(:send,
              s(:lvar, :t), :source))))),
    s(:def, :prefetch,
      s(:args,
        s(:arg, :reqs)), nil),
    s(:def, :pick_best!,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :empty?),
          s(:return,
            s(:self)), nil),
        s(:ivasgn, :@set,
          s(:array,
            s(:send,
              s(:send, nil, :sorted), :first))),
        s(:ivasgn, :@sorted,
          s(:nil)),
        s(:self))),
    s(:def, :remove_installed!,
      s(:args,
        s(:arg, :dep)),
      s(:begin,
        s(:block,
          s(:send,
            s(:ivar, :@set), :reject!),
          s(:args,
            s(:arg, :t)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :any?),
            s(:args,
              s(:arg, :installed_spec)),
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :dep), :name), :==,
                s(:send,
                  s(:lvar, :installed_spec), :name)),
              s(:send,
                s(:send,
                  s(:lvar, :dep), :requirement), :satisfied_by?,
                s(:send,
                  s(:lvar, :installed_spec), :version))))),
        s(:ivasgn, :@sorted,
          s(:nil)),
        s(:self))),
    s(:def, :inject_into_list,
      s(:args,
        s(:arg, :dep_list)),
      s(:block,
        s(:send,
          s(:ivar, :@set), :each),
        s(:args,
          s(:arg, :t)),
        s(:send,
          s(:lvar, :dep_list), :add,
          s(:send,
            s(:lvar, :t), :spec))))))
