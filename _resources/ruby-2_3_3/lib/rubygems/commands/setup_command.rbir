s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :SetupCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:casgn, nil, :HISTORY_HEADER,
        s(:regexp,
          s(:str, "^===\\s*[\\d.]+\\s*/\\s*\\d{4}-\\d{2}-\\d{2}\\s*$"),
          s(:regopt))),
      s(:casgn, nil, :VERSION_MATCHER,
        s(:regexp,
          s(:str, "^===\\s*([\\d.]+)\\s*/\\s*\\d{4}-\\d{2}-\\d{2}\\s*$"),
          s(:regopt))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "tmpdir")),
          s(:super,
            s(:str, "setup"),
            s(:str, "Install RubyGems"),
            s(:hash,
              s(:pair,
                s(:sym, :format_executable),
                s(:true)),
              s(:pair,
                s(:sym, :document),
                s(:array,
                  s(:str, "ri"))),
              s(:pair,
                s(:sym, :site_or_vendor),
                s(:str, "sitelibdir")),
              s(:pair,
                s(:sym, :destdir),
                s(:str, "")),
              s(:pair,
                s(:sym, :prefix),
                s(:str, "")),
              s(:pair,
                s(:sym, :previous_version),
                s(:str, "")))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--previous-version=VERSION"),
              s(:str, "Previous version of rubygems"),
              s(:str, "Used for changelog processing")),
            s(:args,
              s(:arg, :version),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :previous_version),
              s(:lvar, :version))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--prefix=PREFIX"),
              s(:str, "Prefix path for installing RubyGems"),
              s(:str, "Will not affect gem repository location")),
            s(:args,
              s(:arg, :prefix),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :prefix),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :prefix)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--destdir=DESTDIR"),
              s(:str, "Root directory to install RubyGems into"),
              s(:str, "Mainly used for packaging RubyGems")),
            s(:args,
              s(:arg, :destdir),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :destdir),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :destdir)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]vendor"),
              s(:str, "Install into vendorlibdir not sitelibdir")),
            s(:args,
              s(:arg, :vendor),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :site_or_vendor),
              s(:if,
                s(:lvar, :vendor),
                s(:str, "vendorlibdir"),
                s(:str, "sitelibdir")))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]format-executable"),
              s(:str, "Makes `gem` match ruby"),
              s(:str, "If ruby is ruby18, gem will be gem18")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :format_executable),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]document [TYPES]"),
              s(:const, nil, :Array),
              s(:str, "Generate documentation for RubyGems."),
              s(:str, "List the documentation types you wish to"),
              s(:str, "generate.  For example: rdoc,ri")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :document),
              s(:case,
                s(:lvar, :value),
                s(:when,
                  s(:nil),
                  s(:array,
                    s(:str, "rdoc"),
                    s(:str, "ri"))),
                s(:when,
                  s(:false),
                  s(:array)),
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]rdoc"),
              s(:str, "Generate RDoc documentation for RubyGems")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:lvar, :value),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :<<,
                  s(:str, "rdoc")),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :delete,
                  s(:str, "rdoc"))),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :document)), :uniq!))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]ri"),
              s(:str, "Generate RI documentation for RubyGems")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:lvar, :value),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :<<,
                  s(:str, "ri")),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :delete,
                  s(:str, "ri"))),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :document)), :uniq!))),
          s(:ivasgn, :@verbose,
            s(:nil)))),
      s(:def, :check_ruby_version,
        s(:args),
        s(:begin,
          s(:lvasgn, :required_version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :new,
              s(:str, ">= 1.8.7"))),
          s(:if,
            s(:send,
              s(:lvar, :required_version), :satisfied_by?,
              s(:send,
                s(:const, nil, :Gem), :ruby_version)), nil,
            s(:begin,
              s(:send, nil, :alert_error,
                s(:dstr,
                  s(:str, "Expected Ruby version "),
                  s(:begin,
                    s(:lvar, :required_version)),
                  s(:str, ", is "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Gem), :ruby_version)))),
              s(:send, nil, :terminate_interaction,
                s(:int, 1)))))),
      s(:def, :defaults_str,
        s(:args),
        s(:str, "--format-executable --document ri")),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "Installs RubyGems itself.\n"),
          s(:str, "\n"),
          s(:str, "RubyGems installs RDoc for itself in GEM_HOME.  By default this is:\n"),
          s(:str, "  "),
          s(:begin,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:str, "\n"),
          s(:str, "\n"),
          s(:str, "If you prefer a different directory, set the GEM_HOME environment variable.\n"),
          s(:str, "\n"),
          s(:str, "RubyGems will install the gem command with a name matching ruby's\n"),
          s(:str, "prefix and suffix.  If ruby was installed as `ruby18`, gem will be\n"),
          s(:str, "installed as `gem18`.\n"),
          s(:str, "\n"),
          s(:str, "By default, this RubyGems will install gem as:\n"),
          s(:str, "  "),
          s(:begin,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :default_exec_format), :%,
              s(:str, "gem"))),
          s(:str, "\n"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:ivasgn, :@verbose,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :really_verbose)),
          s(:lvasgn, :install_destdir,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :destdir))),
          s(:if,
            s(:send,
              s(:lvar, :install_destdir), :empty?), nil,
            s(:or_asgn,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "GEM_HOME")),
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :install_destdir),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :default_dir), :gsub,
                  s(:regexp,
                    s(:str, "^[a-zA-Z]:"),
                    s(:regopt)),
                  s(:str, ""))))),
          s(:send, nil, :check_ruby_version),
          s(:send, nil, :require,
            s(:str, "fileutils")),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :really_verbose),
            s(:send, nil, :extend,
              s(:const,
                s(:const, nil, :FileUtils), :Verbose)),
            s(:send, nil, :extend,
              s(:const, nil, :FileUtils))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :lib_dir),
              s(:lvasgn, :bin_dir)),
            s(:send, nil, :make_destination_dirs,
              s(:lvar, :install_destdir))),
          s(:send, nil, :install_lib,
            s(:lvar, :lib_dir)),
          s(:send, nil, :install_executables,
            s(:lvar, :bin_dir)),
          s(:send, nil, :remove_old_bin_files,
            s(:lvar, :bin_dir)),
          s(:send, nil, :remove_old_lib_files,
            s(:lvar, :lib_dir)),
          s(:send, nil, :say,
            s(:dstr,
              s(:str, "RubyGems "),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, " installed"))),
          s(:send, nil, :uninstall_old_gemcutter),
          s(:lvasgn, :documentation_success,
            s(:send, nil, :install_rdoc)),
          s(:send, nil, :say),
          s(:if,
            s(:ivar, :@verbose),
            s(:begin,
              s(:send, nil, :say,
                s(:send,
                  s(:str, "-"), :*,
                  s(:int, 78))),
              s(:send, nil, :say)), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :previous_version)), :empty?),
            s(:send,
              s(:send, nil, :options), :[]=,
              s(:sym, :previous_version),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :VERSION), :sub,
                s(:regexp,
                  s(:str, "[0-9]+$"),
                  s(:regopt)),
                s(:str, "0"))), nil),
          s(:send,
            s(:send, nil, :options), :[]=,
            s(:sym, :previous_version),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :previous_version)))),
          s(:send, nil, :show_release_notes),
          s(:send, nil, :say),
          s(:send, nil, :say,
            s(:send,
              s(:str, "-"), :*,
              s(:int, 78))),
          s(:send, nil, :say),
          s(:send, nil, :say,
            s(:str, "RubyGems installed the following executables:")),
          s(:send, nil, :say,
            s(:block,
              s(:send,
                s(:ivar, :@bin_file_names), :map),
              s(:args,
                s(:arg, :name)),
              s(:dstr,
                s(:str, "\t"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "\n")))),
          s(:send, nil, :say),
          s(:if,
            s(:send,
              s(:ivar, :@bin_file_names), :grep,
              s(:regexp,
                s(:begin,
                  s(:const,
                    s(:const, nil, :File), :SEPARATOR)),
                s(:str, "gem$"),
                s(:regopt))), nil,
            s(:begin,
              s(:send, nil, :say,
                s(:str, "If `gem` was installed by a previous RubyGems installation, you may need")),
              s(:send, nil, :say,
                s(:str, "to remove it by hand.")),
              s(:send, nil, :say))),
          s(:if,
            s(:lvar, :documentation_success),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :document)), :include?,
                  s(:str, "rdoc")),
                s(:begin,
                  s(:send, nil, :say,
                    s(:str, "Rdoc documentation was installed. You may now invoke:")),
                  s(:send, nil, :say,
                    s(:str, "  gem server")),
                  s(:send, nil, :say,
                    s(:str, "and then peruse beautifully formatted documentation for your gems")),
                  s(:send, nil, :say,
                    s(:str, "with your web browser.")),
                  s(:send, nil, :say,
                    s(:str, "If you do not wish to install this documentation in the future, use the")),
                  s(:send, nil, :say,
                    s(:str, "--no-document flag, or set it as the default in your ~/.gemrc file. See")),
                  s(:send, nil, :say,
                    s(:str, "'gem help env' for details.")),
                  s(:send, nil, :say)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :document)), :include?,
                  s(:str, "ri")),
                s(:begin,
                  s(:send, nil, :say,
                    s(:str, "Ruby Interactive (ri) documentation was installed. ri is kind of like man ")),
                  s(:send, nil, :say,
                    s(:str, "pages for ruby libraries. You may access it like this:")),
                  s(:send, nil, :say,
                    s(:str, "  ri Classname")),
                  s(:send, nil, :say,
                    s(:str, "  ri Classname.class_method")),
                  s(:send, nil, :say,
                    s(:str, "  ri Classname#instance_method")),
                  s(:send, nil, :say,
                    s(:str, "If you do not wish to install this documentation in the future, use the")),
                  s(:send, nil, :say,
                    s(:str, "--no-document flag, or set it as the default in your ~/.gemrc file. See")),
                  s(:send, nil, :say,
                    s(:str, "'gem help env' for details.")),
                  s(:send, nil, :say)), nil)), nil))),
      s(:def, :install_executables,
        s(:args,
          s(:arg, :bin_dir)),
        s(:begin,
          s(:if,
            s(:ivar, :@verbose),
            s(:send, nil, :say,
              s(:str, "Installing gem executable")), nil),
          s(:ivasgn, :@bin_file_names,
            s(:array)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:str, "bin")),
            s(:args),
            s(:begin,
              s(:lvasgn, :bin_files,
                s(:send,
                  s(:const, nil, :Dir), :[],
                  s(:str, "*"))),
              s(:send,
                s(:lvar, :bin_files), :delete,
                s(:str, "update_rubygems")),
              s(:block,
                s(:send,
                  s(:lvar, :bin_files), :each),
                s(:args,
                  s(:arg, :bin_file)),
                s(:begin,
                  s(:lvasgn, :bin_file_formatted,
                    s(:if,
                      s(:send,
                        s(:send, nil, :options), :[],
                        s(:sym, :format_executable)),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Gem), :default_exec_format), :%,
                        s(:lvar, :bin_file)),
                      s(:lvar, :bin_file))),
                  s(:lvasgn, :dest_file,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :bin_dir),
                      s(:lvar, :bin_file_formatted))),
                  s(:lvasgn, :bin_tmp_file,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send,
                        s(:const, nil, :Dir), :tmpdir),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :bin_file)),
                        s(:str, "."),
                        s(:begin,
                          s(:gvar, :$$))))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :bin,
                          s(:send,
                            s(:const, nil, :File), :readlines,
                            s(:lvar, :bin_file))),
                        s(:send,
                          s(:lvar, :bin), :[]=,
                          s(:int, 0),
                          s(:dstr,
                            s(:str, "#!"),
                            s(:begin,
                              s(:send,
                                s(:const, nil, :Gem), :ruby)),
                            s(:str, "\n"))),
                        s(:block,
                          s(:send,
                            s(:const, nil, :File), :open,
                            s(:lvar, :bin_tmp_file),
                            s(:str, "w")),
                          s(:args,
                            s(:arg, :fp)),
                          s(:send,
                            s(:lvar, :fp), :puts,
                            s(:send,
                              s(:lvar, :bin), :join))),
                        s(:send, nil, :install,
                          s(:lvar, :bin_tmp_file),
                          s(:lvar, :dest_file),
                          s(:hash,
                            s(:pair,
                              s(:sym, :mode),
                              s(:int, 493)))),
                        s(:send,
                          s(:ivar, :@bin_file_names), :<<,
                          s(:lvar, :dest_file))),
                      s(:send, nil, :rm,
                        s(:lvar, :bin_tmp_file)))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :Gem), :win_platform?), nil,
                    s(:next)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :bin_cmd_file,
                          s(:send,
                            s(:const, nil, :File), :join,
                            s(:send,
                              s(:const, nil, :Dir), :tmpdir),
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :bin_file)),
                              s(:str, ".bat")))),
                        s(:block,
                          s(:send,
                            s(:const, nil, :File), :open,
                            s(:lvar, :bin_cmd_file),
                            s(:str, "w")),
                          s(:args,
                            s(:arg, :file)),
                          s(:send,
                            s(:lvar, :file), :puts,
                            s(:dstr,
                              s(:str, "@ECHO OFF\n"),
                              s(:str, "IF NOT \"%~f0\" == \"~f0\" GOTO :WinNT\n"),
                              s(:str, "@\""),
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :File), :basename,
                                    s(:send,
                                      s(:const, nil, :Gem), :ruby)), :chomp,
                                  s(:str, "\""))),
                              s(:str, "\" \""),
                              s(:begin,
                                s(:lvar, :dest_file)),
                              s(:str, "\" %1 %2 %3 %4 %5 %6 %7 %8 %9\n"),
                              s(:str, "GOTO :EOF\n"),
                              s(:str, ":WinNT\n"),
                              s(:str, "@\""),
                              s(:begin,
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :File), :basename,
                                    s(:send,
                                      s(:const, nil, :Gem), :ruby)), :chomp,
                                  s(:str, "\""))),
                              s(:str, "\" \"%~dpn0\" %*\n")))),
                        s(:send, nil, :install,
                          s(:lvar, :bin_cmd_file),
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :dest_file)),
                            s(:str, ".bat")),
                          s(:hash,
                            s(:pair,
                              s(:sym, :mode),
                              s(:int, 493))))),
                      s(:send, nil, :rm,
                        s(:lvar, :bin_cmd_file)))))))))),
      s(:def, :install_file,
        s(:args,
          s(:arg, :file),
          s(:arg, :dest_dir)),
        s(:begin,
          s(:lvasgn, :dest_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :dest_dir),
              s(:lvar, :file))),
          s(:lvasgn, :dest_dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :dest_file))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :dest_dir)), nil,
            s(:send, nil, :mkdir_p,
              s(:lvar, :dest_dir))),
          s(:send, nil, :install,
            s(:lvar, :file),
            s(:lvar, :dest_file),
            s(:hash,
              s(:pair,
                s(:sym, :mode),
                s(:int, 420)))))),
      s(:def, :install_lib,
        s(:args,
          s(:arg, :lib_dir)),
        s(:begin,
          s(:if,
            s(:ivar, :@verbose),
            s(:send, nil, :say,
              s(:str, "Installing RubyGems")), nil),
          s(:lvasgn, :lib_files,
            s(:send, nil, :rb_files_in,
              s(:str, "lib"))),
          s(:lvasgn, :pem_files,
            s(:send, nil, :pem_files_in,
              s(:str, "lib"))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:str, "lib")),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :lib_files), :each),
                s(:args,
                  s(:arg, :lib_file)),
                s(:send, nil, :install_file,
                  s(:lvar, :lib_file),
                  s(:lvar, :lib_dir))),
              s(:block,
                s(:send,
                  s(:lvar, :pem_files), :each),
                s(:args,
                  s(:arg, :pem_file)),
                s(:send, nil, :install_file,
                  s(:lvar, :pem_file),
                  s(:lvar, :lib_dir))))))),
      s(:def, :install_rdoc,
        s(:args),
        s(:begin,
          s(:lvasgn, :gem_doc_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :dir),
              s(:str, "doc"))),
          s(:lvasgn, :rubygems_name,
            s(:dstr,
              s(:str, "rubygems-"),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)))),
          s(:lvasgn, :rubygems_doc_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gem_doc_dir),
              s(:lvar, :rubygems_name))),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const, nil, :Gem), :ensure_gem_subdirectories,
                s(:send,
                  s(:const, nil, :Gem), :dir)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SystemCallError)), nil, nil), nil)),
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :File), :writable?,
                s(:lvar, :gem_doc_dir)),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :rubygems_doc_dir)), :!),
                  s(:send,
                    s(:const, nil, :File), :writable?,
                    s(:lvar, :rubygems_doc_dir))))),
            s(:begin,
              s(:if,
                s(:ivar, :@verbose),
                s(:send, nil, :say,
                  s(:str, "Removing old RubyGems RDoc and ri")), nil),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :[],
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send,
                        s(:const, nil, :Gem), :dir),
                      s(:str, "doc"),
                      s(:str, "rubygems-[0-9]*"))), :each),
                s(:args,
                  s(:arg, :dir)),
                s(:send, nil, :rm_rf,
                  s(:lvar, :dir))),
              s(:send, nil, :require,
                s(:str, "rubygems/rdoc")),
              s(:lvasgn, :fake_spec,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :new,
                  s(:str, "rubygems"),
                  s(:const,
                    s(:const, nil, :Gem), :VERSION))),
              s(:defs,
                s(:lvar, :fake_spec), :full_gem_path,
                s(:args),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:str, "../../../.."),
                  s(:str, "(string)"))),
              s(:lvasgn, :generate_ri,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :document)), :include?,
                  s(:str, "ri"))),
              s(:lvasgn, :generate_rdoc,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :document)), :include?,
                  s(:str, "rdoc"))),
              s(:lvasgn, :rdoc,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :RDoc), :new,
                  s(:lvar, :fake_spec),
                  s(:lvar, :generate_rdoc),
                  s(:lvar, :generate_ri))),
              s(:send,
                s(:lvar, :rdoc), :generate),
              s(:return,
                s(:true))),
            s(:if,
              s(:ivar, :@verbose),
              s(:begin,
                s(:send, nil, :say,
                  s(:dstr,
                    s(:str, "Skipping RDoc generation, "),
                    s(:begin,
                      s(:lvar, :gem_doc_dir)),
                    s(:str, " not writable"))),
                s(:send, nil, :say,
                  s(:str, "Set the GEM_HOME environment variable if you want RDoc generated"))), nil)),
          s(:return,
            s(:false)))),
      s(:def, :make_destination_dirs,
        s(:args,
          s(:arg, :install_destdir)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :lib_dir),
              s(:lvasgn, :bin_dir)),
            s(:send,
              s(:const, nil, :Gem), :default_rubygems_dirs)),
          s(:if,
            s(:lvar, :lib_dir), nil,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :lib_dir),
                s(:lvasgn, :bin_dir)),
              s(:send, nil, :generate_default_dirs,
                s(:lvar, :install_destdir)))),
          s(:send, nil, :mkdir_p,
            s(:lvar, :lib_dir)),
          s(:send, nil, :mkdir_p,
            s(:lvar, :bin_dir)),
          s(:return,
            s(:lvar, :lib_dir),
            s(:lvar, :bin_dir)))),
      s(:def, :generate_default_dirs,
        s(:args,
          s(:arg, :install_destdir)),
        s(:begin,
          s(:lvasgn, :prefix,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :prefix))),
          s(:lvasgn, :site_or_vendor,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :site_or_vendor))),
          s(:if,
            s(:send,
              s(:lvar, :prefix), :empty?),
            s(:begin,
              s(:lvasgn, :lib_dir,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:lvar, :site_or_vendor))),
              s(:lvasgn, :bin_dir,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "bindir")))),
            s(:if,
              s(:and,
                s(:defined?,
                  s(:const, nil, :APPLE_GEM_HOME)),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :prefix), :==,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RbConfig), :CONFIG), :[],
                        s(:str, "libdir"))),
                    s(:send,
                      s(:lvar, :prefix), :==,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:send,
                          s(:const,
                            s(:const, nil, :RbConfig), :CONFIG), :[],
                          s(:str, "libdir")),
                        s(:str, "ruby")))))),
              s(:begin,
                s(:lvasgn, :lib_dir,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:lvar, :site_or_vendor))),
                s(:lvasgn, :bin_dir,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "bindir")))),
              s(:begin,
                s(:lvasgn, :lib_dir,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :prefix),
                    s(:str, "lib"))),
                s(:lvasgn, :bin_dir,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :prefix),
                    s(:str, "bin")))))),
          s(:if,
            s(:send,
              s(:lvar, :install_destdir), :empty?), nil,
            s(:begin,
              s(:lvasgn, :lib_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :install_destdir),
                  s(:send,
                    s(:lvar, :lib_dir), :gsub,
                    s(:regexp,
                      s(:str, "^[a-zA-Z]:"),
                      s(:regopt)),
                    s(:str, "")))),
              s(:lvasgn, :bin_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :install_destdir),
                  s(:send,
                    s(:lvar, :bin_dir), :gsub,
                    s(:regexp,
                      s(:str, "^[a-zA-Z]:"),
                      s(:regopt)),
                    s(:str, "")))))),
          s(:array,
            s(:lvar, :lib_dir),
            s(:lvar, :bin_dir)))),
      s(:def, :pem_files_in,
        s(:args,
          s(:arg, :dir)),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :dir)),
          s(:args),
          s(:send,
            s(:const, nil, :Dir), :[],
            s(:send,
              s(:const, nil, :File), :join,
              s(:str, "**"),
              s(:str, "*pem"))))),
      s(:def, :rb_files_in,
        s(:args,
          s(:arg, :dir)),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :dir)),
          s(:args),
          s(:send,
            s(:const, nil, :Dir), :[],
            s(:send,
              s(:const, nil, :File), :join,
              s(:str, "**"),
              s(:str, "*rb"))))),
      s(:def, :remove_old_bin_files,
        s(:args,
          s(:arg, :bin_dir)),
        s(:begin,
          s(:lvasgn, :old_bin_files,
            s(:hash,
              s(:pair,
                s(:str, "gem_mirror"),
                s(:str, "gem mirror")),
              s(:pair,
                s(:str, "gem_server"),
                s(:str, "gem server")),
              s(:pair,
                s(:str, "gemlock"),
                s(:str, "gem lock")),
              s(:pair,
                s(:str, "gemri"),
                s(:str, "ri")),
              s(:pair,
                s(:str, "gemwhich"),
                s(:str, "gem which")),
              s(:pair,
                s(:str, "index_gem_repository.rb"),
                s(:str, "gem generate_index")))),
          s(:block,
            s(:send,
              s(:lvar, :old_bin_files), :each),
            s(:args,
              s(:arg, :old_bin_file),
              s(:arg, :new_name)),
            s(:begin,
              s(:lvasgn, :old_bin_path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :bin_dir),
                  s(:lvar, :old_bin_file))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :old_bin_path)), nil,
                s(:next)),
              s(:lvasgn, :deprecation_message,
                s(:dstr,
                  s(:str, "`"),
                  s(:begin,
                    s(:lvar, :old_bin_file)),
                  s(:str, "` has been deprecated.  Use `"),
                  s(:begin,
                    s(:lvar, :new_name)),
                  s(:str, "` instead."))),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :old_bin_path),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :fp)),
                s(:send,
                  s(:lvar, :fp), :write,
                  s(:dstr,
                    s(:str, "#!"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby)),
                    s(:str, "\n"),
                    s(:str, "\n"),
                    s(:str, "abort \""),
                    s(:begin,
                      s(:lvar, :deprecation_message)),
                    s(:str, "\"\n")))),
              s(:if,
                s(:send,
                  s(:const, nil, :Gem), :win_platform?), nil,
                s(:next)),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :old_bin_path)),
                    s(:str, ".bat")),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :fp)),
                s(:send,
                  s(:lvar, :fp), :puts,
                  s(:dstr,
                    s(:str, "@ECHO."),
                    s(:begin,
                      s(:lvar, :deprecation_message))))))))),
      s(:def, :remove_old_lib_files,
        s(:args,
          s(:arg, :lib_dir)),
        s(:begin,
          s(:lvasgn, :rubygems_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :lib_dir),
              s(:str, "rubygems"))),
          s(:lvasgn, :lib_files,
            s(:send, nil, :rb_files_in,
              s(:str, "lib/rubygems"))),
          s(:lvasgn, :old_lib_files,
            s(:send, nil, :rb_files_in,
              s(:lvar, :rubygems_dir))),
          s(:lvasgn, :to_remove,
            s(:send,
              s(:lvar, :old_lib_files), :-,
              s(:lvar, :lib_files))),
          s(:block,
            s(:send,
              s(:lvar, :to_remove), :delete_if),
            s(:args,
              s(:arg, :file)),
            s(:send,
              s(:lvar, :file), :start_with?,
              s(:str, "defaults"))),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :rubygems_dir)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :to_remove), :each),
              s(:args,
                s(:arg, :file)),
              s(:begin,
                s(:send,
                  s(:const, nil, :FileUtils), :rm_f,
                  s(:lvar, :file)),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :file)),
                  s(:send, nil, :warn,
                    s(:dstr,
                      s(:str, "unable to remove old file "),
                      s(:begin,
                        s(:lvar, :file)),
                      s(:str, " please remove it by hand"))), nil)))))),
      s(:def, :show_release_notes,
        s(:args),
        s(:begin,
          s(:lvasgn, :release_notes,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Dir), :pwd),
              s(:str, "History.txt"))),
          s(:lvasgn, :release_notes,
            s(:if,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :release_notes)),
              s(:begin,
                s(:lvasgn, :history,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:lvar, :release_notes))),
                s(:if,
                  s(:send,
                    s(:const, nil, :Object), :const_defined?,
                    s(:sym, :Encoding)),
                  s(:send,
                    s(:lvar, :history), :force_encoding,
                    s(:const,
                      s(:const, nil, :Encoding), :UTF_8)), nil),
                s(:lvasgn, :history,
                  s(:send,
                    s(:lvar, :history), :sub,
                    s(:regexp,
                      s(:str, "^# coding:.*?(?=^=)"),
                      s(:regopt, :m)),
                    s(:str, ""))),
                s(:lvasgn, :text,
                  s(:send,
                    s(:lvar, :history), :split,
                    s(:const, nil, :HISTORY_HEADER))),
                s(:send,
                  s(:lvar, :text), :shift),
                s(:lvasgn, :version_lines,
                  s(:send,
                    s(:lvar, :history), :scan,
                    s(:const, nil, :HISTORY_HEADER))),
                s(:lvasgn, :versions,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :history), :scan,
                          s(:const, nil, :VERSION_MATCHER)), :flatten), :map),
                    s(:args,
                      s(:arg, :x)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Version), :new,
                      s(:lvar, :x)))),
                s(:lvasgn, :history_string,
                  s(:str, "")),
                s(:until,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :versions), :length), :==,
                      s(:int, 0)),
                    s(:send,
                      s(:send,
                        s(:lvar, :versions), :shift), :<,
                      s(:send,
                        s(:send, nil, :options), :[],
                        s(:sym, :previous_version)))),
                  s(:op_asgn,
                    s(:lvasgn, :history_string), :+,
                    s(:send,
                      s(:send,
                        s(:lvar, :version_lines), :shift), :+,
                      s(:send,
                        s(:lvar, :text), :shift)))),
                s(:lvar, :history_string)),
              s(:str, "Oh-no! Unable to find release notes!"))),
          s(:send, nil, :say,
            s(:lvar, :release_notes)))),
      s(:def, :uninstall_old_gemcutter,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "rubygems/uninstaller")),
            s(:lvasgn, :ui,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Uninstaller), :new,
                s(:str, "gemcutter"),
                s(:hash,
                  s(:pair,
                    s(:sym, :all),
                    s(:true)),
                  s(:pair,
                    s(:sym, :ignore),
                    s(:true)),
                  s(:pair,
                    s(:sym, :version),
                    s(:str, "< 0.4"))))),
            s(:send,
              s(:lvar, :ui), :uninstall)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Gem), :InstallError)), nil, nil), nil)))))
