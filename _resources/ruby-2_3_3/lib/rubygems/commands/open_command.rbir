s(:begin,
  s(:send, nil, :require,
    s(:str, "English")),
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:send, nil, :require,
    s(:str, "rubygems/util")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :OpenCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "open"),
            s(:str, "Open gem sources in editor")),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-e"),
              s(:str, "--editor EDITOR"),
              s(:const, nil, :String),
              s(:str, "Opens gem sources in EDITOR")),
            s(:args,
              s(:arg, :editor),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :editor),
              s(:or,
                s(:lvar, :editor),
                s(:send, nil, :get_env_editor)))))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEMNAME     name of gem to open in editor")),
      s(:def, :defaults_str,
        s(:args),
        s(:dstr,
          s(:str, "-e "),
          s(:begin,
            s(:send, nil, :get_env_editor)))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "        The open command opens gem in editor and changes current path\n"),
          s(:str, "        to gem's source directory. Editor can be specified with -e option,\n"),
          s(:str, "        otherwise rubygems will look for editor in $EDITOR, $VISUAL and\n"),
          s(:str, "        $GEM_EDITOR variables.\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " GEMNAME [-e EDITOR]"))),
      s(:def, :get_env_editor,
        s(:args),
        s(:or,
          s(:or,
            s(:or,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "GEM_EDITOR")),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "VISUAL"))),
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "EDITOR"))),
          s(:str, "vi"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:ivasgn, :@version,
            s(:or,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :version)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default))),
          s(:ivasgn, :@editor,
            s(:or,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :editor)),
              s(:send, nil, :get_env_editor))),
          s(:lvasgn, :found,
            s(:send, nil, :open_gem,
              s(:send, nil, :get_one_gem_name))),
          s(:if,
            s(:lvar, :found), nil,
            s(:send, nil, :terminate_interaction,
              s(:int, 1))))),
      s(:def, :open_gem,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :spec_for,
              s(:lvar, :name))),
          s(:if,
            s(:lvar, :spec), nil,
            s(:return,
              s(:false))),
          s(:send, nil, :open_editor,
            s(:send,
              s(:lvar, :spec), :full_gem_path)))),
      s(:def, :open_editor,
        s(:args,
          s(:arg, :path)),
        s(:block,
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:lvar, :path)),
          s(:args),
          s(:send, nil, :system,
            s(:splat,
              s(:send,
                s(:send,
                  s(:ivar, :@editor), :split,
                  s(:regexp,
                    s(:str, "\\s+"),
                    s(:regopt))), :+,
                s(:array,
                  s(:lvar, :path))))))),
      s(:def, :spec_for,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :find_all_by_name,
                s(:lvar, :name),
                s(:ivar, :@version)), :last)),
          s(:if,
            s(:lvar, :spec),
            s(:return,
              s(:lvar, :spec)), nil),
          s(:send, nil, :say,
            s(:dstr,
              s(:str, "Unable to find gem '"),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "'"))))))))
