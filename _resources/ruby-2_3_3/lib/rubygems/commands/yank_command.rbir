s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/local_remote_options")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:send, nil, :require,
    s(:str, "rubygems/gemcutter_utilities")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :YankCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :LocalRemoteOptions)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :GemcutterUtilities)),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The yank command removes a gem you pushed to a server from the server's\n"),
          s(:str, "index.\n"),
          s(:str, "\n"),
          s(:str, "Note that if you push a gem to rubygems.org the yank command does not\n"),
          s(:str, "prevent other people from downloading the gem via the download link.\n"),
          s(:str, "\n"),
          s(:str, "Once you have pushed a gem several downloads will happen automatically\n"),
          s(:str, "via the webhooks.  If you accidentally pushed passwords or other sensitive\n"),
          s(:str, "data you will need to change them immediately and yank your gem.\n"),
          s(:str, "\n"),
          s(:str, "If you are yanking a gem due to intellectual property reasons contact\n"),
          s(:str, "http://help.rubygems.org for permanent removal.  Be sure to mention this\n"),
          s(:str, "as the reason for the removal request.\n"))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEM       name of gem")),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " GEM -v VERSION [-p PLATFORM] [--key KEY_NAME] [--host HOST]"))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "yank"),
            s(:str, "Remove a pushed gem from the index")),
          s(:send, nil, :add_version_option,
            s(:str, "remove")),
          s(:send, nil, :add_platform_option,
            s(:str, "remove")),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--host HOST"),
              s(:str, "Yank from another gemcutter-compatible host")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :host),
              s(:lvar, :value))),
          s(:send, nil, :add_key_option),
          s(:ivasgn, :@host,
            s(:nil)))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:ivasgn, :@host,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :host))),
          s(:send, nil, :sign_in,
            s(:ivar, :@host)),
          s(:lvasgn, :version,
            s(:send, nil, :get_version_from_requirements,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :version)))),
          s(:lvasgn, :platform,
            s(:send, nil, :get_platform_from_requirements,
              s(:send, nil, :options))),
          s(:if,
            s(:lvar, :version),
            s(:send, nil, :yank_gem,
              s(:lvar, :version),
              s(:lvar, :platform)),
            s(:begin,
              s(:send, nil, :say,
                s(:dstr,
                  s(:str, "A version argument is required: "),
                  s(:begin,
                    s(:send, nil, :usage)))),
              s(:send, nil, :terminate_interaction))))),
      s(:def, :yank_gem,
        s(:args,
          s(:arg, :version),
          s(:arg, :platform)),
        s(:begin,
          s(:send, nil, :say,
            s(:dstr,
              s(:str, "Yanking gem from "),
              s(:begin,
                s(:send,
                  s(:self), :host)),
              s(:str, "..."))),
          s(:send, nil, :yank_api_request,
            s(:sym, :delete),
            s(:lvar, :version),
            s(:lvar, :platform),
            s(:str, "api/v1/gems/yank")))),
      s(:send, nil, :private),
      s(:def, :yank_api_request,
        s(:args,
          s(:arg, :method),
          s(:arg, :version),
          s(:arg, :platform),
          s(:arg, :api)),
        s(:begin,
          s(:lvasgn, :name,
            s(:send, nil, :get_one_gem_name)),
          s(:lvasgn, :response,
            s(:block,
              s(:send, nil, :rubygems_api_request,
                s(:lvar, :method),
                s(:lvar, :api),
                s(:send, nil, :host)),
              s(:args,
                s(:arg, :request)),
              s(:begin,
                s(:send,
                  s(:lvar, :request), :add_field,
                  s(:str, "Authorization"),
                  s(:send, nil, :api_key)),
                s(:lvasgn, :data,
                  s(:hash,
                    s(:pair,
                      s(:str, "gem_name"),
                      s(:lvar, :name)),
                    s(:pair,
                      s(:str, "version"),
                      s(:lvar, :version)))),
                s(:if,
                  s(:lvar, :platform),
                  s(:send,
                    s(:lvar, :data), :[]=,
                    s(:str, "platform"),
                    s(:lvar, :platform)), nil),
                s(:send,
                  s(:lvar, :request), :set_form_data,
                  s(:lvar, :data))))),
          s(:send, nil, :say,
            s(:send,
              s(:lvar, :response), :body)))),
      s(:def, :get_version_from_requirements,
        s(:args,
          s(:arg, :requirements)),
        s(:rescue,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :requirements), :requirements), :first), :[],
              s(:int, 1)), :version),
          s(:resbody, nil, nil,
            s(:nil)), nil)),
      s(:def, :get_platform_from_requirements,
        s(:args,
          s(:arg, :requirements)),
        s(:if,
          s(:send,
            s(:lvar, :requirements), :key?,
            s(:sym, :added_platform)),
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :platforms), :[],
              s(:int, 1)), :to_s), nil)))))
