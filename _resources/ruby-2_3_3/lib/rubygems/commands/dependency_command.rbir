s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/local_remote_options")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :DependencyCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :LocalRemoteOptions)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "dependency"),
            s(:str, "Show the dependencies of an installed gem"),
            s(:hash,
              s(:pair,
                s(:sym, :version),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default)),
              s(:pair,
                s(:sym, :domain),
                s(:sym, :local)))),
          s(:send, nil, :add_version_option),
          s(:send, nil, :add_platform_option),
          s(:send, nil, :add_prerelease_option),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-R"),
              s(:str, "--[no-]reverse-dependencies"),
              s(:str, "Include reverse dependencies in the output")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :reverse_dependencies),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-p"),
              s(:str, "--pipe"),
              s(:str, "Pipe Format (name --version ver)")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :pipe_format),
              s(:lvar, :value))),
          s(:send, nil, :add_local_remote_options))),
      s(:def, :arguments,
        s(:args),
        s(:str, "REGEXP        show dependencies for gems whose names start with REGEXP")),
      s(:def, :defaults_str,
        s(:args),
        s(:dstr,
          s(:str, "--local --version '"),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:str, "' --no-reverse-dependencies"))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The dependency commands lists which other gems a given gem depends on.  For\n"),
          s(:str, "local gems only the reverse dependencies can be shown (which gems depend on\n"),
          s(:str, "the named gem).\n"),
          s(:str, "\n"),
          s(:str, "The dependency list can be displayed in a format suitable for piping for\n"),
          s(:str, "use with other commands.\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " REGEXP"))),
      s(:def, :fetch_remote_specs,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :fetcher)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :ss)),
            s(:send,
              s(:lvar, :fetcher), :spec_for_dependency,
              s(:lvar, :dependency))),
          s(:block,
            s(:send,
              s(:lvar, :ss), :map),
            s(:args,
              s(:arg, :spec),
              s(:arg, :_)),
            s(:lvar, :spec)))),
      s(:def, :fetch_specs,
        s(:args,
          s(:arg, :name_pattern),
          s(:arg, :dependency)),
        s(:begin,
          s(:lvasgn, :specs,
            s(:array)),
          s(:if,
            s(:send, nil, :local?),
            s(:send,
              s(:lvar, :specs), :concat,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Specification), :stubs), :find_all),
                  s(:args,
                    s(:arg, :spec)),
                  s(:and,
                    s(:send,
                      s(:lvar, :name_pattern), :=~,
                      s(:send,
                        s(:lvar, :spec), :name)),
                    s(:send,
                      s(:send,
                        s(:lvar, :dependency), :requirement), :satisfied_by?,
                      s(:send,
                        s(:lvar, :spec), :version)))), :map,
                s(:block_pass,
                  s(:sym, :to_spec)))), nil),
          s(:if,
            s(:send, nil, :remote?),
            s(:send,
              s(:lvar, :specs), :concat,
              s(:send, nil, :fetch_remote_specs,
                s(:lvar, :dependency))), nil),
          s(:send, nil, :ensure_specs,
            s(:lvar, :specs)),
          s(:send,
            s(:send,
              s(:lvar, :specs), :uniq), :sort))),
      s(:def, :gem_dependency,
        s(:args,
          s(:arg, :pattern),
          s(:arg, :version),
          s(:arg, :prerelease)),
        s(:begin,
          s(:lvasgn, :dependency,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Deprecate), :skip_during),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:lvar, :pattern),
                s(:lvar, :version)))),
          s(:send,
            s(:lvar, :dependency), :prerelease=,
            s(:lvar, :prerelease)),
          s(:lvar, :dependency))),
      s(:def, :display_pipe,
        s(:args,
          s(:arg, :specs)),
        s(:block,
          s(:send,
            s(:lvar, :specs), :each),
          s(:args,
            s(:arg, :spec)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :spec), :dependencies), :empty?), nil,
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :spec), :dependencies), :sort_by),
                  s(:args,
                    s(:arg, :dep)),
                  s(:send,
                    s(:lvar, :dep), :name)), :each),
              s(:args,
                s(:arg, :dep)),
              s(:send, nil, :say,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :dep), :name)),
                  s(:str, " --version '"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :dep), :requirement)),
                  s(:str, "'"))))))),
      s(:def, :display_readable,
        s(:args,
          s(:arg, :specs),
          s(:arg, :reverse)),
        s(:begin,
          s(:lvasgn, :response,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:send,
                s(:lvar, :response), :<<,
                s(:send, nil, :print_dependencies,
                  s(:lvar, :spec))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :reverse), :[],
                    s(:send,
                      s(:lvar, :spec), :full_name)), :empty?), nil,
                s(:begin,
                  s(:send,
                    s(:lvar, :response), :<<,
                    s(:str, "  Used by\n")),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :reverse), :[],
                        s(:send,
                          s(:lvar, :spec), :full_name)), :each),
                    s(:args,
                      s(:arg, :sp),
                      s(:arg, :dep)),
                    s(:send,
                      s(:lvar, :response), :<<,
                      s(:dstr,
                        s(:str, "    "),
                        s(:begin,
                          s(:lvar, :sp)),
                        s(:str, " ("),
                        s(:begin,
                          s(:lvar, :dep)),
                        s(:str, ")\n")))))),
              s(:send,
                s(:lvar, :response), :<<,
                s(:str, "\n")))),
          s(:send, nil, :say,
            s(:lvar, :response)))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:send, nil, :ensure_local_only_reverse_dependencies),
          s(:lvasgn, :pattern,
            s(:send, nil, :name_pattern,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)))),
          s(:lvasgn, :dependency,
            s(:send, nil, :gem_dependency,
              s(:lvar, :pattern),
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :version)),
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :prerelease)))),
          s(:lvasgn, :specs,
            s(:send, nil, :fetch_specs,
              s(:lvar, :pattern),
              s(:lvar, :dependency))),
          s(:lvasgn, :reverse,
            s(:send, nil, :reverse_dependencies,
              s(:lvar, :specs))),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :pipe_format)),
            s(:send, nil, :display_pipe,
              s(:lvar, :specs)),
            s(:send, nil, :display_readable,
              s(:lvar, :specs),
              s(:lvar, :reverse))))),
      s(:def, :ensure_local_only_reverse_dependencies,
        s(:args),
        s(:if,
          s(:and,
            s(:and,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :reverse_dependencies)),
              s(:send, nil, :remote?)),
            s(:send,
              s(:send, nil, :local?), :!)),
          s(:begin,
            s(:send, nil, :alert_error,
              s(:str, "Only reverse dependencies for local gems are supported.")),
            s(:send, nil, :terminate_interaction,
              s(:int, 1))), nil)),
      s(:def, :ensure_specs,
        s(:args,
          s(:arg, :specs)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :specs), :empty?), nil,
            s(:return)),
          s(:lvasgn, :patterns,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)), :join,
              s(:str, ","))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :verbose),
            s(:send, nil, :say,
              s(:dstr,
                s(:str, "No gems found matching "),
                s(:begin,
                  s(:lvar, :patterns)),
                s(:str, " ("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :version))),
                s(:str, ")"))), nil),
          s(:send, nil, :terminate_interaction,
            s(:int, 1)))),
      s(:def, :print_dependencies,
        s(:args,
          s(:arg, :spec),
          s(:optarg, :level,
            s(:int, 0))),
        s(:begin,
          s(:lvasgn, :response,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:send,
            s(:lvar, :response), :<<,
            s(:send,
              s(:send,
                s(:str, "  "), :*,
                s(:lvar, :level)), :+,
              s(:dstr,
                s(:str, "Gem "),
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :full_name)),
                s(:str, "\n")))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :spec), :dependencies), :empty?), nil,
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :spec), :dependencies), :sort_by),
                  s(:args,
                    s(:arg, :dep)),
                  s(:send,
                    s(:lvar, :dep), :name)), :each),
              s(:args,
                s(:arg, :dep)),
              s(:send,
                s(:lvar, :response), :<<,
                s(:send,
                  s(:send,
                    s(:str, "  "), :*,
                    s(:lvar, :level)), :+,
                  s(:dstr,
                    s(:str, "  "),
                    s(:begin,
                      s(:lvar, :dep)),
                    s(:str, "\n")))))),
          s(:lvar, :response))),
      s(:def, :remote_specs,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :fetcher)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :ss),
              s(:lvasgn, :_)),
            s(:send,
              s(:lvar, :fetcher), :spec_for_dependency,
              s(:lvar, :dependency))),
          s(:block,
            s(:send,
              s(:lvar, :ss), :map),
            s(:args,
              s(:arg, :s),
              s(:arg, :o)),
            s(:lvar, :s)))),
      s(:def, :reverse_dependencies,
        s(:args,
          s(:arg, :specs)),
        s(:begin,
          s(:lvasgn, :reverse,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :k)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :k),
                s(:array)))),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :reverse_dependencies)), nil,
            s(:return,
              s(:lvar, :reverse))),
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:lvar, :reverse), :[]=,
              s(:send,
                s(:lvar, :spec), :full_name),
              s(:send, nil, :find_reverse_dependencies,
                s(:lvar, :spec)))),
          s(:lvar, :reverse))),
      s(:def, :find_reverse_dependencies,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :result,
            s(:array)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :each),
            s(:args,
              s(:arg, :sp)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :sp), :dependencies), :each),
              s(:args,
                s(:arg, :dep)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Dependency), :===,
                    s(:lvar, :dep)), nil,
                  s(:lvasgn, :dep,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Dependency), :new,
                      s(:splat,
                        s(:lvar, :dep))))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :spec), :name), :==,
                      s(:send,
                        s(:lvar, :dep), :name)),
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :requirement), :satisfied_by?,
                      s(:send,
                        s(:lvar, :spec), :version))),
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:array,
                      s(:send,
                        s(:lvar, :sp), :full_name),
                      s(:lvar, :dep))), nil)))),
          s(:lvar, :result))),
      s(:send, nil, :private),
      s(:def, :name_pattern,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :args), :empty?),
            s(:send,
              s(:lvar, :args), :<<,
              s(:str, "")), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :args), :length), :==,
                s(:int, 1)),
              s(:send,
                s(:send,
                  s(:lvar, :args), :first), :=~,
                s(:regexp,
                  s(:str, "\\A/(.*)/(i)?\\z"),
                  s(:regopt, :m)))),
            s(:begin,
              s(:lvasgn, :flags,
                s(:if,
                  s(:nth_ref, 2),
                  s(:const,
                    s(:const, nil, :Regexp), :IGNORECASE),
                  s(:nil))),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:nth_ref, 1),
                s(:lvar, :flags))),
            s(:regexp,
              s(:str, "\\A"),
              s(:begin,
                s(:send,
                  s(:const, nil, :Regexp), :union,
                  s(:splat,
                    s(:lvar, :args)))),
              s(:regopt))))))))
