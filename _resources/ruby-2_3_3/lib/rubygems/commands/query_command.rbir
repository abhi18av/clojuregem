s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/local_remote_options")),
  s(:send, nil, :require,
    s(:str, "rubygems/spec_fetcher")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:send, nil, :require,
    s(:str, "rubygems/text")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :QueryCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :Text)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :LocalRemoteOptions)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :name,
            s(:str, "query")),
          s(:optarg, :summary,
            s(:str, "Query gem information in local or remote repositories"))),
        s(:begin,
          s(:super,
            s(:lvar, :name),
            s(:lvar, :summary),
            s(:hash,
              s(:pair,
                s(:sym, :name),
                s(:regexp,
                  s(:regopt))),
              s(:pair,
                s(:sym, :domain),
                s(:sym, :local)),
              s(:pair,
                s(:sym, :details),
                s(:false)),
              s(:pair,
                s(:sym, :versions),
                s(:true)),
              s(:pair,
                s(:sym, :installed),
                s(:nil)),
              s(:pair,
                s(:sym, :version),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-i"),
              s(:str, "--[no-]installed"),
              s(:str, "Check for installed gem")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :installed),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-I"),
              s(:str, "Equivalent to --no-installed")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :installed),
              s(:false))),
          s(:send, nil, :add_version_option,
            s(:send, nil, :command),
            s(:str, "for use with --installed")),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-n"),
              s(:str, "--name-matches REGEXP"),
              s(:str, "Name of gem(s) to query on matches the"),
              s(:str, "provided REGEXP")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :name),
              s(:regexp,
                s(:begin,
                  s(:lvar, :value)),
                s(:regopt, :i)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-d"),
              s(:str, "--[no-]details"),
              s(:str, "Display detailed information of gem(s)")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :details),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]versions"),
              s(:str, "Display only gem names")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :versions),
                s(:lvar, :value)),
              s(:if,
                s(:lvar, :value), nil,
                s(:send,
                  s(:lvar, :options), :[]=,
                  s(:sym, :details),
                  s(:false))))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-a"),
              s(:str, "--all"),
              s(:str, "Display all gem versions")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :all),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-e"),
              s(:str, "--exact"),
              s(:str, "Name of gem(s) to query on matches the"),
              s(:str, "provided STRING")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :exact),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]prerelease"),
              s(:str, "Display prerelease versions")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :prerelease),
              s(:lvar, :value))),
          s(:send, nil, :add_local_remote_options))),
      s(:def, :defaults_str,
        s(:args),
        s(:str, "--local --name-matches // --no-details --versions --no-installed")),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The query command is the basis for the list and search commands.\n"),
          s(:str, "\n"),
          s(:str, "You should really use the list and search commands instead.  This command\n"),
          s(:str, "is too hard to use.\n"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :exit_code,
            s(:int, 0)),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :args)), :to_a), :empty?),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :name)), :source), :empty?)),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :name))),
              s(:lvasgn, :no_name,
                s(:true))),
            s(:if,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :name)), :source), :empty?), :!),
              s(:lvasgn, :name,
                s(:send, nil, :Array,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :name)))),
              s(:begin,
                s(:lvasgn, :args,
                  s(:send,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :args)), :to_a)),
                s(:lvasgn, :name,
                  s(:if,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :exact)),
                    s(:lvar, :args),
                    s(:block,
                      s(:send,
                        s(:lvar, :args), :map),
                      s(:args,
                        s(:arg, :arg)),
                      s(:regexp,
                        s(:begin,
                          s(:lvar, :arg)),
                        s(:regopt, :i)))))))),
          s(:lvasgn, :prerelease,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :prerelease))),
          s(:if,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :installed)), :nil?), nil,
            s(:begin,
              s(:if,
                s(:lvar, :no_name),
                s(:begin,
                  s(:send, nil, :alert_error,
                    s(:str, "You must specify a gem name")),
                  s(:op_asgn,
                    s(:lvasgn, :exit_code), :|,
                    s(:int, 4))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :name), :count), :>,
                    s(:int, 1)),
                  s(:begin,
                    s(:send, nil, :alert_error,
                      s(:str, "You must specify only ONE gem!")),
                    s(:op_asgn,
                      s(:lvasgn, :exit_code), :|,
                      s(:int, 4))),
                  s(:begin,
                    s(:lvasgn, :installed,
                      s(:send, nil, :installed?,
                        s(:send,
                          s(:lvar, :name), :first),
                        s(:send,
                          s(:send, nil, :options), :[],
                          s(:sym, :version)))),
                    s(:if,
                      s(:send,
                        s(:send, nil, :options), :[],
                        s(:sym, :installed)), nil,
                      s(:lvasgn, :installed,
                        s(:send,
                          s(:lvar, :installed), :!))),
                    s(:if,
                      s(:lvar, :installed),
                      s(:send, nil, :say,
                        s(:str, "true")),
                      s(:begin,
                        s(:send, nil, :say,
                          s(:str, "false")),
                        s(:op_asgn,
                          s(:lvasgn, :exit_code), :|,
                          s(:int, 1))))))),
              s(:send, nil, :terminate_interaction,
                s(:lvar, :exit_code)))),
          s(:lvasgn, :names,
            s(:send, nil, :Array,
              s(:lvar, :name))),
          s(:block,
            s(:send,
              s(:lvar, :names), :each),
            s(:args,
              s(:arg, :n)),
            s(:send, nil, :show_gems,
              s(:lvar, :n),
              s(:lvar, :prerelease))))),
      s(:send, nil, :private),
      s(:def, :display_header,
        s(:args,
          s(:arg, :type)),
        s(:if,
          s(:or,
            s(:begin,
              s(:and,
                s(:send,
                  s(:send,
                    s(:send, nil, :ui), :outs), :tty?),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :configuration), :verbose))),
            s(:send, nil, :both?)),
          s(:begin,
            s(:send, nil, :say),
            s(:send, nil, :say,
              s(:dstr,
                s(:str, "*** "),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, " GEMS ***"))),
            s(:send, nil, :say)), nil)),
      s(:def, :show_gems,
        s(:args,
          s(:arg, :name),
          s(:arg, :prerelease)),
        s(:begin,
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:lvasgn, :dep,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Deprecate), :skip_during),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:lvar, :name),
                s(:lvar, :req)))),
          s(:send,
            s(:lvar, :dep), :prerelease=,
            s(:lvar, :prerelease)),
          s(:if,
            s(:send, nil, :local?),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :prerelease),
                  s(:send,
                    s(:send, nil, :both?), :!)),
                s(:send, nil, :alert_warning,
                  s(:str, "prereleases are always shown locally")), nil),
              s(:send, nil, :display_header,
                s(:str, "LOCAL")),
              s(:lvasgn, :specs,
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :find_all),
                  s(:args,
                    s(:arg, :s)),
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :name), :=~,
                      s(:lvar, :name)),
                    s(:send,
                      s(:lvar, :req), :=~,
                      s(:send,
                        s(:lvar, :s), :version))))),
              s(:lvasgn, :spec_tuples,
                s(:block,
                  s(:send,
                    s(:lvar, :specs), :map),
                  s(:args,
                    s(:arg, :spec)),
                  s(:array,
                    s(:send,
                      s(:lvar, :spec), :name_tuple),
                    s(:lvar, :spec)))),
              s(:send, nil, :output_query_results,
                s(:lvar, :spec_tuples))), nil),
          s(:if,
            s(:send, nil, :remote?),
            s(:begin,
              s(:send, nil, :display_header,
                s(:str, "REMOTE")),
              s(:lvasgn, :fetcher,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :SpecFetcher), :fetcher)),
              s(:lvasgn, :type,
                s(:if,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :all)),
                  s(:if,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :prerelease)),
                    s(:sym, :complete),
                    s(:sym, :released)),
                  s(:if,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :prerelease)),
                    s(:sym, :prerelease),
                    s(:sym, :latest)))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :name), :respond_to?,
                    s(:sym, :source)),
                  s(:send,
                    s(:send,
                      s(:lvar, :name), :source), :empty?)),
                s(:lvasgn, :spec_tuples,
                  s(:block,
                    s(:send,
                      s(:lvar, :fetcher), :detect,
                      s(:lvar, :type)),
                    s(:args),
                    s(:true))),
                s(:lvasgn, :spec_tuples,
                  s(:block,
                    s(:send,
                      s(:lvar, :fetcher), :detect,
                      s(:lvar, :type)),
                    s(:args,
                      s(:arg, :name_tuple)),
                    s(:send,
                      s(:lvar, :name), :===,
                      s(:send,
                        s(:lvar, :name_tuple), :name))))),
              s(:send, nil, :output_query_results,
                s(:lvar, :spec_tuples))), nil))),
      s(:def, :installed?,
        s(:args,
          s(:arg, :name),
          s(:optarg, :req,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default))),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :any?),
          s(:args,
            s(:arg, :s)),
          s(:and,
            s(:send,
              s(:send,
                s(:lvar, :s), :name), :=~,
              s(:lvar, :name)),
            s(:send,
              s(:lvar, :req), :=~,
              s(:send,
                s(:lvar, :s), :version))))),
      s(:def, :output_query_results,
        s(:args,
          s(:arg, :spec_tuples)),
        s(:begin,
          s(:lvasgn, :output,
            s(:array)),
          s(:lvasgn, :versions,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :name)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :name),
                s(:array)))),
          s(:block,
            s(:send,
              s(:lvar, :spec_tuples), :each),
            s(:args,
              s(:arg, :spec_tuple),
              s(:arg, :source)),
            s(:send,
              s(:send,
                s(:lvar, :versions), :[],
                s(:send,
                  s(:lvar, :spec_tuple), :name)), :<<,
              s(:array,
                s(:lvar, :spec_tuple),
                s(:lvar, :source)))),
          s(:lvasgn, :versions,
            s(:block,
              s(:send,
                s(:lvar, :versions), :sort_by),
              s(:args,
                s(:mlhs,
                  s(:arg, :n),
                  s(:arg, :_)),
                s(:arg, :_)),
              s(:send,
                s(:lvar, :n), :downcase))),
          s(:send, nil, :output_versions,
            s(:lvar, :output),
            s(:lvar, :versions)),
          s(:send, nil, :say,
            s(:send,
              s(:lvar, :output), :join,
              s(:if,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :details)),
                s(:str, "\n\n"),
                s(:str, "\n")))))),
      s(:def, :output_versions,
        s(:args,
          s(:arg, :output),
          s(:arg, :versions)),
        s(:block,
          s(:send,
            s(:lvar, :versions), :each),
          s(:args,
            s(:arg, :gem_name),
            s(:arg, :matching_tuples)),
          s(:begin,
            s(:lvasgn, :matching_tuples,
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :matching_tuples), :sort_by),
                  s(:args,
                    s(:arg, :n),
                    s(:arg, :_)),
                  s(:send,
                    s(:lvar, :n), :version)), :reverse)),
            s(:lvasgn, :platforms,
              s(:block,
                s(:send,
                  s(:const, nil, :Hash), :new),
                s(:args,
                  s(:arg, :h),
                  s(:arg, :version)),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:lvar, :version),
                  s(:array)))),
            s(:block,
              s(:send,
                s(:lvar, :matching_tuples), :each),
              s(:args,
                s(:arg, :n),
                s(:arg, :_)),
              s(:if,
                s(:send,
                  s(:lvar, :n), :platform),
                s(:send,
                  s(:send,
                    s(:lvar, :platforms), :[],
                    s(:send,
                      s(:lvar, :n), :version)), :<<,
                  s(:send,
                    s(:lvar, :n), :platform)), nil)),
            s(:lvasgn, :seen,
              s(:hash)),
            s(:block,
              s(:send,
                s(:lvar, :matching_tuples), :delete_if),
              s(:args,
                s(:arg, :n),
                s(:arg, :_)),
              s(:if,
                s(:send,
                  s(:lvar, :seen), :[],
                  s(:send,
                    s(:lvar, :n), :version)),
                s(:true),
                s(:begin,
                  s(:send,
                    s(:lvar, :seen), :[]=,
                    s(:send,
                      s(:lvar, :n), :version),
                    s(:true)),
                  s(:false)))),
            s(:send,
              s(:lvar, :output), :<<,
              s(:send, nil, :make_entry,
                s(:lvar, :matching_tuples),
                s(:lvar, :platforms)))))),
      s(:def, :entry_details,
        s(:args,
          s(:arg, :entry),
          s(:arg, :detail_tuple),
          s(:arg, :specs),
          s(:arg, :platforms)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :details)), nil,
            s(:return)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name_tuple),
              s(:lvasgn, :spec)),
            s(:lvar, :detail_tuple)),
          s(:if,
            s(:send,
              s(:lvar, :spec), :respond_to?,
              s(:sym, :fetch_spec)),
            s(:lvasgn, :spec,
              s(:send,
                s(:lvar, :spec), :fetch_spec,
                s(:lvar, :name_tuple))), nil),
          s(:send,
            s(:lvar, :entry), :<<,
            s(:str, "\n")),
          s(:send, nil, :spec_platforms,
            s(:lvar, :entry),
            s(:lvar, :platforms)),
          s(:send, nil, :spec_authors,
            s(:lvar, :entry),
            s(:lvar, :spec)),
          s(:send, nil, :spec_homepage,
            s(:lvar, :entry),
            s(:lvar, :spec)),
          s(:send, nil, :spec_license,
            s(:lvar, :entry),
            s(:lvar, :spec)),
          s(:send, nil, :spec_loaded_from,
            s(:lvar, :entry),
            s(:lvar, :spec),
            s(:lvar, :specs)),
          s(:send, nil, :spec_summary,
            s(:lvar, :entry),
            s(:lvar, :spec)))),
      s(:def, :entry_versions,
        s(:args,
          s(:arg, :entry),
          s(:arg, :name_tuples),
          s(:arg, :platforms)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :versions)), nil,
            s(:return)),
          s(:lvasgn, :list,
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :platforms), :empty?),
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :details))),
              s(:send,
                s(:block,
                  s(:send,
                    s(:lvar, :name_tuples), :map),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :n), :version)), :uniq),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :platforms), :sort), :reverse), :map),
                s(:args,
                  s(:arg, :version),
                  s(:arg, :pls)),
                s(:if,
                  s(:send,
                    s(:lvar, :pls), :==,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Platform), :RUBY))),
                  s(:lvar, :version),
                  s(:begin,
                    s(:lvasgn, :ruby,
                      s(:send,
                        s(:lvar, :pls), :delete,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :Platform), :RUBY))),
                    s(:lvasgn, :platform_list,
                      s(:send,
                        s(:array,
                          s(:lvar, :ruby),
                          s(:splat,
                            s(:send,
                              s(:lvar, :pls), :sort))), :compact)),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :version)),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :platform_list), :join,
                          s(:str, " "))))))))),
          s(:send,
            s(:lvar, :entry), :<<,
            s(:dstr,
              s(:str, " ("),
              s(:begin,
                s(:send,
                  s(:lvar, :list), :join,
                  s(:str, ", "))),
              s(:str, ")"))))),
      s(:def, :make_entry,
        s(:args,
          s(:arg, :entry_tuples),
          s(:arg, :platforms)),
        s(:begin,
          s(:lvasgn, :detail_tuple,
            s(:send,
              s(:lvar, :entry_tuples), :first)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name_tuples),
              s(:lvasgn, :specs)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :entry_tuples), :flatten), :partition),
              s(:args,
                s(:arg, :item)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :NameTuple), :===,
                s(:lvar, :item)))),
          s(:lvasgn, :entry,
            s(:array,
              s(:send,
                s(:send,
                  s(:lvar, :name_tuples), :first), :name))),
          s(:send, nil, :entry_versions,
            s(:lvar, :entry),
            s(:lvar, :name_tuples),
            s(:lvar, :platforms)),
          s(:send, nil, :entry_details,
            s(:lvar, :entry),
            s(:lvar, :detail_tuple),
            s(:lvar, :specs),
            s(:lvar, :platforms)),
          s(:send,
            s(:lvar, :entry), :join))),
      s(:def, :spec_authors,
        s(:args,
          s(:arg, :entry),
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :authors,
            s(:send,
              s(:dstr,
                s(:str, "Author"),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :spec), :authors), :length), :>,
                      s(:int, 1)),
                    s(:str, "s"),
                    s(:str, ""))),
                s(:str, ": ")), :dup)),
          s(:send,
            s(:lvar, :authors), :<<,
            s(:send,
              s(:send,
                s(:lvar, :spec), :authors), :join,
              s(:str, ", "))),
          s(:send,
            s(:lvar, :entry), :<<,
            s(:send, nil, :format_text,
              s(:lvar, :authors),
              s(:int, 68),
              s(:int, 4))))),
      s(:def, :spec_homepage,
        s(:args,
          s(:arg, :entry),
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :homepage), :nil?),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :homepage), :empty?)),
            s(:return), nil),
          s(:send,
            s(:send,
              s(:lvar, :entry), :<<,
              s(:str, "\n")), :<<,
            s(:send, nil, :format_text,
              s(:dstr,
                s(:str, "Homepage: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :homepage))),
              s(:int, 68),
              s(:int, 4))))),
      s(:def, :spec_license,
        s(:args,
          s(:arg, :entry),
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :license), :nil?),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :license), :empty?)),
            s(:return), nil),
          s(:lvasgn, :licenses,
            s(:send,
              s(:dstr,
                s(:str, "License"),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :spec), :licenses), :length), :>,
                      s(:int, 1)),
                    s(:str, "s"),
                    s(:str, ""))),
                s(:str, ": ")), :dup)),
          s(:send,
            s(:lvar, :licenses), :<<,
            s(:send,
              s(:send,
                s(:lvar, :spec), :licenses), :join,
              s(:str, ", "))),
          s(:send,
            s(:send,
              s(:lvar, :entry), :<<,
              s(:str, "\n")), :<<,
            s(:send, nil, :format_text,
              s(:lvar, :licenses),
              s(:int, 68),
              s(:int, 4))))),
      s(:def, :spec_loaded_from,
        s(:args,
          s(:arg, :entry),
          s(:arg, :spec),
          s(:arg, :specs)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :spec), :loaded_from), nil,
            s(:return)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :specs), :length), :==,
              s(:int, 1)),
            s(:begin,
              s(:lvasgn, :default,
                s(:if,
                  s(:send,
                    s(:lvar, :spec), :default_gem?),
                  s(:str, " (default)"),
                  s(:nil))),
              s(:send,
                s(:send,
                  s(:lvar, :entry), :<<,
                  s(:str, "\n")), :<<,
                s(:dstr,
                  s(:str, "    Installed at"),
                  s(:begin,
                    s(:lvar, :default)),
                  s(:str, ": "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :spec), :base_dir))))),
            s(:begin,
              s(:lvasgn, :label,
                s(:str, "Installed at")),
              s(:block,
                s(:send,
                  s(:lvar, :specs), :each),
                s(:args,
                  s(:arg, :s)),
                s(:begin,
                  s(:lvasgn, :version,
                    s(:send,
                      s(:send,
                        s(:lvar, :s), :version), :to_s)),
                  s(:if,
                    s(:send,
                      s(:lvar, :s), :default_gem?),
                    s(:send,
                      s(:lvar, :version), :<<,
                      s(:str, ", default")), nil),
                  s(:send,
                    s(:send,
                      s(:lvar, :entry), :<<,
                      s(:str, "\n")), :<<,
                    s(:dstr,
                      s(:str, "    "),
                      s(:begin,
                        s(:lvar, :label)),
                      s(:str, " ("),
                      s(:begin,
                        s(:lvar, :version)),
                      s(:str, "): "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :base_dir)))),
                  s(:lvasgn, :label,
                    s(:send,
                      s(:str, " "), :*,
                      s(:send,
                        s(:lvar, :label), :length))))))))),
      s(:def, :spec_platforms,
        s(:args,
          s(:arg, :entry),
          s(:arg, :platforms)),
        s(:begin,
          s(:lvasgn, :non_ruby,
            s(:block,
              s(:send,
                s(:lvar, :platforms), :any?),
              s(:args,
                s(:arg, :_),
                s(:arg, :pls)),
              s(:block,
                s(:send,
                  s(:lvar, :pls), :any?),
                s(:args,
                  s(:arg, :pl)),
                s(:send,
                  s(:lvar, :pl), :!=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY))))),
          s(:if,
            s(:lvar, :non_ruby), nil,
            s(:return)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :platforms), :length), :==,
              s(:int, 1)),
            s(:begin,
              s(:lvasgn, :title,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :platforms), :values), :length), :==,
                    s(:int, 1)),
                  s(:str, "Platform"),
                  s(:str, "Platforms"))),
              s(:send,
                s(:lvar, :entry), :<<,
                s(:dstr,
                  s(:str, "    "),
                  s(:begin,
                    s(:lvar, :title)),
                  s(:str, ": "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :platforms), :values), :sort), :join,
                      s(:str, ", "))),
                  s(:str, "\n")))),
            s(:begin,
              s(:send,
                s(:lvar, :entry), :<<,
                s(:str, "    Platforms:\n")),
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :platforms), :sort_by),
                    s(:args,
                      s(:arg, :version)),
                    s(:lvar, :version)), :each),
                s(:args,
                  s(:arg, :version),
                  s(:arg, :pls)),
                s(:begin,
                  s(:lvasgn, :label,
                    s(:dstr,
                      s(:str, "        "),
                      s(:begin,
                        s(:lvar, :version)),
                      s(:str, ": "))),
                  s(:lvasgn, :data,
                    s(:send, nil, :format_text,
                      s(:send,
                        s(:send,
                          s(:lvar, :pls), :sort), :join,
                        s(:str, ", ")),
                      s(:int, 68),
                      s(:send,
                        s(:lvar, :label), :length))),
                  s(:send,
                    s(:lvar, :data), :[]=,
                    s(:int, 0),
                    s(:send,
                      s(:lvar, :label), :length),
                    s(:lvar, :label)),
                  s(:send,
                    s(:send,
                      s(:lvar, :entry), :<<,
                      s(:lvar, :data)), :<<,
                    s(:str, "\n")))))))),
      s(:def, :spec_summary,
        s(:args,
          s(:arg, :entry),
          s(:arg, :spec)),
        s(:send,
          s(:send,
            s(:lvar, :entry), :<<,
            s(:str, "\n\n")), :<<,
          s(:send, nil, :format_text,
            s(:send,
              s(:lvar, :spec), :summary),
            s(:int, 68),
            s(:int, 4)))))))
