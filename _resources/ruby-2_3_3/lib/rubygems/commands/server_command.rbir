s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/server")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :ServerCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "server"),
            s(:str, "Documentation and gem repository HTTP server"),
            s(:hash,
              s(:pair,
                s(:sym, :port),
                s(:int, 8808)),
              s(:pair,
                s(:sym, :gemdir),
                s(:array)),
              s(:pair,
                s(:sym, :daemon),
                s(:false)))),
          s(:block,
            s(:send,
              s(:const, nil, :OptionParser), :accept,
              s(:sym, :Port)),
            s(:args,
              s(:arg, :port)),
            s(:if,
              s(:send,
                s(:lvar, :port), :=~,
                s(:regexp,
                  s(:str, "\\A\\d+\\z"),
                  s(:regopt))),
              s(:begin,
                s(:lvasgn, :port,
                  s(:send, nil, :Integer,
                    s(:lvar, :port))),
                s(:if,
                  s(:send,
                    s(:lvar, :port), :>,
                    s(:int, 65535)),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidArgument),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :port)),
                      s(:str, ": not a port number"))), nil),
                s(:lvar, :port)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :Socket), :getservbyname,
                    s(:lvar, :port)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SocketError)), nil,
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :OptionParser), :InvalidArgument),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :port)),
                        s(:str, ": no such named service")))), nil)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-p"),
              s(:str, "--port=PORT"),
              s(:sym, :Port),
              s(:str, "port to listen on")),
            s(:args,
              s(:arg, :port),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :port),
              s(:lvar, :port))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-d"),
              s(:str, "--dir=GEMDIR"),
              s(:str, "directories from which to serve gems"),
              s(:str, "multiple directories may be provided")),
            s(:args,
              s(:arg, :gemdir),
              s(:arg, :options)),
            s(:send,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :gemdir)), :<<,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :gemdir)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]daemon"),
              s(:str, "run as a daemon")),
            s(:args,
              s(:arg, :daemon),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :daemon),
              s(:lvar, :daemon))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-b"),
              s(:str, "--bind=HOST,HOST"),
              s(:str, "addresses to bind"),
              s(:const, nil, :Array)),
            s(:args,
              s(:arg, :address),
              s(:arg, :options)),
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :addresses)),
                s(:array)),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :addresses)), :push,
                s(:splat,
                  s(:lvar, :address))))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-l"),
              s(:str, "--launch[=COMMAND]"),
              s(:str, "launches a browser window"),
              s(:str, "COMMAND defaults to 'start' on Windows"),
              s(:str, "and 'open' on all other platforms")),
            s(:args,
              s(:arg, :launch),
              s(:arg, :options)),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :launch),
                s(:if,
                  s(:send,
                    s(:const, nil, :Gem), :win_platform?),
                  s(:str, "start"),
                  s(:str, "open"))),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :launch),
                s(:lvar, :launch)))))),
      s(:def, :defaults_str,
        s(:args),
        s(:dstr,
          s(:str, "--port 8808 --dir "),
          s(:begin,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:str, " --no-daemon"))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The server command starts up a web server that hosts the RDoc for your\n"),
          s(:str, "installed gems and can operate as a server for installation of gems on other\n"),
          s(:str, "machines.\n"),
          s(:str, "\n"),
          s(:str, "The cache files for installed gems must exist to use the server as a source\n"),
          s(:str, "for gem installation.\n"),
          s(:str, "\n"),
          s(:str, "To install gems from a running server, use `gem install GEMNAME --source\n"),
          s(:str, "http://gem_server_host:8808`\n"),
          s(:str, "\n"),
          s(:str, "You can set up a shortcut to gem server documentation using the URL:\n"),
          s(:str, "\n"),
          s(:str, "  http://localhost:8808/rdoc?q=%s - Firefox\n"),
          s(:str, "  http://localhost:8808/rdoc?q=* - LaunchBar\n"),
          s(:str, "\n"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :gemdir)), :empty?),
            s(:send,
              s(:send, nil, :options), :[]=,
              s(:sym, :gemdir),
              s(:send,
                s(:const, nil, :Gem), :path)), nil),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Server), :run,
            s(:send, nil, :options)))))))
