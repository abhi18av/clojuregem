s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :HelpCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:casgn, nil, :EXAMPLES,
        s(:dstr,
          s(:str, "Some examples of 'gem' usage.\n"),
          s(:str, "\n"),
          s(:str, "* Install 'rake', either from local directory or remote server:\n"),
          s(:str, "\n"),
          s(:str, "    gem install rake\n"),
          s(:str, "\n"),
          s(:str, "* Install 'rake', only from remote server:\n"),
          s(:str, "\n"),
          s(:str, "    gem install rake --remote\n"),
          s(:str, "\n"),
          s(:str, "* Install 'rake', but only version 0.3.1, even if dependencies\n"),
          s(:str, "  are not met, and into a user-specific directory:\n"),
          s(:str, "\n"),
          s(:str, "    gem install rake --version 0.3.1 --force --user-install\n"),
          s(:str, "\n"),
          s(:str, "* List local gems whose name begins with 'D':\n"),
          s(:str, "\n"),
          s(:str, "    gem list D\n"),
          s(:str, "\n"),
          s(:str, "* List local and remote gems whose name contains 'log':\n"),
          s(:str, "\n"),
          s(:str, "    gem search log --both\n"),
          s(:str, "\n"),
          s(:str, "* List only remote gems whose name contains 'log':\n"),
          s(:str, "\n"),
          s(:str, "    gem search log --remote\n"),
          s(:str, "\n"),
          s(:str, "* Uninstall 'rake':\n"),
          s(:str, "\n"),
          s(:str, "    gem uninstall rake\n"),
          s(:str, "\n"),
          s(:str, "* Create a gem:\n"),
          s(:str, "\n"),
          s(:str, "    See http://guides.rubygems.org/make-your-own-gem/\n"),
          s(:str, "\n"),
          s(:str, "* See information about RubyGems:\n"),
          s(:str, "\n"),
          s(:str, "    gem environment\n"),
          s(:str, "\n"),
          s(:str, "* Update all gems on your system:\n"),
          s(:str, "\n"),
          s(:str, "    gem update\n"),
          s(:str, "\n"),
          s(:str, "* Update your local version of RubyGems\n"),
          s(:str, "\n"),
          s(:str, "    gem update --system\n"))),
      s(:casgn, nil, :GEM_DEPENDENCIES,
        s(:dstr,
          s(:str, "A gem dependencies file allows installation of a consistent set of gems across\n"),
          s(:str, "multiple environments.  The RubyGems implementation is designed to be\n"),
          s(:str, "compatible with Bundler's Gemfile format.  You can see additional\n"),
          s(:str, "documentation on the format at:\n"),
          s(:str, "\n"),
          s(:str, "  http://bundler.io\n"),
          s(:str, "\n"),
          s(:str, "RubyGems automatically looks for these gem dependencies files:\n"),
          s(:str, "\n"),
          s(:str, "* gem.deps.rb\n"),
          s(:str, "* Gemfile\n"),
          s(:str, "* Isolate\n"),
          s(:str, "\n"),
          s(:str, "These files are looked up automatically using `gem install -g`, or you can\n"),
          s(:str, "specify a custom file.\n"),
          s(:str, "\n"),
          s(:str, "When the RUBYGEMS_GEMDEPS environment variable is set to a gem dependencies\n"),
          s(:str, "file the gems from that file will be activated at startup time.  Set it to a\n"),
          s(:str, "specific filename or to \"-\" to have RubyGems automatically discover the gem\n"),
          s(:str, "dependencies file by walking up from the current directory.\n"),
          s(:str, "\n"),
          s(:str, "You can also activate gem dependencies at program startup using\n"),
          s(:str, "Gem.use_gemdeps.\n"),
          s(:str, "\n"),
          s(:str, "NOTE: Enabling automatic discovery on multiuser systems can lead to execution\n"),
          s(:str, "of arbitrary code when used from directories outside your control.\n"),
          s(:str, "\n"),
          s(:str, "Gem Dependencies\n"),
          s(:str, "================\n"),
          s(:str, "\n"),
          s(:str, "Use #gem to declare which gems you directly depend upon:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'rake'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a specific set of versions:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'rake', '~> 10.3', '>= 10.3.2'\n"),
          s(:str, "\n"),
          s(:str, "RubyGems will require the gem name when activating the gem using\n"),
          s(:str, "the RUBYGEMS_GEMDEPS environment variable or Gem::use_gemdeps.  Use the\n"),
          s(:str, "require: option to override this behavior if the gem does not have a file of\n"),
          s(:str, "that name or you don't want to require those files:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'my_gem', require: 'other_file'\n"),
          s(:str, "\n"),
          s(:str, "To prevent RubyGems from requiring any files use:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'my_gem', require: false\n"),
          s(:str, "\n"),
          s(:str, "To load dependencies from a .gemspec file:\n"),
          s(:str, "\n"),
          s(:str, "  gemspec\n"),
          s(:str, "\n"),
          s(:str, "RubyGems looks for the first .gemspec file in the current directory.  To\n"),
          s(:str, "override this use the name: option:\n"),
          s(:str, "\n"),
          s(:str, "  gemspec name: 'specific_gem'\n"),
          s(:str, "\n"),
          s(:str, "To look in a different directory use the path: option:\n"),
          s(:str, "\n"),
          s(:str, "  gemspec name: 'specific_gem', path: 'gemspecs'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a gem unpacked into a local directory:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'modified_gem', path: 'vendor/modified_gem'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a gem from git:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'private_gem', git: 'git@my.company.example:private_gem.git'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a gem from github:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'private_gem', github: 'my_company/private_gem'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a gem from a github gist:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'bang', gist: '1232884'\n"),
          s(:str, "\n"),
          s(:str, "Git, github and gist support the ref:, branch: and tag: options to specify a\n"),
          s(:str, "commit reference or hash, branch or tag respectively to use for the gem.\n"),
          s(:str, "\n"),
          s(:str, "Setting the submodules: option to true for git, github and gist dependencies\n"),
          s(:str, "causes fetching of submodules when fetching the repository.\n"),
          s(:str, "\n"),
          s(:str, "You can depend on multiple gems from a single repository with the git method:\n"),
          s(:str, "\n"),
          s(:str, "  git 'https://github.com/rails/rails.git' do\n"),
          s(:str, "    gem 'activesupport'\n"),
          s(:str, "    gem 'activerecord'\n"),
          s(:str, "  end\n"),
          s(:str, "\n"),
          s(:str, "Gem Sources\n"),
          s(:str, "===========\n"),
          s(:str, "\n"),
          s(:str, "RubyGems uses the default sources for regular `gem install` for gem\n"),
          s(:str, "dependencies files.  Unlike bundler, you do need to specify a source.\n"),
          s(:str, "\n"),
          s(:str, "You can override the sources used for downloading gems with:\n"),
          s(:str, "\n"),
          s(:str, "  source 'https://gem_server.example'\n"),
          s(:str, "\n"),
          s(:str, "You may specify multiple sources.  Unlike bundler the prepend: option is not\n"),
          s(:str, "supported. Sources are used in-order, to prepend a source place it at the\n"),
          s(:str, "front of the list.\n"),
          s(:str, "\n"),
          s(:str, "Gem Platform\n"),
          s(:str, "============\n"),
          s(:str, "\n"),
          s(:str, "You can restrict gem dependencies to specific platforms with the #platform\n"),
          s(:str, "and #platforms methods:\n"),
          s(:str, "\n"),
          s(:str, "  platform :ruby_21 do\n"),
          s(:str, "    gem 'debugger'\n"),
          s(:str, "  end\n"),
          s(:str, "\n"),
          s(:str, "See the bundler Gemfile manual page for a list of platforms supported in a gem\n"),
          s(:str, "dependencies file.:\n"),
          s(:str, "\n"),
          s(:str, "  http://bundler.io/v1.6/man/gemfile.5.html\n"),
          s(:str, "\n"),
          s(:str, "Ruby Version and Engine Dependency\n"),
          s(:str, "==================================\n"),
          s(:str, "\n"),
          s(:str, "You can specify the version, engine and engine version of ruby to use with\n"),
          s(:str, "your gem dependencies file.  If you are not running the specified version\n"),
          s(:str, "RubyGems will raise an exception.\n"),
          s(:str, "\n"),
          s(:str, "To depend on a specific version of ruby:\n"),
          s(:str, "\n"),
          s(:str, "  ruby '2.1.2'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a specific ruby engine:\n"),
          s(:str, "\n"),
          s(:str, "  ruby '1.9.3', engine: 'jruby'\n"),
          s(:str, "\n"),
          s(:str, "To depend on a specific ruby engine version:\n"),
          s(:str, "\n"),
          s(:str, "  ruby '1.9.3', engine: 'jruby', engine_version: '1.7.11'\n"),
          s(:str, "\n"),
          s(:str, "Grouping Dependencies\n"),
          s(:str, "=====================\n"),
          s(:str, "\n"),
          s(:str, "Gem dependencies may be placed in groups that can be excluded from install.\n"),
          s(:str, "Dependencies required for development or testing of your code may be excluded\n"),
          s(:str, "when installed in a production environment.\n"),
          s(:str, "\n"),
          s(:str, "A #gem dependency may be placed in a group using the group: option:\n"),
          s(:str, "\n"),
          s(:str, "  gem 'minitest', group: :test\n"),
          s(:str, "\n"),
          s(:str, "To install dependencies from a gemfile without specific groups use the\n"),
          s(:str, "`--without` option for `gem install -g`:\n"),
          s(:str, "\n"),
          s(:str, "  $ gem install -g --without test\n"),
          s(:str, "\n"),
          s(:str, "The group: option also accepts multiple groups if the gem fits in multiple\n"),
          s(:str, "categories.\n"),
          s(:str, "\n"),
          s(:str, "Multiple groups may be excluded during install by comma-separating the groups for `--without` or by specifying `--without` multiple times.\n"),
          s(:str, "\n"),
          s(:str, "The #group method can also be used to place gems in groups:\n"),
          s(:str, "\n"),
          s(:str, "  group :test do\n"),
          s(:str, "    gem 'minitest'\n"),
          s(:str, "    gem 'minitest-emoji'\n"),
          s(:str, "  end\n"),
          s(:str, "\n"),
          s(:str, "The #group method allows multiple groups.\n"),
          s(:str, "\n"),
          s(:str, "The #gemspec development dependencies are placed in the :development group by\n"),
          s(:str, "default.  This may be overridden with the :development_group option:\n"),
          s(:str, "\n"),
          s(:str, "  gemspec development_group: :other\n"),
          s(:str, "\n"))),
      s(:casgn, nil, :PLATFORMS,
        s(:dstr,
          s(:str, "RubyGems platforms are composed of three parts, a CPU, an OS, and a\n"),
          s(:str, "version.  These values are taken from values in rbconfig.rb.  You can view\n"),
          s(:str, "your current platform by running `gem environment`.\n"),
          s(:str, "\n"),
          s(:str, "RubyGems matches platforms as follows:\n"),
          s(:str, "\n"),
          s(:str, "  * The CPU must match exactly unless one of the platforms has\n"),
          s(:str, "    \"universal\" as the CPU or the local CPU starts with \"arm\" and the gem's\n"),
          s(:str, "    CPU is exactly \"arm\" (for gems that support generic ARM architecture).\n"),
          s(:str, "  * The OS must match exactly.\n"),
          s(:str, "  * The versions must match exactly unless one of the versions is nil.\n"),
          s(:str, "\n"),
          s(:str, "For commands that install, uninstall and list gems, you can override what\n"),
          s(:str, "RubyGems thinks your platform is with the --platform option.  The platform\n"),
          s(:str, "you pass must match \"\#{cpu}-\#{os}\" or \"\#{cpu}-\#{os}-\#{version}\".  On mswin\n"),
          s(:str, "platforms, the version is the compiler version, not the OS version.  (Ruby\n"),
          s(:str, "compiled with VC6 uses \"60\" as the compiler version, VC8 uses \"80\".)\n"),
          s(:str, "\n"),
          s(:str, "For the ARM architecture, gems with a platform of \"arm-linux\" should run on a\n"),
          s(:str, "reasonable set of ARM CPUs and not depend on instructions present on a limited\n"),
          s(:str, "subset of the architecture.  For example, the binary should run on platforms\n"),
          s(:str, "armv5, armv6hf, armv6l, armv7, etc.  If you use the \"arm-linux\" platform\n"),
          s(:str, "please test your gem on a variety of ARM hardware before release to ensure it\n"),
          s(:str, "functions correctly.\n"),
          s(:str, "\n"),
          s(:str, "Example platforms:\n"),
          s(:str, "\n"),
          s(:str, "  x86-freebsd        # Any FreeBSD version on an x86 CPU\n"),
          s(:str, "  universal-darwin-8 # Darwin 8 only gems that run on any CPU\n"),
          s(:str, "  x86-mswin32-80     # Windows gems compiled with VC8\n"),
          s(:str, "  armv7-linux        # Gem complied for an ARMv7 CPU running linux\n"),
          s(:str, "  arm-linux          # Gem compiled for any ARM CPU running linux\n"),
          s(:str, "\n"),
          s(:str, "When building platform gems, set the platform in the gem specification to\n"),
          s(:str, "Gem::Platform::CURRENT.  This will correctly mark the gem with your ruby's\n"),
          s(:str, "platform.\n"))),
      s(:casgn, nil, :SUBCOMMANDS,
        s(:array,
          s(:array,
            s(:str, "commands"),
            s(:sym, :show_commands)),
          s(:array,
            s(:str, "options"),
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Command), :HELP)),
          s(:array,
            s(:str, "examples"),
            s(:const, nil, :EXAMPLES)),
          s(:array,
            s(:str, "gem_dependencies"),
            s(:const, nil, :GEM_DEPENDENCIES)),
          s(:array,
            s(:str, "platforms"),
            s(:const, nil, :PLATFORMS)))),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "help"),
            s(:str, "Provide help on the 'gem' command")),
          s(:ivasgn, :@command_manager,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :CommandManager), :instance)))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " ARGUMENT"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :arg,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)), :[],
              s(:int, 0))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :help)),
            s(:block,
              s(:send,
                s(:const, nil, :SUBCOMMANDS), :find),
              s(:args,
                s(:arg, :command)),
              s(:send, nil, :begins?,
                s(:lvar, :command),
                s(:lvar, :arg)))),
          s(:if,
            s(:lvar, :help),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Symbol), :===,
                  s(:lvar, :help)),
                s(:send, nil, :send,
                  s(:lvar, :help)),
                s(:send, nil, :say,
                  s(:lvar, :help))),
              s(:return)), nil),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :help)),
            s(:send, nil, :show_help),
            s(:if,
              s(:lvar, :arg),
              s(:send, nil, :show_command_help,
                s(:lvar, :arg)),
              s(:send, nil, :say,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Command), :HELP)))))),
      s(:def, :show_commands,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:array)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "GEM commands are:")),
          s(:send,
            s(:lvar, :out), :<<,
            s(:nil)),
          s(:lvasgn, :margin_width,
            s(:int, 4)),
          s(:lvasgn, :desc_width,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@command_manager), :command_names), :map),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :n), :size)), :max), :+,
              s(:int, 4))),
          s(:lvasgn, :summary_width,
            s(:send,
              s(:send,
                s(:int, 80), :-,
                s(:lvar, :margin_width)), :-,
              s(:lvar, :desc_width))),
          s(:lvasgn, :wrap_indent,
            s(:send,
              s(:str, " "), :*,
              s(:begin,
                s(:send,
                  s(:lvar, :margin_width), :+,
                  s(:lvar, :desc_width))))),
          s(:lvasgn, :format,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:str, " "), :*,
                  s(:lvar, :margin_width))),
              s(:str, "%-"),
              s(:begin,
                s(:lvar, :desc_width)),
              s(:str, "s%s"))),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@command_manager), :command_names), :each),
            s(:args,
              s(:arg, :cmd_name)),
            s(:begin,
              s(:lvasgn, :command,
                s(:send,
                  s(:ivar, :@command_manager), :[],
                  s(:lvar, :cmd_name))),
              s(:lvasgn, :summary,
                s(:if,
                  s(:lvar, :command),
                  s(:send,
                    s(:lvar, :command), :summary),
                  s(:dstr,
                    s(:str, "[No command found for "),
                    s(:begin,
                      s(:lvar, :cmd_name)),
                    s(:str, "]")))),
              s(:lvasgn, :summary,
                s(:send,
                  s(:send, nil, :wrap,
                    s(:lvar, :summary),
                    s(:lvar, :summary_width)), :split,
                  s(:str, "\n"))),
              s(:send,
                s(:lvar, :out), :<<,
                s(:send, nil, :sprintf,
                  s(:lvar, :format),
                  s(:lvar, :cmd_name),
                  s(:send,
                    s(:lvar, :summary), :shift))),
              s(:until,
                s(:send,
                  s(:lvar, :summary), :empty?),
                s(:send,
                  s(:lvar, :out), :<<,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :wrap_indent)),
                    s(:begin,
                      s(:send,
                        s(:lvar, :summary), :shift))))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:nil)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "For help on a particular command, use 'gem help COMMAND'.")),
          s(:send,
            s(:lvar, :out), :<<,
            s(:nil)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "Commands may be abbreviated, so long as they are unambiguous.")),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "e.g. 'gem i rake' is short for 'gem install rake'.")),
          s(:send, nil, :say,
            s(:send,
              s(:lvar, :out), :join,
              s(:str, "\n"))))),
      s(:def, :show_command_help,
        s(:args,
          s(:arg, :command_name)),
        s(:begin,
          s(:lvasgn, :command_name,
            s(:send,
              s(:lvar, :command_name), :downcase)),
          s(:lvasgn, :possibilities,
            s(:send,
              s(:ivar, :@command_manager), :find_command_possibilities,
              s(:lvar, :command_name))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :possibilities), :size), :==,
              s(:int, 1)),
            s(:begin,
              s(:lvasgn, :command,
                s(:send,
                  s(:ivar, :@command_manager), :[],
                  s(:send,
                    s(:lvar, :possibilities), :first))),
              s(:send,
                s(:lvar, :command), :invoke,
                s(:str, "--help"))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :possibilities), :size), :>,
                s(:int, 1)),
              s(:send, nil, :alert_warning,
                s(:dstr,
                  s(:str, "Ambiguous command "),
                  s(:begin,
                    s(:lvar, :command_name)),
                  s(:str, " ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :possibilities), :join,
                      s(:str, ", "))),
                  s(:str, ")"))),
              s(:send, nil, :alert_warning,
                s(:dstr,
                  s(:str, "Unknown command "),
                  s(:begin,
                    s(:lvar, :command_name)),
                  s(:str, ".  Try: gem help commands"))))))))))
