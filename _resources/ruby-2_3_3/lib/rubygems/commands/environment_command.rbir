s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :EnvironmentCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:def, :initialize,
        s(:args),
        s(:super,
          s(:str, "environment"),
          s(:str, "Display information about the RubyGems environment"))),
      s(:def, :arguments,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:dstr,
              s(:str, "          packageversion  display the package version\n"),
              s(:str, "          gemdir          display the path where gems are installed\n"),
              s(:str, "          gempath         display path used to search for gems\n"),
              s(:str, "          version         display the gem format version\n"),
              s(:str, "          remotesources   display the remote gem servers\n"),
              s(:str, "          platform        display the supported gem platforms\n"),
              s(:str, "          <omitted>       display everything\n"))),
          s(:return,
            s(:send,
              s(:lvar, :args), :gsub,
              s(:regexp,
                s(:str, "^\\s+"),
                s(:regopt)),
              s(:str, ""))))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The environment command lets you query rubygems for its configuration for\n"),
          s(:str, "use in shell scripts or as a debugging aid.\n"),
          s(:str, "\n"),
          s(:str, "The RubyGems environment can be controlled through command line arguments,\n"),
          s(:str, "gemrc files, environment variables and built-in defaults.\n"),
          s(:str, "\n"),
          s(:str, "Command line argument defaults and some RubyGems defaults can be set in a\n"),
          s(:str, "~/.gemrc file for individual users and a gemrc in the SYSTEM CONFIGURATION\n"),
          s(:str, "DIRECTORY for all users. These files are YAML files with the following YAML\n"),
          s(:str, "keys:\n"),
          s(:str, "\n"),
          s(:str, "  :sources: A YAML array of remote gem repositories to install gems from\n"),
          s(:str, "  :verbose: Verbosity of the gem command. false, true, and :really are the\n"),
          s(:str, "            levels\n"),
          s(:str, "  :update_sources: Enable/disable automatic updating of repository metadata\n"),
          s(:str, "  :backtrace: Print backtrace when RubyGems encounters an error\n"),
          s(:str, "  :gempath: The paths in which to look for gems\n"),
          s(:str, "  :disable_default_gem_server: Force specification of gem server host on push\n"),
          s(:str, "  <gem_command>: A string containing arguments for the specified gem command\n"),
          s(:str, "\n"),
          s(:str, "Example:\n"),
          s(:str, "\n"),
          s(:str, "  :verbose: false\n"),
          s(:str, "  install: --no-wrappers\n"),
          s(:str, "  update: --no-wrappers\n"),
          s(:str, "  :disable_default_gem_server: true\n"),
          s(:str, "\n"),
          s(:str, "RubyGems' default local repository can be overridden with the GEM_PATH and\n"),
          s(:str, "GEM_HOME environment variables. GEM_HOME sets the default repository to\n"),
          s(:str, "install into. GEM_PATH allows multiple local repositories to be searched for\n"),
          s(:str, "gems.\n"),
          s(:str, "\n"),
          s(:str, "If you are behind a proxy server, RubyGems uses the HTTP_PROXY,\n"),
          s(:str, "HTTP_PROXY_USER and HTTP_PROXY_PASS environment variables to discover the\n"),
          s(:str, "proxy server.\n"),
          s(:str, "\n"),
          s(:str, "If you would like to push gems to a private gem server the RUBYGEMS_HOST\n"),
          s(:str, "environment variable can be set to the URI for that server.\n"),
          s(:str, "\n"),
          s(:str, "If you are packaging RubyGems all of RubyGems' defaults are in\n"),
          s(:str, "lib/rubygems/defaults.rb.  You may override these in\n"),
          s(:str, "lib/rubygems/defaults/operating_system.rb\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " [arg]"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:lvasgn, :arg,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)), :[],
              s(:int, 0))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:case,
              s(:lvar, :arg),
              s(:when,
                s(:regexp,
                  s(:str, "^packageversion"),
                  s(:regopt)),
                s(:const,
                  s(:const, nil, :Gem), :RubyGemsPackageVersion)),
              s(:when,
                s(:regexp,
                  s(:str, "^version"),
                  s(:regopt)),
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:when,
                s(:regexp,
                  s(:str, "^gemdir"),
                  s(:regopt)),
                s(:regexp,
                  s(:str, "^gemhome"),
                  s(:regopt)),
                s(:regexp,
                  s(:str, "^home"),
                  s(:regopt)),
                s(:regexp,
                  s(:str, "^GEM_HOME"),
                  s(:regopt)),
                s(:send,
                  s(:const, nil, :Gem), :dir)),
              s(:when,
                s(:regexp,
                  s(:str, "^gempath"),
                  s(:regopt)),
                s(:regexp,
                  s(:str, "^path"),
                  s(:regopt)),
                s(:regexp,
                  s(:str, "^GEM_PATH"),
                  s(:regopt)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :path), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))),
              s(:when,
                s(:regexp,
                  s(:str, "^remotesources"),
                  s(:regopt)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :sources), :to_a), :join,
                  s(:str, "\n"))),
              s(:when,
                s(:regexp,
                  s(:str, "^platform"),
                  s(:regopt)),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :platforms), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))),
              s(:when,
                s(:nil),
                s(:send, nil, :show_environment)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :CommandLineError),
                s(:dstr,
                  s(:str, "Unknown environment option ["),
                  s(:begin,
                    s(:lvar, :arg)),
                  s(:str, "]"))))),
          s(:send, nil, :say,
            s(:lvar, :out)),
          s(:true))),
      s(:def, :add_path,
        s(:args,
          s(:arg, :out),
          s(:arg, :path)),
        s(:block,
          s(:send,
            s(:lvar, :path), :each),
          s(:args,
            s(:arg, :component)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "     - "),
              s(:begin,
                s(:lvar, :component)),
              s(:str, "\n"))))),
      s(:def, :show_environment,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:str, "RubyGems Environment:\n"), :dup)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - RUBYGEMS VERSION: "),
              s(:begin,
                s(:const,
                  s(:const, nil, :Gem), :VERSION)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - RUBY VERSION: "),
              s(:begin,
                s(:const, nil, :RUBY_VERSION)),
              s(:str, " ("),
              s(:begin,
                s(:const, nil, :RUBY_RELEASE_DATE)))),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_PATCHLEVEL)),
            s(:send,
              s(:lvar, :out), :<<,
              s(:dstr,
                s(:str, " patchlevel "),
                s(:begin,
                  s(:const, nil, :RUBY_PATCHLEVEL)))), nil),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, ") ["),
              s(:begin,
                s(:const, nil, :RUBY_PLATFORM)),
              s(:str, "]\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - INSTALLATION DIRECTORY: "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :dir)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - USER INSTALLATION DIRECTORY: "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :user_dir)),
              s(:str, "\n"))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :prefix), :nil?), nil,
            s(:send,
              s(:lvar, :out), :<<,
              s(:dstr,
                s(:str, "  - RUBYGEMS PREFIX: "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :prefix)),
                s(:str, "\n")))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - RUBY EXECUTABLE: "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :ruby)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - EXECUTABLE DIRECTORY: "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :bindir)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - SPEC CACHE DIRECTORY: "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :spec_cache_dir)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "  - SYSTEM CONFIGURATION DIRECTORY: "),
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :ConfigFile), :SYSTEM_CONFIG_PATH)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "  - RUBYGEMS PLATFORMS:\n")),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :platforms), :each),
            s(:args,
              s(:arg, :platform)),
            s(:send,
              s(:lvar, :out), :<<,
              s(:dstr,
                s(:str, "    - "),
                s(:begin,
                  s(:lvar, :platform)),
                s(:str, "\n")))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "  - GEM PATHS:\n")),
          s(:send,
            s(:lvar, :out), :<<,
            s(:dstr,
              s(:str, "     - "),
              s(:begin,
                s(:send,
                  s(:const, nil, :Gem), :dir)),
              s(:str, "\n"))),
          s(:lvasgn, :gem_path,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :path), :dup)),
          s(:send,
            s(:lvar, :gem_path), :delete,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:send, nil, :add_path,
            s(:lvar, :out),
            s(:lvar, :gem_path)),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "  - GEM CONFIGURATION:\n")),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :each),
            s(:args,
              s(:arg, :name),
              s(:arg, :value)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :name), :==,
                  s(:str, "gemcutter_key")),
                s(:lvasgn, :value,
                  s(:send,
                    s(:lvar, :value), :gsub,
                    s(:regexp,
                      s(:str, "."),
                      s(:regopt)),
                    s(:str, "*"))), nil),
              s(:send,
                s(:lvar, :out), :<<,
                s(:dstr,
                  s(:str, "     - "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :name), :inspect)),
                  s(:str, " => "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :value), :inspect)),
                  s(:str, "\n"))))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "  - REMOTE SOURCES:\n")),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :sources), :each),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :out), :<<,
              s(:dstr,
                s(:str, "     - "),
                s(:begin,
                  s(:lvar, :s)),
                s(:str, "\n")))),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "  - SHELL PATH:\n")),
          s(:lvasgn, :shell_path,
            s(:send,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PATH")), :split,
              s(:const,
                s(:const, nil, :File), :PATH_SEPARATOR))),
          s(:send, nil, :add_path,
            s(:lvar, :out),
            s(:lvar, :shell_path)),
          s(:lvar, :out))))))
