s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/installer")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:send, nil, :require,
    s(:str, "rubygems/remote_fetcher")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :UnpackCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "fileutils")),
          s(:super,
            s(:str, "unpack"),
            s(:str, "Unpack an installed gem to the current directory"),
            s(:hash,
              s(:pair,
                s(:sym, :version),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default)),
              s(:pair,
                s(:sym, :target),
                s(:send,
                  s(:const, nil, :Dir), :pwd)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--target=DIR"),
              s(:str, "target directory for unpacking")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :target),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--spec"),
              s(:str, "unpack the gem specification")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :spec),
              s(:true))),
          s(:send, nil, :add_version_option))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEMNAME       name of gem to unpack")),
      s(:def, :defaults_str,
        s(:args),
        s(:dstr,
          s(:str, "--version '"),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:str, "'"))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The unpack command allows you to examine the contents of a gem or modify\n"),
          s(:str, "them to help diagnose a bug.\n"),
          s(:str, "\n"),
          s(:str, "You can add the contents of the unpacked gem to the load path using the\n"),
          s(:str, "RUBYLIB environment variable or -I:\n"),
          s(:str, "\n"),
          s(:str, "  $ gem unpack my_gem\n"),
          s(:str, "  Unpacked gem: '.../my_gem-1.0'\n"),
          s(:str, "  [edit my_gem-1.0/lib/my_gem.rb]\n"),
          s(:str, "  $ ruby -Imy_gem-1.0/lib -S other_program\n"),
          s(:str, "\n"),
          s(:str, "You can repackage an unpacked gem using the build command.  See the build\n"),
          s(:str, "command help for an example.\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " GEMNAME"))),
      s(:def, :execute,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :get_all_gem_names), :each),
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :dependency,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:lvar, :name),
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :version)))),
            s(:lvasgn, :path,
              s(:send, nil, :get_path,
                s(:lvar, :dependency))),
            s(:if,
              s(:lvar, :path), nil,
              s(:begin,
                s(:send, nil, :alert_error,
                  s(:dstr,
                    s(:str, "Gem '"),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "' not installed nor fetchable."))),
                s(:next))),
            s(:if,
              s(:send,
                s(:ivar, :@options), :[],
                s(:sym, :spec)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :spec),
                    s(:lvasgn, :metadata)),
                  s(:send, nil, :get_metadata,
                    s(:lvar, :path))),
                s(:if,
                  s(:send,
                    s(:lvar, :metadata), :nil?),
                  s(:begin,
                    s(:send, nil, :alert_error,
                      s(:dstr,
                        s(:str, "--spec is unsupported on '"),
                        s(:begin,
                          s(:lvar, :name)),
                        s(:str, "' (old format gem)"))),
                    s(:next)), nil),
                s(:lvasgn, :spec_file,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:send,
                      s(:lvar, :spec), :spec_file))),
                s(:block,
                  s(:send, nil, :open,
                    s(:lvar, :spec_file),
                    s(:str, "w")),
                  s(:args,
                    s(:arg, :io)),
                  s(:send,
                    s(:lvar, :io), :write,
                    s(:lvar, :metadata)))),
              s(:begin,
                s(:lvasgn, :basename,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:lvar, :path),
                    s(:str, ".gem"))),
                s(:lvasgn, :target_dir,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :basename),
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :target)))),
                s(:lvasgn, :package,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Package), :new,
                    s(:lvar, :path))),
                s(:send,
                  s(:lvar, :package), :extract_files,
                  s(:lvar, :target_dir)),
                s(:send, nil, :say,
                  s(:dstr,
                    s(:str, "Unpacked gem: '"),
                    s(:begin,
                      s(:lvar, :target_dir)),
                    s(:str, "'")))))))),
      s(:def, :find_in_cache,
        s(:args,
          s(:arg, :filename)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :path), :each),
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:lvasgn, :this_path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :path),
                  s(:str, "cache"),
                  s(:lvar, :filename))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :this_path)),
                s(:return,
                  s(:lvar, :this_path)), nil))),
          s(:return,
            s(:nil)))),
      s(:def, :get_path,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :dependency), :name), :=~,
              s(:regexp,
                s(:str, "\\.gem$"),
                s(:regopt, :i))),
            s(:return,
              s(:send,
                s(:lvar, :dependency), :name)), nil),
          s(:lvasgn, :specs,
            s(:send,
              s(:lvar, :dependency), :matching_specs)),
          s(:lvasgn, :selected,
            s(:block,
              s(:send,
                s(:lvar, :specs), :max_by),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :s), :version))),
          s(:if,
            s(:lvar, :selected), nil,
            s(:return,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :fetcher), :download_to_cache,
                s(:lvar, :dependency)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :dependency), :name), :=~,
              s(:regexp,
                s(:str, "^"),
                s(:begin,
                  s(:send,
                    s(:lvar, :selected), :name)),
                s(:str, "$"),
                s(:regopt, :i))), nil,
            s(:return)),
          s(:lvasgn, :path,
            s(:send, nil, :find_in_cache,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:send,
                  s(:lvar, :selected), :cache_file)))),
          s(:if,
            s(:lvar, :path), nil,
            s(:return,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :fetcher), :download_to_cache,
                s(:lvar, :dependency)))),
          s(:lvar, :path))),
      s(:def, :get_metadata,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :format,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:lvar, :path))),
          s(:lvasgn, :spec,
            s(:send,
              s(:lvar, :format), :spec)),
          s(:lvasgn, :metadata,
            s(:nil)),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :path),
              s(:send,
                s(:const, nil, :Gem), :binary_mode)),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:lvasgn, :tar,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Package), :TarReader), :new,
                  s(:lvar, :io))),
              s(:block,
                s(:send,
                  s(:lvar, :tar), :each_entry),
                s(:args,
                  s(:arg, :entry)),
                s(:case,
                  s(:send,
                    s(:lvar, :entry), :full_name),
                  s(:when,
                    s(:str, "metadata"),
                    s(:lvasgn, :metadata,
                      s(:send,
                        s(:lvar, :entry), :read))),
                  s(:when,
                    s(:str, "metadata.gz"),
                    s(:lvasgn, :metadata,
                      s(:send,
                        s(:const, nil, :Gem), :gunzip,
                        s(:send,
                          s(:lvar, :entry), :read)))), nil)))),
          s(:return,
            s(:lvar, :spec),
            s(:lvar, :metadata)))))))
