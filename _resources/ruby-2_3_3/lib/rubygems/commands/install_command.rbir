s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/install_update_options")),
  s(:send, nil, :require,
    s(:str, "rubygems/dependency_installer")),
  s(:send, nil, :require,
    s(:str, "rubygems/local_remote_options")),
  s(:send, nil, :require,
    s(:str, "rubygems/validator")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :InstallCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :installed_specs)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :LocalRemoteOptions)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :InstallUpdateOptions)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:lvasgn, :defaults,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :DependencyInstaller), :DEFAULT_OPTIONS), :merge,
              s(:hash,
                s(:pair,
                  s(:sym, :format_executable),
                  s(:false)),
                s(:pair,
                  s(:sym, :lock),
                  s(:true)),
                s(:pair,
                  s(:sym, :suggest_alternate),
                  s(:true)),
                s(:pair,
                  s(:sym, :version),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Requirement), :default)),
                s(:pair,
                  s(:sym, :without_groups),
                  s(:array))))),
          s(:super,
            s(:str, "install"),
            s(:str, "Install a gem into the local repository"),
            s(:lvar, :defaults)),
          s(:send, nil, :add_install_update_options),
          s(:send, nil, :add_local_remote_options),
          s(:send, nil, :add_platform_option),
          s(:send, nil, :add_version_option),
          s(:send, nil, :add_prerelease_option,
            s(:str, "to be installed. (Only for listed gems)")),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-g"),
              s(:str, "--file [FILE]"),
              s(:str, "Read from a gem dependencies API file and"),
              s(:str, "install the listed gems")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)),
            s(:begin,
              s(:if,
                s(:lvar, :v), nil,
                s(:lvasgn, :v,
                  s(:block,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :GEM_DEP_FILES), :find),
                    s(:args,
                      s(:arg, :file)),
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :file))))),
              s(:if,
                s(:lvar, :v), nil,
                s(:begin,
                  s(:lvasgn, :message,
                    s(:if,
                      s(:lvar, :v),
                      s(:lvar, :v),
                      s(:dstr,
                        s(:str, "(tried "),
                        s(:begin,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Gem), :GEM_DEP_FILES), :join,
                            s(:str, ", "))),
                        s(:str, ")")))),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidArgument),
                    s(:dstr,
                      s(:str, "cannot find gem dependencies file "),
                      s(:begin,
                        s(:lvar, :message)))))),
              s(:send,
                s(:lvar, :o), :[]=,
                s(:sym, :gemdeps),
                s(:lvar, :v)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--without GROUPS"),
              s(:const, nil, :Array),
              s(:str, "Omit the named groups (comma separated)"),
              s(:str, "when installing from a gem dependencies"),
              s(:str, "file")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)),
            s(:send,
              s(:send,
                s(:lvar, :o), :[],
                s(:sym, :without_groups)), :concat,
              s(:block,
                s(:send,
                  s(:lvar, :v), :map),
                s(:args,
                  s(:arg, :without)),
                s(:send,
                  s(:lvar, :without), :intern)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--default"),
              s(:str, "Add the gem's full specification to"),
              s(:str, "specifications/default and extract only its bin")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:sym, :install_as_default),
              s(:lvar, :v))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--explain"),
              s(:str, "Rather than install the gems, indicate which would"),
              s(:str, "be installed")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:sym, :explain),
              s(:lvar, :v))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--[no-]lock"),
              s(:str, "Create a lock file (when used with -g/--file)")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:sym, :lock),
              s(:lvar, :v))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--[no-]suggestions"),
              s(:str, "Suggest alternates when gems are not found")),
            s(:args,
              s(:arg, :v),
              s(:arg, :o)),
            s(:send,
              s(:lvar, :o), :[]=,
              s(:sym, :suggest_alternate),
              s(:lvar, :v))),
          s(:ivasgn, :@installed_specs,
            s(:array)))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEMNAME       name of gem to install")),
      s(:def, :defaults_str,
        s(:args),
        s(:send,
          s(:dstr,
            s(:str, "--both --version '"),
            s(:begin,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)),
            s(:str, "' --document --no-force\n")), :+,
          s(:dstr,
            s(:str, "--install-dir "),
            s(:begin,
              s(:send,
                s(:const, nil, :Gem), :dir)),
            s(:str, " --lock")))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The install command installs local or remote gem into a gem repository.\n"),
          s(:str, "\n"),
          s(:str, "For gems with executables ruby installs a wrapper file into the executable\n"),
          s(:str, "directory by default.  This can be overridden with the --no-wrappers option.\n"),
          s(:str, "The wrapper allows you to choose among alternate gem versions using _version_.\n"),
          s(:str, "\n"),
          s(:str, "For example `rake _0.7.3_ --version` will run rake version 0.7.3 if a newer\n"),
          s(:str, "version is also installed.\n"),
          s(:str, "\n"),
          s(:str, "Gem Dependency Files\n"),
          s(:str, "====================\n"),
          s(:str, "\n"),
          s(:str, "RubyGems can install a consistent set of gems across multiple environments\n"),
          s(:str, "using `gem install -g` when a gem dependencies file (gem.deps.rb, Gemfile or\n"),
          s(:str, "Isolate) is present.  If no explicit file is given RubyGems attempts to find\n"),
          s(:str, "one in the current directory.\n"),
          s(:str, "\n"),
          s(:str, "When the RUBYGEMS_GEMDEPS environment variable is set to a gem dependencies\n"),
          s(:str, "file the gems from that file will be activated at startup time.  Set it to a\n"),
          s(:str, "specific filename or to \"-\" to have RubyGems automatically discover the gem\n"),
          s(:str, "dependencies file by walking up from the current directory.\n"),
          s(:str, "\n"),
          s(:str, "NOTE: Enabling automatic discovery on multiuser systems can lead to\n"),
          s(:str, "execution of arbitrary code when used from directories outside your control.\n"),
          s(:str, "\n"),
          s(:str, "Extension Install Failures\n"),
          s(:str, "==========================\n"),
          s(:str, "\n"),
          s(:str, "If an extension fails to compile during gem installation the gem\n"),
          s(:str, "specification is not written out, but the gem remains unpacked in the\n"),
          s(:str, "repository.  You may need to specify the path to the library's headers and\n"),
          s(:str, "libraries to continue.  You can do this by adding a -- between RubyGems'\n"),
          s(:str, "options and the extension's build options:\n"),
          s(:str, "\n"),
          s(:str, "  $ gem install some_extension_gem\n"),
          s(:str, "  [build fails]\n"),
          s(:str, "  Gem files will remain installed in \\\n"),
          s(:str, "  /path/to/gems/some_extension_gem-1.0 for inspection.\n"),
          s(:str, "  Results logged to /path/to/gems/some_extension_gem-1.0/gem_make.out\n"),
          s(:str, "  $ gem install some_extension_gem -- --with-extension-lib=/path/to/lib\n"),
          s(:str, "  [build succeeds]\n"),
          s(:str, "  $ gem list some_extension_gem\n"),
          s(:str, "\n"),
          s(:str, "  *** LOCAL GEMS ***\n"),
          s(:str, "\n"),
          s(:str, "  some_extension_gem (1.0)\n"),
          s(:str, "  $\n"),
          s(:str, "\n"),
          s(:str, "If you correct the compilation errors by editing the gem files you will need\n"),
          s(:str, "to write the specification by hand.  For example:\n"),
          s(:str, "\n"),
          s(:str, "  $ gem install some_extension_gem\n"),
          s(:str, "  [build fails]\n"),
          s(:str, "  Gem files will remain installed in \\\n"),
          s(:str, "  /path/to/gems/some_extension_gem-1.0 for inspection.\n"),
          s(:str, "  Results logged to /path/to/gems/some_extension_gem-1.0/gem_make.out\n"),
          s(:str, "  $ [cd /path/to/gems/some_extension_gem-1.0]\n"),
          s(:str, "  $ [edit files or what-have-you and run make]\n"),
          s(:str, "  $ gem spec ../../cache/some_extension_gem-1.0.gem --ruby > \\\n"),
          s(:str, "             ../../specifications/some_extension_gem-1.0.gemspec\n"),
          s(:str, "  $ gem list some_extension_gem\n"),
          s(:str, "\n"),
          s(:str, "  *** LOCAL GEMS ***\n"),
          s(:str, "\n"),
          s(:str, "  some_extension_gem (1.0)\n"),
          s(:str, "  $\n"),
          s(:str, "\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " GEMNAME [GEMNAME ...] [options] -- --build-flags"))),
      s(:def, :check_install_dir,
        s(:args),
        s(:if,
          s(:and,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :install_dir)),
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :user_install))),
          s(:begin,
            s(:send, nil, :alert_error,
              s(:str, "Use --install-dir or --user-install but not both")),
            s(:send, nil, :terminate_interaction,
              s(:int, 1))), nil)),
      s(:def, :check_version,
        s(:args),
        s(:if,
          s(:and,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :version)), :!=,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)),
            s(:send,
              s(:send,
                s(:send, nil, :get_all_gem_names), :size), :>,
              s(:int, 1))),
          s(:begin,
            s(:send, nil, :alert_error,
              s(:str, "Can't use --version w/ multiple gems. Use name:ver instead.")),
            s(:send, nil, :terminate_interaction,
              s(:int, 1))), nil)),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :options), :include?,
              s(:sym, :gemdeps)),
            s(:begin,
              s(:send, nil, :install_from_gemdeps),
              s(:return)), nil),
          s(:ivasgn, :@installed_specs,
            s(:array)),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :install_dir)), :nil?),
              s(:send,
                s(:const, nil, :RUBY_VERSION), :>,
                s(:str, "1.9"))),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "GEM_PATH")), nil),
          s(:send, nil, :check_install_dir),
          s(:send, nil, :check_version),
          s(:send, nil, :load_hooks),
          s(:lvasgn, :exit_code,
            s(:send, nil, :install_gems)),
          s(:send, nil, :show_installed),
          s(:send, nil, :terminate_interaction,
            s(:lvar, :exit_code)))),
      s(:def, :install_from_gemdeps,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/request_set")),
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:lvasgn, :specs,
            s(:block,
              s(:send,
                s(:lvar, :rs), :install_from_gemdeps,
                s(:send, nil, :options)),
              s(:args,
                s(:arg, :req),
                s(:arg, :inst)),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :req), :full_spec)),
                s(:if,
                  s(:lvar, :inst),
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Installing "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :name)),
                      s(:str, " ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :version)),
                      s(:str, ")"))),
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Using "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :name)),
                      s(:str, " ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :s), :version)),
                      s(:str, ")"))))))),
          s(:ivasgn, :@installed_specs,
            s(:lvar, :specs)),
          s(:send, nil, :terminate_interaction))),
      s(:def, :install_gem,
        s(:args,
          s(:arg, :name),
          s(:arg, :version)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :conservative)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Dependency), :new,
                      s(:lvar, :name),
                      s(:lvar, :version)), :matching_specs), :empty?), :!)),
            s(:return), nil),
          s(:lvasgn, :req,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :create,
              s(:lvar, :version))),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :ignore_dependencies)),
            s(:send, nil, :install_gem_without_dependencies,
              s(:lvar, :name),
              s(:lvar, :req)),
            s(:begin,
              s(:lvasgn, :inst,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :DependencyInstaller), :new,
                  s(:send, nil, :options))),
              s(:lvasgn, :request_set,
                s(:send,
                  s(:lvar, :inst), :resolve_dependencies,
                  s(:lvar, :name),
                  s(:lvar, :req))),
              s(:if,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :explain)),
                s(:begin,
                  s(:send, nil, :puts,
                    s(:str, "Gems to install:")),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :request_set), :sorted_requests), :each),
                    s(:args,
                      s(:arg, :s)),
                    s(:send, nil, :puts,
                      s(:dstr,
                        s(:str, "  "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :s), :full_name))))),
                  s(:return)),
                s(:send,
                  s(:ivar, :@installed_specs), :concat,
                  s(:send,
                    s(:lvar, :request_set), :install,
                    s(:send, nil, :options)))),
              s(:send, nil, :show_install_errors,
                s(:send,
                  s(:lvar, :inst), :errors)))))),
      s(:def, :install_gem_without_dependencies,
        s(:args,
          s(:arg, :name),
          s(:arg, :req)),
        s(:begin,
          s(:lvasgn, :gem,
            s(:nil)),
          s(:if,
            s(:send, nil, :local?),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :name), :=~,
                    s(:regexp,
                      s(:str, "\\.gem$"),
                      s(:regopt))),
                  s(:send,
                    s(:const, nil, :File), :file?,
                    s(:lvar, :name))),
                s(:begin,
                  s(:lvasgn, :source,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Source), :SpecificFile), :new,
                      s(:lvar, :name))),
                  s(:lvasgn, :spec,
                    s(:send,
                      s(:lvar, :source), :spec))),
                s(:begin,
                  s(:lvasgn, :source,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Source), :Local), :new)),
                  s(:lvasgn, :spec,
                    s(:send,
                      s(:lvar, :source), :find_gem,
                      s(:lvar, :name),
                      s(:lvar, :req))))),
              s(:if,
                s(:lvar, :spec),
                s(:lvasgn, :gem,
                  s(:send,
                    s(:lvar, :source), :download,
                    s(:lvar, :spec))), nil)), nil),
          s(:if,
            s(:and,
              s(:send, nil, :remote?),
              s(:send,
                s(:lvar, :gem), :!)),
            s(:begin,
              s(:lvasgn, :dependency,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:lvar, :name),
                  s(:lvar, :req))),
              s(:send,
                s(:lvar, :dependency), :prerelease=,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :prerelease))),
              s(:lvasgn, :fetcher,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :fetcher)),
              s(:lvasgn, :gem,
                s(:send,
                  s(:lvar, :fetcher), :download_to_cache,
                  s(:lvar, :dependency)))), nil),
          s(:lvasgn, :inst,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :at,
              s(:lvar, :gem),
              s(:send, nil, :options))),
          s(:send,
            s(:lvar, :inst), :install),
          s(:send, nil, :require,
            s(:str, "rubygems/dependency_installer")),
          s(:lvasgn, :dinst,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyInstaller), :new,
              s(:send, nil, :options))),
          s(:send,
            s(:send,
              s(:lvar, :dinst), :installed_gems), :replace,
            s(:array,
              s(:send,
                s(:lvar, :inst), :spec))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :done_installing_hooks), :empty?), nil,
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :done_installing_hooks), :each),
              s(:args,
                s(:arg, :hook)),
              s(:send,
                s(:lvar, :hook), :call,
                s(:lvar, :dinst),
                s(:array,
                  s(:send,
                    s(:lvar, :inst), :spec))))),
          s(:send,
            s(:ivar, :@installed_specs), :push,
            s(:send,
              s(:lvar, :inst), :spec)))),
      s(:def, :install_gems,
        s(:args),
        s(:begin,
          s(:lvasgn, :exit_code,
            s(:int, 0)),
          s(:block,
            s(:send,
              s(:send, nil, :get_all_gem_names_and_versions), :each),
            s(:args,
              s(:arg, :gem_name),
              s(:arg, :gem_version)),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :gem_version),
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :version))),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :install_gem,
                    s(:lvar, :gem_name),
                    s(:lvar, :gem_version)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Gem), :InstallError)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:send, nil, :alert_error,
                        s(:dstr,
                          s(:str, "Error installing "),
                          s(:begin,
                            s(:lvar, :gem_name)),
                          s(:str, ":\n\t"),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :message)))),
                      s(:op_asgn,
                        s(:lvasgn, :exit_code), :|,
                        s(:int, 1)))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Gem), :GemNotFoundException),
                      s(:const,
                        s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
                    s(:lvasgn, :e),
                    s(:begin,
                      s(:lvasgn, :domain,
                        s(:send,
                          s(:send, nil, :options), :[],
                          s(:sym, :domain))),
                      s(:if,
                        s(:send,
                          s(:send, nil, :options), :[],
                          s(:sym, :suggest_alternate)), nil,
                        s(:lvasgn, :domain,
                          s(:sym, :local))),
                      s(:send, nil, :show_lookup_failure,
                        s(:send,
                          s(:lvar, :e), :name),
                        s(:send,
                          s(:lvar, :e), :version),
                        s(:send,
                          s(:lvar, :e), :errors),
                        s(:lvar, :domain)),
                      s(:op_asgn,
                        s(:lvasgn, :exit_code), :|,
                        s(:int, 2)))), nil)))),
          s(:lvar, :exit_code))),
      s(:def, :load_hooks,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :install_as_default)),
            s(:send, nil, :require,
              s(:str, "rubygems/install_default_message")),
            s(:send, nil, :require,
              s(:str, "rubygems/install_message"))),
          s(:send, nil, :require,
            s(:str, "rubygems/rdoc")))),
      s(:def, :show_install_errors,
        s(:args,
          s(:arg, :errors)),
        s(:begin,
          s(:if,
            s(:lvar, :errors), nil,
            s(:return)),
          s(:block,
            s(:send,
              s(:lvar, :errors), :each),
            s(:args,
              s(:arg, :x)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :SourceFetchProblem), :===,
                  s(:lvar, :x)), nil,
                s(:return)),
              s(:lvasgn, :msg,
                s(:dstr,
                  s(:str, "Unable to pull data from '"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :source), :uri)),
                  s(:str, "': "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :x), :error), :message)))),
              s(:send, nil, :alert_warning,
                s(:lvar, :msg)))))),
      s(:def, :show_installed,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@installed_specs), :empty?),
            s(:return), nil),
          s(:lvasgn, :gems,
            s(:if,
              s(:send,
                s(:send,
                  s(:ivar, :@installed_specs), :length), :==,
                s(:int, 1)),
              s(:str, "gem"),
              s(:str, "gems"))),
          s(:send, nil, :say,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:ivar, :@installed_specs), :length)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :gems)),
              s(:str, " installed"))))))))
