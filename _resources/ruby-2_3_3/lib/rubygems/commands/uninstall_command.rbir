s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:send, nil, :require,
    s(:str, "rubygems/uninstaller")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :UninstallCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "uninstall"),
            s(:str, "Uninstall gems from the local repository"),
            s(:hash,
              s(:pair,
                s(:sym, :version),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default)),
              s(:pair,
                s(:sym, :user_install),
                s(:true)),
              s(:pair,
                s(:sym, :check_dev),
                s(:false)),
              s(:pair,
                s(:sym, :vendor),
                s(:false)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-a"),
              s(:str, "--[no-]all"),
              s(:str, "Uninstall all matching versions")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :all),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-I"),
              s(:str, "--[no-]ignore-dependencies"),
              s(:str, "Ignore dependency requirements while"),
              s(:str, "uninstalling")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :ignore),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-D"),
              s(:str, "--[no-]-check-development"),
              s(:str, "Check development dependencies while uninstalling"),
              s(:str, "(default: false)")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :check_dev),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-x"),
              s(:str, "--[no-]executables"),
              s(:str, "Uninstall applicable executables without"),
              s(:str, "confirmation")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :executables),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-i"),
              s(:str, "--install-dir DIR"),
              s(:str, "Directory to uninstall gem from")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :install_dir),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-n"),
              s(:str, "--bindir DIR"),
              s(:str, "Directory to remove binaries from")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :bin_dir),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]user-install"),
              s(:str, "Uninstall from user's home directory"),
              s(:str, "in addition to GEM_HOME.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :user_install),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]format-executable"),
              s(:str, "Assume executable names match Ruby's prefix and suffix.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :format_executable),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]force"),
              s(:str, "Uninstall all versions of the named gems"),
              s(:str, "ignoring dependencies")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :force),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]abort-on-dependent"),
              s(:str, "Prevent uninstalling gems that are"),
              s(:str, "depended on by other gems.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :abort_on_dependent),
              s(:lvar, :value))),
          s(:send, nil, :add_version_option),
          s(:send, nil, :add_platform_option),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--vendor"),
              s(:str, "Uninstall gem from the vendor directory."),
              s(:str, "Only for use by gem repackagers.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Gem), :vendor_dir), nil,
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidOption), :new,
                    s(:str, "your platform is not supported")))),
              s(:send, nil, :alert_warning,
                s(:str, "Use your OS package manager to uninstall vendor gems")),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :vendor),
                s(:true)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :install_dir),
                s(:send,
                  s(:const, nil, :Gem), :vendor_dir)))))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEMNAME       name of gem to uninstall")),
      s(:def, :defaults_str,
        s(:args),
        s(:send,
          s(:dstr,
            s(:str, "--version '"),
            s(:begin,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)),
            s(:str, "' --no-force ")), :+,
          s(:str, "--user-install"))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The uninstall command removes a previously installed gem.\n"),
          s(:str, "\n"),
          s(:str, "RubyGems will ask for confirmation if you are attempting to uninstall a gem\n"),
          s(:str, "that is a dependency of an existing gem.  You can use the\n"),
          s(:str, "--ignore-dependencies option to skip this check.\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " GEMNAME [GEMNAME ...]"))),
      s(:def, :execute,
        s(:args),
        s(:if,
          s(:and,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :all)),
            s(:send,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :args)), :empty?), :!)),
          s(:send, nil, :uninstall_specific),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :all)),
            s(:send, nil, :uninstall_all),
            s(:send, nil, :uninstall_specific)))),
      s(:def, :uninstall_all,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :reject),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :default_gem?))),
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:send,
                s(:send, nil, :options), :[]=,
                s(:sym, :version),
                s(:send,
                  s(:lvar, :spec), :version)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Uninstaller), :new,
                      s(:send,
                        s(:lvar, :spec), :name),
                      s(:send, nil, :options)), :uninstall),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Gem), :InstallError)), nil, nil), nil)))),
          s(:send, nil, :alert,
            s(:dstr,
              s(:str, "Uninstalled all gems in "),
              s(:begin,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :install_dir))))))),
      s(:def, :uninstall_specific,
        s(:args),
        s(:begin,
          s(:lvasgn, :deplist,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyList), :new)),
          s(:block,
            s(:send,
              s(:send,
                s(:send, nil, :get_all_gem_names), :uniq), :each),
            s(:args,
              s(:arg, :name)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:lvar, :name)), :each),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :deplist), :add,
                s(:lvar, :spec)))),
          s(:lvasgn, :deps,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :deplist), :strongly_connected_components), :flatten), :reverse)),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :deps), :map,
                  s(:block_pass,
                    s(:sym, :name))), :uniq), :each),
            s(:args,
              s(:arg, :gem_name)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Uninstaller), :new,
                    s(:lvar, :gem_name),
                    s(:send, nil, :options)), :uninstall),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Gem), :GemNotInHomeException)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:lvasgn, :spec,
                      s(:send,
                        s(:lvar, :e), :spec)),
                    s(:send, nil, :alert,
                      s(:send,
                        s(:dstr,
                          s(:str, "In order to remove "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :spec), :name)),
                          s(:str, ", please execute:\n")), :+,
                        s(:dstr,
                          s(:str, "\tgem uninstall "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :spec), :name)),
                          s(:str, " --install-dir="),
                          s(:begin,
                            s(:send,
                              s(:lvar, :spec), :installation_path))))))), nil))))))))
