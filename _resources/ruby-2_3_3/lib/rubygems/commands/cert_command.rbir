s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/security")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "openssl")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)),
        s(:lvasgn, :e),
        s(:if,
          s(:or,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :e), :respond_to?,
                  s(:sym, :path)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :path), :==,
                  s(:str, "openssl")))),
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :=~,
              s(:regexp,
                s(:str, " -- openssl$"),
                s(:regopt)))), nil,
          s(:send, nil, :raise))), nil)),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)),
    s(:class,
      s(:const,
        s(:const,
          s(:const, nil, :Gem), :Commands), :CertCommand),
      s(:const,
        s(:const, nil, :Gem), :Command),
      s(:begin,
        s(:def, :initialize,
          s(:args),
          s(:begin,
            s(:super,
              s(:str, "cert"),
              s(:str, "Manage RubyGems certificates and signing settings"),
              s(:hash,
                s(:pair,
                  s(:sym, :add),
                  s(:array)),
                s(:pair,
                  s(:sym, :remove),
                  s(:array)),
                s(:pair,
                  s(:sym, :list),
                  s(:array)),
                s(:pair,
                  s(:sym, :build),
                  s(:array)),
                s(:pair,
                  s(:sym, :sign),
                  s(:array)))),
            s(:block,
              s(:send,
                s(:const, nil, :OptionParser), :accept,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate)),
              s(:args,
                s(:arg, :certificate)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:lvar, :certificate))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Errno), :ENOENT)), nil,
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :OptionParser), :InvalidArgument),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :certificate)),
                        s(:str, ": does not exist")))),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :CertificateError)), nil,
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :OptionParser), :InvalidArgument),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :certificate)),
                        s(:str, ": invalid X509 certificate")))), nil))),
            s(:block,
              s(:send,
                s(:const, nil, :OptionParser), :accept,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA)),
              s(:args,
                s(:arg, :key_file)),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :passphrase,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "GEM_PRIVATE_KEY_PASSPHRASE"))),
                      s(:lvasgn, :key,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                          s(:send,
                            s(:const, nil, :File), :read,
                            s(:lvar, :key_file)),
                          s(:lvar, :passphrase)))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Errno), :ENOENT)), nil,
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :key_file)),
                          s(:str, ": does not exist")))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :PKey), :RSAError)), nil,
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :OptionParser), :InvalidArgument),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :key_file)),
                          s(:str, ": invalid RSA key")))), nil)),
                s(:if,
                  s(:send,
                    s(:lvar, :key), :private?), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidArgument),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :key_file)),
                      s(:str, ": private key not found")))),
                s(:lvar, :key))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-a"),
                s(:str, "--add CERT"),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate),
                s(:str, "Add a trusted certificate.")),
              s(:args,
                s(:arg, :cert),
                s(:arg, :options)),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :add)), :<<,
                s(:lvar, :cert))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-l"),
                s(:str, "--list [FILTER]"),
                s(:str, "List trusted certificates where the"),
                s(:str, "subject contains FILTER")),
              s(:args,
                s(:arg, :filter),
                s(:arg, :options)),
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :filter),
                  s(:str, "")),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :list)), :<<,
                  s(:lvar, :filter)))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-r"),
                s(:str, "--remove FILTER"),
                s(:str, "Remove trusted certificates where the"),
                s(:str, "subject contains FILTER")),
              s(:args,
                s(:arg, :filter),
                s(:arg, :options)),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :remove)), :<<,
                s(:lvar, :filter))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-b"),
                s(:str, "--build EMAIL_ADDR"),
                s(:str, "Build private key and self-signed"),
                s(:str, "certificate for EMAIL_ADDR")),
              s(:args,
                s(:arg, :email_address),
                s(:arg, :options)),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :build)), :<<,
                s(:lvar, :email_address))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-C"),
                s(:str, "--certificate CERT"),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate),
                s(:str, "Signing certificate for --sign")),
              s(:args,
                s(:arg, :cert),
                s(:arg, :options)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :issuer_cert),
                s(:lvar, :cert))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-K"),
                s(:str, "--private-key KEY"),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSA),
                s(:str, "Key for --sign or --build")),
              s(:args,
                s(:arg, :key),
                s(:arg, :options)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :key),
                s(:lvar, :key))),
            s(:block,
              s(:send, nil, :add_option,
                s(:str, "-s"),
                s(:str, "--sign CERT"),
                s(:str, "Signs CERT with the key from -K"),
                s(:str, "and the certificate from -C")),
              s(:args,
                s(:arg, :cert_file),
                s(:arg, :options)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :file?,
                    s(:lvar, :cert_file)), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidArgument),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :cert_file)),
                      s(:str, ": does not exist")))),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :sign)), :<<,
                  s(:lvar, :cert_file)))))),
        s(:def, :add_certificate,
          s(:args,
            s(:arg, :certificate)),
          s(:begin,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :trust_cert,
              s(:lvar, :certificate)),
            s(:send, nil, :say,
              s(:dstr,
                s(:str, "Added '"),
                s(:begin,
                  s(:send,
                    s(:lvar, :certificate), :subject)),
                s(:str, "'"))))),
        s(:def, :execute,
          s(:args),
          s(:begin,
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :add)), :each),
              s(:args,
                s(:arg, :certificate)),
              s(:send, nil, :add_certificate,
                s(:lvar, :certificate))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :remove)), :each),
              s(:args,
                s(:arg, :filter)),
              s(:send, nil, :remove_certificates_matching,
                s(:lvar, :filter))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :list)), :each),
              s(:args,
                s(:arg, :filter)),
              s(:send, nil, :list_certificates_matching,
                s(:lvar, :filter))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :build)), :each),
              s(:args,
                s(:arg, :name)),
              s(:send, nil, :build,
                s(:lvar, :name))),
            s(:if,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :sign)), :empty?), nil,
              s(:send, nil, :sign_certificates)))),
        s(:def, :build,
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :key),
                s(:lvasgn, :key_path)),
              s(:send, nil, :build_key)),
            s(:lvasgn, :cert_path,
              s(:send, nil, :build_cert,
                s(:lvar, :name),
                s(:lvar, :key))),
            s(:send, nil, :say,
              s(:dstr,
                s(:str, "Certificate: "),
                s(:begin,
                  s(:lvar, :cert_path)))),
            s(:if,
              s(:lvar, :key_path),
              s(:begin,
                s(:send, nil, :say,
                  s(:dstr,
                    s(:str, "Private Key: "),
                    s(:begin,
                      s(:lvar, :key_path)))),
                s(:send, nil, :say,
                  s(:str, "Don't forget to move the key file to somewhere private!"))), nil))),
        s(:def, :build_cert,
          s(:args,
            s(:arg, :name),
            s(:arg, :key)),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :create_cert_email,
                s(:lvar, :name),
                s(:lvar, :key))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:lvar, :cert),
              s(:str, "gem-public_cert.pem")))),
        s(:def, :build_key,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :key)),
              s(:return,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :key))), nil),
            s(:lvasgn, :passphrase,
              s(:send, nil, :ask_for_password,
                s(:str, "Passphrase for your Private Key:"))),
            s(:send, nil, :say,
              s(:str, "\n")),
            s(:lvasgn, :passphrase_confirmation,
              s(:send, nil, :ask_for_password,
                s(:str, "Please repeat the passphrase for your Private Key:"))),
            s(:send, nil, :say,
              s(:str, "\n")),
            s(:if,
              s(:send,
                s(:lvar, :passphrase), :==,
                s(:lvar, :passphrase_confirmation)), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :CommandLineError),
                s(:str, "Passphrase and passphrase confirmation don't match"))),
            s(:lvasgn, :key,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :create_key)),
            s(:lvasgn, :key_path,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :write,
                s(:lvar, :key),
                s(:str, "gem-private_key.pem"),
                s(:int, 384),
                s(:lvar, :passphrase))),
            s(:return,
              s(:lvar, :key),
              s(:lvar, :key_path)))),
        s(:def, :certificates_matching,
          s(:args,
            s(:arg, :filter)),
          s(:begin,
            s(:if,
              s(:send, nil, :block_given?), nil,
              s(:return,
                s(:send, nil, :enum_for,
                  s(:send, nil, :__method__),
                  s(:lvar, :filter)))),
            s(:block,
              s(:send,
                s(:block,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Gem), :Security), :trusted_certificates), :select),
                      s(:args,
                        s(:arg, :certificate),
                        s(:arg, :_)),
                      s(:begin,
                        s(:lvasgn, :subject,
                          s(:send,
                            s(:send,
                              s(:lvar, :certificate), :subject), :to_s)),
                        s(:send,
                          s(:send,
                            s(:lvar, :subject), :downcase), :index,
                          s(:lvar, :filter)))), :sort_by),
                  s(:args,
                    s(:arg, :certificate),
                    s(:arg, :_)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :certificate), :subject), :to_a), :map),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :data)),
                    s(:array,
                      s(:lvar, :name),
                      s(:lvar, :data)))), :each),
              s(:args,
                s(:arg, :certificate),
                s(:arg, :path)),
              s(:yield,
                s(:lvar, :certificate),
                s(:lvar, :path))))),
        s(:def, :description,
          s(:args),
          s(:dstr,
            s(:str, "The cert command manages signing keys and certificates for creating signed\n"),
            s(:str, "gems.  Your signing certificate and private key are typically stored in\n"),
            s(:str, "~/.gem/gem-public_cert.pem and ~/.gem/gem-private_key.pem respectively.\n"),
            s(:str, "\n"),
            s(:str, "To build a certificate for signing gems:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --build you@example\n"),
            s(:str, "\n"),
            s(:str, "If you already have an RSA key, or are creating a new certificate for an\n"),
            s(:str, "existing key:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --build you@example --private-key /path/to/key.pem\n"),
            s(:str, "\n"),
            s(:str, "If you wish to trust a certificate you can add it to the trust list with:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --add /path/to/cert.pem\n"),
            s(:str, "\n"),
            s(:str, "You can list trusted certificates with:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --list\n"),
            s(:str, "\n"),
            s(:str, "or:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --list cert_subject_substring\n"),
            s(:str, "\n"),
            s(:str, "If you wish to remove a previously trusted certificate:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --remove cert_subject_substring\n"),
            s(:str, "\n"),
            s(:str, "To sign another gem author's certificate:\n"),
            s(:str, "\n"),
            s(:str, "  gem cert --sign /path/to/other_cert.pem\n"),
            s(:str, "\n"),
            s(:str, "For further reading on signing gems see `ri Gem::Security`.\n"))),
        s(:def, :list_certificates_matching,
          s(:args,
            s(:arg, :filter)),
          s(:block,
            s(:send, nil, :certificates_matching,
              s(:lvar, :filter)),
            s(:args,
              s(:arg, :certificate),
              s(:arg, :_)),
            s(:send, nil, :say,
              s(:send,
                s(:send,
                  s(:lvar, :certificate), :subject), :to_s)))),
        s(:def, :load_default_cert,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :cert_file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :Gem), :default_cert_path))),
              s(:lvasgn, :cert,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :cert_file))),
              s(:send,
                s(:send, nil, :options), :[]=,
                s(:sym, :issuer_cert),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                  s(:lvar, :cert)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)), nil,
              s(:begin,
                s(:send, nil, :alert_error,
                  s(:str, "--certificate not specified and ~/.gem/gem-public_cert.pem does not exist")),
                s(:send, nil, :terminate_interaction,
                  s(:int, 1)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :CertificateError)), nil,
              s(:begin,
                s(:send, nil, :alert_error,
                  s(:str, "--certificate not specified and ~/.gem/gem-public_cert.pem is not valid")),
                s(:send, nil, :terminate_interaction,
                  s(:int, 1)))), nil)),
        s(:def, :load_default_key,
          s(:args),
          s(:rescue,
            s(:begin,
              s(:lvasgn, :key_file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const, nil, :Gem), :default_key_path))),
              s(:lvasgn, :key,
                s(:send,
                  s(:const, nil, :File), :read,
                  s(:lvar, :key_file))),
              s(:lvasgn, :passphrase,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "GEM_PRIVATE_KEY_PASSPHRASE"))),
              s(:send,
                s(:send, nil, :options), :[]=,
                s(:sym, :key),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                  s(:lvar, :key),
                  s(:lvar, :passphrase)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)), nil,
              s(:begin,
                s(:send, nil, :alert_error,
                  s(:str, "--private-key not specified and ~/.gem/gem-private_key.pem does not exist")),
                s(:send, nil, :terminate_interaction,
                  s(:int, 1)))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :PKey), :RSAError)), nil,
              s(:begin,
                s(:send, nil, :alert_error,
                  s(:str, "--private-key not specified and ~/.gem/gem-private_key.pem is not valid")),
                s(:send, nil, :terminate_interaction,
                  s(:int, 1)))), nil)),
        s(:def, :load_defaults,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :issuer_cert)), nil,
              s(:send, nil, :load_default_cert)),
            s(:if,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :key)), nil,
              s(:send, nil, :load_default_key)))),
        s(:def, :remove_certificates_matching,
          s(:args,
            s(:arg, :filter)),
          s(:block,
            s(:send, nil, :certificates_matching,
              s(:lvar, :filter)),
            s(:args,
              s(:arg, :certificate),
              s(:arg, :path)),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :rm,
                s(:lvar, :path)),
              s(:send, nil, :say,
                s(:dstr,
                  s(:str, "Removed '"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :certificate), :subject)),
                  s(:str, "'")))))),
        s(:def, :sign,
          s(:args,
            s(:arg, :cert_file)),
          s(:begin,
            s(:lvasgn, :cert,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :cert_file))),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:lvar, :cert))),
            s(:lvasgn, :permissions,
              s(:send,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :cert_file)), :mode), :&,
                s(:int, 511))),
            s(:lvasgn, :issuer_cert,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :issuer_cert))),
            s(:lvasgn, :issuer_key,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :key))),
            s(:lvasgn, :cert,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :sign,
                s(:lvar, :cert),
                s(:lvar, :issuer_key),
                s(:lvar, :issuer_cert))),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :write,
              s(:lvar, :cert),
              s(:lvar, :cert_file),
              s(:lvar, :permissions)))),
        s(:def, :sign_certificates,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :sign)), :empty?), nil,
              s(:send, nil, :load_defaults)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :sign)), :each),
              s(:args,
                s(:arg, :cert_file)),
              s(:send, nil, :sign,
                s(:lvar, :cert_file))))))), nil))
