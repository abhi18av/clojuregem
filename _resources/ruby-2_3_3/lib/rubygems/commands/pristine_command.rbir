s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:send, nil, :require,
    s(:str, "rubygems/installer")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :PristineCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "pristine"),
            s(:str, "Restores installed gems to pristine condition from files located in the gem cache"),
            s(:hash,
              s(:pair,
                s(:sym, :version),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default)),
              s(:pair,
                s(:sym, :extensions),
                s(:true)),
              s(:pair,
                s(:sym, :extensions_set),
                s(:false)),
              s(:pair,
                s(:sym, :all),
                s(:false)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--all"),
              s(:str, "Restore all installed gems to pristine"),
              s(:str, "condition")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :all),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--skip=gem_name"),
              s(:str, "used on --all, skip if name == gem_name")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :skip),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--[no-]extensions"),
              s(:str, "Restore gems with extensions"),
              s(:str, "in addition to regular gems")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :extensions_set),
                s(:true)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :extensions),
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--only-executables"),
              s(:str, "Only restore executables")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :only_executables),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-E"),
              s(:str, "--[no-]env-shebang"),
              s(:str, "Rewrite executables with a shebang"),
              s(:str, "of /usr/bin/env")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :env_shebang),
              s(:lvar, :value))),
          s(:send, nil, :add_version_option,
            s(:str, "restore to"),
            s(:str, "pristine condition")))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEMNAME       gem to restore to pristine condition (unless --all)")),
      s(:def, :defaults_str,
        s(:args),
        s(:str, "--extensions")),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The pristine command compares an installed gem with the contents of its\n"),
          s(:str, "cached .gem file and restores any files that don't match the cached .gem's\n"),
          s(:str, "copy.\n"),
          s(:str, "\n"),
          s(:str, "If you have made modifications to an installed gem, the pristine command\n"),
          s(:str, "will revert them.  All extensions are rebuilt and all bin stubs for the gem\n"),
          s(:str, "are regenerated after checking for modifications.\n"),
          s(:str, "\n"),
          s(:str, "If the cached gem cannot be found it will be downloaded.\n"),
          s(:str, "\n"),
          s(:str, "If --no-extensions is provided pristine will not attempt to restore a gem\n"),
          s(:str, "with an extension.\n"),
          s(:str, "\n"),
          s(:str, "If --extensions is given (but not --all or gem names) only gems with\n"),
          s(:str, "extensions will be restored.\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " [GEMNAME ...]"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:if,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :all)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :map),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :extensions_set)),
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :extensions))),
                  s(:send,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :args)), :empty?)),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :select),
                  s(:args,
                    s(:arg, :spec)),
                  s(:and,
                    s(:send,
                      s(:lvar, :spec), :extensions),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :spec), :extensions), :empty?), :!))),
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send, nil, :get_all_gem_names), :map),
                    s(:args,
                      s(:arg, :gem_name)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Specification), :find_all_by_name,
                      s(:lvar, :gem_name),
                      s(:send,
                        s(:send, nil, :options), :[],
                        s(:sym, :version)))), :flatten)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :specs), :to_a), :empty?),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :Exception),
              s(:dstr,
                s(:str, "Failed to find gems "),
                s(:begin,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :args))),
                s(:str, " "),
                s(:begin,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :version))))), nil),
          s(:lvasgn, :install_dir,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :writable?,
              s(:lvar, :install_dir)), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :FilePermissionError), :new,
                s(:lvar, :install_dir)))),
          s(:send, nil, :say,
            s(:str, "Restoring gems to pristine condition...")),
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :spec), :default_gem?),
                s(:begin,
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Skipped "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :spec), :full_name)),
                      s(:str, ", it is a default gem"))),
                  s(:next)), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :name), :==,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :skip))),
                s(:begin,
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Skipped "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :spec), :full_name)),
                      s(:str, ", it was given through options"))),
                  s(:next)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :spec), :bundled_gem_in_old_ruby?),
                s(:begin,
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Skipped "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :spec), :full_name)),
                      s(:str, ", it is bundled with old Ruby"))),
                  s(:next)), nil),
              s(:if,
                s(:or,
                  s(:send,
                    s(:send,
                      s(:lvar, :spec), :extensions), :empty?),
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :extensions))), nil,
                s(:begin,
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Skipped "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :spec), :full_name)),
                      s(:str, ", it needs to compile an extension"))),
                  s(:next))),
              s(:lvasgn, :gem,
                s(:send,
                  s(:lvar, :spec), :cache_file)),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :gem)), nil,
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "rubygems/remote_fetcher")),
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Cached gem for "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :spec), :full_name)),
                      s(:str, " not found, attempting to fetch..."))),
                  s(:lvasgn, :dep,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Dependency), :new,
                      s(:send,
                        s(:lvar, :spec), :name),
                      s(:send,
                        s(:lvar, :spec), :version))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :found),
                      s(:lvasgn, :_)),
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :SpecFetcher), :fetcher), :spec_for_dependency,
                      s(:lvar, :dep))),
                  s(:if,
                    s(:send,
                      s(:lvar, :found), :empty?),
                    s(:begin,
                      s(:send, nil, :say,
                        s(:dstr,
                          s(:str, "Skipped "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :spec), :full_name)),
                          s(:str, ", it was not found from cache and remote sources"))),
                      s(:next)), nil),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :spec_candidate),
                      s(:lvasgn, :source)),
                    s(:send,
                      s(:lvar, :found), :first)),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :fetcher), :download,
                    s(:lvar, :spec_candidate),
                    s(:send,
                      s(:send,
                        s(:lvar, :source), :uri), :to_s),
                    s(:send,
                      s(:lvar, :spec), :base_dir)))),
              s(:lvasgn, :env_shebang,
                s(:if,
                  s(:send,
                    s(:send, nil, :options), :include?,
                    s(:sym, :env_shebang)),
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :env_shebang)),
                  s(:begin,
                    s(:lvasgn, :install_defaults,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :ConfigFile), :PLATFORM_DEFAULTS), :[],
                        s(:str, "install"))),
                    s(:send,
                      s(:send,
                        s(:lvar, :install_defaults), :to_s), :[],
                      s(:str, "--env-shebang"))))),
              s(:lvasgn, :installer,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Installer), :at,
                  s(:lvar, :gem),
                  s(:hash,
                    s(:pair,
                      s(:sym, :wrappers),
                      s(:true)),
                    s(:pair,
                      s(:sym, :force),
                      s(:true)),
                    s(:pair,
                      s(:sym, :install_dir),
                      s(:send,
                        s(:lvar, :spec), :base_dir)),
                    s(:pair,
                      s(:sym, :env_shebang),
                      s(:lvar, :env_shebang)),
                    s(:pair,
                      s(:sym, :build_args),
                      s(:send,
                        s(:lvar, :spec), :build_args))))),
              s(:if,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :only_executables)),
                s(:send,
                  s(:lvar, :installer), :generate_bin),
                s(:send,
                  s(:lvar, :installer), :install)),
              s(:send, nil, :say,
                s(:dstr,
                  s(:str, "Restored "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :spec), :full_name)))))))))))
