s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/local_remote_options")),
  s(:send, nil, :require,
    s(:str, "rubygems/version_option")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :SpecificationCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :LocalRemoteOptions)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :VersionOption)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Gem), :load_yaml),
          s(:super,
            s(:str, "specification"),
            s(:str, "Display gem specification (in yaml)"),
            s(:hash,
              s(:pair,
                s(:sym, :domain),
                s(:sym, :local)),
              s(:pair,
                s(:sym, :version),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :default)),
              s(:pair,
                s(:sym, :format),
                s(:sym, :yaml)))),
          s(:send, nil, :add_version_option,
            s(:str, "examine")),
          s(:send, nil, :add_platform_option),
          s(:send, nil, :add_prerelease_option),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--all"),
              s(:str, "Output specifications for all versions of"),
              s(:str, "the gem")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :all),
              s(:true))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--ruby"),
              s(:str, "Output ruby format")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :format),
              s(:sym, :ruby))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--yaml"),
              s(:str, "Output YAML format")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :format),
              s(:sym, :yaml))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "--marshal"),
              s(:str, "Output Marshal format")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :format),
              s(:sym, :marshal))),
          s(:send, nil, :add_local_remote_options))),
      s(:def, :arguments,
        s(:args),
        s(:dstr,
          s(:str, "GEMFILE       name of gem to show the gemspec for\n"),
          s(:str, "FIELD         name of gemspec field to show\n"))),
      s(:def, :defaults_str,
        s(:args),
        s(:dstr,
          s(:str, "--local --version '"),
          s(:begin,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:str, "' --yaml"))),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The specification command allows you to extract the specification from\n"),
          s(:str, "a gem for examination.\n"),
          s(:str, "\n"),
          s(:str, "The specification can be output in YAML, ruby or Marshal formats.\n"),
          s(:str, "\n"),
          s(:str, "Specific fields in the specification can be extracted in YAML format:\n"),
          s(:str, "\n"),
          s(:str, "  $ gem spec rake summary\n"),
          s(:str, "  --- Ruby based make-like utility.\n"),
          s(:str, "  ...\n"),
          s(:str, "\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " [GEMFILE] [FIELD]"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:array)),
          s(:lvasgn, :gem,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)), :shift)),
          s(:if,
            s(:lvar, :gem), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError),
              s(:str, "Please specify a gem name or file on the command line"))),
          s(:case,
            s(:lvasgn, :v,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :version))),
            s(:when,
              s(:const, nil, :String),
              s(:lvasgn, :req,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :create,
                  s(:lvar, :v)))),
            s(:when,
              s(:const,
                s(:const, nil, :Gem), :Requirement),
              s(:lvasgn, :req,
                s(:lvar, :v))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError),
              s(:dstr,
                s(:str, "Unsupported version type: '"),
                s(:begin,
                  s(:lvar, :v)),
                s(:str, "'")))),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :req), :none?), :!),
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :all))),
            s(:begin,
              s(:send, nil, :alert_error,
                s(:str, "Specify --all or -v, not both")),
              s(:send, nil, :terminate_interaction,
                s(:int, 1))), nil),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :all)),
            s(:lvasgn, :dep,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:lvar, :gem))),
            s(:lvasgn, :dep,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:lvar, :gem),
                s(:lvar, :req)))),
          s(:lvasgn, :field,
            s(:send, nil, :get_one_optional_argument)),
          s(:if,
            s(:and,
              s(:lvar, :field),
              s(:send,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :format)), :==,
                s(:sym, :ruby))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError),
              s(:str, "--ruby and FIELD are mutually exclusive")), nil),
          s(:if,
            s(:send, nil, :local?),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :gem)),
                s(:rescue,
                  s(:send,
                    s(:lvar, :specs), :<<,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Package), :new,
                        s(:lvar, :gem)), :spec)),
                  s(:resbody, nil, nil,
                    s(:nil)), nil), nil),
              s(:if,
                s(:send,
                  s(:lvar, :specs), :empty?),
                s(:send,
                  s(:lvar, :specs), :push,
                  s(:splat,
                    s(:send,
                      s(:lvar, :dep), :matching_specs))), nil)), nil),
          s(:if,
            s(:send, nil, :remote?),
            s(:begin,
              s(:send,
                s(:lvar, :dep), :prerelease=,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :prerelease))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :found),
                  s(:lvasgn, :_)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :SpecFetcher), :fetcher), :spec_for_dependency,
                  s(:lvar, :dep))),
              s(:send,
                s(:lvar, :specs), :push,
                s(:splat,
                  s(:block,
                    s(:send,
                      s(:lvar, :found), :map),
                    s(:args,
                      s(:arg, :spec)),
                    s(:lvar, :spec))))), nil),
          s(:if,
            s(:send,
              s(:lvar, :specs), :empty?),
            s(:begin,
              s(:send, nil, :alert_error,
                s(:dstr,
                  s(:str, "No gem matching '"),
                  s(:begin,
                    s(:lvar, :dep)),
                  s(:str, "' found"))),
              s(:send, nil, :terminate_interaction,
                s(:int, 1))), nil),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :all)), nil,
            s(:lvasgn, :specs,
              s(:array,
                s(:block,
                  s(:send,
                    s(:lvar, :specs), :max_by),
                  s(:args,
                    s(:arg, :s)),
                  s(:send,
                    s(:lvar, :s), :version))))),
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:if,
                s(:lvar, :field),
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :s), :send,
                    s(:lvar, :field))), nil),
              s(:send, nil, :say,
                s(:case,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :format)),
                  s(:when,
                    s(:sym, :ruby),
                    s(:send,
                      s(:lvar, :s), :to_ruby)),
                  s(:when,
                    s(:sym, :marshal),
                    s(:send,
                      s(:const, nil, :Marshal), :dump,
                      s(:lvar, :s))),
                  s(:send,
                    s(:lvar, :s), :to_yaml))),
              s(:send, nil, :say,
                s(:str, "\n")))))))))
