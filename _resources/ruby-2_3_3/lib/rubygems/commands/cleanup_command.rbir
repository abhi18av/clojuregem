s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/dependency_list")),
  s(:send, nil, :require,
    s(:str, "rubygems/uninstaller")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Commands), :CleanupCommand),
    s(:const,
      s(:const, nil, :Gem), :Command),
    s(:begin,
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:super,
            s(:str, "cleanup"),
            s(:str, "Clean up old versions of installed gems"),
            s(:hash,
              s(:pair,
                s(:sym, :force),
                s(:false)),
              s(:pair,
                s(:sym, :install_dir),
                s(:send,
                  s(:const, nil, :Gem), :dir)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:str, "-n"),
              s(:str, "-d"),
              s(:str, "--dryrun"),
              s(:str, "Do not uninstall gems")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :dryrun),
              s(:true))),
          s(:ivasgn, :@candidate_gems,
            s(:nil)),
          s(:ivasgn, :@default_gems,
            s(:array)),
          s(:ivasgn, :@full,
            s(:nil)),
          s(:ivasgn, :@gems_to_cleanup,
            s(:nil)),
          s(:ivasgn, :@original_home,
            s(:nil)),
          s(:ivasgn, :@original_path,
            s(:nil)),
          s(:ivasgn, :@primary_gems,
            s(:nil)))),
      s(:def, :arguments,
        s(:args),
        s(:str, "GEMNAME       name of gem to cleanup")),
      s(:def, :defaults_str,
        s(:args),
        s(:str, "--no-dryrun")),
      s(:def, :description,
        s(:args),
        s(:dstr,
          s(:str, "The cleanup command removes old versions of gems from GEM_HOME that are not\n"),
          s(:str, "required to meet a dependency.  If a gem is installed elsewhere in GEM_PATH\n"),
          s(:str, "the cleanup command won't delete it.\n"),
          s(:str, "\n"),
          s(:str, "If no gems are named all gems in GEM_HOME are cleaned.\n"))),
      s(:def, :usage,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :program_name)),
          s(:str, " [GEMNAME ...]"))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:send, nil, :say,
            s(:str, "Cleaning up installed gems...")),
          s(:if,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)), :empty?),
            s(:begin,
              s(:lvasgn, :done,
                s(:false)),
              s(:lvasgn, :last_set,
                s(:nil)),
              s(:until,
                s(:lvar, :done),
                s(:begin,
                  s(:send, nil, :clean_gems),
                  s(:lvasgn, :this_set,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:ivar, :@gems_to_cleanup), :map),
                        s(:args,
                          s(:arg, :spec)),
                        s(:send,
                          s(:lvar, :spec), :full_name)), :sort)),
                  s(:lvasgn, :done,
                    s(:or,
                      s(:send,
                        s(:lvar, :this_set), :empty?),
                      s(:send,
                        s(:lvar, :last_set), :==,
                        s(:lvar, :this_set)))),
                  s(:lvasgn, :last_set,
                    s(:lvar, :this_set))))),
            s(:send, nil, :clean_gems)),
          s(:send, nil, :say,
            s(:str, "Clean Up Complete")),
          s(:block,
            s(:send, nil, :verbose),
            s(:args),
            s(:begin,
              s(:lvasgn, :skipped,
                s(:block,
                  s(:send,
                    s(:ivar, :@default_gems), :map),
                  s(:args,
                    s(:arg, :spec)),
                  s(:send,
                    s(:lvar, :spec), :full_name))),
              s(:dstr,
                s(:str, "Skipped default gems: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :skipped), :join,
                    s(:str, ", ")))))))),
      s(:def, :clean_gems,
        s(:args),
        s(:begin,
          s(:send, nil, :get_primary_gems),
          s(:send, nil, :get_candidate_gems),
          s(:send, nil, :get_gems_to_cleanup),
          s(:ivasgn, :@full,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyList), :from_specs)),
          s(:lvasgn, :deplist,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyList), :new)),
          s(:block,
            s(:send,
              s(:ivar, :@gems_to_cleanup), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:lvar, :deplist), :add,
              s(:lvar, :spec))),
          s(:lvasgn, :deps,
            s(:send,
              s(:send,
                s(:lvar, :deplist), :strongly_connected_components), :flatten)),
          s(:ivasgn, :@original_home,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:ivasgn, :@original_path,
            s(:send,
              s(:const, nil, :Gem), :path)),
          s(:block,
            s(:send,
              s(:lvar, :deps), :reverse_each),
            s(:args,
              s(:arg, :spec)),
            s(:send, nil, :uninstall_dep,
              s(:lvar, :spec))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset))),
      s(:def, :get_candidate_gems,
        s(:args),
        s(:ivasgn, :@candidate_gems,
          s(:if,
            s(:send,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)), :empty?),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :to_a),
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :options), :[],
                    s(:sym, :args)), :map),
                s(:args,
                  s(:arg, :gem_name)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :find_all_by_name,
                  s(:lvar, :gem_name))), :flatten)))),
      s(:def, :get_gems_to_cleanup,
        s(:args),
        s(:begin,
          s(:lvasgn, :gems_to_cleanup,
            s(:block,
              s(:send,
                s(:ivar, :@candidate_gems), :select),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@primary_gems), :[],
                    s(:send,
                      s(:lvar, :spec), :name)), :version), :!=,
                s(:send,
                  s(:lvar, :spec), :version)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :default_gems),
              s(:lvasgn, :gems_to_cleanup)),
            s(:block,
              s(:send,
                s(:lvar, :gems_to_cleanup), :partition),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :default_gem?))),
          s(:op_asgn,
            s(:ivasgn, :@default_gems), :+,
            s(:lvar, :default_gems)),
          s(:send,
            s(:ivar, :@default_gems), :uniq!),
          s(:ivasgn, :@gems_to_cleanup,
            s(:send,
              s(:lvar, :gems_to_cleanup), :uniq)))),
      s(:def, :get_primary_gems,
        s(:args),
        s(:begin,
          s(:ivasgn, :@primary_gems,
            s(:hash)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :each),
            s(:args,
              s(:arg, :spec)),
            s(:if,
              s(:or,
                s(:send,
                  s(:send,
                    s(:ivar, :@primary_gems), :[],
                    s(:send,
                      s(:lvar, :spec), :name)), :nil?),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@primary_gems), :[],
                      s(:send,
                        s(:lvar, :spec), :name)), :version), :<,
                  s(:send,
                    s(:lvar, :spec), :version))),
              s(:send,
                s(:ivar, :@primary_gems), :[]=,
                s(:send,
                  s(:lvar, :spec), :name),
                s(:lvar, :spec)), nil)))),
      s(:def, :uninstall_dep,
        s(:args,
          s(:arg, :spec)),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@full), :ok_to_remove?,
                s(:send,
                  s(:lvar, :spec), :full_name)), nil,
              s(:return)),
            s(:if,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :dryrun)),
              s(:begin,
                s(:send, nil, :say,
                  s(:dstr,
                    s(:str, "Dry Run Mode: Would uninstall "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name)))),
                s(:return)), nil),
            s(:send, nil, :say,
              s(:dstr,
                s(:str, "Attempting to uninstall "),
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :full_name)))),
            s(:lvasgn, :uninstall_options,
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:false)),
                s(:pair,
                  s(:sym, :version),
                  s(:dstr,
                    s(:str, "= "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :version)))))),
            s(:send,
              s(:lvar, :uninstall_options), :[]=,
              s(:sym, :user_install),
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :user_dir), :==,
                s(:send,
                  s(:lvar, :spec), :base_dir))),
            s(:lvasgn, :uninstaller,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Uninstaller), :new,
                s(:send,
                  s(:lvar, :spec), :name),
                s(:lvar, :uninstall_options))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:lvar, :uninstaller), :uninstall),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Gem), :DependencyRemovalException),
                    s(:const,
                      s(:const, nil, :Gem), :InstallError),
                    s(:const,
                      s(:const, nil, :Gem), :GemNotInHomeException),
                    s(:const,
                      s(:const, nil, :Gem), :FilePermissionError)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:send, nil, :say,
                      s(:dstr,
                        s(:str, "Unable to uninstall "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :spec), :full_name)),
                        s(:str, ":"))),
                    s(:send, nil, :say,
                      s(:dstr,
                        s(:str, "\t"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :class)),
                        s(:str, ": "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :message)))))), nil))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:ivar, :@original_home),
            s(:splat,
              s(:ivar, :@original_path))))))))
