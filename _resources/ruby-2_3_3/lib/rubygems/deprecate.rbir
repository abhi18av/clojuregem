s(:module,
  s(:const,
    s(:const, nil, :Gem), :Deprecate),
  s(:begin,
    s(:defs,
      s(:self), :skip,
      s(:args),
      s(:or_asgn,
        s(:ivasgn, :@skip),
        s(:false))),
    s(:defs,
      s(:self), :skip=,
      s(:args,
        s(:arg, :v)),
      s(:ivasgn, :@skip,
        s(:lvar, :v))),
    s(:def, :skip_during,
      s(:args),
      s(:ensure,
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Deprecate), :skip=),
              s(:lvasgn, :original)),
            s(:array,
              s(:true),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Deprecate), :skip))),
          s(:yield)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Deprecate), :skip=,
          s(:lvar, :original)))),
    s(:def, :deprecate,
      s(:args,
        s(:arg, :name),
        s(:arg, :repl),
        s(:arg, :year),
        s(:arg, :month)),
      s(:block,
        s(:send, nil, :class_eval),
        s(:args),
        s(:begin,
          s(:lvasgn, :old,
            s(:dstr,
              s(:str, "_deprecated_"),
              s(:begin,
                s(:lvar, :name)))),
          s(:send, nil, :alias_method,
            s(:lvar, :old),
            s(:lvar, :name)),
          s(:block,
            s(:send, nil, :define_method,
              s(:lvar, :name)),
            s(:args,
              s(:restarg, :args),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :klass,
                s(:send,
                  s(:self), :kind_of?,
                  s(:const, nil, :Module))),
              s(:lvasgn, :target,
                s(:if,
                  s(:lvar, :klass),
                  s(:dstr,
                    s(:begin,
                      s(:self)),
                    s(:str, ".")),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:self), :class)),
                    s(:str, "#")))),
              s(:lvasgn, :msg,
                s(:array,
                  s(:dstr,
                    s(:str, "NOTE: "),
                    s(:begin,
                      s(:lvar, :target)),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, " is deprecated")),
                  s(:if,
                    s(:send,
                      s(:lvar, :repl), :==,
                      s(:sym, :none)),
                    s(:str, " with no replacement"),
                    s(:dstr,
                      s(:str, "; use "),
                      s(:begin,
                        s(:lvar, :repl)),
                      s(:str, " instead"))),
                  s(:send,
                    s(:str, ". It will be removed on or after %4d-%02d-01."), :%,
                    s(:array,
                      s(:lvar, :year),
                      s(:lvar, :month))),
                  s(:dstr,
                    s(:str, "\n"),
                    s(:begin,
                      s(:lvar, :target)),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, " called from "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Gem), :location_of_caller), :join,
                        s(:str, ":")))))),
              s(:if,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Deprecate), :skip), nil,
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :msg), :join)),
                    s(:str, ".")))),
              s(:send, nil, :send,
                s(:lvar, :old),
                s(:splat,
                  s(:lvar, :args)),
                s(:block_pass,
                  s(:lvar, :block)))))))),
    s(:send, nil, :module_function,
      s(:sym, :deprecate),
      s(:sym, :skip_during))))
