s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/remote_fetcher")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:send, nil, :require,
    s(:str, "rubygems/errors")),
  s(:send, nil, :require,
    s(:str, "rubygems/text")),
  s(:send, nil, :require,
    s(:str, "rubygems/name_tuple")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :SpecFetcher), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :Text)),
      s(:send, nil, :attr_reader,
        s(:sym, :latest_specs)),
      s(:send, nil, :attr_reader,
        s(:sym, :sources)),
      s(:send, nil, :attr_reader,
        s(:sym, :specs)),
      s(:send, nil, :attr_reader,
        s(:sym, :prerelease_specs)),
      s(:ivasgn, :@fetcher,
        s(:nil)),
      s(:defs,
        s(:self), :fetcher,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@fetcher),
          s(:send, nil, :new))),
      s(:defs,
        s(:self), :fetcher=,
        s(:args,
          s(:arg, :fetcher)),
        s(:ivasgn, :@fetcher,
          s(:lvar, :fetcher))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :sources,
            s(:nil))),
        s(:begin,
          s(:ivasgn, :@sources,
            s(:or,
              s(:lvar, :sources),
              s(:send,
                s(:const, nil, :Gem), :sources))),
          s(:ivasgn, :@update_cache,
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :stat,
                      s(:send,
                        s(:const, nil, :Gem), :user_home)), :uid), :==,
                  s(:send,
                    s(:const, nil, :Process), :uid)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :EACCES),
                    s(:const,
                      s(:const, nil, :Errno), :ENOENT)), nil,
                  s(:false)), nil))),
          s(:ivasgn, :@specs,
            s(:hash)),
          s(:ivasgn, :@latest_specs,
            s(:hash)),
          s(:ivasgn, :@prerelease_specs,
            s(:hash)),
          s(:ivasgn, :@caches,
            s(:hash,
              s(:pair,
                s(:sym, :latest),
                s(:ivar, :@latest_specs)),
              s(:pair,
                s(:sym, :prerelease),
                s(:ivar, :@prerelease_specs)),
              s(:pair,
                s(:sym, :released),
                s(:ivar, :@specs)))),
          s(:ivasgn, :@fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher)))),
      s(:def, :search_for_dependency,
        s(:args,
          s(:arg, :dependency),
          s(:optarg, :matching_platform,
            s(:true))),
        s(:begin,
          s(:lvasgn, :found,
            s(:hash)),
          s(:lvasgn, :rejected_specs,
            s(:hash)),
          s(:if,
            s(:send,
              s(:lvar, :dependency), :prerelease?),
            s(:if,
              s(:send,
                s(:lvar, :dependency), :specific?),
              s(:lvasgn, :type,
                s(:sym, :complete)),
              s(:lvasgn, :type,
                s(:sym, :abs_latest))),
            s(:if,
              s(:send,
                s(:lvar, :dependency), :latest_version?),
              s(:lvasgn, :type,
                s(:sym, :latest)),
              s(:lvasgn, :type,
                s(:sym, :released)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :list),
              s(:lvasgn, :errors)),
            s(:send, nil, :available_specs,
              s(:lvar, :type))),
          s(:block,
            s(:send,
              s(:lvar, :list), :each),
            s(:args,
              s(:arg, :source),
              s(:arg, :specs)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :dependency), :name), :is_a?,
                    s(:const, nil, :String)),
                  s(:send,
                    s(:lvar, :specs), :respond_to?,
                    s(:sym, :bsearch))),
                s(:begin,
                  s(:lvasgn, :start_index,
                    s(:block,
                      s(:send,
                        s(:begin,
                          s(:erange,
                            s(:int, 0),
                            s(:send,
                              s(:lvar, :specs), :length))), :bsearch),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :specs), :[],
                            s(:lvar, :i)), :name), :>=,
                        s(:send,
                          s(:lvar, :dependency), :name)))),
                  s(:lvasgn, :end_index,
                    s(:block,
                      s(:send,
                        s(:begin,
                          s(:erange,
                            s(:int, 0),
                            s(:send,
                              s(:lvar, :specs), :length))), :bsearch),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :specs), :[],
                            s(:lvar, :i)), :name), :>,
                        s(:send,
                          s(:lvar, :dependency), :name)))),
                  s(:if,
                    s(:and,
                      s(:lvar, :start_index),
                      s(:lvar, :end_index)),
                    s(:lvasgn, :specs,
                      s(:send,
                        s(:lvar, :specs), :[],
                        s(:erange,
                          s(:lvar, :start_index),
                          s(:lvar, :end_index)))), nil)), nil),
              s(:send,
                s(:lvar, :found), :[]=,
                s(:lvar, :source),
                s(:block,
                  s(:send,
                    s(:lvar, :specs), :select),
                  s(:args,
                    s(:arg, :tup)),
                  s(:if,
                    s(:send,
                      s(:lvar, :dependency), :match?,
                      s(:lvar, :tup)),
                    s(:if,
                      s(:and,
                        s(:lvar, :matching_platform),
                        s(:send,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Gem), :Platform), :match,
                            s(:send,
                              s(:lvar, :tup), :platform)), :!)),
                      s(:begin,
                        s(:lvasgn, :pm,
                          s(:begin,
                            s(:or_asgn,
                              s(:send,
                                s(:lvar, :rejected_specs), :[],
                                s(:lvar, :dependency)),
                              s(:send,
                                s(:const,
                                  s(:const, nil, :Gem), :PlatformMismatch), :new,
                                s(:send,
                                  s(:lvar, :tup), :name),
                                s(:send,
                                  s(:lvar, :tup), :version))))),
                        s(:send,
                          s(:lvar, :pm), :add_platform,
                          s(:send,
                            s(:lvar, :tup), :platform)),
                        s(:false)),
                      s(:true)), nil))))),
          s(:op_asgn,
            s(:lvasgn, :errors), :+,
            s(:send,
              s(:lvar, :rejected_specs), :values)),
          s(:lvasgn, :tuples,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :found), :each),
            s(:args,
              s(:arg, :source),
              s(:arg, :specs)),
            s(:block,
              s(:send,
                s(:lvar, :specs), :each),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :tuples), :<<,
                s(:array,
                  s(:lvar, :s),
                  s(:lvar, :source))))),
          s(:lvasgn, :tuples,
            s(:block,
              s(:send,
                s(:lvar, :tuples), :sort_by),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :[],
                s(:int, 0)))),
          s(:return,
            s(:array,
              s(:lvar, :tuples),
              s(:lvar, :errors))))),
      s(:def, :detect,
        s(:args,
          s(:optarg, :type,
            s(:sym, :complete))),
        s(:begin,
          s(:lvasgn, :tuples,
            s(:array)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :list),
              s(:lvasgn, :_)),
            s(:send, nil, :available_specs,
              s(:lvar, :type))),
          s(:block,
            s(:send,
              s(:lvar, :list), :each),
            s(:args,
              s(:arg, :source),
              s(:arg, :specs)),
            s(:block,
              s(:send,
                s(:lvar, :specs), :each),
              s(:args,
                s(:arg, :tup)),
              s(:if,
                s(:yield,
                  s(:lvar, :tup)),
                s(:send,
                  s(:lvar, :tuples), :<<,
                  s(:array,
                    s(:lvar, :tup),
                    s(:lvar, :source))), nil))),
          s(:lvar, :tuples))),
      s(:def, :spec_for_dependency,
        s(:args,
          s(:arg, :dependency),
          s(:optarg, :matching_platform,
            s(:true))),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :tuples),
              s(:lvasgn, :errors)),
            s(:send, nil, :search_for_dependency,
              s(:lvar, :dependency),
              s(:lvar, :matching_platform))),
          s(:lvasgn, :specs,
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :tuples), :each),
            s(:args,
              s(:arg, :tup),
              s(:arg, :source)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :spec,
                  s(:send,
                    s(:lvar, :source), :fetch_spec,
                    s(:lvar, :tup))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
                  s(:lvasgn, :e),
                  s(:send,
                    s(:lvar, :errors), :<<,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :SourceFetchProblem), :new,
                      s(:lvar, :source),
                      s(:lvar, :e)))),
                s(:send,
                  s(:lvar, :specs), :<<,
                  s(:array,
                    s(:lvar, :spec),
                    s(:lvar, :source)))))),
          s(:return,
            s(:array,
              s(:lvar, :specs),
              s(:lvar, :errors))))),
      s(:def, :suggest_gems_from_name,
        s(:args,
          s(:arg, :gem_name)),
        s(:begin,
          s(:lvasgn, :gem_name,
            s(:send,
              s(:send,
                s(:lvar, :gem_name), :downcase), :tr,
              s(:str, "_-"),
              s(:str, ""))),
          s(:lvasgn, :max,
            s(:send,
              s(:send,
                s(:lvar, :gem_name), :size), :/,
              s(:int, 2))),
          s(:lvasgn, :names,
            s(:send,
              s(:send,
                s(:send,
                  s(:send, nil, :available_specs,
                    s(:sym, :latest)), :first), :values), :flatten,
              s(:int, 1))),
          s(:lvasgn, :matches,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :names), :map),
                s(:args,
                  s(:arg, :n)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :n), :match_platform?), nil,
                    s(:next)),
                  s(:lvasgn, :distance,
                    s(:send, nil, :levenshtein_distance,
                      s(:lvar, :gem_name),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :n), :name), :downcase), :tr,
                        s(:str, "_-"),
                        s(:str, "")))),
                  s(:if,
                    s(:send,
                      s(:lvar, :distance), :>=,
                      s(:lvar, :max)),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :distance), :==,
                      s(:int, 0)),
                    s(:return,
                      s(:array,
                        s(:send,
                          s(:lvar, :n), :name))), nil),
                  s(:array,
                    s(:send,
                      s(:lvar, :n), :name),
                    s(:lvar, :distance)))), :compact)),
          s(:lvasgn, :matches,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :matches), :uniq), :sort_by),
              s(:args,
                s(:arg, :name),
                s(:arg, :dist)),
              s(:lvar, :dist))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :matches), :first,
                s(:int, 5)), :map),
            s(:args,
              s(:arg, :name),
              s(:arg, :dist)),
            s(:lvar, :name)))),
      s(:def, :available_specs,
        s(:args,
          s(:arg, :type)),
        s(:begin,
          s(:lvasgn, :errors,
            s(:array)),
          s(:lvasgn, :list,
            s(:hash)),
          s(:block,
            s(:send,
              s(:ivar, :@sources), :each_source),
            s(:args,
              s(:arg, :source)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :names,
                  s(:case,
                    s(:lvar, :type),
                    s(:when,
                      s(:sym, :latest),
                      s(:send, nil, :tuples_for,
                        s(:lvar, :source),
                        s(:sym, :latest))),
                    s(:when,
                      s(:sym, :released),
                      s(:send, nil, :tuples_for,
                        s(:lvar, :source),
                        s(:sym, :released))),
                    s(:when,
                      s(:sym, :complete),
                      s(:begin,
                        s(:lvasgn, :names,
                          s(:send,
                            s(:send, nil, :tuples_for,
                              s(:lvar, :source),
                              s(:sym, :prerelease),
                              s(:true)), :+,
                            s(:send, nil, :tuples_for,
                              s(:lvar, :source),
                              s(:sym, :released)))),
                        s(:send,
                          s(:lvar, :names), :sort))),
                    s(:when,
                      s(:sym, :abs_latest),
                      s(:begin,
                        s(:lvasgn, :names,
                          s(:send,
                            s(:send, nil, :tuples_for,
                              s(:lvar, :source),
                              s(:sym, :prerelease),
                              s(:true)), :+,
                            s(:send, nil, :tuples_for,
                              s(:lvar, :source),
                              s(:sym, :latest)))),
                        s(:send,
                          s(:lvar, :names), :sort))),
                    s(:when,
                      s(:sym, :prerelease),
                      s(:send, nil, :tuples_for,
                        s(:lvar, :source),
                        s(:sym, :prerelease))),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Gem), :Exception),
                      s(:dstr,
                        s(:str, "Unknown type - :"),
                        s(:begin,
                          s(:lvar, :type)))))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
                  s(:lvasgn, :e),
                  s(:send,
                    s(:lvar, :errors), :<<,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :SourceFetchProblem), :new,
                      s(:lvar, :source),
                      s(:lvar, :e)))),
                s(:send,
                  s(:lvar, :list), :[]=,
                  s(:lvar, :source),
                  s(:lvar, :names))))),
          s(:array,
            s(:lvar, :list),
            s(:lvar, :errors)))),
      s(:def, :tuples_for,
        s(:args,
          s(:arg, :source),
          s(:arg, :type),
          s(:optarg, :gracefully_ignore,
            s(:false))),
        s(:rescue,
          s(:or_asgn,
            s(:send,
              s(:send,
                s(:ivar, :@caches), :[],
                s(:lvar, :type)), :[],
              s(:send,
                s(:lvar, :source), :uri)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :source), :load_specs,
                  s(:lvar, :type)), :sort_by),
              s(:args,
                s(:arg, :tup)),
              s(:send,
                s(:lvar, :tup), :name))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :FetchError)), nil,
            s(:begin,
              s(:if,
                s(:lvar, :gracefully_ignore), nil,
                s(:send, nil, :raise)),
              s(:array))), nil)))))
