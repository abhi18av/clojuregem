s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/command")),
  s(:send, nil, :require,
    s(:str, "rubygems/exceptions")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:send, nil, :require,
    s(:str, "rubygems/ext")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Installer), nil,
    s(:begin,
      s(:casgn, nil, :ENV_PATHS,
        s(:array,
          s(:str, "/usr/bin/env"),
          s(:str, "/bin/env"))),
      s(:casgn, nil, :ExtensionBuildError,
        s(:const,
          s(:const,
            s(:const, nil, :Gem), :Ext), :BuildError)),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:send, nil, :attr_reader,
        s(:sym, :gem)),
      s(:send, nil, :attr_reader,
        s(:sym, :bin_dir)),
      s(:send, nil, :attr_reader,
        s(:sym, :build_root)),
      s(:send, nil, :attr_reader,
        s(:sym, :gem_home)),
      s(:send, nil, :attr_reader,
        s(:sym, :options)),
      s(:ivasgn, :@path_warning,
        s(:false)),
      s(:ivasgn, :@install_lock,
        s(:send,
          s(:const, nil, :Mutex), :new)),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :path_warning)),
          s(:send, nil, :attr_reader,
            s(:sym, :install_lock)),
          s(:send, nil, :attr_writer,
            s(:sym, :exec_format)),
          s(:def, :exec_format,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@exec_format),
              s(:send,
                s(:const, nil, :Gem), :default_exec_format))))),
      s(:defs,
        s(:self), :at,
        s(:args,
          s(:arg, :path),
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:lvasgn, :security_policy,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :security_policy))),
          s(:lvasgn, :package,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Package), :new,
              s(:lvar, :path),
              s(:lvar, :security_policy))),
          s(:send, nil, :new,
            s(:lvar, :package),
            s(:lvar, :options)))),
      s(:class,
        s(:const, nil, :FakePackage), nil,
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :spec)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :spec)),
            s(:ivasgn, :@spec,
              s(:lvar, :spec))),
          s(:def, :extract_files,
            s(:args,
              s(:arg, :destination_dir),
              s(:optarg, :pattern,
                s(:str, "*"))),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:lvar, :destination_dir)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :spec), :files), :each),
                s(:args,
                  s(:arg, :file)),
                s(:begin,
                  s(:lvasgn, :file,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :destination_dir),
                      s(:lvar, :file))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :file)),
                    s(:next), nil),
                  s(:send,
                    s(:const, nil, :FileUtils), :mkdir_p,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :file))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :File), :open,
                      s(:lvar, :file),
                      s(:str, "w")),
                    s(:args,
                      s(:arg, :fp)),
                    s(:send,
                      s(:lvar, :fp), :puts,
                      s(:dstr,
                        s(:str, "# "),
                        s(:begin,
                          s(:lvar, :file))))))))),
          s(:def, :copy_to,
            s(:args,
              s(:arg, :path)), nil))),
      s(:defs,
        s(:self), :for_spec,
        s(:args,
          s(:arg, :spec),
          s(:optarg, :options,
            s(:hash))),
        s(:send, nil, :new,
          s(:send,
            s(:const, nil, :FakePackage), :new,
            s(:lvar, :spec)),
          s(:lvar, :options))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :package),
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "fileutils")),
          s(:ivasgn, :@options,
            s(:lvar, :options)),
          s(:if,
            s(:send,
              s(:lvar, :package), :is_a?,
              s(:const, nil, :String)),
            s(:begin,
              s(:lvasgn, :security_policy,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :security_policy))),
              s(:ivasgn, :@package,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :new,
                  s(:lvar, :package),
                  s(:lvar, :security_policy))),
              s(:if,
                s(:gvar, :$VERBOSE),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "constructing an Installer object with a string is deprecated. Please use Gem::Installer.at (called from: "),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :caller), :first)),
                    s(:str, ")"))), nil)),
            s(:ivasgn, :@package,
              s(:lvar, :package))),
          s(:send, nil, :process_options),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :user_install)),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :unpack)), :!)),
            s(:begin,
              s(:ivasgn, :@gem_home,
                s(:send,
                  s(:const, nil, :Gem), :user_dir)),
              s(:if,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :bin_dir)), nil,
                s(:ivasgn, :@bin_dir,
                  s(:send,
                    s(:const, nil, :Gem), :bindir,
                    s(:send, nil, :gem_home)))),
              s(:send, nil, :check_that_user_bin_dir_is_in_path)), nil))),
      s(:def, :check_executable_overwrite,
        s(:args,
          s(:arg, :filename)),
        s(:begin,
          s(:if,
            s(:ivar, :@force),
            s(:return), nil),
          s(:lvasgn, :generated_bin,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@bin_dir),
              s(:send, nil, :formatted_program_filename,
                s(:lvar, :filename)))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :generated_bin)), nil,
            s(:return)),
          s(:lvasgn, :ruby_executable,
            s(:false)),
          s(:lvasgn, :existing,
            s(:nil)),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :generated_bin),
              s(:str, "rb")),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :gets), :=~,
                  s(:regexp,
                    s(:str, "^#!"),
                    s(:regopt))), nil,
                s(:next)),
              s(:send,
                s(:lvar, :io), :gets),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :gets), :=~,
                  s(:regexp,
                    s(:str, "This file was generated by RubyGems"),
                    s(:regopt))), nil,
                s(:next)),
              s(:lvasgn, :ruby_executable,
                s(:true)),
              s(:lvasgn, :existing,
                s(:send,
                  s(:send,
                    s(:lvar, :io), :read), :slice,
                  s(:regexp,
                    s(:str, "\n"),
                    s(:str, "          ^(\n"),
                    s(:str, "            gem \\s |\n"),
                    s(:str, "            load \\s Gem\\.bin_path\\(\n"),
                    s(:str, "          )\n"),
                    s(:str, "          (['\"])(.*?)(\\2),\n"),
                    s(:str, "        "),
                    s(:regopt, :x)),
                  s(:int, 3))))),
          s(:if,
            s(:send,
              s(:send,
                s(:send, nil, :spec), :name), :==,
              s(:lvar, :existing)),
            s(:return), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :default_bindir), :!=,
                s(:ivar, :@bin_dir)),
              s(:send,
                s(:lvar, :ruby_executable), :!)),
            s(:return), nil),
          s(:lvasgn, :question,
            s(:send,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send, nil, :spec), :name)),
                s(:str, "'s executable \""),
                s(:begin,
                  s(:lvar, :filename)),
                s(:str, "\" conflicts with ")), :dup)),
          s(:if,
            s(:lvar, :ruby_executable),
            s(:begin,
              s(:send,
                s(:lvar, :question), :<<,
                s(:lvar, :existing)),
              s(:if,
                s(:send, nil, :ask_yes_no,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :question)),
                    s(:str, "\nOverwrite the executable?")),
                  s(:false)),
                s(:return), nil),
              s(:lvasgn, :conflict,
                s(:dstr,
                  s(:str, "installed executable from "),
                  s(:begin,
                    s(:lvar, :existing))))),
            s(:begin,
              s(:send,
                s(:lvar, :question), :<<,
                s(:lvar, :generated_bin)),
              s(:if,
                s(:send, nil, :ask_yes_no,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :question)),
                    s(:str, "\nOverwrite the executable?")),
                  s(:false)),
                s(:return), nil),
              s(:lvasgn, :conflict,
                s(:lvar, :generated_bin)))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Gem), :InstallError),
            s(:dstr,
              s(:str, "\""),
              s(:begin,
                s(:lvar, :filename)),
              s(:str, "\" from "),
              s(:begin,
                s(:send,
                  s(:send, nil, :spec), :name)),
              s(:str, " conflicts with "),
              s(:begin,
                s(:lvar, :conflict)))))),
      s(:def, :gem_dir,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@gem_dir),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :gem_home),
            s(:str, "gems"),
            s(:send,
              s(:send, nil, :spec), :full_name)))),
      s(:def, :spec,
        s(:args),
        s(:rescue,
          s(:send,
            s(:ivar, :@package), :spec),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :Error)),
            s(:lvasgn, :e),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :InstallError),
              s(:dstr,
                s(:str, "invalid gem: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :e), :message))))), nil)),
      s(:def, :install,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:send, nil, :pre_install_checks),
            s(:send,
              s(:const, nil, :FileUtils), :rm_f,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send, nil, :gem_home),
                s(:str, "specifications"),
                s(:send,
                  s(:send, nil, :spec), :spec_name))),
            s(:send, nil, :run_pre_install_hooks),
            s(:send,
              s(:const, nil, :FileUtils), :rm_rf,
              s(:send, nil, :gem_dir)),
            s(:send,
              s(:const, nil, :FileUtils), :mkdir_p,
              s(:send, nil, :gem_dir)),
            s(:if,
              s(:send,
                s(:ivar, :@options), :[],
                s(:sym, :install_as_default)),
              s(:begin,
                s(:send,
                  s(:send, nil, :spec), :loaded_from=,
                  s(:send, nil, :default_spec_file)),
                s(:send, nil, :extract_bin),
                s(:send, nil, :write_default_spec)),
              s(:begin,
                s(:send,
                  s(:send, nil, :spec), :loaded_from=,
                  s(:send, nil, :spec_file)),
                s(:send, nil, :extract_files),
                s(:send, nil, :build_extensions),
                s(:send, nil, :write_build_info_file),
                s(:send, nil, :run_post_build_hooks),
                s(:send, nil, :generate_bin),
                s(:send, nil, :write_spec),
                s(:send, nil, :write_cache_file))),
            s(:if,
              s(:and,
                s(:send,
                  s(:send, nil, :options), :[],
                  s(:sym, :post_install_message)),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send, nil, :spec), :post_install_message), :nil?), :!)),
              s(:send, nil, :say,
                s(:send,
                  s(:send, nil, :spec), :post_install_message)), nil),
            s(:block,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Installer), :install_lock), :synchronize),
              s(:args),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :reset)),
            s(:send, nil, :run_post_install_hooks),
            s(:send, nil, :spec)),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const,
                  s(:const, nil, :Zlib), :GzipFile), :Error)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :InstallError),
              s(:dstr,
                s(:str, "gzip error installing "),
                s(:begin,
                  s(:send, nil, :gem))))), nil)),
      s(:def, :run_pre_install_hooks,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :pre_install_hooks), :each),
          s(:args,
            s(:arg, :hook)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :hook), :call,
                s(:self)), :==,
              s(:false)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :hook), :inspect), :=~,
                  s(:regexp,
                    s(:str, "@(.*:\\d+)"),
                    s(:regopt))),
                s(:lvasgn, :location,
                  s(:dstr,
                    s(:str, " at "),
                    s(:begin,
                      s(:nth_ref, 1)))), nil),
              s(:lvasgn, :message,
                s(:dstr,
                  s(:str, "pre-install hook"),
                  s(:begin,
                    s(:lvar, :location)),
                  s(:str, " failed for "),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :spec), :full_name)))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InstallError),
                s(:lvar, :message))), nil))),
      s(:def, :run_post_build_hooks,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :post_build_hooks), :each),
          s(:args,
            s(:arg, :hook)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :hook), :call,
                s(:self)), :==,
              s(:false)),
            s(:begin,
              s(:send,
                s(:const, nil, :FileUtils), :rm_rf,
                s(:send, nil, :gem_dir)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :hook), :inspect), :=~,
                  s(:regexp,
                    s(:str, "@(.*:\\d+)"),
                    s(:regopt))),
                s(:lvasgn, :location,
                  s(:dstr,
                    s(:str, " at "),
                    s(:begin,
                      s(:nth_ref, 1)))), nil),
              s(:lvasgn, :message,
                s(:dstr,
                  s(:str, "post-build hook"),
                  s(:begin,
                    s(:lvar, :location)),
                  s(:str, " failed for "),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :spec), :full_name)))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InstallError),
                s(:lvar, :message))), nil))),
      s(:def, :run_post_install_hooks,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :post_install_hooks), :each),
          s(:args,
            s(:arg, :hook)),
          s(:send,
            s(:lvar, :hook), :call,
            s(:self)))),
      s(:def, :installed_specs,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@specs),
          s(:kwbegin,
            s(:lvasgn, :specs,
              s(:array)),
            s(:block,
              s(:send,
                s(:send,
                  s(:const, nil, :Dir), :[],
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send, nil, :gem_home),
                    s(:str, "specifications"),
                    s(:str, "*.gemspec"))), :each),
              s(:args,
                s(:arg, :path)),
              s(:begin,
                s(:lvasgn, :spec,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :load,
                    s(:send,
                      s(:lvar, :path), :untaint))),
                s(:if,
                  s(:lvar, :spec),
                  s(:send,
                    s(:lvar, :specs), :<<,
                    s(:lvar, :spec)), nil))),
            s(:lvar, :specs)))),
      s(:def, :ensure_dependency,
        s(:args,
          s(:arg, :spec),
          s(:arg, :dependency)),
        s(:begin,
          s(:if,
            s(:send, nil, :installation_satisfies_dependency?,
              s(:lvar, :dependency)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :InstallError),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :name)),
                s(:str, " requires "),
                s(:begin,
                  s(:lvar, :dependency))))),
          s(:true))),
      s(:def, :installation_satisfies_dependency?,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@options), :[],
                s(:sym, :development)),
              s(:send,
                s(:send,
                  s(:lvar, :dependency), :type), :==,
                s(:sym, :development))),
            s(:return,
              s(:true)), nil),
          s(:if,
            s(:block,
              s(:send,
                s(:send, nil, :installed_specs), :detect),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :dependency), :matches_spec?,
                s(:lvar, :s))),
            s(:return,
              s(:true)), nil),
          s(:if,
            s(:ivar, :@only_install_dir),
            s(:return,
              s(:false)), nil),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :dependency), :matching_specs), :empty?), :!))),
      s(:def, :unpack,
        s(:args,
          s(:arg, :directory)),
        s(:begin,
          s(:ivasgn, :@gem_dir,
            s(:lvar, :directory)),
          s(:send, nil, :extract_files))),
      s(:def, :spec_file,
        s(:args),
        s(:send,
          s(:const, nil, :File), :join,
          s(:send, nil, :gem_home),
          s(:str, "specifications"),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:send, nil, :spec), :full_name)),
            s(:str, ".gemspec")))),
      s(:def, :default_spec_file,
        s(:args),
        s(:send,
          s(:const, nil, :File), :join,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :default_specifications_dir),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:send, nil, :spec), :full_name)),
            s(:str, ".gemspec")))),
      s(:def, :write_spec,
        s(:args),
        s(:block,
          s(:send, nil, :open,
            s(:send, nil, :spec_file),
            s(:str, "w")),
          s(:args,
            s(:arg, :file)),
          s(:begin,
            s(:send,
              s(:send, nil, :spec), :installed_by_version=,
              s(:send,
                s(:const, nil, :Gem), :rubygems_version)),
            s(:send,
              s(:lvar, :file), :puts,
              s(:send,
                s(:send, nil, :spec), :to_ruby_for_cache)),
            s(:rescue,
              s(:send,
                s(:lvar, :file), :fsync),
              s(:resbody, nil, nil,
                s(:nil)), nil)))),
      s(:def, :write_default_spec,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :File), :open,
            s(:send, nil, :default_spec_file),
            s(:str, "w")),
          s(:args,
            s(:arg, :file)),
          s(:send,
            s(:lvar, :file), :puts,
            s(:send,
              s(:send, nil, :spec), :to_ruby)))),
      s(:def, :generate_windows_script,
        s(:args,
          s(:arg, :filename),
          s(:arg, :bindir)),
        s(:if,
          s(:send,
            s(:const, nil, :Gem), :win_platform?),
          s(:begin,
            s(:lvasgn, :script_name,
              s(:send,
                s(:lvar, :filename), :+,
                s(:str, ".bat"))),
            s(:lvasgn, :script_path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :bindir),
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :script_name)))),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :script_path),
                s(:str, "w")),
              s(:args,
                s(:arg, :file)),
              s(:send,
                s(:lvar, :file), :puts,
                s(:send, nil, :windows_stub_script,
                  s(:lvar, :bindir),
                  s(:lvar, :filename)))),
            s(:send, nil, :verbose,
              s(:lvar, :script_path))), nil)),
      s(:def, :generate_bin,
        s(:args),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:send, nil, :spec), :executables), :nil?),
              s(:send,
                s(:send,
                  s(:send, nil, :spec), :executables), :empty?)),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:ivar, :@bin_dir)), nil,
            s(:send,
              s(:const, nil, :Dir), :mkdir,
              s(:ivar, :@bin_dir))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :writable?,
              s(:ivar, :@bin_dir)), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :FilePermissionError), :new,
                s(:ivar, :@bin_dir)))),
          s(:block,
            s(:send,
              s(:send,
                s(:send, nil, :spec), :executables), :each),
            s(:args,
              s(:arg, :filename)),
            s(:begin,
              s(:send,
                s(:lvar, :filename), :untaint),
              s(:lvasgn, :bin_path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send, nil, :gem_dir),
                  s(:send,
                    s(:send, nil, :spec), :bindir),
                  s(:lvar, :filename))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :bin_path)), nil,
                s(:begin,
                  s(:send, nil, :warn,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :bin_path)),
                      s(:str, " maybe `gem pristine "),
                      s(:begin,
                        s(:send,
                          s(:send, nil, :spec), :name)),
                      s(:str, "` will fix it?"))),
                  s(:next))),
              s(:lvasgn, :mode,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :bin_path)), :mode)),
              s(:if,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :mode), :|,
                      s(:int, 73))), :==,
                  s(:lvar, :mode)), nil,
                s(:send,
                  s(:const, nil, :FileUtils), :chmod,
                  s(:send,
                    s(:lvar, :mode), :|,
                    s(:int, 73)),
                  s(:lvar, :bin_path))),
              s(:send, nil, :check_executable_overwrite,
                s(:lvar, :filename)),
              s(:if,
                s(:ivar, :@wrappers),
                s(:send, nil, :generate_bin_script,
                  s(:lvar, :filename),
                  s(:ivar, :@bin_dir)),
                s(:send, nil, :generate_bin_symlink,
                  s(:lvar, :filename),
                  s(:ivar, :@bin_dir))))))),
      s(:def, :generate_bin_script,
        s(:args,
          s(:arg, :filename),
          s(:arg, :bindir)),
        s(:begin,
          s(:lvasgn, :bin_script_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :bindir),
              s(:send, nil, :formatted_program_filename,
                s(:lvar, :filename)))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_f,
            s(:lvar, :bin_script_path)),
          s(:block,
            s(:send,
              s(:const, nil, :File), :open,
              s(:lvar, :bin_script_path),
              s(:str, "wb"),
              s(:int, 493)),
            s(:args,
              s(:arg, :file)),
            s(:send,
              s(:lvar, :file), :print,
              s(:send, nil, :app_script_text,
                s(:lvar, :filename)))),
          s(:send, nil, :verbose,
            s(:lvar, :bin_script_path)),
          s(:send, nil, :generate_windows_script,
            s(:lvar, :filename),
            s(:lvar, :bindir)))),
      s(:def, :generate_bin_symlink,
        s(:args,
          s(:arg, :filename),
          s(:arg, :bindir)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:begin,
              s(:send, nil, :alert_warning,
                s(:str, "Unable to use symlinks on Windows, installing wrapper")),
              s(:send, nil, :generate_bin_script,
                s(:lvar, :filename),
                s(:lvar, :bindir)),
              s(:return)), nil),
          s(:lvasgn, :src,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send, nil, :gem_dir),
              s(:send,
                s(:send, nil, :spec), :bindir),
              s(:lvar, :filename))),
          s(:lvasgn, :dst,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :bindir),
              s(:send, nil, :formatted_program_filename,
                s(:lvar, :filename)))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :dst)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :symlink?,
                  s(:lvar, :dst)),
                s(:begin,
                  s(:lvasgn, :link,
                    s(:send,
                      s(:send,
                        s(:const, nil, :File), :readlink,
                        s(:lvar, :dst)), :split,
                      s(:const,
                        s(:const, nil, :File), :SEPARATOR))),
                  s(:lvasgn, :cur_version,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Version), :create,
                      s(:send,
                        s(:send,
                          s(:lvar, :link), :[],
                          s(:int, -3)), :sub,
                        s(:regexp,
                          s(:str, "^.*-"),
                          s(:regopt)),
                        s(:str, "")))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send, nil, :spec), :version), :<,
                      s(:lvar, :cur_version)),
                    s(:return), nil)), nil),
              s(:send,
                s(:const, nil, :File), :unlink,
                s(:lvar, :dst))), nil),
          s(:send,
            s(:const, nil, :FileUtils), :symlink,
            s(:lvar, :src),
            s(:lvar, :dst),
            s(:hash,
              s(:pair,
                s(:sym, :verbose),
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :configuration), :really_verbose)))))),
      s(:def, :shebang,
        s(:args,
          s(:arg, :bin_file_name)),
        s(:begin,
          s(:if,
            s(:ivar, :@env_shebang),
            s(:lvasgn, :ruby_name,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "ruby_install_name"))), nil),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send, nil, :gem_dir),
              s(:send,
                s(:send, nil, :spec), :bindir),
              s(:lvar, :bin_file_name))),
          s(:lvasgn, :first_line,
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :path),
                s(:str, "rb")),
              s(:args,
                s(:arg, :file)),
              s(:send,
                s(:lvar, :file), :gets))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\A#!"),
                s(:regopt)),
              s(:lvar, :first_line)),
            s(:begin,
              s(:lvasgn, :shebang,
                s(:send,
                  s(:lvar, :first_line), :sub,
                  s(:regexp,
                    s(:str, "\\A\\#!.*?ruby\\S*((\\s+\\S+)+)"),
                    s(:regopt)),
                  s(:dstr,
                    s(:str, "#!"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :ruby))))),
              s(:lvasgn, :opts,
                s(:nth_ref, 1)),
              s(:send,
                s(:lvar, :shebang), :strip!)), nil),
          s(:if,
            s(:lvasgn, :which,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :configuration), :[],
                s(:sym, :custom_shebang))),
            s(:begin,
              s(:lvasgn, :which,
                s(:send,
                  s(:lvar, :which), :gsub,
                  s(:regexp,
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :bin_file_name)),
                    s(:str, "$"),
                    s(:regopt)),
                  s(:dstr,
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RbConfig), :CONFIG), :[],
                        s(:str, "ruby_install_name")))))),
              s(:lvasgn, :which,
                s(:block,
                  s(:send,
                    s(:lvar, :which), :gsub,
                    s(:regexp,
                      s(:str, "\\$(\\w+)"),
                      s(:regopt))),
                  s(:args),
                  s(:case,
                    s(:nth_ref, 1),
                    s(:when,
                      s(:str, "env"),
                      s(:or_asgn,
                        s(:ivasgn, :@env_path),
                        s(:block,
                          s(:send,
                            s(:const, nil, :ENV_PATHS), :find),
                          s(:args,
                            s(:arg, :env_path)),
                          s(:send,
                            s(:const, nil, :File), :executable?,
                            s(:lvar, :env_path))))),
                    s(:when,
                      s(:str, "ruby"),
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Gem), :ruby)),
                        s(:begin,
                          s(:lvar, :opts)))),
                    s(:when,
                      s(:str, "exec"),
                      s(:lvar, :bin_file_name)),
                    s(:when,
                      s(:str, "name"),
                      s(:send,
                        s(:send, nil, :spec), :name)), nil))),
              s(:dstr,
                s(:str, "#!"),
                s(:begin,
                  s(:lvar, :which)))),
            s(:if,
              s(:send,
                s(:lvar, :ruby_name), :!),
              s(:dstr,
                s(:str, "#!"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Gem), :ruby)),
                s(:begin,
                  s(:lvar, :opts))),
              s(:if,
                s(:lvar, :opts),
                s(:dstr,
                  s(:str, "#!/bin/sh\n'exec' "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :ruby_name), :dump)),
                  s(:str, " '-x' \"$0\" \"$@\"\n"),
                  s(:begin,
                    s(:lvar, :shebang))),
                s(:begin,
                  s(:or_asgn,
                    s(:ivasgn, :@env_path),
                    s(:block,
                      s(:send,
                        s(:const, nil, :ENV_PATHS), :find),
                      s(:args,
                        s(:arg, :env_path)),
                      s(:send,
                        s(:const, nil, :File), :executable?,
                        s(:lvar, :env_path)))),
                  s(:dstr,
                    s(:str, "#!"),
                    s(:begin,
                      s(:ivar, :@env_path)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :ruby_name))))))))),
      s(:def, :ensure_loadable_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :ruby,
            s(:send,
              s(:send, nil, :spec), :to_ruby_for_cache)),
          s(:send,
            s(:lvar, :ruby), :untaint),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :eval,
                s(:lvar, :ruby)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :StandardError),
                  s(:const, nil, :SyntaxError)),
                s(:lvasgn, :e),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :InstallError),
                  s(:dstr,
                    s(:str, "The specification for "),
                    s(:begin,
                      s(:send,
                        s(:send, nil, :spec), :full_name)),
                    s(:str, " is corrupt ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :e), :class)),
                    s(:str, ")")))), nil)))),
      s(:def, :ensure_required_ruby_version_met,
        s(:args),
        s(:if,
          s(:lvasgn, :rrv,
            s(:send,
              s(:send, nil, :spec), :required_ruby_version)),
          s(:if,
            s(:send,
              s(:lvar, :rrv), :satisfied_by?,
              s(:send,
                s(:const, nil, :Gem), :ruby_version)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :InstallError),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send, nil, :spec), :name)),
                s(:str, " requires Ruby version "),
                s(:begin,
                  s(:lvar, :rrv)),
                s(:str, ".")))), nil)),
      s(:def, :ensure_required_rubygems_version_met,
        s(:args),
        s(:if,
          s(:lvasgn, :rrgv,
            s(:send,
              s(:send, nil, :spec), :required_rubygems_version)),
          s(:if,
            s(:send,
              s(:lvar, :rrgv), :satisfied_by?,
              s(:send,
                s(:const, nil, :Gem), :rubygems_version)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :InstallError),
              s(:send,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:send, nil, :spec), :name)),
                  s(:str, " requires RubyGems version "),
                  s(:begin,
                    s(:lvar, :rrgv)),
                  s(:str, ". ")), :+,
                s(:str, "Try 'gem update --system' to update RubyGems itself.")))), nil)),
      s(:def, :ensure_dependencies_met,
        s(:args),
        s(:begin,
          s(:lvasgn, :deps,
            s(:send,
              s(:send, nil, :spec), :runtime_dependencies)),
          s(:if,
            s(:ivar, :@development),
            s(:op_asgn,
              s(:lvasgn, :deps), :|,
              s(:send,
                s(:send, nil, :spec), :development_dependencies)), nil),
          s(:block,
            s(:send,
              s(:lvar, :deps), :each),
            s(:args,
              s(:arg, :dep_gem)),
            s(:send, nil, :ensure_dependency,
              s(:send, nil, :spec),
              s(:lvar, :dep_gem))))),
      s(:def, :process_options,
        s(:args),
        s(:begin,
          s(:ivasgn, :@options,
            s(:send,
              s(:hash,
                s(:pair,
                  s(:sym, :bin_dir),
                  s(:nil)),
                s(:pair,
                  s(:sym, :env_shebang),
                  s(:false)),
                s(:pair,
                  s(:sym, :force),
                  s(:false)),
                s(:pair,
                  s(:sym, :only_install_dir),
                  s(:false)),
                s(:pair,
                  s(:sym, :post_install_message),
                  s(:true))), :merge,
              s(:send, nil, :options))),
          s(:ivasgn, :@env_shebang,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :env_shebang))),
          s(:ivasgn, :@force,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :force))),
          s(:ivasgn, :@install_dir,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :install_dir))),
          s(:ivasgn, :@gem_home,
            s(:or,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :install_dir)),
              s(:send,
                s(:const, nil, :Gem), :dir))),
          s(:ivasgn, :@ignore_dependencies,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :ignore_dependencies))),
          s(:ivasgn, :@format_executable,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :format_executable))),
          s(:ivasgn, :@wrappers,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :wrappers))),
          s(:ivasgn, :@only_install_dir,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :only_install_dir))),
          s(:ivasgn, :@bin_dir,
            s(:or,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :bin_dir)),
              s(:send,
                s(:const, nil, :Gem), :bindir,
                s(:send, nil, :gem_home)))),
          s(:ivasgn, :@development,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :development))),
          s(:ivasgn, :@build_root,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :build_root))),
          s(:ivasgn, :@build_args,
            s(:or,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :build_args)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Command), :build_args))),
          s(:if,
            s(:send,
              s(:ivar, :@build_root), :nil?), nil,
            s(:begin,
              s(:send, nil, :require,
                s(:str, "pathname")),
              s(:ivasgn, :@build_root,
                s(:send,
                  s(:send,
                    s(:const, nil, :Pathname), :new,
                    s(:ivar, :@build_root)), :expand_path)),
              s(:ivasgn, :@bin_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@build_root),
                  s(:or,
                    s(:send,
                      s(:send, nil, :options), :[],
                      s(:sym, :bin_dir)),
                    s(:send,
                      s(:const, nil, :Gem), :bindir,
                      s(:ivar, :@gem_home))))),
              s(:ivasgn, :@gem_home,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@build_root),
                  s(:ivar, :@gem_home))),
              s(:send, nil, :alert_warning,
                s(:dstr,
                  s(:str, "You build with buildroot.\n  Build root: "),
                  s(:begin,
                    s(:ivar, :@build_root)),
                  s(:str, "\n  Bin dir: "),
                  s(:begin,
                    s(:ivar, :@bin_dir)),
                  s(:str, "\n  Gem home: "),
                  s(:begin,
                    s(:ivar, :@gem_home)))))))),
      s(:def, :check_that_user_bin_dir_is_in_path,
        s(:args),
        s(:begin,
          s(:lvasgn, :user_bin_dir,
            s(:or,
              s(:ivar, :@bin_dir),
              s(:send,
                s(:const, nil, :Gem), :bindir,
                s(:send, nil, :gem_home)))),
          s(:if,
            s(:const,
              s(:const, nil, :File), :ALT_SEPARATOR),
            s(:lvasgn, :user_bin_dir,
              s(:send,
                s(:lvar, :user_bin_dir), :gsub,
                s(:const,
                  s(:const, nil, :File), :SEPARATOR),
                s(:const,
                  s(:const, nil, :File), :ALT_SEPARATOR))), nil),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "PATH"))),
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:begin,
              s(:lvasgn, :path,
                s(:send,
                  s(:lvar, :path), :downcase)),
              s(:lvasgn, :user_bin_dir,
                s(:send,
                  s(:lvar, :user_bin_dir), :downcase))), nil),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :path), :split,
              s(:const,
                s(:const, nil, :File), :PATH_SEPARATOR))),
          s(:if,
            s(:send,
              s(:lvar, :path), :include?,
              s(:lvar, :user_bin_dir)), nil,
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :win_platform?), :!),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :include?,
                    s(:send,
                      s(:lvar, :user_bin_dir), :sub,
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:str, "HOME")),
                      s(:str, "~"))))), nil,
              s(:if,
                s(:send,
                  s(:send,
                    s(:self), :class), :path_warning), nil,
                s(:begin,
                  s(:send, nil, :alert_warning,
                    s(:dstr,
                      s(:str, "You don't have "),
                      s(:begin,
                        s(:lvar, :user_bin_dir)),
                      s(:str, " in your PATH,\n\t  gem executables will not run."))),
                  s(:send,
                    s(:send,
                      s(:self), :class), :path_warning=,
                    s(:true)))))))),
      s(:def, :verify_gem_home,
        s(:args,
          s(:optarg, :unpack,
            s(:false))),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send, nil, :gem_home)),
          s(:if,
            s(:or,
              s(:lvar, :unpack),
              s(:send,
                s(:const, nil, :File), :writable?,
                s(:send, nil, :gem_home))), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :FilePermissionError),
              s(:send, nil, :gem_home))))),
      s(:def, :app_script_text,
        s(:args,
          s(:arg, :bin_file_name)),
        s(:return,
          s(:dstr,
            s(:begin,
              s(:send, nil, :shebang,
                s(:lvar, :bin_file_name))),
            s(:str, "\n"),
            s(:str, "#\n"),
            s(:str, "# This file was generated by RubyGems.\n"),
            s(:str, "#\n"),
            s(:str, "# The application '"),
            s(:begin,
              s(:send,
                s(:send, nil, :spec), :name)),
            s(:str, "' is installed as part of a gem, and\n"),
            s(:str, "# this file is here to facilitate running it.\n"),
            s(:str, "#\n"),
            s(:str, "\n"),
            s(:str, "require 'rubygems'\n"),
            s(:str, "\n"),
            s(:str, "version = \""),
            s(:begin,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)),
            s(:str, ".a\"\n"),
            s(:str, "\n"),
            s(:str, "if ARGV.first\n"),
            s(:str, "  str = ARGV.first\n"),
            s(:str, "  str = str.dup.force_encoding(\"BINARY\") if str.respond_to? :force_encoding\n"),
            s(:str, "  if str =~ /\\A_(.*)_\\z/ and Gem::Version.correct?($1) then\n"),
            s(:str, "    version = $1\n"),
            s(:str, "    ARGV.shift\n"),
            s(:str, "  end\n"),
            s(:str, "end\n"),
            s(:str, "\n"),
            s(:str, "load Gem.bin_path('"),
            s(:begin,
              s(:send,
                s(:send, nil, :spec), :name)),
            s(:str, "', '"),
            s(:begin,
              s(:lvar, :bin_file_name)),
            s(:str, "', version)\n")))),
      s(:def, :windows_stub_script,
        s(:args,
          s(:arg, :bindir),
          s(:arg, :bin_file_name)),
        s(:begin,
          s(:lvasgn, :ruby,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :ruby), :gsub,
                s(:regexp,
                  s(:str, "^\\\"|\\\"$"),
                  s(:regopt)),
                s(:str, "")), :tr,
              s(:const,
                s(:const, nil, :File), :SEPARATOR),
              s(:str, "\\"))),
          s(:return,
            s(:dstr,
              s(:str, "@ECHO OFF\n"),
              s(:str, "IF NOT \"%~f0\" == \"~f0\" GOTO :WinNT\n"),
              s(:str, "@\""),
              s(:begin,
                s(:lvar, :ruby)),
              s(:str, "\" \""),
              s(:begin,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :bindir),
                  s(:lvar, :bin_file_name))),
              s(:str, "\" %1 %2 %3 %4 %5 %6 %7 %8 %9\n"),
              s(:str, "GOTO :EOF\n"),
              s(:str, ":WinNT\n"),
              s(:str, "@\""),
              s(:begin,
                s(:lvar, :ruby)),
              s(:str, "\" \"%~dpn0\" %*\n"))))),
      s(:def, :build_extensions,
        s(:args),
        s(:begin,
          s(:lvasgn, :builder,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :Builder), :new,
              s(:send, nil, :spec),
              s(:ivar, :@build_args))),
          s(:send,
            s(:lvar, :builder), :build_extensions))),
      s(:def, :extension_build_error,
        s(:args,
          s(:arg, :build_dir),
          s(:arg, :output),
          s(:optarg, :backtrace,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :builder,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Ext), :Builder), :new,
              s(:send, nil, :spec),
              s(:ivar, :@build_args))),
          s(:send,
            s(:lvar, :builder), :build_error,
            s(:lvar, :build_dir),
            s(:lvar, :output),
            s(:lvar, :backtrace)))),
      s(:def, :extract_files,
        s(:args),
        s(:send,
          s(:ivar, :@package), :extract_files,
          s(:send, nil, :gem_dir))),
      s(:def, :extract_bin,
        s(:args),
        s(:send,
          s(:ivar, :@package), :extract_files,
          s(:send, nil, :gem_dir),
          s(:str, "bin/*"))),
      s(:def, :formatted_program_filename,
        s(:args,
          s(:arg, :filename)),
        s(:if,
          s(:ivar, :@format_executable),
          s(:send,
            s(:send,
              s(:send,
                s(:self), :class), :exec_format), :%,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:lvar, :filename))),
          s(:lvar, :filename))),
      s(:def, :dir,
        s(:args),
        s(:send,
          s(:send, nil, :gem_dir), :to_s)),
      s(:def, :pre_install_checks,
        s(:args),
        s(:begin,
          s(:send, nil, :verify_gem_home,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :unpack))),
          s(:send, nil, :ensure_loadable_spec),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :install_as_default)),
            s(:send,
              s(:const, nil, :Gem), :ensure_default_gem_subdirectories,
              s(:send, nil, :gem_home)),
            s(:send,
              s(:const, nil, :Gem), :ensure_gem_subdirectories,
              s(:send, nil, :gem_home))),
          s(:if,
            s(:ivar, :@force),
            s(:return,
              s(:true)), nil),
          s(:send, nil, :ensure_required_ruby_version_met),
          s(:send, nil, :ensure_required_rubygems_version_met),
          s(:if,
            s(:ivar, :@ignore_dependencies), nil,
            s(:send, nil, :ensure_dependencies_met)),
          s(:true))),
      s(:def, :write_build_info_file,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@build_args), :empty?),
            s(:return), nil),
          s(:lvasgn, :build_info_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send, nil, :gem_home),
              s(:str, "build_info"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :build_info_dir)),
          s(:lvasgn, :build_info_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :build_info_dir),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send, nil, :spec), :full_name)),
                s(:str, ".info")))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :build_info_file),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:block,
              s(:send,
                s(:ivar, :@build_args), :each),
              s(:args,
                s(:arg, :arg)),
              s(:send,
                s(:lvar, :io), :puts,
                s(:lvar, :arg)))))),
      s(:def, :write_cache_file,
        s(:args),
        s(:begin,
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send, nil, :gem_home),
              s(:str, "cache"),
              s(:send,
                s(:send, nil, :spec), :file_name))),
          s(:send,
            s(:ivar, :@package), :copy_to,
            s(:lvar, :cache_file)))))))
