s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :RequestSet), :GemDependencyAPI), nil,
  s(:begin,
    s(:casgn, nil, :ENGINE_MAP,
      s(:hash,
        s(:pair,
          s(:sym, :jruby),
          s(:array,
            s(:str, "jruby"))),
        s(:pair,
          s(:sym, :jruby_18),
          s(:array,
            s(:str, "jruby"))),
        s(:pair,
          s(:sym, :jruby_19),
          s(:array,
            s(:str, "jruby"))),
        s(:pair,
          s(:sym, :maglev),
          s(:array,
            s(:str, "maglev"))),
        s(:pair,
          s(:sym, :mri),
          s(:array,
            s(:str, "ruby"))),
        s(:pair,
          s(:sym, :mri_18),
          s(:array,
            s(:str, "ruby"))),
        s(:pair,
          s(:sym, :mri_19),
          s(:array,
            s(:str, "ruby"))),
        s(:pair,
          s(:sym, :mri_20),
          s(:array,
            s(:str, "ruby"))),
        s(:pair,
          s(:sym, :mri_21),
          s(:array,
            s(:str, "ruby"))),
        s(:pair,
          s(:sym, :rbx),
          s(:array,
            s(:str, "rbx"))),
        s(:pair,
          s(:sym, :ruby),
          s(:array,
            s(:str, "ruby"),
            s(:str, "rbx"),
            s(:str, "maglev"))),
        s(:pair,
          s(:sym, :ruby_18),
          s(:array,
            s(:str, "ruby"),
            s(:str, "rbx"),
            s(:str, "maglev"))),
        s(:pair,
          s(:sym, :ruby_19),
          s(:array,
            s(:str, "ruby"),
            s(:str, "rbx"),
            s(:str, "maglev"))),
        s(:pair,
          s(:sym, :ruby_20),
          s(:array,
            s(:str, "ruby"),
            s(:str, "rbx"),
            s(:str, "maglev"))),
        s(:pair,
          s(:sym, :ruby_21),
          s(:array,
            s(:str, "ruby"),
            s(:str, "rbx"),
            s(:str, "maglev"))))),
    s(:lvasgn, :mswin,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Platform), :new,
        s(:str, "x86-mswin32"))),
    s(:lvasgn, :mswin64,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Platform), :new,
        s(:str, "x64-mswin64"))),
    s(:lvasgn, :x86_mingw,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Platform), :new,
        s(:str, "x86-mingw32"))),
    s(:lvasgn, :x64_mingw,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Platform), :new,
        s(:str, "x64-mingw32"))),
    s(:casgn, nil, :PLATFORM_MAP,
      s(:hash,
        s(:pair,
          s(:sym, :jruby),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :jruby_18),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :jruby_19),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :maglev),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :mingw),
          s(:lvar, :x86_mingw)),
        s(:pair,
          s(:sym, :mingw_18),
          s(:lvar, :x86_mingw)),
        s(:pair,
          s(:sym, :mingw_19),
          s(:lvar, :x86_mingw)),
        s(:pair,
          s(:sym, :mingw_20),
          s(:lvar, :x86_mingw)),
        s(:pair,
          s(:sym, :mingw_21),
          s(:lvar, :x86_mingw)),
        s(:pair,
          s(:sym, :mri),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :mri_18),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :mri_19),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :mri_20),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :mri_21),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :mswin),
          s(:lvar, :mswin)),
        s(:pair,
          s(:sym, :mswin_18),
          s(:lvar, :mswin)),
        s(:pair,
          s(:sym, :mswin_19),
          s(:lvar, :mswin)),
        s(:pair,
          s(:sym, :mswin_20),
          s(:lvar, :mswin)),
        s(:pair,
          s(:sym, :mswin_21),
          s(:lvar, :mswin)),
        s(:pair,
          s(:sym, :mswin64),
          s(:lvar, :mswin64)),
        s(:pair,
          s(:sym, :mswin64_19),
          s(:lvar, :mswin64)),
        s(:pair,
          s(:sym, :mswin64_20),
          s(:lvar, :mswin64)),
        s(:pair,
          s(:sym, :mswin64_21),
          s(:lvar, :mswin64)),
        s(:pair,
          s(:sym, :rbx),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :ruby),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :ruby_18),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :ruby_19),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :ruby_20),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :ruby_21),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY)),
        s(:pair,
          s(:sym, :x64_mingw),
          s(:lvar, :x64_mingw)),
        s(:pair,
          s(:sym, :x64_mingw_20),
          s(:lvar, :x64_mingw)),
        s(:pair,
          s(:sym, :x64_mingw_21),
          s(:lvar, :x64_mingw)))),
    s(:lvasgn, :gt_eq_0,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Requirement), :new,
        s(:str, ">= 0"))),
    s(:lvasgn, :tilde_gt_1_8_0,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Requirement), :new,
        s(:str, "~> 1.8.0"))),
    s(:lvasgn, :tilde_gt_1_9_0,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Requirement), :new,
        s(:str, "~> 1.9.0"))),
    s(:lvasgn, :tilde_gt_2_0_0,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Requirement), :new,
        s(:str, "~> 2.0.0"))),
    s(:lvasgn, :tilde_gt_2_1_0,
      s(:send,
        s(:const,
          s(:const, nil, :Gem), :Requirement), :new,
        s(:str, "~> 2.1.0"))),
    s(:casgn, nil, :VERSION_MAP,
      s(:hash,
        s(:pair,
          s(:sym, :jruby),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :jruby_18),
          s(:lvar, :tilde_gt_1_8_0)),
        s(:pair,
          s(:sym, :jruby_19),
          s(:lvar, :tilde_gt_1_9_0)),
        s(:pair,
          s(:sym, :maglev),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :mingw),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :mingw_18),
          s(:lvar, :tilde_gt_1_8_0)),
        s(:pair,
          s(:sym, :mingw_19),
          s(:lvar, :tilde_gt_1_9_0)),
        s(:pair,
          s(:sym, :mingw_20),
          s(:lvar, :tilde_gt_2_0_0)),
        s(:pair,
          s(:sym, :mingw_21),
          s(:lvar, :tilde_gt_2_1_0)),
        s(:pair,
          s(:sym, :mri),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :mri_18),
          s(:lvar, :tilde_gt_1_8_0)),
        s(:pair,
          s(:sym, :mri_19),
          s(:lvar, :tilde_gt_1_9_0)),
        s(:pair,
          s(:sym, :mri_20),
          s(:lvar, :tilde_gt_2_0_0)),
        s(:pair,
          s(:sym, :mri_21),
          s(:lvar, :tilde_gt_2_1_0)),
        s(:pair,
          s(:sym, :mswin),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :mswin_18),
          s(:lvar, :tilde_gt_1_8_0)),
        s(:pair,
          s(:sym, :mswin_19),
          s(:lvar, :tilde_gt_1_9_0)),
        s(:pair,
          s(:sym, :mswin_20),
          s(:lvar, :tilde_gt_2_0_0)),
        s(:pair,
          s(:sym, :mswin_21),
          s(:lvar, :tilde_gt_2_1_0)),
        s(:pair,
          s(:sym, :mswin64),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :mswin64_19),
          s(:lvar, :tilde_gt_1_9_0)),
        s(:pair,
          s(:sym, :mswin64_20),
          s(:lvar, :tilde_gt_2_0_0)),
        s(:pair,
          s(:sym, :mswin64_21),
          s(:lvar, :tilde_gt_2_1_0)),
        s(:pair,
          s(:sym, :rbx),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :ruby),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :ruby_18),
          s(:lvar, :tilde_gt_1_8_0)),
        s(:pair,
          s(:sym, :ruby_19),
          s(:lvar, :tilde_gt_1_9_0)),
        s(:pair,
          s(:sym, :ruby_20),
          s(:lvar, :tilde_gt_2_0_0)),
        s(:pair,
          s(:sym, :ruby_21),
          s(:lvar, :tilde_gt_2_1_0)),
        s(:pair,
          s(:sym, :x64_mingw),
          s(:lvar, :gt_eq_0)),
        s(:pair,
          s(:sym, :x64_mingw_20),
          s(:lvar, :tilde_gt_2_0_0)),
        s(:pair,
          s(:sym, :x64_mingw_21),
          s(:lvar, :tilde_gt_2_1_0)))),
    s(:casgn, nil, :WINDOWS,
      s(:hash,
        s(:pair,
          s(:sym, :mingw),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mingw_18),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mingw_19),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mingw_20),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mingw_21),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mri),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :mri_18),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :mri_19),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :mri_20),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :mri_21),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :mswin),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin_18),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin_19),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin_20),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin_21),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin64),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin64_19),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin64_20),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :mswin64_21),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :rbx),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :ruby),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :ruby_18),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :ruby_19),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :ruby_20),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :ruby_21),
          s(:sym, :never)),
        s(:pair,
          s(:sym, :x64_mingw),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :x64_mingw_20),
          s(:sym, :only)),
        s(:pair,
          s(:sym, :x64_mingw_21),
          s(:sym, :only)))),
    s(:send, nil, :attr_reader,
      s(:sym, :dependencies)),
    s(:send, nil, :attr_reader,
      s(:sym, :git_set)),
    s(:send, nil, :attr_reader,
      s(:sym, :requires)),
    s(:send, nil, :attr_reader,
      s(:sym, :vendor_set)),
    s(:send, nil, :attr_accessor,
      s(:sym, :without_groups)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :set),
        s(:arg, :path)),
      s(:begin,
        s(:ivasgn, :@set,
          s(:lvar, :set)),
        s(:ivasgn, :@path,
          s(:lvar, :path)),
        s(:ivasgn, :@current_groups,
          s(:nil)),
        s(:ivasgn, :@current_platforms,
          s(:nil)),
        s(:ivasgn, :@current_repository,
          s(:nil)),
        s(:ivasgn, :@dependencies,
          s(:hash)),
        s(:ivasgn, :@default_sources,
          s(:true)),
        s(:ivasgn, :@git_set,
          s(:send,
            s(:ivar, :@set), :git_set)),
        s(:ivasgn, :@git_sources,
          s(:hash)),
        s(:ivasgn, :@installing,
          s(:false)),
        s(:ivasgn, :@requires,
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :h),
              s(:arg, :name)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :name),
              s(:array)))),
        s(:ivasgn, :@vendor_set,
          s(:send,
            s(:ivar, :@set), :vendor_set)),
        s(:ivasgn, :@source_set,
          s(:send,
            s(:ivar, :@set), :source_set)),
        s(:ivasgn, :@gem_sources,
          s(:hash)),
        s(:ivasgn, :@without_groups,
          s(:array)),
        s(:block,
          s(:send, nil, :git_source,
            s(:sym, :github)),
          s(:args,
            s(:arg, :repo_name)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :repo_name), :include?,
                s(:str, "/")), nil,
              s(:lvasgn, :repo_name,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :repo_name)),
                  s(:str, "/"),
                  s(:begin,
                    s(:lvar, :repo_name))))),
            s(:dstr,
              s(:str, "git://github.com/"),
              s(:begin,
                s(:lvar, :repo_name)),
              s(:str, ".git")))),
        s(:block,
          s(:send, nil, :git_source,
            s(:sym, :bitbucket)),
          s(:args,
            s(:arg, :repo_name)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :repo_name), :include?,
                s(:str, "/")), nil,
              s(:lvasgn, :repo_name,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :repo_name)),
                  s(:str, "/"),
                  s(:begin,
                    s(:lvar, :repo_name))))),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :user)),
              s(:send,
                s(:lvar, :repo_name), :split,
                s(:str, "/"),
                s(:int, 2))),
            s(:dstr,
              s(:str, "https://"),
              s(:begin,
                s(:lvar, :user)),
              s(:str, "@bitbucket.org/"),
              s(:begin,
                s(:lvar, :repo_name)),
              s(:str, ".git")))))),
    s(:def, :add_dependencies,
      s(:args,
        s(:arg, :groups),
        s(:arg, :dependencies)),
      s(:begin,
        s(:if,
          s(:send,
            s(:begin,
              s(:send,
                s(:lvar, :groups), :&,
                s(:ivar, :@without_groups))), :empty?), nil,
          s(:return)),
        s(:block,
          s(:send,
            s(:lvar, :dependencies), :each),
          s(:args,
            s(:arg, :dep)),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:send,
              s(:lvar, :dep), :name),
            s(:splat,
              s(:send,
                s(:lvar, :dep), :requirement)))))),
    s(:send, nil, :private,
      s(:sym, :add_dependencies)),
    s(:def, :find_gemspec,
      s(:args,
        s(:arg, :name),
        s(:arg, :path)),
      s(:begin,
        s(:lvasgn, :glob,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :path),
            s(:dstr,
              s(:begin,
                s(:lvar, :name)),
              s(:str, ".gemspec")))),
        s(:lvasgn, :spec_files,
          s(:send,
            s(:const, nil, :Dir), :[],
            s(:lvar, :glob))),
        s(:case,
          s(:send,
            s(:lvar, :spec_files), :length),
          s(:when,
            s(:int, 1),
            s(:begin,
              s(:lvasgn, :spec_file,
                s(:send,
                  s(:lvar, :spec_files), :first)),
              s(:lvasgn, :spec,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :load,
                  s(:lvar, :spec_file))),
              s(:if,
                s(:lvar, :spec),
                s(:return,
                  s(:lvar, :spec)), nil),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "invalid gemspec "),
                  s(:begin,
                    s(:lvar, :spec_file)))))),
          s(:when,
            s(:int, 0),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "no gemspecs found at "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Dir), :pwd))))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:send,
              s(:dstr,
                s(:str, "found multiple gemspecs at "),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Dir), :pwd)),
                s(:str, ", ")), :+,
              s(:str, "use the name: option to specify the one you want")))))),
    s(:def, :installing=,
      s(:args,
        s(:arg, :installing)),
      s(:ivasgn, :@installing,
        s(:lvar, :installing))),
    s(:def, :load,
      s(:args),
      s(:begin,
        s(:send, nil, :instance_eval,
          s(:send,
            s(:send,
              s(:const, nil, :File), :read,
              s(:ivar, :@path)), :untaint),
          s(:ivar, :@path),
          s(:int, 1)),
        s(:self))),
    s(:def, :gem,
      s(:args,
        s(:arg, :name),
        s(:restarg, :requirements)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :requirements), :last), :kind_of?,
            s(:const, nil, :Hash)),
          s(:lvasgn, :options,
            s(:send,
              s(:lvar, :requirements), :pop)), nil),
        s(:or_asgn,
          s(:lvasgn, :options),
          s(:hash)),
        s(:if,
          s(:ivar, :@current_repository),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :git),
            s(:ivar, :@current_repository)), nil),
        s(:lvasgn, :source_set,
          s(:false)),
        s(:or_asgn,
          s(:lvasgn, :source_set),
          s(:send, nil, :gem_path,
            s(:lvar, :name),
            s(:lvar, :options))),
        s(:or_asgn,
          s(:lvasgn, :source_set),
          s(:send, nil, :gem_git,
            s(:lvar, :name),
            s(:lvar, :options))),
        s(:or_asgn,
          s(:lvasgn, :source_set),
          s(:send, nil, :gem_git_source,
            s(:lvar, :name),
            s(:lvar, :options))),
        s(:or_asgn,
          s(:lvasgn, :source_set),
          s(:send, nil, :gem_source,
            s(:lvar, :name),
            s(:lvar, :options))),
        s(:lvasgn, :duplicate,
          s(:send,
            s(:ivar, :@dependencies), :include?,
            s(:lvar, :name))),
        s(:send,
          s(:ivar, :@dependencies), :[]=,
          s(:lvar, :name),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :requirements), :empty?),
              s(:send,
                s(:lvar, :source_set), :!)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default),
            s(:if,
              s(:lvar, :source_set),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :source_set),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :create,
                s(:lvar, :requirements))))),
        s(:if,
          s(:send, nil, :gem_platforms,
            s(:lvar, :options)), nil,
          s(:return)),
        s(:lvasgn, :groups,
          s(:send, nil, :gem_group,
            s(:lvar, :name),
            s(:lvar, :options))),
        s(:if,
          s(:send,
            s(:begin,
              s(:send,
                s(:lvar, :groups), :&,
                s(:ivar, :@without_groups))), :empty?), nil,
          s(:return)),
        s(:if,
          s(:lvar, :source_set), nil,
          s(:send, nil, :pin_gem_source,
            s(:lvar, :name),
            s(:sym, :default))),
        s(:send, nil, :gem_requires,
          s(:lvar, :name),
          s(:lvar, :options)),
        s(:if,
          s(:lvar, :duplicate),
          s(:send, nil, :warn,
            s(:dstr,
              s(:str, "Gem dependencies file "),
              s(:begin,
                s(:ivar, :@path)),
              s(:str, " requires "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, " more than once.\n"))), nil),
        s(:send,
          s(:ivar, :@set), :gem,
          s(:lvar, :name),
          s(:splat,
            s(:lvar, :requirements))))),
    s(:def, :gem_git,
      s(:args,
        s(:arg, :name),
        s(:arg, :options)),
      s(:begin,
        s(:if,
          s(:lvasgn, :gist,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :gist))),
          s(:send,
            s(:lvar, :options), :[]=,
            s(:sym, :git),
            s(:dstr,
              s(:str, "https://gist.github.com/"),
              s(:begin,
                s(:lvar, :gist)),
              s(:str, ".git"))), nil),
        s(:if,
          s(:lvasgn, :repository,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :git))), nil,
          s(:return)),
        s(:send, nil, :pin_gem_source,
          s(:lvar, :name),
          s(:sym, :git),
          s(:lvar, :repository)),
        s(:lvasgn, :reference,
          s(:send, nil, :gem_git_reference,
            s(:lvar, :options))),
        s(:lvasgn, :submodules,
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :submodules))),
        s(:send,
          s(:ivar, :@git_set), :add_git_gem,
          s(:lvar, :name),
          s(:lvar, :repository),
          s(:lvar, :reference),
          s(:lvar, :submodules)),
        s(:true))),
    s(:def, :gem_git_reference,
      s(:args,
        s(:arg, :options)),
      s(:begin,
        s(:lvasgn, :ref,
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :ref))),
        s(:lvasgn, :branch,
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :branch))),
        s(:lvasgn, :tag,
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :tag))),
        s(:lvasgn, :reference,
          s(:nil)),
        s(:or_asgn,
          s(:lvasgn, :reference),
          s(:lvar, :ref)),
        s(:or_asgn,
          s(:lvasgn, :reference),
          s(:lvar, :branch)),
        s(:or_asgn,
          s(:lvasgn, :reference),
          s(:lvar, :tag)),
        s(:or_asgn,
          s(:lvasgn, :reference),
          s(:str, "master")),
        s(:if,
          s(:and,
            s(:lvar, :ref),
            s(:lvar, :branch)),
          s(:send, nil, :warn,
            s(:dstr,
              s(:str, "Gem dependencies file "),
              s(:begin,
                s(:ivar, :@path)),
              s(:str, " includes git reference for both ref and branch but only ref is used.\n"))), nil),
        s(:if,
          s(:and,
            s(:begin,
              s(:or,
                s(:lvar, :ref),
                s(:lvar, :branch))),
            s(:lvar, :tag)),
          s(:send, nil, :warn,
            s(:dstr,
              s(:str, "Gem dependencies file "),
              s(:begin,
                s(:ivar, :@path)),
              s(:str, " includes git reference for both ref/branch and tag but only ref/branch is used.\n"))), nil),
        s(:lvar, :reference))),
    s(:send, nil, :private,
      s(:sym, :gem_git)),
    s(:def, :gem_git_source,
      s(:args,
        s(:arg, :name),
        s(:arg, :options)),
      s(:begin,
        s(:if,
          s(:lvasgn, :git_source,
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:ivar, :@git_sources), :keys), :&,
                  s(:send,
                    s(:lvar, :options), :keys))), :last)), nil,
          s(:return)),
        s(:lvasgn, :source_callback,
          s(:send,
            s(:ivar, :@git_sources), :[],
            s(:lvar, :git_source))),
        s(:lvasgn, :source_param,
          s(:send,
            s(:lvar, :options), :delete,
            s(:lvar, :git_source))),
        s(:lvasgn, :git_url,
          s(:send,
            s(:lvar, :source_callback), :call,
            s(:lvar, :source_param))),
        s(:send,
          s(:lvar, :options), :[]=,
          s(:sym, :git),
          s(:lvar, :git_url)),
        s(:send, nil, :gem_git,
          s(:lvar, :name),
          s(:lvar, :options)),
        s(:true))),
    s(:send, nil, :private,
      s(:sym, :gem_git_source)),
    s(:def, :gem_group,
      s(:args,
        s(:arg, :name),
        s(:arg, :options)),
      s(:begin,
        s(:lvasgn, :g,
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :group))),
        s(:lvasgn, :all_groups,
          s(:if,
            s(:lvar, :g),
            s(:send, nil, :Array,
              s(:lvar, :g)),
            s(:array))),
        s(:lvasgn, :groups,
          s(:send,
            s(:lvar, :options), :delete,
            s(:sym, :groups))),
        s(:if,
          s(:lvar, :groups),
          s(:op_asgn,
            s(:lvasgn, :all_groups), :|,
            s(:lvar, :groups)), nil),
        s(:if,
          s(:ivar, :@current_groups),
          s(:op_asgn,
            s(:lvasgn, :all_groups), :|,
            s(:ivar, :@current_groups)), nil),
        s(:lvar, :all_groups))),
    s(:send, nil, :private,
      s(:sym, :gem_group)),
    s(:def, :gem_path,
      s(:args,
        s(:arg, :name),
        s(:arg, :options)),
      s(:begin,
        s(:if,
          s(:lvasgn, :directory,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :path))), nil,
          s(:return)),
        s(:send, nil, :pin_gem_source,
          s(:lvar, :name),
          s(:sym, :path),
          s(:lvar, :directory)),
        s(:send,
          s(:ivar, :@vendor_set), :add_vendor_gem,
          s(:lvar, :name),
          s(:lvar, :directory)),
        s(:true))),
    s(:send, nil, :private,
      s(:sym, :gem_path)),
    s(:def, :gem_source,
      s(:args,
        s(:arg, :name),
        s(:arg, :options)),
      s(:begin,
        s(:if,
          s(:lvasgn, :source,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :source))), nil,
          s(:return)),
        s(:send, nil, :pin_gem_source,
          s(:lvar, :name),
          s(:sym, :source),
          s(:lvar, :source)),
        s(:send,
          s(:ivar, :@source_set), :add_source_gem,
          s(:lvar, :name),
          s(:lvar, :source)),
        s(:true))),
    s(:send, nil, :private,
      s(:sym, :gem_source)),
    s(:def, :gem_platforms,
      s(:args,
        s(:arg, :options)),
      s(:begin,
        s(:lvasgn, :platform_names,
          s(:send, nil, :Array,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :platform)))),
        s(:send,
          s(:lvar, :platform_names), :concat,
          s(:send, nil, :Array,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :platforms)))),
        s(:if,
          s(:ivar, :@current_platforms),
          s(:send,
            s(:lvar, :platform_names), :concat,
            s(:ivar, :@current_platforms)), nil),
        s(:if,
          s(:send,
            s(:lvar, :platform_names), :empty?),
          s(:return,
            s(:true)), nil),
        s(:block,
          s(:send,
            s(:lvar, :platform_names), :any?),
          s(:args,
            s(:arg, :platform_name)),
          s(:begin,
            s(:if,
              s(:lvasgn, :platform,
                s(:send,
                  s(:const, nil, :PLATFORM_MAP), :[],
                  s(:lvar, :platform_name))), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "unknown platform "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :platform_name), :inspect))))),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :match,
                s(:lvar, :platform)), nil,
              s(:next,
                s(:false))),
            s(:if,
              s(:lvasgn, :engines,
                s(:send,
                  s(:const, nil, :ENGINE_MAP), :[],
                  s(:lvar, :platform_name))),
              s(:if,
                s(:send,
                  s(:lvar, :engines), :include?,
                  s(:send,
                    s(:const, nil, :Gem), :ruby_engine)), nil,
                s(:next,
                  s(:false))), nil),
            s(:case,
              s(:send,
                s(:const, nil, :WINDOWS), :[],
                s(:lvar, :platform_name)),
              s(:when,
                s(:sym, :only),
                s(:if,
                  s(:send,
                    s(:const, nil, :Gem), :win_platform?), nil,
                  s(:next,
                    s(:false)))),
              s(:when,
                s(:sym, :never),
                s(:if,
                  s(:send,
                    s(:const, nil, :Gem), :win_platform?),
                  s(:next,
                    s(:false)), nil)), nil),
            s(:send,
              s(:send,
                s(:const, nil, :VERSION_MAP), :[],
                s(:lvar, :platform_name)), :satisfied_by?,
              s(:send,
                s(:const, nil, :Gem), :ruby_version)))))),
    s(:send, nil, :private,
      s(:sym, :gem_platforms)),
    s(:def, :gem_requires,
      s(:args,
        s(:arg, :name),
        s(:arg, :options)),
      s(:begin,
        s(:if,
          s(:send,
            s(:lvar, :options), :include?,
            s(:sym, :require)),
          s(:if,
            s(:lvasgn, :requires,
              s(:send,
                s(:lvar, :options), :delete,
                s(:sym, :require))),
            s(:send,
              s(:send,
                s(:ivar, :@requires), :[],
                s(:lvar, :name)), :concat,
              s(:send, nil, :Array,
                s(:lvar, :requires))), nil),
          s(:send,
            s(:send,
              s(:ivar, :@requires), :[],
              s(:lvar, :name)), :<<,
            s(:lvar, :name))),
        s(:if,
          s(:send,
            s(:lvar, :options), :empty?), nil,
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "Unhandled gem options "),
              s(:begin,
                s(:send,
                  s(:lvar, :options), :inspect))))))),
    s(:send, nil, :private,
      s(:sym, :gem_requires)),
    s(:def, :git,
      s(:args,
        s(:arg, :repository)),
      s(:ensure,
        s(:begin,
          s(:ivasgn, :@current_repository,
            s(:lvar, :repository)),
          s(:yield)),
        s(:ivasgn, :@current_repository,
          s(:nil)))),
    s(:def, :git_source,
      s(:args,
        s(:arg, :name),
        s(:blockarg, :callback)),
      s(:send,
        s(:ivar, :@git_sources), :[]=,
        s(:lvar, :name),
        s(:lvar, :callback))),
    s(:def, :gem_deps_file,
      s(:args),
      s(:send,
        s(:const, nil, :File), :basename,
        s(:ivar, :@path))),
    s(:def, :gemspec,
      s(:args,
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:lvasgn, :name,
          s(:or,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :name)),
            s(:str, "{,*}"))),
        s(:lvasgn, :path,
          s(:or,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :path)),
            s(:str, "."))),
        s(:lvasgn, :development_group,
          s(:or,
            s(:send,
              s(:lvar, :options), :delete,
              s(:sym, :development_group)),
            s(:sym, :development))),
        s(:lvasgn, :spec,
          s(:send, nil, :find_gemspec,
            s(:lvar, :name),
            s(:lvar, :path))),
        s(:lvasgn, :groups,
          s(:send, nil, :gem_group,
            s(:send,
              s(:lvar, :spec), :name),
            s(:hash))),
        s(:lvasgn, :self_dep,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Dependency), :new,
            s(:send,
              s(:lvar, :spec), :name),
            s(:send,
              s(:lvar, :spec), :version))),
        s(:send, nil, :add_dependencies,
          s(:lvar, :groups),
          s(:array,
            s(:lvar, :self_dep))),
        s(:send, nil, :add_dependencies,
          s(:lvar, :groups),
          s(:send,
            s(:lvar, :spec), :runtime_dependencies)),
        s(:send,
          s(:ivar, :@dependencies), :[]=,
          s(:send,
            s(:lvar, :spec), :name),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Requirement), :source_set)),
        s(:block,
          s(:send,
            s(:send,
              s(:lvar, :spec), :dependencies), :each),
          s(:args,
            s(:arg, :dep)),
          s(:send,
            s(:ivar, :@dependencies), :[]=,
            s(:send,
              s(:lvar, :dep), :name),
            s(:send,
              s(:lvar, :dep), :requirement))),
        s(:send,
          s(:lvar, :groups), :<<,
          s(:lvar, :development_group)),
        s(:send, nil, :add_dependencies,
          s(:lvar, :groups),
          s(:send,
            s(:lvar, :spec), :development_dependencies)),
        s(:send,
          s(:ivar, :@vendor_set), :add_vendor_gem,
          s(:send,
            s(:lvar, :spec), :name),
          s(:lvar, :path)),
        s(:send, nil, :gem_requires,
          s(:send,
            s(:lvar, :spec), :name),
          s(:lvar, :options)))),
    s(:def, :group,
      s(:args,
        s(:restarg, :groups)),
      s(:ensure,
        s(:begin,
          s(:ivasgn, :@current_groups,
            s(:lvar, :groups)),
          s(:yield)),
        s(:ivasgn, :@current_groups,
          s(:nil)))),
    s(:def, :pin_gem_source,
      s(:args,
        s(:arg, :name),
        s(:optarg, :type,
          s(:sym, :default)),
        s(:optarg, :source,
          s(:nil))),
      s(:begin,
        s(:lvasgn, :source_description,
          s(:case,
            s(:lvar, :type),
            s(:when,
              s(:sym, :default),
              s(:str, "(default)")),
            s(:when,
              s(:sym, :path),
              s(:dstr,
                s(:str, "path: "),
                s(:begin,
                  s(:lvar, :source)))),
            s(:when,
              s(:sym, :git),
              s(:dstr,
                s(:str, "git: "),
                s(:begin,
                  s(:lvar, :source)))),
            s(:when,
              s(:sym, :source),
              s(:dstr,
                s(:str, "source: "),
                s(:begin,
                  s(:lvar, :source)))),
            s(:str, "(unknown)"))),
        s(:if,
          s(:send,
            s(:send,
              s(:ivar, :@gem_sources), :fetch,
              s(:lvar, :name),
              s(:lvar, :source)), :!=,
            s(:lvar, :source)),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "duplicate source "),
              s(:begin,
                s(:lvar, :source_description)),
              s(:str, " for gem "),
              s(:begin,
                s(:lvar, :name)))), nil),
        s(:send,
          s(:ivar, :@gem_sources), :[]=,
          s(:lvar, :name),
          s(:lvar, :source)))),
    s(:send, nil, :private,
      s(:sym, :pin_gem_source)),
    s(:def, :platform,
      s(:args,
        s(:restarg, :platforms)),
      s(:ensure,
        s(:begin,
          s(:ivasgn, :@current_platforms,
            s(:lvar, :platforms)),
          s(:yield)),
        s(:ivasgn, :@current_platforms,
          s(:nil)))),
    s(:alias,
      s(:sym, :platforms),
      s(:sym, :platform)),
    s(:def, :ruby,
      s(:args,
        s(:arg, :version),
        s(:optarg, :options,
          s(:hash))),
      s(:begin,
        s(:lvasgn, :engine,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :engine))),
        s(:lvasgn, :engine_version,
          s(:send,
            s(:lvar, :options), :[],
            s(:sym, :engine_version))),
        s(:if,
          s(:and,
            s(:lvar, :engine),
            s(:send,
              s(:lvar, :engine_version), :!)),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "you must specify engine_version along with the ruby engine")), nil),
        s(:if,
          s(:ivar, :@installing),
          s(:return,
            s(:true)), nil),
        s(:if,
          s(:send,
            s(:const, nil, :RUBY_VERSION), :==,
            s(:lvar, :version)), nil,
          s(:begin,
            s(:lvasgn, :message,
              s(:send,
                s(:dstr,
                  s(:str, "Your Ruby version is "),
                  s(:begin,
                    s(:const, nil, :RUBY_VERSION)),
                  s(:str, ", ")), :+,
                s(:dstr,
                  s(:str, "but your "),
                  s(:begin,
                    s(:send, nil, :gem_deps_file)),
                  s(:str, " requires "),
                  s(:begin,
                    s(:lvar, :version))))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :RubyVersionMismatch),
              s(:lvar, :message)))),
        s(:if,
          s(:and,
            s(:lvar, :engine),
            s(:send,
              s(:lvar, :engine), :!=,
              s(:send,
                s(:const, nil, :Gem), :ruby_engine))),
          s(:begin,
            s(:lvasgn, :message,
              s(:send,
                s(:dstr,
                  s(:str, "Your ruby engine is "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Gem), :ruby_engine)),
                  s(:str, ", ")), :+,
                s(:dstr,
                  s(:str, "but your "),
                  s(:begin,
                    s(:send, nil, :gem_deps_file)),
                  s(:str, " requires "),
                  s(:begin,
                    s(:lvar, :engine))))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :RubyVersionMismatch),
              s(:lvar, :message))), nil),
        s(:if,
          s(:lvar, :engine_version),
          s(:begin,
            s(:lvasgn, :my_engine_version,
              s(:send,
                s(:const, nil, :Object), :const_get,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Gem), :ruby_engine), :upcase)),
                  s(:str, "_VERSION")))),
            s(:if,
              s(:send,
                s(:lvar, :engine_version), :!=,
                s(:lvar, :my_engine_version)),
              s(:begin,
                s(:lvasgn, :message,
                  s(:send,
                    s(:dstr,
                      s(:str, "Your ruby engine version is "),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Gem), :ruby_engine)),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :my_engine_version)),
                      s(:str, ", ")), :+,
                    s(:dstr,
                      s(:str, "but your "),
                      s(:begin,
                        s(:send, nil, :gem_deps_file)),
                      s(:str, " requires "),
                      s(:begin,
                        s(:lvar, :engine)),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :engine_version))))),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :RubyVersionMismatch),
                  s(:lvar, :message))), nil)), nil),
        s(:return,
          s(:true)))),
    s(:def, :source,
      s(:args,
        s(:arg, :url)),
      s(:begin,
        s(:if,
          s(:ivar, :@default_sources),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :clear), nil),
        s(:ivasgn, :@default_sources,
          s(:false)),
        s(:send,
          s(:send,
            s(:const, nil, :Gem), :sources), :<<,
          s(:lvar, :url)))),
    s(:casgn,
      s(:const,
        s(:const, nil, :Gem), :RequestSet), :GemDepedencyAPI,
      s(:self))))
