s(:begin,
  s(:send, nil, :require,
    s(:str, "strscan")),
  s(:send, nil, :require,
    s(:str, "rubygems/request_set/lockfile/parser")),
  s(:class,
    s(:const,
      s(:const,
        s(:const,
          s(:const, nil, :Gem), :RequestSet), :Lockfile), :Tokenizer), nil,
    s(:begin,
      s(:casgn, nil, :Token,
        s(:send,
          s(:const, nil, :Struct), :new,
          s(:sym, :type),
          s(:sym, :value),
          s(:sym, :column),
          s(:sym, :line))),
      s(:casgn, nil, :EOF,
        s(:send,
          s(:const, nil, :Token), :new,
          s(:sym, :EOF))),
      s(:defs,
        s(:self), :from_file,
        s(:args,
          s(:arg, :file)),
        s(:send, nil, :new,
          s(:send,
            s(:const, nil, :File), :read,
            s(:lvar, :file)),
          s(:lvar, :file))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :input),
          s(:optarg, :filename,
            s(:nil)),
          s(:optarg, :line,
            s(:int, 0)),
          s(:optarg, :pos,
            s(:int, 0))),
        s(:begin,
          s(:ivasgn, :@line,
            s(:lvar, :line)),
          s(:ivasgn, :@line_pos,
            s(:lvar, :pos)),
          s(:ivasgn, :@tokens,
            s(:array)),
          s(:ivasgn, :@filename,
            s(:lvar, :filename)),
          s(:send, nil, :tokenize,
            s(:lvar, :input)))),
      s(:def, :make_parser,
        s(:args,
          s(:arg, :set),
          s(:arg, :platforms)),
        s(:send,
          s(:const,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :Lockfile), :Parser), :new,
          s(:self),
          s(:lvar, :set),
          s(:lvar, :platforms),
          s(:ivar, :@filename))),
      s(:def, :to_a,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@tokens), :map),
          s(:args,
            s(:arg, :token)),
          s(:array,
            s(:send,
              s(:lvar, :token), :type),
            s(:send,
              s(:lvar, :token), :value),
            s(:send,
              s(:lvar, :token), :column),
            s(:send,
              s(:lvar, :token), :line)))),
      s(:def, :skip,
        s(:args,
          s(:arg, :type)),
        s(:while,
          s(:and,
            s(:send,
              s(:send,
                s(:ivar, :@tokens), :empty?), :!),
            s(:send,
              s(:send,
                s(:send, nil, :peek), :type), :==,
              s(:lvar, :type))),
          s(:send,
            s(:ivar, :@tokens), :shift))),
      s(:def, :token_pos,
        s(:args,
          s(:arg, :byte_offset)),
        s(:array,
          s(:send,
            s(:lvar, :byte_offset), :-,
            s(:ivar, :@line_pos)),
          s(:ivar, :@line))),
      s(:def, :empty?,
        s(:args),
        s(:send,
          s(:ivar, :@tokens), :empty?)),
      s(:def, :unshift,
        s(:args,
          s(:arg, :token)),
        s(:send,
          s(:ivar, :@tokens), :unshift,
          s(:lvar, :token))),
      s(:def, :next_token,
        s(:args),
        s(:send,
          s(:ivar, :@tokens), :shift)),
      s(:alias,
        s(:sym, :shift),
        s(:sym, :next_token)),
      s(:def, :peek,
        s(:args),
        s(:or,
          s(:send,
            s(:ivar, :@tokens), :first),
          s(:const, nil, :EOF))),
      s(:send, nil, :private),
      s(:def, :tokenize,
        s(:args,
          s(:arg, :input)),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :StringScanner), :new,
              s(:lvar, :input))),
          s(:until,
            s(:send,
              s(:lvar, :s), :eos?),
            s(:begin,
              s(:lvasgn, :pos,
                s(:send,
                  s(:lvar, :s), :pos)),
              s(:if,
                s(:lvasgn, :leading_whitespace,
                  s(:send,
                    s(:lvar, :s), :scan,
                    s(:regexp,
                      s(:str, " +"),
                      s(:regopt)))),
                s(:lvasgn, :pos,
                  s(:send,
                    s(:lvar, :s), :pos)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :s), :scan,
                  s(:regexp,
                    s(:str, "[<|=>]{7}"),
                    s(:regopt))),
                s(:begin,
                  s(:lvasgn, :message,
                    s(:dstr,
                      s(:str, "your "),
                      s(:begin,
                        s(:ivar, :@filename)),
                      s(:str, " contains merge conflict markers"))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :column),
                      s(:lvasgn, :line)),
                    s(:send, nil, :token_pos,
                      s(:lvar, :pos))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :RequestSet), :Lockfile), :ParseError), :new,
                      s(:lvar, :message),
                      s(:lvar, :column),
                      s(:lvar, :line),
                      s(:ivar, :@filename)))), nil),
              s(:send,
                s(:ivar, :@tokens), :<<,
                s(:case, nil,
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "\\r?\\n"),
                        s(:regopt))),
                    s(:begin,
                      s(:lvasgn, :token,
                        s(:send,
                          s(:const, nil, :Token), :new,
                          s(:sym, :newline),
                          s(:nil),
                          s(:splat,
                            s(:send, nil, :token_pos,
                              s(:lvar, :pos))))),
                      s(:ivasgn, :@line_pos,
                        s(:send,
                          s(:lvar, :s), :pos)),
                      s(:op_asgn,
                        s(:ivasgn, :@line), :+,
                        s(:int, 1)),
                      s(:lvar, :token))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "[A-Z]+"),
                        s(:regopt))),
                    s(:if,
                      s(:lvar, :leading_whitespace),
                      s(:begin,
                        s(:lvasgn, :text,
                          s(:send,
                            s(:lvar, :s), :matched)),
                        s(:op_asgn,
                          s(:lvasgn, :text), :+,
                          s(:send,
                            s(:send,
                              s(:lvar, :s), :scan,
                              s(:regexp,
                                s(:str, "[^\\s)]*"),
                                s(:regopt))), :to_s)),
                        s(:send,
                          s(:const, nil, :Token), :new,
                          s(:sym, :text),
                          s(:lvar, :text),
                          s(:splat,
                            s(:send, nil, :token_pos,
                              s(:lvar, :pos))))),
                      s(:send,
                        s(:const, nil, :Token), :new,
                        s(:sym, :section),
                        s(:send,
                          s(:lvar, :s), :matched),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos)))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "([a-z]+):\\s"),
                        s(:regopt))),
                    s(:begin,
                      s(:op_asgn,
                        s(:send,
                          s(:lvar, :s), :pos), :-,
                        s(:int, 1)),
                      s(:send,
                        s(:const, nil, :Token), :new,
                        s(:sym, :entry),
                        s(:send,
                          s(:lvar, :s), :[],
                          s(:int, 1)),
                        s(:splat,
                          s(:send, nil, :token_pos,
                            s(:lvar, :pos)))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "\\("),
                        s(:regopt))),
                    s(:send,
                      s(:const, nil, :Token), :new,
                      s(:sym, :l_paren),
                      s(:nil),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "\\)"),
                        s(:regopt))),
                    s(:send,
                      s(:const, nil, :Token), :new,
                      s(:sym, :r_paren),
                      s(:nil),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "<=|>=|=|~>|<|>|!="),
                        s(:regopt))),
                    s(:send,
                      s(:const, nil, :Token), :new,
                      s(:sym, :requirement),
                      s(:send,
                        s(:lvar, :s), :matched),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, ","),
                        s(:regopt))),
                    s(:send,
                      s(:const, nil, :Token), :new,
                      s(:sym, :comma),
                      s(:nil),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "!"),
                        s(:regopt))),
                    s(:send,
                      s(:const, nil, :Token), :new,
                      s(:sym, :bang),
                      s(:nil),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:when,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:regexp,
                        s(:str, "[^\\s),!]*"),
                        s(:regopt))),
                    s(:send,
                      s(:const, nil, :Token), :new,
                      s(:sym, :text),
                      s(:send,
                        s(:lvar, :s), :matched),
                      s(:splat,
                        s(:send, nil, :token_pos,
                          s(:lvar, :pos))))),
                  s(:send, nil, :raise,
                    s(:dstr,
                      s(:str, "BUG: can't create token for: "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :s), :string), :[],
                            s(:irange,
                              s(:send,
                                s(:lvar, :s), :pos),
                              s(:int, -1))), :inspect)))))))),
          s(:ivar, :@tokens))))))
