s(:class,
  s(:const,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :RequestSet), :Lockfile), :Parser), nil,
  s(:begin,
    s(:def, :initialize,
      s(:args,
        s(:arg, :tokenizer),
        s(:arg, :set),
        s(:arg, :platforms),
        s(:optarg, :filename,
          s(:nil))),
      s(:begin,
        s(:ivasgn, :@tokens,
          s(:lvar, :tokenizer)),
        s(:ivasgn, :@filename,
          s(:lvar, :filename)),
        s(:ivasgn, :@set,
          s(:lvar, :set)),
        s(:ivasgn, :@platforms,
          s(:lvar, :platforms)))),
    s(:def, :parse,
      s(:args),
      s(:until,
        s(:send,
          s(:ivar, :@tokens), :empty?),
        s(:begin,
          s(:lvasgn, :token,
            s(:send, nil, :get)),
          s(:case,
            s(:send,
              s(:lvar, :token), :type),
            s(:when,
              s(:sym, :section),
              s(:begin,
                s(:send,
                  s(:ivar, :@tokens), :skip,
                  s(:sym, :newline)),
                s(:case,
                  s(:send,
                    s(:lvar, :token), :value),
                  s(:when,
                    s(:str, "DEPENDENCIES"),
                    s(:send, nil, :parse_DEPENDENCIES)),
                  s(:when,
                    s(:str, "GIT"),
                    s(:send, nil, :parse_GIT)),
                  s(:when,
                    s(:str, "GEM"),
                    s(:send, nil, :parse_GEM)),
                  s(:when,
                    s(:str, "PATH"),
                    s(:send, nil, :parse_PATH)),
                  s(:when,
                    s(:str, "PLATFORMS"),
                    s(:send, nil, :parse_PLATFORMS)),
                  s(:until,
                    s(:or,
                      s(:send,
                        s(:ivar, :@tokens), :empty?),
                      s(:send,
                        s(:send,
                          s(:send, nil, :peek), :first), :==,
                        s(:sym, :section))),
                    s(:lvasgn, :token,
                      s(:send, nil, :get)))))),
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "BUG: unhandled token "),
                s(:begin,
                  s(:send,
                    s(:lvar, :token), :type)),
                s(:str, " ("),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :inspect)),
                s(:str, ") at line "),
                s(:begin,
                  s(:send,
                    s(:lvar, :token), :line)),
                s(:str, " column "),
                s(:begin,
                  s(:send,
                    s(:lvar, :token), :column)))))))),
    s(:def, :get,
      s(:args,
        s(:optarg, :expected_types,
          s(:nil)),
        s(:optarg, :expected_value,
          s(:nil))),
      s(:begin,
        s(:lvasgn, :token,
          s(:send,
            s(:ivar, :@tokens), :shift)),
        s(:if,
          s(:and,
            s(:lvar, :expected_types),
            s(:send,
              s(:send,
                s(:send, nil, :Array,
                  s(:lvar, :expected_types)), :include?,
                s(:send,
                  s(:lvar, :token), :type)), :!)),
          s(:begin,
            s(:send, nil, :unget,
              s(:lvar, :token)),
            s(:lvasgn, :message,
              s(:send,
                s(:dstr,
                  s(:str, "unexpected token ["),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :token), :type), :inspect)),
                  s(:str, ", "),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :token), :value), :inspect)),
                  s(:str, "], ")), :+,
                s(:dstr,
                  s(:str, "expected "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :expected_types), :inspect))))),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RequestSet), :Lockfile), :ParseError), :new,
                s(:lvar, :message),
                s(:send,
                  s(:lvar, :token), :column),
                s(:send,
                  s(:lvar, :token), :line),
                s(:ivar, :@filename)))), nil),
        s(:if,
          s(:and,
            s(:lvar, :expected_value),
            s(:send,
              s(:lvar, :expected_value), :!=,
              s(:send,
                s(:lvar, :token), :value))),
          s(:begin,
            s(:send, nil, :unget,
              s(:lvar, :token)),
            s(:lvasgn, :message,
              s(:send,
                s(:send,
                  s(:dstr,
                    s(:str, "unexpected token ["),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :type), :inspect)),
                    s(:str, ", "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :value), :inspect)),
                    s(:str, "], ")), :+,
                  s(:dstr,
                    s(:str, "expected ["),
                    s(:begin,
                      s(:send,
                        s(:lvar, :expected_types), :inspect)),
                    s(:str, ", "))), :+,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :expected_value), :inspect)),
                  s(:str, "]")))),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :RequestSet), :Lockfile), :ParseError), :new,
                s(:lvar, :message),
                s(:send,
                  s(:lvar, :token), :column),
                s(:send,
                  s(:lvar, :token), :line),
                s(:ivar, :@filename)))), nil),
        s(:lvar, :token))),
    s(:def, :parse_DEPENDENCIES,
      s(:args),
      s(:while,
        s(:and,
          s(:send,
            s(:send,
              s(:ivar, :@tokens), :empty?), :!),
          s(:send,
            s(:sym, :text), :==,
            s(:send,
              s(:send, nil, :peek), :type))),
        s(:begin,
          s(:lvasgn, :token,
            s(:send, nil, :get,
              s(:sym, :text))),
          s(:lvasgn, :requirements,
            s(:array)),
          s(:case,
            s(:send,
              s(:send, nil, :peek), :[],
              s(:int, 0)),
            s(:when,
              s(:sym, :bang),
              s(:begin,
                s(:send, nil, :get,
                  s(:sym, :bang)),
                s(:send,
                  s(:lvar, :requirements), :<<,
                  s(:send, nil, :pinned_requirement,
                    s(:send,
                      s(:lvar, :token), :value))))),
            s(:when,
              s(:sym, :l_paren),
              s(:begin,
                s(:send, nil, :get,
                  s(:sym, :l_paren)),
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :op,
                      s(:send,
                        s(:send, nil, :get,
                          s(:sym, :requirement)), :value)),
                    s(:lvasgn, :version,
                      s(:send,
                        s(:send, nil, :get,
                          s(:sym, :text)), :value)),
                    s(:send,
                      s(:lvar, :requirements), :<<,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :op)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :version)))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send, nil, :peek), :type), :==,
                        s(:sym, :comma)), nil,
                      s(:break)),
                    s(:send, nil, :get,
                      s(:sym, :comma)))),
                s(:send, nil, :get,
                  s(:sym, :r_paren)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send, nil, :peek), :[],
                      s(:int, 0)), :==,
                    s(:sym, :bang)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :requirements), :clear),
                    s(:send,
                      s(:lvar, :requirements), :<<,
                      s(:send, nil, :pinned_requirement,
                        s(:send,
                          s(:lvar, :token), :value))),
                    s(:send, nil, :get,
                      s(:sym, :bang))), nil))), nil),
          s(:send,
            s(:ivar, :@set), :gem,
            s(:send,
              s(:lvar, :token), :value),
            s(:splat,
              s(:lvar, :requirements))),
          s(:send, nil, :skip,
            s(:sym, :newline))))),
    s(:def, :parse_GEM,
      s(:args),
      s(:begin,
        s(:lvasgn, :sources,
          s(:array)),
        s(:while,
          s(:send,
            s(:array,
              s(:sym, :entry),
              s(:str, "remote")), :==,
            s(:send,
              s(:send, nil, :peek), :first,
              s(:int, 2))),
          s(:begin,
            s(:send, nil, :get,
              s(:sym, :entry),
              s(:str, "remote")),
            s(:lvasgn, :data,
              s(:send,
                s(:send, nil, :get,
                  s(:sym, :text)), :value)),
            s(:send, nil, :skip,
              s(:sym, :newline)),
            s(:send,
              s(:lvar, :sources), :<<,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Source), :new,
                s(:lvar, :data))))),
        s(:if,
          s(:send,
            s(:lvar, :sources), :empty?),
          s(:send,
            s(:lvar, :sources), :<<,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:const,
                s(:const, nil, :Gem), :DEFAULT_HOST))), nil),
        s(:send, nil, :get,
          s(:sym, :entry),
          s(:str, "specs")),
        s(:send, nil, :skip,
          s(:sym, :newline)),
        s(:lvasgn, :set,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :LockSet), :new,
            s(:lvar, :sources))),
        s(:lvasgn, :last_specs,
          s(:nil)),
        s(:while,
          s(:and,
            s(:send,
              s(:send,
                s(:ivar, :@tokens), :empty?), :!),
            s(:send,
              s(:sym, :text), :==,
              s(:send,
                s(:send, nil, :peek), :type))),
          s(:begin,
            s(:lvasgn, :token,
              s(:send, nil, :get,
                s(:sym, :text))),
            s(:lvasgn, :name,
              s(:send,
                s(:lvar, :token), :value)),
            s(:lvasgn, :column,
              s(:send,
                s(:lvar, :token), :column)),
            s(:case,
              s(:send,
                s(:send, nil, :peek), :[],
                s(:int, 0)),
              s(:when,
                s(:sym, :newline),
                s(:block,
                  s(:send,
                    s(:lvar, :last_specs), :each),
                  s(:args,
                    s(:arg, :spec)),
                  s(:if,
                    s(:send,
                      s(:lvar, :column), :==,
                      s(:int, 6)),
                    s(:send,
                      s(:lvar, :spec), :add_dependency,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Dependency), :new,
                        s(:lvar, :name))), nil))),
              s(:when,
                s(:sym, :l_paren),
                s(:begin,
                  s(:send, nil, :get,
                    s(:sym, :l_paren)),
                  s(:lvasgn, :token,
                    s(:send, nil, :get,
                      s(:array,
                        s(:sym, :text),
                        s(:sym, :requirement)))),
                  s(:lvasgn, :type,
                    s(:send,
                      s(:lvar, :token), :type)),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:lvar, :token), :value)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :type), :==,
                        s(:sym, :text)),
                      s(:send,
                        s(:lvar, :column), :==,
                        s(:int, 4))),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :version),
                          s(:lvasgn, :platform)),
                        s(:send,
                          s(:lvar, :data), :split,
                          s(:str, "-"),
                          s(:int, 2))),
                      s(:lvasgn, :platform,
                        s(:if,
                          s(:lvar, :platform),
                          s(:send,
                            s(:const,
                              s(:const, nil, :Gem), :Platform), :new,
                            s(:lvar, :platform)),
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :Platform), :RUBY))),
                      s(:lvasgn, :last_specs,
                        s(:send,
                          s(:lvar, :set), :add,
                          s(:lvar, :name),
                          s(:lvar, :version),
                          s(:lvar, :platform)))),
                    s(:begin,
                      s(:lvasgn, :dependency,
                        s(:send, nil, :parse_dependency,
                          s(:lvar, :name),
                          s(:lvar, :data))),
                      s(:block,
                        s(:send,
                          s(:lvar, :last_specs), :each),
                        s(:args,
                          s(:arg, :spec)),
                        s(:send,
                          s(:lvar, :spec), :add_dependency,
                          s(:lvar, :dependency))))),
                  s(:send, nil, :get,
                    s(:sym, :r_paren)))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "BUG: unknown token "),
                  s(:begin,
                    s(:send, nil, :peek))))),
            s(:send, nil, :skip,
              s(:sym, :newline)))),
        s(:send,
          s(:send,
            s(:ivar, :@set), :sets), :<<,
          s(:lvar, :set)))),
    s(:def, :parse_GIT,
      s(:args),
      s(:begin,
        s(:send, nil, :get,
          s(:sym, :entry),
          s(:str, "remote")),
        s(:lvasgn, :repository,
          s(:send,
            s(:send, nil, :get,
              s(:sym, :text)), :value)),
        s(:send, nil, :skip,
          s(:sym, :newline)),
        s(:send, nil, :get,
          s(:sym, :entry),
          s(:str, "revision")),
        s(:lvasgn, :revision,
          s(:send,
            s(:send, nil, :get,
              s(:sym, :text)), :value)),
        s(:send, nil, :skip,
          s(:sym, :newline)),
        s(:lvasgn, :type,
          s(:send,
            s(:send, nil, :peek), :type)),
        s(:lvasgn, :value,
          s(:send,
            s(:send, nil, :peek), :value)),
        s(:if,
          s(:and,
            s(:send,
              s(:lvar, :type), :==,
              s(:sym, :entry)),
            s(:send,
              s(:array,
                s(:str, "branch"),
                s(:str, "ref"),
                s(:str, "tag")), :include?,
              s(:lvar, :value))),
          s(:begin,
            s(:send, nil, :get),
            s(:send, nil, :get,
              s(:sym, :text)),
            s(:send, nil, :skip,
              s(:sym, :newline))), nil),
        s(:send, nil, :get,
          s(:sym, :entry),
          s(:str, "specs")),
        s(:send, nil, :skip,
          s(:sym, :newline)),
        s(:lvasgn, :set,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :GitSet), :new)),
        s(:send,
          s(:lvar, :set), :root_dir=,
          s(:send,
            s(:ivar, :@set), :install_dir)),
        s(:lvasgn, :last_spec,
          s(:nil)),
        s(:while,
          s(:and,
            s(:send,
              s(:send,
                s(:ivar, :@tokens), :empty?), :!),
            s(:send,
              s(:sym, :text), :==,
              s(:send,
                s(:send, nil, :peek), :type))),
          s(:begin,
            s(:lvasgn, :token,
              s(:send, nil, :get,
                s(:sym, :text))),
            s(:lvasgn, :name,
              s(:send,
                s(:lvar, :token), :value)),
            s(:lvasgn, :column,
              s(:send,
                s(:lvar, :token), :column)),
            s(:case,
              s(:send,
                s(:send, nil, :peek), :[],
                s(:int, 0)),
              s(:when,
                s(:sym, :newline),
                s(:if,
                  s(:send,
                    s(:lvar, :column), :==,
                    s(:int, 6)),
                  s(:send,
                    s(:lvar, :last_spec), :add_dependency,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Dependency), :new,
                      s(:lvar, :name))), nil)),
              s(:when,
                s(:sym, :l_paren),
                s(:begin,
                  s(:send, nil, :get,
                    s(:sym, :l_paren)),
                  s(:lvasgn, :token,
                    s(:send, nil, :get,
                      s(:array,
                        s(:sym, :text),
                        s(:sym, :requirement)))),
                  s(:lvasgn, :type,
                    s(:send,
                      s(:lvar, :token), :type)),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:lvar, :token), :value)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :type), :==,
                        s(:sym, :text)),
                      s(:send,
                        s(:lvar, :column), :==,
                        s(:int, 4))),
                    s(:lvasgn, :last_spec,
                      s(:send,
                        s(:lvar, :set), :add_git_spec,
                        s(:lvar, :name),
                        s(:lvar, :data),
                        s(:lvar, :repository),
                        s(:lvar, :revision),
                        s(:true))),
                    s(:begin,
                      s(:lvasgn, :dependency,
                        s(:send, nil, :parse_dependency,
                          s(:lvar, :name),
                          s(:lvar, :data))),
                      s(:send,
                        s(:lvar, :last_spec), :add_dependency,
                        s(:lvar, :dependency)))),
                  s(:send, nil, :get,
                    s(:sym, :r_paren)))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "BUG: unknown token "),
                  s(:begin,
                    s(:send, nil, :peek))))),
            s(:send, nil, :skip,
              s(:sym, :newline)))),
        s(:send,
          s(:send,
            s(:ivar, :@set), :sets), :<<,
          s(:lvar, :set)))),
    s(:def, :parse_PATH,
      s(:args),
      s(:begin,
        s(:send, nil, :get,
          s(:sym, :entry),
          s(:str, "remote")),
        s(:lvasgn, :directory,
          s(:send,
            s(:send, nil, :get,
              s(:sym, :text)), :value)),
        s(:send, nil, :skip,
          s(:sym, :newline)),
        s(:send, nil, :get,
          s(:sym, :entry),
          s(:str, "specs")),
        s(:send, nil, :skip,
          s(:sym, :newline)),
        s(:lvasgn, :set,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :VendorSet), :new)),
        s(:lvasgn, :last_spec,
          s(:nil)),
        s(:while,
          s(:and,
            s(:send,
              s(:send,
                s(:ivar, :@tokens), :empty?), :!),
            s(:send,
              s(:sym, :text), :==,
              s(:send,
                s(:send, nil, :peek), :first))),
          s(:begin,
            s(:lvasgn, :token,
              s(:send, nil, :get,
                s(:sym, :text))),
            s(:lvasgn, :name,
              s(:send,
                s(:lvar, :token), :value)),
            s(:lvasgn, :column,
              s(:send,
                s(:lvar, :token), :column)),
            s(:case,
              s(:send,
                s(:send, nil, :peek), :[],
                s(:int, 0)),
              s(:when,
                s(:sym, :newline),
                s(:if,
                  s(:send,
                    s(:lvar, :column), :==,
                    s(:int, 6)),
                  s(:send,
                    s(:lvar, :last_spec), :add_dependency,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Dependency), :new,
                      s(:lvar, :name))), nil)),
              s(:when,
                s(:sym, :l_paren),
                s(:begin,
                  s(:send, nil, :get,
                    s(:sym, :l_paren)),
                  s(:lvasgn, :token,
                    s(:send, nil, :get,
                      s(:array,
                        s(:sym, :text),
                        s(:sym, :requirement)))),
                  s(:lvasgn, :type,
                    s(:send,
                      s(:lvar, :token), :type)),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:lvar, :token), :value)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :type), :==,
                        s(:sym, :text)),
                      s(:send,
                        s(:lvar, :column), :==,
                        s(:int, 4))),
                    s(:lvasgn, :last_spec,
                      s(:send,
                        s(:lvar, :set), :add_vendor_gem,
                        s(:lvar, :name),
                        s(:lvar, :directory))),
                    s(:begin,
                      s(:lvasgn, :dependency,
                        s(:send, nil, :parse_dependency,
                          s(:lvar, :name),
                          s(:lvar, :data))),
                      s(:send,
                        s(:send,
                          s(:lvar, :last_spec), :dependencies), :<<,
                        s(:lvar, :dependency)))),
                  s(:send, nil, :get,
                    s(:sym, :r_paren)))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "BUG: unknown token "),
                  s(:begin,
                    s(:send, nil, :peek))))),
            s(:send, nil, :skip,
              s(:sym, :newline)))),
        s(:send,
          s(:send,
            s(:ivar, :@set), :sets), :<<,
          s(:lvar, :set)))),
    s(:def, :parse_PLATFORMS,
      s(:args),
      s(:while,
        s(:and,
          s(:send,
            s(:send,
              s(:ivar, :@tokens), :empty?), :!),
          s(:send,
            s(:sym, :text), :==,
            s(:send,
              s(:send, nil, :peek), :first))),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:send, nil, :get,
                s(:sym, :text)), :value)),
          s(:send,
            s(:ivar, :@platforms), :<<,
            s(:lvar, :name)),
          s(:send, nil, :skip,
            s(:sym, :newline))))),
    s(:def, :parse_dependency,
      s(:args,
        s(:arg, :name),
        s(:arg, :op)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:send, nil, :peek), :[],
              s(:int, 0)), :==,
            s(:sym, :text)), nil,
          s(:return,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name),
              s(:lvar, :op)))),
        s(:lvasgn, :version,
          s(:send,
            s(:send, nil, :get,
              s(:sym, :text)), :value)),
        s(:lvasgn, :requirements,
          s(:array,
            s(:dstr,
              s(:begin,
                s(:lvar, :op)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :version))))),
        s(:while,
          s(:send,
            s(:send,
              s(:send, nil, :peek), :type), :==,
            s(:sym, :comma)),
          s(:begin,
            s(:send, nil, :get,
              s(:sym, :comma)),
            s(:lvasgn, :op,
              s(:send,
                s(:send, nil, :get,
                  s(:sym, :requirement)), :value)),
            s(:lvasgn, :version,
              s(:send,
                s(:send, nil, :get,
                  s(:sym, :text)), :value)),
            s(:send,
              s(:lvar, :requirements), :<<,
              s(:dstr,
                s(:begin,
                  s(:lvar, :op)),
                s(:str, " "),
                s(:begin,
                  s(:lvar, :version)))))),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Dependency), :new,
          s(:lvar, :name),
          s(:lvar, :requirements)))),
    s(:send, nil, :private),
    s(:def, :skip,
      s(:args,
        s(:arg, :type)),
      s(:send,
        s(:ivar, :@tokens), :skip,
        s(:lvar, :type))),
    s(:def, :peek,
      s(:args),
      s(:send,
        s(:ivar, :@tokens), :peek)),
    s(:if,
      s(:send,
        s(:array), :respond_to?,
        s(:sym, :flat_map)),
      s(:def, :pinned_requirement,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :requirement,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name))),
          s(:lvasgn, :specification,
            s(:send,
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@set), :sets), :flat_map),
                  s(:args,
                    s(:arg, :set)),
                  s(:send,
                    s(:lvar, :set), :find_all,
                    s(:lvar, :requirement))), :compact), :first)),
          s(:and,
            s(:lvar, :specification),
            s(:send,
              s(:lvar, :specification), :version)))),
      s(:def, :pinned_requirement,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :requirement,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name))),
          s(:lvasgn, :specification,
            s(:send,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:ivar, :@set), :sets), :map),
                    s(:args,
                      s(:arg, :set)),
                    s(:send,
                      s(:lvar, :set), :find_all,
                      s(:lvar, :requirement))), :flatten,
                  s(:int, 1)), :compact), :first)),
          s(:and,
            s(:lvar, :specification),
            s(:send,
              s(:lvar, :specification), :version))))),
    s(:def, :unget,
      s(:args,
        s(:arg, :token)),
      s(:send,
        s(:ivar, :@tokens), :unshift,
        s(:lvar, :token)))))
