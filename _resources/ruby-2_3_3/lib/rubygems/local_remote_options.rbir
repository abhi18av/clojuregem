s(:begin,
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:module,
    s(:const,
      s(:const, nil, :Gem), :LocalRemoteOptions),
    s(:begin,
      s(:def, :accept_uri_http,
        s(:args),
        s(:block,
          s(:send,
            s(:const, nil, :OptionParser), :accept,
            s(:const,
              s(:const, nil, :URI), :HTTP)),
          s(:args,
            s(:arg, :value)),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :uri,
                  s(:send,
                    s(:const, nil, :URI), :parse,
                    s(:lvar, :value))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :URI), :InvalidURIError)), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidArgument),
                    s(:lvar, :value))), nil)),
            s(:if,
              s(:send,
                s(:array,
                  s(:str, "http"),
                  s(:str, "https"),
                  s(:str, "file"),
                  s(:str, "s3")), :include?,
                s(:send,
                  s(:lvar, :uri), :scheme)), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :OptionParser), :InvalidArgument),
                s(:lvar, :value))),
            s(:lvar, :value)))),
      s(:def, :add_local_remote_options,
        s(:args),
        s(:begin,
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Local/Remote"),
              s(:str, "-l"),
              s(:str, "--local"),
              s(:str, "Restrict operations to the LOCAL domain")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :domain),
              s(:sym, :local))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Local/Remote"),
              s(:str, "-r"),
              s(:str, "--remote"),
              s(:str, "Restrict operations to the REMOTE domain")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :domain),
              s(:sym, :remote))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Local/Remote"),
              s(:str, "-b"),
              s(:str, "--both"),
              s(:str, "Allow LOCAL and REMOTE operations")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :domain),
              s(:sym, :both))),
          s(:send, nil, :add_bulk_threshold_option),
          s(:send, nil, :add_clear_sources_option),
          s(:send, nil, :add_source_option),
          s(:send, nil, :add_proxy_option),
          s(:send, nil, :add_update_sources_option))),
      s(:def, :add_bulk_threshold_option,
        s(:args),
        s(:block,
          s(:send, nil, :add_option,
            s(:sym, :"Local/Remote"),
            s(:str, "-B"),
            s(:str, "--bulk-threshold COUNT"),
            s(:str, "Threshold for switching to bulk"),
            s(:dstr,
              s(:str, "synchronization (default "),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :configuration), :bulk_threshold)),
              s(:str, ")"))),
          s(:args,
            s(:arg, :value),
            s(:arg, :options)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :bulk_threshold=,
            s(:send,
              s(:lvar, :value), :to_i)))),
      s(:def, :add_clear_sources_option,
        s(:args),
        s(:block,
          s(:send, nil, :add_option,
            s(:sym, :"Local/Remote"),
            s(:str, "--clear-sources"),
            s(:str, "Clear the gem sources")),
          s(:args,
            s(:arg, :value),
            s(:arg, :options)),
          s(:begin,
            s(:send,
              s(:const, nil, :Gem), :sources=,
              s(:nil)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :sources_cleared),
              s(:true))))),
      s(:def, :add_proxy_option,
        s(:args),
        s(:begin,
          s(:send, nil, :accept_uri_http),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Local/Remote"),
              s(:str, "-p"),
              s(:str, "--[no-]http-proxy [URL]"),
              s(:const,
                s(:const, nil, :URI), :HTTP),
              s(:str, "Use HTTP proxy for remote operations")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :http_proxy),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:lvar, :value), :==,
                      s(:false))),
                  s(:sym, :no_proxy),
                  s(:lvar, :value))),
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :configuration), :[]=,
                s(:sym, :http_proxy),
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :http_proxy))))))),
      s(:def, :add_source_option,
        s(:args),
        s(:begin,
          s(:send, nil, :accept_uri_http),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Local/Remote"),
              s(:str, "-s"),
              s(:str, "--source URL"),
              s(:const,
                s(:const, nil, :URI), :HTTP),
              s(:str, "Append URL to list of remote gem sources")),
            s(:args,
              s(:arg, :source),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :source), :!~,
                  s(:regexp,
                    s(:str, "/\\z"),
                    s(:regopt))),
                s(:send,
                  s(:lvar, :source), :<<,
                  s(:str, "/")), nil),
              s(:if,
                s(:send,
                  s(:lvar, :options), :delete,
                  s(:sym, :sources_cleared)),
                s(:send,
                  s(:const, nil, :Gem), :sources=,
                  s(:array,
                    s(:lvar, :source))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :sources), :include?,
                    s(:lvar, :source)), nil,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :sources), :<<,
                    s(:lvar, :source)))))))),
      s(:def, :add_update_sources_option,
        s(:args),
        s(:block,
          s(:send, nil, :add_option,
            s(:sym, :Deprecated),
            s(:str, "-u"),
            s(:str, "--[no-]update-sources"),
            s(:str, "Update local source cache")),
          s(:args,
            s(:arg, :value),
            s(:arg, :options)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :update_sources=,
            s(:lvar, :value)))),
      s(:def, :both?,
        s(:args),
        s(:send,
          s(:send,
            s(:send, nil, :options), :[],
            s(:sym, :domain)), :==,
          s(:sym, :both))),
      s(:def, :local?,
        s(:args),
        s(:or,
          s(:send,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :domain)), :==,
            s(:sym, :local)),
          s(:send,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :domain)), :==,
            s(:sym, :both)))),
      s(:def, :remote?,
        s(:args),
        s(:or,
          s(:send,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :domain)), :==,
            s(:sym, :remote)),
          s(:send,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :domain)), :==,
            s(:sym, :both)))))))
