s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:module,
    s(:const,
      s(:const, nil, :Gem), :Security),
    s(:class,
      s(:const, nil, :Policy), nil, nil)),
  s(:module,
    s(:const,
      s(:const, nil, :Gem), :InstallUpdateOptions),
    s(:begin,
      s(:def, :add_install_update_options,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:const, nil, :OptionParser), :accept,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Policy)),
            s(:args,
              s(:arg, :value)),
            s(:begin,
              s(:send, nil, :require,
                s(:str, "rubygems/security")),
              s(:if,
                s(:defined?,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :HighSecurity)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument),
                  s(:str, "OpenSSL not installed"))),
              s(:lvasgn, :value,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Policies), :[],
                  s(:lvar, :value))),
              s(:lvasgn, :valid,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Security), :Policies), :keys), :sort)),
              s(:lvasgn, :message,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :value)),
                  s(:str, " ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :valid), :join,
                      s(:str, ", "))),
                  s(:str, " are valid)"))),
              s(:if,
                s(:send,
                  s(:lvar, :value), :nil?),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument),
                  s(:lvar, :message)), nil),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-i"),
              s(:str, "--install-dir DIR"),
              s(:str, "Gem repository directory to get installed"),
              s(:str, "gems")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :install_dir),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-n"),
              s(:str, "--bindir DIR"),
              s(:str, "Directory where binary files are"),
              s(:str, "located")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :bin_dir),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--[no-]document [TYPES]"),
              s(:const, nil, :Array),
              s(:str, "Generate documentation for installed gems"),
              s(:str, "List the documentation types you wish to"),
              s(:str, "generate.  For example: rdoc,ri")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :document),
              s(:case,
                s(:lvar, :value),
                s(:when,
                  s(:nil),
                  s(:array,
                    s(:str, "ri"))),
                s(:when,
                  s(:false),
                  s(:array)),
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--build-root DIR"),
              s(:str, "Temporary installation root. Useful for building"),
              s(:str, "packages. Do not use this when installing remote gems.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :build_root),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :value)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--vendor"),
              s(:str, "Install gem into the vendor directory."),
              s(:str, "Only for use by gem repackagers.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Gem), :vendor_dir), nil,
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const, nil, :OptionParser), :InvalidOption), :new,
                    s(:str, "your platform is not supported")))),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :vendor),
                s(:true)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :install_dir),
                s(:send,
                  s(:const, nil, :Gem), :vendor_dir)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-N"),
              s(:str, "--no-document"),
              s(:str, "Disable documentation generation")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :document),
              s(:array))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :Deprecated),
              s(:str, "--[no-]rdoc"),
              s(:str, "Generate RDoc for installed gems"),
              s(:str, "Use --document instead")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:lvar, :value),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :<<,
                  s(:str, "rdoc")),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :delete,
                  s(:str, "rdoc"))),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :document)), :uniq!))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :Deprecated),
              s(:str, "--[no-]ri"),
              s(:str, "Generate ri data for installed gems."),
              s(:str, "Use --document instead")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:if,
                s(:lvar, :value),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :<<,
                  s(:str, "ri")),
                s(:send,
                  s(:send,
                    s(:lvar, :options), :[],
                    s(:sym, :document)), :delete,
                  s(:str, "ri"))),
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :document)), :uniq!))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-E"),
              s(:str, "--[no-]env-shebang"),
              s(:str, "Rewrite the shebang line on installed"),
              s(:str, "scripts to use /usr/bin/env")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :env_shebang),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-f"),
              s(:str, "--[no-]force"),
              s(:str, "Force gem to install, bypassing dependency"),
              s(:str, "checks")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :force),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-w"),
              s(:str, "--[no-]wrappers"),
              s(:str, "Use bin wrappers for executables"),
              s(:str, "Not available on dosish platforms")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :wrappers),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "-P"),
              s(:str, "--trust-policy POLICY"),
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Policy),
              s(:str, "Specify gem trust policy")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :security_policy),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--ignore-dependencies"),
              s(:str, "Do not install any required dependent gems")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :ignore_dependencies),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--[no-]format-executable"),
              s(:str, "Make installed executable names match ruby."),
              s(:str, "If ruby is ruby18, foo_exec will be"),
              s(:str, "foo_exec18")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :format_executable),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--[no-]user-install"),
              s(:str, "Install in user's home directory instead"),
              s(:str, "of GEM_HOME.")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :user_install),
              s(:lvar, :value))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--development"),
              s(:str, "Install additional development"),
              s(:str, "dependencies")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :development),
                s(:true)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :dev_shallow),
                s(:true)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--development-all"),
              s(:str, "Install development dependencies for all"),
              s(:str, "gems (including dev deps themselves)")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :development),
                s(:true)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :dev_shallow),
                s(:false)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--conservative"),
              s(:str, "Don't attempt to upgrade gems already"),
              s(:str, "meeting version requirement")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:begin,
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :conservative),
                s(:true)),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :minimal_deps),
                s(:true)))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--minimal-deps"),
              s(:str, "Don't upgrade any dependencies that already"),
              s(:str, "meet version requirements")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :minimal_deps),
              s(:true))),
          s(:block,
            s(:send, nil, :add_option,
              s(:sym, :"Install/Update"),
              s(:str, "--[no-]post-install-message"),
              s(:str, "Print post install message")),
            s(:args,
              s(:arg, :value),
              s(:arg, :options)),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :post_install_message),
              s(:lvar, :value))))),
      s(:def, :install_update_defaults_str,
        s(:args),
        s(:str, "--document=rdoc,ri --wrappers")))))
