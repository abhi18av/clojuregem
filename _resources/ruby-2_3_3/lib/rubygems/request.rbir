s(:begin,
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "time")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Request), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:defs,
        s(:self), :create_with_proxy,
        s(:args,
          s(:arg, :uri),
          s(:arg, :request_class),
          s(:arg, :last_modified),
          s(:arg, :proxy)),
        s(:begin,
          s(:lvasgn, :cert_files,
            s(:send, nil, :get_cert_files)),
          s(:or_asgn,
            s(:lvasgn, :proxy),
            s(:send, nil, :get_proxy_from_env,
              s(:send,
                s(:lvar, :uri), :scheme))),
          s(:lvasgn, :pool,
            s(:send,
              s(:const, nil, :ConnectionPools), :new,
              s(:send, nil, :proxy_uri,
                s(:lvar, :proxy)),
              s(:lvar, :cert_files))),
          s(:send, nil, :new,
            s(:lvar, :uri),
            s(:lvar, :request_class),
            s(:lvar, :last_modified),
            s(:send,
              s(:lvar, :pool), :pool_for,
              s(:lvar, :uri))))),
      s(:defs,
        s(:self), :proxy_uri,
        s(:args,
          s(:arg, :proxy)),
        s(:case,
          s(:lvar, :proxy),
          s(:when,
            s(:sym, :no_proxy),
            s(:nil)),
          s(:when,
            s(:const,
              s(:const, nil, :URI), :HTTP),
            s(:lvar, :proxy)),
          s(:send,
            s(:const, nil, :URI), :parse,
            s(:lvar, :proxy)))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :uri),
          s(:arg, :request_class),
          s(:arg, :last_modified),
          s(:arg, :pool)),
        s(:begin,
          s(:ivasgn, :@uri,
            s(:lvar, :uri)),
          s(:ivasgn, :@request_class,
            s(:lvar, :request_class)),
          s(:ivasgn, :@last_modified,
            s(:lvar, :last_modified)),
          s(:ivasgn, :@requests,
            s(:send,
              s(:const, nil, :Hash), :new,
              s(:int, 0))),
          s(:ivasgn, :@user_agent,
            s(:send, nil, :user_agent)),
          s(:ivasgn, :@connection_pool,
            s(:lvar, :pool)))),
      s(:def, :proxy_uri,
        s(:args),
        s(:send,
          s(:ivar, :@connection_pool), :proxy_uri)),
      s(:def, :cert_files,
        s(:args),
        s(:send,
          s(:ivar, :@connection_pool), :cert_files)),
      s(:defs,
        s(:self), :get_cert_files,
        s(:args),
        s(:begin,
          s(:lvasgn, :pattern,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "./ssl_certs/*.pem"),
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:str, "(string)")))),
          s(:send,
            s(:const, nil, :Dir), :glob,
            s(:lvar, :pattern)))),
      s(:defs,
        s(:self), :configure_connection_for_https,
        s(:args,
          s(:arg, :connection),
          s(:arg, :cert_files)),
        s(:rescue,
          s(:begin,
            s(:send, nil, :require,
              s(:str, "net/https")),
            s(:send,
              s(:lvar, :connection), :use_ssl=,
              s(:true)),
            s(:send,
              s(:lvar, :connection), :verify_mode=,
              s(:or,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :configuration), :ssl_verify_mode),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER))),
            s(:lvasgn, :store,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Store), :new)),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :configuration), :ssl_client_cert),
              s(:begin,
                s(:lvasgn, :pem,
                  s(:send,
                    s(:const, nil, :File), :read,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Gem), :configuration), :ssl_client_cert))),
                s(:send,
                  s(:lvar, :connection), :cert=,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                    s(:lvar, :pem))),
                s(:send,
                  s(:lvar, :connection), :key=,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                    s(:lvar, :pem)))), nil),
            s(:send,
              s(:lvar, :store), :set_default_paths),
            s(:block,
              s(:send,
                s(:lvar, :cert_files), :each),
              s(:args,
                s(:arg, :ssl_cert_file)),
              s(:send,
                s(:lvar, :store), :add_file,
                s(:lvar, :ssl_cert_file))),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :configuration), :ssl_ca_cert),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :configuration), :ssl_ca_cert)),
                s(:send,
                  s(:lvar, :store), :add_path,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :configuration), :ssl_ca_cert)),
                s(:send,
                  s(:lvar, :store), :add_file,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :configuration), :ssl_ca_cert))), nil),
            s(:send,
              s(:lvar, :connection), :cert_store=,
              s(:lvar, :store)),
            s(:lvar, :connection)),
          s(:resbody,
            s(:array,
              s(:const, nil, :LoadError)),
            s(:lvasgn, :e),
            s(:begin,
              s(:if,
                s(:or,
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:lvar, :e), :respond_to?,
                        s(:sym, :path)),
                      s(:send,
                        s(:send,
                          s(:lvar, :e), :path), :==,
                        s(:str, "openssl")))),
                  s(:send,
                    s(:send,
                      s(:lvar, :e), :message), :=~,
                    s(:regexp,
                      s(:str, " -- openssl$"),
                      s(:regopt)))), nil,
                s(:send, nil, :raise)),
              s(:send, nil, :raise,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Exception), :new,
                  s(:str, "Unable to require openssl, install OpenSSL and rebuild ruby (preferred) or use non-HTTPS sources"))))), nil)),
      s(:def, :connection_for,
        s(:args,
          s(:arg, :uri)),
        s(:rescue,
          s(:send,
            s(:ivar, :@connection_pool), :checkout),
          s(:resbody,
            s(:array,
              s(:if,
                s(:defined?,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL)),
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLError),
                s(:const,
                  s(:const, nil, :Errno), :EHOSTDOWN)),
              s(:const,
                s(:const, nil, :Errno), :EHOSTDOWN)),
            s(:lvasgn, :e),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                s(:send,
                  s(:lvar, :e), :message),
                s(:lvar, :uri)))), nil)),
      s(:def, :fetch,
        s(:args),
        s(:begin,
          s(:lvasgn, :request,
            s(:send,
              s(:ivar, :@request_class), :new,
              s(:send,
                s(:ivar, :@uri), :request_uri))),
          s(:if,
            s(:or,
              s(:or,
                s(:send,
                  s(:ivar, :@uri), :nil?),
                s(:send,
                  s(:send,
                    s(:ivar, :@uri), :user), :nil?)),
              s(:send,
                s(:send,
                  s(:ivar, :@uri), :user), :empty?)), nil,
            s(:send,
              s(:lvar, :request), :basic_auth,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :UriFormatter), :new,
                  s(:send,
                    s(:ivar, :@uri), :user)), :unescape),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :UriFormatter), :new,
                  s(:send,
                    s(:ivar, :@uri), :password)), :unescape))),
          s(:send,
            s(:lvar, :request), :add_field,
            s(:str, "User-Agent"),
            s(:ivar, :@user_agent)),
          s(:send,
            s(:lvar, :request), :add_field,
            s(:str, "Connection"),
            s(:str, "keep-alive")),
          s(:send,
            s(:lvar, :request), :add_field,
            s(:str, "Keep-Alive"),
            s(:str, "30")),
          s(:if,
            s(:ivar, :@last_modified),
            s(:send,
              s(:lvar, :request), :add_field,
              s(:str, "If-Modified-Since"),
              s(:send,
                s(:ivar, :@last_modified), :httpdate)), nil),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:lvar, :request)), nil),
          s(:send, nil, :perform_request,
            s(:lvar, :request)))),
      s(:defs,
        s(:self), :get_proxy_from_env,
        s(:args,
          s(:optarg, :scheme,
            s(:str, "http"))),
        s(:begin,
          s(:lvasgn, :_scheme,
            s(:send,
              s(:lvar, :scheme), :downcase)),
          s(:lvasgn, :_SCHEME,
            s(:send,
              s(:lvar, :scheme), :upcase)),
          s(:lvasgn, :env_proxy,
            s(:or,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:dstr,
                  s(:begin,
                    s(:lvar, :_scheme)),
                  s(:str, "_proxy"))),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:dstr,
                  s(:begin,
                    s(:lvar, :_SCHEME)),
                  s(:str, "_PROXY"))))),
          s(:lvasgn, :no_env_proxy,
            s(:or,
              s(:send,
                s(:lvar, :env_proxy), :nil?),
              s(:send,
                s(:lvar, :env_proxy), :empty?))),
          s(:if,
            s(:and,
              s(:lvar, :no_env_proxy),
              s(:send,
                s(:lvar, :_scheme), :!=,
                s(:str, "http"))),
            s(:return,
              s(:send, nil, :get_proxy_from_env,
                s(:str, "http"))), nil),
          s(:if,
            s(:lvar, :no_env_proxy),
            s(:return,
              s(:sym, :no_proxy)), nil),
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :UriFormatter), :new,
                  s(:lvar, :env_proxy)), :normalize))),
          s(:if,
            s(:and,
              s(:and,
                s(:lvar, :uri),
                s(:send,
                  s(:send,
                    s(:lvar, :uri), :user), :nil?)),
              s(:send,
                s(:send,
                  s(:lvar, :uri), :password), :nil?)),
            s(:begin,
              s(:lvasgn, :user,
                s(:or,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :_scheme)),
                      s(:str, "_proxy_user"))),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :_SCHEME)),
                      s(:str, "_PROXY_USER"))))),
              s(:lvasgn, :password,
                s(:or,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :_scheme)),
                      s(:str, "_proxy_pass"))),
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :_SCHEME)),
                      s(:str, "_PROXY_PASS"))))),
              s(:send,
                s(:lvar, :uri), :user=,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :UriFormatter), :new,
                    s(:lvar, :user)), :escape)),
              s(:send,
                s(:lvar, :uri), :password=,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :UriFormatter), :new,
                    s(:lvar, :password)), :escape))), nil),
          s(:lvar, :uri))),
      s(:def, :perform_request,
        s(:args,
          s(:arg, :request)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :connection,
              s(:send, nil, :connection_for,
                s(:ivar, :@uri))),
            s(:lvasgn, :retried,
              s(:false)),
            s(:lvasgn, :bad_response,
              s(:false)),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:op_asgn,
                    s(:send,
                      s(:ivar, :@requests), :[],
                      s(:send,
                        s(:lvar, :connection), :object_id)), :+,
                    s(:int, 1)),
                  s(:send, nil, :verbose,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :request), :method)),
                      s(:str, " "),
                      s(:begin,
                        s(:ivar, :@uri)))),
                  s(:lvasgn, :file_name,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:send,
                        s(:ivar, :@uri), :path))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :request), :response_body_permitted?),
                      s(:send,
                        s(:lvar, :file_name), :=~,
                        s(:regexp,
                          s(:str, "\\.gem$"),
                          s(:regopt)))),
                    s(:begin,
                      s(:lvasgn, :reporter,
                        s(:send,
                          s(:send, nil, :ui), :download_reporter)),
                      s(:lvasgn, :response,
                        s(:block,
                          s(:send,
                            s(:lvar, :connection), :request,
                            s(:lvar, :request)),
                          s(:args,
                            s(:arg, :incomplete_response)),
                          s(:if,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Net), :HTTPOK), :===,
                              s(:lvar, :incomplete_response)),
                            s(:begin,
                              s(:send,
                                s(:lvar, :reporter), :fetch,
                                s(:lvar, :file_name),
                                s(:send,
                                  s(:lvar, :incomplete_response), :content_length)),
                              s(:lvasgn, :downloaded,
                                s(:int, 0)),
                              s(:lvasgn, :data,
                                s(:send,
                                  s(:const, nil, :String), :new)),
                              s(:block,
                                s(:send,
                                  s(:lvar, :incomplete_response), :read_body),
                                s(:args,
                                  s(:arg, :segment)),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :data), :<<,
                                    s(:lvar, :segment)),
                                  s(:op_asgn,
                                    s(:lvasgn, :downloaded), :+,
                                    s(:send,
                                      s(:lvar, :segment), :length)),
                                  s(:send,
                                    s(:lvar, :reporter), :update,
                                    s(:lvar, :downloaded)))),
                              s(:send,
                                s(:lvar, :reporter), :done),
                              s(:if,
                                s(:send,
                                  s(:lvar, :incomplete_response), :respond_to?,
                                  s(:sym, :body=)),
                                s(:send,
                                  s(:lvar, :incomplete_response), :body=,
                                  s(:lvar, :data)),
                                s(:send,
                                  s(:lvar, :incomplete_response), :instance_variable_set,
                                  s(:sym, :@body),
                                  s(:lvar, :data)))), nil)))),
                    s(:lvasgn, :response,
                      s(:send,
                        s(:lvar, :connection), :request,
                        s(:lvar, :request)))),
                  s(:send, nil, :verbose,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :response), :code)),
                      s(:str, " "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :response), :message))))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Net), :HTTPBadResponse)), nil,
                  s(:begin,
                    s(:send, nil, :verbose,
                      s(:str, "bad response")),
                    s(:send, nil, :reset,
                      s(:lvar, :connection)),
                    s(:if,
                      s(:lvar, :bad_response),
                      s(:send, nil, :raise,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                          s(:str, "too many bad responses"),
                          s(:ivar, :@uri))), nil),
                    s(:lvasgn, :bad_response,
                      s(:true)),
                    s(:retry))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Net), :HTTPFatalError)), nil,
                  s(:begin,
                    s(:send, nil, :verbose,
                      s(:str, "fatal error")),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                        s(:str, "fatal error"),
                        s(:ivar, :@uri))))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :EOFError),
                    s(:const,
                      s(:const, nil, :Timeout), :Error),
                    s(:const,
                      s(:const, nil, :Errno), :ECONNABORTED),
                    s(:const,
                      s(:const, nil, :Errno), :ECONNRESET),
                    s(:const,
                      s(:const, nil, :Errno), :EPIPE)), nil,
                  s(:begin,
                    s(:lvasgn, :requests,
                      s(:send,
                        s(:ivar, :@requests), :[],
                        s(:send,
                          s(:lvar, :connection), :object_id))),
                    s(:send, nil, :verbose,
                      s(:dstr,
                        s(:str, "connection reset after "),
                        s(:begin,
                          s(:lvar, :requests)),
                        s(:str, " requests, retrying"))),
                    s(:if,
                      s(:lvar, :retried),
                      s(:send, nil, :raise,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                          s(:str, "too many connection resets"),
                          s(:ivar, :@uri))), nil),
                    s(:send, nil, :reset,
                      s(:lvar, :connection)),
                    s(:lvasgn, :retried,
                      s(:true)),
                    s(:retry))), nil)),
            s(:lvar, :response)),
          s(:send,
            s(:ivar, :@connection_pool), :checkin,
            s(:lvar, :connection)))),
      s(:def, :reset,
        s(:args,
          s(:arg, :connection)),
        s(:begin,
          s(:send,
            s(:ivar, :@requests), :delete,
            s(:send,
              s(:lvar, :connection), :object_id)),
          s(:send,
            s(:lvar, :connection), :finish),
          s(:send,
            s(:lvar, :connection), :start))),
      s(:def, :user_agent,
        s(:args),
        s(:begin,
          s(:lvasgn, :ua,
            s(:send,
              s(:dstr,
                s(:str, "RubyGems/"),
                s(:begin,
                  s(:const,
                    s(:const, nil, :Gem), :VERSION)),
                s(:str, " "),
                s(:begin,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :local))), :dup)),
          s(:lvasgn, :ruby_version,
            s(:const, nil, :RUBY_VERSION)),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_PATCHLEVEL), :==,
              s(:int, -1)),
            s(:op_asgn,
              s(:lvasgn, :ruby_version), :+,
              s(:str, "dev")), nil),
          s(:send,
            s(:lvar, :ua), :<<,
            s(:dstr,
              s(:str, " Ruby/"),
              s(:begin,
                s(:lvar, :ruby_version)),
              s(:str, " ("),
              s(:begin,
                s(:const, nil, :RUBY_RELEASE_DATE)))),
          s(:if,
            s(:send,
              s(:const, nil, :RUBY_PATCHLEVEL), :>=,
              s(:int, 0)),
            s(:send,
              s(:lvar, :ua), :<<,
              s(:dstr,
                s(:str, " patchlevel "),
                s(:begin,
                  s(:const, nil, :RUBY_PATCHLEVEL)))),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_REVISION)),
              s(:send,
                s(:lvar, :ua), :<<,
                s(:dstr,
                  s(:str, " revision "),
                  s(:begin,
                    s(:const, nil, :RUBY_REVISION)))), nil)),
          s(:send,
            s(:lvar, :ua), :<<,
            s(:str, ")")),
          s(:if,
            s(:and,
              s(:defined?,
                s(:const, nil, :RUBY_ENGINE)),
              s(:send,
                s(:const, nil, :RUBY_ENGINE), :!=,
                s(:str, "ruby"))),
            s(:send,
              s(:lvar, :ua), :<<,
              s(:dstr,
                s(:str, " "),
                s(:begin,
                  s(:const, nil, :RUBY_ENGINE)))), nil),
          s(:lvar, :ua))))),
  s(:send, nil, :require,
    s(:str, "rubygems/request/http_pool")),
  s(:send, nil, :require,
    s(:str, "rubygems/request/https_pool")),
  s(:send, nil, :require,
    s(:str, "rubygems/request/connection_pools")))
