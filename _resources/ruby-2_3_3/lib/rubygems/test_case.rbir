s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :gem,
        s(:str, "minitest"),
        s(:str, "~> 4.0")),
      s(:resbody,
        s(:array,
          s(:const, nil, :NoMethodError),
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :Gem), :QuickLoader)),
    s(:send,
      s(:const,
        s(:const, nil, :Gem), :QuickLoader), :load_full_rubygems_library),
    s(:send, nil, :require,
      s(:str, "rubygems"))),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :gem,
        s(:str, "minitest")),
      s(:resbody,
        s(:array,
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:if,
    s(:send,
      s(:send,
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Dependency), :new,
          s(:str, "rdoc"),
          s(:str, ">= 3.10")), :matching_specs), :empty?), nil,
    s(:begin,
      s(:send, nil, :gem,
        s(:str, "rdoc")),
      s(:send, nil, :gem,
        s(:str, "json")))),
  s(:send, nil, :require,
    s(:str, "minitest/autorun")),
  s(:send, nil, :require,
    s(:str, "rubygems/deprecate")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "pathname")),
  s(:send, nil, :require,
    s(:str, "pp")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:send, nil, :require,
    s(:str, "shellwords")),
  s(:send, nil, :require,
    s(:str, "tmpdir")),
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:send, nil, :require,
    s(:str, "zlib")),
  s(:send, nil, :require,
    s(:str, "benchmark")),
  s(:send, nil, :require,
    s(:str, "rubygems/mock_gem_ui")),
  s(:module,
    s(:const, nil, :Gem),
    s(:begin,
      s(:defs,
        s(:self), :searcher=,
        s(:args,
          s(:arg, :searcher)),
        s(:ivasgn, :@searcher,
          s(:lvar, :searcher))),
      s(:defs,
        s(:self), :win_platform=,
        s(:args,
          s(:arg, :val)),
        s(:cvasgn, :@@win_platform,
          s(:lvar, :val))),
      s(:defs,
        s(:self), :ruby=,
        s(:args,
          s(:arg, :ruby)),
        s(:ivasgn, :@ruby,
          s(:lvar, :ruby))),
      s(:module,
        s(:const, nil, :DefaultUserInteraction),
        s(:ivasgn, :@ui,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :MockGemUi), :new))))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :TestCase),
    s(:const,
      s(:const,
        s(:const, nil, :MiniTest), :Unit), :TestCase),
    s(:begin,
      s(:send, nil, :attr_accessor,
        s(:sym, :fetcher)),
      s(:send, nil, :attr_accessor,
        s(:sym, :gem_repo)),
      s(:send, nil, :attr_accessor,
        s(:sym, :uri)),
      s(:def, :assert_activate,
        s(:args,
          s(:arg, :expected),
          s(:restarg, :specs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:case,
              s(:lvar, :spec),
              s(:when,
                s(:const, nil, :String),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :find_by_name,
                    s(:lvar, :spec)), :activate)),
              s(:when,
                s(:const,
                  s(:const, nil, :Gem), :Specification),
                s(:send,
                  s(:lvar, :spec), :activate)),
              s(:send, nil, :flunk,
                s(:send,
                  s(:lvar, :spec), :inspect)))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :loaded_specs), :values), :map,
              s(:block_pass,
                s(:sym, :full_name)))),
          s(:if,
            s(:lvar, :expected),
            s(:send, nil, :assert_equal,
              s(:send,
                s(:lvar, :expected), :sort),
              s(:send,
                s(:lvar, :loaded), :sort)), nil))),
      s(:def, :assert_path_exists,
        s(:args,
          s(:arg, :path),
          s(:optarg, :msg,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :msg,
            s(:block,
              s(:send, nil, :message,
                s(:lvar, :msg)),
              s(:args),
              s(:dstr,
                s(:str, "Expected path '"),
                s(:begin,
                  s(:lvar, :path)),
                s(:str, "' to exist")))),
          s(:send, nil, :assert,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :path)),
            s(:lvar, :msg)))),
      s(:def, :enable_shared,
        s(:args,
          s(:arg, :value)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :enable_shared,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "ENABLE_SHARED"))),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[]=,
              s(:str, "ENABLE_SHARED"),
              s(:lvar, :value)),
            s(:yield)),
          s(:if,
            s(:lvar, :enable_shared),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[]=,
              s(:str, "enable_shared"),
              s(:lvar, :enable_shared)),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :delete,
              s(:str, "enable_shared"))))),
      s(:def, :refute_path_exists,
        s(:args,
          s(:arg, :path),
          s(:optarg, :msg,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :msg,
            s(:block,
              s(:send, nil, :message,
                s(:lvar, :msg)),
              s(:args),
              s(:dstr,
                s(:str, "Expected path '"),
                s(:begin,
                  s(:lvar, :path)),
                s(:str, "' to not exist")))),
          s(:send, nil, :refute,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :path)),
            s(:lvar, :msg)))),
      s(:def, :scan_make_command_lines,
        s(:args,
          s(:arg, :output)),
        s(:send,
          s(:lvar, :output), :scan,
          s(:regexp,
            s(:str, "^"),
            s(:begin,
              s(:send,
                s(:const, nil, :Regexp), :escape,
                s(:send, nil, :make_command))),
            s(:str, "(?:[[:blank:]].*)?$"),
            s(:regopt)))),
      s(:def, :parse_make_command_line,
        s(:args,
          s(:arg, :line)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :command),
              s(:splat,
                s(:lvasgn, :args))),
            s(:send,
              s(:lvar, :line), :shellsplit)),
          s(:lvasgn, :targets,
            s(:array)),
          s(:lvasgn, :macros,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :args), :each),
            s(:args,
              s(:arg, :arg)),
            s(:case,
              s(:lvar, :arg),
              s(:when,
                s(:regexp,
                  s(:str, "\\A(\\w+)="),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :macros), :[]=,
                  s(:nth_ref, 1),
                  s(:back_ref, :$'))),
              s(:send,
                s(:lvar, :targets), :<<,
                s(:lvar, :arg)))),
          s(:if,
            s(:send,
              s(:lvar, :targets), :empty?),
            s(:send,
              s(:lvar, :targets), :<<,
              s(:str, "")), nil),
          s(:hash,
            s(:pair,
              s(:sym, :command),
              s(:lvar, :command)),
            s(:pair,
              s(:sym, :targets),
              s(:lvar, :targets)),
            s(:pair,
              s(:sym, :macros),
              s(:lvar, :macros))))),
      s(:def, :assert_contains_make_command,
        s(:args,
          s(:arg, :target),
          s(:arg, :output),
          s(:optarg, :msg,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :output), :match,
              s(:regexp,
                s(:str, "\\n"),
                s(:regopt))),
            s(:lvasgn, :msg,
              s(:block,
                s(:send, nil, :message,
                  s(:lvar, :msg)),
                s(:args),
                s(:send,
                  s(:str, "Expected output containing make command \"%s\": %s"), :%,
                  s(:array,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:str, "%s %s"), :%,
                          s(:array,
                            s(:send, nil, :make_command),
                            s(:lvar, :target)))), :rstrip),
                    s(:send,
                      s(:lvar, :output), :inspect))))),
            s(:lvasgn, :msg,
              s(:block,
                s(:send, nil, :message,
                  s(:lvar, :msg)),
                s(:args),
                s(:send,
                  s(:str, "Expected make command \"%s\": %s"), :%,
                  s(:array,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:str, "%s %s"), :%,
                          s(:array,
                            s(:send, nil, :make_command),
                            s(:lvar, :target)))), :rstrip),
                    s(:send,
                      s(:lvar, :output), :inspect)))))),
          s(:send, nil, :assert,
            s(:block,
              s(:send,
                s(:send, nil, :scan_make_command_lines,
                  s(:lvar, :output)), :any?),
              s(:args,
                s(:arg, :line)),
              s(:begin,
                s(:lvasgn, :make,
                  s(:send, nil, :parse_make_command_line,
                    s(:lvar, :line))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :make), :[],
                      s(:sym, :targets)), :include?,
                    s(:lvar, :target)),
                  s(:begin,
                    s(:if,
                      s(:send, nil, :block_given?),
                      s(:yield,
                        s(:lvar, :make),
                        s(:lvar, :line)), nil),
                    s(:true)),
                  s(:false)))),
            s(:lvar, :msg)))),
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :DefaultUserInteraction)),
      s(:if,
        s(:or,
          s(:send,
            s(:send, nil, :instance_methods), :include?,
            s(:str, "default_test")),
          s(:send,
            s(:send, nil, :instance_methods), :include?,
            s(:sym, :default_test))),
        s(:send, nil, :undef_method,
          s(:sym, :default_test)), nil),
      s(:if,
        s(:defined?,
          s(:cvar, :@@project_dir)), nil,
        s(:cvasgn, :@@project_dir,
          s(:send,
            s(:send,
              s(:const, nil, :Dir), :pwd), :untaint))),
      s(:cvasgn, :@@initial_reset,
        s(:false)),
      s(:def, :setup,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@orig_gem_home,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "GEM_HOME"))),
          s(:ivasgn, :@orig_gem_path,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "GEM_PATH"))),
          s(:ivasgn, :@orig_gem_vendor,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "GEM_VENDOR"))),
          s(:ivasgn, :@orig_gem_spec_cache,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "GEM_SPEC_CACHE"))),
          s(:ivasgn, :@orig_rubygems_gemdeps,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "RUBYGEMS_GEMDEPS"))),
          s(:ivasgn, :@orig_rubygems_host,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "RUBYGEMS_HOST"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_VENDOR"),
            s(:nil)),
          s(:ivasgn, :@current_dir,
            s(:send,
              s(:const, nil, :Dir), :pwd)),
          s(:ivasgn, :@fetcher,
            s(:nil)),
          s(:ivasgn, :@ui,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :MockGemUi), :new)),
          s(:lvasgn, :tmpdir,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:send,
                s(:const, nil, :Dir), :tmpdir))),
          s(:send,
            s(:lvar, :tmpdir), :untaint),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "KEEP_FILES")),
            s(:ivasgn, :@tempdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :tmpdir),
                s(:dstr,
                  s(:str, "test_rubygems_"),
                  s(:begin,
                    s(:gvar, :$$)),
                  s(:str, "."),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :to_i))))),
            s(:ivasgn, :@tempdir,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :tmpdir),
                s(:dstr,
                  s(:str, "test_rubygems_"),
                  s(:begin,
                    s(:gvar, :$$)))))),
          s(:send,
            s(:ivar, :@tempdir), :untaint),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@tempdir)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:ivar, :@tempdir)),
            s(:args),
            s(:begin,
              s(:ivasgn, :@tempdir,
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:str, "."))),
              s(:send,
                s(:ivar, :@tempdir), :untaint))),
          s(:if,
            s(:send, nil, :win_platform?),
            s(:begin,
              s(:ivasgn, :@tempdir,
                s(:send,
                  s(:send,
                    s(:const, nil, :Dir), :[],
                    s(:ivar, :@tempdir)), :[],
                  s(:int, 0))),
              s(:send,
                s(:ivar, :@tempdir), :untaint)), nil),
          s(:ivasgn, :@gemhome,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gemhome"))),
          s(:ivasgn, :@userhome,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "userhome"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_SPEC_CACHE"),
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "spec_cache"))),
          s(:ivasgn, :@orig_ruby,
            s(:if,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RUBY")),
              s(:begin,
                s(:lvasgn, :ruby,
                  s(:send,
                    s(:const, nil, :Gem), :ruby)),
                s(:send,
                  s(:const, nil, :Gem), :ruby=,
                  s(:send,
                    s(:const, nil, :ENV), :[],
                    s(:str, "RUBY"))),
                s(:lvar, :ruby)), nil)),
          s(:ivasgn, :@git,
            s(:or,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "GIT")),
              s(:str, "git"))),
          s(:send,
            s(:const, nil, :Gem), :ensure_gem_subdirectories,
            s(:ivar, :@gemhome)),
          s(:ivasgn, :@orig_LOAD_PATH,
            s(:send,
              s(:gvar, :$LOAD_PATH), :dup)),
          s(:block,
            s(:send,
              s(:gvar, :$LOAD_PATH), :map!),
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:send,
                s(:begin,
                  s(:lvasgn, :expand_path,
                    s(:send,
                      s(:const, nil, :File), :expand_path,
                      s(:lvar, :s)))), :==,
                s(:lvar, :s)),
              s(:lvar, :s),
              s(:send,
                s(:lvar, :expand_path), :untaint))),
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:ivar, :@tempdir)),
          s(:ivasgn, :@orig_ENV_HOME,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "HOME"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "HOME"),
            s(:ivar, :@userhome)),
          s(:send,
            s(:const, nil, :Gem), :instance_variable_set,
            s(:sym, :@user_home),
            s(:nil)),
          s(:send,
            s(:const, nil, :Gem), :instance_variable_set,
            s(:sym, :@gemdeps),
            s(:nil)),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :instance_variables), :include?,
              s(:sym, :@ruby_version)),
            s(:send,
              s(:const, nil, :Gem), :send,
              s(:sym, :remove_instance_variable),
              s(:sym, :@ruby_version)), nil),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@gemhome)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@userhome)),
          s(:ivasgn, :@orig_gem_private_key_passphrase,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "GEM_PRIVATE_KEY_PASSPHRASE"))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_PRIVATE_KEY_PASSPHRASE"),
            s(:const, nil, :PRIVATE_KEY_PASSPHRASE)),
          s(:ivasgn, :@default_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "default"))),
          s(:ivasgn, :@default_spec_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@default_dir),
              s(:str, "specifications"),
              s(:str, "default"))),
          s(:send,
            s(:const, nil, :Gem), :instance_variable_set,
            s(:sym, :@default_dir),
            s(:ivar, :@default_dir)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:ivar, :@default_spec_dir)),
          s(:if,
            s(:cvar, :@@initial_reset),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :unresolved_deps), :clear),
            s(:begin,
              s(:cvasgn, :@@initial_reset,
                s(:true)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :reset))),
          s(:send,
            s(:const, nil, :Gem), :use_paths,
            s(:ivar, :@gemhome)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Security), :reset),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :loaded_specs), :clear),
          s(:send,
            s(:const, nil, :Gem), :clear_default_specs),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :unresolved_deps), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :verbose=,
            s(:true)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :update_sources=,
            s(:true)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :FakeFetcher), :new)),
          s(:ivasgn, :@gem_repo,
            s(:str, "http://gems.example.com/")),
          s(:ivasgn, :@uri,
            s(:send,
              s(:const, nil, :URI), :parse,
              s(:ivar, :@gem_repo))),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :sources), :replace,
            s(:array,
              s(:ivar, :@gem_repo))),
          s(:send,
            s(:const, nil, :Gem), :searcher=,
            s(:nil)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :SpecFetcher), :fetcher=,
            s(:nil)),
          s(:ivasgn, :@orig_BASERUBY,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "BASERUBY"))),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "BASERUBY"),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "ruby_install_name"))),
          s(:ivasgn, :@orig_arch,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "arch"))),
          s(:if,
            s(:send, nil, :win_platform?),
            s(:send, nil, :util_set_arch,
              s(:str, "i386-mswin32")),
            s(:send, nil, :util_set_arch,
              s(:str, "i686-darwin8.10.1"))),
          s(:ivasgn, :@marshal_version,
            s(:dstr,
              s(:begin,
                s(:const,
                  s(:const, nil, :Marshal), :MAJOR_VERSION)),
              s(:str, "."),
              s(:begin,
                s(:const,
                  s(:const, nil, :Marshal), :MINOR_VERSION)))),
          s(:ivasgn, :@orig_LOADED_FEATURES,
            s(:send,
              s(:gvar, :$LOADED_FEATURES), :dup)))),
      s(:def, :teardown,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@orig_LOAD_PATH),
            s(:send,
              s(:gvar, :$LOAD_PATH), :replace,
              s(:ivar, :@orig_LOAD_PATH)), nil),
          s(:if,
            s(:ivar, :@orig_LOADED_FEATURES),
            s(:if,
              s(:ivar, :@orig_LOAD_PATH),
              s(:begin,
                s(:lvasgn, :paths,
                  s(:block,
                    s(:send,
                      s(:ivar, :@orig_LOAD_PATH), :map),
                    s(:args,
                      s(:arg, :path)),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :path)),
                      s(:str, "/")))),
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:gvar, :$LOADED_FEATURES), :-,
                        s(:ivar, :@orig_LOADED_FEATURES))), :each),
                  s(:args,
                    s(:arg, :feat)),
                  s(:if,
                    s(:block,
                      s(:send,
                        s(:lvar, :paths), :any?),
                      s(:args,
                        s(:arg, :path)),
                      s(:send,
                        s(:lvar, :feat), :start_with?,
                        s(:lvar, :path))), nil,
                    s(:send,
                      s(:gvar, :$LOADED_FEATURES), :delete,
                      s(:lvar, :feat))))),
              s(:send,
                s(:gvar, :$LOADED_FEATURES), :replace,
                s(:ivar, :@orig_LOADED_FEATURES))), nil),
          s(:if,
            s(:ivar, :@orig_BASERUBY),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[]=,
              s(:str, "BASERUBY"),
              s(:ivar, :@orig_BASERUBY)),
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :delete,
              s(:str, "BASERUBY"))),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "arch"),
            s(:ivar, :@orig_arch)),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
              s(:nil)), nil),
          s(:send,
            s(:const, nil, :Dir), :chdir,
            s(:ivar, :@current_dir)),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "KEEP_FILES")), nil,
            s(:send,
              s(:const, nil, :FileUtils), :rm_rf,
              s(:ivar, :@tempdir))),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_HOME"),
            s(:ivar, :@orig_gem_home)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_PATH"),
            s(:ivar, :@orig_gem_path)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_VENDOR"),
            s(:ivar, :@orig_gem_vendor)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_SPEC_CACHE"),
            s(:ivar, :@orig_gem_spec_cache)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "RUBYGEMS_GEMDEPS"),
            s(:ivar, :@orig_rubygems_gemdeps)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "RUBYGEMS_HOST"),
            s(:ivar, :@orig_rubygems_host)),
          s(:if,
            s(:ivar, :@orig_ruby),
            s(:send,
              s(:const, nil, :Gem), :ruby=,
              s(:ivar, :@orig_ruby)), nil),
          s(:if,
            s(:ivar, :@orig_ENV_HOME),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "HOME"),
              s(:ivar, :@orig_ENV_HOME)),
            s(:send,
              s(:const, nil, :ENV), :delete,
              s(:str, "HOME"))),
          s(:send,
            s(:const, nil, :Gem), :instance_variable_set,
            s(:sym, :@default_dir),
            s(:nil)),
          s(:send,
            s(:const, nil, :ENV), :[]=,
            s(:str, "GEM_PRIVATE_KEY_PASSPHRASE"),
            s(:ivar, :@orig_gem_private_key_passphrase)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :_clear_load_cache),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :unresolved_deps), :clear))),
      s(:def, :common_installer_setup,
        s(:args),
        s(:begin,
          s(:send, nil, :common_installer_teardown),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :post_build),
            s(:args,
              s(:arg, :installer)),
            s(:begin,
              s(:ivasgn, :@post_build_hook_arg,
                s(:lvar, :installer)),
              s(:true))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :post_install),
            s(:args,
              s(:arg, :installer)),
            s(:ivasgn, :@post_install_hook_arg,
              s(:lvar, :installer))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :post_uninstall),
            s(:args,
              s(:arg, :uninstaller)),
            s(:ivasgn, :@post_uninstall_hook_arg,
              s(:lvar, :uninstaller))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :pre_install),
            s(:args,
              s(:arg, :installer)),
            s(:begin,
              s(:ivasgn, :@pre_install_hook_arg,
                s(:lvar, :installer)),
              s(:true))),
          s(:block,
            s(:send,
              s(:const, nil, :Gem), :pre_uninstall),
            s(:args,
              s(:arg, :uninstaller)),
            s(:ivasgn, :@pre_uninstall_hook_arg,
              s(:lvar, :uninstaller))))),
      s(:def, :common_installer_teardown,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :post_build_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :post_install_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :done_installing_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :post_reset_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :post_uninstall_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :pre_install_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :pre_reset_hooks), :clear),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :pre_uninstall_hooks), :clear))),
      s(:def, :git_gem,
        s(:args,
          s(:optarg, :name,
            s(:str, "a")),
          s(:optarg, :version,
            s(:int, 1))),
        s(:begin,
          s(:send, nil, :have_git?),
          s(:lvasgn, :directory,
            s(:send,
              s(:const, nil, :File), :join,
              s(:str, "git"),
              s(:lvar, :name))),
          s(:lvasgn, :directory,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :directory))),
          s(:lvasgn, :git_spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new,
                s(:lvar, :name),
                s(:lvar, :version)),
              s(:args,
                s(:arg, :specification)),
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:lvar, :specification)), nil))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :directory)),
          s(:lvasgn, :gemspec,
            s(:dstr,
              s(:begin,
                s(:lvar, :name)),
              s(:str, ".gemspec"))),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :directory),
                s(:lvar, :gemspec)),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :git_spec), :to_ruby))),
          s(:lvasgn, :head,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :directory)),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:str, ".git")), nil,
                s(:begin,
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "init"),
                    s(:str, "--quiet")),
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "config"),
                    s(:str, "user.name"),
                    s(:str, "RubyGems Tests")),
                  s(:send, nil, :system,
                    s(:ivar, :@git),
                    s(:str, "config"),
                    s(:str, "user.email"),
                    s(:str, "rubygems@example")))),
              s(:send, nil, :system,
                s(:ivar, :@git),
                s(:str, "add"),
                s(:lvar, :gemspec)),
              s(:send, nil, :system,
                s(:ivar, :@git),
                s(:str, "commit"),
                s(:str, "-a"),
                s(:str, "-m"),
                s(:str, "a non-empty commit message"),
                s(:str, "--quiet")),
              s(:lvasgn, :head,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Util), :popen,
                    s(:str, "git"),
                    s(:str, "rev-parse"),
                    s(:str, "master")), :strip)))),
          s(:return,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :git_spec), :version),
            s(:lvar, :directory),
            s(:lvar, :head)))),
      s(:def, :have_git?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :in_path?,
              s(:ivar, :@git)),
            s(:return), nil),
          s(:send, nil, :skip,
            s(:str, "cannot find git executable, use GIT environment variable to set")))),
      s(:def, :in_path?,
        s(:args,
          s(:arg, :executable)),
        s(:begin,
          s(:if,
            s(:and,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "\\A([A-Z]:|/)"),
                  s(:regopt)),
                s(:lvar, :executable)),
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :executable))),
            s(:return,
              s(:true)), nil),
          s(:block,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:str, "PATH")), :split,
                s(:const,
                  s(:const, nil, :File), :PATH_SEPARATOR)), :any?),
            s(:args,
              s(:arg, :directory)),
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :directory),
                s(:lvar, :executable)))))),
      s(:def, :install_gem,
        s(:args,
          s(:arg, :spec),
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/installer")),
          s(:lvasgn, :gem,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gems"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :full_name)),
                s(:str, ".gem")))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem)), nil,
            s(:begin,
              s(:block,
                s(:send, nil, :use_ui,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :MockGemUi), :new)),
                s(:args),
                s(:block,
                  s(:send,
                    s(:const, nil, :Dir), :chdir,
                    s(:ivar, :@tempdir)),
                  s(:args),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Package), :build,
                    s(:lvar, :spec)))),
              s(:lvasgn, :gem,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:ivar, :@tempdir),
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:send,
                        s(:lvar, :spec), :cache_file))), :untaint)))),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Installer), :at,
              s(:lvar, :gem),
              s(:send,
                s(:lvar, :options), :merge,
                s(:hash,
                  s(:pair,
                    s(:sym, :wrappers),
                    s(:true))))), :install))),
      s(:def, :install_gem_user,
        s(:args,
          s(:arg, :spec)),
        s(:send, nil, :install_gem,
          s(:lvar, :spec),
          s(:hash,
            s(:pair,
              s(:sym, :user_install),
              s(:true))))),
      s(:def, :uninstall_gem,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/uninstaller")),
          s(:send,
            s(:send,
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:const,
                    s(:const, nil, :Gem), :Uninstaller)),
                s(:args),
                s(:def, :ask_if_ok,
                  s(:args,
                    s(:arg, :spec)),
                  s(:true))), :new,
              s(:send,
                s(:lvar, :spec), :name),
              s(:hash,
                s(:pair,
                  s(:sym, :executables),
                  s(:true)),
                s(:pair,
                  s(:sym, :user_install),
                  s(:true)))), :uninstall))),
      s(:def, :create_tmpdir,
        s(:args),
        s(:begin,
          s(:lvasgn, :tmpdir,
            s(:nil)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:send,
                s(:const, nil, :Dir), :tmpdir)),
            s(:args),
            s(:lvasgn, :tmpdir,
              s(:send,
                s(:const, nil, :Dir), :pwd))),
          s(:lvasgn, :tmpdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :tmpdir),
              s(:dstr,
                s(:str, "test_rubygems_"),
                s(:begin,
                  s(:gvar, :$$))))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :tmpdir)),
          s(:return,
            s(:lvar, :tmpdir)))),
      s(:def, :mu_pp,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:lvasgn, :s,
            s(:send,
              s(:const, nil, :PP), :pp,
              s(:lvar, :obj),
              s(:lvar, :s))),
          s(:if,
            s(:defined?,
              s(:const, nil, :Encoding)),
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :s), :force_encoding,
                s(:send,
                  s(:const, nil, :Encoding), :default_external))), nil),
          s(:send,
            s(:lvar, :s), :chomp))),
      s(:def, :read_cache,
        s(:args,
          s(:arg, :path)),
        s(:block,
          s(:send, nil, :open,
            s(:send,
              s(:send,
                s(:lvar, :path), :dup), :untaint),
            s(:str, "rb")),
          s(:args,
            s(:arg, :io)),
          s(:send,
            s(:const, nil, :Marshal), :load,
            s(:send,
              s(:lvar, :io), :read)))),
      s(:def, :read_binary,
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:const, nil, :Gem), :read_binary,
          s(:lvar, :path))),
      s(:def, :write_file,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Pathname), :new,
                s(:lvar, :path)), :absolute?), nil,
            s(:lvasgn, :path,
              s(:send,
                s(:const, nil, :File), :join,
                s(:ivar, :@gemhome),
                s(:lvar, :path)))),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :path))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dir)),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :path),
              s(:str, "wb")),
            s(:args,
              s(:arg, :io)),
            s(:if,
              s(:send, nil, :block_given?),
              s(:yield,
                s(:lvar, :io)), nil)),
          s(:lvar, :path))),
      s(:def, :all_spec_names,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Specification), :map,
          s(:block_pass,
            s(:sym, :full_name)))),
      s(:def, :quick_gem,
        s(:args,
          s(:arg, :name),
          s(:optarg, :version,
            s(:str, "2"))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/specification")),
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:lvar, :name)),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:lvar, :version)),
                s(:send,
                  s(:lvar, :s), :author=,
                  s(:str, "A User")),
                s(:send,
                  s(:lvar, :s), :email=,
                  s(:str, "example@example.com")),
                s(:send,
                  s(:lvar, :s), :homepage=,
                  s(:str, "http://example.com")),
                s(:send,
                  s(:lvar, :s), :summary=,
                  s(:str, "this is a summary")),
                s(:send,
                  s(:lvar, :s), :description=,
                  s(:str, "This is a test description")),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :s)), nil)))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :map),
          s(:lvasgn, :written_path,
            s(:block,
              s(:send, nil, :write_file,
                s(:send,
                  s(:lvar, :spec), :spec_file)),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:send,
                  s(:lvar, :spec), :to_ruby_for_cache)))),
          s(:send,
            s(:lvar, :spec), :loaded_from=,
            s(:send,
              s(:lvar, :spec), :loaded_from=,
              s(:lvar, :written_path))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:return,
            s(:lvar, :spec)))),
      s(:def, :quick_spec,
        s(:args,
          s(:arg, :name),
          s(:optarg, :version,
            s(:str, "2"))),
        s(:send, nil, :util_spec,
          s(:lvar, :name),
          s(:lvar, :version))),
      s(:def, :util_build_gem,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:lvar, :spec), :gem_dir)),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :dir)),
          s(:block,
            s(:send,
              s(:const, nil, :Dir), :chdir,
              s(:lvar, :dir)),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :files), :each),
                s(:args,
                  s(:arg, :file)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :file)),
                    s(:next), nil),
                  s(:send,
                    s(:const, nil, :FileUtils), :mkdir_p,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :file))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :File), :open,
                      s(:lvar, :file),
                      s(:str, "w")),
                    s(:args,
                      s(:arg, :fp)),
                    s(:send,
                      s(:lvar, :fp), :puts,
                      s(:dstr,
                        s(:str, "# "),
                        s(:begin,
                          s(:lvar, :file))))))),
              s(:block,
                s(:send, nil, :use_ui,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :MockGemUi), :new)),
                s(:args),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :build,
                  s(:lvar, :spec))),
              s(:lvasgn, :cache,
                s(:send,
                  s(:lvar, :spec), :cache_file)),
              s(:send,
                s(:const, nil, :FileUtils), :mv,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :cache)),
                s(:lvar, :cache)))))),
      s(:def, :util_remove_gem,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:lvar, :spec), :cache_file)),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:lvar, :spec), :spec_file)))),
      s(:def, :util_clear_gems,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "specifications"))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset))),
      s(:def, :install_specs,
        s(:args,
          s(:restarg, :specs)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Installer), :for_spec,
                s(:lvar, :spec)), :install)),
          s(:send,
            s(:const, nil, :Gem), :searcher=,
            s(:nil)))),
      s(:def, :install_default_gems,
        s(:args,
          s(:restarg, :specs)),
        s(:begin,
          s(:send, nil, :install_default_specs,
            s(:splat,
              s(:lvar, :specs))),
          s(:block,
            s(:send,
              s(:lvar, :specs), :each),
            s(:args,
              s(:arg, :spec)),
            s(:block,
              s(:send, nil, :open,
                s(:send,
                  s(:lvar, :spec), :loaded_from),
                s(:str, "w")),
              s(:args,
                s(:arg, :io)),
              s(:send,
                s(:lvar, :io), :write,
                s(:send,
                  s(:lvar, :spec), :to_ruby_for_cache)))))),
      s(:def, :install_default_specs,
        s(:args,
          s(:restarg, :specs)),
        s(:block,
          s(:send,
            s(:lvar, :specs), :each),
          s(:args,
            s(:arg, :spec)),
          s(:begin,
            s(:lvasgn, :installer,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Installer), :for_spec,
                s(:lvar, :spec),
                s(:hash,
                  s(:pair,
                    s(:sym, :install_as_default),
                    s(:true))))),
            s(:send,
              s(:lvar, :installer), :install),
            s(:send,
              s(:const, nil, :Gem), :register_default_spec,
              s(:lvar, :spec))))),
      s(:def, :loaded_spec_names,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :loaded_specs), :values), :map,
            s(:block_pass,
              s(:sym, :full_name))), :sort)),
      s(:def, :unresolved_names,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :unresolved_deps), :values), :map,
            s(:block_pass,
              s(:sym, :to_s))), :sort)),
      s(:def, :save_loaded_features,
        s(:args),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :old_loaded_features,
              s(:send,
                s(:gvar, :$LOADED_FEATURES), :dup)),
            s(:yield)),
          s(:send,
            s(:gvar, :$LOADED_FEATURES), :replace,
            s(:lvar, :old_loaded_features)))),
      s(:def, :new_spec,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :deps,
            s(:nil)),
          s(:restarg, :files)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/specification")),
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:lvar, :name)),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:lvar, :version)),
                s(:send,
                  s(:lvar, :s), :author=,
                  s(:str, "A User")),
                s(:send,
                  s(:lvar, :s), :email=,
                  s(:str, "example@example.com")),
                s(:send,
                  s(:lvar, :s), :homepage=,
                  s(:str, "http://example.com")),
                s(:send,
                  s(:lvar, :s), :summary=,
                  s(:str, "this is a summary")),
                s(:send,
                  s(:lvar, :s), :description=,
                  s(:str, "This is a test description")),
                s(:block,
                  s(:send,
                    s(:send, nil, :Array,
                      s(:lvar, :deps)), :each),
                  s(:args,
                    s(:arg, :n),
                    s(:arg, :req)),
                  s(:send,
                    s(:lvar, :s), :add_dependency,
                    s(:lvar, :n),
                    s(:begin,
                      s(:or,
                        s(:lvar, :req),
                        s(:str, ">= 0"))))),
                s(:if,
                  s(:send,
                    s(:lvar, :files), :empty?), nil,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :files), :push,
                    s(:splat,
                      s(:lvar, :files)))),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :s)), nil)))),
          s(:send,
            s(:lvar, :spec), :loaded_from=,
            s(:send,
              s(:lvar, :spec), :spec_file)),
          s(:if,
            s(:send,
              s(:lvar, :files), :empty?), nil,
            s(:begin,
              s(:block,
                s(:send, nil, :write_file,
                  s(:send,
                    s(:lvar, :spec), :spec_file)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:send,
                    s(:lvar, :spec), :to_ruby_for_cache))),
              s(:send, nil, :util_build_gem,
                s(:lvar, :spec)),
              s(:lvasgn, :cache_file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@tempdir),
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name)),
                    s(:str, ".gem")))),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :cache_file))),
              s(:send,
                s(:const, nil, :FileUtils), :mv,
                s(:send,
                  s(:lvar, :spec), :cache_file),
                s(:lvar, :cache_file)),
              s(:send,
                s(:const, nil, :FileUtils), :rm,
                s(:send,
                  s(:lvar, :spec), :spec_file)))),
          s(:lvar, :spec))),
      s(:def, :new_default_spec,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :deps,
            s(:nil)),
          s(:restarg, :files)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :util_spec,
              s(:lvar, :name),
              s(:lvar, :version),
              s(:lvar, :deps))),
          s(:send,
            s(:lvar, :spec), :loaded_from=,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@default_spec_dir),
              s(:send,
                s(:lvar, :spec), :spec_name))),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:lvar, :files)),
          s(:lvasgn, :lib_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "default_gems"),
              s(:str, "lib"))),
          s(:send,
            s(:gvar, :$LOAD_PATH), :unshift,
            s(:lvar, :lib_dir)),
          s(:block,
            s(:send,
              s(:lvar, :files), :each),
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:lvasgn, :rb_path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :lib_dir),
                  s(:lvar, :file))),
              s(:send,
                s(:const, nil, :FileUtils), :mkdir_p,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :rb_path))),
              s(:block,
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:lvar, :rb_path),
                  s(:str, "w")),
                s(:args,
                  s(:arg, :rb)),
                s(:send,
                  s(:lvar, :rb), :<<,
                  s(:dstr,
                    s(:str, "# "),
                    s(:begin,
                      s(:lvar, :file))))))),
          s(:lvar, :spec))),
      s(:def, :util_spec,
        s(:args,
          s(:arg, :name),
          s(:optarg, :version,
            s(:int, 2)),
          s(:optarg, :deps,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :deps),
              s(:send, nil, :block_given?)),
            s(:send, nil, :raise,
              s(:str, "deps or block, not both")), nil),
          s(:lvasgn, :spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:send,
                  s(:lvar, :s), :name=,
                  s(:lvar, :name)),
                s(:send,
                  s(:lvar, :s), :version=,
                  s(:lvar, :version)),
                s(:send,
                  s(:lvar, :s), :author=,
                  s(:str, "A User")),
                s(:send,
                  s(:lvar, :s), :email=,
                  s(:str, "example@example.com")),
                s(:send,
                  s(:lvar, :s), :homepage=,
                  s(:str, "http://example.com")),
                s(:send,
                  s(:lvar, :s), :summary=,
                  s(:str, "this is a summary")),
                s(:send,
                  s(:lvar, :s), :description=,
                  s(:str, "This is a test description")),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :s)), nil)))),
          s(:if,
            s(:lvar, :deps),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :deps), :keys), :sort), :each),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:lvar, :spec), :add_dependency,
                s(:lvar, :n),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :deps), :[],
                      s(:lvar, :n)),
                    s(:str, ">= 0"))))), nil),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:return,
            s(:lvar, :spec)))),
      s(:def, :util_gem,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :deps,
            s(:nil)),
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :deps),
              s(:lvar, :block)),
            s(:send, nil, :raise,
              s(:str, "deps or block, not both")), nil),
          s(:if,
            s(:lvar, :deps),
            s(:lvasgn, :block,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :s)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :deps), :keys), :sort), :each),
                  s(:args,
                    s(:arg, :n)),
                  s(:send,
                    s(:lvar, :s), :add_dependency,
                    s(:lvar, :n),
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :deps), :[],
                          s(:lvar, :n)),
                        s(:str, ">= 0"))))))), nil),
          s(:lvasgn, :spec,
            s(:send, nil, :quick_gem,
              s(:lvar, :name),
              s(:lvar, :version),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:send, nil, :util_build_gem,
            s(:lvar, :spec)),
          s(:lvasgn, :cache_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@tempdir),
              s(:str, "gems"),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :original_name)),
                s(:str, ".gem")))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :cache_file))),
          s(:send,
            s(:const, nil, :FileUtils), :mv,
            s(:send,
              s(:lvar, :spec), :cache_file),
            s(:lvar, :cache_file)),
          s(:send,
            s(:const, nil, :FileUtils), :rm,
            s(:send,
              s(:lvar, :spec), :spec_file)),
          s(:send,
            s(:lvar, :spec), :loaded_from=,
            s(:nil)),
          s(:array,
            s(:lvar, :spec),
            s(:lvar, :cache_file)))),
      s(:def, :util_gzip,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:lvasgn, :out,
            s(:send,
              s(:const, nil, :StringIO), :new)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Zlib), :GzipWriter), :wrap,
              s(:lvar, :out)),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:lvar, :data))),
          s(:send,
            s(:lvar, :out), :string))),
      s(:def, :util_make_gems,
        s(:args,
          s(:optarg, :prerelease,
            s(:false))),
        s(:begin,
          s(:ivasgn, :@a1,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:str, "a"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb"))),
                s(:send,
                  s(:lvar, :s), :require_paths=,
                  s(:array,
                    s(:str, "lib"))),
                s(:send,
                  s(:lvar, :s), :date=,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Specification), :TODAY), :-,
                    s(:int, 86400))),
                s(:send,
                  s(:lvar, :s), :homepage=,
                  s(:str, "http://a.example.com")),
                s(:send,
                  s(:lvar, :s), :email=,
                  s(:array,
                    s(:str, "example@example.com"),
                    s(:str, "example2@example.com"))),
                s(:send,
                  s(:lvar, :s), :authors=,
                  s(:array,
                    s(:str, "Example"),
                    s(:str, "Example2"))),
                s(:send,
                  s(:lvar, :s), :description=,
                  s(:dstr,
                    s(:str, "This line is really, really long.  So long, in fact, that it is more than eighty characters long!  The purpose of this line is for testing wrapping behavior because sometimes people don't wrap their text to eighty characters.  Without the wrapping, the text might not look good in the RSS feed.\n"),
                    s(:str, "\n"),
                    s(:str, "Also, a list:\n"),
                    s(:str, "  * An entry that's actually kind of sort\n"),
                    s(:str, "  * an entry that's really long, which will probably get wrapped funny.  That's ok, somebody wasn't thinking straight when they made it more than eighty characters.\n")))))),
          s(:lvasgn, :init,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb"))),
                s(:send,
                  s(:lvar, :s), :require_paths=,
                  s(:array,
                    s(:str, "lib")))))),
          s(:ivasgn, :@a2,
            s(:send, nil, :quick_gem,
              s(:str, "a"),
              s(:str, "2"),
              s(:block_pass,
                s(:lvar, :init)))),
          s(:ivasgn, :@a3a,
            s(:send, nil, :quick_gem,
              s(:str, "a"),
              s(:str, "3.a"),
              s(:block_pass,
                s(:lvar, :init)))),
          s(:ivasgn, :@a_evil9,
            s(:send, nil, :quick_gem,
              s(:str, "a_evil"),
              s(:str, "9"),
              s(:block_pass,
                s(:lvar, :init)))),
          s(:ivasgn, :@b2,
            s(:send, nil, :quick_gem,
              s(:str, "b"),
              s(:str, "2"),
              s(:block_pass,
                s(:lvar, :init)))),
          s(:ivasgn, :@c1_2,
            s(:send, nil, :quick_gem,
              s(:str, "c"),
              s(:str, "1.2"),
              s(:block_pass,
                s(:lvar, :init)))),
          s(:ivasgn, :@x,
            s(:send, nil, :quick_gem,
              s(:str, "x"),
              s(:str, "1"),
              s(:block_pass,
                s(:lvar, :init)))),
          s(:ivasgn, :@dep_x,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:str, "dep_x"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb"))),
                s(:send,
                  s(:lvar, :s), :require_paths=,
                  s(:array,
                    s(:str, "lib"))),
                s(:send,
                  s(:lvar, :s), :add_dependency,
                  s(:str, "x"),
                  s(:str, ">= 1"))))),
          s(:ivasgn, :@pl1,
            s(:block,
              s(:send, nil, :quick_gem,
                s(:str, "pl"),
                s(:str, "1")),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:send,
                  s(:lvar, :s), :files=,
                  s(:array,
                    s(:str, "lib/code.rb"))),
                s(:send,
                  s(:lvar, :s), :require_paths=,
                  s(:array,
                    s(:str, "lib"))),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:str, "i386-linux"))),
                s(:send,
                  s(:lvar, :s), :instance_variable_set,
                  s(:sym, :@original_platform),
                  s(:str, "i386-linux"))))),
          s(:if,
            s(:lvar, :prerelease),
            s(:begin,
              s(:ivasgn, :@a2_pre,
                s(:send, nil, :quick_gem,
                  s(:str, "a"),
                  s(:str, "2.a"),
                  s(:block_pass,
                    s(:lvar, :init)))),
              s(:send, nil, :write_file,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:splat,
                    s(:array,
                      s(:str, "gems"),
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:ivar, :@a2_pre), :original_name))),
                      s(:str, "lib"),
                      s(:str, "code.rb"))))),
              s(:send, nil, :util_build_gem,
                s(:ivar, :@a2_pre))), nil),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@a1), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@a2), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@a3a), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@a_evil9), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@b2), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@c1_2), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@pl1), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@x), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:send, nil, :write_file,
            s(:send,
              s(:const, nil, :File), :join,
              s(:splat,
                s(:array,
                  s(:str, "gems"),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@dep_x), :original_name))),
                  s(:str, "lib"),
                  s(:str, "code.rb"))))),
          s(:block,
            s(:send,
              s(:array,
                s(:ivar, :@a1),
                s(:ivar, :@a2),
                s(:ivar, :@a3a),
                s(:ivar, :@a_evil9),
                s(:ivar, :@b2),
                s(:ivar, :@c1_2),
                s(:ivar, :@pl1),
                s(:ivar, :@x),
                s(:ivar, :@dep_x)), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send, nil, :util_build_gem,
              s(:lvar, :spec))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_r,
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@gemhome),
              s(:str, "gems"),
              s(:send,
                s(:ivar, :@pl1), :original_name))))),
      s(:def, :util_set_arch,
        s(:args,
          s(:arg, :arch)),
        s(:begin,
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "arch"),
            s(:lvar, :arch)),
          s(:lvasgn, :platform,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:lvar, :arch))),
          s(:send,
            s(:const, nil, :Gem), :instance_variable_set,
            s(:sym, :@platforms),
            s(:nil)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Platform), :instance_variable_set,
            s(:sym, :@local),
            s(:nil)),
          s(:lvar, :platform))),
      s(:def, :util_setup_fake_fetcher,
        s(:args,
          s(:optarg, :prerelease,
            s(:false))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "zlib")),
          s(:send, nil, :require,
            s(:str, "socket")),
          s(:send, nil, :require,
            s(:str, "rubygems/remote_fetcher")),
          s(:ivasgn, :@fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :FakeFetcher), :new)),
          s(:send, nil, :util_make_gems,
            s(:lvar, :prerelease)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:ivasgn, :@all_gems,
            s(:send,
              s(:array,
                s(:ivar, :@a1),
                s(:ivar, :@a2),
                s(:ivar, :@a3a),
                s(:ivar, :@a_evil9),
                s(:ivar, :@b2),
                s(:ivar, :@c1_2)), :sort)),
          s(:ivasgn, :@all_gem_names,
            s(:block,
              s(:send,
                s(:ivar, :@all_gems), :map),
              s(:args,
                s(:arg, :gem)),
              s(:send,
                s(:lvar, :gem), :full_name))),
          s(:lvasgn, :gem_names,
            s(:array,
              s(:send,
                s(:ivar, :@a1), :full_name),
              s(:send,
                s(:ivar, :@a2), :full_name),
              s(:send,
                s(:ivar, :@a3a), :full_name),
              s(:send,
                s(:ivar, :@b2), :full_name))),
          s(:ivasgn, :@gem_names,
            s(:send,
              s(:send,
                s(:lvar, :gem_names), :sort), :join,
              s(:str, "\n"))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
            s(:ivar, :@fetcher)))),
      s(:def, :add_to_fetcher,
        s(:args,
          s(:arg, :spec),
          s(:optarg, :path,
            s(:nil)),
          s(:optarg, :repo,
            s(:ivar, :@gem_repo))),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :path),
            s(:send,
              s(:lvar, :spec), :cache_file)),
          s(:send,
            s(:send,
              s(:ivar, :@fetcher), :data), :[]=,
            s(:dstr,
              s(:begin,
                s(:ivar, :@gem_repo)),
              s(:str, "gems/"),
              s(:begin,
                s(:send,
                  s(:lvar, :spec), :file_name))),
            s(:send, nil, :read_binary,
              s(:lvar, :path))))),
      s(:def, :util_setup_spec_fetcher,
        s(:args,
          s(:restarg, :specs)),
        s(:begin,
          s(:lvasgn, :all_specs,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :to_a), :+,
              s(:lvar, :specs))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :_resort!,
            s(:lvar, :all_specs)),
          s(:lvasgn, :spec_fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :fetcher)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :prerelease),
              s(:lvasgn, :all)),
            s(:block,
              s(:send,
                s(:lvar, :all_specs), :partition),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :version), :prerelease?))),
          s(:lvasgn, :latest,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :_latest_specs,
              s(:lvar, :all_specs))),
          s(:send,
            s(:send,
              s(:lvar, :spec_fetcher), :specs), :[]=,
            s(:ivar, :@uri),
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :all), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :spec_fetcher), :specs), :[],
                s(:ivar, :@uri)), :<<,
              s(:send,
                s(:lvar, :spec), :name_tuple))),
          s(:send,
            s(:send,
              s(:lvar, :spec_fetcher), :latest_specs), :[]=,
            s(:ivar, :@uri),
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :latest), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :spec_fetcher), :latest_specs), :[],
                s(:ivar, :@uri)), :<<,
              s(:send,
                s(:lvar, :spec), :name_tuple))),
          s(:send,
            s(:send,
              s(:lvar, :spec_fetcher), :prerelease_specs), :[]=,
            s(:ivar, :@uri),
            s(:array)),
          s(:block,
            s(:send,
              s(:lvar, :prerelease), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :spec_fetcher), :prerelease_specs), :[],
                s(:ivar, :@uri)), :<<,
              s(:send,
                s(:lvar, :spec), :name_tuple))),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :===,
              s(:ivar, :@fetcher)), nil,
            s(:begin,
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:lvasgn, :specs,
                s(:block,
                  s(:send,
                    s(:lvar, :all), :map),
                  s(:args,
                    s(:arg, :spec)),
                  s(:send,
                    s(:lvar, :spec), :name_tuple))),
              s(:lvasgn, :s_zip,
                s(:send, nil, :util_gzip,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :NameTuple), :to_basic,
                      s(:lvar, :specs))))),
              s(:lvasgn, :latest_specs,
                s(:block,
                  s(:send,
                    s(:lvar, :latest), :map),
                  s(:args,
                    s(:arg, :spec)),
                  s(:send,
                    s(:lvar, :spec), :name_tuple))),
              s(:lvasgn, :l_zip,
                s(:send, nil, :util_gzip,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :NameTuple), :to_basic,
                      s(:lvar, :latest_specs))))),
              s(:lvasgn, :prerelease_specs,
                s(:block,
                  s(:send,
                    s(:lvar, :prerelease), :map),
                  s(:args,
                    s(:arg, :spec)),
                  s(:send,
                    s(:lvar, :spec), :name_tuple))),
              s(:lvasgn, :p_zip,
                s(:send, nil, :util_gzip,
                  s(:send,
                    s(:const, nil, :Marshal), :dump,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :NameTuple), :to_basic,
                      s(:lvar, :prerelease_specs))))),
              s(:send,
                s(:send,
                  s(:ivar, :@fetcher), :data), :[]=,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@gem_repo)),
                  s(:str, "specs."),
                  s(:begin,
                    s(:lvar, :v)),
                  s(:str, ".gz")),
                s(:lvar, :s_zip)),
              s(:send,
                s(:send,
                  s(:ivar, :@fetcher), :data), :[]=,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@gem_repo)),
                  s(:str, "latest_specs."),
                  s(:begin,
                    s(:lvar, :v)),
                  s(:str, ".gz")),
                s(:lvar, :l_zip)),
              s(:send,
                s(:send,
                  s(:ivar, :@fetcher), :data), :[]=,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@gem_repo)),
                  s(:str, "prerelease_specs."),
                  s(:begin,
                    s(:lvar, :v)),
                  s(:str, ".gz")),
                s(:lvar, :p_zip)),
              s(:lvasgn, :v,
                s(:send,
                  s(:const, nil, :Gem), :marshal_version)),
              s(:block,
                s(:send,
                  s(:lvar, :all_specs), :each),
                s(:args,
                  s(:arg, :spec)),
                s(:begin,
                  s(:lvasgn, :path,
                    s(:dstr,
                      s(:begin,
                        s(:ivar, :@gem_repo)),
                      s(:str, "quick/Marshal."),
                      s(:begin,
                        s(:lvar, :v)),
                      s(:str, "/"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :spec), :original_name)),
                      s(:str, ".gemspec.rz"))),
                  s(:lvasgn, :data,
                    s(:send,
                      s(:const, nil, :Marshal), :dump,
                      s(:lvar, :spec))),
                  s(:lvasgn, :data_deflate,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :Deflate), :deflate,
                      s(:lvar, :data))),
                  s(:send,
                    s(:send,
                      s(:ivar, :@fetcher), :data), :[]=,
                    s(:lvar, :path),
                    s(:lvar, :data_deflate)))))),
          s(:nil))),
      s(:def, :util_zip,
        s(:args,
          s(:arg, :data)),
        s(:send,
          s(:const,
            s(:const, nil, :Zlib), :Deflate), :deflate,
          s(:lvar, :data))),
      s(:def, :util_set_RUBY_VERSION,
        s(:args,
          s(:arg, :version),
          s(:optarg, :patchlevel,
            s(:nil)),
          s(:optarg, :revision,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :instance_variables), :include?,
                s(:sym, :@ruby_version)),
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :instance_variables), :include?,
                s(:str, "@ruby_version"))),
            s(:send,
              s(:const, nil, :Gem), :send,
              s(:sym, :remove_instance_variable),
              s(:sym, :@ruby_version)), nil),
          s(:ivasgn, :@RUBY_VERSION,
            s(:const, nil, :RUBY_VERSION)),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_PATCHLEVEL)),
            s(:ivasgn, :@RUBY_PATCHLEVEL,
              s(:const, nil, :RUBY_PATCHLEVEL)), nil),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_REVISION)),
            s(:ivasgn, :@RUBY_REVISION,
              s(:const, nil, :RUBY_REVISION)), nil),
          s(:send,
            s(:const, nil, :Object), :send,
            s(:sym, :remove_const),
            s(:sym, :RUBY_VERSION)),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_PATCHLEVEL)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_PATCHLEVEL)), nil),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_REVISION)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_REVISION)), nil),
          s(:send,
            s(:const, nil, :Object), :const_set,
            s(:sym, :RUBY_VERSION),
            s(:lvar, :version)),
          s(:if,
            s(:lvar, :patchlevel),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :RUBY_PATCHLEVEL),
              s(:lvar, :patchlevel)), nil),
          s(:if,
            s(:lvar, :revision),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :RUBY_REVISION),
              s(:lvar, :revision)), nil))),
      s(:def, :util_restore_RUBY_VERSION,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Object), :send,
            s(:sym, :remove_const),
            s(:sym, :RUBY_VERSION)),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_PATCHLEVEL)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_PATCHLEVEL)), nil),
          s(:if,
            s(:defined?,
              s(:const, nil, :RUBY_REVISION)),
            s(:send,
              s(:const, nil, :Object), :send,
              s(:sym, :remove_const),
              s(:sym, :RUBY_REVISION)), nil),
          s(:send,
            s(:const, nil, :Object), :const_set,
            s(:sym, :RUBY_VERSION),
            s(:ivar, :@RUBY_VERSION)),
          s(:if,
            s(:defined?,
              s(:ivar, :@RUBY_PATCHLEVEL)),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :RUBY_PATCHLEVEL),
              s(:ivar, :@RUBY_PATCHLEVEL)), nil),
          s(:if,
            s(:defined?,
              s(:ivar, :@RUBY_REVISION)),
            s(:send,
              s(:const, nil, :Object), :const_set,
              s(:sym, :RUBY_REVISION),
              s(:ivar, :@RUBY_REVISION)), nil))),
      s(:defs,
        s(:self), :win_platform?,
        s(:args),
        s(:send,
          s(:const, nil, :Gem), :win_platform?)),
      s(:def, :win_platform?,
        s(:args),
        s(:send,
          s(:const, nil, :Gem), :win_platform?)),
      s(:defs,
        s(:self), :vc_windows?,
        s(:args),
        s(:send,
          s(:const, nil, :RUBY_PLATFORM), :match,
          s(:str, "mswin"))),
      s(:def, :vc_windows?,
        s(:args),
        s(:send,
          s(:const, nil, :RUBY_PLATFORM), :match,
          s(:str, "mswin"))),
      s(:defs,
        s(:self), :make_command,
        s(:args),
        s(:or,
          s(:or,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "make")),
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "MAKE"))),
          s(:begin,
            s(:if,
              s(:send, nil, :vc_windows?),
              s(:str, "nmake"),
              s(:str, "make"))))),
      s(:def, :make_command,
        s(:args),
        s(:or,
          s(:or,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "make")),
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "MAKE"))),
          s(:begin,
            s(:if,
              s(:send, nil, :vc_windows?),
              s(:str, "nmake"),
              s(:str, "make"))))),
      s(:def, :nmake_found?,
        s(:args),
        s(:send, nil, :system,
          s(:str, "nmake /? 1>NUL 2>&1"))),
      s(:def, :wait_for_child_process_to_exit,
        s(:args),
        s(:rescue,
          s(:if,
            s(:send,
              s(:const, nil, :Process), :respond_to?,
              s(:sym, :fork)),
            s(:send,
              s(:const, nil, :Process), :wait), nil),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :ECHILD)), nil, nil), nil)),
      s(:defs,
        s(:self), :process_based_port,
        s(:args),
        s(:or_asgn,
          s(:cvasgn, :@@process_based_port),
          s(:send,
            s(:int, 8000), :+,
            s(:send,
              s(:gvar, :$$), :%,
              s(:int, 1000))))),
      s(:def, :process_based_port,
        s(:args),
        s(:send,
          s(:send,
            s(:self), :class), :process_based_port)),
      s(:def, :build_rake_in,
        s(:args,
          s(:optarg, :good,
            s(:true))),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :gem_ruby,
              s(:send,
                s(:const, nil, :Gem), :ruby)),
            s(:send,
              s(:const, nil, :Gem), :ruby=,
              s(:cvar, :@@ruby)),
            s(:lvasgn, :env_rake,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "rake"))),
            s(:lvasgn, :rake,
              s(:begin,
                s(:if,
                  s(:lvar, :good),
                  s(:cvar, :@@good_rake),
                  s(:cvar, :@@bad_rake)))),
            s(:send,
              s(:const, nil, :ENV), :[]=,
              s(:str, "rake"),
              s(:lvar, :rake)),
            s(:yield,
              s(:lvar, :rake))),
          s(:begin,
            s(:send,
              s(:const, nil, :Gem), :ruby=,
              s(:lvar, :gem_ruby)),
            s(:if,
              s(:lvar, :env_rake),
              s(:send,
                s(:const, nil, :ENV), :[]=,
                s(:str, "rake"),
                s(:lvar, :env_rake)),
              s(:send,
                s(:const, nil, :ENV), :delete,
                s(:str, "rake")))))),
      s(:defs,
        s(:self), :rubybin,
        s(:args),
        s(:begin,
          s(:lvasgn, :ruby,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "RUBY"))),
          s(:if,
            s(:lvar, :ruby),
            s(:return,
              s(:lvar, :ruby)), nil),
          s(:lvasgn, :ruby,
            s(:str, "ruby")),
          s(:lvasgn, :rubyexe,
            s(:dstr,
              s(:begin,
                s(:lvar, :ruby)),
              s(:str, ".exe"))),
          s(:block,
            s(:send,
              s(:int, 3), :times),
            s(:args),
            s(:begin,
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:const, nil, :File), :exist?,
                      s(:lvar, :ruby)),
                    s(:send,
                      s(:const, nil, :File), :executable?,
                      s(:lvar, :ruby))),
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :directory?,
                      s(:lvar, :ruby)), :!)),
                s(:return,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :ruby))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :rubyexe)),
                  s(:send,
                    s(:const, nil, :File), :executable?,
                    s(:lvar, :rubyexe))),
                s(:return,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:lvar, :rubyexe))), nil),
              s(:lvasgn, :ruby,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:str, ".."),
                  s(:lvar, :ruby))))),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "rbconfig")),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "bindir")),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "ruby_install_name")), :+,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "EXEEXT"))))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:str, "ruby")), nil)))),
      s(:cvasgn, :@@ruby,
        s(:send, nil, :rubybin)),
      s(:cvasgn, :@@good_rake,
        s(:dstr,
          s(:begin,
            s(:send, nil, :rubybin)),
          s(:str, " \""),
          s(:begin,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../../../test/rubygems/good_rake.rb"),
              s(:str, "(string)"))),
          s(:str, "\""))),
      s(:cvasgn, :@@bad_rake,
        s(:dstr,
          s(:begin,
            s(:send, nil, :rubybin)),
          s(:str, " \""),
          s(:begin,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:str, "../../../test/rubygems/bad_rake.rb"),
              s(:str, "(string)"))),
          s(:str, "\""))),
      s(:def, :dep,
        s(:args,
          s(:arg, :name),
          s(:restarg, :requirements)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Dependency), :new,
          s(:lvar, :name),
          s(:splat,
            s(:lvar, :requirements)))),
      s(:def, :dependency_request,
        s(:args,
          s(:arg, :dep),
          s(:arg, :from_name),
          s(:arg, :from_version),
          s(:optarg, :parent,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :remote,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Source), :new,
              s(:ivar, :@uri))),
          s(:if,
            s(:lvar, :parent), nil,
            s(:begin,
              s(:lvasgn, :parent_dep,
                s(:send, nil, :dep,
                  s(:lvar, :from_name),
                  s(:lvar, :from_version))),
              s(:lvasgn, :parent,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
                  s(:lvar, :parent_dep),
                  s(:nil))))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :IndexSpecification), :new,
              s(:nil),
              s(:lvar, :from_name),
              s(:lvar, :from_version),
              s(:lvar, :remote),
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY))),
          s(:lvasgn, :activation,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :ActivationRequest), :new,
              s(:lvar, :spec),
              s(:lvar, :parent))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :DependencyRequest), :new,
            s(:lvar, :dep),
            s(:lvar, :activation)))),
      s(:def, :req,
        s(:args,
          s(:restarg, :requirements)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :===,
              s(:send,
                s(:lvar, :requirements), :first)),
            s(:return,
              s(:send,
                s(:lvar, :requirements), :first)), nil),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Requirement), :create,
            s(:lvar, :requirements)))),
      s(:def, :spec,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:blockarg, :block)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Specification), :new,
          s(:lvar, :name),
          s(:send, nil, :v,
            s(:lvar, :version)),
          s(:block_pass,
            s(:lvar, :block)))),
      s(:def, :spec_fetcher,
        s(:args,
          s(:optarg, :repository,
            s(:ivar, :@gem_repo))),
        s(:block,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :TestCase), :SpecFetcherSetup), :declare,
            s(:self),
            s(:lvar, :repository)),
          s(:args,
            s(:arg, :spec_fetcher_setup)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:lvar, :spec_fetcher_setup)), nil))),
      s(:def, :v,
        s(:args,
          s(:arg, :string)),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Version), :create,
          s(:lvar, :string))),
      s(:def, :vendor_gem,
        s(:args,
          s(:optarg, :name,
            s(:str, "a")),
          s(:optarg, :version,
            s(:int, 1))),
        s(:begin,
          s(:lvasgn, :directory,
            s(:send,
              s(:const, nil, :File), :join,
              s(:str, "vendor"),
              s(:lvar, :name))),
          s(:send,
            s(:const, nil, :FileUtils), :mkdir_p,
            s(:lvar, :directory)),
          s(:send, nil, :save_gemspec,
            s(:lvar, :name),
            s(:lvar, :version),
            s(:lvar, :directory)))),
      s(:def, :save_gemspec,
        s(:args,
          s(:optarg, :name,
            s(:str, "a")),
          s(:optarg, :version,
            s(:int, 1)),
          s(:optarg, :directory,
            s(:str, "."))),
        s(:begin,
          s(:lvasgn, :vendor_spec,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :new,
                s(:lvar, :name),
                s(:lvar, :version)),
              s(:args,
                s(:arg, :specification)),
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:lvar, :specification)), nil))),
          s(:block,
            s(:send, nil, :open,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :directory),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, ".gemspec"))),
              s(:str, "w")),
            s(:args,
              s(:arg, :io)),
            s(:send,
              s(:lvar, :io), :write,
              s(:send,
                s(:lvar, :vendor_spec), :to_ruby))),
          s(:return,
            s(:lvar, :name),
            s(:send,
              s(:lvar, :vendor_spec), :version),
            s(:lvar, :directory)))),
      s(:class,
        s(:const, nil, :StaticSet),
        s(:const,
          s(:const,
            s(:const, nil, :Gem), :Resolver), :Set),
        s(:begin,
          s(:send, nil, :attr_accessor,
            s(:sym, :remote)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :specs)),
            s(:begin,
              s(:super),
              s(:ivasgn, :@specs,
                s(:lvar, :specs)),
              s(:ivasgn, :@remote,
                s(:true)))),
          s(:def, :add,
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:ivar, :@specs), :<<,
              s(:lvar, :spec))),
          s(:def, :find_spec,
            s(:args,
              s(:arg, :dep)),
            s(:block,
              s(:send,
                s(:ivar, :@specs), :reverse_each),
              s(:args,
                s(:arg, :s)),
              s(:if,
                s(:send,
                  s(:lvar, :dep), :matches_spec?,
                  s(:lvar, :s)),
                s(:return,
                  s(:lvar, :s)), nil))),
          s(:def, :find_all,
            s(:args,
              s(:arg, :dep)),
            s(:block,
              s(:send,
                s(:ivar, :@specs), :find_all),
              s(:args,
                s(:arg, :s)),
              s(:send,
                s(:lvar, :dep), :match?,
                s(:lvar, :s),
                s(:ivar, :@prerelease)))),
          s(:def, :load_spec,
            s(:args,
              s(:arg, :name),
              s(:arg, :ver),
              s(:arg, :platform),
              s(:arg, :source)),
            s(:begin,
              s(:lvasgn, :dep,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:lvar, :name),
                  s(:lvar, :ver))),
              s(:lvasgn, :spec,
                s(:send, nil, :find_spec,
                  s(:lvar, :dep))),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :new,
                  s(:send,
                    s(:lvar, :spec), :name),
                  s(:send,
                    s(:lvar, :spec), :version)),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :platform=,
                  s(:send,
                    s(:lvar, :spec), :platform))))),
          s(:def, :prefetch,
            s(:args,
              s(:arg, :reqs)), nil))),
      s(:defs,
        s(:self), :load_cert,
        s(:args,
          s(:arg, :cert_name)),
        s(:begin,
          s(:lvasgn, :cert_file,
            s(:send, nil, :cert_path,
              s(:lvar, :cert_name))),
          s(:lvasgn, :cert,
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :cert_file))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
            s(:lvar, :cert)))),
      s(:defs,
        s(:self), :cert_path,
        s(:args,
          s(:arg, :cert_name)),
        s(:begin,
          s(:if,
            s(:send,
              s(:int, 32), :==,
              s(:begin,
                s(:rescue,
                  s(:send,
                    s(:const, nil, :Time), :at,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 32))),
                  s(:resbody, nil, nil,
                    s(:int, 32)), nil))),
            s(:begin,
              s(:lvasgn, :cert_file,
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:dstr,
                    s(:str, "../../../test/rubygems/"),
                    s(:begin,
                      s(:lvar, :cert_name)),
                    s(:str, "_cert_32.pem")),
                  s(:str, "(string)"))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :exist?,
                  s(:lvar, :cert_file)),
                s(:return,
                  s(:lvar, :cert_file)), nil)), nil),
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:dstr,
              s(:str, "../../../test/rubygems/"),
              s(:begin,
                s(:lvar, :cert_name)),
              s(:str, "_cert.pem")),
            s(:str, "(string)")))),
      s(:defs,
        s(:self), :load_key,
        s(:args,
          s(:arg, :key_name),
          s(:optarg, :passphrase,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :key_file,
            s(:send, nil, :key_path,
              s(:lvar, :key_name))),
          s(:lvasgn, :key,
            s(:send,
              s(:const, nil, :File), :read,
              s(:lvar, :key_file))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
            s(:lvar, :key),
            s(:lvar, :passphrase)))),
      s(:defs,
        s(:self), :key_path,
        s(:args,
          s(:arg, :key_name)),
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:dstr,
            s(:str, "../../../test/rubygems/"),
            s(:begin,
              s(:lvar, :key_name)),
            s(:str, "_key.pem")),
          s(:str, "(string)"))),
      s(:casgn, nil, :PRIVATE_KEY_PASSPHRASE,
        s(:str, "Foo bar")),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :OpenSSL), :SSL)),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:casgn, nil, :PRIVATE_KEY,
                s(:send, nil, :load_key,
                  s(:str, "private"))),
              s(:casgn, nil, :PRIVATE_KEY_PATH,
                s(:send, nil, :key_path,
                  s(:str, "private"))),
              s(:casgn, nil, :ENCRYPTED_PRIVATE_KEY,
                s(:send, nil, :load_key,
                  s(:str, "encrypted_private"),
                  s(:const, nil, :PRIVATE_KEY_PASSPHRASE))),
              s(:casgn, nil, :ENCRYPTED_PRIVATE_KEY_PATH,
                s(:send, nil, :key_path,
                  s(:str, "encrypted_private"))),
              s(:casgn, nil, :PUBLIC_KEY,
                s(:send,
                  s(:const, nil, :PRIVATE_KEY), :public_key)),
              s(:casgn, nil, :PUBLIC_CERT,
                s(:send, nil, :load_cert,
                  s(:str, "public"))),
              s(:casgn, nil, :PUBLIC_CERT_PATH,
                s(:send, nil, :cert_path,
                  s(:str, "public")))),
            s(:resbody,
              s(:array,
                s(:const,
                  s(:const, nil, :Errno), :ENOENT)), nil,
              s(:begin,
                s(:casgn, nil, :PRIVATE_KEY,
                  s(:nil)),
                s(:casgn, nil, :PUBLIC_KEY,
                  s(:nil)),
                s(:casgn, nil, :PUBLIC_CERT,
                  s(:nil)))), nil)), nil))),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :gem,
        s(:str, "rake")),
      s(:resbody,
        s(:array,
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "rake/packagetask")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :gem,
          s(:str, "rdoc")),
        s(:send, nil, :require,
          s(:str, "rdoc"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError),
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:kwbegin,
    s(:rescue,
      s(:begin,
        s(:send, nil, :gem,
          s(:str, "builder")),
        s(:send, nil, :require,
          s(:str, "builder/xchar"))),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError),
          s(:const,
            s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
  s(:send, nil, :require,
    s(:str, "rubygems/test_utilities")),
  s(:lvasgn, :tmpdirs,
    s(:array)),
  s(:send,
    s(:lvar, :tmpdirs), :<<,
    s(:begin,
      s(:send,
        s(:const, nil, :ENV), :[]=,
        s(:str, "GEM_HOME"),
        s(:send,
          s(:const, nil, :Dir), :mktmpdir,
          s(:str, "home"))))),
  s(:send,
    s(:lvar, :tmpdirs), :<<,
    s(:begin,
      s(:send,
        s(:const, nil, :ENV), :[]=,
        s(:str, "GEM_PATH"),
        s(:send,
          s(:const, nil, :Dir), :mktmpdir,
          s(:str, "path"))))),
  s(:lvasgn, :pid,
    s(:gvar, :$$)),
  s(:postexe,
    s(:if,
      s(:send,
        s(:gvar, :$$), :==,
        s(:lvar, :pid)),
      s(:block,
        s(:send,
          s(:lvar, :tmpdirs), :each),
        s(:args,
          s(:arg, :dir)),
        s(:send,
          s(:const, nil, :Dir), :rmdir,
          s(:lvar, :dir))), nil)),
  s(:send,
    s(:const, nil, :Gem), :clear_paths))
