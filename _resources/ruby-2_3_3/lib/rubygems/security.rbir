s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/exceptions")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "openssl")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)),
        s(:lvasgn, :e),
        s(:if,
          s(:or,
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :e), :respond_to?,
                  s(:sym, :path)),
                s(:send,
                  s(:send,
                    s(:lvar, :e), :path), :==,
                  s(:str, "openssl")))),
            s(:send,
              s(:send,
                s(:lvar, :e), :message), :=~,
              s(:regexp,
                s(:str, " -- openssl$"),
                s(:regopt)))), nil,
          s(:send, nil, :raise))), nil)),
  s(:module,
    s(:const,
      s(:const, nil, :Gem), :Security),
    s(:begin,
      s(:class,
        s(:const, nil, :Exception),
        s(:const,
          s(:const, nil, :Gem), :Exception), nil),
      s(:casgn, nil, :DIGEST_ALGORITHM,
        s(:if,
          s(:defined?,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :Digest), :SHA1)),
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :Digest), :SHA1), nil)),
      s(:casgn, nil, :DIGEST_NAME,
        s(:if,
          s(:const, nil, :DIGEST_ALGORITHM),
          s(:send,
            s(:send,
              s(:const, nil, :DIGEST_ALGORITHM), :new), :name), nil)),
      s(:casgn, nil, :KEY_ALGORITHM,
        s(:if,
          s(:defined?,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :PKey), :RSA)),
          s(:const,
            s(:const,
              s(:const, nil, :OpenSSL), :PKey), :RSA), nil)),
      s(:casgn, nil, :KEY_LENGTH,
        s(:int, 2048)),
      s(:if,
        s(:defined?,
          s(:const,
            s(:const, nil, :OpenSSL), :Cipher)),
        s(:casgn, nil, :KEY_CIPHER,
          s(:send,
            s(:const,
              s(:const, nil, :OpenSSL), :Cipher), :new,
            s(:str, "AES-256-CBC"))), nil),
      s(:casgn, nil, :ONE_YEAR,
        s(:send,
          s(:int, 86400), :*,
          s(:int, 365))),
      s(:casgn, nil, :EXTENSIONS,
        s(:hash,
          s(:pair,
            s(:str, "basicConstraints"),
            s(:str, "CA:FALSE")),
          s(:pair,
            s(:str, "keyUsage"),
            s(:str, "keyEncipherment,dataEncipherment,digitalSignature")),
          s(:pair,
            s(:str, "subjectKeyIdentifier"),
            s(:str, "hash")))),
      s(:defs,
        s(:self), :alt_name_or_x509_entry,
        s(:args,
          s(:arg, :certificate),
          s(:arg, :x509_entry)),
        s(:begin,
          s(:lvasgn, :alt_name,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :certificate), :extensions), :find),
              s(:args,
                s(:arg, :extension)),
              s(:send,
                s(:send,
                  s(:lvar, :extension), :oid), :==,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :x509_entry)),
                  s(:str, "AltName"))))),
          s(:if,
            s(:lvar, :alt_name),
            s(:return,
              s(:send,
                s(:lvar, :alt_name), :value)), nil),
          s(:send,
            s(:lvar, :certificate), :send,
            s(:lvar, :x509_entry)))),
      s(:defs,
        s(:self), :create_cert,
        s(:args,
          s(:arg, :subject),
          s(:arg, :key),
          s(:optarg, :age,
            s(:const, nil, :ONE_YEAR)),
          s(:optarg, :extensions,
            s(:const, nil, :EXTENSIONS)),
          s(:optarg, :serial,
            s(:int, 1))),
        s(:begin,
          s(:lvasgn, :cert,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
          s(:send,
            s(:lvar, :cert), :public_key=,
            s(:send,
              s(:lvar, :key), :public_key)),
          s(:send,
            s(:lvar, :cert), :version=,
            s(:int, 2)),
          s(:send,
            s(:lvar, :cert), :serial=,
            s(:lvar, :serial)),
          s(:send,
            s(:lvar, :cert), :not_before=,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:send,
            s(:lvar, :cert), :not_after=,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :+,
              s(:lvar, :age))),
          s(:send,
            s(:lvar, :cert), :subject=,
            s(:lvar, :subject)),
          s(:lvasgn, :ef,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new,
              s(:nil),
              s(:lvar, :cert))),
          s(:send,
            s(:lvar, :cert), :extensions=,
            s(:block,
              s(:send,
                s(:lvar, :extensions), :map),
              s(:args,
                s(:arg, :ext_name),
                s(:arg, :value)),
              s(:send,
                s(:lvar, :ef), :create_extension,
                s(:lvar, :ext_name),
                s(:lvar, :value)))),
          s(:lvar, :cert))),
      s(:defs,
        s(:self), :create_cert_email,
        s(:args,
          s(:arg, :email),
          s(:arg, :key),
          s(:optarg, :age,
            s(:const, nil, :ONE_YEAR)),
          s(:optarg, :extensions,
            s(:const, nil, :EXTENSIONS))),
        s(:begin,
          s(:lvasgn, :subject,
            s(:send, nil, :email_to_name,
              s(:lvar, :email))),
          s(:lvasgn, :extensions,
            s(:send,
              s(:lvar, :extensions), :merge,
              s(:hash,
                s(:pair,
                  s(:str, "subjectAltName"),
                  s(:dstr,
                    s(:str, "email:"),
                    s(:begin,
                      s(:lvar, :email))))))),
          s(:send, nil, :create_cert_self_signed,
            s(:lvar, :subject),
            s(:lvar, :key),
            s(:lvar, :age),
            s(:lvar, :extensions)))),
      s(:defs,
        s(:self), :create_cert_self_signed,
        s(:args,
          s(:arg, :subject),
          s(:arg, :key),
          s(:optarg, :age,
            s(:const, nil, :ONE_YEAR)),
          s(:optarg, :extensions,
            s(:const, nil, :EXTENSIONS)),
          s(:optarg, :serial,
            s(:int, 1))),
        s(:begin,
          s(:lvasgn, :certificate,
            s(:send, nil, :create_cert,
              s(:lvar, :subject),
              s(:lvar, :key),
              s(:lvar, :age),
              s(:lvar, :extensions))),
          s(:send, nil, :sign,
            s(:lvar, :certificate),
            s(:lvar, :key),
            s(:lvar, :certificate),
            s(:lvar, :age),
            s(:lvar, :extensions),
            s(:lvar, :serial)))),
      s(:defs,
        s(:self), :create_key,
        s(:args,
          s(:optarg, :length,
            s(:const, nil, :KEY_LENGTH)),
          s(:optarg, :algorithm,
            s(:const, nil, :KEY_ALGORITHM))),
        s(:send,
          s(:lvar, :algorithm), :new,
          s(:lvar, :length))),
      s(:defs,
        s(:self), :email_to_name,
        s(:args,
          s(:arg, :email_address)),
        s(:begin,
          s(:lvasgn, :email_address,
            s(:send,
              s(:lvar, :email_address), :gsub,
              s(:regexp,
                s(:str, "[^\\w@.-]+"),
                s(:regopt, :i)),
              s(:str, "_"))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :cn),
              s(:lvasgn, :dcs)),
            s(:send,
              s(:lvar, :email_address), :split,
              s(:str, "@"))),
          s(:lvasgn, :dcs,
            s(:send,
              s(:lvar, :dcs), :split,
              s(:str, "."))),
          s(:lvasgn, :name,
            s(:dstr,
              s(:str, "CN="),
              s(:begin,
                s(:lvar, :cn)),
              s(:str, "/"),
              s(:begin,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :dcs), :map),
                    s(:args,
                      s(:arg, :dc)),
                    s(:dstr,
                      s(:str, "DC="),
                      s(:begin,
                        s(:lvar, :dc)))), :join,
                  s(:str, "/"))))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :OpenSSL), :X509), :Name), :parse,
            s(:lvar, :name)))),
      s(:defs,
        s(:self), :re_sign,
        s(:args,
          s(:arg, :expired_certificate),
          s(:arg, :private_key),
          s(:optarg, :age,
            s(:const, nil, :ONE_YEAR)),
          s(:optarg, :extensions,
            s(:const, nil, :EXTENSIONS))),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :expired_certificate), :public_key), :to_pem), :==,
              s(:send,
                s(:send,
                  s(:lvar, :private_key), :public_key), :to_pem)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:send,
                s(:str, "incorrect signing key for re-signing "), :+,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :expired_certificate), :subject)))))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :expired_certificate), :subject), :to_s), :==,
              s(:send,
                s(:send,
                  s(:lvar, :expired_certificate), :issuer), :to_s)), nil,
            s(:begin,
              s(:lvasgn, :subject,
                s(:send, nil, :alt_name_or_x509_entry,
                  s(:lvar, :expired_certificate),
                  s(:sym, :subject))),
              s(:lvasgn, :issuer,
                s(:send, nil, :alt_name_or_x509_entry,
                  s(:lvar, :expired_certificate),
                  s(:sym, :issuer))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception),
                s(:send,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :subject)),
                    s(:str, " is not self-signed, contact "),
                    s(:begin,
                      s(:lvar, :issuer)),
                    s(:str, " ")), :+,
                  s(:str, "to obtain a valid certificate"))))),
          s(:lvasgn, :serial,
            s(:send,
              s(:send,
                s(:lvar, :expired_certificate), :serial), :+,
              s(:int, 1))),
          s(:send, nil, :create_cert_self_signed,
            s(:send,
              s(:lvar, :expired_certificate), :subject),
            s(:lvar, :private_key),
            s(:lvar, :age),
            s(:lvar, :extensions),
            s(:lvar, :serial)))),
      s(:defs,
        s(:self), :reset,
        s(:args),
        s(:ivasgn, :@trust_dir,
          s(:nil))),
      s(:defs,
        s(:self), :sign,
        s(:args,
          s(:arg, :certificate),
          s(:arg, :signing_key),
          s(:arg, :signing_cert),
          s(:optarg, :age,
            s(:const, nil, :ONE_YEAR)),
          s(:optarg, :extensions,
            s(:const, nil, :EXTENSIONS)),
          s(:optarg, :serial,
            s(:int, 1))),
        s(:begin,
          s(:lvasgn, :signee_subject,
            s(:send,
              s(:lvar, :certificate), :subject)),
          s(:lvasgn, :signee_key,
            s(:send,
              s(:lvar, :certificate), :public_key)),
          s(:lvasgn, :alt_name,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :certificate), :extensions), :find),
              s(:args,
                s(:arg, :extension)),
              s(:send,
                s(:send,
                  s(:lvar, :extension), :oid), :==,
                s(:str, "subjectAltName")))),
          s(:if,
            s(:lvar, :alt_name),
            s(:lvasgn, :extensions,
              s(:send,
                s(:lvar, :extensions), :merge,
                s(:hash,
                  s(:pair,
                    s(:str, "subjectAltName"),
                    s(:send,
                      s(:lvar, :alt_name), :value))))), nil),
          s(:lvasgn, :issuer_alt_name,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :signing_cert), :extensions), :find),
              s(:args,
                s(:arg, :extension)),
              s(:send,
                s(:send,
                  s(:lvar, :extension), :oid), :==,
                s(:str, "subjectAltName")))),
          s(:if,
            s(:lvar, :issuer_alt_name),
            s(:lvasgn, :extensions,
              s(:send,
                s(:lvar, :extensions), :merge,
                s(:hash,
                  s(:pair,
                    s(:str, "issuerAltName"),
                    s(:send,
                      s(:lvar, :issuer_alt_name), :value))))), nil),
          s(:lvasgn, :signed,
            s(:send, nil, :create_cert,
              s(:lvar, :signee_subject),
              s(:lvar, :signee_key),
              s(:lvar, :age),
              s(:lvar, :extensions),
              s(:lvar, :serial))),
          s(:send,
            s(:lvar, :signed), :issuer=,
            s(:send,
              s(:lvar, :signing_cert), :subject)),
          s(:send,
            s(:lvar, :signed), :sign,
            s(:lvar, :signing_key),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :DIGEST_ALGORITHM), :new)))),
      s(:defs,
        s(:self), :trust_dir,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@trust_dir),
            s(:return,
              s(:ivar, :@trust_dir)), nil),
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:const, nil, :Gem), :user_home),
              s(:str, ".gem"),
              s(:str, "trust"))),
          s(:or_asgn,
            s(:ivasgn, :@trust_dir),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :TrustDir), :new,
              s(:lvar, :dir))))),
      s(:defs,
        s(:self), :trusted_certificates,
        s(:args,
          s(:blockarg, :block)),
        s(:send,
          s(:send, nil, :trust_dir), :each_certificate,
          s(:block_pass,
            s(:lvar, :block)))),
      s(:defs,
        s(:self), :write,
        s(:args,
          s(:arg, :pemmable),
          s(:arg, :path),
          s(:optarg, :permissions,
            s(:int, 384)),
          s(:optarg, :passphrase,
            s(:nil)),
          s(:optarg, :cipher,
            s(:const, nil, :KEY_CIPHER))),
        s(:begin,
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:lvar, :path))),
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :path),
              s(:str, "wb"),
              s(:lvar, :permissions)),
            s(:args,
              s(:arg, :io)),
            s(:if,
              s(:and,
                s(:lvar, :passphrase),
                s(:lvar, :cipher)),
              s(:send,
                s(:lvar, :io), :write,
                s(:send,
                  s(:lvar, :pemmable), :to_pem,
                  s(:lvar, :cipher),
                  s(:lvar, :passphrase))),
              s(:send,
                s(:lvar, :io), :write,
                s(:send,
                  s(:lvar, :pemmable), :to_pem)))),
          s(:lvar, :path))),
      s(:send, nil, :reset))),
  s(:if,
    s(:defined?,
      s(:const,
        s(:const, nil, :OpenSSL), :SSL)),
    s(:begin,
      s(:send, nil, :require,
        s(:str, "rubygems/security/policy")),
      s(:send, nil, :require,
        s(:str, "rubygems/security/policies")),
      s(:send, nil, :require,
        s(:str, "rubygems/security/trust_dir"))), nil),
  s(:send, nil, :require,
    s(:str, "rubygems/security/signer")))
