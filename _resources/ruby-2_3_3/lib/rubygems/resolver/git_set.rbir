s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :GitSet),
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :Set),
  s(:begin,
    s(:send, nil, :attr_accessor,
      s(:sym, :root_dir)),
    s(:send, nil, :attr_reader,
      s(:sym, :need_submodules)),
    s(:send, nil, :attr_reader,
      s(:sym, :repositories)),
    s(:send, nil, :attr_reader,
      s(:sym, :specs)),
    s(:def, :initialize,
      s(:args),
      s(:begin,
        s(:super),
        s(:ivasgn, :@git,
          s(:or,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "git")),
            s(:str, "git"))),
        s(:ivasgn, :@need_submodules,
          s(:hash)),
        s(:ivasgn, :@repositories,
          s(:hash)),
        s(:ivasgn, :@root_dir,
          s(:send,
            s(:const, nil, :Gem), :dir)),
        s(:ivasgn, :@specs,
          s(:hash)))),
    s(:def, :add_git_gem,
      s(:args,
        s(:arg, :name),
        s(:arg, :repository),
        s(:arg, :reference),
        s(:arg, :submodules)),
      s(:begin,
        s(:send,
          s(:ivar, :@repositories), :[]=,
          s(:lvar, :name),
          s(:array,
            s(:lvar, :repository),
            s(:lvar, :reference))),
        s(:send,
          s(:ivar, :@need_submodules), :[]=,
          s(:lvar, :repository),
          s(:lvar, :submodules)))),
    s(:def, :add_git_spec,
      s(:args,
        s(:arg, :name),
        s(:arg, :version),
        s(:arg, :repository),
        s(:arg, :reference),
        s(:arg, :submodules)),
      s(:begin,
        s(:send, nil, :add_git_gem,
          s(:lvar, :name),
          s(:lvar, :repository),
          s(:lvar, :reference),
          s(:lvar, :submodules)),
        s(:lvasgn, :source,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Source), :Git), :new,
            s(:lvar, :name),
            s(:lvar, :repository),
            s(:lvar, :reference))),
        s(:send,
          s(:lvar, :source), :root_dir=,
          s(:ivar, :@root_dir)),
        s(:lvasgn, :spec,
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new),
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:send,
                s(:lvar, :s), :name=,
                s(:lvar, :name)),
              s(:send,
                s(:lvar, :s), :version=,
                s(:lvar, :version))))),
        s(:lvasgn, :git_spec,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
            s(:self),
            s(:lvar, :spec),
            s(:lvar, :source))),
        s(:send,
          s(:ivar, :@specs), :[]=,
          s(:send,
            s(:lvar, :spec), :name),
          s(:lvar, :git_spec)),
        s(:lvar, :git_spec))),
    s(:def, :find_all,
      s(:args,
        s(:arg, :req)),
      s(:begin,
        s(:send, nil, :prefetch,
          s(:nil)),
        s(:block,
          s(:send,
            s(:send,
              s(:send, nil, :specs), :values), :select),
          s(:args,
            s(:arg, :spec)),
          s(:send,
            s(:lvar, :req), :match?,
            s(:lvar, :spec))))),
    s(:def, :prefetch,
      s(:args,
        s(:arg, :reqs)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@specs), :empty?), nil,
          s(:return)),
        s(:block,
          s(:send,
            s(:ivar, :@repositories), :each),
          s(:args,
            s(:arg, :name),
            s(:mlhs,
              s(:arg, :repository),
              s(:arg, :reference))),
          s(:begin,
            s(:lvasgn, :source,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Source), :Git), :new,
                s(:lvar, :name),
                s(:lvar, :repository),
                s(:lvar, :reference))),
            s(:send,
              s(:lvar, :source), :root_dir=,
              s(:ivar, :@root_dir)),
            s(:send,
              s(:lvar, :source), :remote=,
              s(:ivar, :@remote)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :source), :specs), :each),
              s(:args,
                s(:arg, :spec)),
              s(:begin,
                s(:lvasgn, :git_spec,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Resolver), :GitSpecification), :new,
                    s(:self),
                    s(:lvar, :spec),
                    s(:lvar, :source))),
                s(:send,
                  s(:ivar, :@specs), :[]=,
                  s(:send,
                    s(:lvar, :spec), :name),
                  s(:lvar, :git_spec)))))))),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:block,
        s(:send,
          s(:lvar, :q), :group,
          s(:int, 2),
          s(:str, "[GitSet"),
          s(:str, "]")),
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@repositories), :empty?),
            s(:next), nil),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:lvasgn, :repos,
            s(:block,
              s(:send,
                s(:ivar, :@repositories), :map),
              s(:args,
                s(:arg, :name),
                s(:mlhs,
                  s(:arg, :repository),
                  s(:arg, :reference))),
              s(:dstr,
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ": "),
                s(:begin,
                  s(:lvar, :repository)),
                s(:str, "@"),
                s(:begin,
                  s(:lvar, :reference))))),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:lvar, :repos)),
            s(:args,
              s(:arg, :repo)),
            s(:send,
              s(:lvar, :q), :text,
              s(:lvar, :repo))))))))
