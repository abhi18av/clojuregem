s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :BestSet),
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :ComposedSet),
  s(:begin,
    s(:def, :initialize,
      s(:args,
        s(:optarg, :sources,
          s(:send,
            s(:const, nil, :Gem), :sources))),
      s(:begin,
        s(:super),
        s(:ivasgn, :@sources,
          s(:lvar, :sources)))),
    s(:def, :pick_sets,
      s(:args),
      s(:block,
        s(:send,
          s(:ivar, :@sources), :each_source),
        s(:args,
          s(:arg, :source)),
        s(:send,
          s(:ivar, :@sets), :<<,
          s(:send,
            s(:lvar, :source), :dependency_resolver_set)))),
    s(:def, :find_all,
      s(:args,
        s(:arg, :req)),
      s(:rescue,
        s(:begin,
          s(:if,
            s(:and,
              s(:ivar, :@remote),
              s(:send,
                s(:ivar, :@sets), :empty?)),
            s(:send, nil, :pick_sets), nil),
          s(:zsuper)),
        s(:resbody,
          s(:array,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
          s(:lvasgn, :e),
          s(:begin,
            s(:send, nil, :replace_failed_api_set,
              s(:lvar, :e)),
            s(:retry))), nil)),
    s(:def, :prefetch,
      s(:args,
        s(:arg, :reqs)),
      s(:begin,
        s(:if,
          s(:and,
            s(:ivar, :@remote),
            s(:send,
              s(:ivar, :@sets), :empty?)),
          s(:send, nil, :pick_sets), nil),
        s(:zsuper))),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:block,
        s(:send,
          s(:lvar, :q), :group,
          s(:int, 2),
          s(:str, "[BestSet"),
          s(:str, "]")),
        s(:args),
        s(:begin,
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "sets:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :pp,
            s(:ivar, :@sets))))),
    s(:def, :replace_failed_api_set,
      s(:args,
        s(:arg, :error)),
      s(:begin,
        s(:lvasgn, :uri,
          s(:send,
            s(:lvar, :error), :uri)),
        s(:if,
          s(:send,
            s(:const, nil, :URI), :===,
            s(:lvar, :uri)), nil,
          s(:lvasgn, :uri,
            s(:send, nil, :URI,
              s(:lvar, :uri)))),
        s(:send,
          s(:lvar, :uri), :query=,
          s(:nil)),
        s(:if,
          s(:lvasgn, :api_set,
            s(:block,
              s(:send,
                s(:ivar, :@sets), :find),
              s(:args,
                s(:arg, :set)),
              s(:and,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Resolver), :APISet), :===,
                  s(:lvar, :set)),
                s(:send,
                  s(:send,
                    s(:lvar, :set), :dep_uri), :==,
                  s(:lvar, :uri))))), nil,
          s(:send, nil, :raise,
            s(:lvar, :error))),
        s(:lvasgn, :index_set,
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :IndexSet), :new,
            s(:send,
              s(:lvar, :api_set), :source))),
        s(:block,
          s(:send,
            s(:ivar, :@sets), :map!),
          s(:args,
            s(:arg, :set)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :set), :==,
                s(:lvar, :api_set)), nil,
              s(:next,
                s(:lvar, :set))),
            s(:lvar, :index_set)))))))
