s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :LockSet),
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :Set),
  s(:begin,
    s(:send, nil, :attr_reader,
      s(:sym, :specs)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :sources)),
      s(:begin,
        s(:super),
        s(:ivasgn, :@sources,
          s(:block,
            s(:send,
              s(:lvar, :sources), :map),
            s(:args,
              s(:arg, :source)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Lock), :new,
              s(:lvar, :source)))),
        s(:ivasgn, :@specs,
          s(:array)))),
    s(:def, :add,
      s(:args,
        s(:arg, :name),
        s(:arg, :version),
        s(:arg, :platform)),
      s(:begin,
        s(:lvasgn, :version,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :new,
            s(:lvar, :version))),
        s(:lvasgn, :specs,
          s(:array,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :LockSpecification), :new,
              s(:self),
              s(:lvar, :name),
              s(:lvar, :version),
              s(:ivar, :@sources),
              s(:lvar, :platform)))),
        s(:send,
          s(:ivar, :@specs), :concat,
          s(:lvar, :specs)),
        s(:lvar, :specs))),
    s(:def, :find_all,
      s(:args,
        s(:arg, :req)),
      s(:block,
        s(:send,
          s(:ivar, :@specs), :select),
        s(:args,
          s(:arg, :spec)),
        s(:send,
          s(:lvar, :req), :match?,
          s(:lvar, :spec)))),
    s(:def, :load_spec,
      s(:args,
        s(:arg, :name),
        s(:arg, :version),
        s(:arg, :platform),
        s(:arg, :source)),
      s(:begin,
        s(:lvasgn, :dep,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Dependency), :new,
            s(:lvar, :name),
            s(:lvar, :version))),
        s(:lvasgn, :found,
          s(:block,
            s(:send,
              s(:ivar, :@specs), :find),
            s(:args,
              s(:arg, :spec)),
            s(:and,
              s(:send,
                s(:lvar, :dep), :matches_spec?,
                s(:lvar, :spec)),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :platform), :==,
                s(:lvar, :platform))))),
        s(:lvasgn, :tuple,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :NameTuple), :new,
            s(:send,
              s(:lvar, :found), :name),
            s(:send,
              s(:lvar, :found), :version),
            s(:send,
              s(:lvar, :found), :platform))),
        s(:send,
          s(:send,
            s(:lvar, :found), :source), :fetch_spec,
          s(:lvar, :tuple)))),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:block,
        s(:send,
          s(:lvar, :q), :group,
          s(:int, 2),
          s(:str, "[LockSet"),
          s(:str, "]")),
        s(:args),
        s(:begin,
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "source:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :pp,
            s(:ivar, :@source)),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :text,
            s(:str, "specs:")),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:send,
            s(:lvar, :q), :pp,
            s(:block,
              s(:send,
                s(:ivar, :@specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))))))))
