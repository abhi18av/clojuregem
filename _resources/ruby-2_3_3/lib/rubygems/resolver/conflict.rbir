s(:begin,
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Resolver), :Conflict), nil,
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :activated)),
      s(:send, nil, :attr_reader,
        s(:sym, :dependency)),
      s(:send, nil, :attr_reader,
        s(:sym, :failed_dep)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :dependency),
          s(:arg, :activated),
          s(:optarg, :failed_dep,
            s(:lvar, :dependency))),
        s(:begin,
          s(:ivasgn, :@dependency,
            s(:lvar, :dependency)),
          s(:ivasgn, :@activated,
            s(:lvar, :activated)),
          s(:ivasgn, :@failed_dep,
            s(:lvar, :failed_dep)))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:self), :class), :===,
                s(:lvar, :other)),
              s(:send,
                s(:ivar, :@dependency), :==,
                s(:send,
                  s(:lvar, :other), :dependency))),
            s(:send,
              s(:ivar, :@activated), :==,
              s(:send,
                s(:lvar, :other), :activated))),
          s(:send,
            s(:ivar, :@failed_dep), :==,
            s(:send,
              s(:lvar, :other), :failed_dep)))),
      s(:def, :explain,
        s(:args),
        s(:dstr,
          s(:str, "<Conflict wanted: "),
          s(:begin,
            s(:ivar, :@failed_dep)),
          s(:str, ", had: "),
          s(:begin,
            s(:send,
              s(:send,
                s(:send, nil, :activated), :spec), :full_name)),
          s(:str, ">"))),
      s(:def, :conflicting_dependencies,
        s(:args),
        s(:array,
          s(:send,
            s(:ivar, :@failed_dep), :dependency),
          s(:send,
            s(:send,
              s(:ivar, :@activated), :request), :dependency))),
      s(:def, :explanation,
        s(:args),
        s(:begin,
          s(:lvasgn, :activated,
            s(:send,
              s(:send,
                s(:ivar, :@activated), :spec), :full_name)),
          s(:lvasgn, :dependency,
            s(:send,
              s(:ivar, :@failed_dep), :dependency)),
          s(:lvasgn, :requirement,
            s(:send,
              s(:lvar, :dependency), :requirement)),
          s(:lvasgn, :alternates,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :dependency), :matching_specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:if,
            s(:send,
              s(:lvar, :alternates), :empty?), nil,
            s(:begin,
              s(:lvasgn, :matching,
                s(:send,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "  Gems matching %s:\n"),
                    s(:str, "    %s\n")), :chomp)),
              s(:lvasgn, :matching,
                s(:send,
                  s(:lvar, :matching), :%,
                  s(:array,
                    s(:lvar, :dependency),
                    s(:send,
                      s(:lvar, :alternates), :join,
                      s(:str, ", "))))))),
          s(:lvasgn, :explanation,
            s(:dstr,
              s(:str, "  Activated %s\n"),
              s(:str, "  which does not match conflicting dependency (%s)\n"),
              s(:str, "\n"),
              s(:str, "  Conflicting dependency chains:\n"),
              s(:str, "    %s\n"),
              s(:str, "\n"),
              s(:str, "  versus:\n"),
              s(:str, "    %s\n"),
              s(:str, "%s\n"))),
          s(:send,
            s(:lvar, :explanation), :%,
            s(:array,
              s(:lvar, :activated),
              s(:lvar, :requirement),
              s(:send,
                s(:send,
                  s(:send, nil, :request_path,
                    s(:ivar, :@activated)), :reverse), :join,
                s(:str, ", depends on\n    ")),
              s(:send,
                s(:send,
                  s(:send, nil, :request_path,
                    s(:ivar, :@failed_dep)), :reverse), :join,
                s(:str, ", depends on\n    ")),
              s(:lvar, :matching))))),
      s(:def, :for_spec?,
        s(:args,
          s(:arg, :spec)),
        s(:send,
          s(:send,
            s(:ivar, :@dependency), :name), :==,
          s(:send,
            s(:lvar, :spec), :name))),
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 2),
            s(:str, "[Dependency conflict: "),
            s(:str, "]")),
          s(:args),
          s(:begin,
            s(:send,
              s(:lvar, :q), :breakable),
            s(:send,
              s(:lvar, :q), :text,
              s(:str, "activated ")),
            s(:send,
              s(:lvar, :q), :pp,
              s(:ivar, :@activated)),
            s(:send,
              s(:lvar, :q), :breakable),
            s(:send,
              s(:lvar, :q), :text,
              s(:str, " dependency ")),
            s(:send,
              s(:lvar, :q), :pp,
              s(:ivar, :@dependency)),
            s(:send,
              s(:lvar, :q), :breakable),
            s(:if,
              s(:send,
                s(:ivar, :@dependency), :==,
                s(:ivar, :@failed_dep)),
              s(:send,
                s(:lvar, :q), :text,
                s(:str, " failed")),
              s(:begin,
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, " failed dependency ")),
                s(:send,
                  s(:lvar, :q), :pp,
                  s(:ivar, :@failed_dep))))))),
      s(:def, :request_path,
        s(:args,
          s(:arg, :current)),
        s(:begin,
          s(:lvasgn, :path,
            s(:array)),
          s(:while,
            s(:lvar, :current),
            s(:case,
              s(:lvar, :current),
              s(:when,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :ActivationRequest),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :<<,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :current), :request), :dependency)),
                      s(:str, ", "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :current), :spec), :version)),
                      s(:str, " activated"))),
                  s(:lvasgn, :current,
                    s(:send,
                      s(:lvar, :current), :parent)))),
              s(:when,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Resolver), :DependencyRequest),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :<<,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:lvar, :current), :dependency)))),
                  s(:lvasgn, :current,
                    s(:send,
                      s(:lvar, :current), :requester)))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :Exception),
                s(:dstr,
                  s(:str, "[BUG] unknown request class "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :current), :class)))))),
          s(:if,
            s(:send,
              s(:lvar, :path), :empty?),
            s(:lvasgn, :path,
              s(:array,
                s(:str, "user request (gem command or Gemfile)"))), nil),
          s(:lvar, :path))),
      s(:def, :requester,
        s(:args),
        s(:send,
          s(:ivar, :@failed_dep), :requester)))),
  s(:casgn,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :DependencyConflict,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Resolver), :Conflict)))
