s(:begin,
  s(:send, nil, :require,
    s(:str, "set")),
  s(:send, nil, :require,
    s(:str, "tsort")),
  s(:module,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Resolver), :Molinillo),
    s(:class,
      s(:const, nil, :DependencyGraph), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :Enumerable)),
        s(:def, :each,
          s(:args),
          s(:block,
            s(:send,
              s(:send,
                s(:send, nil, :vertices), :values), :each),
            s(:args,
              s(:arg, :v)),
            s(:yield,
              s(:lvar, :v)))),
        s(:send, nil, :include,
          s(:const, nil, :TSort)),
        s(:send, nil, :alias_method,
          s(:sym, :tsort_each_node),
          s(:sym, :each)),
        s(:def, :tsort_each_child,
          s(:args,
            s(:arg, :vertex),
            s(:blockarg, :block)),
          s(:send,
            s(:send,
              s(:lvar, :vertex), :successors), :each,
            s(:block_pass,
              s(:lvar, :block)))),
        s(:defs,
          s(:self), :tsort,
          s(:args,
            s(:arg, :vertices)),
          s(:send,
            s(:const, nil, :TSort), :tsort,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :b)),
              s(:send,
                s(:lvar, :vertices), :each,
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:blockarg, :b)),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :v), :successors), :&,
                    s(:lvar, :vertices))), :each,
                s(:block_pass,
                  s(:lvar, :b)))))),
        s(:casgn, nil, :Edge,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :origin),
            s(:sym, :destination),
            s(:sym, :requirement))),
        s(:send, nil, :attr_reader,
          s(:sym, :vertices)),
        s(:def, :initialize,
          s(:args),
          s(:ivasgn, :@vertices,
            s(:hash))),
        s(:def, :initialize_copy,
          s(:args,
            s(:arg, :other)),
          s(:begin,
            s(:zsuper),
            s(:ivasgn, :@vertices,
              s(:hash)),
            s(:lvasgn, :traverse,
              s(:block,
                s(:send, nil, :lambda),
                s(:args,
                  s(:arg, :new_v),
                  s(:arg, :old_v)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :new_v), :outgoing_edges), :size), :==,
                      s(:send,
                        s(:send,
                          s(:lvar, :old_v), :outgoing_edges), :size)),
                    s(:return), nil),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :old_v), :outgoing_edges), :each),
                    s(:args,
                      s(:arg, :edge)),
                    s(:begin,
                      s(:lvasgn, :destination,
                        s(:send, nil, :add_vertex,
                          s(:send,
                            s(:send,
                              s(:lvar, :edge), :destination), :name),
                          s(:send,
                            s(:send,
                              s(:lvar, :edge), :destination), :payload))),
                      s(:send, nil, :add_edge_no_circular,
                        s(:lvar, :new_v),
                        s(:lvar, :destination),
                        s(:send,
                          s(:lvar, :edge), :requirement)),
                      s(:send,
                        s(:lvar, :traverse), :call,
                        s(:lvar, :destination),
                        s(:send,
                          s(:lvar, :edge), :destination))))))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :other), :vertices), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :vertex)),
              s(:begin,
                s(:lvasgn, :new_vertex,
                  s(:send, nil, :add_vertex,
                    s(:lvar, :name),
                    s(:send,
                      s(:lvar, :vertex), :payload),
                    s(:send,
                      s(:lvar, :vertex), :root?))),
                s(:send,
                  s(:send,
                    s(:lvar, :new_vertex), :explicit_requirements), :replace,
                  s(:send,
                    s(:lvar, :vertex), :explicit_requirements)),
                s(:send,
                  s(:lvar, :traverse), :call,
                  s(:lvar, :new_vertex),
                  s(:lvar, :vertex)))))),
        s(:def, :inspect,
          s(:args),
          s(:dstr,
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:str, ":"),
            s(:begin,
              s(:send,
                s(:send,
                  s(:send, nil, :vertices), :values), :inspect)))),
        s(:def, :==,
          s(:args,
            s(:arg, :other)),
          s(:begin,
            s(:if,
              s(:lvar, :other), nil,
              s(:return,
                s(:false))),
            s(:block,
              s(:send,
                s(:send, nil, :vertices), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :vertex)),
              s(:begin,
                s(:lvasgn, :other_vertex,
                  s(:send,
                    s(:lvar, :other), :vertex_named,
                    s(:lvar, :name))),
                s(:if,
                  s(:lvar, :other_vertex), nil,
                  s(:return,
                    s(:false))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :other_vertex), :successors), :map,
                        s(:block_pass,
                          s(:sym, :name))), :to_set), :==,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :vertex), :successors), :map,
                        s(:block_pass,
                          s(:sym, :name))), :to_set)), nil,
                  s(:return,
                    s(:false))))))),
        s(:def, :add_child_vertex,
          s(:args,
            s(:arg, :name),
            s(:arg, :payload),
            s(:arg, :parent_names),
            s(:arg, :requirement)),
          s(:begin,
            s(:lvasgn, :vertex,
              s(:send, nil, :add_vertex,
                s(:lvar, :name),
                s(:lvar, :payload))),
            s(:block,
              s(:send,
                s(:lvar, :parent_names), :each),
              s(:args,
                s(:arg, :parent_name)),
              s(:begin,
                s(:if,
                  s(:lvar, :parent_name), nil,
                  s(:begin,
                    s(:send,
                      s(:lvar, :vertex), :root=,
                      s(:true)),
                    s(:next))),
                s(:lvasgn, :parent_node,
                  s(:send, nil, :vertex_named,
                    s(:lvar, :parent_name))),
                s(:send, nil, :add_edge,
                  s(:lvar, :parent_node),
                  s(:lvar, :vertex),
                  s(:lvar, :requirement)))),
            s(:lvar, :vertex))),
        s(:def, :add_vertex,
          s(:args,
            s(:arg, :name),
            s(:arg, :payload),
            s(:optarg, :root,
              s(:false))),
          s(:begin,
            s(:lvasgn, :vertex,
              s(:or_asgn,
                s(:send,
                  s(:send, nil, :vertices), :[],
                  s(:lvar, :name)),
                s(:send,
                  s(:const, nil, :Vertex), :new,
                  s(:lvar, :name),
                  s(:lvar, :payload)))),
            s(:or_asgn,
              s(:send,
                s(:lvar, :vertex), :payload),
              s(:lvar, :payload)),
            s(:or_asgn,
              s(:send,
                s(:lvar, :vertex), :root),
              s(:lvar, :root)),
            s(:lvar, :vertex))),
        s(:def, :detach_vertex_named,
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:if,
              s(:lvasgn, :vertex,
                s(:send,
                  s(:send, nil, :vertices), :delete,
                  s(:lvar, :name))), nil,
              s(:return)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :vertex), :outgoing_edges), :each),
              s(:args,
                s(:arg, :e)),
              s(:begin,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :e), :destination)),
                s(:send,
                  s(:send,
                    s(:lvar, :v), :incoming_edges), :delete,
                  s(:lvar, :e)),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :v), :root?),
                    s(:send,
                      s(:send,
                        s(:lvar, :v), :predecessors), :any?)), nil,
                  s(:send, nil, :detach_vertex_named,
                    s(:send,
                      s(:lvar, :v), :name))))))),
        s(:def, :vertex_named,
          s(:args,
            s(:arg, :name)),
          s(:send,
            s(:send, nil, :vertices), :[],
            s(:lvar, :name))),
        s(:def, :root_vertex_named,
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :vertex,
              s(:send, nil, :vertex_named,
                s(:lvar, :name))),
            s(:if,
              s(:and,
                s(:lvar, :vertex),
                s(:send,
                  s(:lvar, :vertex), :root?)),
              s(:lvar, :vertex), nil))),
        s(:def, :add_edge,
          s(:args,
            s(:arg, :origin),
            s(:arg, :destination),
            s(:arg, :requirement)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :destination), :path_to?,
                s(:lvar, :origin)),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :CircularDependencyError), :new,
                  s(:array,
                    s(:lvar, :origin),
                    s(:lvar, :destination)))), nil),
            s(:send, nil, :add_edge_no_circular,
              s(:lvar, :origin),
              s(:lvar, :destination),
              s(:lvar, :requirement)))),
        s(:send, nil, :private),
        s(:def, :add_edge_no_circular,
          s(:args,
            s(:arg, :origin),
            s(:arg, :destination),
            s(:arg, :requirement)),
          s(:begin,
            s(:lvasgn, :edge,
              s(:send,
                s(:const, nil, :Edge), :new,
                s(:lvar, :origin),
                s(:lvar, :destination),
                s(:lvar, :requirement))),
            s(:send,
              s(:send,
                s(:lvar, :origin), :outgoing_edges), :<<,
              s(:lvar, :edge)),
            s(:send,
              s(:send,
                s(:lvar, :destination), :incoming_edges), :<<,
              s(:lvar, :edge)),
            s(:lvar, :edge))),
        s(:class,
          s(:const, nil, :Vertex), nil,
          s(:begin,
            s(:send, nil, :attr_accessor,
              s(:sym, :name)),
            s(:send, nil, :attr_accessor,
              s(:sym, :payload)),
            s(:send, nil, :attr_reader,
              s(:sym, :explicit_requirements)),
            s(:send, nil, :attr_accessor,
              s(:sym, :root)),
            s(:send, nil, :alias_method,
              s(:sym, :root?),
              s(:sym, :root)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :name),
                s(:arg, :payload)),
              s(:begin,
                s(:ivasgn, :@name,
                  s(:lvar, :name)),
                s(:ivasgn, :@payload,
                  s(:lvar, :payload)),
                s(:ivasgn, :@explicit_requirements,
                  s(:array)),
                s(:ivasgn, :@outgoing_edges,
                  s(:array)),
                s(:ivasgn, :@incoming_edges,
                  s(:array)))),
            s(:def, :requirements,
              s(:args),
              s(:send,
                s(:send,
                  s(:send, nil, :incoming_edges), :map,
                  s(:block_pass,
                    s(:sym, :requirement))), :+,
                s(:send, nil, :explicit_requirements))),
            s(:send, nil, :attr_accessor,
              s(:sym, :outgoing_edges)),
            s(:send, nil, :attr_accessor,
              s(:sym, :incoming_edges)),
            s(:def, :predecessors,
              s(:args),
              s(:send,
                s(:send, nil, :incoming_edges), :map,
                s(:block_pass,
                  s(:sym, :origin)))),
            s(:def, :recursive_predecessors,
              s(:args),
              s(:begin,
                s(:lvasgn, :vertices,
                  s(:send, nil, :predecessors)),
                s(:op_asgn,
                  s(:lvasgn, :vertices), :+,
                  s(:send,
                    s(:send,
                      s(:lvar, :vertices), :map,
                      s(:block_pass,
                        s(:sym, :recursive_predecessors))), :flatten,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :vertices), :uniq!),
                s(:lvar, :vertices))),
            s(:def, :successors,
              s(:args),
              s(:send,
                s(:send, nil, :outgoing_edges), :map,
                s(:block_pass,
                  s(:sym, :destination)))),
            s(:def, :recursive_successors,
              s(:args),
              s(:begin,
                s(:lvasgn, :vertices,
                  s(:send, nil, :successors)),
                s(:op_asgn,
                  s(:lvasgn, :vertices), :+,
                  s(:send,
                    s(:send,
                      s(:lvar, :vertices), :map,
                      s(:block_pass,
                        s(:sym, :recursive_successors))), :flatten,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :vertices), :uniq!),
                s(:lvar, :vertices))),
            s(:def, :inspect,
              s(:args),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:self), :class)),
                s(:str, ":"),
                s(:begin,
                  s(:send, nil, :name)),
                s(:str, "("),
                s(:begin,
                  s(:send,
                    s(:send, nil, :payload), :inspect)),
                s(:str, ")"))),
            s(:def, :==,
              s(:args,
                s(:arg, :other)),
              s(:and,
                s(:send, nil, :shallow_eql?,
                  s(:lvar, :other)),
                s(:send,
                  s(:send,
                    s(:send, nil, :successors), :to_set), :==,
                  s(:send,
                    s(:send,
                      s(:lvar, :other), :successors), :to_set)))),
            s(:def, :shallow_eql?,
              s(:args,
                s(:arg, :other)),
              s(:and,
                s(:and,
                  s(:lvar, :other),
                  s(:send,
                    s(:send, nil, :name), :==,
                    s(:send,
                      s(:lvar, :other), :name))),
                s(:send,
                  s(:send, nil, :payload), :==,
                  s(:send,
                    s(:lvar, :other), :payload)))),
            s(:send, nil, :alias_method,
              s(:sym, :eql?),
              s(:sym, :==)),
            s(:def, :hash,
              s(:args),
              s(:send,
                s(:send, nil, :name), :hash)),
            s(:def, :path_to?,
              s(:args,
                s(:arg, :other)),
              s(:or,
                s(:send, nil, :equal?,
                  s(:lvar, :other)),
                s(:block,
                  s(:send,
                    s(:send, nil, :successors), :any?),
                  s(:args,
                    s(:arg, :v)),
                  s(:send,
                    s(:lvar, :v), :path_to?,
                    s(:lvar, :other))))),
            s(:send, nil, :alias_method,
              s(:sym, :descendent?),
              s(:sym, :path_to?)),
            s(:def, :ancestor?,
              s(:args,
                s(:arg, :other)),
              s(:send,
                s(:lvar, :other), :path_to?,
                s(:self))),
            s(:send, nil, :alias_method,
              s(:sym, :is_reachable_from?),
              s(:sym, :ancestor?))))))))
