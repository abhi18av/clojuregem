s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :VendorSet),
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Resolver), :Set),
  s(:begin,
    s(:send, nil, :attr_reader,
      s(:sym, :specs)),
    s(:def, :initialize,
      s(:args),
      s(:begin,
        s(:super),
        s(:ivasgn, :@directories,
          s(:hash)),
        s(:ivasgn, :@specs,
          s(:hash)))),
    s(:def, :add_vendor_gem,
      s(:args,
        s(:arg, :name),
        s(:arg, :directory)),
      s(:begin,
        s(:lvasgn, :gemspec,
          s(:send,
            s(:const, nil, :File), :join,
            s(:lvar, :directory),
            s(:dstr,
              s(:begin,
                s(:lvar, :name)),
              s(:str, ".gemspec")))),
        s(:lvasgn, :spec,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :load,
            s(:lvar, :gemspec))),
        s(:if,
          s(:lvar, :spec), nil,
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Gem), :GemNotFoundException),
            s(:dstr,
              s(:str, "unable to find "),
              s(:begin,
                s(:lvar, :gemspec)),
              s(:str, " for gem "),
              s(:begin,
                s(:lvar, :name))))),
        s(:send,
          s(:lvar, :spec), :full_gem_path=,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :directory))),
        s(:send,
          s(:ivar, :@specs), :[]=,
          s(:send,
            s(:lvar, :spec), :name),
          s(:lvar, :spec)),
        s(:send,
          s(:ivar, :@directories), :[]=,
          s(:lvar, :spec),
          s(:lvar, :directory)),
        s(:lvar, :spec))),
    s(:def, :find_all,
      s(:args,
        s(:arg, :req)),
      s(:block,
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@specs), :values), :select),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:lvar, :req), :match?,
              s(:lvar, :spec))), :map),
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :source,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Source), :Vendor), :new,
              s(:send,
                s(:ivar, :@directories), :[],
                s(:lvar, :spec)))),
          s(:send,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Resolver), :VendorSpecification), :new,
            s(:self),
            s(:lvar, :spec),
            s(:lvar, :source))))),
    s(:def, :load_spec,
      s(:args,
        s(:arg, :name),
        s(:arg, :version),
        s(:arg, :platform),
        s(:arg, :source)),
      s(:send,
        s(:ivar, :@specs), :fetch,
        s(:lvar, :name))),
    s(:def, :pretty_print,
      s(:args,
        s(:arg, :q)),
      s(:block,
        s(:send,
          s(:lvar, :q), :group,
          s(:int, 2),
          s(:str, "[VendorSet"),
          s(:str, "]")),
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@directories), :empty?),
            s(:next), nil),
          s(:send,
            s(:lvar, :q), :breakable),
          s(:lvasgn, :dirs,
            s(:block,
              s(:send,
                s(:ivar, :@directories), :map),
              s(:args,
                s(:arg, :spec),
                s(:arg, :directory)),
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:lvar, :spec), :full_name)),
                s(:str, ": "),
                s(:begin,
                  s(:lvar, :directory))))),
          s(:block,
            s(:send,
              s(:lvar, :q), :seplist,
              s(:lvar, :dirs)),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:lvar, :q), :text,
              s(:lvar, :dir))))))))
