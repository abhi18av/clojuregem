s(:begin,
  s(:send, nil, :require,
    s(:str, "optparse")),
  s(:send, nil, :require,
    s(:str, "rubygems/requirement")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Command), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:send, nil, :attr_reader,
        s(:sym, :command)),
      s(:send, nil, :attr_reader,
        s(:sym, :options)),
      s(:send, nil, :attr_accessor,
        s(:sym, :defaults)),
      s(:send, nil, :attr_accessor,
        s(:sym, :program_name)),
      s(:send, nil, :attr_accessor,
        s(:sym, :summary)),
      s(:defs,
        s(:self), :build_args,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@build_args),
          s(:array))),
      s(:defs,
        s(:self), :build_args=,
        s(:args,
          s(:arg, :value)),
        s(:ivasgn, :@build_args,
          s(:lvar, :value))),
      s(:defs,
        s(:self), :common_options,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@common_options),
          s(:array))),
      s(:defs,
        s(:self), :add_common_option,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :handler)),
        s(:send,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Command), :common_options), :<<,
          s(:array,
            s(:lvar, :args),
            s(:lvar, :handler)))),
      s(:defs,
        s(:self), :extra_args,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@extra_args),
          s(:array))),
      s(:defs,
        s(:self), :extra_args=,
        s(:args,
          s(:arg, :value)),
        s(:case,
          s(:lvar, :value),
          s(:when,
            s(:const, nil, :Array),
            s(:ivasgn, :@extra_args,
              s(:lvar, :value))),
          s(:when,
            s(:const, nil, :String),
            s(:ivasgn, :@extra_args,
              s(:send,
                s(:lvar, :value), :split))), nil)),
      s(:defs,
        s(:self), :specific_extra_args,
        s(:args,
          s(:arg, :cmd)),
        s(:send,
          s(:send, nil, :specific_extra_args_hash), :[],
          s(:lvar, :cmd))),
      s(:defs,
        s(:self), :add_specific_extra_args,
        s(:args,
          s(:arg, :cmd),
          s(:arg, :args)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :args), :kind_of?,
              s(:const, nil, :String)),
            s(:lvasgn, :args,
              s(:send,
                s(:lvar, :args), :split,
                s(:regexp,
                  s(:str, "\\s+"),
                  s(:regopt)))), nil),
          s(:send,
            s(:send, nil, :specific_extra_args_hash), :[]=,
            s(:lvar, :cmd),
            s(:lvar, :args)))),
      s(:defs,
        s(:self), :specific_extra_args_hash,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@specific_extra_args_hash),
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :h),
              s(:arg, :k)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :k),
              s(:send,
                s(:const, nil, :Array), :new))))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :command),
          s(:optarg, :summary,
            s(:nil)),
          s(:optarg, :defaults,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@command,
            s(:lvar, :command)),
          s(:ivasgn, :@summary,
            s(:lvar, :summary)),
          s(:ivasgn, :@program_name,
            s(:dstr,
              s(:str, "gem "),
              s(:begin,
                s(:lvar, :command)))),
          s(:ivasgn, :@defaults,
            s(:lvar, :defaults)),
          s(:ivasgn, :@options,
            s(:send,
              s(:lvar, :defaults), :dup)),
          s(:ivasgn, :@option_groups,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :k)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :k),
                s(:array)))),
          s(:ivasgn, :@parser,
            s(:nil)),
          s(:ivasgn, :@when_invoked,
            s(:nil)))),
      s(:def, :begins?,
        s(:args,
          s(:arg, :long),
          s(:arg, :short)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :short), :nil?),
            s(:return,
              s(:false)), nil),
          s(:send,
            s(:send,
              s(:lvar, :long), :[],
              s(:int, 0),
              s(:send,
                s(:lvar, :short), :length)), :==,
            s(:lvar, :short)))),
      s(:def, :execute,
        s(:args),
        s(:send, nil, :raise,
          s(:const,
            s(:const, nil, :Gem), :Exception),
          s(:str, "generic command has no actions"))),
      s(:def, :show_lookup_failure,
        s(:args,
          s(:arg, :gem_name),
          s(:arg, :version),
          s(:arg, :errors),
          s(:arg, :domain)),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :errors),
              s(:send,
                s(:send,
                  s(:lvar, :errors), :empty?), :!)),
            s(:begin,
              s(:lvasgn, :msg,
                s(:send,
                  s(:dstr,
                    s(:str, "Could not find a valid gem '"),
                    s(:begin,
                      s(:lvar, :gem_name)),
                    s(:str, "' ("),
                    s(:begin,
                      s(:lvar, :version)),
                    s(:str, "), here is why:\n")), :dup)),
              s(:block,
                s(:send,
                  s(:lvar, :errors), :each),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :msg), :<<,
                  s(:dstr,
                    s(:str, "          "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :x), :wordy)),
                    s(:str, "\n")))),
              s(:send, nil, :alert_error,
                s(:lvar, :msg))),
            s(:send, nil, :alert_error,
              s(:dstr,
                s(:str, "Could not find a valid gem '"),
                s(:begin,
                  s(:lvar, :gem_name)),
                s(:str, "' ("),
                s(:begin,
                  s(:lvar, :version)),
                s(:str, ") in any repository")))),
          s(:if,
            s(:send,
              s(:lvar, :domain), :==,
              s(:sym, :local)), nil,
            s(:begin,
              s(:lvasgn, :suggestions,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :SpecFetcher), :fetcher), :suggest_gems_from_name,
                  s(:lvar, :gem_name))),
              s(:if,
                s(:send,
                  s(:lvar, :suggestions), :empty?), nil,
                s(:send, nil, :alert_error,
                  s(:dstr,
                    s(:str, "Possible alternatives: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :suggestions), :join,
                        s(:str, ", ")))))))))),
      s(:def, :get_all_gem_names,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :args))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :args), :nil?),
              s(:send,
                s(:lvar, :args), :empty?)),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError),
              s(:str, "Please specify at least one gem name (e.g. gem build GEMNAME)")), nil),
          s(:block,
            s(:send,
              s(:lvar, :args), :select),
            s(:args,
              s(:arg, :arg)),
            s(:send,
              s(:lvar, :arg), :!~,
              s(:regexp,
                s(:str, "^-"),
                s(:regopt)))))),
      s(:def, :get_all_gem_names_and_versions,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :get_all_gem_names), :map),
          s(:args,
            s(:arg, :name)),
          s(:if,
            s(:send,
              s(:regexp,
                s(:str, "\\A(.*):("),
                s(:begin,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Requirement), :PATTERN_RAW)),
                s(:str, ")\\z"),
                s(:regopt)), :=~,
              s(:lvar, :name)),
            s(:array,
              s(:nth_ref, 1),
              s(:nth_ref, 2)),
            s(:array,
              s(:lvar, :name))))),
      s(:def, :get_one_gem_name,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :args))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :args), :nil?),
              s(:send,
                s(:lvar, :args), :empty?)),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError),
              s(:str, "Please specify a gem name on the command line (e.g. gem build GEMNAME)")), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :args), :size), :>,
              s(:int, 1)),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :CommandLineError),
              s(:dstr,
                s(:str, "Too many gem names ("),
                s(:begin,
                  s(:send,
                    s(:lvar, :args), :join,
                    s(:str, ", "))),
                s(:str, "); please specify only one"))), nil),
          s(:send,
            s(:lvar, :args), :first))),
      s(:def, :get_one_optional_argument,
        s(:args),
        s(:begin,
          s(:lvasgn, :args,
            s(:or,
              s(:send,
                s(:send, nil, :options), :[],
                s(:sym, :args)),
              s(:array))),
          s(:send,
            s(:lvar, :args), :first))),
      s(:def, :arguments,
        s(:args),
        s(:str, "")),
      s(:def, :defaults_str,
        s(:args),
        s(:str, "")),
      s(:def, :description,
        s(:args),
        s(:nil)),
      s(:def, :usage,
        s(:args),
        s(:send, nil, :program_name)),
      s(:def, :show_help,
        s(:args),
        s(:begin,
          s(:send,
            s(:send, nil, :parser), :program_name=,
            s(:send, nil, :usage)),
          s(:send, nil, :say,
            s(:send, nil, :parser)))),
      s(:def, :invoke,
        s(:args,
          s(:restarg, :args)),
        s(:send, nil, :invoke_with_build_args,
          s(:lvar, :args),
          s(:nil))),
      s(:def, :invoke_with_build_args,
        s(:args,
          s(:arg, :args),
          s(:arg, :build_args)),
        s(:begin,
          s(:send, nil, :handle_options,
            s(:lvar, :args)),
          s(:send,
            s(:send, nil, :options), :[]=,
            s(:sym, :build_args),
            s(:lvar, :build_args)),
          s(:if,
            s(:send,
              s(:send, nil, :options), :[],
              s(:sym, :help)),
            s(:send, nil, :show_help),
            s(:if,
              s(:ivar, :@when_invoked),
              s(:send,
                s(:ivar, :@when_invoked), :call,
                s(:send, nil, :options)),
              s(:send, nil, :execute))))),
      s(:def, :when_invoked,
        s(:args,
          s(:blockarg, :block)),
        s(:ivasgn, :@when_invoked,
          s(:lvar, :block))),
      s(:def, :add_option,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :handler)),
        s(:begin,
          s(:lvasgn, :group_name,
            s(:if,
              s(:send,
                s(:const, nil, :Symbol), :===,
                s(:send,
                  s(:lvar, :opts), :first)),
              s(:send,
                s(:lvar, :opts), :shift),
              s(:sym, :options))),
          s(:send,
            s(:send,
              s(:ivar, :@option_groups), :[],
              s(:lvar, :group_name)), :<<,
            s(:array,
              s(:lvar, :opts),
              s(:lvar, :handler))))),
      s(:def, :remove_option,
        s(:args,
          s(:arg, :name)),
        s(:block,
          s(:send,
            s(:ivar, :@option_groups), :each),
          s(:args,
            s(:arg, :_),
            s(:arg, :option_list)),
          s(:block,
            s(:send,
              s(:lvar, :option_list), :reject!),
            s(:args,
              s(:arg, :args),
              s(:arg, :_)),
            s(:block,
              s(:send,
                s(:lvar, :args), :any?),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:lvar, :x), :=~,
                s(:regexp,
                  s(:str, "^"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:regopt))))))),
      s(:def, :merge_options,
        s(:args,
          s(:arg, :new_options)),
        s(:begin,
          s(:ivasgn, :@options,
            s(:send,
              s(:ivar, :@defaults), :clone)),
          s(:block,
            s(:send,
              s(:lvar, :new_options), :each),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:ivar, :@options), :[]=,
              s(:lvar, :k),
              s(:lvar, :v))))),
      s(:def, :handles?,
        s(:args,
          s(:arg, :args)),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send,
                s(:send, nil, :parser), :parse!,
                s(:send,
                  s(:lvar, :args), :dup)),
              s(:return,
                s(:true))),
            s(:resbody, nil, nil,
              s(:return,
                s(:false))), nil))),
      s(:def, :handle_options,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:lvasgn, :args,
            s(:send, nil, :add_extra_args,
              s(:lvar, :args))),
          s(:ivasgn, :@options,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:send,
                s(:const, nil, :Marshal), :dump,
                s(:ivar, :@defaults)))),
          s(:send,
            s(:send, nil, :parser), :parse!,
            s(:lvar, :args)),
          s(:send,
            s(:ivar, :@options), :[]=,
            s(:sym, :args),
            s(:lvar, :args)))),
      s(:def, :add_extra_args,
        s(:args,
          s(:arg, :args)),
        s(:begin,
          s(:lvasgn, :result,
            s(:array)),
          s(:lvasgn, :s_extra,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :specific_extra_args,
              s(:ivar, :@command))),
          s(:lvasgn, :extra,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Command), :extra_args), :+,
              s(:lvar, :s_extra))),
          s(:until,
            s(:send,
              s(:lvar, :extra), :empty?),
            s(:begin,
              s(:lvasgn, :ex,
                s(:array)),
              s(:send,
                s(:lvar, :ex), :<<,
                s(:send,
                  s(:lvar, :extra), :shift)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :extra), :first), :to_s), :=~,
                  s(:regexp,
                    s(:str, "^[^-]"),
                    s(:regopt))),
                s(:send,
                  s(:lvar, :ex), :<<,
                  s(:send,
                    s(:lvar, :extra), :shift)), nil),
              s(:if,
                s(:send, nil, :handles?,
                  s(:lvar, :ex)),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:lvar, :ex)), nil))),
          s(:send,
            s(:lvar, :result), :flatten!),
          s(:send,
            s(:lvar, :result), :concat,
            s(:lvar, :args)),
          s(:lvar, :result))),
      s(:send, nil, :private),
      s(:def, :add_parser_description,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :description), nil,
            s(:return)),
          s(:lvasgn, :formatted,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :description), :split,
                    s(:str, "\n\n")), :map),
                s(:args,
                  s(:arg, :chunk)),
                s(:send, nil, :wrap,
                  s(:lvar, :chunk),
                  s(:send,
                    s(:int, 80), :-,
                    s(:int, 4)))), :join,
              s(:str, "\n"))),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:nil)),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:str, "  Description:")),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :formatted), :split,
                s(:str, "\n")), :each),
            s(:args,
              s(:arg, :line)),
            s(:send,
              s(:ivar, :@parser), :separator,
              s(:dstr,
                s(:str, "    "),
                s(:begin,
                  s(:send,
                    s(:lvar, :line), :rstrip))))))),
      s(:def, :add_parser_options,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:nil)),
          s(:lvasgn, :regular_options,
            s(:send,
              s(:ivar, :@option_groups), :delete,
              s(:sym, :options))),
          s(:send, nil, :configure_options,
            s(:str, ""),
            s(:lvar, :regular_options)),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:ivar, :@option_groups), :sort_by),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :_)),
                s(:send,
                  s(:lvar, :n), :to_s)), :each),
            s(:args,
              s(:arg, :group_name),
              s(:arg, :option_list)),
            s(:begin,
              s(:send,
                s(:ivar, :@parser), :separator,
                s(:nil)),
              s(:send, nil, :configure_options,
                s(:lvar, :group_name),
                s(:lvar, :option_list)))))),
      s(:def, :add_parser_run_info,
        s(:args,
          s(:arg, :title),
          s(:arg, :content)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :content), :empty?),
            s(:return), nil),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:nil)),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:dstr,
              s(:str, "  "),
              s(:begin,
                s(:lvar, :title)),
              s(:str, ":"))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :content), :split,
                s(:regexp,
                  s(:str, "\\n"),
                  s(:regopt))), :each),
            s(:args,
              s(:arg, :line)),
            s(:send,
              s(:ivar, :@parser), :separator,
              s(:dstr,
                s(:str, "    "),
                s(:begin,
                  s(:lvar, :line))))))),
      s(:def, :add_parser_summary,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@summary), nil,
            s(:return)),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:nil)),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:str, "  Summary:")),
          s(:block,
            s(:send,
              s(:send,
                s(:send, nil, :wrap,
                  s(:ivar, :@summary),
                  s(:send,
                    s(:int, 80), :-,
                    s(:int, 4))), :split,
                s(:str, "\n")), :each),
            s(:args,
              s(:arg, :line)),
            s(:send,
              s(:ivar, :@parser), :separator,
              s(:dstr,
                s(:str, "    "),
                s(:begin,
                  s(:send,
                    s(:lvar, :line), :strip))))))),
      s(:def, :parser,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@parser), :nil?),
            s(:send, nil, :create_option_parser), nil),
          s(:ivar, :@parser))),
      s(:def, :create_option_parser,
        s(:args),
        s(:begin,
          s(:ivasgn, :@parser,
            s(:send,
              s(:const, nil, :OptionParser), :new)),
          s(:send, nil, :add_parser_options),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:nil)),
          s(:send, nil, :configure_options,
            s(:str, "Common"),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Command), :common_options)),
          s(:send, nil, :add_parser_run_info,
            s(:str, "Arguments"),
            s(:send, nil, :arguments)),
          s(:send, nil, :add_parser_summary),
          s(:send, nil, :add_parser_description),
          s(:send, nil, :add_parser_run_info,
            s(:str, "Defaults"),
            s(:send, nil, :defaults_str)))),
      s(:def, :configure_options,
        s(:args,
          s(:arg, :header),
          s(:arg, :option_list)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :option_list), :nil?),
              s(:send,
                s(:lvar, :option_list), :empty?)),
            s(:return), nil),
          s(:lvasgn, :header,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :header), :to_s), :empty?),
              s(:str, ""),
              s(:dstr,
                s(:begin,
                  s(:lvar, :header)),
                s(:str, " ")))),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:dstr,
              s(:str, "  "),
              s(:begin,
                s(:lvar, :header)),
              s(:str, "Options:"))),
          s(:block,
            s(:send,
              s(:lvar, :option_list), :each),
            s(:args,
              s(:arg, :args),
              s(:arg, :handler)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :args), :select),
                s(:args,
                  s(:arg, :arg)),
                s(:send,
                  s(:lvar, :arg), :=~,
                  s(:regexp,
                    s(:str, "^-"),
                    s(:regopt)))),
              s(:block,
                s(:send,
                  s(:ivar, :@parser), :on,
                  s(:splat,
                    s(:lvar, :args))),
                s(:args,
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :handler), :call,
                  s(:lvar, :value),
                  s(:ivar, :@options))))),
          s(:send,
            s(:ivar, :@parser), :separator,
            s(:str, "")))),
      s(:def, :wrap,
        s(:args,
          s(:arg, :text),
          s(:arg, :width)),
        s(:send,
          s(:lvar, :text), :gsub,
          s(:regexp,
            s(:str, "(.{1,"),
            s(:begin,
              s(:lvar, :width)),
            s(:str, "})( +|$\\n?)|(.{1,"),
            s(:begin,
              s(:lvar, :width)),
            s(:str, "})"),
            s(:regopt)),
          s(:str, "\\1\\3\n"))),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "-h"),
          s(:str, "--help"),
          s(:str, "Get help on this command")),
        s(:args,
          s(:arg, :value),
          s(:arg, :options)),
        s(:send,
          s(:lvar, :options), :[]=,
          s(:sym, :help),
          s(:true))),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "-V"),
          s(:str, "--[no-]verbose"),
          s(:str, "Set the verbose level of output")),
        s(:args,
          s(:arg, :value),
          s(:arg, :options)),
        s(:if,
          s(:and,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :verbose),
            s(:lvar, :value)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :verbose=,
            s(:int, 1)),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :configuration), :verbose=,
            s(:lvar, :value)))),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "-q"),
          s(:str, "--quiet"),
          s(:str, "Silence commands")),
        s(:args,
          s(:arg, :value),
          s(:arg, :options)),
        s(:send,
          s(:send,
            s(:const, nil, :Gem), :configuration), :verbose=,
          s(:false))),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "--config-file FILE"),
          s(:str, "Use this config file instead of default")),
        s(:args), nil),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "--backtrace"),
          s(:str, "Show stack backtrace on errors")),
        s(:args), nil),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "--debug"),
          s(:str, "Turn on Ruby debugging")),
        s(:args), nil),
      s(:block,
        s(:send, nil, :add_common_option,
          s(:str, "--norc"),
          s(:str, "Avoid loading any .gemrc file")),
        s(:args), nil),
      s(:casgn, nil, :HELP,
        s(:dstr,
          s(:str, "RubyGems is a sophisticated package manager for Ruby.  This is a\n"),
          s(:str, "basic help message containing pointers to more information.\n"),
          s(:str, "\n"),
          s(:str, "  Usage:\n"),
          s(:str, "    gem -h/--help\n"),
          s(:str, "    gem -v/--version\n"),
          s(:str, "    gem command [arguments...] [options...]\n"),
          s(:str, "\n"),
          s(:str, "  Examples:\n"),
          s(:str, "    gem install rake\n"),
          s(:str, "    gem list --local\n"),
          s(:str, "    gem build package.gemspec\n"),
          s(:str, "    gem help install\n"),
          s(:str, "\n"),
          s(:str, "  Further help:\n"),
          s(:str, "    gem help commands            list all 'gem' commands\n"),
          s(:str, "    gem help examples            show some examples of usage\n"),
          s(:str, "    gem help gem_dependencies    gem dependencies file guide\n"),
          s(:str, "    gem help platforms           gem platforms guide\n"),
          s(:str, "    gem help <COMMAND>           show help on COMMAND\n"),
          s(:str, "                                   (e.g. 'gem help install')\n"),
          s(:str, "    gem server                   present a web page at\n"),
          s(:str, "                                 http://localhost:8808/\n"),
          s(:str, "                                 with info about installed gems\n"),
          s(:str, "  Further information:\n"),
          s(:str, "    http://guides.rubygems.org\n"))))),
  s(:module,
    s(:const,
      s(:const, nil, :Gem), :Commands), nil))
