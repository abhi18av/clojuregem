s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/version")),
  s(:send, nil, :require,
    s(:str, "rubygems/requirement")),
  s(:send, nil, :require,
    s(:str, "rubygems/platform")),
  s(:send, nil, :require,
    s(:str, "rubygems/deprecate")),
  s(:send, nil, :require,
    s(:str, "rubygems/basic_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/stub_specification")),
  s(:send, nil, :require,
    s(:str, "rubygems/util/list")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Specification),
    s(:const,
      s(:const, nil, :Gem), :BasicSpecification),
    s(:begin,
      s(:casgn, nil, :NONEXISTENT_SPECIFICATION_VERSION,
        s(:int, -1)),
      s(:casgn, nil, :CURRENT_SPECIFICATION_VERSION,
        s(:int, 4)),
      s(:casgn, nil, :SPECIFICATION_VERSION_HISTORY,
        s(:hash,
          s(:pair,
            s(:int, -1),
            s(:array,
              s(:str, "(RubyGems versions up to and including 0.7 did not have versioned specifications)"))),
          s(:pair,
            s(:int, 1),
            s(:array,
              s(:str, "Deprecated \"test_suite_file\" in favor of the new, but equivalent, \"test_files\""),
              s(:str, "\"test_file=x\" is a shortcut for \"test_files=[x]\""))),
          s(:pair,
            s(:int, 2),
            s(:array,
              s(:str, "Added \"required_rubygems_version\""),
              s(:str, "Now forward-compatible with future versions"))),
          s(:pair,
            s(:int, 3),
            s(:array,
              s(:str, "Added Fixnum validation to the specification_version"))),
          s(:pair,
            s(:int, 4),
            s(:array,
              s(:str, "Added sandboxed freeform metadata to the specification version."))))),
      s(:casgn, nil, :MARSHAL_FIELDS,
        s(:hash,
          s(:pair,
            s(:int, -1),
            s(:int, 16)),
          s(:pair,
            s(:int, 1),
            s(:int, 16)),
          s(:pair,
            s(:int, 2),
            s(:int, 16)),
          s(:pair,
            s(:int, 3),
            s(:int, 17)),
          s(:pair,
            s(:int, 4),
            s(:int, 18)))),
      s(:lvasgn, :today,
        s(:send,
          s(:send,
            s(:const, nil, :Time), :now), :utc)),
      s(:casgn, nil, :TODAY,
        s(:send,
          s(:const, nil, :Time), :utc,
          s(:send,
            s(:lvar, :today), :year),
          s(:send,
            s(:lvar, :today), :month),
          s(:send,
            s(:lvar, :today), :day))),
      s(:casgn, nil, :LOAD_CACHE,
        s(:hash)),
      s(:if,
        s(:defined?,
          s(:send, nil, :private_constant)),
        s(:send, nil, :private_constant,
          s(:sym, :LOAD_CACHE)), nil),
      s(:cvasgn, :@@required_attributes,
        s(:array,
          s(:sym, :rubygems_version),
          s(:sym, :specification_version),
          s(:sym, :name),
          s(:sym, :version),
          s(:sym, :date),
          s(:sym, :summary),
          s(:sym, :require_paths))),
      s(:cvasgn, :@@default_value,
        s(:hash,
          s(:pair,
            s(:sym, :authors),
            s(:array)),
          s(:pair,
            s(:sym, :autorequire),
            s(:nil)),
          s(:pair,
            s(:sym, :bindir),
            s(:str, "bin")),
          s(:pair,
            s(:sym, :cert_chain),
            s(:array)),
          s(:pair,
            s(:sym, :date),
            s(:const, nil, :TODAY)),
          s(:pair,
            s(:sym, :dependencies),
            s(:array)),
          s(:pair,
            s(:sym, :description),
            s(:nil)),
          s(:pair,
            s(:sym, :email),
            s(:nil)),
          s(:pair,
            s(:sym, :executables),
            s(:array)),
          s(:pair,
            s(:sym, :extensions),
            s(:array)),
          s(:pair,
            s(:sym, :extra_rdoc_files),
            s(:array)),
          s(:pair,
            s(:sym, :files),
            s(:array)),
          s(:pair,
            s(:sym, :homepage),
            s(:nil)),
          s(:pair,
            s(:sym, :licenses),
            s(:array)),
          s(:pair,
            s(:sym, :metadata),
            s(:hash)),
          s(:pair,
            s(:sym, :name),
            s(:nil)),
          s(:pair,
            s(:sym, :platform),
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY)),
          s(:pair,
            s(:sym, :post_install_message),
            s(:nil)),
          s(:pair,
            s(:sym, :rdoc_options),
            s(:array)),
          s(:pair,
            s(:sym, :require_paths),
            s(:array,
              s(:str, "lib"))),
          s(:pair,
            s(:sym, :required_ruby_version),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:pair,
            s(:sym, :required_rubygems_version),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:pair,
            s(:sym, :requirements),
            s(:array)),
          s(:pair,
            s(:sym, :rubyforge_project),
            s(:nil)),
          s(:pair,
            s(:sym, :rubygems_version),
            s(:const,
              s(:const, nil, :Gem), :VERSION)),
          s(:pair,
            s(:sym, :signing_key),
            s(:nil)),
          s(:pair,
            s(:sym, :specification_version),
            s(:const, nil, :CURRENT_SPECIFICATION_VERSION)),
          s(:pair,
            s(:sym, :summary),
            s(:nil)),
          s(:pair,
            s(:sym, :test_files),
            s(:array)),
          s(:pair,
            s(:sym, :version),
            s(:nil)))),
      s(:casgn, nil, :Dupable,
        s(:hash)),
      s(:block,
        s(:send,
          s(:cvar, :@@default_value), :each),
        s(:args,
          s(:arg, :k),
          s(:arg, :v)),
        s(:case,
          s(:lvar, :v),
          s(:when,
            s(:const, nil, :Time),
            s(:const, nil, :Numeric),
            s(:const, nil, :Symbol),
            s(:true),
            s(:false),
            s(:nil),
            s(:send,
              s(:const, nil, :Dupable), :[]=,
              s(:lvar, :k),
              s(:false))),
          s(:send,
            s(:const, nil, :Dupable), :[]=,
            s(:lvar, :k),
            s(:true)))),
      s(:cvasgn, :@@attributes,
        s(:block,
          s(:send,
            s(:send,
              s(:cvar, :@@default_value), :keys), :sort_by),
          s(:args,
            s(:arg, :s)),
          s(:send,
            s(:lvar, :s), :to_s))),
      s(:cvasgn, :@@array_attributes,
        s(:send,
          s(:block,
            s(:send,
              s(:cvar, :@@default_value), :reject),
            s(:args,
              s(:arg, :k),
              s(:arg, :v)),
            s(:send,
              s(:lvar, :v), :!=,
              s(:array))), :keys)),
      s(:masgn,
        s(:mlhs,
          s(:cvasgn, :@@nil_attributes),
          s(:cvasgn, :@@non_nil_attributes)),
        s(:block,
          s(:send,
            s(:send,
              s(:cvar, :@@default_value), :keys), :partition),
          s(:args,
            s(:arg, :k)),
          s(:send,
            s(:send,
              s(:cvar, :@@default_value), :[],
              s(:lvar, :k)), :nil?))),
      s(:cvasgn, :@@stubs_by_name,
        s(:hash)),
      s(:casgn, nil, :NOT_FOUND,
        s(:send,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :to_spec),
            s(:sym, :this)), :new)),
      s(:cvasgn, :@@spec_with_requirable_file,
        s(:hash)),
      s(:cvasgn, :@@active_stub_with_requirable_file,
        s(:hash)),
      s(:send, nil, :attr_accessor,
        s(:sym, :name)),
      s(:send, nil, :attr_reader,
        s(:sym, :version)),
      s(:def, :require_paths=,
        s(:args,
          s(:arg, :val)),
        s(:ivasgn, :@require_paths,
          s(:send, nil, :Array,
            s(:lvar, :val)))),
      s(:send, nil, :attr_accessor,
        s(:sym, :rubygems_version)),
      s(:send, nil, :attr_reader,
        s(:sym, :summary)),
      s(:def, :author=,
        s(:args,
          s(:arg, :o)),
        s(:send,
          s(:self), :authors=,
          s(:array,
            s(:lvar, :o)))),
      s(:def, :authors=,
        s(:args,
          s(:arg, :value)),
        s(:ivasgn, :@authors,
          s(:send,
            s(:send,
              s(:send, nil, :Array,
                s(:lvar, :value)), :flatten), :grep,
            s(:const, nil, :String)))),
      s(:def, :platform=,
        s(:args,
          s(:arg, :platform)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:ivar, :@original_platform), :nil?),
              s(:send,
                s(:ivar, :@original_platform), :==,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY))),
            s(:ivasgn, :@original_platform,
              s(:lvar, :platform)), nil),
          s(:case,
            s(:lvar, :platform),
            s(:when,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :CURRENT),
              s(:begin,
                s(:ivasgn, :@new_platform,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :local)),
                s(:ivasgn, :@original_platform,
                  s(:send,
                    s(:ivar, :@new_platform), :to_s)))),
            s(:when,
              s(:const,
                s(:const, nil, :Gem), :Platform),
              s(:ivasgn, :@new_platform,
                s(:lvar, :platform))),
            s(:when,
              s(:nil),
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY),
              s(:ivasgn, :@new_platform,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY))),
            s(:when,
              s(:str, "mswin32"),
              s(:ivasgn, :@new_platform,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:str, "x86-mswin32")))),
            s(:when,
              s(:str, "i586-linux"),
              s(:ivasgn, :@new_platform,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:str, "x86-linux")))),
            s(:when,
              s(:str, "powerpc-darwin"),
              s(:ivasgn, :@new_platform,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :new,
                  s(:str, "ppc-darwin")))),
            s(:ivasgn, :@new_platform,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :new,
                s(:lvar, :platform)))),
          s(:ivasgn, :@platform,
            s(:send,
              s(:ivar, :@new_platform), :to_s)),
          s(:send, nil, :invalidate_memoized_attributes),
          s(:ivar, :@new_platform))),
      s(:def, :files,
        s(:args),
        s(:ivasgn, :@files,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:array,
                    s(:ivar, :@files),
                    s(:ivar, :@test_files),
                    s(:send, nil, :add_bindir,
                      s(:ivar, :@executables)),
                    s(:ivar, :@extra_rdoc_files),
                    s(:ivar, :@extensions)), :flatten), :compact), :uniq), :sort))),
      s(:send, nil, :attr_accessor,
        s(:sym, :bindir)),
      s(:send, nil, :attr_accessor,
        s(:sym, :cert_chain)),
      s(:send, nil, :attr_reader,
        s(:sym, :description)),
      s(:send, nil, :attr_accessor,
        s(:sym, :email)),
      s(:send, nil, :attr_accessor,
        s(:sym, :homepage)),
      s(:send, nil, :attr_accessor,
        s(:sym, :post_install_message)),
      s(:send, nil, :attr_reader,
        s(:sym, :required_ruby_version)),
      s(:send, nil, :attr_reader,
        s(:sym, :required_rubygems_version)),
      s(:send, nil, :attr_accessor,
        s(:sym, :signing_key)),
      s(:send, nil, :attr_accessor,
        s(:sym, :metadata)),
      s(:def, :add_development_dependency,
        s(:args,
          s(:arg, :gem),
          s(:restarg, :requirements)),
        s(:send, nil, :add_dependency_with_type,
          s(:lvar, :gem),
          s(:sym, :development),
          s(:splat,
            s(:lvar, :requirements)))),
      s(:def, :add_runtime_dependency,
        s(:args,
          s(:arg, :gem),
          s(:restarg, :requirements)),
        s(:send, nil, :add_dependency_with_type,
          s(:lvar, :gem),
          s(:sym, :runtime),
          s(:splat,
            s(:lvar, :requirements)))),
      s(:def, :executables,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@executables),
          s(:array))),
      s(:def, :extensions,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@extensions),
          s(:array))),
      s(:def, :extra_rdoc_files,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@extra_rdoc_files),
          s(:array))),
      s(:def, :installed_by_version,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@installed_by_version),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :new,
            s(:int, 0)))),
      s(:def, :installed_by_version=,
        s(:args,
          s(:arg, :version)),
        s(:ivasgn, :@installed_by_version,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :new,
            s(:lvar, :version)))),
      s(:def, :license=,
        s(:args,
          s(:arg, :o)),
        s(:send,
          s(:self), :licenses=,
          s(:array,
            s(:lvar, :o)))),
      s(:def, :licenses=,
        s(:args,
          s(:arg, :licenses)),
        s(:ivasgn, :@licenses,
          s(:send, nil, :Array,
            s(:lvar, :licenses)))),
      s(:def, :rdoc_options,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@rdoc_options),
          s(:array))),
      s(:def, :required_ruby_version=,
        s(:args,
          s(:arg, :req)),
        s(:ivasgn, :@required_ruby_version,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Requirement), :create,
            s(:lvar, :req)))),
      s(:def, :required_rubygems_version=,
        s(:args,
          s(:arg, :req)),
        s(:ivasgn, :@required_rubygems_version,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Requirement), :create,
            s(:lvar, :req)))),
      s(:def, :requirements,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@requirements),
          s(:array))),
      s(:def, :test_files=,
        s(:args,
          s(:arg, :files)),
        s(:ivasgn, :@test_files,
          s(:send, nil, :Array,
            s(:lvar, :files)))),
      s(:send, nil, :attr_accessor,
        s(:sym, :activated)),
      s(:alias,
        s(:sym, :activated?),
        s(:sym, :activated)),
      s(:send, nil, :attr_accessor,
        s(:sym, :autorequire)),
      s(:send, nil, :attr_writer,
        s(:sym, :default_executable)),
      s(:send, nil, :attr_writer,
        s(:sym, :original_platform)),
      s(:send, nil, :attr_accessor,
        s(:sym, :rubyforge_project)),
      s(:send, nil, :attr_accessor,
        s(:sym, :specification_version)),
      s(:defs,
        s(:self), :_all,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:cvar, :@@all)),
              s(:cvar, :@@all)), nil,
            s(:begin,
              s(:cvasgn, :@@all,
                s(:send,
                  s(:send, nil, :stubs), :map,
                  s(:block_pass,
                    s(:sym, :to_spec)))),
              s(:lvasgn, :specs,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :loaded_specs), :each_value),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :specs), :[]=,
                  s(:lvar, :s),
                  s(:true))),
              s(:block,
                s(:send,
                  s(:cvar, :@@all), :each),
                s(:args,
                  s(:arg, :s)),
                s(:if,
                  s(:send,
                    s(:lvar, :specs), :[],
                    s(:lvar, :s)),
                  s(:send,
                    s(:lvar, :s), :activated=,
                    s(:true)), nil)))),
          s(:cvar, :@@all))),
      s(:defs,
        s(:self), :_clear_load_cache,
        s(:args),
        s(:send,
          s(:const, nil, :LOAD_CACHE), :clear)),
      s(:defs,
        s(:self), :each_gemspec,
        s(:args,
          s(:arg, :dirs)),
        s(:block,
          s(:send,
            s(:lvar, :dirs), :each),
          s(:args,
            s(:arg, :dir)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :[],
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:str, "*.gemspec"))), :each),
            s(:args,
              s(:arg, :path)),
            s(:yield,
              s(:send,
                s(:lvar, :path), :untaint))))),
      s(:defs,
        s(:self), :gemspec_stubs_in,
        s(:args,
          s(:arg, :dir),
          s(:arg, :pattern)),
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Dir), :[],
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :dir),
                  s(:lvar, :pattern))), :map),
            s(:args,
              s(:arg, :path)),
            s(:yield,
              s(:lvar, :path))), :select,
          s(:block_pass,
            s(:sym, :valid?)))),
      s(:send, nil, :private_class_method,
        s(:sym, :gemspec_stubs_in)),
      s(:defs,
        s(:self), :default_stubs,
        s(:args,
          s(:arg, :pattern)),
        s(:begin,
          s(:lvasgn, :base_dir,
            s(:send,
              s(:const, nil, :Gem), :default_dir)),
          s(:lvasgn, :gems_dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :base_dir),
              s(:str, "gems"))),
          s(:block,
            s(:send, nil, :gemspec_stubs_in,
              s(:send, nil, :default_specifications_dir),
              s(:lvar, :pattern)),
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :StubSpecification), :default_gemspec_stub,
              s(:lvar, :path),
              s(:lvar, :base_dir),
              s(:lvar, :gems_dir))))),
      s(:send, nil, :private_class_method,
        s(:sym, :default_stubs)),
      s(:defs,
        s(:self), :installed_stubs,
        s(:args,
          s(:arg, :dirs),
          s(:arg, :pattern)),
        s(:block,
          s(:send, nil, :map_stubs,
            s(:lvar, :dirs),
            s(:lvar, :pattern)),
          s(:args,
            s(:arg, :path),
            s(:arg, :base_dir),
            s(:arg, :gems_dir)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :StubSpecification), :gemspec_stub,
            s(:lvar, :path),
            s(:lvar, :base_dir),
            s(:lvar, :gems_dir)))),
      s(:send, nil, :private_class_method,
        s(:sym, :installed_stubs)),
      s(:if,
        s(:send,
          s(:array), :respond_to?,
          s(:sym, :flat_map)),
        s(:defs,
          s(:self), :map_stubs,
          s(:args,
            s(:arg, :dirs),
            s(:arg, :pattern)),
          s(:block,
            s(:send,
              s(:lvar, :dirs), :flat_map),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:lvasgn, :base_dir,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :dir))),
              s(:lvasgn, :gems_dir,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :base_dir),
                  s(:str, "gems"))),
              s(:block,
                s(:send, nil, :gemspec_stubs_in,
                  s(:lvar, :dir),
                  s(:lvar, :pattern)),
                s(:args,
                  s(:arg, :path)),
                s(:yield,
                  s(:lvar, :path),
                  s(:lvar, :base_dir),
                  s(:lvar, :gems_dir)))))),
        s(:defs,
          s(:self), :map_stubs,
          s(:args,
            s(:arg, :dirs),
            s(:arg, :pattern)),
          s(:send,
            s(:block,
              s(:send,
                s(:lvar, :dirs), :map),
              s(:args,
                s(:arg, :dir)),
              s(:begin,
                s(:lvasgn, :base_dir,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:lvar, :dir))),
                s(:lvasgn, :gems_dir,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :base_dir),
                    s(:str, "gems"))),
                s(:block,
                  s(:send, nil, :gemspec_stubs_in,
                    s(:lvar, :dir),
                    s(:lvar, :pattern)),
                  s(:args,
                    s(:arg, :path)),
                  s(:yield,
                    s(:lvar, :path),
                    s(:lvar, :base_dir),
                    s(:lvar, :gems_dir))))), :flatten,
            s(:int, 1)))),
      s(:send, nil, :private_class_method,
        s(:sym, :map_stubs)),
      s(:lvasgn, :uniq_takes_a_block,
        s(:false)),
      s(:block,
        s(:send,
          s(:array,
            s(:int, 1),
            s(:int, 2)), :uniq),
        s(:args),
        s(:lvasgn, :uniq_takes_a_block,
          s(:true))),
      s(:if,
        s(:lvar, :uniq_takes_a_block),
        s(:defs,
          s(:self), :uniq_by,
          s(:args,
            s(:arg, :list),
            s(:blockarg, :block)),
          s(:send,
            s(:lvar, :list), :uniq,
            s(:block_pass,
              s(:lvar, :block)))),
        s(:defs,
          s(:self), :uniq_by,
          s(:args,
            s(:arg, :list)),
          s(:begin,
            s(:lvasgn, :values,
              s(:hash)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :item)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:yield,
                    s(:lvar, :item))),
                s(:or_asgn,
                  s(:send,
                    s(:lvar, :values), :[],
                    s(:lvar, :value)),
                  s(:lvar, :item)))),
            s(:send,
              s(:lvar, :values), :values)))),
      s(:send, nil, :private_class_method,
        s(:sym, :uniq_by)),
      s(:if,
        s(:send,
          s(:array), :respond_to?,
          s(:sym, :sort_by!)),
        s(:defs,
          s(:self), :sort_by!,
          s(:args,
            s(:arg, :list),
            s(:blockarg, :block)),
          s(:send,
            s(:lvar, :list), :sort_by!,
            s(:block_pass,
              s(:lvar, :block)))),
        s(:defs,
          s(:self), :sort_by!,
          s(:args,
            s(:arg, :list),
            s(:blockarg, :block)),
          s(:send,
            s(:lvar, :list), :replace,
            s(:send,
              s(:lvar, :list), :sort_by,
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:send, nil, :private_class_method,
        s(:sym, :sort_by!)),
      s(:defs,
        s(:self), :each_spec,
        s(:args,
          s(:arg, :dirs)),
        s(:block,
          s(:send, nil, :each_gemspec,
            s(:lvar, :dirs)),
          s(:args,
            s(:arg, :path)),
          s(:begin,
            s(:lvasgn, :spec,
              s(:send,
                s(:self), :load,
                s(:lvar, :path))),
            s(:if,
              s(:lvar, :spec),
              s(:yield,
                s(:lvar, :spec)), nil)))),
      s(:defs,
        s(:self), :stubs,
        s(:args),
        s(:or_asgn,
          s(:cvasgn, :@@stubs),
          s(:kwbegin,
            s(:lvasgn, :pattern,
              s(:str, "*.gemspec")),
            s(:lvasgn, :stubs,
              s(:send,
                s(:send, nil, :default_stubs,
                  s(:lvar, :pattern)), :concat,
                s(:send, nil, :installed_stubs,
                  s(:send, nil, :dirs),
                  s(:lvar, :pattern)))),
            s(:lvasgn, :stubs,
              s(:block,
                s(:send, nil, :uniq_by,
                  s(:lvar, :stubs)),
                s(:args,
                  s(:arg, :stub)),
                s(:send,
                  s(:lvar, :stub), :full_name))),
            s(:send, nil, :_resort!,
              s(:lvar, :stubs)),
            s(:cvasgn, :@@stubs_by_name,
              s(:send,
                s(:lvar, :stubs), :group_by,
                s(:block_pass,
                  s(:sym, :name)))),
            s(:lvar, :stubs)))),
      s(:casgn, nil, :EMPTY,
        s(:send,
          s(:array), :freeze)),
      s(:defs,
        s(:self), :stubs_for,
        s(:args,
          s(:arg, :name)),
        s(:if,
          s(:cvar, :@@stubs),
          s(:or,
            s(:send,
              s(:cvar, :@@stubs_by_name), :[],
              s(:lvar, :name)),
            s(:array)),
          s(:begin,
            s(:lvasgn, :pattern,
              s(:dstr,
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "-*.gemspec"))),
            s(:lvasgn, :stubs,
              s(:send,
                s(:send, nil, :default_stubs,
                  s(:lvar, :pattern)), :+,
                s(:send, nil, :installed_stubs,
                  s(:send, nil, :dirs),
                  s(:lvar, :pattern)))),
            s(:lvasgn, :stubs,
              s(:send,
                s(:block,
                  s(:send, nil, :uniq_by,
                    s(:lvar, :stubs)),
                  s(:args,
                    s(:arg, :stub)),
                  s(:send,
                    s(:lvar, :stub), :full_name)), :group_by,
                s(:block_pass,
                  s(:sym, :name)))),
            s(:block,
              s(:send,
                s(:lvar, :stubs), :each_value),
              s(:args,
                s(:arg, :v)),
              s(:block,
                s(:send, nil, :sort_by!,
                  s(:lvar, :v)),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :i), :version))),
            s(:send,
              s(:cvar, :@@stubs_by_name), :merge!,
              s(:lvar, :stubs)),
            s(:or_asgn,
              s(:send,
                s(:cvar, :@@stubs_by_name), :[],
                s(:lvar, :name)),
              s(:const, nil, :EMPTY))))),
      s(:defs,
        s(:self), :_resort!,
        s(:args,
          s(:arg, :specs)),
        s(:block,
          s(:send,
            s(:lvar, :specs), :sort!),
          s(:args,
            s(:arg, :a),
            s(:arg, :b)),
          s(:begin,
            s(:lvasgn, :names,
              s(:send,
                s(:send,
                  s(:lvar, :a), :name), :<=>,
                s(:send,
                  s(:lvar, :b), :name))),
            s(:if,
              s(:send,
                s(:lvar, :names), :nonzero?),
              s(:next,
                s(:lvar, :names)), nil),
            s(:send,
              s(:send,
                s(:lvar, :b), :version), :<=>,
              s(:send,
                s(:lvar, :a), :version))))),
      s(:defs,
        s(:self), :load_defaults,
        s(:args),
        s(:block,
          s(:send, nil, :each_spec,
            s(:array,
              s(:send, nil, :default_specifications_dir))),
          s(:args,
            s(:arg, :spec)),
          s(:send,
            s(:const, nil, :Gem), :register_default_spec,
            s(:lvar, :spec)))),
      s(:defs,
        s(:self), :add_spec,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip), nil,
            s(:send, nil, :warn,
              s(:str, "Gem::Specification.add_spec is deprecated and will be removed in Rubygems 3.0"))),
          s(:if,
            s(:lvar, :spec), nil,
            s(:send, nil, :raise,
              s(:str, "nil spec!"))),
          s(:if,
            s(:send,
              s(:send, nil, :_all), :include?,
              s(:lvar, :spec)),
            s(:return), nil),
          s(:send,
            s(:send, nil, :_all), :<<,
            s(:lvar, :spec)),
          s(:send,
            s(:send, nil, :stubs), :<<,
            s(:lvar, :spec)),
          s(:send,
            s(:begin,
              s(:or_asgn,
                s(:send,
                  s(:cvar, :@@stubs_by_name), :[],
                  s(:send,
                    s(:lvar, :spec), :name)),
                s(:array))), :<<,
            s(:lvar, :spec)),
          s(:block,
            s(:send, nil, :sort_by!,
              s(:send,
                s(:cvar, :@@stubs_by_name), :[],
                s(:send,
                  s(:lvar, :spec), :name))),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :version)),
          s(:send, nil, :_resort!,
            s(:send, nil, :_all)),
          s(:send, nil, :_resort!,
            s(:send, nil, :stubs)))),
      s(:defs,
        s(:self), :add_specs,
        s(:args,
          s(:restarg, :specs)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip), nil,
            s(:send, nil, :warn,
              s(:str, "Gem::Specification.add_specs is deprecated and will be removed in Rubygems 3.0"))),
          s(:if,
            s(:send,
              s(:lvar, :specs), :any?,
              s(:block_pass,
                s(:sym, :nil?))),
            s(:send, nil, :raise,
              s(:str, "nil spec!")), nil),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip_during),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :specs), :each),
              s(:args,
                s(:arg, :spec)),
              s(:send, nil, :add_spec,
                s(:lvar, :spec)))))),
      s(:defs,
        s(:self), :all,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip), nil,
            s(:send, nil, :warn,
              s(:dstr,
                s(:str, "NOTE: Specification.all called from "),
                s(:begin,
                  s(:send,
                    s(:send, nil, :caller), :first))))),
          s(:send, nil, :_all))),
      s(:defs,
        s(:self), :all=,
        s(:args,
          s(:arg, :specs)),
        s(:begin,
          s(:cvasgn, :@@stubs_by_name,
            s(:send,
              s(:lvar, :specs), :group_by,
              s(:block_pass,
                s(:sym, :name)))),
          s(:cvasgn, :@@all,
            s(:cvasgn, :@@stubs,
              s(:lvar, :specs))))),
      s(:defs,
        s(:self), :all_names,
        s(:args),
        s(:send,
          s(:send,
            s(:self), :_all), :map,
          s(:block_pass,
            s(:sym, :full_name)))),
      s(:defs,
        s(:self), :array_attributes,
        s(:args),
        s(:send,
          s(:cvar, :@@array_attributes), :dup)),
      s(:defs,
        s(:self), :attribute_names,
        s(:args),
        s(:send,
          s(:cvar, :@@attributes), :dup)),
      s(:defs,
        s(:self), :dirs,
        s(:args),
        s(:or_asgn,
          s(:cvasgn, :@@dirs),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :path), :collect),
            s(:args,
              s(:arg, :dir)),
            s(:send,
              s(:const, nil, :File), :join,
              s(:send,
                s(:send,
                  s(:lvar, :dir), :dup), :untaint),
              s(:str, "specifications"))))),
      s(:defs,
        s(:self), :dirs=,
        s(:args,
          s(:arg, :dirs)),
        s(:begin,
          s(:send,
            s(:self), :reset),
          s(:cvasgn, :@@dirs,
            s(:block,
              s(:send,
                s(:send, nil, :Array,
                  s(:lvar, :dirs)), :map),
              s(:args,
                s(:arg, :dir)),
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :dir),
                s(:str, "specifications")))))),
      s(:send, nil, :extend,
        s(:const, nil, :Enumerable)),
      s(:defs,
        s(:self), :each,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :enum_for,
                s(:sym, :each)))),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :_all), :each),
            s(:args,
              s(:arg, :x)),
            s(:yield,
              s(:lvar, :x))))),
      s(:defs,
        s(:self), :find_all_by_name,
        s(:args,
          s(:arg, :name),
          s(:restarg, :requirements)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :requirements), :empty?),
            s(:lvasgn, :requirements,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)), nil),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name),
              s(:splat,
                s(:lvar, :requirements))), :matching_specs))),
      s(:defs,
        s(:self), :find_by_name,
        s(:args,
          s(:arg, :name),
          s(:restarg, :requirements)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :requirements), :empty?),
            s(:lvasgn, :requirements,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)), nil),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name),
              s(:splat,
                s(:lvar, :requirements))), :to_spec))),
      s(:defs,
        s(:self), :find_by_path,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :path,
            s(:send,
              s(:send,
                s(:lvar, :path), :dup), :freeze)),
          s(:lvasgn, :spec,
            s(:or_asgn,
              s(:send,
                s(:cvar, :@@spec_with_requirable_file), :[],
                s(:lvar, :path)),
              s(:begin,
                s(:or,
                  s(:block,
                    s(:send,
                      s(:send, nil, :stubs), :find),
                    s(:args,
                      s(:arg, :s)),
                    s(:send,
                      s(:lvar, :s), :contains_requirable_file?,
                      s(:lvar, :path))),
                  s(:const, nil, :NOT_FOUND))))),
          s(:send,
            s(:lvar, :spec), :to_spec))),
      s(:defs,
        s(:self), :find_inactive_by_path,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :stub,
            s(:block,
              s(:send,
                s(:send, nil, :stubs), :find),
              s(:args,
                s(:arg, :s)),
              s(:if,
                s(:send,
                  s(:lvar, :s), :activated?), nil,
                s(:send,
                  s(:lvar, :s), :contains_requirable_file?,
                  s(:lvar, :path))))),
          s(:and,
            s(:lvar, :stub),
            s(:send,
              s(:lvar, :stub), :to_spec)))),
      s(:defs,
        s(:self), :find_active_stub_by_path,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :stub,
            s(:or_asgn,
              s(:send,
                s(:cvar, :@@active_stub_with_requirable_file), :[],
                s(:lvar, :path)),
              s(:begin,
                s(:or,
                  s(:block,
                    s(:send,
                      s(:send, nil, :stubs), :find),
                    s(:args,
                      s(:arg, :s)),
                    s(:and,
                      s(:send,
                        s(:lvar, :s), :activated?),
                      s(:send,
                        s(:lvar, :s), :contains_requirable_file?,
                        s(:lvar, :path)))),
                  s(:const, nil, :NOT_FOUND))))),
          s(:send,
            s(:lvar, :stub), :this))),
      s(:defs,
        s(:self), :find_in_unresolved,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :specs,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :unresolved_deps), :values), :map),
                s(:args,
                  s(:arg, :dep)),
                s(:send,
                  s(:lvar, :dep), :to_specs)), :flatten)),
          s(:block,
            s(:send,
              s(:lvar, :specs), :find_all),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:lvar, :spec), :contains_requirable_file?,
              s(:lvar, :path))))),
      s(:defs,
        s(:self), :find_in_unresolved_tree,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :specs,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send, nil, :unresolved_deps), :values), :map),
                s(:args,
                  s(:arg, :dep)),
                s(:send,
                  s(:lvar, :dep), :to_specs)), :flatten)),
          s(:block,
            s(:send,
              s(:lvar, :specs), :reverse_each),
            s(:args,
              s(:arg, :spec)),
            s(:block,
              s(:send,
                s(:lvar, :spec), :traverse),
              s(:args,
                s(:arg, :from_spec),
                s(:arg, :dep),
                s(:arg, :to_spec),
                s(:arg, :trail)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :to_spec), :has_conflicts?),
                  s(:send,
                    s(:lvar, :to_spec), :conficts_when_loaded_with?,
                    s(:lvar, :trail))),
                s(:sym, :next),
                s(:if,
                  s(:send,
                    s(:lvar, :to_spec), :contains_requirable_file?,
                    s(:lvar, :path)),
                  s(:return,
                    s(:send,
                      s(:lvar, :trail), :reverse)), nil)))),
          s(:array))),
      s(:defs,
        s(:self), :from_yaml,
        s(:args,
          s(:arg, :input)),
        s(:begin,
          s(:send,
            s(:const, nil, :Gem), :load_yaml),
          s(:lvasgn, :input,
            s(:send, nil, :normalize_yaml_input,
              s(:lvar, :input))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const, nil, :YAML), :load,
              s(:lvar, :input))),
          s(:if,
            s(:and,
              s(:lvar, :spec),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :class), :==,
                s(:const, nil, :FalseClass))),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :EndOfYAMLException)), nil),
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :===,
              s(:lvar, :spec)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :Exception),
              s(:str, "YAML data doesn't evaluate to gem specification"))),
          s(:or_asgn,
            s(:send,
              s(:lvar, :spec), :specification_version),
            s(:const, nil, :NONEXISTENT_SPECIFICATION_VERSION)),
          s(:send,
            s(:lvar, :spec), :reset_nil_attributes_to_default),
          s(:lvar, :spec))),
      s(:defs,
        s(:self), :latest_specs,
        s(:args,
          s(:optarg, :prerelease,
            s(:false))),
        s(:send, nil, :_latest_specs,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :_all),
          s(:lvar, :prerelease))),
      s(:defs,
        s(:self), :_latest_specs,
        s(:args,
          s(:arg, :specs),
          s(:optarg, :prerelease,
            s(:false))),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :k)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :k),
                s(:hash)))),
          s(:lvasgn, :native,
            s(:hash)),
          s(:block,
            s(:send,
              s(:lvar, :specs), :reverse_each),
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:if,
                s(:lvar, :prerelease), nil,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :spec), :version), :prerelease?),
                  s(:next), nil)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :platform), :==,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:send,
                  s(:lvar, :native), :[]=,
                  s(:send,
                    s(:lvar, :spec), :name),
                  s(:send,
                    s(:lvar, :spec), :version)), nil),
              s(:send,
                s(:send,
                  s(:lvar, :result), :[],
                  s(:send,
                    s(:lvar, :spec), :name)), :[]=,
                s(:send,
                  s(:lvar, :spec), :platform),
                s(:lvar, :spec)))),
          s(:block,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :result), :map,
                        s(:block_pass,
                          s(:sym, :last))), :map,
                      s(:block_pass,
                        s(:sym, :values))), :flatten), :reject),
                s(:args,
                  s(:arg, :spec)),
                s(:begin,
                  s(:lvasgn, :minimum,
                    s(:send,
                      s(:lvar, :native), :[],
                      s(:send,
                        s(:lvar, :spec), :name))),
                  s(:and,
                    s(:lvar, :minimum),
                    s(:send,
                      s(:send,
                        s(:lvar, :spec), :version), :<,
                      s(:lvar, :minimum))))), :sort_by),
            s(:args,
              s(:arg, :tup)),
            s(:send,
              s(:lvar, :tup), :name)))),
      s(:defs,
        s(:self), :load,
        s(:args,
          s(:arg, :file)),
        s(:begin,
          s(:if,
            s(:lvar, :file), nil,
            s(:return)),
          s(:lvasgn, :_spec,
            s(:send,
              s(:const, nil, :LOAD_CACHE), :[],
              s(:lvar, :file))),
          s(:if,
            s(:lvar, :_spec),
            s(:return,
              s(:lvar, :_spec)), nil),
          s(:lvasgn, :file,
            s(:send,
              s(:send,
                s(:lvar, :file), :dup), :untaint)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :file?,
              s(:lvar, :file)), nil,
            s(:return)),
          s(:lvasgn, :code,
            s(:if,
              s(:defined?,
                s(:const, nil, :Encoding)),
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :file),
                s(:hash,
                  s(:pair,
                    s(:sym, :mode),
                    s(:str, "r:UTF-8:-")))),
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :file)))),
          s(:send,
            s(:lvar, :code), :untaint),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :_spec,
                  s(:send, nil, :eval,
                    s(:lvar, :code),
                    s(:send, nil, :binding),
                    s(:lvar, :file))),
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :===,
                    s(:lvar, :_spec)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :_spec), :loaded_from=,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:send,
                          s(:lvar, :file), :to_s))),
                    s(:send,
                      s(:const, nil, :LOAD_CACHE), :[]=,
                      s(:lvar, :file),
                      s(:lvar, :_spec)),
                    s(:return,
                      s(:lvar, :_spec))), nil),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "["),
                    s(:begin,
                      s(:lvar, :file)),
                    s(:str, "] isn't a Gem::Specification ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :_spec), :class)),
                    s(:str, " instead).")))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SignalException),
                  s(:const, nil, :SystemExit)), nil,
                s(:send, nil, :raise)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SyntaxError),
                  s(:const, nil, :Exception)),
                s(:lvasgn, :e),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "Invalid gemspec in ["),
                    s(:begin,
                      s(:lvar, :file)),
                    s(:str, "]: "),
                    s(:begin,
                      s(:lvar, :e))))), nil)),
          s(:nil))),
      s(:defs,
        s(:self), :non_nil_attributes,
        s(:args),
        s(:send,
          s(:cvar, :@@non_nil_attributes), :dup)),
      s(:defs,
        s(:self), :normalize_yaml_input,
        s(:args,
          s(:arg, :input)),
        s(:begin,
          s(:lvasgn, :result,
            s(:if,
              s(:send,
                s(:lvar, :input), :respond_to?,
                s(:sym, :read)),
              s(:send,
                s(:lvar, :input), :read),
              s(:lvar, :input))),
          s(:if,
            s(:send,
              s(:lvar, :result), :=~,
              s(:regexp,
                s(:str, "\\A--- "),
                s(:regopt))), nil,
            s(:lvasgn, :result,
              s(:send,
                s(:str, "--- "), :+,
                s(:lvar, :result)))),
          s(:lvasgn, :result,
            s(:send,
              s(:lvar, :result), :dup)),
          s(:send,
            s(:lvar, :result), :gsub!,
            s(:regexp,
              s(:str, " !!null \\n"),
              s(:regopt)),
            s(:str, " \n")),
          s(:send,
            s(:lvar, :result), :gsub!,
            s(:regexp,
              s(:str, "^(date: \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d+?)Z"),
              s(:regopt)),
            s(:str, "\\1 Z")),
          s(:lvar, :result))),
      s(:defs,
        s(:self), :outdated,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :outdated_and_latest_version), :map),
          s(:args,
            s(:arg, :local),
            s(:arg, :_)),
          s(:send,
            s(:lvar, :local), :name))),
      s(:defs,
        s(:self), :outdated_and_latest_version,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:send, nil, :enum_for,
                s(:send, nil, :__method__)))),
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :fetcher)),
          s(:block,
            s(:send,
              s(:send, nil, :latest_specs,
                s(:true)), :each),
            s(:args,
              s(:arg, :local_spec)),
            s(:begin,
              s(:lvasgn, :dependency,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:send,
                    s(:lvar, :local_spec), :name),
                  s(:dstr,
                    s(:str, ">= "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :local_spec), :version))))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :remotes)),
                s(:send,
                  s(:lvar, :fetcher), :search_for_dependency,
                  s(:lvar, :dependency))),
              s(:lvasgn, :remotes,
                s(:block,
                  s(:send,
                    s(:lvar, :remotes), :map),
                  s(:args,
                    s(:arg, :n),
                    s(:arg, :_)),
                  s(:send,
                    s(:lvar, :n), :version))),
              s(:lvasgn, :latest_remote,
                s(:send,
                  s(:send,
                    s(:lvar, :remotes), :sort), :last)),
              s(:if,
                s(:and,
                  s(:lvar, :latest_remote),
                  s(:send,
                    s(:send,
                      s(:lvar, :local_spec), :version), :<,
                    s(:lvar, :latest_remote))),
                s(:yield,
                  s(:array,
                    s(:lvar, :local_spec),
                    s(:lvar, :latest_remote))), nil))),
          s(:nil))),
      s(:defs,
        s(:self), :remove_spec,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Deprecate), :skip), nil,
            s(:send, nil, :warn,
              s(:str, "Gem::Specification.remove_spec is deprecated and will be removed in Rubygems 3.0"))),
          s(:send,
            s(:send, nil, :_all), :delete,
            s(:lvar, :spec)),
          s(:block,
            s(:send,
              s(:send, nil, :stubs), :delete_if),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:send,
                s(:lvar, :s), :full_name), :==,
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:block,
            s(:send,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:cvar, :@@stubs_by_name), :[],
                    s(:send,
                      s(:lvar, :spec), :name)),
                  s(:array))), :delete_if),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:send,
                s(:lvar, :s), :full_name), :==,
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:send, nil, :reset))),
      s(:defs,
        s(:self), :required_attribute?,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:cvar, :@@required_attributes), :include?,
          s(:send,
            s(:lvar, :name), :to_sym))),
      s(:defs,
        s(:self), :required_attributes,
        s(:args),
        s(:send,
          s(:cvar, :@@required_attributes), :dup)),
      s(:defs,
        s(:self), :reset,
        s(:args),
        s(:begin,
          s(:cvasgn, :@@dirs,
            s(:nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :pre_reset_hooks), :each),
            s(:args,
              s(:arg, :hook)),
            s(:send,
              s(:lvar, :hook), :call)),
          s(:cvasgn, :@@all,
            s(:nil)),
          s(:cvasgn, :@@stubs,
            s(:nil)),
          s(:cvasgn, :@@stubs_by_name,
            s(:hash)),
          s(:cvasgn, :@@spec_with_requirable_file,
            s(:hash)),
          s(:cvasgn, :@@active_stub_with_requirable_file,
            s(:hash)),
          s(:send, nil, :_clear_load_cache),
          s(:lvasgn, :unresolved,
            s(:send, nil, :unresolved_deps)),
          s(:if,
            s(:send,
              s(:lvar, :unresolved), :empty?), nil,
            s(:begin,
              s(:lvasgn, :w,
                s(:send,
                  s(:str, "W"), :+,
                  s(:str, "ARN"))),
              s(:send, nil, :warn,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :w)),
                  s(:str, ": Unresolved specs during Gem::Specification.reset:"))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :unresolved), :values), :each),
                s(:args,
                  s(:arg, :dep)),
                s(:send, nil, :warn,
                  s(:dstr,
                    s(:str, "      "),
                    s(:begin,
                      s(:lvar, :dep))))),
              s(:send, nil, :warn,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :w)),
                  s(:str, ": Clearing out unresolved specs."))),
              s(:send, nil, :warn,
                s(:str, "Please report a bug if this causes problems.")),
              s(:send,
                s(:lvar, :unresolved), :clear))),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :post_reset_hooks), :each),
            s(:args,
              s(:arg, :hook)),
            s(:send,
              s(:lvar, :hook), :call)))),
      s(:defs,
        s(:self), :unresolved_deps,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@unresolved_deps),
          s(:block,
            s(:send,
              s(:const, nil, :Hash), :new),
            s(:args,
              s(:arg, :h),
              s(:arg, :n)),
            s(:send,
              s(:lvar, :h), :[]=,
              s(:lvar, :n),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:lvar, :n)))))),
      s(:defs,
        s(:self), :_load,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:lvasgn, :array,
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :str))),
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :new)),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@specification_version),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 1))),
          s(:lvasgn, :current_version,
            s(:const, nil, :CURRENT_SPECIFICATION_VERSION)),
          s(:lvasgn, :field_count,
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :specification_version), :>,
                s(:lvar, :current_version)),
              s(:begin,
                s(:send,
                  s(:lvar, :spec), :instance_variable_set,
                  s(:sym, :@specification_version),
                  s(:lvar, :current_version)),
                s(:send,
                  s(:const, nil, :MARSHAL_FIELDS), :[],
                  s(:lvar, :current_version))),
              s(:send,
                s(:const, nil, :MARSHAL_FIELDS), :[],
                s(:send,
                  s(:lvar, :spec), :specification_version)))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :array), :size), :<,
              s(:lvar, :field_count)),
            s(:send, nil, :raise,
              s(:const, nil, :TypeError),
              s(:dstr,
                s(:str, "invalid Gem::Specification format "),
                s(:begin,
                  s(:send,
                    s(:lvar, :array), :inspect)))), nil),
          s(:block,
            s(:send,
              s(:lvar, :array), :map!),
            s(:args,
              s(:arg, :e)),
            s(:if,
              s(:send,
                s(:lvar, :e), :kind_of?,
                s(:const,
                  s(:const, nil, :YAML), :PrivateType)),
              s(:nil),
              s(:lvar, :e))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@rubygems_version),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 0))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@name),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 2))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@version),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 3))),
          s(:send,
            s(:lvar, :spec), :date=,
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 4))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@summary),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 5))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@required_ruby_version),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 6))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@required_rubygems_version),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 7))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@original_platform),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 8))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@dependencies),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 9))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@rubyforge_project),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 10))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@email),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 11))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@authors),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 12))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@description),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 13))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@homepage),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 14))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@has_rdoc),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 15))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@new_platform),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 16))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@platform),
            s(:send,
              s(:send,
                s(:lvar, :array), :[],
                s(:int, 16)), :to_s)),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@license),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 17))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@metadata),
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 18))),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@loaded),
            s(:false)),
          s(:send,
            s(:lvar, :spec), :instance_variable_set,
            s(:sym, :@activated),
            s(:false)),
          s(:lvar, :spec))),
      s(:def, :<=>,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send, nil, :sort_obj), :<=>,
          s(:send,
            s(:lvar, :other), :sort_obj))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:self), :class), :===,
                s(:lvar, :other)),
              s(:send,
                s(:send, nil, :name), :==,
                s(:send,
                  s(:lvar, :other), :name))),
            s(:send,
              s(:send, nil, :version), :==,
              s(:send,
                s(:lvar, :other), :version))),
          s(:send,
            s(:send, nil, :platform), :==,
            s(:send,
              s(:lvar, :other), :platform)))),
      s(:def, :_dump,
        s(:args,
          s(:arg, :limit)),
        s(:send,
          s(:const, nil, :Marshal), :dump,
          s(:array,
            s(:ivar, :@rubygems_version),
            s(:ivar, :@specification_version),
            s(:ivar, :@name),
            s(:ivar, :@version),
            s(:send, nil, :date),
            s(:ivar, :@summary),
            s(:ivar, :@required_ruby_version),
            s(:ivar, :@required_rubygems_version),
            s(:ivar, :@original_platform),
            s(:ivar, :@dependencies),
            s(:ivar, :@rubyforge_project),
            s(:ivar, :@email),
            s(:ivar, :@authors),
            s(:ivar, :@description),
            s(:ivar, :@homepage),
            s(:true),
            s(:ivar, :@new_platform),
            s(:ivar, :@licenses),
            s(:ivar, :@metadata)))),
      s(:def, :activate,
        s(:args),
        s(:begin,
          s(:lvasgn, :other,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :loaded_specs), :[],
              s(:send,
                s(:self), :name))),
          s(:if,
            s(:lvar, :other),
            s(:begin,
              s(:send, nil, :check_version_conflict,
                s(:lvar, :other)),
              s(:return,
                s(:false))), nil),
          s(:send, nil, :raise_if_conflicts),
          s(:send, nil, :activate_dependencies),
          s(:send, nil, :add_self_to_load_path),
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :loaded_specs), :[]=,
            s(:send,
              s(:self), :name),
            s(:self)),
          s(:ivasgn, :@activated,
            s(:true)),
          s(:ivasgn, :@loaded,
            s(:true)),
          s(:return,
            s(:true)))),
      s(:def, :activate_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :unresolved,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :unresolved_deps)),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :runtime_dependencies), :each),
            s(:args,
              s(:arg, :spec_dep)),
            s(:begin,
              s(:if,
                s(:lvasgn, :loaded,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Gem), :loaded_specs), :[],
                    s(:send,
                      s(:lvar, :spec_dep), :name))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :spec_dep), :matches_spec?,
                      s(:lvar, :loaded)),
                    s(:next), nil),
                  s(:lvasgn, :msg,
                    s(:dstr,
                      s(:str, "can't satisfy '"),
                      s(:begin,
                        s(:lvar, :spec_dep)),
                      s(:str, "', already activated '"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :loaded), :full_name)),
                      s(:str, "'"))),
                  s(:lvasgn, :e,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :LoadError), :new,
                      s(:lvar, :msg))),
                  s(:send,
                    s(:lvar, :e), :name=,
                    s(:send,
                      s(:lvar, :spec_dep), :name)),
                  s(:send, nil, :raise,
                    s(:lvar, :e))), nil),
              s(:lvasgn, :specs,
                s(:send,
                  s(:lvar, :spec_dep), :to_specs)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :specs), :size), :==,
                  s(:int, 1)),
                s(:send,
                  s(:send,
                    s(:lvar, :specs), :first), :activate),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send,
                      s(:lvar, :spec_dep), :name)),
                  s(:send,
                    s(:lvar, :unresolved), :[]=,
                    s(:lvar, :name),
                    s(:send,
                      s(:send,
                        s(:lvar, :unresolved), :[],
                        s(:lvar, :name)), :merge,
                      s(:lvar, :spec_dep))))))),
          s(:send,
            s(:lvar, :unresolved), :delete,
            s(:send,
              s(:self), :name)))),
      s(:def, :abbreviate,
        s(:args),
        s(:begin,
          s(:send,
            s(:self), :files=,
            s(:array)),
          s(:send,
            s(:self), :test_files=,
            s(:array)),
          s(:send,
            s(:self), :rdoc_options=,
            s(:array)),
          s(:send,
            s(:self), :extra_rdoc_files=,
            s(:array)),
          s(:send,
            s(:self), :cert_chain=,
            s(:array)))),
      s(:def, :sanitize,
        s(:args),
        s(:begin,
          s(:send,
            s(:self), :summary=,
            s(:send, nil, :sanitize_string,
              s(:send, nil, :summary))),
          s(:send,
            s(:self), :description=,
            s(:send, nil, :sanitize_string,
              s(:send, nil, :description))),
          s(:send,
            s(:self), :post_install_message=,
            s(:send, nil, :sanitize_string,
              s(:send, nil, :post_install_message))),
          s(:send,
            s(:self), :authors=,
            s(:block,
              s(:send,
                s(:send, nil, :authors), :collect),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :sanitize_string,
                s(:lvar, :a)))))),
      s(:def, :sanitize_string,
        s(:args,
          s(:arg, :string)),
        s(:begin,
          s(:if,
            s(:lvar, :string), nil,
            s(:return,
              s(:lvar, :string))),
          s(:lvasgn, :string,
            s(:send,
              s(:lvar, :string), :to_s)),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:const,
                  s(:const, nil, :Builder), :XChar), :encode,
                s(:lvar, :string)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :NameError),
                  s(:const, nil, :NoMethodError)), nil,
                s(:send,
                  s(:lvar, :string), :to_xs)), nil)))),
      s(:def, :add_bindir,
        s(:args,
          s(:arg, :executables)),
        s(:rescue,
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :executables), :nil?),
              s(:return,
                s(:nil)), nil),
            s(:if,
              s(:ivar, :@bindir),
              s(:block,
                s(:send,
                  s(:send, nil, :Array,
                    s(:lvar, :executables)), :map),
                s(:args,
                  s(:arg, :e)),
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@bindir),
                  s(:lvar, :e))),
              s(:lvar, :executables))),
          s(:resbody, nil, nil,
            s(:return,
              s(:nil))), nil)),
      s(:def, :add_dependency_with_type,
        s(:args,
          s(:arg, :dependency),
          s(:arg, :type),
          s(:restarg, :requirements)),
        s(:begin,
          s(:lvasgn, :requirements,
            s(:if,
              s(:send,
                s(:lvar, :requirements), :empty?),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default),
              s(:send,
                s(:lvar, :requirements), :flatten))),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :dependency), :respond_to?,
                s(:sym, :name)),
              s(:send,
                s(:lvar, :dependency), :respond_to?,
                s(:sym, :requirement))), nil,
            s(:lvasgn, :dependency,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:send,
                  s(:lvar, :dependency), :to_s),
                s(:lvar, :requirements),
                s(:lvar, :type)))),
          s(:send,
            s(:send, nil, :dependencies), :<<,
            s(:lvar, :dependency)))),
      s(:send, nil, :private,
        s(:sym, :add_dependency_with_type)),
      s(:alias,
        s(:sym, :add_dependency),
        s(:sym, :add_runtime_dependency)),
      s(:def, :add_self_to_load_path,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :default_gem?),
            s(:return), nil),
          s(:lvasgn, :paths,
            s(:send, nil, :full_require_paths)),
          s(:lvasgn, :insert_index,
            s(:send,
              s(:const, nil, :Gem), :load_path_insert_index)),
          s(:if,
            s(:lvar, :insert_index),
            s(:send,
              s(:gvar, :$LOAD_PATH), :insert,
              s(:lvar, :insert_index),
              s(:splat,
                s(:lvar, :paths))),
            s(:send,
              s(:gvar, :$LOAD_PATH), :unshift,
              s(:splat,
                s(:lvar, :paths)))))),
      s(:def, :author,
        s(:args),
        s(:and,
          s(:lvasgn, :val,
            s(:send, nil, :authors)),
          s(:send,
            s(:lvar, :val), :first))),
      s(:def, :authors,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@authors),
          s(:array))),
      s(:def, :bin_dir,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@bin_dir),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :gem_dir),
            s(:send, nil, :bindir)))),
      s(:def, :bin_file,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:const, nil, :File), :join,
          s(:send, nil, :bin_dir),
          s(:lvar, :name))),
      s(:def, :build_args,
        s(:args),
        s(:if,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:send, nil, :build_info_file)),
          s(:begin,
            s(:lvasgn, :build_info,
              s(:send,
                s(:const, nil, :File), :readlines,
                s(:send, nil, :build_info_file))),
            s(:lvasgn, :build_info,
              s(:block,
                s(:send,
                  s(:lvar, :build_info), :map),
                s(:args,
                  s(:arg, :x)),
                s(:send,
                  s(:lvar, :x), :strip))),
            s(:send,
              s(:lvar, :build_info), :delete,
              s(:str, "")),
            s(:lvar, :build_info)),
          s(:array))),
      s(:def, :build_extensions,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :default_gem?),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:send, nil, :extensions), :empty?),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:send, nil, :installed_by_version), :<,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "2.2.0.preview.2"))),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send, nil, :gem_build_complete_path)),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :writable?,
                s(:send, nil, :base_dir)), :!),
            s(:return), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send, nil, :base_dir),
                  s(:str, "extensions"))), :!),
            s(:return), nil),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :unresolved_deps,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Specification), :unresolved_deps), :dup)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :unresolved_deps), :clear),
                s(:send, nil, :require,
                  s(:str, "rubygems/config_file")),
                s(:send, nil, :require,
                  s(:str, "rubygems/ext")),
                s(:send, nil, :require,
                  s(:str, "rubygems/user_interaction")),
                s(:lvasgn, :ui,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :SilentUI), :new)),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :DefaultUserInteraction), :use_ui,
                    s(:lvar, :ui)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :builder,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :Gem), :Ext), :Builder), :new,
                        s(:self))),
                    s(:send,
                      s(:lvar, :builder), :build_extensions)))),
              s(:begin,
                s(:if,
                  s(:lvar, :ui),
                  s(:send,
                    s(:lvar, :ui), :close), nil),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :unresolved_deps), :replace,
                  s(:lvar, :unresolved_deps))))))),
      s(:def, :build_info_dir,
        s(:args),
        s(:send,
          s(:const, nil, :File), :join,
          s(:send, nil, :base_dir),
          s(:str, "build_info"))),
      s(:def, :build_info_file,
        s(:args),
        s(:send,
          s(:const, nil, :File), :join,
          s(:send, nil, :build_info_dir),
          s(:dstr,
            s(:begin,
              s(:send, nil, :full_name)),
            s(:str, ".info")))),
      s(:def, :bundled_gem_in_old_ruby?,
        s(:args),
        s(:and,
          s(:and,
            s(:send,
              s(:send, nil, :default_gem?), :!),
            s(:send,
              s(:const, nil, :RUBY_VERSION), :<,
              s(:str, "2.0.0"))),
          s(:send,
            s(:send, nil, :summary), :==,
            s(:dstr,
              s(:str, "This "),
              s(:begin,
                s(:send, nil, :name)),
              s(:str, " is bundled with Ruby"))))),
      s(:def, :cache_dir,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@cache_dir),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :base_dir),
            s(:str, "cache")))),
      s(:def, :cache_file,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@cache_file),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :cache_dir),
            s(:dstr,
              s(:begin,
                s(:send, nil, :full_name)),
              s(:str, ".gem"))))),
      s(:def, :conflicts,
        s(:args),
        s(:begin,
          s(:lvasgn, :conflicts,
            s(:hash)),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :runtime_dependencies), :each),
            s(:args,
              s(:arg, :dep)),
            s(:begin,
              s(:lvasgn, :spec,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :loaded_specs), :[],
                  s(:send,
                    s(:lvar, :dep), :name))),
              s(:if,
                s(:and,
                  s(:lvar, :spec),
                  s(:send,
                    s(:send,
                      s(:lvar, :spec), :satisfies_requirement?,
                      s(:lvar, :dep)), :!)),
                s(:send,
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :conflicts), :[],
                        s(:lvar, :spec)),
                      s(:array))), :<<,
                  s(:lvar, :dep)), nil))),
          s(:lvar, :conflicts))),
      s(:def, :conficts_when_loaded_with?,
        s(:args,
          s(:arg, :list_of_specs)),
        s(:begin,
          s(:lvasgn, :result,
            s(:block,
              s(:send,
                s(:lvar, :list_of_specs), :any?),
              s(:args,
                s(:arg, :spec)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :dependencies), :any?),
                s(:args,
                  s(:arg, :dep)),
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :dep), :runtime?),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :dep), :name), :==,
                        s(:send, nil, :name)))),
                  s(:send,
                    s(:send, nil, :satisfies_requirement?,
                      s(:lvar, :dep)), :!))))),
          s(:lvar, :result))),
      s(:def, :has_conflicts?,
        s(:args),
        s(:block,
          s(:send,
            s(:send,
              s(:self), :dependencies), :any?),
          s(:args,
            s(:arg, :dep)),
          s(:if,
            s(:send,
              s(:lvar, :dep), :runtime?),
            s(:begin,
              s(:lvasgn, :spec,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :loaded_specs), :[],
                  s(:send,
                    s(:lvar, :dep), :name))),
              s(:and,
                s(:lvar, :spec),
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :satisfies_requirement?,
                    s(:lvar, :dep)), :!))),
            s(:false)))),
      s(:def, :date,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@date),
          s(:const, nil, :TODAY))),
      s(:casgn, nil, :DateLike,
        s(:send,
          s(:const, nil, :Object), :new)),
      s(:defs,
        s(:const, nil, :DateLike), :===,
        s(:args,
          s(:arg, :obj)),
        s(:and,
          s(:defined?,
            s(:const,
              s(:cbase), :Date)),
          s(:send,
            s(:const, nil, :Date), :===,
            s(:lvar, :obj)))),
      s(:casgn, nil, :DateTimeFormat,
        s(:regexp,
          s(:str, "\\A\n"),
          s(:str, "     (\\d{4})-(\\d{2})-(\\d{2})\n"),
          s(:str, "     (\\s+ \\d{2}:\\d{2}:\\d{2}\\.\\d+ \\s* (Z | [-+]\\d\\d:\\d\\d) )?\n"),
          s(:str, "     \\Z"),
          s(:regopt, :x))),
      s(:def, :date=,
        s(:args,
          s(:arg, :date)),
        s(:ivasgn, :@date,
          s(:case,
            s(:lvar, :date),
            s(:when,
              s(:const, nil, :String),
              s(:if,
                s(:send,
                  s(:const, nil, :DateTimeFormat), :=~,
                  s(:lvar, :date)),
                s(:send,
                  s(:const, nil, :Time), :utc,
                  s(:send,
                    s(:nth_ref, 1), :to_i),
                  s(:send,
                    s(:nth_ref, 2), :to_i),
                  s(:send,
                    s(:nth_ref, 3), :to_i)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A(\\d{4})-(\\d{2})-(\\d{2}) \\d{2}:\\d{2}:\\d{2}\\.\\d+?Z\\z"),
                      s(:regopt)),
                    s(:lvar, :date)),
                  s(:send,
                    s(:const, nil, :Time), :utc,
                    s(:send,
                      s(:nth_ref, 1), :to_i),
                    s(:send,
                      s(:nth_ref, 2), :to_i),
                    s(:send,
                      s(:nth_ref, 3), :to_i)),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:dstr,
                      s(:str, "invalid date format in specification: "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :date), :inspect))))))),
            s(:when,
              s(:const, nil, :Time),
              s(:const, nil, :DateLike),
              s(:send,
                s(:const, nil, :Time), :utc,
                s(:send,
                  s(:lvar, :date), :year),
                s(:send,
                  s(:lvar, :date), :month),
                s(:send,
                  s(:lvar, :date), :day))),
            s(:const, nil, :TODAY)))),
      s(:def, :default_executable,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:ivar, :@default_executable)),
              s(:ivar, :@default_executable)),
            s(:lvasgn, :result,
              s(:ivar, :@default_executable)),
            s(:if,
              s(:and,
                s(:ivar, :@executables),
                s(:send,
                  s(:send,
                    s(:ivar, :@executables), :size), :==,
                  s(:int, 1))),
              s(:lvasgn, :result,
                s(:send,
                  s(:send, nil, :Array,
                    s(:ivar, :@executables)), :first)),
              s(:lvasgn, :result,
                s(:nil)))),
          s(:lvar, :result))),
      s(:def, :default_value,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:cvar, :@@default_value), :[],
          s(:lvar, :name))),
      s(:def, :dependencies,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@dependencies),
          s(:array))),
      s(:def, :dependent_gems,
        s(:args),
        s(:begin,
          s(:lvasgn, :out,
            s(:array)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :each),
            s(:args,
              s(:arg, :spec)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :dependencies), :each),
              s(:args,
                s(:arg, :dep)),
              s(:if,
                s(:send,
                  s(:self), :satisfies_requirement?,
                  s(:lvar, :dep)),
                s(:begin,
                  s(:lvasgn, :sats,
                    s(:array)),
                  s(:block,
                    s(:send, nil, :find_all_satisfiers,
                      s(:lvar, :dep)),
                    s(:args,
                      s(:arg, :sat)),
                    s(:send,
                      s(:lvar, :sats), :<<,
                      s(:lvar, :sat))),
                  s(:send,
                    s(:lvar, :out), :<<,
                    s(:array,
                      s(:lvar, :spec),
                      s(:lvar, :dep),
                      s(:lvar, :sats)))), nil))),
          s(:lvar, :out))),
      s(:def, :dependent_specs,
        s(:args),
        s(:send,
          s(:block,
            s(:send,
              s(:send, nil, :runtime_dependencies), :map),
            s(:args,
              s(:arg, :dep)),
            s(:send,
              s(:lvar, :dep), :to_specs)), :flatten)),
      s(:def, :description=,
        s(:args,
          s(:arg, :str)),
        s(:ivasgn, :@description,
          s(:send,
            s(:lvar, :str), :to_s))),
      s(:def, :development_dependencies,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :dependencies), :select),
          s(:args,
            s(:arg, :d)),
          s(:send,
            s(:send,
              s(:lvar, :d), :type), :==,
            s(:sym, :development)))),
      s(:def, :doc_dir,
        s(:args,
          s(:optarg, :type,
            s(:nil))),
        s(:begin,
          s(:or_asgn,
            s(:ivasgn, :@doc_dir),
            s(:send,
              s(:const, nil, :File), :join,
              s(:send, nil, :base_dir),
              s(:str, "doc"),
              s(:send, nil, :full_name))),
          s(:if,
            s(:lvar, :type),
            s(:send,
              s(:const, nil, :File), :join,
              s(:ivar, :@doc_dir),
              s(:lvar, :type)),
            s(:ivar, :@doc_dir)))),
      s(:def, :encode_with,
        s(:args,
          s(:arg, :coder)),
        s(:begin,
          s(:send, nil, :mark_version),
          s(:send,
            s(:lvar, :coder), :add,
            s(:str, "name"),
            s(:ivar, :@name)),
          s(:send,
            s(:lvar, :coder), :add,
            s(:str, "version"),
            s(:ivar, :@version)),
          s(:lvasgn, :platform,
            s(:case,
              s(:ivar, :@original_platform),
              s(:when,
                s(:nil),
                s(:str, ""),
                s(:str, "ruby")),
              s(:when,
                s(:const, nil, :String),
                s(:ivar, :@original_platform)),
              s(:send,
                s(:ivar, :@original_platform), :to_s))),
          s(:send,
            s(:lvar, :coder), :add,
            s(:str, "platform"),
            s(:lvar, :platform)),
          s(:lvasgn, :attributes,
            s(:send,
              s(:send,
                s(:cvar, :@@attributes), :map,
                s(:block_pass,
                  s(:sym, :to_s))), :-,
              s(:array,
                s(:str, "name"),
                s(:str, "version"),
                s(:str, "platform")))),
          s(:block,
            s(:send,
              s(:lvar, :attributes), :each),
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:lvar, :coder), :add,
              s(:lvar, :name),
              s(:send, nil, :instance_variable_get,
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :name)))))))),
      s(:def, :eql?,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:send,
            s(:send,
              s(:self), :class), :===,
            s(:lvar, :other)),
          s(:send, nil, :same_attributes?,
            s(:lvar, :other)))),
      s(:def, :executable,
        s(:args),
        s(:and,
          s(:lvasgn, :val,
            s(:send, nil, :executables)),
          s(:send,
            s(:lvar, :val), :first))),
      s(:def, :executable=,
        s(:args,
          s(:arg, :o)),
        s(:send,
          s(:self), :executables=,
          s(:array,
            s(:lvar, :o)))),
      s(:def, :executables=,
        s(:args,
          s(:arg, :value)),
        s(:ivasgn, :@executables,
          s(:send, nil, :Array,
            s(:lvar, :value)))),
      s(:def, :extensions=,
        s(:args,
          s(:arg, :extensions)),
        s(:ivasgn, :@extensions,
          s(:send, nil, :Array,
            s(:lvar, :extensions)))),
      s(:def, :extra_rdoc_files=,
        s(:args,
          s(:arg, :files)),
        s(:ivasgn, :@extra_rdoc_files,
          s(:send, nil, :Array,
            s(:lvar, :files)))),
      s(:def, :file_name,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :full_name)),
          s(:str, ".gem"))),
      s(:def, :files=,
        s(:args,
          s(:arg, :files)),
        s(:ivasgn, :@files,
          s(:send, nil, :Array,
            s(:lvar, :files)))),
      s(:def, :find_all_satisfiers,
        s(:args,
          s(:arg, :dep)),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :each),
          s(:args,
            s(:arg, :spec)),
          s(:if,
            s(:send,
              s(:lvar, :spec), :satisfies_requirement?,
              s(:lvar, :dep)),
            s(:yield,
              s(:lvar, :spec)), nil))),
      s(:send, nil, :private,
        s(:sym, :find_all_satisfiers)),
      s(:def, :for_cache,
        s(:args),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :dup)),
          s(:send,
            s(:lvar, :spec), :files=,
            s(:nil)),
          s(:send,
            s(:lvar, :spec), :test_files=,
            s(:nil)),
          s(:lvar, :spec))),
      s(:def, :full_name,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@full_name),
          s(:zsuper))),
      s(:def, :gem_dir,
        s(:args),
        s(:zsuper)),
      s(:def, :gems_dir,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@gems_dir),
          s(:send,
            s(:const, nil, :File), :join,
            s(:or,
              s(:and,
                s(:send, nil, :loaded_from),
                s(:send, nil, :base_dir)),
              s(:send,
                s(:const, nil, :Gem), :dir)),
            s(:str, "gems")))),
      s(:def, :has_rdoc,
        s(:args),
        s(:true)),
      s(:def, :has_rdoc=,
        s(:args,
          s(:arg, :ignored)),
        s(:ivasgn, :@has_rdoc,
          s(:true))),
      s(:alias,
        s(:sym, :has_rdoc?),
        s(:sym, :has_rdoc)),
      s(:def, :has_unit_tests?,
        s(:args),
        s(:send,
          s(:send,
            s(:send, nil, :test_files), :empty?), :!)),
      s(:alias,
        s(:sym, :has_test_suite?),
        s(:sym, :has_unit_tests?)),
      s(:def, :hash,
        s(:args),
        s(:send,
          s(:send,
            s(:send, nil, :name), :hash), :^,
          s(:send,
            s(:send, nil, :version), :hash))),
      s(:def, :init_with,
        s(:args,
          s(:arg, :coder)),
        s(:begin,
          s(:or_asgn,
            s(:ivasgn, :@installed_by_version),
            s(:nil)),
          s(:send, nil, :yaml_initialize,
            s(:send,
              s(:lvar, :coder), :tag),
            s(:send,
              s(:lvar, :coder), :map)))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :name,
            s(:nil)),
          s(:optarg, :version,
            s(:nil))),
        s(:begin,
          s(:super),
          s(:ivasgn, :@gems_dir,
            s(:nil)),
          s(:ivasgn, :@base_dir,
            s(:nil)),
          s(:ivasgn, :@loaded,
            s(:false)),
          s(:ivasgn, :@activated,
            s(:false)),
          s(:ivasgn, :@loaded_from,
            s(:nil)),
          s(:ivasgn, :@original_platform,
            s(:nil)),
          s(:ivasgn, :@installed_by_version,
            s(:nil)),
          s(:block,
            s(:send,
              s(:cvar, :@@nil_attributes), :each),
            s(:args,
              s(:arg, :key)),
            s(:send, nil, :instance_variable_set,
              s(:dstr,
                s(:str, "@"),
                s(:begin,
                  s(:lvar, :key))),
              s(:nil))),
          s(:block,
            s(:send,
              s(:cvar, :@@non_nil_attributes), :each),
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:lvasgn, :default,
                s(:send, nil, :default_value,
                  s(:lvar, :key))),
              s(:lvasgn, :value,
                s(:if,
                  s(:send,
                    s(:const, nil, :Dupable), :[],
                    s(:lvar, :key)),
                  s(:send,
                    s(:lvar, :default), :dup),
                  s(:lvar, :default))),
              s(:send, nil, :instance_variable_set,
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :key))),
                s(:lvar, :value)))),
          s(:ivasgn, :@new_platform,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY)),
          s(:if,
            s(:lvar, :name),
            s(:send,
              s(:self), :name=,
              s(:lvar, :name)), nil),
          s(:if,
            s(:lvar, :version),
            s(:send,
              s(:self), :version=,
              s(:lvar, :version)), nil),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:self)), nil))),
      s(:def, :initialize_copy,
        s(:args,
          s(:arg, :other_spec)),
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:self), :class), :array_attributes), :each),
          s(:args,
            s(:arg, :name)),
          s(:begin,
            s(:lvasgn, :name,
              s(:dsym,
                s(:str, "@"),
                s(:begin,
                  s(:lvar, :name)))),
            s(:if,
              s(:send,
                s(:lvar, :other_spec), :instance_variable_defined?,
                s(:lvar, :name)), nil,
              s(:next)),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :val,
                    s(:send,
                      s(:lvar, :other_spec), :instance_variable_get,
                      s(:lvar, :name))),
                  s(:if,
                    s(:lvar, :val),
                    s(:send, nil, :instance_variable_set,
                      s(:lvar, :name),
                      s(:send,
                        s(:lvar, :val), :dup)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Gem), :configuration), :really_verbose),
                      s(:send, nil, :warn,
                        s(:dstr,
                          s(:str, "WARNING: "),
                          s(:begin,
                            s(:send, nil, :full_name)),
                          s(:str, " has an invalid nil value for "),
                          s(:begin,
                            s(:lvar, :name)))), nil))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :TypeError)), nil,
                  s(:begin,
                    s(:lvasgn, :e,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :FormatException), :new,
                        s(:dstr,
                          s(:begin,
                            s(:send, nil, :full_name)),
                          s(:str, " has an invalid value for "),
                          s(:begin,
                            s(:lvar, :name))))),
                    s(:send,
                      s(:lvar, :e), :file_path=,
                      s(:send, nil, :loaded_from)),
                    s(:send, nil, :raise,
                      s(:lvar, :e)))), nil))))),
      s(:def, :base_dir,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :loaded_from), nil,
            s(:return,
              s(:send,
                s(:const, nil, :Gem), :dir))),
          s(:or_asgn,
            s(:ivasgn, :@base_dir),
            s(:if,
              s(:send, nil, :default_gem?),
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:send,
                    s(:const, nil, :File), :dirname,
                    s(:send, nil, :loaded_from)))),
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:send, nil, :loaded_from))))))),
      s(:def, :invalidate_memoized_attributes,
        s(:args),
        s(:begin,
          s(:ivasgn, :@full_name,
            s(:nil)),
          s(:ivasgn, :@cache_file,
            s(:nil)))),
      s(:send, nil, :private,
        s(:sym, :invalidate_memoized_attributes)),
      s(:def, :inspect,
        s(:args),
        s(:if,
          s(:gvar, :$DEBUG),
          s(:zsuper),
          s(:dstr,
            s(:str, "#<"),
            s(:begin,
              s(:send,
                s(:self), :class)),
            s(:str, ":0x"),
            s(:begin,
              s(:send,
                s(:send, nil, :__id__), :to_s,
                s(:int, 16))),
            s(:str, " "),
            s(:begin,
              s(:send, nil, :full_name)),
            s(:str, ">")))),
      s(:def, :lib_files,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@files), :select),
          s(:args,
            s(:arg, :file)),
          s(:block,
            s(:send,
              s(:send, nil, :require_paths), :any?),
            s(:args,
              s(:arg, :path)),
            s(:send,
              s(:lvar, :file), :start_with?,
              s(:lvar, :path))))),
      s(:def, :license,
        s(:args),
        s(:send,
          s(:send, nil, :licenses), :first)),
      s(:def, :licenses,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@licenses),
          s(:array))),
      s(:def, :internal_init,
        s(:args),
        s(:begin,
          s(:zsuper),
          s(:ivasgn, :@bin_dir,
            s(:nil)),
          s(:ivasgn, :@cache_dir,
            s(:nil)),
          s(:ivasgn, :@cache_file,
            s(:nil)),
          s(:ivasgn, :@doc_dir,
            s(:nil)),
          s(:ivasgn, :@ri_dir,
            s(:nil)),
          s(:ivasgn, :@spec_dir,
            s(:nil)),
          s(:ivasgn, :@spec_file,
            s(:nil)))),
      s(:def, :mark_version,
        s(:args),
        s(:ivasgn, :@rubygems_version,
          s(:const,
            s(:const, nil, :Gem), :VERSION))),
      s(:def, :method_missing,
        s(:args,
          s(:arg, :sym),
          s(:restarg, :a),
          s(:blockarg, :b)),
        s(:if,
          s(:and,
            s(:send,
              s(:ivar, :@specification_version), :>,
              s(:const, nil, :CURRENT_SPECIFICATION_VERSION)),
            s(:send,
              s(:send,
                s(:lvar, :sym), :to_s), :=~,
              s(:regexp,
                s(:str, "=$"),
                s(:regopt)))),
          s(:if,
            s(:gvar, :$DEBUG),
            s(:send, nil, :warn,
              s(:dstr,
                s(:str, "ignoring "),
                s(:begin,
                  s(:lvar, :sym)),
                s(:str, " loading "),
                s(:begin,
                  s(:send, nil, :full_name)))), nil),
          s(:zsuper))),
      s(:def, :missing_extensions?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send, nil, :default_gem?),
            s(:return,
              s(:false)), nil),
          s(:if,
            s(:send,
              s(:send, nil, :extensions), :empty?),
            s(:return,
              s(:false)), nil),
          s(:if,
            s(:send,
              s(:send, nil, :installed_by_version), :<,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:str, "2.2.0.preview.2"))),
            s(:return,
              s(:false)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:send, nil, :gem_build_complete_path)),
            s(:return,
              s(:false)), nil),
          s(:true))),
      s(:def, :normalize,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:ivar, :@extra_rdoc_files)),
              s(:ivar, :@extra_rdoc_files)),
            s(:begin,
              s(:send,
                s(:ivar, :@extra_rdoc_files), :uniq!),
              s(:or_asgn,
                s(:ivasgn, :@files),
                s(:array)),
              s(:send,
                s(:ivar, :@files), :concat,
                s(:ivar, :@extra_rdoc_files))), nil),
          s(:if,
            s(:ivar, :@files),
            s(:ivasgn, :@files,
              s(:send,
                s(:ivar, :@files), :uniq)), nil),
          s(:if,
            s(:ivar, :@extensions),
            s(:ivasgn, :@extensions,
              s(:send,
                s(:ivar, :@extensions), :uniq)), nil),
          s(:if,
            s(:ivar, :@test_files),
            s(:ivasgn, :@test_files,
              s(:send,
                s(:ivar, :@test_files), :uniq)), nil),
          s(:if,
            s(:ivar, :@executables),
            s(:ivasgn, :@executables,
              s(:send,
                s(:ivar, :@executables), :uniq)), nil),
          s(:if,
            s(:ivar, :@extra_rdoc_files),
            s(:ivasgn, :@extra_rdoc_files,
              s(:send,
                s(:ivar, :@extra_rdoc_files), :uniq)), nil))),
      s(:def, :name_tuple,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :NameTuple), :new,
          s(:send, nil, :name),
          s(:send, nil, :version),
          s(:send, nil, :original_platform))),
      s(:def, :original_name,
        s(:args),
        s(:if,
          s(:or,
            s(:send,
              s(:send, nil, :platform), :==,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY)),
            s(:send,
              s(:send, nil, :platform), :nil?)),
          s(:dstr,
            s(:begin,
              s(:ivar, :@name)),
            s(:str, "-"),
            s(:begin,
              s(:ivar, :@version))),
          s(:dstr,
            s(:begin,
              s(:ivar, :@name)),
            s(:str, "-"),
            s(:begin,
              s(:ivar, :@version)),
            s(:str, "-"),
            s(:begin,
              s(:ivar, :@original_platform))))),
      s(:def, :original_platform,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@original_platform),
          s(:send, nil, :platform))),
      s(:def, :platform,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@new_platform),
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Platform), :RUBY))),
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 2),
            s(:str, "Gem::Specification.new do |s|"),
            s(:str, "end")),
          s(:args),
          s(:begin,
            s(:send,
              s(:lvar, :q), :breakable),
            s(:lvasgn, :attributes,
              s(:send,
                s(:cvar, :@@attributes), :-,
                s(:array,
                  s(:sym, :name),
                  s(:sym, :version)))),
            s(:send,
              s(:lvar, :attributes), :unshift,
              s(:sym, :installed_by_version)),
            s(:send,
              s(:lvar, :attributes), :unshift,
              s(:sym, :version)),
            s(:send,
              s(:lvar, :attributes), :unshift,
              s(:sym, :name)),
            s(:block,
              s(:send,
                s(:lvar, :attributes), :each),
              s(:args,
                s(:arg, :attr_name)),
              s(:begin,
                s(:lvasgn, :current_value,
                  s(:send,
                    s(:self), :send,
                    s(:lvar, :attr_name))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :current_value), :!=,
                      s(:send, nil, :default_value,
                        s(:lvar, :attr_name))),
                    s(:send,
                      s(:send,
                        s(:self), :class), :required_attribute?,
                      s(:lvar, :attr_name))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :q), :text,
                      s(:dstr,
                        s(:str, "s."),
                        s(:begin,
                          s(:lvar, :attr_name)),
                        s(:str, " = "))),
                    s(:if,
                      s(:send,
                        s(:lvar, :attr_name), :==,
                        s(:sym, :date)),
                      s(:begin,
                        s(:lvasgn, :current_value,
                          s(:send,
                            s(:lvar, :current_value), :utc)),
                        s(:send,
                          s(:lvar, :q), :text,
                          s(:dstr,
                            s(:str, "Time.utc("),
                            s(:begin,
                              s(:send,
                                s(:lvar, :current_value), :year)),
                            s(:str, ", "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :current_value), :month)),
                            s(:str, ", "),
                            s(:begin,
                              s(:send,
                                s(:lvar, :current_value), :day)),
                            s(:str, ")")))),
                      s(:send,
                        s(:lvar, :q), :pp,
                        s(:lvar, :current_value))),
                    s(:send,
                      s(:lvar, :q), :breakable)), nil)))))),
      s(:def, :check_version_conflict,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:self), :version), :==,
              s(:send,
                s(:lvar, :other), :version)),
            s(:return), nil),
          s(:lvasgn, :msg,
            s(:dstr,
              s(:str, "can't activate "),
              s(:begin,
                s(:send, nil, :full_name)),
              s(:str, ", already activated "),
              s(:begin,
                s(:send,
                  s(:lvar, :other), :full_name)))),
          s(:lvasgn, :e,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :LoadError), :new,
              s(:lvar, :msg))),
          s(:send,
            s(:lvar, :e), :name=,
            s(:send,
              s(:self), :name)),
          s(:send, nil, :raise,
            s(:lvar, :e)))),
      s(:send, nil, :private,
        s(:sym, :check_version_conflict)),
      s(:def, :raise_if_conflicts,
        s(:args),
        s(:if,
          s(:send, nil, :has_conflicts?),
          s(:send, nil, :raise,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :ConflictError), :new,
              s(:self),
              s(:send, nil, :conflicts))), nil)),
      s(:def, :rdoc_options=,
        s(:args,
          s(:arg, :options)),
        s(:ivasgn, :@rdoc_options,
          s(:send, nil, :Array,
            s(:lvar, :options)))),
      s(:def, :require_path,
        s(:args),
        s(:and,
          s(:lvasgn, :val,
            s(:send, nil, :require_paths)),
          s(:send,
            s(:lvar, :val), :first))),
      s(:def, :require_path=,
        s(:args,
          s(:arg, :path)),
        s(:send,
          s(:self), :require_paths=,
          s(:send, nil, :Array,
            s(:lvar, :path)))),
      s(:def, :requirements=,
        s(:args,
          s(:arg, :req)),
        s(:ivasgn, :@requirements,
          s(:send, nil, :Array,
            s(:lvar, :req)))),
      s(:def, :respond_to_missing?,
        s(:args,
          s(:arg, :m),
          s(:optarg, :include_private,
            s(:false))),
        s(:false)),
      s(:def, :ri_dir,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@ri_dir),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :base_dir),
            s(:str, "ri"),
            s(:send, nil, :full_name)))),
      s(:def, :ruby_code,
        s(:args,
          s(:arg, :obj)),
        s(:case,
          s(:lvar, :obj),
          s(:when,
            s(:const, nil, :String),
            s(:send,
              s(:send,
                s(:lvar, :obj), :dump), :+,
              s(:str, ".freeze"))),
          s(:when,
            s(:const, nil, :Array),
            s(:send,
              s(:send,
                s(:str, "["), :+,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :obj), :map),
                    s(:args,
                      s(:arg, :x)),
                    s(:send, nil, :ruby_code,
                      s(:lvar, :x))), :join,
                  s(:str, ", "))), :+,
              s(:str, "]"))),
          s(:when,
            s(:const, nil, :Hash),
            s(:begin,
              s(:lvasgn, :seg,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :obj), :keys), :sort), :map),
                  s(:args,
                    s(:arg, :k)),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :k), :to_s), :dump)),
                    s(:str, " => "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :obj), :[],
                            s(:lvar, :k)), :to_s), :dump))))),
              s(:dstr,
                s(:str, "{ "),
                s(:begin,
                  s(:send,
                    s(:lvar, :seg), :join,
                    s(:str, ", "))),
                s(:str, " }")))),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :Version),
            s(:send,
              s(:send,
                s(:lvar, :obj), :to_s), :dump)),
          s(:when,
            s(:const, nil, :DateLike),
            s(:send,
              s(:send,
                s(:lvar, :obj), :strftime,
                s(:str, "%Y-%m-%d")), :dump)),
          s(:when,
            s(:const, nil, :Time),
            s(:send,
              s(:send,
                s(:lvar, :obj), :strftime,
                s(:str, "%Y-%m-%d")), :dump)),
          s(:when,
            s(:const, nil, :Numeric),
            s(:send,
              s(:lvar, :obj), :inspect)),
          s(:when,
            s(:true),
            s(:false),
            s(:nil),
            s(:send,
              s(:lvar, :obj), :inspect)),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :Platform),
            s(:dstr,
              s(:str, "Gem::Platform.new("),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :obj), :to_a), :inspect)),
              s(:str, ")"))),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :Requirement),
            s(:begin,
              s(:lvasgn, :list,
                s(:send,
                  s(:lvar, :obj), :as_list)),
              s(:dstr,
                s(:str, "Gem::Requirement.new("),
                s(:begin,
                  s(:send, nil, :ruby_code,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :list), :size), :==,
                        s(:int, 1)),
                      s(:send,
                        s(:lvar, :obj), :to_s),
                      s(:lvar, :list)))),
                s(:str, ")")))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Gem), :Exception),
            s(:dstr,
              s(:str, "ruby_code case not handled: "),
              s(:begin,
                s(:send,
                  s(:lvar, :obj), :class)))))),
      s(:send, nil, :private,
        s(:sym, :ruby_code)),
      s(:def, :runtime_dependencies,
        s(:args),
        s(:send,
          s(:send, nil, :dependencies), :select,
          s(:block_pass,
            s(:sym, :runtime?)))),
      s(:def, :same_attributes?,
        s(:args,
          s(:arg, :spec)),
        s(:block,
          s(:send,
            s(:cvar, :@@attributes), :all?),
          s(:args,
            s(:arg, :name),
            s(:arg, :default)),
          s(:send,
            s(:send,
              s(:self), :send,
              s(:lvar, :name)), :==,
            s(:send,
              s(:lvar, :spec), :send,
              s(:lvar, :name))))),
      s(:send, nil, :private,
        s(:sym, :same_attributes?)),
      s(:def, :satisfies_requirement?,
        s(:args,
          s(:arg, :dependency)),
        s(:return,
          s(:and,
            s(:send,
              s(:ivar, :@name), :==,
              s(:send,
                s(:lvar, :dependency), :name)),
            s(:send,
              s(:send,
                s(:lvar, :dependency), :requirement), :satisfied_by?,
              s(:ivar, :@version))))),
      s(:def, :sort_obj,
        s(:args),
        s(:array,
          s(:ivar, :@name),
          s(:ivar, :@version),
          s(:if,
            s(:send,
              s(:ivar, :@new_platform), :==,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :RUBY)),
            s(:int, -1),
            s(:int, 1)))),
      s(:def, :source,
        s(:args),
        s(:send,
          s(:const,
            s(:const,
              s(:const, nil, :Gem), :Source), :Installed), :new)),
      s(:def, :spec_dir,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@spec_dir),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :base_dir),
            s(:str, "specifications")))),
      s(:def, :spec_file,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@spec_file),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send, nil, :spec_dir),
            s(:dstr,
              s(:begin,
                s(:send, nil, :full_name)),
              s(:str, ".gemspec"))))),
      s(:def, :spec_name,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:send, nil, :full_name)),
          s(:str, ".gemspec"))),
      s(:def, :summary=,
        s(:args,
          s(:arg, :str)),
        s(:ivasgn, :@summary,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :str), :to_s), :strip), :gsub,
              s(:regexp,
                s(:str, "(\\w-)\\n[ \\t]*(\\w)"),
                s(:regopt)),
              s(:str, "\\1\\2")), :gsub,
            s(:regexp,
              s(:str, "\\n[ \\t]*"),
              s(:regopt)),
            s(:str, " ")))),
      s(:def, :test_file,
        s(:args),
        s(:and,
          s(:lvasgn, :val,
            s(:send, nil, :test_files)),
          s(:send,
            s(:lvar, :val), :first))),
      s(:def, :test_file=,
        s(:args,
          s(:arg, :file)),
        s(:send,
          s(:self), :test_files=,
          s(:array,
            s(:lvar, :file)))),
      s(:def, :test_files,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@test_suite_file)),
            s(:begin,
              s(:ivasgn, :@test_files,
                s(:send,
                  s(:array,
                    s(:ivar, :@test_suite_file)), :flatten)),
              s(:ivasgn, :@test_suite_file,
                s(:nil))), nil),
          s(:if,
            s(:and,
              s(:defined?,
                s(:ivar, :@test_files)),
              s(:ivar, :@test_files)),
            s(:ivar, :@test_files),
            s(:ivasgn, :@test_files,
              s(:array))))),
      s(:def, :to_ruby,
        s(:args),
        s(:begin,
          s(:send, nil, :mark_version),
          s(:lvasgn, :result,
            s(:array)),
          s(:send,
            s(:lvar, :result), :<<,
            s(:str, "# -*- encoding: utf-8 -*-")),
          s(:send,
            s(:lvar, :result), :<<,
            s(:dstr,
              s(:begin,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :StubSpecification), :PREFIX)),
              s(:begin,
                s(:send, nil, :name)),
              s(:str, " "),
              s(:begin,
                s(:send, nil, :version)),
              s(:str, " "),
              s(:begin,
                s(:send, nil, :platform)),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:send, nil, :raw_require_paths), :join,
                  s(:str, "\u0000"))))),
          s(:if,
            s(:send,
              s(:send, nil, :extensions), :empty?), nil,
            s(:send,
              s(:lvar, :result), :<<,
              s(:dstr,
                s(:begin,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :StubSpecification), :PREFIX)),
                s(:begin,
                  s(:send,
                    s(:send, nil, :extensions), :join,
                    s(:str, "\u0000")))))),
          s(:send,
            s(:lvar, :result), :<<,
            s(:nil)),
          s(:send,
            s(:lvar, :result), :<<,
            s(:str, "Gem::Specification.new do |s|")),
          s(:send,
            s(:lvar, :result), :<<,
            s(:dstr,
              s(:str, "  s.name = "),
              s(:begin,
                s(:send, nil, :ruby_code,
                  s(:send, nil, :name))))),
          s(:send,
            s(:lvar, :result), :<<,
            s(:dstr,
              s(:str, "  s.version = "),
              s(:begin,
                s(:send, nil, :ruby_code,
                  s(:send, nil, :version))))),
          s(:if,
            s(:or,
              s(:send,
                s(:send, nil, :platform), :nil?),
              s(:send,
                s(:send, nil, :platform), :==,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY))), nil,
            s(:send,
              s(:lvar, :result), :<<,
              s(:dstr,
                s(:str, "  s.platform = "),
                s(:begin,
                  s(:send, nil, :ruby_code,
                    s(:send, nil, :original_platform)))))),
          s(:send,
            s(:lvar, :result), :<<,
            s(:str, "")),
          s(:send,
            s(:lvar, :result), :<<,
            s(:dstr,
              s(:str, "  s.required_rubygems_version = "),
              s(:begin,
                s(:send, nil, :ruby_code,
                  s(:send, nil, :required_rubygems_version))),
              s(:str, " if s.respond_to? :required_rubygems_version="))),
          s(:if,
            s(:and,
              s(:send, nil, :metadata),
              s(:send,
                s(:send,
                  s(:send, nil, :metadata), :empty?), :!)),
            s(:send,
              s(:lvar, :result), :<<,
              s(:dstr,
                s(:str, "  s.metadata = "),
                s(:begin,
                  s(:send, nil, :ruby_code,
                    s(:send, nil, :metadata))),
                s(:str, " if s.respond_to? :metadata="))), nil),
          s(:send,
            s(:lvar, :result), :<<,
            s(:dstr,
              s(:str, "  s.require_paths = "),
              s(:begin,
                s(:send, nil, :ruby_code,
                  s(:send, nil, :raw_require_paths))))),
          s(:lvasgn, :handled,
            s(:array,
              s(:sym, :dependencies),
              s(:sym, :name),
              s(:sym, :platform),
              s(:sym, :require_paths),
              s(:sym, :required_rubygems_version),
              s(:sym, :specification_version),
              s(:sym, :version),
              s(:sym, :has_rdoc),
              s(:sym, :default_executable),
              s(:sym, :metadata))),
          s(:block,
            s(:send,
              s(:cvar, :@@attributes), :each),
            s(:args,
              s(:arg, :attr_name)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :handled), :include?,
                  s(:lvar, :attr_name)),
                s(:next), nil),
              s(:lvasgn, :current_value,
                s(:send,
                  s(:self), :send,
                  s(:lvar, :attr_name))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :current_value), :!=,
                    s(:send, nil, :default_value,
                      s(:lvar, :attr_name))),
                  s(:send,
                    s(:send,
                      s(:self), :class), :required_attribute?,
                    s(:lvar, :attr_name))),
                s(:send,
                  s(:lvar, :result), :<<,
                  s(:dstr,
                    s(:str, "  s."),
                    s(:begin,
                      s(:lvar, :attr_name)),
                    s(:str, " = "),
                    s(:begin,
                      s(:send, nil, :ruby_code,
                        s(:lvar, :current_value))))), nil))),
          s(:if,
            s(:ivar, :@installed_by_version),
            s(:begin,
              s(:send,
                s(:lvar, :result), :<<,
                s(:nil)),
              s(:send,
                s(:lvar, :result), :<<,
                s(:dstr,
                  s(:str, "  s.installed_by_version = \""),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Gem), :VERSION)),
                  s(:str, "\" if s.respond_to? :installed_by_version")))), nil),
          s(:if,
            s(:send,
              s(:send, nil, :dependencies), :empty?), nil,
            s(:begin,
              s(:send,
                s(:lvar, :result), :<<,
                s(:nil)),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "  if s.respond_to? :specification_version then")),
              s(:send,
                s(:lvar, :result), :<<,
                s(:dstr,
                  s(:str, "    s.specification_version = "),
                  s(:begin,
                    s(:send, nil, :specification_version)))),
              s(:send,
                s(:lvar, :result), :<<,
                s(:nil)),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "    if Gem::Version.new(Gem::VERSION) >= Gem::Version.new('1.2.0') then")),
              s(:block,
                s(:send,
                  s(:send, nil, :dependencies), :each),
                s(:args,
                  s(:arg, :dep)),
                s(:begin,
                  s(:lvasgn, :req,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :requirements_list), :inspect)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :type), :nil?),
                    s(:send,
                      s(:lvar, :dep), :instance_variable_set,
                      s(:sym, :@type),
                      s(:sym, :runtime)), nil),
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:dstr,
                      s(:str, "      s.add_"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :type)),
                      s(:str, "_dependency(%q<"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, ">.freeze, "),
                      s(:begin,
                        s(:lvar, :req)),
                      s(:str, ")"))))),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "    else")),
              s(:block,
                s(:send,
                  s(:send, nil, :dependencies), :each),
                s(:args,
                  s(:arg, :dep)),
                s(:begin,
                  s(:lvasgn, :version_reqs_param,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :requirements_list), :inspect)),
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:dstr,
                      s(:str, "      s.add_dependency(%q<"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, ">.freeze, "),
                      s(:begin,
                        s(:lvar, :version_reqs_param)),
                      s(:str, ")"))))),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "    end")),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "  else")),
              s(:block,
                s(:send,
                  s(:send, nil, :dependencies), :each),
                s(:args,
                  s(:arg, :dep)),
                s(:begin,
                  s(:lvasgn, :version_reqs_param,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :requirements_list), :inspect)),
                  s(:send,
                    s(:lvar, :result), :<<,
                    s(:dstr,
                      s(:str, "    s.add_dependency(%q<"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, ">.freeze, "),
                      s(:begin,
                        s(:lvar, :version_reqs_param)),
                      s(:str, ")"))))),
              s(:send,
                s(:lvar, :result), :<<,
                s(:str, "  end")))),
          s(:send,
            s(:lvar, :result), :<<,
            s(:str, "end")),
          s(:send,
            s(:lvar, :result), :<<,
            s(:nil)),
          s(:send,
            s(:lvar, :result), :join,
            s(:str, "\n")))),
      s(:def, :to_ruby_for_cache,
        s(:args),
        s(:send,
          s(:send, nil, :for_cache), :to_ruby)),
      s(:def, :to_s,
        s(:args),
        s(:dstr,
          s(:str, "#<Gem::Specification name="),
          s(:begin,
            s(:ivar, :@name)),
          s(:str, " version="),
          s(:begin,
            s(:ivar, :@version)),
          s(:str, ">"))),
      s(:def, :to_spec,
        s(:args),
        s(:self)),
      s(:def, :to_yaml,
        s(:args,
          s(:optarg, :opts,
            s(:hash))),
        s(:if,
          s(:or,
            s(:begin,
              s(:and,
                s(:send,
                  s(:const, nil, :YAML), :const_defined?,
                  s(:sym, :ENGINE)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :YAML), :ENGINE), :syck?), :!))),
            s(:begin,
              s(:and,
                s(:defined?,
                  s(:const, nil, :Psych)),
                s(:send,
                  s(:const, nil, :YAML), :==,
                  s(:const, nil, :Psych))))),
          s(:begin,
            s(:if,
              s(:send,
                s(:const, nil, :Gem), :const_defined?,
                s(:sym, :NoAliasYAMLTree)), nil,
              s(:send, nil, :require,
                s(:str, "rubygems/psych_tree"))),
            s(:lvasgn, :builder,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :NoAliasYAMLTree), :create)),
            s(:send,
              s(:lvar, :builder), :<<,
              s(:self)),
            s(:lvasgn, :ast,
              s(:send,
                s(:lvar, :builder), :tree)),
            s(:lvasgn, :io,
              s(:send,
                s(:const, nil, :StringIO), :new)),
            s(:if,
              s(:send,
                s(:const, nil, :Object), :const_defined?,
                s(:sym, :Encoding)),
              s(:send,
                s(:lvar, :io), :set_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :UTF_8)), nil),
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Psych), :Visitors), :Emitter), :new,
                s(:lvar, :io)), :accept,
              s(:lvar, :ast)),
            s(:send,
              s(:send,
                s(:lvar, :io), :string), :gsub,
              s(:regexp,
                s(:str, " !!null \\n"),
                s(:regopt)),
              s(:str, " \n"))),
          s(:block,
            s(:send,
              s(:const, nil, :YAML), :quick_emit,
              s(:send, nil, :object_id),
              s(:lvar, :opts)),
            s(:args,
              s(:arg, :out)),
            s(:block,
              s(:send,
                s(:lvar, :out), :map,
                s(:send, nil, :taguri),
                s(:send, nil, :to_yaml_style)),
              s(:args,
                s(:arg, :map)),
              s(:send, nil, :encode_with,
                s(:lvar, :map)))))),
      s(:def, :traverse,
        s(:args,
          s(:optarg, :trail,
            s(:array)),
          s(:optarg, :visited,
            s(:hash)),
          s(:blockarg, :block)),
        s(:begin,
          s(:send,
            s(:lvar, :trail), :push,
            s(:self)),
          s(:kwbegin,
            s(:ensure,
              s(:block,
                s(:send,
                  s(:send, nil, :dependencies), :each),
                s(:args,
                  s(:arg, :dep)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :dep), :runtime?), nil,
                    s(:next)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :to_specs), :reverse_each),
                    s(:args,
                      s(:arg, :dep_spec)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :visited), :has_key?,
                          s(:lvar, :dep_spec)),
                        s(:next), nil),
                      s(:send,
                        s(:lvar, :visited), :[]=,
                        s(:lvar, :dep_spec),
                        s(:true)),
                      s(:send,
                        s(:lvar, :trail), :push,
                        s(:lvar, :dep_spec)),
                      s(:kwbegin,
                        s(:ensure,
                          s(:lvasgn, :result,
                            s(:send,
                              s(:lvar, :block), :[],
                              s(:self),
                              s(:lvar, :dep),
                              s(:lvar, :dep_spec),
                              s(:lvar, :trail))),
                          s(:send,
                            s(:lvar, :trail), :pop))),
                      s(:if,
                        s(:send,
                          s(:lvar, :result), :==,
                          s(:sym, :next)), nil,
                        s(:begin,
                          s(:lvasgn, :spec_name,
                            s(:send,
                              s(:lvar, :dep_spec), :name)),
                          s(:if,
                            s(:block,
                              s(:send,
                                s(:lvar, :trail), :any?),
                              s(:args,
                                s(:arg, :s)),
                              s(:send,
                                s(:send,
                                  s(:lvar, :s), :name), :==,
                                s(:lvar, :spec_name))), nil,
                            s(:send,
                              s(:lvar, :dep_spec), :traverse,
                              s(:lvar, :trail),
                              s(:lvar, :visited),
                              s(:block_pass,
                                s(:lvar, :block)))))))))),
              s(:send,
                s(:lvar, :trail), :pop))))),
      s(:def, :validate,
        s(:args,
          s(:optarg, :packaging,
            s(:true))),
        s(:ensure,
          s(:begin,
            s(:ivasgn, :@warnings,
              s(:int, 0)),
            s(:send, nil, :require,
              s(:str, "rubygems/user_interaction")),
            s(:send, nil, :extend,
              s(:const,
                s(:const, nil, :Gem), :UserInteraction)),
            s(:send, nil, :normalize),
            s(:lvasgn, :nil_attributes,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :non_nil_attributes), :find_all),
                s(:args,
                  s(:arg, :attrname)),
                s(:send,
                  s(:send, nil, :instance_variable_get,
                    s(:dstr,
                      s(:str, "@"),
                      s(:begin,
                        s(:lvar, :attrname)))), :nil?))),
            s(:if,
              s(:send,
                s(:lvar, :nil_attributes), :empty?), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :nil_attributes), :join,
                      s(:str, ", "))),
                  s(:str, " must not be nil")))),
            s(:if,
              s(:and,
                s(:lvar, :packaging),
                s(:send,
                  s(:send, nil, :rubygems_version), :!=,
                  s(:const,
                    s(:const, nil, :Gem), :VERSION))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:str, "expected RubyGems version "),
                  s(:begin,
                    s(:const,
                      s(:const, nil, :Gem), :VERSION)),
                  s(:str, ", was "),
                  s(:begin,
                    s(:send, nil, :rubygems_version)))), nil),
            s(:block,
              s(:send,
                s(:cvar, :@@required_attributes), :each),
              s(:args,
                s(:arg, :symbol)),
              s(:if,
                s(:send,
                  s(:self), :send,
                  s(:lvar, :symbol)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :InvalidSpecificationException),
                  s(:dstr,
                    s(:str, "missing value for attribute "),
                    s(:begin,
                      s(:lvar, :symbol)))))),
            s(:if,
              s(:send,
                s(:const, nil, :String), :===,
                s(:send, nil, :name)), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:str, "invalid value for attribute name: \""),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :name), :inspect)),
                  s(:str, "\"")))),
            s(:if,
              s(:send,
                s(:send, nil, :raw_require_paths), :empty?),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:str, "specification must have at least one require_path")), nil),
            s(:block,
              s(:send,
                s(:ivar, :@files), :delete_if),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :x)),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :symlink?,
                    s(:lvar, :x)), :!))),
            s(:block,
              s(:send,
                s(:ivar, :@test_files), :delete_if),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :x)),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :symlink?,
                    s(:lvar, :x)), :!))),
            s(:block,
              s(:send,
                s(:ivar, :@executables), :delete_if),
              s(:args,
                s(:arg, :x)),
              s(:send,
                s(:const, nil, :File), :directory?,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@bindir),
                  s(:lvar, :x)))),
            s(:block,
              s(:send,
                s(:ivar, :@extra_rdoc_files), :delete_if),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :x)),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :symlink?,
                    s(:lvar, :x)), :!))),
            s(:block,
              s(:send,
                s(:ivar, :@extensions), :delete_if),
              s(:args,
                s(:arg, :x)),
              s(:and,
                s(:send,
                  s(:const, nil, :File), :directory?,
                  s(:lvar, :x)),
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :symlink?,
                    s(:lvar, :x)), :!))),
            s(:lvasgn, :non_files,
              s(:block,
                s(:send,
                  s(:send, nil, :files), :reject),
                s(:args,
                  s(:arg, :x)),
                s(:or,
                  s(:send,
                    s(:const, nil, :File), :file?,
                    s(:lvar, :x)),
                  s(:send,
                    s(:const, nil, :File), :symlink?,
                    s(:lvar, :x))))),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :packaging), :!),
                s(:send,
                  s(:lvar, :non_files), :empty?)), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:str, "[\""),
                  s(:begin,
                    s(:send,
                      s(:lvar, :non_files), :join,
                      s(:str, "\", \""))),
                  s(:str, "\"] are not files")))),
            s(:if,
              s(:send,
                s(:send, nil, :files), :include?,
                s(:send, nil, :file_name)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :full_name)),
                  s(:str, " contains itself ("),
                  s(:begin,
                    s(:send, nil, :file_name)),
                  s(:str, "), check your files list"))), nil),
            s(:if,
              s(:send,
                s(:send, nil, :specification_version), :is_a?,
                s(:const, nil, :Fixnum)), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:str, "specification_version must be a Fixnum (did you mean version?)"))),
            s(:case,
              s(:send, nil, :platform),
              s(:when,
                s(:const,
                  s(:const, nil, :Gem), :Platform),
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY), nil),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:str, "invalid platform "),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :platform), :inspect)),
                  s(:str, ", see Gem::Platform")))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :class), :array_attributes), :each),
              s(:args,
                s(:arg, :field)),
              s(:begin,
                s(:lvasgn, :val,
                  s(:send,
                    s(:self), :send,
                    s(:lvar, :field))),
                s(:lvasgn, :klass,
                  s(:case,
                    s(:lvar, :field),
                    s(:when,
                      s(:sym, :dependencies),
                      s(:const,
                        s(:const, nil, :Gem), :Dependency)),
                    s(:const, nil, :String))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:const, nil, :Array), :===,
                      s(:lvar, :val)),
                    s(:block,
                      s(:send,
                        s(:lvar, :val), :all?),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:lvar, :x), :kind_of?,
                        s(:lvar, :klass)))), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :field)),
                      s(:str, " must be an Array of "),
                      s(:begin,
                        s(:lvar, :klass))))))),
            s(:block,
              s(:send,
                s(:array,
                  s(:sym, :authors)), :each),
              s(:args,
                s(:arg, :field)),
              s(:begin,
                s(:lvasgn, :val,
                  s(:send,
                    s(:self), :send,
                    s(:lvar, :field))),
                s(:if,
                  s(:send,
                    s(:lvar, :val), :empty?),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :field)),
                      s(:str, " may not be empty"))), nil))),
            s(:if,
              s(:send,
                s(:const, nil, :Hash), :===,
                s(:send, nil, :metadata)), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:str, "metadata must be a hash"))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :metadata), :keys), :each),
              s(:args,
                s(:arg, :k)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :k), :kind_of?,
                      s(:const, nil, :String)), :!),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:str, "metadata keys must be a String")), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :k), :size), :>,
                    s(:int, 128)),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:dstr,
                      s(:str, "metadata key too large ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :k), :size)),
                      s(:str, " > 128)"))), nil))),
            s(:block,
              s(:send,
                s(:send,
                  s(:send, nil, :metadata), :values), :each),
              s(:args,
                s(:arg, :k)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :k), :kind_of?,
                      s(:const, nil, :String)), :!),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:str, "metadata values must be a String")), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :k), :size), :>,
                    s(:int, 1024)),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:dstr,
                      s(:str, "metadata value too large ("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :k), :size)),
                      s(:str, " > 1024)"))), nil))),
            s(:block,
              s(:send,
                s(:send, nil, :licenses), :each),
              s(:args,
                s(:arg, :license)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :license), :length), :>,
                    s(:int, 64)),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InvalidSpecificationException),
                    s(:str, "each license must be 64 characters or less")), nil),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Licenses), :match?,
                      s(:lvar, :license)), :!),
                  s(:begin,
                    s(:lvasgn, :suggestions,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Licenses), :suggestions,
                        s(:lvar, :license))),
                    s(:lvasgn, :message,
                      s(:dstr,
                        s(:str, "license value '"),
                        s(:begin,
                          s(:lvar, :license)),
                        s(:str, "' is invalid.  Use a license identifier from\n"),
                        s(:str, "http://spdx.org/licenses or '"),
                        s(:begin,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :Licenses), :NONSTANDARD)),
                        s(:str, "' for a nonstandard license.\n"))),
                    s(:if,
                      s(:send,
                        s(:lvar, :suggestions), :nil?), nil,
                      s(:op_asgn,
                        s(:lvasgn, :message), :+,
                        s(:dstr,
                          s(:str, "Did you mean "),
                          s(:begin,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:lvar, :suggestions), :map),
                                s(:args,
                                  s(:arg, :s)),
                                s(:dstr,
                                  s(:str, "'"),
                                  s(:begin,
                                    s(:lvar, :s)),
                                  s(:str, "'"))), :join,
                              s(:str, ", "))),
                          s(:str, "?\n")))),
                    s(:send, nil, :warning,
                      s(:lvar, :message))), nil))),
            s(:if,
              s(:send,
                s(:send, nil, :licenses), :empty?),
              s(:send, nil, :warning,
                s(:dstr,
                  s(:str, "licenses is empty, but is recommended.  Use a license identifier from\n"),
                  s(:str, "http://spdx.org/licenses or '"),
                  s(:begin,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Licenses), :NONSTANDARD)),
                  s(:str, "' for a nonstandard license.\n"))), nil),
            s(:send, nil, :validate_permissions),
            s(:lvasgn, :lazy,
              s(:send,
                s(:str, "\"FIxxxXME\" or \"TOxxxDO\""), :gsub,
                s(:regexp,
                  s(:str, "xxx"),
                  s(:regopt)),
                s(:str, ""))),
            s(:if,
              s(:send,
                s(:send,
                  s(:send, nil, :authors), :grep,
                  s(:regexp,
                    s(:str, "FI XME|TO DO"),
                    s(:regopt, :x))), :empty?), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :lazy)),
                  s(:str, " is not an author")))),
            s(:if,
              s(:send,
                s(:send,
                  s(:send, nil, :Array,
                    s(:send, nil, :email)), :grep,
                  s(:regexp,
                    s(:str, "FI XME|TO DO"),
                    s(:regopt, :x))), :empty?), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :lazy)),
                  s(:str, " is not an email")))),
            s(:if,
              s(:send,
                s(:send, nil, :description), :=~,
                s(:regexp,
                  s(:str, "FI XME|TO DO"),
                  s(:regopt, :x))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :lazy)),
                  s(:str, " is not a description"))), nil),
            s(:if,
              s(:send,
                s(:send, nil, :summary), :=~,
                s(:regexp,
                  s(:str, "FI XME|TO DO"),
                  s(:regopt, :x))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :lazy)),
                  s(:str, " is not a summary"))), nil),
            s(:if,
              s(:and,
                s(:and,
                  s(:send, nil, :homepage),
                  s(:send,
                    s(:send,
                      s(:send, nil, :homepage), :empty?), :!)),
                s(:send,
                  s(:send, nil, :homepage), :!~,
                  s(:regexp,
                    s(:str, "\\A[a-z][a-z\\d+.-]*:"),
                    s(:regopt, :i)))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InvalidSpecificationException),
                s(:dstr,
                  s(:str, "\""),
                  s(:begin,
                    s(:send, nil, :homepage)),
                  s(:str, "\" is not a URI"))), nil),
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "author"),
                  s(:str, "email"),
                  s(:str, "homepage"),
                  s(:str, "summary")), :each),
              s(:args,
                s(:arg, :attribute)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:self), :send,
                    s(:lvar, :attribute))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :value), :nil?),
                    s(:send,
                      s(:lvar, :value), :empty?)),
                  s(:send, nil, :warning,
                    s(:dstr,
                      s(:str, "no "),
                      s(:begin,
                        s(:lvar, :attribute)),
                      s(:str, " specified"))), nil))),
            s(:if,
              s(:send,
                s(:send, nil, :description), :==,
                s(:send, nil, :summary)),
              s(:send, nil, :warning,
                s(:str, "description and summary are identical")), nil),
            s(:if,
              s(:send, nil, :autorequire),
              s(:send, nil, :warning,
                s(:str, "deprecated autorequire specified")), nil),
            s(:block,
              s(:send,
                s(:send, nil, :executables), :each),
              s(:args,
                s(:arg, :executable)),
              s(:begin,
                s(:lvasgn, :executable_path,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:send, nil, :bindir),
                    s(:lvar, :executable))),
                s(:lvasgn, :shebang,
                  s(:send,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:lvar, :executable_path),
                      s(:int, 2)), :==,
                    s(:str, "#!"))),
                s(:if,
                  s(:lvar, :shebang), nil,
                  s(:send, nil, :warning,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :executable_path)),
                      s(:str, " is missing #! line")))))),
            s(:block,
              s(:send,
                s(:send, nil, :files), :each),
              s(:args,
                s(:arg, :file)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :symlink?,
                    s(:lvar, :file)), nil,
                  s(:next)),
                s(:send, nil, :warning,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :file)),
                    s(:str, " is a symlink, which is not supported on all platforms"))))),
            s(:send, nil, :validate_dependencies),
            s(:true)),
          s(:if,
            s(:or,
              s(:gvar, :$!),
              s(:send,
                s(:ivar, :@warnings), :>,
                s(:int, 0))),
            s(:send, nil, :alert_warning,
              s(:str, "See http://guides.rubygems.org/specification-reference/ for help")), nil))),
      s(:def, :validate_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :seen,
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :TYPES), :inject,
                s(:hash)),
              s(:args,
                s(:arg, :types),
                s(:arg, :type)),
              s(:send,
                s(:lvar, :types), :merge,
                s(:hash,
                  s(:pair,
                    s(:lvar, :type),
                    s(:hash)))))),
          s(:lvasgn, :error_messages,
            s(:array)),
          s(:lvasgn, :warning_messages,
            s(:array)),
          s(:block,
            s(:send,
              s(:send, nil, :dependencies), :each),
            s(:args,
              s(:arg, :dep)),
            s(:begin,
              s(:if,
                s(:lvasgn, :prev,
                  s(:send,
                    s(:send,
                      s(:lvar, :seen), :[],
                      s(:send,
                        s(:lvar, :dep), :type)), :[],
                    s(:send,
                      s(:lvar, :dep), :name))),
                s(:send,
                  s(:lvar, :error_messages), :<<,
                  s(:dstr,
                    s(:str, "duplicate dependency on "),
                    s(:begin,
                      s(:lvar, :dep)),
                    s(:str, ", ("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :prev), :requirement)),
                    s(:str, ") use:\n"),
                    s(:str, "    add_"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dep), :type)),
                    s(:str, "_dependency '"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dep), :name)),
                    s(:str, "', '"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dep), :requirement)),
                    s(:str, "', '"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :prev), :requirement)),
                    s(:str, "'\n"))), nil),
              s(:send,
                s(:send,
                  s(:lvar, :seen), :[],
                  s(:send,
                    s(:lvar, :dep), :type)), :[]=,
                s(:send,
                  s(:lvar, :dep), :name),
                s(:lvar, :dep)),
              s(:lvasgn, :prerelease_dep,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :dep), :requirements_list), :any?),
                  s(:args,
                    s(:arg, :req)),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Requirement), :new,
                      s(:lvar, :req)), :prerelease?))),
              s(:if,
                s(:and,
                  s(:lvar, :prerelease_dep),
                  s(:send,
                    s(:send,
                      s(:send, nil, :version), :prerelease?), :!)),
                s(:send,
                  s(:lvar, :warning_messages), :<<,
                  s(:dstr,
                    s(:str, "prerelease dependency on "),
                    s(:begin,
                      s(:lvar, :dep)),
                    s(:str, " is not recommended"))), nil),
              s(:lvasgn, :overly_strict,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dep), :requirement), :requirements), :length), :==,
                    s(:int, 1)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dep), :requirement), :requirements), :any?),
                    s(:args,
                      s(:arg, :op),
                      s(:arg, :version)),
                    s(:and,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:lvar, :op), :==,
                            s(:str, "~>")),
                          s(:send,
                            s(:send,
                              s(:lvar, :version), :prerelease?), :!)),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :version), :segments), :length), :>,
                          s(:int, 2))),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :version), :segments), :first), :!=,
                        s(:int, 0)))))),
              s(:if,
                s(:lvar, :overly_strict),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :_),
                      s(:lvasgn, :dep_version)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dep), :requirement), :requirements), :first)),
                  s(:lvasgn, :base,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep_version), :segments), :first,
                      s(:int, 2))),
                  s(:send,
                    s(:lvar, :warning_messages), :<<,
                    s(:dstr,
                      s(:str, "pessimistic dependency on "),
                      s(:begin,
                        s(:lvar, :dep)),
                      s(:str, " may be overly strict\n"),
                      s(:str, "  if "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, " is semantically versioned, use:\n"),
                      s(:str, "    add_"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :type)),
                      s(:str, "_dependency '"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, "', '~> "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :base), :join,
                          s(:str, "."))),
                      s(:str, "', '>= "),
                      s(:begin,
                        s(:lvar, :dep_version)),
                      s(:str, "'\n")))), nil),
              s(:lvasgn, :open_ended,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep), :requirement), :requirements), :all?),
                  s(:args,
                    s(:arg, :op),
                    s(:arg, :version)),
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :version), :prerelease?), :!),
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :op), :==,
                          s(:str, ">")),
                        s(:send,
                          s(:lvar, :op), :==,
                          s(:str, ">="))))))),
              s(:if,
                s(:lvar, :open_ended),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :op),
                      s(:lvasgn, :dep_version)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :dep), :requirement), :requirements), :first)),
                  s(:lvasgn, :base,
                    s(:send,
                      s(:send,
                        s(:lvar, :dep_version), :segments), :first,
                      s(:int, 2))),
                  s(:lvasgn, :bugfix,
                    s(:if,
                      s(:send,
                        s(:lvar, :op), :==,
                        s(:str, ">")),
                      s(:dstr,
                        s(:str, ", '> "),
                        s(:begin,
                          s(:lvar, :dep_version)),
                        s(:str, "'")),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :op), :==,
                            s(:str, ">=")),
                          s(:send,
                            s(:lvar, :base), :!=,
                            s(:send,
                              s(:lvar, :dep_version), :segments))),
                        s(:dstr,
                          s(:str, ", '>= "),
                          s(:begin,
                            s(:lvar, :dep_version)),
                          s(:str, "'")), nil))),
                  s(:send,
                    s(:lvar, :warning_messages), :<<,
                    s(:dstr,
                      s(:str, "open-ended dependency on "),
                      s(:begin,
                        s(:lvar, :dep)),
                      s(:str, " is not recommended\n"),
                      s(:str, "  if "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, " is semantically versioned, use:\n"),
                      s(:str, "    add_"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :type)),
                      s(:str, "_dependency '"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dep), :name)),
                      s(:str, "', '~> "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :base), :join,
                          s(:str, "."))),
                      s(:str, "'"),
                      s(:begin,
                        s(:lvar, :bugfix)),
                      s(:str, "\n")))), nil))),
          s(:if,
            s(:send,
              s(:lvar, :error_messages), :any?),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :InvalidSpecificationException),
              s(:send,
                s(:lvar, :error_messages), :join)), nil),
          s(:if,
            s(:send,
              s(:lvar, :warning_messages), :any?),
            s(:block,
              s(:send,
                s(:lvar, :warning_messages), :each),
              s(:args,
                s(:arg, :warning_message)),
              s(:send, nil, :warning,
                s(:lvar, :warning_message))), nil))),
      s(:def, :validate_permissions,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Gem), :win_platform?),
            s(:return), nil),
          s(:block,
            s(:send,
              s(:send, nil, :files), :each),
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :File), :file?,
                  s(:lvar, :file)), nil,
                s(:next)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:const, nil, :File), :stat,
                        s(:lvar, :file)), :mode), :&,
                    s(:int, 292)), :==,
                  s(:int, 292)),
                s(:next), nil),
              s(:send, nil, :warning,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :file)),
                  s(:str, " is not world-readable"))))),
          s(:block,
            s(:send,
              s(:send, nil, :executables), :each),
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:lvasgn, :exec,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:ivar, :@bindir),
                  s(:lvar, :name))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :file?,
                  s(:lvar, :exec)), nil,
                s(:next)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :stat,
                    s(:lvar, :exec)), :executable?),
                s(:next), nil),
              s(:send, nil, :warning,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :exec)),
                  s(:str, " is not executable"))))))),
      s(:def, :version=,
        s(:args,
          s(:arg, :version)),
        s(:begin,
          s(:ivasgn, :@version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :create,
              s(:lvar, :version))),
          s(:if,
            s(:send,
              s(:ivar, :@version), :prerelease?),
            s(:send,
              s(:self), :required_rubygems_version=,
              s(:str, "> 1.3.1")), nil),
          s(:send, nil, :invalidate_memoized_attributes),
          s(:return,
            s(:ivar, :@version)))),
      s(:def, :stubbed?,
        s(:args),
        s(:false)),
      s(:def, :yaml_initialize,
        s(:args,
          s(:arg, :tag),
          s(:arg, :vals)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :vals), :each),
            s(:args,
              s(:arg, :ivar),
              s(:arg, :val)),
            s(:case,
              s(:lvar, :ivar),
              s(:when,
                s(:str, "date"),
                s(:send,
                  s(:self), :date=,
                  s(:send,
                    s(:lvar, :val), :untaint))),
              s(:send, nil, :instance_variable_set,
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :ivar))),
                s(:send,
                  s(:lvar, :val), :untaint)))),
          s(:ivasgn, :@original_platform,
            s(:ivar, :@platform)),
          s(:send,
            s(:self), :platform=,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :new,
              s(:ivar, :@platform))))),
      s(:def, :reset_nil_attributes_to_default,
        s(:args),
        s(:begin,
          s(:lvasgn, :nil_attributes,
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :class), :non_nil_attributes), :find_all),
              s(:args,
                s(:arg, :name)),
              s(:or,
                s(:send,
                  s(:send, nil, :instance_variable_defined?,
                    s(:dstr,
                      s(:str, "@"),
                      s(:begin,
                        s(:lvar, :name)))), :!),
                s(:send,
                  s(:send, nil, :instance_variable_get,
                    s(:dstr,
                      s(:str, "@"),
                      s(:begin,
                        s(:lvar, :name)))), :nil?)))),
          s(:block,
            s(:send,
              s(:lvar, :nil_attributes), :each),
            s(:args,
              s(:arg, :attribute)),
            s(:begin,
              s(:lvasgn, :default,
                s(:send,
                  s(:self), :default_value,
                  s(:lvar, :attribute))),
              s(:lvasgn, :value,
                s(:case,
                  s(:lvar, :default),
                  s(:when,
                    s(:const, nil, :Time),
                    s(:const, nil, :Numeric),
                    s(:const, nil, :Symbol),
                    s(:true),
                    s(:false),
                    s(:nil),
                    s(:lvar, :default)),
                  s(:send,
                    s(:lvar, :default), :dup))),
              s(:send, nil, :instance_variable_set,
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :attribute))),
                s(:lvar, :value)))),
          s(:or_asgn,
            s(:ivasgn, :@installed_by_version),
            s(:nil)))),
      s(:def, :warning,
        s(:args,
          s(:arg, :statement)),
        s(:begin,
          s(:op_asgn,
            s(:ivasgn, :@warnings), :+,
            s(:int, 1)),
          s(:send, nil, :alert_warning,
            s(:lvar, :statement)))),
      s(:def, :raw_require_paths,
        s(:args),
        s(:ivar, :@require_paths)),
      s(:send, nil, :extend,
        s(:const,
          s(:const, nil, :Gem), :Deprecate)))),
  s(:send,
    s(:const, nil, :Gem), :clear_paths))
