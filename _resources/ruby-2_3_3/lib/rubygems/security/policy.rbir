s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Security), :Policy), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:send, nil, :attr_reader,
        s(:sym, :name)),
      s(:send, nil, :attr_accessor,
        s(:sym, :only_signed)),
      s(:send, nil, :attr_accessor,
        s(:sym, :only_trusted)),
      s(:send, nil, :attr_accessor,
        s(:sym, :verify_chain)),
      s(:send, nil, :attr_accessor,
        s(:sym, :verify_data)),
      s(:send, nil, :attr_accessor,
        s(:sym, :verify_root)),
      s(:send, nil, :attr_accessor,
        s(:sym, :verify_signer)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :name),
          s(:optarg, :policy,
            s(:hash)),
          s(:optarg, :opt,
            s(:hash))),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "openssl")),
          s(:ivasgn, :@name,
            s(:lvar, :name)),
          s(:ivasgn, :@opt,
            s(:lvar, :opt)),
          s(:ivasgn, :@only_signed,
            s(:true)),
          s(:ivasgn, :@only_trusted,
            s(:true)),
          s(:ivasgn, :@verify_chain,
            s(:true)),
          s(:ivasgn, :@verify_data,
            s(:true)),
          s(:ivasgn, :@verify_root,
            s(:true)),
          s(:ivasgn, :@verify_signer,
            s(:true)),
          s(:block,
            s(:send,
              s(:lvar, :policy), :each_pair),
            s(:args,
              s(:arg, :key),
              s(:arg, :val)),
            s(:case,
              s(:lvar, :key),
              s(:when,
                s(:sym, :verify_data),
                s(:ivasgn, :@verify_data,
                  s(:lvar, :val))),
              s(:when,
                s(:sym, :verify_signer),
                s(:ivasgn, :@verify_signer,
                  s(:lvar, :val))),
              s(:when,
                s(:sym, :verify_chain),
                s(:ivasgn, :@verify_chain,
                  s(:lvar, :val))),
              s(:when,
                s(:sym, :verify_root),
                s(:ivasgn, :@verify_root,
                  s(:lvar, :val))),
              s(:when,
                s(:sym, :only_trusted),
                s(:ivasgn, :@only_trusted,
                  s(:lvar, :val))),
              s(:when,
                s(:sym, :only_signed),
                s(:ivasgn, :@only_signed,
                  s(:lvar, :val))), nil)))),
      s(:def, :check_chain,
        s(:args,
          s(:arg, :chain),
          s(:arg, :time)),
        s(:begin,
          s(:if,
            s(:lvar, :chain), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "missing signing chain"))),
          s(:if,
            s(:send,
              s(:lvar, :chain), :empty?),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "empty signing chain")), nil),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :chain), :each_cons,
                    s(:int, 2)),
                  s(:args,
                    s(:arg, :issuer),
                    s(:arg, :cert)),
                  s(:send, nil, :check_cert,
                    s(:lvar, :cert),
                    s(:lvar, :issuer),
                    s(:lvar, :time))),
                s(:true)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception)),
                s(:lvasgn, :e),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception),
                  s(:dstr,
                    s(:str, "invalid signing chain: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :e), :message))))), nil)))),
      s(:def, :check_data,
        s(:args,
          s(:arg, :public_key),
          s(:arg, :digest),
          s(:arg, :signature),
          s(:arg, :data)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :public_key), :verify,
              s(:send,
                s(:lvar, :digest), :new),
              s(:lvar, :signature),
              s(:send,
                s(:lvar, :data), :digest)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "invalid signature"))),
          s(:true))),
      s(:def, :check_cert,
        s(:args,
          s(:arg, :signer),
          s(:arg, :issuer),
          s(:arg, :time)),
        s(:begin,
          s(:if,
            s(:lvar, :signer), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "missing signing certificate"))),
          s(:lvasgn, :message,
            s(:dstr,
              s(:str, "certificate "),
              s(:begin,
                s(:send,
                  s(:lvar, :signer), :subject)))),
          s(:if,
            s(:and,
              s(:lvasgn, :not_before,
                s(:send,
                  s(:lvar, :signer), :not_before)),
              s(:send,
                s(:lvar, :not_before), :>,
                s(:lvar, :time))),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:dstr,
                s(:begin,
                  s(:lvar, :message)),
                s(:str, " not valid before "),
                s(:begin,
                  s(:lvar, :not_before)))), nil),
          s(:if,
            s(:and,
              s(:lvasgn, :not_after,
                s(:send,
                  s(:lvar, :signer), :not_after)),
              s(:send,
                s(:lvar, :not_after), :<,
                s(:lvar, :time))),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:dstr,
                s(:begin,
                  s(:lvar, :message)),
                s(:str, " not valid after "),
                s(:begin,
                  s(:lvar, :not_after)))), nil),
          s(:if,
            s(:and,
              s(:lvar, :issuer),
              s(:send,
                s(:send,
                  s(:lvar, :signer), :verify,
                  s(:send,
                    s(:lvar, :issuer), :public_key)), :!)),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:dstr,
                s(:begin,
                  s(:lvar, :message)),
                s(:str, " was not issued by "),
                s(:begin,
                  s(:send,
                    s(:lvar, :issuer), :subject)))), nil),
          s(:true))),
      s(:def, :check_key,
        s(:args,
          s(:arg, :signer),
          s(:arg, :key)),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvar, :signer),
              s(:lvar, :key)), nil,
            s(:begin,
              s(:if,
                s(:ivar, :@only_signed), nil,
                s(:return,
                  s(:true))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception),
                s(:str, "missing key or signature")))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :signer), :public_key), :to_pem), :==,
              s(:send,
                s(:send,
                  s(:lvar, :key), :public_key), :to_pem)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:dstr,
                s(:str, "certificate "),
                s(:begin,
                  s(:send,
                    s(:lvar, :signer), :subject)),
                s(:str, " does not match the signing key")))),
          s(:true))),
      s(:def, :check_root,
        s(:args,
          s(:arg, :chain),
          s(:arg, :time)),
        s(:begin,
          s(:if,
            s(:lvar, :chain), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "missing signing chain"))),
          s(:lvasgn, :root,
            s(:send,
              s(:lvar, :chain), :first)),
          s(:if,
            s(:lvar, :root), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "missing root certificate"))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :root), :issuer), :to_s), :!=,
              s(:send,
                s(:send,
                  s(:lvar, :root), :subject), :to_s)),
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:send,
                s(:dstr,
                  s(:str, "root certificate "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :root), :subject)),
                  s(:str, " is not self-signed ")), :+,
                s(:dstr,
                  s(:str, "(issuer "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :root), :issuer)),
                  s(:str, ")")))), nil),
          s(:send, nil, :check_cert,
            s(:lvar, :root),
            s(:lvar, :root),
            s(:lvar, :time)))),
      s(:def, :check_trust,
        s(:args,
          s(:arg, :chain),
          s(:arg, :digester),
          s(:arg, :trust_dir)),
        s(:begin,
          s(:if,
            s(:lvar, :chain), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "missing signing chain"))),
          s(:lvasgn, :root,
            s(:send,
              s(:lvar, :chain), :first)),
          s(:if,
            s(:lvar, :root), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:str, "missing root certificate"))),
          s(:lvasgn, :path,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Security), :trust_dir), :cert_path,
              s(:lvar, :root))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :path)), nil,
            s(:begin,
              s(:lvasgn, :message,
                s(:send,
                  s(:dstr,
                    s(:str, "root cert "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :root), :subject)),
                    s(:str, " is not trusted")), :dup)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :chain), :length), :>,
                  s(:int, 1)),
                s(:send,
                  s(:lvar, :message), :<<,
                  s(:dstr,
                    s(:str, " (root of signing cert "),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :chain), :last), :subject)),
                    s(:str, ")"))), nil),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception),
                s(:lvar, :message)))),
          s(:lvasgn, :save_cert,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
              s(:send,
                s(:const, nil, :File), :read,
                s(:lvar, :path)))),
          s(:lvasgn, :save_dgst,
            s(:send,
              s(:lvar, :digester), :digest,
              s(:send,
                s(:send,
                  s(:lvar, :save_cert), :public_key), :to_s))),
          s(:lvasgn, :pkey_str,
            s(:send,
              s(:send,
                s(:lvar, :root), :public_key), :to_s)),
          s(:lvasgn, :cert_dgst,
            s(:send,
              s(:lvar, :digester), :digest,
              s(:lvar, :pkey_str))),
          s(:if,
            s(:send,
              s(:lvar, :save_dgst), :==,
              s(:lvar, :cert_dgst)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Security), :Exception),
              s(:send,
                s(:dstr,
                  s(:str, "trusted root certificate "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :root), :subject)),
                  s(:str, " checksum ")), :+,
                s(:str, "does not match signing root certificate checksum")))),
          s(:true))),
      s(:def, :subject,
        s(:args,
          s(:arg, :certificate)),
        s(:begin,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :certificate), :extensions), :each),
            s(:args,
              s(:arg, :extension)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :extension), :oid), :==,
                  s(:str, "subjectAltName")), nil,
                s(:next)),
              s(:return,
                s(:send,
                  s(:lvar, :extension), :value)))),
          s(:send,
            s(:send,
              s(:lvar, :certificate), :subject), :to_s))),
      s(:def, :inspect,
        s(:args),
        s(:send,
          s(:begin,
            s(:send,
              s(:str, "[Policy: %s - data: %p signer: %p chain: %p root: %p "), :+,
              s(:str, "signed-only: %p trusted-only: %p]"))), :%,
          s(:array,
            s(:ivar, :@name),
            s(:ivar, :@verify_chain),
            s(:ivar, :@verify_data),
            s(:ivar, :@verify_root),
            s(:ivar, :@verify_signer),
            s(:ivar, :@only_signed),
            s(:ivar, :@only_trusted)))),
      s(:def, :verify,
        s(:args,
          s(:arg, :chain),
          s(:optarg, :key,
            s(:nil)),
          s(:optarg, :digests,
            s(:hash)),
          s(:optarg, :signatures,
            s(:hash)),
          s(:optarg, :full_name,
            s(:str, "(unknown)"))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :signatures), :empty?),
            s(:if,
              s(:ivar, :@only_signed),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception),
                s(:dstr,
                  s(:str, "unsigned gems are not allowed by the "),
                  s(:begin,
                    s(:send, nil, :name)),
                  s(:str, " policy"))),
              s(:if,
                s(:send,
                  s(:lvar, :digests), :empty?), nil,
                s(:begin,
                  s(:send, nil, :alert_warning,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :full_name)),
                      s(:str, " is not signed"))),
                  s(:return)))), nil),
          s(:lvasgn, :opt,
            s(:ivar, :@opt)),
          s(:lvasgn, :digester,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :DIGEST_ALGORITHM)),
          s(:lvasgn, :trust_dir,
            s(:send,
              s(:lvar, :opt), :[],
              s(:sym, :trust_dir))),
          s(:lvasgn, :time,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :_),
              s(:lvasgn, :signer_digests)),
            s(:block,
              s(:send,
                s(:lvar, :digests), :find),
              s(:args,
                s(:arg, :algorithm),
                s(:arg, :file_digests)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :file_digests), :values), :first), :name), :==,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :DIGEST_NAME)))),
          s(:if,
            s(:ivar, :@verify_data),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :signer_digests), :nil?),
                s(:send,
                  s(:lvar, :signer_digests), :empty?)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Security), :Exception),
                s(:str, "no digests provided (probable bug)")), nil),
            s(:lvasgn, :signer_digests,
              s(:hash))),
          s(:lvasgn, :signer,
            s(:send,
              s(:lvar, :chain), :last)),
          s(:if,
            s(:lvar, :key),
            s(:send, nil, :check_key,
              s(:lvar, :signer),
              s(:lvar, :key)), nil),
          s(:if,
            s(:ivar, :@verify_signer),
            s(:send, nil, :check_cert,
              s(:lvar, :signer),
              s(:nil),
              s(:lvar, :time)), nil),
          s(:if,
            s(:ivar, :@verify_chain),
            s(:send, nil, :check_chain,
              s(:lvar, :chain),
              s(:lvar, :time)), nil),
          s(:if,
            s(:ivar, :@verify_root),
            s(:send, nil, :check_root,
              s(:lvar, :chain),
              s(:lvar, :time)), nil),
          s(:if,
            s(:ivar, :@only_trusted),
            s(:send, nil, :check_trust,
              s(:lvar, :chain),
              s(:lvar, :digester),
              s(:lvar, :trust_dir)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :signatures), :empty?),
                s(:send,
                  s(:lvar, :digests), :empty?)), nil,
              s(:send, nil, :alert_warning,
                s(:dstr,
                  s(:begin,
                    s(:send, nil, :subject,
                      s(:lvar, :signer))),
                  s(:str, " is not trusted for "),
                  s(:begin,
                    s(:lvar, :full_name)))))),
          s(:block,
            s(:send,
              s(:lvar, :signatures), :each),
            s(:args,
              s(:arg, :file),
              s(:arg, :_)),
            s(:begin,
              s(:lvasgn, :digest,
                s(:send,
                  s(:lvar, :signer_digests), :[],
                  s(:lvar, :file))),
              s(:if,
                s(:lvar, :digest), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception),
                  s(:dstr,
                    s(:str, "missing digest for "),
                    s(:begin,
                      s(:lvar, :file))))))),
          s(:block,
            s(:send,
              s(:lvar, :signer_digests), :each),
            s(:args,
              s(:arg, :file),
              s(:arg, :digest)),
            s(:begin,
              s(:lvasgn, :signature,
                s(:send,
                  s(:lvar, :signatures), :[],
                  s(:lvar, :file))),
              s(:if,
                s(:lvar, :signature), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Security), :Exception),
                  s(:dstr,
                    s(:str, "missing signature for "),
                    s(:begin,
                      s(:lvar, :file))))),
              s(:if,
                s(:ivar, :@verify_data),
                s(:send, nil, :check_data,
                  s(:send,
                    s(:lvar, :signer), :public_key),
                  s(:lvar, :digester),
                  s(:lvar, :signature),
                  s(:lvar, :digest)), nil))),
          s(:true))),
      s(:def, :verify_signatures,
        s(:args,
          s(:arg, :spec),
          s(:arg, :digests),
          s(:arg, :signatures)),
        s(:begin,
          s(:lvasgn, :chain,
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :cert_chain), :map),
              s(:args,
                s(:arg, :cert_pem)),
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :X509), :Certificate), :new,
                s(:lvar, :cert_pem)))),
          s(:send, nil, :verify,
            s(:lvar, :chain),
            s(:nil),
            s(:lvar, :digests),
            s(:lvar, :signatures),
            s(:send,
              s(:lvar, :spec), :full_name)),
          s(:true))),
      s(:alias,
        s(:sym, :to_s),
        s(:sym, :name)))))
