s(:begin,
  s(:send, nil, :require,
    s(:str, "tempfile")),
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:send, nil, :require,
    s(:str, "rubygems/remote_fetcher")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :FakeFetcher), nil,
    s(:begin,
      s(:send, nil, :attr_reader,
        s(:sym, :data)),
      s(:send, nil, :attr_reader,
        s(:sym, :last_request)),
      s(:send, nil, :attr_reader,
        s(:sym, :api_endpoints)),
      s(:send, nil, :attr_accessor,
        s(:sym, :paths)),
      s(:def, :initialize,
        s(:args),
        s(:begin,
          s(:ivasgn, :@data,
            s(:hash)),
          s(:ivasgn, :@paths,
            s(:array)),
          s(:ivasgn, :@api_endpoints,
            s(:hash)))),
      s(:def, :api_endpoint,
        s(:args,
          s(:arg, :uri)),
        s(:or,
          s(:send,
            s(:ivar, :@api_endpoints), :[],
            s(:lvar, :uri)),
          s(:lvar, :uri))),
      s(:def, :find_data,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :URI), :===,
                s(:lvar, :path)),
              s(:send,
                s(:str, "file"), :==,
                s(:send,
                  s(:lvar, :path), :scheme))),
            s(:return,
              s(:send,
                s(:const, nil, :File), :read,
                s(:send,
                  s(:lvar, :path), :path))), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :URI), :===,
                s(:lvar, :path)),
              s(:send,
                s(:dstr,
                  s(:str, "URI::"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :path), :scheme), :upcase))), :!=,
                s(:send,
                  s(:send,
                    s(:lvar, :path), :class), :name))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "mismatch for scheme "),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :scheme)),
                s(:str, " and class "),
                s(:begin,
                  s(:send,
                    s(:lvar, :path), :class)))), nil),
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :path), :to_s)),
          s(:send,
            s(:ivar, :@paths), :<<,
            s(:lvar, :path)),
          s(:if,
            s(:send,
              s(:lvar, :path), :=~,
              s(:regexp,
                s(:str, "^https?://"),
                s(:regopt))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "need full URI"))),
          s(:if,
            s(:send,
              s(:ivar, :@data), :key?,
              s(:lvar, :path)), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                s(:dstr,
                  s(:str, "no data for "),
                  s(:begin,
                    s(:lvar, :path))),
                s(:lvar, :path)))),
          s(:send,
            s(:ivar, :@data), :[],
            s(:lvar, :path)))),
      s(:def, :fetch_path,
        s(:args,
          s(:arg, :path),
          s(:optarg, :mtime,
            s(:nil)),
          s(:optarg, :head,
            s(:false))),
        s(:begin,
          s(:lvasgn, :data,
            s(:send, nil, :find_data,
              s(:lvar, :path))),
          s(:if,
            s(:send,
              s(:lvar, :data), :respond_to?,
              s(:sym, :call)),
            s(:send,
              s(:lvar, :data), :call),
            s(:begin,
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :path), :to_s), :=~,
                      s(:regexp,
                        s(:str, "gz$"),
                        s(:regopt))),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :nil?), :!)),
                  s(:send,
                    s(:send,
                      s(:lvar, :data), :empty?), :!)),
                s(:lvasgn, :data,
                  s(:send,
                    s(:const, nil, :Gem), :gunzip,
                    s(:lvar, :data))), nil),
              s(:lvar, :data))))),
      s(:def, :cache_update_path,
        s(:args,
          s(:arg, :uri),
          s(:optarg, :path,
            s(:nil)),
          s(:optarg, :update,
            s(:true))),
        s(:if,
          s(:lvasgn, :data,
            s(:send, nil, :fetch_path,
              s(:lvar, :uri))),
          s(:begin,
            s(:if,
              s(:and,
                s(:lvar, :path),
                s(:lvar, :update)),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :path),
                  s(:str, "wb")),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:lvar, :data))), nil),
            s(:lvar, :data)),
          s(:if,
            s(:lvar, :path),
            s(:send,
              s(:const, nil, :Gem), :read_binary,
              s(:lvar, :path)), nil))),
      s(:def, :open_uri_or_path,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :data,
            s(:send, nil, :find_data,
              s(:lvar, :path))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :body),
              s(:lvasgn, :code),
              s(:lvasgn, :msg)),
            s(:lvar, :data)),
          s(:lvasgn, :response,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse), :send,
                s(:sym, :response_class),
                s(:send,
                  s(:lvar, :code), :to_s)), :new,
              s(:str, "1.0"),
              s(:send,
                s(:lvar, :code), :to_s),
              s(:lvar, :msg))),
          s(:send,
            s(:lvar, :response), :instance_variable_set,
            s(:sym, :@body),
            s(:lvar, :body)),
          s(:send,
            s(:lvar, :response), :instance_variable_set,
            s(:sym, :@read),
            s(:true)),
          s(:lvar, :response))),
      s(:def, :request,
        s(:args,
          s(:arg, :uri),
          s(:arg, :request_class),
          s(:optarg, :last_modified,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :data,
            s(:send, nil, :find_data,
              s(:lvar, :uri))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :body),
              s(:lvasgn, :code),
              s(:lvasgn, :msg)),
            s(:lvar, :data)),
          s(:ivasgn, :@last_request,
            s(:send,
              s(:lvar, :request_class), :new,
              s(:send,
                s(:lvar, :uri), :request_uri))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:ivar, :@last_request)), nil),
          s(:lvasgn, :response,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse), :send,
                s(:sym, :response_class),
                s(:send,
                  s(:lvar, :code), :to_s)), :new,
              s(:str, "1.0"),
              s(:send,
                s(:lvar, :code), :to_s),
              s(:lvar, :msg))),
          s(:send,
            s(:lvar, :response), :instance_variable_set,
            s(:sym, :@body),
            s(:lvar, :body)),
          s(:send,
            s(:lvar, :response), :instance_variable_set,
            s(:sym, :@read),
            s(:true)),
          s(:lvar, :response))),
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 2),
            s(:str, "[FakeFetcher"),
            s(:str, "]")),
          s(:args),
          s(:begin,
            s(:send,
              s(:lvar, :q), :breakable),
            s(:send,
              s(:lvar, :q), :text,
              s(:str, "URIs:")),
            s(:send,
              s(:lvar, :q), :breakable),
            s(:send,
              s(:lvar, :q), :pp,
              s(:send,
                s(:ivar, :@data), :keys)),
            s(:if,
              s(:send,
                s(:ivar, :@api_endpoints), :empty?), nil,
              s(:begin,
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, "API endpoints:")),
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :pp,
                  s(:send,
                    s(:ivar, :@api_endpoints), :keys))))))),
      s(:def, :fetch_size,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :path,
            s(:send,
              s(:lvar, :path), :to_s)),
          s(:send,
            s(:ivar, :@paths), :<<,
            s(:lvar, :path)),
          s(:if,
            s(:send,
              s(:lvar, :path), :=~,
              s(:regexp,
                s(:str, "^http://"),
                s(:regopt))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "need full URI"))),
          s(:if,
            s(:send,
              s(:ivar, :@data), :key?,
              s(:lvar, :path)), nil,
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :RemoteFetcher), :FetchError), :new,
                s(:dstr,
                  s(:str, "no data for "),
                  s(:begin,
                    s(:lvar, :path))),
                s(:lvar, :path)))),
          s(:lvasgn, :data,
            s(:send,
              s(:ivar, :@data), :[],
              s(:lvar, :path))),
          s(:if,
            s(:send,
              s(:lvar, :data), :respond_to?,
              s(:sym, :call)),
            s(:send,
              s(:lvar, :data), :call),
            s(:send,
              s(:lvar, :data), :length)))),
      s(:def, :download,
        s(:args,
          s(:arg, :spec),
          s(:arg, :source_uri),
          s(:optarg, :install_dir,
            s(:send,
              s(:const, nil, :Gem), :dir))),
        s(:begin,
          s(:lvasgn, :name,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:send,
                s(:lvar, :spec), :cache_file))),
          s(:lvasgn, :path,
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Dir), :pwd), :==,
                s(:lvar, :install_dir)),
              s(:lvar, :install_dir),
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :install_dir),
                s(:str, "cache")))),
          s(:lvasgn, :path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :path),
              s(:lvar, :name))),
          s(:if,
            s(:send,
              s(:lvar, :source_uri), :=~,
              s(:regexp,
                s(:str, "^http"),
                s(:regopt))),
            s(:block,
              s(:send,
                s(:const, nil, :File), :open,
                s(:lvar, :path),
                s(:str, "wb")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :write,
                s(:send, nil, :fetch_path,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :source_uri),
                    s(:str, "gems"),
                    s(:lvar, :name))))),
            s(:send,
              s(:const, nil, :FileUtils), :cp,
              s(:lvar, :source_uri),
              s(:lvar, :path))),
          s(:lvar, :path))),
      s(:def, :download_to_cache,
        s(:args,
          s(:arg, :dependency)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :found),
              s(:lvasgn, :_)),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :SpecFetcher), :fetcher), :spec_for_dependency,
              s(:lvar, :dependency))),
          s(:if,
            s(:send,
              s(:lvar, :found), :empty?),
            s(:return), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :spec),
              s(:lvasgn, :source)),
            s(:send,
              s(:lvar, :found), :first)),
          s(:send, nil, :download,
            s(:lvar, :spec),
            s(:send,
              s(:send,
                s(:lvar, :source), :uri), :to_s)))))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :RemoteFetcher), nil,
    s(:defs,
      s(:self), :fetcher=,
      s(:args,
        s(:arg, :fetcher)),
      s(:ivasgn, :@fetcher,
        s(:lvar, :fetcher)))),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :TestCase), :SpecFetcherSetup), nil,
    s(:begin,
      s(:defs,
        s(:self), :declare,
        s(:args,
          s(:arg, :test),
          s(:arg, :repository)),
        s(:begin,
          s(:lvasgn, :setup,
            s(:send, nil, :new,
              s(:lvar, :test),
              s(:lvar, :repository))),
          s(:yield,
            s(:lvar, :setup)),
          s(:send,
            s(:lvar, :setup), :execute))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :test),
          s(:arg, :repository)),
        s(:begin,
          s(:ivasgn, :@test,
            s(:lvar, :test)),
          s(:ivasgn, :@repository,
            s(:lvar, :repository)),
          s(:ivasgn, :@gems,
            s(:hash)),
          s(:ivasgn, :@downloaded,
            s(:array)),
          s(:ivasgn, :@installed,
            s(:array)),
          s(:ivasgn, :@operations,
            s(:array)))),
      s(:def, :created_specs,
        s(:args),
        s(:begin,
          s(:lvasgn, :created,
            s(:hash)),
          s(:block,
            s(:send,
              s(:send,
                s(:ivar, :@gems), :keys), :each),
            s(:args,
              s(:arg, :spec)),
            s(:send,
              s(:lvar, :created), :[]=,
              s(:send,
                s(:lvar, :spec), :full_name),
              s(:lvar, :spec))),
          s(:lvar, :created))),
      s(:def, :execute,
        s(:args),
        s(:begin,
          s(:send, nil, :execute_operations),
          s(:send, nil, :setup_fetcher),
          s(:send, nil, :created_specs))),
      s(:def, :execute_operations,
        s(:args),
        s(:block,
          s(:send,
            s(:ivar, :@operations), :each),
          s(:args,
            s(:arg, :operation),
            s(:restarg, :arguments)),
          s(:case,
            s(:lvar, :operation),
            s(:when,
              s(:sym, :gem),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :spec),
                    s(:lvasgn, :gem)),
                  s(:send,
                    s(:ivar, :@test), :util_gem,
                    s(:splat,
                      s(:lvar, :arguments)),
                    s(:block_pass,
                      s(:send,
                        s(:lvar, :arguments), :pop)))),
                s(:send, nil, :write_spec,
                  s(:lvar, :spec)),
                s(:send,
                  s(:ivar, :@gems), :[]=,
                  s(:lvar, :spec),
                  s(:lvar, :gem)),
                s(:send,
                  s(:ivar, :@installed), :<<,
                  s(:lvar, :spec)))),
            s(:when,
              s(:sym, :download),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :spec),
                    s(:lvasgn, :gem)),
                  s(:send,
                    s(:ivar, :@test), :util_gem,
                    s(:splat,
                      s(:lvar, :arguments)),
                    s(:block_pass,
                      s(:send,
                        s(:lvar, :arguments), :pop)))),
                s(:send,
                  s(:ivar, :@gems), :[]=,
                  s(:lvar, :spec),
                  s(:lvar, :gem)),
                s(:send,
                  s(:ivar, :@downloaded), :<<,
                  s(:lvar, :spec)))),
            s(:when,
              s(:sym, :spec),
              s(:begin,
                s(:lvasgn, :spec,
                  s(:send,
                    s(:ivar, :@test), :util_spec,
                    s(:splat,
                      s(:lvar, :arguments)),
                    s(:block_pass,
                      s(:send,
                        s(:lvar, :arguments), :pop)))),
                s(:send, nil, :write_spec,
                  s(:lvar, :spec)),
                s(:send,
                  s(:ivar, :@gems), :[]=,
                  s(:lvar, :spec),
                  s(:nil)),
                s(:send,
                  s(:ivar, :@installed), :<<,
                  s(:lvar, :spec)))), nil))),
      s(:def, :gem,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :dependencies,
            s(:nil)),
          s(:blockarg, :block)),
        s(:send,
          s(:ivar, :@operations), :<<,
          s(:array,
            s(:sym, :gem),
            s(:lvar, :name),
            s(:lvar, :version),
            s(:lvar, :dependencies),
            s(:lvar, :block)))),
      s(:def, :download,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :dependencies,
            s(:nil)),
          s(:blockarg, :block)),
        s(:send,
          s(:ivar, :@operations), :<<,
          s(:array,
            s(:sym, :download),
            s(:lvar, :name),
            s(:lvar, :version),
            s(:lvar, :dependencies),
            s(:lvar, :block)))),
      s(:def, :legacy_platform,
        s(:args),
        s(:block,
          s(:send, nil, :spec,
            s(:str, "pl"),
            s(:int, 1)),
          s(:args,
            s(:arg, :s)),
          s(:begin,
            s(:send,
              s(:lvar, :s), :platform=,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Platform), :new,
                s(:str, "i386-linux"))),
            s(:send,
              s(:lvar, :s), :instance_variable_set,
              s(:sym, :@original_platform),
              s(:str, "i386-linux"))))),
      s(:def, :setup_fetcher,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "zlib")),
          s(:send, nil, :require,
            s(:str, "socket")),
          s(:send, nil, :require,
            s(:str, "rubygems/remote_fetcher")),
          s(:if,
            s(:send,
              s(:ivar, :@test), :fetcher), nil,
            s(:begin,
              s(:send,
                s(:ivar, :@test), :fetcher=,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :FakeFetcher), :new)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RemoteFetcher), :fetcher=,
                s(:send,
                  s(:ivar, :@test), :fetcher)))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :gem_repo),
                    s(:send,
                      s(:ivar, :@test), :gem_repo=)),
                  s(:array,
                    s(:send,
                      s(:ivar, :@test), :gem_repo),
                    s(:ivar, :@repository))),
                s(:send,
                  s(:ivar, :@test), :uri=,
                  s(:send, nil, :URI,
                    s(:ivar, :@repository))),
                s(:send,
                  s(:ivar, :@test), :util_setup_spec_fetcher,
                  s(:splat,
                    s(:ivar, :@downloaded)))),
              s(:begin,
                s(:send,
                  s(:ivar, :@test), :gem_repo=,
                  s(:lvar, :gem_repo)),
                s(:send,
                  s(:ivar, :@test), :uri=,
                  s(:send, nil, :URI,
                    s(:lvar, :gem_repo)))))),
          s(:block,
            s(:send,
              s(:ivar, :@gems), :each),
            s(:args,
              s(:arg, :spec),
              s(:arg, :gem)),
            s(:begin,
              s(:if,
                s(:lvar, :gem), nil,
                s(:next)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:ivar, :@test), :fetcher), :data), :[]=,
                s(:dstr,
                  s(:begin,
                    s(:ivar, :@repository)),
                  s(:str, "gems/"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :spec), :file_name))),
                s(:send,
                  s(:const, nil, :Gem), :read_binary,
                  s(:lvar, :gem))),
              s(:send,
                s(:const, nil, :FileUtils), :cp,
                s(:lvar, :gem),
                s(:send,
                  s(:lvar, :spec), :cache_file)))))),
      s(:def, :spec,
        s(:args,
          s(:arg, :name),
          s(:arg, :version),
          s(:optarg, :dependencies,
            s(:nil)),
          s(:blockarg, :block)),
        s(:send,
          s(:ivar, :@operations), :<<,
          s(:array,
            s(:sym, :spec),
            s(:lvar, :name),
            s(:lvar, :version),
            s(:lvar, :dependencies),
            s(:lvar, :block)))),
      s(:def, :write_spec,
        s(:args,
          s(:arg, :spec)),
        s(:block,
          s(:send, nil, :open,
            s(:send,
              s(:lvar, :spec), :spec_file),
            s(:str, "w")),
          s(:args,
            s(:arg, :io)),
          s(:send,
            s(:lvar, :io), :write,
            s(:send,
              s(:lvar, :spec), :to_ruby_for_cache)))))),
  s(:class,
    s(:const, nil, :TempIO),
    s(:const, nil, :Tempfile),
    s(:begin,
      s(:def, :initialize,
        s(:args,
          s(:optarg, :string,
            s(:str, ""))),
        s(:begin,
          s(:super,
            s(:str, "TempIO")),
          s(:send, nil, :binmode),
          s(:send, nil, :write,
            s(:lvar, :string)),
          s(:send, nil, :rewind))),
      s(:def, :string,
        s(:args),
        s(:begin,
          s(:send, nil, :flush),
          s(:send,
            s(:const, nil, :Gem), :read_binary,
            s(:send, nil, :path)))))))
