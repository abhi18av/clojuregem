s(:begin,
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:send, nil, :require,
    s(:str, "rubygems/dependency_list")),
  s(:send, nil, :require,
    s(:str, "rubygems/rdoc")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Uninstaller), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:send, nil, :attr_reader,
        s(:sym, :bin_dir)),
      s(:send, nil, :attr_reader,
        s(:sym, :gem_home)),
      s(:send, nil, :attr_reader,
        s(:sym, :spec)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :gem),
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@gem,
            s(:lvar, :gem)),
          s(:ivasgn, :@version,
            s(:or,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :version)),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default))),
          s(:ivasgn, :@gem_home,
            s(:send,
              s(:const, nil, :File), :expand_path,
              s(:or,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :install_dir)),
                s(:send,
                  s(:const, nil, :Gem), :dir)))),
          s(:ivasgn, :@force_executables,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :executables))),
          s(:ivasgn, :@force_all,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :all))),
          s(:ivasgn, :@force_ignore,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :ignore))),
          s(:ivasgn, :@bin_dir,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :bin_dir))),
          s(:ivasgn, :@format_executable,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :format_executable))),
          s(:ivasgn, :@abort_on_dependent,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :abort_on_dependent))),
          s(:ivasgn, :@check_dev,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :check_dev))),
          s(:if,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :force)),
            s(:begin,
              s(:ivasgn, :@force_all,
                s(:true)),
              s(:ivasgn, :@force_ignore,
                s(:true))), nil),
          s(:ivasgn, :@user_install,
            s(:false)),
          s(:if,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :install_dir)), nil,
            s(:ivasgn, :@user_install,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :user_install)))))),
      s(:def, :uninstall,
        s(:args),
        s(:begin,
          s(:lvasgn, :dependency,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:ivar, :@gem),
              s(:ivar, :@version))),
          s(:lvasgn, :list,
            s(:array)),
          s(:lvasgn, :dirs,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :dirs), :+,
              s(:array,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :default_specifications_dir)))),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :each_spec,
              s(:lvar, :dirs)),
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :dependency), :matches_spec?,
                  s(:lvar, :spec)), nil,
                s(:next)),
              s(:send,
                s(:lvar, :list), :<<,
                s(:lvar, :spec)))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :default_specs),
              s(:lvasgn, :list)),
            s(:block,
              s(:send,
                s(:lvar, :list), :partition),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :default_gem?))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :list),
              s(:lvasgn, :other_repo_specs)),
            s(:block,
              s(:send,
                s(:lvar, :list), :partition),
              s(:args,
                s(:arg, :spec)),
              s(:or,
                s(:send,
                  s(:ivar, :@gem_home), :==,
                  s(:send,
                    s(:lvar, :spec), :base_dir)),
                s(:begin,
                  s(:and,
                    s(:ivar, :@user_install),
                    s(:send,
                      s(:send,
                        s(:lvar, :spec), :base_dir), :==,
                      s(:send,
                        s(:const, nil, :Gem), :user_dir))))))),
          s(:send,
            s(:lvar, :list), :sort!),
          s(:if,
            s(:send,
              s(:lvar, :list), :empty?),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :other_repo_specs), :empty?),
                s(:if,
                  s(:send,
                    s(:lvar, :default_specs), :empty?),
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :Gem), :InstallError),
                    s(:dstr,
                      s(:str, "gem "),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@gem), :inspect)),
                      s(:str, " is not installed"))),
                  s(:begin,
                    s(:lvasgn, :message,
                      s(:send,
                        s(:dstr,
                          s(:str, "gem "),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@gem), :inspect)),
                          s(:str, " cannot be uninstalled ")), :+,
                        s(:str, "because it is a default gem"))),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Gem), :InstallError),
                      s(:lvar, :message)))), nil),
              s(:lvasgn, :other_repos,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :other_repo_specs), :map),
                    s(:args,
                      s(:arg, :spec)),
                    s(:send,
                      s(:lvar, :spec), :base_dir)), :uniq)),
              s(:lvasgn, :message,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:ivar, :@gem)),
                    s(:str, " is not installed in GEM_HOME, try:")))),
              s(:send,
                s(:lvar, :message), :concat,
                s(:block,
                  s(:send,
                    s(:lvar, :other_repos), :map),
                  s(:args,
                    s(:arg, :repo)),
                  s(:dstr,
                    s(:str, "\tgem uninstall -i "),
                    s(:begin,
                      s(:lvar, :repo)),
                    s(:str, " "),
                    s(:begin,
                      s(:ivar, :@gem))))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :InstallError),
                s(:send,
                  s(:lvar, :message), :join,
                  s(:str, "\n")))),
            s(:if,
              s(:ivar, :@force_all),
              s(:send, nil, :remove_all,
                s(:lvar, :list)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :list), :size), :>,
                  s(:int, 1)),
                s(:begin,
                  s(:lvasgn, :gem_names,
                    s(:block,
                      s(:send,
                        s(:lvar, :list), :map),
                      s(:args,
                        s(:arg, :gem)),
                      s(:send,
                        s(:lvar, :gem), :full_name))),
                  s(:send,
                    s(:lvar, :gem_names), :<<,
                    s(:str, "All versions")),
                  s(:send, nil, :say),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :_),
                      s(:lvasgn, :index)),
                    s(:send, nil, :choose_from_list,
                      s(:str, "Select gem to uninstall:"),
                      s(:lvar, :gem_names))),
                  s(:if,
                    s(:send,
                      s(:lvar, :index), :==,
                      s(:send,
                        s(:lvar, :list), :size)),
                    s(:send, nil, :remove_all,
                      s(:lvar, :list)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :index), :>=,
                          s(:int, 0)),
                        s(:send,
                          s(:lvar, :index), :<,
                          s(:send,
                            s(:lvar, :list), :size))),
                      s(:send, nil, :uninstall_gem,
                        s(:send,
                          s(:lvar, :list), :[],
                          s(:lvar, :index))),
                      s(:send, nil, :say,
                        s(:dstr,
                          s(:str, "Error: must enter a number [1-"),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :list), :size), :+,
                              s(:int, 1))),
                          s(:str, "]")))))),
                s(:send, nil, :uninstall_gem,
                  s(:send,
                    s(:lvar, :list), :first))))))),
      s(:def, :uninstall_gem,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:ivasgn, :@spec,
            s(:lvar, :spec)),
          s(:if,
            s(:send, nil, :dependencies_ok?,
              s(:lvar, :spec)), nil,
            s(:if,
              s(:or,
                s(:send, nil, :abort_on_dependent?),
                s(:send,
                  s(:send, nil, :ask_if_ok,
                    s(:lvar, :spec)), :!)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :DependencyRemovalException),
                s(:str, "Uninstallation aborted due to dependent gem(s)")), nil)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :pre_uninstall_hooks), :each),
            s(:args,
              s(:arg, :hook)),
            s(:send,
              s(:lvar, :hook), :call,
              s(:self))),
          s(:send, nil, :remove_executables,
            s(:ivar, :@spec)),
          s(:send, nil, :remove,
            s(:ivar, :@spec)),
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :post_uninstall_hooks), :each),
            s(:args,
              s(:arg, :hook)),
            s(:send,
              s(:lvar, :hook), :call,
              s(:self))),
          s(:ivasgn, :@spec,
            s(:nil)))),
      s(:def, :remove_executables,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :spec), :nil?),
              s(:send,
                s(:send,
                  s(:lvar, :spec), :executables), :empty?)),
            s(:return), nil),
          s(:lvasgn, :executables,
            s(:send,
              s(:send,
                s(:lvar, :spec), :executables), :clone)),
          s(:lvasgn, :list,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :find_all),
              s(:args,
                s(:arg, :s)),
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :name), :==,
                  s(:send,
                    s(:lvar, :spec), :name)),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :version), :!=,
                  s(:send,
                    s(:lvar, :spec), :version))))),
          s(:block,
            s(:send,
              s(:lvar, :list), :each),
            s(:args,
              s(:arg, :s)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :s), :executables), :each),
              s(:args,
                s(:arg, :exe_name)),
              s(:send,
                s(:lvar, :executables), :delete,
                s(:lvar, :exe_name)))),
          s(:if,
            s(:send,
              s(:lvar, :executables), :empty?),
            s(:return), nil),
          s(:lvasgn, :executables,
            s(:block,
              s(:send,
                s(:lvar, :executables), :map),
              s(:args,
                s(:arg, :exec)),
              s(:send, nil, :formatted_program_filename,
                s(:lvar, :exec)))),
          s(:lvasgn, :remove,
            s(:if,
              s(:send,
                s(:ivar, :@force_executables), :nil?),
              s(:send, nil, :ask_yes_no,
                s(:send,
                  s(:send,
                    s(:str, "Remove executables:\n"), :+,
                    s(:dstr,
                      s(:str, "\t"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :executables), :join,
                          s(:str, ", "))),
                      s(:str, "\n\n"))), :+,
                  s(:str, "in addition to the gem?")),
                s(:true)),
              s(:ivar, :@force_executables))),
          s(:if,
            s(:lvar, :remove),
            s(:begin,
              s(:lvasgn, :bin_dir,
                s(:or,
                  s(:ivar, :@bin_dir),
                  s(:send,
                    s(:const, nil, :Gem), :bindir,
                    s(:send,
                      s(:lvar, :spec), :base_dir)))),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :writable?,
                  s(:lvar, :bin_dir)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :FilePermissionError),
                  s(:lvar, :bin_dir))),
              s(:block,
                s(:send,
                  s(:lvar, :executables), :each),
                s(:args,
                  s(:arg, :exe_name)),
                s(:begin,
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:str, "Removing "),
                      s(:begin,
                        s(:lvar, :exe_name)))),
                  s(:lvasgn, :exe_file,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :bin_dir),
                      s(:lvar, :exe_name))),
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_f,
                    s(:lvar, :exe_file)),
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_f,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :exe_file)),
                      s(:str, ".bat")))))),
            s(:send, nil, :say,
              s(:str, "Executables and scripts will remain installed."))))),
      s(:def, :remove_all,
        s(:args,
          s(:arg, :list)),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :spec)),
          s(:send, nil, :uninstall_gem,
            s(:lvar, :spec)))),
      s(:def, :remove,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send, nil, :path_ok?,
                s(:ivar, :@gem_home),
                s(:lvar, :spec)),
              s(:begin,
                s(:and,
                  s(:ivar, :@user_install),
                  s(:send, nil, :path_ok?,
                    s(:send,
                      s(:const, nil, :Gem), :user_dir),
                    s(:lvar, :spec))))), nil,
            s(:begin,
              s(:lvasgn, :e,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :GemNotInHomeException), :new,
                  s(:dstr,
                    s(:str, "Gem '"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :spec), :full_name)),
                    s(:str, "' is not installed in directory "),
                    s(:begin,
                      s(:ivar, :@gem_home))))),
              s(:send,
                s(:lvar, :e), :spec=,
                s(:lvar, :spec)),
              s(:send, nil, :raise,
                s(:lvar, :e)))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :writable?,
              s(:send,
                s(:lvar, :spec), :base_dir)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :FilePermissionError),
              s(:send,
                s(:lvar, :spec), :base_dir))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:lvar, :spec), :full_gem_path)),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:lvar, :spec), :extension_dir)),
          s(:lvasgn, :old_platform_name,
            s(:send,
              s(:lvar, :spec), :original_name)),
          s(:lvasgn, :gemspec,
            s(:send,
              s(:lvar, :spec), :spec_file)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gemspec)), nil,
            s(:lvasgn, :gemspec,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:const, nil, :File), :dirname,
                  s(:lvar, :gemspec)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :old_platform_name)),
                  s(:str, ".gemspec"))))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:lvar, :gemspec)),
          s(:lvasgn, :gem,
            s(:send,
              s(:lvar, :spec), :cache_file)),
          s(:if,
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:lvar, :gem)), nil,
            s(:lvasgn, :gem,
              s(:send,
                s(:const, nil, :File), :join,
                s(:send,
                  s(:lvar, :spec), :cache_dir),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :old_platform_name)),
                  s(:str, ".gem"))))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:lvar, :gem)),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RDoc), :new,
              s(:lvar, :spec)), :remove),
          s(:send, nil, :say,
            s(:dstr,
              s(:str, "Successfully uninstalled "),
              s(:begin,
                s(:send,
                  s(:lvar, :spec), :full_name)))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset))),
      s(:def, :path_ok?,
        s(:args,
          s(:arg, :gem_dir),
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :full_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gem_dir),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:lvasgn, :original_path,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :gem_dir),
              s(:str, "gems"),
              s(:send,
                s(:lvar, :spec), :original_name))),
          s(:or,
            s(:send,
              s(:lvar, :full_path), :==,
              s(:send,
                s(:lvar, :spec), :full_gem_path)),
            s(:send,
              s(:lvar, :original_path), :==,
              s(:send,
                s(:lvar, :spec), :full_gem_path))))),
      s(:def, :dependencies_ok?,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:ivar, :@force_ignore),
            s(:return,
              s(:true)), nil),
          s(:lvasgn, :deplist,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyList), :from_specs)),
          s(:send,
            s(:lvar, :deplist), :ok_to_remove?,
            s(:send,
              s(:lvar, :spec), :full_name),
            s(:ivar, :@check_dev)))),
      s(:def, :abort_on_dependent?,
        s(:args),
        s(:ivar, :@abort_on_dependent)),
      s(:def, :ask_if_ok,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:lvasgn, :msg,
            s(:array,
              s(:str, ""))),
          s(:send,
            s(:lvar, :msg), :<<,
            s(:str, "You have requested to uninstall the gem:")),
          s(:send,
            s(:lvar, :msg), :<<,
            s(:dstr,
              s(:str, "\t"),
              s(:begin,
                s(:send,
                  s(:lvar, :spec), :full_name)))),
          s(:send,
            s(:lvar, :msg), :<<,
            s(:str, "")),
          s(:lvasgn, :siblings,
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :select),
              s(:args,
                s(:arg, :s)),
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :name), :==,
                  s(:send,
                    s(:lvar, :spec), :name)),
                s(:send,
                  s(:send,
                    s(:lvar, :s), :full_name), :!=,
                  s(:send,
                    s(:lvar, :spec), :full_name))))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :spec), :dependent_gems), :each),
            s(:args,
              s(:arg, :dep_spec),
              s(:arg, :dep),
              s(:arg, :satlist)),
            s(:if,
              s(:block,
                s(:send,
                  s(:lvar, :siblings), :any?),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :satisfies_requirement?,
                  s(:lvar, :dep))), nil,
              s(:send,
                s(:lvar, :msg), :<<,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :dep_spec), :name)),
                  s(:str, "-"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :dep_spec), :version)),
                  s(:str, " depends on "),
                  s(:begin,
                    s(:lvar, :dep)))))),
          s(:send,
            s(:lvar, :msg), :<<,
            s(:str, "If you remove this gem, these dependencies will not be met.")),
          s(:send,
            s(:lvar, :msg), :<<,
            s(:str, "Continue with Uninstall?")),
          s(:return,
            s(:send, nil, :ask_yes_no,
              s(:send,
                s(:lvar, :msg), :join,
                s(:str, "\n")),
              s(:false))))),
      s(:def, :formatted_program_filename,
        s(:args,
          s(:arg, :filename)),
        s(:if,
          s(:ivar, :@format_executable),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "rubygems/installer")),
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Installer), :exec_format), :%,
              s(:send,
                s(:const, nil, :File), :basename,
                s(:lvar, :filename)))),
          s(:lvar, :filename))))))
