s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems")),
  s(:send, nil, :require,
    s(:str, "rubygems/dependency_list")),
  s(:send, nil, :require,
    s(:str, "rubygems/package")),
  s(:send, nil, :require,
    s(:str, "rubygems/installer")),
  s(:send, nil, :require,
    s(:str, "rubygems/spec_fetcher")),
  s(:send, nil, :require,
    s(:str, "rubygems/user_interaction")),
  s(:send, nil, :require,
    s(:str, "rubygems/source")),
  s(:send, nil, :require,
    s(:str, "rubygems/available_set")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :DependencyInstaller), nil,
    s(:begin,
      s(:send, nil, :include,
        s(:const,
          s(:const, nil, :Gem), :UserInteraction)),
      s(:casgn, nil, :DEFAULT_OPTIONS,
        s(:send,
          s(:hash,
            s(:pair,
              s(:sym, :env_shebang),
              s(:false)),
            s(:pair,
              s(:sym, :document),
              s(:array,
                s(:str, "ri"))),
            s(:pair,
              s(:sym, :domain),
              s(:sym, :both)),
            s(:pair,
              s(:sym, :force),
              s(:false)),
            s(:pair,
              s(:sym, :format_executable),
              s(:false)),
            s(:pair,
              s(:sym, :ignore_dependencies),
              s(:false)),
            s(:pair,
              s(:sym, :prerelease),
              s(:false)),
            s(:pair,
              s(:sym, :security_policy),
              s(:nil)),
            s(:pair,
              s(:sym, :wrappers),
              s(:true)),
            s(:pair,
              s(:sym, :build_args),
              s(:nil)),
            s(:pair,
              s(:sym, :build_docs_in_background),
              s(:false)),
            s(:pair,
              s(:sym, :install_as_default),
              s(:false))), :freeze)),
      s(:send, nil, :attr_reader,
        s(:sym, :document)),
      s(:send, nil, :attr_reader,
        s(:sym, :errors)),
      s(:send, nil, :attr_reader,
        s(:sym, :gems_to_install)),
      s(:send, nil, :attr_reader,
        s(:sym, :installed_gems)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :options,
            s(:hash))),
        s(:begin,
          s(:ivasgn, :@only_install_dir,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :install_dir)), :!), :!)),
          s(:ivasgn, :@install_dir,
            s(:or,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :install_dir)),
              s(:send,
                s(:const, nil, :Gem), :dir))),
          s(:ivasgn, :@build_root,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :build_root))),
          s(:lvasgn, :options,
            s(:send,
              s(:const, nil, :DEFAULT_OPTIONS), :merge,
              s(:lvar, :options))),
          s(:ivasgn, :@bin_dir,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :bin_dir))),
          s(:ivasgn, :@dev_shallow,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :dev_shallow))),
          s(:ivasgn, :@development,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :development))),
          s(:ivasgn, :@document,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :document))),
          s(:ivasgn, :@domain,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :domain))),
          s(:ivasgn, :@env_shebang,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :env_shebang))),
          s(:ivasgn, :@force,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :force))),
          s(:ivasgn, :@format_executable,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :format_executable))),
          s(:ivasgn, :@ignore_dependencies,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :ignore_dependencies))),
          s(:ivasgn, :@prerelease,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :prerelease))),
          s(:ivasgn, :@security_policy,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :security_policy))),
          s(:ivasgn, :@user_install,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :user_install))),
          s(:ivasgn, :@wrappers,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :wrappers))),
          s(:ivasgn, :@build_args,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :build_args))),
          s(:ivasgn, :@build_docs_in_background,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :build_docs_in_background))),
          s(:ivasgn, :@install_as_default,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :install_as_default))),
          s(:ivasgn, :@minimal_deps,
            s(:send,
              s(:lvar, :options), :[],
              s(:sym, :minimal_deps))),
          s(:ivasgn, :@available,
            s(:nil)),
          s(:ivasgn, :@installed_gems,
            s(:array)),
          s(:ivasgn, :@toplevel_specs,
            s(:nil)),
          s(:ivasgn, :@cache_dir,
            s(:or,
              s(:send,
                s(:lvar, :options), :[],
                s(:sym, :cache_dir)),
              s(:ivar, :@install_dir))),
          s(:ivasgn, :@errors,
            s(:array)))),
      s(:def, :add_found_dependencies,
        s(:args,
          s(:arg, :to_do),
          s(:arg, :dependency_list)),
        s(:begin,
          s(:lvasgn, :seen,
            s(:hash)),
          s(:lvasgn, :dependencies,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :name)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :name),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:lvar, :name))))),
          s(:until,
            s(:send,
              s(:lvar, :to_do), :empty?),
            s(:begin,
              s(:lvasgn, :spec,
                s(:send,
                  s(:lvar, :to_do), :shift)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :spec), :nil?),
                  s(:send,
                    s(:lvar, :seen), :[],
                    s(:send,
                      s(:lvar, :spec), :name))),
                s(:next), nil),
              s(:send,
                s(:lvar, :seen), :[]=,
                s(:send,
                  s(:lvar, :spec), :name),
                s(:true)),
              s(:lvasgn, :deps,
                s(:send,
                  s(:lvar, :spec), :runtime_dependencies)),
              s(:if,
                s(:ivar, :@development),
                s(:if,
                  s(:ivar, :@dev_shallow),
                  s(:if,
                    s(:send,
                      s(:ivar, :@toplevel_specs), :include?,
                      s(:send,
                        s(:lvar, :spec), :full_name)),
                    s(:op_asgn,
                      s(:lvasgn, :deps), :|,
                      s(:send,
                        s(:lvar, :spec), :development_dependencies)), nil),
                  s(:op_asgn,
                    s(:lvasgn, :deps), :|,
                    s(:send,
                      s(:lvar, :spec), :development_dependencies))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :deps), :each),
                s(:args,
                  s(:arg, :dep)),
                s(:begin,
                  s(:send,
                    s(:lvar, :dependencies), :[]=,
                    s(:send,
                      s(:lvar, :dep), :name),
                    s(:send,
                      s(:send,
                        s(:lvar, :dependencies), :[],
                        s(:send,
                          s(:lvar, :dep), :name)), :merge,
                      s(:lvar, :dep))),
                  s(:if,
                    s(:ivar, :@minimal_deps),
                    s(:if,
                      s(:block,
                        s(:send,
                          s(:const,
                            s(:const, nil, :Gem), :Specification), :any?),
                        s(:args,
                          s(:arg, :installed_spec)),
                        s(:and,
                          s(:send,
                            s(:send,
                              s(:lvar, :dep), :name), :==,
                            s(:send,
                              s(:lvar, :installed_spec), :name)),
                          s(:send,
                            s(:send,
                              s(:lvar, :dep), :requirement), :satisfied_by?,
                            s(:send,
                              s(:lvar, :installed_spec), :version)))),
                      s(:next), nil), nil),
                  s(:lvasgn, :results,
                    s(:send, nil, :find_gems_with_sources,
                      s(:lvar, :dep))),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :results), :sorted), :each),
                    s(:args,
                      s(:arg, :t)),
                    s(:send,
                      s(:lvar, :to_do), :push,
                      s(:send,
                        s(:lvar, :t), :spec))),
                  s(:send,
                    s(:lvar, :results), :remove_installed!,
                    s(:lvar, :dep)),
                  s(:send,
                    s(:ivar, :@available), :<<,
                    s(:lvar, :results)),
                  s(:send,
                    s(:lvar, :results), :inject_into_list,
                    s(:lvar, :dependency_list)))))),
          s(:send,
            s(:lvar, :dependency_list), :remove_specs_unsatisfied_by,
            s(:lvar, :dependencies)))),
      s(:def, :available_set_for,
        s(:args,
          s(:arg, :dep_or_name),
          s(:arg, :version)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :String), :===,
              s(:lvar, :dep_or_name)),
            s(:send, nil, :find_spec_by_name_and_version,
              s(:lvar, :dep_or_name),
              s(:lvar, :version),
              s(:ivar, :@prerelease)),
            s(:begin,
              s(:lvasgn, :dep,
                s(:send,
                  s(:lvar, :dep_or_name), :dup)),
              s(:send,
                s(:lvar, :dep), :prerelease=,
                s(:ivar, :@prerelease)),
              s(:ivasgn, :@available,
                s(:send, nil, :find_gems_with_sources,
                  s(:lvar, :dep))))),
          s(:send,
            s(:ivar, :@available), :pick_best!))),
      s(:def, :consider_local?,
        s(:args),
        s(:or,
          s(:send,
            s(:ivar, :@domain), :==,
            s(:sym, :both)),
          s(:send,
            s(:ivar, :@domain), :==,
            s(:sym, :local)))),
      s(:def, :consider_remote?,
        s(:args),
        s(:or,
          s(:send,
            s(:ivar, :@domain), :==,
            s(:sym, :both)),
          s(:send,
            s(:ivar, :@domain), :==,
            s(:sym, :remote)))),
      s(:def, :find_gems_with_sources,
        s(:args,
          s(:arg, :dep),
          s(:optarg, :best_only,
            s(:false))),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :AvailableSet), :new)),
          s(:if,
            s(:send, nil, :consider_local?),
            s(:begin,
              s(:lvasgn, :sl,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Source), :Local), :new)),
              s(:if,
                s(:lvasgn, :spec,
                  s(:send,
                    s(:lvar, :sl), :find_gem,
                    s(:send,
                      s(:lvar, :dep), :name))),
                s(:if,
                  s(:send,
                    s(:lvar, :dep), :matches_spec?,
                    s(:lvar, :spec)),
                  s(:send,
                    s(:lvar, :set), :add,
                    s(:lvar, :spec),
                    s(:lvar, :sl)), nil), nil)), nil),
          s(:if,
            s(:send, nil, :consider_remote?),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :tuples),
                      s(:lvasgn, :errors)),
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :SpecFetcher), :fetcher), :search_for_dependency,
                      s(:lvar, :dep))),
                  s(:if,
                    s(:and,
                      s(:lvar, :best_only),
                      s(:send,
                        s(:send,
                          s(:lvar, :tuples), :empty?), :!)),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:lvar, :tuples), :sort!),
                        s(:args,
                          s(:arg, :a),
                          s(:arg, :b)),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :b), :[],
                                s(:int, 0)), :version), :==,
                            s(:send,
                              s(:send,
                                s(:lvar, :a), :[],
                                s(:int, 0)), :version)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :b), :[],
                                  s(:int, 0)), :platform), :!=,
                              s(:const,
                                s(:const,
                                  s(:const, nil, :Gem), :Platform), :RUBY)),
                            s(:int, 1),
                            s(:int, -1)),
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :b), :[],
                                s(:int, 0)), :version), :<=>,
                            s(:send,
                              s(:send,
                                s(:lvar, :a), :[],
                                s(:int, 0)), :version)))),
                      s(:lvasgn, :tuples,
                        s(:array,
                          s(:send,
                            s(:lvar, :tuples), :first)))), nil),
                  s(:lvasgn, :specs,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:lvar, :tuples), :each),
                    s(:args,
                      s(:arg, :tup),
                      s(:arg, :source)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:lvasgn, :spec,
                          s(:send,
                            s(:lvar, :source), :fetch_spec,
                            s(:lvar, :tup))),
                        s(:resbody,
                          s(:array,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
                          s(:lvasgn, :e),
                          s(:send,
                            s(:lvar, :errors), :<<,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Gem), :SourceFetchProblem), :new,
                              s(:lvar, :source),
                              s(:lvar, :e)))),
                        s(:send,
                          s(:lvar, :specs), :<<,
                          s(:array,
                            s(:lvar, :spec),
                            s(:lvar, :source)))))),
                  s(:if,
                    s(:ivar, :@errors),
                    s(:op_asgn,
                      s(:ivasgn, :@errors), :+,
                      s(:lvar, :errors)),
                    s(:ivasgn, :@errors,
                      s(:lvar, :errors))),
                  s(:send,
                    s(:lvar, :set), :<<,
                    s(:lvar, :specs))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :RemoteFetcher), :FetchError)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:block,
                      s(:send, nil, :verbose),
                      s(:args),
                      s(:dstr,
                        s(:dstr,
                          s(:str, "Error fetching remote data:\t\t"),
                          s(:begin,
                            s(:send,
                              s(:lvar, :e), :message)),
                          s(:str, "\n")),
                        s(:str, "Falling back to local-only install"))),
                    s(:ivasgn, :@domain,
                      s(:sym, :local)))), nil)), nil),
          s(:lvar, :set))),
      s(:def, :find_spec_by_name_and_version,
        s(:args,
          s(:arg, :gem_name),
          s(:optarg, :version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:optarg, :prerelease,
            s(:false))),
        s(:begin,
          s(:lvasgn, :set,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :AvailableSet), :new)),
          s(:if,
            s(:send, nil, :consider_local?),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :gem_name), :=~,
                  s(:regexp,
                    s(:str, "\\.gem$"),
                    s(:regopt))),
                s(:send,
                  s(:const, nil, :File), :file?,
                  s(:lvar, :gem_name))),
              s(:begin,
                s(:lvasgn, :src,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Source), :SpecificFile), :new,
                    s(:lvar, :gem_name))),
                s(:send,
                  s(:lvar, :set), :add,
                  s(:send,
                    s(:lvar, :src), :spec),
                  s(:lvar, :src))),
              s(:if,
                s(:send,
                  s(:lvar, :gem_name), :=~,
                  s(:regexp,
                    s(:str, "\\.gem$"),
                    s(:regopt))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Dir), :[],
                      s(:lvar, :gem_name)), :each),
                  s(:args,
                    s(:arg, :name)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :src,
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Gem), :Source), :SpecificFile), :new,
                            s(:lvar, :name))),
                        s(:send,
                          s(:lvar, :set), :add,
                          s(:send,
                            s(:lvar, :src), :spec),
                          s(:lvar, :src))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :Package), :FormatError)), nil, nil), nil))),
                s(:begin,
                  s(:lvasgn, :local,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Source), :Local), :new)),
                  s(:if,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:lvar, :local), :find_gem,
                        s(:lvar, :gem_name),
                        s(:lvar, :version))),
                    s(:send,
                      s(:lvar, :set), :add,
                      s(:lvar, :s),
                      s(:lvar, :local)), nil)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :set), :empty?),
            s(:begin,
              s(:lvasgn, :dep,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:lvar, :gem_name),
                  s(:lvar, :version))),
              s(:if,
                s(:lvar, :prerelease),
                s(:send,
                  s(:lvar, :dep), :prerelease=,
                  s(:true)), nil),
              s(:lvasgn, :set,
                s(:send, nil, :find_gems_with_sources,
                  s(:lvar, :dep),
                  s(:true))),
              s(:send,
                s(:lvar, :set), :match_platform!)), nil),
          s(:if,
            s(:send,
              s(:lvar, :set), :empty?),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :SpecificGemNotFoundException), :new,
                s(:lvar, :gem_name),
                s(:lvar, :version),
                s(:ivar, :@errors))), nil),
          s(:ivasgn, :@available,
            s(:lvar, :set)))),
      s(:def, :gather_dependencies,
        s(:args),
        s(:begin,
          s(:lvasgn, :specs,
            s(:send,
              s(:ivar, :@available), :all_specs)),
          s(:lvasgn, :keep_names,
            s(:block,
              s(:send,
                s(:lvar, :specs), :map),
              s(:args,
                s(:arg, :spec)),
              s(:send,
                s(:lvar, :spec), :full_name))),
          s(:if,
            s(:ivar, :@dev_shallow),
            s(:ivasgn, :@toplevel_specs,
              s(:lvar, :keep_names)), nil),
          s(:lvasgn, :dependency_list,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyList), :new,
              s(:ivar, :@development))),
          s(:send,
            s(:lvar, :dependency_list), :add,
            s(:splat,
              s(:lvar, :specs))),
          s(:lvasgn, :to_do,
            s(:send,
              s(:lvar, :specs), :dup)),
          s(:if,
            s(:ivar, :@ignore_dependencies), nil,
            s(:send, nil, :add_found_dependencies,
              s(:lvar, :to_do),
              s(:lvar, :dependency_list))),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :dependency_list), :specs), :reject!),
            s(:args,
              s(:arg, :spec)),
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :keep_names), :include?,
                  s(:send,
                    s(:lvar, :spec), :full_name)), :!),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :include?,
                s(:lvar, :spec)))),
          s(:if,
            s(:or,
              s(:or,
                s(:send,
                  s(:lvar, :dependency_list), :ok?),
                s(:ivar, :@ignore_dependencies)),
              s(:ivar, :@force)), nil,
            s(:begin,
              s(:lvasgn, :reason,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :dependency_list), :why_not_ok?), :map),
                    s(:args,
                      s(:arg, :k),
                      s(:arg, :v)),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :k)),
                      s(:str, " requires "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :v), :join,
                          s(:str, ", "))))), :join,
                  s(:str, "; "))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :DependencyError),
                s(:dstr,
                  s(:str, "Unable to resolve dependencies: "),
                  s(:begin,
                    s(:lvar, :reason)))))),
          s(:ivasgn, :@gems_to_install,
            s(:send,
              s(:send,
                s(:lvar, :dependency_list), :dependency_order), :reverse)))),
      s(:def, :in_background,
        s(:args,
          s(:arg, :what)),
        s(:begin,
          s(:lvasgn, :fork_happened,
            s(:false)),
          s(:if,
            s(:and,
              s(:ivar, :@build_docs_in_background),
              s(:send,
                s(:const, nil, :Process), :respond_to?,
                s(:sym, :fork))),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Process), :fork),
                    s(:args),
                    s(:yield)),
                  s(:lvasgn, :fork_happened,
                    s(:true)),
                  s(:send, nil, :say,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :what)),
                      s(:str, " in a background process.")))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NotImplementedError)), nil, nil), nil)), nil),
          s(:if,
            s(:lvar, :fork_happened), nil,
            s(:yield)))),
      s(:def, :install,
        s(:args,
          s(:arg, :dep_or_name),
          s(:optarg, :version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default))),
        s(:begin,
          s(:lvasgn, :request_set,
            s(:send, nil, :resolve_dependencies,
              s(:lvar, :dep_or_name),
              s(:lvar, :version))),
          s(:ivasgn, :@installed_gems,
            s(:array)),
          s(:lvasgn, :options,
            s(:hash,
              s(:pair,
                s(:sym, :bin_dir),
                s(:ivar, :@bin_dir)),
              s(:pair,
                s(:sym, :build_args),
                s(:ivar, :@build_args)),
              s(:pair,
                s(:sym, :document),
                s(:ivar, :@document)),
              s(:pair,
                s(:sym, :env_shebang),
                s(:ivar, :@env_shebang)),
              s(:pair,
                s(:sym, :force),
                s(:ivar, :@force)),
              s(:pair,
                s(:sym, :format_executable),
                s(:ivar, :@format_executable)),
              s(:pair,
                s(:sym, :ignore_dependencies),
                s(:ivar, :@ignore_dependencies)),
              s(:pair,
                s(:sym, :prerelease),
                s(:ivar, :@prerelease)),
              s(:pair,
                s(:sym, :security_policy),
                s(:ivar, :@security_policy)),
              s(:pair,
                s(:sym, :user_install),
                s(:ivar, :@user_install)),
              s(:pair,
                s(:sym, :wrappers),
                s(:ivar, :@wrappers)),
              s(:pair,
                s(:sym, :build_root),
                s(:ivar, :@build_root)),
              s(:pair,
                s(:sym, :install_as_default),
                s(:ivar, :@install_as_default)))),
          s(:if,
            s(:ivar, :@only_install_dir),
            s(:send,
              s(:lvar, :options), :[]=,
              s(:sym, :install_dir),
              s(:ivar, :@install_dir)), nil),
          s(:block,
            s(:send,
              s(:lvar, :request_set), :install,
              s(:lvar, :options)),
            s(:args,
              s(:arg, :_),
              s(:arg, :installer)),
            s(:if,
              s(:lvar, :installer),
              s(:send,
                s(:ivar, :@installed_gems), :<<,
                s(:send,
                  s(:lvar, :installer), :spec)), nil)),
          s(:send,
            s(:ivar, :@installed_gems), :sort!),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :done_installing_hooks), :empty?), nil,
            s(:block,
              s(:send, nil, :in_background,
                s(:str, "Installing documentation")),
              s(:args),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :done_installing_hooks), :each),
                s(:args,
                  s(:arg, :hook)),
                s(:send,
                  s(:lvar, :hook), :call,
                  s(:self),
                  s(:ivar, :@installed_gems))))),
          s(:ivar, :@installed_gems))),
      s(:def, :install_development_deps,
        s(:args),
        s(:if,
          s(:and,
            s(:ivar, :@development),
            s(:ivar, :@dev_shallow)),
          s(:sym, :shallow),
          s(:if,
            s(:ivar, :@development),
            s(:sym, :all),
            s(:sym, :none)))),
      s(:def, :resolve_dependencies,
        s(:args,
          s(:arg, :dep_or_name),
          s(:arg, :version)),
        s(:begin,
          s(:lvasgn, :request_set,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:send,
            s(:lvar, :request_set), :development=,
            s(:ivar, :@development)),
          s(:send,
            s(:lvar, :request_set), :development_shallow=,
            s(:ivar, :@dev_shallow)),
          s(:send,
            s(:lvar, :request_set), :soft_missing=,
            s(:ivar, :@force)),
          s(:send,
            s(:lvar, :request_set), :prerelease=,
            s(:ivar, :@prerelease)),
          s(:if,
            s(:send, nil, :consider_remote?), nil,
            s(:send,
              s(:lvar, :request_set), :remote=,
              s(:false))),
          s(:lvasgn, :installer_set,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Resolver), :InstallerSet), :new,
              s(:ivar, :@domain))),
          s(:send,
            s(:lvar, :installer_set), :ignore_installed=,
            s(:ivar, :@only_install_dir)),
          s(:if,
            s(:send, nil, :consider_local?),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :dep_or_name), :=~,
                  s(:regexp,
                    s(:str, "\\.gem$"),
                    s(:regopt))),
                s(:send,
                  s(:const, nil, :File), :file?,
                  s(:lvar, :dep_or_name))),
              s(:begin,
                s(:lvasgn, :src,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Source), :SpecificFile), :new,
                    s(:lvar, :dep_or_name))),
                s(:send,
                  s(:lvar, :installer_set), :add_local,
                  s(:lvar, :dep_or_name),
                  s(:send,
                    s(:lvar, :src), :spec),
                  s(:lvar, :src)),
                s(:if,
                  s(:send,
                    s(:lvar, :version), :==,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Gem), :Requirement), :default)),
                  s(:lvasgn, :version,
                    s(:send,
                      s(:send,
                        s(:lvar, :src), :spec), :version)), nil)),
              s(:if,
                s(:send,
                  s(:lvar, :dep_or_name), :=~,
                  s(:regexp,
                    s(:str, "\\.gem$"),
                    s(:regopt))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Dir), :[],
                      s(:lvar, :dep_or_name)), :each),
                  s(:args,
                    s(:arg, :name)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :src,
                          s(:send,
                            s(:const,
                              s(:const,
                                s(:const, nil, :Gem), :Source), :SpecificFile), :new,
                            s(:lvar, :name))),
                        s(:send,
                          s(:lvar, :installer_set), :add_local,
                          s(:lvar, :dep_or_name),
                          s(:send,
                            s(:lvar, :src), :spec),
                          s(:lvar, :src))),
                      s(:resbody,
                        s(:array,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Gem), :Package), :FormatError)), nil, nil), nil))), nil)), nil),
          s(:lvasgn, :dependency,
            s(:if,
              s(:lvasgn, :spec,
                s(:send,
                  s(:lvar, :installer_set), :local?,
                  s(:lvar, :dep_or_name))),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :new,
                s(:send,
                  s(:lvar, :spec), :name),
                s(:lvar, :version)),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :dep_or_name)),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:lvar, :dep_or_name),
                  s(:lvar, :version)),
                s(:lvar, :dep_or_name)))),
          s(:send,
            s(:lvar, :dependency), :prerelease=,
            s(:ivar, :@prerelease)),
          s(:send,
            s(:lvar, :request_set), :import,
            s(:array,
              s(:lvar, :dependency))),
          s(:send,
            s(:lvar, :installer_set), :add_always_install,
            s(:lvar, :dependency)),
          s(:send,
            s(:lvar, :request_set), :always_install=,
            s(:send,
              s(:lvar, :installer_set), :always_install)),
          s(:if,
            s(:ivar, :@ignore_dependencies),
            s(:begin,
              s(:send,
                s(:lvar, :installer_set), :ignore_dependencies=,
                s(:true)),
              s(:send,
                s(:lvar, :request_set), :ignore_dependencies=,
                s(:true)),
              s(:send,
                s(:lvar, :request_set), :soft_missing=,
                s(:true))), nil),
          s(:send,
            s(:lvar, :request_set), :resolve,
            s(:lvar, :installer_set)),
          s(:send,
            s(:ivar, :@errors), :concat,
            s(:send,
              s(:lvar, :request_set), :errors)),
          s(:lvar, :request_set))))))
