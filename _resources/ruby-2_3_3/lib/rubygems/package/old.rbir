s(:class,
  s(:const,
    s(:const,
      s(:const, nil, :Gem), :Package), :Old),
  s(:const,
    s(:const, nil, :Gem), :Package),
  s(:begin,
    s(:send, nil, :undef_method,
      s(:sym, :spec=)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :gem),
        s(:arg, :security_policy)),
      s(:begin,
        s(:send, nil, :require,
          s(:str, "fileutils")),
        s(:send, nil, :require,
          s(:str, "zlib")),
        s(:send,
          s(:const, nil, :Gem), :load_yaml),
        s(:ivasgn, :@contents,
          s(:nil)),
        s(:ivasgn, :@gem,
          s(:lvar, :gem)),
        s(:ivasgn, :@security_policy,
          s(:lvar, :security_policy)),
        s(:ivasgn, :@spec,
          s(:nil)))),
    s(:def, :contents,
      s(:args),
      s(:begin,
        s(:send, nil, :verify),
        s(:if,
          s(:ivar, :@contents),
          s(:return,
            s(:ivar, :@contents)), nil),
        s(:block,
          s(:send,
            s(:ivar, :@gem), :with_read_io),
          s(:args,
            s(:arg, :io)),
          s(:begin,
            s(:send, nil, :read_until_dashes,
              s(:lvar, :io)),
            s(:lvasgn, :header,
              s(:send, nil, :file_list,
                s(:lvar, :io))),
            s(:ivasgn, :@contents,
              s(:block,
                s(:send,
                  s(:lvar, :header), :map),
                s(:args,
                  s(:arg, :file)),
                s(:send,
                  s(:lvar, :file), :[],
                  s(:str, "path")))))))),
    s(:def, :extract_files,
      s(:args,
        s(:arg, :destination_dir)),
      s(:rescue,
        s(:begin,
          s(:send, nil, :verify),
          s(:lvasgn, :errstr,
            s(:str, "Error reading files from gem")),
          s(:block,
            s(:send,
              s(:ivar, :@gem), :with_read_io),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send, nil, :read_until_dashes,
                s(:lvar, :io)),
              s(:lvasgn, :header,
                s(:send, nil, :file_list,
                  s(:lvar, :io))),
              s(:if,
                s(:lvar, :header), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :Exception),
                  s(:lvar, :errstr))),
              s(:block,
                s(:send,
                  s(:lvar, :header), :each),
                s(:args,
                  s(:arg, :entry)),
                s(:begin,
                  s(:lvasgn, :full_name,
                    s(:send,
                      s(:lvar, :entry), :[],
                      s(:str, "path"))),
                  s(:lvasgn, :destination,
                    s(:send, nil, :install_location,
                      s(:lvar, :full_name),
                      s(:lvar, :destination_dir))),
                  s(:lvasgn, :file_data,
                    s(:send,
                      s(:const, nil, :String), :new)),
                  s(:block,
                    s(:send, nil, :read_until_dashes,
                      s(:lvar, :io)),
                    s(:args,
                      s(:arg, :line)),
                    s(:send,
                      s(:lvar, :file_data), :<<,
                      s(:lvar, :line))),
                  s(:lvasgn, :file_data,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :file_data), :strip), :unpack,
                        s(:str, "m")), :[],
                      s(:int, 0))),
                  s(:lvasgn, :file_data,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Zlib), :Inflate), :inflate,
                      s(:lvar, :file_data))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :file_data), :length), :!=,
                      s(:send,
                        s(:send,
                          s(:lvar, :entry), :[],
                          s(:str, "size")), :to_i)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const,
                          s(:const, nil, :Gem), :Package), :FormatError),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :full_name)),
                        s(:str, " in "),
                        s(:begin,
                          s(:ivar, :@gem)),
                        s(:str, " is corrupt"))), nil),
                  s(:send,
                    s(:const, nil, :FileUtils), :rm_rf,
                    s(:lvar, :destination)),
                  s(:send,
                    s(:const, nil, :FileUtils), :mkdir_p,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :destination))),
                  s(:block,
                    s(:send, nil, :open,
                      s(:lvar, :destination),
                      s(:str, "wb"),
                      s(:send,
                        s(:lvar, :entry), :[],
                        s(:str, "mode"))),
                    s(:args,
                      s(:arg, :out)),
                    s(:send,
                      s(:lvar, :out), :write,
                      s(:lvar, :file_data))),
                  s(:send, nil, :verbose,
                    s(:lvar, :destination))))))),
        s(:resbody,
          s(:array,
            s(:const,
              s(:const, nil, :Zlib), :DataError)), nil,
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Gem), :Exception),
            s(:lvar, :errstr))), nil)),
    s(:def, :file_list,
      s(:args,
        s(:arg, :io)),
      s(:begin,
        s(:lvasgn, :header,
          s(:send,
            s(:const, nil, :String), :new)),
        s(:block,
          s(:send, nil, :read_until_dashes,
            s(:lvar, :io)),
          s(:args,
            s(:arg, :line)),
          s(:send,
            s(:lvar, :header), :<<,
            s(:lvar, :line))),
        s(:send,
          s(:const, nil, :YAML), :load,
          s(:lvar, :header)))),
    s(:def, :read_until_dashes,
      s(:args,
        s(:arg, :io)),
      s(:while,
        s(:and,
          s(:begin,
            s(:lvasgn, :line,
              s(:send,
                s(:lvar, :io), :gets))),
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :line), :chomp), :strip), :!=,
            s(:str, "---"))),
        s(:if,
          s(:send, nil, :block_given?),
          s(:yield,
            s(:lvar, :line)), nil))),
    s(:def, :skip_ruby,
      s(:args,
        s(:arg, :io)),
      s(:begin,
        s(:block,
          s(:send, nil, :loop),
          s(:args),
          s(:begin,
            s(:lvasgn, :line,
              s(:send,
                s(:lvar, :io), :gets)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :line), :chomp), :==,
                s(:str, "__END__")),
              s(:return), nil),
            s(:if,
              s(:lvar, :line), nil,
              s(:break)))),
        s(:send, nil, :raise,
          s(:const,
            s(:const, nil, :Gem), :Exception),
          s(:str, "Failed to find end of ruby script while reading gem")))),
    s(:def, :spec,
      s(:args),
      s(:rescue,
        s(:begin,
          s(:send, nil, :verify),
          s(:if,
            s(:ivar, :@spec),
            s(:return,
              s(:ivar, :@spec)), nil),
          s(:lvasgn, :yaml,
            s(:send,
              s(:const, nil, :String), :new)),
          s(:block,
            s(:send,
              s(:ivar, :@gem), :with_read_io),
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:send, nil, :skip_ruby,
                s(:lvar, :io)),
              s(:block,
                s(:send, nil, :read_until_dashes,
                  s(:lvar, :io)),
                s(:args,
                  s(:arg, :line)),
                s(:send,
                  s(:lvar, :yaml), :<<,
                  s(:lvar, :line))))),
          s(:lvasgn, :yaml_error,
            s(:if,
              s(:send,
                s(:const, nil, :RUBY_VERSION), :<,
                s(:str, "1.9")),
              s(:const,
                s(:const, nil, :YAML), :ParseError),
              s(:if,
                s(:and,
                  s(:send,
                    s(:const, nil, :YAML), :const_defined?,
                    s(:sym, :ENGINE)),
                  s(:send,
                    s(:send,
                      s(:const,
                        s(:const, nil, :YAML), :ENGINE), :yamler), :==,
                    s(:str, "syck"))),
                s(:const,
                  s(:const, nil, :YAML), :ParseError),
                s(:const,
                  s(:const, nil, :YAML), :SyntaxError)))),
          s(:kwbegin,
            s(:rescue,
              s(:ivasgn, :@spec,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Specification), :from_yaml,
                  s(:lvar, :yaml))),
              s(:resbody,
                s(:array,
                  s(:lvar, :yaml_error)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Gem), :Exception),
                  s(:str, "Failed to parse gem specification out of gem file"))), nil))),
        s(:resbody,
          s(:array,
            s(:const, nil, :ArgumentError)), nil,
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Gem), :Exception),
            s(:str, "Failed to parse gem specification out of gem file"))), nil)),
    s(:def, :verify,
      s(:args),
      s(:begin,
        s(:if,
          s(:ivar, :@security_policy), nil,
          s(:return,
            s(:true))),
        s(:if,
          s(:send,
            s(:ivar, :@security_policy), :verify_data),
          s(:send, nil, :raise,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Security), :Exception),
            s(:str, "old format gems do not contain signatures and cannot be verified")), nil),
        s(:true)))))
