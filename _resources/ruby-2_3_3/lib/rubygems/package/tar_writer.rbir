s(:begin,
  s(:send, nil, :require,
    s(:str, "digest")),
  s(:class,
    s(:const,
      s(:const,
        s(:const, nil, :Gem), :Package), :TarWriter), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :FileOverflow),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :BoundedStream), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :limit)),
          s(:send, nil, :attr_reader,
            s(:sym, :written)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :io),
              s(:arg, :limit)),
            s(:begin,
              s(:ivasgn, :@io,
                s(:lvar, :io)),
              s(:ivasgn, :@limit,
                s(:lvar, :limit)),
              s(:ivasgn, :@written,
                s(:int, 0)))),
          s(:def, :write,
            s(:args,
              s(:arg, :data)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :data), :bytesize), :+,
                    s(:ivar, :@written)), :>,
                  s(:ivar, :@limit)),
                s(:send, nil, :raise,
                  s(:const, nil, :FileOverflow),
                  s(:str, "You tried to feed more data than fits in the file.")), nil),
              s(:send,
                s(:ivar, :@io), :write,
                s(:lvar, :data)),
              s(:op_asgn,
                s(:ivasgn, :@written), :+,
                s(:send,
                  s(:lvar, :data), :bytesize)),
              s(:send,
                s(:lvar, :data), :bytesize))))),
      s(:class,
        s(:const, nil, :RestrictedStream), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :io)),
            s(:ivasgn, :@io,
              s(:lvar, :io))),
          s(:def, :write,
            s(:args,
              s(:arg, :data)),
            s(:send,
              s(:ivar, :@io), :write,
              s(:lvar, :data))))),
      s(:defs,
        s(:self), :new,
        s(:args,
          s(:arg, :io)),
        s(:begin,
          s(:lvasgn, :writer,
            s(:zsuper)),
          s(:if,
            s(:send, nil, :block_given?), nil,
            s(:return,
              s(:lvar, :writer))),
          s(:kwbegin,
            s(:ensure,
              s(:yield,
                s(:lvar, :writer)),
              s(:send,
                s(:lvar, :writer), :close))),
          s(:nil))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :io)),
        s(:begin,
          s(:ivasgn, :@io,
            s(:lvar, :io)),
          s(:ivasgn, :@closed,
            s(:false)))),
      s(:def, :add_file,
        s(:args,
          s(:arg, :name),
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :check_closed),
          s(:if,
            s(:send,
              s(:ivar, :@io), :respond_to?,
              s(:sym, :pos=)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :NonSeekableIO))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :prefix)),
            s(:send, nil, :split_name,
              s(:lvar, :name))),
          s(:lvasgn, :init_pos,
            s(:send,
              s(:ivar, :@io), :pos)),
          s(:send,
            s(:ivar, :@io), :write,
            s(:send,
              s(:str, "\u0000"), :*,
              s(:int, 512))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:send,
                s(:const, nil, :RestrictedStream), :new,
                s(:ivar, :@io))), nil),
          s(:lvasgn, :size,
            s(:send,
              s(:send,
                s(:send,
                  s(:ivar, :@io), :pos), :-,
                s(:lvar, :init_pos)), :-,
              s(:int, 512))),
          s(:lvasgn, :remainder,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 512), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :size), :%,
                      s(:int, 512))))), :%,
              s(:int, 512))),
          s(:send,
            s(:ivar, :@io), :write,
            s(:send,
              s(:str, "\u0000"), :*,
              s(:lvar, :remainder))),
          s(:lvasgn, :final_pos,
            s(:send,
              s(:ivar, :@io), :pos)),
          s(:send,
            s(:ivar, :@io), :pos=,
            s(:lvar, :init_pos)),
          s(:lvasgn, :header,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarHeader), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:lvar, :name)),
                s(:pair,
                  s(:sym, :mode),
                  s(:lvar, :mode)),
                s(:pair,
                  s(:sym, :size),
                  s(:lvar, :size)),
                s(:pair,
                  s(:sym, :prefix),
                  s(:lvar, :prefix)),
                s(:pair,
                  s(:sym, :mtime),
                  s(:send,
                    s(:const, nil, :Time), :now))))),
          s(:send,
            s(:ivar, :@io), :write,
            s(:lvar, :header)),
          s(:send,
            s(:ivar, :@io), :pos=,
            s(:lvar, :final_pos)),
          s(:self))),
      s(:def, :add_file_digest,
        s(:args,
          s(:arg, :name),
          s(:arg, :mode),
          s(:arg, :digest_algorithms)),
        s(:begin,
          s(:lvasgn, :digests,
            s(:block,
              s(:send,
                s(:lvar, :digest_algorithms), :map),
              s(:args,
                s(:arg, :digest_algorithm)),
              s(:begin,
                s(:lvasgn, :digest,
                  s(:send,
                    s(:lvar, :digest_algorithm), :new)),
                s(:lvasgn, :digest_name,
                  s(:if,
                    s(:send,
                      s(:lvar, :digest), :respond_to?,
                      s(:sym, :name)),
                    s(:send,
                      s(:lvar, :digest), :name),
                    s(:begin,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "::([^:]+)$"),
                          s(:regopt)),
                        s(:send,
                          s(:lvar, :digest_algorithm), :name)),
                      s(:nth_ref, 1)))),
                s(:array,
                  s(:lvar, :digest_name),
                  s(:lvar, :digest))))),
          s(:lvasgn, :digests,
            s(:send,
              s(:const, nil, :Hash), :[],
              s(:splat,
                s(:send,
                  s(:lvar, :digests), :flatten)))),
          s(:block,
            s(:send, nil, :add_file,
              s(:lvar, :name),
              s(:lvar, :mode)),
            s(:args,
              s(:arg, :io)),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :DigestIO), :wrap,
                s(:lvar, :io),
                s(:lvar, :digests)),
              s(:args,
                s(:arg, :digest_io)),
              s(:yield,
                s(:lvar, :digest_io)))),
          s(:lvar, :digests))),
      s(:def, :add_file_signed,
        s(:args,
          s(:arg, :name),
          s(:arg, :mode),
          s(:arg, :signer)),
        s(:begin,
          s(:lvasgn, :digest_algorithms,
            s(:send,
              s(:send,
                s(:array,
                  s(:send,
                    s(:lvar, :signer), :digest_algorithm),
                  s(:const,
                    s(:const, nil, :Digest), :SHA512)), :compact), :uniq)),
          s(:lvasgn, :digests,
            s(:block,
              s(:send, nil, :add_file_digest,
                s(:lvar, :name),
                s(:lvar, :mode),
                s(:lvar, :digest_algorithms)),
              s(:args,
                s(:arg, :io)),
              s(:yield,
                s(:lvar, :io)))),
          s(:lvasgn, :signature_digest,
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :digests), :values), :compact), :find),
              s(:args,
                s(:arg, :digest)),
              s(:begin,
                s(:lvasgn, :digest_name,
                  s(:if,
                    s(:send,
                      s(:lvar, :digest), :respond_to?,
                      s(:sym, :name)),
                    s(:send,
                      s(:lvar, :digest), :name),
                    s(:begin,
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "::([^:]+)$"),
                          s(:regopt)),
                        s(:send,
                          s(:send,
                            s(:lvar, :digest), :class), :name)),
                      s(:nth_ref, 1)))),
                s(:send,
                  s(:lvar, :digest_name), :==,
                  s(:send,
                    s(:lvar, :signer), :digest_name))))),
          s(:if,
            s(:send,
              s(:lvar, :signer), :key),
            s(:begin,
              s(:lvasgn, :signature,
                s(:send,
                  s(:lvar, :signer), :sign,
                  s(:send,
                    s(:lvar, :signature_digest), :digest))),
              s(:block,
                s(:send, nil, :add_file_simple,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ".sig")),
                  s(:int, 292),
                  s(:send,
                    s(:lvar, :signature), :length)),
                s(:args,
                  s(:arg, :io)),
                s(:send,
                  s(:lvar, :io), :write,
                  s(:lvar, :signature)))), nil),
          s(:lvar, :digests))),
      s(:def, :add_file_simple,
        s(:args,
          s(:arg, :name),
          s(:arg, :mode),
          s(:arg, :size)),
        s(:begin,
          s(:send, nil, :check_closed),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :prefix)),
            s(:send, nil, :split_name,
              s(:lvar, :name))),
          s(:lvasgn, :header,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarHeader), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :name),
                    s(:lvar, :name)),
                  s(:pair,
                    s(:sym, :mode),
                    s(:lvar, :mode)),
                  s(:pair,
                    s(:sym, :size),
                    s(:lvar, :size)),
                  s(:pair,
                    s(:sym, :prefix),
                    s(:lvar, :prefix)),
                  s(:pair,
                    s(:sym, :mtime),
                    s(:send,
                      s(:const, nil, :Time), :now)))), :to_s)),
          s(:send,
            s(:ivar, :@io), :write,
            s(:lvar, :header)),
          s(:lvasgn, :os,
            s(:send,
              s(:const, nil, :BoundedStream), :new,
              s(:ivar, :@io),
              s(:lvar, :size))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:lvar, :os)), nil),
          s(:lvasgn, :min_padding,
            s(:send,
              s(:lvar, :size), :-,
              s(:send,
                s(:lvar, :os), :written))),
          s(:send,
            s(:ivar, :@io), :write,
            s(:send,
              s(:str, "\u0000"), :*,
              s(:lvar, :min_padding))),
          s(:lvasgn, :remainder,
            s(:send,
              s(:begin,
                s(:send,
                  s(:int, 512), :-,
                  s(:begin,
                    s(:send,
                      s(:lvar, :size), :%,
                      s(:int, 512))))), :%,
              s(:int, 512))),
          s(:send,
            s(:ivar, :@io), :write,
            s(:send,
              s(:str, "\u0000"), :*,
              s(:lvar, :remainder))),
          s(:self))),
      s(:def, :add_symlink,
        s(:args,
          s(:arg, :name),
          s(:arg, :target),
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :check_closed),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :prefix)),
            s(:send, nil, :split_name,
              s(:lvar, :name))),
          s(:lvasgn, :header,
            s(:send,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TarHeader), :new,
                s(:hash,
                  s(:pair,
                    s(:sym, :name),
                    s(:lvar, :name)),
                  s(:pair,
                    s(:sym, :mode),
                    s(:lvar, :mode)),
                  s(:pair,
                    s(:sym, :size),
                    s(:int, 0)),
                  s(:pair,
                    s(:sym, :typeflag),
                    s(:str, "2")),
                  s(:pair,
                    s(:sym, :linkname),
                    s(:lvar, :target)),
                  s(:pair,
                    s(:sym, :prefix),
                    s(:lvar, :prefix)),
                  s(:pair,
                    s(:sym, :mtime),
                    s(:send,
                      s(:const, nil, :Time), :now)))), :to_s)),
          s(:send,
            s(:ivar, :@io), :write,
            s(:lvar, :header)),
          s(:self))),
      s(:def, :check_closed,
        s(:args),
        s(:if,
          s(:send, nil, :closed?),
          s(:send, nil, :raise,
            s(:const, nil, :IOError),
            s(:dstr,
              s(:str, "closed "),
              s(:begin,
                s(:send,
                  s(:self), :class)))), nil)),
      s(:def, :close,
        s(:args),
        s(:begin,
          s(:send, nil, :check_closed),
          s(:send,
            s(:ivar, :@io), :write,
            s(:send,
              s(:str, "\u0000"), :*,
              s(:int, 1024))),
          s(:send, nil, :flush),
          s(:ivasgn, :@closed,
            s(:true)))),
      s(:def, :closed?,
        s(:args),
        s(:ivar, :@closed)),
      s(:def, :flush,
        s(:args),
        s(:begin,
          s(:send, nil, :check_closed),
          s(:if,
            s(:send,
              s(:ivar, :@io), :respond_to?,
              s(:sym, :flush)),
            s(:send,
              s(:ivar, :@io), :flush), nil))),
      s(:def, :mkdir,
        s(:args,
          s(:arg, :name),
          s(:arg, :mode)),
        s(:begin,
          s(:send, nil, :check_closed),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :name),
              s(:lvasgn, :prefix)),
            s(:send, nil, :split_name,
              s(:lvar, :name))),
          s(:lvasgn, :header,
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :Gem), :Package), :TarHeader), :new,
              s(:hash,
                s(:pair,
                  s(:sym, :name),
                  s(:lvar, :name)),
                s(:pair,
                  s(:sym, :mode),
                  s(:lvar, :mode)),
                s(:pair,
                  s(:sym, :typeflag),
                  s(:str, "5")),
                s(:pair,
                  s(:sym, :size),
                  s(:int, 0)),
                s(:pair,
                  s(:sym, :prefix),
                  s(:lvar, :prefix)),
                s(:pair,
                  s(:sym, :mtime),
                  s(:send,
                    s(:const, nil, :Time), :now))))),
          s(:send,
            s(:ivar, :@io), :write,
            s(:lvar, :header)),
          s(:self))),
      s(:def, :split_name,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :name), :bytesize), :>,
              s(:int, 256)),
            s(:send, nil, :raise,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Package), :TooLongFileName), :new,
                s(:dstr,
                  s(:str, "File \""),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "\" has a too long path (should be 256 or less)")))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :name), :bytesize), :<=,
              s(:int, 100)),
            s(:lvasgn, :prefix,
              s(:str, "")),
            s(:begin,
              s(:lvasgn, :parts,
                s(:send,
                  s(:lvar, :name), :split,
                  s(:regexp,
                    s(:str, "/"),
                    s(:regopt)))),
              s(:lvasgn, :newname,
                s(:send,
                  s(:lvar, :parts), :pop)),
              s(:lvasgn, :nxt,
                s(:str, "")),
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:begin,
                  s(:lvasgn, :nxt,
                    s(:send,
                      s(:lvar, :parts), :pop)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :newname), :bytesize), :+,
                          s(:int, 1)), :+,
                        s(:send,
                          s(:lvar, :nxt), :bytesize)), :>,
                      s(:int, 100)),
                    s(:break), nil),
                  s(:lvasgn, :newname,
                    s(:send,
                      s(:send,
                        s(:lvar, :nxt), :+,
                        s(:str, "/")), :+,
                      s(:lvar, :newname))))),
              s(:lvasgn, :prefix,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :parts), :+,
                      s(:array,
                        s(:lvar, :nxt)))), :join,
                  s(:str, "/"))),
              s(:lvasgn, :name,
                s(:lvar, :newname)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :name), :bytesize), :>,
                  s(:int, 100)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Package), :TooLongFileName), :new,
                    s(:dstr,
                      s(:str, "File \""),
                      s(:begin,
                        s(:lvar, :prefix)),
                      s(:str, "/"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "\" has a too long name (should be 100 or less)")))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :prefix), :bytesize), :>,
                  s(:int, 155)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Gem), :Package), :TooLongFileName), :new,
                    s(:dstr,
                      s(:str, "File \""),
                      s(:begin,
                        s(:lvar, :prefix)),
                      s(:str, "/"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "\" has a too long base path (should be 155 or less)")))), nil))),
          s(:return,
            s(:lvar, :name),
            s(:lvar, :prefix)))))))
