s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/requirement")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Dependency), nil,
    s(:begin,
      s(:casgn, nil, :TYPES,
        s(:array,
          s(:sym, :development),
          s(:sym, :runtime))),
      s(:send, nil, :attr_accessor,
        s(:sym, :name)),
      s(:send, nil, :attr_writer,
        s(:sym, :prerelease)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :name),
          s(:restarg, :requirements)),
        s(:begin,
          s(:case,
            s(:lvar, :name),
            s(:when,
              s(:const, nil, :String), nil),
            s(:when,
              s(:const, nil, :Regexp),
              s(:begin,
                s(:lvasgn, :msg,
                  s(:array,
                    s(:str, "NOTE: Dependency.new w/ a regexp is deprecated."),
                    s(:dstr,
                      s(:str, "Dependency.new called from "),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Gem), :location_of_caller), :join,
                          s(:str, ":")))))),
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Deprecate), :skip), nil,
                  s(:send, nil, :warn,
                    s(:send,
                      s(:lvar, :msg), :join,
                      s(:str, "\n")))))),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "dependency name must be a String, was "),
                s(:begin,
                  s(:send,
                    s(:lvar, :name), :inspect))))),
          s(:lvasgn, :type,
            s(:if,
              s(:send,
                s(:const, nil, :Symbol), :===,
                s(:send,
                  s(:lvar, :requirements), :last)),
              s(:send,
                s(:lvar, :requirements), :pop),
              s(:sym, :runtime))),
          s(:if,
            s(:send,
              s(:int, 1), :==,
              s(:send,
                s(:lvar, :requirements), :length)),
            s(:lvasgn, :requirements,
              s(:send,
                s(:lvar, :requirements), :first)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :TYPES), :include?,
              s(:lvar, :type)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:send,
                s(:dstr,
                  s(:str, "Valid types are "),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :TYPES), :inspect)),
                  s(:str, ", ")), :+,
                s(:dstr,
                  s(:str, "not "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :type), :inspect)))))),
          s(:ivasgn, :@name,
            s(:lvar, :name)),
          s(:ivasgn, :@requirement,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :create,
              s(:lvar, :requirements))),
          s(:ivasgn, :@type,
            s(:lvar, :type)),
          s(:ivasgn, :@prerelease,
            s(:false)),
          s(:ivasgn, :@version_requirements,
            s(:ivar, :@requirement)))),
      s(:def, :hash,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send, nil, :name), :hash), :^,
            s(:send,
              s(:send, nil, :type), :hash)), :^,
          s(:send,
            s(:send, nil, :requirement), :hash))),
      s(:def, :inspect,
        s(:args),
        s(:if,
          s(:send, nil, :prerelease?),
          s(:send,
            s(:str, "<%s type=%p name=%p requirements=%p prerelease=ok>"), :%,
            s(:array,
              s(:send,
                s(:self), :class),
              s(:send,
                s(:self), :type),
              s(:send,
                s(:self), :name),
              s(:send,
                s(:send, nil, :requirement), :to_s))),
          s(:send,
            s(:str, "<%s type=%p name=%p requirements=%p>"), :%,
            s(:array,
              s(:send,
                s(:self), :class),
              s(:send,
                s(:self), :type),
              s(:send,
                s(:self), :name),
              s(:send,
                s(:send, nil, :requirement), :to_s))))),
      s(:def, :prerelease?,
        s(:args),
        s(:or,
          s(:ivar, :@prerelease),
          s(:send,
            s(:send, nil, :requirement), :prerelease?))),
      s(:def, :latest_version?,
        s(:args),
        s(:send,
          s(:ivar, :@requirement), :none?)),
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 1),
            s(:str, "Gem::Dependency.new("),
            s(:str, ")")),
          s(:args),
          s(:begin,
            s(:send,
              s(:lvar, :q), :pp,
              s(:send, nil, :name)),
            s(:send,
              s(:lvar, :q), :text,
              s(:str, ",")),
            s(:send,
              s(:lvar, :q), :breakable),
            s(:send,
              s(:lvar, :q), :pp,
              s(:send, nil, :requirement)),
            s(:send,
              s(:lvar, :q), :text,
              s(:str, ",")),
            s(:send,
              s(:lvar, :q), :breakable),
            s(:send,
              s(:lvar, :q), :pp,
              s(:send, nil, :type))))),
      s(:def, :requirement,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:defined?,
                s(:ivar, :@requirement)),
              s(:ivar, :@requirement)),
            s(:return,
              s(:ivar, :@requirement)), nil),
          s(:if,
            s(:and,
              s(:defined?,
                s(:ivar, :@version_requirement)),
              s(:ivar, :@version_requirement)),
            s(:begin,
              s(:lvasgn, :version,
                s(:send,
                  s(:ivar, :@version_requirement), :instance_variable_get,
                  s(:sym, :@version))),
              s(:ivasgn, :@version_requirement,
                s(:nil)),
              s(:ivasgn, :@version_requirements,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Requirement), :new,
                  s(:lvar, :version)))), nil),
          s(:if,
            s(:defined?,
              s(:ivar, :@version_requirements)),
            s(:ivasgn, :@requirement,
              s(:ivar, :@version_requirements)), nil))),
      s(:def, :requirements_list,
        s(:args),
        s(:send,
          s(:send, nil, :requirement), :as_list)),
      s(:def, :to_s,
        s(:args),
        s(:if,
          s(:send,
            s(:send, nil, :type), :!=,
            s(:sym, :runtime)),
          s(:dstr,
            s(:begin,
              s(:send, nil, :name)),
            s(:str, " ("),
            s(:begin,
              s(:send, nil, :requirement)),
            s(:str, ", "),
            s(:begin,
              s(:send, nil, :type)),
            s(:str, ")")),
          s(:dstr,
            s(:begin,
              s(:send, nil, :name)),
            s(:str, " ("),
            s(:begin,
              s(:send, nil, :requirement)),
            s(:str, ")")))),
      s(:def, :type,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@type),
          s(:sym, :runtime))),
      s(:def, :runtime?,
        s(:args),
        s(:or,
          s(:send,
            s(:ivar, :@type), :==,
            s(:sym, :runtime)),
          s(:send,
            s(:ivar, :@type), :!))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:and,
            s(:and,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Dependency), :===,
                s(:lvar, :other)),
              s(:send,
                s(:send,
                  s(:self), :name), :==,
                s(:send,
                  s(:lvar, :other), :name))),
            s(:send,
              s(:send,
                s(:self), :type), :==,
              s(:send,
                s(:lvar, :other), :type))),
          s(:send,
            s(:send,
              s(:self), :requirement), :==,
            s(:send,
              s(:lvar, :other), :requirement)))),
      s(:def, :<=>,
        s(:args,
          s(:arg, :other)),
        s(:send,
          s(:send,
            s(:self), :name), :<=>,
          s(:send,
            s(:lvar, :other), :name))),
      s(:def, :=~,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :===,
              s(:lvar, :other)), nil,
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :other), :respond_to?,
                    s(:sym, :name)),
                  s(:send,
                    s(:lvar, :other), :respond_to?,
                    s(:sym, :version))), nil,
                s(:return)),
              s(:lvasgn, :other,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Dependency), :new,
                  s(:send,
                    s(:lvar, :other), :name),
                  s(:send,
                    s(:lvar, :other), :version))))),
          s(:if,
            s(:send,
              s(:send, nil, :name), :===,
              s(:send,
                s(:lvar, :other), :name)), nil,
            s(:return,
              s(:false))),
          s(:lvasgn, :reqs,
            s(:send,
              s(:send,
                s(:lvar, :other), :requirement), :requirements)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :reqs), :length), :==,
              s(:int, 1)), nil,
            s(:return,
              s(:false))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :reqs), :first), :first), :==,
              s(:str, "=")), nil,
            s(:return,
              s(:false))),
          s(:lvasgn, :version,
            s(:send,
              s(:send,
                s(:lvar, :reqs), :first), :last)),
          s(:send,
            s(:send, nil, :requirement), :satisfied_by?,
            s(:lvar, :version)))),
      s(:alias,
        s(:sym, :===),
        s(:sym, :=~)),
      s(:def, :match?,
        s(:args,
          s(:arg, :obj),
          s(:optarg, :version,
            s(:nil)),
          s(:optarg, :allow_prerelease,
            s(:false))),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :version), :!),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:lvar, :obj), :name)),
              s(:lvasgn, :version,
                s(:send,
                  s(:lvar, :obj), :version))),
            s(:lvasgn, :name,
              s(:lvar, :obj))),
          s(:if,
            s(:send,
              s(:send,
                s(:self), :name), :===,
              s(:lvar, :name)), nil,
            s(:return,
              s(:false))),
          s(:lvasgn, :version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:lvar, :version))),
          s(:if,
            s(:and,
              s(:send,
                s(:send, nil, :requirement), :none?),
              s(:send,
                s(:send,
                  s(:lvar, :version), :prerelease?), :!)),
            s(:return,
              s(:true)), nil),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :version), :prerelease?),
                s(:send,
                  s(:lvar, :allow_prerelease), :!)),
              s(:send,
                s(:send, nil, :prerelease?), :!)),
            s(:return,
              s(:false)), nil),
          s(:send,
            s(:send, nil, :requirement), :satisfied_by?,
            s(:lvar, :version)))),
      s(:def, :matches_spec?,
        s(:args,
          s(:arg, :spec)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :name), :===,
              s(:send,
                s(:lvar, :spec), :name)), nil,
            s(:return,
              s(:false))),
          s(:if,
            s(:send,
              s(:send, nil, :requirement), :none?),
            s(:return,
              s(:true)), nil),
          s(:send,
            s(:send, nil, :requirement), :satisfied_by?,
            s(:send,
              s(:lvar, :spec), :version)))),
      s(:def, :merge,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :name), :==,
              s(:send,
                s(:lvar, :other), :name)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:begin,
                  s(:self)),
                s(:str, " and "),
                s(:begin,
                  s(:lvar, :other)),
                s(:str, " have different names")))),
          s(:lvasgn, :default,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:lvasgn, :self_req,
            s(:send,
              s(:self), :requirement)),
          s(:lvasgn, :other_req,
            s(:send,
              s(:lvar, :other), :requirement)),
          s(:if,
            s(:send,
              s(:lvar, :other_req), :==,
              s(:lvar, :default)),
            s(:return,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:send, nil, :name),
                s(:lvar, :self_req))), nil),
          s(:if,
            s(:send,
              s(:lvar, :self_req), :==,
              s(:lvar, :default)),
            s(:return,
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:send, nil, :name),
                s(:lvar, :other_req))), nil),
          s(:send,
            s(:send,
              s(:self), :class), :new,
            s(:send, nil, :name),
            s(:send,
              s(:send,
                s(:lvar, :self_req), :as_list), :concat,
              s(:send,
                s(:lvar, :other_req), :as_list))))),
      s(:def, :matching_specs,
        s(:args,
          s(:optarg, :platform_only,
            s(:false))),
        s(:begin,
          s(:lvasgn, :matches,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :stubs_for,
                    s(:send, nil, :name)), :find_all),
                s(:args,
                  s(:arg, :spec)),
                s(:send,
                  s(:send, nil, :requirement), :satisfied_by?,
                  s(:send,
                    s(:lvar, :spec), :version))), :map,
              s(:block_pass,
                s(:sym, :to_spec)))),
          s(:if,
            s(:lvar, :platform_only),
            s(:block,
              s(:send,
                s(:lvar, :matches), :reject!),
              s(:args,
                s(:arg, :spec)),
              s(:or,
                s(:send,
                  s(:lvar, :spec), :nil?),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :match,
                    s(:send,
                      s(:lvar, :spec), :platform)), :!))), nil),
          s(:block,
            s(:send,
              s(:lvar, :matches), :sort_by),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :sort_obj)))),
      s(:def, :specific?,
        s(:args),
        s(:send,
          s(:ivar, :@requirement), :specific?)),
      s(:def, :to_specs,
        s(:args),
        s(:begin,
          s(:lvasgn, :matches,
            s(:send, nil, :matching_specs,
              s(:true))),
          s(:if,
            s(:send,
              s(:lvar, :matches), :empty?),
            s(:begin,
              s(:lvasgn, :specs,
                s(:block,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Specification), :find_all),
                      s(:args,
                        s(:arg, :s)),
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :name), :==,
                        s(:send, nil, :name))), :map),
                  s(:args,
                    s(:arg, :x)),
                  s(:send,
                    s(:lvar, :x), :full_name))),
              s(:if,
                s(:send,
                  s(:lvar, :specs), :empty?),
                s(:begin,
                  s(:lvasgn, :total,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Gem), :Specification), :to_a), :size)),
                  s(:lvasgn, :msg,
                    s(:send,
                      s(:dstr,
                        s(:str, "Could not find '"),
                        s(:begin,
                          s(:send, nil, :name)),
                        s(:str, "' ("),
                        s(:begin,
                          s(:send, nil, :requirement)),
                        s(:str, ") among "),
                        s(:begin,
                          s(:lvar, :total)),
                        s(:str, " total gem(s)\n")), :dup))),
                s(:lvasgn, :msg,
                  s(:send,
                    s(:dstr,
                      s(:str, "Could not find '"),
                      s(:begin,
                        s(:send, nil, :name)),
                      s(:str, "' ("),
                      s(:begin,
                        s(:send, nil, :requirement)),
                      s(:str, ") - did find: ["),
                      s(:begin,
                        s(:send,
                          s(:lvar, :specs), :join,
                          s(:str, ","))),
                      s(:str, "]\n")), :dup))),
              s(:send,
                s(:lvar, :msg), :<<,
                s(:dstr,
                  s(:str, "Checked in 'GEM_PATH="),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Gem), :path), :join,
                      s(:const,
                        s(:const, nil, :File), :PATH_SEPARATOR))),
                  s(:str, "', execute `gem env` for more information"))),
              s(:lvasgn, :error,
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :LoadError), :new,
                  s(:lvar, :msg))),
              s(:send,
                s(:lvar, :error), :name=,
                s(:send,
                  s(:self), :name)),
              s(:send,
                s(:lvar, :error), :requirement=,
                s(:send,
                  s(:self), :requirement)),
              s(:send, nil, :raise,
                s(:lvar, :error))), nil),
          s(:lvar, :matches))),
      s(:def, :to_spec,
        s(:args),
        s(:begin,
          s(:lvasgn, :matches,
            s(:send,
              s(:self), :to_specs)),
          s(:lvasgn, :active,
            s(:block,
              s(:send,
                s(:lvar, :matches), :find),
              s(:args,
                s(:arg, :spec)),
              s(:and,
                s(:lvar, :spec),
                s(:send,
                  s(:lvar, :spec), :activated?)))),
          s(:if,
            s(:lvar, :active),
            s(:return,
              s(:lvar, :active)), nil),
          s(:if,
            s(:send, nil, :prerelease?), nil,
            s(:block,
              s(:send,
                s(:lvar, :matches), :delete_if),
              s(:args,
                s(:arg, :spec)),
              s(:or,
                s(:send,
                  s(:lvar, :spec), :nil?),
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :version), :prerelease?)))),
          s(:send,
            s(:lvar, :matches), :last))))))
