s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/deprecate")),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Platform), nil,
    s(:begin,
      s(:ivasgn, :@local,
        s(:nil)),
      s(:send, nil, :attr_accessor,
        s(:sym, :cpu)),
      s(:send, nil, :attr_accessor,
        s(:sym, :os)),
      s(:send, nil, :attr_accessor,
        s(:sym, :version)),
      s(:defs,
        s(:self), :local,
        s(:args),
        s(:begin,
          s(:lvasgn, :arch,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "arch"))),
          s(:if,
            s(:send,
              s(:lvar, :arch), :=~,
              s(:regexp,
                s(:str, "mswin(?:32|64)$"),
                s(:regopt))),
            s(:lvasgn, :arch,
              s(:dstr,
                s(:begin,
                  s(:lvar, :arch)),
                s(:str, "_60"))), nil),
          s(:or_asgn,
            s(:ivasgn, :@local),
            s(:send, nil, :new,
              s(:lvar, :arch))))),
      s(:defs,
        s(:self), :match,
        s(:args,
          s(:arg, :platform)),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Gem), :platforms), :any?),
          s(:args,
            s(:arg, :local_platform)),
          s(:or,
            s(:or,
              s(:send,
                s(:lvar, :platform), :nil?),
              s(:send,
                s(:lvar, :local_platform), :==,
                s(:lvar, :platform))),
            s(:begin,
              s(:and,
                s(:send,
                  s(:lvar, :local_platform), :!=,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :RUBY)),
                s(:send,
                  s(:lvar, :local_platform), :=~,
                  s(:lvar, :platform))))))),
      s(:defs,
        s(:self), :installable?,
        s(:args,
          s(:arg, :spec)),
        s(:if,
          s(:send,
            s(:lvar, :spec), :respond_to?,
            s(:sym, :installable_platform?)),
          s(:send,
            s(:lvar, :spec), :installable_platform?),
          s(:send, nil, :match,
            s(:send,
              s(:lvar, :spec), :platform)))),
      s(:defs,
        s(:self), :new,
        s(:args,
          s(:arg, :arch)),
        s(:case,
          s(:lvar, :arch),
          s(:when,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :CURRENT),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :local)),
          s(:when,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY),
            s(:nil),
            s(:str, ""),
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Platform), :RUBY)),
          s(:zsuper))),
      s(:def, :initialize,
        s(:args,
          s(:arg, :arch)),
        s(:case,
          s(:lvar, :arch),
          s(:when,
            s(:const, nil, :Array),
            s(:masgn,
              s(:mlhs,
                s(:ivasgn, :@cpu),
                s(:ivasgn, :@os),
                s(:ivasgn, :@version)),
              s(:lvar, :arch))),
          s(:when,
            s(:const, nil, :String),
            s(:begin,
              s(:lvasgn, :arch,
                s(:send,
                  s(:lvar, :arch), :split,
                  s(:str, "-"))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :arch), :length), :>,
                    s(:int, 2)),
                  s(:send,
                    s(:send,
                      s(:lvar, :arch), :last), :!~,
                    s(:regexp,
                      s(:str, "\\d"),
                      s(:regopt)))),
                s(:begin,
                  s(:lvasgn, :extra,
                    s(:send,
                      s(:lvar, :arch), :pop)),
                  s(:send,
                    s(:send,
                      s(:lvar, :arch), :last), :<<,
                    s(:dstr,
                      s(:str, "-"),
                      s(:begin,
                        s(:lvar, :extra))))), nil),
              s(:lvasgn, :cpu,
                s(:send,
                  s(:lvar, :arch), :shift)),
              s(:ivasgn, :@cpu,
                s(:case,
                  s(:lvar, :cpu),
                  s(:when,
                    s(:regexp,
                      s(:str, "i\\d86"),
                      s(:regopt)),
                    s(:str, "x86")),
                  s(:lvar, :cpu))),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :arch), :length), :==,
                    s(:int, 2)),
                  s(:send,
                    s(:send,
                      s(:lvar, :arch), :last), :=~,
                    s(:regexp,
                      s(:str, "^\\d+(\\.\\d+)?$"),
                      s(:regopt)))),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:ivasgn, :@os),
                      s(:ivasgn, :@version)),
                    s(:lvar, :arch)),
                  s(:return)), nil),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :os)),
                s(:lvar, :arch)),
              s(:if,
                s(:send,
                  s(:lvar, :os), :nil?),
                s(:masgn,
                  s(:mlhs,
                    s(:ivasgn, :@cpu),
                    s(:lvasgn, :os)),
                  s(:array,
                    s(:nil),
                    s(:lvar, :cpu))), nil),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@os),
                  s(:ivasgn, :@version)),
                s(:case,
                  s(:lvar, :os),
                  s(:when,
                    s(:regexp,
                      s(:str, "aix(\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "aix"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "cygwin"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "cygwin"),
                      s(:nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "darwin(\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "darwin"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^macruby$"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "macruby"),
                      s(:nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "freebsd(\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "freebsd"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "hpux(\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "hpux"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^java$"),
                      s(:regopt)),
                    s(:regexp,
                      s(:str, "^jruby$"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "java"),
                      s(:nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^java([\\d.]*)"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "java"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^dalvik(\\d+)?$"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "dalvik"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^dotnet$"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "dotnet"),
                      s(:nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^dotnet([\\d.]*)"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "dotnet"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "linux"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "linux"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "mingw32"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "mingw32"),
                      s(:nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "(mswin\\d+)(\\_(\\d+))?"),
                      s(:regopt)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :os),
                          s(:lvasgn, :version)),
                        s(:array,
                          s(:nth_ref, 1),
                          s(:nth_ref, 3))),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:ivar, :@cpu), :nil?),
                          s(:send,
                            s(:lvar, :os), :=~,
                            s(:regexp,
                              s(:str, "32$"),
                              s(:regopt)))),
                        s(:ivasgn, :@cpu,
                          s(:str, "x86")), nil),
                      s(:array,
                        s(:lvar, :os),
                        s(:lvar, :version)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "netbsdelf"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "netbsdelf"),
                      s(:nil))),
                  s(:when,
                    s(:regexp,
                      s(:str, "openbsd(\\d+\\.\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "openbsd"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "bitrig(\\d+\\.\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "bitrig"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "solaris(\\d+\\.\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "solaris"),
                      s(:nth_ref, 1))),
                  s(:when,
                    s(:regexp,
                      s(:str, "^(\\w+_platform)(\\d+)?"),
                      s(:regopt)),
                    s(:array,
                      s(:nth_ref, 1),
                      s(:nth_ref, 2))),
                  s(:array,
                    s(:str, "unknown"),
                    s(:nil)))))),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :Platform),
            s(:begin,
              s(:ivasgn, :@cpu,
                s(:send,
                  s(:lvar, :arch), :cpu)),
              s(:ivasgn, :@os,
                s(:send,
                  s(:lvar, :arch), :os)),
              s(:ivasgn, :@version,
                s(:send,
                  s(:lvar, :arch), :version)))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "invalid argument "),
              s(:begin,
                s(:send,
                  s(:lvar, :arch), :inspect)))))),
      s(:def, :inspect,
        s(:args),
        s(:send,
          s(:str, "#<%s:0x%x @cpu=%p, @os=%p, @version=%p>"), :%,
          s(:array,
            s(:send,
              s(:self), :class),
            s(:send, nil, :object_id),
            s(:splat,
              s(:send, nil, :to_a))))),
      s(:def, :to_a,
        s(:args),
        s(:array,
          s(:ivar, :@cpu),
          s(:ivar, :@os),
          s(:ivar, :@version))),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:send,
            s(:send, nil, :to_a), :compact), :join,
          s(:str, "-"))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:send,
            s(:send,
              s(:self), :class), :===,
            s(:lvar, :other)),
          s(:send,
            s(:send, nil, :to_a), :==,
            s(:send,
              s(:lvar, :other), :to_a)))),
      s(:alias,
        s(:sym, :eql?),
        s(:sym, :==)),
      s(:def, :hash,
        s(:args),
        s(:send,
          s(:send, nil, :to_a), :hash)),
      s(:def, :===,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Platform), :===,
              s(:lvar, :other)), nil,
            s(:return,
              s(:nil))),
          s(:and,
            s(:and,
              s(:begin,
                s(:or,
                  s(:or,
                    s(:or,
                      s(:send,
                        s(:array,
                          s(:nil),
                          s(:str, "universal")), :include?,
                        s(:ivar, :@cpu)),
                      s(:send,
                        s(:array,
                          s(:nil),
                          s(:str, "universal")), :include?,
                        s(:send,
                          s(:lvar, :other), :cpu))),
                    s(:send,
                      s(:ivar, :@cpu), :==,
                      s(:send,
                        s(:lvar, :other), :cpu))),
                  s(:begin,
                    s(:and,
                      s(:send,
                        s(:ivar, :@cpu), :==,
                        s(:str, "arm")),
                      s(:send,
                        s(:send,
                          s(:lvar, :other), :cpu), :=~,
                        s(:regexp,
                          s(:str, "\\Aarm"),
                          s(:regopt))))))),
              s(:send,
                s(:ivar, :@os), :==,
                s(:send,
                  s(:lvar, :other), :os))),
            s(:begin,
              s(:or,
                s(:or,
                  s(:send,
                    s(:ivar, :@version), :nil?),
                  s(:send,
                    s(:send,
                      s(:lvar, :other), :version), :nil?)),
                s(:send,
                  s(:ivar, :@version), :==,
                  s(:send,
                    s(:lvar, :other), :version))))))),
      s(:def, :=~,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:case,
            s(:lvar, :other),
            s(:when,
              s(:const,
                s(:const, nil, :Gem), :Platform), nil),
            s(:when,
              s(:const, nil, :String),
              s(:begin,
                s(:lvasgn, :other,
                  s(:case,
                    s(:lvar, :other),
                    s(:when,
                      s(:regexp,
                        s(:str, "^i686-darwin(\\d)"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "x86"),
                        s(:str, "darwin"),
                        s(:nth_ref, 1))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^i\\d86-linux"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "x86"),
                        s(:str, "linux"),
                        s(:nil))),
                    s(:when,
                      s(:str, "java"),
                      s(:str, "jruby"),
                      s(:array,
                        s(:nil),
                        s(:str, "java"),
                        s(:nil))),
                    s(:when,
                      s(:regexp,
                        s(:str, "^dalvik(\\d+)?$"),
                        s(:regopt)),
                      s(:array,
                        s(:nil),
                        s(:str, "dalvik"),
                        s(:nth_ref, 1))),
                    s(:when,
                      s(:regexp,
                        s(:str, "dotnet(\\-(\\d+\\.\\d+))?"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "universal"),
                        s(:str, "dotnet"),
                        s(:nth_ref, 2))),
                    s(:when,
                      s(:regexp,
                        s(:str, "mswin32(\\_(\\d+))?"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "x86"),
                        s(:str, "mswin32"),
                        s(:nth_ref, 2))),
                    s(:when,
                      s(:regexp,
                        s(:str, "mswin64(\\_(\\d+))?"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "x64"),
                        s(:str, "mswin64"),
                        s(:nth_ref, 2))),
                    s(:when,
                      s(:str, "powerpc-darwin"),
                      s(:array,
                        s(:str, "powerpc"),
                        s(:str, "darwin"),
                        s(:nil))),
                    s(:when,
                      s(:regexp,
                        s(:str, "powerpc-darwin(\\d)"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "powerpc"),
                        s(:str, "darwin"),
                        s(:nth_ref, 1))),
                    s(:when,
                      s(:regexp,
                        s(:str, "sparc-solaris2.8"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "sparc"),
                        s(:str, "solaris"),
                        s(:str, "2.8"))),
                    s(:when,
                      s(:regexp,
                        s(:str, "universal-darwin(\\d)"),
                        s(:regopt)),
                      s(:array,
                        s(:str, "universal"),
                        s(:str, "darwin"),
                        s(:nth_ref, 1))),
                    s(:lvar, :other))),
                s(:lvasgn, :other,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Platform), :new,
                    s(:lvar, :other))))),
            s(:return,
              s(:nil))),
          s(:send,
            s(:self), :===,
            s(:lvar, :other)))),
      s(:casgn, nil, :RUBY,
        s(:str, "ruby")),
      s(:casgn, nil, :CURRENT,
        s(:str, "current")))))
