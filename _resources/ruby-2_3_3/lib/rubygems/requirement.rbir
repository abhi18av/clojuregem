s(:begin,
  s(:send, nil, :require,
    s(:str, "rubygems/version")),
  s(:send, nil, :require,
    s(:str, "rubygems/deprecate")),
  s(:if,
    s(:defined?,
      s(:const,
        s(:cbase), :YAML)),
    s(:send,
      s(:const, nil, :Gem), :load_yaml), nil),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Requirement), nil,
    s(:begin,
      s(:casgn, nil, :OPS,
        s(:hash,
          s(:pair,
            s(:str, "="),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:send,
                s(:lvar, :v), :==,
                s(:lvar, :r)))),
          s(:pair,
            s(:str, "!="),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:send,
                s(:lvar, :v), :!=,
                s(:lvar, :r)))),
          s(:pair,
            s(:str, ">"),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:send,
                s(:lvar, :v), :>,
                s(:lvar, :r)))),
          s(:pair,
            s(:str, "<"),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:send,
                s(:lvar, :v), :<,
                s(:lvar, :r)))),
          s(:pair,
            s(:str, ">="),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:send,
                s(:lvar, :v), :>=,
                s(:lvar, :r)))),
          s(:pair,
            s(:str, "<="),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:send,
                s(:lvar, :v), :<=,
                s(:lvar, :r)))),
          s(:pair,
            s(:str, "~>"),
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :v),
                s(:arg, :r)),
              s(:and,
                s(:send,
                  s(:lvar, :v), :>=,
                  s(:lvar, :r)),
                s(:send,
                  s(:send,
                    s(:lvar, :v), :release), :<,
                  s(:send,
                    s(:lvar, :r), :bump))))))),
      s(:casgn, nil, :SOURCE_SET_REQUIREMENT,
        s(:send,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :for_lockfile)), :new,
          s(:str, "!"))),
      s(:lvasgn, :quoted,
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:const, nil, :OPS), :keys), :map),
            s(:args,
              s(:arg, :k)),
            s(:send,
              s(:const, nil, :Regexp), :quote,
              s(:lvar, :k))), :join,
          s(:str, "|"))),
      s(:casgn, nil, :PATTERN_RAW,
        s(:dstr,
          s(:str, "\\s*("),
          s(:begin,
            s(:lvar, :quoted)),
          s(:str, ")?\\s*("),
          s(:begin,
            s(:const,
              s(:const,
                s(:const, nil, :Gem), :Version), :VERSION_PATTERN)),
          s(:str, ")\\s*"))),
      s(:casgn, nil, :PATTERN,
        s(:regexp,
          s(:str, "\\A"),
          s(:begin,
            s(:const, nil, :PATTERN_RAW)),
          s(:str, "\\z"),
          s(:regopt))),
      s(:casgn, nil, :DefaultRequirement,
        s(:array,
          s(:str, ">="),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Version), :new,
            s(:int, 0)))),
      s(:class,
        s(:const, nil, :BadRequirementError),
        s(:const, nil, :ArgumentError), nil),
      s(:defs,
        s(:self), :create,
        s(:args,
          s(:arg, :input)),
        s(:case,
          s(:lvar, :input),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :Requirement),
            s(:lvar, :input)),
          s(:when,
            s(:const,
              s(:const, nil, :Gem), :Version),
            s(:const, nil, :Array),
            s(:send, nil, :new,
              s(:lvar, :input))),
          s(:when,
            s(:str, "!"),
            s(:send, nil, :source_set)),
          s(:if,
            s(:send,
              s(:lvar, :input), :respond_to?,
              s(:sym, :to_str)),
            s(:send, nil, :new,
              s(:array,
                s(:send,
                  s(:lvar, :input), :to_str))),
            s(:send, nil, :default)))),
      s(:defs,
        s(:self), :default,
        s(:args),
        s(:send, nil, :new,
          s(:str, ">= 0"))),
      s(:defs,
        s(:self), :source_set,
        s(:args),
        s(:const, nil, :SOURCE_SET_REQUIREMENT)),
      s(:defs,
        s(:self), :parse,
        s(:args,
          s(:arg, :obj)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :===,
              s(:lvar, :obj)),
            s(:return,
              s(:array,
                s(:str, "="),
                s(:lvar, :obj))), nil),
          s(:if,
            s(:send,
              s(:const, nil, :PATTERN), :=~,
              s(:send,
                s(:lvar, :obj), :to_s)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :BadRequirementError),
              s(:dstr,
                s(:str, "Illformed requirement ["),
                s(:begin,
                  s(:send,
                    s(:lvar, :obj), :inspect)),
                s(:str, "]")))),
          s(:if,
            s(:and,
              s(:send,
                s(:nth_ref, 1), :==,
                s(:str, ">=")),
              s(:send,
                s(:nth_ref, 2), :==,
                s(:str, "0"))),
            s(:const, nil, :DefaultRequirement),
            s(:array,
              s(:or,
                s(:nth_ref, 1),
                s(:str, "=")),
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Version), :new,
                s(:nth_ref, 2)))))),
      s(:send, nil, :attr_reader,
        s(:sym, :requirements)),
      s(:def, :initialize,
        s(:args,
          s(:restarg, :requirements)),
        s(:begin,
          s(:lvasgn, :requirements,
            s(:send,
              s(:lvar, :requirements), :flatten)),
          s(:send,
            s(:lvar, :requirements), :compact!),
          s(:send,
            s(:lvar, :requirements), :uniq!),
          s(:if,
            s(:send,
              s(:lvar, :requirements), :empty?),
            s(:ivasgn, :@requirements,
              s(:array,
                s(:const, nil, :DefaultRequirement))),
            s(:ivasgn, :@requirements,
              s(:block,
                s(:send,
                  s(:lvar, :requirements), :map!),
                s(:args,
                  s(:arg, :r)),
                s(:send,
                  s(:send,
                    s(:self), :class), :parse,
                  s(:lvar, :r))))))),
      s(:def, :concat,
        s(:args,
          s(:arg, :new)),
        s(:begin,
          s(:lvasgn, :new,
            s(:send,
              s(:lvar, :new), :flatten)),
          s(:send,
            s(:lvar, :new), :compact!),
          s(:send,
            s(:lvar, :new), :uniq!),
          s(:lvasgn, :new,
            s(:block,
              s(:send,
                s(:lvar, :new), :map),
              s(:args,
                s(:arg, :r)),
              s(:send,
                s(:send,
                  s(:self), :class), :parse,
                s(:lvar, :r)))),
          s(:send,
            s(:ivar, :@requirements), :concat,
            s(:lvar, :new)))),
      s(:def, :for_lockfile,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:array,
                s(:const, nil, :DefaultRequirement)), :==,
              s(:ivar, :@requirements)),
            s(:return), nil),
          s(:lvasgn, :list,
            s(:send,
              s(:block,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:send, nil, :requirements), :sort_by),
                    s(:args,
                      s(:arg, :_),
                      s(:arg, :version)),
                    s(:lvar, :version)), :map),
                s(:args,
                  s(:arg, :op),
                  s(:arg, :version)),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :op)),
                  s(:str, " "),
                  s(:begin,
                    s(:lvar, :version)))), :uniq)),
          s(:dstr,
            s(:str, " ("),
            s(:begin,
              s(:send,
                s(:lvar, :list), :join,
                s(:str, ", "))),
            s(:str, ")")))),
      s(:def, :none?,
        s(:args),
        s(:if,
          s(:send,
            s(:send,
              s(:ivar, :@requirements), :size), :==,
            s(:int, 1)),
          s(:send,
            s(:send,
              s(:ivar, :@requirements), :[],
              s(:int, 0)), :==,
            s(:const, nil, :DefaultRequirement)),
          s(:false))),
      s(:def, :exact?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@requirements), :size), :==,
              s(:int, 1)), nil,
            s(:return,
              s(:false))),
          s(:send,
            s(:send,
              s(:send,
                s(:ivar, :@requirements), :[],
                s(:int, 0)), :[],
              s(:int, 0)), :==,
            s(:str, "=")))),
      s(:def, :as_list,
        s(:args),
        s(:send,
          s(:block,
            s(:send,
              s(:send, nil, :requirements), :map),
            s(:args,
              s(:arg, :op),
              s(:arg, :version)),
            s(:dstr,
              s(:begin,
                s(:lvar, :op)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :version)))), :sort)),
      s(:def, :hash,
        s(:args),
        s(:send,
          s(:send,
            s(:send, nil, :requirements), :sort), :hash)),
      s(:def, :marshal_dump,
        s(:args),
        s(:begin,
          s(:send, nil, :fix_syck_default_key_in_requirements),
          s(:array,
            s(:ivar, :@requirements)))),
      s(:def, :marshal_load,
        s(:args,
          s(:arg, :array)),
        s(:begin,
          s(:ivasgn, :@requirements,
            s(:send,
              s(:lvar, :array), :[],
              s(:int, 0))),
          s(:send, nil, :fix_syck_default_key_in_requirements))),
      s(:def, :yaml_initialize,
        s(:args,
          s(:arg, :tag),
          s(:arg, :vals)),
        s(:begin,
          s(:block,
            s(:send,
              s(:lvar, :vals), :each),
            s(:args,
              s(:arg, :ivar),
              s(:arg, :val)),
            s(:send, nil, :instance_variable_set,
              s(:dstr,
                s(:str, "@"),
                s(:begin,
                  s(:lvar, :ivar))),
              s(:lvar, :val))),
          s(:send,
            s(:const, nil, :Gem), :load_yaml),
          s(:send, nil, :fix_syck_default_key_in_requirements))),
      s(:def, :init_with,
        s(:args,
          s(:arg, :coder)),
        s(:send, nil, :yaml_initialize,
          s(:send,
            s(:lvar, :coder), :tag),
          s(:send,
            s(:lvar, :coder), :map))),
      s(:def, :to_yaml_properties,
        s(:args),
        s(:array,
          s(:str, "@requirements"))),
      s(:def, :encode_with,
        s(:args,
          s(:arg, :coder)),
        s(:send,
          s(:lvar, :coder), :add,
          s(:str, "requirements"),
          s(:ivar, :@requirements))),
      s(:def, :prerelease?,
        s(:args),
        s(:block,
          s(:send,
            s(:send, nil, :requirements), :any?),
          s(:args,
            s(:arg, :r)),
          s(:send,
            s(:send,
              s(:lvar, :r), :last), :prerelease?))),
      s(:def, :pretty_print,
        s(:args,
          s(:arg, :q)),
        s(:block,
          s(:send,
            s(:lvar, :q), :group,
            s(:int, 1),
            s(:str, "Gem::Requirement.new("),
            s(:str, ")")),
          s(:args),
          s(:send,
            s(:lvar, :q), :pp,
            s(:send, nil, :as_list)))),
      s(:def, :satisfied_by?,
        s(:args,
          s(:arg, :version)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :===,
              s(:lvar, :version)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "Need a Gem::Version: "),
                s(:begin,
                  s(:send,
                    s(:lvar, :version), :inspect))))),
          s(:block,
            s(:send,
              s(:send, nil, :requirements), :all?),
            s(:args,
              s(:arg, :op),
              s(:arg, :rv)),
            s(:send,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:const, nil, :OPS), :[],
                    s(:lvar, :op)),
                  s(:send,
                    s(:const, nil, :OPS), :[],
                    s(:str, "=")))), :call,
              s(:lvar, :version),
              s(:lvar, :rv))))),
      s(:alias,
        s(:sym, :===),
        s(:sym, :satisfied_by?)),
      s(:alias,
        s(:sym, :=~),
        s(:sym, :satisfied_by?)),
      s(:def, :specific?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:ivar, :@requirements), :length), :>,
              s(:int, 1)),
            s(:return,
              s(:true)), nil),
          s(:send,
            s(:send,
              s(:array,
                s(:str, ">"),
                s(:str, ">=")), :include?,
              s(:send,
                s(:send,
                  s(:ivar, :@requirements), :first), :first)), :!))),
      s(:def, :to_s,
        s(:args),
        s(:send,
          s(:send, nil, :as_list), :join,
          s(:str, ", "))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:and,
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Requirement), :===,
            s(:lvar, :other)),
          s(:send,
            s(:send, nil, :to_s), :==,
            s(:send,
              s(:lvar, :other), :to_s)))),
      s(:send, nil, :private),
      s(:def, :fix_syck_default_key_in_requirements,
        s(:args),
        s(:begin,
          s(:send,
            s(:const, nil, :Gem), :load_yaml),
          s(:block,
            s(:send,
              s(:ivar, :@requirements), :each),
            s(:args,
              s(:arg, :r)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :r), :[],
                  s(:int, 0)), :kind_of?,
                s(:const,
                  s(:const, nil, :Gem), :SyckDefaultKey)),
              s(:send,
                s(:lvar, :r), :[]=,
                s(:int, 0),
                s(:str, "=")), nil)))))),
  s(:class,
    s(:const,
      s(:const, nil, :Gem), :Version), nil,
    s(:casgn, nil, :Requirement,
      s(:const,
        s(:const, nil, :Gem), :Requirement))))
