s(:begin,
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "openssl")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:module,
    s(:const, nil, :SecureRandom),
    s(:if,
      s(:and,
        s(:defined?,
          s(:const,
            s(:const, nil, :OpenSSL), :Random)),
        s(:send,
          s(:regexp,
            s(:str, "mswin|mingw"),
            s(:regopt)), :!~,
          s(:const, nil, :RUBY_PLATFORM))),
      s(:defs,
        s(:self), :gen_random,
        s(:args,
          s(:arg, :n)),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@pid)), nil,
            s(:ivasgn, :@pid,
              s(:int, 0))),
          s(:lvasgn, :pid,
            s(:gvar, :$$)),
          s(:if,
            s(:send,
              s(:ivar, :@pid), :==,
              s(:lvar, :pid)), nil,
            s(:begin,
              s(:lvasgn, :now,
                s(:send,
                  s(:const, nil, :Process), :clock_gettime,
                  s(:const,
                    s(:const, nil, :Process), :CLOCK_REALTIME),
                  s(:sym, :nanosecond))),
              s(:lvasgn, :ary,
                s(:array,
                  s(:lvar, :now),
                  s(:ivar, :@pid),
                  s(:lvar, :pid))),
              s(:send,
                s(:const,
                  s(:const, nil, :OpenSSL), :Random), :random_add,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :join,
                    s(:str, "")), :to_s),
                s(:float, 0.0)),
              s(:lvasgn, :seed,
                s(:send,
                  s(:const, nil, :Random), :raw_seed,
                  s(:int, 16))),
              s(:if,
                s(:begin,
                  s(:lvar, :seed)),
                s(:send,
                  s(:const,
                    s(:const, nil, :OpenSSL), :Random), :random_add,
                  s(:lvar, :seed),
                  s(:int, 16)), nil),
              s(:ivasgn, :@pid,
                s(:lvar, :pid)))),
          s(:return,
            s(:send,
              s(:const,
                s(:const, nil, :OpenSSL), :Random), :random_bytes,
              s(:lvar, :n))))),
      s(:defs,
        s(:self), :gen_random,
        s(:args,
          s(:arg, :n)),
        s(:begin,
          s(:lvasgn, :ret,
            s(:send,
              s(:const, nil, :Random), :raw_seed,
              s(:lvar, :n))),
          s(:if,
            s(:lvar, :ret), nil,
            s(:send, nil, :raise,
              s(:const, nil, :NotImplementedError),
              s(:str, "No random device"))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :ret), :length), :==,
              s(:lvar, :n)), nil,
            s(:send, nil, :raise,
              s(:const, nil, :NotImplementedError),
              s(:dstr,
                s(:str, "Unexpected partial read from random device: only "),
                s(:begin,
                  s(:send,
                    s(:lvar, :ret), :length)),
                s(:str, " for "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, " bytes")))),
          s(:lvar, :ret))))),
  s(:module,
    s(:const,
      s(:const, nil, :Random), :Formatter),
    s(:begin,
      s(:def, :random_bytes,
        s(:args,
          s(:optarg, :n,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :n,
            s(:if,
              s(:lvar, :n),
              s(:send,
                s(:lvar, :n), :to_int),
              s(:int, 16))),
          s(:send, nil, :gen_random,
            s(:lvar, :n)))),
      s(:def, :hex,
        s(:args,
          s(:optarg, :n,
            s(:nil))),
        s(:send,
          s(:send,
            s(:send, nil, :random_bytes,
              s(:lvar, :n)), :unpack,
            s(:str, "H*")), :[],
          s(:int, 0))),
      s(:def, :base64,
        s(:args,
          s(:optarg, :n,
            s(:nil))),
        s(:send,
          s(:send,
            s(:array,
              s(:send, nil, :random_bytes,
                s(:lvar, :n))), :pack,
            s(:str, "m*")), :delete,
          s(:str, "\n"))),
      s(:def, :urlsafe_base64,
        s(:args,
          s(:optarg, :n,
            s(:nil)),
          s(:optarg, :padding,
            s(:false))),
        s(:begin,
          s(:lvasgn, :s,
            s(:send,
              s(:array,
                s(:send, nil, :random_bytes,
                  s(:lvar, :n))), :pack,
              s(:str, "m*"))),
          s(:send,
            s(:lvar, :s), :delete!,
            s(:str, "\n")),
          s(:send,
            s(:lvar, :s), :tr!,
            s(:str, "+/"),
            s(:str, "-_")),
          s(:if,
            s(:lvar, :padding), nil,
            s(:send,
              s(:lvar, :s), :delete!,
              s(:str, "="))),
          s(:lvar, :s))),
      s(:def, :uuid,
        s(:args),
        s(:begin,
          s(:lvasgn, :ary,
            s(:send,
              s(:send, nil, :random_bytes,
                s(:int, 16)), :unpack,
              s(:str, "NnnnnN"))),
          s(:send,
            s(:lvar, :ary), :[]=,
            s(:int, 2),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :[],
                    s(:int, 2)), :&,
                  s(:int, 4095))), :|,
              s(:int, 16384))),
          s(:send,
            s(:lvar, :ary), :[]=,
            s(:int, 3),
            s(:send,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :ary), :[],
                    s(:int, 3)), :&,
                  s(:int, 16383))), :|,
              s(:int, 32768))),
          s(:send,
            s(:str, "%08x-%04x-%04x-%04x-%04x%08x"), :%,
            s(:lvar, :ary)))),
      s(:send, nil, :private),
      s(:def, :gen_random,
        s(:args,
          s(:arg, :n)),
        s(:send,
          s(:self), :bytes,
          s(:lvar, :n))))),
  s(:send,
    s(:const, nil, :SecureRandom), :extend,
    s(:const,
      s(:const, nil, :Random), :Formatter)))
