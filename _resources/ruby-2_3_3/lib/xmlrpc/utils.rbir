s(:module,
  s(:const, nil, :XMLRPC),
  s(:begin,
    s(:module,
      s(:const, nil, :Marshallable), nil),
    s(:module,
      s(:const, nil, :ParserWriterChooseMixin),
      s(:begin,
        s(:def, :set_writer,
          s(:args,
            s(:arg, :writer)),
          s(:begin,
            s(:ivasgn, :@create,
              s(:send,
                s(:const, nil, :Create), :new,
                s(:lvar, :writer))),
            s(:self))),
        s(:def, :set_parser,
          s(:args,
            s(:arg, :parser)),
          s(:begin,
            s(:ivasgn, :@parser,
              s(:lvar, :parser)),
            s(:self))),
        s(:send, nil, :private),
        s(:def, :create,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@create), :nil?),
              s(:send, nil, :set_writer,
                s(:send,
                  s(:const,
                    s(:const, nil, :Config), :DEFAULT_WRITER), :new)), nil),
            s(:ivar, :@create))),
        s(:def, :parser,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@parser), :nil?),
              s(:send, nil, :set_parser,
                s(:send,
                  s(:const,
                    s(:const, nil, :Config), :DEFAULT_PARSER), :new)), nil),
            s(:ivar, :@parser))))),
    s(:module,
      s(:const, nil, :Service),
      s(:begin,
        s(:class,
          s(:const, nil, :BasicInterface), nil,
          s(:begin,
            s(:send, nil, :attr_reader,
              s(:sym, :prefix),
              s(:sym, :methods)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :prefix)),
              s(:begin,
                s(:ivasgn, :@prefix,
                  s(:lvar, :prefix)),
                s(:ivasgn, :@methods,
                  s(:array)))),
            s(:def, :add_method,
              s(:args,
                s(:arg, :sig),
                s(:optarg, :help,
                  s(:nil)),
                s(:optarg, :meth_name,
                  s(:nil))),
              s(:begin,
                s(:lvasgn, :mname,
                  s(:nil)),
                s(:if,
                  s(:send,
                    s(:lvar, :sig), :kind_of?,
                    s(:const, nil, :String)),
                  s(:lvasgn, :sig,
                    s(:array,
                      s(:lvar, :sig))), nil),
                s(:lvasgn, :sig,
                  s(:block,
                    s(:send,
                      s(:lvar, :sig), :collect),
                    s(:args,
                      s(:arg, :s)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :name),
                          s(:lvasgn, :si)),
                        s(:send, nil, :parse_sig,
                          s(:lvar, :s))),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :mname), :!=,
                            s(:nil)),
                          s(:send,
                            s(:lvar, :name), :!=,
                            s(:lvar, :mname))),
                        s(:send, nil, :raise,
                          s(:str, "Wrong signatures!")), nil),
                      s(:lvasgn, :mname,
                        s(:lvar, :name)),
                      s(:lvar, :si)))),
                s(:send,
                  s(:ivar, :@methods), :<<,
                  s(:array,
                    s(:lvar, :mname),
                    s(:or,
                      s(:lvar, :meth_name),
                      s(:lvar, :mname)),
                    s(:lvar, :sig),
                    s(:lvar, :help))))),
            s(:send, nil, :private),
            s(:def, :parse_sig,
              s(:args,
                s(:arg, :sig)),
              s(:if,
                s(:send,
                  s(:lvar, :sig), :=~,
                  s(:regexp,
                    s(:str, "^\\s*(\\w+)\\s+([^(]+)(\\(([^)]*)\\))?\\s*$"),
                    s(:regopt))),
                s(:begin,
                  s(:lvasgn, :params,
                    s(:array,
                      s(:nth_ref, 1))),
                  s(:lvasgn, :name,
                    s(:send,
                      s(:nth_ref, 2), :strip)),
                  s(:if,
                    s(:send,
                      s(:nth_ref, 4), :!=,
                      s(:nil)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 4), :split,
                          s(:str, ",")), :each),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:lvar, :params), :<<,
                        s(:send,
                          s(:lvar, :i), :strip))), nil),
                  s(:return,
                    s(:lvar, :name),
                    s(:lvar, :params))),
                s(:send, nil, :raise,
                  s(:str, "Syntax error in signature")))))),
        s(:class,
          s(:const, nil, :Interface),
          s(:const, nil, :BasicInterface),
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :prefix),
                s(:blockarg, :p)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :p), :nil?),
                  s(:send, nil, :raise,
                    s(:str, "No interface specified")), nil),
                s(:super,
                  s(:lvar, :prefix)),
                s(:send, nil, :instance_eval,
                  s(:block_pass,
                    s(:lvar, :p))))),
            s(:def, :get_methods,
              s(:args,
                s(:arg, :obj),
                s(:optarg, :delim,
                  s(:str, "."))),
              s(:begin,
                s(:lvasgn, :prefix,
                  s(:send,
                    s(:ivar, :@prefix), :+,
                    s(:lvar, :delim))),
                s(:block,
                  s(:send,
                    s(:ivar, :@methods), :collect),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :meth),
                    s(:arg, :sig),
                    s(:arg, :help)),
                  s(:array,
                    s(:send,
                      s(:lvar, :prefix), :+,
                      s(:send,
                        s(:lvar, :name), :to_s)),
                    s(:send,
                      s(:send,
                        s(:lvar, :obj), :method,
                        s(:lvar, :meth)), :to_proc),
                    s(:lvar, :sig),
                    s(:lvar, :help))))),
            s(:send, nil, :private),
            s(:def, :meth,
              s(:args,
                s(:restarg, :a)),
              s(:send, nil, :add_method,
                s(:splat,
                  s(:lvar, :a)))))),
        s(:class,
          s(:const, nil, :PublicInstanceMethodsInterface),
          s(:const, nil, :BasicInterface),
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :prefix)),
              s(:super,
                s(:lvar, :prefix))),
            s(:def, :get_methods,
              s(:args,
                s(:arg, :obj),
                s(:optarg, :delim,
                  s(:str, "."))),
              s(:begin,
                s(:lvasgn, :prefix,
                  s(:send,
                    s(:ivar, :@prefix), :+,
                    s(:lvar, :delim))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :obj), :class), :public_instance_methods,
                      s(:false)), :collect),
                  s(:args,
                    s(:arg, :name)),
                  s(:array,
                    s(:send,
                      s(:lvar, :prefix), :+,
                      s(:send,
                        s(:lvar, :name), :to_s)),
                    s(:send,
                      s(:send,
                        s(:lvar, :obj), :method,
                        s(:lvar, :name)), :to_proc),
                    s(:nil),
                    s(:nil))))))))),
    s(:defs,
      s(:self), :interface,
      s(:args,
        s(:arg, :prefix),
        s(:blockarg, :p)),
      s(:send,
        s(:const,
          s(:const, nil, :Service), :Interface), :new,
        s(:lvar, :prefix),
        s(:block_pass,
          s(:lvar, :p)))),
    s(:defs,
      s(:self), :iPIMethods,
      s(:args,
        s(:arg, :prefix)),
      s(:send,
        s(:const,
          s(:const, nil, :Service), :PublicInstanceMethodsInterface), :new,
        s(:lvar, :prefix))),
    s(:module,
      s(:const, nil, :ParseContentType),
      s(:def, :parse_content_type,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :a),
              s(:splat,
                s(:lvasgn, :b))),
            s(:send,
              s(:lvar, :str), :split,
              s(:str, ";"))),
          s(:return,
            s(:send,
              s(:send,
                s(:lvar, :a), :strip), :downcase),
            s(:splat,
              s(:lvar, :b))))))))
