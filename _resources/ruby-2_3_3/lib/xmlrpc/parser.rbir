s(:begin,
  s(:send, nil, :require,
    s(:str, "date")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/base64")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/datetime")),
  s(:module,
    s(:const, nil, :NQXML),
    s(:class,
      s(:const, nil, :Node), nil,
      s(:begin,
        s(:def, :removeChild,
          s(:args,
            s(:arg, :node)),
          s(:send,
            s(:ivar, :@children), :delete,
            s(:lvar, :node))),
        s(:def, :childNodes,
          s(:args),
          s(:ivar, :@children)),
        s(:def, :hasChildNodes,
          s(:args),
          s(:send,
            s(:send,
              s(:ivar, :@children), :empty?), :!)),
        s(:def, :[],
          s(:args,
            s(:arg, :index)),
          s(:send,
            s(:ivar, :@children), :[],
            s(:lvar, :index))),
        s(:def, :nodeType,
          s(:args),
          s(:if,
            s(:send,
              s(:ivar, :@entity), :instance_of?,
              s(:const,
                s(:const, nil, :NQXML), :Text)),
            s(:sym, :TEXT),
            s(:if,
              s(:send,
                s(:ivar, :@entity), :instance_of?,
                s(:const,
                  s(:const, nil, :NQXML), :Comment)),
              s(:sym, :COMMENT),
              s(:if,
                s(:send,
                  s(:ivar, :@entity), :instance_of?,
                  s(:const,
                    s(:const, nil, :NQXML), :Tag)),
                s(:sym, :ELEMENT),
                s(:sym, :ELSE))))),
        s(:def, :nodeValue,
          s(:args),
          s(:send,
            s(:ivar, :@entity), :text)),
        s(:def, :nodeName,
          s(:args),
          s(:send,
            s(:ivar, :@entity), :name))))),
  s(:module,
    s(:const, nil, :XMLRPC),
    s(:begin,
      s(:class,
        s(:const, nil, :FaultException),
        s(:const, nil, :StandardError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :faultCode),
            s(:sym, :faultString)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :faultCode),
              s(:arg, :faultString)),
            s(:begin,
              s(:ivasgn, :@faultCode,
                s(:lvar, :faultCode)),
              s(:ivasgn, :@faultString,
                s(:lvar, :faultString)),
              s(:super,
                s(:ivar, :@faultString)))),
          s(:def, :to_h,
            s(:args),
            s(:hash,
              s(:pair,
                s(:str, "faultCode"),
                s(:ivar, :@faultCode)),
              s(:pair,
                s(:str, "faultString"),
                s(:ivar, :@faultString)))))),
      s(:module,
        s(:const, nil, :Convert),
        s(:begin,
          s(:defs,
            s(:self), :int,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:lvar, :str), :to_i)),
          s(:defs,
            s(:self), :boolean,
            s(:args,
              s(:arg, :str)),
            s(:case,
              s(:lvar, :str),
              s(:when,
                s(:str, "0"),
                s(:false)),
              s(:when,
                s(:str, "1"),
                s(:true)),
              s(:send, nil, :raise,
                s(:str, "RPC-value of type boolean is wrong")))),
          s(:defs,
            s(:self), :double,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:lvar, :str), :to_f)),
          s(:defs,
            s(:self), :dateTime,
            s(:args,
              s(:arg, :str)),
            s(:case,
              s(:lvar, :str),
              s(:when,
                s(:regexp,
                  s(:str, "^(-?\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:Z|([+-])(\\d\\d):?(\\d\\d))?$"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :a,
                    s(:block,
                      s(:send,
                        s(:array,
                          s(:nth_ref, 1),
                          s(:nth_ref, 2),
                          s(:nth_ref, 3),
                          s(:nth_ref, 4),
                          s(:nth_ref, 5),
                          s(:nth_ref, 6)), :collect),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:lvar, :i), :to_i))),
                  s(:if,
                    s(:nth_ref, 7),
                    s(:begin,
                      s(:lvasgn, :ofs,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:nth_ref, 8), :to_i), :*,
                            s(:int, 3600)), :+,
                          s(:send,
                            s(:send,
                              s(:nth_ref, 9), :to_i), :*,
                            s(:int, 60)))),
                      s(:if,
                        s(:send,
                          s(:nth_ref, 7), :==,
                          s(:str, "+")),
                        s(:lvasgn, :ofs,
                          s(:send,
                            s(:lvar, :ofs), :-@)), nil),
                      s(:lvasgn, :utc,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Time), :utc,
                            s(:splat,
                              s(:lvar, :a))), :+,
                          s(:lvar, :ofs))),
                      s(:lvasgn, :a,
                        s(:array,
                          s(:send,
                            s(:lvar, :utc), :year),
                          s(:send,
                            s(:lvar, :utc), :month),
                          s(:send,
                            s(:lvar, :utc), :day),
                          s(:send,
                            s(:lvar, :utc), :hour),
                          s(:send,
                            s(:lvar, :utc), :min),
                          s(:send,
                            s(:lvar, :utc), :sec)))), nil),
                  s(:send,
                    s(:const,
                      s(:const, nil, :XMLRPC), :DateTime), :new,
                    s(:splat,
                      s(:lvar, :a))))),
              s(:when,
                s(:regexp,
                  s(:str, "^(-?\\d\\d)-?(\\d\\d)-?(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(Z|([+-]\\d\\d):(\\d\\d))?$"),
                  s(:regopt)),
                s(:begin,
                  s(:lvasgn, :a,
                    s(:block,
                      s(:send,
                        s(:array,
                          s(:nth_ref, 1),
                          s(:nth_ref, 2),
                          s(:nth_ref, 3),
                          s(:nth_ref, 4),
                          s(:nth_ref, 5),
                          s(:nth_ref, 6)), :collect),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:lvar, :i), :to_i))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, 0)), :<,
                      s(:int, 70)),
                    s(:op_asgn,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, 0)), :+,
                      s(:int, 2000)),
                    s(:op_asgn,
                      s(:send,
                        s(:lvar, :a), :[],
                        s(:int, 0)), :+,
                      s(:int, 1900))),
                  s(:if,
                    s(:nth_ref, 7),
                    s(:begin,
                      s(:lvasgn, :ofs,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:nth_ref, 8), :to_i), :*,
                            s(:int, 3600)), :+,
                          s(:send,
                            s(:send,
                              s(:nth_ref, 9), :to_i), :*,
                            s(:int, 60)))),
                      s(:if,
                        s(:send,
                          s(:nth_ref, 7), :==,
                          s(:str, "+")),
                        s(:lvasgn, :ofs,
                          s(:send,
                            s(:lvar, :ofs), :-@)), nil),
                      s(:lvasgn, :utc,
                        s(:send,
                          s(:send,
                            s(:const, nil, :Time), :utc,
                            s(:splat,
                              s(:lvar, :a))), :+,
                          s(:lvar, :ofs))),
                      s(:lvasgn, :a,
                        s(:array,
                          s(:send,
                            s(:lvar, :utc), :year),
                          s(:send,
                            s(:lvar, :utc), :month),
                          s(:send,
                            s(:lvar, :utc), :day),
                          s(:send,
                            s(:lvar, :utc), :hour),
                          s(:send,
                            s(:lvar, :utc), :min),
                          s(:send,
                            s(:lvar, :utc), :sec)))), nil),
                  s(:send,
                    s(:const,
                      s(:const, nil, :XMLRPC), :DateTime), :new,
                    s(:splat,
                      s(:lvar, :a))))),
              s(:send, nil, :raise,
                s(:send,
                  s(:str, "wrong dateTime.iso8601 format "), :+,
                  s(:lvar, :str))))),
          s(:defs,
            s(:self), :base64,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:const,
                s(:const, nil, :XMLRPC), :Base64), :decode,
              s(:lvar, :str))),
          s(:defs,
            s(:self), :struct,
            s(:args,
              s(:arg, :hash)),
            s(:begin,
              s(:lvasgn, :klass,
                s(:send,
                  s(:lvar, :hash), :[],
                  s(:str, "___class___"))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :klass), :nil?),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Config), :ENABLE_MARSHALLING), :==,
                    s(:false))),
                s(:lvar, :hash),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :mod,
                        s(:const, nil, :Module)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :klass), :split,
                            s(:str, "::")), :each),
                        s(:args,
                          s(:arg, :const)),
                        s(:lvasgn, :mod,
                          s(:send,
                            s(:lvar, :mod), :const_get,
                            s(:send,
                              s(:lvar, :const), :strip)))),
                      s(:lvasgn, :obj,
                        s(:send,
                          s(:lvar, :mod), :allocate)),
                      s(:send,
                        s(:lvar, :hash), :delete,
                        s(:str, "___class___")),
                      s(:block,
                        s(:send,
                          s(:lvar, :hash), :each),
                        s(:args,
                          s(:arg, :key),
                          s(:arg, :value)),
                        s(:if,
                          s(:send,
                            s(:lvar, :key), :=~,
                            s(:regexp,
                              s(:str, "^([a-zA-Z_]\\w*)$"),
                              s(:regopt))),
                          s(:send,
                            s(:lvar, :obj), :instance_variable_set,
                            s(:dstr,
                              s(:str, "@"),
                              s(:begin,
                                s(:lvar, :key))),
                            s(:lvar, :value)), nil)),
                      s(:lvar, :obj)),
                    s(:resbody, nil, nil,
                      s(:lvar, :hash)), nil))))),
          s(:defs,
            s(:self), :fault,
            s(:args,
              s(:arg, :hash)),
            s(:if,
              s(:and,
                s(:and,
                  s(:and,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:lvar, :hash), :kind_of?,
                          s(:const, nil, :Hash)),
                        s(:send,
                          s(:send,
                            s(:lvar, :hash), :size), :==,
                          s(:int, 2))),
                      s(:send,
                        s(:lvar, :hash), :has_key?,
                        s(:str, "faultCode"))),
                    s(:send,
                      s(:lvar, :hash), :has_key?,
                      s(:str, "faultString"))),
                  s(:send,
                    s(:send,
                      s(:lvar, :hash), :[],
                      s(:str, "faultCode")), :kind_of?,
                    s(:const, nil, :Integer))),
                s(:send,
                  s(:send,
                    s(:lvar, :hash), :[],
                    s(:str, "faultString")), :kind_of?,
                  s(:const, nil, :String))),
              s(:send,
                s(:const,
                  s(:const, nil, :XMLRPC), :FaultException), :new,
                s(:send,
                  s(:lvar, :hash), :[],
                  s(:str, "faultCode")),
                s(:send,
                  s(:lvar, :hash), :[],
                  s(:str, "faultString"))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "wrong fault-structure: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :hash), :inspect)))))))),
      s(:module,
        s(:const, nil, :XMLParser),
        s(:begin,
          s(:class,
            s(:const, nil, :AbstractTreeParser), nil,
            s(:begin,
              s(:def, :parseMethodResponse,
                s(:args,
                  s(:arg, :str)),
                s(:send, nil, :methodResponse_document,
                  s(:send, nil, :createCleanedTree,
                    s(:lvar, :str)))),
              s(:def, :parseMethodCall,
                s(:args,
                  s(:arg, :str)),
                s(:send, nil, :methodCall_document,
                  s(:send, nil, :createCleanedTree,
                    s(:lvar, :str)))),
              s(:send, nil, :private),
              s(:def, :removeWhitespacesAndComments,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:lvasgn, :remove,
                    s(:array)),
                  s(:lvasgn, :childs,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :childNodes), :to_a)),
                  s(:block,
                    s(:send,
                      s(:lvar, :childs), :each),
                    s(:args,
                      s(:arg, :nd)),
                    s(:case,
                      s(:send, nil, :_nodeType,
                        s(:lvar, :nd)),
                      s(:when,
                        s(:sym, :TEXT),
                        s(:if,
                          s(:send,
                            s(:array,
                              s(:str, "i4"),
                              s(:str, "i8"),
                              s(:str, "int"),
                              s(:str, "boolean"),
                              s(:str, "string"),
                              s(:str, "double"),
                              s(:str, "dateTime.iso8601"),
                              s(:str, "base64")), :include?,
                            s(:send,
                              s(:lvar, :node), :nodeName)), nil,
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:lvar, :node), :nodeName), :==,
                              s(:str, "value")),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:block,
                                    s(:send,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :node), :childNodes), :to_a), :detect),
                                    s(:args,
                                      s(:arg, :n)),
                                    s(:send,
                                      s(:send, nil, :_nodeType,
                                        s(:lvar, :n)), :==,
                                      s(:sym, :ELEMENT))), :nil?), :!),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :nd), :nodeValue), :strip), :==,
                                  s(:str, "")),
                                s(:send,
                                  s(:lvar, :remove), :<<,
                                  s(:lvar, :nd)), nil), nil),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :nd), :nodeValue), :strip), :==,
                                s(:str, "")),
                              s(:send,
                                s(:lvar, :remove), :<<,
                                s(:lvar, :nd)), nil)))),
                      s(:when,
                        s(:sym, :COMMENT),
                        s(:send,
                          s(:lvar, :remove), :<<,
                          s(:lvar, :nd))),
                      s(:send, nil, :removeWhitespacesAndComments,
                        s(:lvar, :nd)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :remove), :each),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:lvar, :node), :removeChild,
                      s(:lvar, :i))))),
              s(:def, :nodeMustBe,
                s(:args,
                  s(:arg, :node),
                  s(:arg, :name)),
                s(:begin,
                  s(:lvasgn, :cmp,
                    s(:case,
                      s(:lvar, :name),
                      s(:when,
                        s(:const, nil, :Array),
                        s(:send,
                          s(:lvar, :name), :include?,
                          s(:send,
                            s(:lvar, :node), :nodeName))),
                      s(:when,
                        s(:const, nil, :String),
                        s(:send,
                          s(:lvar, :name), :==,
                          s(:send,
                            s(:lvar, :node), :nodeName))),
                      s(:send, nil, :raise,
                        s(:str, "error")))),
                  s(:if,
                    s(:send,
                      s(:lvar, :cmp), :!),
                    s(:send, nil, :raise,
                      s(:str, "wrong xml-rpc (name)")), nil),
                  s(:lvar, :node))),
              s(:def, :hasOnlyOneChild,
                s(:args,
                  s(:arg, :node),
                  s(:optarg, :name,
                    s(:nil))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :childNodes), :to_a), :size), :!=,
                      s(:int, 1)),
                    s(:send, nil, :raise,
                      s(:str, "wrong xml-rpc (size)")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :name), :!=,
                      s(:nil)),
                    s(:send, nil, :nodeMustBe,
                      s(:send,
                        s(:lvar, :node), :firstChild),
                      s(:lvar, :name)), nil))),
              s(:def, :assert,
                s(:args,
                  s(:arg, :b)),
                s(:if,
                  s(:send,
                    s(:lvar, :b), :!),
                  s(:send, nil, :raise,
                    s(:str, "assert-fail")), nil)),
              s(:def, :text_zero_one,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:lvasgn, :nodes,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :childNodes), :to_a), :size)),
                  s(:if,
                    s(:send,
                      s(:lvar, :nodes), :==,
                      s(:int, 1)),
                    s(:send, nil, :text,
                      s(:send,
                        s(:lvar, :node), :firstChild)),
                    s(:if,
                      s(:send,
                        s(:lvar, :nodes), :==,
                        s(:int, 0)),
                      s(:str, ""),
                      s(:send, nil, :raise,
                        s(:str, "wrong xml-rpc (size)")))))),
              s(:def, :integer,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:array,
                      s(:str, "i4"),
                      s(:str, "i8"),
                      s(:str, "int"))),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node)),
                  s(:send,
                    s(:const, nil, :Convert), :int,
                    s(:send, nil, :text,
                      s(:send,
                        s(:lvar, :node), :firstChild))))),
              s(:def, :boolean,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "boolean")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node)),
                  s(:send,
                    s(:const, nil, :Convert), :boolean,
                    s(:send, nil, :text,
                      s(:send,
                        s(:lvar, :node), :firstChild))))),
              s(:def, :v_nil,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "nil")),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :childNodes), :to_a), :size), :==,
                      s(:int, 0))),
                  s(:nil))),
              s(:def, :string,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "string")),
                  s(:send, nil, :text_zero_one,
                    s(:lvar, :node)))),
              s(:def, :double,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "double")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node)),
                  s(:send,
                    s(:const, nil, :Convert), :double,
                    s(:send, nil, :text,
                      s(:send,
                        s(:lvar, :node), :firstChild))))),
              s(:def, :dateTime,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "dateTime.iso8601")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node)),
                  s(:send,
                    s(:const, nil, :Convert), :dateTime,
                    s(:send, nil, :text,
                      s(:send,
                        s(:lvar, :node), :firstChild))))),
              s(:def, :base64,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "base64")),
                  s(:send,
                    s(:const, nil, :Convert), :base64,
                    s(:send, nil, :text_zero_one,
                      s(:lvar, :node))))),
              s(:def, :member,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "member")),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :childNodes), :to_a), :size), :==,
                      s(:int, 2))),
                  s(:array,
                    s(:send, nil, :name,
                      s(:send,
                        s(:lvar, :node), :[],
                        s(:int, 0))),
                    s(:send, nil, :value,
                      s(:send,
                        s(:lvar, :node), :[],
                        s(:int, 1)))))),
              s(:def, :name,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "name")),
                  s(:send, nil, :text_zero_one,
                    s(:lvar, :node)))),
              s(:def, :array,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "array")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node),
                    s(:str, "data")),
                  s(:send, nil, :data,
                    s(:send,
                      s(:lvar, :node), :firstChild)))),
              s(:def, :data,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "data")),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :childNodes), :to_a), :collect),
                    s(:args,
                      s(:arg, :val)),
                    s(:send, nil, :value,
                      s(:lvar, :val))))),
              s(:def, :param,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "param")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node),
                    s(:str, "value")),
                  s(:send, nil, :value,
                    s(:send,
                      s(:lvar, :node), :firstChild)))),
              s(:def, :methodResponse,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "methodResponse")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node),
                    s(:array,
                      s(:str, "params"),
                      s(:str, "fault"))),
                  s(:lvasgn, :child,
                    s(:send,
                      s(:lvar, :node), :firstChild)),
                  s(:case,
                    s(:send,
                      s(:lvar, :child), :nodeName),
                    s(:when,
                      s(:str, "params"),
                      s(:array,
                        s(:true),
                        s(:send, nil, :params,
                          s(:lvar, :child),
                          s(:false)))),
                    s(:when,
                      s(:str, "fault"),
                      s(:array,
                        s(:false),
                        s(:send, nil, :fault,
                          s(:lvar, :child)))),
                    s(:send, nil, :raise,
                      s(:str, "unexpected error"))))),
              s(:def, :methodName,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "methodName")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node)),
                  s(:send, nil, :text,
                    s(:send,
                      s(:lvar, :node), :firstChild)))),
              s(:def, :params,
                s(:args,
                  s(:arg, :node),
                  s(:optarg, :call,
                    s(:true))),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "params")),
                  s(:if,
                    s(:lvar, :call),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :childNodes), :to_a), :collect),
                      s(:args,
                        s(:arg, :n)),
                      s(:send, nil, :param,
                        s(:lvar, :n))),
                    s(:begin,
                      s(:send, nil, :hasOnlyOneChild,
                        s(:lvar, :node)),
                      s(:send, nil, :param,
                        s(:send,
                          s(:lvar, :node), :firstChild)))))),
              s(:def, :fault,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "fault")),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node),
                    s(:str, "value")),
                  s(:lvasgn, :f,
                    s(:send, nil, :value,
                      s(:send,
                        s(:lvar, :node), :firstChild))),
                  s(:send,
                    s(:const, nil, :Convert), :fault,
                    s(:lvar, :f)))),
              s(:def, :text,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send, nil, :_nodeType,
                        s(:lvar, :node)), :==,
                      s(:sym, :TEXT))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :hasChildNodes), :==,
                      s(:false))),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :nodeValue), :!=,
                      s(:nil))),
                  s(:send,
                    s(:send,
                      s(:lvar, :node), :nodeValue), :to_s))),
              s(:def, :struct,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "struct")),
                  s(:lvasgn, :hash,
                    s(:hash)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :childNodes), :to_a), :each),
                    s(:args,
                      s(:arg, :me)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :n),
                          s(:lvasgn, :v)),
                        s(:send, nil, :member,
                          s(:lvar, :me))),
                      s(:send,
                        s(:lvar, :hash), :[]=,
                        s(:lvar, :n),
                        s(:lvar, :v)))),
                  s(:send,
                    s(:const, nil, :Convert), :struct,
                    s(:lvar, :hash)))),
              s(:def, :value,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "value")),
                  s(:lvasgn, :nodes,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :node), :childNodes), :to_a), :size)),
                  s(:if,
                    s(:send,
                      s(:lvar, :nodes), :==,
                      s(:int, 0)),
                    s(:return,
                      s(:str, "")),
                    s(:if,
                      s(:send,
                        s(:lvar, :nodes), :>,
                        s(:int, 1)),
                      s(:send, nil, :raise,
                        s(:str, "wrong xml-rpc (size)")), nil)),
                  s(:lvasgn, :child,
                    s(:send,
                      s(:lvar, :node), :firstChild)),
                  s(:case,
                    s(:send, nil, :_nodeType,
                      s(:lvar, :child)),
                    s(:when,
                      s(:sym, :TEXT),
                      s(:send, nil, :text_zero_one,
                        s(:lvar, :node))),
                    s(:when,
                      s(:sym, :ELEMENT),
                      s(:case,
                        s(:send,
                          s(:lvar, :child), :nodeName),
                        s(:when,
                          s(:str, "i4"),
                          s(:str, "i8"),
                          s(:str, "int"),
                          s(:send, nil, :integer,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "boolean"),
                          s(:send, nil, :boolean,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "string"),
                          s(:send, nil, :string,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "double"),
                          s(:send, nil, :double,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "dateTime.iso8601"),
                          s(:send, nil, :dateTime,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "base64"),
                          s(:send, nil, :base64,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "struct"),
                          s(:send, nil, :struct,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "array"),
                          s(:send, nil, :array,
                            s(:lvar, :child))),
                        s(:when,
                          s(:str, "nil"),
                          s(:if,
                            s(:const,
                              s(:const, nil, :Config), :ENABLE_NIL_PARSER),
                            s(:send, nil, :v_nil,
                              s(:lvar, :child)),
                            s(:send, nil, :raise,
                              s(:str, "wrong/unknown XML-RPC type 'nil'")))),
                        s(:send, nil, :raise,
                          s(:str, "wrong/unknown XML-RPC type")))),
                    s(:send, nil, :raise,
                      s(:str, "wrong type of node"))))),
              s(:def, :methodCall,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :nodeMustBe,
                    s(:lvar, :node),
                    s(:str, "methodCall")),
                  s(:send, nil, :assert,
                    s(:send,
                      s(:begin,
                        s(:irange,
                          s(:int, 1),
                          s(:int, 2))), :include?,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :childNodes), :to_a), :size))),
                  s(:lvasgn, :name,
                    s(:send, nil, :methodName,
                      s(:send,
                        s(:lvar, :node), :[],
                        s(:int, 0)))),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :node), :childNodes), :to_a), :size), :==,
                      s(:int, 2)),
                    s(:lvasgn, :pa,
                      s(:send, nil, :params,
                        s(:send,
                          s(:lvar, :node), :[],
                          s(:int, 1)))),
                    s(:lvasgn, :pa,
                      s(:array))),
                  s(:array,
                    s(:lvar, :name),
                    s(:lvar, :pa)))))),
          s(:class,
            s(:const, nil, :AbstractStreamParser), nil,
            s(:begin,
              s(:def, :parseMethodResponse,
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:lvasgn, :parser,
                    s(:send,
                      s(:ivar, :@parser_class), :new)),
                  s(:send,
                    s(:lvar, :parser), :parse,
                    s(:lvar, :str)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :parser), :method_name), :!=,
                      s(:nil)),
                    s(:send, nil, :raise,
                      s(:str, "No valid method response!")), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :parser), :fault), :!=,
                      s(:nil)),
                    s(:array,
                      s(:false),
                      s(:send,
                        s(:lvar, :parser), :fault)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :parser), :params), :size), :==,
                          s(:int, 0)),
                        s(:send, nil, :raise,
                          s(:str, "Missing return value!")), nil),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :parser), :params), :size), :>,
                          s(:int, 1)),
                        s(:send, nil, :raise,
                          s(:str, "Too many return values. Only one allowed!")), nil),
                      s(:array,
                        s(:true),
                        s(:send,
                          s(:send,
                            s(:lvar, :parser), :params), :[],
                          s(:int, 0))))))),
              s(:def, :parseMethodCall,
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:lvasgn, :parser,
                    s(:send,
                      s(:ivar, :@parser_class), :new)),
                  s(:send,
                    s(:lvar, :parser), :parse,
                    s(:lvar, :str)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :parser), :method_name), :nil?),
                    s(:send, nil, :raise,
                      s(:str, "No valid method call - missing method name!")), nil),
                  s(:array,
                    s(:send,
                      s(:lvar, :parser), :method_name),
                    s(:send,
                      s(:lvar, :parser), :params)))))),
          s(:module,
            s(:const, nil, :StreamParserMixin),
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :params)),
              s(:send, nil, :attr_reader,
                s(:sym, :method_name)),
              s(:send, nil, :attr_reader,
                s(:sym, :fault)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :a)),
                s(:begin,
                  s(:super,
                    s(:splat,
                      s(:lvar, :a))),
                  s(:ivasgn, :@params,
                    s(:array)),
                  s(:ivasgn, :@values,
                    s(:array)),
                  s(:ivasgn, :@val_stack,
                    s(:array)),
                  s(:ivasgn, :@names,
                    s(:array)),
                  s(:ivasgn, :@name,
                    s(:array)),
                  s(:ivasgn, :@structs,
                    s(:array)),
                  s(:ivasgn, :@struct,
                    s(:hash)),
                  s(:ivasgn, :@method_name,
                    s(:nil)),
                  s(:ivasgn, :@fault,
                    s(:nil)),
                  s(:ivasgn, :@data,
                    s(:nil)))),
              s(:def, :startElement,
                s(:args,
                  s(:arg, :name),
                  s(:optarg, :attrs,
                    s(:array))),
                s(:begin,
                  s(:ivasgn, :@data,
                    s(:nil)),
                  s(:case,
                    s(:lvar, :name),
                    s(:when,
                      s(:str, "value"),
                      s(:ivasgn, :@value,
                        s(:nil))),
                    s(:when,
                      s(:str, "nil"),
                      s(:begin,
                        s(:if,
                          s(:const,
                            s(:const, nil, :Config), :ENABLE_NIL_PARSER), nil,
                          s(:send, nil, :raise,
                            s(:str, "wrong/unknown XML-RPC type 'nil'"))),
                        s(:ivasgn, :@value,
                          s(:sym, :nil)))),
                    s(:when,
                      s(:str, "array"),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@val_stack), :<<,
                          s(:ivar, :@values)),
                        s(:ivasgn, :@values,
                          s(:array)))),
                    s(:when,
                      s(:str, "struct"),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@names), :<<,
                          s(:ivar, :@name)),
                        s(:ivasgn, :@name,
                          s(:array)),
                        s(:send,
                          s(:ivar, :@structs), :<<,
                          s(:ivar, :@struct)),
                        s(:ivasgn, :@struct,
                          s(:hash)))), nil))),
              s(:def, :endElement,
                s(:args,
                  s(:arg, :name)),
                s(:begin,
                  s(:or_asgn,
                    s(:ivasgn, :@data),
                    s(:str, "")),
                  s(:case,
                    s(:lvar, :name),
                    s(:when,
                      s(:str, "string"),
                      s(:ivasgn, :@value,
                        s(:ivar, :@data))),
                    s(:when,
                      s(:str, "i4"),
                      s(:str, "i8"),
                      s(:str, "int"),
                      s(:ivasgn, :@value,
                        s(:send,
                          s(:const, nil, :Convert), :int,
                          s(:ivar, :@data)))),
                    s(:when,
                      s(:str, "boolean"),
                      s(:ivasgn, :@value,
                        s(:send,
                          s(:const, nil, :Convert), :boolean,
                          s(:ivar, :@data)))),
                    s(:when,
                      s(:str, "double"),
                      s(:ivasgn, :@value,
                        s(:send,
                          s(:const, nil, :Convert), :double,
                          s(:ivar, :@data)))),
                    s(:when,
                      s(:str, "dateTime.iso8601"),
                      s(:ivasgn, :@value,
                        s(:send,
                          s(:const, nil, :Convert), :dateTime,
                          s(:ivar, :@data)))),
                    s(:when,
                      s(:str, "base64"),
                      s(:ivasgn, :@value,
                        s(:send,
                          s(:const, nil, :Convert), :base64,
                          s(:ivar, :@data)))),
                    s(:when,
                      s(:str, "value"),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:ivar, :@value), :nil?),
                          s(:ivasgn, :@value,
                            s(:ivar, :@data)), nil),
                        s(:send,
                          s(:ivar, :@values), :<<,
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:ivar, :@value), :==,
                                s(:sym, :nil)),
                              s(:nil),
                              s(:ivar, :@value)))))),
                    s(:when,
                      s(:str, "array"),
                      s(:begin,
                        s(:ivasgn, :@value,
                          s(:ivar, :@values)),
                        s(:ivasgn, :@values,
                          s(:send,
                            s(:ivar, :@val_stack), :pop)))),
                    s(:when,
                      s(:str, "struct"),
                      s(:begin,
                        s(:ivasgn, :@value,
                          s(:send,
                            s(:const, nil, :Convert), :struct,
                            s(:ivar, :@struct))),
                        s(:ivasgn, :@name,
                          s(:send,
                            s(:ivar, :@names), :pop)),
                        s(:ivasgn, :@struct,
                          s(:send,
                            s(:ivar, :@structs), :pop)))),
                    s(:when,
                      s(:str, "name"),
                      s(:send,
                        s(:ivar, :@name), :[]=,
                        s(:int, 0),
                        s(:ivar, :@data))),
                    s(:when,
                      s(:str, "member"),
                      s(:send,
                        s(:ivar, :@struct), :[]=,
                        s(:send,
                          s(:ivar, :@name), :[],
                          s(:int, 0)),
                        s(:send,
                          s(:ivar, :@values), :pop))),
                    s(:when,
                      s(:str, "param"),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@params), :<<,
                          s(:send,
                            s(:ivar, :@values), :[],
                            s(:int, 0))),
                        s(:ivasgn, :@values,
                          s(:array)))),
                    s(:when,
                      s(:str, "fault"),
                      s(:ivasgn, :@fault,
                        s(:send,
                          s(:const, nil, :Convert), :fault,
                          s(:send,
                            s(:ivar, :@values), :[],
                            s(:int, 0))))),
                    s(:when,
                      s(:str, "methodName"),
                      s(:ivasgn, :@method_name,
                        s(:ivar, :@data))), nil),
                  s(:ivasgn, :@data,
                    s(:nil)))),
              s(:def, :character,
                s(:args,
                  s(:arg, :data)),
                s(:if,
                  s(:ivar, :@data),
                  s(:send,
                    s(:ivar, :@data), :<<,
                    s(:lvar, :data)),
                  s(:ivasgn, :@data,
                    s(:lvar, :data)))))),
          s(:class,
            s(:const, nil, :XMLStreamParser),
            s(:const, nil, :AbstractStreamParser),
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "xmlparser")),
                s(:ivasgn, :@parser_class,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Class), :new,
                      s(:const,
                        s(:cbase), :XMLParser)),
                    s(:args),
                    s(:send, nil, :include,
                      s(:const, nil, :StreamParserMixin))))))),
          s(:class,
            s(:const, nil, :NQXMLStreamParser),
            s(:const, nil, :AbstractStreamParser),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "nqxml/streamingparser")),
                  s(:ivasgn, :@parser_class,
                    s(:const, nil, :XMLRPCParser)))),
              s(:class,
                s(:const, nil, :XMLRPCParser), nil,
                s(:begin,
                  s(:send, nil, :include,
                    s(:const, nil, :StreamParserMixin)),
                  s(:def, :parse,
                    s(:args,
                      s(:arg, :str)),
                    s(:begin,
                      s(:lvasgn, :parser,
                        s(:send,
                          s(:const,
                            s(:const, nil, :NQXML), :StreamingParser), :new,
                          s(:lvar, :str))),
                      s(:block,
                        s(:send,
                          s(:lvar, :parser), :each),
                        s(:args,
                          s(:arg, :ele)),
                        s(:case,
                          s(:lvar, :ele),
                          s(:when,
                            s(:const,
                              s(:const, nil, :NQXML), :Text),
                            s(:ivasgn, :@data,
                              s(:send,
                                s(:lvar, :ele), :text))),
                          s(:when,
                            s(:const,
                              s(:const, nil, :NQXML), :Tag),
                            s(:if,
                              s(:send,
                                s(:lvar, :ele), :isTagEnd),
                              s(:send, nil, :endElement,
                                s(:send,
                                  s(:lvar, :ele), :name)),
                              s(:send, nil, :startElement,
                                s(:send,
                                  s(:lvar, :ele), :name),
                                s(:send,
                                  s(:lvar, :ele), :attrs)))), nil)))))))),
          s(:class,
            s(:const, nil, :XMLTreeParser),
            s(:const, nil, :AbstractTreeParser),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "xmltreebuilder")),
                  s(:if,
                    s(:defined?,
                      s(:const,
                        s(:const,
                          s(:const, nil, :XML), :DOM), :Builder)),
                    s(:begin,
                      s(:if,
                        s(:defined?,
                          s(:const,
                            s(:const,
                              s(:const,
                                s(:const, nil, :XML), :DOM), :Node), :DOCUMENT)),
                        s(:return), nil),
                      s(:lvasgn, :klass,
                        s(:const,
                          s(:const,
                            s(:const, nil, :XML), :DOM), :Node)),
                      s(:send,
                        s(:lvar, :klass), :const_set,
                        s(:sym, :DOCUMENT),
                        s(:const,
                          s(:lvar, :klass), :DOCUMENT_NODE)),
                      s(:send,
                        s(:lvar, :klass), :const_set,
                        s(:sym, :TEXT),
                        s(:const,
                          s(:lvar, :klass), :TEXT_NODE)),
                      s(:send,
                        s(:lvar, :klass), :const_set,
                        s(:sym, :COMMENT),
                        s(:const,
                          s(:lvar, :klass), :COMMENT_NODE)),
                      s(:send,
                        s(:lvar, :klass), :const_set,
                        s(:sym, :ELEMENT),
                        s(:const,
                          s(:lvar, :klass), :ELEMENT_NODE))), nil))),
              s(:send, nil, :private),
              s(:def, :_nodeType,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:lvasgn, :tp,
                    s(:send,
                      s(:lvar, :node), :nodeType)),
                  s(:if,
                    s(:send,
                      s(:lvar, :tp), :==,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :XML), :SimpleTree), :Node), :TEXT)),
                    s(:sym, :TEXT),
                    s(:if,
                      s(:send,
                        s(:lvar, :tp), :==,
                        s(:const,
                          s(:const,
                            s(:const,
                              s(:const, nil, :XML), :SimpleTree), :Node), :COMMENT)),
                      s(:sym, :COMMENT),
                      s(:if,
                        s(:send,
                          s(:lvar, :tp), :==,
                          s(:const,
                            s(:const,
                              s(:const,
                                s(:const, nil, :XML), :SimpleTree), :Node), :ELEMENT)),
                        s(:sym, :ELEMENT),
                        s(:sym, :ELSE)))))),
              s(:def, :methodResponse_document,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :nodeType), :==,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :XML), :SimpleTree), :Node), :DOCUMENT))),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node),
                    s(:str, "methodResponse")),
                  s(:send, nil, :methodResponse,
                    s(:send,
                      s(:lvar, :node), :firstChild)))),
              s(:def, :methodCall_document,
                s(:args,
                  s(:arg, :node)),
                s(:begin,
                  s(:send, nil, :assert,
                    s(:send,
                      s(:send,
                        s(:lvar, :node), :nodeType), :==,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:const, nil, :XML), :SimpleTree), :Node), :DOCUMENT))),
                  s(:send, nil, :hasOnlyOneChild,
                    s(:lvar, :node),
                    s(:str, "methodCall")),
                  s(:send, nil, :methodCall,
                    s(:send,
                      s(:lvar, :node), :firstChild)))),
              s(:def, :createCleanedTree,
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:lvasgn, :doc,
                    s(:send,
                      s(:send,
                        s(:const,
                          s(:const, nil, :XML), :SimpleTreeBuilder), :new), :parse,
                      s(:lvar, :str))),
                  s(:send,
                    s(:send,
                      s(:lvar, :doc), :documentElement), :normalize),
                  s(:send, nil, :removeWhitespacesAndComments,
                    s(:lvar, :doc)),
                  s(:lvar, :doc))))),
          s(:class,
            s(:const, nil, :NQXMLTreeParser),
            s(:const, nil, :AbstractTreeParser),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:send, nil, :require,
                  s(:str, "nqxml/treeparser"))),
              s(:send, nil, :private),
              s(:def, :_nodeType,
                s(:args,
                  s(:arg, :node)),
                s(:send,
                  s(:lvar, :node), :nodeType)),
              s(:def, :methodResponse_document,
                s(:args,
                  s(:arg, :node)),
                s(:send, nil, :methodResponse,
                  s(:lvar, :node))),
              s(:def, :methodCall_document,
                s(:args,
                  s(:arg, :node)),
                s(:send, nil, :methodCall,
                  s(:lvar, :node))),
              s(:def, :createCleanedTree,
                s(:args,
                  s(:arg, :str)),
                s(:begin,
                  s(:lvasgn, :doc,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:cbase), :NQXML), :TreeParser), :new,
                          s(:lvar, :str)), :document), :rootNode)),
                  s(:send, nil, :removeWhitespacesAndComments,
                    s(:lvar, :doc)),
                  s(:lvar, :doc))))),
          s(:class,
            s(:const, nil, :REXMLStreamParser),
            s(:const, nil, :AbstractStreamParser),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "rexml/document")),
                  s(:ivasgn, :@parser_class,
                    s(:const, nil, :StreamListener)))),
              s(:class,
                s(:const, nil, :StreamListener), nil,
                s(:begin,
                  s(:send, nil, :include,
                    s(:const, nil, :StreamParserMixin)),
                  s(:alias,
                    s(:sym, :tag_start),
                    s(:sym, :startElement)),
                  s(:alias,
                    s(:sym, :tag_end),
                    s(:sym, :endElement)),
                  s(:alias,
                    s(:sym, :text),
                    s(:sym, :character)),
                  s(:alias,
                    s(:sym, :cdata),
                    s(:sym, :character)),
                  s(:def, :method_missing,
                    s(:args,
                      s(:restarg, :a)), nil),
                  s(:def, :parse,
                    s(:args,
                      s(:arg, :str)),
                    s(:send,
                      s(:const,
                        s(:const, nil, :REXML), :Document), :parse_stream,
                      s(:lvar, :str),
                      s(:self))))))),
          s(:class,
            s(:const, nil, :XMLScanStreamParser),
            s(:const, nil, :AbstractStreamParser),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "xmlscan/parser")),
                  s(:ivasgn, :@parser_class,
                    s(:const, nil, :XMLScanParser)))),
              s(:class,
                s(:const, nil, :XMLScanParser), nil,
                s(:begin,
                  s(:send, nil, :include,
                    s(:const, nil, :StreamParserMixin)),
                  s(:casgn, nil, :Entities,
                    s(:hash,
                      s(:pair,
                        s(:str, "lt"),
                        s(:str, "<")),
                      s(:pair,
                        s(:str, "gt"),
                        s(:str, ">")),
                      s(:pair,
                        s(:str, "amp"),
                        s(:str, "&")),
                      s(:pair,
                        s(:str, "quot"),
                        s(:str, "\"")),
                      s(:pair,
                        s(:str, "apos"),
                        s(:str, "'")))),
                  s(:def, :parse,
                    s(:args,
                      s(:arg, :str)),
                    s(:begin,
                      s(:lvasgn, :parser,
                        s(:send,
                          s(:const,
                            s(:const, nil, :XMLScan), :XMLParser), :new,
                          s(:self))),
                      s(:send,
                        s(:lvar, :parser), :parse,
                        s(:lvar, :str)))),
                  s(:alias,
                    s(:sym, :on_stag),
                    s(:sym, :startElement)),
                  s(:alias,
                    s(:sym, :on_etag),
                    s(:sym, :endElement)),
                  s(:def, :on_stag_end,
                    s(:args,
                      s(:arg, :name)), nil),
                  s(:def, :on_stag_end_empty,
                    s(:args,
                      s(:arg, :name)),
                    s(:begin,
                      s(:send, nil, :startElement,
                        s(:lvar, :name)),
                      s(:send, nil, :endElement,
                        s(:lvar, :name)))),
                  s(:def, :on_chardata,
                    s(:args,
                      s(:arg, :str)),
                    s(:send, nil, :character,
                      s(:lvar, :str))),
                  s(:def, :on_cdata,
                    s(:args,
                      s(:arg, :str)),
                    s(:send, nil, :character,
                      s(:lvar, :str))),
                  s(:def, :on_entityref,
                    s(:args,
                      s(:arg, :ent)),
                    s(:begin,
                      s(:lvasgn, :str,
                        s(:send,
                          s(:const, nil, :Entities), :[],
                          s(:lvar, :ent))),
                      s(:if,
                        s(:lvar, :str),
                        s(:send, nil, :character,
                          s(:lvar, :str)),
                        s(:send, nil, :raise,
                          s(:str, "unknown entity"))))),
                  s(:def, :on_charref,
                    s(:args,
                      s(:arg, :code)),
                    s(:send, nil, :character,
                      s(:send,
                        s(:lvar, :code), :chr))),
                  s(:def, :on_charref_hex,
                    s(:args,
                      s(:arg, :code)),
                    s(:send, nil, :character,
                      s(:send,
                        s(:lvar, :code), :chr))),
                  s(:def, :method_missing,
                    s(:args,
                      s(:restarg, :a)), nil))))),
          s(:class,
            s(:const, nil, :LibXMLStreamParser),
            s(:const, nil, :AbstractStreamParser),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "libxml")),
                  s(:ivasgn, :@parser_class,
                    s(:const, nil, :LibXMLStreamListener)))),
              s(:class,
                s(:const, nil, :LibXMLStreamListener), nil,
                s(:begin,
                  s(:send, nil, :include,
                    s(:const, nil, :StreamParserMixin)),
                  s(:def, :on_start_element_ns,
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :attributes),
                      s(:arg, :prefix),
                      s(:arg, :uri),
                      s(:arg, :namespaces)),
                    s(:send, nil, :startElement,
                      s(:lvar, :name))),
                  s(:def, :on_end_element_ns,
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :prefix),
                      s(:arg, :uri)),
                    s(:send, nil, :endElement,
                      s(:lvar, :name))),
                  s(:alias,
                    s(:sym, :on_characters),
                    s(:sym, :character)),
                  s(:alias,
                    s(:sym, :on_cdata_block),
                    s(:sym, :character)),
                  s(:def, :method_missing,
                    s(:args,
                      s(:restarg, :a)), nil),
                  s(:def, :parse,
                    s(:args,
                      s(:arg, :str)),
                    s(:begin,
                      s(:lvasgn, :parser,
                        s(:send,
                          s(:const,
                            s(:const,
                              s(:const, nil, :LibXML), :XML), :SaxParser), :string,
                          s(:lvar, :str))),
                      s(:send,
                        s(:lvar, :parser), :callbacks=,
                        s(:self)),
                      s(:send,
                        s(:lvar, :parser), :parse))))))),
          s(:casgn, nil, :XMLParser,
            s(:const, nil, :XMLTreeParser)),
          s(:casgn, nil, :NQXMLParser,
            s(:const, nil, :NQXMLTreeParser)),
          s(:casgn, nil, :Classes,
            s(:array,
              s(:const, nil, :XMLStreamParser),
              s(:const, nil, :XMLTreeParser),
              s(:const, nil, :NQXMLStreamParser),
              s(:const, nil, :NQXMLTreeParser),
              s(:const, nil, :REXMLStreamParser),
              s(:const, nil, :XMLScanStreamParser),
              s(:const, nil, :LibXMLStreamParser))),
          s(:defs,
            s(:self), :each_installed_parser,
            s(:args),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :XMLRPC), :XMLParser), :Classes), :each),
              s(:args,
                s(:arg, :klass)),
              s(:kwbegin,
                s(:rescue,
                  s(:yield,
                    s(:send,
                      s(:lvar, :klass), :new)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :LoadError)), nil, nil), nil)))))))))
