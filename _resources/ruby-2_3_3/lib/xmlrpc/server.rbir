s(:begin,
  s(:send, nil, :require,
    s(:str, "xmlrpc/parser")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/create")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/config")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/utils")),
  s(:module,
    s(:const, nil, :XMLRPC),
    s(:begin,
      s(:class,
        s(:const, nil, :BasicServer), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :ParserWriterChooseMixin)),
          s(:send, nil, :include,
            s(:const, nil, :ParseContentType)),
          s(:casgn, nil, :ERR_METHOD_MISSING,
            s(:int, 1)),
          s(:casgn, nil, :ERR_UNCAUGHT_EXCEPTION,
            s(:int, 2)),
          s(:casgn, nil, :ERR_MC_WRONG_PARAM,
            s(:int, 3)),
          s(:casgn, nil, :ERR_MC_MISSING_PARAMS,
            s(:int, 4)),
          s(:casgn, nil, :ERR_MC_MISSING_METHNAME,
            s(:int, 5)),
          s(:casgn, nil, :ERR_MC_RECURSIVE_CALL,
            s(:int, 6)),
          s(:casgn, nil, :ERR_MC_WRONG_PARAM_PARAMS,
            s(:int, 7)),
          s(:casgn, nil, :ERR_MC_EXPECTED_STRUCT,
            s(:int, 8)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :class_delim,
                s(:str, "."))),
            s(:begin,
              s(:ivasgn, :@handler,
                s(:array)),
              s(:ivasgn, :@default_handler,
                s(:nil)),
              s(:ivasgn, :@service_hook,
                s(:nil)),
              s(:ivasgn, :@class_delim,
                s(:lvar, :class_delim)),
              s(:ivasgn, :@create,
                s(:nil)),
              s(:ivasgn, :@parser,
                s(:nil)),
              s(:if,
                s(:const,
                  s(:const, nil, :Config), :ENABLE_MULTICALL),
                s(:send, nil, :add_multicall), nil),
              s(:if,
                s(:const,
                  s(:const, nil, :Config), :ENABLE_INTROSPECTION),
                s(:send, nil, :add_introspection), nil))),
          s(:def, :add_handler,
            s(:args,
              s(:arg, :prefix),
              s(:optarg, :obj_or_signature,
                s(:nil)),
              s(:optarg, :help,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?),
                s(:send,
                  s(:ivar, :@handler), :<<,
                  s(:array,
                    s(:lvar, :prefix),
                    s(:lvar, :block),
                    s(:lvar, :obj_or_signature),
                    s(:lvar, :help))),
                s(:if,
                  s(:send,
                    s(:lvar, :prefix), :kind_of?,
                    s(:const, nil, :String)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :obj_or_signature), :nil?),
                      s(:send, nil, :raise,
                        s(:const, nil, :ArgumentError),
                        s(:str, "Expected non-nil value")), nil),
                    s(:send,
                      s(:ivar, :@handler), :<<,
                      s(:array,
                        s(:send,
                          s(:lvar, :prefix), :+,
                          s(:ivar, :@class_delim)),
                        s(:lvar, :obj_or_signature)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :prefix), :kind_of?,
                      s(:const,
                        s(:const,
                          s(:const, nil, :XMLRPC), :Service), :BasicInterface)),
                    s(:op_asgn,
                      s(:ivasgn, :@handler), :+,
                      s(:send,
                        s(:lvar, :prefix), :get_methods,
                        s(:lvar, :obj_or_signature),
                        s(:ivar, :@class_delim))),
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:str, "Wrong type for parameter 'prefix'"))))),
              s(:self))),
          s(:def, :get_service_hook,
            s(:args),
            s(:ivar, :@service_hook)),
          s(:def, :set_service_hook,
            s(:args,
              s(:blockarg, :handler)),
            s(:begin,
              s(:ivasgn, :@service_hook,
                s(:lvar, :handler)),
              s(:self))),
          s(:def, :get_default_handler,
            s(:args),
            s(:ivar, :@default_handler)),
          s(:def, :set_default_handler,
            s(:args,
              s(:blockarg, :handler)),
            s(:begin,
              s(:ivasgn, :@default_handler,
                s(:lvar, :handler)),
              s(:self))),
          s(:def, :add_multicall,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :add_handler,
                  s(:str, "system.multicall"),
                  s(:array,
                    s(:str, "array"),
                    s(:str, "array")),
                  s(:str, "Multicall Extension")),
                s(:args,
                  s(:arg, :arrStructs)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :arrStructs), :is_a?,
                      s(:const, nil, :Array)), nil,
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const,
                          s(:const, nil, :XMLRPC), :FaultException), :new,
                        s(:const, nil, :ERR_MC_WRONG_PARAM),
                        s(:str, "system.multicall expects an array")))),
                  s(:block,
                    s(:send,
                      s(:lvar, :arrStructs), :collect),
                    s(:args,
                      s(:arg, :call)),
                    s(:if,
                      s(:send,
                        s(:lvar, :call), :is_a?,
                        s(:const, nil, :Hash)),
                      s(:begin,
                        s(:lvasgn, :methodName,
                          s(:send,
                            s(:lvar, :call), :[],
                            s(:str, "methodName"))),
                        s(:lvasgn, :params,
                          s(:send,
                            s(:lvar, :call), :[],
                            s(:str, "params"))),
                        s(:if,
                          s(:send,
                            s(:lvar, :params), :nil?),
                          s(:send, nil, :multicall_fault,
                            s(:const, nil, :ERR_MC_MISSING_PARAMS),
                            s(:str, "Missing params")),
                          s(:if,
                            s(:send,
                              s(:lvar, :methodName), :nil?),
                            s(:send, nil, :multicall_fault,
                              s(:const, nil, :ERR_MC_MISSING_METHNAME),
                              s(:str, "Missing methodName")),
                            s(:if,
                              s(:send,
                                s(:lvar, :methodName), :==,
                                s(:str, "system.multicall")),
                              s(:send, nil, :multicall_fault,
                                s(:const, nil, :ERR_MC_RECURSIVE_CALL),
                                s(:str, "Recursive system.multicall forbidden")),
                              s(:if,
                                s(:send,
                                  s(:lvar, :params), :is_a?,
                                  s(:const, nil, :Array)),
                                s(:begin,
                                  s(:masgn,
                                    s(:mlhs,
                                      s(:lvasgn, :ok),
                                      s(:lvasgn, :val)),
                                    s(:send, nil, :call_method,
                                      s(:lvar, :methodName),
                                      s(:splat,
                                        s(:lvar, :params)))),
                                  s(:if,
                                    s(:lvar, :ok),
                                    s(:array,
                                      s(:lvar, :val)),
                                    s(:send, nil, :multicall_fault,
                                      s(:send,
                                        s(:lvar, :val), :faultCode),
                                      s(:send,
                                        s(:lvar, :val), :faultString)))),
                                s(:send, nil, :multicall_fault,
                                  s(:const, nil, :ERR_MC_WRONG_PARAM_PARAMS),
                                  s(:str, "Parameter params have to be an Array"))))))),
                      s(:send, nil, :multicall_fault,
                        s(:const, nil, :ERR_MC_EXPECTED_STRUCT),
                        s(:str, "system.multicall expected struct")))))),
              s(:self))),
          s(:def, :add_introspection,
            s(:args),
            s(:begin,
              s(:block,
                s(:send, nil, :add_handler,
                  s(:str, "system.listMethods"),
                  s(:array,
                    s(:str, "array")),
                  s(:str, "List methods available on this XML-RPC server")),
                s(:args),
                s(:begin,
                  s(:lvasgn, :methods,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:ivar, :@handler), :each),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :obj)),
                    s(:if,
                      s(:send,
                        s(:lvar, :obj), :kind_of?,
                        s(:const, nil, :Proc)),
                      s(:send,
                        s(:lvar, :methods), :<<,
                        s(:lvar, :name)),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :obj), :class), :public_instance_methods,
                            s(:false)), :each),
                        s(:args,
                          s(:arg, :meth)),
                        s(:send,
                          s(:lvar, :methods), :<<,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :name)),
                            s(:begin,
                              s(:lvar, :meth))))))),
                  s(:lvar, :methods))),
              s(:block,
                s(:send, nil, :add_handler,
                  s(:str, "system.methodSignature"),
                  s(:array,
                    s(:str, "array"),
                    s(:str, "string")),
                  s(:str, "Returns method signature")),
                s(:args,
                  s(:arg, :meth)),
                s(:begin,
                  s(:lvasgn, :sigs,
                    s(:array)),
                  s(:block,
                    s(:send,
                      s(:ivar, :@handler), :each),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :obj),
                      s(:arg, :sig)),
                    s(:if,
                      s(:and,
                        s(:and,
                          s(:send,
                            s(:lvar, :obj), :kind_of?,
                            s(:const, nil, :Proc)),
                          s(:send,
                            s(:lvar, :sig), :!=,
                            s(:nil))),
                        s(:send,
                          s(:lvar, :name), :==,
                          s(:lvar, :meth))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :sig), :[],
                            s(:int, 0)), :kind_of?,
                          s(:const, nil, :Array)),
                        s(:block,
                          s(:send,
                            s(:lvar, :sig), :each),
                          s(:args,
                            s(:arg, :s)),
                          s(:send,
                            s(:lvar, :sigs), :<<,
                            s(:lvar, :s))),
                        s(:send,
                          s(:lvar, :sigs), :<<,
                          s(:lvar, :sig))), nil)),
                  s(:or,
                    s(:send,
                      s(:lvar, :sigs), :uniq!),
                    s(:lvar, :sigs)))),
              s(:block,
                s(:send, nil, :add_handler,
                  s(:str, "system.methodHelp"),
                  s(:array,
                    s(:str, "string"),
                    s(:str, "string")),
                  s(:str, "Returns help on using this method")),
                s(:args,
                  s(:arg, :meth)),
                s(:begin,
                  s(:lvasgn, :help,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:ivar, :@handler), :each),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :obj),
                      s(:arg, :sig),
                      s(:arg, :hlp)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :obj), :kind_of?,
                          s(:const, nil, :Proc)),
                        s(:send,
                          s(:lvar, :name), :==,
                          s(:lvar, :meth))),
                      s(:begin,
                        s(:lvasgn, :help,
                          s(:lvar, :hlp)),
                        s(:break)), nil)),
                  s(:or,
                    s(:lvar, :help),
                    s(:str, "")))),
              s(:self))),
          s(:def, :process,
            s(:args,
              s(:arg, :data)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :method),
                  s(:lvasgn, :params)),
                s(:send,
                  s(:send, nil, :parser), :parseMethodCall,
                  s(:lvar, :data))),
              s(:send, nil, :handle,
                s(:lvar, :method),
                s(:splat,
                  s(:lvar, :params))))),
          s(:send, nil, :private),
          s(:def, :multicall_fault,
            s(:args,
              s(:arg, :nr),
              s(:arg, :str)),
            s(:hash,
              s(:pair,
                s(:str, "faultCode"),
                s(:lvar, :nr)),
              s(:pair,
                s(:str, "faultString"),
                s(:lvar, :str)))),
          s(:def, :dispatch,
            s(:args,
              s(:arg, :methodname),
              s(:restarg, :args)),
            s(:begin,
              s(:for,
                s(:mlhs,
                  s(:lvasgn, :name),
                  s(:lvasgn, :obj)),
                s(:ivar, :@handler),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :obj), :kind_of?,
                      s(:const, nil, :Proc)),
                    s(:if,
                      s(:send,
                        s(:lvar, :methodname), :==,
                        s(:lvar, :name)), nil,
                      s(:next)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :methodname), :=~,
                          s(:regexp,
                            s(:str, "^"),
                            s(:begin,
                              s(:lvar, :name)),
                            s(:str, "(.+)$"),
                            s(:regopt))), nil,
                        s(:next)),
                      s(:if,
                        s(:send,
                          s(:lvar, :obj), :respond_to?,
                          s(:nth_ref, 1)), nil,
                        s(:next)),
                      s(:lvasgn, :obj,
                        s(:send,
                          s(:lvar, :obj), :method,
                          s(:nth_ref, 1))))),
                  s(:if,
                    s(:send, nil, :check_arity,
                      s(:lvar, :obj),
                      s(:send,
                        s(:lvar, :args), :size)),
                    s(:if,
                      s(:send,
                        s(:ivar, :@service_hook), :nil?),
                      s(:return,
                        s(:send,
                          s(:lvar, :obj), :call,
                          s(:splat,
                            s(:lvar, :args)))),
                      s(:return,
                        s(:send,
                          s(:ivar, :@service_hook), :call,
                          s(:lvar, :obj),
                          s(:splat,
                            s(:lvar, :args))))), nil))),
              s(:if,
                s(:send,
                  s(:ivar, :@default_handler), :nil?),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const,
                      s(:const, nil, :XMLRPC), :FaultException), :new,
                    s(:const, nil, :ERR_METHOD_MISSING),
                    s(:dstr,
                      s(:str, "Method "),
                      s(:begin,
                        s(:lvar, :methodname)),
                      s(:str, " missing or wrong number of parameters!")))),
                s(:send,
                  s(:ivar, :@default_handler), :call,
                  s(:lvar, :methodname),
                  s(:splat,
                    s(:lvar, :args)))))),
          s(:def, :check_arity,
            s(:args,
              s(:arg, :obj),
              s(:arg, :n_args)),
            s(:begin,
              s(:lvasgn, :ary,
                s(:send,
                  s(:lvar, :obj), :arity)),
              s(:if,
                s(:send,
                  s(:lvar, :ary), :>=,
                  s(:int, 0)),
                s(:send,
                  s(:lvar, :n_args), :==,
                  s(:lvar, :ary)),
                s(:send,
                  s(:lvar, :n_args), :>=,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :ary), :+,
                        s(:int, 1))), :abs))))),
          s(:def, :call_method,
            s(:args,
              s(:arg, :methodname),
              s(:restarg, :args)),
            s(:kwbegin,
              s(:rescue,
                s(:array,
                  s(:true),
                  s(:send, nil, :dispatch,
                    s(:lvar, :methodname),
                    s(:splat,
                      s(:lvar, :args)))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :XMLRPC), :FaultException)),
                  s(:lvasgn, :e),
                  s(:array,
                    s(:false),
                    s(:lvar, :e))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)),
                  s(:lvasgn, :e),
                  s(:array,
                    s(:false),
                    s(:send,
                      s(:const,
                        s(:const, nil, :XMLRPC), :FaultException), :new,
                      s(:const, nil, :ERR_UNCAUGHT_EXCEPTION),
                      s(:dstr,
                        s(:str, "Uncaught exception "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :message)),
                        s(:str, " in method "),
                        s(:begin,
                          s(:lvar, :methodname)))))), nil))),
          s(:def, :handle,
            s(:args,
              s(:arg, :methodname),
              s(:restarg, :args)),
            s(:send,
              s(:send, nil, :create), :methodResponse,
              s(:splat,
                s(:send, nil, :call_method,
                  s(:lvar, :methodname),
                  s(:splat,
                    s(:lvar, :args)))))))),
      s(:class,
        s(:const, nil, :CGIServer),
        s(:const, nil, :BasicServer),
        s(:begin,
          s(:cvasgn, :@@obj,
            s(:nil)),
          s(:defs,
            s(:const, nil, :CGIServer), :new,
            s(:args,
              s(:restarg, :a)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:cvar, :@@obj), :nil?),
                s(:cvasgn, :@@obj,
                  s(:super,
                    s(:splat,
                      s(:lvar, :a)))), nil),
              s(:cvar, :@@obj))),
          s(:def, :initialize,
            s(:args,
              s(:restarg, :a)),
            s(:super,
              s(:splat,
                s(:lvar, :a)))),
          s(:def, :serve,
            s(:args),
            s(:block,
              s(:send, nil, :catch,
                s(:sym, :exit_serve)),
              s(:args),
              s(:begin,
                s(:lvasgn, :length,
                  s(:send,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "CONTENT_LENGTH")), :to_i)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "REQUEST_METHOD")), :==,
                    s(:str, "POST")), nil,
                  s(:send, nil, :http_error,
                    s(:int, 405),
                    s(:str, "Method Not Allowed"))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send, nil, :parse_content_type,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "CONTENT_TYPE"))), :first), :==,
                    s(:str, "text/xml")), nil,
                  s(:send, nil, :http_error,
                    s(:int, 400),
                    s(:str, "Bad Request"))),
                s(:if,
                  s(:send,
                    s(:lvar, :length), :>,
                    s(:int, 0)), nil,
                  s(:send, nil, :http_error,
                    s(:int, 411),
                    s(:str, "Length Required"))),
                s(:if,
                  s(:send,
                    s(:gvar, :$stdin), :respond_to?,
                    s(:sym, :binmode)),
                  s(:send,
                    s(:gvar, :$stdin), :binmode), nil),
                s(:lvasgn, :data,
                  s(:send,
                    s(:gvar, :$stdin), :read,
                    s(:lvar, :length))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :data), :nil?),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :bytesize), :!=,
                      s(:lvar, :length))),
                  s(:send, nil, :http_error,
                    s(:int, 400),
                    s(:str, "Bad Request")), nil),
                s(:send, nil, :http_write,
                  s(:send, nil, :process,
                    s(:lvar, :data)),
                  s(:hash,
                    s(:pair,
                      s(:str, "Content-type"),
                      s(:str, "text/xml; charset=utf-8"))))))),
          s(:send, nil, :private),
          s(:def, :http_error,
            s(:args,
              s(:arg, :status),
              s(:arg, :message)),
            s(:begin,
              s(:lvasgn, :err,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :status)),
                  s(:str, " "),
                  s(:begin,
                    s(:lvar, :message)))),
              s(:lvasgn, :msg,
                s(:dstr,
                  s(:str, "      <html>\n"),
                  s(:str, "        <head>\n"),
                  s(:str, "          <title>"),
                  s(:begin,
                    s(:lvar, :err)),
                  s(:str, "</title>\n"),
                  s(:str, "        </head>\n"),
                  s(:str, "        <body>\n"),
                  s(:str, "          <h1>"),
                  s(:begin,
                    s(:lvar, :err)),
                  s(:str, "</h1>\n"),
                  s(:str, "          <p>Unexpected error occurred while processing XML-RPC request!</p>\n"),
                  s(:str, "        </body>\n"),
                  s(:str, "      </html>\n"))),
              s(:send, nil, :http_write,
                s(:lvar, :msg),
                s(:hash,
                  s(:pair,
                    s(:str, "Status"),
                    s(:lvar, :err)),
                  s(:pair,
                    s(:str, "Content-type"),
                    s(:str, "text/html")))),
              s(:send, nil, :throw,
                s(:sym, :exit_serve)))),
          s(:def, :http_write,
            s(:args,
              s(:arg, :body),
              s(:arg, :header)),
            s(:begin,
              s(:lvasgn, :h,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :header), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_s), :capitalize),
                  s(:lvar, :value))),
              s(:or_asgn,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:str, "Status")),
                s(:str, "200 OK")),
              s(:or_asgn,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:str, "Content-length")),
                s(:send,
                  s(:send,
                    s(:lvar, :body), :bytesize), :to_s)),
              s(:lvasgn, :str,
                s(:str, "")),
              s(:block,
                s(:send,
                  s(:lvar, :h), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :str), :<<,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :key)),
                    s(:str, ": "),
                    s(:begin,
                      s(:lvar, :value)),
                    s(:str, "\r\n")))),
              s(:send,
                s(:lvar, :str), :<<,
                s(:dstr,
                  s(:str, "\r\n"),
                  s(:begin,
                    s(:lvar, :body)))),
              s(:send, nil, :print,
                s(:lvar, :str)))))),
      s(:class,
        s(:const, nil, :ModRubyServer),
        s(:const, nil, :BasicServer),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:restarg, :a)),
            s(:begin,
              s(:ivasgn, :@ap,
                s(:send,
                  s(:const, nil, :Apache), :request)),
              s(:super,
                s(:splat,
                  s(:lvar, :a))))),
          s(:def, :serve,
            s(:args),
            s(:block,
              s(:send, nil, :catch,
                s(:sym, :exit_serve)),
              s(:args),
              s(:begin,
                s(:lvasgn, :header,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@ap), :headers_in), :each),
                  s(:args,
                    s(:arg, :key),
                    s(:arg, :value)),
                  s(:send,
                    s(:lvar, :header), :[]=,
                    s(:send,
                      s(:lvar, :key), :capitalize),
                    s(:lvar, :value))),
                s(:lvasgn, :length,
                  s(:send,
                    s(:send,
                      s(:lvar, :header), :[],
                      s(:str, "Content-length")), :to_i)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@ap), :request_method), :==,
                    s(:str, "POST")), nil,
                  s(:send, nil, :http_error,
                    s(:int, 405),
                    s(:str, "Method Not Allowed"))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:send, nil, :parse_content_type,
                        s(:send,
                          s(:lvar, :header), :[],
                          s(:str, "Content-type"))), :first), :==,
                    s(:str, "text/xml")), nil,
                  s(:send, nil, :http_error,
                    s(:int, 400),
                    s(:str, "Bad Request"))),
                s(:if,
                  s(:send,
                    s(:lvar, :length), :>,
                    s(:int, 0)), nil,
                  s(:send, nil, :http_error,
                    s(:int, 411),
                    s(:str, "Length Required"))),
                s(:send,
                  s(:ivar, :@ap), :binmode),
                s(:lvasgn, :data,
                  s(:send,
                    s(:ivar, :@ap), :read,
                    s(:lvar, :length))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :data), :nil?),
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :bytesize), :!=,
                      s(:lvar, :length))),
                  s(:send, nil, :http_error,
                    s(:int, 400),
                    s(:str, "Bad Request")), nil),
                s(:send, nil, :http_write,
                  s(:send, nil, :process,
                    s(:lvar, :data)),
                  s(:int, 200),
                  s(:hash,
                    s(:pair,
                      s(:str, "Content-type"),
                      s(:str, "text/xml; charset=utf-8"))))))),
          s(:send, nil, :private),
          s(:def, :http_error,
            s(:args,
              s(:arg, :status),
              s(:arg, :message)),
            s(:begin,
              s(:lvasgn, :err,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :status)),
                  s(:str, " "),
                  s(:begin,
                    s(:lvar, :message)))),
              s(:lvasgn, :msg,
                s(:dstr,
                  s(:str, "      <html>\n"),
                  s(:str, "        <head>\n"),
                  s(:str, "          <title>"),
                  s(:begin,
                    s(:lvar, :err)),
                  s(:str, "</title>\n"),
                  s(:str, "        </head>\n"),
                  s(:str, "        <body>\n"),
                  s(:str, "          <h1>"),
                  s(:begin,
                    s(:lvar, :err)),
                  s(:str, "</h1>\n"),
                  s(:str, "          <p>Unexpected error occurred while processing XML-RPC request!</p>\n"),
                  s(:str, "        </body>\n"),
                  s(:str, "      </html>\n"))),
              s(:send, nil, :http_write,
                s(:lvar, :msg),
                s(:lvar, :status),
                s(:hash,
                  s(:pair,
                    s(:str, "Status"),
                    s(:lvar, :err)),
                  s(:pair,
                    s(:str, "Content-type"),
                    s(:str, "text/html")))),
              s(:send, nil, :throw,
                s(:sym, :exit_serve)))),
          s(:def, :http_write,
            s(:args,
              s(:arg, :body),
              s(:arg, :status),
              s(:arg, :header)),
            s(:begin,
              s(:lvasgn, :h,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :header), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :h), :[]=,
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :to_s), :capitalize),
                  s(:lvar, :value))),
              s(:or_asgn,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:str, "Status")),
                s(:str, "200 OK")),
              s(:or_asgn,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:str, "Content-length")),
                s(:send,
                  s(:send,
                    s(:lvar, :body), :bytesize), :to_s)),
              s(:block,
                s(:send,
                  s(:lvar, :h), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:send,
                  s(:send,
                    s(:ivar, :@ap), :headers_out), :[]=,
                  s(:lvar, :key),
                  s(:lvar, :value))),
              s(:send,
                s(:ivar, :@ap), :content_type=,
                s(:send,
                  s(:lvar, :h), :[],
                  s(:str, "Content-type"))),
              s(:send,
                s(:ivar, :@ap), :status=,
                s(:send,
                  s(:lvar, :status), :to_i)),
              s(:send,
                s(:ivar, :@ap), :send_http_header),
              s(:send,
                s(:ivar, :@ap), :print,
                s(:lvar, :body)))))),
      s(:class,
        s(:const, nil, :WEBrickServlet),
        s(:const, nil, :BasicServer), nil),
      s(:class,
        s(:const, nil, :Server),
        s(:const, nil, :WEBrickServlet),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :port,
                s(:int, 8080)),
              s(:optarg, :host,
                s(:str, "127.0.0.1")),
              s(:optarg, :maxConnections,
                s(:int, 4)),
              s(:optarg, :stdlog,
                s(:gvar, :$stdout)),
              s(:optarg, :audit,
                s(:true)),
              s(:optarg, :debug,
                s(:true)),
              s(:restarg, :a)),
            s(:begin,
              s(:super,
                s(:splat,
                  s(:lvar, :a))),
              s(:send, nil, :require,
                s(:str, "webrick")),
              s(:ivasgn, :@server,
                s(:send,
                  s(:const,
                    s(:const, nil, :WEBrick), :HTTPServer), :new,
                  s(:hash,
                    s(:pair,
                      s(:sym, :Port),
                      s(:lvar, :port)),
                    s(:pair,
                      s(:sym, :BindAddress),
                      s(:lvar, :host)),
                    s(:pair,
                      s(:sym, :MaxClients),
                      s(:lvar, :maxConnections)),
                    s(:pair,
                      s(:sym, :Logger),
                      s(:send,
                        s(:const,
                          s(:const, nil, :WEBrick), :Log), :new,
                        s(:lvar, :stdlog)))))),
              s(:send,
                s(:ivar, :@server), :mount,
                s(:str, "/"),
                s(:self)))),
          s(:def, :serve,
            s(:args),
            s(:begin,
              s(:lvasgn, :signals,
                s(:send,
                  s(:array,
                    s(:str, "INT"),
                    s(:str, "TERM"),
                    s(:str, "HUP")), :&,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Signal), :list), :keys))),
              s(:block,
                s(:send,
                  s(:lvar, :signals), :each),
                s(:args,
                  s(:arg, :signal)),
                s(:block,
                  s(:send, nil, :trap,
                    s(:lvar, :signal)),
                  s(:args),
                  s(:send,
                    s(:ivar, :@server), :shutdown))),
              s(:send,
                s(:ivar, :@server), :start))),
          s(:def, :shutdown,
            s(:args),
            s(:send,
              s(:ivar, :@server), :shutdown)))),
      s(:class,
        s(:const, nil, :WEBrickServlet),
        s(:const, nil, :BasicServer),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:restarg, :a)),
            s(:begin,
              s(:zsuper),
              s(:send, nil, :require,
                s(:str, "webrick/httpstatus")),
              s(:ivasgn, :@valid_ip,
                s(:nil)))),
          s(:def, :require_path_info?,
            s(:args),
            s(:false)),
          s(:def, :get_instance,
            s(:args,
              s(:arg, :config),
              s(:restarg, :options)),
            s(:self)),
          s(:def, :set_valid_ip,
            s(:args,
              s(:restarg, :ip_addr)),
            s(:if,
              s(:and,
                s(:send,
                  s(:send,
                    s(:lvar, :ip_addr), :size), :==,
                  s(:int, 1)),
                s(:send,
                  s(:send,
                    s(:lvar, :ip_addr), :[],
                    s(:int, 0)), :nil?)),
              s(:ivasgn, :@valid_ip,
                s(:nil)),
              s(:ivasgn, :@valid_ip,
                s(:lvar, :ip_addr)))),
          s(:def, :get_valid_ip,
            s(:args),
            s(:ivar, :@valid_ip)),
          s(:def, :service,
            s(:args,
              s(:arg, :request),
              s(:arg, :response)),
            s(:begin,
              s(:if,
                s(:ivar, :@valid_ip),
                s(:if,
                  s(:block,
                    s(:send,
                      s(:ivar, :@valid_ip), :any?),
                    s(:args,
                      s(:arg, :ip)),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :request), :peeraddr), :[],
                        s(:int, 3)), :=~,
                      s(:lvar, :ip))), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const,
                        s(:const, nil, :WEBrick), :HTTPStatus), :Forbidden))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :request), :request_method), :!=,
                  s(:str, "POST")),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :MethodNotAllowed),
                  s(:dstr,
                    s(:str, "unsupported method `"),
                    s(:begin,
                      s(:send,
                        s(:lvar, :request), :request_method)),
                    s(:str, "'."))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send, nil, :parse_content_type,
                      s(:send,
                        s(:lvar, :request), :[],
                        s(:str, "Content-type"))), :first), :!=,
                  s(:str, "text/xml")),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :BadRequest)), nil),
              s(:lvasgn, :length,
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:lvar, :request), :[],
                        s(:str, "Content-length")),
                      s(:int, 0))), :to_i)),
              s(:if,
                s(:send,
                  s(:lvar, :length), :>,
                  s(:int, 0)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :LengthRequired))),
              s(:lvasgn, :data,
                s(:send,
                  s(:lvar, :request), :body)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :data), :nil?),
                  s(:send,
                    s(:send,
                      s(:lvar, :data), :bytesize), :!=,
                    s(:lvar, :length))),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :BadRequest)), nil),
              s(:lvasgn, :resp,
                s(:send, nil, :process,
                  s(:lvar, :data))),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :resp), :nil?),
                  s(:send,
                    s(:send,
                      s(:lvar, :resp), :bytesize), :<=,
                    s(:int, 0))),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :WEBrick), :HTTPStatus), :InternalServerError)), nil),
              s(:send,
                s(:lvar, :response), :status=,
                s(:int, 200)),
              s(:send,
                s(:lvar, :response), :[]=,
                s(:str, "Content-Length"),
                s(:send,
                  s(:lvar, :resp), :bytesize)),
              s(:send,
                s(:lvar, :response), :[]=,
                s(:str, "Content-Type"),
                s(:str, "text/xml; charset=utf-8")),
              s(:send,
                s(:lvar, :response), :body=,
                s(:lvar, :resp)))))))))
