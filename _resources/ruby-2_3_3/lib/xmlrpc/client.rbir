s(:begin,
  s(:send, nil, :require,
    s(:str, "xmlrpc/parser")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/create")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/config")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/utils")),
  s(:send, nil, :require,
    s(:str, "net/http")),
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:module,
    s(:const, nil, :XMLRPC),
    s(:class,
      s(:const, nil, :Client), nil,
      s(:begin,
        s(:casgn, nil, :USER_AGENT,
          s(:dstr,
            s(:str, "XMLRPC::Client (Ruby "),
            s(:begin,
              s(:const, nil, :RUBY_VERSION)),
            s(:str, ")"))),
        s(:send, nil, :include,
          s(:const, nil, :ParserWriterChooseMixin)),
        s(:send, nil, :include,
          s(:const, nil, :ParseContentType)),
        s(:def, :initialize,
          s(:args,
            s(:optarg, :host,
              s(:nil)),
            s(:optarg, :path,
              s(:nil)),
            s(:optarg, :port,
              s(:nil)),
            s(:optarg, :proxy_host,
              s(:nil)),
            s(:optarg, :proxy_port,
              s(:nil)),
            s(:optarg, :user,
              s(:nil)),
            s(:optarg, :password,
              s(:nil)),
            s(:optarg, :use_ssl,
              s(:nil)),
            s(:optarg, :timeout,
              s(:nil))),
          s(:begin,
            s(:ivasgn, :@http_header_extra,
              s(:nil)),
            s(:ivasgn, :@http_last_response,
              s(:nil)),
            s(:ivasgn, :@cookie,
              s(:nil)),
            s(:ivasgn, :@host,
              s(:or,
                s(:lvar, :host),
                s(:str, "localhost"))),
            s(:ivasgn, :@path,
              s(:or,
                s(:lvar, :path),
                s(:str, "/RPC2"))),
            s(:ivasgn, :@proxy_host,
              s(:lvar, :proxy_host)),
            s(:ivasgn, :@proxy_port,
              s(:lvar, :proxy_port)),
            s(:if,
              s(:send,
                s(:ivar, :@proxy_port), :!=,
                s(:nil)),
              s(:or_asgn,
                s(:ivasgn, :@proxy_host),
                s(:str, "localhost")), nil),
            s(:if,
              s(:send,
                s(:ivar, :@proxy_host), :!=,
                s(:nil)),
              s(:or_asgn,
                s(:ivasgn, :@proxy_port),
                s(:int, 8080)), nil),
            s(:ivasgn, :@use_ssl,
              s(:or,
                s(:lvar, :use_ssl),
                s(:false))),
            s(:ivasgn, :@timeout,
              s(:or,
                s(:lvar, :timeout),
                s(:int, 30))),
            s(:if,
              s(:lvar, :use_ssl),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "net/https")),
                s(:ivasgn, :@port,
                  s(:or,
                    s(:lvar, :port),
                    s(:int, 443)))),
              s(:ivasgn, :@port,
                s(:or,
                  s(:lvar, :port),
                  s(:int, 80)))),
            s(:masgn,
              s(:mlhs,
                s(:ivasgn, :@user),
                s(:ivasgn, :@password)),
              s(:array,
                s(:lvar, :user),
                s(:lvar, :password))),
            s(:send, nil, :set_auth),
            s(:if,
              s(:send,
                s(:ivar, :@port), :!=,
                s(:nil)),
              s(:ivasgn, :@port,
                s(:send,
                  s(:ivar, :@port), :to_i)), nil),
            s(:if,
              s(:send,
                s(:ivar, :@proxy_port), :!=,
                s(:nil)),
              s(:ivasgn, :@proxy_port,
                s(:send,
                  s(:ivar, :@proxy_port), :to_i)), nil),
            s(:ivasgn, :@http,
              s(:send, nil, :net_http,
                s(:ivar, :@host),
                s(:ivar, :@port),
                s(:ivar, :@proxy_host),
                s(:ivar, :@proxy_port))),
            s(:if,
              s(:ivar, :@use_ssl),
              s(:send,
                s(:ivar, :@http), :use_ssl=,
                s(:ivar, :@use_ssl)), nil),
            s(:send,
              s(:ivar, :@http), :read_timeout=,
              s(:ivar, :@timeout)),
            s(:send,
              s(:ivar, :@http), :open_timeout=,
              s(:ivar, :@timeout)),
            s(:ivasgn, :@parser,
              s(:nil)),
            s(:ivasgn, :@create,
              s(:nil)))),
        s(:sclass,
          s(:self),
          s(:begin,
            s(:def, :new2,
              s(:args,
                s(:arg, :uri),
                s(:optarg, :proxy,
                  s(:nil)),
                s(:optarg, :timeout,
                  s(:nil))),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :url,
                      s(:send, nil, :URI,
                        s(:lvar, :uri))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :URI), :InvalidURIError)),
                      s(:lvasgn, :e),
                      s(:send, nil, :raise,
                        s(:const, nil, :ArgumentError),
                        s(:send,
                          s(:lvar, :e), :message),
                        s(:send,
                          s(:lvar, :e), :backtrace))), nil)),
                s(:if,
                  s(:send,
                    s(:const,
                      s(:const, nil, :URI), :HTTP), :===,
                    s(:lvar, :url)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:str, "Wrong protocol specified. Only http or https allowed!"))),
                s(:lvasgn, :proto,
                  s(:send,
                    s(:lvar, :url), :scheme)),
                s(:lvasgn, :user,
                  s(:send,
                    s(:lvar, :url), :user)),
                s(:lvasgn, :passwd,
                  s(:send,
                    s(:lvar, :url), :password)),
                s(:lvasgn, :host,
                  s(:send,
                    s(:lvar, :url), :host)),
                s(:lvasgn, :port,
                  s(:send,
                    s(:lvar, :url), :port)),
                s(:lvasgn, :path,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :url), :path), :empty?),
                    s(:nil),
                    s(:send,
                      s(:lvar, :url), :request_uri))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :proxy_host),
                    s(:lvasgn, :proxy_port)),
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:lvar, :proxy),
                        s(:str, ""))), :split,
                    s(:str, ":"))),
                s(:if,
                  s(:lvar, :proxy_port),
                  s(:lvasgn, :proxy_port,
                    s(:send,
                      s(:lvar, :proxy_port), :to_i)), nil),
                s(:send,
                  s(:self), :new,
                  s(:lvar, :host),
                  s(:lvar, :path),
                  s(:lvar, :port),
                  s(:lvar, :proxy_host),
                  s(:lvar, :proxy_port),
                  s(:lvar, :user),
                  s(:lvar, :passwd),
                  s(:begin,
                    s(:send,
                      s(:lvar, :proto), :==,
                      s(:str, "https"))),
                  s(:lvar, :timeout)))),
            s(:alias,
              s(:sym, :new_from_uri),
              s(:sym, :new2)),
            s(:def, :new3,
              s(:args,
                s(:optarg, :hash,
                  s(:hash))),
              s(:begin,
                s(:lvasgn, :h,
                  s(:hash)),
                s(:block,
                  s(:send,
                    s(:lvar, :hash), :each),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v)),
                  s(:send,
                    s(:lvar, :h), :[]=,
                    s(:send,
                      s(:send,
                        s(:lvar, :k), :to_s), :downcase),
                    s(:lvar, :v))),
                s(:send,
                  s(:self), :new,
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "host")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "path")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "port")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "proxy_host")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "proxy_port")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "user")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "password")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "use_ssl")),
                  s(:send,
                    s(:lvar, :h), :[],
                    s(:str, "timeout"))))),
            s(:alias,
              s(:sym, :new_from_hash),
              s(:sym, :new3)))),
        s(:send, nil, :attr_reader,
          s(:sym, :http)),
        s(:send, nil, :attr_accessor,
          s(:sym, :http_header_extra)),
        s(:send, nil, :attr_reader,
          s(:sym, :http_last_response)),
        s(:send, nil, :attr_accessor,
          s(:sym, :cookie)),
        s(:send, nil, :attr_reader,
          s(:sym, :timeout),
          s(:sym, :user),
          s(:sym, :password)),
        s(:def, :timeout=,
          s(:args,
            s(:arg, :new_timeout)),
          s(:begin,
            s(:ivasgn, :@timeout,
              s(:lvar, :new_timeout)),
            s(:send,
              s(:ivar, :@http), :read_timeout=,
              s(:ivar, :@timeout)),
            s(:send,
              s(:ivar, :@http), :open_timeout=,
              s(:ivar, :@timeout)))),
        s(:def, :user=,
          s(:args,
            s(:arg, :new_user)),
          s(:begin,
            s(:ivasgn, :@user,
              s(:lvar, :new_user)),
            s(:send, nil, :set_auth))),
        s(:def, :password=,
          s(:args,
            s(:arg, :new_password)),
          s(:begin,
            s(:ivasgn, :@password,
              s(:lvar, :new_password)),
            s(:send, nil, :set_auth))),
        s(:def, :call,
          s(:args,
            s(:arg, :method),
            s(:restarg, :args)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :param)),
              s(:send, nil, :call2,
                s(:lvar, :method),
                s(:splat,
                  s(:lvar, :args)))),
            s(:if,
              s(:lvar, :ok),
              s(:lvar, :param),
              s(:send, nil, :raise,
                s(:lvar, :param))))),
        s(:def, :call2,
          s(:args,
            s(:arg, :method),
            s(:restarg, :args)),
          s(:begin,
            s(:lvasgn, :request,
              s(:send,
                s(:send, nil, :create), :methodCall,
                s(:lvar, :method),
                s(:splat,
                  s(:lvar, :args)))),
            s(:lvasgn, :data,
              s(:send, nil, :do_rpc,
                s(:lvar, :request),
                s(:false))),
            s(:send,
              s(:send, nil, :parser), :parseMethodResponse,
              s(:lvar, :data)))),
        s(:def, :call_async,
          s(:args,
            s(:arg, :method),
            s(:restarg, :args)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :param)),
              s(:send, nil, :call2_async,
                s(:lvar, :method),
                s(:splat,
                  s(:lvar, :args)))),
            s(:if,
              s(:lvar, :ok),
              s(:lvar, :param),
              s(:send, nil, :raise,
                s(:lvar, :param))))),
        s(:def, :call2_async,
          s(:args,
            s(:arg, :method),
            s(:restarg, :args)),
          s(:begin,
            s(:lvasgn, :request,
              s(:send,
                s(:send, nil, :create), :methodCall,
                s(:lvar, :method),
                s(:splat,
                  s(:lvar, :args)))),
            s(:lvasgn, :data,
              s(:send, nil, :do_rpc,
                s(:lvar, :request),
                s(:true))),
            s(:send,
              s(:send, nil, :parser), :parseMethodResponse,
              s(:lvar, :data)))),
        s(:def, :multicall,
          s(:args,
            s(:restarg, :methods)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :params)),
              s(:send, nil, :multicall2,
                s(:splat,
                  s(:lvar, :methods)))),
            s(:if,
              s(:lvar, :ok),
              s(:lvar, :params),
              s(:send, nil, :raise,
                s(:lvar, :params))))),
        s(:def, :multicall2,
          s(:args,
            s(:restarg, :methods)),
          s(:send, nil, :gen_multicall,
            s(:lvar, :methods),
            s(:false))),
        s(:def, :multicall_async,
          s(:args,
            s(:restarg, :methods)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :params)),
              s(:send, nil, :multicall2_async,
                s(:splat,
                  s(:lvar, :methods)))),
            s(:if,
              s(:lvar, :ok),
              s(:lvar, :params),
              s(:send, nil, :raise,
                s(:lvar, :params))))),
        s(:def, :multicall2_async,
          s(:args,
            s(:restarg, :methods)),
          s(:send, nil, :gen_multicall,
            s(:lvar, :methods),
            s(:true))),
        s(:def, :proxy,
          s(:args,
            s(:optarg, :prefix,
              s(:nil)),
            s(:restarg, :args)),
          s(:send,
            s(:const, nil, :Proxy), :new,
            s(:self),
            s(:lvar, :prefix),
            s(:lvar, :args),
            s(:sym, :call))),
        s(:def, :proxy2,
          s(:args,
            s(:optarg, :prefix,
              s(:nil)),
            s(:restarg, :args)),
          s(:send,
            s(:const, nil, :Proxy), :new,
            s(:self),
            s(:lvar, :prefix),
            s(:lvar, :args),
            s(:sym, :call2))),
        s(:def, :proxy_async,
          s(:args,
            s(:optarg, :prefix,
              s(:nil)),
            s(:restarg, :args)),
          s(:send,
            s(:const, nil, :Proxy), :new,
            s(:self),
            s(:lvar, :prefix),
            s(:lvar, :args),
            s(:sym, :call_async))),
        s(:def, :proxy2_async,
          s(:args,
            s(:optarg, :prefix,
              s(:nil)),
            s(:restarg, :args)),
          s(:send,
            s(:const, nil, :Proxy), :new,
            s(:self),
            s(:lvar, :prefix),
            s(:lvar, :args),
            s(:sym, :call2_async))),
        s(:send, nil, :private),
        s(:def, :net_http,
          s(:args,
            s(:arg, :host),
            s(:arg, :port),
            s(:arg, :proxy_host),
            s(:arg, :proxy_port)),
          s(:send,
            s(:const,
              s(:const, nil, :Net), :HTTP), :new,
            s(:lvar, :host),
            s(:lvar, :port),
            s(:lvar, :proxy_host),
            s(:lvar, :proxy_port))),
        s(:def, :dup_net_http,
          s(:args),
          s(:begin,
            s(:lvasgn, :http,
              s(:send, nil, :net_http,
                s(:send,
                  s(:ivar, :@http), :address),
                s(:send,
                  s(:ivar, :@http), :port),
                s(:send,
                  s(:ivar, :@http), :proxy_address),
                s(:send,
                  s(:ivar, :@http), :proxy_port))),
            s(:send,
              s(:lvar, :http), :proxy_user=,
              s(:send,
                s(:ivar, :@http), :proxy_user)),
            s(:send,
              s(:lvar, :http), :proxy_pass=,
              s(:send,
                s(:ivar, :@http), :proxy_pass)),
            s(:if,
              s(:send,
                s(:ivar, :@http), :use_ssl?),
              s(:begin,
                s(:send,
                  s(:lvar, :http), :use_ssl=,
                  s(:true)),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Net), :HTTP), :SSL_ATTRIBUTES), :each),
                  s(:args,
                    s(:arg, :attribute)),
                  s(:send,
                    s(:lvar, :http), :__send__,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :attribute)),
                      s(:str, "=")),
                    s(:send,
                      s(:ivar, :@http), :__send__,
                      s(:lvar, :attribute))))), nil),
            s(:send,
              s(:lvar, :http), :read_timeout=,
              s(:send,
                s(:ivar, :@http), :read_timeout)),
            s(:send,
              s(:lvar, :http), :open_timeout=,
              s(:send,
                s(:ivar, :@http), :open_timeout)),
            s(:lvar, :http))),
        s(:def, :set_auth,
          s(:args),
          s(:if,
            s(:send,
              s(:ivar, :@user), :nil?),
            s(:ivasgn, :@auth,
              s(:nil)),
            s(:begin,
              s(:lvasgn, :a,
                s(:dstr,
                  s(:ivar, :@user))),
              s(:if,
                s(:send,
                  s(:ivar, :@password), :!=,
                  s(:nil)),
                s(:send,
                  s(:lvar, :a), :<<,
                  s(:dstr,
                    s(:str, ":"),
                    s(:ivar, :@password))), nil),
              s(:ivasgn, :@auth,
                s(:send,
                  s(:str, "Basic "), :+,
                  s(:send,
                    s(:array,
                      s(:lvar, :a)), :pack,
                    s(:str, "m0"))))))),
        s(:def, :do_rpc,
          s(:args,
            s(:arg, :request),
            s(:optarg, :async,
              s(:false))),
          s(:begin,
            s(:lvasgn, :header,
              s(:hash,
                s(:pair,
                  s(:str, "User-Agent"),
                  s(:const, nil, :USER_AGENT)),
                s(:pair,
                  s(:str, "Content-Type"),
                  s(:str, "text/xml; charset=utf-8")),
                s(:pair,
                  s(:str, "Content-Length"),
                  s(:send,
                    s(:send,
                      s(:lvar, :request), :bytesize), :to_s)),
                s(:pair,
                  s(:str, "Connection"),
                  s(:begin,
                    s(:if,
                      s(:lvar, :async),
                      s(:str, "close"),
                      s(:str, "keep-alive")))))),
            s(:if,
              s(:ivar, :@cookie),
              s(:send,
                s(:lvar, :header), :[]=,
                s(:str, "Cookie"),
                s(:ivar, :@cookie)), nil),
            s(:if,
              s(:ivar, :@http_header_extra),
              s(:send,
                s(:lvar, :header), :update,
                s(:ivar, :@http_header_extra)), nil),
            s(:if,
              s(:send,
                s(:ivar, :@auth), :!=,
                s(:nil)),
              s(:send,
                s(:lvar, :header), :[]=,
                s(:str, "Authorization"),
                s(:ivar, :@auth)), nil),
            s(:lvasgn, :resp,
              s(:nil)),
            s(:ivasgn, :@http_last_response,
              s(:nil)),
            s(:if,
              s(:lvar, :async),
              s(:begin,
                s(:lvasgn, :http,
                  s(:send, nil, :dup_net_http)),
                s(:block,
                  s(:send,
                    s(:lvar, :http), :start),
                  s(:args),
                  s(:lvasgn, :resp,
                    s(:send,
                      s(:lvar, :http), :request_post,
                      s(:ivar, :@path),
                      s(:lvar, :request),
                      s(:lvar, :header))))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@http), :started?), :!),
                  s(:send,
                    s(:ivar, :@http), :start), nil),
                s(:lvasgn, :resp,
                  s(:send,
                    s(:ivar, :@http), :request_post,
                    s(:ivar, :@path),
                    s(:lvar, :request),
                    s(:lvar, :header))))),
            s(:ivasgn, :@http_last_response,
              s(:lvar, :resp)),
            s(:lvasgn, :data,
              s(:send,
                s(:lvar, :resp), :body)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :resp), :code), :==,
                s(:str, "401")),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "Authorization failed.\nHTTP-Error: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :resp), :code)),
                  s(:str, " "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :resp), :message)))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :resp), :code), :[],
                    s(:int, 0),
                    s(:int, 1)), :!=,
                  s(:str, "2")),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "HTTP-Error: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :resp), :code)),
                    s(:str, " "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :resp), :message)))), nil)),
            s(:lvasgn, :ct_expected,
              s(:or,
                s(:send,
                  s(:lvar, :resp), :[],
                  s(:str, "Content-Type")),
                s(:str, "text/xml"))),
            s(:lvasgn, :ct,
              s(:send,
                s(:send, nil, :parse_content_type,
                  s(:lvar, :ct_expected)), :first)),
            s(:if,
              s(:send,
                s(:lvar, :ct), :!=,
                s(:str, "text/xml")),
              s(:if,
                s(:send,
                  s(:lvar, :ct), :==,
                  s(:str, "text/html")),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Wrong content-type (received '"),
                    s(:begin,
                      s(:lvar, :ct)),
                    s(:str, "' but expected 'text/xml'): \n"),
                    s(:begin,
                      s(:lvar, :data)))),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Wrong content-type (received '"),
                    s(:begin,
                      s(:lvar, :ct)),
                    s(:str, "' but expected 'text/xml')")))), nil),
            s(:lvasgn, :expected,
              s(:or,
                s(:send,
                  s(:lvar, :resp), :[],
                  s(:str, "Content-Length")),
                s(:str, "<unknown>"))),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :data), :nil?),
                s(:send,
                  s(:send,
                    s(:lvar, :data), :bytesize), :==,
                  s(:int, 0))),
              s(:send, nil, :raise,
                s(:dstr,
                  s(:str, "Wrong size. Was "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :data), :bytesize)),
                  s(:str, ", should be "),
                  s(:begin,
                    s(:lvar, :expected)))), nil),
            s(:send, nil, :parse_set_cookies,
              s(:send,
                s(:lvar, :resp), :get_fields,
                s(:str, "Set-Cookie"))),
            s(:return,
              s(:lvar, :data)))),
        s(:def, :parse_set_cookies,
          s(:args,
            s(:arg, :set_cookies)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :set_cookies), :nil?),
              s(:return), nil),
            s(:if,
              s(:send,
                s(:lvar, :set_cookies), :empty?),
              s(:return), nil),
            s(:send, nil, :require,
              s(:str, "webrick/cookie")),
            s(:lvasgn, :pairs,
              s(:hash)),
            s(:block,
              s(:send,
                s(:lvar, :set_cookies), :each),
              s(:args,
                s(:arg, :set_cookie)),
              s(:begin,
                s(:lvasgn, :cookie,
                  s(:send,
                    s(:const,
                      s(:const, nil, :WEBrick), :Cookie), :parse_set_cookie,
                    s(:lvar, :set_cookie))),
                s(:send,
                  s(:lvar, :pairs), :delete,
                  s(:send,
                    s(:lvar, :cookie), :name)),
                s(:send,
                  s(:lvar, :pairs), :[]=,
                  s(:send,
                    s(:lvar, :cookie), :name),
                  s(:send,
                    s(:lvar, :cookie), :value)))),
            s(:lvasgn, :cookies,
              s(:block,
                s(:send,
                  s(:lvar, :pairs), :collect),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :value)),
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :WEBrick), :Cookie), :new,
                    s(:lvar, :name),
                    s(:lvar, :value)), :to_s))),
            s(:ivasgn, :@cookie,
              s(:send,
                s(:lvar, :cookies), :join,
                s(:str, "; "))))),
        s(:def, :gen_multicall,
          s(:args,
            s(:optarg, :methods,
              s(:array)),
            s(:optarg, :async,
              s(:false))),
          s(:begin,
            s(:lvasgn, :meth,
              s(:sym, :call2)),
            s(:if,
              s(:lvar, :async),
              s(:lvasgn, :meth,
                s(:sym, :call2_async)), nil),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :ok),
                s(:lvasgn, :params)),
              s(:send,
                s(:self), :send,
                s(:lvar, :meth),
                s(:str, "system.multicall"),
                s(:block,
                  s(:send,
                    s(:lvar, :methods), :collect),
                  s(:args,
                    s(:arg, :m)),
                  s(:hash,
                    s(:pair,
                      s(:str, "methodName"),
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 0))),
                    s(:pair,
                      s(:str, "params"),
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:irange,
                          s(:int, 1),
                          s(:int, -1)))))))),
            s(:if,
              s(:lvar, :ok),
              s(:lvasgn, :params,
                s(:block,
                  s(:send,
                    s(:lvar, :params), :collect),
                  s(:args,
                    s(:arg, :param)),
                  s(:if,
                    s(:send,
                      s(:lvar, :param), :is_a?,
                      s(:const, nil, :Array)),
                    s(:send,
                      s(:lvar, :param), :[],
                      s(:int, 0)),
                    s(:if,
                      s(:send,
                        s(:lvar, :param), :is_a?,
                        s(:const, nil, :Hash)),
                      s(:send,
                        s(:const,
                          s(:const, nil, :XMLRPC), :FaultException), :new,
                        s(:send,
                          s(:lvar, :param), :[],
                          s(:str, "faultCode")),
                        s(:send,
                          s(:lvar, :param), :[],
                          s(:str, "faultString"))),
                      s(:send, nil, :raise,
                        s(:str, "Wrong multicall return value")))))), nil),
            s(:return,
              s(:lvar, :ok),
              s(:lvar, :params)))),
        s(:class,
          s(:const, nil, :Proxy), nil,
          s(:begin,
            s(:def, :initialize,
              s(:args,
                s(:arg, :server),
                s(:arg, :prefix),
                s(:optarg, :args,
                  s(:array)),
                s(:optarg, :meth,
                  s(:sym, :call)),
                s(:optarg, :delim,
                  s(:str, "."))),
              s(:begin,
                s(:ivasgn, :@server,
                  s(:lvar, :server)),
                s(:ivasgn, :@prefix,
                  s(:if,
                    s(:lvar, :prefix),
                    s(:send,
                      s(:lvar, :prefix), :+,
                      s(:lvar, :delim)),
                    s(:str, ""))),
                s(:ivasgn, :@args,
                  s(:lvar, :args)),
                s(:ivasgn, :@meth,
                  s(:lvar, :meth)))),
            s(:def, :method_missing,
              s(:args,
                s(:arg, :mid),
                s(:restarg, :args)),
              s(:begin,
                s(:lvasgn, :pre,
                  s(:send,
                    s(:ivar, :@prefix), :+,
                    s(:send,
                      s(:lvar, :mid), :to_s))),
                s(:lvasgn, :arg,
                  s(:send,
                    s(:ivar, :@args), :+,
                    s(:lvar, :args))),
                s(:send,
                  s(:ivar, :@server), :send,
                  s(:ivar, :@meth),
                  s(:lvar, :pre),
                  s(:splat,
                    s(:lvar, :arg)))))))))))
