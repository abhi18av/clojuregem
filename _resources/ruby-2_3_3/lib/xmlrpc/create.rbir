s(:begin,
  s(:send, nil, :require,
    s(:str, "date")),
  s(:send, nil, :require,
    s(:str, "xmlrpc/base64")),
  s(:module,
    s(:const, nil, :XMLRPC),
    s(:begin,
      s(:module,
        s(:const, nil, :XMLWriter),
        s(:begin,
          s(:class,
            s(:const, nil, :Abstract), nil,
            s(:begin,
              s(:def, :ele,
                s(:args,
                  s(:arg, :name),
                  s(:restarg, :children)),
                s(:send, nil, :element,
                  s(:lvar, :name),
                  s(:nil),
                  s(:splat,
                    s(:lvar, :children)))),
              s(:def, :tag,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :txt)),
                s(:send, nil, :element,
                  s(:lvar, :name),
                  s(:nil),
                  s(:send, nil, :text,
                    s(:lvar, :txt)))))),
          s(:class,
            s(:const, nil, :Simple),
            s(:const, nil, :Abstract),
            s(:begin,
              s(:def, :document_to_str,
                s(:args,
                  s(:arg, :doc)),
                s(:lvar, :doc)),
              s(:def, :document,
                s(:args,
                  s(:restarg, :params)),
                s(:send,
                  s(:lvar, :params), :join,
                  s(:str, ""))),
              s(:def, :pi,
                s(:args,
                  s(:arg, :name),
                  s(:restarg, :params)),
                s(:send,
                  s(:send,
                    s(:dstr,
                      s(:str, "<?"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, " ")), :+,
                    s(:send,
                      s(:lvar, :params), :join,
                      s(:str, " "))), :+,
                  s(:str, " ?>"))),
              s(:def, :element,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :attrs),
                  s(:restarg, :children)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :attrs), :nil?), nil,
                    s(:send, nil, :raise,
                      s(:str, "attributes not yet implemented"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :children), :empty?),
                    s(:dstr,
                      s(:str, "<"),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "/>")),
                    s(:send,
                      s(:send,
                        s(:dstr,
                          s(:str, "<"),
                          s(:begin,
                            s(:lvar, :name)),
                          s(:str, ">")), :+,
                        s(:send,
                          s(:lvar, :children), :join,
                          s(:str, ""))), :+,
                      s(:dstr,
                        s(:str, "</"),
                        s(:begin,
                          s(:lvar, :name)),
                        s(:str, ">")))))),
              s(:def, :text,
                s(:args,
                  s(:arg, :txt)),
                s(:begin,
                  s(:lvasgn, :cleaned,
                    s(:send,
                      s(:lvar, :txt), :dup)),
                  s(:send,
                    s(:lvar, :cleaned), :gsub!,
                    s(:regexp,
                      s(:str, "&"),
                      s(:regopt)),
                    s(:str, "&amp;")),
                  s(:send,
                    s(:lvar, :cleaned), :gsub!,
                    s(:regexp,
                      s(:str, "<"),
                      s(:regopt)),
                    s(:str, "&lt;")),
                  s(:send,
                    s(:lvar, :cleaned), :gsub!,
                    s(:regexp,
                      s(:str, ">"),
                      s(:regopt)),
                    s(:str, "&gt;")),
                  s(:lvar, :cleaned))))),
          s(:class,
            s(:const, nil, :XMLParser),
            s(:const, nil, :Abstract),
            s(:begin,
              s(:def, :initialize,
                s(:args),
                s(:send, nil, :require,
                  s(:str, "xmltreebuilder"))),
              s(:def, :document_to_str,
                s(:args,
                  s(:arg, :doc)),
                s(:send,
                  s(:lvar, :doc), :to_s)),
              s(:def, :document,
                s(:args,
                  s(:restarg, :params)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :XML), :SimpleTree), :Document), :new,
                  s(:splat,
                    s(:lvar, :params)))),
              s(:def, :pi,
                s(:args,
                  s(:arg, :name),
                  s(:restarg, :params)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :XML), :SimpleTree), :ProcessingInstruction), :new,
                  s(:lvar, :name),
                  s(:splat,
                    s(:lvar, :params)))),
              s(:def, :element,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :attrs),
                  s(:restarg, :children)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :XML), :SimpleTree), :Element), :new,
                  s(:lvar, :name),
                  s(:lvar, :attrs),
                  s(:splat,
                    s(:lvar, :children)))),
              s(:def, :text,
                s(:args,
                  s(:arg, :txt)),
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const, nil, :XML), :SimpleTree), :Text), :new,
                  s(:lvar, :txt))))),
          s(:casgn, nil, :Classes,
            s(:array,
              s(:const, nil, :Simple),
              s(:const, nil, :XMLParser))),
          s(:defs,
            s(:self), :each_installed_writer,
            s(:args),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const, nil, :XMLRPC), :XMLWriter), :Classes), :each),
              s(:args,
                s(:arg, :klass)),
              s(:kwbegin,
                s(:rescue,
                  s(:yield,
                    s(:send,
                      s(:lvar, :klass), :new)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :LoadError)), nil, nil), nil)))))),
      s(:class,
        s(:const, nil, :Create), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:optarg, :xml_writer,
                s(:nil))),
            s(:ivasgn, :@writer,
              s(:or,
                s(:lvar, :xml_writer),
                s(:send,
                  s(:const,
                    s(:const, nil, :Config), :DEFAULT_WRITER), :new)))),
          s(:def, :methodCall,
            s(:args,
              s(:arg, :name),
              s(:restarg, :params)),
            s(:begin,
              s(:lvasgn, :name,
                s(:send,
                  s(:lvar, :name), :to_s)),
              s(:if,
                s(:send,
                  s(:lvar, :name), :!~,
                  s(:regexp,
                    s(:str, "[a-zA-Z0-9_.:/]+"),
                    s(:regopt))),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "Wrong XML-RPC method-name")), nil),
              s(:lvasgn, :parameter,
                s(:block,
                  s(:send,
                    s(:lvar, :params), :collect),
                  s(:args,
                    s(:arg, :param)),
                  s(:send,
                    s(:ivar, :@writer), :ele,
                    s(:str, "param"),
                    s(:send, nil, :conv2value,
                      s(:lvar, :param))))),
              s(:lvasgn, :tree,
                s(:send,
                  s(:ivar, :@writer), :document,
                  s(:send,
                    s(:ivar, :@writer), :pi,
                    s(:str, "xml"),
                    s(:str, "version=\"1.0\"")),
                  s(:send,
                    s(:ivar, :@writer), :ele,
                    s(:str, "methodCall"),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "methodName"),
                      s(:lvar, :name)),
                    s(:send,
                      s(:ivar, :@writer), :ele,
                      s(:str, "params"),
                      s(:splat,
                        s(:lvar, :parameter)))))),
              s(:send,
                s(:send,
                  s(:ivar, :@writer), :document_to_str,
                  s(:lvar, :tree)), :+,
                s(:str, "\n")))),
          s(:def, :methodResponse,
            s(:args,
              s(:arg, :is_ret),
              s(:restarg, :params)),
            s(:begin,
              s(:if,
                s(:lvar, :is_ret),
                s(:begin,
                  s(:lvasgn, :resp,
                    s(:block,
                      s(:send,
                        s(:lvar, :params), :collect),
                      s(:args,
                        s(:arg, :param)),
                      s(:send,
                        s(:ivar, :@writer), :ele,
                        s(:str, "param"),
                        s(:send, nil, :conv2value,
                          s(:lvar, :param))))),
                  s(:lvasgn, :resp,
                    s(:array,
                      s(:send,
                        s(:ivar, :@writer), :ele,
                        s(:str, "params"),
                        s(:splat,
                          s(:lvar, :resp)))))),
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:lvar, :params), :size), :!=,
                        s(:int, 1)),
                      s(:send,
                        s(:send,
                          s(:lvar, :params), :[],
                          s(:int, 0)), :===,
                        s(:const,
                          s(:const, nil, :XMLRPC), :FaultException))),
                    s(:send, nil, :raise,
                      s(:const, nil, :ArgumentError),
                      s(:str, "no valid fault-structure given")), nil),
                  s(:lvasgn, :resp,
                    s(:send,
                      s(:ivar, :@writer), :ele,
                      s(:str, "fault"),
                      s(:send, nil, :conv2value,
                        s(:send,
                          s(:send,
                            s(:lvar, :params), :[],
                            s(:int, 0)), :to_h)))))),
              s(:lvasgn, :tree,
                s(:send,
                  s(:ivar, :@writer), :document,
                  s(:send,
                    s(:ivar, :@writer), :pi,
                    s(:str, "xml"),
                    s(:str, "version=\"1.0\"")),
                  s(:send,
                    s(:ivar, :@writer), :ele,
                    s(:str, "methodResponse"),
                    s(:lvar, :resp)))),
              s(:send,
                s(:send,
                  s(:ivar, :@writer), :document_to_str,
                  s(:lvar, :tree)), :+,
                s(:str, "\n")))),
          s(:send, nil, :private),
          s(:def, :conv2value,
            s(:args,
              s(:arg, :param)),
            s(:begin,
              s(:lvasgn, :val,
                s(:case,
                  s(:lvar, :param),
                  s(:when,
                    s(:const, nil, :Fixnum),
                    s(:const, nil, :Bignum),
                    s(:if,
                      s(:const,
                        s(:const, nil, :Config), :ENABLE_BIGINT),
                      s(:send,
                        s(:ivar, :@writer), :tag,
                        s(:str, "i4"),
                        s(:send,
                          s(:lvar, :param), :to_s)),
                      s(:if,
                        s(:and,
                          s(:send,
                            s(:lvar, :param), :>=,
                            s(:send,
                              s(:begin,
                                s(:send,
                                  s(:int, 2), :**,
                                  s(:int, 31))), :-@)),
                          s(:send,
                            s(:lvar, :param), :<=,
                            s(:begin,
                              s(:send,
                                s(:send,
                                  s(:int, 2), :**,
                                  s(:int, 31)), :-,
                                s(:int, 1))))),
                        s(:send,
                          s(:ivar, :@writer), :tag,
                          s(:str, "i4"),
                          s(:send,
                            s(:lvar, :param), :to_s)),
                        s(:send, nil, :raise,
                          s(:str, "Bignum is too big! Must be signed 32-bit integer!"))))),
                  s(:when,
                    s(:const, nil, :TrueClass),
                    s(:const, nil, :FalseClass),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "boolean"),
                      s(:if,
                        s(:lvar, :param),
                        s(:str, "1"),
                        s(:str, "0")))),
                  s(:when,
                    s(:const, nil, :Symbol),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "string"),
                      s(:send,
                        s(:lvar, :param), :to_s))),
                  s(:when,
                    s(:const, nil, :String),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "string"),
                      s(:lvar, :param))),
                  s(:when,
                    s(:const, nil, :NilClass),
                    s(:if,
                      s(:const,
                        s(:const, nil, :Config), :ENABLE_NIL_CREATE),
                      s(:send,
                        s(:ivar, :@writer), :ele,
                        s(:str, "nil")),
                      s(:send, nil, :raise,
                        s(:str, "Wrong type NilClass. Not allowed!")))),
                  s(:when,
                    s(:const, nil, :Float),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :param), :finite?), nil,
                        s(:send, nil, :raise,
                          s(:dstr,
                            s(:str, "Wrong value "),
                            s(:begin,
                              s(:lvar, :param)),
                            s(:str, ". Not allowed!")))),
                      s(:send,
                        s(:ivar, :@writer), :tag,
                        s(:str, "double"),
                        s(:send,
                          s(:lvar, :param), :to_s)))),
                  s(:when,
                    s(:const, nil, :Struct),
                    s(:begin,
                      s(:lvasgn, :h,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :param), :members), :collect),
                          s(:args,
                            s(:arg, :key)),
                          s(:begin,
                            s(:lvasgn, :value,
                              s(:send,
                                s(:lvar, :param), :[],
                                s(:lvar, :key))),
                            s(:send,
                              s(:ivar, :@writer), :ele,
                              s(:str, "member"),
                              s(:send,
                                s(:ivar, :@writer), :tag,
                                s(:str, "name"),
                                s(:send,
                                  s(:lvar, :key), :to_s)),
                              s(:send, nil, :conv2value,
                                s(:lvar, :value)))))),
                      s(:send,
                        s(:ivar, :@writer), :ele,
                        s(:str, "struct"),
                        s(:splat,
                          s(:lvar, :h))))),
                  s(:when,
                    s(:const, nil, :Hash),
                    s(:begin,
                      s(:lvasgn, :h,
                        s(:block,
                          s(:send,
                            s(:lvar, :param), :collect),
                          s(:args,
                            s(:arg, :key),
                            s(:arg, :value)),
                          s(:send,
                            s(:ivar, :@writer), :ele,
                            s(:str, "member"),
                            s(:send,
                              s(:ivar, :@writer), :tag,
                              s(:str, "name"),
                              s(:send,
                                s(:lvar, :key), :to_s)),
                            s(:send, nil, :conv2value,
                              s(:lvar, :value))))),
                      s(:send,
                        s(:ivar, :@writer), :ele,
                        s(:str, "struct"),
                        s(:splat,
                          s(:lvar, :h))))),
                  s(:when,
                    s(:const, nil, :Array),
                    s(:begin,
                      s(:lvasgn, :a,
                        s(:block,
                          s(:send,
                            s(:lvar, :param), :collect),
                          s(:args,
                            s(:arg, :v)),
                          s(:send, nil, :conv2value,
                            s(:lvar, :v)))),
                      s(:send,
                        s(:ivar, :@writer), :ele,
                        s(:str, "array"),
                        s(:send,
                          s(:ivar, :@writer), :ele,
                          s(:str, "data"),
                          s(:splat,
                            s(:lvar, :a)))))),
                  s(:when,
                    s(:const, nil, :Time),
                    s(:const, nil, :Date),
                    s(:const,
                      s(:cbase), :DateTime),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "dateTime.iso8601"),
                      s(:send,
                        s(:lvar, :param), :strftime,
                        s(:str, "%Y%m%dT%H:%M:%S")))),
                  s(:when,
                    s(:const,
                      s(:const, nil, :XMLRPC), :DateTime),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "dateTime.iso8601"),
                      s(:send, nil, :format,
                        s(:str, "%.4d%02d%02dT%02d:%02d:%02d"),
                        s(:splat,
                          s(:send,
                            s(:lvar, :param), :to_a))))),
                  s(:when,
                    s(:const,
                      s(:const, nil, :XMLRPC), :Base64),
                    s(:send,
                      s(:ivar, :@writer), :tag,
                      s(:str, "base64"),
                      s(:send,
                        s(:lvar, :param), :encoded))),
                  s(:if,
                    s(:and,
                      s(:const,
                        s(:const, nil, :Config), :ENABLE_MARSHALLING),
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :param), :class), :included_modules), :include?,
                        s(:const,
                          s(:const, nil, :XMLRPC), :Marshallable))),
                    s(:begin,
                      s(:lvasgn, :ret,
                        s(:hash,
                          s(:pair,
                            s(:str, "___class___"),
                            s(:send,
                              s(:send,
                                s(:lvar, :param), :class), :name)))),
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :param), :instance_variables), :each),
                        s(:args,
                          s(:arg, :v)),
                        s(:begin,
                          s(:lvasgn, :name,
                            s(:send,
                              s(:lvar, :v), :[],
                              s(:irange,
                                s(:int, 1),
                                s(:int, -1)))),
                          s(:lvasgn, :val,
                            s(:send,
                              s(:lvar, :param), :instance_variable_get,
                              s(:lvar, :v))),
                          s(:if,
                            s(:send,
                              s(:lvar, :val), :nil?),
                            s(:if,
                              s(:const,
                                s(:const, nil, :Config), :ENABLE_NIL_CREATE),
                              s(:send,
                                s(:lvar, :ret), :[]=,
                                s(:lvar, :name),
                                s(:lvar, :val)), nil),
                            s(:send,
                              s(:lvar, :ret), :[]=,
                              s(:lvar, :name),
                              s(:lvar, :val))))),
                      s(:return,
                        s(:send, nil, :conv2value,
                          s(:lvar, :ret)))),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :ok),
                          s(:lvasgn, :pa)),
                        s(:send, nil, :wrong_type,
                          s(:lvar, :param))),
                      s(:if,
                        s(:lvar, :ok),
                        s(:return,
                          s(:send, nil, :conv2value,
                            s(:lvar, :pa))),
                        s(:send, nil, :raise,
                          s(:str, "Wrong type!"))))))),
              s(:send,
                s(:ivar, :@writer), :ele,
                s(:str, "value"),
                s(:lvar, :val)))),
          s(:def, :wrong_type,
            s(:args,
              s(:arg, :value)),
            s(:false)))))))
