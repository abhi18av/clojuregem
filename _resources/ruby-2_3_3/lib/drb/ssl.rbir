s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "openssl")),
  s(:send, nil, :require,
    s(:str, "drb/drb")),
  s(:send, nil, :require,
    s(:str, "singleton")),
  s(:module,
    s(:const, nil, :DRb),
    s(:begin,
      s(:class,
        s(:const, nil, :DRbSSLSocket),
        s(:const, nil, :DRbTCPSocket),
        s(:begin,
          s(:class,
            s(:const, nil, :SSLConfig), nil,
            s(:begin,
              s(:casgn, nil, :DEFAULT,
                s(:hash,
                  s(:pair,
                    s(:sym, :SSLCertificate),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLPrivateKey),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLClientCA),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLCACertificatePath),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLCACertificateFile),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLTmpDhCallback),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLVerifyMode),
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:cbase), :OpenSSL), :SSL), :VERIFY_NONE)),
                  s(:pair,
                    s(:sym, :SSLVerifyDepth),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLVerifyCallback),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLCertificateStore),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLCertName),
                    s(:nil)),
                  s(:pair,
                    s(:sym, :SSLCertComment),
                    s(:str, "Generated by Ruby/OpenSSL")))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :config)),
                s(:begin,
                  s(:ivasgn, :@config,
                    s(:lvar, :config)),
                  s(:ivasgn, :@cert,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:sym, :SSLCertificate))),
                  s(:ivasgn, :@pkey,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:sym, :SSLPrivateKey))),
                  s(:ivasgn, :@ssl_ctx,
                    s(:nil)))),
              s(:def, :[],
                s(:args,
                  s(:arg, :key)),
                s(:or,
                  s(:send,
                    s(:ivar, :@config), :[],
                    s(:lvar, :key)),
                  s(:send,
                    s(:const, nil, :DEFAULT), :[],
                    s(:lvar, :key)))),
              s(:def, :connect,
                s(:args,
                  s(:arg, :tcp)),
                s(:begin,
                  s(:lvasgn, :ssl,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :tcp),
                      s(:ivar, :@ssl_ctx))),
                  s(:send,
                    s(:lvar, :ssl), :sync=,
                    s(:true)),
                  s(:send,
                    s(:lvar, :ssl), :connect),
                  s(:lvar, :ssl))),
              s(:def, :accept,
                s(:args,
                  s(:arg, :tcp)),
                s(:begin,
                  s(:lvasgn, :ssl,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :tcp),
                      s(:ivar, :@ssl_ctx))),
                  s(:send,
                    s(:lvar, :ssl), :sync=,
                    s(:true)),
                  s(:send,
                    s(:lvar, :ssl), :accept),
                  s(:lvar, :ssl))),
              s(:def, :setup_certificate,
                s(:args),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:ivar, :@cert),
                      s(:ivar, :@pkey)),
                    s(:return), nil),
                  s(:lvasgn, :rsa,
                    s(:block,
                      s(:send,
                        s(:const,
                          s(:const,
                            s(:const, nil, :OpenSSL), :PKey), :RSA), :new,
                        s(:int, 1024)),
                      s(:args,
                        s(:arg, :p),
                        s(:arg, :n)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:self), :[],
                            s(:sym, :verbose)), nil,
                          s(:next)),
                        s(:case,
                          s(:lvar, :p),
                          s(:when,
                            s(:int, 0),
                            s(:send,
                              s(:gvar, :$stderr), :putc,
                              s(:str, "."))),
                          s(:when,
                            s(:int, 1),
                            s(:send,
                              s(:gvar, :$stderr), :putc,
                              s(:str, "+"))),
                          s(:when,
                            s(:int, 2),
                            s(:send,
                              s(:gvar, :$stderr), :putc,
                              s(:str, "*"))),
                          s(:when,
                            s(:int, 3),
                            s(:send,
                              s(:gvar, :$stderr), :putc,
                              s(:str, "\n"))),
                          s(:send,
                            s(:gvar, :$stderr), :putc,
                            s(:str, "*")))))),
                  s(:lvasgn, :cert,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :Certificate), :new)),
                  s(:send,
                    s(:lvar, :cert), :version=,
                    s(:int, 3)),
                  s(:send,
                    s(:lvar, :cert), :serial=,
                    s(:int, 0)),
                  s(:lvasgn, :name,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :Name), :new,
                      s(:send,
                        s(:self), :[],
                        s(:sym, :SSLCertName)))),
                  s(:send,
                    s(:lvar, :cert), :subject=,
                    s(:lvar, :name)),
                  s(:send,
                    s(:lvar, :cert), :issuer=,
                    s(:lvar, :name)),
                  s(:send,
                    s(:lvar, :cert), :not_before=,
                    s(:send,
                      s(:const, nil, :Time), :now)),
                  s(:send,
                    s(:lvar, :cert), :not_after=,
                    s(:send,
                      s(:send,
                        s(:const, nil, :Time), :now), :+,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:int, 365), :*,
                              s(:int, 24)), :*,
                            s(:int, 60)), :*,
                          s(:int, 60))))),
                  s(:send,
                    s(:lvar, :cert), :public_key=,
                    s(:send,
                      s(:lvar, :rsa), :public_key)),
                  s(:lvasgn, :ef,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :X509), :ExtensionFactory), :new,
                      s(:nil),
                      s(:lvar, :cert))),
                  s(:send,
                    s(:lvar, :cert), :extensions=,
                    s(:array,
                      s(:send,
                        s(:lvar, :ef), :create_extension,
                        s(:str, "basicConstraints"),
                        s(:str, "CA:FALSE")),
                      s(:send,
                        s(:lvar, :ef), :create_extension,
                        s(:str, "subjectKeyIdentifier"),
                        s(:str, "hash")))),
                  s(:send,
                    s(:lvar, :ef), :issuer_certificate=,
                    s(:lvar, :cert)),
                  s(:send,
                    s(:lvar, :cert), :add_extension,
                    s(:send,
                      s(:lvar, :ef), :create_extension,
                      s(:str, "authorityKeyIdentifier"),
                      s(:str, "keyid:always,issuer:always"))),
                  s(:if,
                    s(:lvasgn, :comment,
                      s(:send,
                        s(:self), :[],
                        s(:sym, :SSLCertComment))),
                    s(:send,
                      s(:lvar, :cert), :add_extension,
                      s(:send,
                        s(:lvar, :ef), :create_extension,
                        s(:str, "nsComment"),
                        s(:lvar, :comment))), nil),
                  s(:send,
                    s(:lvar, :cert), :sign,
                    s(:lvar, :rsa),
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :Digest), :SHA1), :new)),
                  s(:ivasgn, :@cert,
                    s(:lvar, :cert)),
                  s(:ivasgn, :@pkey,
                    s(:lvar, :rsa)))),
              s(:def, :setup_ssl_context,
                s(:args),
                s(:begin,
                  s(:lvasgn, :ctx,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:lvar, :ctx), :cert=,
                    s(:ivar, :@cert)),
                  s(:send,
                    s(:lvar, :ctx), :key=,
                    s(:ivar, :@pkey)),
                  s(:send,
                    s(:lvar, :ctx), :client_ca=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLClientCA))),
                  s(:send,
                    s(:lvar, :ctx), :ca_path=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLCACertificatePath))),
                  s(:send,
                    s(:lvar, :ctx), :ca_file=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLCACertificateFile))),
                  s(:send,
                    s(:lvar, :ctx), :tmp_dh_callback=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLTmpDhCallback))),
                  s(:send,
                    s(:lvar, :ctx), :verify_mode=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLVerifyMode))),
                  s(:send,
                    s(:lvar, :ctx), :verify_depth=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLVerifyDepth))),
                  s(:send,
                    s(:lvar, :ctx), :verify_callback=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLVerifyCallback))),
                  s(:send,
                    s(:lvar, :ctx), :cert_store=,
                    s(:send,
                      s(:self), :[],
                      s(:sym, :SSLCertificateStore))),
                  s(:ivasgn, :@ssl_ctx,
                    s(:lvar, :ctx)))))),
          s(:defs,
            s(:self), :parse_uri,
            s(:args,
              s(:arg, :uri)),
            s(:if,
              s(:send,
                s(:lvar, :uri), :=~,
                s(:regexp,
                  s(:str, "^drbssl://(.*?):(\\d+)(\\?(.*))?$"),
                  s(:regopt))),
              s(:begin,
                s(:lvasgn, :host,
                  s(:nth_ref, 1)),
                s(:lvasgn, :port,
                  s(:send,
                    s(:nth_ref, 2), :to_i)),
                s(:lvasgn, :option,
                  s(:nth_ref, 4)),
                s(:array,
                  s(:lvar, :host),
                  s(:lvar, :port),
                  s(:lvar, :option))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :uri), :=~,
                    s(:regexp,
                      s(:str, "^drbssl:"),
                      s(:regopt))), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :DRbBadScheme),
                    s(:lvar, :uri))),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbBadURI),
                  s(:send,
                    s(:str, "can't parse uri:"), :+,
                    s(:lvar, :uri)))))),
          s(:defs,
            s(:self), :open,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port)),
                s(:send, nil, :parse_uri,
                  s(:lvar, :uri))),
              s(:send,
                s(:lvar, :host), :untaint),
              s(:send,
                s(:lvar, :port), :untaint),
              s(:lvasgn, :soc,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:lvar, :host),
                  s(:lvar, :port))),
              s(:lvasgn, :ssl_conf,
                s(:send,
                  s(:const, nil, :SSLConfig), :new,
                  s(:lvar, :config))),
              s(:send,
                s(:lvar, :ssl_conf), :setup_ssl_context),
              s(:lvasgn, :ssl,
                s(:send,
                  s(:lvar, :ssl_conf), :connect,
                  s(:lvar, :soc))),
              s(:send,
                s(:self), :new,
                s(:lvar, :uri),
                s(:lvar, :ssl),
                s(:lvar, :ssl_conf),
                s(:true)))),
          s(:defs,
            s(:self), :open_server,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config)),
            s(:begin,
              s(:if,
                s(:lvar, :uri), nil,
                s(:lvasgn, :uri,
                  s(:str, "drbssl://:0"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port)),
                s(:send, nil, :parse_uri,
                  s(:lvar, :uri))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :host), :size), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :host,
                    s(:send, nil, :getservername)),
                  s(:lvasgn, :soc,
                    s(:send, nil, :open_server_inaddr_any,
                      s(:lvar, :host),
                      s(:lvar, :port)))),
                s(:lvasgn, :soc,
                  s(:send,
                    s(:const, nil, :TCPServer), :open,
                    s(:lvar, :host),
                    s(:lvar, :port)))),
              s(:if,
                s(:send,
                  s(:lvar, :port), :==,
                  s(:int, 0)),
                s(:lvasgn, :port,
                  s(:send,
                    s(:send,
                      s(:lvar, :soc), :addr), :[],
                    s(:int, 1))), nil),
              s(:ivasgn, :@uri,
                s(:dstr,
                  s(:str, "drbssl://"),
                  s(:begin,
                    s(:lvar, :host)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :port)))),
              s(:lvasgn, :ssl_conf,
                s(:send,
                  s(:const, nil, :SSLConfig), :new,
                  s(:lvar, :config))),
              s(:send,
                s(:lvar, :ssl_conf), :setup_certificate),
              s(:send,
                s(:lvar, :ssl_conf), :setup_ssl_context),
              s(:send,
                s(:self), :new,
                s(:ivar, :@uri),
                s(:lvar, :soc),
                s(:lvar, :ssl_conf),
                s(:false)))),
          s(:defs,
            s(:self), :uri_option,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port),
                  s(:lvasgn, :option)),
                s(:send, nil, :parse_uri,
                  s(:lvar, :uri))),
              s(:return,
                s(:dstr,
                  s(:str, "drbssl://"),
                  s(:begin,
                    s(:lvar, :host)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :port))),
                s(:lvar, :option)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :uri),
              s(:arg, :soc),
              s(:arg, :config),
              s(:arg, :is_established)),
            s(:begin,
              s(:ivasgn, :@ssl,
                s(:if,
                  s(:lvar, :is_established),
                  s(:lvar, :soc),
                  s(:nil))),
              s(:super,
                s(:lvar, :uri),
                s(:send,
                  s(:lvar, :soc), :to_io),
                s(:lvar, :config)))),
          s(:def, :stream,
            s(:args),
            s(:ivar, :@ssl)),
          s(:def, :close,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@ssl),
                s(:begin,
                  s(:send,
                    s(:ivar, :@ssl), :close),
                  s(:ivasgn, :@ssl,
                    s(:nil))), nil),
              s(:zsuper))),
          s(:def, :accept,
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:while,
                    s(:true),
                    s(:begin,
                      s(:lvasgn, :soc,
                        s(:send, nil, :accept_or_shutdown)),
                      s(:if,
                        s(:lvar, :soc), nil,
                        s(:return,
                          s(:nil))),
                      s(:if,
                        s(:begin,
                          s(:if,
                            s(:ivar, :@acl),
                            s(:send,
                              s(:ivar, :@acl), :allow_socket?,
                              s(:lvar, :soc)),
                            s(:true))),
                        s(:break), nil),
                      s(:send,
                        s(:lvar, :soc), :close))),
                  s(:kwbegin,
                    s(:rescue,
                      s(:lvasgn, :ssl,
                        s(:send,
                          s(:ivar, :@config), :accept,
                          s(:lvar, :soc))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :Exception)), nil,
                        s(:begin,
                          s(:send,
                            s(:lvar, :soc), :close),
                          s(:send, nil, :raise))), nil)),
                  s(:send,
                    s(:send,
                      s(:self), :class), :new,
                    s(:send, nil, :uri),
                    s(:lvar, :ssl),
                    s(:ivar, :@config),
                    s(:true))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :SSLError)), nil,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:ivar, :@config), :[],
                        s(:sym, :verbose)),
                      s(:send, nil, :warn,
                        s(:dstr,
                          s(:begin,
                            s(:str, "(string)")),
                          s(:str, ":"),
                          s(:begin,
                            s(:int, 339)),
                          s(:str, ": warning: "),
                          s(:begin,
                            s(:send,
                              s(:gvar, :$!), :message)),
                          s(:str, " ("),
                          s(:begin,
                            s(:send,
                              s(:gvar, :$!), :class)),
                          s(:str, ")"))), nil),
                    s(:retry))), nil))))),
      s(:send,
        s(:const, nil, :DRbProtocol), :add_protocol,
        s(:const, nil, :DRbSSLSocket)))))
