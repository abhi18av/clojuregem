s(:begin,
  s(:send, nil, :require,
    s(:str, "ipaddr")),
  s(:class,
    s(:const, nil, :ACL), nil,
    s(:begin,
      s(:casgn, nil, :VERSION,
        s(:array,
          s(:str, "2.0.0"))),
      s(:class,
        s(:const, nil, :ACLEntry), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :str)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :str), :==,
                  s(:str, "*")),
                s(:send,
                  s(:lvar, :str), :==,
                  s(:str, "all"))),
              s(:ivasgn, :@pat,
                s(:array,
                  s(:sym, :all))),
              s(:if,
                s(:send,
                  s(:lvar, :str), :include?,
                  s(:str, "*")),
                s(:ivasgn, :@pat,
                  s(:array,
                    s(:sym, :name),
                    s(:send, nil, :dot_pat,
                      s(:lvar, :str)))),
                s(:kwbegin,
                  s(:rescue,
                    s(:ivasgn, :@pat,
                      s(:array,
                        s(:sym, :ip),
                        s(:send,
                          s(:const, nil, :IPAddr), :new,
                          s(:lvar, :str)))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :ArgumentError)), nil,
                      s(:ivasgn, :@pat,
                        s(:array,
                          s(:sym, :name),
                          s(:send, nil, :dot_pat,
                            s(:lvar, :str))))), nil))))),
          s(:send, nil, :private),
          s(:def, :dot_pat_str,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :list,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :str), :split,
                      s(:str, ".")), :collect),
                  s(:args,
                    s(:arg, :s)),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:lvar, :s), :==,
                        s(:str, "*"))),
                    s(:str, ".+"),
                    s(:lvar, :s)))),
              s(:send,
                s(:lvar, :list), :join,
                s(:str, "\\.")))),
          s(:send, nil, :private),
          s(:def, :dot_pat,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :exp,
                s(:send,
                  s(:send,
                    s(:str, "^"), :+,
                    s(:send, nil, :dot_pat_str,
                      s(:lvar, :str))), :+,
                  s(:str, "$"))),
              s(:send,
                s(:const, nil, :Regexp), :new,
                s(:lvar, :exp)))),
          s(:send, nil, :public),
          s(:def, :match,
            s(:args,
              s(:arg, :addr)),
            s(:case,
              s(:send,
                s(:ivar, :@pat), :[],
                s(:int, 0)),
              s(:when,
                s(:sym, :all),
                s(:true)),
              s(:when,
                s(:sym, :ip),
                s(:begin,
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :ipaddr,
                          s(:send,
                            s(:const, nil, :IPAddr), :new,
                            s(:send,
                              s(:lvar, :addr), :[],
                              s(:int, 3)))),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:send,
                                s(:ivar, :@pat), :[],
                                s(:int, 1)), :ipv6?),
                            s(:send,
                              s(:lvar, :ipaddr), :ipv4?)),
                          s(:lvasgn, :ipaddr,
                            s(:send,
                              s(:lvar, :ipaddr), :ipv4_mapped)), nil)),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :ArgumentError)), nil,
                        s(:return,
                          s(:false))), nil)),
                  s(:if,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:ivar, :@pat), :[],
                          s(:int, 1)), :include?,
                        s(:lvar, :ipaddr))),
                    s(:true),
                    s(:false)))),
              s(:when,
                s(:sym, :name),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:ivar, :@pat), :[],
                        s(:int, 1)), :=~,
                      s(:send,
                        s(:lvar, :addr), :[],
                        s(:int, 2)))),
                  s(:true),
                  s(:false))),
              s(:false))))),
      s(:class,
        s(:const, nil, :ACLList), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args),
            s(:ivasgn, :@list,
              s(:array))),
          s(:send, nil, :public),
          s(:def, :match,
            s(:args,
              s(:arg, :addr)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@list), :each),
                s(:args,
                  s(:arg, :e)),
                s(:if,
                  s(:send,
                    s(:lvar, :e), :match,
                    s(:lvar, :addr)),
                  s(:return,
                    s(:true)), nil)),
              s(:false))),
          s(:send, nil, :public),
          s(:def, :add,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:ivar, :@list), :push,
              s(:send,
                s(:const, nil, :ACLEntry), :new,
                s(:lvar, :str)))))),
      s(:casgn, nil, :DENY_ALLOW,
        s(:int, 0)),
      s(:casgn, nil, :ALLOW_DENY,
        s(:int, 1)),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :list,
            s(:nil)),
          s(:optarg, :order,
            s(:const, nil, :DENY_ALLOW))),
        s(:begin,
          s(:ivasgn, :@order,
            s(:lvar, :order)),
          s(:ivasgn, :@deny,
            s(:send,
              s(:const, nil, :ACLList), :new)),
          s(:ivasgn, :@allow,
            s(:send,
              s(:const, nil, :ACLList), :new)),
          s(:if,
            s(:lvar, :list),
            s(:send, nil, :install_list,
              s(:lvar, :list)), nil))),
      s(:send, nil, :public),
      s(:def, :allow_socket?,
        s(:args,
          s(:arg, :soc)),
        s(:send, nil, :allow_addr?,
          s(:send,
            s(:lvar, :soc), :peeraddr))),
      s(:send, nil, :public),
      s(:def, :allow_addr?,
        s(:args,
          s(:arg, :addr)),
        s(:case,
          s(:ivar, :@order),
          s(:when,
            s(:const, nil, :DENY_ALLOW),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@allow), :match,
                  s(:lvar, :addr)),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@deny), :match,
                  s(:lvar, :addr)),
                s(:return,
                  s(:false)), nil),
              s(:return,
                s(:true)))),
          s(:when,
            s(:const, nil, :ALLOW_DENY),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@deny), :match,
                  s(:lvar, :addr)),
                s(:return,
                  s(:false)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@allow), :match,
                  s(:lvar, :addr)),
                s(:return,
                  s(:true)), nil),
              s(:return,
                s(:false)))),
          s(:false))),
      s(:send, nil, :public),
      s(:def, :install_list,
        s(:args,
          s(:arg, :list)),
        s(:begin,
          s(:lvasgn, :i,
            s(:int, 0)),
          s(:while,
            s(:send,
              s(:lvar, :i), :<,
              s(:send,
                s(:lvar, :list), :size)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :permission),
                  s(:lvasgn, :domain)),
                s(:send,
                  s(:lvar, :list), :slice,
                  s(:lvar, :i),
                  s(:int, 2))),
              s(:case,
                s(:send,
                  s(:lvar, :permission), :downcase),
                s(:when,
                  s(:str, "allow"),
                  s(:send,
                    s(:ivar, :@allow), :add,
                    s(:lvar, :domain))),
                s(:when,
                  s(:str, "deny"),
                  s(:send,
                    s(:ivar, :@deny), :add,
                    s(:lvar, :domain))),
                s(:send, nil, :raise,
                  s(:dstr,
                    s(:str, "Invalid ACL entry "),
                    s(:begin,
                      s(:lvar, :list))))),
              s(:op_asgn,
                s(:lvasgn, :i), :+,
                s(:int, 2)))))))))
