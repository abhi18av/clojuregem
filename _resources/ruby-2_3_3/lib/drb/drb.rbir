s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "io/wait")),
  s(:send, nil, :require,
    s(:str, "drb/eq")),
  s(:module,
    s(:const, nil, :DRb),
    s(:begin,
      s(:class,
        s(:const, nil, :DRbError),
        s(:const, nil, :RuntimeError), nil),
      s(:class,
        s(:const, nil, :DRbConnError),
        s(:const, nil, :DRbError), nil),
      s(:class,
        s(:const, nil, :DRbIdConv), nil,
        s(:begin,
          s(:def, :to_obj,
            s(:args,
              s(:arg, :ref)),
            s(:send,
              s(:const, nil, :ObjectSpace), :_id2ref,
              s(:lvar, :ref))),
          s(:def, :to_id,
            s(:args,
              s(:arg, :obj)),
            s(:if,
              s(:send,
                s(:lvar, :obj), :nil?),
              s(:nil),
              s(:send,
                s(:lvar, :obj), :__id__))))),
      s(:module,
        s(:const, nil, :DRbUndumped),
        s(:def, :_dump,
          s(:args,
            s(:arg, :dummy)),
          s(:send, nil, :raise,
            s(:const, nil, :TypeError),
            s(:str, "can't dump")))),
      s(:class,
        s(:const, nil, :DRbServerNotFound),
        s(:const, nil, :DRbError), nil),
      s(:class,
        s(:const, nil, :DRbBadURI),
        s(:const, nil, :DRbError), nil),
      s(:class,
        s(:const, nil, :DRbBadScheme),
        s(:const, nil, :DRbError), nil),
      s(:class,
        s(:const, nil, :DRbUnknownError),
        s(:const, nil, :DRbError),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :unknown)),
            s(:begin,
              s(:ivasgn, :@unknown,
                s(:lvar, :unknown)),
              s(:super,
                s(:send,
                  s(:lvar, :unknown), :name)))),
          s(:send, nil, :attr_reader,
            s(:sym, :unknown)),
          s(:defs,
            s(:self), :_load,
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:def, :_dump,
            s(:args,
              s(:arg, :lv)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:ivar, :@unknown))))),
      s(:class,
        s(:const, nil, :DRbRemoteError),
        s(:const, nil, :DRbError),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :error)),
            s(:begin,
              s(:ivasgn, :@reason,
                s(:send,
                  s(:send,
                    s(:lvar, :error), :class), :to_s)),
              s(:super,
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:lvar, :error), :message)),
                  s(:str, " ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :error), :class)),
                  s(:str, ")"))),
              s(:send, nil, :set_backtrace,
                s(:send,
                  s(:lvar, :error), :backtrace)))),
          s(:send, nil, :attr_reader,
            s(:sym, :reason)))),
      s(:class,
        s(:const, nil, :DRbUnknown), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :err),
              s(:arg, :buf)),
            s(:begin,
              s(:case,
                s(:send,
                  s(:lvar, :err), :to_s),
                s(:when,
                  s(:regexp,
                    s(:str, "uninitialized constant (\\S+)"),
                    s(:regopt)),
                  s(:ivasgn, :@name,
                    s(:nth_ref, 1))),
                s(:when,
                  s(:regexp,
                    s(:str, "undefined class/module (\\S+)"),
                    s(:regopt)),
                  s(:ivasgn, :@name,
                    s(:nth_ref, 1))),
                s(:ivasgn, :@name,
                  s(:nil))),
              s(:ivasgn, :@buf,
                s(:lvar, :buf)))),
          s(:send, nil, :attr_reader,
            s(:sym, :name)),
          s(:send, nil, :attr_reader,
            s(:sym, :buf)),
          s(:defs,
            s(:self), :_load,
            s(:args,
              s(:arg, :s)),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:lvar, :s)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NameError),
                    s(:const, nil, :ArgumentError)), nil,
                  s(:send,
                    s(:const, nil, :DRbUnknown), :new,
                    s(:gvar, :$!),
                    s(:lvar, :s))), nil))),
          s(:def, :_dump,
            s(:args,
              s(:arg, :lv)),
            s(:ivar, :@buf)),
          s(:def, :reload,
            s(:args),
            s(:send,
              s(:send,
                s(:self), :class), :_load,
              s(:ivar, :@buf))),
          s(:def, :exception,
            s(:args),
            s(:send,
              s(:const, nil, :DRbUnknownError), :new,
              s(:self))))),
      s(:class,
        s(:const, nil, :DRbArray), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :ary)),
            s(:ivasgn, :@ary,
              s(:block,
                s(:send,
                  s(:lvar, :ary), :collect),
                s(:args,
                  s(:arg, :obj)),
                s(:if,
                  s(:send,
                    s(:lvar, :obj), :kind_of?,
                    s(:const, nil, :DRbUndumped)),
                  s(:send,
                    s(:const, nil, :DRbObject), :new,
                    s(:lvar, :obj)),
                  s(:kwbegin,
                    s(:rescue,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Marshal), :dump,
                          s(:lvar, :obj)),
                        s(:lvar, :obj)),
                      s(:resbody, nil, nil,
                        s(:send,
                          s(:const, nil, :DRbObject), :new,
                          s(:lvar, :obj))), nil)))))),
          s(:defs,
            s(:self), :_load,
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :Marshal), :load,
              s(:lvar, :s))),
          s(:def, :_dump,
            s(:args,
              s(:arg, :lv)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:ivar, :@ary))))),
      s(:class,
        s(:const, nil, :DRbMessage), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :config)),
            s(:begin,
              s(:ivasgn, :@load_limit,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :load_limit))),
              s(:ivasgn, :@argc_limit,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :argc_limit))))),
          s(:def, :dump,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :error,
                s(:false))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :obj), :kind_of?,
                  s(:const, nil, :DRbUndumped)),
                s(:lvasgn, :obj,
                  s(:send, nil, :make_proxy,
                    s(:lvar, :obj),
                    s(:lvar, :error))), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :str,
                    s(:send,
                      s(:const, nil, :Marshal), :dump,
                      s(:lvar, :obj))),
                  s(:resbody, nil, nil,
                    s(:lvasgn, :str,
                      s(:send,
                        s(:const, nil, :Marshal), :dump,
                        s(:send, nil, :make_proxy,
                          s(:lvar, :obj),
                          s(:lvar, :error))))), nil)),
              s(:send,
                s(:send,
                  s(:array,
                    s(:send,
                      s(:lvar, :str), :size)), :pack,
                  s(:str, "N")), :+,
                s(:lvar, :str)))),
          s(:def, :load,
            s(:args,
              s(:arg, :soc)),
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :sz,
                    s(:send,
                      s(:lvar, :soc), :read,
                      s(:int, 4))),
                  s(:resbody, nil, nil,
                    s(:send, nil, :raise,
                      s(:const, nil, :DRbConnError),
                      s(:send,
                        s(:gvar, :$!), :message),
                      s(:send,
                        s(:gvar, :$!), :backtrace))), nil)),
              s(:if,
                s(:send,
                  s(:lvar, :sz), :nil?),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:str, "connection closed")), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :sz), :size), :<,
                  s(:int, 4)),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:str, "premature header")), nil),
              s(:lvasgn, :sz,
                s(:send,
                  s(:send,
                    s(:lvar, :sz), :unpack,
                    s(:str, "N")), :[],
                  s(:int, 0))),
              s(:if,
                s(:send,
                  s(:ivar, :@load_limit), :<,
                  s(:lvar, :sz)),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:dstr,
                    s(:str, "too large packet "),
                    s(:begin,
                      s(:lvar, :sz)))), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :str,
                    s(:send,
                      s(:lvar, :soc), :read,
                      s(:lvar, :sz))),
                  s(:resbody, nil, nil,
                    s(:send, nil, :raise,
                      s(:const, nil, :DRbConnError),
                      s(:send,
                        s(:gvar, :$!), :message),
                      s(:send,
                        s(:gvar, :$!), :backtrace))), nil)),
              s(:if,
                s(:send,
                  s(:lvar, :str), :nil?),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:str, "connection closed")), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :str), :size), :<,
                  s(:lvar, :sz)),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:str, "premature marshal format(can't read)")), nil),
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :DRb), :mutex), :synchronize),
                s(:args),
                s(:kwbegin,
                  s(:ensure,
                    s(:rescue,
                      s(:begin,
                        s(:lvasgn, :save,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Thread), :current), :[],
                            s(:sym, :drb_untaint))),
                        s(:send,
                          s(:send,
                            s(:const, nil, :Thread), :current), :[]=,
                          s(:sym, :drb_untaint),
                          s(:array)),
                        s(:send,
                          s(:const, nil, :Marshal), :load,
                          s(:lvar, :str))),
                      s(:resbody,
                        s(:array,
                          s(:const, nil, :NameError),
                          s(:const, nil, :ArgumentError)), nil,
                        s(:send,
                          s(:const, nil, :DRbUnknown), :new,
                          s(:gvar, :$!),
                          s(:lvar, :str))), nil),
                    s(:begin,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Thread), :current), :[],
                            s(:sym, :drb_untaint)), :each),
                        s(:args,
                          s(:arg, :x)),
                        s(:send,
                          s(:lvar, :x), :untaint)),
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[]=,
                        s(:sym, :drb_untaint),
                        s(:lvar, :save)))))))),
          s(:def, :send_request,
            s(:args,
              s(:arg, :stream),
              s(:arg, :ref),
              s(:arg, :msg_id),
              s(:arg, :arg),
              s(:arg, :b)),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :ary,
                  s(:array)),
                s(:send,
                  s(:lvar, :ary), :push,
                  s(:send, nil, :dump,
                    s(:send,
                      s(:lvar, :ref), :__drbref))),
                s(:send,
                  s(:lvar, :ary), :push,
                  s(:send, nil, :dump,
                    s(:send,
                      s(:lvar, :msg_id), :id2name))),
                s(:send,
                  s(:lvar, :ary), :push,
                  s(:send, nil, :dump,
                    s(:send,
                      s(:lvar, :arg), :length))),
                s(:block,
                  s(:send,
                    s(:lvar, :arg), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :ary), :push,
                    s(:send, nil, :dump,
                      s(:lvar, :e)))),
                s(:send,
                  s(:lvar, :ary), :push,
                  s(:send, nil, :dump,
                    s(:lvar, :b))),
                s(:send,
                  s(:lvar, :stream), :write,
                  s(:send,
                    s(:lvar, :ary), :join,
                    s(:str, "")))),
              s(:resbody, nil, nil,
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:send,
                    s(:gvar, :$!), :message),
                  s(:send,
                    s(:gvar, :$!), :backtrace))), nil)),
          s(:def, :recv_request,
            s(:args,
              s(:arg, :stream)),
            s(:begin,
              s(:lvasgn, :ref,
                s(:send, nil, :load,
                  s(:lvar, :stream))),
              s(:lvasgn, :ro,
                s(:send,
                  s(:const, nil, :DRb), :to_obj,
                  s(:lvar, :ref))),
              s(:lvasgn, :msg,
                s(:send, nil, :load,
                  s(:lvar, :stream))),
              s(:lvasgn, :argc,
                s(:send, nil, :load,
                  s(:lvar, :stream))),
              s(:if,
                s(:send,
                  s(:ivar, :@argc_limit), :<,
                  s(:lvar, :argc)),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:str, "too many arguments")), nil),
              s(:lvasgn, :argv,
                s(:send,
                  s(:const, nil, :Array), :new,
                  s(:lvar, :argc),
                  s(:nil))),
              s(:block,
                s(:send,
                  s(:lvar, :argc), :times),
                s(:args,
                  s(:arg, :n)),
                s(:send,
                  s(:lvar, :argv), :[]=,
                  s(:lvar, :n),
                  s(:send, nil, :load,
                    s(:lvar, :stream)))),
              s(:lvasgn, :block,
                s(:send, nil, :load,
                  s(:lvar, :stream))),
              s(:return,
                s(:lvar, :ro),
                s(:lvar, :msg),
                s(:lvar, :argv),
                s(:lvar, :block)))),
          s(:def, :send_reply,
            s(:args,
              s(:arg, :stream),
              s(:arg, :succ),
              s(:arg, :result)),
            s(:rescue,
              s(:send,
                s(:lvar, :stream), :write,
                s(:send,
                  s(:send, nil, :dump,
                    s(:lvar, :succ)), :+,
                  s(:send, nil, :dump,
                    s(:lvar, :result),
                    s(:send,
                      s(:lvar, :succ), :!)))),
              s(:resbody, nil, nil,
                s(:send, nil, :raise,
                  s(:const, nil, :DRbConnError),
                  s(:send,
                    s(:gvar, :$!), :message),
                  s(:send,
                    s(:gvar, :$!), :backtrace))), nil)),
          s(:def, :recv_reply,
            s(:args,
              s(:arg, :stream)),
            s(:begin,
              s(:lvasgn, :succ,
                s(:send, nil, :load,
                  s(:lvar, :stream))),
              s(:lvasgn, :result,
                s(:send, nil, :load,
                  s(:lvar, :stream))),
              s(:array,
                s(:lvar, :succ),
                s(:lvar, :result)))),
          s(:send, nil, :private),
          s(:def, :make_proxy,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :error,
                s(:false))),
            s(:if,
              s(:lvar, :error),
              s(:send,
                s(:const, nil, :DRbRemoteError), :new,
                s(:lvar, :obj)),
              s(:send,
                s(:const, nil, :DRbObject), :new,
                s(:lvar, :obj)))))),
      s(:module,
        s(:const, nil, :DRbProtocol),
        s(:begin,
          s(:def, :add_protocol,
            s(:args,
              s(:arg, :prot)),
            s(:send,
              s(:ivar, :@protocol), :push,
              s(:lvar, :prot))),
          s(:send, nil, :module_function,
            s(:sym, :add_protocol)),
          s(:def, :open,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config),
              s(:optarg, :first,
                s(:true))),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@protocol), :each),
                s(:args,
                  s(:arg, :prot)),
                s(:kwbegin,
                  s(:rescue,
                    s(:return,
                      s(:send,
                        s(:lvar, :prot), :open,
                        s(:lvar, :uri),
                        s(:lvar, :config))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :DRbBadScheme)), nil, nil),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :DRbConnError)), nil,
                      s(:send, nil, :raise,
                        s(:gvar, :$!))),
                    s(:resbody, nil, nil,
                      s(:send, nil, :raise,
                        s(:const, nil, :DRbConnError),
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :uri)),
                          s(:str, " - "),
                          s(:begin,
                            s(:send,
                              s(:gvar, :$!), :inspect))))), nil))),
              s(:if,
                s(:and,
                  s(:lvar, :first),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :config), :[],
                        s(:sym, :auto_load)), :!=,
                      s(:false)))),
                s(:begin,
                  s(:send, nil, :auto_load,
                    s(:lvar, :uri)),
                  s(:return,
                    s(:send, nil, :open,
                      s(:lvar, :uri),
                      s(:lvar, :config),
                      s(:false)))), nil),
              s(:send, nil, :raise,
                s(:const, nil, :DRbBadURI),
                s(:send,
                  s(:str, "can't parse uri:"), :+,
                  s(:lvar, :uri))))),
          s(:send, nil, :module_function,
            s(:sym, :open)),
          s(:def, :open_server,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config),
              s(:optarg, :first,
                s(:true))),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@protocol), :each),
                s(:args,
                  s(:arg, :prot)),
                s(:kwbegin,
                  s(:rescue,
                    s(:return,
                      s(:send,
                        s(:lvar, :prot), :open_server,
                        s(:lvar, :uri),
                        s(:lvar, :config))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :DRbBadScheme)), nil, nil), nil))),
              s(:if,
                s(:and,
                  s(:lvar, :first),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :config), :[],
                        s(:sym, :auto_load)), :!=,
                      s(:false)))),
                s(:begin,
                  s(:send, nil, :auto_load,
                    s(:lvar, :uri)),
                  s(:return,
                    s(:send, nil, :open_server,
                      s(:lvar, :uri),
                      s(:lvar, :config),
                      s(:false)))), nil),
              s(:send, nil, :raise,
                s(:const, nil, :DRbBadURI),
                s(:send,
                  s(:str, "can't parse uri:"), :+,
                  s(:lvar, :uri))))),
          s(:send, nil, :module_function,
            s(:sym, :open_server)),
          s(:def, :uri_option,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config),
              s(:optarg, :first,
                s(:true))),
            s(:begin,
              s(:block,
                s(:send,
                  s(:ivar, :@protocol), :each),
                s(:args,
                  s(:arg, :prot)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :uri),
                          s(:lvasgn, :opt)),
                        s(:send,
                          s(:lvar, :prot), :uri_option,
                          s(:lvar, :uri),
                          s(:lvar, :config))),
                      s(:return,
                        s(:lvar, :uri),
                        s(:lvar, :opt))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :DRbBadScheme)), nil, nil), nil))),
              s(:if,
                s(:and,
                  s(:lvar, :first),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :config), :[],
                        s(:sym, :auto_load)), :!=,
                      s(:false)))),
                s(:begin,
                  s(:send, nil, :auto_load,
                    s(:lvar, :uri)),
                  s(:return,
                    s(:send, nil, :uri_option,
                      s(:lvar, :uri),
                      s(:lvar, :config),
                      s(:false)))), nil),
              s(:send, nil, :raise,
                s(:const, nil, :DRbBadURI),
                s(:send,
                  s(:str, "can't parse uri:"), :+,
                  s(:lvar, :uri))))),
          s(:send, nil, :module_function,
            s(:sym, :uri_option)),
          s(:def, :auto_load,
            s(:args,
              s(:arg, :uri)),
            s(:if,
              s(:send,
                s(:lvar, :uri), :=~,
                s(:regexp,
                  s(:str, "^drb([a-z0-9]+):"),
                  s(:regopt))),
              s(:rescue,
                s(:send, nil, :require,
                  s(:dstr,
                    s(:str, "drb/"),
                    s(:begin,
                      s(:nth_ref, 1)))),
                s(:resbody, nil, nil,
                  s(:nil)), nil), nil)),
          s(:send, nil, :module_function,
            s(:sym, :auto_load)))),
      s(:class,
        s(:const, nil, :DRbTCPSocket), nil,
        s(:begin,
          s(:send, nil, :private),
          s(:defs,
            s(:self), :parse_uri,
            s(:args,
              s(:arg, :uri)),
            s(:if,
              s(:send,
                s(:lvar, :uri), :=~,
                s(:regexp,
                  s(:str, "^druby://(.*?):(\\d+)(\\?(.*))?$"),
                  s(:regopt))),
              s(:begin,
                s(:lvasgn, :host,
                  s(:nth_ref, 1)),
                s(:lvasgn, :port,
                  s(:send,
                    s(:nth_ref, 2), :to_i)),
                s(:lvasgn, :option,
                  s(:nth_ref, 4)),
                s(:array,
                  s(:lvar, :host),
                  s(:lvar, :port),
                  s(:lvar, :option))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :uri), :=~,
                    s(:regexp,
                      s(:str, "^druby:"),
                      s(:regopt))), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :DRbBadScheme),
                    s(:lvar, :uri))),
                s(:send, nil, :raise,
                  s(:const, nil, :DRbBadURI),
                  s(:send,
                    s(:str, "can't parse uri:"), :+,
                    s(:lvar, :uri)))))),
          s(:send, nil, :public),
          s(:defs,
            s(:self), :open,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port)),
                s(:send, nil, :parse_uri,
                  s(:lvar, :uri))),
              s(:send,
                s(:lvar, :host), :untaint),
              s(:send,
                s(:lvar, :port), :untaint),
              s(:lvasgn, :soc,
                s(:send,
                  s(:const, nil, :TCPSocket), :open,
                  s(:lvar, :host),
                  s(:lvar, :port))),
              s(:send,
                s(:self), :new,
                s(:lvar, :uri),
                s(:lvar, :soc),
                s(:lvar, :config)))),
          s(:defs,
            s(:self), :getservername,
            s(:args),
            s(:begin,
              s(:lvasgn, :host,
                s(:send,
                  s(:const, nil, :Socket), :gethostname)),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Socket), :gethostbyname,
                      s(:lvar, :host)), :[],
                    s(:int, 0)),
                  s(:resbody, nil, nil,
                    s(:str, "localhost")), nil)))),
          s(:defs,
            s(:self), :open_server_inaddr_any,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :infos,
                s(:send,
                  s(:const, nil, :Socket), :getaddrinfo,
                  s(:lvar, :host),
                  s(:nil),
                  s(:const,
                    s(:const, nil, :Socket), :AF_UNSPEC),
                  s(:const,
                    s(:const, nil, :Socket), :SOCK_STREAM),
                  s(:int, 0),
                  s(:const,
                    s(:const, nil, :Socket), :AI_PASSIVE))),
              s(:lvasgn, :families,
                s(:send,
                  s(:const, nil, :Hash), :[],
                  s(:splat,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:lvar, :infos), :collect),
                            s(:args,
                              s(:arg, :af),
                              s(:restarg, :_)),
                            s(:lvar, :af)), :uniq), :zip,
                        s(:array)), :flatten)))),
              s(:if,
                s(:send,
                  s(:lvar, :families), :has_key?,
                  s(:str, "AF_INET")),
                s(:return,
                  s(:send,
                    s(:const, nil, :TCPServer), :open,
                    s(:str, "0.0.0.0"),
                    s(:lvar, :port))), nil),
              s(:if,
                s(:send,
                  s(:lvar, :families), :has_key?,
                  s(:str, "AF_INET6")),
                s(:return,
                  s(:send,
                    s(:const, nil, :TCPServer), :open,
                    s(:str, "::"),
                    s(:lvar, :port))), nil),
              s(:return,
                s(:send,
                  s(:const, nil, :TCPServer), :open,
                  s(:lvar, :port))))),
          s(:defs,
            s(:self), :open_server,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config)),
            s(:begin,
              s(:if,
                s(:lvar, :uri), nil,
                s(:lvasgn, :uri,
                  s(:str, "druby://:0"))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port),
                  s(:lvasgn, :_)),
                s(:send, nil, :parse_uri,
                  s(:lvar, :uri))),
              s(:lvasgn, :config,
                s(:send,
                  s(:hash,
                    s(:pair,
                      s(:sym, :tcp_original_host),
                      s(:lvar, :host))), :update,
                  s(:lvar, :config))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :host), :size), :==,
                  s(:int, 0)),
                s(:begin,
                  s(:lvasgn, :host,
                    s(:send, nil, :getservername)),
                  s(:lvasgn, :soc,
                    s(:send, nil, :open_server_inaddr_any,
                      s(:lvar, :host),
                      s(:lvar, :port)))),
                s(:lvasgn, :soc,
                  s(:send,
                    s(:const, nil, :TCPServer), :open,
                    s(:lvar, :host),
                    s(:lvar, :port)))),
              s(:if,
                s(:send,
                  s(:lvar, :port), :==,
                  s(:int, 0)),
                s(:lvasgn, :port,
                  s(:send,
                    s(:send,
                      s(:lvar, :soc), :addr), :[],
                    s(:int, 1))), nil),
              s(:send,
                s(:lvar, :config), :[]=,
                s(:sym, :tcp_port),
                s(:lvar, :port)),
              s(:lvasgn, :uri,
                s(:dstr,
                  s(:str, "druby://"),
                  s(:begin,
                    s(:lvar, :host)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :port)))),
              s(:send,
                s(:self), :new,
                s(:lvar, :uri),
                s(:lvar, :soc),
                s(:lvar, :config)))),
          s(:defs,
            s(:self), :uri_option,
            s(:args,
              s(:arg, :uri),
              s(:arg, :config)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :host),
                  s(:lvasgn, :port),
                  s(:lvasgn, :option)),
                s(:send, nil, :parse_uri,
                  s(:lvar, :uri))),
              s(:return,
                s(:dstr,
                  s(:str, "druby://"),
                  s(:begin,
                    s(:lvar, :host)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :port))),
                s(:lvar, :option)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :uri),
              s(:arg, :soc),
              s(:optarg, :config,
                s(:hash))),
            s(:begin,
              s(:ivasgn, :@uri,
                s(:lvar, :uri)),
              s(:ivasgn, :@socket,
                s(:lvar, :soc)),
              s(:ivasgn, :@config,
                s(:lvar, :config)),
              s(:ivasgn, :@acl,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:sym, :tcp_acl))),
              s(:ivasgn, :@msg,
                s(:send,
                  s(:const, nil, :DRbMessage), :new,
                  s(:lvar, :config))),
              s(:send, nil, :set_sockopt,
                s(:ivar, :@socket)),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@shutdown_pipe_r),
                  s(:ivasgn, :@shutdown_pipe_w)),
                s(:send,
                  s(:const, nil, :IO), :pipe)))),
          s(:send, nil, :attr_reader,
            s(:sym, :uri)),
          s(:def, :peeraddr,
            s(:args),
            s(:send,
              s(:ivar, :@socket), :peeraddr)),
          s(:def, :stream,
            s(:args),
            s(:ivar, :@socket)),
          s(:def, :send_request,
            s(:args,
              s(:arg, :ref),
              s(:arg, :msg_id),
              s(:arg, :arg),
              s(:arg, :b)),
            s(:send,
              s(:ivar, :@msg), :send_request,
              s(:send, nil, :stream),
              s(:lvar, :ref),
              s(:lvar, :msg_id),
              s(:lvar, :arg),
              s(:lvar, :b))),
          s(:def, :recv_request,
            s(:args),
            s(:send,
              s(:ivar, :@msg), :recv_request,
              s(:send, nil, :stream))),
          s(:def, :send_reply,
            s(:args,
              s(:arg, :succ),
              s(:arg, :result)),
            s(:send,
              s(:ivar, :@msg), :send_reply,
              s(:send, nil, :stream),
              s(:lvar, :succ),
              s(:lvar, :result))),
          s(:def, :recv_reply,
            s(:args),
            s(:send,
              s(:ivar, :@msg), :recv_reply,
              s(:send, nil, :stream))),
          s(:send, nil, :public),
          s(:def, :close,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@socket),
                s(:begin,
                  s(:send,
                    s(:ivar, :@socket), :close),
                  s(:ivasgn, :@socket,
                    s(:nil))), nil),
              s(:send, nil, :close_shutdown_pipe))),
          s(:def, :close_shutdown_pipe,
            s(:args),
            s(:begin,
              s(:if,
                s(:and,
                  s(:ivar, :@shutdown_pipe_r),
                  s(:send,
                    s(:send,
                      s(:ivar, :@shutdown_pipe_r), :closed?), :!)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@shutdown_pipe_r), :close),
                  s(:ivasgn, :@shutdown_pipe_r,
                    s(:nil))), nil),
              s(:if,
                s(:and,
                  s(:ivar, :@shutdown_pipe_w),
                  s(:send,
                    s(:send,
                      s(:ivar, :@shutdown_pipe_w), :closed?), :!)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@shutdown_pipe_w), :close),
                  s(:ivasgn, :@shutdown_pipe_w,
                    s(:nil))), nil))),
          s(:send, nil, :private,
            s(:sym, :close_shutdown_pipe)),
          s(:def, :accept,
            s(:args),
            s(:begin,
              s(:while,
                s(:true),
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send, nil, :accept_or_shutdown)),
                  s(:if,
                    s(:lvar, :s), nil,
                    s(:return,
                      s(:nil))),
                  s(:if,
                    s(:begin,
                      s(:if,
                        s(:ivar, :@acl),
                        s(:send,
                          s(:ivar, :@acl), :allow_socket?,
                          s(:lvar, :s)),
                        s(:true))),
                    s(:break), nil),
                  s(:send,
                    s(:lvar, :s), :close))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@config), :[],
                        s(:sym, :tcp_original_host)), :to_s), :size), :==,
                  s(:int, 0)),
                s(:lvasgn, :uri,
                  s(:dstr,
                    s(:str, "druby://"),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :addr), :[],
                        s(:int, 3))),
                    s(:str, ":"),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@config), :[],
                        s(:sym, :tcp_port))))),
                s(:lvasgn, :uri,
                  s(:ivar, :@uri))),
              s(:send,
                s(:send,
                  s(:self), :class), :new,
                s(:lvar, :uri),
                s(:lvar, :s),
                s(:ivar, :@config)))),
          s(:def, :accept_or_shutdown,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :readables)),
                s(:send,
                  s(:const, nil, :IO), :select,
                  s(:array,
                    s(:ivar, :@socket),
                    s(:ivar, :@shutdown_pipe_r)))),
              s(:if,
                s(:send,
                  s(:lvar, :readables), :include?,
                  s(:ivar, :@shutdown_pipe_r)),
                s(:return,
                  s(:nil)), nil),
              s(:send,
                s(:ivar, :@socket), :accept))),
          s(:send, nil, :private,
            s(:sym, :accept_or_shutdown)),
          s(:def, :shutdown,
            s(:args),
            s(:if,
              s(:and,
                s(:ivar, :@shutdown_pipe_w),
                s(:send,
                  s(:send,
                    s(:ivar, :@shutdown_pipe_w), :closed?), :!)),
              s(:send,
                s(:ivar, :@shutdown_pipe_w), :close), nil)),
          s(:def, :alive?,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@socket), nil,
                s(:return,
                  s(:false))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@socket), :to_io), :wait_readable,
                  s(:int, 0)),
                s(:begin,
                  s(:send, nil, :close),
                  s(:return,
                    s(:false))), nil),
              s(:true))),
          s(:def, :set_sockopt,
            s(:args,
              s(:arg, :soc)),
            s(:send,
              s(:lvar, :soc), :setsockopt,
              s(:const,
                s(:const, nil, :Socket), :IPPROTO_TCP),
              s(:const,
                s(:const, nil, :Socket), :TCP_NODELAY),
              s(:int, 1))))),
      s(:module,
        s(:const, nil, :DRbProtocol),
        s(:ivasgn, :@protocol,
          s(:array,
            s(:const, nil, :DRbTCPSocket)))),
      s(:class,
        s(:const, nil, :DRbURIOption), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :option)),
            s(:ivasgn, :@option,
              s(:send,
                s(:lvar, :option), :to_s))),
          s(:send, nil, :attr_reader,
            s(:sym, :option)),
          s(:def, :to_s,
            s(:args),
            s(:ivar, :@option)),
          s(:def, :==,
            s(:args,
              s(:arg, :other)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :DRbURIOption), :===,
                  s(:lvar, :other)), nil,
                s(:return,
                  s(:false))),
              s(:send,
                s(:ivar, :@option), :==,
                s(:send,
                  s(:lvar, :other), :option)))),
          s(:def, :hash,
            s(:args),
            s(:send,
              s(:ivar, :@option), :hash)),
          s(:alias,
            s(:sym, :eql?),
            s(:sym, :==)))),
      s(:class,
        s(:const, nil, :DRbObject), nil,
        s(:begin,
          s(:defs,
            s(:self), :_load,
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :uri),
                  s(:lvasgn, :ref)),
                s(:send,
                  s(:const, nil, :Marshal), :load,
                  s(:lvar, :s))),
              s(:if,
                s(:send,
                  s(:const, nil, :DRb), :here?,
                  s(:lvar, :uri)),
                s(:begin,
                  s(:lvasgn, :obj,
                    s(:send,
                      s(:const, nil, :DRb), :to_obj,
                      s(:lvar, :ref))),
                  s(:if,
                    s(:begin,
                      s(:and,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:lvar, :obj), :tainted?), :!)),
                        s(:send,
                          s(:send,
                            s(:const, nil, :Thread), :current), :[],
                          s(:sym, :drb_untaint)))),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[],
                        s(:sym, :drb_untaint)), :push,
                      s(:lvar, :obj)), nil),
                  s(:return,
                    s(:lvar, :obj))), nil),
              s(:send,
                s(:self), :new_with,
                s(:lvar, :uri),
                s(:lvar, :ref)))),
          s(:defs,
            s(:self), :new_with,
            s(:args,
              s(:arg, :uri),
              s(:arg, :ref)),
            s(:begin,
              s(:lvasgn, :it,
                s(:send,
                  s(:self), :allocate)),
              s(:send,
                s(:lvar, :it), :instance_variable_set,
                s(:sym, :@uri),
                s(:lvar, :uri)),
              s(:send,
                s(:lvar, :it), :instance_variable_set,
                s(:sym, :@ref),
                s(:lvar, :ref)),
              s(:lvar, :it))),
          s(:defs,
            s(:self), :new_with_uri,
            s(:args,
              s(:arg, :uri)),
            s(:send,
              s(:self), :new,
              s(:nil),
              s(:lvar, :uri))),
          s(:def, :_dump,
            s(:args,
              s(:arg, :lv)),
            s(:send,
              s(:const, nil, :Marshal), :dump,
              s(:array,
                s(:ivar, :@uri),
                s(:ivar, :@ref)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :obj),
              s(:optarg, :uri,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@uri,
                s(:nil)),
              s(:ivasgn, :@ref,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:lvar, :obj), :nil?),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :uri), :nil?),
                    s(:return), nil),
                  s(:masgn,
                    s(:mlhs,
                      s(:ivasgn, :@uri),
                      s(:lvasgn, :option)),
                    s(:send,
                      s(:const, nil, :DRbProtocol), :uri_option,
                      s(:lvar, :uri),
                      s(:send,
                        s(:const, nil, :DRb), :config))),
                  s(:if,
                    s(:send,
                      s(:lvar, :option), :nil?), nil,
                    s(:ivasgn, :@ref,
                      s(:send,
                        s(:const, nil, :DRbURIOption), :new,
                        s(:lvar, :option))))),
                s(:begin,
                  s(:ivasgn, :@uri,
                    s(:if,
                      s(:lvar, :uri),
                      s(:lvar, :uri),
                      s(:begin,
                        s(:rescue,
                          s(:send,
                            s(:const, nil, :DRb), :uri),
                          s(:resbody, nil, nil,
                            s(:nil)), nil)))),
                  s(:ivasgn, :@ref,
                    s(:if,
                      s(:lvar, :obj),
                      s(:send,
                        s(:const, nil, :DRb), :to_id,
                        s(:lvar, :obj)),
                      s(:nil))))))),
          s(:def, :__drburi,
            s(:args),
            s(:ivar, :@uri)),
          s(:def, :__drbref,
            s(:args),
            s(:ivar, :@ref)),
          s(:undef,
            s(:sym, :to_s)),
          s(:if,
            s(:send, nil, :respond_to?,
              s(:sym, :to_a)),
            s(:undef,
              s(:sym, :to_a)), nil),
          s(:def, :respond_to?,
            s(:args,
              s(:arg, :msg_id),
              s(:optarg, :priv,
                s(:false))),
            s(:case,
              s(:lvar, :msg_id),
              s(:when,
                s(:sym, :_dump),
                s(:true)),
              s(:when,
                s(:sym, :marshal_dump),
                s(:false)),
              s(:send, nil, :method_missing,
                s(:sym, :respond_to?),
                s(:lvar, :msg_id),
                s(:lvar, :priv)))),
          s(:def, :method_missing,
            s(:args,
              s(:arg, :msg_id),
              s(:restarg, :a),
              s(:blockarg, :b)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :DRb), :here?,
                  s(:ivar, :@uri)),
                s(:begin,
                  s(:lvasgn, :obj,
                    s(:send,
                      s(:const, nil, :DRb), :to_obj,
                      s(:ivar, :@ref))),
                  s(:send,
                    s(:send,
                      s(:const, nil, :DRb), :current_server), :check_insecure_method,
                    s(:lvar, :obj),
                    s(:lvar, :msg_id)),
                  s(:return,
                    s(:send,
                      s(:lvar, :obj), :__send__,
                      s(:lvar, :msg_id),
                      s(:splat,
                        s(:lvar, :a)),
                      s(:block_pass,
                        s(:lvar, :b))))), nil),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :succ),
                  s(:lvasgn, :result)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:self), :class), :with_friend,
                    s(:ivar, :@uri)),
                  s(:args),
                  s(:block,
                    s(:send,
                      s(:const, nil, :DRbConn), :open,
                      s(:ivar, :@uri)),
                    s(:args,
                      s(:arg, :conn)),
                    s(:send,
                      s(:lvar, :conn), :send_message,
                      s(:self),
                      s(:lvar, :msg_id),
                      s(:lvar, :a),
                      s(:lvar, :b))))),
              s(:if,
                s(:lvar, :succ),
                s(:return,
                  s(:lvar, :result)),
                s(:if,
                  s(:send,
                    s(:const, nil, :DRbUnknown), :===,
                    s(:lvar, :result)),
                  s(:send, nil, :raise,
                    s(:lvar, :result)),
                  s(:begin,
                    s(:lvasgn, :bt,
                      s(:send,
                        s(:send,
                          s(:self), :class), :prepare_backtrace,
                        s(:ivar, :@uri),
                        s(:lvar, :result))),
                    s(:send,
                      s(:lvar, :result), :set_backtrace,
                      s(:send,
                        s(:lvar, :bt), :+,
                        s(:send, nil, :caller))),
                    s(:send, nil, :raise,
                      s(:lvar, :result))))))),
          s(:defs,
            s(:self), :with_friend,
            s(:args,
              s(:arg, :uri)),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :friend,
                  s(:send,
                    s(:const, nil, :DRb), :fetch_server,
                    s(:lvar, :uri))),
                s(:if,
                  s(:lvar, :friend), nil,
                  s(:return,
                    s(:yield))),
                s(:lvasgn, :save,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:str, "DRb"))),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[]=,
                  s(:str, "DRb"),
                  s(:hash,
                    s(:pair,
                      s(:str, "server"),
                      s(:lvar, :friend)))),
                s(:return,
                  s(:yield))),
              s(:if,
                s(:lvar, :friend),
                s(:send,
                  s(:send,
                    s(:const, nil, :Thread), :current), :[]=,
                  s(:str, "DRb"),
                  s(:lvar, :save)), nil))),
          s(:defs,
            s(:self), :prepare_backtrace,
            s(:args,
              s(:arg, :uri),
              s(:arg, :result)),
            s(:begin,
              s(:lvasgn, :prefix,
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :uri)),
                  s(:str, ") "))),
              s(:lvasgn, :bt,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :result), :backtrace), :each),
                s(:args,
                  s(:arg, :x)),
                s(:begin,
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "`__send__'$"),
                        s(:regopt)),
                      s(:lvar, :x)),
                    s(:break), nil),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "^\\(druby://"),
                        s(:regopt)),
                      s(:lvar, :x)),
                    s(:send,
                      s(:lvar, :bt), :push,
                      s(:lvar, :x)),
                    s(:send,
                      s(:lvar, :bt), :push,
                      s(:send,
                        s(:lvar, :prefix), :+,
                        s(:lvar, :x)))))),
              s(:lvar, :bt))),
          s(:def, :pretty_print,
            s(:args,
              s(:arg, :q)),
            s(:send,
              s(:lvar, :q), :pp_object,
              s(:self))),
          s(:def, :pretty_print_cycle,
            s(:args,
              s(:arg, :q)),
            s(:block,
              s(:send,
                s(:lvar, :q), :object_address_group,
                s(:self)),
              s(:args),
              s(:begin,
                s(:send,
                  s(:lvar, :q), :breakable),
                s(:send,
                  s(:lvar, :q), :text,
                  s(:str, "..."))))))),
      s(:class,
        s(:const, nil, :DRbConn), nil,
        s(:begin,
          s(:casgn, nil, :POOL_SIZE,
            s(:int, 16)),
          s(:ivasgn, :@mutex,
            s(:send,
              s(:const, nil, :Mutex), :new)),
          s(:ivasgn, :@pool,
            s(:array)),
          s(:defs,
            s(:self), :open,
            s(:args,
              s(:arg, :remote_uri)),
            s(:kwbegin,
              s(:ensure,
                s(:begin,
                  s(:lvasgn, :conn,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:ivar, :@mutex), :synchronize),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :new_pool,
                        s(:array)),
                      s(:block,
                        s(:send,
                          s(:ivar, :@pool), :each),
                        s(:args,
                          s(:arg, :c)),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:lvar, :conn), :nil?),
                            s(:send,
                              s(:send,
                                s(:lvar, :c), :uri), :==,
                              s(:lvar, :remote_uri))),
                          s(:if,
                            s(:send,
                              s(:lvar, :c), :alive?),
                            s(:lvasgn, :conn,
                              s(:lvar, :c)), nil),
                          s(:send,
                            s(:lvar, :new_pool), :push,
                            s(:lvar, :c)))),
                      s(:ivasgn, :@pool,
                        s(:lvar, :new_pool)))),
                  s(:if,
                    s(:lvar, :conn), nil,
                    s(:lvasgn, :conn,
                      s(:send,
                        s(:self), :new,
                        s(:lvar, :remote_uri)))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :succ),
                      s(:lvasgn, :result)),
                    s(:yield,
                      s(:lvar, :conn))),
                  s(:return,
                    s(:lvar, :succ),
                    s(:lvar, :result))),
                s(:if,
                  s(:lvar, :conn),
                  s(:if,
                    s(:lvar, :succ),
                    s(:block,
                      s(:send,
                        s(:ivar, :@mutex), :synchronize),
                      s(:args),
                      s(:begin,
                        s(:send,
                          s(:ivar, :@pool), :unshift,
                          s(:lvar, :conn)),
                        s(:while,
                          s(:send,
                            s(:send,
                              s(:ivar, :@pool), :size), :>,
                            s(:const, nil, :POOL_SIZE)),
                          s(:send,
                            s(:send,
                              s(:ivar, :@pool), :pop), :close)))),
                    s(:send,
                      s(:lvar, :conn), :close)), nil)))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :remote_uri)),
            s(:begin,
              s(:ivasgn, :@uri,
                s(:lvar, :remote_uri)),
              s(:ivasgn, :@protocol,
                s(:send,
                  s(:const, nil, :DRbProtocol), :open,
                  s(:lvar, :remote_uri),
                  s(:send,
                    s(:const, nil, :DRb), :config))))),
          s(:send, nil, :attr_reader,
            s(:sym, :uri)),
          s(:def, :send_message,
            s(:args,
              s(:arg, :ref),
              s(:arg, :msg_id),
              s(:arg, :arg),
              s(:arg, :block)),
            s(:begin,
              s(:send,
                s(:ivar, :@protocol), :send_request,
                s(:lvar, :ref),
                s(:lvar, :msg_id),
                s(:lvar, :arg),
                s(:lvar, :block)),
              s(:send,
                s(:ivar, :@protocol), :recv_reply))),
          s(:def, :close,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@protocol), :close),
              s(:ivasgn, :@protocol,
                s(:nil)))),
          s(:def, :alive?,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@protocol), nil,
                s(:return,
                  s(:false))),
              s(:send,
                s(:ivar, :@protocol), :alive?))))),
      s(:class,
        s(:const, nil, :DRbServer), nil,
        s(:begin,
          s(:cvasgn, :@@acl,
            s(:nil)),
          s(:cvasgn, :@@idconv,
            s(:send,
              s(:const, nil, :DRbIdConv), :new)),
          s(:cvasgn, :@@secondary_server,
            s(:nil)),
          s(:cvasgn, :@@argc_limit,
            s(:int, 256)),
          s(:cvasgn, :@@load_limit,
            s(:send,
              s(:int, 256), :*,
              s(:int, 102400))),
          s(:cvasgn, :@@verbose,
            s(:false)),
          s(:cvasgn, :@@safe_level,
            s(:int, 0)),
          s(:defs,
            s(:self), :default_argc_limit,
            s(:args,
              s(:arg, :argc)),
            s(:cvasgn, :@@argc_limit,
              s(:lvar, :argc))),
          s(:defs,
            s(:self), :default_load_limit,
            s(:args,
              s(:arg, :sz)),
            s(:cvasgn, :@@load_limit,
              s(:lvar, :sz))),
          s(:defs,
            s(:self), :default_acl,
            s(:args,
              s(:arg, :acl)),
            s(:cvasgn, :@@acl,
              s(:lvar, :acl))),
          s(:defs,
            s(:self), :default_id_conv,
            s(:args,
              s(:arg, :idconv)),
            s(:cvasgn, :@@idconv,
              s(:lvar, :idconv))),
          s(:defs,
            s(:self), :default_safe_level,
            s(:args,
              s(:arg, :level)),
            s(:cvasgn, :@@safe_level,
              s(:lvar, :level))),
          s(:defs,
            s(:self), :verbose=,
            s(:args,
              s(:arg, :on)),
            s(:cvasgn, :@@verbose,
              s(:lvar, :on))),
          s(:defs,
            s(:self), :verbose,
            s(:args),
            s(:cvar, :@@verbose)),
          s(:defs,
            s(:self), :make_config,
            s(:args,
              s(:optarg, :hash,
                s(:hash))),
            s(:begin,
              s(:lvasgn, :default_config,
                s(:hash,
                  s(:pair,
                    s(:sym, :idconv),
                    s(:cvar, :@@idconv)),
                  s(:pair,
                    s(:sym, :verbose),
                    s(:cvar, :@@verbose)),
                  s(:pair,
                    s(:sym, :tcp_acl),
                    s(:cvar, :@@acl)),
                  s(:pair,
                    s(:sym, :load_limit),
                    s(:cvar, :@@load_limit)),
                  s(:pair,
                    s(:sym, :argc_limit),
                    s(:cvar, :@@argc_limit)),
                  s(:pair,
                    s(:sym, :safe_level),
                    s(:cvar, :@@safe_level)))),
              s(:send,
                s(:lvar, :default_config), :update,
                s(:lvar, :hash)))),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :uri,
                s(:nil)),
              s(:optarg, :front,
                s(:nil)),
              s(:optarg, :config_or_acl,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Hash), :===,
                  s(:lvar, :config_or_acl)),
                s(:lvasgn, :config,
                  s(:send,
                    s(:lvar, :config_or_acl), :dup)),
                s(:begin,
                  s(:lvasgn, :acl,
                    s(:or,
                      s(:lvar, :config_or_acl),
                      s(:cvar, :@@acl))),
                  s(:lvasgn, :config,
                    s(:hash,
                      s(:pair,
                        s(:sym, :tcp_acl),
                        s(:lvar, :acl)))))),
              s(:ivasgn, :@config,
                s(:send,
                  s(:send,
                    s(:self), :class), :make_config,
                  s(:lvar, :config))),
              s(:ivasgn, :@protocol,
                s(:send,
                  s(:const, nil, :DRbProtocol), :open_server,
                  s(:lvar, :uri),
                  s(:ivar, :@config))),
              s(:ivasgn, :@uri,
                s(:send,
                  s(:ivar, :@protocol), :uri)),
              s(:ivasgn, :@exported_uri,
                s(:array,
                  s(:ivar, :@uri))),
              s(:ivasgn, :@front,
                s(:lvar, :front)),
              s(:ivasgn, :@idconv,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :idconv))),
              s(:ivasgn, :@safe_level,
                s(:send,
                  s(:ivar, :@config), :[],
                  s(:sym, :safe_level))),
              s(:ivasgn, :@grp,
                s(:send,
                  s(:const, nil, :ThreadGroup), :new)),
              s(:ivasgn, :@thread,
                s(:send, nil, :run)),
              s(:send,
                s(:const, nil, :DRb), :regist_server,
                s(:self)))),
          s(:send, nil, :attr_reader,
            s(:sym, :uri)),
          s(:send, nil, :attr_reader,
            s(:sym, :thread)),
          s(:send, nil, :attr_reader,
            s(:sym, :front)),
          s(:send, nil, :attr_reader,
            s(:sym, :config)),
          s(:send, nil, :attr_reader,
            s(:sym, :safe_level)),
          s(:def, :verbose=,
            s(:args,
              s(:arg, :v)),
            s(:send,
              s(:ivar, :@config), :[]=,
              s(:sym, :verbose),
              s(:lvar, :v))),
          s(:def, :verbose,
            s(:args),
            s(:send,
              s(:ivar, :@config), :[],
              s(:sym, :verbose))),
          s(:def, :alive?,
            s(:args),
            s(:send,
              s(:ivar, :@thread), :alive?)),
          s(:def, :here?,
            s(:args,
              s(:arg, :uri)),
            s(:send,
              s(:ivar, :@exported_uri), :include?,
              s(:lvar, :uri))),
          s(:def, :stop_service,
            s(:args),
            s(:begin,
              s(:send,
                s(:const, nil, :DRb), :remove_server,
                s(:self)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:str, "DRb")),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:const, nil, :Thread), :current), :[],
                        s(:str, "DRb")), :[],
                      s(:str, "server")), :==,
                    s(:self))),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[],
                    s(:str, "DRb")), :[]=,
                  s(:str, "stop_service"),
                  s(:true)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@protocol), :respond_to?,
                      s(:sym, :shutdown)),
                    s(:send,
                      s(:ivar, :@protocol), :shutdown),
                    s(:block,
                      s(:send,
                        s(:array,
                          s(:ivar, :@thread),
                          s(:splat,
                            s(:send,
                              s(:ivar, :@grp), :list))), :each),
                      s(:args,
                        s(:arg, :thread)),
                      s(:send,
                        s(:lvar, :thread), :kill))),
                  s(:send,
                    s(:ivar, :@thread), :join))))),
          s(:def, :to_obj,
            s(:args,
              s(:arg, :ref)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :ref), :nil?),
                s(:return,
                  s(:send, nil, :front)), nil),
              s(:if,
                s(:send,
                  s(:const, nil, :DRbURIOption), :===,
                  s(:lvar, :ref)),
                s(:return,
                  s(:send,
                    s(:send, nil, :front), :[],
                    s(:send,
                      s(:lvar, :ref), :to_s))), nil),
              s(:send,
                s(:ivar, :@idconv), :to_obj,
                s(:lvar, :ref)))),
          s(:def, :to_id,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :obj), :__id__), :==,
                  s(:send,
                    s(:send, nil, :front), :__id__)),
                s(:return,
                  s(:nil)), nil),
              s(:send,
                s(:ivar, :@idconv), :to_id,
                s(:lvar, :obj)))),
          s(:send, nil, :private),
          s(:def, :run,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :start),
              s(:args),
              s(:kwbegin,
                s(:ensure,
                  s(:while,
                    s(:send, nil, :main_loop), nil),
                  s(:if,
                    s(:ivar, :@protocol),
                    s(:send,
                      s(:ivar, :@protocol), :close), nil))))),
          s(:casgn, nil, :INSECURE_METHOD,
            s(:array,
              s(:sym, :__send__))),
          s(:def, :insecure_method?,
            s(:args,
              s(:arg, :msg_id)),
            s(:send,
              s(:const, nil, :INSECURE_METHOD), :include?,
              s(:lvar, :msg_id))),
          s(:def, :any_to_s,
            s(:args,
              s(:arg, :obj)),
            s(:rescue,
              s(:send,
                s(:send,
                  s(:lvar, :obj), :to_s), :+,
                s(:dstr,
                  s(:str, ":"),
                  s(:begin,
                    s(:send,
                      s(:lvar, :obj), :class)))),
              s(:resbody, nil, nil,
                s(:send, nil, :sprintf,
                  s(:str, "#<%s:0x%lx>"),
                  s(:send,
                    s(:lvar, :obj), :class),
                  s(:send,
                    s(:lvar, :obj), :__id__))), nil)),
          s(:def, :check_insecure_method,
            s(:args,
              s(:arg, :obj),
              s(:arg, :msg_id)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:const, nil, :Proc), :===,
                    s(:lvar, :obj)),
                  s(:send,
                    s(:lvar, :msg_id), :==,
                    s(:sym, :__drb_yield))),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:const, nil, :Symbol), :==,
                  s(:send,
                    s(:lvar, :msg_id), :class)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:begin,
                      s(:send, nil, :any_to_s,
                        s(:lvar, :msg_id))),
                    s(:str, " is not a symbol")))),
              s(:if,
                s(:send, nil, :insecure_method?,
                  s(:lvar, :msg_id)),
                s(:send, nil, :raise,
                  s(:const, nil, :SecurityError),
                  s(:dstr,
                    s(:str, "insecure method `"),
                    s(:begin,
                      s(:lvar, :msg_id)),
                    s(:str, "'"))), nil),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :obj), :private_methods), :include?,
                  s(:lvar, :msg_id)),
                s(:begin,
                  s(:lvasgn, :desc,
                    s(:send, nil, :any_to_s,
                      s(:lvar, :obj))),
                  s(:send, nil, :raise,
                    s(:const, nil, :NoMethodError),
                    s(:dstr,
                      s(:str, "private method `"),
                      s(:begin,
                        s(:lvar, :msg_id)),
                      s(:str, "' called for "),
                      s(:begin,
                        s(:lvar, :desc))))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :obj), :protected_methods), :include?,
                    s(:lvar, :msg_id)),
                  s(:begin,
                    s(:lvasgn, :desc,
                      s(:send, nil, :any_to_s,
                        s(:lvar, :obj))),
                    s(:send, nil, :raise,
                      s(:const, nil, :NoMethodError),
                      s(:dstr,
                        s(:str, "protected method `"),
                        s(:begin,
                          s(:lvar, :msg_id)),
                        s(:str, "' called for "),
                        s(:begin,
                          s(:lvar, :desc))))),
                  s(:true))))),
          s(:send, nil, :public,
            s(:sym, :check_insecure_method)),
          s(:class,
            s(:const, nil, :InvokeMethod), nil,
            s(:begin,
              s(:def, :initialize,
                s(:args,
                  s(:arg, :drb_server),
                  s(:arg, :client)),
                s(:begin,
                  s(:ivasgn, :@drb_server,
                    s(:lvar, :drb_server)),
                  s(:ivasgn, :@safe_level,
                    s(:send,
                      s(:lvar, :drb_server), :safe_level)),
                  s(:ivasgn, :@client,
                    s(:lvar, :client)))),
              s(:def, :perform,
                s(:args),
                s(:rescue,
                  s(:begin,
                    s(:ivasgn, :@result,
                      s(:nil)),
                    s(:ivasgn, :@succ,
                      s(:false)),
                    s(:send, nil, :setup_message),
                    s(:if,
                      s(:send,
                        s(:gvar, :$SAFE), :<,
                        s(:ivar, :@safe_level)),
                      s(:begin,
                        s(:lvasgn, :info,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Thread), :current), :[],
                            s(:str, "DRb"))),
                        s(:if,
                          s(:ivar, :@block),
                          s(:ivasgn, :@result,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:const, nil, :Thread), :new),
                                s(:args),
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:const, nil, :Thread), :current), :[]=,
                                    s(:str, "DRb"),
                                    s(:lvar, :info)),
                                  s(:gvasgn, :$SAFE,
                                    s(:ivar, :@safe_level)),
                                  s(:send, nil, :perform_with_block))), :value)),
                          s(:ivasgn, :@result,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:const, nil, :Thread), :new),
                                s(:args),
                                s(:begin,
                                  s(:send,
                                    s(:send,
                                      s(:const, nil, :Thread), :current), :[]=,
                                    s(:str, "DRb"),
                                    s(:lvar, :info)),
                                  s(:gvasgn, :$SAFE,
                                    s(:ivar, :@safe_level)),
                                  s(:send, nil, :perform_without_block))), :value)))),
                      s(:if,
                        s(:ivar, :@block),
                        s(:ivasgn, :@result,
                          s(:send, nil, :perform_with_block)),
                        s(:ivasgn, :@result,
                          s(:send, nil, :perform_without_block)))),
                    s(:ivasgn, :@succ,
                      s(:true)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:ivar, :@msg_id), :==,
                          s(:sym, :to_ary)),
                        s(:send,
                          s(:send,
                            s(:ivar, :@result), :class), :==,
                          s(:const, nil, :Array))),
                      s(:ivasgn, :@result,
                        s(:send,
                          s(:const, nil, :DRbArray), :new,
                          s(:ivar, :@result))), nil),
                    s(:return,
                      s(:ivar, :@succ),
                      s(:ivar, :@result))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :StandardError),
                      s(:const, nil, :ScriptError),
                      s(:const, nil, :Interrupt)), nil,
                    s(:begin,
                      s(:ivasgn, :@result,
                        s(:gvar, :$!)),
                      s(:return,
                        s(:ivar, :@succ),
                        s(:ivar, :@result)))), nil)),
              s(:send, nil, :private),
              s(:def, :init_with_client,
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :obj),
                      s(:lvasgn, :msg),
                      s(:lvasgn, :argv),
                      s(:lvasgn, :block)),
                    s(:send,
                      s(:ivar, :@client), :recv_request)),
                  s(:ivasgn, :@obj,
                    s(:lvar, :obj)),
                  s(:ivasgn, :@msg_id,
                    s(:send,
                      s(:lvar, :msg), :intern)),
                  s(:ivasgn, :@argv,
                    s(:lvar, :argv)),
                  s(:ivasgn, :@block,
                    s(:lvar, :block)))),
              s(:def, :check_insecure_method,
                s(:args),
                s(:send,
                  s(:ivar, :@drb_server), :check_insecure_method,
                  s(:ivar, :@obj),
                  s(:ivar, :@msg_id))),
              s(:def, :setup_message,
                s(:args),
                s(:begin,
                  s(:send, nil, :init_with_client),
                  s(:send, nil, :check_insecure_method))),
              s(:def, :perform_without_block,
                s(:args),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:const, nil, :Proc), :===,
                      s(:ivar, :@obj)),
                    s(:send,
                      s(:ivar, :@msg_id), :==,
                      s(:sym, :__drb_yield))),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:ivar, :@argv), :size), :==,
                        s(:int, 1)),
                      s(:lvasgn, :ary,
                        s(:ivar, :@argv)),
                      s(:lvasgn, :ary,
                        s(:array,
                          s(:ivar, :@argv)))),
                    s(:send,
                      s(:send,
                        s(:lvar, :ary), :collect,
                        s(:block_pass,
                          s(:ivar, :@obj))), :[],
                      s(:int, 0))),
                  s(:send,
                    s(:ivar, :@obj), :__send__,
                    s(:ivar, :@msg_id),
                    s(:splat,
                      s(:ivar, :@argv))))))),
          s(:send, nil, :require,
            s(:str, "drb/invokemethod")),
          s(:class,
            s(:const, nil, :InvokeMethod), nil,
            s(:send, nil, :include,
              s(:const, nil, :InvokeMethod18Mixin))),
          s(:def, :main_loop,
            s(:args),
            s(:begin,
              s(:lvasgn, :client0,
                s(:send,
                  s(:ivar, :@protocol), :accept)),
              s(:if,
                s(:send,
                  s(:lvar, :client0), :!),
                s(:return,
                  s(:nil)), nil),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :start,
                  s(:lvar, :client0)),
                s(:args,
                  s(:arg, :client)),
                s(:begin,
                  s(:send,
                    s(:ivar, :@grp), :add,
                    s(:send,
                      s(:const, nil, :Thread), :current)),
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[]=,
                    s(:str, "DRb"),
                    s(:hash,
                      s(:pair,
                        s(:str, "client"),
                        s(:lvar, :client)),
                      s(:pair,
                        s(:str, "server"),
                        s(:self)))),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:const, nil, :DRb), :mutex), :synchronize),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :client_uri,
                        s(:send,
                          s(:lvar, :client), :uri)),
                      s(:if,
                        s(:send,
                          s(:ivar, :@exported_uri), :include?,
                          s(:lvar, :client_uri)), nil,
                        s(:send,
                          s(:ivar, :@exported_uri), :<<,
                          s(:lvar, :client_uri))))),
                  s(:block,
                    s(:send, nil, :loop),
                    s(:args),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:lvasgn, :succ,
                            s(:false)),
                          s(:lvasgn, :invoke_method,
                            s(:send,
                              s(:const, nil, :InvokeMethod), :new,
                              s(:self),
                              s(:lvar, :client))),
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :succ),
                              s(:lvasgn, :result)),
                            s(:send,
                              s(:lvar, :invoke_method), :perform)),
                          s(:if,
                            s(:and,
                              s(:send,
                                s(:lvar, :succ), :!),
                              s(:send, nil, :verbose)),
                            s(:begin,
                              s(:send, nil, :p,
                                s(:lvar, :result)),
                              s(:block,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :result), :backtrace), :each),
                                s(:args,
                                  s(:arg, :x)),
                                s(:send, nil, :puts,
                                  s(:lvar, :x)))), nil),
                          s(:rescue,
                            s(:send,
                              s(:lvar, :client), :send_reply,
                              s(:lvar, :succ),
                              s(:lvar, :result)),
                            s(:resbody, nil, nil,
                              s(:nil)), nil)),
                        s(:begin,
                          s(:if,
                            s(:lvar, :succ), nil,
                            s(:send,
                              s(:lvar, :client), :close)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Thread), :current), :[],
                                s(:str, "DRb")), :[],
                              s(:str, "stop_service")),
                            s(:block,
                              s(:send,
                                s(:const, nil, :Thread), :new),
                              s(:args),
                              s(:send, nil, :stop_service)), nil),
                          s(:if,
                            s(:lvar, :succ), nil,
                            s(:break)))))))))))),
      s(:ivasgn, :@primary_server,
        s(:nil)),
      s(:def, :start_service,
        s(:args,
          s(:optarg, :uri,
            s(:nil)),
          s(:optarg, :front,
            s(:nil)),
          s(:optarg, :config,
            s(:nil))),
        s(:ivasgn, :@primary_server,
          s(:send,
            s(:const, nil, :DRbServer), :new,
            s(:lvar, :uri),
            s(:lvar, :front),
            s(:lvar, :config)))),
      s(:send, nil, :module_function,
        s(:sym, :start_service)),
      s(:send, nil, :attr_accessor,
        s(:sym, :primary_server)),
      s(:send, nil, :module_function,
        s(:sym, :primary_server=),
        s(:sym, :primary_server)),
      s(:def, :current_server,
        s(:args),
        s(:begin,
          s(:lvasgn, :drb,
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :[],
              s(:str, "DRb"))),
          s(:lvasgn, :server,
            s(:if,
              s(:begin,
                s(:and,
                  s(:lvar, :drb),
                  s(:send,
                    s(:lvar, :drb), :[],
                    s(:str, "server")))),
              s(:send,
                s(:lvar, :drb), :[],
                s(:str, "server")),
              s(:ivar, :@primary_server))),
          s(:if,
            s(:lvar, :server), nil,
            s(:send, nil, :raise,
              s(:const, nil, :DRbServerNotFound))),
          s(:return,
            s(:lvar, :server)))),
      s(:send, nil, :module_function,
        s(:sym, :current_server)),
      s(:def, :stop_service,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@primary_server),
            s(:send,
              s(:ivar, :@primary_server), :stop_service), nil),
          s(:ivasgn, :@primary_server,
            s(:nil)))),
      s(:send, nil, :module_function,
        s(:sym, :stop_service)),
      s(:def, :uri,
        s(:args),
        s(:begin,
          s(:lvasgn, :drb,
            s(:send,
              s(:send,
                s(:const, nil, :Thread), :current), :[],
              s(:str, "DRb"))),
          s(:lvasgn, :client,
            s(:begin,
              s(:and,
                s(:lvar, :drb),
                s(:send,
                  s(:lvar, :drb), :[],
                  s(:str, "client"))))),
          s(:if,
            s(:lvar, :client),
            s(:begin,
              s(:lvasgn, :uri,
                s(:send,
                  s(:lvar, :client), :uri)),
              s(:if,
                s(:lvar, :uri),
                s(:return,
                  s(:lvar, :uri)), nil)), nil),
          s(:send,
            s(:send, nil, :current_server), :uri))),
      s(:send, nil, :module_function,
        s(:sym, :uri)),
      s(:def, :here?,
        s(:args,
          s(:arg, :uri)),
        s(:rescue,
          s(:send,
            s(:send, nil, :current_server), :here?,
            s(:lvar, :uri)),
          s(:resbody, nil, nil,
            s(:false)), nil)),
      s(:send, nil, :module_function,
        s(:sym, :here?)),
      s(:def, :config,
        s(:args),
        s(:rescue,
          s(:send,
            s(:send, nil, :current_server), :config),
          s(:resbody, nil, nil,
            s(:send,
              s(:const, nil, :DRbServer), :make_config)), nil)),
      s(:send, nil, :module_function,
        s(:sym, :config)),
      s(:def, :front,
        s(:args),
        s(:send,
          s(:send, nil, :current_server), :front)),
      s(:send, nil, :module_function,
        s(:sym, :front)),
      s(:def, :to_obj,
        s(:args,
          s(:arg, :ref)),
        s(:send,
          s(:send, nil, :current_server), :to_obj,
          s(:lvar, :ref))),
      s(:def, :to_id,
        s(:args,
          s(:arg, :obj)),
        s(:send,
          s(:send, nil, :current_server), :to_id,
          s(:lvar, :obj))),
      s(:send, nil, :module_function,
        s(:sym, :to_id)),
      s(:send, nil, :module_function,
        s(:sym, :to_obj)),
      s(:def, :thread,
        s(:args),
        s(:if,
          s(:ivar, :@primary_server),
          s(:send,
            s(:ivar, :@primary_server), :thread),
          s(:nil))),
      s(:send, nil, :module_function,
        s(:sym, :thread)),
      s(:def, :install_id_conv,
        s(:args,
          s(:arg, :idconv)),
        s(:send,
          s(:const, nil, :DRbServer), :default_id_conv,
          s(:lvar, :idconv))),
      s(:send, nil, :module_function,
        s(:sym, :install_id_conv)),
      s(:def, :install_acl,
        s(:args,
          s(:arg, :acl)),
        s(:send,
          s(:const, nil, :DRbServer), :default_acl,
          s(:lvar, :acl))),
      s(:send, nil, :module_function,
        s(:sym, :install_acl)),
      s(:ivasgn, :@mutex,
        s(:send,
          s(:const, nil, :Mutex), :new)),
      s(:def, :mutex,
        s(:args),
        s(:ivar, :@mutex)),
      s(:send, nil, :module_function,
        s(:sym, :mutex)),
      s(:ivasgn, :@server,
        s(:hash)),
      s(:def, :regist_server,
        s(:args,
          s(:arg, :server)),
        s(:begin,
          s(:send,
            s(:ivar, :@server), :[]=,
            s(:send,
              s(:lvar, :server), :uri),
            s(:lvar, :server)),
          s(:block,
            s(:send,
              s(:send, nil, :mutex), :synchronize),
            s(:args),
            s(:if,
              s(:ivar, :@primary_server), nil,
              s(:ivasgn, :@primary_server,
                s(:lvar, :server)))))),
      s(:send, nil, :module_function,
        s(:sym, :regist_server)),
      s(:def, :remove_server,
        s(:args,
          s(:arg, :server)),
        s(:send,
          s(:ivar, :@server), :delete,
          s(:send,
            s(:lvar, :server), :uri))),
      s(:send, nil, :module_function,
        s(:sym, :remove_server)),
      s(:def, :fetch_server,
        s(:args,
          s(:arg, :uri)),
        s(:send,
          s(:ivar, :@server), :[],
          s(:lvar, :uri))),
      s(:send, nil, :module_function,
        s(:sym, :fetch_server)))),
  s(:casgn, nil, :DRbObject,
    s(:const,
      s(:const, nil, :DRb), :DRbObject)),
  s(:casgn, nil, :DRbUndumped,
    s(:const,
      s(:const, nil, :DRb), :DRbUndumped)),
  s(:casgn, nil, :DRbIdConv,
    s(:const,
      s(:const, nil, :DRb), :DRbIdConv)))
