s(:begin,
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:send, nil, :require,
    s(:str, "fileutils")),
  s(:send, nil, :require,
    s(:str, "shellwords")),
  s(:class,
    s(:const, nil, :String), nil,
    s(:begin,
      s(:def, :quote,
        s(:args),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "\\s"),
              s(:regopt)),
            s(:self)),
          s(:dstr,
            s(:str, "\""),
            s(:begin,
              s(:self)),
            s(:str, "\"")),
          s(:dstr,
            s(:begin,
              s(:self))))),
      s(:def, :unspace,
        s(:args),
        s(:send, nil, :gsub,
          s(:regexp,
            s(:str, "\\s"),
            s(:regopt)),
          s(:str, "\\\\\\&"))),
      s(:def, :tr_cpp,
        s(:args),
        s(:send,
          s(:send,
            s(:send,
              s(:send, nil, :strip), :upcase), :tr_s,
            s(:str, "^A-Z0-9_*"),
            s(:str, "_")), :tr_s,
          s(:str, "*"),
          s(:str, "P"))),
      s(:def, :funcall_style,
        s(:args),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "\\)\\z"),
              s(:regopt)),
            s(:self)),
          s(:send, nil, :dup),
          s(:dstr,
            s(:begin,
              s(:self)),
            s(:str, "()")))),
      s(:def, :sans_arguments,
        s(:args),
        s(:send,
          s(:self), :[],
          s(:regexp,
            s(:str, "\\A[^()]+"),
            s(:regopt)))))),
  s(:class,
    s(:const, nil, :Array), nil,
    s(:def, :quote,
      s(:args),
      s(:block,
        s(:send, nil, :map),
        s(:args,
          s(:arg, :s)),
        s(:send,
          s(:lvar, :s), :quote)))),
  s(:module,
    s(:const, nil, :MakeMakefile),
    s(:begin,
      s(:casgn, nil, :CONFIG,
        s(:const,
          s(:const, nil, :RbConfig), :MAKEFILE_CONFIG)),
      s(:casgn, nil, :ORIG_LIBPATH,
        s(:send,
          s(:const, nil, :ENV), :[],
          s(:str, "LIB"))),
      s(:casgn, nil, :C_EXT,
        s(:array,
          s(:str, "c"),
          s(:str, "m"))),
      s(:casgn, nil, :CXX_EXT,
        s(:array,
          s(:str, "cc"),
          s(:str, "mm"),
          s(:str, "cxx"),
          s(:str, "cpp"))),
      s(:if,
        s(:send,
          s(:const, nil, :File), :exist?,
          s(:send,
            s(:const, nil, :File), :join,
            s(:splat,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :File), :split,
                    s(:str, "(string)")), :tap),
                s(:args,
                  s(:arg, :d),
                  s(:arg, :b)),
                s(:send,
                  s(:lvar, :b), :swapcase))))), nil,
        s(:send,
          s(:const, nil, :CXX_EXT), :concat,
          s(:array,
            s(:str, "C")))),
      s(:casgn, nil, :SRC_EXT,
        s(:send,
          s(:const, nil, :C_EXT), :+,
          s(:const, nil, :CXX_EXT))),
      s(:casgn, nil, :HDR_EXT,
        s(:array,
          s(:str, "h"),
          s(:str, "hpp"))),
      s(:gvasgn, :$static,
        s(:nil)),
      s(:gvasgn, :$config_h,
        s(:str, "$(arch_hdrdir)/ruby/config.h")),
      s(:gvasgn, :$default_static,
        s(:gvar, :$static)),
      s(:if,
        s(:defined?,
          s(:gvar, :$configure_args)), nil,
        s(:begin,
          s(:gvasgn, :$configure_args,
            s(:hash)),
          s(:lvasgn, :args,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "configure_args"))),
          s(:if,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "CONFIGURE_ARGS")),
            s(:send,
              s(:send,
                s(:lvar, :args), :<<,
                s(:str, " ")), :<<,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "CONFIGURE_ARGS"))), nil),
          s(:for,
            s(:lvasgn, :arg),
            s(:send,
              s(:const, nil, :Shellwords), :shellwords,
              s(:lvar, :args)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :arg),
                  s(:lvasgn, :val)),
                s(:send,
                  s(:lvar, :arg), :split,
                  s(:str, "="),
                  s(:int, 2))),
              s(:if,
                s(:lvar, :arg), nil,
                s(:next)),
              s(:send,
                s(:lvar, :arg), :tr!,
                s(:str, "_"),
                s(:str, "-")),
              s(:if,
                s(:send,
                  s(:lvar, :arg), :sub!,
                  s(:regexp,
                    s(:str, "^(?!--)"),
                    s(:regopt)),
                  s(:str, "--")),
                s(:begin,
                  s(:or,
                    s(:lvar, :val),
                    s(:next)),
                  s(:send,
                    s(:lvar, :arg), :downcase!)), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^--(?:top|topsrc|src|cur)dir$"),
                    s(:regopt)),
                  s(:lvar, :arg)),
                s(:next), nil),
              s(:send,
                s(:gvar, :$configure_args), :[]=,
                s(:lvar, :arg),
                s(:or,
                  s(:lvar, :val),
                  s(:true))))),
          s(:for,
            s(:lvasgn, :arg),
            s(:const, nil, :ARGV),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :arg),
                  s(:lvasgn, :val)),
                s(:send,
                  s(:lvar, :arg), :split,
                  s(:str, "="),
                  s(:int, 2))),
              s(:if,
                s(:lvar, :arg), nil,
                s(:next)),
              s(:send,
                s(:lvar, :arg), :tr!,
                s(:str, "_"),
                s(:str, "-")),
              s(:if,
                s(:send,
                  s(:lvar, :arg), :sub!,
                  s(:regexp,
                    s(:str, "^(?!--)"),
                    s(:regopt)),
                  s(:str, "--")),
                s(:begin,
                  s(:or,
                    s(:lvar, :val),
                    s(:next)),
                  s(:send,
                    s(:lvar, :arg), :downcase!)), nil),
              s(:send,
                s(:gvar, :$configure_args), :[]=,
                s(:lvar, :arg),
                s(:or,
                  s(:lvar, :val),
                  s(:true))))))),
      s(:gvasgn, :$libdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "libdir"))),
      s(:gvasgn, :$rubylibdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "rubylibdir"))),
      s(:gvasgn, :$archdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "archdir"))),
      s(:gvasgn, :$sitedir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "sitedir"))),
      s(:gvasgn, :$sitelibdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "sitelibdir"))),
      s(:gvasgn, :$sitearchdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "sitearchdir"))),
      s(:gvasgn, :$vendordir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "vendordir"))),
      s(:gvasgn, :$vendorlibdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "vendorlibdir"))),
      s(:gvasgn, :$vendorarchdir,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "vendorarchdir"))),
      s(:gvasgn, :$mswin,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mswin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$bccwin,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "bccwin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$mingw,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "mingw"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$cygwin,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "cygwin"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$netbsd,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "netbsd"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$haiku,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "haiku"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$solaris,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "solaris"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$universal,
        s(:match_with_lvasgn,
          s(:regexp,
            s(:str, "universal"),
            s(:regopt)),
          s(:const, nil, :RUBY_PLATFORM))),
      s(:gvasgn, :$dest_prefix_pattern,
        s(:begin,
          s(:if,
            s(:send,
              s(:const,
                s(:const, nil, :File), :PATH_SEPARATOR), :==,
              s(:str, ";")),
            s(:regexp,
              s(:str, "\\A([[:alpha:]]:)?"),
              s(:regopt)),
            s(:regexp,
              s(:str, "\\A"),
              s(:regopt))))),
      s(:def, :config_string,
        s(:args,
          s(:arg, :key),
          s(:optarg, :config,
            s(:const, nil, :CONFIG))),
        s(:and,
          s(:and,
            s(:lvasgn, :s,
              s(:send,
                s(:lvar, :config), :[],
                s(:lvar, :key))),
            s(:send,
              s(:send,
                s(:lvar, :s), :empty?), :!)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:lvar, :s)),
            s(:lvar, :s)))),
      s(:send, nil, :module_function,
        s(:sym, :config_string)),
      s(:def, :dir_re,
        s(:args,
          s(:arg, :dir)),
        s(:send,
          s(:const, nil, :Regexp), :new,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:str, "\\$(?:\\("), :+,
                  s(:lvar, :dir)), :+,
                s(:str, "\\)|\\{")), :+,
              s(:lvar, :dir)), :+,
            s(:str, "\\})(?:\\$(?:\\(target_prefix\\)|\\{target_prefix\\}))?")))),
      s(:send, nil, :module_function,
        s(:sym, :dir_re)),
      s(:def, :relative_from,
        s(:args,
          s(:arg, :path),
          s(:arg, :base)),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :path),
              s(:str, ""))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :dir)), :==,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :dir),
                s(:lvar, :base))),
            s(:lvar, :path),
            s(:send,
              s(:const, nil, :File), :join,
              s(:lvar, :base),
              s(:lvar, :path))))),
      s(:casgn, nil, :INSTALL_DIRS,
        s(:array,
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "commondir")),
            s(:str, "$(RUBYCOMMONDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "sitedir")),
            s(:str, "$(RUBYCOMMONDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "vendordir")),
            s(:str, "$(RUBYCOMMONDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "rubylibdir")),
            s(:str, "$(RUBYLIBDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "archdir")),
            s(:str, "$(RUBYARCHDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "sitelibdir")),
            s(:str, "$(RUBYLIBDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "vendorlibdir")),
            s(:str, "$(RUBYLIBDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "sitearchdir")),
            s(:str, "$(RUBYARCHDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "vendorarchdir")),
            s(:str, "$(RUBYARCHDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "rubyhdrdir")),
            s(:str, "$(RUBYHDRDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "sitehdrdir")),
            s(:str, "$(SITEHDRDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "vendorhdrdir")),
            s(:str, "$(VENDORHDRDIR)")),
          s(:array,
            s(:send, nil, :dir_re,
              s(:str, "bindir")),
            s(:str, "$(BINDIR)")))),
      s(:def, :install_dirs,
        s(:args,
          s(:optarg, :target_prefix,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:gvar, :$extout),
            s(:lvasgn, :dirs,
              s(:array,
                s(:array,
                  s(:str, "BINDIR"),
                  s(:str, "$(extout)/bin")),
                s(:array,
                  s(:str, "RUBYCOMMONDIR"),
                  s(:str, "$(extout)/common")),
                s(:array,
                  s(:str, "RUBYLIBDIR"),
                  s(:str, "$(RUBYCOMMONDIR)$(target_prefix)")),
                s(:array,
                  s(:str, "RUBYARCHDIR"),
                  s(:str, "$(extout)/$(arch)$(target_prefix)")),
                s(:array,
                  s(:str, "HDRDIR"),
                  s(:str, "$(extout)/include/ruby$(target_prefix)")),
                s(:array,
                  s(:str, "ARCHHDRDIR"),
                  s(:str, "$(extout)/include/$(arch)/ruby$(target_prefix)")),
                s(:array,
                  s(:str, "extout"),
                  s(:dstr,
                    s(:gvar, :$extout))),
                s(:array,
                  s(:str, "extout_prefix"),
                  s(:dstr,
                    s(:gvar, :$extout_prefix))))),
            s(:if,
              s(:gvar, :$extmk),
              s(:lvasgn, :dirs,
                s(:array,
                  s(:array,
                    s(:str, "BINDIR"),
                    s(:str, "$(bindir)")),
                  s(:array,
                    s(:str, "RUBYCOMMONDIR"),
                    s(:str, "$(rubylibdir)")),
                  s(:array,
                    s(:str, "RUBYLIBDIR"),
                    s(:str, "$(rubylibdir)$(target_prefix)")),
                  s(:array,
                    s(:str, "RUBYARCHDIR"),
                    s(:str, "$(archdir)$(target_prefix)")),
                  s(:array,
                    s(:str, "HDRDIR"),
                    s(:str, "$(rubyhdrdir)/ruby$(target_prefix)")),
                  s(:array,
                    s(:str, "ARCHHDRDIR"),
                    s(:str, "$(rubyhdrdir)/$(arch)/ruby$(target_prefix)")))),
              s(:if,
                s(:send,
                  s(:gvar, :$configure_args), :has_key?,
                  s(:str, "--vendor")),
                s(:lvasgn, :dirs,
                  s(:array,
                    s(:array,
                      s(:str, "BINDIR"),
                      s(:str, "$(bindir)")),
                    s(:array,
                      s(:str, "RUBYCOMMONDIR"),
                      s(:str, "$(vendordir)$(target_prefix)")),
                    s(:array,
                      s(:str, "RUBYLIBDIR"),
                      s(:str, "$(vendorlibdir)$(target_prefix)")),
                    s(:array,
                      s(:str, "RUBYARCHDIR"),
                      s(:str, "$(vendorarchdir)$(target_prefix)")),
                    s(:array,
                      s(:str, "HDRDIR"),
                      s(:str, "$(rubyhdrdir)/ruby$(target_prefix)")),
                    s(:array,
                      s(:str, "ARCHHDRDIR"),
                      s(:str, "$(rubyhdrdir)/$(arch)/ruby$(target_prefix)")))),
                s(:lvasgn, :dirs,
                  s(:array,
                    s(:array,
                      s(:str, "BINDIR"),
                      s(:str, "$(bindir)")),
                    s(:array,
                      s(:str, "RUBYCOMMONDIR"),
                      s(:str, "$(sitedir)$(target_prefix)")),
                    s(:array,
                      s(:str, "RUBYLIBDIR"),
                      s(:str, "$(sitelibdir)$(target_prefix)")),
                    s(:array,
                      s(:str, "RUBYARCHDIR"),
                      s(:str, "$(sitearchdir)$(target_prefix)")),
                    s(:array,
                      s(:str, "HDRDIR"),
                      s(:str, "$(rubyhdrdir)/ruby$(target_prefix)")),
                    s(:array,
                      s(:str, "ARCHHDRDIR"),
                      s(:str, "$(rubyhdrdir)/$(arch)/ruby$(target_prefix)"))))))),
          s(:send,
            s(:lvar, :dirs), :<<,
            s(:array,
              s(:str, "target_prefix"),
              s(:begin,
                s(:if,
                  s(:lvar, :target_prefix),
                  s(:dstr,
                    s(:str, "/"),
                    s(:begin,
                      s(:lvar, :target_prefix))),
                  s(:str, ""))))),
          s(:lvar, :dirs))),
      s(:def, :map_dir,
        s(:args,
          s(:arg, :dir),
          s(:optarg, :map,
            s(:nil))),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :map),
            s(:const, nil, :INSTALL_DIRS)),
          s(:block,
            s(:send,
              s(:lvar, :map), :inject,
              s(:lvar, :dir)),
            s(:args,
              s(:arg, :d),
              s(:mlhs,
                s(:arg, :orig),
                s(:arg, :new))),
            s(:send,
              s(:lvar, :d), :gsub,
              s(:lvar, :orig),
              s(:lvar, :new))))),
      s(:lvasgn, :topdir,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :File), :dirname,
            s(:str, "(string)")))),
      s(:lvasgn, :path,
        s(:send,
          s(:const, nil, :File), :expand_path,
          s(:gvar, :$0))),
      s(:until,
        s(:send,
          s(:begin,
            s(:lvasgn, :dir,
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:lvar, :path)))), :==,
          s(:lvar, :path)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :File), :identical?,
              s(:lvar, :dir),
              s(:lvar, :topdir)),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A(?:ext|enc|tool|test)\\z"),
                    s(:regopt)),
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:lvar, :path))),
                s(:gvasgn, :$extmk,
                  s(:true)), nil),
              s(:break)), nil),
          s(:lvasgn, :path,
            s(:lvar, :dir)))),
      s(:or_asgn,
        s(:gvasgn, :$extmk),
        s(:false)),
      s(:if,
        s(:and,
          s(:send,
            s(:gvar, :$extmk), :!),
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:send,
              s(:begin,
                s(:gvasgn, :$hdrdir,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "rubyhdrdir")))), :+,
              s(:str, "/ruby/ruby.h")))),
        s(:begin,
          s(:gvasgn, :$topdir,
            s(:gvar, :$hdrdir)),
          s(:gvasgn, :$top_srcdir,
            s(:gvar, :$hdrdir)),
          s(:gvasgn, :$arch_hdrdir,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "rubyarchhdrdir")))),
        s(:if,
          s(:send,
            s(:const, nil, :File), :exist?,
            s(:send,
              s(:begin,
                s(:gvasgn, :$hdrdir,
                  s(:send,
                    s(:begin,
                      s(:or_asgn,
                        s(:gvasgn, :$top_srcdir),
                        s(:lvar, :topdir))), :+,
                    s(:str, "/include")))), :+,
              s(:str, "/ruby.h"))),
          s(:begin,
            s(:or_asgn,
              s(:gvasgn, :$topdir),
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "topdir"))),
            s(:gvasgn, :$arch_hdrdir,
              s(:str, "$(extout)/include/$(arch)"))),
          s(:send, nil, :abort,
            s(:dstr,
              s(:str, "mkmf.rb can't find header files for ruby at "),
              s(:begin,
                s(:gvar, :$hdrdir)),
              s(:str, "/ruby.h"))))),
      s(:casgn, nil, :CONFTEST,
        s(:send,
          s(:str, "conftest"), :freeze)),
      s(:casgn, nil, :CONFTEST_C,
        s(:dstr,
          s(:begin,
            s(:const, nil, :CONFTEST)),
          s(:str, ".c"))),
      s(:casgn, nil, :OUTFLAG,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "OUTFLAG"))),
      s(:casgn, nil, :COUTFLAG,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "COUTFLAG"))),
      s(:casgn, nil, :CPPOUTFILE,
        s(:block,
          s(:send, nil, :config_string,
            s(:str, "CPPOUTFILE")),
          s(:args,
            s(:arg, :str)),
          s(:send,
            s(:lvar, :str), :sub,
            s(:regexp,
              s(:str, "\\bconftest\\b"),
              s(:regopt)),
            s(:const, nil, :CONFTEST)))),
      s(:def, :rm_f,
        s(:args,
          s(:restarg, :files)),
        s(:begin,
          s(:lvasgn, :opt,
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Hash), :===,
                  s(:send,
                    s(:lvar, :files), :last)),
                s(:array,
                  s(:send,
                    s(:lvar, :files), :pop)),
                s(:array)))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_f,
            s(:send,
              s(:const, nil, :Dir), :[],
              s(:splat,
                s(:send,
                  s(:lvar, :files), :flatten))),
            s(:splat,
              s(:lvar, :opt))))),
      s(:send, nil, :module_function,
        s(:sym, :rm_f)),
      s(:def, :rm_rf,
        s(:args,
          s(:restarg, :files)),
        s(:begin,
          s(:lvasgn, :opt,
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Hash), :===,
                  s(:send,
                    s(:lvar, :files), :last)),
                s(:array,
                  s(:send,
                    s(:lvar, :files), :pop)),
                s(:array)))),
          s(:send,
            s(:const, nil, :FileUtils), :rm_rf,
            s(:send,
              s(:const, nil, :Dir), :[],
              s(:splat,
                s(:send,
                  s(:lvar, :files), :flatten))),
            s(:splat,
              s(:lvar, :opt))))),
      s(:send, nil, :module_function,
        s(:sym, :rm_rf)),
      s(:def, :modified?,
        s(:args,
          s(:arg, :target),
          s(:arg, :times)),
        s(:begin,
          s(:rescue,
            s(:begin,
              s(:lvasgn, :t,
                s(:send,
                  s(:const, nil, :File), :mtime,
                  s(:lvar, :target)))),
            s(:resbody, nil, nil,
              s(:return,
                s(:nil))), nil),
          s(:or,
            s(:send,
              s(:const, nil, :Array), :===,
              s(:lvar, :times)),
            s(:lvasgn, :times,
              s(:array,
                s(:lvar, :times)))),
          s(:if,
            s(:block,
              s(:send,
                s(:lvar, :times), :all?),
              s(:args,
                s(:arg, :n)),
              s(:send,
                s(:lvar, :n), :<=,
                s(:lvar, :t))),
            s(:lvar, :t), nil))),
      s(:def, :split_libs,
        s(:args,
          s(:restarg, :strs)),
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :strs), :map),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :split,
              s(:regexp,
                s(:str, "\\s+(?=-|\\z)"),
                s(:regopt)))), :flatten)),
      s(:def, :merge_libs,
        s(:args,
          s(:restarg, :libs)),
        s(:block,
          s(:send,
            s(:lvar, :libs), :inject,
            s(:array)),
          s(:args,
            s(:arg, :x),
            s(:arg, :y)),
          s(:begin,
            s(:lvasgn, :y,
              s(:block,
                s(:send,
                  s(:lvar, :y), :inject,
                  s(:array)),
                s(:args,
                  s(:arg, :ary),
                  s(:arg, :e)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :ary), :last), :==,
                    s(:lvar, :e)),
                  s(:lvar, :ary),
                  s(:send,
                    s(:lvar, :ary), :<<,
                    s(:lvar, :e))))),
            s(:and,
              s(:block,
                s(:send,
                  s(:lvar, :y), :each_with_index),
                s(:args,
                  s(:arg, :v),
                  s(:arg, :yi)),
                s(:if,
                  s(:lvasgn, :xi,
                    s(:send,
                      s(:lvar, :x), :rindex,
                      s(:lvar, :v))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :x), :[]=,
                      s(:irange,
                        s(:begin,
                          s(:send,
                            s(:lvar, :xi), :+,
                            s(:int, 1))),
                        s(:int, -1)),
                      s(:send, nil, :merge_libs,
                        s(:send,
                          s(:lvar, :y), :[],
                          s(:irange,
                            s(:begin,
                              s(:send,
                                s(:lvar, :yi), :+,
                                s(:int, 1))),
                            s(:int, -1))),
                        s(:send,
                          s(:lvar, :x), :[],
                          s(:irange,
                            s(:begin,
                              s(:send,
                                s(:lvar, :xi), :+,
                                s(:int, 1))),
                            s(:int, -1))))),
                    s(:send,
                      s(:lvar, :x), :[]=,
                      s(:lvar, :xi),
                      s(:int, 0),
                      s(:send,
                        s(:lvar, :y), :[],
                        s(:erange,
                          s(:int, 0),
                          s(:lvar, :yi)))),
                    s(:break)), nil)),
              s(:send,
                s(:lvar, :x), :concat,
                s(:lvar, :y))),
            s(:lvar, :x)))),
      s(:module,
        s(:const, nil, :Logging),
        s(:begin,
          s(:ivasgn, :@log,
            s(:nil)),
          s(:ivasgn, :@logfile,
            s(:str, "mkmf.log")),
          s(:ivasgn, :@orgerr,
            s(:send,
              s(:gvar, :$stderr), :dup)),
          s(:ivasgn, :@orgout,
            s(:send,
              s(:gvar, :$stdout), :dup)),
          s(:ivasgn, :@postpone,
            s(:int, 0)),
          s(:ivasgn, :@quiet,
            s(:gvar, :$extmk)),
          s(:defs,
            s(:self), :log_open,
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:ivasgn, :@log),
                s(:send,
                  s(:const, nil, :File), :open,
                  s(:ivar, :@logfile),
                  s(:str, "wb"))),
              s(:send,
                s(:ivar, :@log), :sync=,
                s(:true)))),
          s(:defs,
            s(:self), :log_opened?,
            s(:args),
            s(:and,
              s(:ivar, :@log),
              s(:send,
                s(:send,
                  s(:ivar, :@log), :closed?), :!))),
          s(:defs,
            s(:self), :open,
            s(:args),
            s(:ensure,
              s(:begin,
                s(:send, nil, :log_open),
                s(:send,
                  s(:gvar, :$stderr), :reopen,
                  s(:ivar, :@log)),
                s(:send,
                  s(:gvar, :$stdout), :reopen,
                  s(:ivar, :@log)),
                s(:yield)),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :reopen,
                  s(:ivar, :@orgerr)),
                s(:send,
                  s(:gvar, :$stdout), :reopen,
                  s(:ivar, :@orgout))))),
          s(:defs,
            s(:self), :message,
            s(:args,
              s(:restarg, :s)),
            s(:begin,
              s(:send, nil, :log_open),
              s(:send,
                s(:ivar, :@log), :printf,
                s(:splat,
                  s(:lvar, :s))))),
          s(:defs,
            s(:self), :logfile,
            s(:args,
              s(:arg, :file)),
            s(:begin,
              s(:ivasgn, :@logfile,
                s(:lvar, :file)),
              s(:send, nil, :log_close))),
          s(:defs,
            s(:self), :log_close,
            s(:args),
            s(:if,
              s(:and,
                s(:ivar, :@log),
                s(:send,
                  s(:send,
                    s(:ivar, :@log), :closed?), :!)),
              s(:begin,
                s(:send,
                  s(:ivar, :@log), :flush),
                s(:send,
                  s(:ivar, :@log), :close),
                s(:ivasgn, :@log,
                  s(:nil))), nil)),
          s(:defs,
            s(:self), :postpone,
            s(:args),
            s(:begin,
              s(:lvasgn, :tmplog,
                s(:dstr,
                  s(:str, "mkmftmp"),
                  s(:begin,
                    s(:op_asgn,
                      s(:ivasgn, :@postpone), :+,
                      s(:int, 1))),
                  s(:str, ".log"))),
              s(:block,
                s(:send, nil, :open),
                s(:args),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :log),
                      s(:splat,
                        s(:lvasgn, :save))),
                    s(:array,
                      s(:ivar, :@log),
                      s(:ivar, :@logfile),
                      s(:ivar, :@orgout),
                      s(:ivar, :@orgerr))),
                  s(:masgn,
                    s(:mlhs,
                      s(:ivasgn, :@log),
                      s(:ivasgn, :@logfile),
                      s(:ivasgn, :@orgout),
                      s(:ivasgn, :@orgerr)),
                    s(:array,
                      s(:nil),
                      s(:lvar, :tmplog),
                      s(:lvar, :log),
                      s(:lvar, :log))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:send,
                        s(:lvar, :log), :print,
                        s(:block,
                          s(:send, nil, :open),
                          s(:args),
                          s(:yield,
                            s(:ivar, :@log)))),
                      s(:begin,
                        s(:if,
                          s(:and,
                            s(:ivar, :@log),
                            s(:send,
                              s(:send,
                                s(:ivar, :@log), :closed?), :!)),
                          s(:send,
                            s(:ivar, :@log), :close), nil),
                        s(:if,
                          s(:send,
                            s(:const, nil, :File), :exist?,
                            s(:lvar, :tmplog)),
                          s(:block,
                            s(:send,
                              s(:const, nil, :File), :open,
                              s(:lvar, :tmplog)),
                            s(:args,
                              s(:arg, :t)),
                            s(:send,
                              s(:const, nil, :FileUtils), :copy_stream,
                              s(:lvar, :t),
                              s(:lvar, :log))), nil),
                        s(:masgn,
                          s(:mlhs,
                            s(:ivasgn, :@log),
                            s(:ivasgn, :@logfile),
                            s(:ivasgn, :@orgout),
                            s(:ivasgn, :@orgerr)),
                          s(:array,
                            s(:lvar, :log),
                            s(:splat,
                              s(:lvar, :save)))),
                        s(:op_asgn,
                          s(:ivasgn, :@postpone), :-,
                          s(:int, 1)),
                        s(:send,
                          s(:const, nil, :MakeMakefile), :rm_f,
                          s(:lvar, :tmplog))))))))),
          s(:sclass,
            s(:self),
            s(:send, nil, :attr_accessor,
              s(:sym, :quiet))))),
      s(:def, :libpath_env,
        s(:args),
        s(:if,
          s(:lvasgn, :libpathenv,
            s(:send, nil, :config_string,
              s(:str, "LIBPATHENV"))),
          s(:begin,
            s(:lvasgn, :pathenv,
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:lvar, :libpathenv))),
            s(:lvasgn, :libpath,
              s(:send,
                s(:const, nil, :RbConfig), :expand,
                s(:send,
                  s(:gvar, :$DEFLIBPATH), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR)))),
            s(:hash,
              s(:pair,
                s(:lvar, :libpathenv),
                s(:send,
                  s(:send,
                    s(:array,
                      s(:lvar, :libpath),
                      s(:lvar, :pathenv)), :compact), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))))),
          s(:hash))),
      s(:def, :xsystem,
        s(:args,
          s(:arg, :command),
          s(:optarg, :opts,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :varpat,
            s(:regexp,
              s(:str, "\\$\\((\\w+)\\)|\\$\\{(\\w+)\\}"),
              s(:regopt))),
          s(:if,
            s(:send,
              s(:lvar, :varpat), :=~,
              s(:lvar, :command)),
            s(:begin,
              s(:lvasgn, :vars,
                s(:block,
                  s(:send,
                    s(:const, nil, :Hash), :new),
                  s(:args,
                    s(:arg, :h),
                    s(:arg, :k)),
                  s(:send,
                    s(:lvar, :h), :[]=,
                    s(:lvar, :k),
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:lvar, :k))))),
              s(:lvasgn, :command,
                s(:send,
                  s(:lvar, :command), :dup)),
              s(:while,
                s(:block,
                  s(:send,
                    s(:lvar, :command), :gsub!,
                    s(:lvar, :varpat)),
                  s(:args),
                  s(:send,
                    s(:lvar, :vars), :[],
                    s(:or,
                      s(:nth_ref, 1),
                      s(:nth_ref, 2)))),
                s(:nil))), nil),
          s(:block,
            s(:send,
              s(:const, nil, :Logging), :open),
            s(:args),
            s(:begin,
              s(:send, nil, :puts,
                s(:send,
                  s(:lvar, :command), :quote)),
              s(:if,
                s(:and,
                  s(:lvar, :opts),
                  s(:send,
                    s(:lvar, :opts), :[],
                    s(:sym, :werror))),
                s(:begin,
                  s(:lvasgn, :result,
                    s(:nil)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Logging), :postpone),
                    s(:args,
                      s(:arg, :log)),
                    s(:begin,
                      s(:lvasgn, :output,
                        s(:send,
                          s(:const, nil, :IO), :popen,
                          s(:send, nil, :libpath_env),
                          s(:lvar, :command),
                          s(:block_pass,
                            s(:sym, :read)))),
                      s(:lvasgn, :result,
                        s(:begin,
                          s(:and,
                            s(:send,
                              s(:gvar, :$?), :success?),
                            s(:send,
                              s(:const, nil, :File), :zero?,
                              s(:send,
                                s(:lvar, :log), :path))))),
                      s(:lvar, :output))),
                  s(:lvar, :result)),
                s(:send, nil, :system,
                  s(:send, nil, :libpath_env),
                  s(:lvar, :command))))))),
      s(:def, :xpopen,
        s(:args,
          s(:arg, :command),
          s(:restarg, :mode),
          s(:blockarg, :block)),
        s(:block,
          s(:send,
            s(:const, nil, :Logging), :open),
          s(:args),
          s(:begin,
            s(:case,
              s(:send,
                s(:lvar, :mode), :[],
                s(:int, 0)),
              s(:when,
                s(:nil),
                s(:regexp,
                  s(:str, "^r"),
                  s(:regopt)),
                s(:send, nil, :puts,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :command)),
                    s(:str, " |")))),
              s(:send, nil, :puts,
                s(:dstr,
                  s(:str, "| "),
                  s(:begin,
                    s(:lvar, :command))))),
            s(:send,
              s(:const, nil, :IO), :popen,
              s(:send, nil, :libpath_env),
              s(:lvar, :command),
              s(:splat,
                s(:lvar, :mode)),
              s(:block_pass,
                s(:lvar, :block)))))),
      s(:def, :log_src,
        s(:args,
          s(:arg, :src),
          s(:optarg, :heading,
            s(:str, "checked program was"))),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:lvar, :src), :split,
              s(:regexp,
                s(:str, "^"),
                s(:regopt)))),
          s(:lvasgn, :fmt,
            s(:dstr,
              s(:str, "%"),
              s(:begin,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :src), :size), :to_s), :size)),
              s(:str, "d: %s"))),
          s(:send,
            s(:const, nil, :Logging), :message,
            s(:dstr,
              s(:begin,
                s(:lvar, :heading)),
              s(:str, ":\n"),
              s(:str, "/* begin */\n"))),
          s(:block,
            s(:send,
              s(:lvar, :src), :each_with_index),
            s(:args,
              s(:arg, :line),
              s(:arg, :no)),
            s(:send,
              s(:const, nil, :Logging), :message,
              s(:lvar, :fmt),
              s(:send,
                s(:lvar, :no), :+,
                s(:int, 1)),
              s(:lvar, :line))),
          s(:send,
            s(:const, nil, :Logging), :message,
            s(:dstr,
              s(:str, "/* end */\n"),
              s(:str, "\n"))))),
      s(:def, :create_tmpsrc,
        s(:args,
          s(:arg, :src)),
        s(:begin,
          s(:lvasgn, :src,
            s(:dstr,
              s(:begin,
                s(:const, nil, :COMMON_HEADERS)),
              s(:str, "\n"),
              s(:begin,
                s(:lvar, :src)))),
          s(:if,
            s(:send, nil, :block_given?),
            s(:lvasgn, :src,
              s(:yield,
                s(:lvar, :src))), nil),
          s(:send,
            s(:lvar, :src), :gsub!,
            s(:regexp,
              s(:str, "[ \\t]+$"),
              s(:regopt)),
            s(:str, "")),
          s(:send,
            s(:lvar, :src), :gsub!,
            s(:regexp,
              s(:str, "\\A\\n+|^\\n+$"),
              s(:regopt)),
            s(:str, "")),
          s(:send,
            s(:lvar, :src), :sub!,
            s(:regexp,
              s(:str, "[^\\n]\\z"),
              s(:regopt)),
            s(:str, "\\&\n")),
          s(:lvasgn, :count,
            s(:int, 0)),
          s(:kwbegin,
            s(:rescue,
              s(:block,
                s(:send, nil, :open,
                  s(:const, nil, :CONFTEST_C),
                  s(:str, "wb")),
                s(:args,
                  s(:arg, :cfile)),
                s(:send,
                  s(:lvar, :cfile), :print,
                  s(:lvar, :src))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EACCES)), nil,
                s(:if,
                  s(:send,
                    s(:begin,
                      s(:op_asgn,
                        s(:lvasgn, :count), :+,
                        s(:int, 1))), :<,
                    s(:int, 5)),
                  s(:begin,
                    s(:send, nil, :sleep,
                      s(:float, 0.2)),
                    s(:retry)), nil)), nil)),
          s(:lvar, :src))),
      s(:def, :have_devel?,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:gvar, :$have_devel)), nil,
            s(:begin,
              s(:gvasgn, :$have_devel,
                s(:true)),
              s(:gvasgn, :$have_devel,
                s(:send, nil, :try_link,
                  s(:const, nil, :MAIN_DOES_NOTHING))))),
          s(:gvar, :$have_devel))),
      s(:def, :try_do,
        s(:args,
          s(:arg, :src),
          s(:arg, :command),
          s(:restarg, :opts),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:send, nil, :have_devel?), nil,
            s(:send, nil, :raise,
              s(:dstr,
                s(:str, "The compiler failed to generate an executable file.\n"),
                s(:str, "You have to install development tools first.\n")))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:lvasgn, :src,
                  s(:send, nil, :create_tmpsrc,
                    s(:lvar, :src),
                    s(:block_pass,
                      s(:lvar, :b)))),
                s(:send, nil, :xsystem,
                  s(:lvar, :command),
                  s(:splat,
                    s(:lvar, :opts)))),
              s(:begin,
                s(:send, nil, :log_src,
                  s(:lvar, :src)),
                s(:send,
                  s(:const, nil, :MakeMakefile), :rm_rf,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :CONFTEST)),
                    s(:str, ".dSYM")))))))),
      s(:def, :link_command,
        s(:args,
          s(:arg, :ldflags),
          s(:optarg, :opt,
            s(:str, "")),
          s(:optarg, :libpath,
            s(:send,
              s(:gvar, :$DEFLIBPATH), :|,
              s(:gvar, :$LIBPATH)))),
        s(:begin,
          s(:lvasgn, :librubyarg,
            s(:if,
              s(:gvar, :$extmk),
              s(:gvar, :$LIBRUBYARG_STATIC),
              s(:str, "$(LIBRUBYARG)"))),
          s(:lvasgn, :conf,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :merge,
              s(:hash,
                s(:pair,
                  s(:str, "hdrdir"),
                  s(:send,
                    s(:gvar, :$hdrdir), :quote)),
                s(:pair,
                  s(:str, "src"),
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :CONFTEST_C)))),
                s(:pair,
                  s(:str, "arch_hdrdir"),
                  s(:send,
                    s(:gvar, :$arch_hdrdir), :quote)),
                s(:pair,
                  s(:str, "top_srcdir"),
                  s(:send,
                    s(:gvar, :$top_srcdir), :quote)),
                s(:pair,
                  s(:str, "INCFLAGS"),
                  s(:dstr,
                    s(:gvar, :$INCFLAGS))),
                s(:pair,
                  s(:str, "CPPFLAGS"),
                  s(:dstr,
                    s(:gvar, :$CPPFLAGS))),
                s(:pair,
                  s(:str, "CFLAGS"),
                  s(:dstr,
                    s(:gvar, :$CFLAGS))),
                s(:pair,
                  s(:str, "ARCH_FLAG"),
                  s(:dstr,
                    s(:gvar, :$ARCH_FLAG))),
                s(:pair,
                  s(:str, "LDFLAGS"),
                  s(:dstr,
                    s(:gvar, :$LDFLAGS),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :ldflags)))),
                s(:pair,
                  s(:str, "LOCAL_LIBS"),
                  s(:dstr,
                    s(:gvar, :$LOCAL_LIBS),
                    s(:str, " "),
                    s(:gvar, :$libs))),
                s(:pair,
                  s(:str, "LIBS"),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :librubyarg)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :opt)),
                    s(:str, " "),
                    s(:gvar, :$LIBS)))))),
          s(:send,
            s(:lvar, :conf), :[]=,
            s(:str, "LIBPATH"),
            s(:send, nil, :libpathflag,
              s(:block,
                s(:send,
                  s(:lvar, :libpath), :map),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :RbConfig), :expand,
                  s(:send,
                    s(:lvar, :s), :dup),
                  s(:lvar, :conf))))),
          s(:send,
            s(:const, nil, :RbConfig), :expand,
            s(:send,
              s(:const, nil, :TRY_LINK), :dup),
            s(:lvar, :conf)))),
      s(:def, :cc_command,
        s(:args,
          s(:optarg, :opt,
            s(:str, ""))),
        s(:begin,
          s(:lvasgn, :conf,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :merge,
              s(:hash,
                s(:pair,
                  s(:str, "hdrdir"),
                  s(:send,
                    s(:gvar, :$hdrdir), :quote)),
                s(:pair,
                  s(:str, "srcdir"),
                  s(:send,
                    s(:gvar, :$srcdir), :quote)),
                s(:pair,
                  s(:str, "arch_hdrdir"),
                  s(:send,
                    s(:gvar, :$arch_hdrdir), :quote)),
                s(:pair,
                  s(:str, "top_srcdir"),
                  s(:send,
                    s(:gvar, :$top_srcdir), :quote))))),
          s(:send,
            s(:const, nil, :RbConfig), :expand,
            s(:dstr,
              s(:str, "$(CC) "),
              s(:gvar, :$INCFLAGS),
              s(:str, " "),
              s(:gvar, :$CPPFLAGS),
              s(:str, " "),
              s(:gvar, :$CFLAGS),
              s(:str, " "),
              s(:gvar, :$ARCH_FLAG),
              s(:str, " "),
              s(:begin,
                s(:lvar, :opt)),
              s(:str, " -c "),
              s(:begin,
                s(:const, nil, :CONFTEST_C))),
            s(:lvar, :conf)))),
      s(:def, :cpp_command,
        s(:args,
          s(:arg, :outfile),
          s(:optarg, :opt,
            s(:str, ""))),
        s(:begin,
          s(:lvasgn, :conf,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :merge,
              s(:hash,
                s(:pair,
                  s(:str, "hdrdir"),
                  s(:send,
                    s(:gvar, :$hdrdir), :quote)),
                s(:pair,
                  s(:str, "srcdir"),
                  s(:send,
                    s(:gvar, :$srcdir), :quote)),
                s(:pair,
                  s(:str, "arch_hdrdir"),
                  s(:send,
                    s(:gvar, :$arch_hdrdir), :quote)),
                s(:pair,
                  s(:str, "top_srcdir"),
                  s(:send,
                    s(:gvar, :$top_srcdir), :quote))))),
          s(:if,
            s(:and,
              s(:and,
                s(:gvar, :$universal),
                s(:begin,
                  s(:lvasgn, :arch_flag,
                    s(:send,
                      s(:lvar, :conf), :[],
                      s(:str, "ARCH_FLAG"))))),
              s(:send,
                s(:send,
                  s(:lvar, :arch_flag), :empty?), :!)),
            s(:send,
              s(:lvar, :conf), :[]=,
              s(:str, "ARCH_FLAG"),
              s(:send,
                s(:lvar, :arch_flag), :gsub,
                s(:regexp,
                  s(:str, "(?:\\G|\\s)-arch\\s+\\S+"),
                  s(:regopt)),
                s(:str, ""))), nil),
          s(:send,
            s(:const, nil, :RbConfig), :expand,
            s(:dstr,
              s(:str, "$(CPP) "),
              s(:gvar, :$INCFLAGS),
              s(:str, " "),
              s(:gvar, :$CPPFLAGS),
              s(:str, " "),
              s(:gvar, :$CFLAGS),
              s(:str, " "),
              s(:begin,
                s(:lvar, :opt)),
              s(:str, " "),
              s(:begin,
                s(:const, nil, :CONFTEST_C)),
              s(:str, " "),
              s(:begin,
                s(:lvar, :outfile))),
            s(:lvar, :conf)))),
      s(:def, :libpathflag,
        s(:args,
          s(:optarg, :libpath,
            s(:send,
              s(:gvar, :$DEFLIBPATH), :|,
              s(:gvar, :$LIBPATH)))),
        s(:send,
          s(:block,
            s(:send,
              s(:lvar, :libpath), :map),
            s(:args,
              s(:arg, :x)),
            s(:send,
              s(:case,
                s(:lvar, :x),
                s(:when,
                  s(:str, "$(topdir)"),
                  s(:regexp,
                    s(:str, "\\A\\."),
                    s(:regopt)),
                  s(:const, nil, :LIBPATHFLAG)),
                s(:send,
                  s(:const, nil, :LIBPATHFLAG), :+,
                  s(:const, nil, :RPATHFLAG))), :%,
              s(:send,
                s(:lvar, :x), :quote))), :join)),
      s(:def, :with_werror,
        s(:args,
          s(:arg, :opt),
          s(:optarg, :opts,
            s(:nil))),
        s(:if,
          s(:lvar, :opts),
          s(:begin,
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :opts), :[],
                  s(:sym, :werror)),
                s(:block,
                  s(:send, nil, :config_string,
                    s(:str, "WERRORFLAG")),
                  s(:args,
                    s(:arg, :flag)),
                  s(:lvasgn, :opt,
                    s(:if,
                      s(:lvar, :opt),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :opt)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :flag))),
                      s(:lvar, :flag))))),
              s(:send,
                s(:begin,
                  s(:lvasgn, :opts,
                    s(:send,
                      s(:lvar, :opts), :dup))), :delete,
                s(:sym, :werror)), nil),
            s(:yield,
              s(:lvar, :opt),
              s(:lvar, :opts))),
          s(:yield,
            s(:lvar, :opt)))),
      s(:def, :try_link0,
        s(:args,
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:restarg, :opts),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :cmd,
            s(:send, nil, :link_command,
              s(:str, ""),
              s(:lvar, :opt))),
          s(:and,
            s(:if,
              s(:gvar, :$universal),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "tmpdir")),
                s(:block,
                  s(:send,
                    s(:const, nil, :Dir), :mktmpdir,
                    s(:str, "mkmf_"),
                    s(:lvasgn, :oldtmpdir,
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:str, "TMPDIR")))),
                  s(:args,
                    s(:arg, :tmpdir)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :ENV), :[]=,
                          s(:str, "TMPDIR"),
                          s(:lvar, :tmpdir)),
                        s(:send, nil, :try_do,
                          s(:lvar, :src),
                          s(:lvar, :cmd),
                          s(:splat,
                            s(:lvar, :opts)),
                          s(:block_pass,
                            s(:lvar, :b)))),
                      s(:send,
                        s(:const, nil, :ENV), :[]=,
                        s(:str, "TMPDIR"),
                        s(:lvar, :oldtmpdir)))))),
              s(:send, nil, :try_do,
                s(:lvar, :src),
                s(:lvar, :cmd),
                s(:splat,
                  s(:lvar, :opts)),
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:send,
              s(:const, nil, :File), :executable?,
              s(:send,
                s(:const, nil, :CONFTEST), :+,
                s(:gvar, :$EXEEXT)))))),
      s(:def, :try_link,
        s(:args,
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:restarg, :opts),
          s(:blockarg, :b)),
        s(:ensure,
          s(:send, nil, :try_link0,
            s(:lvar, :src),
            s(:lvar, :opt),
            s(:splat,
              s(:lvar, :opts)),
            s(:block_pass,
              s(:lvar, :b))),
          s(:send,
            s(:const, nil, :MakeMakefile), :rm_f,
            s(:dstr,
              s(:begin,
                s(:const, nil, :CONFTEST)),
              s(:str, "*")),
            s(:str, "c0x32*")))),
      s(:def, :try_compile,
        s(:args,
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:restarg, :opts),
          s(:blockarg, :b)),
        s(:ensure,
          s(:and,
            s(:block,
              s(:send, nil, :with_werror,
                s(:lvar, :opt),
                s(:splat,
                  s(:lvar, :opts))),
              s(:args,
                s(:arg, :_opt),
                s(:restarg)),
              s(:send, nil, :try_do,
                s(:lvar, :src),
                s(:send, nil, :cc_command,
                  s(:lvar, :_opt)),
                s(:splat,
                  s(:lvar, :opts)),
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:send,
              s(:const, nil, :File), :file?,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :CONFTEST)),
                s(:str, "."),
                s(:begin,
                  s(:gvar, :$OBJEXT))))),
          s(:send,
            s(:const, nil, :MakeMakefile), :rm_f,
            s(:dstr,
              s(:begin,
                s(:const, nil, :CONFTEST)),
              s(:str, "*"))))),
      s(:def, :try_cpp,
        s(:args,
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:restarg, :opts),
          s(:blockarg, :b)),
        s(:ensure,
          s(:and,
            s(:send, nil, :try_do,
              s(:lvar, :src),
              s(:send, nil, :cpp_command,
                s(:const, nil, :CPPOUTFILE),
                s(:lvar, :opt)),
              s(:splat,
                s(:lvar, :opts)),
              s(:block_pass,
                s(:lvar, :b))),
            s(:send,
              s(:const, nil, :File), :file?,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :CONFTEST)),
                s(:str, ".i")))),
          s(:send,
            s(:const, nil, :MakeMakefile), :rm_f,
            s(:dstr,
              s(:begin,
                s(:const, nil, :CONFTEST)),
              s(:str, "*"))))),
      s(:send, nil, :alias_method,
        s(:sym, :try_header),
        s(:begin,
          s(:or,
            s(:send, nil, :config_string,
              s(:str, "try_header")),
            s(:sym, :try_cpp)))),
      s(:def, :cpp_include,
        s(:args,
          s(:arg, :header)),
        s(:if,
          s(:lvar, :header),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :header), :kind_of?,
                s(:const, nil, :Array)), nil,
              s(:lvasgn, :header,
                s(:array,
                  s(:lvar, :header)))),
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :header), :map),
                s(:args,
                  s(:arg, :h)),
                s(:if,
                  s(:send,
                    s(:const, nil, :String), :===,
                    s(:lvar, :h)),
                  s(:dstr,
                    s(:str, "#include <"),
                    s(:begin,
                      s(:lvar, :h)),
                    s(:str, ">\n")),
                  s(:lvar, :h))), :join)),
          s(:str, ""))),
      s(:def, :with_cppflags,
        s(:args,
          s(:arg, :flags)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :cppflags,
              s(:gvar, :$CPPFLAGS)),
            s(:gvasgn, :$CPPFLAGS,
              s(:lvar, :flags)),
            s(:lvasgn, :ret,
              s(:yield))),
          s(:if,
            s(:lvar, :ret), nil,
            s(:gvasgn, :$CPPFLAGS,
              s(:lvar, :cppflags))))),
      s(:def, :try_cppflags,
        s(:args,
          s(:arg, :flags),
          s(:optarg, :opts,
            s(:hash))),
        s(:send, nil, :try_header,
          s(:const, nil, :MAIN_DOES_NOTHING),
          s(:lvar, :flags),
          s(:send,
            s(:hash,
              s(:pair,
                s(:sym, :werror),
                s(:true))), :update,
            s(:lvar, :opts)))),
      s(:def, :append_cppflags,
        s(:args,
          s(:arg, :flags),
          s(:restarg, :opts)),
        s(:block,
          s(:send,
            s(:send, nil, :Array,
              s(:lvar, :flags)), :each),
          s(:args,
            s(:arg, :flag)),
          s(:if,
            s(:block,
              s(:send, nil, :checking_for,
                s(:dstr,
                  s(:str, "whether "),
                  s(:begin,
                    s(:lvar, :flag)),
                  s(:str, " is accepted as CPPFLAGS"))),
              s(:args),
              s(:send, nil, :try_cppflags,
                s(:lvar, :flag),
                s(:splat,
                  s(:lvar, :opts)))),
            s(:send,
              s(:send,
                s(:gvar, :$CPPFLAGS), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :flag)), nil))),
      s(:def, :with_cflags,
        s(:args,
          s(:arg, :flags)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :cflags,
              s(:gvar, :$CFLAGS)),
            s(:gvasgn, :$CFLAGS,
              s(:lvar, :flags)),
            s(:lvasgn, :ret,
              s(:yield))),
          s(:if,
            s(:lvar, :ret), nil,
            s(:gvasgn, :$CFLAGS,
              s(:lvar, :cflags))))),
      s(:def, :try_cflags,
        s(:args,
          s(:arg, :flags),
          s(:optarg, :opts,
            s(:hash))),
        s(:send, nil, :try_compile,
          s(:const, nil, :MAIN_DOES_NOTHING),
          s(:lvar, :flags),
          s(:send,
            s(:hash,
              s(:pair,
                s(:sym, :werror),
                s(:true))), :update,
            s(:lvar, :opts)))),
      s(:def, :append_cflags,
        s(:args,
          s(:arg, :flags),
          s(:restarg, :opts)),
        s(:block,
          s(:send,
            s(:send, nil, :Array,
              s(:lvar, :flags)), :each),
          s(:args,
            s(:arg, :flag)),
          s(:if,
            s(:block,
              s(:send, nil, :checking_for,
                s(:dstr,
                  s(:str, "whether "),
                  s(:begin,
                    s(:lvar, :flag)),
                  s(:str, " is accepted as CFLAGS"))),
              s(:args),
              s(:send, nil, :try_cflags,
                s(:lvar, :flag),
                s(:splat,
                  s(:lvar, :opts)))),
            s(:send,
              s(:send,
                s(:gvar, :$CFLAGS), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :flag)), nil))),
      s(:def, :with_ldflags,
        s(:args,
          s(:arg, :flags)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :ldflags,
              s(:gvar, :$LDFLAGS)),
            s(:gvasgn, :$LDFLAGS,
              s(:lvar, :flags)),
            s(:lvasgn, :ret,
              s(:yield))),
          s(:if,
            s(:lvar, :ret), nil,
            s(:gvasgn, :$LDFLAGS,
              s(:lvar, :ldflags))))),
      s(:def, :try_ldflags,
        s(:args,
          s(:arg, :flags),
          s(:optarg, :opts,
            s(:hash))),
        s(:send, nil, :try_link,
          s(:const, nil, :MAIN_DOES_NOTHING),
          s(:lvar, :flags),
          s(:send,
            s(:hash,
              s(:pair,
                s(:sym, :werror),
                s(:true))), :update,
            s(:lvar, :opts)))),
      s(:def, :append_ldflags,
        s(:args,
          s(:arg, :flags),
          s(:restarg, :opts)),
        s(:block,
          s(:send,
            s(:send, nil, :Array,
              s(:lvar, :flags)), :each),
          s(:args,
            s(:arg, :flag)),
          s(:if,
            s(:block,
              s(:send, nil, :checking_for,
                s(:dstr,
                  s(:str, "whether "),
                  s(:begin,
                    s(:lvar, :flag)),
                  s(:str, " is accepted as LDFLAGS"))),
              s(:args),
              s(:send, nil, :try_ldflags,
                s(:lvar, :flag),
                s(:splat,
                  s(:lvar, :opts)))),
            s(:send,
              s(:send,
                s(:gvar, :$LDFLAGS), :<<,
                s(:str, " ")), :<<,
              s(:lvar, :flag)), nil))),
      s(:def, :try_static_assert,
        s(:args,
          s(:arg, :expr),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :headers,
            s(:send, nil, :cpp_include,
              s(:lvar, :headers))),
          s(:send, nil, :try_compile,
            s(:dstr,
              s(:begin,
                s(:lvar, :headers)),
              s(:str, "\n"),
              s(:str, "/*top*/\n"),
              s(:str, "int conftest_const[("),
              s(:begin,
                s(:lvar, :expr)),
              s(:str, ") ? 1 : -1];\n")),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :try_constant,
        s(:args,
          s(:arg, :const),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :includes,
            s(:send, nil, :cpp_include,
              s(:lvar, :headers))),
          s(:lvasgn, :neg,
            s(:send, nil, :try_static_assert,
              s(:dstr,
                s(:begin,
                  s(:lvar, :const)),
                s(:str, " < 0")),
              s(:lvar, :headers),
              s(:lvar, :opt))),
          s(:if,
            s(:const, nil, :CROSS_COMPILING),
            s(:begin,
              s(:if,
                s(:lvar, :neg),
                s(:lvasgn, :const,
                  s(:dstr,
                    s(:str, "-("),
                    s(:begin,
                      s(:lvar, :const)),
                    s(:str, ")"))),
                s(:if,
                  s(:send, nil, :try_static_assert,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :const)),
                      s(:str, " > 0")),
                    s(:lvar, :headers),
                    s(:lvar, :opt)), nil,
                  s(:if,
                    s(:send, nil, :try_static_assert,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :const)),
                        s(:str, " == 0")),
                      s(:lvar, :headers),
                      s(:lvar, :opt)),
                    s(:return,
                      s(:int, 0)),
                    s(:return,
                      s(:nil))))),
              s(:lvasgn, :upper,
                s(:int, 1)),
              s(:until,
                s(:send, nil, :try_static_assert,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :const)),
                    s(:str, " <= "),
                    s(:begin,
                      s(:lvar, :upper))),
                  s(:lvar, :headers),
                  s(:lvar, :opt)),
                s(:begin,
                  s(:lvasgn, :lower,
                    s(:lvar, :upper)),
                  s(:op_asgn,
                    s(:lvasgn, :upper), :<<,
                    s(:int, 1)))),
              s(:if,
                s(:lvar, :lower), nil,
                s(:return,
                  s(:nil))),
              s(:while,
                s(:send,
                  s(:lvar, :upper), :>,
                  s(:send,
                    s(:lvar, :lower), :+,
                    s(:int, 1))),
                s(:begin,
                  s(:lvasgn, :mid,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :upper), :+,
                          s(:lvar, :lower))), :/,
                      s(:int, 2))),
                  s(:if,
                    s(:send, nil, :try_static_assert,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :const)),
                        s(:str, " > "),
                        s(:begin,
                          s(:lvar, :mid))),
                      s(:lvar, :headers),
                      s(:lvar, :opt)),
                    s(:lvasgn, :lower,
                      s(:lvar, :mid)),
                    s(:lvasgn, :upper,
                      s(:lvar, :mid))))),
              s(:if,
                s(:lvar, :neg),
                s(:lvasgn, :upper,
                  s(:send,
                    s(:lvar, :upper), :-@)), nil),
              s(:return,
                s(:lvar, :upper))),
            s(:begin,
              s(:lvasgn, :src,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :includes)),
                  s(:str, "\n"),
                  s(:str, "#include <stdio.h>\n"),
                  s(:str, "/*top*/\n"),
                  s(:str, "typedef"),
                  s(:begin,
                    s(:if,
                      s(:lvar, :neg),
                      s(:str, ""),
                      s(:str, " unsigned"))),
                  s(:str, "\n"),
                  s(:str, "#ifdef PRI_LL_PREFIX\n"),
                  s(:str, "#define PRI_CONFTEST_PREFIX PRI_LL_PREFIX\n"),
                  s(:str, "LONG_LONG\n"),
                  s(:str, "#else\n"),
                  s(:str, "#define PRI_CONFTEST_PREFIX \"l\"\n"),
                  s(:str, "long\n"),
                  s(:str, "#endif\n"),
                  s(:str, "conftest_type;\n"),
                  s(:str, "conftest_type conftest_const = (conftest_type)("),
                  s(:begin,
                    s(:lvar, :const)),
                  s(:str, ");\n"),
                  s(:str, "int main() {printf(\"%\"PRI_CONFTEST_PREFIX\""),
                  s(:begin,
                    s(:if,
                      s(:lvar, :neg),
                      s(:str, "d"),
                      s(:str, "u"))),
                  s(:str, "\\n\", conftest_const); return 0;}\n"))),
              s(:kwbegin,
                s(:ensure,
                  s(:if,
                    s(:send, nil, :try_link0,
                      s(:lvar, :src),
                      s(:lvar, :opt),
                      s(:block_pass,
                        s(:lvar, :b))),
                    s(:block,
                      s(:send, nil, :xpopen,
                        s(:dstr,
                          s(:str, "./"),
                          s(:begin,
                            s(:const, nil, :CONFTEST)))),
                      s(:args,
                        s(:arg, :f)),
                      s(:return,
                        s(:send, nil, :Integer,
                          s(:send,
                            s(:lvar, :f), :gets)))), nil),
                  s(:send,
                    s(:const, nil, :MakeMakefile), :rm_f,
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :CONFTEST)),
                      s(:str, "*"))))))),
          s(:nil))),
      s(:def, :try_func,
        s(:args,
          s(:arg, :func),
          s(:arg, :libs),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :headers,
            s(:send, nil, :cpp_include,
              s(:lvar, :headers))),
          s(:case,
            s(:lvar, :func),
            s(:when,
              s(:regexp,
                s(:str, "^&"),
                s(:regopt)),
              s(:lvasgn, :decltype,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:dstr,
                    s(:str, "const volatile void *"),
                    s(:begin,
                      s(:lvar, :x)))))),
            s(:when,
              s(:regexp,
                s(:str, "\\)$"),
                s(:regopt)),
              s(:lvasgn, :call,
                s(:lvar, :func))),
            s(:begin,
              s(:lvasgn, :call,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :func)),
                  s(:str, "()"))),
              s(:lvasgn, :decltype,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :x)),
                  s(:dstr,
                    s(:str, "void ((*"),
                    s(:begin,
                      s(:lvar, :x)),
                    s(:str, ")())")))))),
          s(:if,
            s(:and,
              s(:lvar, :opt),
              s(:send,
                s(:send,
                  s(:lvar, :opt), :empty?), :!)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:array,
                    s(:array,
                      s(:sym, :to_str)),
                    s(:array,
                      s(:sym, :join),
                      s(:str, " ")),
                    s(:array,
                      s(:sym, :to_s))), :each),
                s(:args,
                  s(:arg, :meth),
                  s(:restarg, :args)),
                s(:if,
                  s(:send,
                    s(:lvar, :opt), :respond_to?,
                    s(:lvar, :meth)),
                  s(:break,
                    s(:lvasgn, :opt,
                      s(:send,
                        s(:lvar, :opt), :send,
                        s(:lvar, :meth),
                        s(:splat,
                          s(:lvar, :args))))), nil)),
              s(:lvasgn, :opt,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :opt)),
                  s(:str, " "),
                  s(:begin,
                    s(:lvar, :libs))))),
            s(:lvasgn, :opt,
              s(:lvar, :libs))),
          s(:or,
            s(:and,
              s(:lvar, :decltype),
              s(:send, nil, :try_link,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :headers)),
                  s(:str, "\n"),
                  s(:str, "/*top*/\n"),
                  s(:str, "extern int t(void);\n"),
                  s(:begin,
                    s(:send, nil, :MAIN_DOES_NOTHING,
                      s(:str, "t"))),
                  s(:str, "\n"),
                  s(:str, "int t(void) { "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :decltype), :[],
                      s(:str, "volatile p"))),
                  s(:str, "; p = ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :decltype), :[])),
                  s(:str, ")"),
                  s(:begin,
                    s(:lvar, :func)),
                  s(:str, "; return !p; }\n")),
                s(:lvar, :opt),
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:and,
              s(:lvar, :call),
              s(:send, nil, :try_link,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :headers)),
                  s(:str, "\n"),
                  s(:str, "/*top*/\n"),
                  s(:str, "extern int t(void);\n"),
                  s(:begin,
                    s(:send, nil, :MAIN_DOES_NOTHING,
                      s(:str, "t"))),
                  s(:str, "\n"),
                  s(:begin,
                    s(:if,
                      s(:lvar, :decltype),
                      s(:dstr,
                        s(:str, "extern void "),
                        s(:begin,
                          s(:lvar, :call)),
                        s(:str, ";")), nil)),
                  s(:str, "\n"),
                  s(:str, "int t(void) { "),
                  s(:begin,
                    s(:lvar, :call)),
                  s(:str, "; return 0; }\n")),
                s(:lvar, :opt),
                s(:block_pass,
                  s(:lvar, :b))))))),
      s(:def, :try_var,
        s(:args,
          s(:arg, :var),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :headers,
            s(:send, nil, :cpp_include,
              s(:lvar, :headers))),
          s(:send, nil, :try_compile,
            s(:dstr,
              s(:begin,
                s(:lvar, :headers)),
              s(:str, "\n"),
              s(:str, "/*top*/\n"),
              s(:str, "extern int t(void);\n"),
              s(:begin,
                s(:send, nil, :MAIN_DOES_NOTHING,
                  s(:str, "t"))),
              s(:str, "\n"),
              s(:str, "int t(void) { const volatile void *volatile p; p = &(&"),
              s(:begin,
                s(:lvar, :var)),
              s(:str, ")[0]; return !p; }\n")),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :egrep_cpp,
        s(:args,
          s(:arg, :pat),
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :src,
              s(:send, nil, :create_tmpsrc,
                s(:lvar, :src),
                s(:block_pass,
                  s(:lvar, :b)))),
            s(:block,
              s(:send, nil, :xpopen,
                s(:send, nil, :cpp_command,
                  s(:str, ""),
                  s(:lvar, :opt))),
              s(:args,
                s(:arg, :f)),
              s(:if,
                s(:send,
                  s(:const, nil, :Regexp), :===,
                  s(:lvar, :pat)),
                s(:begin,
                  s(:send, nil, :puts,
                    s(:dstr,
                      s(:str, "    ruby -ne 'print if "),
                      s(:begin,
                        s(:send,
                          s(:lvar, :pat), :inspect)),
                      s(:str, "'"))),
                  s(:block,
                    s(:send,
                      s(:lvar, :f), :grep,
                      s(:lvar, :pat)),
                    s(:args,
                      s(:arg, :l)),
                    s(:begin,
                      s(:send, nil, :puts,
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :f), :lineno)),
                          s(:str, ": "),
                          s(:begin,
                            s(:lvar, :l)))),
                      s(:return,
                        s(:true)))),
                  s(:false)),
                s(:begin,
                  s(:send, nil, :puts,
                    s(:dstr,
                      s(:str, "    egrep '"),
                      s(:begin,
                        s(:lvar, :pat)),
                      s(:str, "'"))),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :stdin,
                          s(:send,
                            s(:gvar, :$stdin), :dup)),
                        s(:send,
                          s(:gvar, :$stdin), :reopen,
                          s(:lvar, :f)),
                        s(:send, nil, :system,
                          s(:str, "egrep"),
                          s(:lvar, :pat))),
                      s(:send,
                        s(:gvar, :$stdin), :reopen,
                        s(:lvar, :stdin)))))))),
          s(:begin,
            s(:send,
              s(:const, nil, :MakeMakefile), :rm_f,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :CONFTEST)),
                s(:str, "*"))),
            s(:send, nil, :log_src,
              s(:lvar, :src))))),
      s(:def, :macro_defined?,
        s(:args,
          s(:arg, :macro),
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :src,
            s(:send,
              s(:lvar, :src), :sub,
              s(:regexp,
                s(:str, "[^\\n]\\z"),
                s(:regopt)),
              s(:str, "\\&\n"))),
          s(:send, nil, :try_compile,
            s(:send,
              s(:lvar, :src), :+,
              s(:dstr,
                s(:str, "/*top*/\n"),
                s(:str, "#ifndef "),
                s(:begin,
                  s(:lvar, :macro)),
                s(:str, "\n"),
                s(:str, "# error\n"),
                s(:str, "|:/ === "),
                s(:begin,
                  s(:lvar, :macro)),
                s(:str, " undefined === /:|\n"),
                s(:str, "#endif\n"))),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :try_run,
        s(:args,
          s(:arg, :src),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:ensure,
          s(:begin,
            s(:if,
              s(:const, nil, :CROSS_COMPILING),
              s(:send, nil, :raise,
                s(:str, "cannot run test program while cross compiling")), nil),
            s(:if,
              s(:send, nil, :try_link0,
                s(:lvar, :src),
                s(:lvar, :opt),
                s(:block_pass,
                  s(:lvar, :b))),
              s(:send, nil, :xsystem,
                s(:dstr,
                  s(:str, "./"),
                  s(:begin,
                    s(:const, nil, :CONFTEST)))),
              s(:nil))),
          s(:send,
            s(:const, nil, :MakeMakefile), :rm_f,
            s(:dstr,
              s(:begin,
                s(:const, nil, :CONFTEST)),
              s(:str, "*"))))),
      s(:def, :install_files,
        s(:args,
          s(:arg, :mfile),
          s(:arg, :ifiles),
          s(:optarg, :map,
            s(:nil)),
          s(:optarg, :srcprefix,
            s(:nil))),
        s(:begin,
          s(:or,
            s(:lvar, :ifiles),
            s(:return)),
          s(:and,
            s(:send,
              s(:lvar, :ifiles), :empty?),
            s(:return)),
          s(:or_asgn,
            s(:lvasgn, :srcprefix),
            s(:send,
              s(:dstr,
                s(:str, "$(srcdir)/"),
                s(:begin,
                  s(:lvar, :srcprefix))), :chomp,
              s(:str, "/"))),
          s(:send,
            s(:const, nil, :RbConfig), :expand,
            s(:lvasgn, :srcdir,
              s(:send,
                s(:lvar, :srcprefix), :dup))),
          s(:lvasgn, :dirs,
            s(:array)),
          s(:lvasgn, :path,
            s(:block,
              s(:send,
                s(:const, nil, :Hash), :new),
              s(:args,
                s(:arg, :h),
                s(:arg, :i)),
              s(:send,
                s(:lvar, :h), :[]=,
                s(:lvar, :i),
                s(:send,
                  s(:send,
                    s(:lvar, :dirs), :push,
                    s(:array,
                      s(:lvar, :i))), :[],
                  s(:int, -1))))),
          s(:block,
            s(:send,
              s(:lvar, :ifiles), :each),
            s(:args,
              s(:arg, :files),
              s(:arg, :dir),
              s(:arg, :prefix)),
            s(:begin,
              s(:lvasgn, :dir,
                s(:send, nil, :map_dir,
                  s(:lvar, :dir),
                  s(:lvar, :map))),
              s(:and_asgn,
                s(:lvasgn, :prefix),
                s(:regexp,
                  s(:str, "\\A"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Regexp), :quote,
                      s(:lvar, :prefix))),
                  s(:str, "/?"),
                  s(:regopt))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A\\./"),
                    s(:regopt)),
                  s(:lvar, :files)),
                s(:begin,
                  s(:lvasgn, :files,
                    s(:send,
                      s(:lvar, :files), :[],
                      s(:irange,
                        s(:int, 2),
                        s(:int, -1)))),
                  s(:lvasgn, :len,
                    s(:nil))),
                s(:begin,
                  s(:lvasgn, :files,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :srcdir),
                      s(:lvar, :files))),
                  s(:lvasgn, :len,
                    s(:send,
                      s(:lvar, :srcdir), :size)))),
              s(:lvasgn, :f,
                s(:nil)),
              s(:block,
                s(:send,
                  s(:const, nil, :Dir), :glob,
                  s(:lvar, :files)),
                s(:args,
                  s(:arg, :fx)),
                s(:begin,
                  s(:lvasgn, :f,
                    s(:lvar, :fx)),
                  s(:if,
                    s(:lvar, :len),
                    s(:send,
                      s(:lvar, :f), :[]=,
                      s(:irange,
                        s(:int, 0),
                        s(:lvar, :len)),
                      s(:str, "")), nil),
                  s(:case,
                    s(:send,
                      s(:const, nil, :File), :basename,
                      s(:lvar, :f)),
                    s(:when,
                      s(:splat,
                        s(:gvar, :$NONINSTALLFILES)),
                      s(:next)), nil),
                  s(:lvasgn, :d,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :f))),
                  s(:if,
                    s(:lvar, :prefix),
                    s(:send,
                      s(:lvar, :d), :sub!,
                      s(:lvar, :prefix),
                      s(:str, "")), nil),
                  s(:lvasgn, :d,
                    s(:if,
                      s(:begin,
                        s(:or,
                          s(:send,
                            s(:lvar, :d), :empty?),
                          s(:send,
                            s(:lvar, :d), :==,
                            s(:str, ".")))),
                      s(:lvar, :dir),
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :dir),
                        s(:lvar, :d)))),
                  s(:if,
                    s(:lvar, :len),
                    s(:lvasgn, :f,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :srcprefix),
                        s(:lvar, :f))), nil),
                  s(:send,
                    s(:send,
                      s(:lvar, :path), :[],
                      s(:lvar, :d)), :<<,
                    s(:lvar, :f)))),
              s(:if,
                s(:or,
                  s(:lvar, :len),
                  s(:lvar, :f)), nil,
                s(:begin,
                  s(:lvasgn, :d,
                    s(:send,
                      s(:const, nil, :File), :dirname,
                      s(:lvar, :files))),
                  s(:if,
                    s(:lvar, :prefix),
                    s(:send,
                      s(:lvar, :d), :sub!,
                      s(:lvar, :prefix),
                      s(:str, "")), nil),
                  s(:lvasgn, :d,
                    s(:if,
                      s(:begin,
                        s(:or,
                          s(:send,
                            s(:lvar, :d), :empty?),
                          s(:send,
                            s(:lvar, :d), :==,
                            s(:str, ".")))),
                      s(:lvar, :dir),
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :dir),
                        s(:lvar, :d)))),
                  s(:send,
                    s(:send,
                      s(:lvar, :path), :[],
                      s(:lvar, :d)), :<<,
                    s(:lvar, :files)))))),
          s(:lvar, :dirs))),
      s(:def, :install_rb,
        s(:args,
          s(:arg, :mfile),
          s(:arg, :dest),
          s(:optarg, :srcdir,
            s(:nil))),
        s(:send, nil, :install_files,
          s(:lvar, :mfile),
          s(:array,
            s(:array,
              s(:str, "lib/**/*.rb"),
              s(:lvar, :dest),
              s(:str, "lib"))),
          s(:nil),
          s(:lvar, :srcdir))),
      s(:def, :append_library,
        s(:args,
          s(:arg, :libs),
          s(:arg, :lib)),
        s(:send,
          s(:send,
            s(:send, nil, :format,
              s(:const, nil, :LIBARG),
              s(:lvar, :lib)), :+,
            s(:str, " ")), :+,
          s(:lvar, :libs))),
      s(:def, :message,
        s(:args,
          s(:restarg, :s)),
        s(:if,
          s(:and,
            s(:send,
              s(:const, nil, :Logging), :quiet),
            s(:send,
              s(:gvar, :$VERBOSE), :!)), nil,
          s(:begin,
            s(:send, nil, :printf,
              s(:splat,
                s(:lvar, :s))),
            s(:send,
              s(:gvar, :$stdout), :flush)))),
      s(:def, :checking_for,
        s(:args,
          s(:arg, :m),
          s(:optarg, :fmt,
            s(:nil))),
        s(:begin,
          s(:and,
            s(:lvasgn, :f,
              s(:send,
                s(:send,
                  s(:send, nil, :caller), :[],
                  s(:int, 0)), :[],
                s(:regexp,
                  s(:str, "in `([^<].*)'$"),
                  s(:regopt)),
                s(:int, 1))),
            s(:send,
              s(:lvar, :f), :<<,
              s(:str, ": "))),
          s(:lvasgn, :m,
            s(:dstr,
              s(:str, "checking "),
              s(:begin,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\Acheck"),
                      s(:regopt)),
                    s(:lvar, :f)),
                  s(:str, ""),
                  s(:str, "for "))),
              s(:begin,
                s(:lvar, :m)),
              s(:str, "... "))),
          s(:send, nil, :message,
            s(:str, "%s"),
            s(:lvar, :m)),
          s(:lvasgn, :a,
            s(:lvasgn, :r,
              s(:nil))),
          s(:block,
            s(:send,
              s(:const, nil, :Logging), :postpone),
            s(:args),
            s(:begin,
              s(:lvasgn, :r,
                s(:yield)),
              s(:lvasgn, :a,
                s(:send,
                  s(:begin,
                    s(:if,
                      s(:lvar, :fmt),
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :fmt), :%,
                            s(:lvar, :r)))),
                      s(:if,
                        s(:lvar, :r),
                        s(:str, "yes"),
                        s(:str, "no")))), :<<,
                  s(:str, "\n"))),
              s(:dstr,
                s(:begin,
                  s(:lvar, :f)),
                s(:begin,
                  s(:lvar, :m)),
                s(:str, "-------------------- "),
                s(:begin,
                  s(:lvar, :a)),
                s(:str, "\n")))),
          s(:send, nil, :message,
            s(:lvar, :a)),
          s(:send,
            s(:const, nil, :Logging), :message,
            s(:str, "--------------------\n\n")),
          s(:lvar, :r))),
      s(:def, :checking_message,
        s(:args,
          s(:arg, :target),
          s(:optarg, :place,
            s(:nil)),
          s(:optarg, :opt,
            s(:nil))),
        s(:block,
          s(:send,
            s(:array,
              s(:array,
                s(:str, "in"),
                s(:lvar, :place)),
              s(:array,
                s(:str, "with"),
                s(:lvar, :opt))), :inject,
            s(:dstr,
              s(:begin,
                s(:lvar, :target)))),
          s(:args,
            s(:arg, :msg),
            s(:mlhs,
              s(:arg, :pre),
              s(:arg, :noun))),
          s(:begin,
            s(:if,
              s(:lvar, :noun),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:array,
                        s(:sym, :to_str)),
                      s(:array,
                        s(:sym, :join),
                        s(:str, ",")),
                      s(:array,
                        s(:sym, :to_s))), :each),
                  s(:args,
                    s(:arg, :meth),
                    s(:restarg, :args)),
                  s(:if,
                    s(:send,
                      s(:lvar, :noun), :respond_to?,
                      s(:lvar, :meth)),
                    s(:break,
                      s(:lvasgn, :noun,
                        s(:send,
                          s(:lvar, :noun), :send,
                          s(:lvar, :meth),
                          s(:splat,
                            s(:lvar, :args))))), nil)),
                s(:if,
                  s(:send,
                    s(:lvar, :noun), :empty?), nil,
                  s(:send,
                    s(:lvar, :msg), :<<,
                    s(:dstr,
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :pre)),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :noun)))))), nil),
            s(:lvar, :msg)))),
      s(:def, :have_macro,
        s(:args,
          s(:arg, :macro),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:lvar, :macro),
              s(:lvar, :headers),
              s(:lvar, :opt))),
          s(:args),
          s(:send, nil, :macro_defined?,
            s(:lvar, :macro),
            s(:send, nil, :cpp_include,
              s(:lvar, :headers)),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :have_library,
        s(:args,
          s(:arg, :lib),
          s(:optarg, :func,
            s(:nil)),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :func), :!),
              s(:send,
                s(:lvar, :func), :empty?)),
            s(:lvasgn, :func,
              s(:str, "main")), nil),
          s(:lvasgn, :lib,
            s(:send, nil, :with_config,
              s(:send,
                s(:lvar, :lib), :+,
                s(:str, "lib")),
              s(:lvar, :lib))),
          s(:block,
            s(:send, nil, :checking_for,
              s(:send, nil, :checking_message,
                s(:send,
                  s(:lvar, :func), :funcall_style),
                s(:send,
                  s(:const, nil, :LIBARG), :%,
                  s(:lvar, :lib)),
                s(:lvar, :opt))),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :COMMON_LIBS), :include?,
                s(:lvar, :lib)),
              s(:true),
              s(:begin,
                s(:lvasgn, :libs,
                  s(:send, nil, :append_library,
                    s(:gvar, :$libs),
                    s(:lvar, :lib))),
                s(:if,
                  s(:send, nil, :try_func,
                    s(:lvar, :func),
                    s(:lvar, :libs),
                    s(:lvar, :headers),
                    s(:lvar, :opt),
                    s(:block_pass,
                      s(:lvar, :b))),
                  s(:begin,
                    s(:gvasgn, :$libs,
                      s(:lvar, :libs)),
                    s(:true)),
                  s(:false))))))),
      s(:def, :find_library,
        s(:args,
          s(:arg, :lib),
          s(:arg, :func),
          s(:restarg, :paths),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :func), :!),
              s(:send,
                s(:lvar, :func), :empty?)),
            s(:lvasgn, :func,
              s(:str, "main")), nil),
          s(:lvasgn, :lib,
            s(:send, nil, :with_config,
              s(:send,
                s(:lvar, :lib), :+,
                s(:str, "lib")),
              s(:lvar, :lib))),
          s(:lvasgn, :paths,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :paths), :collect),
                s(:args,
                  s(:arg, :path)),
                s(:send,
                  s(:lvar, :path), :split,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))), :flatten)),
          s(:block,
            s(:send, nil, :checking_for,
              s(:send, nil, :checking_message,
                s(:send,
                  s(:lvar, :func), :funcall_style),
                s(:send,
                  s(:const, nil, :LIBARG), :%,
                  s(:lvar, :lib)))),
            s(:args),
            s(:begin,
              s(:lvasgn, :libpath,
                s(:gvar, :$LIBPATH)),
              s(:lvasgn, :libs,
                s(:send, nil, :append_library,
                  s(:gvar, :$libs),
                  s(:lvar, :lib))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:until,
                      s(:or,
                        s(:lvasgn, :r,
                          s(:send, nil, :try_func,
                            s(:lvar, :func),
                            s(:lvar, :libs),
                            s(:block_pass,
                              s(:lvar, :b)))),
                        s(:send,
                          s(:lvar, :paths), :empty?)),
                      s(:gvasgn, :$LIBPATH,
                        s(:send,
                          s(:lvar, :libpath), :|,
                          s(:array,
                            s(:send,
                              s(:lvar, :paths), :shift))))),
                    s(:if,
                      s(:lvar, :r),
                      s(:begin,
                        s(:gvasgn, :$libs,
                          s(:lvar, :libs)),
                        s(:lvasgn, :libpath,
                          s(:nil))), nil)),
                  s(:if,
                    s(:lvar, :libpath),
                    s(:gvasgn, :$LIBPATH,
                      s(:lvar, :libpath)), nil))),
              s(:lvar, :r))))),
      s(:def, :have_func,
        s(:args,
          s(:arg, :func),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:send,
                s(:lvar, :func), :funcall_style),
              s(:lvar, :headers),
              s(:lvar, :opt))),
          s(:args),
          s(:if,
            s(:send, nil, :try_func,
              s(:lvar, :func),
              s(:gvar, :$libs),
              s(:lvar, :headers),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :b))),
            s(:begin,
              s(:send,
                s(:gvar, :$defs), :<<,
                s(:dstr,
                  s(:str, "-DHAVE_"),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :func), :sans_arguments), :tr_cpp)))),
              s(:true)),
            s(:false)))),
      s(:def, :have_var,
        s(:args,
          s(:arg, :var),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:lvar, :var),
              s(:lvar, :headers),
              s(:lvar, :opt))),
          s(:args),
          s(:if,
            s(:send, nil, :try_var,
              s(:lvar, :var),
              s(:lvar, :headers),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :b))),
            s(:begin,
              s(:send,
                s(:gvar, :$defs), :push,
                s(:send, nil, :format,
                  s(:str, "-DHAVE_%s"),
                  s(:send,
                    s(:lvar, :var), :tr_cpp))),
              s(:true)),
            s(:false)))),
      s(:def, :have_header,
        s(:args,
          s(:arg, :header),
          s(:optarg, :preheaders,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:lvar, :header)),
          s(:args),
          s(:if,
            s(:send, nil, :try_header,
              s(:send,
                s(:send, nil, :cpp_include,
                  s(:lvar, :preheaders)), :+,
                s(:send, nil, :cpp_include,
                  s(:lvar, :header))),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :b))),
            s(:begin,
              s(:send,
                s(:gvar, :$defs), :push,
                s(:send, nil, :format,
                  s(:str, "-DHAVE_%s"),
                  s(:send,
                    s(:lvar, :header), :tr_cpp))),
              s(:true)),
            s(:false)))),
      s(:def, :have_framework,
        s(:args,
          s(:arg, :fw),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:send,
              s(:const, nil, :Array), :===,
              s(:lvar, :fw)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :fw),
                s(:lvasgn, :header)),
              s(:array,
                s(:splat,
                  s(:lvar, :fw)))),
            s(:lvasgn, :header,
              s(:dstr,
                s(:begin,
                  s(:lvar, :fw)),
                s(:str, ".h")))),
          s(:block,
            s(:send, nil, :checking_for,
              s(:lvar, :fw)),
            s(:args),
            s(:begin,
              s(:lvasgn, :src,
                s(:send,
                  s(:send, nil, :cpp_include,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :fw)),
                      s(:str, "/"),
                      s(:begin,
                        s(:lvar, :header)))), :<<,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:str, "int main(void){return 0;}")))),
              s(:lvasgn, :opt,
                s(:dstr,
                  s(:str, " -framework "),
                  s(:begin,
                    s(:lvar, :fw)))),
              s(:if,
                s(:or,
                  s(:send, nil, :try_link,
                    s(:lvar, :src),
                    s(:lvar, :opt),
                    s(:block_pass,
                      s(:lvar, :b))),
                  s(:begin,
                    s(:lvasgn, :objc,
                      s(:send, nil, :try_link,
                        s(:lvar, :src),
                        s(:dstr,
                          s(:str, "-ObjC"),
                          s(:begin,
                            s(:lvar, :opt))),
                        s(:block_pass,
                          s(:lvar, :b)))))),
                s(:begin,
                  s(:send,
                    s(:gvar, :$defs), :push,
                    s(:send, nil, :format,
                      s(:str, "-DHAVE_FRAMEWORK_%s"),
                      s(:send,
                        s(:lvar, :fw), :tr_cpp))),
                  s(:if,
                    s(:and,
                      s(:lvar, :objc),
                      s(:send,
                        s(:regexp,
                          s(:str, "(\\A|\\s)-ObjC(\\s|\\z)"),
                          s(:regopt)), :!~,
                        s(:gvar, :$LDFLAGS))),
                    s(:send,
                      s(:gvar, :$LDFLAGS), :<<,
                      s(:str, " -ObjC")), nil),
                  s(:send,
                    s(:gvar, :$LIBS), :<<,
                    s(:lvar, :opt)),
                  s(:true)),
                s(:false)))))),
      s(:def, :find_header,
        s(:args,
          s(:arg, :header),
          s(:restarg, :paths)),
        s(:begin,
          s(:lvasgn, :message,
            s(:send, nil, :checking_message,
              s(:lvar, :header),
              s(:lvar, :paths))),
          s(:lvasgn, :header,
            s(:send, nil, :cpp_include,
              s(:lvar, :header))),
          s(:block,
            s(:send, nil, :checking_for,
              s(:lvar, :message)),
            s(:args),
            s(:if,
              s(:send, nil, :try_header,
                s(:lvar, :header)),
              s(:true),
              s(:begin,
                s(:lvasgn, :found,
                  s(:false)),
                s(:block,
                  s(:send,
                    s(:lvar, :paths), :each),
                  s(:args,
                    s(:arg, :dir)),
                  s(:begin,
                    s(:lvasgn, :opt,
                      s(:send,
                        s(:dstr,
                          s(:str, "-I"),
                          s(:begin,
                            s(:lvar, :dir))), :quote)),
                    s(:if,
                      s(:send, nil, :try_header,
                        s(:lvar, :header),
                        s(:lvar, :opt)),
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:gvar, :$INCFLAGS), :<<,
                            s(:str, " ")), :<<,
                          s(:lvar, :opt)),
                        s(:lvasgn, :found,
                          s(:true)),
                        s(:break)), nil))),
                s(:lvar, :found)))))),
      s(:def, :have_struct_member,
        s(:args,
          s(:arg, :type),
          s(:arg, :member),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:dstr,
                s(:begin,
                  s(:lvar, :type)),
                s(:str, "."),
                s(:begin,
                  s(:lvar, :member))),
              s(:lvar, :headers))),
          s(:args),
          s(:if,
            s(:send, nil, :try_compile,
              s(:dstr,
                s(:begin,
                  s(:send, nil, :cpp_include,
                    s(:lvar, :headers))),
                s(:str, "\n"),
                s(:str, "/*top*/\n"),
                s(:str, "int s = (char *)&(("),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, "*)0)->"),
                s(:begin,
                  s(:lvar, :member)),
                s(:str, " - (char *)0;\n"),
                s(:begin,
                  s(:const, nil, :MAIN_DOES_NOTHING)),
                s(:str, "\n")),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :b))),
            s(:begin,
              s(:send,
                s(:gvar, :$defs), :push,
                s(:send, nil, :format,
                  s(:str, "-DHAVE_%s_%s"),
                  s(:send,
                    s(:lvar, :type), :tr_cpp),
                  s(:send,
                    s(:lvar, :member), :tr_cpp))),
              s(:send,
                s(:gvar, :$defs), :push,
                s(:send, nil, :format,
                  s(:str, "-DHAVE_ST_%s"),
                  s(:send,
                    s(:lvar, :member), :tr_cpp))),
              s(:true)),
            s(:false)))),
      s(:def, :try_type,
        s(:args,
          s(:arg, :type),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:if,
          s(:send, nil, :try_compile,
            s(:dstr,
              s(:begin,
                s(:send, nil, :cpp_include,
                  s(:lvar, :headers))),
              s(:str, "\n"),
              s(:str, "/*top*/\n"),
              s(:str, "typedef "),
              s(:begin,
                s(:lvar, :type)),
              s(:str, " conftest_type;\n"),
              s(:str, "int conftestval[sizeof(conftest_type)?1:-1];\n")),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))),
          s(:begin,
            s(:send,
              s(:gvar, :$defs), :push,
              s(:send, nil, :format,
                s(:str, "-DHAVE_TYPE_%s"),
                s(:send,
                  s(:lvar, :type), :tr_cpp))),
            s(:true)),
          s(:false))),
      s(:def, :have_type,
        s(:args,
          s(:arg, :type),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:lvar, :type),
              s(:lvar, :headers),
              s(:lvar, :opt))),
          s(:args),
          s(:send, nil, :try_type,
            s(:lvar, :type),
            s(:lvar, :headers),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:def, :find_type,
        s(:args,
          s(:arg, :type),
          s(:arg, :opt),
          s(:restarg, :headers),
          s(:blockarg, :b)),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :opt),
            s(:str, "")),
          s(:lvasgn, :fmt,
            s(:str, "not found")),
          s(:defs,
            s(:lvar, :fmt), :%,
            s(:args,
              s(:arg, :x)),
            s(:if,
              s(:lvar, :x),
              s(:if,
                s(:send,
                  s(:lvar, :x), :respond_to?,
                  s(:sym, :join)),
                s(:send,
                  s(:lvar, :x), :join,
                  s(:str, ",")),
                s(:lvar, :x)),
              s(:self))),
          s(:block,
            s(:send, nil, :checking_for,
              s(:send, nil, :checking_message,
                s(:lvar, :type),
                s(:nil),
                s(:lvar, :opt)),
              s(:lvar, :fmt)),
            s(:args),
            s(:block,
              s(:send,
                s(:lvar, :headers), :find),
              s(:args,
                s(:arg, :h)),
              s(:send, nil, :try_type,
                s(:lvar, :type),
                s(:lvar, :h),
                s(:lvar, :opt),
                s(:block_pass,
                  s(:lvar, :b))))))),
      s(:def, :try_const,
        s(:args,
          s(:arg, :const),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :const),
              s(:lvasgn, :type)),
            s(:array,
              s(:splat,
                s(:lvar, :const)))),
          s(:if,
            s(:send, nil, :try_compile,
              s(:dstr,
                s(:begin,
                  s(:send, nil, :cpp_include,
                    s(:lvar, :headers))),
                s(:str, "\n"),
                s(:str, "/*top*/\n"),
                s(:str, "typedef "),
                s(:begin,
                  s(:or,
                    s(:lvar, :type),
                    s(:str, "int"))),
                s(:str, " conftest_type;\n"),
                s(:str, "conftest_type conftestval = "),
                s(:begin,
                  s(:if,
                    s(:lvar, :type),
                    s(:str, ""),
                    s(:str, "(int)"))),
                s(:begin,
                  s(:lvar, :const)),
                s(:str, ";\n")),
              s(:lvar, :opt),
              s(:block_pass,
                s(:lvar, :b))),
            s(:begin,
              s(:send,
                s(:gvar, :$defs), :push,
                s(:send, nil, :format,
                  s(:str, "-DHAVE_CONST_%s"),
                  s(:send,
                    s(:lvar, :const), :tr_cpp))),
              s(:true)),
            s(:false)))),
      s(:def, :have_const,
        s(:args,
          s(:arg, :const),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opt,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:send,
                s(:send,
                  s(:array,
                    s(:splat,
                      s(:lvar, :const))), :compact), :join,
                s(:str, " ")),
              s(:lvar, :headers),
              s(:lvar, :opt))),
          s(:args),
          s(:send, nil, :try_const,
            s(:lvar, :const),
            s(:lvar, :headers),
            s(:lvar, :opt),
            s(:block_pass,
              s(:lvar, :b))))),
      s(:casgn, nil, :STRING_OR_FAILED_FORMAT,
        s(:str, "%s")),
      s(:defs,
        s(:const, nil, :STRING_OR_FAILED_FORMAT), :%,
        s(:args,
          s(:arg, :x)),
        s(:if,
          s(:lvar, :x),
          s(:zsuper),
          s(:str, "failed"))),
      s(:def, :typedef_expr,
        s(:args,
          s(:arg, :type),
          s(:arg, :headers)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :typename),
              s(:lvasgn, :member)),
            s(:send,
              s(:lvar, :type), :split,
              s(:str, "."),
              s(:int, 2))),
          s(:lvasgn, :prelude,
            s(:send,
              s(:send, nil, :cpp_include,
                s(:lvar, :headers)), :split,
              s(:regexp,
                s(:str, "$"),
                s(:regopt)))),
          s(:send,
            s(:lvar, :prelude), :<<,
            s(:dstr,
              s(:str, "typedef "),
              s(:begin,
                s(:lvar, :typename)),
              s(:str, " rbcv_typedef_;\n"))),
          s(:return,
            s(:str, "rbcv_typedef_"),
            s(:lvar, :member),
            s(:lvar, :prelude)))),
      s(:def, :try_signedness,
        s(:args,
          s(:arg, :type),
          s(:arg, :member),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opts,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :member),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "don't know how to tell signedness of members")), nil),
          s(:if,
            s(:send, nil, :try_static_assert,
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, ")-1 < 0")),
              s(:lvar, :headers),
              s(:lvar, :opts)),
            s(:return,
              s(:int, -1)),
            s(:if,
              s(:send, nil, :try_static_assert,
                s(:dstr,
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, ")-1 > 0")),
                s(:lvar, :headers),
                s(:lvar, :opts)),
              s(:return,
                s(:int, 1)), nil)))),
      s(:def, :check_sizeof,
        s(:args,
          s(:arg, :type),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opts,
            s(:str, "")),
          s(:blockarg, :b)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :typedef),
              s(:lvasgn, :member),
              s(:lvasgn, :prelude)),
            s(:send, nil, :typedef_expr,
              s(:lvar, :type),
              s(:lvar, :headers))),
          s(:send,
            s(:lvar, :prelude), :<<,
            s(:dstr,
              s(:begin,
                s(:lvar, :typedef)),
              s(:str, " *rbcv_ptr_;\n"))),
          s(:lvasgn, :prelude,
            s(:array,
              s(:lvar, :prelude))),
          s(:lvasgn, :expr,
            s(:dstr,
              s(:str, "sizeof((*rbcv_ptr_)"),
              s(:begin,
                s(:if,
                  s(:lvar, :member),
                  s(:send,
                    s(:str, "."), :<<,
                    s(:lvar, :member)), nil)),
              s(:str, ")"))),
          s(:lvasgn, :fmt,
            s(:const, nil, :STRING_OR_FAILED_FORMAT)),
          s(:block,
            s(:send, nil, :checking_for,
              s(:send, nil, :checking_message,
                s(:dstr,
                  s(:str, "size of "),
                  s(:begin,
                    s(:lvar, :type))),
                s(:lvar, :headers)),
              s(:lvar, :fmt)),
            s(:args),
            s(:if,
              s(:lvasgn, :size,
                s(:send, nil, :try_constant,
                  s(:lvar, :expr),
                  s(:lvar, :prelude),
                  s(:lvar, :opts),
                  s(:block_pass,
                    s(:lvar, :b)))),
              s(:begin,
                s(:send,
                  s(:gvar, :$defs), :push,
                  s(:send, nil, :format,
                    s(:str, "-DSIZEOF_%s=%s"),
                    s(:send,
                      s(:lvar, :type), :tr_cpp),
                    s(:lvar, :size))),
                s(:lvar, :size)), nil)))),
      s(:def, :check_signedness,
        s(:args,
          s(:arg, :type),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opts,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :typedef),
              s(:lvasgn, :member),
              s(:lvasgn, :prelude)),
            s(:send, nil, :typedef_expr,
              s(:lvar, :type),
              s(:lvar, :headers))),
          s(:lvasgn, :signed,
            s(:nil)),
          s(:block,
            s(:send, nil, :checking_for,
              s(:dstr,
                s(:str, "signedness of "),
                s(:begin,
                  s(:lvar, :type))),
              s(:const, nil, :STRING_OR_FAILED_FORMAT)),
            s(:args),
            s(:begin,
              s(:or,
                s(:lvasgn, :signed,
                  s(:send, nil, :try_signedness,
                    s(:lvar, :typedef),
                    s(:lvar, :member),
                    s(:array,
                      s(:lvar, :prelude)),
                    s(:lvar, :opts),
                    s(:block_pass,
                      s(:lvar, :b)))),
                s(:next,
                  s(:nil))),
              s(:send,
                s(:gvar, :$defs), :push,
                s(:send,
                  s(:str, "-DSIGNEDNESS_OF_%s=%+d"), :%,
                  s(:array,
                    s(:send,
                      s(:lvar, :type), :tr_cpp),
                    s(:lvar, :signed)))),
              s(:if,
                s(:send,
                  s(:lvar, :signed), :<,
                  s(:int, 0)),
                s(:str, "signed"),
                s(:str, "unsigned")))),
          s(:lvar, :signed))),
      s(:def, :convertible_int,
        s(:args,
          s(:arg, :type),
          s(:optarg, :headers,
            s(:nil)),
          s(:optarg, :opts,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :type),
              s(:lvasgn, :macname)),
            s(:array,
              s(:splat,
                s(:lvar, :type)))),
          s(:block,
            s(:send, nil, :checking_for,
              s(:dstr,
                s(:str, "convertible type of "),
                s(:begin,
                  s(:lvar, :type))),
              s(:const, nil, :STRING_OR_FAILED_FORMAT)),
            s(:args),
            s(:if,
              s(:send,
                s(:const, nil, :UNIVERSAL_INTS), :include?,
                s(:lvar, :type)),
              s(:lvar, :type),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :typedef),
                    s(:lvasgn, :member),
                    s(:lvasgn, :prelude)),
                  s(:send, nil, :typedef_expr,
                    s(:lvar, :type),
                    s(:lvar, :headers),
                    s(:block_pass,
                      s(:lvar, :b)))),
                s(:if,
                  s(:lvar, :member),
                  s(:begin,
                    s(:send,
                      s(:lvar, :prelude), :<<,
                      s(:str, "static rbcv_typedef_ rbcv_var;")),
                    s(:lvasgn, :compat,
                      s(:block,
                        s(:send,
                          s(:const, nil, :UNIVERSAL_INTS), :find),
                        s(:args,
                          s(:arg, :t)),
                        s(:send, nil, :try_static_assert,
                          s(:dstr,
                            s(:str, "sizeof(rbcv_var."),
                            s(:begin,
                              s(:lvar, :member)),
                            s(:str, ") == sizeof("),
                            s(:begin,
                              s(:lvar, :t)),
                            s(:str, ")")),
                          s(:array,
                            s(:lvar, :prelude)),
                          s(:lvar, :opts),
                          s(:block_pass,
                            s(:lvar, :b)))))),
                  s(:begin,
                    s(:if,
                      s(:lvasgn, :signed,
                        s(:send, nil, :try_signedness,
                          s(:lvar, :typedef),
                          s(:lvar, :member),
                          s(:array,
                            s(:lvar, :prelude)))), nil,
                      s(:next)),
                    s(:if,
                      s(:send,
                        s(:lvar, :signed), :>,
                        s(:int, 0)),
                      s(:lvasgn, :u,
                        s(:str, "unsigned ")), nil),
                    s(:send,
                      s(:lvar, :prelude), :<<,
                      s(:str, "extern rbcv_typedef_ foo();")),
                    s(:lvasgn, :compat,
                      s(:block,
                        s(:send,
                          s(:const, nil, :UNIVERSAL_INTS), :find),
                        s(:args,
                          s(:arg, :t)),
                        s(:send, nil, :try_compile,
                          s(:send,
                            s(:array,
                              s(:lvar, :prelude),
                              s(:dstr,
                                s(:str, "extern "),
                                s(:begin,
                                  s(:lvar, :u)),
                                s(:begin,
                                  s(:lvar, :t)),
                                s(:str, " foo();"))), :join,
                            s(:str, "\n")),
                          s(:lvar, :opts),
                          s(:hash,
                            s(:pair,
                              s(:sym, :werror),
                              s(:true))),
                          s(:block_pass,
                            s(:lvar, :b))))))),
                s(:if,
                  s(:lvar, :compat),
                  s(:begin,
                    s(:or_asgn,
                      s(:lvasgn, :macname),
                      s(:send,
                        s(:send,
                          s(:lvar, :type), :sub,
                          s(:regexp,
                            s(:str, "_(?=t\\z)"),
                            s(:regopt)),
                          s(:str, "")), :tr_cpp)),
                    s(:lvasgn, :conv,
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :compat), :==,
                            s(:str, "long long")),
                          s(:str, "LL"),
                          s(:send,
                            s(:lvar, :compat), :upcase)))),
                    s(:lvasgn, :compat,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :u)),
                        s(:begin,
                          s(:lvar, :compat)))),
                    s(:lvasgn, :typename,
                      s(:send,
                        s(:lvar, :type), :tr_cpp)),
                    s(:send,
                      s(:gvar, :$defs), :push,
                      s(:send, nil, :format,
                        s(:str, "-DSIZEOF_%s=SIZEOF_%s"),
                        s(:lvar, :typename),
                        s(:send,
                          s(:lvar, :compat), :tr_cpp))),
                    s(:send,
                      s(:gvar, :$defs), :push,
                      s(:send, nil, :format,
                        s(:str, "-DTYPEOF_%s=%s"),
                        s(:lvar, :typename),
                        s(:send,
                          s(:lvar, :compat), :quote))),
                    s(:send,
                      s(:gvar, :$defs), :push,
                      s(:send, nil, :format,
                        s(:str, "-DPRI_%s_PREFIX=PRI_%s_PREFIX"),
                        s(:lvar, :macname),
                        s(:lvar, :conv))),
                    s(:lvasgn, :conv,
                      s(:send,
                        s(:begin,
                          s(:if,
                            s(:lvar, :u),
                            s(:str, "U"),
                            s(:str, ""))), :+,
                        s(:lvar, :conv))),
                    s(:send,
                      s(:gvar, :$defs), :push,
                      s(:send, nil, :format,
                        s(:str, "-D%s2NUM=%s2NUM"),
                        s(:lvar, :macname),
                        s(:lvar, :conv))),
                    s(:send,
                      s(:gvar, :$defs), :push,
                      s(:send, nil, :format,
                        s(:str, "-DNUM2%s=NUM2%s"),
                        s(:lvar, :macname),
                        s(:lvar, :conv))),
                    s(:lvar, :compat)), nil)))))),
      s(:def, :scalar_ptr_type?,
        s(:args,
          s(:arg, :type),
          s(:optarg, :member,
            s(:nil)),
          s(:optarg, :headers,
            s(:nil)),
          s(:blockarg, :b)),
        s(:send, nil, :try_compile,
          s(:dstr,
            s(:begin,
              s(:send, nil, :cpp_include,
                s(:lvar, :headers))),
            s(:str, "\n"),
            s(:str, "/*top*/\n"),
            s(:str, "volatile "),
            s(:begin,
              s(:lvar, :type)),
            s(:str, " conftestval;\n"),
            s(:str, "extern int t(void);\n"),
            s(:begin,
              s(:send, nil, :MAIN_DOES_NOTHING,
                s(:str, "t"))),
            s(:str, "\n"),
            s(:str, "int t(void) {return (int)(1-*(conftestval"),
            s(:begin,
              s(:if,
                s(:lvar, :member),
                s(:dstr,
                  s(:str, "."),
                  s(:begin,
                    s(:lvar, :member))),
                s(:str, ""))),
            s(:str, "));}\n")),
          s(:block_pass,
            s(:lvar, :b)))),
      s(:def, :scalar_type?,
        s(:args,
          s(:arg, :type),
          s(:optarg, :member,
            s(:nil)),
          s(:optarg, :headers,
            s(:nil)),
          s(:blockarg, :b)),
        s(:send, nil, :try_compile,
          s(:dstr,
            s(:begin,
              s(:send, nil, :cpp_include,
                s(:lvar, :headers))),
            s(:str, "\n"),
            s(:str, "/*top*/\n"),
            s(:str, "volatile "),
            s(:begin,
              s(:lvar, :type)),
            s(:str, " conftestval;\n"),
            s(:str, "extern int t(void);\n"),
            s(:begin,
              s(:send, nil, :MAIN_DOES_NOTHING,
                s(:str, "t"))),
            s(:str, "\n"),
            s(:str, "int t(void) {return (int)(1-(conftestval"),
            s(:begin,
              s(:if,
                s(:lvar, :member),
                s(:dstr,
                  s(:str, "."),
                  s(:begin,
                    s(:lvar, :member))),
                s(:str, ""))),
            s(:str, "));}\n")),
          s(:block_pass,
            s(:lvar, :b)))),
      s(:def, :have_typeof?,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:gvar, :$typeof)),
            s(:return,
              s(:gvar, :$typeof)), nil),
          s(:gvasgn, :$typeof,
            s(:block,
              s(:send,
                s(:array,
                  s(:str, "__typeof__"),
                  s(:str, "typeof")), :find),
              s(:args,
                s(:arg, :t)),
              s(:send, nil, :try_compile,
                s(:dstr,
                  s(:str, "int rbcv_foo;\n"),
                  s(:begin,
                    s(:lvar, :t)),
                  s(:str, "(rbcv_foo) rbcv_bar;\n"))))))),
      s(:def, :what_type?,
        s(:args,
          s(:arg, :type),
          s(:optarg, :member,
            s(:nil)),
          s(:optarg, :headers,
            s(:nil)),
          s(:blockarg, :b)),
        s(:begin,
          s(:lvasgn, :m,
            s(:dstr,
              s(:begin,
                s(:lvar, :type)))),
          s(:lvasgn, :var,
            s(:lvasgn, :val,
              s(:str, "*rbcv_var_"))),
          s(:lvasgn, :func,
            s(:str, "rbcv_func_(void)")),
          s(:if,
            s(:lvar, :member),
            s(:send,
              s(:send,
                s(:lvar, :m), :<<,
                s(:str, ".")), :<<,
              s(:lvar, :member)),
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :type),
                s(:lvasgn, :member)),
              s(:send,
                s(:lvar, :type), :split,
                s(:str, "."),
                s(:int, 2)))),
          s(:if,
            s(:lvar, :member),
            s(:lvasgn, :val,
              s(:dstr,
                s(:str, "("),
                s(:begin,
                  s(:lvar, :var)),
                s(:str, ")."),
                s(:begin,
                  s(:lvar, :member)))), nil),
          s(:lvasgn, :prelude,
            s(:array,
              s(:send,
                s(:send, nil, :cpp_include,
                  s(:lvar, :headers)), :split,
                s(:regexp,
                  s(:str, "^"),
                  s(:regopt))))),
          s(:send,
            s(:lvar, :prelude), :<<,
            s(:array,
              s(:dstr,
                s(:str, "typedef "),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, " rbcv_typedef_;\n")),
              s(:dstr,
                s(:str, "extern rbcv_typedef_ *"),
                s(:begin,
                  s(:lvar, :func)),
                s(:str, ";\n")),
              s(:dstr,
                s(:str, "rbcv_typedef_ "),
                s(:begin,
                  s(:lvar, :var)),
                s(:str, ";\n")))),
          s(:lvasgn, :type,
            s(:str, "rbcv_typedef_")),
          s(:lvasgn, :fmt,
            s(:if,
              s(:and,
                s(:lvar, :member),
                s(:send,
                  s(:begin,
                    s(:lvasgn, :typeof,
                      s(:send, nil, :have_typeof?))), :!)),
              s(:str, "seems %s"),
              s(:str, "%s"))),
          s(:if,
            s(:lvar, :typeof),
            s(:begin,
              s(:lvasgn, :var,
                s(:str, "*rbcv_member_")),
              s(:lvasgn, :func,
                s(:str, "rbcv_mem_func_(void)")),
              s(:lvasgn, :member,
                s(:nil)),
              s(:lvasgn, :type,
                s(:str, "rbcv_mem_typedef_")),
              s(:send,
                s(:send,
                  s(:lvar, :prelude), :[],
                  s(:int, -1)), :<<,
                s(:dstr,
                  s(:str, "typedef "),
                  s(:begin,
                    s(:lvar, :typeof)),
                  s(:str, "("),
                  s(:begin,
                    s(:lvar, :val)),
                  s(:str, ") "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, ";\n"))),
              s(:send,
                s(:send,
                  s(:lvar, :prelude), :[],
                  s(:int, -1)), :<<,
                s(:dstr,
                  s(:str, "extern "),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, " *"),
                  s(:begin,
                    s(:lvar, :func)),
                  s(:str, ";\n"))),
              s(:send,
                s(:send,
                  s(:lvar, :prelude), :[],
                  s(:int, -1)), :<<,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, " "),
                  s(:begin,
                    s(:lvar, :var)),
                  s(:str, ";\n"))),
              s(:lvasgn, :val,
                s(:lvar, :var))), nil),
          s(:defs,
            s(:lvar, :fmt), :%,
            s(:args,
              s(:arg, :x)),
            s(:if,
              s(:lvar, :x),
              s(:zsuper),
              s(:str, "unknown"))),
          s(:block,
            s(:send, nil, :checking_for,
              s(:send, nil, :checking_message,
                s(:lvar, :m),
                s(:lvar, :headers)),
              s(:lvar, :fmt)),
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :scalar_ptr_type?,
                  s(:lvar, :type),
                  s(:lvar, :member),
                  s(:lvar, :prelude),
                  s(:block_pass,
                    s(:lvar, :b))),
                s(:begin,
                  s(:if,
                    s(:send, nil, :try_static_assert,
                      s(:dstr,
                        s(:str, "sizeof(*"),
                        s(:begin,
                          s(:lvar, :var)),
                        s(:str, ") == 1")),
                      s(:lvar, :prelude)),
                    s(:return,
                      s(:str, "string")), nil),
                  s(:lvasgn, :ptr,
                    s(:str, "*"))),
                s(:if,
                  s(:send, nil, :scalar_type?,
                    s(:lvar, :type),
                    s(:lvar, :member),
                    s(:lvar, :prelude),
                    s(:block_pass,
                      s(:lvar, :b))),
                  s(:begin,
                    s(:if,
                      s(:or,
                        s(:and,
                          s(:lvar, :member),
                          s(:send,
                            s(:lvar, :typeof), :!)),
                        s(:send, nil, :try_static_assert,
                          s(:dstr,
                            s(:str, "("),
                            s(:begin,
                              s(:lvar, :type)),
                            s(:str, ")-1 < 0")),
                          s(:lvar, :prelude))), nil,
                      s(:lvasgn, :unsigned,
                        s(:str, "unsigned"))),
                    s(:lvasgn, :ptr,
                      s(:str, ""))),
                  s(:next))),
              s(:lvasgn, :type,
                s(:block,
                  s(:send,
                    s(:const, nil, :UNIVERSAL_INTS), :find),
                  s(:args,
                    s(:arg, :t)),
                  s(:begin,
                    s(:lvasgn, :pre,
                      s(:lvar, :prelude)),
                    s(:if,
                      s(:lvar, :member), nil,
                      s(:op_asgn,
                        s(:lvasgn, :pre), :+,
                        s(:array,
                          s(:array,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :unsigned)),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :t)),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :ptr)),
                              s(:begin,
                                s(:lvar, :var)),
                              s(:str, ";\n")),
                            s(:dstr,
                              s(:str, "extern "),
                              s(:begin,
                                s(:lvar, :unsigned)),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :t)),
                              s(:str, " "),
                              s(:begin,
                                s(:lvar, :ptr)),
                              s(:str, "*"),
                              s(:begin,
                                s(:lvar, :func)),
                              s(:str, ";\n")))))),
                    s(:send, nil, :try_static_assert,
                      s(:dstr,
                        s(:str, "sizeof("),
                        s(:begin,
                          s(:lvar, :ptr)),
                        s(:begin,
                          s(:lvar, :val)),
                        s(:str, ") == sizeof("),
                        s(:begin,
                          s(:lvar, :unsigned)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :t)),
                        s(:str, ")")),
                      s(:lvar, :pre))))),
              s(:or,
                s(:lvar, :type),
                s(:next)),
              s(:send,
                s(:send,
                  s(:array,
                    s(:lvar, :unsigned),
                    s(:lvar, :type),
                    s(:lvar, :ptr)), :join,
                  s(:str, " ")), :strip))))),
      s(:def, :find_executable0,
        s(:args,
          s(:arg, :bin),
          s(:optarg, :path,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :executable_file,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :name)),
              s(:kwbegin,
                s(:rescue,
                  s(:lvasgn, :stat,
                    s(:send,
                      s(:const, nil, :File), :stat,
                      s(:lvar, :name))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :SystemCallError)), nil, nil),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :stat), :file?),
                      s(:send,
                        s(:lvar, :stat), :executable?)),
                    s(:next,
                      s(:lvar, :name)), nil))))),
          s(:lvasgn, :exts,
            s(:or,
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "EXECUTABLE_EXTS")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:lvar, :s), :split)),
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "EXEEXT")),
                s(:args,
                  s(:arg, :s)),
                s(:array,
                  s(:lvar, :s))))),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:lvar, :bin)), :==,
              s(:lvar, :bin)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :executable_file), :call,
                  s(:lvar, :bin)),
                s(:return,
                  s(:lvar, :bin)), nil),
              s(:if,
                s(:lvar, :exts),
                s(:block,
                  s(:send,
                    s(:lvar, :exts), :each),
                  s(:args,
                    s(:arg, :ext)),
                  s(:and,
                    s(:send,
                      s(:lvar, :executable_file), :call,
                      s(:lvasgn, :file,
                        s(:send,
                          s(:lvar, :bin), :+,
                          s(:lvar, :ext)))),
                    s(:return,
                      s(:lvar, :file)))), nil),
              s(:return,
                s(:nil))), nil),
          s(:if,
            s(:or_asgn,
              s(:lvasgn, :path),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "PATH"))),
            s(:lvasgn, :path,
              s(:send,
                s(:lvar, :path), :split,
                s(:const,
                  s(:const, nil, :File), :PATH_SEPARATOR))),
            s(:lvasgn, :path,
              s(:array,
                s(:str, "/usr/local/bin"),
                s(:str, "/usr/ucb"),
                s(:str, "/usr/bin"),
                s(:str, "/bin")))),
          s(:lvasgn, :file,
            s(:nil)),
          s(:block,
            s(:send,
              s(:lvar, :path), :each),
            s(:args,
              s(:arg, :dir)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :executable_file), :call,
                  s(:lvasgn, :file,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :dir),
                      s(:lvar, :bin)))),
                s(:return,
                  s(:lvar, :file)), nil),
              s(:if,
                s(:lvar, :exts),
                s(:block,
                  s(:send,
                    s(:lvar, :exts), :each),
                  s(:args,
                    s(:arg, :ext)),
                  s(:and,
                    s(:send,
                      s(:lvar, :executable_file), :call,
                      s(:lvasgn, :ext,
                        s(:send,
                          s(:lvar, :file), :+,
                          s(:lvar, :ext)))),
                    s(:return,
                      s(:lvar, :ext)))), nil))),
          s(:nil))),
      s(:def, :find_executable,
        s(:args,
          s(:arg, :bin),
          s(:optarg, :path,
            s(:nil))),
        s(:block,
          s(:send, nil, :checking_for,
            s(:send, nil, :checking_message,
              s(:lvar, :bin),
              s(:lvar, :path))),
          s(:args),
          s(:send, nil, :find_executable0,
            s(:lvar, :bin),
            s(:lvar, :path)))),
      s(:def, :arg_config,
        s(:args,
          s(:arg, :config),
          s(:optarg, :default,
            s(:nil)),
          s(:blockarg, :block)),
        s(:begin,
          s(:send,
            s(:gvar, :$arg_config), :<<,
            s(:array,
              s(:lvar, :config),
              s(:lvar, :default))),
          s(:lvasgn, :defaults,
            s(:array)),
          s(:if,
            s(:lvar, :default),
            s(:send,
              s(:lvar, :defaults), :<<,
              s(:lvar, :default)),
            s(:if,
              s(:send,
                s(:lvar, :block), :!),
              s(:send,
                s(:lvar, :defaults), :<<,
                s(:nil)), nil)),
          s(:send,
            s(:gvar, :$configure_args), :fetch,
            s(:send,
              s(:lvar, :config), :tr,
              s(:str, "_"),
              s(:str, "-")),
            s(:splat,
              s(:lvar, :defaults)),
            s(:block_pass,
              s(:lvar, :block))))),
      s(:def, :with_config,
        s(:args,
          s(:arg, :config),
          s(:optarg, :default,
            s(:nil))),
        s(:begin,
          s(:lvasgn, :config,
            s(:send,
              s(:lvar, :config), :sub,
              s(:regexp,
                s(:str, "^--with[-_]"),
                s(:regopt)),
              s(:str, ""))),
          s(:lvasgn, :val,
            s(:block,
              s(:send, nil, :arg_config,
                s(:send,
                  s(:str, "--with-"), :+,
                  s(:lvar, :config))),
              s(:args),
              s(:if,
                s(:send, nil, :arg_config,
                  s(:send,
                    s(:str, "--without-"), :+,
                    s(:lvar, :config))),
                s(:false),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :config),
                    s(:lvar, :default)),
                  s(:break,
                    s(:lvar, :default)))))),
          s(:case,
            s(:lvar, :val),
            s(:when,
              s(:str, "yes"),
              s(:true)),
            s(:when,
              s(:str, "no"),
              s(:false)),
            s(:lvar, :val)))),
      s(:def, :enable_config,
        s(:args,
          s(:arg, :config),
          s(:optarg, :default,
            s(:nil))),
        s(:if,
          s(:send, nil, :arg_config,
            s(:send,
              s(:str, "--enable-"), :+,
              s(:lvar, :config))),
          s(:true),
          s(:if,
            s(:send, nil, :arg_config,
              s(:send,
                s(:str, "--disable-"), :+,
                s(:lvar, :config))),
            s(:false),
            s(:if,
              s(:send, nil, :block_given?),
              s(:yield,
                s(:lvar, :config),
                s(:lvar, :default)),
              s(:return,
                s(:lvar, :default)))))),
      s(:def, :create_header,
        s(:args,
          s(:optarg, :header,
            s(:str, "extconf.h"))),
        s(:begin,
          s(:send, nil, :message,
            s(:str, "creating %s\n"),
            s(:lvar, :header)),
          s(:lvasgn, :sym,
            s(:send,
              s(:lvar, :header), :tr_cpp)),
          s(:lvasgn, :hdr,
            s(:array,
              s(:dstr,
                s(:str, "#ifndef "),
                s(:begin,
                  s(:lvar, :sym)),
                s(:str, "\n#define "),
                s(:begin,
                  s(:lvar, :sym)),
                s(:str, "\n")))),
          s(:for,
            s(:lvasgn, :line),
            s(:gvar, :$defs),
            s(:case,
              s(:lvar, :line),
              s(:when,
                s(:regexp,
                  s(:str, "^-D([^=]+)(?:=(.*))?"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :hdr), :<<,
                  s(:dstr,
                    s(:str, "#define "),
                    s(:nth_ref, 1),
                    s(:str, " "),
                    s(:begin,
                      s(:if,
                        s(:nth_ref, 2),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Shellwords), :shellwords,
                              s(:nth_ref, 2)), :[],
                            s(:int, 0)), :gsub,
                          s(:regexp,
                            s(:str, "(?=\\t+)"),
                            s(:regopt)),
                          s(:str, "\\\n")),
                        s(:int, 1))),
                    s(:str, "\n")))),
              s(:when,
                s(:regexp,
                  s(:str, "^-U(.*)"),
                  s(:regopt)),
                s(:send,
                  s(:lvar, :hdr), :<<,
                  s(:dstr,
                    s(:str, "#undef "),
                    s(:nth_ref, 1),
                    s(:str, "\n")))), nil)),
          s(:send,
            s(:lvar, :hdr), :<<,
            s(:str, "#endif\n")),
          s(:lvasgn, :hdr,
            s(:send,
              s(:lvar, :hdr), :join,
              s(:str, ""))),
          s(:send, nil, :log_src,
            s(:lvar, :hdr),
            s(:dstr,
              s(:begin,
                s(:lvar, :header)),
              s(:str, " is"))),
          s(:if,
            s(:begin,
              s(:rescue,
                s(:send,
                  s(:send,
                    s(:const, nil, :IO), :read,
                    s(:lvar, :header)), :==,
                  s(:lvar, :hdr)),
                s(:resbody, nil, nil,
                  s(:false)), nil)), nil,
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :header),
                s(:str, "wb")),
              s(:args,
                s(:arg, :hfile)),
              s(:send,
                s(:lvar, :hfile), :write,
                s(:lvar, :hdr)))),
          s(:gvasgn, :$extconf_h,
            s(:lvar, :header)))),
      s(:def, :dir_config,
        s(:args,
          s(:arg, :target),
          s(:optarg, :idefault,
            s(:nil)),
          s(:optarg, :ldefault,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvasgn, :dir,
              s(:send, nil, :with_config,
                s(:send,
                  s(:lvar, :target), :+,
                  s(:str, "-dir")),
                s(:begin,
                  s(:if,
                    s(:lvar, :ldefault), nil,
                    s(:lvar, :idefault))))),
            s(:begin,
              s(:lvasgn, :defaults,
                s(:if,
                  s(:send,
                    s(:const, nil, :Array), :===,
                    s(:lvar, :dir)),
                  s(:lvar, :dir),
                  s(:send,
                    s(:lvar, :dir), :split,
                    s(:const,
                      s(:const, nil, :File), :PATH_SEPARATOR)))),
              s(:lvasgn, :idefault,
                s(:lvasgn, :ldefault,
                  s(:nil)))), nil),
          s(:lvasgn, :idir,
            s(:send, nil, :with_config,
              s(:send,
                s(:lvar, :target), :+,
                s(:str, "-include")),
              s(:lvar, :idefault))),
          s(:or_asgn,
            s(:send,
              s(:send,
                s(:gvar, :$arg_config), :last), :[],
              s(:int, 1)),
            s(:dstr,
              s(:str, "${"),
              s(:begin,
                s(:lvar, :target)),
              s(:str, "-dir}/include"))),
          s(:lvasgn, :ldir,
            s(:send, nil, :with_config,
              s(:send,
                s(:lvar, :target), :+,
                s(:str, "-lib")),
              s(:lvar, :ldefault))),
          s(:or_asgn,
            s(:send,
              s(:send,
                s(:gvar, :$arg_config), :last), :[],
              s(:int, 1)),
            s(:dstr,
              s(:str, "${"),
              s(:begin,
                s(:lvar, :target)),
              s(:str, "-dir}/"),
              s(:begin,
                s(:send, nil, :_libdir_basename)))),
          s(:lvasgn, :idirs,
            s(:if,
              s(:lvar, :idir),
              s(:if,
                s(:send,
                  s(:const, nil, :Array), :===,
                  s(:lvar, :idir)),
                s(:send,
                  s(:lvar, :idir), :dup),
                s(:send,
                  s(:lvar, :idir), :split,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))),
              s(:array))),
          s(:if,
            s(:lvar, :defaults),
            s(:begin,
              s(:send,
                s(:lvar, :idirs), :concat,
                s(:block,
                  s(:send,
                    s(:lvar, :defaults), :collect),
                  s(:args,
                    s(:arg, :d)),
                  s(:send,
                    s(:lvar, :d), :+,
                    s(:str, "/include")))),
              s(:lvasgn, :idir,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:array,
                          s(:lvar, :idir)), :+,
                        s(:lvar, :idirs))), :compact), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR)))), nil),
          s(:if,
            s(:send,
              s(:lvar, :idirs), :empty?), nil,
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :idirs), :collect!),
                s(:args,
                  s(:arg, :d)),
                s(:send,
                  s(:str, "-I"), :+,
                  s(:lvar, :d))),
              s(:op_asgn,
                s(:lvasgn, :idirs), :-,
                s(:send,
                  s(:const, nil, :Shellwords), :shellwords,
                  s(:gvar, :$CPPFLAGS))),
              s(:if,
                s(:send,
                  s(:lvar, :idirs), :empty?), nil,
                s(:gvasgn, :$CPPFLAGS,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :idirs), :quote), :<<,
                        s(:gvar, :$CPPFLAGS))), :join,
                    s(:str, " ")))))),
          s(:lvasgn, :ldirs,
            s(:if,
              s(:lvar, :ldir),
              s(:if,
                s(:send,
                  s(:const, nil, :Array), :===,
                  s(:lvar, :ldir)),
                s(:send,
                  s(:lvar, :ldir), :dup),
                s(:send,
                  s(:lvar, :ldir), :split,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR))),
              s(:array))),
          s(:if,
            s(:lvar, :defaults),
            s(:begin,
              s(:send,
                s(:lvar, :ldirs), :concat,
                s(:block,
                  s(:send,
                    s(:lvar, :defaults), :collect),
                  s(:args,
                    s(:arg, :d)),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "/"),
                    s(:begin,
                      s(:send, nil, :_libdir_basename))))),
              s(:lvasgn, :ldir,
                s(:send,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:array,
                          s(:lvar, :ldir)), :+,
                        s(:lvar, :ldirs))), :compact), :join,
                  s(:const,
                    s(:const, nil, :File), :PATH_SEPARATOR)))), nil),
          s(:gvasgn, :$LIBPATH,
            s(:send,
              s(:lvar, :ldirs), :|,
              s(:gvar, :$LIBPATH))),
          s(:array,
            s(:lvar, :idir),
            s(:lvar, :ldir)))),
      s(:def, :pkg_config,
        s(:args,
          s(:arg, :pkg),
          s(:optarg, :option,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:and,
              s(:lvasgn, :pkgconfig,
                s(:send, nil, :with_config,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :pkg)),
                    s(:str, "-config")))),
              s(:send, nil, :find_executable0,
                s(:lvar, :pkgconfig))), nil,
            s(:if,
              s(:and,
                s(:begin,
                  s(:or_asgn,
                    s(:gvasgn, :$PKGCONFIG),
                    s(:and,
                      s(:and,
                        s(:begin,
                          s(:lvasgn, :pkgconfig,
                            s(:send, nil, :with_config,
                              s(:str, "pkg-config"),
                              s(:begin,
                                s(:if,
                                  s(:const, nil, :CROSS_COMPILING), nil,
                                  s(:str, "pkg-config")))))),
                        s(:send, nil, :find_executable0,
                          s(:lvar, :pkgconfig))),
                      s(:lvar, :pkgconfig)))),
                s(:send, nil, :xsystem,
                  s(:dstr,
                    s(:begin,
                      s(:gvar, :$PKGCONFIG)),
                    s(:str, " --exists "),
                    s(:begin,
                      s(:lvar, :pkg))))),
              s(:begin,
                s(:lvasgn, :pkgconfig,
                  s(:gvar, :$PKGCONFIG)),
                s(:lvasgn, :get,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :opt)),
                    s(:begin,
                      s(:lvasgn, :opt,
                        s(:send, nil, :xpopen,
                          s(:dstr,
                            s(:begin,
                              s(:gvar, :$PKGCONFIG)),
                            s(:str, " --"),
                            s(:begin,
                              s(:lvar, :opt)),
                            s(:str, " "),
                            s(:begin,
                              s(:lvar, :pkg))),
                          s(:hash,
                            s(:pair,
                              s(:sym, :err),
                              s(:array,
                                s(:sym, :child),
                                s(:sym, :out)))),
                          s(:block_pass,
                            s(:sym, :read)))),
                      s(:block,
                        s(:send,
                          s(:const, nil, :Logging), :open),
                        s(:args),
                        s(:send, nil, :puts,
                          s(:block,
                            s(:send,
                              s(:send,
                                s(:lvar, :opt), :each_line), :map),
                            s(:args,
                              s(:arg, :s)),
                            s(:dstr,
                              s(:str, "=> "),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :s), :inspect)))))),
                      s(:if,
                        s(:send,
                          s(:gvar, :$?), :success?),
                        s(:send,
                          s(:lvar, :opt), :strip), nil))))),
              s(:if,
                s(:send, nil, :find_executable0,
                  s(:lvasgn, :pkgconfig,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :pkg)),
                      s(:str, "-config")))), nil,
                s(:lvasgn, :pkgconfig,
                  s(:nil))))),
          s(:if,
            s(:lvar, :pkgconfig),
            s(:or_asgn,
              s(:lvasgn, :get),
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :opt)),
                s(:begin,
                  s(:lvasgn, :opt,
                    s(:send, nil, :xpopen,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :pkgconfig)),
                        s(:str, " --"),
                        s(:begin,
                          s(:lvar, :opt))),
                      s(:hash,
                        s(:pair,
                          s(:sym, :err),
                          s(:array,
                            s(:sym, :child),
                            s(:sym, :out)))),
                      s(:block_pass,
                        s(:sym, :read)))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :Logging), :open),
                    s(:args),
                    s(:send, nil, :puts,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :opt), :each_line), :map),
                        s(:args,
                          s(:arg, :s)),
                        s(:dstr,
                          s(:str, "=> "),
                          s(:begin,
                            s(:send,
                              s(:lvar, :s), :inspect)))))),
                  s(:if,
                    s(:send,
                      s(:gvar, :$?), :success?),
                    s(:send,
                      s(:lvar, :opt), :strip), nil)))), nil),
          s(:lvasgn, :orig_ldflags,
            s(:gvar, :$LDFLAGS)),
          s(:if,
            s(:and,
              s(:lvar, :get),
              s(:lvar, :option)),
            s(:send,
              s(:lvar, :get), :[],
              s(:lvar, :option)),
            s(:if,
              s(:and,
                s(:lvar, :get),
                s(:send, nil, :try_ldflags,
                  s(:lvasgn, :ldflags,
                    s(:send,
                      s(:lvar, :get), :[],
                      s(:str, "libs"))))),
              s(:begin,
                s(:if,
                  s(:lvasgn, :incflags,
                    s(:send,
                      s(:lvar, :get), :[],
                      s(:str, "cflags-only-I"))),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:gvar, :$INCFLAGS), :<<,
                        s(:str, " ")), :<<,
                      s(:lvar, :incflags)),
                    s(:lvasgn, :cflags,
                      s(:send,
                        s(:lvar, :get), :[],
                        s(:str, "cflags-only-other")))),
                  s(:lvasgn, :cflags,
                    s(:send,
                      s(:lvar, :get), :[],
                      s(:str, "cflags")))),
                s(:lvasgn, :libs,
                  s(:send,
                    s(:lvar, :get), :[],
                    s(:str, "libs-only-l"))),
                s(:if,
                  s(:lvar, :cflags),
                  s(:begin,
                    s(:op_asgn,
                      s(:gvasgn, :$CFLAGS), :+,
                      s(:send,
                        s(:str, " "), :<<,
                        s(:lvar, :cflags))),
                    s(:op_asgn,
                      s(:gvasgn, :$CXXFLAGS), :+,
                      s(:send,
                        s(:str, " "), :<<,
                        s(:lvar, :cflags)))), nil),
                s(:if,
                  s(:lvar, :libs),
                  s(:lvasgn, :ldflags,
                    s(:send,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Shellwords), :shellwords,
                              s(:lvar, :ldflags)), :-,
                            s(:send,
                              s(:const, nil, :Shellwords), :shellwords,
                              s(:lvar, :libs)))), :quote), :join,
                      s(:str, " "))),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :libs),
                      s(:lvasgn, :ldflags)),
                    s(:block,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:const, nil, :Shellwords), :shellwords,
                              s(:lvar, :ldflags)), :partition),
                          s(:args,
                            s(:arg, :s)),
                          s(:send,
                            s(:lvar, :s), :=~,
                            s(:regexp,
                              s(:str, "-l([^ ]+)"),
                              s(:regopt)))), :map),
                      s(:args,
                        s(:arg, :l)),
                      s(:send,
                        s(:send,
                          s(:lvar, :l), :quote), :join,
                        s(:str, " "))))),
                s(:op_asgn,
                  s(:gvasgn, :$libs), :+,
                  s(:send,
                    s(:str, " "), :<<,
                    s(:lvar, :libs))),
                s(:gvasgn, :$LDFLAGS,
                  s(:send,
                    s(:array,
                      s(:lvar, :orig_ldflags),
                      s(:lvar, :ldflags)), :join,
                    s(:str, " "))),
                s(:send,
                  s(:const, nil, :Logging), :message,
                  s(:str, "package configuration for %s\n"),
                  s(:lvar, :pkg)),
                s(:send,
                  s(:const, nil, :Logging), :message,
                  s(:str, "cflags: %s\nldflags: %s\nlibs: %s\n\n"),
                  s(:lvar, :cflags),
                  s(:lvar, :ldflags),
                  s(:lvar, :libs)),
                s(:array,
                  s(:lvar, :cflags),
                  s(:lvar, :ldflags),
                  s(:lvar, :libs))),
              s(:begin,
                s(:send,
                  s(:const, nil, :Logging), :message,
                  s(:str, "package configuration for %s is not found\n"),
                  s(:lvar, :pkg)),
                s(:nil)))))),
      s(:def, :with_destdir,
        s(:args,
          s(:arg, :dir)),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:lvar, :dir), :sub,
              s(:gvar, :$dest_prefix_pattern),
              s(:str, ""))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\A\\$[\\(\\{]"),
                s(:regopt)),
              s(:lvar, :dir)),
            s(:lvar, :dir),
            s(:send,
              s(:str, "$(DESTDIR)"), :+,
              s(:lvar, :dir))))),
      s(:def, :winsep,
        s(:args,
          s(:arg, :s)),
        s(:send,
          s(:lvar, :s), :tr,
          s(:str, "/"),
          s(:str, "\\"))),
      s(:if,
        s(:send,
          s(:const, nil, :CROSS_COMPILING), :!),
        s(:case,
          s(:send,
            s(:const, nil, :CONFIG), :[],
            s(:str, "build_os")),
          s(:when,
            s(:str, "mingw32"),
            s(:def, :mkintpath,
              s(:args,
                s(:arg, :path)),
              s(:begin,
                s(:lvasgn, :path,
                  s(:send,
                    s(:lvar, :path), :dup)),
                s(:send,
                  s(:lvar, :path), :tr!,
                  s(:str, "\\"),
                  s(:str, "/")),
                s(:send,
                  s(:lvar, :path), :sub!,
                  s(:regexp,
                    s(:str, "\\A([A-Za-z]):(?=/)"),
                    s(:regopt)),
                  s(:str, "/\\1")),
                s(:lvar, :path)))),
          s(:when,
            s(:str, "cygwin"),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "target_os")), :!=,
                s(:str, "cygwin")),
              s(:def, :mkintpath,
                s(:args,
                  s(:arg, :path)),
                s(:send,
                  s(:send,
                    s(:const, nil, :IO), :popen,
                    s(:array,
                      s(:str, "cygpath"),
                      s(:str, "-u"),
                      s(:lvar, :path)),
                    s(:block_pass,
                      s(:sym, :read))), :chomp)), nil)), nil), nil),
      s(:if,
        s(:send, nil, :method_defined?,
          s(:sym, :mkintpath)), nil,
        s(:def, :mkintpath,
          s(:args,
            s(:arg, :path)),
          s(:lvar, :path))),
      s(:def, :configuration,
        s(:args,
          s(:arg, :srcdir)),
        s(:begin,
          s(:lvasgn, :mk,
            s(:array)),
          s(:lvasgn, :vpath,
            s(:send,
              s(:gvar, :$VPATH), :dup)),
          s(:or_asgn,
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "hdrdir")),
            s(:gvar, :$hdrdir)),
          s(:send,
            s(:lvar, :mk), :<<,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "SHELL = /bin/sh\n"),
              s(:str, "\n"),
              s(:str, "# V=0 quiet, V=1 verbose.  other values don't work.\n"),
              s(:str, "V = 0\n"),
              s(:str, "Q1 = $(V:1=)\n"),
              s(:str, "Q = $(Q1:0=@)\n"),
              s(:str, "ECHO1 = $(V:1=@"),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "NULLCMD"))),
              s(:str, ")\n"),
              s(:str, "ECHO = $(ECHO1:0=@echo)\n"),
              s(:str, "NULLCMD = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "NULLCMD"))),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "#### Start of system configuration section. ####\n"),
              s(:begin,
                s(:if,
                  s(:gvar, :$extmk),
                  s(:send,
                    s(:str, "top_srcdir = "), :+,
                    s(:send,
                      s(:gvar, :$top_srcdir), :sub,
                      s(:regexp,
                        s(:str, "\\A"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :quote,
                            s(:gvar, :$topdir))),
                        s(:str, "/"),
                        s(:regopt)),
                      s(:str, "$(topdir)/"))), nil)),
              s(:str, "\n"),
              s(:str, "srcdir = "),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :srcdir), :gsub,
                    s(:regexp,
                      s(:str, "\\$\\((srcdir)\\)|\\$\\{(srcdir)\\}"),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:send, nil, :mkintpath,
                      s(:send,
                        s(:const, nil, :CONFIG), :[],
                        s(:or,
                          s(:nth_ref, 1),
                          s(:nth_ref, 2)))), :unspace))),
              s(:str, "\n"),
              s(:str, "topdir = "),
              s(:begin,
                s(:send,
                  s(:send, nil, :mkintpath,
                    s(:lvasgn, :topdir,
                      s(:if,
                        s(:gvar, :$extmk),
                        s(:send,
                          s(:const, nil, :CONFIG), :[],
                          s(:str, "topdir")),
                        s(:gvar, :$topdir)))), :unspace)),
              s(:str, "\n"),
              s(:str, "hdrdir = "),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:begin,
                      s(:lvasgn, :hdrdir,
                        s(:send,
                          s(:const, nil, :CONFIG), :[],
                          s(:str, "hdrdir")))), :==,
                    s(:lvar, :topdir)),
                  s(:str, "$(topdir)"),
                  s(:send,
                    s(:send, nil, :mkintpath,
                      s(:lvar, :hdrdir)), :unspace))),
              s(:str, "\n"),
              s(:str, "arch_hdrdir = "),
              s(:begin,
                s(:send,
                  s(:gvar, :$arch_hdrdir), :quote)),
              s(:str, "\n"),
              s(:str, "PATH_SEPARATOR = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "PATH_SEPARATOR"))),
              s(:str, "\n"),
              s(:str, "VPATH = "),
              s(:begin,
                s(:send,
                  s(:lvar, :vpath), :join,
                  s(:send,
                    s(:const, nil, :CONFIG), :[],
                    s(:str, "PATH_SEPARATOR")))),
              s(:str, "\n"))),
          s(:if,
            s(:gvar, :$extmk),
            s(:send,
              s(:lvar, :mk), :<<,
              s(:dstr,
                s(:str, "RUBYLIB =\n"),
                s(:str, "RUBYOPT = -\n"))), nil),
          s(:lvasgn, :prefix,
            s(:send, nil, :mkintpath,
              s(:send,
                s(:const, nil, :CONFIG), :[],
                s(:str, "prefix")))),
          s(:if,
            s(:lvasgn, :destdir,
              s(:send,
                s(:lvar, :prefix), :[],
                s(:gvar, :$dest_prefix_pattern),
                s(:int, 1))),
            s(:begin,
              s(:send,
                s(:lvar, :mk), :<<,
                s(:dstr,
                  s(:str, "\nDESTDIR = "),
                  s(:begin,
                    s(:lvar, :destdir)),
                  s(:str, "\n"))),
              s(:lvasgn, :prefix,
                s(:send,
                  s(:lvar, :prefix), :[],
                  s(:irange,
                    s(:send,
                      s(:lvar, :destdir), :size),
                    s(:int, -1))))), nil),
          s(:send,
            s(:lvar, :mk), :<<,
            s(:dstr,
              s(:str, "prefix = "),
              s(:begin,
                s(:send,
                  s(:send, nil, :with_destdir,
                    s(:lvar, :prefix)), :unspace)),
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:const, nil, :CONFIG), :each),
            s(:args,
              s(:arg, :key),
              s(:arg, :var)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, ".prefix$"),
                  s(:regopt)),
                s(:lvar, :key)),
              s(:send,
                s(:lvar, :mk), :<<,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :key)),
                  s(:str, " = "),
                  s(:begin,
                    s(:send,
                      s(:send, nil, :with_destdir,
                        s(:send, nil, :mkintpath,
                          s(:lvar, :var))), :unspace)),
                  s(:str, "\n"))), nil)),
          s(:block,
            s(:send,
              s(:const, nil, :CONFIG), :each),
            s(:args,
              s(:arg, :key),
              s(:arg, :var)),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^abs_"),
                    s(:regopt)),
                  s(:lvar, :key)),
                s(:next), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^(?:src|top(?:_src)?|build|hdr)dir$"),
                    s(:regopt)),
                  s(:lvar, :key)),
                s(:next), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "dir$"),
                    s(:regopt)),
                  s(:lvar, :key)), nil,
                s(:next)),
              s(:send,
                s(:lvar, :mk), :<<,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :key)),
                  s(:str, " = "),
                  s(:begin,
                    s(:send, nil, :with_destdir,
                      s(:lvar, :var))),
                  s(:str, "\n"))))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:gvar, :$extmk), :!),
                s(:send,
                  s(:send,
                    s(:gvar, :$configure_args), :has_key?,
                    s(:str, "--ruby")), :!)),
              s(:lvasgn, :sep,
                s(:send, nil, :config_string,
                  s(:str, "BUILD_FILE_SEPARATOR")))),
            s(:lvasgn, :sep,
              s(:dstr,
                s(:str, ":/="),
                s(:begin,
                  s(:lvar, :sep)))),
            s(:lvasgn, :sep,
              s(:str, ""))),
          s(:lvasgn, :possible_command,
            s(:begin,
              s(:if,
                s(:gvar, :$extmk), nil,
                s(:block,
                  s(:send, nil, :proc),
                  s(:args,
                    s(:arg, :s)),
                  s(:if,
                    s(:send,
                      s(:regexp,
                        s(:str, "top_srcdir"),
                        s(:regopt)), :!~,
                      s(:lvar, :s)),
                    s(:lvar, :s), nil))))),
          s(:lvasgn, :extconf_h,
            s(:if,
              s(:gvar, :$extconf_h),
              s(:str, "-DRUBY_EXTCONF_H=\\\"$(RUBY_EXTCONF_H)\\\" "),
              s(:send,
                s(:send,
                  s(:gvar, :$defs), :join,
                  s(:str, " ")), :<<,
                s(:str, " ")))),
          s(:lvasgn, :headers,
            s(:array,
              s(:str, "$(hdrdir)/ruby.h"),
              s(:str, "$(hdrdir)/ruby/ruby.h"),
              s(:str, "$(hdrdir)/ruby/defines.h"),
              s(:str, "$(hdrdir)/ruby/missing.h"),
              s(:str, "$(hdrdir)/ruby/intern.h"),
              s(:str, "$(hdrdir)/ruby/st.h"),
              s(:str, "$(hdrdir)/ruby/subst.h"))),
          s(:if,
            s(:const, nil, :RULE_SUBST),
            s(:block,
              s(:send,
                s(:lvar, :headers), :each),
              s(:args,
                s(:arg, :h)),
              s(:send,
                s(:lvar, :h), :sub!,
                s(:regexp,
                  s(:str, ".*"),
                  s(:regopt)),
                s(:block_pass,
                  s(:send,
                    s(:const, nil, :RULE_SUBST), :method,
                    s(:sym, :%))))), nil),
          s(:send,
            s(:lvar, :headers), :<<,
            s(:gvar, :$config_h)),
          s(:if,
            s(:gvar, :$extconf_h),
            s(:send,
              s(:lvar, :headers), :<<,
              s(:str, "$(RUBY_EXTCONF_H)")), nil),
          s(:send,
            s(:lvar, :mk), :<<,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "CC = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "CC"))),
              s(:str, "\n"),
              s(:str, "CXX = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "CXX"))),
              s(:str, "\n"),
              s(:str, "LIBRUBY = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "LIBRUBY"))),
              s(:str, "\n"),
              s(:str, "LIBRUBY_A = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "LIBRUBY_A"))),
              s(:str, "\n"),
              s(:str, "LIBRUBYARG_SHARED = "),
              s(:gvar, :$LIBRUBYARG_SHARED),
              s(:str, "\n"),
              s(:str, "LIBRUBYARG_STATIC = "),
              s(:gvar, :$LIBRUBYARG_STATIC),
              s(:str, "\n"),
              s(:str, "empty =\n"),
              s(:str, "OUTFLAG = "),
              s(:begin,
                s(:const, nil, :OUTFLAG)),
              s(:str, "$(empty)\n"),
              s(:str, "COUTFLAG = "),
              s(:begin,
                s(:const, nil, :COUTFLAG)),
              s(:str, "$(empty)\n"),
              s(:str, "\n"),
              s(:str, "RUBY_EXTCONF_H = "),
              s(:begin,
                s(:gvar, :$extconf_h)),
              s(:str, "\n"),
              s(:str, "cflags   = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "cflags"))),
              s(:str, "\n"),
              s(:str, "cxxflags = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "cxxflags"))),
              s(:str, "\n"),
              s(:str, "optflags = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "optflags"))),
              s(:str, "\n"),
              s(:str, "debugflags = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "debugflags"))),
              s(:str, "\n"),
              s(:str, "warnflags = "),
              s(:begin,
                s(:gvar, :$warnflags)),
              s(:str, "\n"),
              s(:str, "CCDLFLAGS = "),
              s(:begin,
                s(:if,
                  s(:gvar, :$static),
                  s(:str, ""),
                  s(:send,
                    s(:const, nil, :CONFIG), :[],
                    s(:str, "CCDLFLAGS")))),
              s(:str, "\n"),
              s(:str, "CFLAGS   = $(CCDLFLAGS) "),
              s(:gvar, :$CFLAGS),
              s(:str, " $(ARCH_FLAG)\n"),
              s(:str, "INCFLAGS = -I. "),
              s(:gvar, :$INCFLAGS),
              s(:str, "\n"),
              s(:str, "DEFS     = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "DEFS"))),
              s(:str, "\n"),
              s(:str, "CPPFLAGS = "),
              s(:begin,
                s(:lvar, :extconf_h)),
              s(:begin,
                s(:gvar, :$CPPFLAGS)),
              s(:str, "\n"),
              s(:str, "CXXFLAGS = $(CCDLFLAGS) "),
              s(:gvar, :$CXXFLAGS),
              s(:str, " $(ARCH_FLAG)\n"),
              s(:str, "ldflags  = "),
              s(:begin,
                s(:gvar, :$LDFLAGS)),
              s(:str, "\n"),
              s(:str, "dldflags = "),
              s(:begin,
                s(:gvar, :$DLDFLAGS)),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "EXTDLDFLAGS"))),
              s(:str, "\n"),
              s(:str, "ARCH_FLAG = "),
              s(:begin,
                s(:gvar, :$ARCH_FLAG)),
              s(:str, "\n"),
              s(:str, "DLDFLAGS = $(ldflags) $(dldflags) $(ARCH_FLAG)\n"),
              s(:str, "LDSHARED = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "LDSHARED"))),
              s(:str, "\n"),
              s(:str, "LDSHAREDXX = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "LDSHAREDXX")),
                  s(:str, "$(LDSHARED)"))),
              s(:str, "\n"),
              s(:str, "AR = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "AR"))),
              s(:str, "\n"),
              s(:str, "EXEEXT = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "EXEEXT"))),
              s(:str, "\n"),
              s(:str, "\n"))),
          s(:block,
            s(:send,
              s(:const, nil, :CONFIG), :each),
            s(:args,
              s(:arg, :key),
              s(:arg, :val)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^RUBY.*NAME"),
                  s(:regopt)),
                s(:lvar, :key)),
              s(:send,
                s(:lvar, :mk), :<<,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :key)),
                  s(:str, " = "),
                  s(:begin,
                    s(:lvar, :val)),
                  s(:str, "\n"))), nil)),
          s(:send,
            s(:lvar, :mk), :<<,
            s(:dstr,
              s(:str, "\n"),
              s(:str, "arch = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "arch"))),
              s(:str, "\n"),
              s(:str, "sitearch = "),
              s(:begin,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "sitearch"))),
              s(:str, "\n"),
              s(:str, "ruby_version = "),
              s(:begin,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "ruby_version"))),
              s(:str, "\n"),
              s(:str, "ruby = "),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:gvar, :$ruby), :sub,
                    s(:regexp,
                      s(:str, "\\A"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :quote,
                          s(:send,
                            s(:const,
                              s(:const, nil, :RbConfig), :CONFIG), :[],
                            s(:str, "bindir")))),
                      s(:str, "(?=/|\\z)"),
                      s(:regopt))),
                  s(:args),
                  s(:str, "$(bindir)"))),
              s(:str, "\n"),
              s(:str, "RUBY = $(ruby"),
              s(:begin,
                s(:lvar, :sep)),
              s(:str, ")\n"),
              s(:str, "ruby_headers = "),
              s(:begin,
                s(:send,
                  s(:lvar, :headers), :join,
                  s(:str, " "))),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "RM = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "RM"),
                    s(:block_pass,
                      s(:lvar, :possible_command))),
                  s(:str, "$(RUBY) -run -e rm -- -f"))),
              s(:str, "\n"),
              s(:str, "RM_RF = "),
              s(:begin,
                s(:str, "$(RUBY) -run -e rm -- -rf")),
              s(:str, "\n"),
              s(:str, "RMDIRS = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "RMDIRS"),
                    s(:block_pass,
                      s(:lvar, :possible_command))),
                  s(:str, "$(RUBY) -run -e rmdir -- -p"))),
              s(:str, "\n"),
              s(:str, "MAKEDIRS = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "MAKEDIRS"),
                    s(:block_pass,
                      s(:lvar, :possible_command))),
                  s(:str, "@$(RUBY) -run -e mkdir -- -p"))),
              s(:str, "\n"),
              s(:str, "INSTALL = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "INSTALL"),
                    s(:block_pass,
                      s(:lvar, :possible_command))),
                  s(:str, "@$(RUBY) -run -e install -- -vp"))),
              s(:str, "\n"),
              s(:str, "INSTALL_PROG = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "INSTALL_PROG")),
                  s(:str, "$(INSTALL) -m 0755"))),
              s(:str, "\n"),
              s(:str, "INSTALL_DATA = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "INSTALL_DATA")),
                  s(:str, "$(INSTALL) -m 0644"))),
              s(:str, "\n"),
              s(:str, "COPY = "),
              s(:begin,
                s(:or,
                  s(:send, nil, :config_string,
                    s(:str, "CP"),
                    s(:block_pass,
                      s(:lvar, :possible_command))),
                  s(:str, "@$(RUBY) -run -e cp -- -v"))),
              s(:str, "\n"),
              s(:str, "TOUCH = exit >\n"),
              s(:str, "\n"),
              s(:str, "#### End of system configuration section. ####\n"),
              s(:str, "\n"),
              s(:str, "preload = "),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:defined?,
                      s(:gvar, :$preload)),
                    s(:gvar, :$preload)),
                  s(:send,
                    s(:gvar, :$preload), :join,
                    s(:str, " ")),
                  s(:str, ""))),
              s(:str, "\n"))),
          s(:if,
            s(:send,
              s(:gvar, :$nmake), :==,
              s(:str, "b")),
            s(:block,
              s(:send,
                s(:lvar, :mk), :each),
              s(:args,
                s(:arg, :x)),
              s(:block,
                s(:send,
                  s(:lvar, :x), :gsub!,
                  s(:regexp,
                    s(:str, "^(MAKEDIRS|INSTALL_(?:PROG|DATA))+\\s*=.*\\n"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:str, "!ifndef "), :+,
                        s(:nth_ref, 1)), :+,
                      s(:str, "\n")), :+,
                    s(:back_ref, :$&)), :+,
                  s(:str, "!endif\n")))), nil),
          s(:lvar, :mk))),
      s(:def, :timestamp_file,
        s(:args,
          s(:arg, :name),
          s(:optarg, :target_prefix,
            s(:nil))),
        s(:begin,
          s(:if,
            s(:lvar, :target_prefix),
            s(:begin,
              s(:lvasgn, :pat,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send, nil, :install_dirs), :each),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :d)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\$\\(target_prefix\\)\\z"),
                      s(:regopt)),
                    s(:lvar, :d)),
                  s(:send,
                    s(:lvar, :pat), :<<,
                    s(:lvar, :n)), nil)),
              s(:lvasgn, :name,
                s(:block,
                  s(:send,
                    s(:lvar, :name), :gsub,
                    s(:regexp,
                      s(:str, "\\$\\(("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :pat), :join,
                          s(:str, "|"))),
                      s(:str, ")\\)"),
                      s(:regopt))),
                  s(:args),
                  s(:send,
                    s(:back_ref, :$&), :+,
                    s(:lvar, :target_prefix))))), nil),
          s(:lvasgn, :name,
            s(:block,
              s(:send,
                s(:lvar, :name), :gsub,
                s(:regexp,
                  s(:str, "(\\$[({]|[})])|(/+)|[^-.\\w]+"),
                  s(:regopt))),
              s(:args),
              s(:if,
                s(:nth_ref, 1),
                s(:str, ""),
                s(:if,
                  s(:nth_ref, 2),
                  s(:str, ".-."),
                  s(:str, "_"))))),
          s(:dstr,
            s(:str, "$(TIMESTAMP_DIR)/."),
            s(:begin,
              s(:lvar, :name)),
            s(:str, ".time")))),
      s(:def, :dummy_makefile,
        s(:args,
          s(:arg, :srcdir)),
        s(:send,
          s(:send,
            s(:send, nil, :configuration,
              s(:lvar, :srcdir)), :<<,
            s(:dstr,
              s(:str, "CLEANFILES = "),
              s(:begin,
                s(:send,
                  s(:gvar, :$cleanfiles), :join,
                  s(:str, " "))),
              s(:str, "\n"),
              s(:str, "DISTCLEANFILES = "),
              s(:begin,
                s(:send,
                  s(:gvar, :$distcleanfiles), :join,
                  s(:str, " "))),
              s(:str, "\n"),
              s(:str, "\n"),
              s(:str, "all install static install-so install-rb: Makefile\n"),
              s(:str, ".PHONY: all install static install-so install-rb\n"),
              s(:str, ".PHONY: clean clean-so clean-static clean-rb\n"),
              s(:str, "\n"))), :<<,
          s(:const, nil, :CLEANINGS))),
      s(:def, :each_compile_rules,
        s(:args),
        s(:begin,
          s(:lvasgn, :vpath_splat,
            s(:regexp,
              s(:str, "\\$\\(\\*VPATH\\*\\)"),
              s(:regopt))),
          s(:block,
            s(:send,
              s(:const, nil, :COMPILE_RULES), :each),
            s(:args,
              s(:arg, :rule)),
            s(:if,
              s(:send,
                s(:lvar, :vpath_splat), :=~,
                s(:lvar, :rule)),
              s(:block,
                s(:send,
                  s(:gvar, :$VPATH), :each),
                s(:args,
                  s(:arg, :path)),
                s(:yield,
                  s(:block,
                    s(:send,
                      s(:lvar, :rule), :sub,
                      s(:lvar, :vpath_splat)),
                    s(:args),
                    s(:lvar, :path)))),
              s(:yield,
                s(:lvar, :rule)))))),
      s(:def, :depend_rules,
        s(:args,
          s(:arg, :depend)),
        s(:begin,
          s(:lvasgn, :suffixes,
            s(:array)),
          s(:lvasgn, :depout,
            s(:array)),
          s(:lvasgn, :cont,
            s(:lvasgn, :implicit,
              s(:nil))),
          s(:lvasgn, :impconv,
            s(:block,
              s(:send, nil, :proc),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :each_compile_rules),
                  s(:args,
                    s(:arg, :rule)),
                  s(:send,
                    s(:send,
                      s(:lvar, :depout), :<<,
                      s(:begin,
                        s(:send,
                          s(:lvar, :rule), :%,
                          s(:send,
                            s(:lvar, :implicit), :[],
                            s(:int, 0))))), :<<,
                    s(:send,
                      s(:lvar, :implicit), :[],
                      s(:int, 1)))),
                s(:lvasgn, :implicit,
                  s(:nil))))),
          s(:lvasgn, :ruleconv,
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :line)),
              s(:begin,
                s(:if,
                  s(:lvar, :implicit),
                  s(:if,
                    s(:match_with_lvasgn,
                      s(:regexp,
                        s(:str, "\\A\\t"),
                        s(:regopt)),
                      s(:lvar, :line)),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :implicit), :[],
                          s(:int, 1)), :<<,
                        s(:lvar, :line)),
                      s(:next)),
                    s(:send,
                      s(:lvar, :impconv), :[])), nil),
                s(:if,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:regexp,
                        s(:str, "\\A\\.(\\w+)\\.(\\w+)(?:\\s*:)"),
                        s(:regopt)), :match,
                      s(:lvar, :line))),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :suffixes), :<<,
                        s(:send,
                          s(:lvar, :m), :[],
                          s(:int, 1))), :<<,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:int, 2))),
                    s(:lvasgn, :implicit,
                      s(:array,
                        s(:array,
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:int, 1)),
                          s(:send,
                            s(:lvar, :m), :[],
                            s(:int, 2))),
                        s(:array,
                          s(:send,
                            s(:lvar, :m), :post_match)))),
                    s(:next)),
                  s(:if,
                    s(:and,
                      s(:const, nil, :RULE_SUBST),
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "\\A(?!\\s*\\w+\\s*=)[$\\w][^#]*:"),
                          s(:regopt)),
                        s(:lvar, :line))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :line), :sub!,
                        s(:regexp,
                          s(:str, "\\s*\\#.*$"),
                          s(:regopt)),
                        s(:str, "")),
                      s(:lvasgn, :comment,
                        s(:back_ref, :$&)),
                      s(:block,
                        s(:send,
                          s(:lvar, :line), :gsub!,
                          s(:regexp,
                            s(:str, "(\\s)(?!\\.)([^$(){}+=:\\s\\\\,]+)(?=\\s|\\z)"),
                            s(:regopt))),
                        s(:args),
                        s(:send,
                          s(:nth_ref, 1), :+,
                          s(:send,
                            s(:const, nil, :RULE_SUBST), :%,
                            s(:nth_ref, 2)))),
                      s(:if,
                        s(:lvar, :comment),
                        s(:lvasgn, :line,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :line), :chomp), :+,
                              s(:lvar, :comment)), :+,
                            s(:str, "\n"))), nil)), nil)),
                s(:send,
                  s(:lvar, :depout), :<<,
                  s(:lvar, :line))))),
          s(:block,
            s(:send,
              s(:lvar, :depend), :each_line),
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:send,
                s(:lvar, :line), :gsub!,
                s(:regexp,
                  s(:str, "\\.o\\b"),
                  s(:regopt)),
                s(:dstr,
                  s(:str, "."),
                  s(:begin,
                    s(:gvar, :$OBJEXT)))),
              s(:if,
                s(:gvar, :$nmake), nil,
                s(:send,
                  s(:lvar, :line), :gsub!,
                  s(:regexp,
                    s(:str, "\\{\\$\\(VPATH\\)\\}"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:send,
                s(:lvar, :line), :gsub!,
                s(:regexp,
                  s(:str, "\\$\\((?:hdr|top)dir\\)/config.h"),
                  s(:regopt)),
                s(:gvar, :$config_h)),
              s(:send,
                s(:lvar, :line), :gsub!,
                s(:regexp,
                  s(:str, "\\$\\(hdrdir\\)/(?!ruby(?![^:;/\\s]))(?=[-\\w]+\\.h)"),
                  s(:regopt)),
                s(:str, "\\&ruby/")),
              s(:if,
                s(:and,
                  s(:gvar, :$nmake),
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A\\s*\\$\\(RM|COPY\\)"),
                      s(:regopt)),
                    s(:lvar, :line))),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :line), :gsub!,
                      s(:regexp,
                        s(:str, "[-\\w\\./]{2,}"),
                        s(:regopt))),
                    s(:args),
                    s(:send,
                      s(:back_ref, :$&), :tr,
                      s(:str, "/"),
                      s(:str, "\\"))),
                  s(:send,
                    s(:lvar, :line), :gsub!,
                    s(:regexp,
                      s(:str, "(\\$\\((?!RM|COPY)[^:)]+)(?=\\))"),
                      s(:regopt)),
                    s(:str, "\\1:/=\\"))), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "(?:^|[^\\\\])(?:\\\\\\\\)*\\\\$"),
                    s(:regopt)),
                  s(:lvar, :line)),
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:or_asgn,
                        s(:lvasgn, :cont),
                        s(:array))), :<<,
                    s(:lvar, :line)),
                  s(:next)),
                s(:if,
                  s(:lvar, :cont),
                  s(:begin,
                    s(:lvasgn, :line,
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:lvar, :cont), :<<,
                            s(:lvar, :line))), :join)),
                    s(:lvasgn, :cont,
                      s(:nil))), nil)),
              s(:send,
                s(:lvar, :ruleconv), :call,
                s(:lvar, :line)))),
          s(:if,
            s(:lvar, :cont),
            s(:send,
              s(:lvar, :ruleconv), :call,
              s(:send,
                s(:lvar, :cont), :join)),
            s(:if,
              s(:lvar, :implicit),
              s(:send,
                s(:lvar, :impconv), :call), nil)),
          s(:if,
            s(:send,
              s(:lvar, :suffixes), :empty?), nil,
            s(:send,
              s(:lvar, :depout), :unshift,
              s(:send,
                s(:send,
                  s(:str, ".SUFFIXES: ."), :+,
                  s(:send,
                    s(:send,
                      s(:lvar, :suffixes), :uniq), :join,
                    s(:str, " ."))), :+,
                s(:str, "\n\n")))),
          s(:if,
            s(:gvar, :$extconf_h),
            s(:send,
              s(:lvar, :depout), :unshift,
              s(:str, "$(OBJS): $(RUBY_EXTCONF_H)\n\n")), nil),
          s(:send,
            s(:lvar, :depout), :flatten!),
          s(:lvar, :depout))),
      s(:def, :create_makefile,
        s(:args,
          s(:arg, :target),
          s(:optarg, :srcprefix,
            s(:nil))),
        s(:ensure,
          s(:begin,
            s(:gvasgn, :$target,
              s(:lvar, :target)),
            s(:lvasgn, :libpath,
              s(:send,
                s(:gvar, :$DEFLIBPATH), :|,
                s(:gvar, :$LIBPATH))),
            s(:send, nil, :message,
              s(:str, "creating Makefile\n")),
            s(:send,
              s(:const, nil, :MakeMakefile), :rm_f,
              s(:dstr,
                s(:begin,
                  s(:const, nil, :CONFTEST)),
                s(:str, "*"))),
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "DLEXT")), :==,
                s(:gvar, :$OBJEXT)),
              s(:begin,
                s(:for,
                  s(:lvasgn, :lib),
                  s(:lvasgn, :libs,
                    s(:send,
                      s(:gvar, :$libs), :split)),
                  s(:send,
                    s(:lvar, :lib), :sub!,
                    s(:regexp,
                      s(:str, "-l(.*)"),
                      s(:regopt)),
                    s(:dstr,
                      s(:str, "\"lib\\1."),
                      s(:begin,
                        s(:gvar, :$LIBEXT)),
                      s(:str, "\"")))),
                s(:send,
                  s(:gvar, :$defs), :push,
                  s(:send, nil, :format,
                    s(:str, "-DEXTLIB='%s'"),
                    s(:send,
                      s(:lvar, :libs), :join,
                      s(:str, ","))))), nil),
            s(:if,
              s(:send,
                s(:lvar, :target), :include?,
                s(:str, "/")),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :target_prefix),
                    s(:lvasgn, :target)),
                  s(:send,
                    s(:const, nil, :File), :split,
                    s(:lvar, :target))),
                s(:send,
                  s(:lvar, :target_prefix), :[]=,
                  s(:int, 0),
                  s(:int, 0),
                  s(:str, "/"))),
              s(:lvasgn, :target_prefix,
                s(:str, ""))),
            s(:or_asgn,
              s(:lvasgn, :srcprefix),
              s(:send,
                s(:dstr,
                  s(:str, "$(srcdir)/"),
                  s(:begin,
                    s(:lvar, :srcprefix))), :chomp,
                s(:str, "/"))),
            s(:send,
              s(:const, nil, :RbConfig), :expand,
              s(:lvasgn, :srcdir,
                s(:send,
                  s(:lvar, :srcprefix), :dup))),
            s(:lvasgn, :ext,
              s(:dstr,
                s(:str, "."),
                s(:begin,
                  s(:gvar, :$OBJEXT)))),
            s(:lvasgn, :orig_srcs,
              s(:send,
                s(:const, nil, :Dir), :[],
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :srcdir),
                  s(:dstr,
                    s(:str, "*.{"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :SRC_EXT), :join,
                        s(:str, ","))),
                    s(:str, "}"))))),
            s(:if,
              s(:send,
                s(:gvar, :$objs), :!),
              s(:begin,
                s(:lvasgn, :srcs,
                  s(:or,
                    s(:gvar, :$srcs),
                    s(:lvar, :orig_srcs))),
                s(:lvasgn, :objs,
                  s(:block,
                    s(:send,
                      s(:lvar, :srcs), :inject,
                      s(:block,
                        s(:send,
                          s(:const, nil, :Hash), :new),
                        s(:args),
                        s(:array))),
                    s(:args,
                      s(:arg, :h),
                      s(:arg, :f)),
                    s(:begin,
                      s(:op_asgn,
                        s(:send,
                          s(:lvar, :h), :[],
                          s(:send,
                            s(:send,
                              s(:const, nil, :File), :basename,
                              s(:lvar, :f),
                              s(:str, ".*")), :<<,
                            s(:lvar, :ext))), :<<,
                        s(:lvar, :f)),
                      s(:lvar, :h)))),
                s(:gvasgn, :$objs,
                  s(:send,
                    s(:lvar, :objs), :keys)),
                s(:if,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :objs), :delete_if),
                      s(:args,
                        s(:arg, :b),
                        s(:arg, :f)),
                      s(:send,
                        s(:send,
                          s(:lvar, :f), :size), :==,
                        s(:int, 1))), :empty?), nil,
                  s(:begin,
                    s(:lvasgn, :dups,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :objs), :sort), :map),
                        s(:args,
                          s(:arg, :b),
                          s(:arg, :f)),
                        s(:dstr,
                          s(:begin,
                            s(:send,
                              s(:lvar, :b), :[],
                              s(:regexp,
                                s(:str, ".*\\."),
                                s(:regopt)))),
                          s(:str, "{"),
                          s(:begin,
                            s(:send,
                              s(:block,
                                s(:send,
                                  s(:lvar, :f), :collect),
                                s(:args,
                                  s(:arg, :n)),
                                s(:send,
                                  s(:lvar, :n), :[],
                                  s(:regexp,
                                    s(:str, "([^.]+)\\z"),
                                    s(:regopt)))), :join,
                              s(:str, ","))),
                          s(:str, "}")))),
                    s(:send, nil, :abort,
                      s(:dstr,
                        s(:str, "source files duplication - "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :dups), :join,
                            s(:str, ", ")))))))),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:gvar, :$OBJEXT), :==,
                    s(:str, "o")), nil,
                  s(:block,
                    s(:send,
                      s(:gvar, :$objs), :collect!),
                    s(:args,
                      s(:arg, :o)),
                    s(:send,
                      s(:send,
                        s(:const, nil, :File), :basename,
                        s(:lvar, :o),
                        s(:str, ".*")), :<<,
                      s(:lvar, :ext)))),
                s(:lvasgn, :srcs,
                  s(:or,
                    s(:gvar, :$srcs),
                    s(:block,
                      s(:send,
                        s(:gvar, :$objs), :collect),
                      s(:args,
                        s(:arg, :o)),
                      s(:send,
                        s(:send,
                          s(:lvar, :o), :chomp,
                          s(:lvar, :ext)), :<<,
                        s(:str, ".c"))))))),
            s(:gvasgn, :$srcs,
              s(:lvar, :srcs)),
            s(:lvasgn, :hdrs,
              s(:send,
                s(:const, nil, :Dir), :[],
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:lvar, :srcdir),
                  s(:dstr,
                    s(:str, "*.{"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :HDR_EXT), :join,
                        s(:str, ","))),
                    s(:str, "}"))))),
            s(:if,
              s(:send,
                s(:gvar, :$objs), :empty?),
              s(:lvasgn, :target,
                s(:nil)), nil),
            s(:if,
              s(:and,
                s(:lvar, :target),
                s(:const, nil, :EXPORT_PREFIX)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :srcdir),
                      s(:send,
                        s(:lvar, :target), :+,
                        s(:str, ".def")))),
                  s(:begin,
                    s(:lvasgn, :deffile,
                      s(:str, "$(srcdir)/$(TARGET).def")),
                    s(:if,
                      s(:send,
                        s(:const, nil, :EXPORT_PREFIX), :empty?), nil,
                      s(:lvasgn, :makedef,
                        s(:dstr,
                          s(:str, "$(RUBY) -pe \"$$_.sub!(/^(?=\\w)/,'"),
                          s(:begin,
                            s(:const, nil, :EXPORT_PREFIX)),
                          s(:str, "') unless 1../^EXPORTS$/i\" "),
                          s(:begin,
                            s(:lvar, :deffile)))))),
                  s(:lvasgn, :makedef,
                    s(:str, "(echo EXPORTS && echo $(TARGET_ENTRY))"))),
                s(:if,
                  s(:lvar, :makedef),
                  s(:begin,
                    s(:send,
                      s(:gvar, :$cleanfiles), :<<,
                      s(:str, "$(DEFFILE)")),
                    s(:lvasgn, :origdef,
                      s(:lvar, :deffile)),
                    s(:lvasgn, :deffile,
                      s(:str, "$(TARGET)-$(arch).def"))), nil)), nil),
            s(:or_asgn,
              s(:lvasgn, :origdef),
              s(:str, "")),
            s(:if,
              s(:and,
                s(:gvar, :$extout),
                s(:gvar, :$INSTALLFILES)),
              s(:begin,
                s(:send,
                  s(:gvar, :$cleanfiles), :concat,
                  s(:block,
                    s(:send,
                      s(:gvar, :$INSTALLFILES), :collect),
                    s(:args,
                      s(:arg, :files),
                      s(:arg, :dir)),
                    s(:send,
                      s(:const, nil, :File), :join,
                      s(:lvar, :dir),
                      s(:send,
                        s(:lvar, :files), :sub,
                        s(:regexp,
                          s(:str, "\\A\\./"),
                          s(:regopt)),
                        s(:str, ""))))),
                s(:send,
                  s(:gvar, :$distcleandirs), :concat,
                  s(:block,
                    s(:send,
                      s(:gvar, :$INSTALLFILES), :collect),
                    s(:args,
                      s(:arg, :files),
                      s(:arg, :dir)),
                    s(:lvar, :dir)))), nil),
            s(:if,
              s(:and,
                s(:gvar, :$extmk),
                s(:gvar, :$static)),
              s(:send,
                s(:gvar, :$defs), :<<,
                s(:str, "-DRUBY_EXPORT=1")), nil),
            s(:if,
              s(:and,
                s(:gvar, :$extmk),
                s(:send,
                  s(:gvar, :$extconf_h), :!)),
              s(:send, nil, :create_header), nil),
            s(:lvasgn, :libpath,
              s(:send, nil, :libpathflag,
                s(:lvar, :libpath))),
            s(:lvasgn, :dllib,
              s(:if,
                s(:lvar, :target),
                s(:dstr,
                  s(:str, "$(TARGET)."),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :CONFIG), :[],
                      s(:str, "DLEXT")))),
                s(:str, ""))),
            s(:lvasgn, :staticlib,
              s(:if,
                s(:lvar, :target),
                s(:dstr,
                  s(:str, "$(TARGET)."),
                  s(:gvar, :$LIBEXT)),
                s(:str, ""))),
            s(:lvasgn, :mfile,
              s(:send, nil, :open,
                s(:str, "Makefile"),
                s(:str, "wb"))),
            s(:lvasgn, :conf,
              s(:send, nil, :configuration,
                s(:lvar, :srcprefix))),
            s(:if,
              s(:send, nil, :block_given?),
              s(:lvasgn, :conf,
                s(:yield,
                  s(:lvar, :conf))), nil),
            s(:send,
              s(:lvar, :mfile), :puts,
              s(:lvar, :conf)),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "libpath = "),
                s(:begin,
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:gvar, :$DEFLIBPATH), :|,
                        s(:gvar, :$LIBPATH))), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "LIBPATH = "),
                s(:begin,
                  s(:lvar, :libpath)),
                s(:str, "\n"),
                s(:str, "DEFFILE = "),
                s(:begin,
                  s(:lvar, :deffile)),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "CLEANFILES = "),
                s(:begin,
                  s(:send,
                    s(:gvar, :$cleanfiles), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "DISTCLEANFILES = "),
                s(:begin,
                  s(:send,
                    s(:gvar, :$distcleanfiles), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "DISTCLEANDIRS = "),
                s(:begin,
                  s(:send,
                    s(:gvar, :$distcleandirs), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "extout = "),
                s(:begin,
                  s(:and,
                    s(:gvar, :$extout),
                    s(:send,
                      s(:gvar, :$extout), :quote))),
                s(:str, "\n"),
                s(:str, "extout_prefix = "),
                s(:begin,
                  s(:gvar, :$extout_prefix)),
                s(:str, "\n"),
                s(:str, "target_prefix = "),
                s(:begin,
                  s(:lvar, :target_prefix)),
                s(:str, "\n"),
                s(:str, "LOCAL_LIBS = "),
                s(:begin,
                  s(:gvar, :$LOCAL_LIBS)),
                s(:str, "\n"),
                s(:str, "LIBS = "),
                s(:begin,
                  s(:gvar, :$LIBRUBYARG)),
                s(:str, " "),
                s(:begin,
                  s(:gvar, :$libs)),
                s(:str, " "),
                s(:begin,
                  s(:gvar, :$LIBS)),
                s(:str, "\n"),
                s(:str, "ORIG_SRCS = "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :orig_srcs), :collect,
                      s(:block_pass,
                        s(:send,
                          s(:const, nil, :File), :method,
                          s(:sym, :basename)))), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "SRCS = $(ORIG_SRCS) "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:lvar, :srcs), :-,
                          s(:lvar, :orig_srcs))), :collect,
                      s(:block_pass,
                        s(:send,
                          s(:const, nil, :File), :method,
                          s(:sym, :basename)))), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "OBJS = "),
                s(:begin,
                  s(:send,
                    s(:gvar, :$objs), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "HDRS = "),
                s(:begin,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :hdrs), :map),
                      s(:args,
                        s(:arg, :h)),
                      s(:send,
                        s(:str, "$(srcdir)/"), :+,
                        s(:send,
                          s(:const, nil, :File), :basename,
                          s(:lvar, :h)))), :join,
                    s(:str, " "))),
                s(:str, "\n"),
                s(:str, "TARGET = "),
                s(:begin,
                  s(:lvar, :target)),
                s(:str, "\n"),
                s(:str, "TARGET_NAME = "),
                s(:begin,
                  s(:and,
                    s(:lvar, :target),
                    s(:send,
                      s(:lvar, :target), :[],
                      s(:regexp,
                        s(:str, "\\A\\w+"),
                        s(:regopt))))),
                s(:str, "\n"),
                s(:str, "TARGET_ENTRY = "),
                s(:begin,
                  s(:or,
                    s(:const, nil, :EXPORT_PREFIX),
                    s(:str, ""))),
                s(:str, "Init_$(TARGET_NAME)\n"),
                s(:str, "DLLIB = "),
                s(:begin,
                  s(:lvar, :dllib)),
                s(:str, "\n"),
                s(:str, "EXTSTATIC = "),
                s(:begin,
                  s(:or,
                    s(:gvar, :$static),
                    s(:str, ""))),
                s(:str, "\n"),
                s(:str, "STATIC_LIB = "),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:gvar, :$static), :nil?), nil,
                    s(:lvar, :staticlib))),
                s(:str, "\n"),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:gvar, :$extout), :!),
                      s(:defined?,
                        s(:gvar, :$installed_list))),
                    s(:dstr,
                      s(:str, "INSTALLED_LIST = "),
                      s(:begin,
                        s(:gvar, :$installed_list)),
                      s(:str, "\n")),
                    s(:str, ""))),
                s(:str, "\n"),
                s(:str, "TIMESTAMP_DIR = "),
                s(:begin,
                  s(:if,
                    s(:gvar, :$extout),
                    s(:str, "$(extout)/.timestamp"),
                    s(:str, "."))),
                s(:str, "\n"))),
            s(:block,
              s(:send,
                s(:send, nil, :install_dirs), :each),
              s(:args,
                s(:arg, :d)),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "^[[:upper:]]"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :d), :[],
                    s(:int, 0))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:send,
                    s(:str, "%-14s= %s\n"), :%,
                    s(:lvar, :d))), nil)),
            s(:lvasgn, :n,
              s(:send,
                s(:begin,
                  s(:if,
                    s(:gvar, :$extout),
                    s(:str, "$(RUBYARCHDIR)/"),
                    s(:str, ""))), :+,
                s(:str, "$(TARGET)"))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "TARGET_SO     = "),
                s(:begin,
                  s(:begin,
                    s(:if,
                      s(:gvar, :$extout),
                      s(:str, "$(RUBYARCHDIR)/"),
                      s(:str, "")))),
                s(:str, "$(DLLIB)\n"),
                s(:str, "CLEANLIBS     = "),
                s(:begin,
                  s(:lvar, :n)),
                s(:str, "."),
                s(:begin,
                  s(:send,
                    s(:const, nil, :CONFIG), :[],
                    s(:str, "DLEXT"))),
                s(:str, " "),
                s(:begin,
                  s(:block,
                    s(:send, nil, :config_string,
                      s(:str, "cleanlibs")),
                    s(:args,
                      s(:arg, :t)),
                    s(:block,
                      s(:send,
                        s(:lvar, :t), :gsub,
                        s(:regexp,
                          s(:str, "\\$\\*"),
                          s(:regopt))),
                      s(:args),
                      s(:lvar, :n)))),
                s(:str, "\n"),
                s(:str, "CLEANOBJS     = *."),
                s(:begin,
                  s(:gvar, :$OBJEXT)),
                s(:str, " "),
                s(:begin,
                  s(:if,
                    s(:lvar, :target),
                    s(:block,
                      s(:send, nil, :config_string,
                        s(:str, "cleanobjs")),
                      s(:args,
                        s(:arg, :t)),
                      s(:send,
                        s(:lvar, :t), :gsub,
                        s(:regexp,
                          s(:str, "\\$\\*"),
                          s(:regopt)),
                        s(:dstr,
                          s(:str, "$(TARGET)"),
                          s(:begin,
                            s(:if,
                              s(:lvar, :deffile),
                              s(:str, "-$(arch)"),
                              s(:str, "")))))), nil)),
                s(:str, " *.bak\n"),
                s(:str, "\n"),
                s(:str, "all:    "),
                s(:begin,
                  s(:if,
                    s(:gvar, :$extout),
                    s(:str, "install"),
                    s(:if,
                      s(:lvar, :target),
                      s(:str, "$(DLLIB)"),
                      s(:str, "Makefile")))),
                s(:str, "\n"),
                s(:str, "static: "),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:gvar, :$extmk),
                      s(:send,
                        s(:gvar, :$static), :!)),
                    s(:str, "all"),
                    s(:dstr,
                      s(:str, "$(STATIC_LIB)"),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:gvar, :$extmk), :!),
                          s(:str, " install-rb"),
                          s(:str, "")))))),
                s(:str, "\n"),
                s(:str, ".PHONY: all install static install-so install-rb\n"),
                s(:str, ".PHONY: clean clean-so clean-static clean-rb\n"))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:const, nil, :CLEANINGS)),
            s(:lvasgn, :fsep,
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "BUILD_FILE_SEPARATOR")),
                s(:args,
                  s(:arg, :s)),
                s(:if,
                  s(:send,
                    s(:lvar, :s), :==,
                    s(:str, "/")), nil,
                  s(:lvar, :s)))),
            s(:if,
              s(:lvar, :fsep),
              s(:begin,
                s(:lvasgn, :sep,
                  s(:dstr,
                    s(:str, ":/="),
                    s(:begin,
                      s(:lvar, :fsep)))),
                s(:lvasgn, :fseprepl,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :s)),
                    s(:begin,
                      s(:lvasgn, :s,
                        s(:send,
                          s(:lvar, :s), :gsub,
                          s(:str, "/"),
                          s(:lvar, :fsep))),
                      s(:lvasgn, :s,
                        s(:block,
                          s(:send,
                            s(:lvar, :s), :gsub,
                            s(:regexp,
                              s(:str, "(\\$\\(\\w+)(\\))"),
                              s(:regopt))),
                          s(:args),
                          s(:send,
                            s(:send,
                              s(:nth_ref, 1), :+,
                              s(:lvar, :sep)), :+,
                            s(:nth_ref, 2)))),
                      s(:block,
                        s(:send,
                          s(:lvar, :s), :gsub,
                          s(:regexp,
                            s(:str, "(\\$\\{\\w+)(\\})"),
                            s(:regopt))),
                        s(:args),
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :+,
                            s(:lvar, :sep)), :+,
                          s(:nth_ref, 2)))))),
                s(:lvasgn, :rsep,
                  s(:dstr,
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :fsep)),
                    s(:str, "=/")))),
              s(:begin,
                s(:lvasgn, :fseprepl,
                  s(:block,
                    s(:send, nil, :proc),
                    s(:args,
                      s(:arg, :s)),
                    s(:lvar, :s))),
                s(:lvasgn, :sep,
                  s(:str, "")),
                s(:lvasgn, :rsep,
                  s(:str, "")))),
            s(:lvasgn, :dirs,
              s(:array)),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "install: install-so install-rb\n\n")),
            s(:lvasgn, :sodir,
              s(:send,
                s(:begin,
                  s(:lvasgn, :dir,
                    s(:str, "$(RUBYARCHDIR)"))), :dup)),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "install-so: ")),
            s(:if,
              s(:lvar, :target),
              s(:begin,
                s(:lvasgn, :f,
                  s(:str, "$(DLLIB)")),
                s(:lvasgn, :dest,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :dir)),
                    s(:str, "/"),
                    s(:begin,
                      s(:lvar, :f)))),
                s(:lvasgn, :stamp,
                  s(:send, nil, :timestamp_file,
                    s(:lvar, :dir),
                    s(:lvar, :target_prefix))),
                s(:if,
                  s(:gvar, :$extout),
                  s(:begin,
                    s(:send,
                      s(:lvar, :mfile), :puts,
                      s(:lvar, :dest)),
                    s(:send,
                      s(:lvar, :mfile), :print,
                      s(:str, "clean-so::\n")),
                    s(:send,
                      s(:lvar, :mfile), :print,
                      s(:dstr,
                        s(:str, "\t-$(Q)$(RM) "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :fseprepl), :[],
                            s(:lvar, :dest))),
                        s(:str, " "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :fseprepl), :[],
                            s(:lvar, :stamp))),
                        s(:str, "\n"))),
                    s(:send,
                      s(:lvar, :mfile), :print,
                      s(:dstr,
                        s(:str, "\t-$(Q)$(RMDIRS) "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :fseprepl), :[],
                            s(:lvar, :dir))),
                        s(:begin,
                          s(:gvar, :$ignore_error)),
                        s(:str, "\n")))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :mfile), :print,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :f)),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :stamp)),
                        s(:str, "\n"))),
                    s(:send,
                      s(:lvar, :mfile), :print,
                      s(:dstr,
                        s(:str, "\t$(INSTALL_PROG) "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :fseprepl), :[],
                            s(:lvar, :f))),
                        s(:str, " "),
                        s(:begin,
                          s(:lvar, :dir)),
                        s(:str, "\n"))),
                    s(:if,
                      s(:defined?,
                        s(:gvar, :$installed_list)),
                      s(:send,
                        s(:lvar, :mfile), :print,
                        s(:dstr,
                          s(:str, "\t@echo "),
                          s(:begin,
                            s(:lvar, :dir)),
                          s(:str, "/"),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :File), :basename,
                              s(:lvar, :f))),
                          s(:str, ">>$(INSTALLED_LIST)\n"))), nil))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:str, "clean-static::\n")),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:str, "\t-$(Q)$(RM) $(STATIC_LIB)\n"))),
              s(:send,
                s(:lvar, :mfile), :puts,
                s(:str, "Makefile"))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "install-rb: pre-install-rb install-rb-default\n")),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "install-rb-default: pre-install-rb-default\n")),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "pre-install-rb: Makefile\n")),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "pre-install-rb-default: Makefile\n")),
            s(:for,
              s(:mlhs,
                s(:lvasgn, :sfx),
                s(:lvasgn, :i)),
              s(:array,
                s(:array,
                  s(:str, "-default"),
                  s(:array,
                    s(:array,
                      s(:str, "lib/**/*.rb"),
                      s(:str, "$(RUBYLIBDIR)"),
                      s(:str, "lib")))),
                s(:array,
                  s(:str, ""),
                  s(:gvar, :$INSTALLFILES))),
              s(:begin,
                s(:or,
                  s(:lvasgn, :files,
                    s(:send, nil, :install_files,
                      s(:lvar, :mfile),
                      s(:lvar, :i),
                      s(:nil),
                      s(:lvar, :srcprefix))),
                  s(:next)),
                s(:for,
                  s(:mlhs,
                    s(:lvasgn, :dir),
                    s(:splat,
                      s(:lvasgn, :files))),
                  s(:lvar, :files),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :dirs), :include?,
                        s(:lvar, :dir)), nil,
                      s(:begin,
                        s(:send,
                          s(:lvar, :dirs), :<<,
                          s(:lvar, :dir)),
                        s(:send,
                          s(:lvar, :mfile), :print,
                          s(:dstr,
                            s(:str, "pre-install-rb"),
                            s(:begin,
                              s(:lvar, :sfx)),
                            s(:str, ": "),
                            s(:begin,
                              s(:send, nil, :timestamp_file,
                                s(:lvar, :dir),
                                s(:lvar, :target_prefix))),
                            s(:str, "\n"))))),
                    s(:for,
                      s(:lvasgn, :f),
                      s(:lvar, :files),
                      s(:begin,
                        s(:lvasgn, :dest,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :dir)),
                            s(:str, "/"),
                            s(:begin,
                              s(:send,
                                s(:const, nil, :File), :basename,
                                s(:lvar, :f))))),
                        s(:send,
                          s(:lvar, :mfile), :print,
                          s(:dstr,
                            s(:str, "install-rb"),
                            s(:begin,
                              s(:lvar, :sfx)),
                            s(:str, ": "),
                            s(:begin,
                              s(:lvar, :dest)),
                            s(:str, "\n"))),
                        s(:send,
                          s(:lvar, :mfile), :print,
                          s(:dstr,
                            s(:begin,
                              s(:lvar, :dest)),
                            s(:str, ": "),
                            s(:begin,
                              s(:lvar, :f)),
                            s(:str, " "),
                            s(:begin,
                              s(:send, nil, :timestamp_file,
                                s(:lvar, :dir),
                                s(:lvar, :target_prefix))),
                            s(:str, "\n"))),
                        s(:send,
                          s(:lvar, :mfile), :print,
                          s(:dstr,
                            s(:str, "\t$(Q) $("),
                            s(:begin,
                              s(:if,
                                s(:gvar, :$extout),
                                s(:str, "COPY"),
                                s(:str, "INSTALL_DATA"))),
                            s(:str, ") "),
                            s(:begin,
                              s(:lvar, :f)),
                            s(:str, " $(@D)\n"))),
                        s(:if,
                          s(:and,
                            s(:defined?,
                              s(:gvar, :$installed_list)),
                            s(:send,
                              s(:gvar, :$extout), :!)),
                          s(:send,
                            s(:lvar, :mfile), :print,
                            s(:dstr,
                              s(:str, "\t@echo "),
                              s(:begin,
                                s(:lvar, :dest)),
                              s(:str, ">>$(INSTALLED_LIST)\n"))), nil),
                        s(:if,
                          s(:gvar, :$extout),
                          s(:begin,
                            s(:send,
                              s(:lvar, :mfile), :print,
                              s(:dstr,
                                s(:str, "clean-rb"),
                                s(:begin,
                                  s(:lvar, :sfx)),
                                s(:str, "::\n"))),
                            s(:send,
                              s(:lvar, :mfile), :print,
                              s(:dstr,
                                s(:str, "\t-$(Q)$(RM) "),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :fseprepl), :[],
                                    s(:lvar, :dest))),
                                s(:str, "\n")))), nil))))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "pre-install-rb"),
                    s(:begin,
                      s(:lvar, :sfx)),
                    s(:str, ":\n"))),
                s(:if,
                  s(:send,
                    s(:lvar, :files), :empty?),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:str, "\t@$(NULLCMD)\n")),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:dstr,
                      s(:str, "\t$(ECHO) installing"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :sfx), :sub,
                          s(:regexp,
                            s(:str, "^-"),
                            s(:regopt)),
                          s(:str, " "))),
                      s(:str, " "),
                      s(:begin,
                        s(:lvar, :target)),
                      s(:str, " libraries\n")))),
                s(:if,
                  s(:gvar, :$extout),
                  s(:begin,
                    s(:send,
                      s(:lvar, :dirs), :uniq!),
                    s(:if,
                      s(:send,
                        s(:lvar, :dirs), :empty?), nil,
                      s(:begin,
                        s(:send,
                          s(:lvar, :mfile), :print,
                          s(:dstr,
                            s(:str, "clean-rb"),
                            s(:begin,
                              s(:lvar, :sfx)),
                            s(:str, "::\n"))),
                        s(:for,
                          s(:lvasgn, :dir),
                          s(:block,
                            s(:send,
                              s(:lvar, :dirs), :sort_by),
                            s(:args,
                              s(:arg, :d)),
                            s(:send,
                              s(:send,
                                s(:lvar, :d), :count,
                                s(:str, "/")), :-@)),
                          s(:begin,
                            s(:lvasgn, :stamp,
                              s(:send, nil, :timestamp_file,
                                s(:lvar, :dir),
                                s(:lvar, :target_prefix))),
                            s(:send,
                              s(:lvar, :mfile), :print,
                              s(:dstr,
                                s(:str, "\t-$(Q)$(RM) "),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :fseprepl), :[],
                                    s(:lvar, :stamp))),
                                s(:str, "\n"))),
                            s(:send,
                              s(:lvar, :mfile), :print,
                              s(:dstr,
                                s(:str, "\t-$(Q)$(RMDIRS) "),
                                s(:begin,
                                  s(:send,
                                    s(:lvar, :fseprepl), :[],
                                    s(:lvar, :dir))),
                                s(:begin,
                                  s(:gvar, :$ignore_error)),
                                s(:str, "\n")))))))), nil))),
            s(:if,
              s(:and,
                s(:lvar, :target),
                s(:send,
                  s(:send,
                    s(:lvar, :dirs), :include?,
                    s(:lvar, :sodir)), :!)),
              s(:send,
                s(:lvar, :dirs), :unshift,
                s(:lvar, :sodir)), nil),
            s(:block,
              s(:send,
                s(:lvar, :dirs), :each),
              s(:args,
                s(:arg, :d)),
              s(:begin,
                s(:lvasgn, :t,
                  s(:send, nil, :timestamp_file,
                    s(:lvar, :d),
                    s(:lvar, :target_prefix))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :t)),
                    s(:str, ":\n\t$(Q) $(MAKEDIRS) $(@D) "),
                    s(:begin,
                      s(:lvar, :d)),
                    s(:str, "\n\t$(Q) $(TOUCH) $@\n"))))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:dstr,
                s(:str, "\n"),
                s(:str, "site-install: site-install-so site-install-rb\n"),
                s(:str, "site-install-so: install-so\n"),
                s(:str, "site-install-rb: install-rb\n"),
                s(:str, "\n"))),
            s(:if,
              s(:lvar, :target), nil,
              s(:return)),
            s(:if,
              s(:send,
                s(:gvar, :$nmake), :==,
                s(:str, "b")),
              s(:send,
                s(:lvar, :mfile), :puts,
                s(:block,
                  s(:send,
                    s(:const, nil, :SRC_EXT), :collect),
                  s(:args,
                    s(:arg, :e)),
                  s(:dstr,
                    s(:str, ".path."),
                    s(:begin,
                      s(:lvar, :e)),
                    s(:str, " = $(VPATH)")))), nil),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:dstr,
                s(:str, ".SUFFIXES: ."),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :SRC_EXT), :+,
                          s(:array,
                            s(:gvar, :$OBJEXT),
                            s(:gvar, :$ASMEXT)))), :compact), :join,
                    s(:str, " ."))),
                s(:str, "\n"))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "\n")),
            s(:lvasgn, :compile_command,
              s(:dstr,
                s(:str, "\n\t$(ECHO) compiling $(<"),
                s(:begin,
                  s(:lvar, :rsep)),
                s(:str, ")\n\t$(Q) %s\n\n"))),
            s(:lvasgn, :command,
              s(:send,
                s(:lvar, :compile_command), :%,
                s(:const, nil, :COMPILE_CXX))),
            s(:lvasgn, :asm_command,
              s(:send,
                s(:send,
                  s(:lvar, :compile_command), :sub,
                  s(:regexp,
                    s(:str, "compiling"),
                    s(:regopt)),
                  s(:str, "translating")), :%,
                s(:const, nil, :ASSEMBLE_CXX))),
            s(:block,
              s(:send,
                s(:const, nil, :CXX_EXT), :each),
              s(:args,
                s(:arg, :e)),
              s(:block,
                s(:send, nil, :each_compile_rules),
                s(:args,
                  s(:arg, :rule)),
                s(:begin,
                  s(:send,
                    s(:lvar, :mfile), :printf,
                    s(:lvar, :rule),
                    s(:lvar, :e),
                    s(:gvar, :$OBJEXT)),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:lvar, :command)),
                  s(:send,
                    s(:lvar, :mfile), :printf,
                    s(:lvar, :rule),
                    s(:lvar, :e),
                    s(:gvar, :$ASMEXT)),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:lvar, :asm_command))))),
            s(:lvasgn, :command,
              s(:send,
                s(:lvar, :compile_command), :%,
                s(:const, nil, :COMPILE_C))),
            s(:lvasgn, :asm_command,
              s(:send,
                s(:send,
                  s(:lvar, :compile_command), :sub,
                  s(:regexp,
                    s(:str, "compiling"),
                    s(:regopt)),
                  s(:str, "translating")), :%,
                s(:const, nil, :ASSEMBLE_C))),
            s(:block,
              s(:send,
                s(:const, nil, :C_EXT), :each),
              s(:args,
                s(:arg, :e)),
              s(:block,
                s(:send, nil, :each_compile_rules),
                s(:args,
                  s(:arg, :rule)),
                s(:begin,
                  s(:send,
                    s(:lvar, :mfile), :printf,
                    s(:lvar, :rule),
                    s(:lvar, :e),
                    s(:gvar, :$OBJEXT)),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:lvar, :command)),
                  s(:send,
                    s(:lvar, :mfile), :printf,
                    s(:lvar, :rule),
                    s(:lvar, :e),
                    s(:gvar, :$ASMEXT)),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:lvar, :asm_command))))),
            s(:if,
              s(:gvar, :$extout),
              s(:send,
                s(:lvar, :mfile), :print,
                s(:str, "$(RUBYARCHDIR)/")), nil),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "$(DLLIB): ")),
            s(:if,
              s(:lvar, :makedef),
              s(:send,
                s(:lvar, :mfile), :print,
                s(:str, "$(DEFFILE) ")), nil),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "$(OBJS) Makefile")),
            s(:if,
              s(:gvar, :$extout),
              s(:send,
                s(:lvar, :mfile), :print,
                s(:dstr,
                  s(:str, " "),
                  s(:begin,
                    s(:send, nil, :timestamp_file,
                      s(:str, "$(RUBYARCHDIR)"),
                      s(:lvar, :target_prefix))))), nil),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "\n")),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:dstr,
                s(:str, "\t$(ECHO) linking shared-object "),
                s(:begin,
                  s(:send,
                    s(:lvar, :target_prefix), :sub,
                    s(:regexp,
                      s(:str, "\\A/(.*)"),
                      s(:regopt)),
                    s(:str, "\\1/"))),
                s(:str, "$(DLLIB)\n"))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:dstr,
                s(:str, "\t-$(Q)$(RM) $(@"),
                s(:begin,
                  s(:lvar, :sep)),
                s(:str, ")\n"))),
            s(:lvasgn, :link_so,
              s(:send,
                s(:const, nil, :LINK_SO), :gsub,
                s(:regexp,
                  s(:str, "^"),
                  s(:regopt)),
                s(:str, "\t$(Q) "))),
            s(:if,
              s(:send,
                s(:lvar, :srcs), :any?,
                s(:block_pass,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\.(?:"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :CXX_EXT), :join,
                          s(:str, "|"))),
                      s(:str, ")\\z"),
                      s(:regopt)), :method,
                    s(:sym, :===)))),
              s(:lvasgn, :link_so,
                s(:send,
                  s(:lvar, :link_so), :sub,
                  s(:regexp,
                    s(:str, "\\bLDSHARED\\b"),
                    s(:regopt)),
                  s(:str, "\\&XX"))), nil),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:lvar, :link_so),
              s(:str, "\n\n")),
            s(:if,
              s(:send,
                s(:gvar, :$static), :nil?), nil,
              s(:begin,
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "$(STATIC_LIB): $(OBJS)\n\t-$(Q)$(RM) $(@"),
                    s(:begin,
                      s(:lvar, :sep)),
                    s(:str, ")\n\t"))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "$(ECHO) linking static-library $(@"),
                    s(:begin,
                      s(:lvar, :rsep)),
                    s(:str, ")\n\t$(Q) "))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "$(AR) "),
                    s(:begin,
                      s(:or,
                        s(:send, nil, :config_string,
                          s(:str, "ARFLAGS")),
                        s(:str, "cru "))),
                    s(:str, "$@ $(OBJS)"))),
                s(:block,
                  s(:send, nil, :config_string,
                    s(:str, "RANLIB")),
                  s(:args,
                    s(:arg, :ranlib)),
                  s(:send,
                    s(:lvar, :mfile), :print,
                    s(:dstr,
                      s(:str, "\n\t-$(Q)"),
                      s(:begin,
                        s(:lvar, :ranlib)),
                      s(:str, " $(@) 2> /dev/null || true")))))),
            s(:send,
              s(:lvar, :mfile), :print,
              s(:str, "\n\n")),
            s(:if,
              s(:lvar, :makedef),
              s(:begin,
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "$(DEFFILE): "),
                    s(:begin,
                      s(:lvar, :origdef)),
                    s(:str, "\n"))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "\t$(ECHO) generating $(@"),
                    s(:begin,
                      s(:lvar, :rsep)),
                    s(:str, ")\n"))),
                s(:send,
                  s(:lvar, :mfile), :print,
                  s(:dstr,
                    s(:str, "\t$(Q) "),
                    s(:begin,
                      s(:lvar, :makedef)),
                    s(:str, " > $@\n\n")))), nil),
            s(:lvasgn, :depend,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :srcdir),
                s(:str, "depend"))),
            s(:if,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :depend)),
              s(:send,
                s(:lvar, :mfile), :print,
                s(:str, "###\n"),
                s(:splat,
                  s(:send, nil, :depend_rules,
                    s(:send,
                      s(:const, nil, :File), :read,
                      s(:lvar, :depend))))),
              s(:send,
                s(:lvar, :mfile), :print,
                s(:str, "$(OBJS): $(HDRS) $(ruby_headers)\n"))),
            s(:gvasgn, :$makefile_created,
              s(:true))),
          s(:if,
            s(:lvar, :mfile),
            s(:send,
              s(:lvar, :mfile), :close), nil))),
      s(:def, :init_mkmf,
        s(:args,
          s(:optarg, :config,
            s(:const, nil, :CONFIG)),
          s(:optarg, :rbconfig,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG))),
        s(:begin,
          s(:gvasgn, :$makefile_created,
            s(:false)),
          s(:gvasgn, :$arg_config,
            s(:array)),
          s(:gvasgn, :$enable_shared,
            s(:send,
              s(:send,
                s(:lvar, :config), :[],
                s(:str, "ENABLE_SHARED")), :==,
              s(:str, "yes"))),
          s(:gvasgn, :$defs,
            s(:array)),
          s(:gvasgn, :$extconf_h,
            s(:nil)),
          s(:if,
            s(:and,
              s(:gvasgn, :$warnflags,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "warnflags"))),
              s(:send,
                s(:send,
                  s(:const, nil, :CONFIG), :[],
                  s(:str, "GCC")), :==,
                s(:str, "yes"))),
            s(:begin,
              s(:send,
                s(:lvar, :config), :[]=,
                s(:str, "warnflags"),
                s(:send,
                  s(:gvar, :$warnflags), :gsub,
                  s(:regexp,
                    s(:str, "(\\A|\\s)-Werror[-=]"),
                    s(:regopt)),
                  s(:str, "\\1-W"))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "icc\\z"),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "CC"))),
                s(:send,
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "warnflags")), :gsub!,
                  s(:regexp,
                    s(:str, "(\\A|\\s)-W(?:division-by-zero|deprecated-declarations)"),
                    s(:regopt)),
                  s(:str, "\\1")), nil),
              s(:send,
                s(:const, nil, :RbConfig), :expand,
                s(:send,
                  s(:lvar, :rbconfig), :[]=,
                  s(:str, "warnflags"),
                  s(:send,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:str, "warnflags")), :dup))),
              s(:block,
                s(:send,
                  s(:lvar, :config), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :val)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "warnflags"),
                      s(:regopt)),
                    s(:lvar, :val)),
                  s(:send,
                    s(:const, nil, :RbConfig), :expand,
                    s(:send,
                      s(:lvar, :rbconfig), :[]=,
                      s(:lvar, :key),
                      s(:send,
                        s(:lvar, :val), :dup))), nil)),
              s(:if,
                s(:gvar, :$extmk), nil,
                s(:gvasgn, :$warnflags,
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "warnflags"))))), nil),
          s(:gvasgn, :$CFLAGS,
            s(:send,
              s(:send, nil, :with_config,
                s(:str, "cflags"),
                s(:send, nil, :arg_config,
                  s(:str, "CFLAGS"),
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "CFLAGS")))), :dup)),
          s(:gvasgn, :$CXXFLAGS,
            s(:send,
              s(:begin,
                s(:or,
                  s(:send, nil, :with_config,
                    s(:str, "cxxflags"),
                    s(:send, nil, :arg_config,
                      s(:str, "CXXFLAGS"),
                      s(:send,
                        s(:lvar, :config), :[],
                        s(:str, "CXXFLAGS")))),
                  s(:str, ""))), :dup)),
          s(:gvasgn, :$ARCH_FLAG,
            s(:send,
              s(:send, nil, :with_config,
                s(:str, "arch_flag"),
                s(:send, nil, :arg_config,
                  s(:str, "ARCH_FLAG"),
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "ARCH_FLAG")))), :dup)),
          s(:gvasgn, :$CPPFLAGS,
            s(:send,
              s(:send, nil, :with_config,
                s(:str, "cppflags"),
                s(:send, nil, :arg_config,
                  s(:str, "CPPFLAGS"),
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "CPPFLAGS")))), :dup)),
          s(:gvasgn, :$LDFLAGS,
            s(:send,
              s(:send, nil, :with_config,
                s(:str, "ldflags"),
                s(:send, nil, :arg_config,
                  s(:str, "LDFLAGS"),
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "LDFLAGS")))), :dup)),
          s(:gvasgn, :$INCFLAGS,
            s(:str, "-I$(arch_hdrdir)")),
          s(:if,
            s(:gvar, :$extmk), nil,
            s(:send,
              s(:gvar, :$INCFLAGS), :<<,
              s(:str, " -I$(hdrdir)/ruby/backward"))),
          s(:send,
            s(:gvar, :$INCFLAGS), :<<,
            s(:str, " -I$(hdrdir) -I$(srcdir)")),
          s(:gvasgn, :$DLDFLAGS,
            s(:send,
              s(:send, nil, :with_config,
                s(:str, "dldflags"),
                s(:send, nil, :arg_config,
                  s(:str, "DLDFLAGS"),
                  s(:send,
                    s(:lvar, :config), :[],
                    s(:str, "DLDFLAGS")))), :dup)),
          s(:gvasgn, :$LIBEXT,
            s(:send,
              s(:send,
                s(:lvar, :config), :[],
                s(:str, "LIBEXT")), :dup)),
          s(:gvasgn, :$OBJEXT,
            s(:send,
              s(:send,
                s(:lvar, :config), :[],
                s(:str, "OBJEXT")), :dup)),
          s(:gvasgn, :$EXEEXT,
            s(:send,
              s(:send,
                s(:lvar, :config), :[],
                s(:str, "EXEEXT")), :dup)),
          s(:gvasgn, :$ASMEXT,
            s(:or,
              s(:send, nil, :config_string,
                s(:str, "ASMEXT"),
                s(:block_pass,
                  s(:sym, :dup))),
              s(:str, "S"))),
          s(:gvasgn, :$LIBS,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:str, "LIBS"))),
              s(:str, " "),
              s(:begin,
                s(:send,
                  s(:lvar, :config), :[],
                  s(:str, "DLDLIBS"))))),
          s(:gvasgn, :$LIBRUBYARG,
            s(:str, "")),
          s(:gvasgn, :$LIBRUBYARG_STATIC,
            s(:send,
              s(:lvar, :config), :[],
              s(:str, "LIBRUBYARG_STATIC"))),
          s(:gvasgn, :$LIBRUBYARG_SHARED,
            s(:send,
              s(:lvar, :config), :[],
              s(:str, "LIBRUBYARG_SHARED"))),
          s(:gvasgn, :$DEFLIBPATH,
            s(:array,
              s(:if,
                s(:gvar, :$extmk),
                s(:str, "$(topdir)"),
                s(:dstr,
                  s(:str, "$("),
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:lvar, :config), :[],
                        s(:str, "libdirname")),
                      s(:str, "libdir"))),
                  s(:str, ")"))))),
          s(:send,
            s(:gvar, :$DEFLIBPATH), :unshift,
            s(:str, ".")),
          s(:gvasgn, :$LIBPATH,
            s(:array)),
          s(:gvasgn, :$INSTALLFILES,
            s(:array)),
          s(:gvasgn, :$NONINSTALLFILES,
            s(:array,
              s(:regexp,
                s(:str, "~\\z"),
                s(:regopt)),
              s(:regexp,
                s(:str, "\\A#.*#\\z"),
                s(:regopt)),
              s(:regexp,
                s(:str, "\\A\\.#"),
                s(:regopt)),
              s(:regexp,
                s(:str, "\\.bak\\z"),
                s(:regopt, :i)),
              s(:regexp,
                s(:str, "\\.orig\\z"),
                s(:regopt)),
              s(:regexp,
                s(:str, "\\.rej\\z"),
                s(:regopt)),
              s(:regexp,
                s(:str, "\\.l[ao]\\z"),
                s(:regopt)),
              s(:regexp,
                s(:str, "\\.o\\z"),
                s(:regopt)))),
          s(:gvasgn, :$VPATH,
            s(:array,
              s(:str, "$(srcdir)"),
              s(:str, "$(arch_hdrdir)/ruby"),
              s(:str, "$(hdrdir)/ruby"))),
          s(:gvasgn, :$objs,
            s(:nil)),
          s(:gvasgn, :$srcs,
            s(:nil)),
          s(:gvasgn, :$libs,
            s(:str, "")),
          s(:if,
            s(:or,
              s(:gvar, :$enable_shared),
              s(:send,
                s(:send,
                  s(:const, nil, :RbConfig), :expand,
                  s(:send,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:str, "LIBRUBY")), :dup)), :!=,
                s(:send,
                  s(:const, nil, :RbConfig), :expand,
                  s(:send,
                    s(:send,
                      s(:lvar, :config), :[],
                      s(:str, "LIBRUBY_A")), :dup)))),
            s(:gvasgn, :$LIBRUBYARG,
              s(:send,
                s(:lvar, :config), :[],
                s(:str, "LIBRUBYARG"))), nil),
          s(:gvasgn, :$LOCAL_LIBS,
            s(:str, "")),
          s(:gvasgn, :$cleanfiles,
            s(:or,
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "CLEANFILES")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :Shellwords), :shellwords,
                  s(:lvar, :s))),
              s(:array))),
          s(:send,
            s(:gvar, :$cleanfiles), :<<,
            s(:str, "mkmf.log")),
          s(:gvasgn, :$distcleanfiles,
            s(:or,
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "DISTCLEANFILES")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :Shellwords), :shellwords,
                  s(:lvar, :s))),
              s(:array))),
          s(:gvasgn, :$distcleandirs,
            s(:or,
              s(:block,
                s(:send, nil, :config_string,
                  s(:str, "DISTCLEANDIRS")),
                s(:args,
                  s(:arg, :s)),
                s(:send,
                  s(:const, nil, :Shellwords), :shellwords,
                  s(:lvar, :s))),
              s(:array))),
          s(:or_asgn,
            s(:gvasgn, :$extout),
            s(:nil)),
          s(:or_asgn,
            s(:gvasgn, :$extout_prefix),
            s(:nil)),
          s(:send,
            s(:gvar, :$arg_config), :clear),
          s(:send, nil, :dir_config,
            s(:str, "opt")))),
      s(:casgn, nil, :FailedMessage,
        s(:dstr,
          s(:str, "Could not create Makefile due to some reason, probably lack of necessary\n"),
          s(:str, "libraries and/or headers.  Check the mkmf.log file for more details.  You may\n"),
          s(:str, "need configuration options.\n"),
          s(:str, "\n"),
          s(:str, "Provided configuration options:\n"))),
      s(:def, :mkmf_failed,
        s(:args,
          s(:arg, :path)),
        s(:if,
          s(:or,
            s(:gvar, :$makefile_created),
            s(:send,
              s(:const, nil, :File), :exist?,
              s(:str, "Makefile"))), nil,
          s(:begin,
            s(:lvasgn, :opts,
              s(:block,
                s(:send,
                  s(:gvar, :$arg_config), :collect),
                s(:args,
                  s(:arg, :t),
                  s(:arg, :n)),
                s(:dstr,
                  s(:str, "\t"),
                  s(:begin,
                    s(:lvar, :t)),
                  s(:begin,
                    s(:if,
                      s(:lvar, :n),
                      s(:dstr,
                        s(:str, "="),
                        s(:begin,
                          s(:lvar, :n))),
                      s(:str, ""))),
                  s(:str, "\n")))),
            s(:send, nil, :abort,
              s(:send,
                s(:send,
                  s(:dstr,
                    s(:str, "*** "),
                    s(:begin,
                      s(:lvar, :path)),
                    s(:str, " failed ***\n")), :+,
                  s(:const, nil, :FailedMessage)), :+,
                s(:send,
                  s(:lvar, :opts), :join)))))),
      s(:send, nil, :private),
      s(:def, :_libdir_basename,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@libdir_basename),
          s(:or,
            s(:block,
              s(:send, nil, :config_string,
                s(:str, "libdir")),
              s(:args,
                s(:arg, :name)),
              s(:send,
                s(:lvar, :name), :[],
                s(:regexp,
                  s(:str, "\\A\\$\\(exec_prefix\\)/(.*)"),
                  s(:regopt)),
                s(:int, 1))),
            s(:str, "lib")))),
      s(:def, :MAIN_DOES_NOTHING,
        s(:args,
          s(:restarg, :refs)),
        s(:begin,
          s(:lvasgn, :src,
            s(:const, nil, :MAIN_DOES_NOTHING)),
          s(:if,
            s(:send,
              s(:lvar, :refs), :empty?), nil,
            s(:lvasgn, :src,
              s(:block,
                s(:send,
                  s(:lvar, :src), :sub,
                  s(:regexp,
                    s(:str, "\\{"),
                    s(:regopt))),
                s(:args),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:back_ref, :$&), :+,
                      s(:str, "\n  if (argc > 1000000) {\n")), :+,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :refs), :map),
                        s(:args,
                          s(:arg, :n)),
                        s(:dstr,
                          s(:str, "    printf(\"%p\", &"),
                          s(:begin,
                            s(:lvar, :n)),
                          s(:str, ");\n"))), :join,
                      s(:str, ""))), :+,
                  s(:str, "  }\n"))))),
          s(:lvar, :src))),
      s(:send, nil, :extend,
        s(:self)),
      s(:send, nil, :init_mkmf),
      s(:gvasgn, :$make,
        s(:send, nil, :with_config,
          s(:str, "make-prog"),
          s(:or,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "MAKE")),
            s(:str, "make")))),
      s(:masgn,
        s(:mlhs,
          s(:lvasgn, :make)),
        s(:send,
          s(:const, nil, :Shellwords), :shellwords,
          s(:gvar, :$make))),
      s(:gvasgn, :$nmake,
        s(:nil)),
      s(:case, nil,
        s(:when,
          s(:gvar, :$mswin),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "nmake"),
                s(:regopt, :i)),
              s(:lvar, :make)),
            s(:gvasgn, :$nmake,
              s(:str, "m")), nil)), nil),
      s(:gvasgn, :$ignore_error,
        s(:if,
          s(:gvar, :$nmake),
          s(:str, ""),
          s(:str, " 2> /dev/null || true"))),
      s(:send,
        s(:const,
          s(:const, nil, :RbConfig), :CONFIG), :[]=,
        s(:str, "srcdir"),
        s(:send,
          s(:const, nil, :CONFIG), :[]=,
          s(:str, "srcdir"),
          s(:gvasgn, :$srcdir,
            s(:send, nil, :arg_config,
              s(:str, "--srcdir"),
              s(:send,
                s(:const, nil, :File), :dirname,
                s(:gvar, :$0)))))),
      s(:or_asgn,
        s(:send,
          s(:gvar, :$configure_args), :[],
          s(:str, "--topsrcdir")),
        s(:gvar, :$srcdir)),
      s(:if,
        s(:gvasgn, :$curdir,
          s(:send, nil, :arg_config,
            s(:str, "--curdir"))),
        s(:send,
          s(:const, nil, :RbConfig), :expand,
          s(:lvasgn, :curdir,
            s(:send,
              s(:gvar, :$curdir), :dup))),
        s(:lvasgn, :curdir,
          s(:gvasgn, :$curdir,
            s(:str, ".")))),
      s(:if,
        s(:send,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "topdir"))), :==,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:lvar, :curdir))), nil,
        s(:begin,
          s(:send,
            s(:const, nil, :CONFIG), :[]=,
            s(:str, "topdir"),
            s(:gvar, :$curdir)),
          s(:send,
            s(:const,
              s(:const, nil, :RbConfig), :CONFIG), :[]=,
            s(:str, "topdir"),
            s(:lvar, :curdir)))),
      s(:or_asgn,
        s(:send,
          s(:gvar, :$configure_args), :[],
          s(:str, "--topdir")),
        s(:gvar, :$curdir)),
      s(:gvasgn, :$ruby,
        s(:send, nil, :arg_config,
          s(:str, "--ruby"),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "bindir")),
            s(:send,
              s(:const, nil, :CONFIG), :[],
              s(:str, "ruby_install_name"))))),
      s(:send,
        s(:const, nil, :RbConfig), :expand,
        s(:send,
          s(:const, nil, :CONFIG), :[],
          s(:str, "RUBY_SO_NAME"))),
      s(:lvasgn, :split,
        s(:send,
          s(:send,
            s(:const, nil, :Shellwords), :method,
            s(:sym, :shellwords)), :to_proc)),
      s(:casgn, nil, :EXPORT_PREFIX,
        s(:block,
          s(:send, nil, :config_string,
            s(:str, "EXPORT_PREFIX")),
          s(:args,
            s(:arg, :s)),
          s(:send,
            s(:lvar, :s), :strip))),
      s(:lvasgn, :hdr,
        s(:array,
          s(:dstr,
            s(:str, "#include \"ruby.h\""),
            s(:str, "\n")))),
      s(:block,
        s(:send, nil, :config_string,
          s(:str, "COMMON_MACROS")),
        s(:args,
          s(:arg, :s)),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Shellwords), :shellwords,
              s(:lvar, :s)), :each),
          s(:args,
            s(:arg, :w)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :w),
                s(:lvasgn, :v)),
              s(:send,
                s(:lvar, :w), :split,
                s(:regexp,
                  s(:str, "="),
                  s(:regopt)),
                s(:int, 2))),
            s(:send,
              s(:lvar, :hdr), :<<,
              s(:dstr,
                s(:str, "#ifndef "),
                s(:begin,
                  s(:lvar, :w)))),
            s(:send,
              s(:lvar, :hdr), :<<,
              s(:dstr,
                s(:str, "#define "),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:array,
                        s(:lvar, :w),
                        s(:lvar, :v)), :compact), :join,
                    s(:str, " "))))),
            s(:send,
              s(:lvar, :hdr), :<<,
              s(:dstr,
                s(:str, "#endif /* "),
                s(:begin,
                  s(:lvar, :w)),
                s(:str, " */")))))),
      s(:block,
        s(:send, nil, :config_string,
          s(:str, "COMMON_HEADERS")),
        s(:args,
          s(:arg, :s)),
        s(:block,
          s(:send,
            s(:send,
              s(:const, nil, :Shellwords), :shellwords,
              s(:lvar, :s)), :each),
          s(:args,
            s(:arg, :w)),
          s(:send,
            s(:lvar, :hdr), :<<,
            s(:dstr,
              s(:str, "#include <"),
              s(:begin,
                s(:lvar, :w)),
              s(:str, ">"))))),
      s(:casgn, nil, :COMMON_HEADERS,
        s(:send,
          s(:lvar, :hdr), :join,
          s(:str, "\n"))),
      s(:casgn, nil, :COMMON_LIBS,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "COMMON_LIBS"),
            s(:block_pass,
              s(:lvar, :split))),
          s(:array))),
      s(:casgn, nil, :COMPILE_RULES,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "COMPILE_RULES"),
            s(:block_pass,
              s(:lvar, :split))),
          s(:array,
            s(:str, ".%s.%s:")))),
      s(:casgn, nil, :RULE_SUBST,
        s(:send, nil, :config_string,
          s(:str, "RULE_SUBST"))),
      s(:casgn, nil, :COMPILE_C,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "COMPILE_C")),
          s(:str, "$(CC) $(INCFLAGS) $(CPPFLAGS) $(CFLAGS) $(COUTFLAG)$@ -c $<"))),
      s(:casgn, nil, :COMPILE_CXX,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "COMPILE_CXX")),
          s(:str, "$(CXX) $(INCFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(COUTFLAG)$@ -c $<"))),
      s(:casgn, nil, :ASSEMBLE_C,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "ASSEMBLE_C")),
          s(:send,
            s(:const, nil, :COMPILE_C), :sub,
            s(:regexp,
              s(:str, "(?<=\\s)-c(?=\\s)"),
              s(:regopt)),
            s(:str, "-S")))),
      s(:casgn, nil, :ASSEMBLE_CXX,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "ASSEMBLE_CXX")),
          s(:send,
            s(:const, nil, :COMPILE_CXX), :sub,
            s(:regexp,
              s(:str, "(?<=\\s)-c(?=\\s)"),
              s(:regopt)),
            s(:str, "-S")))),
      s(:casgn, nil, :TRY_LINK,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "TRY_LINK")),
          s(:dstr,
            s(:dstr,
              s(:str, "$(CC) "),
              s(:begin,
                s(:const, nil, :OUTFLAG)),
              s(:begin,
                s(:const, nil, :CONFTEST)),
              s(:begin,
                s(:gvar, :$EXEEXT)),
              s(:str, " $(INCFLAGS) $(CPPFLAGS) ")),
            s(:str, "$(CFLAGS) $(src) $(LIBPATH) $(LDFLAGS) $(ARCH_FLAG) $(LOCAL_LIBS) $(LIBS)")))),
      s(:casgn, nil, :LINK_SO,
        s(:block,
          s(:send,
            s(:begin,
              s(:or,
                s(:send, nil, :config_string,
                  s(:str, "LINK_SO")),
                s(:str, ""))), :sub,
            s(:regexp,
              s(:str, "^$"),
              s(:regopt))),
          s(:args),
          s(:if,
            s(:send,
              s(:send,
                s(:const, nil, :CONFIG), :[],
                s(:str, "DLEXT")), :==,
              s(:gvar, :$OBJEXT)),
            s(:str, "ld $(DLDFLAGS) -r -o $@ $(OBJS)\n"),
            s(:dstr,
              s(:dstr,
                s(:str, "$(LDSHARED) "),
                s(:begin,
                  s(:const, nil, :OUTFLAG)),
                s(:str, "$@ $(OBJS) ")),
              s(:str, "$(LIBPATH) $(DLDFLAGS) $(LOCAL_LIBS) $(LIBS)"))))),
      s(:casgn, nil, :LIBPATHFLAG,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "LIBPATHFLAG")),
          s(:str, " -L%s"))),
      s(:casgn, nil, :RPATHFLAG,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "RPATHFLAG")),
          s(:str, ""))),
      s(:casgn, nil, :LIBARG,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "LIBARG")),
          s(:str, "-l%s"))),
      s(:casgn, nil, :MAIN_DOES_NOTHING,
        s(:or,
          s(:send, nil, :config_string,
            s(:str, "MAIN_DOES_NOTHING")),
          s(:str, "int main(int argc, char **argv)\n{\n  return 0;\n}"))),
      s(:casgn, nil, :UNIVERSAL_INTS,
        s(:or,
          s(:block,
            s(:send, nil, :config_string,
              s(:str, "UNIVERSAL_INTS")),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:const, nil, :Shellwords), :shellwords,
              s(:lvar, :s))),
          s(:array,
            s(:str, "int"),
            s(:str, "short"),
            s(:str, "long"),
            s(:str, "long long")))),
      s(:lvasgn, :sep,
        s(:or,
          s(:block,
            s(:send, nil, :config_string,
              s(:str, "BUILD_FILE_SEPARATOR")),
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:send,
                s(:lvar, :s), :!=,
                s(:str, "/")),
              s(:dstr,
                s(:str, ":/="),
                s(:begin,
                  s(:lvar, :s))), nil)),
          s(:str, ""))),
      s(:casgn, nil, :CLEANINGS,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "clean-static::\n"),
          s(:str, "clean-rb-default::\n"),
          s(:str, "clean-rb::\n"),
          s(:str, "clean-so::\n"),
          s(:str, "clean: clean-so clean-static clean-rb-default clean-rb\n"),
          s(:str, "\t\t-$(Q)$(RM) $(CLEANLIBS"),
          s(:begin,
            s(:lvar, :sep)),
          s(:str, ") $(CLEANOBJS"),
          s(:begin,
            s(:lvar, :sep)),
          s(:str, ") $(CLEANFILES"),
          s(:begin,
            s(:lvar, :sep)),
          s(:str, ") .*.time\n"),
          s(:str, "\n"),
          s(:str, "distclean-rb-default::\n"),
          s(:str, "distclean-rb::\n"),
          s(:str, "distclean-so::\n"),
          s(:str, "distclean-static::\n"),
          s(:str, "distclean: clean distclean-so distclean-static distclean-rb-default distclean-rb\n"),
          s(:str, "\t\t-$(Q)$(RM) Makefile $(RUBY_EXTCONF_H) "),
          s(:begin,
            s(:const, nil, :CONFTEST)),
          s(:str, ".* mkmf.log\n"),
          s(:str, "\t\t-$(Q)$(RM) core ruby$(EXEEXT) *~ $(DISTCLEANFILES"),
          s(:begin,
            s(:lvar, :sep)),
          s(:str, ")\n"),
          s(:str, "\t\t-$(Q)$(RMDIRS) $(DISTCLEANDIRS"),
          s(:begin,
            s(:lvar, :sep)),
          s(:str, ")"),
          s(:begin,
            s(:gvar, :$ignore_error)),
          s(:str, "\n"),
          s(:str, "\n"),
          s(:str, "realclean: distclean\n"))))),
  s(:send, nil, :include,
    s(:const, nil, :MakeMakefile)),
  s(:if,
    s(:and,
      s(:send,
        s(:gvar, :$extmk), :!),
      s(:match_with_lvasgn,
        s(:regexp,
          s(:str, "\\A(extconf|makefile).rb\\z"),
          s(:regopt)),
        s(:send,
          s(:const, nil, :File), :basename,
          s(:gvar, :$0)))),
    s(:postexe,
      s(:send, nil, :mkmf_failed,
        s(:gvar, :$0))), nil))
