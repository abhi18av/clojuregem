s(:begin,
  s(:send, nil, :require,
    s(:str, "net/protocol")),
  s(:send, nil, :require,
    s(:str, "uri")),
  s(:module,
    s(:const, nil, :Net),
    s(:begin,
      s(:send, nil, :autoload,
        s(:sym, :OpenSSL),
        s(:str, "openssl")),
      s(:class,
        s(:const, nil, :HTTPBadResponse),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :HTTPHeaderSyntaxError),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :HTTP),
        s(:const, nil, :Protocol),
        s(:begin,
          s(:casgn, nil, :Revision,
            s(:send,
              s(:send,
                s(:str, "Revision"), :split), :[],
              s(:int, 1))),
          s(:casgn, nil, :HTTPVersion,
            s(:str, "1.1")),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "zlib")),
                s(:send, nil, :require,
                  s(:str, "stringio")),
                s(:casgn, nil, :HAVE_ZLIB,
                  s(:true))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:casgn, nil, :HAVE_ZLIB,
                  s(:false))), nil)),
          s(:defs,
            s(:const, nil, :HTTP), :version_1_2,
            s(:args),
            s(:true)),
          s(:defs,
            s(:const, nil, :HTTP), :version_1_2?,
            s(:args),
            s(:true)),
          s(:defs,
            s(:const, nil, :HTTP), :version_1_1?,
            s(:args),
            s(:false)),
          s(:sclass,
            s(:const, nil, :HTTP),
            s(:begin,
              s(:alias,
                s(:sym, :is_version_1_1?),
                s(:sym, :version_1_1?)),
              s(:alias,
                s(:sym, :is_version_1_2?),
                s(:sym, :version_1_2?)))),
          s(:defs,
            s(:const, nil, :HTTP), :get_print,
            s(:args,
              s(:arg, :uri_or_host),
              s(:optarg, :path,
                s(:nil)),
              s(:optarg, :port,
                s(:nil))),
            s(:begin,
              s(:block,
                s(:send, nil, :get_response,
                  s(:lvar, :uri_or_host),
                  s(:lvar, :path),
                  s(:lvar, :port)),
                s(:args,
                  s(:arg, :res)),
                s(:block,
                  s(:send,
                    s(:lvar, :res), :read_body),
                  s(:args,
                    s(:arg, :chunk)),
                  s(:send,
                    s(:gvar, :$stdout), :print,
                    s(:lvar, :chunk)))),
              s(:nil))),
          s(:defs,
            s(:const, nil, :HTTP), :get,
            s(:args,
              s(:arg, :uri_or_host),
              s(:optarg, :path,
                s(:nil)),
              s(:optarg, :port,
                s(:nil))),
            s(:send,
              s(:send, nil, :get_response,
                s(:lvar, :uri_or_host),
                s(:lvar, :path),
                s(:lvar, :port)), :body)),
          s(:defs,
            s(:const, nil, :HTTP), :get_response,
            s(:args,
              s(:arg, :uri_or_host),
              s(:optarg, :path,
                s(:nil)),
              s(:optarg, :port,
                s(:nil)),
              s(:blockarg, :block)),
            s(:if,
              s(:lvar, :path),
              s(:begin,
                s(:lvasgn, :host,
                  s(:lvar, :uri_or_host)),
                s(:block,
                  s(:send,
                    s(:send, nil, :new,
                      s(:lvar, :host),
                      s(:or,
                        s(:lvar, :port),
                        s(:send,
                          s(:const, nil, :HTTP), :default_port))), :start),
                  s(:args,
                    s(:arg, :http)),
                  s(:return,
                    s(:send,
                      s(:lvar, :http), :request_get,
                      s(:lvar, :path),
                      s(:block_pass,
                        s(:lvar, :block)))))),
              s(:begin,
                s(:lvasgn, :uri,
                  s(:lvar, :uri_or_host)),
                s(:block,
                  s(:send, nil, :start,
                    s(:send,
                      s(:lvar, :uri), :hostname),
                    s(:send,
                      s(:lvar, :uri), :port),
                    s(:hash,
                      s(:pair,
                        s(:sym, :use_ssl),
                        s(:send,
                          s(:send,
                            s(:lvar, :uri), :scheme), :==,
                          s(:str, "https"))))),
                  s(:args,
                    s(:arg, :http)),
                  s(:return,
                    s(:send,
                      s(:lvar, :http), :request_get,
                      s(:lvar, :uri),
                      s(:block_pass,
                        s(:lvar, :block)))))))),
          s(:defs,
            s(:const, nil, :HTTP), :post_form,
            s(:args,
              s(:arg, :url),
              s(:arg, :params)),
            s(:begin,
              s(:lvasgn, :req,
                s(:send,
                  s(:const, nil, :Post), :new,
                  s(:lvar, :url))),
              s(:send,
                s(:lvar, :req), :form_data=,
                s(:lvar, :params)),
              s(:if,
                s(:send,
                  s(:lvar, :url), :user),
                s(:send,
                  s(:lvar, :req), :basic_auth,
                  s(:send,
                    s(:lvar, :url), :user),
                  s(:send,
                    s(:lvar, :url), :password)), nil),
              s(:block,
                s(:send, nil, :start,
                  s(:send,
                    s(:lvar, :url), :hostname),
                  s(:send,
                    s(:lvar, :url), :port),
                  s(:hash,
                    s(:pair,
                      s(:sym, :use_ssl),
                      s(:send,
                        s(:send,
                          s(:lvar, :url), :scheme), :==,
                        s(:str, "https"))))),
                s(:args,
                  s(:arg, :http)),
                s(:send,
                  s(:lvar, :http), :request,
                  s(:lvar, :req))))),
          s(:defs,
            s(:const, nil, :HTTP), :default_port,
            s(:args),
            s(:send, nil, :http_default_port)),
          s(:defs,
            s(:const, nil, :HTTP), :http_default_port,
            s(:args),
            s(:int, 80)),
          s(:defs,
            s(:const, nil, :HTTP), :https_default_port,
            s(:args),
            s(:int, 443)),
          s(:defs,
            s(:const, nil, :HTTP), :socket_type,
            s(:args),
            s(:const, nil, :BufferedIO)),
          s(:defs,
            s(:const, nil, :HTTP), :start,
            s(:args,
              s(:arg, :address),
              s(:restarg, :arg),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:lvasgn, :opt,
                  s(:send,
                    s(:const, nil, :Hash), :try_convert,
                    s(:send,
                      s(:lvar, :arg), :[],
                      s(:int, -1)))),
                s(:send,
                  s(:lvar, :arg), :pop), nil),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :port),
                  s(:lvasgn, :p_addr),
                  s(:lvasgn, :p_port),
                  s(:lvasgn, :p_user),
                  s(:lvasgn, :p_pass)),
                s(:array,
                  s(:splat,
                    s(:lvar, :arg)))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :port), :!),
                    s(:lvar, :opt)),
                  s(:send,
                    s(:lvar, :opt), :[],
                    s(:sym, :use_ssl))),
                s(:lvasgn, :port,
                  s(:send, nil, :https_default_port)), nil),
              s(:lvasgn, :http,
                s(:send, nil, :new,
                  s(:lvar, :address),
                  s(:lvar, :port),
                  s(:lvar, :p_addr),
                  s(:lvar, :p_port),
                  s(:lvar, :p_user),
                  s(:lvar, :p_pass))),
              s(:if,
                s(:lvar, :opt),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :opt), :[],
                      s(:sym, :use_ssl)),
                    s(:lvasgn, :opt,
                      s(:send,
                        s(:hash,
                          s(:pair,
                            s(:sym, :verify_mode),
                            s(:const,
                              s(:const,
                                s(:const, nil, :OpenSSL), :SSL), :VERIFY_PEER))), :update,
                        s(:lvar, :opt))), nil),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :http), :methods), :grep,
                      s(:regexp,
                        s(:str, "\\A(\\w+)=\\z"),
                        s(:regopt))),
                    s(:args,
                      s(:arg, :meth)),
                    s(:begin,
                      s(:lvasgn, :key,
                        s(:send,
                          s(:nth_ref, 1), :to_sym)),
                      s(:or,
                        s(:send,
                          s(:lvar, :opt), :key?,
                          s(:lvar, :key)),
                        s(:next)),
                      s(:send,
                        s(:lvar, :http), :__send__,
                        s(:lvar, :meth),
                        s(:send,
                          s(:lvar, :opt), :[],
                          s(:lvar, :key)))))), nil),
              s(:send,
                s(:lvar, :http), :start,
                s(:block_pass,
                  s(:lvar, :block))))),
          s(:sclass,
            s(:const, nil, :HTTP),
            s(:alias,
              s(:sym, :newobj),
              s(:sym, :new))),
          s(:defs,
            s(:const, nil, :HTTP), :new,
            s(:args,
              s(:arg, :address),
              s(:optarg, :port,
                s(:nil)),
              s(:optarg, :p_addr,
                s(:sym, :ENV)),
              s(:optarg, :p_port,
                s(:nil)),
              s(:optarg, :p_user,
                s(:nil)),
              s(:optarg, :p_pass,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :http,
                s(:super,
                  s(:lvar, :address),
                  s(:lvar, :port))),
              s(:if,
                s(:send, nil, :proxy_class?),
                s(:begin,
                  s(:send,
                    s(:lvar, :http), :proxy_from_env=,
                    s(:ivar, :@proxy_from_env)),
                  s(:send,
                    s(:lvar, :http), :proxy_address=,
                    s(:ivar, :@proxy_address)),
                  s(:send,
                    s(:lvar, :http), :proxy_port=,
                    s(:ivar, :@proxy_port)),
                  s(:send,
                    s(:lvar, :http), :proxy_user=,
                    s(:ivar, :@proxy_user)),
                  s(:send,
                    s(:lvar, :http), :proxy_pass=,
                    s(:ivar, :@proxy_pass))),
                s(:if,
                  s(:send,
                    s(:lvar, :p_addr), :==,
                    s(:sym, :ENV)),
                  s(:send,
                    s(:lvar, :http), :proxy_from_env=,
                    s(:true)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :http), :proxy_address=,
                      s(:lvar, :p_addr)),
                    s(:send,
                      s(:lvar, :http), :proxy_port=,
                      s(:or,
                        s(:lvar, :p_port),
                        s(:send, nil, :default_port))),
                    s(:send,
                      s(:lvar, :http), :proxy_user=,
                      s(:lvar, :p_user)),
                    s(:send,
                      s(:lvar, :http), :proxy_pass=,
                      s(:lvar, :p_pass))))),
              s(:lvar, :http))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :address),
              s(:optarg, :port,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@address,
                s(:lvar, :address)),
              s(:ivasgn, :@port,
                s(:begin,
                  s(:or,
                    s(:lvar, :port),
                    s(:send,
                      s(:const, nil, :HTTP), :default_port)))),
              s(:ivasgn, :@local_host,
                s(:nil)),
              s(:ivasgn, :@local_port,
                s(:nil)),
              s(:ivasgn, :@curr_http_version,
                s(:const, nil, :HTTPVersion)),
              s(:ivasgn, :@keep_alive_timeout,
                s(:int, 2)),
              s(:ivasgn, :@last_communicated,
                s(:nil)),
              s(:ivasgn, :@close_on_empty_response,
                s(:false)),
              s(:ivasgn, :@socket,
                s(:nil)),
              s(:ivasgn, :@started,
                s(:false)),
              s(:ivasgn, :@open_timeout,
                s(:int, 60)),
              s(:ivasgn, :@read_timeout,
                s(:int, 60)),
              s(:ivasgn, :@continue_timeout,
                s(:nil)),
              s(:ivasgn, :@debug_output,
                s(:nil)),
              s(:ivasgn, :@proxy_from_env,
                s(:false)),
              s(:ivasgn, :@proxy_uri,
                s(:nil)),
              s(:ivasgn, :@proxy_address,
                s(:nil)),
              s(:ivasgn, :@proxy_port,
                s(:nil)),
              s(:ivasgn, :@proxy_user,
                s(:nil)),
              s(:ivasgn, :@proxy_pass,
                s(:nil)),
              s(:ivasgn, :@use_ssl,
                s(:false)),
              s(:ivasgn, :@ssl_context,
                s(:nil)),
              s(:ivasgn, :@ssl_session,
                s(:nil)),
              s(:ivasgn, :@sspi_enabled,
                s(:false)),
              s(:block,
                s(:send,
                  s(:const, nil, :SSL_IVNAMES), :each),
                s(:args,
                  s(:arg, :ivname)),
                s(:send, nil, :instance_variable_set,
                  s(:lvar, :ivname),
                  s(:nil))))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, " "),
              s(:begin,
                s(:ivar, :@address)),
              s(:str, ":"),
              s(:begin,
                s(:ivar, :@port)),
              s(:str, " open="),
              s(:begin,
                s(:send, nil, :started?)),
              s(:str, ">"))),
          s(:def, :set_debug_output,
            s(:args,
              s(:arg, :output)),
            s(:begin,
              s(:if,
                s(:send, nil, :started?),
                s(:send, nil, :warn,
                  s(:str, "Net::HTTP#set_debug_output called after HTTP started")), nil),
              s(:ivasgn, :@debug_output,
                s(:lvar, :output)))),
          s(:send, nil, :attr_reader,
            s(:sym, :address)),
          s(:send, nil, :attr_reader,
            s(:sym, :port)),
          s(:send, nil, :attr_accessor,
            s(:sym, :local_host)),
          s(:send, nil, :attr_accessor,
            s(:sym, :local_port)),
          s(:send, nil, :attr_writer,
            s(:sym, :proxy_from_env)),
          s(:send, nil, :attr_writer,
            s(:sym, :proxy_address)),
          s(:send, nil, :attr_writer,
            s(:sym, :proxy_port)),
          s(:send, nil, :attr_writer,
            s(:sym, :proxy_user)),
          s(:send, nil, :attr_writer,
            s(:sym, :proxy_pass)),
          s(:send, nil, :attr_accessor,
            s(:sym, :open_timeout)),
          s(:send, nil, :attr_reader,
            s(:sym, :read_timeout)),
          s(:def, :read_timeout=,
            s(:args,
              s(:arg, :sec)),
            s(:begin,
              s(:if,
                s(:ivar, :@socket),
                s(:send,
                  s(:ivar, :@socket), :read_timeout=,
                  s(:lvar, :sec)), nil),
              s(:ivasgn, :@read_timeout,
                s(:lvar, :sec)))),
          s(:send, nil, :attr_reader,
            s(:sym, :continue_timeout)),
          s(:def, :continue_timeout=,
            s(:args,
              s(:arg, :sec)),
            s(:begin,
              s(:if,
                s(:ivar, :@socket),
                s(:send,
                  s(:ivar, :@socket), :continue_timeout=,
                  s(:lvar, :sec)), nil),
              s(:ivasgn, :@continue_timeout,
                s(:lvar, :sec)))),
          s(:send, nil, :attr_accessor,
            s(:sym, :keep_alive_timeout)),
          s(:def, :started?,
            s(:args),
            s(:ivar, :@started)),
          s(:alias,
            s(:sym, :active?),
            s(:sym, :started?)),
          s(:send, nil, :attr_accessor,
            s(:sym, :close_on_empty_response)),
          s(:def, :use_ssl?,
            s(:args),
            s(:ivar, :@use_ssl)),
          s(:def, :use_ssl=,
            s(:args,
              s(:arg, :flag)),
            s(:begin,
              s(:lvasgn, :flag,
                s(:if,
                  s(:lvar, :flag),
                  s(:true),
                  s(:false))),
              s(:if,
                s(:and,
                  s(:send, nil, :started?),
                  s(:send,
                    s(:ivar, :@use_ssl), :!=,
                    s(:lvar, :flag))),
                s(:send, nil, :raise,
                  s(:const, nil, :IOError),
                  s(:str, "use_ssl value changed, but session already started")), nil),
              s(:ivasgn, :@use_ssl,
                s(:lvar, :flag)))),
          s(:casgn, nil, :SSL_IVNAMES,
            s(:array,
              s(:sym, :@ca_file),
              s(:sym, :@ca_path),
              s(:sym, :@cert),
              s(:sym, :@cert_store),
              s(:sym, :@ciphers),
              s(:sym, :@key),
              s(:sym, :@ssl_timeout),
              s(:sym, :@ssl_version),
              s(:sym, :@verify_callback),
              s(:sym, :@verify_depth),
              s(:sym, :@verify_mode))),
          s(:casgn, nil, :SSL_ATTRIBUTES,
            s(:array,
              s(:sym, :ca_file),
              s(:sym, :ca_path),
              s(:sym, :cert),
              s(:sym, :cert_store),
              s(:sym, :ciphers),
              s(:sym, :key),
              s(:sym, :ssl_timeout),
              s(:sym, :ssl_version),
              s(:sym, :verify_callback),
              s(:sym, :verify_depth),
              s(:sym, :verify_mode))),
          s(:send, nil, :attr_accessor,
            s(:sym, :ca_file)),
          s(:send, nil, :attr_accessor,
            s(:sym, :ca_path)),
          s(:send, nil, :attr_accessor,
            s(:sym, :cert)),
          s(:send, nil, :attr_accessor,
            s(:sym, :cert_store)),
          s(:send, nil, :attr_accessor,
            s(:sym, :ciphers)),
          s(:send, nil, :attr_accessor,
            s(:sym, :key)),
          s(:send, nil, :attr_accessor,
            s(:sym, :ssl_timeout)),
          s(:send, nil, :attr_accessor,
            s(:sym, :ssl_version)),
          s(:send, nil, :attr_accessor,
            s(:sym, :verify_callback)),
          s(:send, nil, :attr_accessor,
            s(:sym, :verify_depth)),
          s(:send, nil, :attr_accessor,
            s(:sym, :verify_mode)),
          s(:def, :peer_cert,
            s(:args),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send,
                    s(:send, nil, :use_ssl?), :!),
                  s(:send,
                    s(:ivar, :@socket), :!)),
                s(:return,
                  s(:nil)), nil),
              s(:send,
                s(:send,
                  s(:ivar, :@socket), :io), :peer_cert))),
          s(:def, :start,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@started),
                s(:send, nil, :raise,
                  s(:const, nil, :IOError),
                  s(:str, "HTTP session already opened")), nil),
              s(:if,
                s(:send, nil, :block_given?),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send, nil, :do_start),
                      s(:return,
                        s(:yield,
                          s(:self)))),
                    s(:send, nil, :do_finish))), nil),
              s(:send, nil, :do_start),
              s(:self))),
          s(:def, :do_start,
            s(:args),
            s(:begin,
              s(:send, nil, :connect),
              s(:ivasgn, :@started,
                s(:true)))),
          s(:send, nil, :private,
            s(:sym, :do_start)),
          s(:def, :connect,
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :proxy?),
                s(:begin,
                  s(:lvasgn, :conn_address,
                    s(:send, nil, :proxy_address)),
                  s(:lvasgn, :conn_port,
                    s(:send, nil, :proxy_port))),
                s(:begin,
                  s(:lvasgn, :conn_address,
                    s(:send, nil, :address)),
                  s(:lvasgn, :conn_port,
                    s(:send, nil, :port)))),
              s(:send, nil, :D,
                s(:dstr,
                  s(:str, "opening connection to "),
                  s(:begin,
                    s(:lvar, :conn_address)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :conn_port)),
                  s(:str, "..."))),
              s(:lvasgn, :s,
                s(:block,
                  s(:send,
                    s(:const, nil, :Timeout), :timeout,
                    s(:ivar, :@open_timeout),
                    s(:const,
                      s(:const, nil, :Net), :OpenTimeout)),
                  s(:args),
                  s(:kwbegin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :TCPSocket), :open,
                        s(:lvar, :conn_address),
                        s(:lvar, :conn_port),
                        s(:ivar, :@local_host),
                        s(:ivar, :@local_port)),
                      s(:resbody, nil,
                        s(:lvasgn, :e),
                        s(:send, nil, :raise,
                          s(:lvar, :e),
                          s(:send,
                            s(:str, "Failed to open TCP connection to "), :+,
                            s(:dstr,
                              s(:begin,
                                s(:lvar, :conn_address)),
                              s(:str, ":"),
                              s(:begin,
                                s(:lvar, :conn_port)),
                              s(:str, " ("),
                              s(:begin,
                                s(:send,
                                  s(:lvar, :e), :message)),
                              s(:str, ")"))))), nil)))),
              s(:send,
                s(:lvar, :s), :setsockopt,
                s(:const,
                  s(:const, nil, :Socket), :IPPROTO_TCP),
                s(:const,
                  s(:const, nil, :Socket), :TCP_NODELAY),
                s(:int, 1)),
              s(:send, nil, :D,
                s(:str, "opened")),
              s(:if,
                s(:send, nil, :use_ssl?),
                s(:begin,
                  s(:lvasgn, :ssl_parameters,
                    s(:send,
                      s(:const, nil, :Hash), :new)),
                  s(:lvasgn, :iv_list,
                    s(:send, nil, :instance_variables)),
                  s(:block,
                    s(:send,
                      s(:const, nil, :SSL_IVNAMES), :each_with_index),
                    s(:args,
                      s(:arg, :ivname),
                      s(:arg, :i)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :iv_list), :include?,
                          s(:lvar, :ivname)),
                        s(:lvasgn, :value,
                          s(:send, nil, :instance_variable_get,
                            s(:lvar, :ivname)))),
                      s(:if,
                        s(:lvar, :value),
                        s(:send,
                          s(:lvar, :ssl_parameters), :[]=,
                          s(:send,
                            s(:const, nil, :SSL_ATTRIBUTES), :[],
                            s(:lvar, :i)),
                          s(:lvar, :value)), nil), nil)),
                  s(:ivasgn, :@ssl_context,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
                  s(:send,
                    s(:ivar, :@ssl_context), :set_params,
                    s(:lvar, :ssl_parameters)),
                  s(:send, nil, :D,
                    s(:dstr,
                      s(:str, "starting SSL for "),
                      s(:begin,
                        s(:lvar, :conn_address)),
                      s(:str, ":"),
                      s(:begin,
                        s(:lvar, :conn_port)),
                      s(:str, "..."))),
                  s(:lvasgn, :s,
                    s(:send,
                      s(:const,
                        s(:const,
                          s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
                      s(:lvar, :s),
                      s(:ivar, :@ssl_context))),
                  s(:send,
                    s(:lvar, :s), :sync_close=,
                    s(:true)),
                  s(:send, nil, :D,
                    s(:str, "SSL established"))), nil),
              s(:ivasgn, :@socket,
                s(:send,
                  s(:const, nil, :BufferedIO), :new,
                  s(:lvar, :s))),
              s(:send,
                s(:ivar, :@socket), :read_timeout=,
                s(:ivar, :@read_timeout)),
              s(:send,
                s(:ivar, :@socket), :continue_timeout=,
                s(:ivar, :@continue_timeout)),
              s(:send,
                s(:ivar, :@socket), :debug_output=,
                s(:ivar, :@debug_output)),
              s(:if,
                s(:send, nil, :use_ssl?),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:if,
                        s(:send, nil, :proxy?),
                        s(:begin,
                          s(:lvasgn, :buf,
                            s(:dstr,
                              s(:str, "CONNECT "),
                              s(:begin,
                                s(:ivar, :@address)),
                              s(:str, ":"),
                              s(:begin,
                                s(:ivar, :@port)),
                              s(:str, " HTTP/"),
                              s(:begin,
                                s(:const, nil, :HTTPVersion)),
                              s(:str, "\r\n"))),
                          s(:send,
                            s(:lvar, :buf), :<<,
                            s(:dstr,
                              s(:str, "Host: "),
                              s(:begin,
                                s(:ivar, :@address)),
                              s(:str, ":"),
                              s(:begin,
                                s(:ivar, :@port)),
                              s(:str, "\r\n"))),
                          s(:if,
                            s(:send, nil, :proxy_user),
                            s(:begin,
                              s(:lvasgn, :credential,
                                s(:send,
                                  s(:array,
                                    s(:dstr,
                                      s(:begin,
                                        s(:send, nil, :proxy_user)),
                                      s(:str, ":"),
                                      s(:begin,
                                        s(:send, nil, :proxy_pass)))), :pack,
                                  s(:str, "m"))),
                              s(:send,
                                s(:lvar, :credential), :delete!,
                                s(:str, "\r\n")),
                              s(:send,
                                s(:lvar, :buf), :<<,
                                s(:dstr,
                                  s(:str, "Proxy-Authorization: Basic "),
                                  s(:begin,
                                    s(:lvar, :credential)),
                                  s(:str, "\r\n")))), nil),
                          s(:send,
                            s(:lvar, :buf), :<<,
                            s(:str, "\r\n")),
                          s(:send,
                            s(:ivar, :@socket), :write,
                            s(:lvar, :buf)),
                          s(:send,
                            s(:send,
                              s(:const, nil, :HTTPResponse), :read_new,
                              s(:ivar, :@socket)), :value)), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :s), :respond_to?,
                          s(:sym, :hostname=)),
                        s(:send,
                          s(:lvar, :s), :hostname=,
                          s(:ivar, :@address)), nil),
                      s(:if,
                        s(:and,
                          s(:ivar, :@ssl_session),
                          s(:send,
                            s(:send,
                              s(:const, nil, :Process), :clock_gettime,
                              s(:const,
                                s(:const, nil, :Process), :CLOCK_REALTIME)), :<,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:ivar, :@ssl_session), :time), :to_f), :+,
                              s(:send,
                                s(:ivar, :@ssl_session), :timeout)))),
                        s(:if,
                          s(:ivar, :@ssl_session),
                          s(:send,
                            s(:lvar, :s), :session=,
                            s(:ivar, :@ssl_session)), nil), nil),
                      s(:if,
                        s(:lvasgn, :timeout,
                          s(:ivar, :@open_timeout)),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :timeout), :<=,
                                s(:int, 0)),
                              s(:send, nil, :raise,
                                s(:const,
                                  s(:const, nil, :Net), :OpenTimeout)), nil),
                            s(:lvasgn, :start,
                              s(:send,
                                s(:const, nil, :Process), :clock_gettime,
                                s(:const,
                                  s(:const, nil, :Process), :CLOCK_MONOTONIC))),
                            s(:case,
                              s(:send,
                                s(:lvar, :s), :connect_nonblock,
                                s(:hash,
                                  s(:pair,
                                    s(:sym, :exception),
                                    s(:false)))),
                              s(:when,
                                s(:sym, :wait_readable),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :s), :to_io), :wait_readable,
                                  s(:lvar, :timeout))),
                              s(:when,
                                s(:sym, :wait_writable),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :s), :to_io), :wait_writable,
                                  s(:lvar, :timeout))),
                              s(:break)),
                            s(:op_asgn,
                              s(:lvasgn, :timeout), :-,
                              s(:send,
                                s(:send,
                                  s(:const, nil, :Process), :clock_gettime,
                                  s(:const,
                                    s(:const, nil, :Process), :CLOCK_MONOTONIC)), :-,
                                s(:lvar, :start))))),
                        s(:send,
                          s(:lvar, :s), :connect)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:ivar, :@ssl_context), :verify_mode), :!=,
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE)),
                        s(:send,
                          s(:lvar, :s), :post_connection_check,
                          s(:ivar, :@address)), nil),
                      s(:ivasgn, :@ssl_session,
                        s(:send,
                          s(:lvar, :s), :session))),
                    s(:resbody, nil,
                      s(:lvasgn, :exception),
                      s(:begin,
                        s(:send, nil, :D,
                          s(:dstr,
                            s(:str, "Conn close because of connect error "),
                            s(:begin,
                              s(:lvar, :exception)))),
                        s(:if,
                          s(:and,
                            s(:ivar, :@socket),
                            s(:send,
                              s(:send,
                                s(:ivar, :@socket), :closed?), :!)),
                          s(:send,
                            s(:ivar, :@socket), :close), nil),
                        s(:send, nil, :raise,
                          s(:lvar, :exception)))), nil)), nil),
              s(:send, nil, :on_connect))),
          s(:send, nil, :private,
            s(:sym, :connect)),
          s(:def, :on_connect,
            s(:args), nil),
          s(:send, nil, :private,
            s(:sym, :on_connect)),
          s(:def, :finish,
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :started?), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :IOError),
                  s(:str, "HTTP session not yet started"))),
              s(:send, nil, :do_finish))),
          s(:def, :do_finish,
            s(:args),
            s(:begin,
              s(:ivasgn, :@started,
                s(:false)),
              s(:if,
                s(:and,
                  s(:ivar, :@socket),
                  s(:send,
                    s(:send,
                      s(:ivar, :@socket), :closed?), :!)),
                s(:send,
                  s(:ivar, :@socket), :close), nil),
              s(:ivasgn, :@socket,
                s(:nil)))),
          s(:send, nil, :private,
            s(:sym, :do_finish)),
          s(:send, nil, :public),
          s(:ivasgn, :@is_proxy_class,
            s(:false)),
          s(:ivasgn, :@proxy_from_env,
            s(:false)),
          s(:ivasgn, :@proxy_addr,
            s(:nil)),
          s(:ivasgn, :@proxy_port,
            s(:nil)),
          s(:ivasgn, :@proxy_user,
            s(:nil)),
          s(:ivasgn, :@proxy_pass,
            s(:nil)),
          s(:defs,
            s(:const, nil, :HTTP), :Proxy,
            s(:args,
              s(:optarg, :p_addr,
                s(:sym, :ENV)),
              s(:optarg, :p_port,
                s(:nil)),
              s(:optarg, :p_user,
                s(:nil)),
              s(:optarg, :p_pass,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :p_addr), nil,
                s(:return,
                  s(:self))),
              s(:block,
                s(:send,
                  s(:const, nil, :Class), :new,
                  s(:self)),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@is_proxy_class,
                    s(:true)),
                  s(:if,
                    s(:send,
                      s(:lvar, :p_addr), :==,
                      s(:sym, :ENV)),
                    s(:begin,
                      s(:ivasgn, :@proxy_from_env,
                        s(:true)),
                      s(:ivasgn, :@proxy_address,
                        s(:nil)),
                      s(:ivasgn, :@proxy_port,
                        s(:nil))),
                    s(:begin,
                      s(:ivasgn, :@proxy_from_env,
                        s(:false)),
                      s(:ivasgn, :@proxy_address,
                        s(:lvar, :p_addr)),
                      s(:ivasgn, :@proxy_port,
                        s(:or,
                          s(:lvar, :p_port),
                          s(:send, nil, :default_port))))),
                  s(:ivasgn, :@proxy_user,
                    s(:lvar, :p_user)),
                  s(:ivasgn, :@proxy_pass,
                    s(:lvar, :p_pass)))))),
          s(:sclass,
            s(:const, nil, :HTTP),
            s(:begin,
              s(:def, :proxy_class?,
                s(:args),
                s(:if,
                  s(:defined?,
                    s(:ivar, :@is_proxy_class)),
                  s(:ivar, :@is_proxy_class),
                  s(:false))),
              s(:send, nil, :attr_reader,
                s(:sym, :proxy_address)),
              s(:send, nil, :attr_reader,
                s(:sym, :proxy_port)),
              s(:send, nil, :attr_reader,
                s(:sym, :proxy_user)),
              s(:send, nil, :attr_reader,
                s(:sym, :proxy_pass)))),
          s(:def, :proxy?,
            s(:args),
            s(:send,
              s(:send,
                s(:if,
                  s(:ivar, :@proxy_from_env),
                  s(:send, nil, :proxy_uri),
                  s(:ivar, :@proxy_address)), :!), :!)),
          s(:def, :proxy_from_env?,
            s(:args),
            s(:ivar, :@proxy_from_env)),
          s(:def, :proxy_uri,
            s(:args),
            s(:or_asgn,
              s(:ivasgn, :@proxy_uri),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :URI), :HTTP), :new,
                  s(:send,
                    s(:str, "http"), :freeze),
                  s(:nil),
                  s(:send, nil, :address),
                  s(:send, nil, :port),
                  s(:nil),
                  s(:nil),
                  s(:nil),
                  s(:nil),
                  s(:nil)), :find_proxy))),
          s(:def, :proxy_address,
            s(:args),
            s(:if,
              s(:ivar, :@proxy_from_env),
              s(:csend,
                s(:send, nil, :proxy_uri), :hostname),
              s(:ivar, :@proxy_address))),
          s(:def, :proxy_port,
            s(:args),
            s(:if,
              s(:ivar, :@proxy_from_env),
              s(:csend,
                s(:send, nil, :proxy_uri), :port),
              s(:ivar, :@proxy_port))),
          s(:def, :proxy_user,
            s(:args),
            s(:ivar, :@proxy_user)),
          s(:def, :proxy_pass,
            s(:args),
            s(:ivar, :@proxy_pass)),
          s(:alias,
            s(:sym, :proxyaddr),
            s(:sym, :proxy_address)),
          s(:alias,
            s(:sym, :proxyport),
            s(:sym, :proxy_port)),
          s(:send, nil, :private),
          s(:def, :conn_address,
            s(:args),
            s(:send, nil, :address)),
          s(:def, :conn_port,
            s(:args),
            s(:send, nil, :port)),
          s(:def, :edit_path,
            s(:args,
              s(:arg, :path)),
            s(:if,
              s(:send, nil, :proxy?),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :path), :start_with?,
                    s(:str, "ftp://")),
                  s(:send, nil, :use_ssl?)),
                s(:lvar, :path),
                s(:dstr,
                  s(:str, "http://"),
                  s(:begin,
                    s(:send, nil, :addr_port)),
                  s(:begin,
                    s(:lvar, :path)))),
              s(:lvar, :path))),
          s(:send, nil, :public),
          s(:def, :get,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil)),
              s(:optarg, :dest,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :res,
                s(:nil)),
              s(:block,
                s(:send, nil, :request,
                  s(:send,
                    s(:const, nil, :Get), :new,
                    s(:lvar, :path),
                    s(:lvar, :initheader))),
                s(:args,
                  s(:arg, :r)),
                s(:begin,
                  s(:send,
                    s(:lvar, :r), :read_body,
                    s(:lvar, :dest),
                    s(:block_pass,
                      s(:lvar, :block))),
                  s(:lvasgn, :res,
                    s(:lvar, :r)))),
              s(:lvar, :res))),
          s(:def, :head,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Head), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)))),
          s(:def, :post,
            s(:args,
              s(:arg, :path),
              s(:arg, :data),
              s(:optarg, :initheader,
                s(:nil)),
              s(:optarg, :dest,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :send_entity,
              s(:lvar, :path),
              s(:lvar, :data),
              s(:lvar, :initheader),
              s(:lvar, :dest),
              s(:const, nil, :Post),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :patch,
            s(:args,
              s(:arg, :path),
              s(:arg, :data),
              s(:optarg, :initheader,
                s(:nil)),
              s(:optarg, :dest,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :send_entity,
              s(:lvar, :path),
              s(:lvar, :data),
              s(:lvar, :initheader),
              s(:lvar, :dest),
              s(:const, nil, :Patch),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :put,
            s(:args,
              s(:arg, :path),
              s(:arg, :data),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Put), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :data))),
          s(:def, :proppatch,
            s(:args,
              s(:arg, :path),
              s(:arg, :body),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Proppatch), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :body))),
          s(:def, :lock,
            s(:args,
              s(:arg, :path),
              s(:arg, :body),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Lock), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :body))),
          s(:def, :unlock,
            s(:args,
              s(:arg, :path),
              s(:arg, :body),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Unlock), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :body))),
          s(:def, :options,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Options), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)))),
          s(:def, :propfind,
            s(:args,
              s(:arg, :path),
              s(:optarg, :body,
                s(:nil)),
              s(:optarg, :initheader,
                s(:hash,
                  s(:pair,
                    s(:str, "Depth"),
                    s(:str, "0"))))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Propfind), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :body))),
          s(:def, :delete,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:hash,
                  s(:pair,
                    s(:str, "Depth"),
                    s(:str, "Infinity"))))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Delete), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)))),
          s(:def, :move,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Move), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)))),
          s(:def, :copy,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Copy), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)))),
          s(:def, :mkcol,
            s(:args,
              s(:arg, :path),
              s(:optarg, :body,
                s(:nil)),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Mkcol), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :body))),
          s(:def, :trace,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil))),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Trace), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)))),
          s(:def, :request_get,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Get), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :request_head,
            s(:args,
              s(:arg, :path),
              s(:optarg, :initheader,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Head), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :request_post,
            s(:args,
              s(:arg, :path),
              s(:arg, :data),
              s(:optarg, :initheader,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Post), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :data),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :request_put,
            s(:args,
              s(:arg, :path),
              s(:arg, :data),
              s(:optarg, :initheader,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :request,
              s(:send,
                s(:const, nil, :Put), :new,
                s(:lvar, :path),
                s(:lvar, :initheader)),
              s(:lvar, :data),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:alias,
            s(:sym, :get2),
            s(:sym, :request_get)),
          s(:alias,
            s(:sym, :head2),
            s(:sym, :request_head)),
          s(:alias,
            s(:sym, :post2),
            s(:sym, :request_post)),
          s(:alias,
            s(:sym, :put2),
            s(:sym, :request_put)),
          s(:def, :send_request,
            s(:args,
              s(:arg, :name),
              s(:arg, :path),
              s(:optarg, :data,
                s(:nil)),
              s(:optarg, :header,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :has_response_body,
                s(:send,
                  s(:lvar, :name), :!=,
                  s(:str, "HEAD"))),
              s(:lvasgn, :r,
                s(:send,
                  s(:const, nil, :HTTPGenericRequest), :new,
                  s(:lvar, :name),
                  s(:begin,
                    s(:if,
                      s(:lvar, :data),
                      s(:true),
                      s(:false))),
                  s(:lvar, :has_response_body),
                  s(:lvar, :path),
                  s(:lvar, :header))),
              s(:send, nil, :request,
                s(:lvar, :r),
                s(:lvar, :data)))),
          s(:def, :request,
            s(:args,
              s(:arg, :req),
              s(:optarg, :body,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:send, nil, :started?), nil,
                s(:block,
                  s(:send, nil, :start),
                  s(:args),
                  s(:begin,
                    s(:or_asgn,
                      s(:send,
                        s(:lvar, :req), :[],
                        s(:str, "connection")),
                      s(:str, "close")),
                    s(:return,
                      s(:send, nil, :request,
                        s(:lvar, :req),
                        s(:lvar, :body),
                        s(:block_pass,
                          s(:lvar, :block))))))),
              s(:if,
                s(:send, nil, :proxy_user),
                s(:if,
                  s(:send, nil, :use_ssl?), nil,
                  s(:send,
                    s(:lvar, :req), :proxy_basic_auth,
                    s(:send, nil, :proxy_user),
                    s(:send, nil, :proxy_pass))), nil),
              s(:send,
                s(:lvar, :req), :set_body_internal,
                s(:lvar, :body)),
              s(:lvasgn, :res,
                s(:send, nil, :transport_request,
                  s(:lvar, :req),
                  s(:block_pass,
                    s(:lvar, :block)))),
              s(:if,
                s(:send, nil, :sspi_auth?,
                  s(:lvar, :res)),
                s(:begin,
                  s(:send, nil, :sspi_auth,
                    s(:lvar, :req)),
                  s(:lvasgn, :res,
                    s(:send, nil, :transport_request,
                      s(:lvar, :req),
                      s(:block_pass,
                        s(:lvar, :block))))), nil),
              s(:lvar, :res))),
          s(:send, nil, :private),
          s(:def, :send_entity,
            s(:args,
              s(:arg, :path),
              s(:arg, :data),
              s(:arg, :initheader),
              s(:arg, :dest),
              s(:arg, :type),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :res,
                s(:nil)),
              s(:block,
                s(:send, nil, :request,
                  s(:send,
                    s(:lvar, :type), :new,
                    s(:lvar, :path),
                    s(:lvar, :initheader)),
                  s(:lvar, :data)),
                s(:args,
                  s(:arg, :r)),
                s(:begin,
                  s(:send,
                    s(:lvar, :r), :read_body,
                    s(:lvar, :dest),
                    s(:block_pass,
                      s(:lvar, :block))),
                  s(:lvasgn, :res,
                    s(:lvar, :r)))),
              s(:lvar, :res))),
          s(:casgn, nil, :IDEMPOTENT_METHODS_,
            s(:array,
              s(:str, "GET"),
              s(:str, "HEAD"),
              s(:str, "PUT"),
              s(:str, "DELETE"),
              s(:str, "OPTIONS"),
              s(:str, "TRACE"))),
          s(:def, :transport_request,
            s(:args,
              s(:arg, :req)),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :count,
                  s(:int, 0)),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :begin_transport,
                        s(:lvar, :req)),
                      s(:lvasgn, :res,
                        s(:block,
                          s(:send, nil, :catch,
                            s(:sym, :response)),
                          s(:args),
                          s(:begin,
                            s(:send,
                              s(:lvar, :req), :exec,
                              s(:ivar, :@socket),
                              s(:ivar, :@curr_http_version),
                              s(:send, nil, :edit_path,
                                s(:send,
                                  s(:lvar, :req), :path))),
                            s(:while_post,
                              s(:send,
                                s(:lvar, :res), :kind_of?,
                                s(:const, nil, :HTTPInformation)),
                              s(:kwbegin,
                                s(:lvasgn, :res,
                                  s(:send,
                                    s(:const, nil, :HTTPResponse), :read_new,
                                    s(:ivar, :@socket))),
                                s(:send,
                                  s(:lvar, :res), :decode_content=,
                                  s(:send,
                                    s(:lvar, :req), :decode_content)))),
                            s(:send,
                              s(:lvar, :res), :uri=,
                              s(:send,
                                s(:lvar, :req), :uri)),
                            s(:lvar, :res)))),
                      s(:block,
                        s(:send,
                          s(:lvar, :res), :reading_body,
                          s(:ivar, :@socket),
                          s(:send,
                            s(:lvar, :req), :response_body_permitted?)),
                        s(:args),
                        s(:if,
                          s(:send, nil, :block_given?),
                          s(:yield,
                            s(:lvar, :res)), nil))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Net), :OpenTimeout)), nil,
                      s(:send, nil, :raise)),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Net), :ReadTimeout),
                        s(:const, nil, :IOError),
                        s(:const, nil, :EOFError),
                        s(:const,
                          s(:const, nil, :Errno), :ECONNRESET),
                        s(:const,
                          s(:const, nil, :Errno), :ECONNABORTED),
                        s(:const,
                          s(:const, nil, :Errno), :EPIPE),
                        s(:if,
                          s(:defined?,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL)),
                          s(:const,
                            s(:const,
                              s(:const, nil, :OpenSSL), :SSL), :SSLError),
                          s(:const, nil, :IOError)),
                        s(:const,
                          s(:const, nil, :Timeout), :Error)),
                      s(:lvasgn, :exception),
                      s(:begin,
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:lvar, :count), :==,
                              s(:int, 0)),
                            s(:send,
                              s(:const, nil, :IDEMPOTENT_METHODS_), :include?,
                              s(:send,
                                s(:lvar, :req), :method))),
                          s(:begin,
                            s(:op_asgn,
                              s(:lvasgn, :count), :+,
                              s(:int, 1)),
                            s(:if,
                              s(:and,
                                s(:ivar, :@socket),
                                s(:send,
                                  s(:send,
                                    s(:ivar, :@socket), :closed?), :!)),
                              s(:send,
                                s(:ivar, :@socket), :close), nil),
                            s(:send, nil, :D,
                              s(:dstr,
                                s(:str, "Conn close because of error "),
                                s(:begin,
                                  s(:lvar, :exception)),
                                s(:str, ", and retry"))),
                            s(:retry)), nil),
                        s(:send, nil, :D,
                          s(:dstr,
                            s(:str, "Conn close because of error "),
                            s(:begin,
                              s(:lvar, :exception)))),
                        s(:if,
                          s(:and,
                            s(:ivar, :@socket),
                            s(:send,
                              s(:send,
                                s(:ivar, :@socket), :closed?), :!)),
                          s(:send,
                            s(:ivar, :@socket), :close), nil),
                        s(:send, nil, :raise))), nil)),
                s(:send, nil, :end_transport,
                  s(:lvar, :req),
                  s(:lvar, :res)),
                s(:lvar, :res)),
              s(:resbody, nil,
                s(:lvasgn, :exception),
                s(:begin,
                  s(:send, nil, :D,
                    s(:dstr,
                      s(:str, "Conn close because of error "),
                      s(:begin,
                        s(:lvar, :exception)))),
                  s(:if,
                    s(:and,
                      s(:ivar, :@socket),
                      s(:send,
                        s(:send,
                          s(:ivar, :@socket), :closed?), :!)),
                    s(:send,
                      s(:ivar, :@socket), :close), nil),
                  s(:send, nil, :raise,
                    s(:lvar, :exception)))), nil)),
          s(:def, :begin_transport,
            s(:args,
              s(:arg, :req)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@socket), :closed?),
                s(:send, nil, :connect),
                s(:if,
                  s(:ivar, :@last_communicated),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@last_communicated), :+,
                        s(:ivar, :@keep_alive_timeout)), :<,
                      s(:send,
                        s(:const, nil, :Process), :clock_gettime,
                        s(:const,
                          s(:const, nil, :Process), :CLOCK_MONOTONIC))),
                    s(:begin,
                      s(:send, nil, :D,
                        s(:str, "Conn close because of keep_alive_timeout")),
                      s(:send,
                        s(:ivar, :@socket), :close),
                      s(:send, nil, :connect)),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:ivar, :@socket), :io), :to_io), :wait_readable,
                          s(:int, 0)),
                        s(:send,
                          s(:ivar, :@socket), :eof?)),
                      s(:begin,
                        s(:send, nil, :D,
                          s(:str, "Conn close because of EOF")),
                        s(:send,
                          s(:ivar, :@socket), :close),
                        s(:send, nil, :connect)), nil)), nil)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:send,
                      s(:lvar, :req), :response_body_permitted?), :!),
                  s(:ivar, :@close_on_empty_response)),
                s(:or_asgn,
                  s(:send,
                    s(:lvar, :req), :[],
                    s(:str, "connection")),
                  s(:str, "close")), nil),
              s(:send,
                s(:lvar, :req), :update_uri,
                s(:send, nil, :address),
                s(:send, nil, :port),
                s(:send, nil, :use_ssl?)),
              s(:or_asgn,
                s(:send,
                  s(:lvar, :req), :[],
                  s(:str, "host")),
                s(:send, nil, :addr_port)))),
          s(:def, :end_transport,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:ivasgn, :@curr_http_version,
                s(:send,
                  s(:lvar, :res), :http_version)),
              s(:ivasgn, :@last_communicated,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:ivar, :@socket), :closed?),
                s(:send, nil, :D,
                  s(:str, "Conn socket closed")),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :res), :body), :!),
                    s(:ivar, :@close_on_empty_response)),
                  s(:begin,
                    s(:send, nil, :D,
                      s(:str, "Conn close")),
                    s(:send,
                      s(:ivar, :@socket), :close)),
                  s(:if,
                    s(:send, nil, :keep_alive?,
                      s(:lvar, :req),
                      s(:lvar, :res)),
                    s(:begin,
                      s(:send, nil, :D,
                        s(:str, "Conn keep-alive")),
                      s(:ivasgn, :@last_communicated,
                        s(:send,
                          s(:const, nil, :Process), :clock_gettime,
                          s(:const,
                            s(:const, nil, :Process), :CLOCK_MONOTONIC)))),
                    s(:begin,
                      s(:send, nil, :D,
                        s(:str, "Conn close")),
                      s(:send,
                        s(:ivar, :@socket), :close))))))),
          s(:def, :keep_alive?,
            s(:args,
              s(:arg, :req),
              s(:arg, :res)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :req), :connection_close?),
                s(:return,
                  s(:false)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@curr_http_version), :<=,
                  s(:str, "1.0")),
                s(:send,
                  s(:lvar, :res), :connection_keep_alive?),
                s(:send,
                  s(:send,
                    s(:lvar, :res), :connection_close?), :!)))),
          s(:def, :sspi_auth?,
            s(:args,
              s(:arg, :res)),
            s(:begin,
              s(:if,
                s(:ivar, :@sspi_enabled), nil,
                s(:return,
                  s(:false))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :res), :kind_of?,
                      s(:const, nil, :HTTPProxyAuthenticationRequired)),
                    s(:send, nil, :proxy?)),
                  s(:send,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "Proxy-Authenticate")), :include?,
                    s(:str, "Negotiate"))),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :require,
                        s(:str, "win32/sspi")),
                      s(:true)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :LoadError)), nil,
                      s(:false)), nil)),
                s(:false)))),
          s(:def, :sspi_auth,
            s(:args,
              s(:arg, :req)),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :n,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const, nil, :Win32), :SSPI), :NegotiateAuth), :new)),
                s(:send,
                  s(:lvar, :req), :[]=,
                  s(:str, "Proxy-Authorization"),
                  s(:dstr,
                    s(:str, "Negotiate "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :n), :get_initial_token)))),
                s(:send,
                  s(:lvar, :req), :[]=,
                  s(:str, "Connection"),
                  s(:str, "Keep-Alive")),
                s(:send,
                  s(:lvar, :req), :[]=,
                  s(:str, "Proxy-Connection"),
                  s(:str, "Keep-Alive")),
                s(:lvasgn, :res,
                  s(:send, nil, :transport_request,
                    s(:lvar, :req))),
                s(:or,
                  s(:lvasgn, :authphrase,
                    s(:send,
                      s(:lvar, :res), :[],
                      s(:str, "Proxy-Authenticate"))),
                  s(:return,
                    s(:lvar, :res))),
                s(:send,
                  s(:lvar, :req), :[]=,
                  s(:str, "Proxy-Authorization"),
                  s(:dstr,
                    s(:str, "Negotiate "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :n), :complete_authentication,
                        s(:lvar, :authphrase)))))),
              s(:resbody, nil,
                s(:lvasgn, :err),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :HTTPAuthenticationError), :new,
                    s(:str, "HTTP authentication failed"),
                    s(:lvar, :err)))), nil)),
          s(:send, nil, :private),
          s(:def, :addr_port,
            s(:args),
            s(:if,
              s(:send, nil, :use_ssl?),
              s(:send,
                s(:send, nil, :address), :+,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :port), :==,
                      s(:send,
                        s(:const, nil, :HTTP), :https_default_port)),
                    s(:str, ""),
                    s(:dstr,
                      s(:str, ":"),
                      s(:begin,
                        s(:send, nil, :port)))))),
              s(:send,
                s(:send, nil, :address), :+,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send, nil, :port), :==,
                      s(:send,
                        s(:const, nil, :HTTP), :http_default_port)),
                    s(:str, ""),
                    s(:dstr,
                      s(:str, ":"),
                      s(:begin,
                        s(:send, nil, :port)))))))),
          s(:def, :D,
            s(:args,
              s(:arg, :msg)),
            s(:begin,
              s(:if,
                s(:ivar, :@debug_output), nil,
                s(:return)),
              s(:send,
                s(:ivar, :@debug_output), :<<,
                s(:lvar, :msg)),
              s(:send,
                s(:ivar, :@debug_output), :<<,
                s(:str, "\n")))))))),
  s(:send, nil, :require,
    s(:str, "net/http/exceptions")),
  s(:send, nil, :require,
    s(:str, "net/http/header")),
  s(:send, nil, :require,
    s(:str, "net/http/generic_request")),
  s(:send, nil, :require,
    s(:str, "net/http/request")),
  s(:send, nil, :require,
    s(:str, "net/http/requests")),
  s(:send, nil, :require,
    s(:str, "net/http/response")),
  s(:send, nil, :require,
    s(:str, "net/http/responses")),
  s(:send, nil, :require,
    s(:str, "net/http/proxy_delta")),
  s(:send, nil, :require,
    s(:str, "net/http/backward")))
