s(:begin,
  s(:send, nil, :require,
    s(:str, "net/protocol")),
  s(:send, nil, :require,
    s(:str, "digest/md5")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "openssl")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:module,
    s(:const, nil, :Net),
    s(:begin,
      s(:module,
        s(:const, nil, :SMTPError), nil),
      s(:class,
        s(:const, nil, :SMTPAuthenticationError),
        s(:const, nil, :ProtoAuthError),
        s(:send, nil, :include,
          s(:const, nil, :SMTPError))),
      s(:class,
        s(:const, nil, :SMTPServerBusy),
        s(:const, nil, :ProtoServerError),
        s(:send, nil, :include,
          s(:const, nil, :SMTPError))),
      s(:class,
        s(:const, nil, :SMTPSyntaxError),
        s(:const, nil, :ProtoSyntaxError),
        s(:send, nil, :include,
          s(:const, nil, :SMTPError))),
      s(:class,
        s(:const, nil, :SMTPFatalError),
        s(:const, nil, :ProtoFatalError),
        s(:send, nil, :include,
          s(:const, nil, :SMTPError))),
      s(:class,
        s(:const, nil, :SMTPUnknownError),
        s(:const, nil, :ProtoUnknownError),
        s(:send, nil, :include,
          s(:const, nil, :SMTPError))),
      s(:class,
        s(:const, nil, :SMTPUnsupportedCommand),
        s(:const, nil, :ProtocolError),
        s(:send, nil, :include,
          s(:const, nil, :SMTPError))),
      s(:class,
        s(:const, nil, :SMTP), nil,
        s(:begin,
          s(:casgn, nil, :Revision,
            s(:send,
              s(:send,
                s(:str, "Revision"), :split), :[],
              s(:int, 1))),
          s(:defs,
            s(:const, nil, :SMTP), :default_port,
            s(:args),
            s(:int, 25)),
          s(:defs,
            s(:const, nil, :SMTP), :default_submission_port,
            s(:args),
            s(:int, 587)),
          s(:defs,
            s(:const, nil, :SMTP), :default_tls_port,
            s(:args),
            s(:int, 465)),
          s(:sclass,
            s(:self),
            s(:alias,
              s(:sym, :default_ssl_port),
              s(:sym, :default_tls_port))),
          s(:defs,
            s(:const, nil, :SMTP), :default_ssl_context,
            s(:args),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLContext), :new)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :address),
              s(:optarg, :port,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@address,
                s(:lvar, :address)),
              s(:ivasgn, :@port,
                s(:begin,
                  s(:or,
                    s(:lvar, :port),
                    s(:send,
                      s(:const, nil, :SMTP), :default_port)))),
              s(:ivasgn, :@esmtp,
                s(:true)),
              s(:ivasgn, :@capabilities,
                s(:nil)),
              s(:ivasgn, :@socket,
                s(:nil)),
              s(:ivasgn, :@started,
                s(:false)),
              s(:ivasgn, :@open_timeout,
                s(:int, 30)),
              s(:ivasgn, :@read_timeout,
                s(:int, 60)),
              s(:ivasgn, :@error_occurred,
                s(:false)),
              s(:ivasgn, :@debug_output,
                s(:nil)),
              s(:ivasgn, :@tls,
                s(:false)),
              s(:ivasgn, :@starttls,
                s(:false)),
              s(:ivasgn, :@ssl_context,
                s(:nil)))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, " "),
              s(:begin,
                s(:ivar, :@address)),
              s(:str, ":"),
              s(:begin,
                s(:ivar, :@port)),
              s(:str, " started="),
              s(:begin,
                s(:ivar, :@started)),
              s(:str, ">"))),
          s(:send, nil, :attr_accessor,
            s(:sym, :esmtp)),
          s(:alias,
            s(:sym, :esmtp?),
            s(:sym, :esmtp)),
          s(:def, :capable_starttls?,
            s(:args),
            s(:send, nil, :capable?,
              s(:str, "STARTTLS"))),
          s(:def, :capable?,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:if,
                s(:ivar, :@capabilities), nil,
                s(:return,
                  s(:nil))),
              s(:if,
                s(:send,
                  s(:ivar, :@capabilities), :[],
                  s(:lvar, :key)),
                s(:true),
                s(:false)))),
          s(:send, nil, :private,
            s(:sym, :capable?)),
          s(:def, :capable_plain_auth?,
            s(:args),
            s(:send, nil, :auth_capable?,
              s(:str, "PLAIN"))),
          s(:def, :capable_login_auth?,
            s(:args),
            s(:send, nil, :auth_capable?,
              s(:str, "LOGIN"))),
          s(:def, :capable_cram_md5_auth?,
            s(:args),
            s(:send, nil, :auth_capable?,
              s(:str, "CRAM-MD5"))),
          s(:def, :auth_capable?,
            s(:args,
              s(:arg, :type)),
            s(:begin,
              s(:if,
                s(:ivar, :@capabilities), nil,
                s(:return,
                  s(:nil))),
              s(:if,
                s(:send,
                  s(:ivar, :@capabilities), :[],
                  s(:str, "AUTH")), nil,
                s(:return,
                  s(:false))),
              s(:send,
                s(:send,
                  s(:ivar, :@capabilities), :[],
                  s(:str, "AUTH")), :include?,
                s(:lvar, :type)))),
          s(:send, nil, :private,
            s(:sym, :auth_capable?)),
          s(:def, :capable_auth_types,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@capabilities), nil,
                s(:return,
                  s(:array))),
              s(:if,
                s(:send,
                  s(:ivar, :@capabilities), :[],
                  s(:str, "AUTH")), nil,
                s(:return,
                  s(:array))),
              s(:send,
                s(:ivar, :@capabilities), :[],
                s(:str, "AUTH")))),
          s(:def, :tls?,
            s(:args),
            s(:ivar, :@tls)),
          s(:alias,
            s(:sym, :ssl?),
            s(:sym, :tls?)),
          s(:def, :enable_tls,
            s(:args,
              s(:optarg, :context,
                s(:send,
                  s(:const, nil, :SMTP), :default_ssl_context))),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:const, nil, :OpenSSL)), nil,
                s(:send, nil, :raise,
                  s(:str, "openssl library not installed"))),
              s(:if,
                s(:ivar, :@starttls),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "SMTPS and STARTTLS is exclusive")), nil),
              s(:ivasgn, :@tls,
                s(:true)),
              s(:ivasgn, :@ssl_context,
                s(:lvar, :context)))),
          s(:alias,
            s(:sym, :enable_ssl),
            s(:sym, :enable_tls)),
          s(:def, :disable_tls,
            s(:args),
            s(:begin,
              s(:ivasgn, :@tls,
                s(:false)),
              s(:ivasgn, :@ssl_context,
                s(:nil)))),
          s(:alias,
            s(:sym, :disable_ssl),
            s(:sym, :disable_tls)),
          s(:def, :starttls?,
            s(:args),
            s(:ivar, :@starttls)),
          s(:def, :starttls_always?,
            s(:args),
            s(:send,
              s(:ivar, :@starttls), :==,
              s(:sym, :always))),
          s(:def, :starttls_auto?,
            s(:args),
            s(:send,
              s(:ivar, :@starttls), :==,
              s(:sym, :auto))),
          s(:def, :enable_starttls,
            s(:args,
              s(:optarg, :context,
                s(:send,
                  s(:const, nil, :SMTP), :default_ssl_context))),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:const, nil, :OpenSSL)), nil,
                s(:send, nil, :raise,
                  s(:str, "openssl library not installed"))),
              s(:if,
                s(:ivar, :@tls),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "SMTPS and STARTTLS is exclusive")), nil),
              s(:ivasgn, :@starttls,
                s(:sym, :always)),
              s(:ivasgn, :@ssl_context,
                s(:lvar, :context)))),
          s(:def, :enable_starttls_auto,
            s(:args,
              s(:optarg, :context,
                s(:send,
                  s(:const, nil, :SMTP), :default_ssl_context))),
            s(:begin,
              s(:if,
                s(:defined?,
                  s(:const, nil, :OpenSSL)), nil,
                s(:send, nil, :raise,
                  s(:str, "openssl library not installed"))),
              s(:if,
                s(:ivar, :@tls),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "SMTPS and STARTTLS is exclusive")), nil),
              s(:ivasgn, :@starttls,
                s(:sym, :auto)),
              s(:ivasgn, :@ssl_context,
                s(:lvar, :context)))),
          s(:def, :disable_starttls,
            s(:args),
            s(:begin,
              s(:ivasgn, :@starttls,
                s(:false)),
              s(:ivasgn, :@ssl_context,
                s(:nil)))),
          s(:send, nil, :attr_reader,
            s(:sym, :address)),
          s(:send, nil, :attr_reader,
            s(:sym, :port)),
          s(:send, nil, :attr_accessor,
            s(:sym, :open_timeout)),
          s(:send, nil, :attr_reader,
            s(:sym, :read_timeout)),
          s(:def, :read_timeout=,
            s(:args,
              s(:arg, :sec)),
            s(:begin,
              s(:if,
                s(:ivar, :@socket),
                s(:send,
                  s(:ivar, :@socket), :read_timeout=,
                  s(:lvar, :sec)), nil),
              s(:ivasgn, :@read_timeout,
                s(:lvar, :sec)))),
          s(:def, :debug_output=,
            s(:args,
              s(:arg, :arg)),
            s(:ivasgn, :@debug_output,
              s(:lvar, :arg))),
          s(:alias,
            s(:sym, :set_debug_output),
            s(:sym, :debug_output=)),
          s(:defs,
            s(:const, nil, :SMTP), :start,
            s(:args,
              s(:arg, :address),
              s(:optarg, :port,
                s(:nil)),
              s(:optarg, :helo,
                s(:str, "localhost")),
              s(:optarg, :user,
                s(:nil)),
              s(:optarg, :secret,
                s(:nil)),
              s(:optarg, :authtype,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send,
              s(:send, nil, :new,
                s(:lvar, :address),
                s(:lvar, :port)), :start,
              s(:lvar, :helo),
              s(:lvar, :user),
              s(:lvar, :secret),
              s(:lvar, :authtype),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :started?,
            s(:args),
            s(:ivar, :@started)),
          s(:def, :start,
            s(:args,
              s(:optarg, :helo,
                s(:str, "localhost")),
              s(:optarg, :user,
                s(:nil)),
              s(:optarg, :secret,
                s(:nil)),
              s(:optarg, :authtype,
                s(:nil))),
            s(:if,
              s(:send, nil, :block_given?),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send, nil, :do_start,
                      s(:lvar, :helo),
                      s(:lvar, :user),
                      s(:lvar, :secret),
                      s(:lvar, :authtype)),
                    s(:return,
                      s(:yield,
                        s(:self)))),
                  s(:send, nil, :do_finish))),
              s(:begin,
                s(:send, nil, :do_start,
                  s(:lvar, :helo),
                  s(:lvar, :user),
                  s(:lvar, :secret),
                  s(:lvar, :authtype)),
                s(:return,
                  s(:self))))),
          s(:def, :finish,
            s(:args),
            s(:begin,
              s(:if,
                s(:send, nil, :started?), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :IOError),
                  s(:str, "not yet started"))),
              s(:send, nil, :do_finish))),
          s(:send, nil, :private),
          s(:def, :tcp_socket,
            s(:args,
              s(:arg, :address),
              s(:arg, :port)),
            s(:send,
              s(:const, nil, :TCPSocket), :open,
              s(:lvar, :address),
              s(:lvar, :port))),
          s(:def, :do_start,
            s(:args,
              s(:arg, :helo_domain),
              s(:arg, :user),
              s(:arg, :secret),
              s(:arg, :authtype)),
            s(:ensure,
              s(:begin,
                s(:if,
                  s(:ivar, :@started),
                  s(:send, nil, :raise,
                    s(:const, nil, :IOError),
                    s(:str, "SMTP session already started")), nil),
                s(:if,
                  s(:or,
                    s(:lvar, :user),
                    s(:lvar, :secret)),
                  s(:begin,
                    s(:send, nil, :check_auth_method,
                      s(:or,
                        s(:lvar, :authtype),
                        s(:const, nil, :DEFAULT_AUTH_TYPE))),
                    s(:send, nil, :check_auth_args,
                      s(:lvar, :user),
                      s(:lvar, :secret))), nil),
                s(:lvasgn, :s,
                  s(:block,
                    s(:send,
                      s(:const, nil, :Timeout), :timeout,
                      s(:ivar, :@open_timeout),
                      s(:const,
                        s(:const, nil, :Net), :OpenTimeout)),
                    s(:args),
                    s(:send, nil, :tcp_socket,
                      s(:ivar, :@address),
                      s(:ivar, :@port)))),
                s(:send, nil, :logging,
                  s(:dstr,
                    s(:str, "Connection opened: "),
                    s(:begin,
                      s(:ivar, :@address)),
                    s(:str, ":"),
                    s(:begin,
                      s(:ivar, :@port)))),
                s(:ivasgn, :@socket,
                  s(:send, nil, :new_internet_message_io,
                    s(:if,
                      s(:send, nil, :tls?),
                      s(:send, nil, :tlsconnect,
                        s(:lvar, :s)),
                      s(:lvar, :s)))),
                s(:send, nil, :check_response,
                  s(:block,
                    s(:send, nil, :critical),
                    s(:args),
                    s(:send, nil, :recv_response))),
                s(:send, nil, :do_helo,
                  s(:lvar, :helo_domain)),
                s(:if,
                  s(:or,
                    s(:send, nil, :starttls_always?),
                    s(:begin,
                      s(:and,
                        s(:send, nil, :capable_starttls?),
                        s(:send, nil, :starttls_auto?)))),
                  s(:begin,
                    s(:if,
                      s(:send, nil, :capable_starttls?), nil,
                      s(:send, nil, :raise,
                        s(:const, nil, :SMTPUnsupportedCommand),
                        s(:str, "STARTTLS is not supported on this server"))),
                    s(:send, nil, :starttls),
                    s(:ivasgn, :@socket,
                      s(:send, nil, :new_internet_message_io,
                        s(:send, nil, :tlsconnect,
                          s(:lvar, :s)))),
                    s(:send, nil, :do_helo,
                      s(:lvar, :helo_domain))), nil),
                s(:if,
                  s(:lvar, :user),
                  s(:send, nil, :authenticate,
                    s(:lvar, :user),
                    s(:lvar, :secret),
                    s(:begin,
                      s(:or,
                        s(:lvar, :authtype),
                        s(:const, nil, :DEFAULT_AUTH_TYPE)))), nil),
                s(:ivasgn, :@started,
                  s(:true))),
              s(:if,
                s(:ivar, :@started), nil,
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:lvar, :s),
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :closed?), :!)),
                    s(:send,
                      s(:lvar, :s), :close), nil),
                  s(:ivasgn, :@socket,
                    s(:nil)))))),
          s(:def, :ssl_socket,
            s(:args,
              s(:arg, :socket),
              s(:arg, :context)),
            s(:send,
              s(:const,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL), :SSLSocket), :new,
              s(:lvar, :socket),
              s(:lvar, :context))),
          s(:def, :tlsconnect,
            s(:args,
              s(:arg, :s)),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :verified,
                  s(:false)),
                s(:lvasgn, :s,
                  s(:send, nil, :ssl_socket,
                    s(:lvar, :s),
                    s(:ivar, :@ssl_context))),
                s(:send, nil, :logging,
                  s(:str, "TLS connection started")),
                s(:send,
                  s(:lvar, :s), :sync_close=,
                  s(:true)),
                s(:send,
                  s(:lvar, :s), :connect),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:ivar, :@ssl_context), :verify_mode), :!=,
                    s(:const,
                      s(:const,
                        s(:const, nil, :OpenSSL), :SSL), :VERIFY_NONE)),
                  s(:send,
                    s(:lvar, :s), :post_connection_check,
                    s(:ivar, :@address)), nil),
                s(:lvasgn, :verified,
                  s(:true)),
                s(:lvar, :s)),
              s(:if,
                s(:lvar, :verified), nil,
                s(:send,
                  s(:lvar, :s), :close)))),
          s(:def, :new_internet_message_io,
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:lvasgn, :io,
                s(:send,
                  s(:const, nil, :InternetMessageIO), :new,
                  s(:lvar, :s))),
              s(:send,
                s(:lvar, :io), :read_timeout=,
                s(:ivar, :@read_timeout)),
              s(:send,
                s(:lvar, :io), :debug_output=,
                s(:ivar, :@debug_output)),
              s(:lvar, :io))),
          s(:def, :do_helo,
            s(:args,
              s(:arg, :helo_domain)),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :res,
                  s(:if,
                    s(:ivar, :@esmtp),
                    s(:send, nil, :ehlo,
                      s(:lvar, :helo_domain)),
                    s(:send, nil, :helo,
                      s(:lvar, :helo_domain)))),
                s(:ivasgn, :@capabilities,
                  s(:send,
                    s(:lvar, :res), :capabilities))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SMTPError)), nil,
                s(:begin,
                  s(:if,
                    s(:ivar, :@esmtp),
                    s(:begin,
                      s(:ivasgn, :@esmtp,
                        s(:false)),
                      s(:ivasgn, :@error_occurred,
                        s(:false)),
                      s(:retry)), nil),
                  s(:send, nil, :raise))), nil)),
          s(:def, :do_finish,
            s(:args),
            s(:ensure,
              s(:if,
                s(:and,
                  s(:and,
                    s(:ivar, :@socket),
                    s(:send,
                      s(:send,
                        s(:ivar, :@socket), :closed?), :!)),
                  s(:send,
                    s(:ivar, :@error_occurred), :!)),
                s(:send, nil, :quit), nil),
              s(:begin,
                s(:ivasgn, :@started,
                  s(:false)),
                s(:ivasgn, :@error_occurred,
                  s(:false)),
                s(:if,
                  s(:and,
                    s(:ivar, :@socket),
                    s(:send,
                      s(:send,
                        s(:ivar, :@socket), :closed?), :!)),
                  s(:send,
                    s(:ivar, :@socket), :close), nil),
                s(:ivasgn, :@socket,
                  s(:nil))))),
          s(:send, nil, :public),
          s(:def, :send_message,
            s(:args,
              s(:arg, :msgstr),
              s(:arg, :from_addr),
              s(:restarg, :to_addrs)),
            s(:begin,
              s(:if,
                s(:ivar, :@socket), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :IOError),
                  s(:str, "closed session"))),
              s(:send, nil, :mailfrom,
                s(:lvar, :from_addr)),
              s(:block,
                s(:send, nil, :rcptto_list,
                  s(:lvar, :to_addrs)),
                s(:args),
                s(:send, nil, :data,
                  s(:lvar, :msgstr))))),
          s(:alias,
            s(:sym, :send_mail),
            s(:sym, :send_message)),
          s(:alias,
            s(:sym, :sendmail),
            s(:sym, :send_message)),
          s(:def, :open_message_stream,
            s(:args,
              s(:arg, :from_addr),
              s(:restarg, :to_addrs),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:ivar, :@socket), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :IOError),
                  s(:str, "closed session"))),
              s(:send, nil, :mailfrom,
                s(:lvar, :from_addr)),
              s(:block,
                s(:send, nil, :rcptto_list,
                  s(:lvar, :to_addrs)),
                s(:args),
                s(:send, nil, :data,
                  s(:block_pass,
                    s(:lvar, :block)))))),
          s(:alias,
            s(:sym, :ready),
            s(:sym, :open_message_stream)),
          s(:send, nil, :public),
          s(:casgn, nil, :DEFAULT_AUTH_TYPE,
            s(:sym, :plain)),
          s(:def, :authenticate,
            s(:args,
              s(:arg, :user),
              s(:arg, :secret),
              s(:optarg, :authtype,
                s(:const, nil, :DEFAULT_AUTH_TYPE))),
            s(:begin,
              s(:send, nil, :check_auth_method,
                s(:lvar, :authtype)),
              s(:send, nil, :check_auth_args,
                s(:lvar, :user),
                s(:lvar, :secret)),
              s(:send, nil, :send,
                s(:send, nil, :auth_method,
                  s(:lvar, :authtype)),
                s(:lvar, :user),
                s(:lvar, :secret)))),
          s(:def, :auth_plain,
            s(:args,
              s(:arg, :user),
              s(:arg, :secret)),
            s(:begin,
              s(:send, nil, :check_auth_args,
                s(:lvar, :user),
                s(:lvar, :secret)),
              s(:lvasgn, :res,
                s(:block,
                  s(:send, nil, :critical),
                  s(:args),
                  s(:send, nil, :get_response,
                    s(:send,
                      s(:str, "AUTH PLAIN "), :+,
                      s(:send, nil, :base64_encode,
                        s(:dstr,
                          s(:str, "\u0000"),
                          s(:begin,
                            s(:lvar, :user)),
                          s(:str, "\u0000"),
                          s(:begin,
                            s(:lvar, :secret)))))))),
              s(:send, nil, :check_auth_response,
                s(:lvar, :res)),
              s(:lvar, :res))),
          s(:def, :auth_login,
            s(:args,
              s(:arg, :user),
              s(:arg, :secret)),
            s(:begin,
              s(:send, nil, :check_auth_args,
                s(:lvar, :user),
                s(:lvar, :secret)),
              s(:lvasgn, :res,
                s(:block,
                  s(:send, nil, :critical),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :check_auth_continue,
                      s(:send, nil, :get_response,
                        s(:str, "AUTH LOGIN"))),
                    s(:send, nil, :check_auth_continue,
                      s(:send, nil, :get_response,
                        s(:send, nil, :base64_encode,
                          s(:lvar, :user)))),
                    s(:send, nil, :get_response,
                      s(:send, nil, :base64_encode,
                        s(:lvar, :secret)))))),
              s(:send, nil, :check_auth_response,
                s(:lvar, :res)),
              s(:lvar, :res))),
          s(:def, :auth_cram_md5,
            s(:args,
              s(:arg, :user),
              s(:arg, :secret)),
            s(:begin,
              s(:send, nil, :check_auth_args,
                s(:lvar, :user),
                s(:lvar, :secret)),
              s(:lvasgn, :res,
                s(:block,
                  s(:send, nil, :critical),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :res0,
                      s(:send, nil, :get_response,
                        s(:str, "AUTH CRAM-MD5"))),
                    s(:send, nil, :check_auth_continue,
                      s(:lvar, :res0)),
                    s(:lvasgn, :crammed,
                      s(:send, nil, :cram_md5_response,
                        s(:lvar, :secret),
                        s(:send,
                          s(:lvar, :res0), :cram_md5_challenge))),
                    s(:send, nil, :get_response,
                      s(:send, nil, :base64_encode,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :user)),
                          s(:str, " "),
                          s(:begin,
                            s(:lvar, :crammed)))))))),
              s(:send, nil, :check_auth_response,
                s(:lvar, :res)),
              s(:lvar, :res))),
          s(:send, nil, :private),
          s(:def, :check_auth_method,
            s(:args,
              s(:arg, :type)),
            s(:if,
              s(:send, nil, :respond_to?,
                s(:send, nil, :auth_method,
                  s(:lvar, :type)),
                s(:true)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:dstr,
                  s(:str, "wrong authentication type "),
                  s(:begin,
                    s(:lvar, :type)))))),
          s(:def, :auth_method,
            s(:args,
              s(:arg, :type)),
            s(:send,
              s(:dstr,
                s(:str, "auth_"),
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :type), :to_s), :downcase))), :intern)),
          s(:def, :check_auth_args,
            s(:args,
              s(:arg, :user),
              s(:arg, :secret),
              s(:optarg, :authtype,
                s(:const, nil, :DEFAULT_AUTH_TYPE))),
            s(:begin,
              s(:if,
                s(:lvar, :user), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "SMTP-AUTH requested but missing user name"))),
              s(:if,
                s(:lvar, :secret), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "SMTP-AUTH requested but missing secret phrase"))))),
          s(:def, :base64_encode,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:send,
                s(:array,
                  s(:lvar, :str)), :pack,
                s(:str, "m")), :gsub,
              s(:regexp,
                s(:str, "\\s+"),
                s(:regopt)),
              s(:str, ""))),
          s(:casgn, nil, :IMASK,
            s(:int, 54)),
          s(:casgn, nil, :OMASK,
            s(:int, 92)),
          s(:def, :cram_md5_response,
            s(:args,
              s(:arg, :secret),
              s(:arg, :challenge)),
            s(:begin,
              s(:lvasgn, :tmp,
                s(:send,
                  s(:const,
                    s(:const, nil, :Digest), :MD5), :digest,
                  s(:send,
                    s(:send, nil, :cram_secret,
                      s(:lvar, :secret),
                      s(:const, nil, :IMASK)), :+,
                    s(:lvar, :challenge)))),
              s(:send,
                s(:const,
                  s(:const, nil, :Digest), :MD5), :hexdigest,
                s(:send,
                  s(:send, nil, :cram_secret,
                    s(:lvar, :secret),
                    s(:const, nil, :OMASK)), :+,
                  s(:lvar, :tmp))))),
          s(:casgn, nil, :CRAM_BUFSIZE,
            s(:int, 64)),
          s(:def, :cram_secret,
            s(:args,
              s(:arg, :secret),
              s(:arg, :mask)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :secret), :size), :>,
                  s(:const, nil, :CRAM_BUFSIZE)),
                s(:lvasgn, :secret,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :MD5), :digest,
                    s(:lvar, :secret))), nil),
              s(:lvasgn, :buf,
                s(:send,
                  s(:lvar, :secret), :ljust,
                  s(:const, nil, :CRAM_BUFSIZE),
                  s(:str, "\u0000"))),
              s(:block,
                s(:send,
                  s(:int, 0), :upto,
                  s(:send,
                    s(:send,
                      s(:lvar, :buf), :size), :-,
                    s(:int, 1))),
                s(:args,
                  s(:arg, :i)),
                s(:send,
                  s(:lvar, :buf), :[]=,
                  s(:lvar, :i),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :buf), :[],
                            s(:lvar, :i)), :ord), :^,
                        s(:lvar, :mask))), :chr))),
              s(:lvar, :buf))),
          s(:send, nil, :public),
          s(:def, :rset,
            s(:args),
            s(:send, nil, :getok,
              s(:str, "RSET"))),
          s(:def, :starttls,
            s(:args),
            s(:send, nil, :getok,
              s(:str, "STARTTLS"))),
          s(:def, :helo,
            s(:args,
              s(:arg, :domain)),
            s(:send, nil, :getok,
              s(:dstr,
                s(:str, "HELO "),
                s(:begin,
                  s(:lvar, :domain))))),
          s(:def, :ehlo,
            s(:args,
              s(:arg, :domain)),
            s(:send, nil, :getok,
              s(:dstr,
                s(:str, "EHLO "),
                s(:begin,
                  s(:lvar, :domain))))),
          s(:def, :mailfrom,
            s(:args,
              s(:arg, :from_addr)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:gvar, :$SAFE), :>,
                  s(:int, 0)),
                s(:if,
                  s(:send,
                    s(:lvar, :from_addr), :tainted?),
                  s(:send, nil, :raise,
                    s(:const, nil, :SecurityError),
                    s(:str, "tainted from_addr")), nil), nil),
              s(:send, nil, :getok,
                s(:dstr,
                  s(:str, "MAIL FROM:<"),
                  s(:begin,
                    s(:lvar, :from_addr)),
                  s(:str, ">"))))),
          s(:def, :rcptto_list,
            s(:args,
              s(:arg, :to_addrs)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :to_addrs), :empty?),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "mail destination not given")), nil),
              s(:lvasgn, :ok_users,
                s(:array)),
              s(:lvasgn, :unknown_users,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :to_addrs), :flatten), :each),
                s(:args,
                  s(:arg, :addr)),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :rcptto,
                      s(:lvar, :addr)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :SMTPAuthenticationError)), nil,
                      s(:send,
                        s(:lvar, :unknown_users), :<<,
                        s(:send,
                          s(:lvar, :addr), :dump))),
                    s(:send,
                      s(:lvar, :ok_users), :<<,
                      s(:lvar, :addr))))),
              s(:if,
                s(:send,
                  s(:lvar, :ok_users), :empty?),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "mail destination not given")), nil),
              s(:lvasgn, :ret,
                s(:yield)),
              s(:if,
                s(:send,
                  s(:lvar, :unknown_users), :empty?), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :SMTPAuthenticationError),
                  s(:dstr,
                    s(:str, "failed to deliver for "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :unknown_users), :join,
                        s(:str, ", ")))))),
              s(:lvar, :ret))),
          s(:def, :rcptto,
            s(:args,
              s(:arg, :to_addr)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:gvar, :$SAFE), :>,
                  s(:int, 0)),
                s(:if,
                  s(:send,
                    s(:lvar, :to_addr), :tainted?),
                  s(:send, nil, :raise,
                    s(:const, nil, :SecurityError),
                    s(:str, "tainted to_addr")), nil), nil),
              s(:send, nil, :getok,
                s(:dstr,
                  s(:str, "RCPT TO:<"),
                  s(:begin,
                    s(:lvar, :to_addr)),
                  s(:str, ">"))))),
          s(:def, :data,
            s(:args,
              s(:optarg, :msgstr,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :msgstr),
                  s(:lvar, :block)),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "message and block are exclusive")), nil),
              s(:if,
                s(:or,
                  s(:lvar, :msgstr),
                  s(:lvar, :block)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "message or block is required"))),
              s(:lvasgn, :res,
                s(:block,
                  s(:send, nil, :critical),
                  s(:args),
                  s(:begin,
                    s(:send, nil, :check_continue,
                      s(:send, nil, :get_response,
                        s(:str, "DATA"))),
                    s(:lvasgn, :socket_sync_bak,
                      s(:send,
                        s(:send,
                          s(:ivar, :@socket), :io), :sync)),
                    s(:kwbegin,
                      s(:ensure,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:ivar, :@socket), :io), :sync=,
                            s(:false)),
                          s(:if,
                            s(:lvar, :msgstr),
                            s(:send,
                              s(:ivar, :@socket), :write_message,
                              s(:lvar, :msgstr)),
                            s(:send,
                              s(:ivar, :@socket), :write_message_by_block,
                              s(:block_pass,
                                s(:lvar, :block))))),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:ivar, :@socket), :io), :flush),
                          s(:send,
                            s(:send,
                              s(:ivar, :@socket), :io), :sync=,
                            s(:lvar, :socket_sync_bak))))),
                    s(:send, nil, :recv_response)))),
              s(:send, nil, :check_response,
                s(:lvar, :res)),
              s(:lvar, :res))),
          s(:def, :quit,
            s(:args),
            s(:send, nil, :getok,
              s(:str, "QUIT"))),
          s(:send, nil, :private),
          s(:def, :getok,
            s(:args,
              s(:arg, :reqline)),
            s(:begin,
              s(:lvasgn, :res,
                s(:block,
                  s(:send, nil, :critical),
                  s(:args),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@socket), :writeline,
                      s(:lvar, :reqline)),
                    s(:send, nil, :recv_response)))),
              s(:send, nil, :check_response,
                s(:lvar, :res)),
              s(:lvar, :res))),
          s(:def, :get_response,
            s(:args,
              s(:arg, :reqline)),
            s(:begin,
              s(:send,
                s(:ivar, :@socket), :writeline,
                s(:lvar, :reqline)),
              s(:send, nil, :recv_response))),
          s(:def, :recv_response,
            s(:args),
            s(:begin,
              s(:lvasgn, :buf,
                s(:str, "")),
              s(:while,
                s(:true),
                s(:begin,
                  s(:lvasgn, :line,
                    s(:send,
                      s(:ivar, :@socket), :readline)),
                  s(:send,
                    s(:send,
                      s(:lvar, :buf), :<<,
                      s(:lvar, :line)), :<<,
                    s(:str, "\n")),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :line), :[],
                        s(:int, 3),
                        s(:int, 1)), :==,
                      s(:str, "-")), nil,
                    s(:break)))),
              s(:send,
                s(:const, nil, :Response), :parse,
                s(:lvar, :buf)))),
          s(:def, :critical,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@error_occurred),
                s(:return,
                  s(:send,
                    s(:const, nil, :Response), :parse,
                    s(:str, "200 dummy reply code"))), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:return,
                    s(:yield)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)), nil,
                    s(:begin,
                      s(:ivasgn, :@error_occurred,
                        s(:true)),
                      s(:send, nil, :raise))), nil)))),
          s(:def, :check_response,
            s(:args,
              s(:arg, :res)),
            s(:if,
              s(:send,
                s(:lvar, :res), :success?), nil,
              s(:send, nil, :raise,
                s(:send,
                  s(:lvar, :res), :exception_class),
                s(:send,
                  s(:lvar, :res), :message)))),
          s(:def, :check_continue,
            s(:args,
              s(:arg, :res)),
            s(:if,
              s(:send,
                s(:lvar, :res), :continue?), nil,
              s(:send, nil, :raise,
                s(:const, nil, :SMTPUnknownError),
                s(:dstr,
                  s(:str, "could not get 3xx ("),
                  s(:begin,
                    s(:send,
                      s(:lvar, :res), :status)),
                  s(:str, ": "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :res), :string)),
                  s(:str, ")"))))),
          s(:def, :check_auth_response,
            s(:args,
              s(:arg, :res)),
            s(:if,
              s(:send,
                s(:lvar, :res), :success?), nil,
              s(:send, nil, :raise,
                s(:const, nil, :SMTPAuthenticationError),
                s(:send,
                  s(:lvar, :res), :message)))),
          s(:def, :check_auth_continue,
            s(:args,
              s(:arg, :res)),
            s(:if,
              s(:send,
                s(:lvar, :res), :continue?), nil,
              s(:send, nil, :raise,
                s(:send,
                  s(:lvar, :res), :exception_class),
                s(:send,
                  s(:lvar, :res), :message)))),
          s(:class,
            s(:const, nil, :Response), nil,
            s(:begin,
              s(:defs,
                s(:self), :parse,
                s(:args,
                  s(:arg, :str)),
                s(:send, nil, :new,
                  s(:send,
                    s(:lvar, :str), :[],
                    s(:int, 0),
                    s(:int, 3)),
                  s(:lvar, :str))),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :status),
                  s(:arg, :string)),
                s(:begin,
                  s(:ivasgn, :@status,
                    s(:lvar, :status)),
                  s(:ivasgn, :@string,
                    s(:lvar, :string)))),
              s(:send, nil, :attr_reader,
                s(:sym, :status)),
              s(:send, nil, :attr_reader,
                s(:sym, :string)),
              s(:def, :status_type_char,
                s(:args),
                s(:send,
                  s(:ivar, :@status), :[],
                  s(:int, 0),
                  s(:int, 1))),
              s(:def, :success?,
                s(:args),
                s(:send,
                  s(:send, nil, :status_type_char), :==,
                  s(:str, "2"))),
              s(:def, :continue?,
                s(:args),
                s(:send,
                  s(:send, nil, :status_type_char), :==,
                  s(:str, "3"))),
              s(:def, :message,
                s(:args),
                s(:send,
                  s(:send,
                    s(:ivar, :@string), :lines), :first)),
              s(:def, :cram_md5_challenge,
                s(:args),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:ivar, :@string), :split,
                        s(:regexp,
                          s(:str, " "),
                          s(:regopt))), :[],
                      s(:int, 1)), :unpack,
                    s(:str, "m")), :[],
                  s(:int, 0))),
              s(:def, :capabilities,
                s(:args),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@string), :[],
                        s(:int, 3),
                        s(:int, 1)), :==,
                      s(:str, "-")), nil,
                    s(:return,
                      s(:hash))),
                  s(:lvasgn, :h,
                    s(:hash)),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:ivar, :@string), :lines), :drop,
                        s(:int, 1)), :each),
                    s(:args,
                      s(:arg, :line)),
                    s(:begin,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :k),
                          s(:splat,
                            s(:lvasgn, :v))),
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :line), :[],
                              s(:irange,
                                s(:int, 4),
                                s(:int, -1))), :chomp), :split)),
                      s(:send,
                        s(:lvar, :h), :[]=,
                        s(:lvar, :k),
                        s(:lvar, :v)))),
                  s(:lvar, :h))),
              s(:def, :exception_class,
                s(:args),
                s(:case,
                  s(:ivar, :@status),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A4"),
                      s(:regopt)),
                    s(:const, nil, :SMTPServerBusy)),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A50"),
                      s(:regopt)),
                    s(:const, nil, :SMTPSyntaxError)),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A53"),
                      s(:regopt)),
                    s(:const, nil, :SMTPAuthenticationError)),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A5"),
                      s(:regopt)),
                    s(:const, nil, :SMTPFatalError)),
                  s(:const, nil, :SMTPUnknownError))))),
          s(:def, :logging,
            s(:args,
              s(:arg, :msg)),
            s(:if,
              s(:ivar, :@debug_output),
              s(:send,
                s(:ivar, :@debug_output), :<<,
                s(:send,
                  s(:lvar, :msg), :+,
                  s(:str, "\n"))), nil)))),
      s(:casgn, nil, :SMTPSession,
        s(:const, nil, :SMTP)))))
