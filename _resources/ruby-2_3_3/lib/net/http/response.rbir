s(:class,
  s(:const,
    s(:const, nil, :Net), :HTTPResponse), nil,
  s(:begin,
    s(:sclass,
      s(:self),
      s(:begin,
        s(:def, :body_permitted?,
          s(:args),
          s(:const,
            s(:self), :HAS_BODY)),
        s(:def, :exception_type,
          s(:args),
          s(:const,
            s(:self), :EXCEPTION_TYPE)),
        s(:def, :read_new,
          s(:args,
            s(:arg, :sock)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :httpv),
                s(:lvasgn, :code),
                s(:lvasgn, :msg)),
              s(:send, nil, :read_status_line,
                s(:lvar, :sock))),
            s(:lvasgn, :res,
              s(:send,
                s(:send, nil, :response_class,
                  s(:lvar, :code)), :new,
                s(:lvar, :httpv),
                s(:lvar, :code),
                s(:lvar, :msg))),
            s(:block,
              s(:send, nil, :each_response_header,
                s(:lvar, :sock)),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :res), :add_field,
                s(:lvar, :k),
                s(:lvar, :v))),
            s(:lvar, :res))),
        s(:send, nil, :private),
        s(:def, :read_status_line,
          s(:args,
            s(:arg, :sock)),
          s(:begin,
            s(:lvasgn, :str,
              s(:send,
                s(:lvar, :sock), :readline)),
            s(:or,
              s(:lvasgn, :m,
                s(:send,
                  s(:regexp,
                    s(:str, "\\AHTTP(?:/(\\d+\\.\\d+))?\\s+(\\d\\d\\d)(?:\\s+(.*))?\\z"),
                    s(:regopt, :i, :n)), :match,
                  s(:lvar, :str))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Net), :HTTPBadResponse),
                s(:dstr,
                  s(:str, "wrong status line: "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :dump))))),
            s(:send,
              s(:lvar, :m), :captures))),
        s(:def, :response_class,
          s(:args,
            s(:arg, :code)),
          s(:or,
            s(:or,
              s(:send,
                s(:const, nil, :CODE_TO_OBJ), :[],
                s(:lvar, :code)),
              s(:send,
                s(:const, nil, :CODE_CLASS_TO_OBJ), :[],
                s(:send,
                  s(:lvar, :code), :[],
                  s(:int, 0),
                  s(:int, 1)))),
            s(:const,
              s(:const, nil, :Net), :HTTPUnknownResponse))),
        s(:def, :each_response_header,
          s(:args,
            s(:arg, :sock)),
          s(:begin,
            s(:lvasgn, :key,
              s(:lvasgn, :value,
                s(:nil))),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :line,
                  s(:send,
                    s(:send,
                      s(:lvar, :sock), :readuntil,
                      s(:str, "\n"),
                      s(:true)), :sub,
                    s(:regexp,
                      s(:str, "\\s+\\z"),
                      s(:regopt)),
                    s(:str, ""))),
                s(:if,
                  s(:send,
                    s(:lvar, :line), :empty?),
                  s(:break), nil),
                s(:if,
                  s(:and,
                    s(:or,
                      s(:send,
                        s(:send,
                          s(:lvar, :line), :[],
                          s(:int, 0)), :==,
                        s(:str, " ")),
                      s(:send,
                        s(:send,
                          s(:lvar, :line), :[],
                          s(:int, 0)), :==,
                        s(:str, "\t"))),
                    s(:lvar, :value)),
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :value), :empty?), nil,
                      s(:send,
                        s(:lvar, :value), :<<,
                        s(:str, " "))),
                    s(:send,
                      s(:lvar, :value), :<<,
                      s(:send,
                        s(:lvar, :line), :strip))),
                  s(:begin,
                    s(:if,
                      s(:lvar, :key),
                      s(:yield,
                        s(:lvar, :key),
                        s(:lvar, :value)), nil),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :key),
                        s(:lvasgn, :value)),
                      s(:send,
                        s(:send,
                          s(:lvar, :line), :strip), :split,
                        s(:regexp,
                          s(:str, "\\s*:\\s*"),
                          s(:regopt)),
                        s(:int, 2))),
                    s(:if,
                      s(:send,
                        s(:lvar, :value), :nil?),
                      s(:send, nil, :raise,
                        s(:const,
                          s(:const, nil, :Net), :HTTPBadResponse),
                        s(:str, "wrong header line format")), nil))))),
            s(:if,
              s(:lvar, :key),
              s(:yield,
                s(:lvar, :key),
                s(:lvar, :value)), nil))))),
    s(:send, nil, :public),
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :Net), :HTTPHeader)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :httpv),
        s(:arg, :code),
        s(:arg, :msg)),
      s(:begin,
        s(:ivasgn, :@http_version,
          s(:lvar, :httpv)),
        s(:ivasgn, :@code,
          s(:lvar, :code)),
        s(:ivasgn, :@message,
          s(:lvar, :msg)),
        s(:send, nil, :initialize_http_header,
          s(:nil)),
        s(:ivasgn, :@body,
          s(:nil)),
        s(:ivasgn, :@read,
          s(:false)),
        s(:ivasgn, :@uri,
          s(:nil)),
        s(:ivasgn, :@decode_content,
          s(:false)))),
    s(:send, nil, :attr_reader,
      s(:sym, :http_version)),
    s(:send, nil, :attr_reader,
      s(:sym, :code)),
    s(:send, nil, :attr_reader,
      s(:sym, :message)),
    s(:alias,
      s(:sym, :msg),
      s(:sym, :message)),
    s(:send, nil, :attr_reader,
      s(:sym, :uri)),
    s(:send, nil, :attr_accessor,
      s(:sym, :decode_content)),
    s(:def, :inspect,
      s(:args),
      s(:dstr,
        s(:str, "#<"),
        s(:begin,
          s(:send,
            s(:self), :class)),
        s(:str, " "),
        s(:begin,
          s(:ivar, :@code)),
        s(:str, " "),
        s(:begin,
          s(:ivar, :@message)),
        s(:str, " readbody="),
        s(:begin,
          s(:ivar, :@read)),
        s(:str, ">"))),
    s(:def, :code_type,
      s(:args),
      s(:send,
        s(:self), :class)),
    s(:def, :error!,
      s(:args),
      s(:send, nil, :raise,
        s(:send,
          s(:send, nil, :error_type), :new,
          s(:send,
            s(:send,
              s(:ivar, :@code), :+,
              s(:str, " ")), :+,
            s(:send,
              s(:ivar, :@message), :dump)),
          s(:self)))),
    s(:def, :error_type,
      s(:args),
      s(:const,
        s(:send,
          s(:self), :class), :EXCEPTION_TYPE)),
    s(:def, :value,
      s(:args),
      s(:if,
        s(:send,
          s(:self), :kind_of?,
          s(:const,
            s(:const, nil, :Net), :HTTPSuccess)), nil,
        s(:send, nil, :error!))),
    s(:def, :uri=,
      s(:args,
        s(:arg, :uri)),
      s(:if,
        s(:lvar, :uri),
        s(:ivasgn, :@uri,
          s(:send,
            s(:lvar, :uri), :dup)), nil)),
    s(:def, :response,
      s(:args),
      s(:begin,
        s(:if,
          s(:gvar, :$VERBOSE),
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Net::HTTPResponse#response is obsolete"))), nil),
        s(:self))),
    s(:def, :header,
      s(:args),
      s(:begin,
        s(:if,
          s(:gvar, :$VERBOSE),
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Net::HTTPResponse#header is obsolete"))), nil),
        s(:self))),
    s(:def, :read_header,
      s(:args),
      s(:begin,
        s(:if,
          s(:gvar, :$VERBOSE),
          s(:send, nil, :warn,
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send, nil, :caller,
                    s(:int, 1)), :[],
                  s(:int, 0))),
              s(:str, ": warning: Net::HTTPResponse#read_header is obsolete"))), nil),
        s(:self))),
    s(:def, :reading_body,
      s(:args,
        s(:arg, :sock),
        s(:arg, :reqmethodallowbody)),
      s(:begin,
        s(:ivasgn, :@socket,
          s(:lvar, :sock)),
        s(:ivasgn, :@body_exist,
          s(:and,
            s(:lvar, :reqmethodallowbody),
            s(:send,
              s(:send,
                s(:self), :class), :body_permitted?))),
        s(:kwbegin,
          s(:ensure,
            s(:begin,
              s(:yield),
              s(:send,
                s(:self), :body)),
            s(:ivasgn, :@socket,
              s(:nil)))))),
    s(:def, :read_body,
      s(:args,
        s(:optarg, :dest,
          s(:nil)),
        s(:blockarg, :block)),
      s(:begin,
        s(:if,
          s(:ivar, :@read),
          s(:begin,
            s(:if,
              s(:or,
                s(:lvar, :dest),
                s(:lvar, :block)),
              s(:send, nil, :raise,
                s(:const, nil, :IOError),
                s(:dstr,
                  s(:begin,
                    s(:send,
                      s(:self), :class)),
                  s(:str, "#read_body called twice"))), nil),
            s(:return,
              s(:ivar, :@body))), nil),
        s(:lvasgn, :to,
          s(:send, nil, :procdest,
            s(:lvar, :dest),
            s(:lvar, :block))),
        s(:send, nil, :stream_check),
        s(:if,
          s(:ivar, :@body_exist),
          s(:begin,
            s(:send, nil, :read_body_0,
              s(:lvar, :to)),
            s(:ivasgn, :@body,
              s(:lvar, :to))),
          s(:ivasgn, :@body,
            s(:nil))),
        s(:ivasgn, :@read,
          s(:true)),
        s(:ivar, :@body))),
    s(:def, :body,
      s(:args),
      s(:send, nil, :read_body)),
    s(:def, :body=,
      s(:args,
        s(:arg, :value)),
      s(:ivasgn, :@body,
        s(:lvar, :value))),
    s(:alias,
      s(:sym, :entity),
      s(:sym, :body)),
    s(:send, nil, :private),
    s(:def, :inflater,
      s(:args),
      s(:begin,
        s(:if,
          s(:const,
            s(:const,
              s(:const, nil, :Net), :HTTP), :HAVE_ZLIB), nil,
          s(:return,
            s(:yield,
              s(:ivar, :@socket)))),
        s(:if,
          s(:ivar, :@decode_content), nil,
          s(:return,
            s(:yield,
              s(:ivar, :@socket)))),
        s(:if,
          s(:send,
            s(:self), :[],
            s(:str, "content-range")),
          s(:return,
            s(:yield,
              s(:ivar, :@socket))), nil),
        s(:lvasgn, :v,
          s(:send,
            s(:self), :[],
            s(:str, "content-encoding"))),
        s(:case,
          s(:csend,
            s(:lvar, :v), :downcase),
          s(:when,
            s(:str, "deflate"),
            s(:str, "gzip"),
            s(:str, "x-gzip"),
            s(:begin,
              s(:send,
                s(:self), :delete,
                s(:str, "content-encoding")),
              s(:lvasgn, :inflate_body_io,
                s(:send,
                  s(:const, nil, :Inflater), :new,
                  s(:ivar, :@socket))),
              s(:kwbegin,
                s(:ensure,
                  s(:yield,
                    s(:lvar, :inflate_body_io)),
                  s(:begin,
                    s(:lvasgn, :orig_err,
                      s(:gvar, :$!)),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :inflate_body_io), :finish),
                        s(:resbody, nil,
                          s(:lvasgn, :err),
                          s(:send, nil, :raise,
                            s(:or,
                              s(:lvar, :orig_err),
                              s(:lvar, :err)))), nil))))))),
          s(:when,
            s(:str, "none"),
            s(:str, "identity"),
            s(:begin,
              s(:send,
                s(:self), :delete,
                s(:str, "content-encoding")),
              s(:yield,
                s(:ivar, :@socket)))),
          s(:yield,
            s(:ivar, :@socket))))),
    s(:def, :read_body_0,
      s(:args,
        s(:arg, :dest)),
      s(:block,
        s(:send, nil, :inflater),
        s(:args,
          s(:arg, :inflate_body_io)),
        s(:begin,
          s(:if,
            s(:send, nil, :chunked?),
            s(:begin,
              s(:send, nil, :read_chunked,
                s(:lvar, :dest),
                s(:lvar, :inflate_body_io)),
              s(:return)), nil),
          s(:ivasgn, :@socket,
            s(:lvar, :inflate_body_io)),
          s(:lvasgn, :clen,
            s(:send, nil, :content_length)),
          s(:if,
            s(:lvar, :clen),
            s(:begin,
              s(:send,
                s(:ivar, :@socket), :read,
                s(:lvar, :clen),
                s(:lvar, :dest),
                s(:true)),
              s(:return)), nil),
          s(:lvasgn, :clen,
            s(:send, nil, :range_length)),
          s(:if,
            s(:lvar, :clen),
            s(:begin,
              s(:send,
                s(:ivar, :@socket), :read,
                s(:lvar, :clen),
                s(:lvar, :dest)),
              s(:return)), nil),
          s(:send,
            s(:ivar, :@socket), :read_all,
            s(:lvar, :dest))))),
    s(:def, :read_chunked,
      s(:args,
        s(:arg, :dest),
        s(:arg, :chunk_data_io)),
      s(:begin,
        s(:lvasgn, :total,
          s(:int, 0)),
        s(:while,
          s(:true),
          s(:begin,
            s(:lvasgn, :line,
              s(:send,
                s(:ivar, :@socket), :readline)),
            s(:or,
              s(:lvasgn, :hexlen,
                s(:send,
                  s(:lvar, :line), :slice,
                  s(:regexp,
                    s(:str, "[0-9a-fA-F]+"),
                    s(:regopt)))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Net), :HTTPBadResponse),
                s(:dstr,
                  s(:str, "wrong chunk size line: "),
                  s(:begin,
                    s(:lvar, :line))))),
            s(:lvasgn, :len,
              s(:send,
                s(:lvar, :hexlen), :hex)),
            s(:if,
              s(:send,
                s(:lvar, :len), :==,
                s(:int, 0)),
              s(:break), nil),
            s(:kwbegin,
              s(:ensure,
                s(:send,
                  s(:lvar, :chunk_data_io), :read,
                  s(:lvar, :len),
                  s(:lvar, :dest)),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :total), :+,
                    s(:lvar, :len)),
                  s(:send,
                    s(:ivar, :@socket), :read,
                    s(:int, 2))))))),
        s(:until,
          s(:send,
            s(:send,
              s(:ivar, :@socket), :readline), :empty?), nil))),
    s(:def, :stream_check,
      s(:args),
      s(:if,
        s(:send,
          s(:ivar, :@socket), :closed?),
        s(:send, nil, :raise,
          s(:const, nil, :IOError),
          s(:str, "attempt to read body out of block")), nil)),
    s(:def, :procdest,
      s(:args,
        s(:arg, :dest),
        s(:arg, :block)),
      s(:begin,
        s(:if,
          s(:and,
            s(:lvar, :dest),
            s(:lvar, :block)),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "both arg and block given for HTTP method")), nil),
        s(:if,
          s(:lvar, :block),
          s(:send,
            s(:const,
              s(:const, nil, :Net), :ReadAdapter), :new,
            s(:lvar, :block)),
          s(:or,
            s(:lvar, :dest),
            s(:str, ""))))),
    s(:class,
      s(:const, nil, :Inflater), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :socket)),
          s(:begin,
            s(:ivasgn, :@socket,
              s(:lvar, :socket)),
            s(:ivasgn, :@inflate,
              s(:send,
                s(:const,
                  s(:const, nil, :Zlib), :Inflate), :new,
                s(:send,
                  s(:int, 32), :+,
                  s(:const,
                    s(:const, nil, :Zlib), :MAX_WBITS)))))),
        s(:def, :finish,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send,
                  s(:ivar, :@inflate), :total_in), :==,
                s(:int, 0)),
              s(:return), nil),
            s(:send,
              s(:ivar, :@inflate), :finish))),
        s(:def, :inflate_adapter,
          s(:args,
            s(:arg, :dest)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :dest), :respond_to?,
                s(:sym, :set_encoding)),
              s(:send,
                s(:lvar, :dest), :set_encoding,
                s(:const,
                  s(:const, nil, :Encoding), :ASCII_8BIT)),
              s(:if,
                s(:send,
                  s(:lvar, :dest), :respond_to?,
                  s(:sym, :force_encoding)),
                s(:send,
                  s(:lvar, :dest), :force_encoding,
                  s(:const,
                    s(:const, nil, :Encoding), :ASCII_8BIT)), nil)),
            s(:lvasgn, :block,
              s(:block,
                s(:send, nil, :proc),
                s(:args,
                  s(:arg, :compressed_chunk)),
                s(:block,
                  s(:send,
                    s(:ivar, :@inflate), :inflate,
                    s(:lvar, :compressed_chunk)),
                  s(:args,
                    s(:arg, :chunk)),
                  s(:send,
                    s(:lvar, :dest), :<<,
                    s(:lvar, :chunk))))),
            s(:send,
              s(:const,
                s(:const, nil, :Net), :ReadAdapter), :new,
              s(:lvar, :block)))),
        s(:def, :read,
          s(:args,
            s(:arg, :clen),
            s(:arg, :dest),
            s(:optarg, :ignore_eof,
              s(:false))),
          s(:begin,
            s(:lvasgn, :temp_dest,
              s(:send, nil, :inflate_adapter,
                s(:lvar, :dest))),
            s(:send,
              s(:ivar, :@socket), :read,
              s(:lvar, :clen),
              s(:lvar, :temp_dest),
              s(:lvar, :ignore_eof)))),
        s(:def, :read_all,
          s(:args,
            s(:arg, :dest)),
          s(:begin,
            s(:lvasgn, :temp_dest,
              s(:send, nil, :inflate_adapter,
                s(:lvar, :dest))),
            s(:send,
              s(:ivar, :@socket), :read_all,
              s(:lvar, :temp_dest))))))))
