s(:module,
  s(:const,
    s(:const, nil, :Net), :HTTPHeader),
  s(:begin,
    s(:def, :initialize_http_header,
      s(:args,
        s(:arg, :initheader)),
      s(:begin,
        s(:ivasgn, :@header,
          s(:hash)),
        s(:if,
          s(:lvar, :initheader), nil,
          s(:return)),
        s(:block,
          s(:send,
            s(:lvar, :initheader), :each),
          s(:args,
            s(:arg, :key),
            s(:arg, :value)),
          s(:begin,
            s(:if,
              s(:and,
                s(:send, nil, :key?,
                  s(:lvar, :key)),
                s(:gvar, :$VERBOSE)),
              s(:send, nil, :warn,
                s(:dstr,
                  s(:str, "net/http: warning: duplicated HTTP header: "),
                  s(:begin,
                    s(:lvar, :key)))), nil),
            s(:send,
              s(:ivar, :@header), :[]=,
              s(:send,
                s(:lvar, :key), :downcase),
              s(:array,
                s(:send,
                  s(:lvar, :value), :strip))))))),
    s(:def, :size,
      s(:args),
      s(:send,
        s(:ivar, :@header), :size)),
    s(:alias,
      s(:sym, :length),
      s(:sym, :size)),
    s(:def, :[],
      s(:args,
        s(:arg, :key)),
      s(:begin,
        s(:or,
          s(:lvasgn, :a,
            s(:send,
              s(:ivar, :@header), :[],
              s(:send,
                s(:lvar, :key), :downcase))),
          s(:return,
            s(:nil))),
        s(:send,
          s(:lvar, :a), :join,
          s(:str, ", ")))),
    s(:def, :[]=,
      s(:args,
        s(:arg, :key),
        s(:arg, :val)),
      s(:begin,
        s(:if,
          s(:lvar, :val), nil,
          s(:begin,
            s(:send,
              s(:ivar, :@header), :delete,
              s(:send,
                s(:lvar, :key), :downcase)),
            s(:return,
              s(:lvar, :val)))),
        s(:send,
          s(:ivar, :@header), :[]=,
          s(:send,
            s(:lvar, :key), :downcase),
          s(:array,
            s(:lvar, :val))))),
    s(:def, :add_field,
      s(:args,
        s(:arg, :key),
        s(:arg, :val)),
      s(:if,
        s(:send,
          s(:ivar, :@header), :key?,
          s(:send,
            s(:lvar, :key), :downcase)),
        s(:send,
          s(:send,
            s(:ivar, :@header), :[],
            s(:send,
              s(:lvar, :key), :downcase)), :push,
          s(:lvar, :val)),
        s(:send,
          s(:ivar, :@header), :[]=,
          s(:send,
            s(:lvar, :key), :downcase),
          s(:array,
            s(:lvar, :val))))),
    s(:def, :get_fields,
      s(:args,
        s(:arg, :key)),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@header), :[],
            s(:send,
              s(:lvar, :key), :downcase)), nil,
          s(:return,
            s(:nil))),
        s(:send,
          s(:send,
            s(:ivar, :@header), :[],
            s(:send,
              s(:lvar, :key), :downcase)), :dup))),
    s(:def, :fetch,
      s(:args,
        s(:arg, :key),
        s(:restarg, :args),
        s(:blockarg, :block)),
      s(:begin,
        s(:lvasgn, :a,
          s(:send,
            s(:ivar, :@header), :fetch,
            s(:send,
              s(:lvar, :key), :downcase),
            s(:splat,
              s(:lvar, :args)),
            s(:block_pass,
              s(:lvar, :block)))),
        s(:if,
          s(:send,
            s(:lvar, :a), :kind_of?,
            s(:const, nil, :Array)),
          s(:send,
            s(:lvar, :a), :join,
            s(:str, ", ")),
          s(:lvar, :a)))),
    s(:def, :each_header,
      s(:args),
      s(:begin,
        s(:or,
          s(:send, nil, :block_given?),
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:block,
          s(:send,
            s(:ivar, :@header), :each),
          s(:args,
            s(:arg, :k),
            s(:arg, :va)),
          s(:yield,
            s(:lvar, :k),
            s(:send,
              s(:lvar, :va), :join,
              s(:str, ", ")))))),
    s(:alias,
      s(:sym, :each),
      s(:sym, :each_header)),
    s(:def, :each_name,
      s(:args,
        s(:blockarg, :block)),
      s(:begin,
        s(:or,
          s(:send, nil, :block_given?),
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:send,
          s(:ivar, :@header), :each_key,
          s(:block_pass,
            s(:lvar, :block))))),
    s(:alias,
      s(:sym, :each_key),
      s(:sym, :each_name)),
    s(:def, :each_capitalized_name,
      s(:args),
      s(:begin,
        s(:or,
          s(:send, nil, :block_given?),
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:block,
          s(:send,
            s(:ivar, :@header), :each_key),
          s(:args,
            s(:arg, :k)),
          s(:yield,
            s(:send, nil, :capitalize,
              s(:lvar, :k)))))),
    s(:def, :each_value,
      s(:args),
      s(:begin,
        s(:or,
          s(:send, nil, :block_given?),
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:block,
          s(:send,
            s(:ivar, :@header), :each_value),
          s(:args,
            s(:arg, :va)),
          s(:yield,
            s(:send,
              s(:lvar, :va), :join,
              s(:str, ", ")))))),
    s(:def, :delete,
      s(:args,
        s(:arg, :key)),
      s(:send,
        s(:ivar, :@header), :delete,
        s(:send,
          s(:lvar, :key), :downcase))),
    s(:def, :key?,
      s(:args,
        s(:arg, :key)),
      s(:send,
        s(:ivar, :@header), :key?,
        s(:send,
          s(:lvar, :key), :downcase))),
    s(:def, :to_hash,
      s(:args),
      s(:send,
        s(:ivar, :@header), :dup)),
    s(:def, :each_capitalized,
      s(:args),
      s(:begin,
        s(:or,
          s(:send, nil, :block_given?),
          s(:return,
            s(:send, nil, :enum_for,
              s(:send, nil, :__method__)))),
        s(:block,
          s(:send,
            s(:ivar, :@header), :each),
          s(:args,
            s(:arg, :k),
            s(:arg, :v)),
          s(:yield,
            s(:send, nil, :capitalize,
              s(:lvar, :k)),
            s(:send,
              s(:lvar, :v), :join,
              s(:str, ", ")))))),
    s(:alias,
      s(:sym, :canonical_each),
      s(:sym, :each_capitalized)),
    s(:def, :capitalize,
      s(:args,
        s(:arg, :name)),
      s(:send,
        s(:block,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :name), :to_s), :split,
              s(:regexp,
                s(:str, "-"),
                s(:regopt))), :map),
          s(:args,
            s(:arg, :s)),
          s(:send,
            s(:lvar, :s), :capitalize)), :join,
        s(:str, "-"))),
    s(:send, nil, :private,
      s(:sym, :capitalize)),
    s(:def, :range,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@header), :[],
            s(:str, "range")), nil,
          s(:return,
            s(:nil))),
        s(:lvasgn, :value,
          s(:send,
            s(:self), :[],
            s(:str, "Range"))),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "\\Abytes=((?:,[ \\t]*)*(?:\\d+-\\d*|-\\d+)(?:[ \\t]*,(?:[ \\t]*\\d+-\\d*|-\\d+)?)*)\\z"),
              s(:regopt)),
            s(:lvar, :value)), nil,
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Net), :HTTPHeaderSyntaxError),
            s(:dstr,
              s(:str, "invalid syntax for byte-ranges-specifier: '"),
              s(:begin,
                s(:lvar, :value)),
              s(:str, "'")))),
        s(:lvasgn, :byte_range_set,
          s(:nth_ref, 1)),
        s(:lvasgn, :result,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :byte_range_set), :split,
                s(:regexp,
                  s(:str, ","),
                  s(:regopt))), :map),
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:or,
                s(:lvasgn, :m,
                  s(:send,
                    s(:regexp,
                      s(:str, "(\\d+)?\\s*-\\s*(\\d+)?"),
                      s(:regopt, :i)), :match,
                    s(:lvar, :spec))),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :Net), :HTTPHeaderSyntaxError),
                  s(:dstr,
                    s(:str, "invalid byte-range-spec: '"),
                    s(:begin,
                      s(:lvar, :spec)),
                    s(:str, "'")))),
              s(:lvasgn, :d1,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 1)), :to_i)),
              s(:lvasgn, :d2,
                s(:send,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 2)), :to_i)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 2))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :d1), :>,
                      s(:lvar, :d2)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :HTTPHeaderSyntaxError),
                      s(:dstr,
                        s(:str, "last-byte-pos MUST greater than or equal to first-byte-pos but '"),
                        s(:begin,
                          s(:lvar, :spec)),
                        s(:str, "'"))), nil),
                  s(:irange,
                    s(:lvar, :d1),
                    s(:lvar, :d2))),
                s(:if,
                  s(:send,
                    s(:lvar, :m), :[],
                    s(:int, 1)),
                  s(:irange,
                    s(:lvar, :d1),
                    s(:int, -1)),
                  s(:if,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 2)),
                    s(:irange,
                      s(:send,
                        s(:lvar, :d2), :-@),
                      s(:int, -1)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :HTTPHeaderSyntaxError),
                      s(:str, "range is not specified")))))))),
        s(:if,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :result), :size), :==,
                s(:int, 1)),
              s(:send,
                s(:send,
                  s(:send,
                    s(:lvar, :result), :[],
                    s(:int, 0)), :begin), :==,
                s(:int, 0))),
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :result), :[],
                  s(:int, 0)), :end), :==,
              s(:int, -1))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Net), :HTTPHeaderSyntaxError),
            s(:str, "only one suffix-byte-range-spec with zero suffix-length")), nil),
        s(:lvar, :result))),
    s(:def, :set_range,
      s(:args,
        s(:arg, :r),
        s(:optarg, :e,
          s(:nil))),
      s(:begin,
        s(:if,
          s(:lvar, :r), nil,
          s(:begin,
            s(:send,
              s(:ivar, :@header), :delete,
              s(:str, "range")),
            s(:return,
              s(:lvar, :r)))),
        s(:if,
          s(:lvar, :e),
          s(:lvasgn, :r,
            s(:begin,
              s(:erange,
                s(:lvar, :r),
                s(:send,
                  s(:lvar, :r), :+,
                  s(:lvar, :e))))), nil),
        s(:case,
          s(:lvar, :r),
          s(:when,
            s(:const, nil, :Numeric),
            s(:begin,
              s(:lvasgn, :n,
                s(:send,
                  s(:lvar, :r), :to_i)),
              s(:lvasgn, :rangestr,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :n), :>,
                      s(:int, 0)),
                    s(:dstr,
                      s(:str, "0-"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :n), :-,
                          s(:int, 1)))),
                    s(:dstr,
                      s(:str, "-"),
                      s(:begin,
                        s(:send,
                          s(:lvar, :n), :-@)))))))),
          s(:when,
            s(:const, nil, :Range),
            s(:begin,
              s(:lvasgn, :first,
                s(:send,
                  s(:lvar, :r), :first)),
              s(:lvasgn, :last,
                s(:send,
                  s(:lvar, :r), :end)),
              s(:if,
                s(:send,
                  s(:lvar, :r), :exclude_end?),
                s(:op_asgn,
                  s(:lvasgn, :last), :-,
                  s(:int, 1)), nil),
              s(:if,
                s(:send,
                  s(:lvar, :last), :==,
                  s(:int, -1)),
                s(:lvasgn, :rangestr,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :first), :>,
                        s(:int, 0)),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :first)),
                        s(:str, "-")),
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:send,
                            s(:lvar, :first), :-@)))))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :first), :<,
                      s(:int, 0)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :HTTPHeaderSyntaxError),
                      s(:str, "range.first is negative")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :last), :<,
                      s(:int, 0)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :HTTPHeaderSyntaxError),
                      s(:str, "range.last is negative")), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :first), :>,
                      s(:lvar, :last)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :HTTPHeaderSyntaxError),
                      s(:str, "must be .first < .last")), nil),
                  s(:lvasgn, :rangestr,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :first)),
                      s(:str, "-"),
                      s(:begin,
                        s(:lvar, :last)))))))),
          s(:send, nil, :raise,
            s(:const, nil, :TypeError),
            s(:str, "Range/Integer is required"))),
        s(:send,
          s(:ivar, :@header), :[]=,
          s(:str, "range"),
          s(:array,
            s(:dstr,
              s(:str, "bytes="),
              s(:begin,
                s(:lvar, :rangestr))))),
        s(:lvar, :r))),
    s(:alias,
      s(:sym, :range=),
      s(:sym, :set_range)),
    s(:def, :content_length,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :key?,
            s(:str, "Content-Length")), nil,
          s(:return,
            s(:nil))),
        s(:or,
          s(:lvasgn, :len,
            s(:send,
              s(:send,
                s(:self), :[],
                s(:str, "Content-Length")), :slice,
              s(:regexp,
                s(:str, "\\d+"),
                s(:regopt)))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Net), :HTTPHeaderSyntaxError),
            s(:str, "wrong Content-Length format"))),
        s(:send,
          s(:lvar, :len), :to_i))),
    s(:def, :content_length=,
      s(:args,
        s(:arg, :len)),
      s(:begin,
        s(:if,
          s(:lvar, :len), nil,
          s(:begin,
            s(:send,
              s(:ivar, :@header), :delete,
              s(:str, "content-length")),
            s(:return,
              s(:nil)))),
        s(:send,
          s(:ivar, :@header), :[]=,
          s(:str, "content-length"),
          s(:array,
            s(:send,
              s(:send,
                s(:lvar, :len), :to_i), :to_s))))),
    s(:def, :chunked?,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@header), :[],
            s(:str, "transfer-encoding")), nil,
          s(:return,
            s(:false))),
        s(:lvasgn, :field,
          s(:send,
            s(:self), :[],
            s(:str, "Transfer-Encoding"))),
        s(:if,
          s(:begin,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "(?:\\A|[^\\-\\w])chunked(?![\\-\\w])"),
                s(:regopt, :i)),
              s(:lvar, :field))),
          s(:true),
          s(:false)))),
    s(:def, :content_range,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@header), :[],
            s(:str, "content-range")), nil,
          s(:return,
            s(:nil))),
        s(:or,
          s(:lvasgn, :m,
            s(:send,
              s(:regexp,
                s(:str, "bytes\\s+(\\d+)-(\\d+)/(\\d+|\\*)"),
                s(:regopt, :i)), :match,
              s(:send,
                s(:self), :[],
                s(:str, "Content-Range")))),
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :Net), :HTTPHeaderSyntaxError),
            s(:str, "wrong Content-Range format"))),
        s(:irange,
          s(:send,
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 1)), :to_i),
          s(:send,
            s(:send,
              s(:lvar, :m), :[],
              s(:int, 2)), :to_i)))),
    s(:def, :range_length,
      s(:args),
      s(:begin,
        s(:or,
          s(:lvasgn, :r,
            s(:send, nil, :content_range)),
          s(:return,
            s(:nil))),
        s(:send,
          s(:send,
            s(:send,
              s(:lvar, :r), :end), :-,
            s(:send,
              s(:lvar, :r), :begin)), :+,
          s(:int, 1)))),
    s(:def, :content_type,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :main_type), nil,
          s(:return,
            s(:nil))),
        s(:if,
          s(:send, nil, :sub_type),
          s(:dstr,
            s(:begin,
              s(:send, nil, :main_type)),
            s(:str, "/"),
            s(:begin,
              s(:send, nil, :sub_type))),
          s(:send, nil, :main_type)))),
    s(:def, :main_type,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@header), :[],
            s(:str, "content-type")), nil,
          s(:return,
            s(:nil))),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:self), :[],
                        s(:str, "Content-Type")), :split,
                      s(:str, ";")), :first), :to_s), :split,
                s(:str, "/")), :[],
              s(:int, 0)), :to_s), :strip))),
    s(:def, :sub_type,
      s(:args),
      s(:begin,
        s(:if,
          s(:send,
            s(:ivar, :@header), :[],
            s(:str, "content-type")), nil,
          s(:return,
            s(:nil))),
        s(:masgn,
          s(:mlhs,
            s(:lvasgn, :_),
            s(:lvasgn, :sub)),
          s(:array,
            s(:splat,
              s(:send,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:self), :[],
                        s(:str, "Content-Type")), :split,
                      s(:str, ";")), :first), :to_s), :split,
                s(:str, "/"))))),
        s(:if,
          s(:lvar, :sub), nil,
          s(:return,
            s(:nil))),
        s(:send,
          s(:lvar, :sub), :strip))),
    s(:def, :type_params,
      s(:args),
      s(:begin,
        s(:lvasgn, :result,
          s(:hash)),
        s(:lvasgn, :list,
          s(:send,
            s(:send,
              s(:send,
                s(:self), :[],
                s(:str, "Content-Type")), :to_s), :split,
            s(:str, ";"))),
        s(:send,
          s(:lvar, :list), :shift),
        s(:block,
          s(:send,
            s(:lvar, :list), :each),
          s(:args,
            s(:arg, :param)),
          s(:begin,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :k),
                s(:lvasgn, :v)),
              s(:array,
                s(:splat,
                  s(:send,
                    s(:lvar, :param), :split,
                    s(:str, "="),
                    s(:int, 2))))),
            s(:send,
              s(:lvar, :result), :[]=,
              s(:send,
                s(:lvar, :k), :strip),
              s(:send,
                s(:lvar, :v), :strip)))),
        s(:lvar, :result))),
    s(:def, :set_content_type,
      s(:args,
        s(:arg, :type),
        s(:optarg, :params,
          s(:hash))),
      s(:send,
        s(:ivar, :@header), :[]=,
        s(:str, "content-type"),
        s(:array,
          s(:send,
            s(:lvar, :type), :+,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :params), :map),
                s(:args,
                  s(:arg, :k),
                  s(:arg, :v)),
                s(:dstr,
                  s(:str, "; "),
                  s(:begin,
                    s(:lvar, :k)),
                  s(:str, "="),
                  s(:begin,
                    s(:lvar, :v)))), :join,
              s(:str, "")))))),
    s(:alias,
      s(:sym, :content_type=),
      s(:sym, :set_content_type)),
    s(:def, :set_form_data,
      s(:args,
        s(:arg, :params),
        s(:optarg, :sep,
          s(:str, "&"))),
      s(:begin,
        s(:lvasgn, :query,
          s(:send,
            s(:const, nil, :URI), :encode_www_form,
            s(:lvar, :params))),
        s(:if,
          s(:send,
            s(:lvar, :sep), :!=,
            s(:str, "&")),
          s(:send,
            s(:lvar, :query), :gsub!,
            s(:regexp,
              s(:str, "&"),
              s(:regopt)),
            s(:lvar, :sep)), nil),
        s(:send,
          s(:self), :body=,
          s(:lvar, :query)),
        s(:send,
          s(:self), :content_type=,
          s(:str, "application/x-www-form-urlencoded")))),
    s(:alias,
      s(:sym, :form_data=),
      s(:sym, :set_form_data)),
    s(:def, :set_form,
      s(:args,
        s(:arg, :params),
        s(:optarg, :enctype,
          s(:str, "application/x-www-form-urlencoded")),
        s(:optarg, :formopt,
          s(:hash))),
      s(:begin,
        s(:ivasgn, :@body_data,
          s(:lvar, :params)),
        s(:ivasgn, :@body,
          s(:nil)),
        s(:ivasgn, :@body_stream,
          s(:nil)),
        s(:ivasgn, :@form_option,
          s(:lvar, :formopt)),
        s(:case,
          s(:lvar, :enctype),
          s(:when,
            s(:regexp,
              s(:str, "\\Aapplication/x-www-form-urlencoded\\z"),
              s(:regopt, :i)),
            s(:regexp,
              s(:str, "\\Amultipart/form-data\\z"),
              s(:regopt, :i)),
            s(:send,
              s(:self), :content_type=,
              s(:lvar, :enctype))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:dstr,
              s(:str, "invalid enctype: "),
              s(:begin,
                s(:lvar, :enctype))))))),
    s(:def, :basic_auth,
      s(:args,
        s(:arg, :account),
        s(:arg, :password)),
      s(:send,
        s(:ivar, :@header), :[]=,
        s(:str, "authorization"),
        s(:array,
          s(:send, nil, :basic_encode,
            s(:lvar, :account),
            s(:lvar, :password))))),
    s(:def, :proxy_basic_auth,
      s(:args,
        s(:arg, :account),
        s(:arg, :password)),
      s(:send,
        s(:ivar, :@header), :[]=,
        s(:str, "proxy-authorization"),
        s(:array,
          s(:send, nil, :basic_encode,
            s(:lvar, :account),
            s(:lvar, :password))))),
    s(:def, :basic_encode,
      s(:args,
        s(:arg, :account),
        s(:arg, :password)),
      s(:send,
        s(:str, "Basic "), :+,
        s(:send,
          s(:send,
            s(:array,
              s(:dstr,
                s(:begin,
                  s(:lvar, :account)),
                s(:str, ":"),
                s(:begin,
                  s(:lvar, :password)))), :pack,
            s(:str, "m")), :delete,
          s(:str, "\r\n")))),
    s(:send, nil, :private,
      s(:sym, :basic_encode)),
    s(:def, :connection_close?,
      s(:args),
      s(:or,
        s(:send,
          s(:send, nil, :tokens,
            s(:send,
              s(:ivar, :@header), :[],
              s(:str, "connection"))), :include?,
          s(:str, "close")),
        s(:send,
          s(:send, nil, :tokens,
            s(:send,
              s(:ivar, :@header), :[],
              s(:str, "proxy-connection"))), :include?,
          s(:str, "close")))),
    s(:def, :connection_keep_alive?,
      s(:args),
      s(:or,
        s(:send,
          s(:send, nil, :tokens,
            s(:send,
              s(:ivar, :@header), :[],
              s(:str, "connection"))), :include?,
          s(:str, "keep-alive")),
        s(:send,
          s(:send, nil, :tokens,
            s(:send,
              s(:ivar, :@header), :[],
              s(:str, "proxy-connection"))), :include?,
          s(:str, "keep-alive")))),
    s(:def, :tokens,
      s(:args,
        s(:arg, :vals)),
      s(:begin,
        s(:if,
          s(:lvar, :vals), nil,
          s(:return,
            s(:array))),
        s(:block,
          s(:send,
            s(:block,
              s(:send,
                s(:send,
                  s(:block,
                    s(:send,
                      s(:lvar, :vals), :map),
                    s(:args,
                      s(:arg, :v)),
                    s(:send,
                      s(:lvar, :v), :split,
                      s(:str, ","))), :flatten), :reject),
              s(:args,
                s(:arg, :str)),
              s(:send,
                s(:send,
                  s(:lvar, :str), :strip), :empty?)), :map),
          s(:args,
            s(:arg, :tok)),
          s(:send,
            s(:send,
              s(:lvar, :tok), :strip), :downcase)))),
    s(:send, nil, :private,
      s(:sym, :tokens))))
