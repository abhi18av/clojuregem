s(:class,
  s(:const,
    s(:const, nil, :Net), :HTTPGenericRequest), nil,
  s(:begin,
    s(:send, nil, :include,
      s(:const,
        s(:const, nil, :Net), :HTTPHeader)),
    s(:def, :initialize,
      s(:args,
        s(:arg, :m),
        s(:arg, :reqbody),
        s(:arg, :resbody),
        s(:arg, :uri_or_path),
        s(:optarg, :initheader,
          s(:nil))),
      s(:begin,
        s(:ivasgn, :@method,
          s(:lvar, :m)),
        s(:ivasgn, :@request_has_body,
          s(:lvar, :reqbody)),
        s(:ivasgn, :@response_has_body,
          s(:lvar, :resbody)),
        s(:if,
          s(:send,
            s(:const, nil, :URI), :===,
            s(:lvar, :uri_or_path)),
          s(:begin,
            s(:ivasgn, :@uri,
              s(:send,
                s(:lvar, :uri_or_path), :dup)),
            s(:lvasgn, :host,
              s(:send,
                s(:send,
                  s(:ivar, :@uri), :hostname), :dup)),
            s(:if,
              s(:send,
                s(:send,
                  s(:ivar, :@uri), :port), :!=,
                s(:send,
                  s(:ivar, :@uri), :default_port)),
              s(:send,
                s(:send,
                  s(:lvar, :host), :<<,
                  s(:send,
                    s(:str, ":"), :freeze)), :<<,
                s(:send,
                  s(:send,
                    s(:ivar, :@uri), :port), :to_s)), nil),
            s(:ivasgn, :@path,
              s(:send,
                s(:lvar, :uri_or_path), :request_uri)),
            s(:if,
              s(:ivar, :@path), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "no HTTP request path given")))),
          s(:begin,
            s(:ivasgn, :@uri,
              s(:nil)),
            s(:lvasgn, :host,
              s(:nil)),
            s(:if,
              s(:lvar, :uri_or_path), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "no HTTP request path given"))),
            s(:if,
              s(:send,
                s(:lvar, :uri_or_path), :empty?),
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:str, "HTTP request path is empty")), nil),
            s(:ivasgn, :@path,
              s(:send,
                s(:lvar, :uri_or_path), :dup)))),
        s(:ivasgn, :@decode_content,
          s(:false)),
        s(:if,
          s(:and,
            s(:ivar, :@response_has_body),
            s(:const,
              s(:const,
                s(:const, nil, :Net), :HTTP), :HAVE_ZLIB)),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :initheader), :!),
              s(:send,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :initheader), :keys), :any?),
                  s(:args,
                    s(:arg, :k)),
                  s(:send,
                    s(:array,
                      s(:str, "accept-encoding"),
                      s(:str, "range")), :include?,
                    s(:send,
                      s(:lvar, :k), :downcase))), :!)),
            s(:begin,
              s(:ivasgn, :@decode_content,
                s(:true)),
              s(:lvasgn, :initheader,
                s(:if,
                  s(:lvar, :initheader),
                  s(:send,
                    s(:lvar, :initheader), :dup),
                  s(:hash))),
              s(:send,
                s(:lvar, :initheader), :[]=,
                s(:str, "accept-encoding"),
                s(:str, "gzip;q=1.0,deflate;q=0.6,identity;q=0.3"))), nil), nil),
        s(:send, nil, :initialize_http_header,
          s(:lvar, :initheader)),
        s(:or_asgn,
          s(:send,
            s(:self), :[],
            s(:str, "Accept")),
          s(:str, "*/*")),
        s(:or_asgn,
          s(:send,
            s(:self), :[],
            s(:str, "User-Agent")),
          s(:str, "Ruby")),
        s(:if,
          s(:lvar, :host),
          s(:or_asgn,
            s(:send,
              s(:self), :[],
              s(:str, "Host")),
            s(:lvar, :host)), nil),
        s(:ivasgn, :@body,
          s(:nil)),
        s(:ivasgn, :@body_stream,
          s(:nil)),
        s(:ivasgn, :@body_data,
          s(:nil)))),
    s(:send, nil, :attr_reader,
      s(:sym, :method)),
    s(:send, nil, :attr_reader,
      s(:sym, :path)),
    s(:send, nil, :attr_reader,
      s(:sym, :uri)),
    s(:send, nil, :attr_reader,
      s(:sym, :decode_content)),
    s(:def, :inspect,
      s(:args),
      s(:dstr,
        s(:str, "#<"),
        s(:begin,
          s(:send,
            s(:self), :class)),
        s(:str, " "),
        s(:begin,
          s(:ivar, :@method)),
        s(:str, ">"))),
    s(:def, :[]=,
      s(:args,
        s(:arg, :key),
        s(:arg, :val)),
      s(:begin,
        s(:if,
          s(:send,
            s(:send,
              s(:lvar, :key), :downcase), :==,
            s(:str, "accept-encoding")),
          s(:ivasgn, :@decode_content,
            s(:false)), nil),
        s(:super,
          s(:lvar, :key),
          s(:lvar, :val)))),
    s(:def, :request_body_permitted?,
      s(:args),
      s(:ivar, :@request_has_body)),
    s(:def, :response_body_permitted?,
      s(:args),
      s(:ivar, :@response_has_body)),
    s(:def, :body_exist?,
      s(:args),
      s(:begin,
        s(:if,
          s(:gvar, :$VERBOSE),
          s(:send, nil, :warn,
            s(:str, "Net::HTTPRequest#body_exist? is obsolete; use response_body_permitted?")), nil),
        s(:send, nil, :response_body_permitted?))),
    s(:send, nil, :attr_reader,
      s(:sym, :body)),
    s(:def, :body=,
      s(:args,
        s(:arg, :str)),
      s(:begin,
        s(:ivasgn, :@body,
          s(:lvar, :str)),
        s(:ivasgn, :@body_stream,
          s(:nil)),
        s(:ivasgn, :@body_data,
          s(:nil)),
        s(:lvar, :str))),
    s(:send, nil, :attr_reader,
      s(:sym, :body_stream)),
    s(:def, :body_stream=,
      s(:args,
        s(:arg, :input)),
      s(:begin,
        s(:ivasgn, :@body,
          s(:nil)),
        s(:ivasgn, :@body_stream,
          s(:lvar, :input)),
        s(:ivasgn, :@body_data,
          s(:nil)),
        s(:lvar, :input))),
    s(:def, :set_body_internal,
      s(:args,
        s(:arg, :str)),
      s(:begin,
        s(:if,
          s(:and,
            s(:lvar, :str),
            s(:begin,
              s(:or,
                s(:ivar, :@body),
                s(:ivar, :@body_stream)))),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "both of body argument and HTTPRequest#body set")), nil),
        s(:if,
          s(:lvar, :str),
          s(:send,
            s(:self), :body=,
            s(:lvar, :str)), nil),
        s(:if,
          s(:and,
            s(:and,
              s(:and,
                s(:send,
                  s(:ivar, :@body), :nil?),
                s(:send,
                  s(:ivar, :@body_stream), :nil?)),
              s(:send,
                s(:ivar, :@body_data), :nil?)),
            s(:send, nil, :request_body_permitted?)),
          s(:send,
            s(:self), :body=,
            s(:str, "")), nil))),
    s(:def, :exec,
      s(:args,
        s(:arg, :sock),
        s(:arg, :ver),
        s(:arg, :path)),
      s(:if,
        s(:ivar, :@body),
        s(:send, nil, :send_request_with_body,
          s(:lvar, :sock),
          s(:lvar, :ver),
          s(:lvar, :path),
          s(:ivar, :@body)),
        s(:if,
          s(:ivar, :@body_stream),
          s(:send, nil, :send_request_with_body_stream,
            s(:lvar, :sock),
            s(:lvar, :ver),
            s(:lvar, :path),
            s(:ivar, :@body_stream)),
          s(:if,
            s(:ivar, :@body_data),
            s(:send, nil, :send_request_with_body_data,
              s(:lvar, :sock),
              s(:lvar, :ver),
              s(:lvar, :path),
              s(:ivar, :@body_data)),
            s(:send, nil, :write_header,
              s(:lvar, :sock),
              s(:lvar, :ver),
              s(:lvar, :path)))))),
    s(:def, :update_uri,
      s(:args,
        s(:arg, :addr),
        s(:arg, :port),
        s(:arg, :ssl)),
      s(:begin,
        s(:if,
          s(:ivar, :@uri), nil,
          s(:return)),
        s(:if,
          s(:lvar, :ssl),
          s(:begin,
            s(:lvasgn, :scheme,
              s(:send,
                s(:str, "https"), :freeze)),
            s(:lvasgn, :klass,
              s(:const,
                s(:const, nil, :URI), :HTTPS))),
          s(:begin,
            s(:lvasgn, :scheme,
              s(:send,
                s(:str, "http"), :freeze)),
            s(:lvasgn, :klass,
              s(:const,
                s(:const, nil, :URI), :HTTP)))),
        s(:if,
          s(:lvasgn, :host,
            s(:send,
              s(:self), :[],
              s(:str, "host"))),
          s(:send,
            s(:lvar, :host), :sub!,
            s(:regexp,
              s(:str, ":.*"),
              s(:regopt, :s)),
            s(:send,
              s(:str, ""), :freeze)),
          s(:if,
            s(:lvasgn, :host,
              s(:send,
                s(:ivar, :@uri), :host)), nil,
            s(:lvasgn, :host,
              s(:lvar, :addr)))),
        s(:if,
          s(:send,
            s(:ivar, :@uri), :is_a?,
            s(:lvar, :klass)),
          s(:begin,
            s(:send,
              s(:ivar, :@uri), :host=,
              s(:lvar, :host)),
            s(:send,
              s(:ivar, :@uri), :port=,
              s(:lvar, :port))),
          s(:ivasgn, :@uri,
            s(:send,
              s(:lvar, :klass), :new,
              s(:lvar, :scheme),
              s(:send,
                s(:ivar, :@uri), :userinfo),
              s(:lvar, :host),
              s(:lvar, :port),
              s(:nil),
              s(:send,
                s(:ivar, :@uri), :path),
              s(:nil),
              s(:send,
                s(:ivar, :@uri), :query),
              s(:nil)))))),
    s(:send, nil, :private),
    s(:class,
      s(:const, nil, :Chunker), nil,
      s(:begin,
        s(:def, :initialize,
          s(:args,
            s(:arg, :sock)),
          s(:begin,
            s(:ivasgn, :@sock,
              s(:lvar, :sock)),
            s(:ivasgn, :@prev,
              s(:nil)))),
        s(:def, :write,
          s(:args,
            s(:arg, :buf)),
          s(:begin,
            s(:send,
              s(:ivar, :@sock), :write,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :buf), :bytesize), :to_s,
                    s(:int, 16))),
                s(:str, "\r\n"))),
            s(:lvasgn, :rv,
              s(:send,
                s(:ivar, :@sock), :write,
                s(:lvar, :buf))),
            s(:send,
              s(:ivar, :@sock), :write,
              s(:str, "\r\n")),
            s(:lvar, :rv))),
        s(:def, :finish,
          s(:args),
          s(:send,
            s(:ivar, :@sock), :write,
            s(:str, "0\r\n\r\n"))))),
    s(:def, :send_request_with_body,
      s(:args,
        s(:arg, :sock),
        s(:arg, :ver),
        s(:arg, :path),
        s(:arg, :body)),
      s(:begin,
        s(:send,
          s(:self), :content_length=,
          s(:send,
            s(:lvar, :body), :bytesize)),
        s(:send, nil, :delete,
          s(:str, "Transfer-Encoding")),
        s(:send, nil, :supply_default_content_type),
        s(:send, nil, :write_header,
          s(:lvar, :sock),
          s(:lvar, :ver),
          s(:lvar, :path)),
        s(:if,
          s(:send,
            s(:lvar, :sock), :continue_timeout),
          s(:send, nil, :wait_for_continue,
            s(:lvar, :sock),
            s(:lvar, :ver)), nil),
        s(:send,
          s(:lvar, :sock), :write,
          s(:lvar, :body)))),
    s(:def, :send_request_with_body_stream,
      s(:args,
        s(:arg, :sock),
        s(:arg, :ver),
        s(:arg, :path),
        s(:arg, :f)),
      s(:begin,
        s(:if,
          s(:or,
            s(:send, nil, :content_length),
            s(:send, nil, :chunked?)), nil,
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "Content-Length not given and Transfer-Encoding is not `chunked'"))),
        s(:send, nil, :supply_default_content_type),
        s(:send, nil, :write_header,
          s(:lvar, :sock),
          s(:lvar, :ver),
          s(:lvar, :path)),
        s(:if,
          s(:send,
            s(:lvar, :sock), :continue_timeout),
          s(:send, nil, :wait_for_continue,
            s(:lvar, :sock),
            s(:lvar, :ver)), nil),
        s(:if,
          s(:send, nil, :chunked?),
          s(:begin,
            s(:lvasgn, :chunker,
              s(:send,
                s(:const, nil, :Chunker), :new,
                s(:lvar, :sock))),
            s(:send,
              s(:const, nil, :IO), :copy_stream,
              s(:lvar, :f),
              s(:lvar, :chunker)),
            s(:send,
              s(:lvar, :chunker), :finish)),
          s(:send,
            s(:const, nil, :IO), :copy_stream,
            s(:lvar, :f),
            s(:send,
              s(:lvar, :sock), :io))))),
    s(:def, :send_request_with_body_data,
      s(:args,
        s(:arg, :sock),
        s(:arg, :ver),
        s(:arg, :path),
        s(:arg, :params)),
      s(:begin,
        s(:if,
          s(:send,
            s(:regexp,
              s(:str, "\\Amultipart/form-data\\z"),
              s(:regopt, :i)), :!~,
            s(:send,
              s(:self), :content_type)),
          s(:begin,
            s(:send,
              s(:self), :content_type=,
              s(:str, "application/x-www-form-urlencoded")),
            s(:return,
              s(:send, nil, :send_request_with_body,
                s(:lvar, :sock),
                s(:lvar, :ver),
                s(:lvar, :path),
                s(:send,
                  s(:const, nil, :URI), :encode_www_form,
                  s(:lvar, :params))))), nil),
        s(:lvasgn, :opt,
          s(:send,
            s(:ivar, :@form_option), :dup)),
        s(:if,
          s(:defined?,
            s(:const, nil, :SecureRandom)), nil,
          s(:send, nil, :require,
            s(:str, "securerandom"))),
        s(:or_asgn,
          s(:send,
            s(:lvar, :opt), :[],
            s(:sym, :boundary)),
          s(:send,
            s(:const, nil, :SecureRandom), :urlsafe_base64,
            s(:int, 40))),
        s(:send,
          s(:self), :set_content_type,
          s(:send,
            s(:self), :content_type),
          s(:hash,
            s(:pair,
              s(:sym, :boundary),
              s(:send,
                s(:lvar, :opt), :[],
                s(:sym, :boundary))))),
        s(:if,
          s(:send, nil, :chunked?),
          s(:begin,
            s(:send, nil, :write_header,
              s(:lvar, :sock),
              s(:lvar, :ver),
              s(:lvar, :path)),
            s(:send, nil, :encode_multipart_form_data,
              s(:lvar, :sock),
              s(:lvar, :params),
              s(:lvar, :opt))),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "tempfile")),
            s(:lvasgn, :file,
              s(:send,
                s(:const, nil, :Tempfile), :new,
                s(:str, "multipart"))),
            s(:send,
              s(:lvar, :file), :binmode),
            s(:send, nil, :encode_multipart_form_data,
              s(:lvar, :file),
              s(:lvar, :params),
              s(:lvar, :opt)),
            s(:send,
              s(:lvar, :file), :rewind),
            s(:send,
              s(:self), :content_length=,
              s(:send,
                s(:lvar, :file), :size)),
            s(:send, nil, :write_header,
              s(:lvar, :sock),
              s(:lvar, :ver),
              s(:lvar, :path)),
            s(:send,
              s(:const, nil, :IO), :copy_stream,
              s(:lvar, :file),
              s(:lvar, :sock)),
            s(:send,
              s(:lvar, :file), :close,
              s(:true)))))),
    s(:def, :encode_multipart_form_data,
      s(:args,
        s(:arg, :out),
        s(:arg, :params),
        s(:arg, :opt)),
      s(:begin,
        s(:lvasgn, :charset,
          s(:send,
            s(:lvar, :opt), :[],
            s(:sym, :charset))),
        s(:lvasgn, :boundary,
          s(:send,
            s(:lvar, :opt), :[],
            s(:sym, :boundary))),
        s(:if,
          s(:defined?,
            s(:const, nil, :SecureRandom)), nil,
          s(:send, nil, :require,
            s(:str, "securerandom"))),
        s(:or_asgn,
          s(:lvasgn, :boundary),
          s(:send,
            s(:const, nil, :SecureRandom), :urlsafe_base64,
            s(:int, 40))),
        s(:lvasgn, :chunked_p,
          s(:send, nil, :chunked?)),
        s(:lvasgn, :buf,
          s(:str, "")),
        s(:block,
          s(:send,
            s(:lvar, :params), :each),
          s(:args,
            s(:arg, :key),
            s(:arg, :value),
            s(:optarg, :h,
              s(:hash))),
          s(:begin,
            s(:lvasgn, :key,
              s(:send, nil, :quote_string,
                s(:lvar, :key),
                s(:lvar, :charset))),
            s(:lvasgn, :filename,
              s(:if,
                s(:send,
                  s(:lvar, :h), :key?,
                  s(:sym, :filename)),
                s(:send,
                  s(:lvar, :h), :[],
                  s(:sym, :filename)),
                s(:if,
                  s(:send,
                    s(:lvar, :value), :respond_to?,
                    s(:sym, :to_path)),
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:send,
                      s(:lvar, :value), :to_path)),
                  s(:nil)))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:dstr,
                s(:str, "--"),
                s(:begin,
                  s(:lvar, :boundary)),
                s(:str, "\r\n"))),
            s(:if,
              s(:lvar, :filename),
              s(:begin,
                s(:lvasgn, :filename,
                  s(:send, nil, :quote_string,
                    s(:lvar, :filename),
                    s(:lvar, :charset))),
                s(:lvasgn, :type,
                  s(:or,
                    s(:send,
                      s(:lvar, :h), :[],
                      s(:sym, :content_type)),
                    s(:str, "application/octet-stream"))),
                s(:send,
                  s(:lvar, :buf), :<<,
                  s(:dstr,
                    s(:str, "Content-Disposition: form-data; "),
                    s(:dstr,
                      s(:str, "name=\""),
                      s(:begin,
                        s(:lvar, :key)),
                      s(:str, "\"; filename=\""),
                      s(:begin,
                        s(:lvar, :filename)),
                      s(:str, "\"\r\n")),
                    s(:dstr,
                      s(:str, "Content-Type: "),
                      s(:begin,
                        s(:lvar, :type)),
                      s(:str, "\r\n\r\n")))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :out), :respond_to?,
                        s(:sym, :write)), :!),
                    s(:send,
                      s(:send,
                        s(:lvar, :value), :respond_to?,
                        s(:sym, :read)), :!)),
                  s(:send,
                    s(:lvar, :buf), :<<,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :value), :respond_to?,
                          s(:sym, :read)),
                        s(:send,
                          s(:lvar, :value), :read),
                        s(:lvar, :value)))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :value), :respond_to?,
                        s(:sym, :size)),
                      s(:lvar, :chunked_p)),
                    s(:begin,
                      s(:send, nil, :flush_buffer,
                        s(:lvar, :out),
                        s(:lvar, :buf),
                        s(:lvar, :chunked_p)),
                      s(:if,
                        s(:lvar, :chunked_p),
                        s(:send,
                          s(:lvar, :out), :<<,
                          s(:send,
                            s(:str, "%x\r\n"), :%,
                            s(:send,
                              s(:lvar, :value), :size))), nil),
                      s(:send,
                        s(:const, nil, :IO), :copy_stream,
                        s(:lvar, :value),
                        s(:lvar, :out)),
                      s(:if,
                        s(:lvar, :chunked_p),
                        s(:send,
                          s(:lvar, :out), :<<,
                          s(:str, "\r\n")), nil)),
                    s(:begin,
                      s(:send, nil, :flush_buffer,
                        s(:lvar, :out),
                        s(:lvar, :buf),
                        s(:lvar, :chunked_p)),
                      s(:while,
                        s(:send, nil, :flush_buffer,
                          s(:lvar, :out),
                          s(:send,
                            s(:lvar, :value), :read,
                            s(:int, 4096)),
                          s(:lvar, :chunked_p)),
                        s(:int, 1)))))),
              s(:begin,
                s(:send,
                  s(:lvar, :buf), :<<,
                  s(:dstr,
                    s(:str, "Content-Disposition: form-data; name=\""),
                    s(:begin,
                      s(:lvar, :key)),
                    s(:str, "\"\r\n\r\n"))),
                s(:send,
                  s(:lvar, :buf), :<<,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :value), :respond_to?,
                        s(:sym, :read)),
                      s(:send,
                        s(:lvar, :value), :read),
                      s(:lvar, :value)))))),
            s(:send,
              s(:lvar, :buf), :<<,
              s(:str, "\r\n")))),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:dstr,
            s(:str, "--"),
            s(:begin,
              s(:lvar, :boundary)),
            s(:str, "--\r\n"))),
        s(:send, nil, :flush_buffer,
          s(:lvar, :out),
          s(:lvar, :buf),
          s(:lvar, :chunked_p)),
        s(:if,
          s(:lvar, :chunked_p),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "0\r\n\r\n")), nil))),
    s(:def, :quote_string,
      s(:args,
        s(:arg, :str),
        s(:arg, :charset)),
      s(:begin,
        s(:if,
          s(:lvar, :charset),
          s(:lvasgn, :str,
            s(:send,
              s(:lvar, :str), :encode,
              s(:lvar, :charset),
              s(:hash,
                s(:pair,
                  s(:sym, :fallback),
                  s(:block,
                    s(:send, nil, :lambda),
                    s(:args,
                      s(:arg, :c)),
                    s(:send,
                      s(:str, "&#%d;"), :%,
                      s(:send,
                        s(:send,
                          s(:lvar, :c), :encode,
                          s(:str, "UTF-8")), :ord))))))), nil),
        s(:send,
          s(:lvar, :str), :gsub,
          s(:regexp,
            s(:str, "[\\\\\"]"),
            s(:regopt)),
          s(:str, "\\\\\\&")))),
    s(:def, :flush_buffer,
      s(:args,
        s(:arg, :out),
        s(:arg, :buf),
        s(:arg, :chunked_p)),
      s(:begin,
        s(:if,
          s(:lvar, :buf), nil,
          s(:return)),
        s(:if,
          s(:lvar, :chunked_p),
          s(:send,
            s(:lvar, :out), :<<,
            s(:send,
              s(:str, "%x\r\n"), :%,
              s(:send,
                s(:lvar, :buf), :bytesize))), nil),
        s(:send,
          s(:lvar, :out), :<<,
          s(:lvar, :buf)),
        s(:if,
          s(:lvar, :chunked_p),
          s(:send,
            s(:lvar, :out), :<<,
            s(:str, "\r\n")), nil),
        s(:send,
          s(:lvar, :buf), :clear))),
    s(:def, :supply_default_content_type,
      s(:args),
      s(:begin,
        s(:if,
          s(:send, nil, :content_type),
          s(:return), nil),
        s(:if,
          s(:gvar, :$VERBOSE),
          s(:send, nil, :warn,
            s(:str, "net/http: warning: Content-Type did not set; using application/x-www-form-urlencoded")), nil),
        s(:send, nil, :set_content_type,
          s(:str, "application/x-www-form-urlencoded")))),
    s(:def, :wait_for_continue,
      s(:args,
        s(:arg, :sock),
        s(:arg, :ver)),
      s(:if,
        s(:and,
          s(:and,
            s(:send,
              s(:lvar, :ver), :>=,
              s(:str, "1.1")),
            s(:send,
              s(:ivar, :@header), :[],
              s(:str, "expect"))),
          s(:send,
            s(:send,
              s(:ivar, :@header), :[],
              s(:str, "expect")), :include?,
            s(:str, "100-continue"))),
        s(:if,
          s(:send,
            s(:send,
              s(:send,
                s(:lvar, :sock), :io), :to_io), :wait_readable,
            s(:send,
              s(:lvar, :sock), :continue_timeout)),
          s(:begin,
            s(:lvasgn, :res,
              s(:send,
                s(:const,
                  s(:const, nil, :Net), :HTTPResponse), :read_new,
                s(:lvar, :sock))),
            s(:if,
              s(:send,
                s(:lvar, :res), :kind_of?,
                s(:const,
                  s(:const, nil, :Net), :HTTPContinue)), nil,
              s(:begin,
                s(:send,
                  s(:lvar, :res), :decode_content=,
                  s(:ivar, :@decode_content)),
                s(:send, nil, :throw,
                  s(:sym, :response),
                  s(:lvar, :res))))), nil), nil)),
    s(:def, :write_header,
      s(:args,
        s(:arg, :sock),
        s(:arg, :ver),
        s(:arg, :path)),
      s(:begin,
        s(:lvasgn, :reqline,
          s(:dstr,
            s(:begin,
              s(:ivar, :@method)),
            s(:str, " "),
            s(:begin,
              s(:lvar, :path)),
            s(:str, " HTTP/"),
            s(:begin,
              s(:lvar, :ver)))),
        s(:if,
          s(:match_with_lvasgn,
            s(:regexp,
              s(:str, "[\\r\\n]"),
              s(:regopt)),
            s(:lvar, :reqline)),
          s(:send, nil, :raise,
            s(:const, nil, :ArgumentError),
            s(:str, "A Request-Line must not contain CR or LF")), nil),
        s(:lvasgn, :buf,
          s(:str, "")),
        s(:send,
          s(:send,
            s(:lvar, :buf), :<<,
            s(:lvar, :reqline)), :<<,
          s(:str, "\r\n")),
        s(:block,
          s(:send, nil, :each_capitalized),
          s(:args,
            s(:arg, :k),
            s(:arg, :v)),
          s(:send,
            s(:lvar, :buf), :<<,
            s(:dstr,
              s(:begin,
                s(:lvar, :k)),
              s(:str, ": "),
              s(:begin,
                s(:lvar, :v)),
              s(:str, "\r\n")))),
        s(:send,
          s(:lvar, :buf), :<<,
          s(:str, "\r\n")),
        s(:send,
          s(:lvar, :sock), :write,
          s(:lvar, :buf))))))
