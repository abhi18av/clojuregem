s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "monitor")),
  s(:send, nil, :require,
    s(:str, "net/protocol")),
  s(:send, nil, :require,
    s(:str, "time")),
  s(:module,
    s(:const, nil, :Net),
    s(:begin,
      s(:class,
        s(:const, nil, :FTPError),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :FTPReplyError),
        s(:const, nil, :FTPError), nil),
      s(:class,
        s(:const, nil, :FTPTempError),
        s(:const, nil, :FTPError), nil),
      s(:class,
        s(:const, nil, :FTPPermError),
        s(:const, nil, :FTPError), nil),
      s(:class,
        s(:const, nil, :FTPProtoError),
        s(:const, nil, :FTPError), nil),
      s(:class,
        s(:const, nil, :FTPConnectionError),
        s(:const, nil, :FTPError), nil),
      s(:class,
        s(:const, nil, :FTP), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :MonitorMixin)),
          s(:casgn, nil, :FTP_PORT,
            s(:int, 21)),
          s(:casgn, nil, :CRLF,
            s(:str, "\r\n")),
          s(:casgn, nil, :DEFAULT_BLOCKSIZE,
            s(:const,
              s(:const, nil, :BufferedIO), :BUFSIZE)),
          s(:cvasgn, :@@default_passive,
            s(:true)),
          s(:send, nil, :attr_reader,
            s(:sym, :binary)),
          s(:send, nil, :attr_accessor,
            s(:sym, :passive)),
          s(:send, nil, :attr_accessor,
            s(:sym, :debug_mode)),
          s(:send, nil, :attr_accessor,
            s(:sym, :resume)),
          s(:send, nil, :attr_accessor,
            s(:sym, :open_timeout)),
          s(:send, nil, :attr_reader,
            s(:sym, :read_timeout)),
          s(:def, :read_timeout=,
            s(:args,
              s(:arg, :sec)),
            s(:begin,
              s(:send,
                s(:ivar, :@sock), :read_timeout=,
                s(:lvar, :sec)),
              s(:ivasgn, :@read_timeout,
                s(:lvar, :sec)))),
          s(:send, nil, :attr_reader,
            s(:sym, :welcome)),
          s(:send, nil, :attr_reader,
            s(:sym, :last_response_code)),
          s(:alias,
            s(:sym, :lastresp),
            s(:sym, :last_response_code)),
          s(:send, nil, :attr_reader,
            s(:sym, :last_response)),
          s(:defs,
            s(:self), :default_passive=,
            s(:args,
              s(:arg, :value)),
            s(:cvasgn, :@@default_passive,
              s(:lvar, :value))),
          s(:defs,
            s(:self), :default_passive,
            s(:args),
            s(:cvar, :@@default_passive)),
          s(:defs,
            s(:const, nil, :FTP), :open,
            s(:args,
              s(:arg, :host),
              s(:optarg, :user,
                s(:nil)),
              s(:optarg, :passwd,
                s(:nil)),
              s(:optarg, :acct,
                s(:nil))),
            s(:if,
              s(:send, nil, :block_given?),
              s(:begin,
                s(:lvasgn, :ftp,
                  s(:send, nil, :new,
                    s(:lvar, :host),
                    s(:lvar, :user),
                    s(:lvar, :passwd),
                    s(:lvar, :acct))),
                s(:kwbegin,
                  s(:ensure,
                    s(:yield,
                      s(:lvar, :ftp)),
                    s(:send,
                      s(:lvar, :ftp), :close)))),
              s(:send, nil, :new,
                s(:lvar, :host),
                s(:lvar, :user),
                s(:lvar, :passwd),
                s(:lvar, :acct)))),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :host,
                s(:nil)),
              s(:optarg, :user,
                s(:nil)),
              s(:optarg, :passwd,
                s(:nil)),
              s(:optarg, :acct,
                s(:nil))),
            s(:begin,
              s(:super),
              s(:ivasgn, :@binary,
                s(:true)),
              s(:ivasgn, :@passive,
                s(:cvar, :@@default_passive)),
              s(:ivasgn, :@debug_mode,
                s(:false)),
              s(:ivasgn, :@resume,
                s(:false)),
              s(:ivasgn, :@sock,
                s(:send,
                  s(:const, nil, :NullSocket), :new)),
              s(:ivasgn, :@logged_in,
                s(:false)),
              s(:ivasgn, :@open_timeout,
                s(:nil)),
              s(:ivasgn, :@read_timeout,
                s(:int, 60)),
              s(:if,
                s(:lvar, :host),
                s(:begin,
                  s(:send, nil, :connect,
                    s(:lvar, :host)),
                  s(:if,
                    s(:lvar, :user),
                    s(:send, nil, :login,
                      s(:lvar, :user),
                      s(:lvar, :passwd),
                      s(:lvar, :acct)), nil)), nil))),
          s(:def, :binary=,
            s(:args,
              s(:arg, :newmode)),
            s(:if,
              s(:send,
                s(:lvar, :newmode), :!=,
                s(:ivar, :@binary)),
              s(:begin,
                s(:ivasgn, :@binary,
                  s(:lvar, :newmode)),
                s(:if,
                  s(:ivar, :@logged_in),
                  s(:send, nil, :send_type_command), nil)), nil)),
          s(:def, :send_type_command,
            s(:args),
            s(:if,
              s(:ivar, :@binary),
              s(:send, nil, :voidcmd,
                s(:str, "TYPE I")),
              s(:send, nil, :voidcmd,
                s(:str, "TYPE A")))),
          s(:send, nil, :private,
            s(:sym, :send_type_command)),
          s(:def, :with_binary,
            s(:args,
              s(:arg, :newmode)),
            s(:begin,
              s(:lvasgn, :oldmode,
                s(:send, nil, :binary)),
              s(:send,
                s(:self), :binary=,
                s(:lvar, :newmode)),
              s(:kwbegin,
                s(:ensure,
                  s(:yield),
                  s(:send,
                    s(:self), :binary=,
                    s(:lvar, :oldmode)))))),
          s(:send, nil, :private,
            s(:sym, :with_binary)),
          s(:def, :return_code,
            s(:args),
            s(:begin,
              s(:send,
                s(:gvar, :$stderr), :puts,
                s(:str, "warning: Net::FTP#return_code is obsolete and do nothing")),
              s(:return,
                s(:str, "\n")))),
          s(:def, :return_code=,
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:gvar, :$stderr), :puts,
              s(:str, "warning: Net::FTP#return_code= is obsolete and do nothing"))),
          s(:def, :open_socket,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:return,
              s(:block,
                s(:send,
                  s(:const, nil, :Timeout), :timeout,
                  s(:ivar, :@open_timeout),
                  s(:const,
                    s(:const, nil, :Net), :OpenTimeout)),
                s(:args),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:defined?,
                        s(:const, nil, :SOCKSSocket)),
                      s(:send,
                        s(:const, nil, :ENV), :[],
                        s(:str, "SOCKS_SERVER"))),
                    s(:begin,
                      s(:ivasgn, :@passive,
                        s(:true)),
                      s(:lvasgn, :sock,
                        s(:send,
                          s(:const, nil, :SOCKSSocket), :open,
                          s(:lvar, :host),
                          s(:lvar, :port)))),
                    s(:lvasgn, :sock,
                      s(:send,
                        s(:const, nil, :TCPSocket), :open,
                        s(:lvar, :host),
                        s(:lvar, :port)))),
                  s(:lvasgn, :io,
                    s(:send,
                      s(:const, nil, :BufferedSocket), :new,
                      s(:lvar, :sock))),
                  s(:send,
                    s(:lvar, :io), :read_timeout=,
                    s(:ivar, :@read_timeout)),
                  s(:lvar, :io))))),
          s(:send, nil, :private,
            s(:sym, :open_socket)),
          s(:def, :connect,
            s(:args,
              s(:arg, :host),
              s(:optarg, :port,
                s(:const, nil, :FTP_PORT))),
            s(:begin,
              s(:if,
                s(:ivar, :@debug_mode),
                s(:send, nil, :print,
                  s(:str, "connect: "),
                  s(:lvar, :host),
                  s(:str, ", "),
                  s(:lvar, :port),
                  s(:str, "\n")), nil),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@sock,
                    s(:send, nil, :open_socket,
                      s(:lvar, :host),
                      s(:lvar, :port))),
                  s(:send, nil, :voidresp))))),
          s(:def, :set_socket,
            s(:args,
              s(:arg, :sock),
              s(:optarg, :get_greeting,
                s(:true))),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:ivasgn, :@sock,
                  s(:lvar, :sock)),
                s(:if,
                  s(:lvar, :get_greeting),
                  s(:send, nil, :voidresp), nil)))),
          s(:def, :sanitize,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:send,
                s(:lvar, :s), :=~,
                s(:regexp,
                  s(:str, "^PASS "),
                  s(:regopt, :i))),
              s(:return,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :[],
                    s(:int, 0),
                    s(:int, 5)), :+,
                  s(:send,
                    s(:str, "*"), :*,
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :length), :-,
                        s(:int, 5)))))),
              s(:return,
                s(:lvar, :s)))),
          s(:send, nil, :private,
            s(:sym, :sanitize)),
          s(:def, :putline,
            s(:args,
              s(:arg, :line)),
            s(:begin,
              s(:if,
                s(:ivar, :@debug_mode),
                s(:send, nil, :print,
                  s(:str, "put: "),
                  s(:send, nil, :sanitize,
                    s(:lvar, :line)),
                  s(:str, "\n")), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "[\\r\\n]"),
                    s(:regopt)),
                  s(:lvar, :line)),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:str, "A line must not contain CR or LF")), nil),
              s(:lvasgn, :line,
                s(:send,
                  s(:lvar, :line), :+,
                  s(:const, nil, :CRLF))),
              s(:send,
                s(:ivar, :@sock), :write,
                s(:lvar, :line)))),
          s(:send, nil, :private,
            s(:sym, :putline)),
          s(:def, :getline,
            s(:args),
            s(:begin,
              s(:lvasgn, :line,
                s(:send,
                  s(:ivar, :@sock), :readline)),
              s(:send,
                s(:lvar, :line), :sub!,
                s(:regexp,
                  s(:str, "(\\r\\n|\\n|\\r)\\z"),
                  s(:regopt, :n)),
                s(:str, "")),
              s(:if,
                s(:ivar, :@debug_mode),
                s(:send, nil, :print,
                  s(:str, "get: "),
                  s(:send, nil, :sanitize,
                    s(:lvar, :line)),
                  s(:str, "\n")), nil),
              s(:return,
                s(:lvar, :line)))),
          s(:send, nil, :private,
            s(:sym, :getline)),
          s(:def, :getmultiline,
            s(:args),
            s(:begin,
              s(:lvasgn, :lines,
                s(:array)),
              s(:send,
                s(:lvar, :lines), :<<,
                s(:send, nil, :getline)),
              s(:lvasgn, :code,
                s(:send,
                  s(:send,
                    s(:lvar, :lines), :last), :slice,
                  s(:regexp,
                    s(:str, "\\A([0-9a-zA-Z]{3})-"),
                    s(:regopt)),
                  s(:int, 1))),
              s(:if,
                s(:lvar, :code),
                s(:begin,
                  s(:lvasgn, :delimiter,
                    s(:send,
                      s(:lvar, :code), :+,
                      s(:str, " "))),
                  s(:until_post,
                    s(:send,
                      s(:send,
                        s(:lvar, :lines), :last), :start_with?,
                      s(:lvar, :delimiter)),
                    s(:kwbegin,
                      s(:send,
                        s(:lvar, :lines), :<<,
                        s(:send, nil, :getline))))), nil),
              s(:return,
                s(:send,
                  s(:send,
                    s(:lvar, :lines), :join,
                    s(:str, "\n")), :+,
                  s(:str, "\n"))))),
          s(:send, nil, :private,
            s(:sym, :getmultiline)),
          s(:def, :getresp,
            s(:args),
            s(:begin,
              s(:ivasgn, :@last_response,
                s(:send, nil, :getmultiline)),
              s(:ivasgn, :@last_response_code,
                s(:send,
                  s(:ivar, :@last_response), :[],
                  s(:int, 0),
                  s(:int, 3))),
              s(:case,
                s(:ivar, :@last_response_code),
                s(:when,
                  s(:regexp,
                    s(:str, "\\A[123]"),
                    s(:regopt)),
                  s(:return,
                    s(:ivar, :@last_response))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\A4"),
                    s(:regopt)),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPTempError),
                    s(:ivar, :@last_response))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\A5"),
                    s(:regopt)),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPPermError),
                    s(:ivar, :@last_response))),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPProtoError),
                  s(:ivar, :@last_response))))),
          s(:send, nil, :private,
            s(:sym, :getresp)),
          s(:def, :voidresp,
            s(:args),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :getresp)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "2")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil))),
          s(:send, nil, :private,
            s(:sym, :voidresp)),
          s(:def, :sendcmd,
            s(:args,
              s(:arg, :cmd)),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:send, nil, :putline,
                  s(:lvar, :cmd)),
                s(:return,
                  s(:send, nil, :getresp))))),
          s(:def, :voidcmd,
            s(:args,
              s(:arg, :cmd)),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:send, nil, :putline,
                  s(:lvar, :cmd)),
                s(:send, nil, :voidresp)))),
          s(:def, :sendport,
            s(:args,
              s(:arg, :host),
              s(:arg, :port)),
            s(:begin,
              s(:lvasgn, :af,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@sock), :peeraddr)), :[],
                  s(:int, 0))),
              s(:if,
                s(:send,
                  s(:lvar, :af), :==,
                  s(:str, "AF_INET")),
                s(:lvasgn, :cmd,
                  s(:send,
                    s(:str, "PORT "), :+,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:lvar, :host), :split,
                            s(:str, ".")), :+,
                          s(:send,
                            s(:lvar, :port), :divmod,
                            s(:int, 256)))), :join,
                      s(:str, ",")))),
                s(:if,
                  s(:send,
                    s(:lvar, :af), :==,
                    s(:str, "AF_INET6")),
                  s(:lvasgn, :cmd,
                    s(:send, nil, :sprintf,
                      s(:str, "EPRT |2|%s|%d|"),
                      s(:lvar, :host),
                      s(:lvar, :port))),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPProtoError),
                    s(:lvar, :host)))),
              s(:send, nil, :voidcmd,
                s(:lvar, :cmd)))),
          s(:send, nil, :private,
            s(:sym, :sendport)),
          s(:def, :makeport,
            s(:args),
            s(:send,
              s(:const, nil, :TCPServer), :open,
              s(:send,
                s(:send,
                  s(:ivar, :@sock), :addr), :[],
                s(:int, 3)),
              s(:int, 0))),
          s(:send, nil, :private,
            s(:sym, :makeport)),
          s(:def, :makepasv,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@sock), :peeraddr), :[],
                    s(:int, 0)), :==,
                  s(:str, "AF_INET")),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :host),
                    s(:lvasgn, :port)),
                  s(:send, nil, :parse227,
                    s(:send, nil, :sendcmd,
                      s(:str, "PASV")))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :host),
                    s(:lvasgn, :port)),
                  s(:send, nil, :parse229,
                    s(:send, nil, :sendcmd,
                      s(:str, "EPSV"))))),
              s(:return,
                s(:lvar, :host),
                s(:lvar, :port)))),
          s(:send, nil, :private,
            s(:sym, :makepasv)),
          s(:def, :transfercmd,
            s(:args,
              s(:arg, :cmd),
              s(:optarg, :rest_offset,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:ivar, :@passive),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :host),
                      s(:lvasgn, :port)),
                    s(:send, nil, :makepasv)),
                  s(:lvasgn, :conn,
                    s(:send, nil, :open_socket,
                      s(:lvar, :host),
                      s(:lvar, :port))),
                  s(:if,
                    s(:and,
                      s(:ivar, :@resume),
                      s(:lvar, :rest_offset)),
                    s(:begin,
                      s(:lvasgn, :resp,
                        s(:send, nil, :sendcmd,
                          s(:send,
                            s(:str, "REST "), :+,
                            s(:send,
                              s(:lvar, :rest_offset), :to_s)))),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :resp), :start_with?,
                            s(:str, "3")), :!),
                        s(:send, nil, :raise,
                          s(:const, nil, :FTPReplyError),
                          s(:lvar, :resp)), nil)), nil),
                  s(:lvasgn, :resp,
                    s(:send, nil, :sendcmd,
                      s(:lvar, :cmd))),
                  s(:if,
                    s(:send,
                      s(:lvar, :resp), :start_with?,
                      s(:str, "2")),
                    s(:lvasgn, :resp,
                      s(:send, nil, :getresp)), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :resp), :start_with?,
                        s(:str, "1")), :!),
                    s(:send, nil, :raise,
                      s(:const, nil, :FTPReplyError),
                      s(:lvar, :resp)), nil)),
                s(:begin,
                  s(:lvasgn, :sock,
                    s(:send, nil, :makeport)),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send, nil, :sendport,
                          s(:send,
                            s(:send,
                              s(:lvar, :sock), :addr), :[],
                            s(:int, 3)),
                          s(:send,
                            s(:send,
                              s(:lvar, :sock), :addr), :[],
                            s(:int, 1))),
                        s(:if,
                          s(:and,
                            s(:ivar, :@resume),
                            s(:lvar, :rest_offset)),
                          s(:begin,
                            s(:lvasgn, :resp,
                              s(:send, nil, :sendcmd,
                                s(:send,
                                  s(:str, "REST "), :+,
                                  s(:send,
                                    s(:lvar, :rest_offset), :to_s)))),
                            s(:if,
                              s(:send,
                                s(:send,
                                  s(:lvar, :resp), :start_with?,
                                  s(:str, "3")), :!),
                              s(:send, nil, :raise,
                                s(:const, nil, :FTPReplyError),
                                s(:lvar, :resp)), nil)), nil),
                        s(:lvasgn, :resp,
                          s(:send, nil, :sendcmd,
                            s(:lvar, :cmd))),
                        s(:if,
                          s(:send,
                            s(:lvar, :resp), :start_with?,
                            s(:str, "2")),
                          s(:lvasgn, :resp,
                            s(:send, nil, :getresp)), nil),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :resp), :start_with?,
                              s(:str, "1")), :!),
                          s(:send, nil, :raise,
                            s(:const, nil, :FTPReplyError),
                            s(:lvar, :resp)), nil),
                        s(:lvasgn, :conn,
                          s(:send,
                            s(:const, nil, :BufferedSocket), :new,
                            s(:send,
                              s(:lvar, :sock), :accept))),
                        s(:send,
                          s(:lvar, :conn), :read_timeout=,
                          s(:ivar, :@read_timeout)),
                        s(:rescue,
                          s(:send,
                            s(:lvar, :sock), :shutdown,
                            s(:const,
                              s(:const, nil, :Socket), :SHUT_WR)),
                          s(:resbody, nil, nil,
                            s(:nil)), nil),
                        s(:rescue,
                          s(:send,
                            s(:lvar, :sock), :read),
                          s(:resbody, nil, nil,
                            s(:nil)), nil)),
                      s(:send,
                        s(:lvar, :sock), :close))))),
              s(:return,
                s(:lvar, :conn)))),
          s(:send, nil, :private,
            s(:sym, :transfercmd)),
          s(:def, :login,
            s(:args,
              s(:optarg, :user,
                s(:str, "anonymous")),
              s(:optarg, :passwd,
                s(:nil)),
              s(:optarg, :acct,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :user), :==,
                    s(:str, "anonymous")),
                  s(:send,
                    s(:lvar, :passwd), :==,
                    s(:nil))),
                s(:lvasgn, :passwd,
                  s(:str, "anonymous@")), nil),
              s(:lvasgn, :resp,
                s(:str, "")),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:lvasgn, :resp,
                    s(:send, nil, :sendcmd,
                      s(:send,
                        s(:str, "USER "), :+,
                        s(:lvar, :user)))),
                  s(:if,
                    s(:send,
                      s(:lvar, :resp), :start_with?,
                      s(:str, "3")),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :passwd), :nil?),
                        s(:send, nil, :raise,
                          s(:const, nil, :FTPReplyError),
                          s(:lvar, :resp)), nil),
                      s(:lvasgn, :resp,
                        s(:send, nil, :sendcmd,
                          s(:send,
                            s(:str, "PASS "), :+,
                            s(:lvar, :passwd))))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :resp), :start_with?,
                      s(:str, "3")),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :acct), :nil?),
                        s(:send, nil, :raise,
                          s(:const, nil, :FTPReplyError),
                          s(:lvar, :resp)), nil),
                      s(:lvasgn, :resp,
                        s(:send, nil, :sendcmd,
                          s(:send,
                            s(:str, "ACCT "), :+,
                            s(:lvar, :acct))))), nil))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "2")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:ivasgn, :@welcome,
                s(:lvar, :resp)),
              s(:send, nil, :send_type_command),
              s(:ivasgn, :@logged_in,
                s(:true)))),
          s(:def, :retrbinary,
            s(:args,
              s(:arg, :cmd),
              s(:arg, :blocksize),
              s(:optarg, :rest_offset,
                s(:nil))),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:block,
                s(:send, nil, :with_binary,
                  s(:true)),
                s(:args),
                s(:begin,
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :conn,
                          s(:send, nil, :transfercmd,
                            s(:lvar, :cmd),
                            s(:lvar, :rest_offset))),
                        s(:block,
                          s(:send, nil, :loop),
                          s(:args),
                          s(:begin,
                            s(:lvasgn, :data,
                              s(:send,
                                s(:lvar, :conn), :read,
                                s(:lvar, :blocksize))),
                            s(:if,
                              s(:send,
                                s(:lvar, :data), :==,
                                s(:nil)),
                              s(:break), nil),
                            s(:yield,
                              s(:lvar, :data)))),
                        s(:send,
                          s(:lvar, :conn), :shutdown,
                          s(:const,
                            s(:const, nil, :Socket), :SHUT_WR)),
                        s(:send,
                          s(:lvar, :conn), :read_timeout=,
                          s(:int, 1)),
                        s(:send,
                          s(:lvar, :conn), :read)),
                      s(:if,
                        s(:lvar, :conn),
                        s(:send,
                          s(:lvar, :conn), :close), nil))),
                  s(:send, nil, :voidresp))))),
          s(:def, :retrlines,
            s(:args,
              s(:arg, :cmd)),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:block,
                s(:send, nil, :with_binary,
                  s(:false)),
                s(:args),
                s(:begin,
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:lvasgn, :conn,
                          s(:send, nil, :transfercmd,
                            s(:lvar, :cmd))),
                        s(:block,
                          s(:send, nil, :loop),
                          s(:args),
                          s(:begin,
                            s(:lvasgn, :line,
                              s(:send,
                                s(:lvar, :conn), :gets)),
                            s(:if,
                              s(:send,
                                s(:lvar, :line), :==,
                                s(:nil)),
                              s(:break), nil),
                            s(:yield,
                              s(:send,
                                s(:lvar, :line), :sub,
                                s(:regexp,
                                  s(:str, "\\r?\\n\\z"),
                                  s(:regopt)),
                                s(:str, "")),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :line), :match,
                                    s(:regexp,
                                      s(:str, "\\n\\z"),
                                      s(:regopt))), :nil?), :!)))),
                        s(:send,
                          s(:lvar, :conn), :shutdown,
                          s(:const,
                            s(:const, nil, :Socket), :SHUT_WR)),
                        s(:send,
                          s(:lvar, :conn), :read_timeout=,
                          s(:int, 1)),
                        s(:send,
                          s(:lvar, :conn), :read)),
                      s(:if,
                        s(:lvar, :conn),
                        s(:send,
                          s(:lvar, :conn), :close), nil))),
                  s(:send, nil, :voidresp))))),
          s(:def, :storbinary,
            s(:args,
              s(:arg, :cmd),
              s(:arg, :file),
              s(:arg, :blocksize),
              s(:optarg, :rest_offset,
                s(:nil))),
            s(:rescue,
              s(:begin,
                s(:if,
                  s(:lvar, :rest_offset),
                  s(:send,
                    s(:lvar, :file), :seek,
                    s(:lvar, :rest_offset),
                    s(:const,
                      s(:const, nil, :IO), :SEEK_SET)), nil),
                s(:block,
                  s(:send, nil, :synchronize),
                  s(:args),
                  s(:block,
                    s(:send, nil, :with_binary,
                      s(:true)),
                    s(:args),
                    s(:begin,
                      s(:lvasgn, :conn,
                        s(:send, nil, :transfercmd,
                          s(:lvar, :cmd))),
                      s(:block,
                        s(:send, nil, :loop),
                        s(:args),
                        s(:begin,
                          s(:lvasgn, :buf,
                            s(:send,
                              s(:lvar, :file), :read,
                              s(:lvar, :blocksize))),
                          s(:if,
                            s(:send,
                              s(:lvar, :buf), :==,
                              s(:nil)),
                            s(:break), nil),
                          s(:send,
                            s(:lvar, :conn), :write,
                            s(:lvar, :buf)),
                          s(:if,
                            s(:send, nil, :block_given?),
                            s(:yield,
                              s(:lvar, :buf)), nil))),
                      s(:send,
                        s(:lvar, :conn), :close),
                      s(:send, nil, :voidresp))))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EPIPE)), nil,
                s(:begin,
                  s(:send, nil, :getresp),
                  s(:send, nil, :raise))), nil)),
          s(:def, :storlines,
            s(:args,
              s(:arg, :cmd),
              s(:arg, :file)),
            s(:rescue,
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:block,
                  s(:send, nil, :with_binary,
                    s(:false)),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :conn,
                      s(:send, nil, :transfercmd,
                        s(:lvar, :cmd))),
                    s(:block,
                      s(:send, nil, :loop),
                      s(:args),
                      s(:begin,
                        s(:lvasgn, :buf,
                          s(:send,
                            s(:lvar, :file), :gets)),
                        s(:if,
                          s(:send,
                            s(:lvar, :buf), :==,
                            s(:nil)),
                          s(:break), nil),
                        s(:if,
                          s(:send,
                            s(:send,
                              s(:lvar, :buf), :[],
                              s(:int, -2),
                              s(:int, 2)), :!=,
                            s(:const, nil, :CRLF)),
                          s(:lvasgn, :buf,
                            s(:send,
                              s(:send,
                                s(:lvar, :buf), :chomp), :+,
                              s(:const, nil, :CRLF))), nil),
                        s(:send,
                          s(:lvar, :conn), :write,
                          s(:lvar, :buf)),
                        s(:if,
                          s(:send, nil, :block_given?),
                          s(:yield,
                            s(:lvar, :buf)), nil))),
                    s(:send,
                      s(:lvar, :conn), :close),
                    s(:send, nil, :voidresp)))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :EPIPE)), nil,
                s(:begin,
                  s(:send, nil, :getresp),
                  s(:send, nil, :raise))), nil)),
          s(:def, :getbinaryfile,
            s(:args,
              s(:arg, :remotefile),
              s(:optarg, :localfile,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :remotefile))),
              s(:optarg, :blocksize,
                s(:const, nil, :DEFAULT_BLOCKSIZE)),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :f,
                s(:nil)),
              s(:lvasgn, :result,
                s(:nil)),
              s(:if,
                s(:lvar, :localfile),
                s(:if,
                  s(:ivar, :@resume),
                  s(:begin,
                    s(:lvasgn, :rest_offset,
                      s(:send,
                        s(:const, nil, :File), :size?,
                        s(:lvar, :localfile))),
                    s(:lvasgn, :f,
                      s(:send, nil, :open,
                        s(:lvar, :localfile),
                        s(:str, "a")))),
                  s(:begin,
                    s(:lvasgn, :rest_offset,
                      s(:nil)),
                    s(:lvasgn, :f,
                      s(:send, nil, :open,
                        s(:lvar, :localfile),
                        s(:str, "w"))))),
                s(:if,
                  s(:send,
                    s(:send, nil, :block_given?), :!),
                  s(:lvasgn, :result,
                    s(:send,
                      s(:const, nil, :String), :new)), nil)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:csend,
                      s(:lvar, :f), :binmode),
                    s(:block,
                      s(:send, nil, :retrbinary,
                        s(:dstr,
                          s(:str, "RETR "),
                          s(:begin,
                            s(:lvar, :remotefile))),
                        s(:lvar, :blocksize),
                        s(:lvar, :rest_offset)),
                      s(:args,
                        s(:arg, :data)),
                      s(:begin,
                        s(:csend,
                          s(:lvar, :f), :write,
                          s(:lvar, :data)),
                        s(:csend,
                          s(:lvar, :block), :call,
                          s(:lvar, :data)),
                        s(:csend,
                          s(:lvar, :result), :concat,
                          s(:lvar, :data)))),
                    s(:return,
                      s(:lvar, :result))),
                  s(:csend,
                    s(:lvar, :f), :close))))),
          s(:def, :gettextfile,
            s(:args,
              s(:arg, :remotefile),
              s(:optarg, :localfile,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :remotefile))),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :f,
                s(:nil)),
              s(:lvasgn, :result,
                s(:nil)),
              s(:if,
                s(:lvar, :localfile),
                s(:lvasgn, :f,
                  s(:send, nil, :open,
                    s(:lvar, :localfile),
                    s(:str, "w"))),
                s(:if,
                  s(:send,
                    s(:send, nil, :block_given?), :!),
                  s(:lvasgn, :result,
                    s(:send,
                      s(:const, nil, :String), :new)), nil)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:block,
                      s(:send, nil, :retrlines,
                        s(:dstr,
                          s(:str, "RETR "),
                          s(:begin,
                            s(:lvar, :remotefile)))),
                      s(:args,
                        s(:arg, :line),
                        s(:arg, :newline)),
                      s(:begin,
                        s(:lvasgn, :l,
                          s(:if,
                            s(:lvar, :newline),
                            s(:send,
                              s(:lvar, :line), :+,
                              s(:str, "\n")),
                            s(:lvar, :line))),
                        s(:csend,
                          s(:lvar, :f), :print,
                          s(:lvar, :l)),
                        s(:csend,
                          s(:lvar, :block), :call,
                          s(:lvar, :line),
                          s(:lvar, :newline)),
                        s(:csend,
                          s(:lvar, :result), :concat,
                          s(:lvar, :l)))),
                    s(:return,
                      s(:lvar, :result))),
                  s(:csend,
                    s(:lvar, :f), :close))))),
          s(:def, :get,
            s(:args,
              s(:arg, :remotefile),
              s(:optarg, :localfile,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :remotefile))),
              s(:optarg, :blocksize,
                s(:const, nil, :DEFAULT_BLOCKSIZE)),
              s(:blockarg, :block)),
            s(:if,
              s(:ivar, :@binary),
              s(:send, nil, :getbinaryfile,
                s(:lvar, :remotefile),
                s(:lvar, :localfile),
                s(:lvar, :blocksize),
                s(:block_pass,
                  s(:lvar, :block))),
              s(:send, nil, :gettextfile,
                s(:lvar, :remotefile),
                s(:lvar, :localfile),
                s(:block_pass,
                  s(:lvar, :block))))),
          s(:def, :putbinaryfile,
            s(:args,
              s(:arg, :localfile),
              s(:optarg, :remotefile,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :localfile))),
              s(:optarg, :blocksize,
                s(:const, nil, :DEFAULT_BLOCKSIZE)),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:ivar, :@resume),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :rest_offset,
                      s(:send, nil, :size,
                        s(:lvar, :remotefile))),
                    s(:resbody,
                      s(:array,
                        s(:const,
                          s(:const, nil, :Net), :FTPPermError)), nil,
                      s(:lvasgn, :rest_offset,
                        s(:nil))), nil)),
                s(:lvasgn, :rest_offset,
                  s(:nil))),
              s(:lvasgn, :f,
                s(:send, nil, :open,
                  s(:lvar, :localfile))),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:send,
                      s(:lvar, :f), :binmode),
                    s(:if,
                      s(:lvar, :rest_offset),
                      s(:send, nil, :storbinary,
                        s(:dstr,
                          s(:str, "APPE "),
                          s(:begin,
                            s(:lvar, :remotefile))),
                        s(:lvar, :f),
                        s(:lvar, :blocksize),
                        s(:lvar, :rest_offset),
                        s(:block_pass,
                          s(:lvar, :block))),
                      s(:send, nil, :storbinary,
                        s(:dstr,
                          s(:str, "STOR "),
                          s(:begin,
                            s(:lvar, :remotefile))),
                        s(:lvar, :f),
                        s(:lvar, :blocksize),
                        s(:lvar, :rest_offset),
                        s(:block_pass,
                          s(:lvar, :block))))),
                  s(:send,
                    s(:lvar, :f), :close))))),
          s(:def, :puttextfile,
            s(:args,
              s(:arg, :localfile),
              s(:optarg, :remotefile,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :localfile))),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :f,
                s(:send, nil, :open,
                  s(:lvar, :localfile))),
              s(:kwbegin,
                s(:ensure,
                  s(:send, nil, :storlines,
                    s(:dstr,
                      s(:str, "STOR "),
                      s(:begin,
                        s(:lvar, :remotefile))),
                    s(:lvar, :f),
                    s(:block_pass,
                      s(:lvar, :block))),
                  s(:send,
                    s(:lvar, :f), :close))))),
          s(:def, :put,
            s(:args,
              s(:arg, :localfile),
              s(:optarg, :remotefile,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:lvar, :localfile))),
              s(:optarg, :blocksize,
                s(:const, nil, :DEFAULT_BLOCKSIZE)),
              s(:blockarg, :block)),
            s(:if,
              s(:ivar, :@binary),
              s(:send, nil, :putbinaryfile,
                s(:lvar, :localfile),
                s(:lvar, :remotefile),
                s(:lvar, :blocksize),
                s(:block_pass,
                  s(:lvar, :block))),
              s(:send, nil, :puttextfile,
                s(:lvar, :localfile),
                s(:lvar, :remotefile),
                s(:block_pass,
                  s(:lvar, :block))))),
          s(:def, :acct,
            s(:args,
              s(:arg, :account)),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:send,
                  s(:str, "ACCT "), :+,
                  s(:lvar, :account))),
              s(:send, nil, :voidcmd,
                s(:lvar, :cmd)))),
          s(:def, :nlst,
            s(:args,
              s(:optarg, :dir,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:str, "NLST")),
              s(:if,
                s(:lvar, :dir),
                s(:lvasgn, :cmd,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :cmd)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :dir)))), nil),
              s(:lvasgn, :files,
                s(:array)),
              s(:block,
                s(:send, nil, :retrlines,
                  s(:lvar, :cmd)),
                s(:args,
                  s(:arg, :line)),
                s(:send,
                  s(:lvar, :files), :push,
                  s(:lvar, :line))),
              s(:return,
                s(:lvar, :files)))),
          s(:def, :list,
            s(:args,
              s(:restarg, :args),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:str, "LIST")),
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :arg)),
                s(:lvasgn, :cmd,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :cmd)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :arg))))),
              s(:lvasgn, :lines,
                s(:array)),
              s(:block,
                s(:send, nil, :retrlines,
                  s(:lvar, :cmd)),
                s(:args,
                  s(:arg, :line)),
                s(:send,
                  s(:lvar, :lines), :<<,
                  s(:lvar, :line))),
              s(:if,
                s(:lvar, :block),
                s(:send,
                  s(:lvar, :lines), :each,
                  s(:block_pass,
                    s(:lvar, :block))), nil),
              s(:return,
                s(:lvar, :lines)))),
          s(:alias,
            s(:sym, :ls),
            s(:sym, :list)),
          s(:alias,
            s(:sym, :dir),
            s(:sym, :list)),
          s(:class,
            s(:const, nil, :MLSxEntry), nil,
            s(:begin,
              s(:send, nil, :attr_reader,
                s(:sym, :facts),
                s(:sym, :pathname)),
              s(:def, :initialize,
                s(:args,
                  s(:arg, :facts),
                  s(:arg, :pathname)),
                s(:begin,
                  s(:ivasgn, :@facts,
                    s(:lvar, :facts)),
                  s(:ivasgn, :@pathname,
                    s(:lvar, :pathname)))),
              s(:lvasgn, :standard_facts,
                s(:array,
                  s(:str, "size"),
                  s(:str, "modify"),
                  s(:str, "create"),
                  s(:str, "type"),
                  s(:str, "unique"),
                  s(:str, "perm"),
                  s(:str, "lang"),
                  s(:str, "media-type"),
                  s(:str, "charset"))),
              s(:block,
                s(:send,
                  s(:lvar, :standard_facts), :each),
                s(:args,
                  s(:arg, :factname)),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:send,
                      s(:lvar, :factname), :gsub,
                      s(:regexp,
                        s(:str, "-"),
                        s(:regopt)),
                      s(:str, "_"))),
                  s(:args),
                  s(:send,
                    s(:send, nil, :facts), :[],
                    s(:lvar, :factname)))),
              s(:def, :file?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "type")), :==,
                    s(:str, "file")))),
              s(:def, :directory?,
                s(:args),
                s(:if,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\A[cp]?dir\\z"),
                      s(:regopt)), :match,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "type"))),
                  s(:return,
                    s(:true)),
                  s(:return,
                    s(:false)))),
              s(:def, :appendable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "a")))),
              s(:def, :creatable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "c")))),
              s(:def, :deletable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "d")))),
              s(:def, :enterable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "e")))),
              s(:def, :renamable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "f")))),
              s(:def, :listable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "l")))),
              s(:def, :directory_makable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "m")))),
              s(:def, :purgeable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "p")))),
              s(:def, :readable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "r")))),
              s(:def, :writable?,
                s(:args),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:send, nil, :facts), :[],
                      s(:str, "perm")), :include?,
                    s(:str, "w")))))),
          s(:casgn, nil, :CASE_DEPENDENT_PARSER,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :value)),
              s(:lvar, :value))),
          s(:casgn, nil, :CASE_INDEPENDENT_PARSER,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :value)),
              s(:send,
                s(:lvar, :value), :downcase))),
          s(:casgn, nil, :DECIMAL_PARSER,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :value)),
              s(:send,
                s(:lvar, :value), :to_i))),
          s(:casgn, nil, :OCTAL_PARSER,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :value)),
              s(:send,
                s(:lvar, :value), :to_i,
                s(:int, 8)))),
          s(:casgn, nil, :TIME_PARSER,
            s(:block,
              s(:send, nil, :lambda),
              s(:args,
                s(:arg, :value),
                s(:optarg, :local,
                  s(:false))),
              s(:begin,
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A(?<year>\\d{4})(?<month>\\d{2})(?<day>\\d{2})\n"),
                      s(:str, "            (?<hour>\\d{2})(?<min>\\d{2})(?<sec>\\d{2})\n"),
                      s(:str, "            (\\.(?<fractions>\\d+))?"),
                      s(:regopt, :x)),
                    s(:lvar, :value)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPProtoError),
                    s(:dstr,
                      s(:str, "invalid time-val: "),
                      s(:begin,
                        s(:lvar, :value))))),
                s(:lvasgn, :usec,
                  s(:send,
                    s(:send,
                      s(:lvar, :fractions), :to_i), :*,
                    s(:send,
                      s(:int, 10), :**,
                      s(:begin,
                        s(:send,
                          s(:int, 6), :-,
                          s(:send,
                            s(:send,
                              s(:lvar, :fractions), :to_s), :size)))))),
                s(:send,
                  s(:const, nil, :Time), :send,
                  s(:if,
                    s(:lvar, :local),
                    s(:sym, :local),
                    s(:sym, :utc)),
                  s(:lvar, :year),
                  s(:lvar, :month),
                  s(:lvar, :day),
                  s(:lvar, :hour),
                  s(:lvar, :min),
                  s(:lvar, :sec),
                  s(:lvar, :usec))))),
          s(:casgn, nil, :FACT_PARSERS,
            s(:send,
              s(:const, nil, :Hash), :new,
              s(:const, nil, :CASE_DEPENDENT_PARSER))),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "size"),
            s(:const, nil, :DECIMAL_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "modify"),
            s(:const, nil, :TIME_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "create"),
            s(:const, nil, :TIME_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "type"),
            s(:const, nil, :CASE_INDEPENDENT_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "unique"),
            s(:const, nil, :CASE_DEPENDENT_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "perm"),
            s(:const, nil, :CASE_INDEPENDENT_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "lang"),
            s(:const, nil, :CASE_INDEPENDENT_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "media-type"),
            s(:const, nil, :CASE_INDEPENDENT_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "charset"),
            s(:const, nil, :CASE_INDEPENDENT_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "unix.mode"),
            s(:const, nil, :OCTAL_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "unix.owner"),
            s(:const, nil, :DECIMAL_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "unix.group"),
            s(:const, nil, :DECIMAL_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "unix.ctime"),
            s(:const, nil, :TIME_PARSER)),
          s(:send,
            s(:const, nil, :FACT_PARSERS), :[]=,
            s(:str, "unix.atime"),
            s(:const, nil, :TIME_PARSER)),
          s(:def, :parse_mlsx_entry,
            s(:args,
              s(:arg, :entry)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :facts),
                  s(:lvasgn, :pathname)),
                s(:send,
                  s(:send,
                    s(:lvar, :entry), :chomp), :split,
                  s(:regexp,
                    s(:str, " "),
                    s(:regopt)),
                  s(:int, 2))),
              s(:if,
                s(:lvar, :pathname), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :FTPProtoError),
                  s(:lvar, :entry))),
              s(:return,
                s(:send,
                  s(:const, nil, :MLSxEntry), :new,
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :facts), :scan,
                        s(:regexp,
                          s(:str, "(.*?)=(.*?);"),
                          s(:regopt))), :each_with_object,
                      s(:hash)),
                    s(:args,
                      s(:mlhs,
                        s(:arg, :factname),
                        s(:arg, :value)),
                      s(:arg, :h)),
                    s(:begin,
                      s(:lvasgn, :name,
                        s(:send,
                          s(:lvar, :factname), :downcase)),
                      s(:send,
                        s(:lvar, :h), :[]=,
                        s(:lvar, :name),
                        s(:send,
                          s(:send,
                            s(:const, nil, :FACT_PARSERS), :[],
                            s(:lvar, :name)), :call,
                          s(:lvar, :value))))),
                  s(:lvar, :pathname))))),
          s(:send, nil, :private,
            s(:sym, :parse_mlsx_entry)),
          s(:def, :mlst,
            s(:args,
              s(:optarg, :pathname,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:if,
                  s(:lvar, :pathname),
                  s(:dstr,
                    s(:str, "MLST "),
                    s(:begin,
                      s(:lvar, :pathname))),
                  s(:str, "MLST"))),
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:lvar, :cmd))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "250")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:lvasgn, :line,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :lines), :[],
                  s(:int, 1))),
              s(:if,
                s(:lvar, :line), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :FTPProtoError),
                  s(:lvar, :resp))),
              s(:lvasgn, :entry,
                s(:send,
                  s(:lvar, :line), :sub,
                  s(:regexp,
                    s(:str, "\\A(250-| *)"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:return,
                s(:send, nil, :parse_mlsx_entry,
                  s(:lvar, :entry))))),
          s(:def, :mlsd,
            s(:args,
              s(:optarg, :pathname,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:if,
                  s(:lvar, :pathname),
                  s(:dstr,
                    s(:str, "MLSD "),
                    s(:begin,
                      s(:lvar, :pathname))),
                  s(:str, "MLSD"))),
              s(:lvasgn, :entries,
                s(:array)),
              s(:block,
                s(:send, nil, :retrlines,
                  s(:lvar, :cmd)),
                s(:args,
                  s(:arg, :line)),
                s(:send,
                  s(:lvar, :entries), :<<,
                  s(:send, nil, :parse_mlsx_entry,
                    s(:lvar, :line)))),
              s(:if,
                s(:lvar, :block),
                s(:send,
                  s(:lvar, :entries), :each,
                  s(:block_pass,
                    s(:lvar, :block))), nil),
              s(:return,
                s(:lvar, :entries)))),
          s(:def, :rename,
            s(:args,
              s(:arg, :fromname),
              s(:arg, :toname)),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:dstr,
                    s(:str, "RNFR "),
                    s(:begin,
                      s(:lvar, :fromname))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "3")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:send, nil, :voidcmd,
                s(:dstr,
                  s(:str, "RNTO "),
                  s(:begin,
                    s(:lvar, :toname)))))),
          s(:def, :delete,
            s(:args,
              s(:arg, :filename)),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:dstr,
                    s(:str, "DELE "),
                    s(:begin,
                      s(:lvar, :filename))))),
              s(:if,
                s(:send,
                  s(:lvar, :resp), :start_with?,
                  s(:str, "250")),
                s(:return),
                s(:if,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "5")),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPPermError),
                    s(:lvar, :resp)),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPReplyError),
                    s(:lvar, :resp)))))),
          s(:def, :chdir,
            s(:args,
              s(:arg, :dirname)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :dirname), :==,
                  s(:str, "..")),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send, nil, :voidcmd,
                        s(:str, "CDUP")),
                      s(:return)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :FTPPermError)),
                      s(:lvasgn, :e),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :e), :message), :[],
                            s(:int, 0),
                            s(:int, 3)), :!=,
                          s(:str, "500")),
                        s(:send, nil, :raise,
                          s(:lvar, :e)), nil)), nil)), nil),
              s(:lvasgn, :cmd,
                s(:dstr,
                  s(:str, "CWD "),
                  s(:begin,
                    s(:lvar, :dirname)))),
              s(:send, nil, :voidcmd,
                s(:lvar, :cmd)))),
          s(:def, :get_body,
            s(:args,
              s(:arg, :resp)),
            s(:send,
              s(:lvar, :resp), :slice,
              s(:regexp,
                s(:str, "\\A[0-9a-zA-Z]{3} (.*)$"),
                s(:regopt)),
              s(:int, 1))),
          s(:send, nil, :private,
            s(:sym, :get_body)),
          s(:def, :size,
            s(:args,
              s(:arg, :filename)),
            s(:block,
              s(:send, nil, :with_binary,
                s(:true)),
              s(:args),
              s(:begin,
                s(:lvasgn, :resp,
                  s(:send, nil, :sendcmd,
                    s(:dstr,
                      s(:str, "SIZE "),
                      s(:begin,
                        s(:lvar, :filename))))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :resp), :start_with?,
                      s(:str, "213")), :!),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPReplyError),
                    s(:lvar, :resp)), nil),
                s(:return,
                  s(:send,
                    s(:send, nil, :get_body,
                      s(:lvar, :resp)), :to_i))))),
          s(:def, :mtime,
            s(:args,
              s(:arg, :filename),
              s(:optarg, :local,
                s(:false))),
            s(:return,
              s(:send,
                s(:const, nil, :TIME_PARSER), :call,
                s(:send, nil, :mdtm,
                  s(:lvar, :filename)),
                s(:lvar, :local)))),
          s(:def, :mkdir,
            s(:args,
              s(:arg, :dirname)),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:dstr,
                    s(:str, "MKD "),
                    s(:begin,
                      s(:lvar, :dirname))))),
              s(:return,
                s(:send, nil, :parse257,
                  s(:lvar, :resp))))),
          s(:def, :rmdir,
            s(:args,
              s(:arg, :dirname)),
            s(:send, nil, :voidcmd,
              s(:dstr,
                s(:str, "RMD "),
                s(:begin,
                  s(:lvar, :dirname))))),
          s(:def, :pwd,
            s(:args),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:str, "PWD"))),
              s(:return,
                s(:send, nil, :parse257,
                  s(:lvar, :resp))))),
          s(:alias,
            s(:sym, :getdir),
            s(:sym, :pwd)),
          s(:def, :system,
            s(:args),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:str, "SYST"))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "215")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:return,
                s(:send, nil, :get_body,
                  s(:lvar, :resp))))),
          s(:def, :abort,
            s(:args),
            s(:begin,
              s(:lvasgn, :line,
                s(:send,
                  s(:str, "ABOR"), :+,
                  s(:const, nil, :CRLF))),
              s(:if,
                s(:ivar, :@debug_mode),
                s(:send, nil, :print,
                  s(:str, "put: ABOR\n")), nil),
              s(:send,
                s(:ivar, :@sock), :send,
                s(:lvar, :line),
                s(:const,
                  s(:const, nil, :Socket), :MSG_OOB)),
              s(:lvasgn, :resp,
                s(:send, nil, :getmultiline)),
              s(:if,
                s(:send,
                  s(:array,
                    s(:str, "426"),
                    s(:str, "226"),
                    s(:str, "225")), :include?,
                  s(:send,
                    s(:lvar, :resp), :[],
                    s(:int, 0),
                    s(:int, 3))), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :FTPProtoError),
                  s(:lvar, :resp))),
              s(:return,
                s(:lvar, :resp)))),
          s(:def, :status,
            s(:args),
            s(:begin,
              s(:lvasgn, :line,
                s(:send,
                  s(:str, "STAT"), :+,
                  s(:const, nil, :CRLF))),
              s(:if,
                s(:ivar, :@debug_mode),
                s(:send, nil, :print,
                  s(:str, "put: STAT\n")), nil),
              s(:send,
                s(:ivar, :@sock), :send,
                s(:lvar, :line),
                s(:const,
                  s(:const, nil, :Socket), :MSG_OOB)),
              s(:return,
                s(:send, nil, :getresp)))),
          s(:def, :mdtm,
            s(:args,
              s(:arg, :filename)),
            s(:begin,
              s(:lvasgn, :resp,
                s(:send, nil, :sendcmd,
                  s(:dstr,
                    s(:str, "MDTM "),
                    s(:begin,
                      s(:lvar, :filename))))),
              s(:if,
                s(:send,
                  s(:lvar, :resp), :start_with?,
                  s(:str, "213")),
                s(:return,
                  s(:send, nil, :get_body,
                    s(:lvar, :resp))), nil))),
          s(:def, :help,
            s(:args,
              s(:optarg, :arg,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:str, "HELP")),
              s(:if,
                s(:lvar, :arg),
                s(:lvasgn, :cmd,
                  s(:send,
                    s(:send,
                      s(:lvar, :cmd), :+,
                      s(:str, " ")), :+,
                    s(:lvar, :arg))), nil),
              s(:send, nil, :sendcmd,
                s(:lvar, :cmd)))),
          s(:def, :quit,
            s(:args),
            s(:send, nil, :voidcmd,
              s(:str, "QUIT"))),
          s(:def, :noop,
            s(:args),
            s(:send, nil, :voidcmd,
              s(:str, "NOOP"))),
          s(:def, :site,
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:lvasgn, :cmd,
                s(:send,
                  s(:str, "SITE "), :+,
                  s(:lvar, :arg))),
              s(:send, nil, :voidcmd,
                s(:lvar, :cmd)))),
          s(:def, :close,
            s(:args),
            s(:if,
              s(:and,
                s(:ivar, :@sock),
                s(:send,
                  s(:send,
                    s(:ivar, :@sock), :closed?), :!)),
              s(:kwbegin,
                s(:ensure,
                  s(:begin,
                    s(:rescue,
                      s(:send,
                        s(:ivar, :@sock), :shutdown,
                        s(:const,
                          s(:const, nil, :Socket), :SHUT_WR)),
                      s(:resbody, nil, nil,
                        s(:nil)), nil),
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :orig),
                        s(:send,
                          s(:self), :read_timeout=)),
                      s(:array,
                        s(:send,
                          s(:self), :read_timeout),
                        s(:int, 3))),
                    s(:rescue,
                      s(:send,
                        s(:ivar, :@sock), :read),
                      s(:resbody, nil, nil,
                        s(:nil)), nil)),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@sock), :close),
                    s(:send,
                      s(:self), :read_timeout=,
                      s(:lvar, :orig))))), nil)),
          s(:def, :closed?,
            s(:args),
            s(:or,
              s(:send,
                s(:ivar, :@sock), :==,
                s(:nil)),
              s(:send,
                s(:ivar, :@sock), :closed?))),
          s(:def, :parse227,
            s(:args,
              s(:arg, :resp)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "227")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:if,
                s(:lvasgn, :m,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\((?<host>\\d+(,\\d+){3}),(?<port>\\d+,\\d+)\\)"),
                      s(:regopt)), :match,
                    s(:lvar, :resp))),
                s(:return,
                  s(:send, nil, :parse_pasv_ipv4_host,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:str, "host"))),
                  s(:send, nil, :parse_pasv_port,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:str, "port")))),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPProtoError),
                  s(:lvar, :resp))))),
          s(:send, nil, :private,
            s(:sym, :parse227)),
          s(:def, :parse228,
            s(:args,
              s(:arg, :resp)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "228")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:if,
                s(:lvasgn, :m,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\(4,4,(?<host>\\d+(,\\d+){3}),2,(?<port>\\d+,\\d+)\\)"),
                      s(:regopt)), :match,
                    s(:lvar, :resp))),
                s(:return,
                  s(:send, nil, :parse_pasv_ipv4_host,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:str, "host"))),
                  s(:send, nil, :parse_pasv_port,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:str, "port")))),
                s(:if,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:regexp,
                        s(:str, "\\(6,16,(?<host>\\d+(,(\\d+)){15}),2,(?<port>\\d+,\\d+)\\)"),
                        s(:regopt)), :match,
                      s(:lvar, :resp))),
                  s(:return,
                    s(:send, nil, :parse_pasv_ipv6_host,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:str, "host"))),
                    s(:send, nil, :parse_pasv_port,
                      s(:send,
                        s(:lvar, :m), :[],
                        s(:str, "port")))),
                  s(:send, nil, :raise,
                    s(:const, nil, :FTPProtoError),
                    s(:lvar, :resp)))))),
          s(:send, nil, :private,
            s(:sym, :parse228)),
          s(:def, :parse_pasv_ipv4_host,
            s(:args,
              s(:arg, :s)),
            s(:return,
              s(:send,
                s(:lvar, :s), :tr,
                s(:str, ","),
                s(:str, ".")))),
          s(:send, nil, :private,
            s(:sym, :parse_pasv_ipv4_host)),
          s(:def, :parse_pasv_ipv6_host,
            s(:args,
              s(:arg, :s)),
            s(:return,
              s(:send,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :s), :split,
                          s(:regexp,
                            s(:str, ","),
                            s(:regopt))), :map),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:str, "%02x"), :%,
                        s(:send,
                          s(:lvar, :i), :to_i))), :each_slice,
                    s(:int, 2)), :map,
                  s(:block_pass,
                    s(:sym, :join))), :join,
                s(:str, ":")))),
          s(:send, nil, :private,
            s(:sym, :parse_pasv_ipv6_host)),
          s(:def, :parse_pasv_port,
            s(:args,
              s(:arg, :s)),
            s(:return,
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :split,
                      s(:regexp,
                        s(:str, ","),
                        s(:regopt))), :map,
                    s(:block_pass,
                      s(:sym, :to_i))), :inject),
                s(:args,
                  s(:arg, :x),
                  s(:arg, :y)),
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :x), :<<,
                      s(:int, 8))), :+,
                  s(:lvar, :y))))),
          s(:send, nil, :private,
            s(:sym, :parse_pasv_port)),
          s(:def, :parse229,
            s(:args,
              s(:arg, :resp)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "229")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:if,
                s(:lvasgn, :m,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\((?<d>[!-~])\\k<d>\\k<d>(?<port>\\d+)\\k<d>\\)"),
                      s(:regopt)), :match,
                    s(:lvar, :resp))),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:ivar, :@sock), :peeraddr), :[],
                    s(:int, 3)),
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:str, "port")), :to_i)),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPProtoError),
                  s(:lvar, :resp))))),
          s(:send, nil, :private,
            s(:sym, :parse229)),
          s(:def, :parse257,
            s(:args,
              s(:arg, :resp)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :start_with?,
                    s(:str, "257")), :!),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPReplyError),
                  s(:lvar, :resp)), nil),
              s(:return,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:lvar, :resp), :slice,
                      s(:regexp,
                        s(:str, "\"(([^\"]|\"\")*)\""),
                        s(:regopt)),
                      s(:int, 1)), :to_s), :gsub,
                  s(:regexp,
                    s(:str, "\"\""),
                    s(:regopt)),
                  s(:str, "\""))))),
          s(:send, nil, :private,
            s(:sym, :parse257)),
          s(:class,
            s(:const, nil, :NullSocket), nil,
            s(:begin,
              s(:def, :read_timeout=,
                s(:args,
                  s(:arg, :sec)), nil),
              s(:def, :closed?,
                s(:args),
                s(:true)),
              s(:def, :close,
                s(:args), nil),
              s(:def, :method_missing,
                s(:args,
                  s(:arg, :mid),
                  s(:restarg, :args)),
                s(:send, nil, :raise,
                  s(:const, nil, :FTPConnectionError),
                  s(:str, "not connected"))))),
          s(:class,
            s(:const, nil, :BufferedSocket),
            s(:const, nil, :BufferedIO),
            s(:begin,
              s(:block,
                s(:send,
                  s(:array,
                    s(:sym, :addr),
                    s(:sym, :peeraddr),
                    s(:sym, :send),
                    s(:sym, :shutdown)), :each),
                s(:args,
                  s(:arg, :method)),
                s(:block,
                  s(:send, nil, :define_method,
                    s(:lvar, :method)),
                  s(:args,
                    s(:restarg, :args)),
                  s(:send,
                    s(:ivar, :@io), :__send__,
                    s(:lvar, :method),
                    s(:splat,
                      s(:lvar, :args))))),
              s(:def, :read,
                s(:args,
                  s(:optarg, :len,
                    s(:nil))),
                s(:if,
                  s(:lvar, :len),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:super,
                        s(:lvar, :len),
                        s(:send,
                          s(:const, nil, :String), :new),
                        s(:true))),
                    s(:return,
                      s(:if,
                        s(:send,
                          s(:lvar, :s), :empty?),
                        s(:nil),
                        s(:lvar, :s)))),
                  s(:begin,
                    s(:lvasgn, :result,
                      s(:str, "")),
                    s(:while,
                      s(:lvasgn, :s,
                        s(:super,
                          s(:const, nil, :DEFAULT_BLOCKSIZE),
                          s(:send,
                            s(:const, nil, :String), :new),
                          s(:true))),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :s), :empty?),
                          s(:break), nil),
                        s(:send,
                          s(:lvar, :result), :<<,
                          s(:lvar, :s)))),
                    s(:return,
                      s(:lvar, :result))))),
              s(:def, :gets,
                s(:args),
                s(:begin,
                  s(:lvasgn, :line,
                    s(:send, nil, :readuntil,
                      s(:str, "\n"),
                      s(:true))),
                  s(:return,
                    s(:if,
                      s(:send,
                        s(:lvar, :line), :empty?),
                      s(:nil),
                      s(:lvar, :line))))),
              s(:def, :readline,
                s(:args),
                s(:begin,
                  s(:lvasgn, :line,
                    s(:send, nil, :gets)),
                  s(:if,
                    s(:send,
                      s(:lvar, :line), :nil?),
                    s(:send, nil, :raise,
                      s(:const, nil, :EOFError),
                      s(:str, "end of file reached")), nil),
                  s(:return,
                    s(:lvar, :line)))))))))))
