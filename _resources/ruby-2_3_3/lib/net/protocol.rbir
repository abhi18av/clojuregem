s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "timeout")),
  s(:send, nil, :require,
    s(:str, "io/wait")),
  s(:module,
    s(:const, nil, :Net),
    s(:begin,
      s(:class,
        s(:const, nil, :Protocol), nil,
        s(:begin,
          s(:send, nil, :private),
          s(:defs,
            s(:const, nil, :Protocol), :protocol_param,
            s(:args,
              s(:arg, :name),
              s(:arg, :val)),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "\n"),
                s(:str, "          "),
                s(:begin,
                  s(:lvar, :val)),
                s(:str, "\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 31), :+,
                s(:int, 1)))))),
      s(:class,
        s(:const, nil, :ProtocolError),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :ProtoSyntaxError),
        s(:const, nil, :ProtocolError), nil),
      s(:class,
        s(:const, nil, :ProtoFatalError),
        s(:const, nil, :ProtocolError), nil),
      s(:class,
        s(:const, nil, :ProtoUnknownError),
        s(:const, nil, :ProtocolError), nil),
      s(:class,
        s(:const, nil, :ProtoServerError),
        s(:const, nil, :ProtocolError), nil),
      s(:class,
        s(:const, nil, :ProtoAuthError),
        s(:const, nil, :ProtocolError), nil),
      s(:class,
        s(:const, nil, :ProtoCommandError),
        s(:const, nil, :ProtocolError), nil),
      s(:class,
        s(:const, nil, :ProtoRetriableError),
        s(:const, nil, :ProtocolError), nil),
      s(:casgn, nil, :ProtocRetryError,
        s(:const, nil, :ProtoRetriableError)),
      s(:class,
        s(:const, nil, :OpenTimeout),
        s(:const,
          s(:const, nil, :Timeout), :Error), nil),
      s(:class,
        s(:const, nil, :ReadTimeout),
        s(:const,
          s(:const, nil, :Timeout), :Error), nil),
      s(:class,
        s(:const, nil, :BufferedIO), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:ivasgn, :@io,
                s(:lvar, :io)),
              s(:ivasgn, :@read_timeout,
                s(:int, 60)),
              s(:ivasgn, :@continue_timeout,
                s(:nil)),
              s(:ivasgn, :@debug_output,
                s(:nil)),
              s(:ivasgn, :@rbuf,
                s(:str, "")))),
          s(:send, nil, :attr_reader,
            s(:sym, :io)),
          s(:send, nil, :attr_accessor,
            s(:sym, :read_timeout)),
          s(:send, nil, :attr_accessor,
            s(:sym, :continue_timeout)),
          s(:send, nil, :attr_accessor,
            s(:sym, :debug_output)),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, " io="),
              s(:begin,
                s(:ivar, :@io)),
              s(:str, ">"))),
          s(:def, :eof?,
            s(:args),
            s(:send,
              s(:ivar, :@io), :eof?)),
          s(:def, :closed?,
            s(:args),
            s(:send,
              s(:ivar, :@io), :closed?)),
          s(:def, :close,
            s(:args),
            s(:send,
              s(:ivar, :@io), :close)),
          s(:send, nil, :public),
          s(:def, :read,
            s(:args,
              s(:arg, :len),
              s(:optarg, :dest,
                s(:str, "")),
              s(:optarg, :ignore_eof,
                s(:false))),
            s(:begin,
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "reading "),
                  s(:begin,
                    s(:lvar, :len)),
                  s(:str, " bytes..."))),
              s(:lvasgn, :read_bytes,
                s(:int, 0)),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:while,
                      s(:send,
                        s(:send,
                          s(:lvar, :read_bytes), :+,
                          s(:send,
                            s(:ivar, :@rbuf), :size)), :<,
                        s(:lvar, :len)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :dest), :<<,
                          s(:begin,
                            s(:lvasgn, :s,
                              s(:send, nil, :rbuf_consume,
                                s(:send,
                                  s(:ivar, :@rbuf), :size))))),
                        s(:op_asgn,
                          s(:lvasgn, :read_bytes), :+,
                          s(:send,
                            s(:lvar, :s), :size)),
                        s(:send, nil, :rbuf_fill))),
                    s(:send,
                      s(:lvar, :dest), :<<,
                      s(:begin,
                        s(:lvasgn, :s,
                          s(:send, nil, :rbuf_consume,
                            s(:send,
                              s(:lvar, :len), :-,
                              s(:lvar, :read_bytes)))))),
                    s(:op_asgn,
                      s(:lvasgn, :read_bytes), :+,
                      s(:send,
                        s(:lvar, :s), :size))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :EOFError)), nil,
                    s(:if,
                      s(:lvar, :ignore_eof), nil,
                      s(:send, nil, :raise))), nil)),
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "read "),
                  s(:begin,
                    s(:lvar, :read_bytes)),
                  s(:str, " bytes"))),
              s(:lvar, :dest))),
          s(:def, :read_all,
            s(:args,
              s(:optarg, :dest,
                s(:str, ""))),
            s(:begin,
              s(:send, nil, :LOG,
                s(:str, "reading all...")),
              s(:lvasgn, :read_bytes,
                s(:int, 0)),
              s(:kwbegin,
                s(:rescue,
                  s(:while,
                    s(:true),
                    s(:begin,
                      s(:send,
                        s(:lvar, :dest), :<<,
                        s(:begin,
                          s(:lvasgn, :s,
                            s(:send, nil, :rbuf_consume,
                              s(:send,
                                s(:ivar, :@rbuf), :size))))),
                      s(:op_asgn,
                        s(:lvasgn, :read_bytes), :+,
                        s(:send,
                          s(:lvar, :s), :size)),
                      s(:send, nil, :rbuf_fill))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :EOFError)), nil, nil), nil)),
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "read "),
                  s(:begin,
                    s(:lvar, :read_bytes)),
                  s(:str, " bytes"))),
              s(:lvar, :dest))),
          s(:def, :readuntil,
            s(:args,
              s(:arg, :terminator),
              s(:optarg, :ignore_eof,
                s(:false))),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:until,
                    s(:lvasgn, :idx,
                      s(:send,
                        s(:ivar, :@rbuf), :index,
                        s(:lvar, :terminator))),
                    s(:send, nil, :rbuf_fill)),
                  s(:return,
                    s(:send, nil, :rbuf_consume,
                      s(:send,
                        s(:lvar, :idx), :+,
                        s(:send,
                          s(:lvar, :terminator), :size))))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :EOFError)), nil,
                  s(:begin,
                    s(:if,
                      s(:lvar, :ignore_eof), nil,
                      s(:send, nil, :raise)),
                    s(:return,
                      s(:send, nil, :rbuf_consume,
                        s(:send,
                          s(:ivar, :@rbuf), :size))))), nil))),
          s(:def, :readline,
            s(:args),
            s(:send,
              s(:send, nil, :readuntil,
                s(:str, "\n")), :chop)),
          s(:send, nil, :private),
          s(:casgn, nil, :BUFSIZE,
            s(:send,
              s(:int, 1024), :*,
              s(:int, 16))),
          s(:def, :rbuf_fill,
            s(:args),
            s(:while,
              s(:true),
              s(:case,
                s(:lvasgn, :rv,
                  s(:send,
                    s(:ivar, :@io), :read_nonblock,
                    s(:const, nil, :BUFSIZE),
                    s(:hash,
                      s(:pair,
                        s(:sym, :exception),
                        s(:false))))),
                s(:when,
                  s(:const, nil, :String),
                  s(:return,
                    s(:send,
                      s(:ivar, :@rbuf), :<<,
                      s(:lvar, :rv)))),
                s(:when,
                  s(:sym, :wait_readable),
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:ivar, :@io), :to_io), :wait_readable,
                      s(:ivar, :@read_timeout)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :ReadTimeout)))),
                s(:when,
                  s(:sym, :wait_writable),
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:ivar, :@io), :to_io), :wait_writable,
                      s(:ivar, :@read_timeout)),
                    s(:send, nil, :raise,
                      s(:const,
                        s(:const, nil, :Net), :ReadTimeout)))),
                s(:when,
                  s(:nil),
                  s(:send, nil, :raise,
                    s(:const, nil, :EOFError),
                    s(:str, "end of file reached"),
                    s(:array))), nil))),
          s(:def, :rbuf_consume,
            s(:args,
              s(:arg, :len)),
            s(:begin,
              s(:lvasgn, :s,
                s(:send,
                  s(:ivar, :@rbuf), :slice!,
                  s(:int, 0),
                  s(:lvar, :len))),
              s(:if,
                s(:ivar, :@debug_output),
                s(:send,
                  s(:ivar, :@debug_output), :<<,
                  s(:dstr,
                    s(:str, "-> "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :s), :dump)),
                    s(:str, "\n"))), nil),
              s(:lvar, :s))),
          s(:send, nil, :public),
          s(:def, :write,
            s(:args,
              s(:arg, :str)),
            s(:block,
              s(:send, nil, :writing),
              s(:args),
              s(:send, nil, :write0,
                s(:lvar, :str)))),
          s(:alias,
            s(:sym, :<<),
            s(:sym, :write)),
          s(:def, :writeline,
            s(:args,
              s(:arg, :str)),
            s(:block,
              s(:send, nil, :writing),
              s(:args),
              s(:send, nil, :write0,
                s(:send,
                  s(:lvar, :str), :+,
                  s(:str, "\r\n"))))),
          s(:send, nil, :private),
          s(:def, :writing,
            s(:args),
            s(:begin,
              s(:ivasgn, :@written_bytes,
                s(:int, 0)),
              s(:if,
                s(:ivar, :@debug_output),
                s(:send,
                  s(:ivar, :@debug_output), :<<,
                  s(:str, "<- ")), nil),
              s(:yield),
              s(:if,
                s(:ivar, :@debug_output),
                s(:send,
                  s(:ivar, :@debug_output), :<<,
                  s(:str, "\n")), nil),
              s(:lvasgn, :bytes,
                s(:ivar, :@written_bytes)),
              s(:ivasgn, :@written_bytes,
                s(:nil)),
              s(:lvar, :bytes))),
          s(:def, :write0,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:if,
                s(:ivar, :@debug_output),
                s(:send,
                  s(:ivar, :@debug_output), :<<,
                  s(:send,
                    s(:lvar, :str), :dump)), nil),
              s(:lvasgn, :len,
                s(:send,
                  s(:ivar, :@io), :write,
                  s(:lvar, :str))),
              s(:op_asgn,
                s(:ivasgn, :@written_bytes), :+,
                s(:lvar, :len)),
              s(:lvar, :len))),
          s(:send, nil, :private),
          s(:def, :LOG_off,
            s(:args),
            s(:begin,
              s(:ivasgn, :@save_debug_out,
                s(:ivar, :@debug_output)),
              s(:ivasgn, :@debug_output,
                s(:nil)))),
          s(:def, :LOG_on,
            s(:args),
            s(:ivasgn, :@debug_output,
              s(:ivar, :@save_debug_out))),
          s(:def, :LOG,
            s(:args,
              s(:arg, :msg)),
            s(:begin,
              s(:if,
                s(:ivar, :@debug_output), nil,
                s(:return)),
              s(:send,
                s(:ivar, :@debug_output), :<<,
                s(:send,
                  s(:lvar, :msg), :+,
                  s(:str, "\n"))))))),
      s(:class,
        s(:const, nil, :InternetMessageIO),
        s(:const, nil, :BufferedIO),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :io)),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@wbuf,
                s(:nil)))),
          s(:def, :each_message_chunk,
            s(:args),
            s(:begin,
              s(:send, nil, :LOG,
                s(:str, "reading message...")),
              s(:send, nil, :LOG_off),
              s(:lvasgn, :read_bytes,
                s(:int, 0)),
              s(:while,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :line,
                      s(:send, nil, :readuntil,
                        s(:str, "\r\n")))), :!=,
                  s(:str, ".\r\n")),
                s(:begin,
                  s(:op_asgn,
                    s(:lvasgn, :read_bytes), :+,
                    s(:send,
                      s(:lvar, :line), :size)),
                  s(:yield,
                    s(:send,
                      s(:lvar, :line), :sub,
                      s(:regexp,
                        s(:str, "\\A\\."),
                        s(:regopt)),
                      s(:str, ""))))),
              s(:send, nil, :LOG_on),
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "read message ("),
                  s(:begin,
                    s(:lvar, :read_bytes)),
                  s(:str, " bytes)"))))),
          s(:def, :each_list_item,
            s(:args),
            s(:while,
              s(:send,
                s(:begin,
                  s(:lvasgn, :str,
                    s(:send, nil, :readuntil,
                      s(:str, "\r\n")))), :!=,
                s(:str, ".\r\n")),
              s(:yield,
                s(:send,
                  s(:lvar, :str), :chop)))),
          s(:def, :write_message_0,
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:lvasgn, :prev,
                s(:ivar, :@written_bytes)),
              s(:block,
                s(:send, nil, :each_crlf_line,
                  s(:lvar, :src)),
                s(:args,
                  s(:arg, :line)),
                s(:send, nil, :write0,
                  s(:send, nil, :dot_stuff,
                    s(:lvar, :line)))),
              s(:send,
                s(:ivar, :@written_bytes), :-,
                s(:lvar, :prev)))),
          s(:def, :write_message,
            s(:args,
              s(:arg, :src)),
            s(:begin,
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "writing message from "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :src), :class)))),
              s(:send, nil, :LOG_off),
              s(:lvasgn, :len,
                s(:block,
                  s(:send, nil, :writing),
                  s(:args),
                  s(:block,
                    s(:send, nil, :using_each_crlf_line),
                    s(:args),
                    s(:send, nil, :write_message_0,
                      s(:lvar, :src))))),
              s(:send, nil, :LOG_on),
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "wrote "),
                  s(:begin,
                    s(:lvar, :len)),
                  s(:str, " bytes"))),
              s(:lvar, :len))),
          s(:def, :write_message_by_block,
            s(:args,
              s(:blockarg, :block)),
            s(:begin,
              s(:send, nil, :LOG,
                s(:str, "writing message from block")),
              s(:send, nil, :LOG_off),
              s(:lvasgn, :len,
                s(:block,
                  s(:send, nil, :writing),
                  s(:args),
                  s(:block,
                    s(:send, nil, :using_each_crlf_line),
                    s(:args),
                    s(:kwbegin,
                      s(:rescue,
                        s(:send,
                          s(:lvar, :block), :call,
                          s(:send,
                            s(:const, nil, :WriteAdapter), :new,
                            s(:self),
                            s(:sym, :write_message_0))),
                        s(:resbody,
                          s(:array,
                            s(:const, nil, :LocalJumpError)), nil, nil), nil))))),
              s(:send, nil, :LOG_on),
              s(:send, nil, :LOG,
                s(:dstr,
                  s(:str, "wrote "),
                  s(:begin,
                    s(:lvar, :len)),
                  s(:str, " bytes"))),
              s(:lvar, :len))),
          s(:send, nil, :private),
          s(:def, :dot_stuff,
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:lvar, :s), :sub,
              s(:regexp,
                s(:str, "\\A\\."),
                s(:regopt)),
              s(:str, ".."))),
          s(:def, :using_each_crlf_line,
            s(:args),
            s(:begin,
              s(:ivasgn, :@wbuf,
                s(:str, "")),
              s(:yield),
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@wbuf), :empty?), :!),
                s(:send, nil, :write0,
                  s(:send,
                    s(:send, nil, :dot_stuff,
                      s(:send,
                        s(:ivar, :@wbuf), :chomp)), :+,
                    s(:str, "\r\n"))),
                s(:if,
                  s(:send,
                    s(:ivar, :@written_bytes), :==,
                    s(:int, 0)),
                  s(:send, nil, :write0,
                    s(:str, "\r\n")), nil)),
              s(:send, nil, :write0,
                s(:str, ".\r\n")),
              s(:ivasgn, :@wbuf,
                s(:nil)))),
          s(:def, :each_crlf_line,
            s(:args,
              s(:arg, :src)),
            s(:block,
              s(:send, nil, :buffer_filling,
                s(:ivar, :@wbuf),
                s(:lvar, :src)),
              s(:args),
              s(:while,
                s(:lvasgn, :line,
                  s(:send,
                    s(:ivar, :@wbuf), :slice!,
                    s(:regexp,
                      s(:str, "\\A[^\\r\\n]*(?:\\n|\\r(?:\\n|(?!\\z)))"),
                      s(:regopt)))),
                s(:yield,
                  s(:send,
                    s(:send,
                      s(:lvar, :line), :chomp,
                      s(:str, "\n")), :+,
                    s(:str, "\r\n")))))),
          s(:def, :buffer_filling,
            s(:args,
              s(:arg, :buf),
              s(:arg, :src)),
            s(:case,
              s(:lvar, :src),
              s(:when,
                s(:const, nil, :String),
                s(:block,
                  s(:send,
                    s(:int, 0), :step,
                    s(:send,
                      s(:send,
                        s(:lvar, :src), :size), :-,
                      s(:int, 1)),
                    s(:int, 1024)),
                  s(:args,
                    s(:arg, :i)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :buf), :<<,
                      s(:send,
                        s(:lvar, :src), :[],
                        s(:lvar, :i),
                        s(:int, 1024))),
                    s(:yield)))),
              s(:when,
                s(:const, nil, :File),
                s(:while,
                  s(:lvasgn, :s,
                    s(:send,
                      s(:lvar, :src), :read,
                      s(:int, 1024))),
                  s(:begin,
                    s(:send,
                      s(:lvar, :buf), :<<,
                      s(:lvar, :s)),
                    s(:yield)))),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:lvar, :src), :each),
                  s(:args,
                    s(:arg, :str)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :buf), :<<,
                      s(:lvar, :str)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :buf), :size), :>,
                        s(:int, 1024)),
                      s(:yield), nil))),
                s(:if,
                  s(:send,
                    s(:lvar, :buf), :empty?), nil,
                  s(:yield))))))),
      s(:class,
        s(:const, nil, :WriteAdapter), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :socket),
              s(:arg, :method)),
            s(:begin,
              s(:ivasgn, :@socket,
                s(:lvar, :socket)),
              s(:ivasgn, :@method_id,
                s(:lvar, :method)))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, " socket="),
              s(:begin,
                s(:send,
                  s(:ivar, :@socket), :inspect)),
              s(:str, ">"))),
          s(:def, :write,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:ivar, :@socket), :__send__,
              s(:ivar, :@method_id),
              s(:lvar, :str))),
          s(:alias,
            s(:sym, :print),
            s(:sym, :write)),
          s(:def, :<<,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:send, nil, :write,
                s(:lvar, :str)),
              s(:self))),
          s(:def, :puts,
            s(:args,
              s(:optarg, :str,
                s(:str, ""))),
            s(:send, nil, :write,
              s(:send,
                s(:send,
                  s(:lvar, :str), :chomp,
                  s(:str, "\n")), :+,
                s(:str, "\n")))),
          s(:def, :printf,
            s(:args,
              s(:restarg, :args)),
            s(:send, nil, :write,
              s(:send, nil, :sprintf,
                s(:splat,
                  s(:lvar, :args))))))),
      s(:class,
        s(:const, nil, :ReadAdapter), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :block)),
            s(:ivasgn, :@block,
              s(:lvar, :block))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, ">"))),
          s(:def, :<<,
            s(:args,
              s(:arg, :str)),
            s(:if,
              s(:ivar, :@block),
              s(:send, nil, :call_block,
                s(:lvar, :str),
                s(:block_pass,
                  s(:ivar, :@block))), nil)),
          s(:send, nil, :private),
          s(:def, :call_block,
            s(:args,
              s(:arg, :str)),
            s(:yield,
              s(:lvar, :str))))),
      s(:module,
        s(:const, nil, :NetPrivate),
        s(:casgn, nil, :Socket,
          s(:const,
            s(:const,
              s(:cbase), :Net), :InternetMessageIO))))))
