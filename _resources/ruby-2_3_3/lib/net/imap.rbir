s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:send, nil, :require,
    s(:str, "monitor")),
  s(:send, nil, :require,
    s(:str, "digest/md5")),
  s(:send, nil, :require,
    s(:str, "strscan")),
  s(:kwbegin,
    s(:rescue,
      s(:send, nil, :require,
        s(:str, "openssl")),
      s(:resbody,
        s(:array,
          s(:const, nil, :LoadError)), nil, nil), nil)),
  s(:module,
    s(:const, nil, :Net),
    s(:class,
      s(:const, nil, :IMAP), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :MonitorMixin)),
        s(:if,
          s(:defined?,
            s(:const,
              s(:const, nil, :OpenSSL), :SSL)),
          s(:begin,
            s(:send, nil, :include,
              s(:const, nil, :OpenSSL)),
            s(:send, nil, :include,
              s(:const, nil, :SSL))), nil),
        s(:send, nil, :attr_reader,
          s(:sym, :greeting)),
        s(:send, nil, :attr_reader,
          s(:sym, :responses)),
        s(:send, nil, :attr_reader,
          s(:sym, :response_handlers)),
        s(:send, nil, :attr_accessor,
          s(:sym, :client_thread)),
        s(:casgn, nil, :SEEN,
          s(:sym, :Seen)),
        s(:casgn, nil, :ANSWERED,
          s(:sym, :Answered)),
        s(:casgn, nil, :FLAGGED,
          s(:sym, :Flagged)),
        s(:casgn, nil, :DELETED,
          s(:sym, :Deleted)),
        s(:casgn, nil, :DRAFT,
          s(:sym, :Draft)),
        s(:casgn, nil, :RECENT,
          s(:sym, :Recent)),
        s(:casgn, nil, :NOINFERIORS,
          s(:sym, :Noinferiors)),
        s(:casgn, nil, :NOSELECT,
          s(:sym, :Noselect)),
        s(:casgn, nil, :MARKED,
          s(:sym, :Marked)),
        s(:casgn, nil, :UNMARKED,
          s(:sym, :Unmarked)),
        s(:defs,
          s(:self), :debug,
          s(:args),
          s(:return,
            s(:cvar, :@@debug))),
        s(:defs,
          s(:self), :debug=,
          s(:args,
            s(:arg, :val)),
          s(:return,
            s(:cvasgn, :@@debug,
              s(:lvar, :val)))),
        s(:defs,
          s(:self), :max_flag_count,
          s(:args),
          s(:return,
            s(:cvar, :@@max_flag_count))),
        s(:defs,
          s(:self), :max_flag_count=,
          s(:args,
            s(:arg, :count)),
          s(:cvasgn, :@@max_flag_count,
            s(:lvar, :count))),
        s(:defs,
          s(:self), :add_authenticator,
          s(:args,
            s(:arg, :auth_type),
            s(:arg, :authenticator)),
          s(:send,
            s(:cvar, :@@authenticators), :[]=,
            s(:lvar, :auth_type),
            s(:lvar, :authenticator))),
        s(:defs,
          s(:self), :default_port,
          s(:args),
          s(:return,
            s(:const, nil, :PORT))),
        s(:defs,
          s(:self), :default_tls_port,
          s(:args),
          s(:return,
            s(:const, nil, :SSL_PORT))),
        s(:sclass,
          s(:self),
          s(:begin,
            s(:alias,
              s(:sym, :default_imap_port),
              s(:sym, :default_port)),
            s(:alias,
              s(:sym, :default_imaps_port),
              s(:sym, :default_tls_port)),
            s(:alias,
              s(:sym, :default_ssl_port),
              s(:sym, :default_tls_port)))),
        s(:def, :disconnect,
          s(:args),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:kwbegin,
                  s(:rescue,
                    s(:send,
                      s(:send,
                        s(:ivar, :@sock), :io), :shutdown),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :NoMethodError)), nil,
                      s(:send,
                        s(:ivar, :@sock), :shutdown)), nil)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :Errno), :ENOTCONN)), nil, nil),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)),
                  s(:lvasgn, :e),
                  s(:send,
                    s(:ivar, :@receiver_thread), :raise,
                    s(:lvar, :e))), nil)),
            s(:send,
              s(:ivar, :@receiver_thread), :join),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:if,
                s(:send,
                  s(:ivar, :@sock), :closed?), nil,
                s(:send,
                  s(:ivar, :@sock), :close))),
            s(:if,
              s(:lvar, :e),
              s(:send, nil, :raise,
                s(:lvar, :e)), nil))),
        s(:def, :disconnected?,
          s(:args),
          s(:return,
            s(:send,
              s(:ivar, :@sock), :closed?))),
        s(:def, :capability,
          s(:args),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "CAPABILITY")),
              s(:return,
                s(:send,
                  s(:send,
                    s(:ivar, :@responses), :delete,
                    s(:str, "CAPABILITY")), :[],
                  s(:int, -1)))))),
        s(:def, :noop,
          s(:args),
          s(:send, nil, :send_command,
            s(:str, "NOOP"))),
        s(:def, :logout,
          s(:args),
          s(:send, nil, :send_command,
            s(:str, "LOGOUT"))),
        s(:def, :starttls,
          s(:args,
            s(:optarg, :options,
              s(:hash)),
            s(:optarg, :verify,
              s(:true))),
          s(:block,
            s(:send, nil, :send_command,
              s(:str, "STARTTLS")),
            s(:args,
              s(:arg, :resp)),
            s(:if,
              s(:and,
                s(:send,
                  s(:lvar, :resp), :kind_of?,
                  s(:const, nil, :TaggedResponse)),
                s(:send,
                  s(:send,
                    s(:lvar, :resp), :name), :==,
                  s(:str, "OK"))),
              s(:begin,
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:lvasgn, :certs,
                        s(:send,
                          s(:lvar, :options), :to_str)),
                      s(:lvasgn, :options,
                        s(:send, nil, :create_ssl_params,
                          s(:lvar, :certs),
                          s(:lvar, :verify)))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :NoMethodError)), nil, nil), nil)),
                s(:send, nil, :start_tls_session,
                  s(:lvar, :options))), nil))),
        s(:def, :authenticate,
          s(:args,
            s(:arg, :auth_type),
            s(:restarg, :args)),
          s(:begin,
            s(:lvasgn, :auth_type,
              s(:send,
                s(:lvar, :auth_type), :upcase)),
            s(:if,
              s(:send,
                s(:cvar, :@@authenticators), :has_key?,
                s(:lvar, :auth_type)), nil,
              s(:send, nil, :raise,
                s(:const, nil, :ArgumentError),
                s(:send, nil, :format,
                  s(:str, "unknown auth type - \"%s\""),
                  s(:lvar, :auth_type)))),
            s(:lvasgn, :authenticator,
              s(:send,
                s(:send,
                  s(:cvar, :@@authenticators), :[],
                  s(:lvar, :auth_type)), :new,
                s(:splat,
                  s(:lvar, :args)))),
            s(:block,
              s(:send, nil, :send_command,
                s(:str, "AUTHENTICATE"),
                s(:lvar, :auth_type)),
              s(:args,
                s(:arg, :resp)),
              s(:if,
                s(:send,
                  s(:lvar, :resp), :instance_of?,
                  s(:const, nil, :ContinuationRequest)),
                s(:begin,
                  s(:lvasgn, :data,
                    s(:send,
                      s(:lvar, :authenticator), :process,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :resp), :data), :text), :unpack,
                          s(:str, "m")), :[],
                        s(:int, 0)))),
                  s(:lvasgn, :s,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:lvar, :data)), :pack,
                        s(:str, "m")), :gsub,
                      s(:regexp,
                        s(:str, "\\n"),
                        s(:regopt)),
                      s(:str, ""))),
                  s(:send, nil, :send_string_data,
                    s(:lvar, :s)),
                  s(:send, nil, :put_string,
                    s(:const, nil, :CRLF))), nil)))),
        s(:def, :login,
          s(:args,
            s(:arg, :user),
            s(:arg, :password)),
          s(:send, nil, :send_command,
            s(:str, "LOGIN"),
            s(:lvar, :user),
            s(:lvar, :password))),
        s(:def, :select,
          s(:args,
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@responses), :clear),
              s(:send, nil, :send_command,
                s(:str, "SELECT"),
                s(:lvar, :mailbox))))),
        s(:def, :examine,
          s(:args,
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@responses), :clear),
              s(:send, nil, :send_command,
                s(:str, "EXAMINE"),
                s(:lvar, :mailbox))))),
        s(:def, :create,
          s(:args,
            s(:arg, :mailbox)),
          s(:send, nil, :send_command,
            s(:str, "CREATE"),
            s(:lvar, :mailbox))),
        s(:def, :delete,
          s(:args,
            s(:arg, :mailbox)),
          s(:send, nil, :send_command,
            s(:str, "DELETE"),
            s(:lvar, :mailbox))),
        s(:def, :rename,
          s(:args,
            s(:arg, :mailbox),
            s(:arg, :newname)),
          s(:send, nil, :send_command,
            s(:str, "RENAME"),
            s(:lvar, :mailbox),
            s(:lvar, :newname))),
        s(:def, :subscribe,
          s(:args,
            s(:arg, :mailbox)),
          s(:send, nil, :send_command,
            s(:str, "SUBSCRIBE"),
            s(:lvar, :mailbox))),
        s(:def, :unsubscribe,
          s(:args,
            s(:arg, :mailbox)),
          s(:send, nil, :send_command,
            s(:str, "UNSUBSCRIBE"),
            s(:lvar, :mailbox))),
        s(:def, :list,
          s(:args,
            s(:arg, :refname),
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "LIST"),
                s(:lvar, :refname),
                s(:lvar, :mailbox)),
              s(:return,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "LIST")))))),
        s(:def, :xlist,
          s(:args,
            s(:arg, :refname),
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "XLIST"),
                s(:lvar, :refname),
                s(:lvar, :mailbox)),
              s(:return,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "XLIST")))))),
        s(:def, :getquotaroot,
          s(:args,
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "GETQUOTAROOT"),
                s(:lvar, :mailbox)),
              s(:lvasgn, :result,
                s(:array)),
              s(:send,
                s(:lvar, :result), :concat,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "QUOTAROOT"))),
              s(:send,
                s(:lvar, :result), :concat,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "QUOTA"))),
              s(:return,
                s(:lvar, :result))))),
        s(:def, :getquota,
          s(:args,
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "GETQUOTA"),
                s(:lvar, :mailbox)),
              s(:return,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "QUOTA")))))),
        s(:def, :setquota,
          s(:args,
            s(:arg, :mailbox),
            s(:arg, :quota)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :quota), :nil?),
              s(:lvasgn, :data,
                s(:str, "()")),
              s(:lvasgn, :data,
                s(:send,
                  s(:send,
                    s(:str, "(STORAGE "), :+,
                    s(:send,
                      s(:lvar, :quota), :to_s)), :+,
                  s(:str, ")")))),
            s(:send, nil, :send_command,
              s(:str, "SETQUOTA"),
              s(:lvar, :mailbox),
              s(:send,
                s(:const, nil, :RawData), :new,
                s(:lvar, :data))))),
        s(:def, :setacl,
          s(:args,
            s(:arg, :mailbox),
            s(:arg, :user),
            s(:arg, :rights)),
          s(:if,
            s(:send,
              s(:lvar, :rights), :nil?),
            s(:send, nil, :send_command,
              s(:str, "SETACL"),
              s(:lvar, :mailbox),
              s(:lvar, :user),
              s(:str, "")),
            s(:send, nil, :send_command,
              s(:str, "SETACL"),
              s(:lvar, :mailbox),
              s(:lvar, :user),
              s(:lvar, :rights)))),
        s(:def, :getacl,
          s(:args,
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "GETACL"),
                s(:lvar, :mailbox)),
              s(:return,
                s(:send,
                  s(:send,
                    s(:ivar, :@responses), :delete,
                    s(:str, "ACL")), :[],
                  s(:int, -1)))))),
        s(:def, :lsub,
          s(:args,
            s(:arg, :refname),
            s(:arg, :mailbox)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "LSUB"),
                s(:lvar, :refname),
                s(:lvar, :mailbox)),
              s(:return,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "LSUB")))))),
        s(:def, :status,
          s(:args,
            s(:arg, :mailbox),
            s(:arg, :attr)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "STATUS"),
                s(:lvar, :mailbox),
                s(:lvar, :attr)),
              s(:return,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:ivar, :@responses), :delete,
                      s(:str, "STATUS")), :[],
                    s(:int, -1)), :attr))))),
        s(:def, :append,
          s(:args,
            s(:arg, :mailbox),
            s(:arg, :message),
            s(:optarg, :flags,
              s(:nil)),
            s(:optarg, :date_time,
              s(:nil))),
          s(:begin,
            s(:lvasgn, :args,
              s(:array)),
            s(:if,
              s(:lvar, :flags),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :flags)), nil),
            s(:if,
              s(:lvar, :date_time),
              s(:send,
                s(:lvar, :args), :push,
                s(:lvar, :date_time)), nil),
            s(:send,
              s(:lvar, :args), :push,
              s(:send,
                s(:const, nil, :Literal), :new,
                s(:lvar, :message))),
            s(:send, nil, :send_command,
              s(:str, "APPEND"),
              s(:lvar, :mailbox),
              s(:splat,
                s(:lvar, :args))))),
        s(:def, :check,
          s(:args),
          s(:send, nil, :send_command,
            s(:str, "CHECK"))),
        s(:def, :close,
          s(:args),
          s(:send, nil, :send_command,
            s(:str, "CLOSE"))),
        s(:def, :expunge,
          s(:args),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:send, nil, :send_command,
                s(:str, "EXPUNGE")),
              s(:return,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "EXPUNGE")))))),
        s(:def, :search,
          s(:args,
            s(:arg, :keys),
            s(:optarg, :charset,
              s(:nil))),
          s(:return,
            s(:send, nil, :search_internal,
              s(:str, "SEARCH"),
              s(:lvar, :keys),
              s(:lvar, :charset)))),
        s(:def, :uid_search,
          s(:args,
            s(:arg, :keys),
            s(:optarg, :charset,
              s(:nil))),
          s(:return,
            s(:send, nil, :search_internal,
              s(:str, "UID SEARCH"),
              s(:lvar, :keys),
              s(:lvar, :charset)))),
        s(:def, :fetch,
          s(:args,
            s(:arg, :set),
            s(:arg, :attr)),
          s(:return,
            s(:send, nil, :fetch_internal,
              s(:str, "FETCH"),
              s(:lvar, :set),
              s(:lvar, :attr)))),
        s(:def, :uid_fetch,
          s(:args,
            s(:arg, :set),
            s(:arg, :attr)),
          s(:return,
            s(:send, nil, :fetch_internal,
              s(:str, "UID FETCH"),
              s(:lvar, :set),
              s(:lvar, :attr)))),
        s(:def, :store,
          s(:args,
            s(:arg, :set),
            s(:arg, :attr),
            s(:arg, :flags)),
          s(:return,
            s(:send, nil, :store_internal,
              s(:str, "STORE"),
              s(:lvar, :set),
              s(:lvar, :attr),
              s(:lvar, :flags)))),
        s(:def, :uid_store,
          s(:args,
            s(:arg, :set),
            s(:arg, :attr),
            s(:arg, :flags)),
          s(:return,
            s(:send, nil, :store_internal,
              s(:str, "UID STORE"),
              s(:lvar, :set),
              s(:lvar, :attr),
              s(:lvar, :flags)))),
        s(:def, :copy,
          s(:args,
            s(:arg, :set),
            s(:arg, :mailbox)),
          s(:send, nil, :copy_internal,
            s(:str, "COPY"),
            s(:lvar, :set),
            s(:lvar, :mailbox))),
        s(:def, :uid_copy,
          s(:args,
            s(:arg, :set),
            s(:arg, :mailbox)),
          s(:send, nil, :copy_internal,
            s(:str, "UID COPY"),
            s(:lvar, :set),
            s(:lvar, :mailbox))),
        s(:def, :move,
          s(:args,
            s(:arg, :set),
            s(:arg, :mailbox)),
          s(:send, nil, :copy_internal,
            s(:str, "MOVE"),
            s(:lvar, :set),
            s(:lvar, :mailbox))),
        s(:def, :uid_move,
          s(:args,
            s(:arg, :set),
            s(:arg, :mailbox)),
          s(:send, nil, :copy_internal,
            s(:str, "UID MOVE"),
            s(:lvar, :set),
            s(:lvar, :mailbox))),
        s(:def, :sort,
          s(:args,
            s(:arg, :sort_keys),
            s(:arg, :search_keys),
            s(:arg, :charset)),
          s(:return,
            s(:send, nil, :sort_internal,
              s(:str, "SORT"),
              s(:lvar, :sort_keys),
              s(:lvar, :search_keys),
              s(:lvar, :charset)))),
        s(:def, :uid_sort,
          s(:args,
            s(:arg, :sort_keys),
            s(:arg, :search_keys),
            s(:arg, :charset)),
          s(:return,
            s(:send, nil, :sort_internal,
              s(:str, "UID SORT"),
              s(:lvar, :sort_keys),
              s(:lvar, :search_keys),
              s(:lvar, :charset)))),
        s(:def, :add_response_handler,
          s(:args,
            s(:optarg, :handler,
              s(:send,
                s(:const, nil, :Proc), :new))),
          s(:send,
            s(:ivar, :@response_handlers), :push,
            s(:lvar, :handler))),
        s(:def, :remove_response_handler,
          s(:args,
            s(:arg, :handler)),
          s(:send,
            s(:ivar, :@response_handlers), :delete,
            s(:lvar, :handler))),
        s(:def, :thread,
          s(:args,
            s(:arg, :algorithm),
            s(:arg, :search_keys),
            s(:arg, :charset)),
          s(:return,
            s(:send, nil, :thread_internal,
              s(:str, "THREAD"),
              s(:lvar, :algorithm),
              s(:lvar, :search_keys),
              s(:lvar, :charset)))),
        s(:def, :uid_thread,
          s(:args,
            s(:arg, :algorithm),
            s(:arg, :search_keys),
            s(:arg, :charset)),
          s(:return,
            s(:send, nil, :thread_internal,
              s(:str, "UID THREAD"),
              s(:lvar, :algorithm),
              s(:lvar, :search_keys),
              s(:lvar, :charset)))),
        s(:def, :idle,
          s(:args,
            s(:optarg, :timeout,
              s(:nil)),
            s(:blockarg, :response_handler)),
          s(:begin,
            s(:if,
              s(:lvar, :response_handler), nil,
              s(:send, nil, :raise,
                s(:const, nil, :LocalJumpError),
                s(:str, "no block given"))),
            s(:lvasgn, :response,
              s(:nil)),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:lvasgn, :tag,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Thread), :current), :[]=,
                    s(:sym, :net_imap_tag),
                    s(:send, nil, :generate_tag))),
                s(:send, nil, :put_string,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :tag)),
                    s(:str, " IDLE"),
                    s(:begin,
                      s(:const, nil, :CRLF)))),
                s(:kwbegin,
                  s(:ensure,
                    s(:begin,
                      s(:send, nil, :add_response_handler,
                        s(:lvar, :response_handler)),
                      s(:ivasgn, :@idle_done_cond,
                        s(:send, nil, :new_cond)),
                      s(:send,
                        s(:ivar, :@idle_done_cond), :wait,
                        s(:lvar, :timeout)),
                      s(:ivasgn, :@idle_done_cond,
                        s(:nil)),
                      s(:if,
                        s(:ivar, :@receiver_thread_terminating),
                        s(:send, nil, :raise,
                          s(:const,
                            s(:const,
                              s(:const, nil, :Net), :IMAP), :Error),
                          s(:str, "connection closed")), nil)),
                    s(:if,
                      s(:ivar, :@receiver_thread_terminating), nil,
                      s(:begin,
                        s(:send, nil, :remove_response_handler,
                          s(:lvar, :response_handler)),
                        s(:send, nil, :put_string,
                          s(:dstr,
                            s(:str, "DONE"),
                            s(:begin,
                              s(:const, nil, :CRLF)))),
                        s(:lvasgn, :response,
                          s(:send, nil, :get_tagged_response,
                            s(:lvar, :tag),
                            s(:str, "IDLE"))))))))),
            s(:return,
              s(:lvar, :response)))),
        s(:def, :idle_done,
          s(:args),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@idle_done_cond), :nil?),
                s(:send, nil, :raise,
                  s(:const,
                    s(:const,
                      s(:const, nil, :Net), :IMAP), :Error),
                  s(:str, "not during IDLE")), nil),
              s(:send,
                s(:ivar, :@idle_done_cond), :signal)))),
        s(:defs,
          s(:self), :decode_utf7,
          s(:args,
            s(:arg, :s)),
          s(:return,
            s(:block,
              s(:send,
                s(:lvar, :s), :gsub,
                s(:regexp,
                  s(:str, "&([^-]+)?-"),
                  s(:regopt, :n))),
              s(:args),
              s(:if,
                s(:nth_ref, 1),
                s(:send,
                  s(:send,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:send,
                            s(:nth_ref, 1), :tr,
                            s(:str, ","),
                            s(:str, "/")), :+,
                          s(:str, "==="))), :unpack,
                      s(:str, "m")), :[],
                    s(:int, 0)), :encode,
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_8),
                  s(:const,
                    s(:const, nil, :Encoding), :UTF_16BE)),
                s(:str, "&"))))),
        s(:defs,
          s(:self), :encode_utf7,
          s(:args,
            s(:arg, :s)),
          s(:return,
            s(:send,
              s(:block,
                s(:send,
                  s(:lvar, :s), :gsub,
                  s(:regexp,
                    s(:str, "(&)|[^\\x20-\\x7e]+"),
                    s(:regopt))),
                s(:args),
                s(:if,
                  s(:nth_ref, 1),
                  s(:str, "&-"),
                  s(:begin,
                    s(:lvasgn, :base64,
                      s(:send,
                        s(:array,
                          s(:send,
                            s(:back_ref, :$&), :encode,
                            s(:const,
                              s(:const, nil, :Encoding), :UTF_16BE))), :pack,
                        s(:str, "m"))),
                    s(:send,
                      s(:send,
                        s(:str, "&"), :+,
                        s(:send,
                          s(:send,
                            s(:lvar, :base64), :delete,
                            s(:str, "=\n")), :tr,
                          s(:str, "/"),
                          s(:str, ","))), :+,
                      s(:str, "-"))))), :force_encoding,
              s(:str, "ASCII-8BIT")))),
        s(:defs,
          s(:self), :format_date,
          s(:args,
            s(:arg, :time)),
          s(:return,
            s(:send,
              s(:lvar, :time), :strftime,
              s(:str, "%d-%b-%Y")))),
        s(:defs,
          s(:self), :format_datetime,
          s(:args,
            s(:arg, :time)),
          s(:return,
            s(:send,
              s(:lvar, :time), :strftime,
              s(:str, "%d-%b-%Y %H:%M %z")))),
        s(:send, nil, :private),
        s(:casgn, nil, :CRLF,
          s(:str, "\r\n")),
        s(:casgn, nil, :PORT,
          s(:int, 143)),
        s(:casgn, nil, :SSL_PORT,
          s(:int, 993)),
        s(:cvasgn, :@@debug,
          s(:false)),
        s(:cvasgn, :@@authenticators,
          s(:hash)),
        s(:cvasgn, :@@max_flag_count,
          s(:int, 10000)),
        s(:def, :initialize,
          s(:args,
            s(:arg, :host),
            s(:optarg, :port_or_options,
              s(:hash)),
            s(:optarg, :usessl,
              s(:false)),
            s(:optarg, :certs,
              s(:nil)),
            s(:optarg, :verify,
              s(:true))),
          s(:begin,
            s(:super),
            s(:ivasgn, :@host,
              s(:lvar, :host)),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :options,
                  s(:send,
                    s(:lvar, :port_or_options), :to_hash)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NoMethodError)), nil,
                  s(:begin,
                    s(:lvasgn, :options,
                      s(:hash)),
                    s(:send,
                      s(:lvar, :options), :[]=,
                      s(:sym, :port),
                      s(:lvar, :port_or_options)),
                    s(:if,
                      s(:lvar, :usessl),
                      s(:send,
                        s(:lvar, :options), :[]=,
                        s(:sym, :ssl),
                        s(:send, nil, :create_ssl_params,
                          s(:lvar, :certs),
                          s(:lvar, :verify))), nil))), nil)),
            s(:ivasgn, :@port,
              s(:or,
                s(:send,
                  s(:lvar, :options), :[],
                  s(:sym, :port)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :ssl)),
                    s(:const, nil, :SSL_PORT),
                    s(:const, nil, :PORT))))),
            s(:ivasgn, :@tag_prefix,
              s(:str, "RUBY")),
            s(:ivasgn, :@tagno,
              s(:int, 0)),
            s(:ivasgn, :@parser,
              s(:send,
                s(:const, nil, :ResponseParser), :new)),
            s(:ivasgn, :@sock,
              s(:send,
                s(:const, nil, :TCPSocket), :open,
                s(:ivar, :@host),
                s(:ivar, :@port))),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :ssl)),
                    s(:begin,
                      s(:send, nil, :start_tls_session,
                        s(:send,
                          s(:lvar, :options), :[],
                          s(:sym, :ssl))),
                      s(:ivasgn, :@usessl,
                        s(:true))),
                    s(:ivasgn, :@usessl,
                      s(:false))),
                  s(:ivasgn, :@responses,
                    s(:send,
                      s(:const, nil, :Hash), :new,
                      s(:send,
                        s(:array), :freeze))),
                  s(:ivasgn, :@tagged_responses,
                    s(:hash)),
                  s(:ivasgn, :@response_handlers,
                    s(:array)),
                  s(:ivasgn, :@tagged_response_arrival,
                    s(:send, nil, :new_cond)),
                  s(:ivasgn, :@continuation_request_arrival,
                    s(:send, nil, :new_cond)),
                  s(:ivasgn, :@idle_done_cond,
                    s(:nil)),
                  s(:ivasgn, :@logout_command_tag,
                    s(:nil)),
                  s(:ivasgn, :@debug_output_bol,
                    s(:true)),
                  s(:ivasgn, :@exception,
                    s(:nil)),
                  s(:ivasgn, :@greeting,
                    s(:send, nil, :get_response)),
                  s(:if,
                    s(:send,
                      s(:ivar, :@greeting), :nil?),
                    s(:send, nil, :raise,
                      s(:const, nil, :Error),
                      s(:str, "connection closed")), nil),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:ivar, :@greeting), :name), :==,
                      s(:str, "BYE")),
                    s(:send, nil, :raise,
                      s(:const, nil, :ByeResponseError),
                      s(:ivar, :@greeting)), nil),
                  s(:ivasgn, :@client_thread,
                    s(:send,
                      s(:const, nil, :Thread), :current)),
                  s(:ivasgn, :@receiver_thread,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Thread), :start),
                      s(:args),
                      s(:kwbegin,
                        s(:rescue,
                          s(:send, nil, :receive_responses),
                          s(:resbody,
                            s(:array,
                              s(:const, nil, :Exception)), nil, nil), nil)))),
                  s(:ivasgn, :@receiver_thread_terminating,
                    s(:false))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :Exception)), nil,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@sock), :close),
                    s(:send, nil, :raise))), nil)))),
        s(:def, :receive_responses,
          s(:args),
          s(:begin,
            s(:lvasgn, :connection_closed,
              s(:false)),
            s(:until,
              s(:lvar, :connection_closed),
              s(:begin,
                s(:block,
                  s(:send, nil, :synchronize),
                  s(:args),
                  s(:ivasgn, :@exception,
                    s(:nil))),
                s(:kwbegin,
                  s(:rescue,
                    s(:lvasgn, :resp,
                      s(:send, nil, :get_response)),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :e),
                      s(:begin,
                        s(:block,
                          s(:send, nil, :synchronize),
                          s(:args),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@sock), :close),
                            s(:ivasgn, :@exception,
                              s(:lvar, :e)))),
                        s(:break))), nil)),
                s(:if,
                  s(:lvar, :resp), nil,
                  s(:begin,
                    s(:block,
                      s(:send, nil, :synchronize),
                      s(:args),
                      s(:ivasgn, :@exception,
                        s(:send,
                          s(:const, nil, :EOFError), :new,
                          s(:str, "end of file reached")))),
                    s(:break))),
                s(:kwbegin,
                  s(:rescue,
                    s(:block,
                      s(:send, nil, :synchronize),
                      s(:args),
                      s(:begin,
                        s(:case,
                          s(:lvar, :resp),
                          s(:when,
                            s(:const, nil, :TaggedResponse),
                            s(:begin,
                              s(:send,
                                s(:ivar, :@tagged_responses), :[]=,
                                s(:send,
                                  s(:lvar, :resp), :tag),
                                s(:lvar, :resp)),
                              s(:send,
                                s(:ivar, :@tagged_response_arrival), :broadcast),
                              s(:if,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :resp), :tag), :==,
                                  s(:ivar, :@logout_command_tag)),
                                s(:return), nil))),
                          s(:when,
                            s(:const, nil, :UntaggedResponse),
                            s(:begin,
                              s(:send, nil, :record_response,
                                s(:send,
                                  s(:lvar, :resp), :name),
                                s(:send,
                                  s(:lvar, :resp), :data)),
                              s(:if,
                                s(:and,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :resp), :data), :instance_of?,
                                    s(:const, nil, :ResponseText)),
                                  s(:begin,
                                    s(:lvasgn, :code,
                                      s(:send,
                                        s(:send,
                                          s(:lvar, :resp), :data), :code)))),
                                s(:send, nil, :record_response,
                                  s(:send,
                                    s(:lvar, :code), :name),
                                  s(:send,
                                    s(:lvar, :code), :data)), nil),
                              s(:if,
                                s(:and,
                                  s(:send,
                                    s(:send,
                                      s(:lvar, :resp), :name), :==,
                                    s(:str, "BYE")),
                                  s(:send,
                                    s(:ivar, :@logout_command_tag), :nil?)),
                                s(:begin,
                                  s(:send,
                                    s(:ivar, :@sock), :close),
                                  s(:ivasgn, :@exception,
                                    s(:send,
                                      s(:const, nil, :ByeResponseError), :new,
                                      s(:lvar, :resp))),
                                  s(:lvasgn, :connection_closed,
                                    s(:true))), nil))),
                          s(:when,
                            s(:const, nil, :ContinuationRequest),
                            s(:send,
                              s(:ivar, :@continuation_request_arrival), :signal)), nil),
                        s(:block,
                          s(:send,
                            s(:ivar, :@response_handlers), :each),
                          s(:args,
                            s(:arg, :handler)),
                          s(:send,
                            s(:lvar, :handler), :call,
                            s(:lvar, :resp))))),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :Exception)),
                      s(:lvasgn, :e),
                      s(:begin,
                        s(:ivasgn, :@exception,
                          s(:lvar, :e)),
                        s(:block,
                          s(:send, nil, :synchronize),
                          s(:args),
                          s(:begin,
                            s(:send,
                              s(:ivar, :@tagged_response_arrival), :broadcast),
                            s(:send,
                              s(:ivar, :@continuation_request_arrival), :broadcast))))), nil)))),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:ivasgn, :@receiver_thread_terminating,
                  s(:true)),
                s(:send,
                  s(:ivar, :@tagged_response_arrival), :broadcast),
                s(:send,
                  s(:ivar, :@continuation_request_arrival), :broadcast),
                s(:if,
                  s(:ivar, :@idle_done_cond),
                  s(:send,
                    s(:ivar, :@idle_done_cond), :signal), nil))))),
        s(:def, :get_tagged_response,
          s(:args,
            s(:arg, :tag),
            s(:arg, :cmd)),
          s(:begin,
            s(:until,
              s(:send,
                s(:ivar, :@tagged_responses), :key?,
                s(:lvar, :tag)),
              s(:begin,
                s(:if,
                  s(:ivar, :@exception),
                  s(:send, nil, :raise,
                    s(:ivar, :@exception)), nil),
                s(:send,
                  s(:ivar, :@tagged_response_arrival), :wait))),
            s(:lvasgn, :resp,
              s(:send,
                s(:ivar, :@tagged_responses), :delete,
                s(:lvar, :tag))),
            s(:case,
              s(:send,
                s(:lvar, :resp), :name),
              s(:when,
                s(:regexp,
                  s(:str, "\\A(?:NO)\\z"),
                  s(:regopt, :i, :n)),
                s(:send, nil, :raise,
                  s(:const, nil, :NoResponseError),
                  s(:lvar, :resp))),
              s(:when,
                s(:regexp,
                  s(:str, "\\A(?:BAD)\\z"),
                  s(:regopt, :i, :n)),
                s(:send, nil, :raise,
                  s(:const, nil, :BadResponseError),
                  s(:lvar, :resp))),
              s(:return,
                s(:lvar, :resp))))),
        s(:def, :get_response,
          s(:args),
          s(:begin,
            s(:lvasgn, :buff,
              s(:send,
                s(:const, nil, :String), :new)),
            s(:while,
              s(:true),
              s(:begin,
                s(:lvasgn, :s,
                  s(:send,
                    s(:ivar, :@sock), :gets,
                    s(:const, nil, :CRLF))),
                s(:if,
                  s(:lvar, :s), nil,
                  s(:break)),
                s(:send,
                  s(:lvar, :buff), :concat,
                  s(:lvar, :s)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\{(\\d+)\\}\\r\\n"),
                      s(:regopt, :n)),
                    s(:lvar, :s)),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:send,
                        s(:ivar, :@sock), :read,
                        s(:send,
                          s(:nth_ref, 1), :to_i))),
                    s(:send,
                      s(:lvar, :buff), :concat,
                      s(:lvar, :s))),
                  s(:break)))),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :buff), :length), :==,
                s(:int, 0)),
              s(:return,
                s(:nil)), nil),
            s(:if,
              s(:cvar, :@@debug),
              s(:send,
                s(:gvar, :$stderr), :print,
                s(:send,
                  s(:lvar, :buff), :gsub,
                  s(:regexp,
                    s(:str, "^"),
                    s(:regopt, :n)),
                  s(:str, "S: "))), nil),
            s(:return,
              s(:send,
                s(:ivar, :@parser), :parse,
                s(:lvar, :buff))))),
        s(:def, :record_response,
          s(:args,
            s(:arg, :name),
            s(:arg, :data)),
          s(:begin,
            s(:if,
              s(:send,
                s(:ivar, :@responses), :has_key?,
                s(:lvar, :name)), nil,
              s(:send,
                s(:ivar, :@responses), :[]=,
                s(:lvar, :name),
                s(:array))),
            s(:send,
              s(:send,
                s(:ivar, :@responses), :[],
                s(:lvar, :name)), :push,
              s(:lvar, :data)))),
        s(:def, :send_command,
          s(:args,
            s(:arg, :cmd),
            s(:restarg, :args),
            s(:blockarg, :block)),
          s(:block,
            s(:send, nil, :synchronize),
            s(:args),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :i)),
                s(:send, nil, :validate_data,
                  s(:lvar, :i))),
              s(:lvasgn, :tag,
                s(:send, nil, :generate_tag)),
              s(:send, nil, :put_string,
                s(:send,
                  s(:send,
                    s(:lvar, :tag), :+,
                    s(:str, " ")), :+,
                  s(:lvar, :cmd))),
              s(:block,
                s(:send,
                  s(:lvar, :args), :each),
                s(:args,
                  s(:arg, :i)),
                s(:begin,
                  s(:send, nil, :put_string,
                    s(:str, " ")),
                  s(:send, nil, :send_data,
                    s(:lvar, :i)))),
              s(:send, nil, :put_string,
                s(:const, nil, :CRLF)),
              s(:if,
                s(:send,
                  s(:lvar, :cmd), :==,
                  s(:str, "LOGOUT")),
                s(:ivasgn, :@logout_command_tag,
                  s(:lvar, :tag)), nil),
              s(:if,
                s(:lvar, :block),
                s(:send, nil, :add_response_handler,
                  s(:lvar, :block)), nil),
              s(:kwbegin,
                s(:ensure,
                  s(:return,
                    s(:send, nil, :get_tagged_response,
                      s(:lvar, :tag),
                      s(:lvar, :cmd))),
                  s(:if,
                    s(:lvar, :block),
                    s(:send, nil, :remove_response_handler,
                      s(:lvar, :block)), nil)))))),
        s(:def, :generate_tag,
          s(:args),
          s(:begin,
            s(:op_asgn,
              s(:ivasgn, :@tagno), :+,
              s(:int, 1)),
            s(:return,
              s(:send, nil, :format,
                s(:str, "%s%04d"),
                s(:ivar, :@tag_prefix),
                s(:ivar, :@tagno))))),
        s(:def, :put_string,
          s(:args,
            s(:arg, :str)),
          s(:begin,
            s(:send,
              s(:ivar, :@sock), :print,
              s(:lvar, :str)),
            s(:if,
              s(:cvar, :@@debug),
              s(:begin,
                s(:if,
                  s(:ivar, :@debug_output_bol),
                  s(:send,
                    s(:gvar, :$stderr), :print,
                    s(:str, "C: ")), nil),
                s(:send,
                  s(:gvar, :$stderr), :print,
                  s(:send,
                    s(:lvar, :str), :gsub,
                    s(:regexp,
                      s(:str, "\\n(?!\\z)"),
                      s(:regopt, :n)),
                    s(:str, "\nC: "))),
                s(:if,
                  s(:send,
                    s(:regexp,
                      s(:str, "\\r\\n\\z"),
                      s(:regopt, :n)), :match,
                    s(:lvar, :str)),
                  s(:ivasgn, :@debug_output_bol,
                    s(:true)),
                  s(:ivasgn, :@debug_output_bol,
                    s(:false)))), nil))),
        s(:def, :validate_data,
          s(:args,
            s(:arg, :data)),
          s(:case,
            s(:lvar, :data),
            s(:when,
              s(:nil), nil),
            s(:when,
              s(:const, nil, :String), nil),
            s(:when,
              s(:const, nil, :Integer),
              s(:send,
                s(:const, nil, :NumValidator), :ensure_number,
                s(:lvar, :data))),
            s(:when,
              s(:const, nil, :Array),
              s(:block,
                s(:send,
                  s(:lvar, :data), :each),
                s(:args,
                  s(:arg, :i)),
                s(:send, nil, :validate_data,
                  s(:lvar, :i)))),
            s(:when,
              s(:const, nil, :Time), nil),
            s(:when,
              s(:const, nil, :Symbol), nil),
            s(:send,
              s(:lvar, :data), :validate))),
        s(:def, :send_data,
          s(:args,
            s(:arg, :data)),
          s(:case,
            s(:lvar, :data),
            s(:when,
              s(:nil),
              s(:send, nil, :put_string,
                s(:str, "NIL"))),
            s(:when,
              s(:const, nil, :String),
              s(:send, nil, :send_string_data,
                s(:lvar, :data))),
            s(:when,
              s(:const, nil, :Integer),
              s(:send, nil, :send_number_data,
                s(:lvar, :data))),
            s(:when,
              s(:const, nil, :Array),
              s(:send, nil, :send_list_data,
                s(:lvar, :data))),
            s(:when,
              s(:const, nil, :Time),
              s(:send, nil, :send_time_data,
                s(:lvar, :data))),
            s(:when,
              s(:const, nil, :Symbol),
              s(:send, nil, :send_symbol_data,
                s(:lvar, :data))),
            s(:send,
              s(:lvar, :data), :send_data,
              s(:self)))),
        s(:def, :send_string_data,
          s(:args,
            s(:arg, :str)),
          s(:case,
            s(:lvar, :str),
            s(:when,
              s(:str, ""),
              s(:send, nil, :put_string,
                s(:str, "\"\""))),
            s(:when,
              s(:regexp,
                s(:str, "[\\x80-\\xff\\r\\n]"),
                s(:regopt, :n)),
              s(:send, nil, :send_literal,
                s(:lvar, :str))),
            s(:when,
              s(:regexp,
                s(:str, "[(){ \\x00-\\x1f\\x7f%*\"\\\\]"),
                s(:regopt, :n)),
              s(:send, nil, :send_quoted_string,
                s(:lvar, :str))),
            s(:send, nil, :put_string,
              s(:lvar, :str)))),
        s(:def, :send_quoted_string,
          s(:args,
            s(:arg, :str)),
          s(:send, nil, :put_string,
            s(:send,
              s(:send,
                s(:str, "\""), :+,
                s(:send,
                  s(:lvar, :str), :gsub,
                  s(:regexp,
                    s(:str, "[\"\\\\]"),
                    s(:regopt, :n)),
                  s(:str, "\\\\\\&"))), :+,
              s(:str, "\"")))),
        s(:def, :send_literal,
          s(:args,
            s(:arg, :str)),
          s(:begin,
            s(:send, nil, :put_string,
              s(:send,
                s(:send,
                  s(:send,
                    s(:str, "{"), :+,
                    s(:send,
                      s(:send,
                        s(:lvar, :str), :bytesize), :to_s)), :+,
                  s(:str, "}")), :+,
                s(:const, nil, :CRLF))),
            s(:send,
              s(:ivar, :@continuation_request_arrival), :wait),
            s(:if,
              s(:ivar, :@exception),
              s(:send, nil, :raise,
                s(:ivar, :@exception)), nil),
            s(:send, nil, :put_string,
              s(:lvar, :str)))),
        s(:def, :send_number_data,
          s(:args,
            s(:arg, :num)),
          s(:send, nil, :put_string,
            s(:send,
              s(:lvar, :num), :to_s))),
        s(:def, :send_list_data,
          s(:args,
            s(:arg, :list)),
          s(:begin,
            s(:send, nil, :put_string,
              s(:str, "(")),
            s(:lvasgn, :first,
              s(:true)),
            s(:block,
              s(:send,
                s(:lvar, :list), :each),
              s(:args,
                s(:arg, :i)),
              s(:begin,
                s(:if,
                  s(:lvar, :first),
                  s(:lvasgn, :first,
                    s(:false)),
                  s(:send, nil, :put_string,
                    s(:str, " "))),
                s(:send, nil, :send_data,
                  s(:lvar, :i)))),
            s(:send, nil, :put_string,
              s(:str, ")")))),
        s(:casgn, nil, :DATE_MONTH,
          s(:array,
            s(:str, "Jan"),
            s(:str, "Feb"),
            s(:str, "Mar"),
            s(:str, "Apr"),
            s(:str, "May"),
            s(:str, "Jun"),
            s(:str, "Jul"),
            s(:str, "Aug"),
            s(:str, "Sep"),
            s(:str, "Oct"),
            s(:str, "Nov"),
            s(:str, "Dec"))),
        s(:def, :send_time_data,
          s(:args,
            s(:arg, :time)),
          s(:begin,
            s(:lvasgn, :t,
              s(:send,
                s(:send,
                  s(:lvar, :time), :dup), :gmtime)),
            s(:lvasgn, :s,
              s(:send, nil, :format,
                s(:str, "\"%2d-%3s-%4d %02d:%02d:%02d +0000\""),
                s(:send,
                  s(:lvar, :t), :day),
                s(:send,
                  s(:const, nil, :DATE_MONTH), :[],
                  s(:send,
                    s(:send,
                      s(:lvar, :t), :month), :-,
                    s(:int, 1))),
                s(:send,
                  s(:lvar, :t), :year),
                s(:send,
                  s(:lvar, :t), :hour),
                s(:send,
                  s(:lvar, :t), :min),
                s(:send,
                  s(:lvar, :t), :sec))),
            s(:send, nil, :put_string,
              s(:lvar, :s)))),
        s(:def, :send_symbol_data,
          s(:args,
            s(:arg, :symbol)),
          s(:send, nil, :put_string,
            s(:send,
              s(:str, "\\"), :+,
              s(:send,
                s(:lvar, :symbol), :to_s)))),
        s(:def, :search_internal,
          s(:args,
            s(:arg, :cmd),
            s(:arg, :keys),
            s(:arg, :charset)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :keys), :instance_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :keys,
                s(:array,
                  s(:send,
                    s(:const, nil, :RawData), :new,
                    s(:lvar, :keys)))),
              s(:send, nil, :normalize_searching_criteria,
                s(:lvar, :keys))),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:if,
                  s(:lvar, :charset),
                  s(:send, nil, :send_command,
                    s(:lvar, :cmd),
                    s(:str, "CHARSET"),
                    s(:lvar, :charset),
                    s(:splat,
                      s(:lvar, :keys))),
                  s(:send, nil, :send_command,
                    s(:lvar, :cmd),
                    s(:splat,
                      s(:lvar, :keys)))),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:ivar, :@responses), :delete,
                      s(:str, "SEARCH")), :[],
                    s(:int, -1))))))),
        s(:def, :fetch_internal,
          s(:args,
            s(:arg, :cmd),
            s(:arg, :set),
            s(:arg, :attr)),
          s(:begin,
            s(:case,
              s(:lvar, :attr),
              s(:when,
                s(:const, nil, :String),
                s(:lvasgn, :attr,
                  s(:send,
                    s(:const, nil, :RawData), :new,
                    s(:lvar, :attr)))),
              s(:when,
                s(:const, nil, :Array),
                s(:lvasgn, :attr,
                  s(:block,
                    s(:send,
                      s(:lvar, :attr), :map),
                    s(:args,
                      s(:arg, :arg)),
                    s(:if,
                      s(:send,
                        s(:lvar, :arg), :is_a?,
                        s(:const, nil, :String)),
                      s(:send,
                        s(:const, nil, :RawData), :new,
                        s(:lvar, :arg)),
                      s(:lvar, :arg))))), nil),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "FETCH")),
                s(:send, nil, :send_command,
                  s(:lvar, :cmd),
                  s(:send,
                    s(:const, nil, :MessageSet), :new,
                    s(:lvar, :set)),
                  s(:lvar, :attr)),
                s(:return,
                  s(:send,
                    s(:ivar, :@responses), :delete,
                    s(:str, "FETCH"))))))),
        s(:def, :store_internal,
          s(:args,
            s(:arg, :cmd),
            s(:arg, :set),
            s(:arg, :attr),
            s(:arg, :flags)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :attr), :instance_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :attr,
                s(:send,
                  s(:const, nil, :RawData), :new,
                  s(:lvar, :attr))), nil),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "FETCH")),
                s(:send, nil, :send_command,
                  s(:lvar, :cmd),
                  s(:send,
                    s(:const, nil, :MessageSet), :new,
                    s(:lvar, :set)),
                  s(:lvar, :attr),
                  s(:lvar, :flags)),
                s(:return,
                  s(:send,
                    s(:ivar, :@responses), :delete,
                    s(:str, "FETCH"))))))),
        s(:def, :copy_internal,
          s(:args,
            s(:arg, :cmd),
            s(:arg, :set),
            s(:arg, :mailbox)),
          s(:send, nil, :send_command,
            s(:lvar, :cmd),
            s(:send,
              s(:const, nil, :MessageSet), :new,
              s(:lvar, :set)),
            s(:lvar, :mailbox))),
        s(:def, :sort_internal,
          s(:args,
            s(:arg, :cmd),
            s(:arg, :sort_keys),
            s(:arg, :search_keys),
            s(:arg, :charset)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :search_keys), :instance_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :search_keys,
                s(:array,
                  s(:send,
                    s(:const, nil, :RawData), :new,
                    s(:lvar, :search_keys)))),
              s(:send, nil, :normalize_searching_criteria,
                s(:lvar, :search_keys))),
            s(:send, nil, :normalize_searching_criteria,
              s(:lvar, :search_keys)),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:send, nil, :send_command,
                  s(:lvar, :cmd),
                  s(:lvar, :sort_keys),
                  s(:lvar, :charset),
                  s(:splat,
                    s(:lvar, :search_keys))),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:ivar, :@responses), :delete,
                      s(:str, "SORT")), :[],
                    s(:int, -1))))))),
        s(:def, :thread_internal,
          s(:args,
            s(:arg, :cmd),
            s(:arg, :algorithm),
            s(:arg, :search_keys),
            s(:arg, :charset)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :search_keys), :instance_of?,
                s(:const, nil, :String)),
              s(:lvasgn, :search_keys,
                s(:array,
                  s(:send,
                    s(:const, nil, :RawData), :new,
                    s(:lvar, :search_keys)))),
              s(:send, nil, :normalize_searching_criteria,
                s(:lvar, :search_keys))),
            s(:send, nil, :normalize_searching_criteria,
              s(:lvar, :search_keys)),
            s(:send, nil, :send_command,
              s(:lvar, :cmd),
              s(:lvar, :algorithm),
              s(:lvar, :charset),
              s(:splat,
                s(:lvar, :search_keys))),
            s(:return,
              s(:send,
                s(:send,
                  s(:ivar, :@responses), :delete,
                  s(:str, "THREAD")), :[],
                s(:int, -1))))),
        s(:def, :normalize_searching_criteria,
          s(:args,
            s(:arg, :keys)),
          s(:block,
            s(:send,
              s(:lvar, :keys), :collect!),
            s(:args,
              s(:arg, :i)),
            s(:case,
              s(:lvar, :i),
              s(:when,
                s(:int, -1),
                s(:const, nil, :Range),
                s(:const, nil, :Array),
                s(:send,
                  s(:const, nil, :MessageSet), :new,
                  s(:lvar, :i))),
              s(:lvar, :i)))),
        s(:def, :create_ssl_params,
          s(:args,
            s(:optarg, :certs,
              s(:nil)),
            s(:optarg, :verify,
              s(:true))),
          s(:begin,
            s(:lvasgn, :params,
              s(:hash)),
            s(:if,
              s(:lvar, :certs),
              s(:if,
                s(:send,
                  s(:const, nil, :File), :file?,
                  s(:lvar, :certs)),
                s(:send,
                  s(:lvar, :params), :[]=,
                  s(:sym, :ca_file),
                  s(:lvar, :certs)),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :directory?,
                    s(:lvar, :certs)),
                  s(:send,
                    s(:lvar, :params), :[]=,
                    s(:sym, :ca_path),
                    s(:lvar, :certs)), nil)), nil),
            s(:if,
              s(:lvar, :verify),
              s(:send,
                s(:lvar, :params), :[]=,
                s(:sym, :verify_mode),
                s(:const, nil, :VERIFY_PEER)),
              s(:send,
                s(:lvar, :params), :[]=,
                s(:sym, :verify_mode),
                s(:const, nil, :VERIFY_NONE))),
            s(:return,
              s(:lvar, :params)))),
        s(:def, :start_tls_session,
          s(:args,
            s(:optarg, :params,
              s(:hash))),
          s(:begin,
            s(:if,
              s(:defined?,
                s(:const,
                  s(:const, nil, :OpenSSL), :SSL)), nil,
              s(:send, nil, :raise,
                s(:str, "SSL extension not installed"))),
            s(:if,
              s(:send,
                s(:ivar, :@sock), :kind_of?,
                s(:const,
                  s(:const,
                    s(:const, nil, :OpenSSL), :SSL), :SSLSocket)),
              s(:send, nil, :raise,
                s(:const, nil, :RuntimeError),
                s(:str, "already using SSL")), nil),
            s(:kwbegin,
              s(:rescue,
                s(:lvasgn, :params,
                  s(:send,
                    s(:lvar, :params), :to_hash)),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :NoMethodError)), nil,
                  s(:lvasgn, :params,
                    s(:hash))), nil)),
            s(:lvasgn, :context,
              s(:send,
                s(:const, nil, :SSLContext), :new)),
            s(:send,
              s(:lvar, :context), :set_params,
              s(:lvar, :params)),
            s(:if,
              s(:defined?,
                s(:const, nil, :VerifyCallbackProc)),
              s(:send,
                s(:lvar, :context), :verify_callback=,
                s(:const, nil, :VerifyCallbackProc)), nil),
            s(:ivasgn, :@sock,
              s(:send,
                s(:const, nil, :SSLSocket), :new,
                s(:ivar, :@sock),
                s(:lvar, :context))),
            s(:send,
              s(:ivar, :@sock), :sync_close=,
              s(:true)),
            s(:send,
              s(:ivar, :@sock), :connect),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :context), :verify_mode), :!=,
                s(:const, nil, :VERIFY_NONE)),
              s(:send,
                s(:ivar, :@sock), :post_connection_check,
                s(:ivar, :@host)), nil))),
        s(:class,
          s(:const, nil, :RawData), nil,
          s(:begin,
            s(:def, :send_data,
              s(:args,
                s(:arg, :imap)),
              s(:send,
                s(:lvar, :imap), :send,
                s(:sym, :put_string),
                s(:ivar, :@data))),
            s(:def, :validate,
              s(:args), nil),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :data)),
              s(:ivasgn, :@data,
                s(:lvar, :data))))),
        s(:class,
          s(:const, nil, :Atom), nil,
          s(:begin,
            s(:def, :send_data,
              s(:args,
                s(:arg, :imap)),
              s(:send,
                s(:lvar, :imap), :send,
                s(:sym, :put_string),
                s(:ivar, :@data))),
            s(:def, :validate,
              s(:args), nil),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :data)),
              s(:ivasgn, :@data,
                s(:lvar, :data))))),
        s(:class,
          s(:const, nil, :QuotedString), nil,
          s(:begin,
            s(:def, :send_data,
              s(:args,
                s(:arg, :imap)),
              s(:send,
                s(:lvar, :imap), :send,
                s(:sym, :send_quoted_string),
                s(:ivar, :@data))),
            s(:def, :validate,
              s(:args), nil),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :data)),
              s(:ivasgn, :@data,
                s(:lvar, :data))))),
        s(:class,
          s(:const, nil, :Literal), nil,
          s(:begin,
            s(:def, :send_data,
              s(:args,
                s(:arg, :imap)),
              s(:send,
                s(:lvar, :imap), :send,
                s(:sym, :send_literal),
                s(:ivar, :@data))),
            s(:def, :validate,
              s(:args), nil),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :data)),
              s(:ivasgn, :@data,
                s(:lvar, :data))))),
        s(:class,
          s(:const, nil, :MessageSet), nil,
          s(:begin,
            s(:def, :send_data,
              s(:args,
                s(:arg, :imap)),
              s(:send,
                s(:lvar, :imap), :send,
                s(:sym, :put_string),
                s(:send, nil, :format_internal,
                  s(:ivar, :@data)))),
            s(:def, :validate,
              s(:args),
              s(:send, nil, :validate_internal,
                s(:ivar, :@data))),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :data)),
              s(:ivasgn, :@data,
                s(:lvar, :data))),
            s(:def, :format_internal,
              s(:args,
                s(:arg, :data)),
              s(:case,
                s(:lvar, :data),
                s(:when,
                  s(:str, "*"),
                  s(:return,
                    s(:lvar, :data))),
                s(:when,
                  s(:const, nil, :Integer),
                  s(:if,
                    s(:send,
                      s(:lvar, :data), :==,
                      s(:int, -1)),
                    s(:return,
                      s(:str, "*")),
                    s(:return,
                      s(:send,
                        s(:lvar, :data), :to_s)))),
                s(:when,
                  s(:const, nil, :Range),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:send, nil, :format_internal,
                          s(:send,
                            s(:lvar, :data), :first)), :+,
                        s(:str, ":")), :+,
                      s(:send, nil, :format_internal,
                        s(:send,
                          s(:lvar, :data), :last))))),
                s(:when,
                  s(:const, nil, :Array),
                  s(:return,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :data), :collect),
                        s(:args,
                          s(:arg, :i)),
                        s(:send, nil, :format_internal,
                          s(:lvar, :i))), :join,
                      s(:str, ",")))),
                s(:when,
                  s(:const, nil, :ThreadMember),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :data), :seqno), :to_s), :+,
                        s(:str, ":")), :+,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :data), :children), :collect),
                        s(:args,
                          s(:arg, :i)),
                        s(:send,
                          s(:send, nil, :format_internal,
                            s(:lvar, :i)), :join,
                          s(:str, ",")))))), nil)),
            s(:def, :validate_internal,
              s(:args,
                s(:arg, :data)),
              s(:case,
                s(:lvar, :data),
                s(:when,
                  s(:str, "*"), nil),
                s(:when,
                  s(:const, nil, :Integer),
                  s(:send,
                    s(:const, nil, :NumValidator), :ensure_nz_number,
                    s(:lvar, :data))),
                s(:when,
                  s(:const, nil, :Range), nil),
                s(:when,
                  s(:const, nil, :Array),
                  s(:block,
                    s(:send,
                      s(:lvar, :data), :each),
                    s(:args,
                      s(:arg, :i)),
                    s(:send, nil, :validate_internal,
                      s(:lvar, :i)))),
                s(:when,
                  s(:const, nil, :ThreadMember),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :data), :children), :each),
                    s(:args,
                      s(:arg, :i)),
                    s(:send, nil, :validate_internal,
                      s(:lvar, :i)))),
                s(:send, nil, :raise,
                  s(:const, nil, :DataFormatError),
                  s(:send,
                    s(:lvar, :data), :inspect)))))),
        s(:module,
          s(:const, nil, :NumValidator),
          s(:sclass,
            s(:self),
            s(:begin,
              s(:def, :valid_number?,
                s(:args,
                  s(:arg, :num)),
                s(:and,
                  s(:send,
                    s(:lvar, :num), :>=,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :num), :<,
                    s(:int, 4294967296)))),
              s(:def, :valid_nz_number?,
                s(:args,
                  s(:arg, :num)),
                s(:and,
                  s(:send,
                    s(:lvar, :num), :!=,
                    s(:int, 0)),
                  s(:send, nil, :valid_number?,
                    s(:lvar, :num)))),
              s(:def, :ensure_number,
                s(:args,
                  s(:arg, :num)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :valid_number?,
                      s(:lvar, :num)),
                    s(:return), nil),
                  s(:lvasgn, :msg,
                    s(:dstr,
                      s(:str, "number must be unsigned 32-bit integer: "),
                      s(:begin,
                        s(:lvar, :num)))),
                  s(:send, nil, :raise,
                    s(:const, nil, :DataFormatError),
                    s(:lvar, :msg)))),
              s(:def, :ensure_nz_number,
                s(:args,
                  s(:arg, :num)),
                s(:begin,
                  s(:if,
                    s(:send, nil, :valid_nz_number?,
                      s(:lvar, :num)),
                    s(:return), nil),
                  s(:lvasgn, :msg,
                    s(:dstr,
                      s(:str, "nz_number must be non-zero unsigned 32-bit integer: "),
                      s(:begin,
                        s(:lvar, :num)))),
                  s(:send, nil, :raise,
                    s(:const, nil, :DataFormatError),
                    s(:lvar, :msg))))))),
        s(:casgn, nil, :ContinuationRequest,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :data),
            s(:sym, :raw_data))),
        s(:casgn, nil, :UntaggedResponse,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :name),
            s(:sym, :data),
            s(:sym, :raw_data))),
        s(:casgn, nil, :TaggedResponse,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :tag),
            s(:sym, :name),
            s(:sym, :data),
            s(:sym, :raw_data))),
        s(:casgn, nil, :ResponseText,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :code),
            s(:sym, :text))),
        s(:casgn, nil, :ResponseCode,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :name),
            s(:sym, :data))),
        s(:casgn, nil, :MailboxList,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :attr),
            s(:sym, :delim),
            s(:sym, :name))),
        s(:casgn, nil, :MailboxQuota,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :mailbox),
            s(:sym, :usage),
            s(:sym, :quota))),
        s(:casgn, nil, :MailboxQuotaRoot,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :mailbox),
            s(:sym, :quotaroots))),
        s(:casgn, nil, :MailboxACLItem,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :user),
            s(:sym, :rights),
            s(:sym, :mailbox))),
        s(:casgn, nil, :StatusData,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :mailbox),
            s(:sym, :attr))),
        s(:casgn, nil, :FetchData,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :seqno),
            s(:sym, :attr))),
        s(:casgn, nil, :Envelope,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :date),
            s(:sym, :subject),
            s(:sym, :from),
            s(:sym, :sender),
            s(:sym, :reply_to),
            s(:sym, :to),
            s(:sym, :cc),
            s(:sym, :bcc),
            s(:sym, :in_reply_to),
            s(:sym, :message_id))),
        s(:casgn, nil, :Address,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :name),
            s(:sym, :route),
            s(:sym, :mailbox),
            s(:sym, :host))),
        s(:casgn, nil, :ContentDisposition,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :dsp_type),
            s(:sym, :param))),
        s(:casgn, nil, :ThreadMember,
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :seqno),
            s(:sym, :children))),
        s(:class,
          s(:const, nil, :BodyTypeBasic),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :media_type),
            s(:sym, :subtype),
            s(:sym, :param),
            s(:sym, :content_id),
            s(:sym, :description),
            s(:sym, :encoding),
            s(:sym, :size),
            s(:sym, :md5),
            s(:sym, :disposition),
            s(:sym, :language),
            s(:sym, :extension)),
          s(:begin,
            s(:def, :multipart?,
              s(:args),
              s(:return,
                s(:false))),
            s(:def, :media_subtype,
              s(:args),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "warning: media_subtype is obsolete.\n")),
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "         use subtype instead.\n")),
                s(:return,
                  s(:send, nil, :subtype)))))),
        s(:class,
          s(:const, nil, :BodyTypeText),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :media_type),
            s(:sym, :subtype),
            s(:sym, :param),
            s(:sym, :content_id),
            s(:sym, :description),
            s(:sym, :encoding),
            s(:sym, :size),
            s(:sym, :lines),
            s(:sym, :md5),
            s(:sym, :disposition),
            s(:sym, :language),
            s(:sym, :extension)),
          s(:begin,
            s(:def, :multipart?,
              s(:args),
              s(:return,
                s(:false))),
            s(:def, :media_subtype,
              s(:args),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "warning: media_subtype is obsolete.\n")),
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "         use subtype instead.\n")),
                s(:return,
                  s(:send, nil, :subtype)))))),
        s(:class,
          s(:const, nil, :BodyTypeMessage),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :media_type),
            s(:sym, :subtype),
            s(:sym, :param),
            s(:sym, :content_id),
            s(:sym, :description),
            s(:sym, :encoding),
            s(:sym, :size),
            s(:sym, :envelope),
            s(:sym, :body),
            s(:sym, :lines),
            s(:sym, :md5),
            s(:sym, :disposition),
            s(:sym, :language),
            s(:sym, :extension)),
          s(:begin,
            s(:def, :multipart?,
              s(:args),
              s(:return,
                s(:false))),
            s(:def, :media_subtype,
              s(:args),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "warning: media_subtype is obsolete.\n")),
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "         use subtype instead.\n")),
                s(:return,
                  s(:send, nil, :subtype)))))),
        s(:class,
          s(:const, nil, :BodyTypeAttachment),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :media_type),
            s(:sym, :subtype),
            s(:sym, :param)),
          s(:def, :multipart?,
            s(:args),
            s(:return,
              s(:false)))),
        s(:class,
          s(:const, nil, :BodyTypeMultipart),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :media_type),
            s(:sym, :subtype),
            s(:sym, :parts),
            s(:sym, :param),
            s(:sym, :disposition),
            s(:sym, :language),
            s(:sym, :extension)),
          s(:begin,
            s(:def, :multipart?,
              s(:args),
              s(:return,
                s(:true))),
            s(:def, :media_subtype,
              s(:args),
              s(:begin,
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "warning: media_subtype is obsolete.\n")),
                s(:send,
                  s(:gvar, :$stderr), :printf,
                  s(:str, "         use subtype instead.\n")),
                s(:return,
                  s(:send, nil, :subtype)))))),
        s(:class,
          s(:const, nil, :BodyTypeExtension),
          s(:send,
            s(:const, nil, :Struct), :new,
            s(:sym, :media_type),
            s(:sym, :subtype),
            s(:sym, :params),
            s(:sym, :content_id),
            s(:sym, :description),
            s(:sym, :encoding),
            s(:sym, :size)),
          s(:def, :multipart?,
            s(:args),
            s(:return,
              s(:false)))),
        s(:class,
          s(:const, nil, :ResponseParser), nil,
          s(:begin,
            s(:def, :initialize,
              s(:args),
              s(:begin,
                s(:ivasgn, :@str,
                  s(:nil)),
                s(:ivasgn, :@pos,
                  s(:nil)),
                s(:ivasgn, :@lex_state,
                  s(:nil)),
                s(:ivasgn, :@token,
                  s(:nil)),
                s(:ivasgn, :@flag_symbols,
                  s(:hash)))),
            s(:def, :parse,
              s(:args,
                s(:arg, :str)),
              s(:begin,
                s(:ivasgn, :@str,
                  s(:lvar, :str)),
                s(:ivasgn, :@pos,
                  s(:int, 0)),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:ivasgn, :@token,
                  s(:nil)),
                s(:return,
                  s(:send, nil, :response)))),
            s(:send, nil, :private),
            s(:casgn, nil, :EXPR_BEG,
              s(:sym, :EXPR_BEG)),
            s(:casgn, nil, :EXPR_DATA,
              s(:sym, :EXPR_DATA)),
            s(:casgn, nil, :EXPR_TEXT,
              s(:sym, :EXPR_TEXT)),
            s(:casgn, nil, :EXPR_RTEXT,
              s(:sym, :EXPR_RTEXT)),
            s(:casgn, nil, :EXPR_CTEXT,
              s(:sym, :EXPR_CTEXT)),
            s(:casgn, nil, :T_SPACE,
              s(:sym, :SPACE)),
            s(:casgn, nil, :T_NIL,
              s(:sym, :NIL)),
            s(:casgn, nil, :T_NUMBER,
              s(:sym, :NUMBER)),
            s(:casgn, nil, :T_ATOM,
              s(:sym, :ATOM)),
            s(:casgn, nil, :T_QUOTED,
              s(:sym, :QUOTED)),
            s(:casgn, nil, :T_LPAR,
              s(:sym, :LPAR)),
            s(:casgn, nil, :T_RPAR,
              s(:sym, :RPAR)),
            s(:casgn, nil, :T_BSLASH,
              s(:sym, :BSLASH)),
            s(:casgn, nil, :T_STAR,
              s(:sym, :STAR)),
            s(:casgn, nil, :T_LBRA,
              s(:sym, :LBRA)),
            s(:casgn, nil, :T_RBRA,
              s(:sym, :RBRA)),
            s(:casgn, nil, :T_LITERAL,
              s(:sym, :LITERAL)),
            s(:casgn, nil, :T_PLUS,
              s(:sym, :PLUS)),
            s(:casgn, nil, :T_PERCENT,
              s(:sym, :PERCENT)),
            s(:casgn, nil, :T_CRLF,
              s(:sym, :CRLF)),
            s(:casgn, nil, :T_EOF,
              s(:sym, :EOF)),
            s(:casgn, nil, :T_TEXT,
              s(:sym, :TEXT)),
            s(:casgn, nil, :BEG_REGEXP,
              s(:regexp,
                s(:str, "\\G(?:(?# 1:  SPACE   )( +)|(?# 2:  NIL     )(NIL)(?=[\\x80-\\xff(){ \\x00-\\x1f\\x7f%*\"\\\\\\[\\]+])|(?# 3:  NUMBER  )(\\d+)(?=[\\x80-\\xff(){ \\x00-\\x1f\\x7f%*\"\\\\\\[\\]+])|(?# 4:  ATOM    )([^\\x80-\\xff(){ \\x00-\\x1f\\x7f%*\"\\\\\\[\\]+]+)|(?# 5:  QUOTED  )\"((?:[^\\x00\\r\\n\"\\\\]|\\\\[\"\\\\])*)\"|(?# 6:  LPAR    )(\\()|(?# 7:  RPAR    )(\\))|(?# 8:  BSLASH  )(\\\\)|(?# 9:  STAR    )(\\*)|(?# 10: LBRA    )(\\[)|(?# 11: RBRA    )(\\])|(?# 12: LITERAL )\\{(\\d+)\\}\\r\\n|(?# 13: PLUS    )(\\+)|(?# 14: PERCENT )(%)|(?# 15: CRLF    )(\\r\\n)|(?# 16: EOF     )(\\z))"),
                s(:regopt, :i, :n))),
            s(:casgn, nil, :DATA_REGEXP,
              s(:regexp,
                s(:str, "\\G(?:(?# 1:  SPACE   )( )|(?# 2:  NIL     )(NIL)|(?# 3:  NUMBER  )(\\d+)|(?# 4:  QUOTED  )\"((?:[^\\x00\\r\\n\"\\\\]|\\\\[\"\\\\])*)\"|(?# 5:  LITERAL )\\{(\\d+)\\}\\r\\n|(?# 6:  LPAR    )(\\()|(?# 7:  RPAR    )(\\)))"),
                s(:regopt, :i, :n))),
            s(:casgn, nil, :TEXT_REGEXP,
              s(:regexp,
                s(:str, "\\G(?:(?# 1:  TEXT    )([^\\x00\\r\\n]*))"),
                s(:regopt, :i, :n))),
            s(:casgn, nil, :RTEXT_REGEXP,
              s(:regexp,
                s(:str, "\\G(?:(?# 1:  LBRA    )(\\[)|(?# 2:  TEXT    )([^\\x00\\r\\n]*))"),
                s(:regopt, :i, :n))),
            s(:casgn, nil, :CTEXT_REGEXP,
              s(:regexp,
                s(:str, "\\G(?:(?# 1:  TEXT    )([^\\x00\\r\\n\\]]*))"),
                s(:regopt, :i, :n))),
            s(:casgn, nil, :Token,
              s(:send,
                s(:const, nil, :Struct), :new,
                s(:sym, :symbol),
                s(:sym, :value))),
            s(:def, :response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:case,
                  s(:send,
                    s(:lvar, :token), :symbol),
                  s(:when,
                    s(:const, nil, :T_PLUS),
                    s(:lvasgn, :result,
                      s(:send, nil, :continue_req))),
                  s(:when,
                    s(:const, nil, :T_STAR),
                    s(:lvasgn, :result,
                      s(:send, nil, :response_untagged))),
                  s(:lvasgn, :result,
                    s(:send, nil, :response_tagged))),
                s(:send, nil, :match,
                  s(:const, nil, :T_CRLF)),
                s(:send, nil, :match,
                  s(:const, nil, :T_EOF)),
                s(:return,
                  s(:lvar, :result)))),
            s(:def, :continue_req,
              s(:args),
              s(:begin,
                s(:send, nil, :match,
                  s(:const, nil, :T_PLUS)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:send,
                    s(:const, nil, :ContinuationRequest), :new,
                    s(:send, nil, :resp_text),
                    s(:ivar, :@str))))),
            s(:def, :response_untagged,
              s(:args),
              s(:begin,
                s(:send, nil, :match,
                  s(:const, nil, :T_STAR)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NUMBER)),
                  s(:return,
                    s(:send, nil, :numeric_response)),
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :token), :symbol), :==,
                      s(:const, nil, :T_ATOM)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :value),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:OK|NO|BAD|BYE|PREAUTH)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :response_cond))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:FLAGS)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :flags_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:LIST|LSUB|XLIST)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :list_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:QUOTA)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :getquota_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:QUOTAROOT)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :getquotaroot_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:ACL)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :getacl_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:SEARCH|SORT)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :search_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:THREAD)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :thread_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:STATUS)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :status_response))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:CAPABILITY)\\z"),
                          s(:regopt, :i, :n)),
                        s(:return,
                          s(:send, nil, :capability_response))),
                      s(:return,
                        s(:send, nil, :text_response))),
                    s(:send, nil, :parse_error,
                      s(:str, "unexpected token %s"),
                      s(:send,
                        s(:lvar, :token), :symbol)))))),
            s(:def, :response_tagged,
              s(:args),
              s(:begin,
                s(:lvasgn, :tag,
                  s(:send, nil, :atom)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:send,
                    s(:const, nil, :TaggedResponse), :new,
                    s(:lvar, :tag),
                    s(:lvar, :name),
                    s(:send, nil, :resp_text),
                    s(:ivar, :@str))))),
            s(:def, :response_cond,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:send, nil, :resp_text),
                    s(:ivar, :@str))))),
            s(:def, :numeric_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :n,
                  s(:send, nil, :number)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:case,
                  s(:lvar, :name),
                  s(:when,
                    s(:str, "EXISTS"),
                    s(:str, "RECENT"),
                    s(:str, "EXPUNGE"),
                    s(:return,
                      s(:send,
                        s(:const, nil, :UntaggedResponse), :new,
                        s(:lvar, :name),
                        s(:lvar, :n),
                        s(:ivar, :@str)))),
                  s(:when,
                    s(:str, "FETCH"),
                    s(:begin,
                      s(:send, nil, :shift_token),
                      s(:send, nil, :match,
                        s(:const, nil, :T_SPACE)),
                      s(:lvasgn, :data,
                        s(:send,
                          s(:const, nil, :FetchData), :new,
                          s(:lvar, :n),
                          s(:send, nil, :msg_att,
                            s(:lvar, :n)))),
                      s(:return,
                        s(:send,
                          s(:const, nil, :UntaggedResponse), :new,
                          s(:lvar, :name),
                          s(:lvar, :data),
                          s(:ivar, :@str))))), nil))),
            s(:def, :msg_att,
              s(:args,
                s(:arg, :n)),
              s(:begin,
                s(:send, nil, :match,
                  s(:const, nil, :T_LPAR)),
                s(:lvasgn, :attr,
                  s(:hash)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :symbol),
                      s(:when,
                        s(:const, nil, :T_RPAR),
                        s(:begin,
                          s(:send, nil, :shift_token),
                          s(:break))),
                      s(:when,
                        s(:const, nil, :T_SPACE),
                        s(:begin,
                          s(:send, nil, :shift_token),
                          s(:next))), nil),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :value),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:ENVELOPE)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :envelope_data))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:FLAGS)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :flags_data))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:INTERNALDATE)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :internaldate_data))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:RFC822(?:\\.HEADER|\\.TEXT)?)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :rfc822_text))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:RFC822\\.SIZE)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :rfc822_size))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:BODY(?:STRUCTURE)?)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :body_data))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A(?:UID)\\z"),
                          s(:regopt, :i, :n)),
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :name),
                            s(:lvasgn, :val)),
                          s(:send, nil, :uid_data))),
                      s(:send, nil, :parse_error,
                        s(:str, "unknown attribute `%s' for {%d}"),
                        s(:send,
                          s(:lvar, :token), :value),
                        s(:lvar, :n))),
                    s(:send,
                      s(:lvar, :attr), :[]=,
                      s(:lvar, :name),
                      s(:lvar, :val)))),
                s(:return,
                  s(:lvar, :attr)))),
            s(:def, :envelope_data,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:lvar, :name),
                  s(:send, nil, :envelope)))),
            s(:def, :envelope,
              s(:args),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_DATA)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:lvasgn, :result,
                      s(:nil))),
                  s(:begin,
                    s(:send, nil, :match,
                      s(:const, nil, :T_LPAR)),
                    s(:lvasgn, :date,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :subject,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :from,
                      s(:send, nil, :address_list)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :sender,
                      s(:send, nil, :address_list)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :reply_to,
                      s(:send, nil, :address_list)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :to,
                      s(:send, nil, :address_list)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :cc,
                      s(:send, nil, :address_list)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :bcc,
                      s(:send, nil, :address_list)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :in_reply_to,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :message_id,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_RPAR)),
                    s(:lvasgn, :result,
                      s(:send,
                        s(:const, nil, :Envelope), :new,
                        s(:lvar, :date),
                        s(:lvar, :subject),
                        s(:lvar, :from),
                        s(:lvar, :sender),
                        s(:lvar, :reply_to),
                        s(:lvar, :to),
                        s(:lvar, :cc),
                        s(:lvar, :bcc),
                        s(:lvar, :in_reply_to),
                        s(:lvar, :message_id))))),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:return,
                  s(:lvar, :result)))),
            s(:def, :flags_data,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:lvar, :name),
                  s(:send, nil, :flag_list)))),
            s(:def, :internaldate_data,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_QUOTED))),
                s(:return,
                  s(:lvar, :name),
                  s(:send,
                    s(:lvar, :token), :value)))),
            s(:def, :rfc822_text,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_LBRA)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:send, nil, :match,
                      s(:const, nil, :T_RBRA))), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:lvar, :name),
                  s(:send, nil, :nstring)))),
            s(:def, :rfc822_size,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:lvar, :name),
                  s(:send, nil, :number)))),
            s(:def, :body_data,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:lvar, :name),
                      s(:send, nil, :body))), nil),
                s(:send,
                  s(:lvar, :name), :concat,
                  s(:send, nil, :section)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_ATOM)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :name), :concat,
                      s(:send,
                        s(:lvar, :token), :value)),
                    s(:send, nil, :shift_token)), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :data,
                  s(:send, nil, :nstring)),
                s(:return,
                  s(:lvar, :name),
                  s(:lvar, :data)))),
            s(:def, :body,
              s(:args),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_DATA)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:lvasgn, :result,
                      s(:nil))),
                  s(:begin,
                    s(:send, nil, :match,
                      s(:const, nil, :T_LPAR)),
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :symbol), :==,
                        s(:const, nil, :T_LPAR)),
                      s(:lvasgn, :result,
                        s(:send, nil, :body_type_mpart)),
                      s(:lvasgn, :result,
                        s(:send, nil, :body_type_1part))),
                    s(:send, nil, :match,
                      s(:const, nil, :T_RPAR)))),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:return,
                  s(:lvar, :result)))),
            s(:def, :body_type_1part,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:case,
                  s(:send,
                    s(:lvar, :token), :value),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:TEXT)\\z"),
                      s(:regopt, :i, :n)),
                    s(:return,
                      s(:send, nil, :body_type_text))),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:MESSAGE)\\z"),
                      s(:regopt, :i, :n)),
                    s(:return,
                      s(:send, nil, :body_type_msg))),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:ATTACHMENT)\\z"),
                      s(:regopt, :i, :n)),
                    s(:return,
                      s(:send, nil, :body_type_attachment))),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:MIXED)\\z"),
                      s(:regopt, :i, :n)),
                    s(:return,
                      s(:send, nil, :body_type_mixed))),
                  s(:return,
                    s(:send, nil, :body_type_basic))))),
            s(:def, :body_type_basic,
              s(:args),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :mtype),
                    s(:lvasgn, :msubtype)),
                  s(:send, nil, :media_type)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_RPAR)),
                  s(:return,
                    s(:send,
                      s(:const, nil, :BodyTypeBasic), :new,
                      s(:lvar, :mtype),
                      s(:lvar, :msubtype))), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :param),
                    s(:lvasgn, :content_id),
                    s(:lvasgn, :desc),
                    s(:lvasgn, :enc),
                    s(:lvasgn, :size)),
                  s(:send, nil, :body_fields)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :md5),
                    s(:lvasgn, :disposition),
                    s(:lvasgn, :language),
                    s(:lvasgn, :extension)),
                  s(:send, nil, :body_ext_1part)),
                s(:return,
                  s(:send,
                    s(:const, nil, :BodyTypeBasic), :new,
                    s(:lvar, :mtype),
                    s(:lvar, :msubtype),
                    s(:lvar, :param),
                    s(:lvar, :content_id),
                    s(:lvar, :desc),
                    s(:lvar, :enc),
                    s(:lvar, :size),
                    s(:lvar, :md5),
                    s(:lvar, :disposition),
                    s(:lvar, :language),
                    s(:lvar, :extension))))),
            s(:def, :body_type_text,
              s(:args),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :mtype),
                    s(:lvasgn, :msubtype)),
                  s(:send, nil, :media_type)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :param),
                    s(:lvasgn, :content_id),
                    s(:lvasgn, :desc),
                    s(:lvasgn, :enc),
                    s(:lvasgn, :size)),
                  s(:send, nil, :body_fields)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :lines,
                  s(:send, nil, :number)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :md5),
                    s(:lvasgn, :disposition),
                    s(:lvasgn, :language),
                    s(:lvasgn, :extension)),
                  s(:send, nil, :body_ext_1part)),
                s(:return,
                  s(:send,
                    s(:const, nil, :BodyTypeText), :new,
                    s(:lvar, :mtype),
                    s(:lvar, :msubtype),
                    s(:lvar, :param),
                    s(:lvar, :content_id),
                    s(:lvar, :desc),
                    s(:lvar, :enc),
                    s(:lvar, :size),
                    s(:lvar, :lines),
                    s(:lvar, :md5),
                    s(:lvar, :disposition),
                    s(:lvar, :language),
                    s(:lvar, :extension))))),
            s(:def, :body_type_msg,
              s(:args),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :mtype),
                    s(:lvasgn, :msubtype)),
                  s(:send, nil, :media_type)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :param),
                    s(:lvasgn, :content_id),
                    s(:lvasgn, :desc),
                    s(:lvasgn, :enc),
                    s(:lvasgn, :size)),
                  s(:send, nil, :body_fields)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_RPAR)),
                  s(:if,
                    s(:send,
                      s(:lvar, :msubtype), :==,
                      s(:str, "RFC822")),
                    s(:return,
                      s(:send,
                        s(:const, nil, :BodyTypeMessage), :new,
                        s(:lvar, :mtype),
                        s(:lvar, :msubtype),
                        s(:lvar, :param),
                        s(:lvar, :content_id),
                        s(:lvar, :desc),
                        s(:lvar, :enc),
                        s(:lvar, :size),
                        s(:nil),
                        s(:nil),
                        s(:nil),
                        s(:nil),
                        s(:nil),
                        s(:nil),
                        s(:nil))),
                    s(:return,
                      s(:send,
                        s(:const, nil, :BodyTypeExtension), :new,
                        s(:lvar, :mtype),
                        s(:lvar, :msubtype),
                        s(:lvar, :param),
                        s(:lvar, :content_id),
                        s(:lvar, :desc),
                        s(:lvar, :enc),
                        s(:lvar, :size)))), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :env,
                  s(:send, nil, :envelope)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :b,
                  s(:send, nil, :body)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :lines,
                  s(:send, nil, :number)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :md5),
                    s(:lvasgn, :disposition),
                    s(:lvasgn, :language),
                    s(:lvasgn, :extension)),
                  s(:send, nil, :body_ext_1part)),
                s(:return,
                  s(:send,
                    s(:const, nil, :BodyTypeMessage), :new,
                    s(:lvar, :mtype),
                    s(:lvar, :msubtype),
                    s(:lvar, :param),
                    s(:lvar, :content_id),
                    s(:lvar, :desc),
                    s(:lvar, :enc),
                    s(:lvar, :size),
                    s(:lvar, :env),
                    s(:lvar, :b),
                    s(:lvar, :lines),
                    s(:lvar, :md5),
                    s(:lvar, :disposition),
                    s(:lvar, :language),
                    s(:lvar, :extension))))),
            s(:def, :body_type_attachment,
              s(:args),
              s(:begin,
                s(:lvasgn, :mtype,
                  s(:send, nil, :case_insensitive_string)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :param,
                  s(:send, nil, :body_fld_param)),
                s(:return,
                  s(:send,
                    s(:const, nil, :BodyTypeAttachment), :new,
                    s(:lvar, :mtype),
                    s(:nil),
                    s(:lvar, :param))))),
            s(:def, :body_type_mixed,
              s(:args),
              s(:begin,
                s(:lvasgn, :mtype,
                  s(:str, "MULTIPART")),
                s(:lvasgn, :msubtype,
                  s(:send, nil, :case_insensitive_string)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :param),
                    s(:lvasgn, :disposition),
                    s(:lvasgn, :language),
                    s(:lvasgn, :extension)),
                  s(:send, nil, :body_ext_mpart)),
                s(:return,
                  s(:send,
                    s(:const, nil, :BodyTypeBasic), :new,
                    s(:lvar, :mtype),
                    s(:lvar, :msubtype),
                    s(:lvar, :param),
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:nil),
                    s(:lvar, :disposition),
                    s(:lvar, :language),
                    s(:lvar, :extension))))),
            s(:def, :body_type_mpart,
              s(:args),
              s(:begin,
                s(:lvasgn, :parts,
                  s(:array)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :symbol), :==,
                        s(:const, nil, :T_SPACE)),
                      s(:begin,
                        s(:send, nil, :shift_token),
                        s(:break)), nil),
                    s(:send,
                      s(:lvar, :parts), :push,
                      s(:send, nil, :body)))),
                s(:lvasgn, :mtype,
                  s(:str, "MULTIPART")),
                s(:lvasgn, :msubtype,
                  s(:send, nil, :case_insensitive_string)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :param),
                    s(:lvasgn, :disposition),
                    s(:lvasgn, :language),
                    s(:lvasgn, :extension)),
                  s(:send, nil, :body_ext_mpart)),
                s(:return,
                  s(:send,
                    s(:const, nil, :BodyTypeMultipart), :new,
                    s(:lvar, :mtype),
                    s(:lvar, :msubtype),
                    s(:lvar, :parts),
                    s(:lvar, :param),
                    s(:lvar, :disposition),
                    s(:lvar, :language),
                    s(:lvar, :extension))))),
            s(:def, :media_type,
              s(:args),
              s(:begin,
                s(:lvasgn, :mtype,
                  s(:send, nil, :case_insensitive_string)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :!=,
                    s(:const, nil, :T_SPACE)),
                  s(:return,
                    s(:lvar, :mtype),
                    s(:nil)), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :msubtype,
                  s(:send, nil, :case_insensitive_string)),
                s(:return,
                  s(:lvar, :mtype),
                  s(:lvar, :msubtype)))),
            s(:def, :body_fields,
              s(:args),
              s(:begin,
                s(:lvasgn, :param,
                  s(:send, nil, :body_fld_param)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :content_id,
                  s(:send, nil, :nstring)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :desc,
                  s(:send, nil, :nstring)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :enc,
                  s(:send, nil, :case_insensitive_string)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :size,
                  s(:send, nil, :number)),
                s(:return,
                  s(:lvar, :param),
                  s(:lvar, :content_id),
                  s(:lvar, :desc),
                  s(:lvar, :enc),
                  s(:lvar, :size)))),
            s(:def, :body_fld_param,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_LPAR)),
                s(:lvasgn, :param,
                  s(:hash)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :symbol),
                      s(:when,
                        s(:const, nil, :T_RPAR),
                        s(:begin,
                          s(:send, nil, :shift_token),
                          s(:break))),
                      s(:when,
                        s(:const, nil, :T_SPACE),
                        s(:send, nil, :shift_token)), nil),
                    s(:lvasgn, :name,
                      s(:send, nil, :case_insensitive_string)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :val,
                      s(:send, nil, :string)),
                    s(:send,
                      s(:lvar, :param), :[]=,
                      s(:lvar, :name),
                      s(:lvar, :val)))),
                s(:return,
                  s(:lvar, :param)))),
            s(:def, :body_ext_1part,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:nil))),
                s(:lvasgn, :md5,
                  s(:send, nil, :nstring)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:lvar, :md5))),
                s(:lvasgn, :disposition,
                  s(:send, nil, :body_fld_dsp)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:lvar, :md5),
                    s(:lvar, :disposition))),
                s(:lvasgn, :language,
                  s(:send, nil, :body_fld_lang)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:lvar, :md5),
                    s(:lvar, :disposition),
                    s(:lvar, :language))),
                s(:lvasgn, :extension,
                  s(:send, nil, :body_extensions)),
                s(:return,
                  s(:lvar, :md5),
                  s(:lvar, :disposition),
                  s(:lvar, :language),
                  s(:lvar, :extension)))),
            s(:def, :body_ext_mpart,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:nil))),
                s(:lvasgn, :param,
                  s(:send, nil, :body_fld_param)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:lvar, :param))),
                s(:lvasgn, :disposition,
                  s(:send, nil, :body_fld_dsp)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:lvar, :param),
                    s(:lvar, :disposition))),
                s(:lvasgn, :language,
                  s(:send, nil, :body_fld_lang)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:send, nil, :shift_token),
                  s(:return,
                    s(:lvar, :param),
                    s(:lvar, :disposition),
                    s(:lvar, :language))),
                s(:lvasgn, :extension,
                  s(:send, nil, :body_extensions)),
                s(:return,
                  s(:lvar, :param),
                  s(:lvar, :disposition),
                  s(:lvar, :language),
                  s(:lvar, :extension)))),
            s(:def, :body_fld_dsp,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))), nil),
                s(:send, nil, :match,
                  s(:const, nil, :T_LPAR)),
                s(:lvasgn, :dsp_type,
                  s(:send, nil, :case_insensitive_string)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :param,
                  s(:send, nil, :body_fld_param)),
                s(:send, nil, :match,
                  s(:const, nil, :T_RPAR)),
                s(:return,
                  s(:send,
                    s(:const, nil, :ContentDisposition), :new,
                    s(:lvar, :dsp_type),
                    s(:lvar, :param))))),
            s(:def, :body_fld_lang,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_LPAR)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:lvasgn, :result,
                      s(:array)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :token,
                          s(:send, nil, :lookahead)),
                        s(:case,
                          s(:send,
                            s(:lvar, :token), :symbol),
                          s(:when,
                            s(:const, nil, :T_RPAR),
                            s(:begin,
                              s(:send, nil, :shift_token),
                              s(:return,
                                s(:lvar, :result)))),
                          s(:when,
                            s(:const, nil, :T_SPACE),
                            s(:send, nil, :shift_token)), nil),
                        s(:send,
                          s(:lvar, :result), :push,
                          s(:send, nil, :case_insensitive_string))))),
                  s(:begin,
                    s(:lvasgn, :lang,
                      s(:send, nil, :nstring)),
                    s(:if,
                      s(:lvar, :lang),
                      s(:return,
                        s(:send,
                          s(:lvar, :lang), :upcase)),
                      s(:return,
                        s(:lvar, :lang))))))),
            s(:def, :body_extensions,
              s(:args),
              s(:begin,
                s(:lvasgn, :result,
                  s(:array)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :symbol),
                      s(:when,
                        s(:const, nil, :T_RPAR),
                        s(:return,
                          s(:lvar, :result))),
                      s(:when,
                        s(:const, nil, :T_SPACE),
                        s(:send, nil, :shift_token)), nil),
                    s(:send,
                      s(:lvar, :result), :push,
                      s(:send, nil, :body_extension)))))),
            s(:def, :body_extension,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:case,
                  s(:send,
                    s(:lvar, :token), :symbol),
                  s(:when,
                    s(:const, nil, :T_LPAR),
                    s(:begin,
                      s(:send, nil, :shift_token),
                      s(:lvasgn, :result,
                        s(:send, nil, :body_extensions)),
                      s(:send, nil, :match,
                        s(:const, nil, :T_RPAR)),
                      s(:return,
                        s(:lvar, :result)))),
                  s(:when,
                    s(:const, nil, :T_NUMBER),
                    s(:return,
                      s(:send, nil, :number))),
                  s(:return,
                    s(:send, nil, :nstring))))),
            s(:def, :section,
              s(:args),
              s(:begin,
                s(:lvasgn, :str,
                  s(:send,
                    s(:const, nil, :String), :new)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_LBRA))),
                s(:send,
                  s(:lvar, :str), :concat,
                  s(:send,
                    s(:lvar, :token), :value)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM),
                    s(:const, nil, :T_NUMBER),
                    s(:const, nil, :T_RBRA))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_RBRA)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :str), :concat,
                      s(:send,
                        s(:lvar, :token), :value)),
                    s(:return,
                      s(:lvar, :str))), nil),
                s(:send,
                  s(:lvar, :str), :concat,
                  s(:send,
                    s(:lvar, :token), :value)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:send,
                      s(:lvar, :str), :concat,
                      s(:send,
                        s(:lvar, :token), :value)),
                    s(:lvasgn, :token,
                      s(:send, nil, :match,
                        s(:const, nil, :T_LPAR))),
                    s(:send,
                      s(:lvar, :str), :concat,
                      s(:send,
                        s(:lvar, :token), :value)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :token,
                          s(:send, nil, :lookahead)),
                        s(:case,
                          s(:send,
                            s(:lvar, :token), :symbol),
                          s(:when,
                            s(:const, nil, :T_RPAR),
                            s(:begin,
                              s(:send,
                                s(:lvar, :str), :concat,
                                s(:send,
                                  s(:lvar, :token), :value)),
                              s(:send, nil, :shift_token),
                              s(:break))),
                          s(:when,
                            s(:const, nil, :T_SPACE),
                            s(:begin,
                              s(:send, nil, :shift_token),
                              s(:send,
                                s(:lvar, :str), :concat,
                                s(:send,
                                  s(:lvar, :token), :value)))), nil),
                        s(:send,
                          s(:lvar, :str), :concat,
                          s(:send, nil, :format_string,
                            s(:send, nil, :astring)))))), nil),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_RBRA))),
                s(:send,
                  s(:lvar, :str), :concat,
                  s(:send,
                    s(:lvar, :token), :value)),
                s(:return,
                  s(:lvar, :str)))),
            s(:def, :format_string,
              s(:args,
                s(:arg, :str)),
              s(:case,
                s(:lvar, :str),
                s(:when,
                  s(:str, ""),
                  s(:return,
                    s(:str, "\"\""))),
                s(:when,
                  s(:regexp,
                    s(:str, "[\\x80-\\xff\\r\\n]"),
                    s(:regopt, :n)),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:str, "{"), :+,
                            s(:send,
                              s(:send,
                                s(:lvar, :str), :bytesize), :to_s)), :+,
                          s(:str, "}")), :+,
                        s(:const, nil, :CRLF)), :+,
                      s(:lvar, :str)))),
                s(:when,
                  s(:regexp,
                    s(:str, "[(){ \\x00-\\x1f\\x7f%*\"\\\\]"),
                    s(:regopt, :n)),
                  s(:return,
                    s(:send,
                      s(:send,
                        s(:str, "\""), :+,
                        s(:send,
                          s(:lvar, :str), :gsub,
                          s(:regexp,
                            s(:str, "[\"\\\\]"),
                            s(:regopt, :n)),
                          s(:str, "\\\\\\&"))), :+,
                      s(:str, "\"")))),
                s(:return,
                  s(:lvar, :str)))),
            s(:def, :uid_data,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:lvar, :name),
                  s(:send, nil, :number)))),
            s(:def, :text_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_TEXT)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_TEXT))),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:send,
                      s(:lvar, :token), :value))))),
            s(:def, :flags_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:send, nil, :flag_list),
                    s(:ivar, :@str))))),
            s(:def, :list_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:send, nil, :mailbox_list),
                    s(:ivar, :@str))))),
            s(:def, :mailbox_list,
              s(:args),
              s(:begin,
                s(:lvasgn, :attr,
                  s(:send, nil, :flag_list)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_QUOTED),
                    s(:const, nil, :T_NIL))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:lvasgn, :delim,
                    s(:nil)),
                  s(:lvasgn, :delim,
                    s(:send,
                      s(:lvar, :token), :value))),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :name,
                  s(:send, nil, :astring)),
                s(:return,
                  s(:send,
                    s(:const, nil, :MailboxList), :new,
                    s(:lvar, :attr),
                    s(:lvar, :delim),
                    s(:lvar, :name))))),
            s(:def, :getquota_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :mailbox,
                  s(:send, nil, :astring)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:send, nil, :match,
                  s(:const, nil, :T_LPAR)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:case,
                  s(:send,
                    s(:lvar, :token), :symbol),
                  s(:when,
                    s(:const, nil, :T_RPAR),
                    s(:begin,
                      s(:send, nil, :shift_token),
                      s(:lvasgn, :data,
                        s(:send,
                          s(:const, nil, :MailboxQuota), :new,
                          s(:lvar, :mailbox),
                          s(:nil),
                          s(:nil))),
                      s(:return,
                        s(:send,
                          s(:const, nil, :UntaggedResponse), :new,
                          s(:lvar, :name),
                          s(:lvar, :data),
                          s(:ivar, :@str))))),
                  s(:when,
                    s(:const, nil, :T_ATOM),
                    s(:begin,
                      s(:send, nil, :shift_token),
                      s(:send, nil, :match,
                        s(:const, nil, :T_SPACE)),
                      s(:lvasgn, :token,
                        s(:send, nil, :match,
                          s(:const, nil, :T_NUMBER))),
                      s(:lvasgn, :usage,
                        s(:send,
                          s(:lvar, :token), :value)),
                      s(:send, nil, :match,
                        s(:const, nil, :T_SPACE)),
                      s(:lvasgn, :token,
                        s(:send, nil, :match,
                          s(:const, nil, :T_NUMBER))),
                      s(:lvasgn, :quota,
                        s(:send,
                          s(:lvar, :token), :value)),
                      s(:send, nil, :match,
                        s(:const, nil, :T_RPAR)),
                      s(:lvasgn, :data,
                        s(:send,
                          s(:const, nil, :MailboxQuota), :new,
                          s(:lvar, :mailbox),
                          s(:lvar, :usage),
                          s(:lvar, :quota))),
                      s(:return,
                        s(:send,
                          s(:const, nil, :UntaggedResponse), :new,
                          s(:lvar, :name),
                          s(:lvar, :data),
                          s(:ivar, :@str))))),
                  s(:send, nil, :parse_error,
                    s(:str, "unexpected token %s"),
                    s(:send,
                      s(:lvar, :token), :symbol))))),
            s(:def, :getquotaroot_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :mailbox,
                  s(:send, nil, :astring)),
                s(:lvasgn, :quotaroots,
                  s(:array)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :symbol), :==,
                        s(:const, nil, :T_SPACE)), nil,
                      s(:break)),
                    s(:send, nil, :shift_token),
                    s(:send,
                      s(:lvar, :quotaroots), :push,
                      s(:send, nil, :astring)))),
                s(:lvasgn, :data,
                  s(:send,
                    s(:const, nil, :MailboxQuotaRoot), :new,
                    s(:lvar, :mailbox),
                    s(:lvar, :quotaroots))),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:lvar, :data),
                    s(:ivar, :@str))))),
            s(:def, :getacl_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :mailbox,
                  s(:send, nil, :astring)),
                s(:lvasgn, :data,
                  s(:array)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :token,
                          s(:send, nil, :lookahead)),
                        s(:case,
                          s(:send,
                            s(:lvar, :token), :symbol),
                          s(:when,
                            s(:const, nil, :T_CRLF),
                            s(:break)),
                          s(:when,
                            s(:const, nil, :T_SPACE),
                            s(:send, nil, :shift_token)), nil),
                        s(:lvasgn, :user,
                          s(:send, nil, :astring)),
                        s(:send, nil, :match,
                          s(:const, nil, :T_SPACE)),
                        s(:lvasgn, :rights,
                          s(:send, nil, :astring)),
                        s(:send,
                          s(:lvar, :data), :push,
                          s(:send,
                            s(:const, nil, :MailboxACLItem), :new,
                            s(:lvar, :user),
                            s(:lvar, :rights),
                            s(:lvar, :mailbox)))))), nil),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:lvar, :data),
                    s(:ivar, :@str))))),
            s(:def, :search_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:lvasgn, :data,
                      s(:array)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :token,
                          s(:send, nil, :lookahead)),
                        s(:case,
                          s(:send,
                            s(:lvar, :token), :symbol),
                          s(:when,
                            s(:const, nil, :T_CRLF),
                            s(:break)),
                          s(:when,
                            s(:const, nil, :T_SPACE),
                            s(:send, nil, :shift_token)),
                          s(:when,
                            s(:const, nil, :T_NUMBER),
                            s(:send,
                              s(:lvar, :data), :push,
                              s(:send, nil, :number))),
                          s(:when,
                            s(:const, nil, :T_LPAR),
                            s(:begin,
                              s(:send, nil, :shift_token),
                              s(:send, nil, :match,
                                s(:const, nil, :T_ATOM)),
                              s(:send, nil, :match,
                                s(:const, nil, :T_SPACE)),
                              s(:send, nil, :match,
                                s(:const, nil, :T_NUMBER)),
                              s(:send, nil, :match,
                                s(:const, nil, :T_RPAR)))), nil)))),
                  s(:lvasgn, :data,
                    s(:array))),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:lvar, :data),
                    s(:ivar, :@str))))),
            s(:def, :thread_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_SPACE)),
                  s(:begin,
                    s(:lvasgn, :threads,
                      s(:array)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:send, nil, :shift_token),
                        s(:lvasgn, :token,
                          s(:send, nil, :lookahead)),
                        s(:case,
                          s(:send,
                            s(:lvar, :token), :symbol),
                          s(:when,
                            s(:const, nil, :T_LPAR),
                            s(:send,
                              s(:lvar, :threads), :<<,
                              s(:send, nil, :thread_branch,
                                s(:lvar, :token)))),
                          s(:when,
                            s(:const, nil, :T_CRLF),
                            s(:break)), nil)))),
                  s(:lvasgn, :threads,
                    s(:array))),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:lvar, :threads),
                    s(:ivar, :@str))))),
            s(:def, :thread_branch,
              s(:args,
                s(:arg, :token)),
              s(:begin,
                s(:lvasgn, :rootmember,
                  s(:nil)),
                s(:lvasgn, :lastmember,
                  s(:nil)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :symbol),
                      s(:when,
                        s(:const, nil, :T_NUMBER),
                        s(:begin,
                          s(:lvasgn, :newmember,
                            s(:send,
                              s(:const, nil, :ThreadMember), :new,
                              s(:send, nil, :number),
                              s(:array))),
                          s(:if,
                            s(:send,
                              s(:lvar, :rootmember), :nil?),
                            s(:lvasgn, :rootmember,
                              s(:lvar, :newmember)),
                            s(:send,
                              s(:send,
                                s(:lvar, :lastmember), :children), :<<,
                              s(:lvar, :newmember))),
                          s(:lvasgn, :lastmember,
                            s(:lvar, :newmember)))),
                      s(:when,
                        s(:const, nil, :T_SPACE), nil),
                      s(:when,
                        s(:const, nil, :T_LPAR),
                        s(:begin,
                          s(:if,
                            s(:send,
                              s(:lvar, :rootmember), :nil?),
                            s(:lvasgn, :lastmember,
                              s(:lvasgn, :rootmember,
                                s(:send,
                                  s(:const, nil, :ThreadMember), :new,
                                  s(:nil),
                                  s(:array)))), nil),
                          s(:send,
                            s(:send,
                              s(:lvar, :lastmember), :children), :<<,
                            s(:send, nil, :thread_branch,
                              s(:lvar, :token))))),
                      s(:when,
                        s(:const, nil, :T_RPAR),
                        s(:break)), nil))),
                s(:return,
                  s(:lvar, :rootmember)))),
            s(:def, :status_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :mailbox,
                  s(:send, nil, :astring)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:send, nil, :match,
                  s(:const, nil, :T_LPAR)),
                s(:lvasgn, :attr,
                  s(:hash)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :symbol),
                      s(:when,
                        s(:const, nil, :T_RPAR),
                        s(:begin,
                          s(:send, nil, :shift_token),
                          s(:break))),
                      s(:when,
                        s(:const, nil, :T_SPACE),
                        s(:send, nil, :shift_token)), nil),
                    s(:lvasgn, :token,
                      s(:send, nil, :match,
                        s(:const, nil, :T_ATOM))),
                    s(:lvasgn, :key,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :value), :upcase)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :val,
                      s(:send, nil, :number)),
                    s(:send,
                      s(:lvar, :attr), :[]=,
                      s(:lvar, :key),
                      s(:lvar, :val)))),
                s(:lvasgn, :data,
                  s(:send,
                    s(:const, nil, :StatusData), :new,
                    s(:lvar, :mailbox),
                    s(:lvar, :attr))),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:lvar, :data),
                    s(:ivar, :@str))))),
            s(:def, :capability_response,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:send, nil, :match,
                  s(:const, nil, :T_SPACE)),
                s(:lvasgn, :data,
                  s(:array)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:case,
                      s(:send,
                        s(:lvar, :token), :symbol),
                      s(:when,
                        s(:const, nil, :T_CRLF),
                        s(:break)),
                      s(:when,
                        s(:const, nil, :T_SPACE),
                        s(:begin,
                          s(:send, nil, :shift_token),
                          s(:next))), nil),
                    s(:send,
                      s(:lvar, :data), :push,
                      s(:send,
                        s(:send, nil, :atom), :upcase)))),
                s(:return,
                  s(:send,
                    s(:const, nil, :UntaggedResponse), :new,
                    s(:lvar, :name),
                    s(:lvar, :data),
                    s(:ivar, :@str))))),
            s(:def, :resp_text,
              s(:args),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_RTEXT)),
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_LBRA)),
                  s(:lvasgn, :code,
                    s(:send, nil, :resp_text_code)),
                  s(:lvasgn, :code,
                    s(:nil))),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_TEXT))),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:return,
                  s(:send,
                    s(:const, nil, :ResponseText), :new,
                    s(:lvar, :code),
                    s(:send,
                      s(:lvar, :token), :value))))),
            s(:def, :resp_text_code,
              s(:args),
              s(:begin,
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_BEG)),
                s(:send, nil, :match,
                  s(:const, nil, :T_LBRA)),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_ATOM))),
                s(:lvasgn, :name,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)),
                s(:case,
                  s(:lvar, :name),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:ALERT|PARSE|READ-ONLY|READ-WRITE|TRYCREATE|NOMODSEQ)\\z"),
                      s(:regopt, :n)),
                    s(:lvasgn, :result,
                      s(:send,
                        s(:const, nil, :ResponseCode), :new,
                        s(:lvar, :name),
                        s(:nil)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:PERMANENTFLAGS)\\z"),
                      s(:regopt, :n)),
                    s(:begin,
                      s(:send, nil, :match,
                        s(:const, nil, :T_SPACE)),
                      s(:lvasgn, :result,
                        s(:send,
                          s(:const, nil, :ResponseCode), :new,
                          s(:lvar, :name),
                          s(:send, nil, :flag_list))))),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\A(?:UIDVALIDITY|UIDNEXT|UNSEEN)\\z"),
                      s(:regopt, :n)),
                    s(:begin,
                      s(:send, nil, :match,
                        s(:const, nil, :T_SPACE)),
                      s(:lvasgn, :result,
                        s(:send,
                          s(:const, nil, :ResponseCode), :new,
                          s(:lvar, :name),
                          s(:send, nil, :number))))),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :token), :symbol), :==,
                        s(:const, nil, :T_SPACE)),
                      s(:begin,
                        s(:send, nil, :shift_token),
                        s(:ivasgn, :@lex_state,
                          s(:const, nil, :EXPR_CTEXT)),
                        s(:lvasgn, :token,
                          s(:send, nil, :match,
                            s(:const, nil, :T_TEXT))),
                        s(:ivasgn, :@lex_state,
                          s(:const, nil, :EXPR_BEG)),
                        s(:lvasgn, :result,
                          s(:send,
                            s(:const, nil, :ResponseCode), :new,
                            s(:lvar, :name),
                            s(:send,
                              s(:lvar, :token), :value)))),
                      s(:lvasgn, :result,
                        s(:send,
                          s(:const, nil, :ResponseCode), :new,
                          s(:lvar, :name),
                          s(:nil)))))),
                s(:send, nil, :match,
                  s(:const, nil, :T_RBRA)),
                s(:ivasgn, :@lex_state,
                  s(:const, nil, :EXPR_RTEXT)),
                s(:return,
                  s(:lvar, :result)))),
            s(:def, :address_list,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))),
                  s(:begin,
                    s(:lvasgn, :result,
                      s(:array)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_LPAR)),
                    s(:while,
                      s(:true),
                      s(:begin,
                        s(:lvasgn, :token,
                          s(:send, nil, :lookahead)),
                        s(:case,
                          s(:send,
                            s(:lvar, :token), :symbol),
                          s(:when,
                            s(:const, nil, :T_RPAR),
                            s(:begin,
                              s(:send, nil, :shift_token),
                              s(:break))),
                          s(:when,
                            s(:const, nil, :T_SPACE),
                            s(:send, nil, :shift_token)), nil),
                        s(:send,
                          s(:lvar, :result), :push,
                          s(:send, nil, :address)))),
                    s(:return,
                      s(:lvar, :result)))))),
            s(:casgn, nil, :ADDRESS_REGEXP,
              s(:regexp,
                s(:str, "\\G(?# 1: NAME     )(?:NIL|\"((?:[^\\x80-\\xff\\x00\\r\\n\"\\\\]|\\\\[\"\\\\])*)\") (?# 2: ROUTE    )(?:NIL|\"((?:[^\\x80-\\xff\\x00\\r\\n\"\\\\]|\\\\[\"\\\\])*)\") (?# 3: MAILBOX  )(?:NIL|\"((?:[^\\x80-\\xff\\x00\\r\\n\"\\\\]|\\\\[\"\\\\])*)\") (?# 4: HOST     )(?:NIL|\"((?:[^\\x80-\\xff\\x00\\r\\n\"\\\\]|\\\\[\"\\\\])*)\")\\)"),
                s(:regopt, :i, :n))),
            s(:def, :address,
              s(:args),
              s(:begin,
                s(:send, nil, :match,
                  s(:const, nil, :T_LPAR)),
                s(:if,
                  s(:send,
                    s(:ivar, :@str), :index,
                    s(:const, nil, :ADDRESS_REGEXP),
                    s(:ivar, :@pos)),
                  s(:begin,
                    s(:ivasgn, :@pos,
                      s(:send,
                        s(:gvar, :$~), :end,
                        s(:int, 0))),
                    s(:lvasgn, :name,
                      s(:nth_ref, 1)),
                    s(:lvasgn, :route,
                      s(:nth_ref, 2)),
                    s(:lvasgn, :mailbox,
                      s(:nth_ref, 3)),
                    s(:lvasgn, :host,
                      s(:nth_ref, 4)),
                    s(:for,
                      s(:lvasgn, :s),
                      s(:array,
                        s(:lvar, :name),
                        s(:lvar, :route),
                        s(:lvar, :mailbox),
                        s(:lvar, :host)),
                      s(:if,
                        s(:lvar, :s),
                        s(:send,
                          s(:lvar, :s), :gsub!,
                          s(:regexp,
                            s(:str, "\\\\([\"\\\\])"),
                            s(:regopt, :n)),
                          s(:str, "\\1")), nil))),
                  s(:begin,
                    s(:lvasgn, :name,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :route,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :mailbox,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_SPACE)),
                    s(:lvasgn, :host,
                      s(:send, nil, :nstring)),
                    s(:send, nil, :match,
                      s(:const, nil, :T_RPAR)))),
                s(:return,
                  s(:send,
                    s(:const, nil, :Address), :new,
                    s(:lvar, :name),
                    s(:lvar, :route),
                    s(:lvar, :mailbox),
                    s(:lvar, :host))))),
            s(:casgn, nil, :FLAG_REGEXP,
              s(:regexp,
                s(:str, "(?# FLAG        )\\\\([^\\x80-\\xff(){ \\x00-\\x1f\\x7f%\"\\\\]+)|(?# ATOM        )([^\\x80-\\xff(){ \\x00-\\x1f\\x7f%*\"\\\\]+)"),
                s(:regopt, :n))),
            s(:def, :flag_list,
              s(:args),
              s(:if,
                s(:send,
                  s(:ivar, :@str), :index,
                  s(:regexp,
                    s(:str, "\\(([^)]*)\\)"),
                    s(:regopt, :i, :n)),
                  s(:ivar, :@pos)),
                s(:begin,
                  s(:ivasgn, :@pos,
                    s(:send,
                      s(:gvar, :$~), :end,
                      s(:int, 0))),
                  s(:return,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:nth_ref, 1), :scan,
                          s(:const, nil, :FLAG_REGEXP)), :collect),
                      s(:args,
                        s(:arg, :flag),
                        s(:arg, :atom)),
                      s(:if,
                        s(:lvar, :atom),
                        s(:lvar, :atom),
                        s(:begin,
                          s(:lvasgn, :symbol,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :flag), :capitalize), :untaint), :intern)),
                          s(:send,
                            s(:ivar, :@flag_symbols), :[]=,
                            s(:lvar, :symbol),
                            s(:true)),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:ivar, :@flag_symbols), :length), :>,
                              s(:send,
                                s(:const, nil, :IMAP), :max_flag_count)),
                            s(:send, nil, :raise,
                              s(:const, nil, :FlagCountError),
                              s(:str, "number of flag symbols exceeded")), nil),
                          s(:lvar, :symbol)))))),
                s(:send, nil, :parse_error,
                  s(:str, "invalid flag list")))),
            s(:def, :nstring,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))),
                  s(:return,
                    s(:send, nil, :string))))),
            s(:def, :astring,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send, nil, :string_token?,
                    s(:lvar, :token)),
                  s(:return,
                    s(:send, nil, :string)),
                  s(:return,
                    s(:send, nil, :atom))))),
            s(:def, :string,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))), nil),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_QUOTED),
                    s(:const, nil, :T_LITERAL))),
                s(:return,
                  s(:send,
                    s(:lvar, :token), :value)))),
            s(:casgn, nil, :STRING_TOKENS,
              s(:array,
                s(:const, nil, :T_QUOTED),
                s(:const, nil, :T_LITERAL),
                s(:const, nil, :T_NIL))),
            s(:def, :string_token?,
              s(:args,
                s(:arg, :token)),
              s(:return,
                s(:send,
                  s(:const, nil, :STRING_TOKENS), :include?,
                  s(:send,
                    s(:lvar, :token), :symbol)))),
            s(:def, :case_insensitive_string,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))), nil),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_QUOTED),
                    s(:const, nil, :T_LITERAL))),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :upcase)))),
            s(:def, :atom,
              s(:args),
              s(:begin,
                s(:lvasgn, :result,
                  s(:send,
                    s(:const, nil, :String), :new)),
                s(:while,
                  s(:true),
                  s(:begin,
                    s(:lvasgn, :token,
                      s(:send, nil, :lookahead)),
                    s(:if,
                      s(:send, nil, :atom_token?,
                        s(:lvar, :token)),
                      s(:begin,
                        s(:send,
                          s(:lvar, :result), :concat,
                          s(:send,
                            s(:lvar, :token), :value)),
                        s(:send, nil, :shift_token)),
                      s(:if,
                        s(:send,
                          s(:lvar, :result), :empty?),
                        s(:send, nil, :parse_error,
                          s(:str, "unexpected token %s"),
                          s(:send,
                            s(:lvar, :token), :symbol)),
                        s(:return,
                          s(:lvar, :result)))))))),
            s(:casgn, nil, :ATOM_TOKENS,
              s(:array,
                s(:const, nil, :T_ATOM),
                s(:const, nil, :T_NUMBER),
                s(:const, nil, :T_NIL),
                s(:const, nil, :T_LBRA),
                s(:const, nil, :T_RBRA),
                s(:const, nil, :T_PLUS))),
            s(:def, :atom_token?,
              s(:args,
                s(:arg, :token)),
              s(:return,
                s(:send,
                  s(:const, nil, :ATOM_TOKENS), :include?,
                  s(:send,
                    s(:lvar, :token), :symbol)))),
            s(:def, :number,
              s(:args),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :symbol), :==,
                    s(:const, nil, :T_NIL)),
                  s(:begin,
                    s(:send, nil, :shift_token),
                    s(:return,
                      s(:nil))), nil),
                s(:lvasgn, :token,
                  s(:send, nil, :match,
                    s(:const, nil, :T_NUMBER))),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:lvar, :token), :value), :to_i)))),
            s(:def, :nil_atom,
              s(:args),
              s(:begin,
                s(:send, nil, :match,
                  s(:const, nil, :T_NIL)),
                s(:return,
                  s(:nil)))),
            s(:def, :match,
              s(:args,
                s(:restarg, :args)),
              s(:begin,
                s(:lvasgn, :token,
                  s(:send, nil, :lookahead)),
                s(:if,
                  s(:send,
                    s(:lvar, :args), :include?,
                    s(:send,
                      s(:lvar, :token), :symbol)), nil,
                  s(:send, nil, :parse_error,
                    s(:str, "unexpected token %s (expected %s)"),
                    s(:send,
                      s(:send,
                        s(:lvar, :token), :symbol), :id2name),
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:lvar, :args), :collect),
                        s(:args,
                          s(:arg, :i)),
                        s(:send,
                          s(:lvar, :i), :id2name)), :join,
                      s(:str, " or ")))),
                s(:send, nil, :shift_token),
                s(:return,
                  s(:lvar, :token)))),
            s(:def, :lookahead,
              s(:args),
              s(:begin,
                s(:if,
                  s(:ivar, :@token), nil,
                  s(:ivasgn, :@token,
                    s(:send, nil, :next_token))),
                s(:return,
                  s(:ivar, :@token)))),
            s(:def, :shift_token,
              s(:args),
              s(:ivasgn, :@token,
                s(:nil))),
            s(:def, :next_token,
              s(:args),
              s(:case,
                s(:ivar, :@lex_state),
                s(:when,
                  s(:const, nil, :EXPR_BEG),
                  s(:if,
                    s(:send,
                      s(:ivar, :@str), :index,
                      s(:const, nil, :BEG_REGEXP),
                      s(:ivar, :@pos)),
                    s(:begin,
                      s(:ivasgn, :@pos,
                        s(:send,
                          s(:gvar, :$~), :end,
                          s(:int, 0))),
                      s(:if,
                        s(:nth_ref, 1),
                        s(:return,
                          s(:send,
                            s(:const, nil, :Token), :new,
                            s(:const, nil, :T_SPACE),
                            s(:back_ref, :$+))),
                        s(:if,
                          s(:nth_ref, 2),
                          s(:return,
                            s(:send,
                              s(:const, nil, :Token), :new,
                              s(:const, nil, :T_NIL),
                              s(:back_ref, :$+))),
                          s(:if,
                            s(:nth_ref, 3),
                            s(:return,
                              s(:send,
                                s(:const, nil, :Token), :new,
                                s(:const, nil, :T_NUMBER),
                                s(:back_ref, :$+))),
                            s(:if,
                              s(:nth_ref, 4),
                              s(:return,
                                s(:send,
                                  s(:const, nil, :Token), :new,
                                  s(:const, nil, :T_ATOM),
                                  s(:back_ref, :$+))),
                              s(:if,
                                s(:nth_ref, 5),
                                s(:return,
                                  s(:send,
                                    s(:const, nil, :Token), :new,
                                    s(:const, nil, :T_QUOTED),
                                    s(:send,
                                      s(:back_ref, :$+), :gsub,
                                      s(:regexp,
                                        s(:str, "\\\\([\"\\\\])"),
                                        s(:regopt, :n)),
                                      s(:str, "\\1")))),
                                s(:if,
                                  s(:nth_ref, 6),
                                  s(:return,
                                    s(:send,
                                      s(:const, nil, :Token), :new,
                                      s(:const, nil, :T_LPAR),
                                      s(:back_ref, :$+))),
                                  s(:if,
                                    s(:nth_ref, 7),
                                    s(:return,
                                      s(:send,
                                        s(:const, nil, :Token), :new,
                                        s(:const, nil, :T_RPAR),
                                        s(:back_ref, :$+))),
                                    s(:if,
                                      s(:nth_ref, 8),
                                      s(:return,
                                        s(:send,
                                          s(:const, nil, :Token), :new,
                                          s(:const, nil, :T_BSLASH),
                                          s(:back_ref, :$+))),
                                      s(:if,
                                        s(:nth_ref, 9),
                                        s(:return,
                                          s(:send,
                                            s(:const, nil, :Token), :new,
                                            s(:const, nil, :T_STAR),
                                            s(:back_ref, :$+))),
                                        s(:if,
                                          s(:nth_ref, 10),
                                          s(:return,
                                            s(:send,
                                              s(:const, nil, :Token), :new,
                                              s(:const, nil, :T_LBRA),
                                              s(:back_ref, :$+))),
                                          s(:if,
                                            s(:nth_ref, 11),
                                            s(:return,
                                              s(:send,
                                                s(:const, nil, :Token), :new,
                                                s(:const, nil, :T_RBRA),
                                                s(:back_ref, :$+))),
                                            s(:if,
                                              s(:nth_ref, 12),
                                              s(:begin,
                                                s(:lvasgn, :len,
                                                  s(:send,
                                                    s(:back_ref, :$+), :to_i)),
                                                s(:lvasgn, :val,
                                                  s(:send,
                                                    s(:ivar, :@str), :[],
                                                    s(:ivar, :@pos),
                                                    s(:lvar, :len))),
                                                s(:op_asgn,
                                                  s(:ivasgn, :@pos), :+,
                                                  s(:lvar, :len)),
                                                s(:return,
                                                  s(:send,
                                                    s(:const, nil, :Token), :new,
                                                    s(:const, nil, :T_LITERAL),
                                                    s(:lvar, :val)))),
                                              s(:if,
                                                s(:nth_ref, 13),
                                                s(:return,
                                                  s(:send,
                                                    s(:const, nil, :Token), :new,
                                                    s(:const, nil, :T_PLUS),
                                                    s(:back_ref, :$+))),
                                                s(:if,
                                                  s(:nth_ref, 14),
                                                  s(:return,
                                                    s(:send,
                                                      s(:const, nil, :Token), :new,
                                                      s(:const, nil, :T_PERCENT),
                                                      s(:back_ref, :$+))),
                                                  s(:if,
                                                    s(:nth_ref, 15),
                                                    s(:return,
                                                      s(:send,
                                                        s(:const, nil, :Token), :new,
                                                        s(:const, nil, :T_CRLF),
                                                        s(:back_ref, :$+))),
                                                    s(:if,
                                                      s(:nth_ref, 16),
                                                      s(:return,
                                                        s(:send,
                                                          s(:const, nil, :Token), :new,
                                                          s(:const, nil, :T_EOF),
                                                          s(:back_ref, :$+))),
                                                      s(:send, nil, :parse_error,
                                                        s(:str, "[Net::IMAP BUG] BEG_REGEXP is invalid"))))))))))))))))))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@str), :index,
                        s(:regexp,
                          s(:str, "\\S*"),
                          s(:regopt, :n)),
                        s(:ivar, :@pos)),
                      s(:send, nil, :parse_error,
                        s(:str, "unknown token - %s"),
                        s(:send,
                          s(:back_ref, :$&), :dump))))),
                s(:when,
                  s(:const, nil, :EXPR_DATA),
                  s(:if,
                    s(:send,
                      s(:ivar, :@str), :index,
                      s(:const, nil, :DATA_REGEXP),
                      s(:ivar, :@pos)),
                    s(:begin,
                      s(:ivasgn, :@pos,
                        s(:send,
                          s(:gvar, :$~), :end,
                          s(:int, 0))),
                      s(:if,
                        s(:nth_ref, 1),
                        s(:return,
                          s(:send,
                            s(:const, nil, :Token), :new,
                            s(:const, nil, :T_SPACE),
                            s(:back_ref, :$+))),
                        s(:if,
                          s(:nth_ref, 2),
                          s(:return,
                            s(:send,
                              s(:const, nil, :Token), :new,
                              s(:const, nil, :T_NIL),
                              s(:back_ref, :$+))),
                          s(:if,
                            s(:nth_ref, 3),
                            s(:return,
                              s(:send,
                                s(:const, nil, :Token), :new,
                                s(:const, nil, :T_NUMBER),
                                s(:back_ref, :$+))),
                            s(:if,
                              s(:nth_ref, 4),
                              s(:return,
                                s(:send,
                                  s(:const, nil, :Token), :new,
                                  s(:const, nil, :T_QUOTED),
                                  s(:send,
                                    s(:back_ref, :$+), :gsub,
                                    s(:regexp,
                                      s(:str, "\\\\([\"\\\\])"),
                                      s(:regopt, :n)),
                                    s(:str, "\\1")))),
                              s(:if,
                                s(:nth_ref, 5),
                                s(:begin,
                                  s(:lvasgn, :len,
                                    s(:send,
                                      s(:back_ref, :$+), :to_i)),
                                  s(:lvasgn, :val,
                                    s(:send,
                                      s(:ivar, :@str), :[],
                                      s(:ivar, :@pos),
                                      s(:lvar, :len))),
                                  s(:op_asgn,
                                    s(:ivasgn, :@pos), :+,
                                    s(:lvar, :len)),
                                  s(:return,
                                    s(:send,
                                      s(:const, nil, :Token), :new,
                                      s(:const, nil, :T_LITERAL),
                                      s(:lvar, :val)))),
                                s(:if,
                                  s(:nth_ref, 6),
                                  s(:return,
                                    s(:send,
                                      s(:const, nil, :Token), :new,
                                      s(:const, nil, :T_LPAR),
                                      s(:back_ref, :$+))),
                                  s(:if,
                                    s(:nth_ref, 7),
                                    s(:return,
                                      s(:send,
                                        s(:const, nil, :Token), :new,
                                        s(:const, nil, :T_RPAR),
                                        s(:back_ref, :$+))),
                                    s(:send, nil, :parse_error,
                                      s(:str, "[Net::IMAP BUG] DATA_REGEXP is invalid")))))))))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@str), :index,
                        s(:regexp,
                          s(:str, "\\S*"),
                          s(:regopt, :n)),
                        s(:ivar, :@pos)),
                      s(:send, nil, :parse_error,
                        s(:str, "unknown token - %s"),
                        s(:send,
                          s(:back_ref, :$&), :dump))))),
                s(:when,
                  s(:const, nil, :EXPR_TEXT),
                  s(:if,
                    s(:send,
                      s(:ivar, :@str), :index,
                      s(:const, nil, :TEXT_REGEXP),
                      s(:ivar, :@pos)),
                    s(:begin,
                      s(:ivasgn, :@pos,
                        s(:send,
                          s(:gvar, :$~), :end,
                          s(:int, 0))),
                      s(:if,
                        s(:nth_ref, 1),
                        s(:return,
                          s(:send,
                            s(:const, nil, :Token), :new,
                            s(:const, nil, :T_TEXT),
                            s(:back_ref, :$+))),
                        s(:send, nil, :parse_error,
                          s(:str, "[Net::IMAP BUG] TEXT_REGEXP is invalid")))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@str), :index,
                        s(:regexp,
                          s(:str, "\\S*"),
                          s(:regopt, :n)),
                        s(:ivar, :@pos)),
                      s(:send, nil, :parse_error,
                        s(:str, "unknown token - %s"),
                        s(:send,
                          s(:back_ref, :$&), :dump))))),
                s(:when,
                  s(:const, nil, :EXPR_RTEXT),
                  s(:if,
                    s(:send,
                      s(:ivar, :@str), :index,
                      s(:const, nil, :RTEXT_REGEXP),
                      s(:ivar, :@pos)),
                    s(:begin,
                      s(:ivasgn, :@pos,
                        s(:send,
                          s(:gvar, :$~), :end,
                          s(:int, 0))),
                      s(:if,
                        s(:nth_ref, 1),
                        s(:return,
                          s(:send,
                            s(:const, nil, :Token), :new,
                            s(:const, nil, :T_LBRA),
                            s(:back_ref, :$+))),
                        s(:if,
                          s(:nth_ref, 2),
                          s(:return,
                            s(:send,
                              s(:const, nil, :Token), :new,
                              s(:const, nil, :T_TEXT),
                              s(:back_ref, :$+))),
                          s(:send, nil, :parse_error,
                            s(:str, "[Net::IMAP BUG] RTEXT_REGEXP is invalid"))))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@str), :index,
                        s(:regexp,
                          s(:str, "\\S*"),
                          s(:regopt, :n)),
                        s(:ivar, :@pos)),
                      s(:send, nil, :parse_error,
                        s(:str, "unknown token - %s"),
                        s(:send,
                          s(:back_ref, :$&), :dump))))),
                s(:when,
                  s(:const, nil, :EXPR_CTEXT),
                  s(:if,
                    s(:send,
                      s(:ivar, :@str), :index,
                      s(:const, nil, :CTEXT_REGEXP),
                      s(:ivar, :@pos)),
                    s(:begin,
                      s(:ivasgn, :@pos,
                        s(:send,
                          s(:gvar, :$~), :end,
                          s(:int, 0))),
                      s(:if,
                        s(:nth_ref, 1),
                        s(:return,
                          s(:send,
                            s(:const, nil, :Token), :new,
                            s(:const, nil, :T_TEXT),
                            s(:back_ref, :$+))),
                        s(:send, nil, :parse_error,
                          s(:str, "[Net::IMAP BUG] CTEXT_REGEXP is invalid")))),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@str), :index,
                        s(:regexp,
                          s(:str, "\\S*"),
                          s(:regopt, :n)),
                        s(:ivar, :@pos)),
                      s(:send, nil, :parse_error,
                        s(:str, "unknown token - %s"),
                        s(:send,
                          s(:back_ref, :$&), :dump))))),
                s(:send, nil, :parse_error,
                  s(:str, "invalid @lex_state - %s"),
                  s(:send,
                    s(:ivar, :@lex_state), :inspect)))),
            s(:def, :parse_error,
              s(:args,
                s(:arg, :fmt),
                s(:restarg, :args)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:const, nil, :IMAP), :debug),
                  s(:begin,
                    s(:send,
                      s(:gvar, :$stderr), :printf,
                      s(:str, "@str: %s\n"),
                      s(:send,
                        s(:ivar, :@str), :dump)),
                    s(:send,
                      s(:gvar, :$stderr), :printf,
                      s(:str, "@pos: %d\n"),
                      s(:ivar, :@pos)),
                    s(:send,
                      s(:gvar, :$stderr), :printf,
                      s(:str, "@lex_state: %s\n"),
                      s(:ivar, :@lex_state)),
                    s(:if,
                      s(:ivar, :@token),
                      s(:begin,
                        s(:send,
                          s(:gvar, :$stderr), :printf,
                          s(:str, "@token.symbol: %s\n"),
                          s(:send,
                            s(:ivar, :@token), :symbol)),
                        s(:send,
                          s(:gvar, :$stderr), :printf,
                          s(:str, "@token.value: %s\n"),
                          s(:send,
                            s(:send,
                              s(:ivar, :@token), :value), :inspect))), nil)), nil),
                s(:send, nil, :raise,
                  s(:const, nil, :ResponseParseError),
                  s(:send, nil, :format,
                    s(:lvar, :fmt),
                    s(:splat,
                      s(:lvar, :args)))))))),
        s(:class,
          s(:const, nil, :LoginAuthenticator), nil,
          s(:begin,
            s(:def, :process,
              s(:args,
                s(:arg, :data)),
              s(:case,
                s(:ivar, :@state),
                s(:when,
                  s(:const, nil, :STATE_USER),
                  s(:begin,
                    s(:ivasgn, :@state,
                      s(:const, nil, :STATE_PASSWORD)),
                    s(:return,
                      s(:ivar, :@user)))),
                s(:when,
                  s(:const, nil, :STATE_PASSWORD),
                  s(:return,
                    s(:ivar, :@password))), nil)),
            s(:send, nil, :private),
            s(:casgn, nil, :STATE_USER,
              s(:sym, :USER)),
            s(:casgn, nil, :STATE_PASSWORD,
              s(:sym, :PASSWORD)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :user),
                s(:arg, :password)),
              s(:begin,
                s(:ivasgn, :@user,
                  s(:lvar, :user)),
                s(:ivasgn, :@password,
                  s(:lvar, :password)),
                s(:ivasgn, :@state,
                  s(:const, nil, :STATE_USER)))))),
        s(:send, nil, :add_authenticator,
          s(:str, "LOGIN"),
          s(:const, nil, :LoginAuthenticator)),
        s(:class,
          s(:const, nil, :PlainAuthenticator), nil,
          s(:begin,
            s(:def, :process,
              s(:args,
                s(:arg, :data)),
              s(:return,
                s(:dstr,
                  s(:str, "\u0000"),
                  s(:begin,
                    s(:ivar, :@user)),
                  s(:str, "\u0000"),
                  s(:begin,
                    s(:ivar, :@password))))),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :user),
                s(:arg, :password)),
              s(:begin,
                s(:ivasgn, :@user,
                  s(:lvar, :user)),
                s(:ivasgn, :@password,
                  s(:lvar, :password)))))),
        s(:send, nil, :add_authenticator,
          s(:str, "PLAIN"),
          s(:const, nil, :PlainAuthenticator)),
        s(:class,
          s(:const, nil, :CramMD5Authenticator), nil,
          s(:begin,
            s(:def, :process,
              s(:args,
                s(:arg, :challenge)),
              s(:begin,
                s(:lvasgn, :digest,
                  s(:send, nil, :hmac_md5,
                    s(:lvar, :challenge),
                    s(:ivar, :@password))),
                s(:return,
                  s(:send,
                    s(:send,
                      s(:ivar, :@user), :+,
                      s(:str, " ")), :+,
                    s(:lvar, :digest))))),
            s(:send, nil, :private),
            s(:def, :initialize,
              s(:args,
                s(:arg, :user),
                s(:arg, :password)),
              s(:begin,
                s(:ivasgn, :@user,
                  s(:lvar, :user)),
                s(:ivasgn, :@password,
                  s(:lvar, :password)))),
            s(:def, :hmac_md5,
              s(:args,
                s(:arg, :text),
                s(:arg, :key)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :key), :length), :>,
                    s(:int, 64)),
                  s(:lvasgn, :key,
                    s(:send,
                      s(:const,
                        s(:const, nil, :Digest), :MD5), :digest,
                      s(:lvar, :key))), nil),
                s(:lvasgn, :k_ipad,
                  s(:send,
                    s(:lvar, :key), :+,
                    s(:send,
                      s(:str, "\u0000"), :*,
                      s(:begin,
                        s(:send,
                          s(:int, 64), :-,
                          s(:send,
                            s(:lvar, :key), :length)))))),
                s(:lvasgn, :k_opad,
                  s(:send,
                    s(:lvar, :key), :+,
                    s(:send,
                      s(:str, "\u0000"), :*,
                      s(:begin,
                        s(:send,
                          s(:int, 64), :-,
                          s(:send,
                            s(:lvar, :key), :length)))))),
                s(:for,
                  s(:lvasgn, :i),
                  s(:irange,
                    s(:int, 0),
                    s(:int, 63)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :k_ipad), :[]=,
                      s(:lvar, :i),
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :k_ipad), :[],
                                s(:lvar, :i)), :ord), :^,
                            s(:int, 54))), :chr)),
                    s(:send,
                      s(:lvar, :k_opad), :[]=,
                      s(:lvar, :i),
                      s(:send,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :k_opad), :[],
                                s(:lvar, :i)), :ord), :^,
                            s(:int, 92))), :chr)))),
                s(:lvasgn, :digest,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :MD5), :digest,
                    s(:send,
                      s(:lvar, :k_ipad), :+,
                      s(:lvar, :text)))),
                s(:return,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :MD5), :hexdigest,
                    s(:send,
                      s(:lvar, :k_opad), :+,
                      s(:lvar, :digest)))))))),
        s(:send, nil, :add_authenticator,
          s(:str, "CRAM-MD5"),
          s(:const, nil, :CramMD5Authenticator)),
        s(:class,
          s(:const, nil, :DigestMD5Authenticator), nil,
          s(:begin,
            s(:def, :process,
              s(:args,
                s(:arg, :challenge)),
              s(:case,
                s(:ivar, :@stage),
                s(:when,
                  s(:const, nil, :STAGE_ONE),
                  s(:begin,
                    s(:ivasgn, :@stage,
                      s(:const, nil, :STAGE_TWO)),
                    s(:lvasgn, :sparams,
                      s(:hash)),
                    s(:lvasgn, :c,
                      s(:send,
                        s(:const, nil, :StringScanner), :new,
                        s(:lvar, :challenge))),
                    s(:while,
                      s(:send,
                        s(:lvar, :c), :scan,
                        s(:regexp,
                          s(:str, "(?:\\s*,)?\\s*(\\w+)=(\"(?:[^\\\\\"]+|\\\\.)*\"|[^,]+)\\s*"),
                          s(:regopt))),
                      s(:begin,
                        s(:masgn,
                          s(:mlhs,
                            s(:lvasgn, :k),
                            s(:lvasgn, :v)),
                          s(:array,
                            s(:send,
                              s(:lvar, :c), :[],
                              s(:int, 1)),
                            s(:send,
                              s(:lvar, :c), :[],
                              s(:int, 2)))),
                        s(:if,
                          s(:send,
                            s(:lvar, :v), :=~,
                            s(:regexp,
                              s(:str, "^\"(.*)\"$"),
                              s(:regopt))),
                          s(:begin,
                            s(:lvasgn, :v,
                              s(:nth_ref, 1)),
                            s(:if,
                              s(:send,
                                s(:lvar, :v), :=~,
                                s(:regexp,
                                  s(:str, ","),
                                  s(:regopt))),
                              s(:lvasgn, :v,
                                s(:send,
                                  s(:lvar, :v), :split,
                                  s(:str, ","))), nil)), nil),
                        s(:send,
                          s(:lvar, :sparams), :[]=,
                          s(:lvar, :k),
                          s(:lvar, :v)))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:lvar, :c), :rest), :size), :==,
                        s(:int, 0)), nil,
                      s(:send, nil, :raise,
                        s(:const, nil, :DataFormatError),
                        s(:dstr,
                          s(:str, "Bad Challenge: '"),
                          s(:begin,
                            s(:lvar, :challenge)),
                          s(:str, "'")))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :sparams), :[],
                          s(:str, "qop")), :include?,
                        s(:str, "auth")), nil,
                      s(:send, nil, :raise,
                        s(:const, nil, :Error),
                        s(:dstr,
                          s(:str, "Server does not support auth (qop = "),
                          s(:begin,
                            s(:send,
                              s(:send,
                                s(:lvar, :sparams), :[],
                                s(:str, "qop")), :join,
                              s(:str, ","))),
                          s(:str, ")")))),
                    s(:lvasgn, :response,
                      s(:hash,
                        s(:pair,
                          s(:sym, :nonce),
                          s(:send,
                            s(:lvar, :sparams), :[],
                            s(:str, "nonce"))),
                        s(:pair,
                          s(:sym, :username),
                          s(:ivar, :@user)),
                        s(:pair,
                          s(:sym, :realm),
                          s(:send,
                            s(:lvar, :sparams), :[],
                            s(:str, "realm"))),
                        s(:pair,
                          s(:sym, :cnonce),
                          s(:send,
                            s(:const,
                              s(:const, nil, :Digest), :MD5), :hexdigest,
                            s(:send,
                              s(:str, "%.15f:%.15f:%d"), :%,
                              s(:array,
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :Time), :now), :to_f),
                                s(:send, nil, :rand),
                                s(:send,
                                  s(:send,
                                    s(:const, nil, :Process), :pid), :to_s))))),
                        s(:pair,
                          s(:sym, :"digest-uri"),
                          s(:send,
                            s(:str, "imap/"), :+,
                            s(:send,
                              s(:lvar, :sparams), :[],
                              s(:str, "realm")))),
                        s(:pair,
                          s(:sym, :qop),
                          s(:str, "auth")),
                        s(:pair,
                          s(:sym, :maxbuf),
                          s(:int, 65535)),
                        s(:pair,
                          s(:sym, :nc),
                          s(:send,
                            s(:str, "%08d"), :%,
                            s(:send, nil, :nc,
                              s(:send,
                                s(:lvar, :sparams), :[],
                                s(:str, "nonce"))))),
                        s(:pair,
                          s(:sym, :charset),
                          s(:send,
                            s(:lvar, :sparams), :[],
                            s(:str, "charset"))))),
                    s(:if,
                      s(:send,
                        s(:ivar, :@authname), :nil?), nil,
                      s(:send,
                        s(:lvar, :response), :[]=,
                        s(:sym, :authzid),
                        s(:ivar, :@authname))),
                    s(:lvasgn, :a0,
                      s(:send,
                        s(:const,
                          s(:const, nil, :Digest), :MD5), :digest,
                        s(:send,
                          s(:array,
                            s(:send,
                              s(:lvar, :response), :values_at,
                              s(:sym, :username),
                              s(:sym, :realm)),
                            s(:ivar, :@password)), :join,
                          s(:str, ":")))),
                    s(:lvasgn, :a1,
                      s(:send,
                        s(:array,
                          s(:lvar, :a0),
                          s(:send,
                            s(:lvar, :response), :values_at,
                            s(:sym, :nonce),
                            s(:sym, :cnonce))), :join,
                        s(:str, ":"))),
                    s(:if,
                      s(:send,
                        s(:send,
                          s(:lvar, :response), :[],
                          s(:sym, :authzid)), :nil?), nil,
                      s(:send,
                        s(:lvar, :a1), :<<,
                        s(:send,
                          s(:str, ":"), :+,
                          s(:send,
                            s(:lvar, :response), :[],
                            s(:sym, :authzid))))),
                    s(:lvasgn, :a2,
                      s(:send,
                        s(:str, "AUTHENTICATE:"), :+,
                        s(:send,
                          s(:lvar, :response), :[],
                          s(:sym, :"digest-uri")))),
                    s(:if,
                      s(:and,
                        s(:send,
                          s(:lvar, :response), :[],
                          s(:sym, :qop)),
                        s(:send,
                          s(:send,
                            s(:lvar, :response), :[],
                            s(:sym, :qop)), :=~,
                          s(:regexp,
                            s(:str, "^auth-(?:conf|int)$"),
                            s(:regopt)))),
                      s(:send,
                        s(:lvar, :a2), :<<,
                        s(:str, ":00000000000000000000000000000000")), nil),
                    s(:send,
                      s(:lvar, :response), :[]=,
                      s(:sym, :response),
                      s(:send,
                        s(:const,
                          s(:const, nil, :Digest), :MD5), :hexdigest,
                        s(:send,
                          s(:array,
                            s(:send,
                              s(:const,
                                s(:const, nil, :Digest), :MD5), :hexdigest,
                              s(:lvar, :a1)),
                            s(:send,
                              s(:lvar, :response), :values_at,
                              s(:sym, :nonce),
                              s(:sym, :nc),
                              s(:sym, :cnonce),
                              s(:sym, :qop)),
                            s(:send,
                              s(:const,
                                s(:const, nil, :Digest), :MD5), :hexdigest,
                              s(:lvar, :a2))), :join,
                          s(:str, ":")))),
                    s(:return,
                      s(:send,
                        s(:block,
                          s(:send,
                            s(:send,
                              s(:lvar, :response), :keys), :map),
                          s(:args,
                            s(:arg, :key)),
                          s(:send, nil, :qdval,
                            s(:send,
                              s(:lvar, :key), :to_s),
                            s(:send,
                              s(:lvar, :response), :[],
                              s(:lvar, :key)))), :join,
                        s(:str, ","))))),
                s(:when,
                  s(:const, nil, :STAGE_TWO),
                  s(:begin,
                    s(:ivasgn, :@stage,
                      s(:nil)),
                    s(:if,
                      s(:send,
                        s(:lvar, :challenge), :=~,
                        s(:regexp,
                          s(:str, "rspauth="),
                          s(:regopt))),
                      s(:return,
                        s(:str, "")),
                      s(:send, nil, :raise,
                        s(:const, nil, :ResponseParseError),
                        s(:lvar, :challenge))))),
                s(:send, nil, :raise,
                  s(:const, nil, :ResponseParseError),
                  s(:lvar, :challenge)))),
            s(:def, :initialize,
              s(:args,
                s(:arg, :user),
                s(:arg, :password),
                s(:optarg, :authname,
                  s(:nil))),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:ivasgn, :@user),
                    s(:ivasgn, :@password),
                    s(:ivasgn, :@authname)),
                  s(:array,
                    s(:lvar, :user),
                    s(:lvar, :password),
                    s(:lvar, :authname))),
                s(:masgn,
                  s(:mlhs,
                    s(:ivasgn, :@nc),
                    s(:ivasgn, :@stage)),
                  s(:array,
                    s(:hash),
                    s(:const, nil, :STAGE_ONE))))),
            s(:send, nil, :private),
            s(:casgn, nil, :STAGE_ONE,
              s(:sym, :stage_one)),
            s(:casgn, nil, :STAGE_TWO,
              s(:sym, :stage_two)),
            s(:def, :nc,
              s(:args,
                s(:arg, :nonce)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:ivar, :@nc), :has_key?,
                    s(:lvar, :nonce)),
                  s(:send,
                    s(:ivar, :@nc), :[]=,
                    s(:lvar, :nonce),
                    s(:send,
                      s(:send,
                        s(:ivar, :@nc), :[],
                        s(:lvar, :nonce)), :+,
                      s(:int, 1))),
                  s(:send,
                    s(:ivar, :@nc), :[]=,
                    s(:lvar, :nonce),
                    s(:int, 1))),
                s(:return,
                  s(:send,
                    s(:ivar, :@nc), :[],
                    s(:lvar, :nonce))))),
            s(:def, :qdval,
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :k), :nil?),
                    s(:send,
                      s(:lvar, :v), :nil?)),
                  s(:return), nil),
                s(:if,
                  s(:send,
                    s(:array,
                      s(:str, "username"),
                      s(:str, "authzid"),
                      s(:str, "realm"),
                      s(:str, "nonce"),
                      s(:str, "cnonce"),
                      s(:str, "digest-uri"),
                      s(:str, "qop")), :include?,
                    s(:lvar, :k)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :v), :gsub!,
                      s(:regexp,
                        s(:str, "([\\\\\"])"),
                        s(:regopt)),
                      s(:str, "\\\u0001")),
                    s(:return,
                      s(:send,
                        s(:str, "%s=\"%s\""), :%,
                        s(:array,
                          s(:lvar, :k),
                          s(:lvar, :v))))),
                  s(:return,
                    s(:send,
                      s(:str, "%s=%s"), :%,
                      s(:array,
                        s(:lvar, :k),
                        s(:lvar, :v))))))))),
        s(:send, nil, :add_authenticator,
          s(:str, "DIGEST-MD5"),
          s(:const, nil, :DigestMD5Authenticator)),
        s(:class,
          s(:const, nil, :Error),
          s(:const, nil, :StandardError), nil),
        s(:class,
          s(:const, nil, :DataFormatError),
          s(:const, nil, :Error), nil),
        s(:class,
          s(:const, nil, :ResponseParseError),
          s(:const, nil, :Error), nil),
        s(:class,
          s(:const, nil, :ResponseError),
          s(:const, nil, :Error),
          s(:begin,
            s(:send, nil, :attr_accessor,
              s(:sym, :response)),
            s(:def, :initialize,
              s(:args,
                s(:arg, :response)),
              s(:begin,
                s(:ivasgn, :@response,
                  s(:lvar, :response)),
                s(:super,
                  s(:send,
                    s(:send,
                      s(:ivar, :@response), :data), :text)))))),
        s(:class,
          s(:const, nil, :NoResponseError),
          s(:const, nil, :ResponseError), nil),
        s(:class,
          s(:const, nil, :BadResponseError),
          s(:const, nil, :ResponseError), nil),
        s(:class,
          s(:const, nil, :ByeResponseError),
          s(:const, nil, :ResponseError), nil),
        s(:class,
          s(:const, nil, :FlagCountError),
          s(:const, nil, :Error), nil)))))
