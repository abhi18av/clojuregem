s(:begin,
  s(:class,
    s(:const, nil, :OptionParser), nil,
    s(:begin,
      s(:casgn, nil, :NoArgument,
        s(:send,
          s(:array,
            s(:casgn, nil, :NO_ARGUMENT,
              s(:sym, :NONE)),
            s(:nil)), :freeze)),
      s(:casgn, nil, :RequiredArgument,
        s(:send,
          s(:array,
            s(:casgn, nil, :REQUIRED_ARGUMENT,
              s(:sym, :REQUIRED)),
            s(:true)), :freeze)),
      s(:casgn, nil, :OptionalArgument,
        s(:send,
          s(:array,
            s(:casgn, nil, :OPTIONAL_ARGUMENT,
              s(:sym, :OPTIONAL)),
            s(:false)), :freeze)),
      s(:module,
        s(:const, nil, :Completion),
        s(:begin,
          s(:defs,
            s(:self), :regexp,
            s(:args,
              s(:arg, :key),
              s(:arg, :icase)),
            s(:send,
              s(:const, nil, :Regexp), :new,
              s(:send,
                s(:str, "\\A"), :+,
                s(:send,
                  s(:send,
                    s(:const, nil, :Regexp), :quote,
                    s(:lvar, :key)), :gsub,
                  s(:regexp,
                    s(:str, "\\w+\\b"),
                    s(:regopt)),
                  s(:str, "\\&\\w*"))),
              s(:lvar, :icase))),
          s(:defs,
            s(:self), :candidate,
            s(:args,
              s(:arg, :key),
              s(:optarg, :icase,
                s(:false)),
              s(:optarg, :pat,
                s(:nil)),
              s(:blockarg, :block)),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :pat),
                s(:send,
                  s(:const, nil, :Completion), :regexp,
                  s(:lvar, :key),
                  s(:lvar, :icase))),
              s(:lvasgn, :candidates,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :block), :call),
                s(:args,
                  s(:arg, :k),
                  s(:restarg, :v)),
                s(:begin,
                  s(:or,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:const, nil, :Regexp), :===,
                          s(:lvar, :k)),
                        s(:begin,
                          s(:lvasgn, :kn,
                            s(:send,
                              s(:str, ""), :freeze)),
                          s(:send,
                            s(:lvar, :k), :===,
                            s(:lvar, :key))),
                        s(:begin,
                          s(:lvasgn, :kn,
                            s(:if,
                              s(:defined?,
                                s(:send,
                                  s(:lvar, :k), :id2name)),
                              s(:send,
                                s(:lvar, :k), :id2name),
                              s(:lvar, :k))),
                          s(:send,
                            s(:lvar, :pat), :===,
                            s(:lvar, :kn))))),
                    s(:next)),
                  s(:if,
                    s(:send,
                      s(:lvar, :v), :empty?),
                    s(:send,
                      s(:lvar, :v), :<<,
                      s(:lvar, :k)), nil),
                  s(:send,
                    s(:lvar, :candidates), :<<,
                    s(:array,
                      s(:lvar, :k),
                      s(:lvar, :v),
                      s(:lvar, :kn))))),
              s(:lvar, :candidates))),
          s(:def, :candidate,
            s(:args,
              s(:arg, :key),
              s(:optarg, :icase,
                s(:false)),
              s(:optarg, :pat,
                s(:nil))),
            s(:send,
              s(:const, nil, :Completion), :candidate,
              s(:lvar, :key),
              s(:lvar, :icase),
              s(:lvar, :pat),
              s(:block_pass,
                s(:send, nil, :method,
                  s(:sym, :each))))),
          s(:send, nil, :public),
          s(:def, :complete,
            s(:args,
              s(:arg, :key),
              s(:optarg, :icase,
                s(:false)),
              s(:optarg, :pat,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :candidates,
                s(:block,
                  s(:send,
                    s(:send, nil, :candidate,
                      s(:lvar, :key),
                      s(:lvar, :icase),
                      s(:lvar, :pat),
                      s(:block_pass,
                        s(:send, nil, :method,
                          s(:sym, :each)))), :sort_by),
                  s(:args,
                    s(:arg, :k),
                    s(:arg, :v),
                    s(:arg, :kn)),
                  s(:send,
                    s(:lvar, :kn), :size))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :candidates), :size), :==,
                  s(:int, 1)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :canon),
                    s(:lvasgn, :sw),
                    s(:splat)),
                  s(:send,
                    s(:lvar, :candidates), :[],
                    s(:int, 0))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :candidates), :size), :>,
                    s(:int, 1)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :canon),
                        s(:lvasgn, :sw),
                        s(:lvasgn, :cn)),
                      s(:send,
                        s(:lvar, :candidates), :shift)),
                    s(:block,
                      s(:send,
                        s(:lvar, :candidates), :each),
                      s(:args,
                        s(:arg, :k),
                        s(:arg, :v),
                        s(:arg, :kn)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :sw), :==,
                            s(:lvar, :v)),
                          s(:next), nil),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:const, nil, :String), :===,
                              s(:lvar, :cn)),
                            s(:send,
                              s(:const, nil, :String), :===,
                              s(:lvar, :kn))),
                          s(:if,
                            s(:send,
                              s(:lvar, :cn), :rindex,
                              s(:lvar, :kn),
                              s(:int, 0)),
                            s(:begin,
                              s(:masgn,
                                s(:mlhs,
                                  s(:lvasgn, :canon),
                                  s(:lvasgn, :sw),
                                  s(:lvasgn, :cn)),
                                s(:array,
                                  s(:lvar, :k),
                                  s(:lvar, :v),
                                  s(:lvar, :kn))),
                              s(:next)),
                            s(:if,
                              s(:send,
                                s(:lvar, :kn), :rindex,
                                s(:lvar, :cn),
                                s(:int, 0)),
                              s(:next), nil)), nil),
                        s(:send, nil, :throw,
                          s(:sym, :ambiguous),
                          s(:lvar, :key))))), nil)),
              s(:if,
                s(:lvar, :canon),
                s(:begin,
                  s(:or,
                    s(:send, nil, :block_given?),
                    s(:return,
                      s(:lvar, :key),
                      s(:splat,
                        s(:lvar, :sw)))),
                  s(:yield,
                    s(:lvar, :key),
                    s(:splat,
                      s(:lvar, :sw)))), nil))),
          s(:def, :convert,
            s(:args,
              s(:optarg, :opt,
                s(:nil)),
              s(:optarg, :val,
                s(:nil)),
              s(:restarg)),
            s(:lvar, :val)))),
      s(:class,
        s(:const, nil, :OptionMap),
        s(:const, nil, :Hash),
        s(:send, nil, :include,
          s(:const, nil, :Completion))),
      s(:class,
        s(:const, nil, :Switch), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :pattern),
            s(:sym, :conv),
            s(:sym, :short),
            s(:sym, :long),
            s(:sym, :arg),
            s(:sym, :desc),
            s(:sym, :block)),
          s(:defs,
            s(:self), :guess,
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:case,
                s(:lvar, :arg),
                s(:when,
                  s(:str, ""),
                  s(:lvasgn, :t,
                    s(:self))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\A=?\\["),
                    s(:regopt)),
                  s(:lvasgn, :t,
                    s(:const,
                      s(:const, nil, :Switch), :OptionalArgument))),
                s(:when,
                  s(:regexp,
                    s(:str, "\\A\\s+\\["),
                    s(:regopt)),
                  s(:lvasgn, :t,
                    s(:const,
                      s(:const, nil, :Switch), :PlacedArgument))),
                s(:lvasgn, :t,
                  s(:const,
                    s(:const, nil, :Switch), :RequiredArgument))),
              s(:or,
                s(:send,
                  s(:self), :>=,
                  s(:lvar, :t)),
                s(:send, nil, :incompatible_argument_styles,
                  s(:lvar, :arg),
                  s(:lvar, :t))),
              s(:lvar, :t))),
          s(:defs,
            s(:self), :incompatible_argument_styles,
            s(:args,
              s(:arg, :arg),
              s(:arg, :t)),
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:begin,
                  s(:lvar, :arg)),
                s(:str, ": incompatible argument styles\n  "),
                s(:begin,
                  s(:self)),
                s(:str, ", "),
                s(:begin,
                  s(:lvar, :t))),
              s(:send,
                s(:const, nil, :ParseError), :filter_backtrace,
                s(:send, nil, :caller,
                  s(:int, 2))))),
          s(:defs,
            s(:self), :pattern,
            s(:args),
            s(:const, nil, :NilClass)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :pattern,
                s(:nil)),
              s(:optarg, :conv,
                s(:nil)),
              s(:optarg, :short,
                s(:nil)),
              s(:optarg, :long,
                s(:nil)),
              s(:optarg, :arg,
                s(:nil)),
              s(:optarg, :desc,
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:lvar, :short),
                      s(:lvar, :long)),
                    s(:array), nil))),
              s(:optarg, :block,
                s(:send,
                  s(:const, nil, :Proc), :new))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Array), :===,
                  s(:lvar, :pattern)),
                s(:send, nil, :raise), nil),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@pattern),
                  s(:ivasgn, :@conv),
                  s(:ivasgn, :@short),
                  s(:ivasgn, :@long),
                  s(:ivasgn, :@arg),
                  s(:ivasgn, :@desc),
                  s(:ivasgn, :@block)),
                s(:array,
                  s(:lvar, :pattern),
                  s(:lvar, :conv),
                  s(:lvar, :short),
                  s(:lvar, :long),
                  s(:lvar, :arg),
                  s(:lvar, :desc),
                  s(:lvar, :block))))),
          s(:def, :parse_arg,
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:or,
                s(:send, nil, :pattern),
                s(:return,
                  s(:nil),
                  s(:array,
                    s(:lvar, :arg)))),
              s(:if,
                s(:lvasgn, :m,
                  s(:send,
                    s(:send, nil, :pattern), :match,
                    s(:lvar, :arg))), nil,
                s(:begin,
                  s(:yield,
                    s(:const, nil, :InvalidArgument),
                    s(:lvar, :arg)),
                  s(:return,
                    s(:lvar, :arg),
                    s(:array)))),
              s(:if,
                s(:send,
                  s(:const, nil, :String), :===,
                  s(:lvar, :m)),
                s(:lvasgn, :m,
                  s(:array,
                    s(:lvasgn, :s,
                      s(:lvar, :m)))),
                s(:begin,
                  s(:lvasgn, :m,
                    s(:send,
                      s(:lvar, :m), :to_a)),
                  s(:lvasgn, :s,
                    s(:send,
                      s(:lvar, :m), :[],
                      s(:int, 0))),
                  s(:if,
                    s(:send,
                      s(:const, nil, :String), :===,
                      s(:lvar, :s)), nil,
                    s(:return,
                      s(:nil),
                      s(:lvar, :m))))),
              s(:if,
                s(:send,
                  s(:lvar, :arg), :rindex,
                  s(:lvar, :s),
                  s(:int, 0)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidArgument),
                  s(:lvar, :arg))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :length), :==,
                  s(:send,
                    s(:lvar, :arg), :length)),
                s(:return,
                  s(:nil),
                  s(:lvar, :m)), nil),
              s(:yield,
                s(:const, nil, :InvalidArgument),
                s(:lvar, :arg)),
              s(:return,
                s(:send,
                  s(:lvar, :arg), :[],
                  s(:irange,
                    s(:send,
                      s(:lvar, :s), :length),
                    s(:int, -1))),
                s(:lvar, :m)))),
          s(:send, nil, :private,
            s(:sym, :parse_arg)),
          s(:def, :conv_arg,
            s(:args,
              s(:arg, :arg),
              s(:optarg, :val,
                s(:array))),
            s(:begin,
              s(:if,
                s(:send, nil, :conv),
                s(:lvasgn, :val,
                  s(:send,
                    s(:send, nil, :conv), :call,
                    s(:splat,
                      s(:lvar, :val)))),
                s(:lvasgn, :val,
                  s(:send,
                    s(:block,
                      s(:send, nil, :proc),
                      s(:args,
                        s(:arg, :v)),
                      s(:lvar, :v)), :call,
                    s(:splat,
                      s(:lvar, :val))))),
              s(:return,
                s(:lvar, :arg),
                s(:send, nil, :block),
                s(:lvar, :val)))),
          s(:send, nil, :private,
            s(:sym, :conv_arg)),
          s(:def, :summarize,
            s(:args,
              s(:optarg, :sdone,
                s(:array)),
              s(:optarg, :ldone,
                s(:array)),
              s(:optarg, :width,
                s(:int, 1)),
              s(:optarg, :max,
                s(:send,
                  s(:lvar, :width), :-,
                  s(:int, 1))),
              s(:optarg, :indent,
                s(:str, ""))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sopts),
                  s(:lvasgn, :lopts)),
                s(:array,
                  s(:array),
                  s(:array),
                  s(:nil))),
              s(:if,
                s(:ivar, :@short),
                s(:block,
                  s(:send,
                    s(:ivar, :@short), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :sdone), :fetch,
                        s(:lvar, :s)),
                      s(:args),
                      s(:send,
                        s(:lvar, :sopts), :<<,
                        s(:lvar, :s))),
                    s(:send,
                      s(:lvar, :sdone), :[]=,
                      s(:lvar, :s),
                      s(:true)))), nil),
              s(:if,
                s(:ivar, :@long),
                s(:block,
                  s(:send,
                    s(:ivar, :@long), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :ldone), :fetch,
                        s(:lvar, :s)),
                      s(:args),
                      s(:send,
                        s(:lvar, :lopts), :<<,
                        s(:lvar, :s))),
                    s(:send,
                      s(:lvar, :ldone), :[]=,
                      s(:lvar, :s),
                      s(:true)))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :sopts), :empty?),
                  s(:send,
                    s(:lvar, :lopts), :empty?)),
                s(:return), nil),
              s(:lvasgn, :left,
                s(:array,
                  s(:send,
                    s(:lvar, :sopts), :join,
                    s(:str, ", ")))),
              s(:lvasgn, :right,
                s(:send,
                  s(:send, nil, :desc), :dup)),
              s(:while,
                s(:lvasgn, :s,
                  s(:send,
                    s(:lvar, :lopts), :shift)),
                s(:begin,
                  s(:lvasgn, :l,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :left), :[],
                          s(:int, -1)), :length), :+,
                      s(:send,
                        s(:lvar, :s), :length))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :left), :size), :==,
                        s(:int, 1)),
                      s(:send, nil, :arg)),
                    s(:op_asgn,
                      s(:lvasgn, :l), :+,
                      s(:send,
                        s(:send, nil, :arg), :length)), nil),
                  s(:or,
                    s(:or,
                      s(:send,
                        s(:lvar, :l), :<,
                        s(:lvar, :max)),
                      s(:send,
                        s(:lvar, :sopts), :empty?)),
                    s(:send,
                      s(:lvar, :left), :<<,
                      s(:str, ""))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :left), :[],
                        s(:int, -1)), :<<,
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :left), :[],
                            s(:int, -1)), :empty?),
                        s(:send,
                          s(:str, " "), :*,
                          s(:int, 4)),
                        s(:str, ", "))), :<<,
                    s(:lvar, :s)))),
              s(:if,
                s(:send, nil, :arg),
                s(:send,
                  s(:send,
                    s(:lvar, :left), :[],
                    s(:int, 0)), :<<,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :left), :[],
                        s(:int, 1)),
                      s(:send,
                        s(:send,
                          s(:send, nil, :arg), :sub,
                          s(:regexp,
                            s(:str, "\\A(\\[?)="),
                            s(:regopt)),
                          s(:str, "\\1")), :+,
                        s(:str, ",")),
                      s(:send, nil, :arg)))), nil),
              s(:lvasgn, :mlen,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :left), :collect),
                      s(:args,
                        s(:arg, :ss)),
                      s(:send,
                        s(:lvar, :ss), :length)), :max), :to_i)),
              s(:while,
                s(:and,
                  s(:send,
                    s(:lvar, :mlen), :>,
                    s(:lvar, :width)),
                  s(:lvasgn, :l,
                    s(:send,
                      s(:lvar, :left), :shift))),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:lvar, :l), :length), :==,
                      s(:lvar, :mlen)),
                    s(:lvasgn, :mlen,
                      s(:send,
                        s(:send,
                          s(:block,
                            s(:send,
                              s(:lvar, :left), :collect),
                            s(:args,
                              s(:arg, :ss)),
                            s(:send,
                              s(:lvar, :ss), :length)), :max), :to_i)), nil),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:send,
                          s(:send,
                            s(:lvar, :l), :length), :<,
                          s(:lvar, :width)),
                        s(:begin,
                          s(:lvasgn, :r,
                            s(:send,
                              s(:lvar, :right), :[],
                              s(:int, 0))))),
                      s(:send,
                        s(:send,
                          s(:lvar, :r), :empty?), :!)),
                    s(:begin,
                      s(:lvasgn, :l,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:lvar, :l), :to_s), :ljust,
                              s(:lvar, :width)), :+,
                            s(:str, " ")), :+,
                          s(:lvar, :r))),
                      s(:send,
                        s(:lvar, :right), :shift)), nil),
                  s(:yield,
                    s(:send,
                      s(:lvar, :indent), :+,
                      s(:lvar, :l))))),
              s(:while,
                s(:kwbegin,
                  s(:lvasgn, :l,
                    s(:send,
                      s(:lvar, :left), :shift)),
                  s(:lvasgn, :r,
                    s(:send,
                      s(:lvar, :right), :shift)),
                  s(:or,
                    s(:lvar, :l),
                    s(:lvar, :r))),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:lvar, :r),
                      s(:send,
                        s(:send,
                          s(:lvar, :r), :empty?), :!)),
                    s(:lvasgn, :l,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:lvar, :l), :to_s), :ljust,
                            s(:lvar, :width)), :+,
                          s(:str, " ")), :+,
                        s(:lvar, :r))), nil),
                  s(:yield,
                    s(:send,
                      s(:lvar, :indent), :+,
                      s(:lvar, :l))))),
              s(:self))),
          s(:def, :add_banner,
            s(:args,
              s(:arg, :to)),
            s(:begin,
              s(:if,
                s(:or,
                  s(:ivar, :@short),
                  s(:ivar, :@long)), nil,
                s(:begin,
                  s(:lvasgn, :s,
                    s(:send,
                      s(:send, nil, :desc), :join)),
                  s(:if,
                    s(:send,
                      s(:lvar, :s), :empty?), nil,
                    s(:send,
                      s(:lvar, :to), :<<,
                      s(:send,
                        s(:send,
                          s(:str, " ["), :+,
                          s(:lvar, :s)), :+,
                        s(:str, "]...")))))),
              s(:lvar, :to))),
          s(:def, :match_nonswitch?,
            s(:args,
              s(:arg, :str)),
            s(:if,
              s(:or,
                s(:ivar, :@short),
                s(:ivar, :@long)), nil,
              s(:send,
                s(:ivar, :@pattern), :=~,
                s(:lvar, :str)))),
          s(:def, :switch_name,
            s(:args),
            s(:send,
              s(:begin,
                s(:or,
                  s(:send,
                    s(:send, nil, :long), :first),
                  s(:send,
                    s(:send, nil, :short), :first))), :sub,
              s(:regexp,
                s(:str, "\\A-+(?:\\[no-\\])?"),
                s(:regopt)),
              s(:str, ""))),
          s(:def, :compsys,
            s(:args,
              s(:arg, :sdone),
              s(:arg, :ldone)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sopts),
                  s(:lvasgn, :lopts)),
                s(:array,
                  s(:array),
                  s(:array))),
              s(:if,
                s(:ivar, :@short),
                s(:block,
                  s(:send,
                    s(:ivar, :@short), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :sdone), :fetch,
                        s(:lvar, :s)),
                      s(:args),
                      s(:send,
                        s(:lvar, :sopts), :<<,
                        s(:lvar, :s))),
                    s(:send,
                      s(:lvar, :sdone), :[]=,
                      s(:lvar, :s),
                      s(:true)))), nil),
              s(:if,
                s(:ivar, :@long),
                s(:block,
                  s(:send,
                    s(:ivar, :@long), :each),
                  s(:args,
                    s(:arg, :s)),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:lvar, :ldone), :fetch,
                        s(:lvar, :s)),
                      s(:args),
                      s(:send,
                        s(:lvar, :lopts), :<<,
                        s(:lvar, :s))),
                    s(:send,
                      s(:lvar, :ldone), :[]=,
                      s(:lvar, :s),
                      s(:true)))), nil),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :sopts), :empty?),
                  s(:send,
                    s(:lvar, :lopts), :empty?)),
                s(:return), nil),
              s(:block,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:lvar, :sopts), :+,
                      s(:lvar, :lopts))), :each),
                s(:args,
                  s(:arg, :opt)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "^--\\[no-\\](.+)$"),
                      s(:regopt)),
                    s(:lvar, :opt)),
                  s(:begin,
                    s(:lvasgn, :o,
                      s(:nth_ref, 1)),
                    s(:yield,
                      s(:dstr,
                        s(:str, "--"),
                        s(:begin,
                          s(:lvar, :o))),
                      s(:send,
                        s(:send, nil, :desc), :join,
                        s(:str, ""))),
                    s(:yield,
                      s(:dstr,
                        s(:str, "--no-"),
                        s(:begin,
                          s(:lvar, :o))),
                      s(:send,
                        s(:send, nil, :desc), :join,
                        s(:str, "")))),
                  s(:yield,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :opt))),
                    s(:send,
                      s(:send, nil, :desc), :join,
                      s(:str, ""))))))),
          s(:class,
            s(:const, nil, :NoArgument),
            s(:self),
            s(:begin,
              s(:def, :parse,
                s(:args,
                  s(:arg, :arg),
                  s(:arg, :argv)),
                s(:begin,
                  s(:if,
                    s(:lvar, :arg),
                    s(:yield,
                      s(:const, nil, :NeedlessArgument),
                      s(:lvar, :arg)), nil),
                  s(:send, nil, :conv_arg,
                    s(:lvar, :arg)))),
              s(:defs,
                s(:self), :incompatible_argument_styles,
                s(:args,
                  s(:restarg)), nil),
              s(:defs,
                s(:self), :pattern,
                s(:args),
                s(:const, nil, :Object)))),
          s(:class,
            s(:const, nil, :RequiredArgument),
            s(:self),
            s(:def, :parse,
              s(:args,
                s(:arg, :arg),
                s(:arg, :argv)),
              s(:begin,
                s(:if,
                  s(:lvar, :arg), nil,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :argv), :empty?),
                      s(:send, nil, :raise,
                        s(:const, nil, :MissingArgument)), nil),
                    s(:lvasgn, :arg,
                      s(:send,
                        s(:lvar, :argv), :shift)))),
                s(:send, nil, :conv_arg,
                  s(:splat,
                    s(:send, nil, :parse_arg,
                      s(:lvar, :arg),
                      s(:block_pass,
                        s(:send, nil, :method,
                          s(:sym, :raise))))))))),
          s(:class,
            s(:const, nil, :OptionalArgument),
            s(:self),
            s(:def, :parse,
              s(:args,
                s(:arg, :arg),
                s(:arg, :argv),
                s(:blockarg, :error)),
              s(:if,
                s(:lvar, :arg),
                s(:send, nil, :conv_arg,
                  s(:splat,
                    s(:send, nil, :parse_arg,
                      s(:lvar, :arg),
                      s(:block_pass,
                        s(:lvar, :error))))),
                s(:send, nil, :conv_arg,
                  s(:lvar, :arg))))),
          s(:class,
            s(:const, nil, :PlacedArgument),
            s(:self),
            s(:def, :parse,
              s(:args,
                s(:arg, :arg),
                s(:arg, :argv),
                s(:blockarg, :error)),
              s(:begin,
                s(:if,
                  s(:and,
                    s(:send,
                      s(:begin,
                        s(:lvasgn, :val,
                          s(:lvar, :arg))), :!),
                    s(:begin,
                      s(:or,
                        s(:send,
                          s(:lvar, :argv), :empty?),
                        s(:match_with_lvasgn,
                          s(:regexp,
                            s(:str, "\\A-"),
                            s(:regopt)),
                          s(:begin,
                            s(:lvasgn, :val,
                              s(:send,
                                s(:lvar, :argv), :[],
                                s(:int, 0)))))))),
                  s(:return,
                    s(:nil),
                    s(:send, nil, :block),
                    s(:nil)), nil),
                s(:lvasgn, :opt,
                  s(:send,
                    s(:begin,
                      s(:lvasgn, :val,
                        s(:send, nil, :parse_arg,
                          s(:lvar, :val),
                          s(:block_pass,
                            s(:lvar, :error))))), :[],
                    s(:int, 1))),
                s(:lvasgn, :val,
                  s(:send, nil, :conv_arg,
                    s(:splat,
                      s(:lvar, :val)))),
                s(:if,
                  s(:and,
                    s(:lvar, :opt),
                    s(:send,
                      s(:lvar, :arg), :!)),
                  s(:send,
                    s(:lvar, :argv), :shift),
                  s(:send,
                    s(:lvar, :val), :[]=,
                    s(:int, 0),
                    s(:nil))),
                s(:lvar, :val)))))),
      s(:class,
        s(:const, nil, :List), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :atype)),
          s(:send, nil, :attr_reader,
            s(:sym, :short)),
          s(:send, nil, :attr_reader,
            s(:sym, :long)),
          s(:send, nil, :attr_reader,
            s(:sym, :list)),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@atype,
                s(:hash)),
              s(:ivasgn, :@short,
                s(:send,
                  s(:const, nil, :OptionMap), :new)),
              s(:ivasgn, :@long,
                s(:send,
                  s(:const, nil, :OptionMap), :new)),
              s(:ivasgn, :@list,
                s(:array)))),
          s(:def, :accept,
            s(:args,
              s(:arg, :t),
              s(:optarg, :pat,
                s(:regexp,
                  s(:str, ".*"),
                  s(:regopt, :m))),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:lvar, :pat),
                s(:or,
                  s(:send,
                    s(:lvar, :pat), :respond_to?,
                    s(:sym, :match)),
                  s(:send, nil, :raise,
                    s(:const, nil, :TypeError),
                    s(:str, "has no `match'"),
                    s(:send,
                      s(:const, nil, :ParseError), :filter_backtrace,
                      s(:send, nil, :caller,
                        s(:int, 2))))),
                s(:if,
                  s(:send,
                    s(:lvar, :t), :respond_to?,
                    s(:sym, :match)),
                  s(:lvasgn, :pat,
                    s(:lvar, :t)), nil)),
              s(:if,
                s(:lvar, :block), nil,
                s(:if,
                  s(:send,
                    s(:lvar, :pat), :respond_to?,
                    s(:sym, :convert)),
                  s(:lvasgn, :block,
                    s(:send,
                      s(:send,
                        s(:lvar, :pat), :method,
                        s(:sym, :convert)), :to_proc)), nil)),
              s(:send,
                s(:ivar, :@atype), :[]=,
                s(:lvar, :t),
                s(:array,
                  s(:lvar, :pat),
                  s(:lvar, :block))))),
          s(:def, :reject,
            s(:args,
              s(:arg, :t)),
            s(:send,
              s(:ivar, :@atype), :delete,
              s(:lvar, :t))),
          s(:def, :update,
            s(:args,
              s(:arg, :sw),
              s(:arg, :sopts),
              s(:arg, :lopts),
              s(:optarg, :nsw,
                s(:nil)),
              s(:optarg, :nlopts,
                s(:nil))),
            s(:begin,
              s(:if,
                s(:lvar, :sopts),
                s(:block,
                  s(:send,
                    s(:lvar, :sopts), :each),
                  s(:args,
                    s(:arg, :o)),
                  s(:send,
                    s(:ivar, :@short), :[]=,
                    s(:lvar, :o),
                    s(:lvar, :sw))), nil),
              s(:if,
                s(:lvar, :lopts),
                s(:block,
                  s(:send,
                    s(:lvar, :lopts), :each),
                  s(:args,
                    s(:arg, :o)),
                  s(:send,
                    s(:ivar, :@long), :[]=,
                    s(:lvar, :o),
                    s(:lvar, :sw))), nil),
              s(:if,
                s(:and,
                  s(:lvar, :nsw),
                  s(:lvar, :nlopts)),
                s(:block,
                  s(:send,
                    s(:lvar, :nlopts), :each),
                  s(:args,
                    s(:arg, :o)),
                  s(:send,
                    s(:ivar, :@long), :[]=,
                    s(:lvar, :o),
                    s(:lvar, :nsw))), nil),
              s(:lvasgn, :used,
                s(:send,
                  s(:send,
                    s(:ivar, :@short), :invert), :update,
                  s(:send,
                    s(:ivar, :@long), :invert))),
              s(:block,
                s(:send,
                  s(:ivar, :@list), :delete_if),
                s(:args,
                  s(:arg, :o)),
                s(:and,
                  s(:send,
                    s(:const, nil, :Switch), :===,
                    s(:lvar, :o)),
                  s(:send,
                    s(:send,
                      s(:lvar, :used), :[],
                      s(:lvar, :o)), :!))))),
          s(:send, nil, :private,
            s(:sym, :update)),
          s(:def, :prepend,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:send, nil, :update,
                s(:splat,
                  s(:lvar, :args))),
              s(:send,
                s(:ivar, :@list), :unshift,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))))),
          s(:def, :append,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:send, nil, :update,
                s(:splat,
                  s(:lvar, :args))),
              s(:send,
                s(:ivar, :@list), :push,
                s(:send,
                  s(:lvar, :args), :[],
                  s(:int, 0))))),
          s(:def, :search,
            s(:args,
              s(:arg, :id),
              s(:arg, :key)),
            s(:if,
              s(:lvasgn, :list,
                s(:send, nil, :__send__,
                  s(:lvar, :id))),
              s(:begin,
                s(:lvasgn, :val,
                  s(:block,
                    s(:send,
                      s(:lvar, :list), :fetch,
                      s(:lvar, :key)),
                    s(:args),
                    s(:return,
                      s(:nil)))),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:yield,
                    s(:lvar, :val)),
                  s(:lvar, :val))), nil)),
          s(:def, :complete,
            s(:args,
              s(:arg, :id),
              s(:arg, :opt),
              s(:optarg, :icase,
                s(:false)),
              s(:restarg, :pat),
              s(:blockarg, :block)),
            s(:send,
              s(:send, nil, :__send__,
                s(:lvar, :id)), :complete,
              s(:lvar, :opt),
              s(:lvar, :icase),
              s(:splat,
                s(:lvar, :pat)),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :each_option,
            s(:args,
              s(:blockarg, :block)),
            s(:send,
              s(:send, nil, :list), :each,
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :summarize,
            s(:args,
              s(:restarg, :args),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :sum,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send, nil, :list), :reverse_each),
                s(:args,
                  s(:arg, :opt)),
                s(:if,
                  s(:send,
                    s(:lvar, :opt), :respond_to?,
                    s(:sym, :summarize)),
                  s(:begin,
                    s(:lvasgn, :s,
                      s(:array)),
                    s(:block,
                      s(:send,
                        s(:lvar, :opt), :summarize,
                        s(:splat,
                          s(:lvar, :args))),
                      s(:args,
                        s(:arg, :l)),
                      s(:send,
                        s(:lvar, :s), :<<,
                        s(:lvar, :l))),
                    s(:send,
                      s(:lvar, :sum), :concat,
                      s(:send,
                        s(:lvar, :s), :reverse))),
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :opt), :!),
                      s(:send,
                        s(:lvar, :opt), :empty?)),
                    s(:send,
                      s(:lvar, :sum), :<<,
                      s(:str, "")),
                    s(:if,
                      s(:send,
                        s(:lvar, :opt), :respond_to?,
                        s(:sym, :each_line)),
                      s(:send,
                        s(:lvar, :sum), :concat,
                        s(:send,
                          s(:array,
                            s(:splat,
                              s(:send,
                                s(:lvar, :opt), :each_line))), :reverse)),
                      s(:send,
                        s(:lvar, :sum), :concat,
                        s(:send,
                          s(:array,
                            s(:splat,
                              s(:send,
                                s(:lvar, :opt), :each))), :reverse)))))),
              s(:send,
                s(:lvar, :sum), :reverse_each,
                s(:block_pass,
                  s(:lvar, :block))))),
          s(:def, :add_banner,
            s(:args,
              s(:arg, :to)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:send, nil, :list), :each),
                s(:args,
                  s(:arg, :opt)),
                s(:if,
                  s(:send,
                    s(:lvar, :opt), :respond_to?,
                    s(:sym, :add_banner)),
                  s(:send,
                    s(:lvar, :opt), :add_banner,
                    s(:lvar, :to)), nil)),
              s(:lvar, :to))),
          s(:def, :compsys,
            s(:args,
              s(:restarg, :args),
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:send, nil, :list), :each),
              s(:args,
                s(:arg, :opt)),
              s(:if,
                s(:send,
                  s(:lvar, :opt), :respond_to?,
                  s(:sym, :compsys)),
                s(:send,
                  s(:lvar, :opt), :compsys,
                  s(:splat,
                    s(:lvar, :args)),
                  s(:block_pass,
                    s(:lvar, :block))), nil))))),
      s(:class,
        s(:const, nil, :CompletingHash),
        s(:const, nil, :Hash),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Completion)),
          s(:def, :match,
            s(:args,
              s(:arg, :key)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:splat,
                    s(:lvasgn, :values))),
                s(:block,
                  s(:send, nil, :fetch,
                    s(:lvar, :key)),
                  s(:args),
                  s(:send, nil, :raise,
                    s(:const, nil, :AmbiguousArgument),
                    s(:block,
                      s(:send, nil, :catch,
                        s(:sym, :ambiguous)),
                      s(:args),
                      s(:return,
                        s(:send, nil, :complete,
                          s(:lvar, :key))))))),
              s(:return,
                s(:lvar, :key),
                s(:splat,
                  s(:lvar, :values))))))),
      s(:casgn, nil, :ArgumentStyle,
        s(:hash)),
      s(:block,
        s(:send,
          s(:const, nil, :NoArgument), :each),
        s(:args,
          s(:arg, :el)),
        s(:send,
          s(:const, nil, :ArgumentStyle), :[]=,
          s(:lvar, :el),
          s(:const,
            s(:const, nil, :Switch), :NoArgument))),
      s(:block,
        s(:send,
          s(:const, nil, :RequiredArgument), :each),
        s(:args,
          s(:arg, :el)),
        s(:send,
          s(:const, nil, :ArgumentStyle), :[]=,
          s(:lvar, :el),
          s(:const,
            s(:const, nil, :Switch), :RequiredArgument))),
      s(:block,
        s(:send,
          s(:const, nil, :OptionalArgument), :each),
        s(:args,
          s(:arg, :el)),
        s(:send,
          s(:const, nil, :ArgumentStyle), :[]=,
          s(:lvar, :el),
          s(:const,
            s(:const, nil, :Switch), :OptionalArgument))),
      s(:send,
        s(:const, nil, :ArgumentStyle), :freeze),
      s(:casgn, nil, :DefaultList,
        s(:send,
          s(:const, nil, :List), :new)),
      s(:send,
        s(:send,
          s(:const, nil, :DefaultList), :short), :[]=,
        s(:str, "-"),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :Switch), :NoArgument), :new),
          s(:args), nil)),
      s(:send,
        s(:send,
          s(:const, nil, :DefaultList), :long), :[]=,
        s(:str, ""),
        s(:block,
          s(:send,
            s(:const,
              s(:const, nil, :Switch), :NoArgument), :new),
          s(:args),
          s(:send, nil, :throw,
            s(:sym, :terminate)))),
      s(:casgn, nil, :COMPSYS_HEADER,
        s(:dstr,
          s(:str, "\n"),
          s(:str, "typeset -A opt_args\n"),
          s(:str, "local context state line\n"),
          s(:str, "\n"),
          s(:str, "_arguments -s -S \\\n"))),
      s(:def, :compsys,
        s(:args,
          s(:arg, :to),
          s(:optarg, :name,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:gvar, :$0)))),
        s(:begin,
          s(:send,
            s(:lvar, :to), :<<,
            s(:dstr,
              s(:str, "#compdef "),
              s(:begin,
                s(:lvar, :name)),
              s(:str, "\n"))),
          s(:send,
            s(:lvar, :to), :<<,
            s(:const, nil, :COMPSYS_HEADER)),
          s(:block,
            s(:send, nil, :visit,
              s(:sym, :compsys),
              s(:hash),
              s(:hash)),
            s(:args,
              s(:arg, :o),
              s(:arg, :d)),
            s(:send,
              s(:lvar, :to), :<<,
              s(:dstr,
                s(:str, "  \""),
                s(:begin,
                  s(:lvar, :o)),
                s(:str, "["),
                s(:begin,
                  s(:send,
                    s(:lvar, :d), :gsub,
                    s(:regexp,
                      s(:str, "[\\\"\\[\\]]"),
                      s(:regopt)),
                    s(:str, "\\\\\\&"))),
                s(:str, "]\" \\\n")))),
          s(:send,
            s(:lvar, :to), :<<,
            s(:str, "  '*:file:_files' && return 0\n")))),
      s(:casgn, nil, :Officious,
        s(:hash)),
      s(:send,
        s(:const, nil, :Officious), :[]=,
        s(:str, "help"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :parser)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Switch), :NoArgument), :new),
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:send, nil, :puts,
                s(:send,
                  s(:lvar, :parser), :help)),
              s(:send, nil, :exit))))),
      s(:send,
        s(:const, nil, :Officious), :[]=,
        s(:str, "*-completion-bash"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :parser)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Switch), :RequiredArgument), :new),
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:send, nil, :puts,
                s(:send,
                  s(:lvar, :parser), :candidate,
                  s(:lvar, :arg))),
              s(:send, nil, :exit))))),
      s(:send,
        s(:const, nil, :Officious), :[]=,
        s(:str, "*-completion-zsh"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :parser)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Switch), :OptionalArgument), :new),
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:send,
                s(:lvar, :parser), :compsys,
                s(:const, nil, :STDOUT),
                s(:lvar, :arg)),
              s(:send, nil, :exit))))),
      s(:send,
        s(:const, nil, :Officious), :[]=,
        s(:str, "version"),
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:arg, :parser)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :Switch), :OptionalArgument), :new),
            s(:args,
              s(:arg, :pkg)),
            s(:begin,
              s(:if,
                s(:lvar, :pkg),
                s(:kwbegin,
                  s(:rescue,
                    s(:send, nil, :require,
                      s(:str, "optparse/version")),
                    s(:resbody,
                      s(:array,
                        s(:const, nil, :LoadError)), nil, nil),
                    s(:begin,
                      s(:or,
                        s(:send, nil, :show_version,
                          s(:splat,
                            s(:send,
                              s(:lvar, :pkg), :split,
                              s(:regexp,
                                s(:str, ","),
                                s(:regopt))))),
                        s(:send, nil, :abort,
                          s(:dstr,
                            s(:begin,
                              s(:send,
                                s(:lvar, :parser), :program_name)),
                            s(:str, ": no version found in package "),
                            s(:begin,
                              s(:lvar, :pkg))))),
                      s(:send, nil, :exit)))), nil),
              s(:or,
                s(:lvasgn, :v,
                  s(:send,
                    s(:lvar, :parser), :ver)),
                s(:send, nil, :abort,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :parser), :program_name)),
                    s(:str, ": version unknown")))),
              s(:send, nil, :puts,
                s(:lvar, :v)),
              s(:send, nil, :exit))))),
      s(:defs,
        s(:self), :with,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:lvasgn, :opts,
            s(:send, nil, :new,
              s(:splat,
                s(:lvar, :args)))),
          s(:send,
            s(:lvar, :opts), :instance_eval,
            s(:block_pass,
              s(:lvar, :block))),
          s(:lvar, :opts))),
      s(:defs,
        s(:self), :inc,
        s(:args,
          s(:arg, :arg),
          s(:optarg, :default,
            s(:nil))),
        s(:case,
          s(:lvar, :arg),
          s(:when,
            s(:const, nil, :Integer),
            s(:send,
              s(:lvar, :arg), :nonzero?)),
          s(:when,
            s(:nil),
            s(:send,
              s(:send,
                s(:lvar, :default), :to_i), :+,
              s(:int, 1))), nil)),
      s(:def, :inc,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:send,
            s(:self), :class), :inc,
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :banner,
            s(:nil)),
          s(:optarg, :width,
            s(:int, 32)),
          s(:optarg, :indent,
            s(:send,
              s(:str, " "), :*,
              s(:int, 4)))),
        s(:begin,
          s(:ivasgn, :@stack,
            s(:array,
              s(:const, nil, :DefaultList),
              s(:send,
                s(:const, nil, :List), :new),
              s(:send,
                s(:const, nil, :List), :new))),
          s(:ivasgn, :@program_name,
            s(:nil)),
          s(:ivasgn, :@banner,
            s(:lvar, :banner)),
          s(:ivasgn, :@summary_width,
            s(:lvar, :width)),
          s(:ivasgn, :@summary_indent,
            s(:lvar, :indent)),
          s(:ivasgn, :@default_argv,
            s(:const, nil, :ARGV)),
          s(:send, nil, :add_officious),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:self)), nil))),
      s(:def, :add_officious,
        s(:args),
        s(:begin,
          s(:lvasgn, :list,
            s(:send, nil, :base)),
          s(:block,
            s(:send,
              s(:const, nil, :Officious), :each),
            s(:args,
              s(:arg, :opt),
              s(:arg, :block)),
            s(:or_asgn,
              s(:send,
                s(:send,
                  s(:lvar, :list), :long), :[],
                s(:lvar, :opt)),
              s(:send,
                s(:lvar, :block), :call,
                s(:self)))))),
      s(:def, :terminate,
        s(:args,
          s(:optarg, :arg,
            s(:nil))),
        s(:send,
          s(:send,
            s(:self), :class), :terminate,
          s(:lvar, :arg))),
      s(:defs,
        s(:self), :terminate,
        s(:args,
          s(:optarg, :arg,
            s(:nil))),
        s(:send, nil, :throw,
          s(:sym, :terminate),
          s(:lvar, :arg))),
      s(:ivasgn, :@stack,
        s(:array,
          s(:const, nil, :DefaultList))),
      s(:defs,
        s(:self), :top,
        s(:args),
        s(:const, nil, :DefaultList)),
      s(:def, :accept,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :blk)),
        s(:send,
          s(:send, nil, :top), :accept,
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :blk)))),
      s(:defs,
        s(:self), :accept,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :blk)),
        s(:send,
          s(:send, nil, :top), :accept,
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :blk)))),
      s(:def, :reject,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :blk)),
        s(:send,
          s(:send, nil, :top), :reject,
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :blk)))),
      s(:defs,
        s(:self), :reject,
        s(:args,
          s(:restarg, :args),
          s(:blockarg, :blk)),
        s(:send,
          s(:send, nil, :top), :reject,
          s(:splat,
            s(:lvar, :args)),
          s(:block_pass,
            s(:lvar, :blk)))),
      s(:send, nil, :attr_writer,
        s(:sym, :banner)),
      s(:send, nil, :attr_writer,
        s(:sym, :program_name)),
      s(:send, nil, :attr_accessor,
        s(:sym, :summary_width)),
      s(:send, nil, :attr_accessor,
        s(:sym, :summary_indent)),
      s(:send, nil, :attr_accessor,
        s(:sym, :default_argv)),
      s(:def, :banner,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@banner), nil,
            s(:begin,
              s(:ivasgn, :@banner,
                s(:dstr,
                  s(:str, "Usage: "),
                  s(:begin,
                    s(:send, nil, :program_name)),
                  s(:str, " [options]"))),
              s(:send, nil, :visit,
                s(:sym, :add_banner),
                s(:ivar, :@banner)))),
          s(:ivar, :@banner))),
      s(:def, :program_name,
        s(:args),
        s(:or,
          s(:ivar, :@program_name),
          s(:send,
            s(:const, nil, :File), :basename,
            s(:gvar, :$0),
            s(:str, ".*")))),
      s(:alias,
        s(:sym, :set_banner),
        s(:sym, :banner=)),
      s(:alias,
        s(:sym, :set_program_name),
        s(:sym, :program_name=)),
      s(:alias,
        s(:sym, :set_summary_width),
        s(:sym, :summary_width=)),
      s(:alias,
        s(:sym, :set_summary_indent),
        s(:sym, :summary_indent=)),
      s(:send, nil, :attr_writer,
        s(:sym, :version)),
      s(:send, nil, :attr_writer,
        s(:sym, :release)),
      s(:def, :version,
        s(:args),
        s(:or,
          s(:ivar, :@version),
          s(:begin,
            s(:and,
              s(:defined?,
                s(:const,
                  s(:cbase), :Version)),
              s(:const,
                s(:cbase), :Version))))),
      s(:def, :release,
        s(:args),
        s(:or,
          s(:or,
            s(:ivar, :@release),
            s(:begin,
              s(:and,
                s(:defined?,
                  s(:const,
                    s(:cbase), :Release)),
                s(:const,
                  s(:cbase), :Release)))),
          s(:begin,
            s(:and,
              s(:defined?,
                s(:const,
                  s(:cbase), :RELEASE)),
              s(:const,
                s(:cbase), :RELEASE))))),
      s(:def, :ver,
        s(:args),
        s(:if,
          s(:lvasgn, :v,
            s(:send, nil, :version)),
          s(:begin,
            s(:lvasgn, :str,
              s(:dstr,
                s(:begin,
                  s(:send, nil, :program_name)),
                s(:str, " "),
                s(:begin,
                  s(:send,
                    s(:array,
                      s(:lvar, :v)), :join,
                    s(:str, "."))))),
            s(:if,
              s(:lvasgn, :v,
                s(:send, nil, :release)),
              s(:send,
                s(:lvar, :str), :<<,
                s(:dstr,
                  s(:str, " ("),
                  s(:begin,
                    s(:lvar, :v)),
                  s(:str, ")"))), nil),
            s(:lvar, :str)), nil)),
      s(:def, :warn,
        s(:args,
          s(:optarg, :mesg,
            s(:gvar, :$!))),
        s(:super,
          s(:dstr,
            s(:begin,
              s(:send, nil, :program_name)),
            s(:str, ": "),
            s(:begin,
              s(:lvar, :mesg))))),
      s(:def, :abort,
        s(:args,
          s(:optarg, :mesg,
            s(:gvar, :$!))),
        s(:super,
          s(:dstr,
            s(:begin,
              s(:send, nil, :program_name)),
            s(:str, ": "),
            s(:begin,
              s(:lvar, :mesg))))),
      s(:def, :top,
        s(:args),
        s(:send,
          s(:ivar, :@stack), :[],
          s(:int, -1))),
      s(:def, :base,
        s(:args),
        s(:send,
          s(:ivar, :@stack), :[],
          s(:int, 1))),
      s(:def, :new,
        s(:args),
        s(:begin,
          s(:send,
            s(:ivar, :@stack), :push,
            s(:send,
              s(:const, nil, :List), :new)),
          s(:if,
            s(:send, nil, :block_given?),
            s(:yield,
              s(:self)),
            s(:self)))),
      s(:def, :remove,
        s(:args),
        s(:send,
          s(:ivar, :@stack), :pop)),
      s(:def, :summarize,
        s(:args,
          s(:optarg, :to,
            s(:array)),
          s(:optarg, :width,
            s(:ivar, :@summary_width)),
          s(:optarg, :max,
            s(:send,
              s(:lvar, :width), :-,
              s(:int, 1))),
          s(:optarg, :indent,
            s(:ivar, :@summary_indent)),
          s(:blockarg, :blk)),
        s(:begin,
          s(:or_asgn,
            s(:lvasgn, :blk),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :l)),
              s(:send,
                s(:lvar, :to), :<<,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :l), :index,
                      s(:gvar, :$/),
                      s(:int, -1)),
                    s(:lvar, :l),
                    s(:send,
                      s(:lvar, :l), :+,
                      s(:gvar, :$/))))))),
          s(:send, nil, :visit,
            s(:sym, :summarize),
            s(:hash),
            s(:hash),
            s(:lvar, :width),
            s(:lvar, :max),
            s(:lvar, :indent),
            s(:block_pass,
              s(:lvar, :blk))),
          s(:lvar, :to))),
      s(:def, :help,
        s(:args),
        s(:send, nil, :summarize,
          s(:send,
            s(:dstr,
              s(:begin,
                s(:send, nil, :banner))), :sub,
            s(:regexp,
              s(:str, "\\n?\\z"),
              s(:regopt)),
            s(:str, "\n")))),
      s(:alias,
        s(:sym, :to_s),
        s(:sym, :help)),
      s(:def, :to_a,
        s(:args),
        s(:send, nil, :summarize,
          s(:send,
            s(:dstr,
              s(:begin,
                s(:send, nil, :banner))), :split,
            s(:regexp,
              s(:str, "^"),
              s(:regopt))))),
      s(:def, :notwice,
        s(:args,
          s(:arg, :obj),
          s(:arg, :prv),
          s(:arg, :msg)),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :prv), :!),
              s(:send,
                s(:lvar, :prv), :==,
                s(:lvar, :obj))), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:dstr,
                s(:str, "argument "),
                s(:begin,
                  s(:lvar, :msg)),
                s(:str, " given twice: "),
                s(:begin,
                  s(:lvar, :obj))),
              s(:send,
                s(:const, nil, :ParseError), :filter_backtrace,
                s(:send, nil, :caller,
                  s(:int, 2))))),
          s(:lvar, :obj))),
      s(:send, nil, :private,
        s(:sym, :notwice)),
      s(:casgn, nil, :SPLAT_PROC,
        s(:block,
          s(:send, nil, :proc),
          s(:args,
            s(:restarg, :a)),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :a), :length), :<=,
              s(:int, 1)),
            s(:send,
              s(:lvar, :a), :first),
            s(:lvar, :a)))),
      s(:def, :make_switch,
        s(:args,
          s(:arg, :opts),
          s(:optarg, :block,
            s(:nil))),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :short),
              s(:lvasgn, :long),
              s(:lvasgn, :nolong),
              s(:lvasgn, :style),
              s(:lvasgn, :pattern),
              s(:lvasgn, :conv),
              s(:lvasgn, :not_pattern),
              s(:lvasgn, :not_conv),
              s(:lvasgn, :not_style)),
            s(:array,
              s(:array),
              s(:array),
              s(:array))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :ldesc),
              s(:lvasgn, :sdesc),
              s(:lvasgn, :desc),
              s(:lvasgn, :arg)),
            s(:array,
              s(:array),
              s(:array),
              s(:array))),
          s(:lvasgn, :default_style,
            s(:const,
              s(:const, nil, :Switch), :NoArgument)),
          s(:lvasgn, :default_pattern,
            s(:nil)),
          s(:lvasgn, :klass,
            s(:nil)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :q),
              s(:lvasgn, :a)),
            s(:nil)),
          s(:lvasgn, :has_arg,
            s(:false)),
          s(:block,
            s(:send,
              s(:lvar, :opts), :each),
            s(:args,
              s(:arg, :o)),
            s(:begin,
              s(:if,
                s(:block,
                  s(:send, nil, :search,
                    s(:sym, :atype),
                    s(:lvar, :o)),
                  s(:args,
                    s(:arg, :pat),
                    s(:arg, :c)),
                  s(:begin,
                    s(:lvasgn, :klass,
                      s(:send, nil, :notwice,
                        s(:lvar, :o),
                        s(:lvar, :klass),
                        s(:str, "type"))),
                    s(:if,
                      s(:and,
                        s(:lvar, :not_style),
                        s(:send,
                          s(:lvar, :not_style), :!=,
                          s(:const,
                            s(:const, nil, :Switch), :NoArgument))),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :not_pattern),
                          s(:lvasgn, :not_conv)),
                        s(:array,
                          s(:lvar, :pat),
                          s(:lvar, :c))),
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :default_pattern),
                          s(:lvasgn, :conv)),
                        s(:array,
                          s(:lvar, :pat),
                          s(:lvar, :c)))))),
                s(:next), nil),
              s(:if,
                s(:and,
                  s(:begin,
                    s(:send,
                      s(:begin,
                        s(:or,
                          s(:send,
                            s(:const, nil, :String), :===,
                            s(:lvar, :o)),
                          s(:send,
                            s(:const, nil, :Symbol), :===,
                            s(:lvar, :o)))), :!)),
                  s(:send,
                    s(:lvar, :o), :respond_to?,
                    s(:sym, :match))),
                s(:begin,
                  s(:lvasgn, :pattern,
                    s(:send, nil, :notwice,
                      s(:lvar, :o),
                      s(:lvar, :pattern),
                      s(:str, "pattern"))),
                  s(:if,
                    s(:send,
                      s(:lvar, :pattern), :respond_to?,
                      s(:sym, :convert)),
                    s(:lvasgn, :conv,
                      s(:send,
                        s(:send,
                          s(:lvar, :pattern), :method,
                          s(:sym, :convert)), :to_proc)),
                    s(:lvasgn, :conv,
                      s(:const, nil, :SPLAT_PROC))),
                  s(:next)), nil),
              s(:case,
                s(:lvar, :o),
                s(:when,
                  s(:const, nil, :Proc),
                  s(:const, nil, :Method),
                  s(:lvasgn, :block,
                    s(:send, nil, :notwice,
                      s(:lvar, :o),
                      s(:lvar, :block),
                      s(:str, "block")))),
                s(:when,
                  s(:const, nil, :Array),
                  s(:const, nil, :Hash),
                  s(:begin,
                    s(:case,
                      s(:lvar, :pattern),
                      s(:when,
                        s(:const, nil, :CompletingHash), nil),
                      s(:when,
                        s(:nil),
                        s(:begin,
                          s(:lvasgn, :pattern,
                            s(:send,
                              s(:const, nil, :CompletingHash), :new)),
                          s(:if,
                            s(:send,
                              s(:lvar, :pattern), :respond_to?,
                              s(:sym, :convert)),
                            s(:lvasgn, :conv,
                              s(:send,
                                s(:send,
                                  s(:lvar, :pattern), :method,
                                  s(:sym, :convert)), :to_proc)), nil))),
                      s(:send, nil, :raise,
                        s(:const, nil, :ArgumentError),
                        s(:str, "argument pattern given twice"))),
                    s(:block,
                      s(:send,
                        s(:lvar, :o), :each),
                      s(:args,
                        s(:arg, :pat),
                        s(:restarg, :v)),
                      s(:send,
                        s(:lvar, :pattern), :[]=,
                        s(:lvar, :pat),
                        s(:block,
                          s(:send,
                            s(:lvar, :v), :fetch,
                            s(:int, 0)),
                          s(:args),
                          s(:lvar, :pat)))))),
                s(:when,
                  s(:const, nil, :Module),
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:dstr,
                      s(:str, "unsupported argument type: "),
                      s(:begin,
                        s(:lvar, :o))),
                    s(:send,
                      s(:const, nil, :ParseError), :filter_backtrace,
                      s(:send, nil, :caller,
                        s(:int, 4))))),
                s(:when,
                  s(:splat,
                    s(:send,
                      s(:const, nil, :ArgumentStyle), :keys)),
                  s(:lvasgn, :style,
                    s(:send, nil, :notwice,
                      s(:send,
                        s(:const, nil, :ArgumentStyle), :[],
                        s(:lvar, :o)),
                      s(:lvar, :style),
                      s(:str, "style")))),
                s(:when,
                  s(:regexp,
                    s(:str, "^--no-([^\\[\\]=\\s]*)(.+)?"),
                    s(:regopt)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :q),
                        s(:lvasgn, :a)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2))),
                    s(:lvasgn, :o,
                      s(:send, nil, :notwice,
                        s(:if,
                          s(:lvar, :a),
                          s(:const, nil, :Object),
                          s(:const, nil, :TrueClass)),
                        s(:lvar, :klass),
                        s(:str, "type"))),
                    s(:if,
                      s(:lvar, :not_style), nil,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :not_pattern),
                          s(:lvasgn, :not_conv)),
                        s(:send, nil, :search,
                          s(:sym, :atype),
                          s(:lvar, :o)))),
                    s(:if,
                      s(:lvar, :a),
                      s(:lvasgn, :not_style,
                        s(:send,
                          s(:begin,
                            s(:or,
                              s(:lvar, :not_style),
                              s(:lvar, :default_style))), :guess,
                          s(:lvasgn, :arg,
                            s(:lvar, :a)))), nil),
                    s(:lvasgn, :default_style,
                      s(:const,
                        s(:const, nil, :Switch), :NoArgument)),
                    s(:if,
                      s(:lvar, :default_pattern), nil,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :default_pattern),
                          s(:lvasgn, :conv)),
                        s(:send, nil, :search,
                          s(:sym, :atype),
                          s(:const, nil, :FalseClass)))),
                    s(:send,
                      s(:lvar, :ldesc), :<<,
                      s(:dstr,
                        s(:str, "--no-"),
                        s(:begin,
                          s(:lvar, :q)))),
                    s(:send,
                      s(:lvar, :long), :<<,
                      s(:send,
                        s(:str, "no-"), :+,
                        s(:begin,
                          s(:lvasgn, :q,
                            s(:send,
                              s(:lvar, :q), :downcase))))),
                    s(:send,
                      s(:lvar, :nolong), :<<,
                      s(:lvar, :q)))),
                s(:when,
                  s(:regexp,
                    s(:str, "^--\\[no-\\]([^\\[\\]=\\s]*)(.+)?"),
                    s(:regopt)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :q),
                        s(:lvasgn, :a)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2))),
                    s(:lvasgn, :o,
                      s(:send, nil, :notwice,
                        s(:if,
                          s(:lvar, :a),
                          s(:const, nil, :Object),
                          s(:const, nil, :TrueClass)),
                        s(:lvar, :klass),
                        s(:str, "type"))),
                    s(:if,
                      s(:lvar, :a),
                      s(:begin,
                        s(:lvasgn, :default_style,
                          s(:send,
                            s(:lvar, :default_style), :guess,
                            s(:lvasgn, :arg,
                              s(:lvar, :a)))),
                        s(:if,
                          s(:lvar, :default_pattern), nil,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :default_pattern),
                              s(:lvasgn, :conv)),
                            s(:send, nil, :search,
                              s(:sym, :atype),
                              s(:lvar, :o))))), nil),
                    s(:send,
                      s(:lvar, :ldesc), :<<,
                      s(:dstr,
                        s(:str, "--[no-]"),
                        s(:begin,
                          s(:lvar, :q)))),
                    s(:send,
                      s(:lvar, :long), :<<,
                      s(:begin,
                        s(:lvasgn, :o,
                          s(:send,
                            s(:lvar, :q), :downcase)))),
                    s(:if,
                      s(:lvar, :not_style), nil,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :not_pattern),
                          s(:lvasgn, :not_conv)),
                        s(:send, nil, :search,
                          s(:sym, :atype),
                          s(:const, nil, :FalseClass)))),
                    s(:lvasgn, :not_style,
                      s(:const,
                        s(:const, nil, :Switch), :NoArgument)),
                    s(:send,
                      s(:lvar, :nolong), :<<,
                      s(:send,
                        s(:str, "no-"), :+,
                        s(:lvar, :o))))),
                s(:when,
                  s(:regexp,
                    s(:str, "^--([^\\[\\]=\\s]*)(.+)?"),
                    s(:regopt)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :q),
                        s(:lvasgn, :a)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2))),
                    s(:if,
                      s(:lvar, :a),
                      s(:begin,
                        s(:lvasgn, :o,
                          s(:send, nil, :notwice,
                            s(:const, nil, :NilClass),
                            s(:lvar, :klass),
                            s(:str, "type"))),
                        s(:lvasgn, :default_style,
                          s(:send,
                            s(:lvar, :default_style), :guess,
                            s(:lvasgn, :arg,
                              s(:lvar, :a)))),
                        s(:if,
                          s(:lvar, :default_pattern), nil,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :default_pattern),
                              s(:lvasgn, :conv)),
                            s(:send, nil, :search,
                              s(:sym, :atype),
                              s(:lvar, :o))))), nil),
                    s(:send,
                      s(:lvar, :ldesc), :<<,
                      s(:dstr,
                        s(:str, "--"),
                        s(:begin,
                          s(:lvar, :q)))),
                    s(:send,
                      s(:lvar, :long), :<<,
                      s(:begin,
                        s(:lvasgn, :o,
                          s(:send,
                            s(:lvar, :q), :downcase)))))),
                s(:when,
                  s(:regexp,
                    s(:str, "^-(\\[\\^?\\]?(?:[^\\\\\\]]|\\\\.)*\\])(.+)?"),
                    s(:regopt)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :q),
                        s(:lvasgn, :a)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2))),
                    s(:lvasgn, :o,
                      s(:send, nil, :notwice,
                        s(:const, nil, :Object),
                        s(:lvar, :klass),
                        s(:str, "type"))),
                    s(:if,
                      s(:lvar, :a),
                      s(:begin,
                        s(:lvasgn, :default_style,
                          s(:send,
                            s(:lvar, :default_style), :guess,
                            s(:lvasgn, :arg,
                              s(:lvar, :a)))),
                        s(:if,
                          s(:lvar, :default_pattern), nil,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :default_pattern),
                              s(:lvasgn, :conv)),
                            s(:send, nil, :search,
                              s(:sym, :atype),
                              s(:lvar, :o))))),
                      s(:lvasgn, :has_arg,
                        s(:true))),
                    s(:send,
                      s(:lvar, :sdesc), :<<,
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :q)))),
                    s(:send,
                      s(:lvar, :short), :<<,
                      s(:send,
                        s(:const, nil, :Regexp), :new,
                        s(:lvar, :q))))),
                s(:when,
                  s(:regexp,
                    s(:str, "^-(.)(.+)?"),
                    s(:regopt)),
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :q),
                        s(:lvasgn, :a)),
                      s(:array,
                        s(:nth_ref, 1),
                        s(:nth_ref, 2))),
                    s(:if,
                      s(:lvar, :a),
                      s(:begin,
                        s(:lvasgn, :o,
                          s(:send, nil, :notwice,
                            s(:const, nil, :NilClass),
                            s(:lvar, :klass),
                            s(:str, "type"))),
                        s(:lvasgn, :default_style,
                          s(:send,
                            s(:lvar, :default_style), :guess,
                            s(:lvasgn, :arg,
                              s(:lvar, :a)))),
                        s(:if,
                          s(:lvar, :default_pattern), nil,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :default_pattern),
                              s(:lvasgn, :conv)),
                            s(:send, nil, :search,
                              s(:sym, :atype),
                              s(:lvar, :o))))), nil),
                    s(:send,
                      s(:lvar, :sdesc), :<<,
                      s(:dstr,
                        s(:str, "-"),
                        s(:begin,
                          s(:lvar, :q)))),
                    s(:send,
                      s(:lvar, :short), :<<,
                      s(:lvar, :q)))),
                s(:when,
                  s(:regexp,
                    s(:str, "^="),
                    s(:regopt)),
                  s(:begin,
                    s(:lvasgn, :style,
                      s(:send, nil, :notwice,
                        s(:send,
                          s(:lvar, :default_style), :guess,
                          s(:lvasgn, :arg,
                            s(:lvar, :o))),
                        s(:lvar, :style),
                        s(:str, "style"))),
                    s(:if,
                      s(:lvar, :default_pattern), nil,
                      s(:masgn,
                        s(:mlhs,
                          s(:lvasgn, :default_pattern),
                          s(:lvasgn, :conv)),
                        s(:send, nil, :search,
                          s(:sym, :atype),
                          s(:const, nil, :Object)))))),
                s(:send,
                  s(:lvar, :desc), :push,
                  s(:lvar, :o))))),
          s(:if,
            s(:lvar, :default_pattern), nil,
            s(:masgn,
              s(:mlhs,
                s(:lvasgn, :default_pattern),
                s(:lvasgn, :conv)),
              s(:send, nil, :search,
                s(:sym, :atype),
                s(:send,
                  s(:lvar, :default_style), :pattern)))),
          s(:if,
            s(:send,
              s(:begin,
                s(:and,
                  s(:send,
                    s(:lvar, :short), :empty?),
                  s(:send,
                    s(:lvar, :long), :empty?))), :!),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :has_arg),
                  s(:send,
                    s(:lvar, :default_style), :==,
                    s(:const,
                      s(:const, nil, :Switch), :NoArgument))),
                s(:lvasgn, :default_style,
                  s(:const,
                    s(:const, nil, :Switch), :RequiredArgument)), nil),
              s(:lvasgn, :s,
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:lvar, :style),
                      s(:lvar, :default_style))), :new,
                  s(:or,
                    s(:lvar, :pattern),
                    s(:lvar, :default_pattern)),
                  s(:lvar, :conv),
                  s(:lvar, :sdesc),
                  s(:lvar, :ldesc),
                  s(:lvar, :arg),
                  s(:lvar, :desc),
                  s(:lvar, :block)))),
            s(:if,
              s(:send,
                s(:lvar, :block), :!),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:lvar, :style),
                    s(:lvar, :pattern)),
                  s(:send, nil, :raise,
                    s(:const, nil, :ArgumentError),
                    s(:str, "no switch given"),
                    s(:send,
                      s(:const, nil, :ParseError), :filter_backtrace,
                      s(:send, nil, :caller))), nil),
                s(:lvasgn, :s,
                  s(:lvar, :desc))),
              s(:begin,
                s(:send,
                  s(:lvar, :short), :<<,
                  s(:lvar, :pattern)),
                s(:lvasgn, :s,
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:lvar, :style),
                        s(:lvar, :default_style))), :new,
                    s(:lvar, :pattern),
                    s(:lvar, :conv),
                    s(:nil),
                    s(:nil),
                    s(:lvar, :arg),
                    s(:lvar, :desc),
                    s(:lvar, :block)))))),
          s(:return,
            s(:lvar, :s),
            s(:lvar, :short),
            s(:lvar, :long),
            s(:begin,
              s(:if,
                s(:lvar, :not_style),
                s(:send,
                  s(:lvar, :not_style), :new,
                  s(:lvar, :not_pattern),
                  s(:lvar, :not_conv),
                  s(:lvar, :sdesc),
                  s(:lvar, :ldesc),
                  s(:nil),
                  s(:lvar, :desc),
                  s(:lvar, :block)), nil)),
            s(:lvar, :nolong)))),
      s(:def, :define,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:begin,
          s(:send,
            s(:send, nil, :top), :append,
            s(:splat,
              s(:begin,
                s(:lvasgn, :sw,
                  s(:send, nil, :make_switch,
                    s(:lvar, :opts),
                    s(:lvar, :block)))))),
          s(:send,
            s(:lvar, :sw), :[],
            s(:int, 0)))),
      s(:def, :on,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:begin,
          s(:send, nil, :define,
            s(:splat,
              s(:lvar, :opts)),
            s(:block_pass,
              s(:lvar, :block))),
          s(:self))),
      s(:alias,
        s(:sym, :def_option),
        s(:sym, :define)),
      s(:def, :define_head,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:begin,
          s(:send,
            s(:send, nil, :top), :prepend,
            s(:splat,
              s(:begin,
                s(:lvasgn, :sw,
                  s(:send, nil, :make_switch,
                    s(:lvar, :opts),
                    s(:lvar, :block)))))),
          s(:send,
            s(:lvar, :sw), :[],
            s(:int, 0)))),
      s(:def, :on_head,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:begin,
          s(:send, nil, :define_head,
            s(:splat,
              s(:lvar, :opts)),
            s(:block_pass,
              s(:lvar, :block))),
          s(:self))),
      s(:alias,
        s(:sym, :def_head_option),
        s(:sym, :define_head)),
      s(:def, :define_tail,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:begin,
          s(:send,
            s(:send, nil, :base), :append,
            s(:splat,
              s(:begin,
                s(:lvasgn, :sw,
                  s(:send, nil, :make_switch,
                    s(:lvar, :opts),
                    s(:lvar, :block)))))),
          s(:send,
            s(:lvar, :sw), :[],
            s(:int, 0)))),
      s(:def, :on_tail,
        s(:args,
          s(:restarg, :opts),
          s(:blockarg, :block)),
        s(:begin,
          s(:send, nil, :define_tail,
            s(:splat,
              s(:lvar, :opts)),
            s(:block_pass,
              s(:lvar, :block))),
          s(:self))),
      s(:alias,
        s(:sym, :def_tail_option),
        s(:sym, :define_tail)),
      s(:def, :separator,
        s(:args,
          s(:arg, :string)),
        s(:send,
          s(:send, nil, :top), :append,
          s(:lvar, :string),
          s(:nil),
          s(:nil))),
      s(:def, :order,
        s(:args,
          s(:restarg, :argv),
          s(:blockarg, :block)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :argv), :size), :==,
                s(:int, 1)),
              s(:send,
                s(:const, nil, :Array), :===,
                s(:send,
                  s(:lvar, :argv), :[],
                  s(:int, 0)))),
            s(:lvasgn, :argv,
              s(:send,
                s(:send,
                  s(:lvar, :argv), :[],
                  s(:int, 0)), :dup)), nil),
          s(:send, nil, :order!,
            s(:lvar, :argv),
            s(:block_pass,
              s(:lvar, :block))))),
      s(:def, :order!,
        s(:args,
          s(:optarg, :argv,
            s(:send, nil, :default_argv)),
          s(:blockarg, :nonopt)),
        s(:send, nil, :parse_in_order,
          s(:lvar, :argv),
          s(:block_pass,
            s(:lvar, :nonopt)))),
      s(:def, :parse_in_order,
        s(:args,
          s(:optarg, :argv,
            s(:send, nil, :default_argv)),
          s(:optarg, :setter,
            s(:nil)),
          s(:blockarg, :nonopt)),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :opt),
              s(:lvasgn, :arg),
              s(:lvasgn, :val),
              s(:lvasgn, :rest)),
            s(:nil)),
          s(:or_asgn,
            s(:lvasgn, :nonopt),
            s(:block,
              s(:send, nil, :proc),
              s(:args,
                s(:arg, :a)),
              s(:send, nil, :throw,
                s(:sym, :terminate),
                s(:lvar, :a)))),
          s(:if,
            s(:lvasgn, :arg,
              s(:block,
                s(:send, nil, :catch,
                  s(:sym, :terminate)),
                s(:args),
                s(:begin,
                  s(:while,
                    s(:lvasgn, :arg,
                      s(:send,
                        s(:lvar, :argv), :shift)),
                    s(:case,
                      s(:lvar, :arg),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A--([^=]*)(?:=(.*))?"),
                          s(:regopt, :m)),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :opt),
                              s(:lvasgn, :rest)),
                            s(:array,
                              s(:nth_ref, 1),
                              s(:nth_ref, 2))),
                          s(:kwbegin,
                            s(:rescue,
                              s(:masgn,
                                s(:mlhs,
                                  s(:lvasgn, :sw)),
                                s(:send, nil, :complete,
                                  s(:sym, :long),
                                  s(:lvar, :opt),
                                  s(:true))),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :ParseError)), nil,
                                s(:send, nil, :raise,
                                  s(:send,
                                    s(:gvar, :$!), :set_option,
                                    s(:lvar, :arg),
                                    s(:true)))), nil)),
                          s(:kwbegin,
                            s(:rescue,
                              s(:begin,
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :opt),
                                    s(:lvasgn, :cb),
                                    s(:lvasgn, :val)),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :sw), :parse,
                                      s(:lvar, :rest),
                                      s(:lvar, :argv)),
                                    s(:args,
                                      s(:restarg, :exc)),
                                    s(:send, nil, :raise,
                                      s(:splat,
                                        s(:lvar, :exc))))),
                                s(:if,
                                  s(:lvar, :cb),
                                  s(:lvasgn, :val,
                                    s(:send,
                                      s(:lvar, :cb), :call,
                                      s(:lvar, :val))), nil),
                                s(:if,
                                  s(:lvar, :setter),
                                  s(:send,
                                    s(:lvar, :setter), :call,
                                    s(:send,
                                      s(:lvar, :sw), :switch_name),
                                    s(:lvar, :val)), nil)),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :ParseError)), nil,
                                s(:send, nil, :raise,
                                  s(:send,
                                    s(:gvar, :$!), :set_option,
                                    s(:lvar, :arg),
                                    s(:lvar, :rest)))), nil)))),
                      s(:when,
                        s(:regexp,
                          s(:str, "\\A-(.)((=).*|.+)?"),
                          s(:regopt, :m)),
                        s(:begin,
                          s(:masgn,
                            s(:mlhs,
                              s(:lvasgn, :opt),
                              s(:lvasgn, :has_arg),
                              s(:lvasgn, :eq),
                              s(:lvasgn, :val),
                              s(:lvasgn, :rest)),
                            s(:array,
                              s(:nth_ref, 1),
                              s(:nth_ref, 3),
                              s(:nth_ref, 3),
                              s(:nth_ref, 2),
                              s(:nth_ref, 2))),
                          s(:kwbegin,
                            s(:rescue,
                              s(:begin,
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :sw)),
                                  s(:send, nil, :search,
                                    s(:sym, :short),
                                    s(:lvar, :opt))),
                                s(:if,
                                  s(:lvar, :sw), nil,
                                  s(:kwbegin,
                                    s(:rescue,
                                      s(:begin,
                                        s(:masgn,
                                          s(:mlhs,
                                            s(:lvasgn, :sw)),
                                          s(:send, nil, :complete,
                                            s(:sym, :short),
                                            s(:lvar, :opt))),
                                        s(:lvasgn, :val,
                                          s(:send,
                                            s(:lvar, :arg), :sub,
                                            s(:regexp,
                                              s(:str, "\\A-"),
                                              s(:regopt)),
                                            s(:str, ""))),
                                        s(:lvasgn, :has_arg,
                                          s(:true))),
                                      s(:resbody,
                                        s(:array,
                                          s(:const, nil, :InvalidOption)), nil,
                                        s(:begin,
                                          s(:masgn,
                                            s(:mlhs,
                                              s(:lvasgn, :sw)),
                                            s(:send, nil, :complete,
                                              s(:sym, :long),
                                              s(:lvar, :opt))),
                                          s(:or_asgn,
                                            s(:lvasgn, :eq),
                                            s(:send,
                                              s(:lvar, :rest), :!)))), nil)))),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :ParseError)), nil,
                                s(:send, nil, :raise,
                                  s(:send,
                                    s(:gvar, :$!), :set_option,
                                    s(:lvar, :arg),
                                    s(:true)))), nil)),
                          s(:kwbegin,
                            s(:rescue,
                              s(:begin,
                                s(:masgn,
                                  s(:mlhs,
                                    s(:lvasgn, :opt),
                                    s(:lvasgn, :cb),
                                    s(:lvasgn, :val)),
                                  s(:block,
                                    s(:send,
                                      s(:lvar, :sw), :parse,
                                      s(:lvar, :val),
                                      s(:lvar, :argv)),
                                    s(:args,
                                      s(:restarg, :exc)),
                                    s(:if,
                                      s(:lvar, :eq),
                                      s(:send, nil, :raise,
                                        s(:splat,
                                          s(:lvar, :exc))), nil))),
                                s(:if,
                                  s(:and,
                                    s(:and,
                                      s(:lvar, :has_arg),
                                      s(:send,
                                        s(:lvar, :eq), :!)),
                                    s(:send,
                                      s(:lvar, :arg), :==,
                                      s(:dstr,
                                        s(:str, "-"),
                                        s(:begin,
                                          s(:lvar, :opt))))),
                                  s(:send, nil, :raise,
                                    s(:const, nil, :InvalidOption),
                                    s(:lvar, :arg)), nil),
                                s(:if,
                                  s(:and,
                                    s(:lvar, :opt),
                                    s(:begin,
                                      s(:or,
                                        s(:send,
                                          s(:lvar, :rest), :!),
                                        s(:send,
                                          s(:begin,
                                            s(:lvasgn, :opt,
                                              s(:send,
                                                s(:lvar, :opt), :sub,
                                                s(:regexp,
                                                  s(:str, "\\A-*"),
                                                  s(:regopt)),
                                                s(:str, "-")))), :!=,
                                          s(:str, "-"))))),
                                  s(:send,
                                    s(:lvar, :argv), :unshift,
                                    s(:lvar, :opt)), nil),
                                s(:if,
                                  s(:lvar, :cb),
                                  s(:lvasgn, :val,
                                    s(:send,
                                      s(:lvar, :cb), :call,
                                      s(:lvar, :val))), nil),
                                s(:if,
                                  s(:lvar, :setter),
                                  s(:send,
                                    s(:lvar, :setter), :call,
                                    s(:send,
                                      s(:lvar, :sw), :switch_name),
                                    s(:lvar, :val)), nil)),
                              s(:resbody,
                                s(:array,
                                  s(:const, nil, :ParseError)), nil,
                                s(:send, nil, :raise,
                                  s(:send,
                                    s(:gvar, :$!), :set_option,
                                    s(:lvar, :arg),
                                    s(:send,
                                      s(:send,
                                        s(:lvar, :arg), :length), :>,
                                      s(:int, 2))))), nil)))),
                      s(:block,
                        s(:send, nil, :catch,
                          s(:sym, :prune)),
                        s(:args),
                        s(:begin,
                          s(:block,
                            s(:send, nil, :visit,
                              s(:sym, :each_option)),
                            s(:args,
                              s(:arg, :sw0)),
                            s(:begin,
                              s(:lvasgn, :sw,
                                s(:lvar, :sw0)),
                              s(:if,
                                s(:and,
                                  s(:send,
                                    s(:const, nil, :Switch), :===,
                                    s(:lvar, :sw)),
                                  s(:send,
                                    s(:lvar, :sw), :match_nonswitch?,
                                    s(:lvar, :arg))),
                                s(:send,
                                  s(:send,
                                    s(:lvar, :sw), :block), :call,
                                  s(:lvar, :arg)), nil))),
                          s(:send,
                            s(:lvar, :nonopt), :call,
                            s(:lvar, :arg)))))),
                  s(:nil)))),
            s(:send,
              s(:lvar, :argv), :unshift,
              s(:lvar, :arg)), nil),
          s(:block,
            s(:send, nil, :visit,
              s(:sym, :search),
              s(:sym, :short),
              s(:nil)),
            s(:args,
              s(:arg, :sw)),
            s(:if,
              s(:send,
                s(:send,
                  s(:lvar, :sw), :pattern), :!),
              s(:send,
                s(:send,
                  s(:lvar, :sw), :block), :call,
                s(:splat,
                  s(:lvar, :argv))), nil)),
          s(:lvar, :argv))),
      s(:send, nil, :private,
        s(:sym, :parse_in_order)),
      s(:def, :permute,
        s(:args,
          s(:restarg, :argv)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :argv), :size), :==,
                s(:int, 1)),
              s(:send,
                s(:const, nil, :Array), :===,
                s(:send,
                  s(:lvar, :argv), :[],
                  s(:int, 0)))),
            s(:lvasgn, :argv,
              s(:send,
                s(:send,
                  s(:lvar, :argv), :[],
                  s(:int, 0)), :dup)), nil),
          s(:send, nil, :permute!,
            s(:lvar, :argv)))),
      s(:def, :permute!,
        s(:args,
          s(:optarg, :argv,
            s(:send, nil, :default_argv))),
        s(:begin,
          s(:lvasgn, :nonopts,
            s(:array)),
          s(:send, nil, :order!,
            s(:lvar, :argv),
            s(:block_pass,
              s(:send,
                s(:lvar, :nonopts), :method,
                s(:sym, :<<)))),
          s(:send,
            s(:lvar, :argv), :[]=,
            s(:int, 0),
            s(:int, 0),
            s(:lvar, :nonopts)),
          s(:lvar, :argv))),
      s(:def, :parse,
        s(:args,
          s(:restarg, :argv)),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send,
                  s(:lvar, :argv), :size), :==,
                s(:int, 1)),
              s(:send,
                s(:const, nil, :Array), :===,
                s(:send,
                  s(:lvar, :argv), :[],
                  s(:int, 0)))),
            s(:lvasgn, :argv,
              s(:send,
                s(:send,
                  s(:lvar, :argv), :[],
                  s(:int, 0)), :dup)), nil),
          s(:send, nil, :parse!,
            s(:lvar, :argv)))),
      s(:def, :parse!,
        s(:args,
          s(:optarg, :argv,
            s(:send, nil, :default_argv))),
        s(:if,
          s(:send,
            s(:const, nil, :ENV), :include?,
            s(:str, "POSIXLY_CORRECT")),
          s(:send, nil, :order!,
            s(:lvar, :argv)),
          s(:send, nil, :permute!,
            s(:lvar, :argv)))),
      s(:def, :getopts,
        s(:args,
          s(:restarg, :args)),
        s(:begin,
          s(:lvasgn, :argv,
            s(:if,
              s(:send,
                s(:const, nil, :Array), :===,
                s(:send,
                  s(:lvar, :args), :first)),
              s(:send,
                s(:lvar, :args), :shift),
              s(:send, nil, :default_argv))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :single_options),
              s(:splat,
                s(:lvasgn, :long_options))),
            s(:array,
              s(:splat,
                s(:lvar, :args)))),
          s(:lvasgn, :result,
            s(:hash)),
          s(:if,
            s(:lvar, :single_options),
            s(:block,
              s(:send,
                s(:lvar, :single_options), :scan,
                s(:regexp,
                  s(:str, "(.)(:)?"),
                  s(:regopt))),
              s(:args,
                s(:arg, :opt),
                s(:arg, :val)),
              s(:if,
                s(:lvar, :val),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :opt),
                    s(:nil)),
                  s(:send, nil, :define,
                    s(:dstr,
                      s(:str, "-"),
                      s(:begin,
                        s(:lvar, :opt)),
                      s(:str, " VAL")))),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :opt),
                    s(:false)),
                  s(:send, nil, :define,
                    s(:dstr,
                      s(:str, "-"),
                      s(:begin,
                        s(:lvar, :opt))))))), nil),
          s(:block,
            s(:send,
              s(:lvar, :long_options), :each),
            s(:args,
              s(:arg, :arg)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :arg),
                  s(:lvasgn, :desc)),
                s(:send,
                  s(:lvar, :arg), :split,
                  s(:str, ";"),
                  s(:int, 2))),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :opt),
                  s(:lvasgn, :val)),
                s(:send,
                  s(:lvar, :arg), :split,
                  s(:str, ":"),
                  s(:int, 2))),
              s(:if,
                s(:lvar, :val),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :opt),
                    s(:if,
                      s(:send,
                        s(:lvar, :val), :empty?),
                      s(:nil),
                      s(:lvar, :val))),
                  s(:send, nil, :define,
                    s(:dstr,
                      s(:str, "--"),
                      s(:begin,
                        s(:lvar, :opt)),
                      s(:str, "="),
                      s(:begin,
                        s(:or,
                          s(:send,
                            s(:lvar, :result), :[],
                            s(:lvar, :opt)),
                          s(:str, "VAL")))),
                    s(:splat,
                      s(:send,
                        s(:array,
                          s(:lvar, :desc)), :compact)))),
                s(:begin,
                  s(:send,
                    s(:lvar, :result), :[]=,
                    s(:lvar, :opt),
                    s(:false)),
                  s(:send, nil, :define,
                    s(:dstr,
                      s(:str, "--"),
                      s(:begin,
                        s(:lvar, :opt))),
                    s(:splat,
                      s(:send,
                        s(:array,
                          s(:lvar, :desc)), :compact))))))),
          s(:send, nil, :parse_in_order,
            s(:lvar, :argv),
            s(:send,
              s(:lvar, :result), :method,
              s(:sym, :[]=))),
          s(:lvar, :result))),
      s(:defs,
        s(:self), :getopts,
        s(:args,
          s(:restarg, :args)),
        s(:send,
          s(:send, nil, :new), :getopts,
          s(:splat,
            s(:lvar, :args)))),
      s(:def, :visit,
        s(:args,
          s(:arg, :id),
          s(:restarg, :args),
          s(:blockarg, :block)),
        s(:begin,
          s(:block,
            s(:send,
              s(:ivar, :@stack), :reverse_each),
            s(:args,
              s(:arg, :el)),
            s(:send,
              s(:lvar, :el), :send,
              s(:lvar, :id),
              s(:splat,
                s(:lvar, :args)),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:nil))),
      s(:send, nil, :private,
        s(:sym, :visit)),
      s(:def, :search,
        s(:args,
          s(:arg, :id),
          s(:arg, :key)),
        s(:begin,
          s(:lvasgn, :block_given,
            s(:send, nil, :block_given?)),
          s(:block,
            s(:send, nil, :visit,
              s(:sym, :search),
              s(:lvar, :id),
              s(:lvar, :key)),
            s(:args,
              s(:arg, :k)),
            s(:return,
              s(:if,
                s(:lvar, :block_given),
                s(:yield,
                  s(:lvar, :k)),
                s(:lvar, :k)))))),
      s(:send, nil, :private,
        s(:sym, :search)),
      s(:def, :complete,
        s(:args,
          s(:arg, :typ),
          s(:arg, :opt),
          s(:optarg, :icase,
            s(:false)),
          s(:restarg, :pat)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :pat), :empty?),
            s(:block,
              s(:send, nil, :search,
                s(:lvar, :typ),
                s(:lvar, :opt)),
              s(:args,
                s(:arg, :sw)),
              s(:return,
                s(:array,
                  s(:lvar, :sw),
                  s(:lvar, :opt)))), nil),
          s(:send, nil, :raise,
            s(:const, nil, :AmbiguousOption),
            s(:block,
              s(:send, nil, :catch,
                s(:sym, :ambiguous)),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send, nil, :visit,
                    s(:sym, :complete),
                    s(:lvar, :typ),
                    s(:lvar, :opt),
                    s(:lvar, :icase),
                    s(:splat,
                      s(:lvar, :pat))),
                  s(:args,
                    s(:arg, :o),
                    s(:restarg, :sw)),
                  s(:return,
                    s(:lvar, :sw))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidOption),
                  s(:lvar, :opt))))))),
      s(:send, nil, :private,
        s(:sym, :complete)),
      s(:def, :candidate,
        s(:args,
          s(:arg, :word)),
        s(:begin,
          s(:lvasgn, :list,
            s(:array)),
          s(:case,
            s(:lvar, :word),
            s(:when,
              s(:regexp,
                s(:str, "\\A--"),
                s(:regopt)),
              s(:begin,
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :word),
                    s(:lvasgn, :arg)),
                  s(:send,
                    s(:lvar, :word), :split,
                    s(:regexp,
                      s(:str, "="),
                      s(:regopt)),
                    s(:int, 2))),
                s(:if,
                  s(:and,
                    s(:lvar, :arg),
                    s(:send,
                      s(:send,
                        s(:lvar, :arg), :empty?), :!)),
                  s(:lvasgn, :argpat,
                    s(:send,
                      s(:const, nil, :Completion), :regexp,
                      s(:lvar, :arg),
                      s(:false))), nil),
                s(:lvasgn, :long,
                  s(:true)))),
            s(:when,
              s(:regexp,
                s(:str, "\\A-(!-)"),
                s(:regopt)),
              s(:lvasgn, :short,
                s(:true))),
            s(:when,
              s(:regexp,
                s(:str, "\\A-"),
                s(:regopt)),
              s(:lvasgn, :long,
                s(:lvasgn, :short,
                  s(:true)))), nil),
          s(:lvasgn, :pat,
            s(:send,
              s(:const, nil, :Completion), :regexp,
              s(:lvar, :word),
              s(:true))),
          s(:block,
            s(:send, nil, :visit,
              s(:sym, :each_option)),
            s(:args,
              s(:arg, :opt)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:const, nil, :Switch), :===,
                  s(:lvar, :opt)), nil,
                s(:next)),
              s(:lvasgn, :opts,
                s(:send,
                  s(:begin,
                    s(:if,
                      s(:lvar, :long),
                      s(:send,
                        s(:lvar, :opt), :long),
                      s(:array))), :+,
                  s(:begin,
                    s(:if,
                      s(:lvar, :short),
                      s(:send,
                        s(:lvar, :opt), :short),
                      s(:array))))),
              s(:if,
                s(:lvar, :pat),
                s(:lvasgn, :opts,
                  s(:send,
                    s(:send,
                      s(:const, nil, :Completion), :candidate,
                      s(:lvar, :word),
                      s(:true),
                      s(:lvar, :pat),
                      s(:block_pass,
                        s(:send,
                          s(:lvar, :opts), :method,
                          s(:sym, :each)))), :map,
                    s(:block_pass,
                      s(:sym, :first)))), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A="),
                    s(:regopt)),
                  s(:send,
                    s(:lvar, :opt), :arg)),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :opts), :map!),
                    s(:args,
                      s(:arg, :sw)),
                    s(:send,
                      s(:lvar, :sw), :+,
                      s(:str, "="))),
                  s(:if,
                    s(:and,
                      s(:lvar, :arg),
                      s(:send,
                        s(:const, nil, :CompletingHash), :===,
                        s(:send,
                          s(:lvar, :opt), :pattern))),
                    s(:if,
                      s(:lvasgn, :opts,
                        s(:send,
                          s(:send,
                            s(:lvar, :opt), :pattern), :candidate,
                          s(:lvar, :arg),
                          s(:false),
                          s(:lvar, :argpat))),
                      s(:send,
                        s(:lvar, :opts), :map!,
                        s(:block_pass,
                          s(:sym, :last))), nil), nil)), nil),
              s(:send,
                s(:lvar, :list), :concat,
                s(:lvar, :opts)))),
          s(:lvar, :list))),
      s(:def, :load,
        s(:args,
          s(:optarg, :filename,
            s(:nil))),
        s(:begin,
          s(:kwbegin,
            s(:rescue,
              s(:or_asgn,
                s(:lvasgn, :filename),
                s(:send,
                  s(:const, nil, :File), :expand_path,
                  s(:send,
                    s(:const, nil, :File), :basename,
                    s(:gvar, :$0),
                    s(:str, ".*")),
                  s(:str, "~/.options"))),
              s(:resbody, nil, nil,
                s(:return,
                  s(:false))), nil)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :parse,
                  s(:splat,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:const, nil, :IO), :readlines,
                          s(:lvar, :filename)), :each),
                      s(:args,
                        s(:arg, :s)),
                      s(:send,
                        s(:lvar, :s), :chomp!)))),
                s(:true)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT),
                  s(:const,
                    s(:const, nil, :Errno), :ENOTDIR)), nil,
                s(:false)), nil)))),
      s(:def, :environment,
        s(:args,
          s(:optarg, :env,
            s(:send,
              s(:const, nil, :File), :basename,
              s(:gvar, :$0),
              s(:str, ".*")))),
        s(:begin,
          s(:or,
            s(:lvasgn, :env,
              s(:or,
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:lvar, :env)),
                s(:send,
                  s(:const, nil, :ENV), :[],
                  s(:send,
                    s(:lvar, :env), :upcase)))),
            s(:return)),
          s(:send, nil, :require,
            s(:str, "shellwords")),
          s(:send, nil, :parse,
            s(:splat,
              s(:send,
                s(:const, nil, :Shellwords), :shellwords,
                s(:lvar, :env)))))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :Object)),
        s(:args,
          s(:arg, :s)),
        s(:or,
          s(:lvar, :s),
          s(:send,
            s(:lvar, :s), :nil?))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :NilClass)),
        s(:args,
          s(:arg, :s)),
        s(:lvar, :s)),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :String),
          s(:regexp,
            s(:str, ".+"),
            s(:regopt, :m))),
        s(:args,
          s(:arg, :s),
          s(:restarg)),
        s(:lvar, :s)),
      s(:lvasgn, :decimal,
        s(:str, "\\d+(?:_\\d+)*")),
      s(:lvasgn, :binary,
        s(:str, "b[01]+(?:_[01]+)*")),
      s(:lvasgn, :hex,
        s(:str, "x[\\da-f]+(?:_[\\da-f]+)*")),
      s(:lvasgn, :octal,
        s(:dstr,
          s(:str, "0(?:[0-7]+(?:_[0-7]+)*|"),
          s(:begin,
            s(:lvar, :binary)),
          s(:str, "|"),
          s(:begin,
            s(:lvar, :hex)),
          s(:str, ")?"))),
      s(:lvasgn, :integer,
        s(:dstr,
          s(:begin,
            s(:lvar, :octal)),
          s(:str, "|"),
          s(:begin,
            s(:lvar, :decimal)))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :Integer),
          s(:regexp,
            s(:str, "\\A[-+]?(?:"),
            s(:begin,
              s(:lvar, :integer)),
            s(:str, ")\\z"),
            s(:regopt, :i, :o))),
        s(:args,
          s(:arg, :s)),
        s(:if,
          s(:lvar, :s),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :Integer,
                s(:lvar, :s)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument),
                  s(:lvar, :s))), nil)), nil)),
      s(:lvasgn, :float,
        s(:dstr,
          s(:str, "(?:"),
          s(:begin,
            s(:lvar, :decimal)),
          s(:str, "(?:\\.(?:"),
          s(:begin,
            s(:lvar, :decimal)),
          s(:str, ")?)?|\\."),
          s(:begin,
            s(:lvar, :decimal)),
          s(:str, ")(?:E[-+]?"),
          s(:begin,
            s(:lvar, :decimal)),
          s(:str, ")?"))),
      s(:lvasgn, :floatpat,
        s(:regexp,
          s(:str, "\\A[-+]?"),
          s(:begin,
            s(:lvar, :float)),
          s(:str, "\\z"),
          s(:regopt, :i, :o))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :Float),
          s(:lvar, :floatpat)),
        s(:args,
          s(:arg, :s)),
        s(:if,
          s(:lvar, :s),
          s(:send,
            s(:lvar, :s), :to_f), nil)),
      s(:lvasgn, :real,
        s(:dstr,
          s(:str, "[-+]?(?:"),
          s(:begin,
            s(:lvar, :octal)),
          s(:str, "|"),
          s(:begin,
            s(:lvar, :float)),
          s(:str, ")"))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :Numeric),
          s(:regexp,
            s(:str, "\\A("),
            s(:begin,
              s(:lvar, :real)),
            s(:str, ")(?:/("),
            s(:begin,
              s(:lvar, :real)),
            s(:str, "))?\\z"),
            s(:regopt, :i, :o))),
        s(:args,
          s(:arg, :s),
          s(:arg, :d),
          s(:arg, :n)),
        s(:if,
          s(:lvar, :n),
          s(:send, nil, :Rational,
            s(:lvar, :d),
            s(:lvar, :n)),
          s(:if,
            s(:lvar, :s),
            s(:send, nil, :eval,
              s(:lvar, :s)), nil))),
      s(:casgn, nil, :DecimalInteger,
        s(:regexp,
          s(:str, "\\A[-+]?"),
          s(:begin,
            s(:lvar, :decimal)),
          s(:str, "\\z"),
          s(:regopt, :i, :o))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :DecimalInteger),
          s(:const, nil, :DecimalInteger)),
        s(:args,
          s(:arg, :s)),
        s(:if,
          s(:lvar, :s),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :Integer,
                s(:lvar, :s)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument),
                  s(:lvar, :s))), nil)), nil)),
      s(:casgn, nil, :OctalInteger,
        s(:regexp,
          s(:str, "\\A[-+]?(?:[0-7]+(?:_[0-7]+)*|0(?:"),
          s(:begin,
            s(:lvar, :binary)),
          s(:str, "|"),
          s(:begin,
            s(:lvar, :hex)),
          s(:str, "))\\z"),
          s(:regopt, :i, :o))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :OctalInteger),
          s(:const, nil, :OctalInteger)),
        s(:args,
          s(:arg, :s)),
        s(:if,
          s(:lvar, :s),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :Integer,
                s(:lvar, :s),
                s(:int, 8)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :ArgumentError)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument),
                  s(:lvar, :s))), nil)), nil)),
      s(:casgn, nil, :DecimalNumeric,
        s(:lvar, :floatpat)),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :DecimalNumeric),
          s(:lvar, :floatpat)),
        s(:args,
          s(:arg, :s)),
        s(:if,
          s(:lvar, :s),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :eval,
                s(:lvar, :s)),
              s(:resbody,
                s(:array,
                  s(:const, nil, :SyntaxError)), nil,
                s(:send, nil, :raise,
                  s(:const,
                    s(:const, nil, :OptionParser), :InvalidArgument),
                  s(:lvar, :s))), nil)), nil)),
      s(:lvasgn, :yesno,
        s(:send,
          s(:const, nil, :CompletingHash), :new)),
      s(:block,
        s(:send,
          s(:array,
            s(:str, "-"),
            s(:str, "no"),
            s(:str, "false")), :each),
        s(:args,
          s(:arg, :el)),
        s(:send,
          s(:lvar, :yesno), :[]=,
          s(:lvar, :el),
          s(:false))),
      s(:block,
        s(:send,
          s(:array,
            s(:str, "+"),
            s(:str, "yes"),
            s(:str, "true")), :each),
        s(:args,
          s(:arg, :el)),
        s(:send,
          s(:lvar, :yesno), :[]=,
          s(:lvar, :el),
          s(:true))),
      s(:send,
        s(:lvar, :yesno), :[]=,
        s(:str, "nil"),
        s(:false)),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :TrueClass),
          s(:lvar, :yesno)),
        s(:args,
          s(:arg, :arg),
          s(:arg, :val)),
        s(:or,
          s(:send,
            s(:lvar, :val), :==,
            s(:nil)),
          s(:lvar, :val))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :FalseClass),
          s(:lvar, :yesno)),
        s(:args,
          s(:arg, :arg),
          s(:arg, :val)),
        s(:and,
          s(:send,
            s(:lvar, :val), :!=,
            s(:nil)),
          s(:lvar, :val))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :Array)),
        s(:args,
          s(:arg, :s)),
        s(:begin,
          s(:if,
            s(:lvar, :s),
            s(:lvasgn, :s,
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :s), :split,
                    s(:str, ",")), :collect),
                s(:args,
                  s(:arg, :ss)),
                s(:if,
                  s(:send,
                    s(:lvar, :ss), :empty?), nil,
                  s(:lvar, :ss)))), nil),
          s(:lvar, :s))),
      s(:block,
        s(:send, nil, :accept,
          s(:const, nil, :Regexp),
          s(:regexp,
            s(:str, "\\A/((?:\\\\.|[^\\\\])*)/([[:alpha:]]+)?\\z|.*"),
            s(:regopt))),
        s(:args,
          s(:arg, :all),
          s(:arg, :s),
          s(:arg, :o)),
        s(:begin,
          s(:lvasgn, :f,
            s(:int, 0)),
          s(:if,
            s(:lvar, :o),
            s(:begin,
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "i"),
                    s(:regopt)),
                  s(:lvar, :o)),
                s(:op_asgn,
                  s(:lvasgn, :f), :|,
                  s(:const,
                    s(:const, nil, :Regexp), :IGNORECASE)), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "m"),
                    s(:regopt)),
                  s(:lvar, :o)),
                s(:op_asgn,
                  s(:lvasgn, :f), :|,
                  s(:const,
                    s(:const, nil, :Regexp), :MULTILINE)), nil),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "x"),
                    s(:regopt)),
                  s(:lvar, :o)),
                s(:op_asgn,
                  s(:lvasgn, :f), :|,
                  s(:const,
                    s(:const, nil, :Regexp), :EXTENDED)), nil),
              s(:lvasgn, :k,
                s(:send,
                  s(:lvar, :o), :delete,
                  s(:str, "imx"))),
              s(:if,
                s(:send,
                  s(:lvar, :k), :empty?),
                s(:lvasgn, :k,
                  s(:nil)), nil)), nil),
          s(:send,
            s(:const, nil, :Regexp), :new,
            s(:or,
              s(:lvar, :s),
              s(:lvar, :all)),
            s(:lvar, :f),
            s(:lvar, :k)))),
      s(:class,
        s(:const, nil, :ParseError),
        s(:const, nil, :RuntimeError),
        s(:begin,
          s(:casgn, nil, :Reason,
            s(:send,
              s(:str, "parse error"), :freeze)),
          s(:def, :initialize,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:ivasgn, :@args,
                s(:lvar, :args)),
              s(:ivasgn, :@reason,
                s(:nil)))),
          s(:send, nil, :attr_reader,
            s(:sym, :args)),
          s(:send, nil, :attr_writer,
            s(:sym, :reason)),
          s(:def, :recover,
            s(:args,
              s(:arg, :argv)),
            s(:begin,
              s(:send,
                s(:lvar, :argv), :[]=,
                s(:int, 0),
                s(:int, 0),
                s(:ivar, :@args)),
              s(:lvar, :argv))),
          s(:defs,
            s(:self), :filter_backtrace,
            s(:args,
              s(:arg, :array)),
            s(:begin,
              s(:if,
                s(:gvar, :$DEBUG), nil,
                s(:send,
                  s(:lvar, :array), :delete_if,
                  s(:block_pass,
                    s(:send,
                      s(:regexp,
                        s(:str, "\\A"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Regexp), :quote,
                            s(:str, "(string)"))),
                        s(:str, ":"),
                        s(:regopt, :o)), :method,
                      s(:sym, :=~))))),
              s(:lvar, :array))),
          s(:def, :set_backtrace,
            s(:args,
              s(:arg, :array)),
            s(:super,
              s(:send,
                s(:send,
                  s(:self), :class), :filter_backtrace,
                s(:lvar, :array)))),
          s(:def, :set_option,
            s(:args,
              s(:arg, :opt),
              s(:arg, :eq)),
            s(:begin,
              s(:if,
                s(:lvar, :eq),
                s(:send,
                  s(:ivar, :@args), :[]=,
                  s(:int, 0),
                  s(:lvar, :opt)),
                s(:send,
                  s(:ivar, :@args), :unshift,
                  s(:lvar, :opt))),
              s(:self))),
          s(:def, :reason,
            s(:args),
            s(:or,
              s(:ivar, :@reason),
              s(:const,
                s(:send,
                  s(:self), :class), :Reason))),
          s(:def, :inspect,
            s(:args),
            s(:dstr,
              s(:str, "#<"),
              s(:begin,
                s(:send,
                  s(:self), :class)),
              s(:str, ": "),
              s(:begin,
                s(:send,
                  s(:send, nil, :args), :join,
                  s(:str, " "))),
              s(:str, ">"))),
          s(:def, :message,
            s(:args),
            s(:send,
              s(:send,
                s(:send, nil, :reason), :+,
                s(:str, ": ")), :+,
              s(:send,
                s(:send, nil, :args), :join,
                s(:str, " ")))),
          s(:alias,
            s(:sym, :to_s),
            s(:sym, :message)))),
      s(:class,
        s(:const, nil, :AmbiguousOption),
        s(:const, nil, :ParseError),
        s(:send, nil, :const_set,
          s(:sym, :Reason),
          s(:send,
            s(:str, "ambiguous option"), :freeze))),
      s(:class,
        s(:const, nil, :NeedlessArgument),
        s(:const, nil, :ParseError),
        s(:send, nil, :const_set,
          s(:sym, :Reason),
          s(:send,
            s(:str, "needless argument"), :freeze))),
      s(:class,
        s(:const, nil, :MissingArgument),
        s(:const, nil, :ParseError),
        s(:send, nil, :const_set,
          s(:sym, :Reason),
          s(:send,
            s(:str, "missing argument"), :freeze))),
      s(:class,
        s(:const, nil, :InvalidOption),
        s(:const, nil, :ParseError),
        s(:send, nil, :const_set,
          s(:sym, :Reason),
          s(:send,
            s(:str, "invalid option"), :freeze))),
      s(:class,
        s(:const, nil, :InvalidArgument),
        s(:const, nil, :ParseError),
        s(:send, nil, :const_set,
          s(:sym, :Reason),
          s(:send,
            s(:str, "invalid argument"), :freeze))),
      s(:class,
        s(:const, nil, :AmbiguousArgument),
        s(:const, nil, :InvalidArgument),
        s(:send, nil, :const_set,
          s(:sym, :Reason),
          s(:send,
            s(:str, "ambiguous argument"), :freeze))),
      s(:module,
        s(:const, nil, :Arguable),
        s(:begin,
          s(:def, :options=,
            s(:args,
              s(:arg, :opt)),
            s(:if,
              s(:ivasgn, :@optparse,
                s(:lvar, :opt)), nil,
              s(:sclass,
                s(:self),
                s(:begin,
                  s(:send, nil, :undef_method,
                    s(:sym, :options)),
                  s(:send, nil, :undef_method,
                    s(:sym, :options=)))))),
          s(:def, :options,
            s(:args),
            s(:begin,
              s(:or_asgn,
                s(:ivasgn, :@optparse),
                s(:send,
                  s(:const, nil, :OptionParser), :new)),
              s(:send,
                s(:ivar, :@optparse), :default_argv=,
                s(:self)),
              s(:or,
                s(:send, nil, :block_given?),
                s(:return,
                  s(:ivar, :@optparse))),
              s(:kwbegin,
                s(:rescue,
                  s(:yield,
                    s(:ivar, :@optparse)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :ParseError)), nil,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@optparse), :warn,
                        s(:gvar, :$!)),
                      s(:nil))), nil)))),
          s(:def, :order!,
            s(:args,
              s(:blockarg, :blk)),
            s(:send,
              s(:send, nil, :options), :order!,
              s(:self),
              s(:block_pass,
                s(:lvar, :blk)))),
          s(:def, :permute!,
            s(:args),
            s(:send,
              s(:send, nil, :options), :permute!,
              s(:self))),
          s(:def, :parse!,
            s(:args),
            s(:send,
              s(:send, nil, :options), :parse!,
              s(:self))),
          s(:def, :getopts,
            s(:args,
              s(:restarg, :args)),
            s(:send,
              s(:send, nil, :options), :getopts,
              s(:self),
              s(:splat,
                s(:lvar, :args)))),
          s(:defs,
            s(:self), :extend_object,
            s(:args,
              s(:arg, :obj)),
            s(:begin,
              s(:zsuper),
              s(:block,
                s(:send,
                  s(:lvar, :obj), :instance_eval),
                s(:args),
                s(:ivasgn, :@optparse,
                  s(:nil))))),
          s(:def, :initialize,
            s(:args,
              s(:restarg, :args)),
            s(:begin,
              s(:zsuper),
              s(:ivasgn, :@optparse,
                s(:nil)))))),
      s(:module,
        s(:const, nil, :Acceptables),
        s(:begin,
          s(:send, nil, :const_set,
            s(:sym, :DecimalInteger),
            s(:const,
              s(:const, nil, :OptionParser), :DecimalInteger)),
          s(:send, nil, :const_set,
            s(:sym, :OctalInteger),
            s(:const,
              s(:const, nil, :OptionParser), :OctalInteger)),
          s(:send, nil, :const_set,
            s(:sym, :DecimalNumeric),
            s(:const,
              s(:const, nil, :OptionParser), :DecimalNumeric)))))),
  s(:send,
    s(:const, nil, :ARGV), :extend,
    s(:const,
      s(:const, nil, :OptionParser), :Arguable)),
  s(:casgn, nil, :OptParse,
    s(:const, nil, :OptionParser)))
