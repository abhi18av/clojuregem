s(:begin,
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:module,
    s(:const, nil, :Singleton),
    s(:begin,
      s(:def, :clone,
        s(:args),
        s(:send, nil, :raise,
          s(:const, nil, :TypeError),
          s(:dstr,
            s(:str, "can't clone instance of singleton "),
            s(:begin,
              s(:send,
                s(:self), :class))))),
      s(:def, :dup,
        s(:args),
        s(:send, nil, :raise,
          s(:const, nil, :TypeError),
          s(:dstr,
            s(:str, "can't dup instance of singleton "),
            s(:begin,
              s(:send,
                s(:self), :class))))),
      s(:def, :_dump,
        s(:args,
          s(:optarg, :depth,
            s(:int, -1))),
        s(:str, "")),
      s(:module,
        s(:const, nil, :SingletonClassMethods),
        s(:begin,
          s(:def, :clone,
            s(:args),
            s(:send,
              s(:const, nil, :Singleton), :__init__,
              s(:zsuper))),
          s(:def, :_load,
            s(:args,
              s(:arg, :str)),
            s(:send, nil, :instance)),
          s(:send, nil, :private),
          s(:def, :inherited,
            s(:args,
              s(:arg, :sub_klass)),
            s(:begin,
              s(:zsuper),
              s(:send,
                s(:const, nil, :Singleton), :__init__,
                s(:lvar, :sub_klass)))))),
      s(:sclass,
        s(:const, nil, :Singleton),
        s(:begin,
          s(:def, :__init__,
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:lvar, :klass), :instance_eval),
                s(:args),
                s(:begin,
                  s(:ivasgn, :@singleton__instance__,
                    s(:nil)),
                  s(:ivasgn, :@singleton__mutex__,
                    s(:send,
                      s(:const, nil, :Mutex), :new)))),
              s(:defs,
                s(:lvar, :klass), :instance,
                s(:args),
                s(:begin,
                  s(:if,
                    s(:ivar, :@singleton__instance__),
                    s(:return,
                      s(:ivar, :@singleton__instance__)), nil),
                  s(:block,
                    s(:send,
                      s(:ivar, :@singleton__mutex__), :synchronize),
                    s(:args),
                    s(:begin,
                      s(:if,
                        s(:ivar, :@singleton__instance__),
                        s(:return,
                          s(:ivar, :@singleton__instance__)), nil),
                      s(:ivasgn, :@singleton__instance__,
                        s(:send, nil, :new)))),
                  s(:ivar, :@singleton__instance__))),
              s(:lvar, :klass))),
          s(:send, nil, :private),
          s(:send, nil, :undef_method,
            s(:sym, :extend_object)),
          s(:def, :append_features,
            s(:args,
              s(:arg, :mod)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :mod), :instance_of?,
                  s(:const, nil, :Class)), nil,
                s(:send, nil, :raise,
                  s(:const, nil, :TypeError),
                  s(:dstr,
                    s(:str, "Inclusion of the OO-Singleton module in module "),
                    s(:begin,
                      s(:lvar, :mod))))),
              s(:zsuper))),
          s(:def, :included,
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:zsuper),
              s(:send,
                s(:lvar, :klass), :private_class_method,
                s(:sym, :new),
                s(:sym, :allocate)),
              s(:send,
                s(:lvar, :klass), :extend,
                s(:const, nil, :SingletonClassMethods)),
              s(:send,
                s(:const, nil, :Singleton), :__init__,
                s(:lvar, :klass)))))))))
