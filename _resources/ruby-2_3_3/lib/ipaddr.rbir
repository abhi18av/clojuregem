s(:begin,
  s(:send, nil, :require,
    s(:str, "socket")),
  s(:class,
    s(:const, nil, :IPAddr), nil,
    s(:begin,
      s(:casgn, nil, :IN4MASK,
        s(:int, 4294967295)),
      s(:casgn, nil, :IN6MASK,
        s(:int, 340282366920938463463374607431768211455)),
      s(:casgn, nil, :IN6FORMAT,
        s(:send,
          s(:begin,
            s(:send,
              s(:array,
                s(:str, "%.4x")), :*,
              s(:int, 8))), :join,
          s(:str, ":"))),
      s(:casgn, nil, :RE_IPV4ADDRLIKE,
        s(:regexp,
          s(:str, "\n"),
          s(:str, "    \\A\n"),
          s(:str, "    (\\d+) \\. (\\d+) \\. (\\d+) \\. (\\d+)\n"),
          s(:str, "    \\z\n"),
          s(:str, "  "),
          s(:regopt, :x))),
      s(:casgn, nil, :RE_IPV6ADDRLIKE_FULL,
        s(:regexp,
          s(:str, "\n"),
          s(:str, "    \\A\n"),
          s(:str, "    (?:\n"),
          s(:str, "      (?: [\\da-f]{1,4} : ){7} [\\da-f]{1,4}\n"),
          s(:str, "    |\n"),
          s(:str, "      ( (?: [\\da-f]{1,4} : ){6} )\n"),
          s(:str, "      (\\d+) \\. (\\d+) \\. (\\d+) \\. (\\d+)\n"),
          s(:str, "    )\n"),
          s(:str, "    \\z\n"),
          s(:str, "  "),
          s(:regopt, :i, :x))),
      s(:casgn, nil, :RE_IPV6ADDRLIKE_COMPRESSED,
        s(:regexp,
          s(:str, "\n"),
          s(:str, "    \\A\n"),
          s(:str, "    ( (?: (?: [\\da-f]{1,4} : )* [\\da-f]{1,4} )? )\n"),
          s(:str, "    ::\n"),
          s(:str, "    ( (?:\n"),
          s(:str, "      ( (?: [\\da-f]{1,4} : )* )\n"),
          s(:str, "      (?:\n"),
          s(:str, "        [\\da-f]{1,4}\n"),
          s(:str, "      |\n"),
          s(:str, "        (\\d+) \\. (\\d+) \\. (\\d+) \\. (\\d+)\n"),
          s(:str, "      )\n"),
          s(:str, "    )? )\n"),
          s(:str, "    \\z\n"),
          s(:str, "  "),
          s(:regopt, :i, :x))),
      s(:class,
        s(:const, nil, :Error),
        s(:const, nil, :ArgumentError), nil),
      s(:class,
        s(:const, nil, :InvalidAddressError),
        s(:const, nil, :Error), nil),
      s(:class,
        s(:const, nil, :AddressFamilyError),
        s(:const, nil, :Error), nil),
      s(:class,
        s(:const, nil, :InvalidPrefixError),
        s(:const, nil, :InvalidAddressError), nil),
      s(:send, nil, :attr_reader,
        s(:sym, :family)),
      s(:defs,
        s(:const, nil, :IPAddr), :new_ntoh,
        s(:args,
          s(:arg, :addr)),
        s(:return,
          s(:send,
            s(:const, nil, :IPAddr), :new,
            s(:send,
              s(:const, nil, :IPAddr), :ntop,
              s(:lvar, :addr))))),
      s(:defs,
        s(:const, nil, :IPAddr), :ntop,
        s(:args,
          s(:arg, :addr)),
        s(:begin,
          s(:case,
            s(:send,
              s(:lvar, :addr), :size),
            s(:when,
              s(:int, 4),
              s(:lvasgn, :s,
                s(:send,
                  s(:send,
                    s(:lvar, :addr), :unpack,
                    s(:str, "C4")), :join,
                  s(:str, ".")))),
            s(:when,
              s(:int, 16),
              s(:lvasgn, :s,
                s(:send,
                  s(:const, nil, :IN6FORMAT), :%,
                  s(:send,
                    s(:lvar, :addr), :unpack,
                    s(:str, "n8"))))),
            s(:send, nil, :raise,
              s(:const, nil, :AddressFamilyError),
              s(:str, "unsupported address family"))),
          s(:return,
            s(:lvar, :s)))),
      s(:def, :&,
        s(:args,
          s(:arg, :other)),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :set,
            s(:send,
              s(:ivar, :@addr), :&,
              s(:send,
                s(:send, nil, :coerce_other,
                  s(:lvar, :other)), :to_i))))),
      s(:def, :|,
        s(:args,
          s(:arg, :other)),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :set,
            s(:send,
              s(:ivar, :@addr), :|,
              s(:send,
                s(:send, nil, :coerce_other,
                  s(:lvar, :other)), :to_i))))),
      s(:def, :>>,
        s(:args,
          s(:arg, :num)),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :set,
            s(:send,
              s(:ivar, :@addr), :>>,
              s(:lvar, :num))))),
      s(:def, :<<,
        s(:args,
          s(:arg, :num)),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :set,
            s(:send, nil, :addr_mask,
              s(:send,
                s(:ivar, :@addr), :<<,
                s(:lvar, :num)))))),
      s(:def, :~,
        s(:args),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :set,
            s(:send, nil, :addr_mask,
              s(:send,
                s(:ivar, :@addr), :~))))),
      s(:def, :==,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:lvasgn, :other,
            s(:send, nil, :coerce_other,
              s(:lvar, :other))),
          s(:return,
            s(:and,
              s(:send,
                s(:ivar, :@family), :==,
                s(:send,
                  s(:lvar, :other), :family)),
              s(:send,
                s(:ivar, :@addr), :==,
                s(:send,
                  s(:lvar, :other), :to_i)))))),
      s(:def, :mask,
        s(:args,
          s(:arg, :prefixlen)),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :mask!,
            s(:lvar, :prefixlen)))),
      s(:def, :include?,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:lvasgn, :other,
            s(:send, nil, :coerce_other,
              s(:lvar, :other))),
          s(:if,
            s(:send, nil, :ipv4_mapped?),
            s(:begin,
              s(:if,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:ivar, :@mask_addr), :>>,
                      s(:int, 32))), :!=,
                  s(:int, 79228162514264337593543950335)),
                s(:return,
                  s(:false)), nil),
              s(:lvasgn, :mask_addr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@mask_addr), :&,
                    s(:const, nil, :IN4MASK)))),
              s(:lvasgn, :addr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@addr), :&,
                    s(:const, nil, :IN4MASK)))),
              s(:lvasgn, :family,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET))),
            s(:begin,
              s(:lvasgn, :mask_addr,
                s(:ivar, :@mask_addr)),
              s(:lvasgn, :addr,
                s(:ivar, :@addr)),
              s(:lvasgn, :family,
                s(:ivar, :@family)))),
          s(:if,
            s(:send,
              s(:lvar, :other), :ipv4_mapped?),
            s(:begin,
              s(:lvasgn, :other_addr,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :other), :to_i), :&,
                    s(:const, nil, :IN4MASK)))),
              s(:lvasgn, :other_family,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET))),
            s(:begin,
              s(:lvasgn, :other_addr,
                s(:send,
                  s(:lvar, :other), :to_i)),
              s(:lvasgn, :other_family,
                s(:send,
                  s(:lvar, :other), :family)))),
          s(:if,
            s(:send,
              s(:lvar, :family), :!=,
              s(:lvar, :other_family)),
            s(:return,
              s(:false)), nil),
          s(:return,
            s(:begin,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:lvar, :addr), :&,
                    s(:lvar, :mask_addr))), :==,
                s(:begin,
                  s(:send,
                    s(:lvar, :other_addr), :&,
                    s(:lvar, :mask_addr)))))))),
      s(:alias,
        s(:sym, :===),
        s(:sym, :include?)),
      s(:def, :to_i,
        s(:args),
        s(:return,
          s(:ivar, :@addr))),
      s(:def, :to_s,
        s(:args),
        s(:begin,
          s(:lvasgn, :str,
            s(:send, nil, :to_string)),
          s(:if,
            s(:send, nil, :ipv4?),
            s(:return,
              s(:lvar, :str)), nil),
          s(:send,
            s(:lvar, :str), :gsub!,
            s(:regexp,
              s(:str, "\\b0{1,3}([\\da-f]+)\\b"),
              s(:regopt, :i)),
            s(:str, "\\1")),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\A0:0:0:0:0:0:0:0\\z"),
                    s(:regopt)),
                  s(:str, "::")),
                s(:break), nil),
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\b0:0:0:0:0:0:0\\b"),
                    s(:regopt)),
                  s(:str, ":")),
                s(:break), nil),
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\b0:0:0:0:0:0\\b"),
                    s(:regopt)),
                  s(:str, ":")),
                s(:break), nil),
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\b0:0:0:0:0\\b"),
                    s(:regopt)),
                  s(:str, ":")),
                s(:break), nil),
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\b0:0:0:0\\b"),
                    s(:regopt)),
                  s(:str, ":")),
                s(:break), nil),
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\b0:0:0\\b"),
                    s(:regopt)),
                  s(:str, ":")),
                s(:break), nil),
              s(:if,
                s(:send,
                  s(:lvar, :str), :sub!,
                  s(:regexp,
                    s(:str, "\\b0:0\\b"),
                    s(:regopt)),
                  s(:str, ":")),
                s(:break), nil),
              s(:break))),
          s(:send,
            s(:lvar, :str), :sub!,
            s(:regexp,
              s(:str, ":{3,}"),
              s(:regopt)),
            s(:str, "::")),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "\\A::(ffff:)?([\\da-f]{1,4}):([\\da-f]{1,4})\\z"),
                s(:regopt, :i)),
              s(:lvar, :str)),
            s(:lvasgn, :str,
              s(:send, nil, :sprintf,
                s(:str, "::%s%d.%d.%d.%d"),
                s(:nth_ref, 1),
                s(:send,
                  s(:send,
                    s(:nth_ref, 2), :hex), :/,
                  s(:int, 256)),
                s(:send,
                  s(:send,
                    s(:nth_ref, 2), :hex), :%,
                  s(:int, 256)),
                s(:send,
                  s(:send,
                    s(:nth_ref, 3), :hex), :/,
                  s(:int, 256)),
                s(:send,
                  s(:send,
                    s(:nth_ref, 3), :hex), :%,
                  s(:int, 256)))), nil),
          s(:lvar, :str))),
      s(:def, :to_string,
        s(:args),
        s(:return,
          s(:send, nil, :_to_string,
            s(:ivar, :@addr)))),
      s(:def, :hton,
        s(:args),
        s(:case,
          s(:ivar, :@family),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:return,
              s(:send,
                s(:array,
                  s(:ivar, :@addr)), :pack,
                s(:str, "N")))),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:return,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 0),
                        s(:int, 7))), :map),
                  s(:args,
                    s(:arg, :i)),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@addr), :>>,
                        s(:begin,
                          s(:send,
                            s(:int, 112), :-,
                            s(:send,
                              s(:int, 16), :*,
                              s(:lvar, :i)))))), :&,
                    s(:int, 65535))), :pack,
                s(:str, "n8")))),
          s(:send, nil, :raise,
            s(:const, nil, :AddressFamilyError),
            s(:str, "unsupported address family")))),
      s(:def, :ipv4?,
        s(:args),
        s(:return,
          s(:send,
            s(:ivar, :@family), :==,
            s(:const,
              s(:const, nil, :Socket), :AF_INET)))),
      s(:def, :ipv6?,
        s(:args),
        s(:return,
          s(:send,
            s(:ivar, :@family), :==,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6)))),
      s(:def, :ipv4_mapped?,
        s(:args),
        s(:return,
          s(:and,
            s(:send, nil, :ipv6?),
            s(:send,
              s(:begin,
                s(:send,
                  s(:ivar, :@addr), :>>,
                  s(:int, 32))), :==,
              s(:int, 65535))))),
      s(:def, :ipv4_compat?,
        s(:args),
        s(:begin,
          s(:if,
            s(:or,
              s(:send,
                s(:send, nil, :ipv6?), :!),
              s(:send,
                s(:begin,
                  s(:send,
                    s(:ivar, :@addr), :>>,
                    s(:int, 32))), :!=,
                s(:int, 0))),
            s(:return,
              s(:false)), nil),
          s(:lvasgn, :a,
            s(:begin,
              s(:send,
                s(:ivar, :@addr), :&,
                s(:const, nil, :IN4MASK)))),
          s(:return,
            s(:and,
              s(:send,
                s(:lvar, :a), :!=,
                s(:int, 0)),
              s(:send,
                s(:lvar, :a), :!=,
                s(:int, 1)))))),
      s(:def, :ipv4_mapped,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :ipv4?), :!),
            s(:send, nil, :raise,
              s(:const, nil, :InvalidAddressError),
              s(:str, "not an IPv4 address")), nil),
          s(:return,
            s(:send,
              s(:send,
                s(:self), :clone), :set,
              s(:send,
                s(:ivar, :@addr), :|,
                s(:int, 281470681743360)),
              s(:const,
                s(:const, nil, :Socket), :AF_INET6))))),
      s(:def, :ipv4_compat,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :ipv4?), :!),
            s(:send, nil, :raise,
              s(:const, nil, :InvalidAddressError),
              s(:str, "not an IPv4 address")), nil),
          s(:return,
            s(:send,
              s(:send,
                s(:self), :clone), :set,
              s(:ivar, :@addr),
              s(:const,
                s(:const, nil, :Socket), :AF_INET6))))),
      s(:def, :native,
        s(:args),
        s(:begin,
          s(:if,
            s(:and,
              s(:send,
                s(:send, nil, :ipv4_mapped?), :!),
              s(:send,
                s(:send, nil, :ipv4_compat?), :!)),
            s(:return,
              s(:self)), nil),
          s(:return,
            s(:send,
              s(:send,
                s(:self), :clone), :set,
              s(:send,
                s(:ivar, :@addr), :&,
                s(:const, nil, :IN4MASK)),
              s(:const,
                s(:const, nil, :Socket), :AF_INET))))),
      s(:def, :reverse,
        s(:args),
        s(:case,
          s(:ivar, :@family),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:return,
              s(:send,
                s(:send, nil, :_reverse), :+,
                s(:str, ".in-addr.arpa")))),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:return,
              s(:send, nil, :ip6_arpa))),
          s(:send, nil, :raise,
            s(:const, nil, :AddressFamilyError),
            s(:str, "unsupported address family")))),
      s(:def, :ip6_arpa,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :ipv6?), :!),
            s(:send, nil, :raise,
              s(:const, nil, :InvalidAddressError),
              s(:str, "not an IPv6 address")), nil),
          s(:return,
            s(:send,
              s(:send, nil, :_reverse), :+,
              s(:str, ".ip6.arpa"))))),
      s(:def, :ip6_int,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:send, nil, :ipv6?), :!),
            s(:send, nil, :raise,
              s(:const, nil, :InvalidAddressError),
              s(:str, "not an IPv6 address")), nil),
          s(:return,
            s(:send,
              s(:send, nil, :_reverse), :+,
              s(:str, ".ip6.int"))))),
      s(:def, :succ,
        s(:args),
        s(:return,
          s(:send,
            s(:send,
              s(:self), :clone), :set,
            s(:send,
              s(:ivar, :@addr), :+,
              s(:int, 1)),
            s(:ivar, :@family)))),
      s(:def, :<=>,
        s(:args,
          s(:arg, :other)),
        s(:begin,
          s(:lvasgn, :other,
            s(:send, nil, :coerce_other,
              s(:lvar, :other))),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :other), :family), :!=,
              s(:ivar, :@family)),
            s(:return,
              s(:nil)), nil),
          s(:return,
            s(:send,
              s(:ivar, :@addr), :<=>,
              s(:send,
                s(:lvar, :other), :to_i))))),
      s(:send, nil, :include,
        s(:const, nil, :Comparable)),
      s(:def, :eql?,
        s(:args,
          s(:arg, :other)),
        s(:return,
          s(:and,
            s(:and,
              s(:send,
                s(:send,
                  s(:self), :class), :==,
                s(:send,
                  s(:lvar, :other), :class)),
              s(:send,
                s(:send,
                  s(:self), :hash), :==,
                s(:send,
                  s(:lvar, :other), :hash))),
            s(:send,
              s(:self), :==,
              s(:lvar, :other))))),
      s(:def, :hash,
        s(:args),
        s(:return,
          s(:send,
            s(:begin,
              s(:send,
                s(:send,
                  s(:array,
                    s(:ivar, :@addr),
                    s(:ivar, :@mask_addr)), :hash), :<<,
                s(:int, 1))), :|,
            s(:begin,
              s(:if,
                s(:send, nil, :ipv4?),
                s(:int, 0),
                s(:int, 1)))))),
      s(:def, :to_range,
        s(:args),
        s(:begin,
          s(:lvasgn, :begin_addr,
            s(:begin,
              s(:send,
                s(:ivar, :@addr), :&,
                s(:ivar, :@mask_addr)))),
          s(:case,
            s(:ivar, :@family),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:lvasgn, :end_addr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@addr), :|,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :IN4MASK), :^,
                        s(:ivar, :@mask_addr))))))),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET6),
              s(:lvasgn, :end_addr,
                s(:begin,
                  s(:send,
                    s(:ivar, :@addr), :|,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :IN6MASK), :^,
                        s(:ivar, :@mask_addr))))))),
            s(:send, nil, :raise,
              s(:const, nil, :AddressFamilyError),
              s(:str, "unsupported address family"))),
          s(:return,
            s(:irange,
              s(:send,
                s(:send, nil, :clone), :set,
                s(:lvar, :begin_addr),
                s(:ivar, :@family)),
              s(:send,
                s(:send, nil, :clone), :set,
                s(:lvar, :end_addr),
                s(:ivar, :@family)))))),
      s(:def, :inspect,
        s(:args),
        s(:begin,
          s(:case,
            s(:ivar, :@family),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:lvasgn, :af,
                s(:str, "IPv4"))),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET6),
              s(:lvasgn, :af,
                s(:str, "IPv6"))),
            s(:send, nil, :raise,
              s(:const, nil, :AddressFamilyError),
              s(:str, "unsupported address family"))),
          s(:return,
            s(:send, nil, :sprintf,
              s(:str, "#<%s: %s:%s/%s>"),
              s(:send,
                s(:send,
                  s(:self), :class), :name),
              s(:lvar, :af),
              s(:send, nil, :_to_string,
                s(:ivar, :@addr)),
              s(:send, nil, :_to_string,
                s(:ivar, :@mask_addr)))))),
      s(:send, nil, :protected),
      s(:def, :set,
        s(:args,
          s(:arg, :addr),
          s(:restarg, :family)),
        s(:begin,
          s(:case,
            s(:if,
              s(:send,
                s(:lvar, :family), :[],
                s(:int, 0)),
              s(:send,
                s(:lvar, :family), :[],
                s(:int, 0)),
              s(:ivar, :@family)),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :addr), :<,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :addr), :>,
                    s(:const, nil, :IN4MASK))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidAddressError),
                  s(:str, "invalid address")), nil)),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET6),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :addr), :<,
                    s(:int, 0)),
                  s(:send,
                    s(:lvar, :addr), :>,
                    s(:const, nil, :IN6MASK))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidAddressError),
                  s(:str, "invalid address")), nil)),
            s(:send, nil, :raise,
              s(:const, nil, :AddressFamilyError),
              s(:str, "unsupported address family"))),
          s(:ivasgn, :@addr,
            s(:lvar, :addr)),
          s(:if,
            s(:send,
              s(:lvar, :family), :[],
              s(:int, 0)),
            s(:ivasgn, :@family,
              s(:send,
                s(:lvar, :family), :[],
                s(:int, 0))), nil),
          s(:return,
            s(:self)))),
      s(:def, :mask!,
        s(:args,
          s(:arg, :mask)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :mask), :kind_of?,
              s(:const, nil, :String)),
            s(:if,
              s(:send,
                s(:lvar, :mask), :=~,
                s(:regexp,
                  s(:str, "\\A\\d+\\z"),
                  s(:regopt))),
              s(:lvasgn, :prefixlen,
                s(:send,
                  s(:lvar, :mask), :to_i)),
              s(:begin,
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :IPAddr), :new,
                    s(:lvar, :mask))),
                s(:if,
                  s(:send,
                    s(:send,
                      s(:lvar, :m), :family), :!=,
                    s(:ivar, :@family)),
                  s(:send, nil, :raise,
                    s(:const, nil, :InvalidPrefixError),
                    s(:str, "address family is not same")), nil),
                s(:ivasgn, :@mask_addr,
                  s(:send,
                    s(:lvar, :m), :to_i)),
                s(:op_asgn,
                  s(:ivasgn, :@addr), :&,
                  s(:ivar, :@mask_addr)),
                s(:return,
                  s(:self)))),
            s(:lvasgn, :prefixlen,
              s(:lvar, :mask))),
          s(:case,
            s(:ivar, :@family),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :prefixlen), :<,
                      s(:int, 0)),
                    s(:send,
                      s(:lvar, :prefixlen), :>,
                      s(:int, 32))),
                  s(:send, nil, :raise,
                    s(:const, nil, :InvalidPrefixError),
                    s(:str, "invalid length")), nil),
                s(:lvasgn, :masklen,
                  s(:send,
                    s(:int, 32), :-,
                    s(:lvar, :prefixlen))),
                s(:ivasgn, :@mask_addr,
                  s(:begin,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :IN4MASK), :>>,
                          s(:lvar, :masklen))), :<<,
                      s(:lvar, :masklen)))))),
            s(:when,
              s(:const,
                s(:const, nil, :Socket), :AF_INET6),
              s(:begin,
                s(:if,
                  s(:or,
                    s(:send,
                      s(:lvar, :prefixlen), :<,
                      s(:int, 0)),
                    s(:send,
                      s(:lvar, :prefixlen), :>,
                      s(:int, 128))),
                  s(:send, nil, :raise,
                    s(:const, nil, :InvalidPrefixError),
                    s(:str, "invalid length")), nil),
                s(:lvasgn, :masklen,
                  s(:send,
                    s(:int, 128), :-,
                    s(:lvar, :prefixlen))),
                s(:ivasgn, :@mask_addr,
                  s(:begin,
                    s(:send,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :IN6MASK), :>>,
                          s(:lvar, :masklen))), :<<,
                      s(:lvar, :masklen)))))),
            s(:send, nil, :raise,
              s(:const, nil, :AddressFamilyError),
              s(:str, "unsupported address family"))),
          s(:ivasgn, :@addr,
            s(:begin,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:ivar, :@addr), :>>,
                    s(:lvar, :masklen))), :<<,
                s(:lvar, :masklen)))),
          s(:return,
            s(:self)))),
      s(:send, nil, :private),
      s(:def, :initialize,
        s(:args,
          s(:optarg, :addr,
            s(:str, "::")),
          s(:optarg, :family,
            s(:const,
              s(:const, nil, :Socket), :AF_UNSPEC))),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :addr), :kind_of?,
                s(:const, nil, :String)), :!),
            s(:case,
              s(:lvar, :family),
              s(:when,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET),
                s(:const,
                  s(:const, nil, :Socket), :AF_INET6),
                s(:begin,
                  s(:send, nil, :set,
                    s(:send,
                      s(:lvar, :addr), :to_i),
                    s(:lvar, :family)),
                  s(:ivasgn, :@mask_addr,
                    s(:if,
                      s(:begin,
                        s(:send,
                          s(:lvar, :family), :==,
                          s(:const,
                            s(:const, nil, :Socket), :AF_INET))),
                      s(:const, nil, :IN4MASK),
                      s(:const, nil, :IN6MASK))),
                  s(:return))),
              s(:when,
                s(:const,
                  s(:const, nil, :Socket), :AF_UNSPEC),
                s(:send, nil, :raise,
                  s(:const, nil, :AddressFamilyError),
                  s(:str, "address family must be specified"))),
              s(:send, nil, :raise,
                s(:const, nil, :AddressFamilyError),
                s(:dstr,
                  s(:str, "unsupported address family: "),
                  s(:begin,
                    s(:lvar, :family))))), nil),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :prefix),
              s(:lvasgn, :prefixlen)),
            s(:send,
              s(:lvar, :addr), :split,
              s(:str, "/"))),
          s(:if,
            s(:send,
              s(:lvar, :prefix), :=~,
              s(:regexp,
                s(:str, "\\A\\[(.*)\\]\\z"),
                s(:regopt, :i))),
            s(:begin,
              s(:lvasgn, :prefix,
                s(:nth_ref, 1)),
              s(:lvasgn, :family,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET6))), nil),
          s(:ivasgn, :@addr,
            s(:ivasgn, :@family,
              s(:nil))),
          s(:if,
            s(:or,
              s(:send,
                s(:lvar, :family), :==,
                s(:const,
                  s(:const, nil, :Socket), :AF_UNSPEC)),
              s(:send,
                s(:lvar, :family), :==,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET))),
            s(:begin,
              s(:ivasgn, :@addr,
                s(:send, nil, :in_addr,
                  s(:lvar, :prefix))),
              s(:if,
                s(:ivar, :@addr),
                s(:ivasgn, :@family,
                  s(:const,
                    s(:const, nil, :Socket), :AF_INET)), nil)), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:ivar, :@addr), :!),
              s(:begin,
                s(:or,
                  s(:send,
                    s(:lvar, :family), :==,
                    s(:const,
                      s(:const, nil, :Socket), :AF_UNSPEC)),
                  s(:send,
                    s(:lvar, :family), :==,
                    s(:const,
                      s(:const, nil, :Socket), :AF_INET6))))),
            s(:begin,
              s(:ivasgn, :@addr,
                s(:send, nil, :in6_addr,
                  s(:lvar, :prefix))),
              s(:ivasgn, :@family,
                s(:const,
                  s(:const, nil, :Socket), :AF_INET6))), nil),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :family), :!=,
                s(:const,
                  s(:const, nil, :Socket), :AF_UNSPEC)),
              s(:send,
                s(:ivar, :@family), :!=,
                s(:lvar, :family))),
            s(:send, nil, :raise,
              s(:const, nil, :AddressFamilyError),
              s(:str, "address family mismatch")), nil),
          s(:if,
            s(:lvar, :prefixlen),
            s(:send, nil, :mask!,
              s(:lvar, :prefixlen)),
            s(:ivasgn, :@mask_addr,
              s(:if,
                s(:begin,
                  s(:send,
                    s(:ivar, :@family), :==,
                    s(:const,
                      s(:const, nil, :Socket), :AF_INET))),
                s(:const, nil, :IN4MASK),
                s(:const, nil, :IN6MASK)))))),
      s(:def, :coerce_other,
        s(:args,
          s(:arg, :other)),
        s(:case,
          s(:lvar, :other),
          s(:when,
            s(:const, nil, :IPAddr),
            s(:lvar, :other)),
          s(:when,
            s(:const, nil, :String),
            s(:send,
              s(:send,
                s(:self), :class), :new,
              s(:lvar, :other))),
          s(:send,
            s(:send,
              s(:self), :class), :new,
            s(:lvar, :other),
            s(:ivar, :@family)))),
      s(:def, :in_addr,
        s(:args,
          s(:arg, :addr)),
        s(:begin,
          s(:case,
            s(:lvar, :addr),
            s(:when,
              s(:const, nil, :Array),
              s(:lvasgn, :octets,
                s(:lvar, :addr))),
            s(:begin,
              s(:or,
                s(:lvasgn, :m,
                  s(:send,
                    s(:const, nil, :RE_IPV4ADDRLIKE), :match,
                    s(:lvar, :addr))),
                s(:return,
                  s(:nil))),
              s(:lvasgn, :octets,
                s(:send,
                  s(:lvar, :m), :captures)))),
          s(:block,
            s(:send,
              s(:lvar, :octets), :inject,
              s(:int, 0)),
            s(:args,
              s(:arg, :i),
              s(:arg, :s)),
            s(:begin,
              s(:or,
                s(:send,
                  s(:begin,
                    s(:lvasgn, :n,
                      s(:send,
                        s(:lvar, :s), :to_i))), :<,
                  s(:int, 256)),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidAddressError),
                  s(:str, "invalid address"))),
              s(:and,
                s(:send,
                  s(:lvar, :s), :match,
                  s(:regexp,
                    s(:str, "\\A0."),
                    s(:regopt))),
                s(:send, nil, :raise,
                  s(:const, nil, :InvalidAddressError),
                  s(:str, "zero-filled number in IPv4 address is ambiguous"))),
              s(:send,
                s(:send,
                  s(:lvar, :i), :<<,
                  s(:int, 8)), :|,
                s(:lvar, :n)))))),
      s(:def, :in6_addr,
        s(:args,
          s(:arg, :left)),
        s(:begin,
          s(:case,
            s(:lvar, :left),
            s(:when,
              s(:const, nil, :RE_IPV6ADDRLIKE_FULL),
              s(:begin,
                s(:if,
                  s(:nth_ref, 2),
                  s(:begin,
                    s(:lvasgn, :addr,
                      s(:send, nil, :in_addr,
                        s(:send,
                          s(:gvar, :$~), :[],
                          s(:int, 2),
                          s(:int, 4)))),
                    s(:lvasgn, :left,
                      s(:send,
                        s(:nth_ref, 1), :+,
                        s(:str, ":")))),
                  s(:lvasgn, :addr,
                    s(:int, 0))),
                s(:lvasgn, :right,
                  s(:str, "")))),
            s(:when,
              s(:const, nil, :RE_IPV6ADDRLIKE_COMPRESSED),
              s(:if,
                s(:nth_ref, 4),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :left), :count,
                        s(:str, ":")), :<=,
                      s(:int, 6)),
                    s(:send, nil, :raise,
                      s(:const, nil, :InvalidAddressError),
                      s(:str, "invalid address"))),
                  s(:lvasgn, :addr,
                    s(:send, nil, :in_addr,
                      s(:send,
                        s(:gvar, :$~), :[],
                        s(:int, 4),
                        s(:int, 4)))),
                  s(:lvasgn, :left,
                    s(:nth_ref, 1)),
                  s(:lvasgn, :right,
                    s(:send,
                      s(:nth_ref, 3), :+,
                      s(:str, "0:0")))),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:send,
                        s(:lvar, :left), :count,
                        s(:str, ":")), :<=,
                      s(:begin,
                        s(:if,
                          s(:or,
                            s(:send,
                              s(:nth_ref, 1), :empty?),
                            s(:send,
                              s(:nth_ref, 2), :empty?)),
                          s(:int, 8),
                          s(:int, 7)))),
                    s(:send, nil, :raise,
                      s(:const, nil, :InvalidAddressError),
                      s(:str, "invalid address"))),
                  s(:lvasgn, :left,
                    s(:nth_ref, 1)),
                  s(:lvasgn, :right,
                    s(:nth_ref, 2)),
                  s(:lvasgn, :addr,
                    s(:int, 0))))),
            s(:send, nil, :raise,
              s(:const, nil, :InvalidAddressError),
              s(:str, "invalid address"))),
          s(:lvasgn, :l,
            s(:send,
              s(:lvar, :left), :split,
              s(:str, ":"))),
          s(:lvasgn, :r,
            s(:send,
              s(:lvar, :right), :split,
              s(:str, ":"))),
          s(:lvasgn, :rest,
            s(:send,
              s(:send,
                s(:int, 8), :-,
                s(:send,
                  s(:lvar, :l), :size)), :-,
              s(:send,
                s(:lvar, :r), :size))),
          s(:if,
            s(:send,
              s(:lvar, :rest), :<,
              s(:int, 0)),
            s(:return,
              s(:nil)), nil),
          s(:send,
            s(:block,
              s(:send,
                s(:begin,
                  s(:send,
                    s(:send,
                      s(:lvar, :l), :+,
                      s(:send,
                        s(:const, nil, :Array), :new,
                        s(:lvar, :rest),
                        s(:str, "0"))), :+,
                    s(:lvar, :r))), :inject,
                s(:int, 0)),
              s(:args,
                s(:arg, :i),
                s(:arg, :s)),
              s(:send,
                s(:send,
                  s(:lvar, :i), :<<,
                  s(:int, 16)), :|,
                s(:send,
                  s(:lvar, :s), :hex))), :|,
            s(:lvar, :addr)))),
      s(:def, :addr_mask,
        s(:args,
          s(:arg, :addr)),
        s(:case,
          s(:ivar, :@family),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:return,
              s(:send,
                s(:lvar, :addr), :&,
                s(:const, nil, :IN4MASK)))),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:return,
              s(:send,
                s(:lvar, :addr), :&,
                s(:const, nil, :IN6MASK)))),
          s(:send, nil, :raise,
            s(:const, nil, :AddressFamilyError),
            s(:str, "unsupported address family")))),
      s(:def, :_reverse,
        s(:args),
        s(:case,
          s(:ivar, :@family),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:return,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 0),
                        s(:int, 3))), :map),
                  s(:args,
                    s(:arg, :i)),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:ivar, :@addr), :>>,
                        s(:begin,
                          s(:send,
                            s(:int, 8), :*,
                            s(:lvar, :i))))), :&,
                    s(:int, 255))), :join,
                s(:str, ".")))),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:return,
              s(:send,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:str, "%.32x"), :%,
                      s(:ivar, :@addr))), :reverse!), :gsub!,
                s(:regexp,
                  s(:str, ".(?!$)"),
                  s(:regopt)),
                s(:str, "\\&.")))),
          s(:send, nil, :raise,
            s(:const, nil, :AddressFamilyError),
            s(:str, "unsupported address family")))),
      s(:def, :_to_string,
        s(:args,
          s(:arg, :addr)),
        s(:case,
          s(:ivar, :@family),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET),
            s(:return,
              s(:send,
                s(:block,
                  s(:send,
                    s(:begin,
                      s(:irange,
                        s(:int, 0),
                        s(:int, 3))), :map),
                  s(:args,
                    s(:arg, :i)),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:lvar, :addr), :>>,
                        s(:begin,
                          s(:send,
                            s(:int, 24), :-,
                            s(:send,
                              s(:int, 8), :*,
                              s(:lvar, :i)))))), :&,
                    s(:int, 255))), :join,
                s(:str, ".")))),
          s(:when,
            s(:const,
              s(:const, nil, :Socket), :AF_INET6),
            s(:return,
              s(:begin,
                s(:send,
                  s(:begin,
                    s(:send,
                      s(:str, "%.32x"), :%,
                      s(:lvar, :addr))), :gsub!,
                  s(:regexp,
                    s(:str, ".{4}(?!$)"),
                    s(:regopt)),
                  s(:str, "\\&:"))))),
          s(:send, nil, :raise,
            s(:const, nil, :AddressFamilyError),
            s(:str, "unsupported address family")))))),
  s(:if,
    s(:send,
      s(:const, nil, :Socket), :const_defined?,
      s(:sym, :AF_INET6)), nil,
    s(:begin,
      s(:class,
        s(:const, nil, :Socket),
        s(:const, nil, :BasicSocket),
        s(:casgn, nil, :AF_INET6,
          s(:send,
            s(:const, nil, :Object), :new))),
      s(:sclass,
        s(:const, nil, :IPSocket),
        s(:begin,
          s(:send, nil, :private),
          s(:def, :valid_v6?,
            s(:args,
              s(:arg, :addr)),
            s(:case,
              s(:lvar, :addr),
              s(:when,
                s(:const,
                  s(:const, nil, :IPAddr), :RE_IPV6ADDRLIKE_FULL),
                s(:if,
                  s(:nth_ref, 2),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:gvar, :$~), :[],
                        s(:int, 2),
                        s(:int, 4)), :all?),
                    s(:args,
                      s(:arg, :i)),
                    s(:send,
                      s(:send,
                        s(:lvar, :i), :to_i), :<,
                      s(:int, 256))),
                  s(:true))),
              s(:when,
                s(:const,
                  s(:const, nil, :IPAddr), :RE_IPV6ADDRLIKE_COMPRESSED),
                s(:if,
                  s(:nth_ref, 4),
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :addr), :count,
                        s(:str, ":")), :<=,
                      s(:int, 6)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:gvar, :$~), :[],
                          s(:int, 4),
                          s(:int, 4)), :all?),
                      s(:args,
                        s(:arg, :i)),
                      s(:send,
                        s(:send,
                          s(:lvar, :i), :to_i), :<,
                        s(:int, 256)))),
                  s(:send,
                    s(:send,
                      s(:lvar, :addr), :count,
                      s(:str, ":")), :<=,
                    s(:int, 7)))),
              s(:false))),
          s(:alias,
            s(:sym, :getaddress_orig),
            s(:sym, :getaddress)),
          s(:send, nil, :public),
          s(:def, :getaddress,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:send, nil, :valid_v6?,
                s(:lvar, :s)),
              s(:lvar, :s),
              s(:send, nil, :getaddress_orig,
                s(:lvar, :s)))))))))
