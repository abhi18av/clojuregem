s(:begin,
  s(:send, nil, :require,
    s(:str, "rss/utils")),
  s(:module,
    s(:const, nil, :RSS),
    s(:class,
      s(:const, nil, :Converter), nil,
      s(:begin,
        s(:send, nil, :include,
          s(:const, nil, :Utils)),
        s(:def, :initialize,
          s(:args,
            s(:arg, :to_enc),
            s(:optarg, :from_enc,
              s(:nil))),
          s(:begin,
            s(:if,
              s(:send,
                s(:str, ""), :respond_to?,
                s(:sym, :encode)),
              s(:begin,
                s(:ivasgn, :@to_encoding,
                  s(:lvar, :to_enc)),
                s(:return)), nil),
            s(:lvasgn, :normalized_to_enc,
              s(:send,
                s(:send,
                  s(:lvar, :to_enc), :downcase), :gsub,
                s(:regexp,
                  s(:str, "-"),
                  s(:regopt)),
                s(:str, "_"))),
            s(:or_asgn,
              s(:lvasgn, :from_enc),
              s(:str, "utf-8")),
            s(:lvasgn, :normalized_from_enc,
              s(:send,
                s(:send,
                  s(:lvar, :from_enc), :downcase), :gsub,
                s(:regexp,
                  s(:str, "-"),
                  s(:regopt)),
                s(:str, "_"))),
            s(:if,
              s(:send,
                s(:lvar, :normalized_to_enc), :==,
                s(:lvar, :normalized_from_enc)),
              s(:send, nil, :def_same_enc),
              s(:begin,
                s(:lvasgn, :def_diff_enc,
                  s(:dstr,
                    s(:str, "def_to_"),
                    s(:begin,
                      s(:lvar, :normalized_to_enc)),
                    s(:str, "_from_"),
                    s(:begin,
                      s(:lvar, :normalized_from_enc)))),
                s(:if,
                  s(:send, nil, :respond_to?,
                    s(:lvar, :def_diff_enc)),
                  s(:send, nil, :__send__,
                    s(:lvar, :def_diff_enc)),
                  s(:send, nil, :def_else_enc,
                    s(:lvar, :to_enc),
                    s(:lvar, :from_enc))))))),
        s(:def, :convert,
          s(:args,
            s(:arg, :value)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :value), :is_a?,
                s(:const, nil, :String)),
              s(:send,
                s(:lvar, :value), :respond_to?,
                s(:sym, :encode))),
            s(:send,
              s(:lvar, :value), :encode,
              s(:ivar, :@to_encoding)),
            s(:lvar, :value))),
        s(:def, :def_convert,
          s(:args,
            s(:optarg, :depth,
              s(:int, 0))),
          s(:send, nil, :instance_eval,
            s(:dstr,
              s(:str, "      def convert(value)\n"),
              s(:str, "        if value.kind_of?(String)\n"),
              s(:str, "          "),
              s(:begin,
                s(:yield,
                  s(:str, "value"))),
              s(:str, "\n"),
              s(:str, "        else\n"),
              s(:str, "          value\n"),
              s(:str, "        end\n"),
              s(:str, "      end\n")),
            s(:splat,
              s(:send, nil, :get_file_and_line_from_caller,
                s(:lvar, :depth))))),
        s(:def, :def_iconv_convert,
          s(:args,
            s(:arg, :to_enc),
            s(:arg, :from_enc),
            s(:optarg, :depth,
              s(:int, 0))),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "iconv")),
                s(:ivasgn, :@iconv,
                  s(:send,
                    s(:const, nil, :Iconv), :new,
                    s(:lvar, :to_enc),
                    s(:lvar, :from_enc))),
                s(:block,
                  s(:send, nil, :def_convert,
                    s(:send,
                      s(:lvar, :depth), :+,
                      s(:int, 1))),
                  s(:args,
                    s(:arg, :value)),
                  s(:dstr,
                    s(:str, "          begin\n"),
                    s(:str, "            @iconv.iconv("),
                    s(:begin,
                      s(:lvar, :value)),
                    s(:str, ")\n"),
                    s(:str, "          rescue Iconv::Failure\n"),
                    s(:str, "            raise ConversionError.new("),
                    s(:begin,
                      s(:lvar, :value)),
                    s(:str, ", \""),
                    s(:begin,
                      s(:lvar, :to_enc)),
                    s(:str, "\", \""),
                    s(:begin,
                      s(:lvar, :from_enc)),
                    s(:str, "\")\n"),
                    s(:str, "          end\n")))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError),
                  s(:const, nil, :ArgumentError),
                  s(:const, nil, :SystemCallError)), nil,
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :UnknownConversionMethodError), :new,
                    s(:lvar, :to_enc),
                    s(:lvar, :from_enc)))), nil))),
        s(:def, :def_else_enc,
          s(:args,
            s(:arg, :to_enc),
            s(:arg, :from_enc)),
          s(:send, nil, :def_iconv_convert,
            s(:lvar, :to_enc),
            s(:lvar, :from_enc),
            s(:int, 0))),
        s(:def, :def_same_enc,
          s(:args),
          s(:block,
            s(:send, nil, :def_convert),
            s(:args,
              s(:arg, :value)),
            s(:lvar, :value))),
        s(:def, :def_uconv_convert_if_can,
          s(:args,
            s(:arg, :meth),
            s(:arg, :to_enc),
            s(:arg, :from_enc),
            s(:arg, :nkf_arg)),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "uconv")),
                s(:block,
                  s(:send, nil, :def_convert,
                    s(:int, 1)),
                  s(:args,
                    s(:arg, :value)),
                  s(:dstr,
                    s(:str, "          begin\n"),
                    s(:str, "            Uconv."),
                    s(:begin,
                      s(:lvar, :meth)),
                    s(:str, "("),
                    s(:begin,
                      s(:lvar, :value)),
                    s(:str, ")\n"),
                    s(:str, "          rescue Uconv::Error\n"),
                    s(:str, "            raise ConversionError.new("),
                    s(:begin,
                      s(:lvar, :value)),
                    s(:str, ", \""),
                    s(:begin,
                      s(:lvar, :to_enc)),
                    s(:str, "\", \""),
                    s(:begin,
                      s(:lvar, :from_enc)),
                    s(:str, "\")\n"),
                    s(:str, "          end\n")))),
              s(:resbody,
                s(:array,
                  s(:const, nil, :LoadError)), nil,
                s(:begin,
                  s(:send, nil, :require,
                    s(:str, "nkf")),
                  s(:if,
                    s(:send,
                      s(:const, nil, :NKF), :const_defined?,
                      s(:sym, :UTF8)),
                    s(:block,
                      s(:send, nil, :def_convert,
                        s(:int, 1)),
                      s(:args,
                        s(:arg, :value)),
                      s(:dstr,
                        s(:str, "NKF.nkf("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :nkf_arg), :dump)),
                        s(:str, ", "),
                        s(:begin,
                          s(:lvar, :value)),
                        s(:str, ")"))),
                    s(:send, nil, :def_iconv_convert,
                      s(:lvar, :to_enc),
                      s(:lvar, :from_enc),
                      s(:int, 1))))), nil))),
        s(:def, :def_to_euc_jp_from_utf_8,
          s(:args),
          s(:send, nil, :def_uconv_convert_if_can,
            s(:str, "u8toeuc"),
            s(:str, "EUC-JP"),
            s(:str, "UTF-8"),
            s(:str, "-We"))),
        s(:def, :def_to_utf_8_from_euc_jp,
          s(:args),
          s(:send, nil, :def_uconv_convert_if_can,
            s(:str, "euctou8"),
            s(:str, "UTF-8"),
            s(:str, "EUC-JP"),
            s(:str, "-Ew"))),
        s(:def, :def_to_shift_jis_from_utf_8,
          s(:args),
          s(:send, nil, :def_uconv_convert_if_can,
            s(:str, "u8tosjis"),
            s(:str, "Shift_JIS"),
            s(:str, "UTF-8"),
            s(:str, "-Ws"))),
        s(:def, :def_to_utf_8_from_shift_jis,
          s(:args),
          s(:send, nil, :def_uconv_convert_if_can,
            s(:str, "sjistou8"),
            s(:str, "UTF-8"),
            s(:str, "Shift_JIS"),
            s(:str, "-Sw"))),
        s(:def, :def_to_euc_jp_from_shift_jis,
          s(:args),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "nkf")),
            s(:block,
              s(:send, nil, :def_convert),
              s(:args,
                s(:arg, :value)),
              s(:dstr,
                s(:str, "NKF.nkf('-Se', "),
                s(:begin,
                  s(:lvar, :value)),
                s(:str, ")"))))),
        s(:def, :def_to_shift_jis_from_euc_jp,
          s(:args),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "nkf")),
            s(:block,
              s(:send, nil, :def_convert),
              s(:args,
                s(:arg, :value)),
              s(:dstr,
                s(:str, "NKF.nkf('-Es', "),
                s(:begin,
                  s(:lvar, :value)),
                s(:str, ")"))))),
        s(:def, :def_to_euc_jp_from_iso_2022_jp,
          s(:args),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "nkf")),
            s(:block,
              s(:send, nil, :def_convert),
              s(:args,
                s(:arg, :value)),
              s(:dstr,
                s(:str, "NKF.nkf('-Je', "),
                s(:begin,
                  s(:lvar, :value)),
                s(:str, ")"))))),
        s(:def, :def_to_iso_2022_jp_from_euc_jp,
          s(:args),
          s(:begin,
            s(:send, nil, :require,
              s(:str, "nkf")),
            s(:block,
              s(:send, nil, :def_convert),
              s(:args,
                s(:arg, :value)),
              s(:dstr,
                s(:str, "NKF.nkf('-Ej', "),
                s(:begin,
                  s(:lvar, :value)),
                s(:str, ")"))))),
        s(:def, :def_to_utf_8_from_iso_8859_1,
          s(:args),
          s(:block,
            s(:send, nil, :def_convert),
            s(:args,
              s(:arg, :value)),
            s(:dstr,
              s(:begin,
                s(:lvar, :value)),
              s(:str, ".unpack('C*').pack('U*')")))),
        s(:def, :def_to_iso_8859_1_from_utf_8,
          s(:args),
          s(:block,
            s(:send, nil, :def_convert),
            s(:args,
              s(:arg, :value)),
            s(:dstr,
              s(:str, "        array_utf8 = "),
              s(:begin,
                s(:lvar, :value)),
              s(:str, ".unpack('U*')\n"),
              s(:str, "        array_enc = []\n"),
              s(:str, "        array_utf8.each do |num|\n"),
              s(:str, "          if num <= 0xFF\n"),
              s(:str, "            array_enc << num\n"),
              s(:str, "          else\n"),
              s(:str, "            array_enc.concat \"&#\#{num};\".unpack('C*')\n"),
              s(:str, "          end\n"),
              s(:str, "        end\n"),
              s(:str, "        array_enc.pack('C*')\n"))))))))
