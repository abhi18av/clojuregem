s(:begin,
  s(:send, nil, :require,
    s(:str, "rss/rss")),
  s(:module,
    s(:const, nil, :RSS),
    s(:begin,
      s(:casgn, nil, :DC_PREFIX,
        s(:str, "dc")),
      s(:casgn, nil, :DC_URI,
        s(:str, "http://purl.org/dc/elements/1.1/")),
      s(:module,
        s(:const, nil, :BaseDublinCoreModel),
        s(:def, :append_features,
          s(:args,
            s(:arg, :klass)),
          s(:begin,
            s(:zsuper),
            s(:if,
              s(:send,
                s(:lvar, :klass), :instance_of?,
                s(:const, nil, :Module)),
              s(:return), nil),
            s(:block,
              s(:send,
                s(:const,
                  s(:const, nil, :DublinCoreModel), :ELEMENT_NAME_INFOS), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :plural_name)),
              s(:begin,
                s(:lvasgn, :plural,
                  s(:or,
                    s(:lvar, :plural_name),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "s")))),
                s(:lvasgn, :full_name,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, "_"),
                    s(:begin,
                      s(:lvar, :name)))),
                s(:lvasgn, :full_plural_name,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, "_"),
                    s(:begin,
                      s(:lvar, :plural)))),
                s(:lvasgn, :klass_name,
                  s(:dstr,
                    s(:str, "DublinCore"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Utils), :to_class_name,
                        s(:lvar, :name))))),
                s(:send,
                  s(:lvar, :klass), :install_must_call_validator,
                  s(:const, nil, :DC_PREFIX),
                  s(:const, nil, :DC_URI)),
                s(:send,
                  s(:lvar, :klass), :install_have_children_element,
                  s(:lvar, :name),
                  s(:const, nil, :DC_URI),
                  s(:str, "*"),
                  s(:lvar, :full_name),
                  s(:lvar, :full_plural_name)),
                s(:send,
                  s(:lvar, :klass), :module_eval,
                  s(:dstr,
                    s(:str, "          remove_method :"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "\n"),
                    s(:str, "          remove_method :"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "=\n"),
                    s(:str, "          remove_method :set_"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "\n"),
                    s(:str, "\n"),
                    s(:str, "          def "),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "\n"),
                    s(:str, "            @"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, ".first and @"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, ".first.value\n"),
                    s(:str, "          end\n"),
                    s(:str, "\n"),
                    s(:str, "          def "),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "=(new_value)\n"),
                    s(:str, "            @"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "[0] = Utils.new_with_value_if_need("),
                    s(:begin,
                      s(:lvar, :klass_name)),
                    s(:str, ", new_value)\n"),
                    s(:str, "          end\n"),
                    s(:str, "          alias set_"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, " "),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, "=\n")),
                  s(:splat,
                    s(:send, nil, :get_file_and_line_from_caller,
                      s(:int, 0)))))),
            s(:send,
              s(:lvar, :klass), :module_eval,
              s(:dstr,
                s(:str, "        if method_defined?(:date)\n"),
                s(:str, "          alias date_without_"),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_date= date=\n"),
                s(:str, "\n"),
                s(:str, "          def date=(value)\n"),
                s(:str, "            self.date_without_"),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_date = value\n"),
                s(:str, "            self."),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_date = value\n"),
                s(:str, "          end\n"),
                s(:str, "        else\n"),
                s(:str, "          alias date "),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_date\n"),
                s(:str, "          alias date= "),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_date=\n"),
                s(:str, "        end\n"),
                s(:str, "\n"),
                s(:str, "        # For backward compatibility\n"),
                s(:str, "        alias "),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_rightses "),
                s(:begin,
                  s(:const, nil, :DC_PREFIX)),
                s(:str, "_rights_list\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 0))))))),
      s(:module,
        s(:const, nil, :DublinCoreModel),
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :BaseModel)),
          s(:send, nil, :extend,
            s(:const, nil, :BaseDublinCoreModel)),
          s(:casgn, nil, :TEXT_ELEMENTS,
            s(:hash,
              s(:pair,
                s(:str, "title"),
                s(:nil)),
              s(:pair,
                s(:str, "description"),
                s(:nil)),
              s(:pair,
                s(:str, "creator"),
                s(:nil)),
              s(:pair,
                s(:str, "subject"),
                s(:nil)),
              s(:pair,
                s(:str, "publisher"),
                s(:nil)),
              s(:pair,
                s(:str, "contributor"),
                s(:nil)),
              s(:pair,
                s(:str, "type"),
                s(:nil)),
              s(:pair,
                s(:str, "format"),
                s(:nil)),
              s(:pair,
                s(:str, "identifier"),
                s(:nil)),
              s(:pair,
                s(:str, "source"),
                s(:nil)),
              s(:pair,
                s(:str, "language"),
                s(:nil)),
              s(:pair,
                s(:str, "relation"),
                s(:nil)),
              s(:pair,
                s(:str, "coverage"),
                s(:nil)),
              s(:pair,
                s(:str, "rights"),
                s(:str, "rights_list")))),
          s(:casgn, nil, :DATE_ELEMENTS,
            s(:hash,
              s(:pair,
                s(:str, "date"),
                s(:str, "w3cdtf")))),
          s(:casgn, nil, :ELEMENT_NAME_INFOS,
            s(:send,
              s(:const,
                s(:const, nil, :DublinCoreModel), :TEXT_ELEMENTS), :to_a)),
          s(:block,
            s(:send,
              s(:const,
                s(:const, nil, :DublinCoreModel), :DATE_ELEMENTS), :each),
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:const, nil, :ELEMENT_NAME_INFOS), :<<,
              s(:array,
                s(:lvar, :name),
                s(:nil)))),
          s(:casgn, nil, :ELEMENTS,
            s(:send,
              s(:send,
                s(:const, nil, :TEXT_ELEMENTS), :keys), :+,
              s(:send,
                s(:const, nil, :DATE_ELEMENTS), :keys))),
          s(:block,
            s(:send,
              s(:const, nil, :ELEMENTS), :each),
            s(:args,
              s(:arg, :name),
              s(:arg, :plural_name)),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        class DublinCore"),
                s(:begin,
                  s(:send,
                    s(:const, nil, :Utils), :to_class_name,
                    s(:lvar, :name))),
                s(:str, " < Element\n"),
                s(:str, "          include RSS10\n"),
                s(:str, "\n"),
                s(:str, "          content_setup\n"),
                s(:str, "\n"),
                s(:str, "          class << self\n"),
                s(:str, "            def required_prefix\n"),
                s(:str, "              DC_PREFIX\n"),
                s(:str, "            end\n"),
                s(:str, "\n"),
                s(:str, "            def required_uri\n"),
                s(:str, "              DC_URI\n"),
                s(:str, "            end\n"),
                s(:str, "          end\n"),
                s(:str, "\n"),
                s(:str, "          @tag_name = "),
                s(:begin,
                  s(:send,
                    s(:lvar, :name), :dump)),
                s(:str, "\n"),
                s(:str, "\n"),
                s(:str, "          alias_method(:value, :content)\n"),
                s(:str, "          alias_method(:value=, :content=)\n"),
                s(:str, "\n"),
                s(:str, "          def initialize(*args)\n"),
                s(:str, "            if Utils.element_initialize_arguments?(args)\n"),
                s(:str, "              super\n"),
                s(:str, "            else\n"),
                s(:str, "              super()\n"),
                s(:str, "              self.content = args[0]\n"),
                s(:str, "            end\n"),
                s(:str, "          end\n"),
                s(:str, "\n"),
                s(:str, "          def full_name\n"),
                s(:str, "            tag_name_with_prefix(DC_PREFIX)\n"),
                s(:str, "          end\n"),
                s(:str, "\n"),
                s(:str, "          def maker_target(target)\n"),
                s(:str, "            target.new_"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "\n"),
                s(:str, "          end\n"),
                s(:str, "\n"),
                s(:str, "          def setup_maker_attributes("),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ")\n"),
                s(:str, "            "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, ".content = content\n"),
                s(:str, "          end\n"),
                s(:str, "        end\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 0))))),
          s(:block,
            s(:send,
              s(:const, nil, :DATE_ELEMENTS), :each),
            s(:args,
              s(:arg, :name),
              s(:arg, :type)),
            s(:begin,
              s(:lvasgn, :tag_name,
                s(:dstr,
                  s(:begin,
                    s(:const, nil, :DC_PREFIX)),
                  s(:str, ":"),
                  s(:begin,
                    s(:lvar, :name)))),
              s(:send, nil, :module_eval,
                s(:dstr,
                  s(:str, "        class DublinCore"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Utils), :to_class_name,
                      s(:lvar, :name))),
                  s(:str, " < Element\n"),
                  s(:str, "          remove_method(:content=)\n"),
                  s(:str, "          remove_method(:value=)\n"),
                  s(:str, "\n"),
                  s(:str, "          date_writer(\"content\", "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :type), :dump)),
                  s(:str, ", "),
                  s(:begin,
                    s(:send,
                      s(:lvar, :tag_name), :dump)),
                  s(:str, ")\n"),
                  s(:str, "\n"),
                  s(:str, "          alias_method(:value=, :content=)\n"),
                  s(:str, "        end\n")),
                s(:splat,
                  s(:send, nil, :get_file_and_line_from_caller,
                    s(:int, 0)))))))),
      s(:casgn, nil, :DublincoreModel,
        s(:const, nil, :DublinCoreModel)),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :DublinCoreModel), :ELEMENTS), :each),
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :class_name,
            s(:send,
              s(:const, nil, :Utils), :to_class_name,
              s(:lvar, :name))),
          s(:send,
            s(:const, nil, :BaseListener), :install_class_name,
            s(:const, nil, :DC_URI),
            s(:lvar, :name),
            s(:dstr,
              s(:str, "DublinCore"),
              s(:begin,
                s(:lvar, :class_name)))))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :DublinCoreModel), :ELEMENTS), :collect!),
        s(:args,
          s(:arg, :name)),
        s(:dstr,
          s(:begin,
            s(:const, nil, :DC_PREFIX)),
          s(:str, "_"),
          s(:begin,
            s(:lvar, :name)))))),
  s(:send, nil, :require,
    s(:str, "rss/dublincore/1.0")),
  s(:send, nil, :require,
    s(:str, "rss/dublincore/2.0")),
  s(:send, nil, :require,
    s(:str, "rss/dublincore/atom")))
