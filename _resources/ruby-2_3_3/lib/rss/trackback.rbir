s(:begin,
  s(:send, nil, :require,
    s(:str, "rss/1.0")),
  s(:send, nil, :require,
    s(:str, "rss/2.0")),
  s(:module,
    s(:const, nil, :RSS),
    s(:begin,
      s(:casgn, nil, :TRACKBACK_PREFIX,
        s(:str, "trackback")),
      s(:casgn, nil, :TRACKBACK_URI,
        s(:str, "http://madskills.com/public/xml/rss/module/trackback/")),
      s(:send,
        s(:const, nil, :RDF), :install_ns,
        s(:const, nil, :TRACKBACK_PREFIX),
        s(:const, nil, :TRACKBACK_URI)),
      s(:send,
        s(:const, nil, :Rss), :install_ns,
        s(:const, nil, :TRACKBACK_PREFIX),
        s(:const, nil, :TRACKBACK_URI)),
      s(:module,
        s(:const, nil, :TrackBackUtils),
        s(:begin,
          s(:send, nil, :private),
          s(:def, :trackback_validate,
            s(:args,
              s(:arg, :ignore_unknown_element),
              s(:arg, :tags),
              s(:arg, :uri)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :tags), :nil?),
                s(:return), nil),
              s(:if,
                s(:and,
                  s(:block,
                    s(:send,
                      s(:lvar, :tags), :find),
                    s(:args,
                      s(:arg, :tag)),
                    s(:send,
                      s(:lvar, :tag), :==,
                      s(:str, "about"))),
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :tags), :find),
                      s(:args,
                        s(:arg, :tag)),
                      s(:send,
                        s(:lvar, :tag), :==,
                        s(:str, "ping"))), :!)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :MissingTagError), :new,
                    s(:dstr,
                      s(:begin,
                        s(:const, nil, :TRACKBACK_PREFIX)),
                      s(:str, ":ping")),
                    s(:send, nil, :tag_name))), nil))))),
      s(:module,
        s(:const, nil, :BaseTrackBackModel),
        s(:begin,
          s(:casgn, nil, :ELEMENTS,
            s(:array,
              s(:str, "ping"),
              s(:str, "about"))),
          s(:def, :append_features,
            s(:args,
              s(:arg, :klass)),
            s(:begin,
              s(:zsuper),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :class), :==,
                  s(:const, nil, :Module)), nil,
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:lvar, :klass), :module_eval),
                    s(:args),
                    s(:send, nil, :include,
                      s(:const, nil, :TrackBackUtils))),
                  s(:send,
                    s(:lvar, :klass), :install_must_call_validator,
                    s(:const, nil, :TRACKBACK_PREFIX),
                    s(:const, nil, :TRACKBACK_URI)),
                  s(:block,
                    s(:send,
                      s(:array,
                        s(:str, "ping")), :each),
                    s(:args,
                      s(:arg, :name)),
                    s(:begin,
                      s(:lvasgn, :var_name,
                        s(:dstr,
                          s(:begin,
                            s(:const, nil, :TRACKBACK_PREFIX)),
                          s(:str, "_"),
                          s(:begin,
                            s(:lvar, :name)))),
                      s(:lvasgn, :klass_name,
                        s(:dstr,
                          s(:str, "TrackBack"),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :Utils), :to_class_name,
                              s(:lvar, :name))))),
                      s(:send,
                        s(:lvar, :klass), :install_have_child_element,
                        s(:lvar, :name),
                        s(:const, nil, :TRACKBACK_URI),
                        s(:str, "?"),
                        s(:lvar, :var_name)),
                      s(:send,
                        s(:lvar, :klass), :module_eval,
                        s(:dstr,
                          s(:str, "            remove_method :"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "\n"),
                          s(:str, "            def "),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "\n"),
                          s(:str, "              @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, " and @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, ".value\n"),
                          s(:str, "            end\n"),
                          s(:str, "\n"),
                          s(:str, "            remove_method :"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "=\n"),
                          s(:str, "            def "),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "=(value)\n"),
                          s(:str, "              @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, " = Utils.new_with_value_if_need("),
                          s(:begin,
                            s(:lvar, :klass_name)),
                          s(:str, ", value)\n"),
                          s(:str, "            end\n")),
                        s(:str, "(string)"),
                        s(:int, 41)))),
                  s(:block,
                    s(:send,
                      s(:array,
                        s(:array,
                          s(:str, "about"),
                          s(:str, "s"))), :each),
                    s(:args,
                      s(:arg, :name),
                      s(:arg, :postfix)),
                    s(:begin,
                      s(:lvasgn, :var_name,
                        s(:dstr,
                          s(:begin,
                            s(:const, nil, :TRACKBACK_PREFIX)),
                          s(:str, "_"),
                          s(:begin,
                            s(:lvar, :name)))),
                      s(:lvasgn, :klass_name,
                        s(:dstr,
                          s(:str, "TrackBack"),
                          s(:begin,
                            s(:send,
                              s(:const, nil, :Utils), :to_class_name,
                              s(:lvar, :name))))),
                      s(:send,
                        s(:lvar, :klass), :install_have_children_element,
                        s(:lvar, :name),
                        s(:const, nil, :TRACKBACK_URI),
                        s(:str, "*"),
                        s(:lvar, :var_name)),
                      s(:send,
                        s(:lvar, :klass), :module_eval,
                        s(:dstr,
                          s(:str, "            remove_method :"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "\n"),
                          s(:str, "            def "),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "(*args)\n"),
                          s(:str, "              if args.empty?\n"),
                          s(:str, "                @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, ".first and @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, ".first.value\n"),
                          s(:str, "              else\n"),
                          s(:str, "                ret = @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, ".__send__(\"[]\", *args)\n"),
                          s(:str, "                if ret.is_a?(Array)\n"),
                          s(:str, "                  ret.collect {|x| x.value}\n"),
                          s(:str, "                else\n"),
                          s(:str, "                  ret.value\n"),
                          s(:str, "                end\n"),
                          s(:str, "              end\n"),
                          s(:str, "            end\n"),
                          s(:str, "\n"),
                          s(:str, "            remove_method :"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "=\n"),
                          s(:str, "            remove_method :set_"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "\n"),
                          s(:str, "            def "),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "=(*args)\n"),
                          s(:str, "              if args.size == 1\n"),
                          s(:str, "                item = Utils.new_with_value_if_need("),
                          s(:begin,
                            s(:lvar, :klass_name)),
                          s(:str, ", args[0])\n"),
                          s(:str, "                @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, ".push(item)\n"),
                          s(:str, "              else\n"),
                          s(:str, "                new_val = args.last\n"),
                          s(:str, "                if new_val.is_a?(Array)\n"),
                          s(:str, "                  new_val = new_value.collect do |val|\n"),
                          s(:str, "                    Utils.new_with_value_if_need("),
                          s(:begin,
                            s(:lvar, :klass_name)),
                          s(:str, ", val)\n"),
                          s(:str, "                  end\n"),
                          s(:str, "                else\n"),
                          s(:str, "                  new_val = Utils.new_with_value_if_need("),
                          s(:begin,
                            s(:lvar, :klass_name)),
                          s(:str, ", new_val)\n"),
                          s(:str, "                end\n"),
                          s(:str, "                @"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, ".__send__(\"[]=\", *(args[0..-2] + [new_val]))\n"),
                          s(:str, "              end\n"),
                          s(:str, "            end\n"),
                          s(:str, "            alias set_"),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, " "),
                          s(:begin,
                            s(:lvar, :var_name)),
                          s(:str, "=\n")),
                        s(:str, "(string)"),
                        s(:int, 59)))))))))),
      s(:module,
        s(:const, nil, :TrackBackModel10),
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :BaseModel)),
          s(:send, nil, :extend,
            s(:const, nil, :BaseTrackBackModel)),
          s(:class,
            s(:const, nil, :TrackBackPing),
            s(:const, nil, :Element),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :RSS10)),
              s(:sclass,
                s(:self),
                s(:begin,
                  s(:def, :required_prefix,
                    s(:args),
                    s(:const, nil, :TRACKBACK_PREFIX)),
                  s(:def, :required_uri,
                    s(:args),
                    s(:const, nil, :TRACKBACK_URI)))),
              s(:ivasgn, :@tag_name,
                s(:str, "ping")),
              s(:block,
                s(:send,
                  s(:array,
                    s(:array,
                      s(:str, "resource"),
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :RSS), :RDF), :URI),
                      s(:true))), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :uri),
                  s(:arg, :required)),
                s(:send, nil, :install_get_attribute,
                  s(:lvar, :name),
                  s(:lvar, :uri),
                  s(:lvar, :required),
                  s(:nil),
                  s(:nil),
                  s(:dstr,
                    s(:begin,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :RSS), :RDF), :PREFIX)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :name))))),
              s(:send, nil, :alias_method,
                s(:sym, :value),
                s(:sym, :resource)),
              s(:send, nil, :alias_method,
                s(:sym, :value=),
                s(:sym, :resource=)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :args)),
                s(:if,
                  s(:send,
                    s(:const, nil, :Utils), :element_initialize_arguments?,
                    s(:lvar, :args)),
                  s(:zsuper),
                  s(:begin,
                    s(:super),
                    s(:send,
                      s(:self), :resource=,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)))))),
              s(:def, :full_name,
                s(:args),
                s(:send, nil, :tag_name_with_prefix,
                  s(:const, nil, :TRACKBACK_PREFIX))))),
          s(:class,
            s(:const, nil, :TrackBackAbout),
            s(:const, nil, :Element),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :RSS10)),
              s(:sclass,
                s(:self),
                s(:begin,
                  s(:def, :required_prefix,
                    s(:args),
                    s(:const, nil, :TRACKBACK_PREFIX)),
                  s(:def, :required_uri,
                    s(:args),
                    s(:const, nil, :TRACKBACK_URI)))),
              s(:ivasgn, :@tag_name,
                s(:str, "about")),
              s(:block,
                s(:send,
                  s(:array,
                    s(:array,
                      s(:str, "resource"),
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :RSS), :RDF), :URI),
                      s(:true))), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :uri),
                  s(:arg, :required)),
                s(:send, nil, :install_get_attribute,
                  s(:lvar, :name),
                  s(:lvar, :uri),
                  s(:lvar, :required),
                  s(:nil),
                  s(:nil),
                  s(:dstr,
                    s(:begin,
                      s(:const,
                        s(:const,
                          s(:const,
                            s(:cbase), :RSS), :RDF), :PREFIX)),
                    s(:str, ":"),
                    s(:begin,
                      s(:lvar, :name))))),
              s(:send, nil, :alias_method,
                s(:sym, :value),
                s(:sym, :resource)),
              s(:send, nil, :alias_method,
                s(:sym, :value=),
                s(:sym, :resource=)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :args)),
                s(:if,
                  s(:send,
                    s(:const, nil, :Utils), :element_initialize_arguments?,
                    s(:lvar, :args)),
                  s(:zsuper),
                  s(:begin,
                    s(:super),
                    s(:send,
                      s(:self), :resource=,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)))))),
              s(:def, :full_name,
                s(:args),
                s(:send, nil, :tag_name_with_prefix,
                  s(:const, nil, :TRACKBACK_PREFIX))),
              s(:send, nil, :private),
              s(:def, :maker_target,
                s(:args,
                  s(:arg, :abouts)),
                s(:send,
                  s(:lvar, :abouts), :new_about)),
              s(:def, :setup_maker_attributes,
                s(:args,
                  s(:arg, :about)),
                s(:send,
                  s(:lvar, :about), :resource=,
                  s(:send,
                    s(:self), :resource))))))),
      s(:module,
        s(:const, nil, :TrackBackModel20),
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :BaseModel)),
          s(:send, nil, :extend,
            s(:const, nil, :BaseTrackBackModel)),
          s(:class,
            s(:const, nil, :TrackBackPing),
            s(:const, nil, :Element),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :RSS09)),
              s(:ivasgn, :@tag_name,
                s(:str, "ping")),
              s(:send, nil, :content_setup),
              s(:sclass,
                s(:self),
                s(:begin,
                  s(:def, :required_prefix,
                    s(:args),
                    s(:const, nil, :TRACKBACK_PREFIX)),
                  s(:def, :required_uri,
                    s(:args),
                    s(:const, nil, :TRACKBACK_URI)))),
              s(:send, nil, :alias_method,
                s(:sym, :value),
                s(:sym, :content)),
              s(:send, nil, :alias_method,
                s(:sym, :value=),
                s(:sym, :content=)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :args)),
                s(:if,
                  s(:send,
                    s(:const, nil, :Utils), :element_initialize_arguments?,
                    s(:lvar, :args)),
                  s(:zsuper),
                  s(:begin,
                    s(:super),
                    s(:send,
                      s(:self), :content=,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)))))),
              s(:def, :full_name,
                s(:args),
                s(:send, nil, :tag_name_with_prefix,
                  s(:const, nil, :TRACKBACK_PREFIX))))),
          s(:class,
            s(:const, nil, :TrackBackAbout),
            s(:const, nil, :Element),
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :RSS09)),
              s(:ivasgn, :@tag_name,
                s(:str, "about")),
              s(:send, nil, :content_setup),
              s(:sclass,
                s(:self),
                s(:begin,
                  s(:def, :required_prefix,
                    s(:args),
                    s(:const, nil, :TRACKBACK_PREFIX)),
                  s(:def, :required_uri,
                    s(:args),
                    s(:const, nil, :TRACKBACK_URI)))),
              s(:send, nil, :alias_method,
                s(:sym, :value),
                s(:sym, :content)),
              s(:send, nil, :alias_method,
                s(:sym, :value=),
                s(:sym, :content=)),
              s(:def, :initialize,
                s(:args,
                  s(:restarg, :args)),
                s(:if,
                  s(:send,
                    s(:const, nil, :Utils), :element_initialize_arguments?,
                    s(:lvar, :args)),
                  s(:zsuper),
                  s(:begin,
                    s(:super),
                    s(:send,
                      s(:self), :content=,
                      s(:send,
                        s(:lvar, :args), :[],
                        s(:int, 0)))))),
              s(:def, :full_name,
                s(:args),
                s(:send, nil, :tag_name_with_prefix,
                  s(:const, nil, :TRACKBACK_PREFIX))))))),
      s(:class,
        s(:const, nil, :RDF), nil,
        s(:class,
          s(:const, nil, :Item), nil,
          s(:send, nil, :include,
            s(:const, nil, :TrackBackModel10)))),
      s(:class,
        s(:const, nil, :Rss), nil,
        s(:class,
          s(:const, nil, :Channel), nil,
          s(:class,
            s(:const, nil, :Item), nil,
            s(:send, nil, :include,
              s(:const, nil, :TrackBackModel20))))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :BaseTrackBackModel), :ELEMENTS), :each),
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :class_name,
            s(:send,
              s(:const, nil, :Utils), :to_class_name,
              s(:lvar, :name))),
          s(:send,
            s(:const, nil, :BaseListener), :install_class_name,
            s(:const, nil, :TRACKBACK_URI),
            s(:lvar, :name),
            s(:dstr,
              s(:str, "TrackBack"),
              s(:begin,
                s(:lvar, :class_name)))))),
      s(:block,
        s(:send,
          s(:const,
            s(:const, nil, :BaseTrackBackModel), :ELEMENTS), :collect!),
        s(:args,
          s(:arg, :name)),
        s(:dstr,
          s(:begin,
            s(:const, nil, :TRACKBACK_PREFIX)),
          s(:str, "_"),
          s(:begin,
            s(:lvar, :name)))))))
