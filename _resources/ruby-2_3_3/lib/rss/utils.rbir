s(:module,
  s(:const, nil, :RSS),
  s(:module,
    s(:const, nil, :Utils),
    s(:begin,
      s(:send, nil, :module_function),
      s(:def, :to_class_name,
        s(:args,
          s(:arg, :name)),
        s(:send,
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :name), :split,
                s(:regexp,
                  s(:str, "[_\\-]"),
                  s(:regopt))), :collect),
            s(:args,
              s(:arg, :part)),
            s(:dstr,
              s(:begin,
                s(:send,
                  s(:send,
                    s(:lvar, :part), :[],
                    s(:int, 0),
                    s(:int, 1)), :upcase)),
              s(:begin,
                s(:send,
                  s(:lvar, :part), :[],
                  s(:irange,
                    s(:int, 1),
                    s(:int, -1)))))), :join,
          s(:str, ""))),
      s(:def, :get_file_and_line_from_caller,
        s(:args,
          s(:optarg, :i,
            s(:int, 0))),
        s(:begin,
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :file),
              s(:lvasgn, :line)),
            s(:send,
              s(:send,
                s(:send, nil, :caller), :[],
                s(:lvar, :i)), :split,
              s(:str, ":"))),
          s(:lvasgn, :line,
            s(:send,
              s(:lvar, :line), :to_i)),
          s(:if,
            s(:send,
              s(:lvar, :i), :zero?),
            s(:op_asgn,
              s(:lvasgn, :line), :+,
              s(:int, 1)), nil),
          s(:array,
            s(:lvar, :file),
            s(:lvar, :line)))),
      s(:def, :html_escape,
        s(:args,
          s(:arg, :s)),
        s(:send,
          s(:send,
            s(:send,
              s(:send,
                s(:send,
                  s(:lvar, :s), :to_s), :gsub,
                s(:regexp,
                  s(:str, "&"),
                  s(:regopt)),
                s(:str, "&amp;")), :gsub,
              s(:regexp,
                s(:str, "\\\""),
                s(:regopt)),
              s(:str, "&quot;")), :gsub,
            s(:regexp,
              s(:str, ">"),
              s(:regopt)),
            s(:str, "&gt;")), :gsub,
          s(:regexp,
            s(:str, "<"),
            s(:regopt)),
          s(:str, "&lt;"))),
      s(:alias,
        s(:sym, :h),
        s(:sym, :html_escape)),
      s(:def, :new_with_value_if_need,
        s(:args,
          s(:arg, :klass),
          s(:arg, :value)),
        s(:if,
          s(:send,
            s(:lvar, :value), :is_a?,
            s(:lvar, :klass)),
          s(:lvar, :value),
          s(:send,
            s(:lvar, :klass), :new,
            s(:lvar, :value)))),
      s(:def, :element_initialize_arguments?,
        s(:args,
          s(:arg, :args)),
        s(:and,
          s(:send,
            s(:array,
              s(:true),
              s(:false)), :include?,
            s(:send,
              s(:lvar, :args), :[],
              s(:int, 0))),
          s(:send,
            s(:send,
              s(:lvar, :args), :[],
              s(:int, 1)), :is_a?,
            s(:const, nil, :Hash)))),
      s(:module,
        s(:const, nil, :YesCleanOther),
        s(:begin,
          s(:send, nil, :module_function),
          s(:def, :parse,
            s(:args,
              s(:arg, :value)),
            s(:if,
              s(:send,
                s(:array,
                  s(:true),
                  s(:false),
                  s(:nil)), :include?,
                s(:lvar, :value)),
              s(:lvar, :value),
              s(:case,
                s(:send,
                  s(:lvar, :value), :to_s),
                s(:when,
                  s(:regexp,
                    s(:str, "\\Ayes\\z"),
                    s(:regopt, :i)),
                  s(:true)),
                s(:when,
                  s(:regexp,
                    s(:str, "\\Aclean\\z"),
                    s(:regopt, :i)),
                  s(:false)),
                s(:nil)))))),
      s(:module,
        s(:const, nil, :YesOther),
        s(:begin,
          s(:send, nil, :module_function),
          s(:def, :parse,
            s(:args,
              s(:arg, :value)),
            s(:if,
              s(:send,
                s(:array,
                  s(:true),
                  s(:false)), :include?,
                s(:lvar, :value)),
              s(:lvar, :value),
              s(:if,
                s(:send,
                  s(:regexp,
                    s(:str, "\\Ayes\\z"),
                    s(:regopt, :i)), :match,
                  s(:send,
                    s(:lvar, :value), :to_s)),
                s(:true),
                s(:false)))))),
      s(:module,
        s(:const, nil, :CSV),
        s(:begin,
          s(:send, nil, :module_function),
          s(:def, :parse,
            s(:args,
              s(:arg, :value),
              s(:blockarg, :block)),
            s(:if,
              s(:send,
                s(:lvar, :value), :is_a?,
                s(:const, nil, :String)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send,
                    s(:send,
                      s(:lvar, :value), :strip), :split,
                    s(:regexp,
                      s(:str, "\\s*,\\s*"),
                      s(:regopt)))),
                s(:if,
                  s(:send, nil, :block_given?),
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :value), :collect,
                      s(:block_pass,
                        s(:lvar, :block)))), nil),
                s(:lvar, :value)),
              s(:lvar, :value))))),
      s(:module,
        s(:const, nil, :InheritedReader),
        s(:begin,
          s(:def, :inherited_reader,
            s(:args,
              s(:arg, :constant_name)),
            s(:begin,
              s(:lvasgn, :base_class,
                s(:send, nil, :inherited_base)),
              s(:lvasgn, :result,
                s(:send,
                  s(:lvar, :base_class), :const_get,
                  s(:lvar, :constant_name))),
              s(:lvasgn, :found_base_class,
                s(:false)),
              s(:block,
                s(:send,
                  s(:send, nil, :ancestors), :reverse_each),
                s(:args,
                  s(:arg, :klass)),
                s(:if,
                  s(:lvar, :found_base_class),
                  s(:if,
                    s(:send,
                      s(:lvar, :klass), :const_defined?,
                      s(:lvar, :constant_name)),
                    s(:lvasgn, :result,
                      s(:yield,
                        s(:lvar, :result),
                        s(:send,
                          s(:lvar, :klass), :const_get,
                          s(:lvar, :constant_name)))), nil),
                  s(:lvasgn, :found_base_class,
                    s(:send,
                      s(:lvar, :klass), :==,
                      s(:lvar, :base_class))))),
              s(:lvar, :result))),
          s(:def, :inherited_array_reader,
            s(:args,
              s(:arg, :constant_name)),
            s(:block,
              s(:send, nil, :inherited_reader,
                s(:lvar, :constant_name)),
              s(:args,
                s(:arg, :result),
                s(:arg, :current)),
              s(:send,
                s(:lvar, :current), :+,
                s(:lvar, :result)))),
          s(:def, :inherited_hash_reader,
            s(:args,
              s(:arg, :constant_name)),
            s(:block,
              s(:send, nil, :inherited_reader,
                s(:lvar, :constant_name)),
              s(:args,
                s(:arg, :result),
                s(:arg, :current)),
              s(:send,
                s(:lvar, :result), :merge,
                s(:lvar, :current)))))))))
