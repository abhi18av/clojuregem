s(:begin,
  s(:send, nil, :require,
    s(:str, "time")),
  s(:class,
    s(:const, nil, :Time), nil,
    s(:begin,
      s(:sclass,
        s(:self),
        s(:if,
          s(:send, nil, :respond_to?,
            s(:sym, :w3cdtf)), nil,
          s(:def, :w3cdtf,
            s(:args,
              s(:arg, :date)),
            s(:if,
              s(:and,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A\\s*\n"),
                    s(:str, "            (-?\\d+)-(\\d\\d)-(\\d\\d)\n"),
                    s(:str, "            (?:T\n"),
                    s(:str, "            (\\d\\d):(\\d\\d)(?::(\\d\\d))?\n"),
                    s(:str, "            (\\.\\d+)?\n"),
                    s(:str, "            (Z|[+-]\\d\\d:\\d\\d)?)?\n"),
                    s(:str, "            \\s*\\z"),
                    s(:regopt, :i, :x)),
                  s(:lvar, :date)),
                s(:begin,
                  s(:or,
                    s(:begin,
                      s(:and,
                        s(:nth_ref, 5),
                        s(:nth_ref, 8))),
                    s(:begin,
                      s(:and,
                        s(:send,
                          s(:nth_ref, 5), :!),
                        s(:send,
                          s(:nth_ref, 8), :!)))))),
              s(:begin,
                s(:lvasgn, :datetime,
                  s(:array,
                    s(:send,
                      s(:nth_ref, 1), :to_i),
                    s(:send,
                      s(:nth_ref, 2), :to_i),
                    s(:send,
                      s(:nth_ref, 3), :to_i),
                    s(:send,
                      s(:nth_ref, 4), :to_i),
                    s(:send,
                      s(:nth_ref, 5), :to_i),
                    s(:send,
                      s(:nth_ref, 6), :to_i))),
                s(:lvasgn, :usec,
                  s(:int, 0)),
                s(:if,
                  s(:nth_ref, 7),
                  s(:lvasgn, :usec,
                    s(:send,
                      s(:send,
                        s(:nth_ref, 7), :to_f), :*,
                      s(:int, 1000000))), nil),
                s(:lvasgn, :zone,
                  s(:nth_ref, 8)),
                s(:if,
                  s(:lvar, :zone),
                  s(:begin,
                    s(:lvasgn, :off,
                      s(:send, nil, :zone_offset,
                        s(:lvar, :zone),
                        s(:send,
                          s(:lvar, :datetime), :[],
                          s(:int, 0)))),
                    s(:lvasgn, :datetime,
                      s(:send, nil, :apply_offset,
                        s(:splat,
                          s(:begin,
                            s(:send,
                              s(:lvar, :datetime), :+,
                              s(:array,
                                s(:lvar, :off))))))),
                    s(:send,
                      s(:lvar, :datetime), :<<,
                      s(:lvar, :usec)),
                    s(:lvasgn, :time,
                      s(:send,
                        s(:const, nil, :Time), :utc,
                        s(:splat,
                          s(:lvar, :datetime)))),
                    s(:send, nil, :force_zone!,
                      s(:lvar, :time),
                      s(:lvar, :zone),
                      s(:lvar, :off)),
                    s(:lvar, :time)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :datetime), :<<,
                      s(:lvar, :usec)),
                    s(:send,
                      s(:const, nil, :Time), :local,
                      s(:splat,
                        s(:lvar, :datetime)))))),
              s(:send, nil, :raise,
                s(:send,
                  s(:const, nil, :ArgumentError), :new,
                  s(:dstr,
                    s(:str, "invalid date: "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :date), :inspect))))))))),
      s(:if,
        s(:send, nil, :method_defined?,
          s(:sym, :w3cdtf)), nil,
        s(:def, :w3cdtf,
          s(:args),
          s(:begin,
            s(:if,
              s(:send,
                s(:send, nil, :usec), :zero?),
              s(:lvasgn, :fraction_digits,
                s(:int, 0)),
              s(:lvasgn, :fraction_digits,
                s(:send,
                  s(:send, nil, :strftime,
                    s(:str, "%6N")), :index,
                  s(:regexp,
                    s(:str, "0*\\z"),
                    s(:regopt))))),
            s(:send, nil, :xmlschema,
              s(:lvar, :fraction_digits))))))),
  s(:send, nil, :require,
    s(:str, "English")),
  s(:send, nil, :require,
    s(:str, "rss/utils")),
  s(:send, nil, :require,
    s(:str, "rss/converter")),
  s(:send, nil, :require,
    s(:str, "rss/xml-stylesheet")),
  s(:module,
    s(:const, nil, :RSS),
    s(:begin,
      s(:casgn, nil, :VERSION,
        s(:str, "0.2.7")),
      s(:casgn, nil, :URI,
        s(:str, "http://purl.org/rss/1.0/")),
      s(:casgn, nil, :DEBUG,
        s(:false)),
      s(:class,
        s(:const, nil, :Error),
        s(:const, nil, :StandardError), nil),
      s(:class,
        s(:const, nil, :OverlappedPrefixError),
        s(:const, nil, :Error),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :prefix)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :prefix)),
            s(:ivasgn, :@prefix,
              s(:lvar, :prefix))))),
      s(:class,
        s(:const, nil, :InvalidRSSError),
        s(:const, nil, :Error), nil),
      s(:class,
        s(:const, nil, :MissingTagError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :parent)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :parent)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@parent)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :parent))),
              s(:super,
                s(:dstr,
                  s(:str, "tag <"),
                  s(:begin,
                    s(:lvar, :tag)),
                  s(:str, "> is missing in tag <"),
                  s(:begin,
                    s(:lvar, :parent)),
                  s(:str, ">"))))))),
      s(:class,
        s(:const, nil, :TooMuchTagError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :parent)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :parent)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@parent)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :parent))),
              s(:super,
                s(:dstr,
                  s(:str, "tag <"),
                  s(:begin,
                    s(:lvar, :tag)),
                  s(:str, "> is too much in tag <"),
                  s(:begin,
                    s(:lvar, :parent)),
                  s(:str, ">"))))))),
      s(:class,
        s(:const, nil, :MissingAttributeError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :attribute)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :attribute)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@attribute)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :attribute))),
              s(:super,
                s(:dstr,
                  s(:str, "attribute <"),
                  s(:begin,
                    s(:lvar, :attribute)),
                  s(:str, "> is missing in tag <"),
                  s(:begin,
                    s(:lvar, :tag)),
                  s(:str, ">"))))))),
      s(:class,
        s(:const, nil, :UnknownTagError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :uri)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :uri)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@uri)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :uri))),
              s(:super,
                s(:dstr,
                  s(:str, "tag <"),
                  s(:begin,
                    s(:lvar, :tag)),
                  s(:str, "> is unknown in namespace specified by uri <"),
                  s(:begin,
                    s(:lvar, :uri)),
                  s(:str, ">"))))))),
      s(:class,
        s(:const, nil, :NotExpectedTagError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :uri),
            s(:sym, :parent)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :uri),
              s(:arg, :parent)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@uri),
                  s(:ivasgn, :@parent)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :uri),
                  s(:lvar, :parent))),
              s(:super,
                s(:dstr,
                  s(:str, "tag <{"),
                  s(:begin,
                    s(:lvar, :uri)),
                  s(:str, "}"),
                  s(:begin,
                    s(:lvar, :tag)),
                  s(:str, "> is not expected in tag <"),
                  s(:begin,
                    s(:lvar, :parent)),
                  s(:str, ">"))))))),
      s(:casgn, nil, :NotExceptedTagError,
        s(:const, nil, :NotExpectedTagError)),
      s(:class,
        s(:const, nil, :NotAvailableValueError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :value),
            s(:sym, :attribute)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :value),
              s(:optarg, :attribute,
                s(:nil))),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@value),
                  s(:ivasgn, :@attribute)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :value),
                  s(:lvar, :attribute))),
              s(:lvasgn, :message,
                s(:dstr,
                  s(:str, "value <"),
                  s(:begin,
                    s(:lvar, :value)),
                  s(:str, "> of "))),
              s(:if,
                s(:lvar, :attribute),
                s(:send,
                  s(:lvar, :message), :<<,
                  s(:dstr,
                    s(:str, "attribute <"),
                    s(:begin,
                      s(:lvar, :attribute)),
                    s(:str, "> of "))), nil),
              s(:send,
                s(:lvar, :message), :<<,
                s(:dstr,
                  s(:str, "tag <"),
                  s(:begin,
                    s(:lvar, :tag)),
                  s(:str, "> is not available."))),
              s(:super,
                s(:lvar, :message)))))),
      s(:class,
        s(:const, nil, :UnknownConversionMethodError),
        s(:const, nil, :Error),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :to),
            s(:sym, :from)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :to),
              s(:arg, :from)),
            s(:begin,
              s(:ivasgn, :@to,
                s(:lvar, :to)),
              s(:ivasgn, :@from,
                s(:lvar, :from)),
              s(:super,
                s(:dstr,
                  s(:str, "can't convert to "),
                  s(:begin,
                    s(:lvar, :to)),
                  s(:str, " from "),
                  s(:begin,
                    s(:lvar, :from)),
                  s(:str, "."))))))),
      s(:casgn, nil, :UnknownConvertMethod,
        s(:const, nil, :UnknownConversionMethodError)),
      s(:class,
        s(:const, nil, :ConversionError),
        s(:const, nil, :Error),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :string),
            s(:sym, :to),
            s(:sym, :from)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :string),
              s(:arg, :to),
              s(:arg, :from)),
            s(:begin,
              s(:ivasgn, :@string,
                s(:lvar, :string)),
              s(:ivasgn, :@to,
                s(:lvar, :to)),
              s(:ivasgn, :@from,
                s(:lvar, :from)),
              s(:super,
                s(:dstr,
                  s(:str, "can't convert "),
                  s(:begin,
                    s(:ivar, :@string)),
                  s(:str, " to "),
                  s(:begin,
                    s(:lvar, :to)),
                  s(:str, " from "),
                  s(:begin,
                    s(:lvar, :from)),
                  s(:str, "."))))))),
      s(:class,
        s(:const, nil, :NotSetError),
        s(:const, nil, :Error),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :name),
            s(:sym, :variables)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :name),
              s(:arg, :variables)),
            s(:begin,
              s(:ivasgn, :@name,
                s(:lvar, :name)),
              s(:ivasgn, :@variables,
                s(:lvar, :variables)),
              s(:super,
                s(:dstr,
                  s(:str, "required variables of "),
                  s(:begin,
                    s(:ivar, :@name)),
                  s(:str, " are not set: "),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@variables), :join,
                      s(:str, ", "))))))))),
      s(:class,
        s(:const, nil, :UnsupportedMakerVersionError),
        s(:const, nil, :Error),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :version)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :version)),
            s(:begin,
              s(:ivasgn, :@version,
                s(:lvar, :version)),
              s(:super,
                s(:dstr,
                  s(:str, "Maker doesn't support version: "),
                  s(:begin,
                    s(:ivar, :@version)))))))),
      s(:module,
        s(:const, nil, :BaseModel),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :Utils)),
          s(:def, :install_have_child_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :uri),
              s(:arg, :occurs),
              s(:optarg, :name,
                s(:nil)),
              s(:optarg, :type,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :name),
                s(:lvar, :tag_name)),
              s(:send, nil, :add_need_initialize_variable,
                s(:lvar, :name)),
              s(:send, nil, :install_model,
                s(:lvar, :tag_name),
                s(:lvar, :uri),
                s(:lvar, :occurs),
                s(:lvar, :name)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :writer_type),
                  s(:lvasgn, :reader_type)),
                s(:lvar, :type)),
              s(:send, nil, :def_corresponded_attr_writer,
                s(:lvar, :name),
                s(:lvar, :writer_type)),
              s(:send, nil, :def_corresponded_attr_reader,
                s(:lvar, :name),
                s(:lvar, :reader_type)),
              s(:block,
                s(:send, nil, :install_element,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :elem_name)),
                s(:dstr,
                  s(:str, "        if @"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, "\n"),
                  s(:str, "          \"\#{@"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, ".to_s(need_convert, indent)}\"\n"),
                  s(:str, "        else\n"),
                  s(:str, "          ''\n"),
                  s(:str, "        end\n"))))),
          s(:send, nil, :alias_method,
            s(:sym, :install_have_attribute_element),
            s(:sym, :install_have_child_element)),
          s(:def, :install_have_children_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :uri),
              s(:arg, :occurs),
              s(:optarg, :name,
                s(:nil)),
              s(:optarg, :plural_name,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :name),
                s(:lvar, :tag_name)),
              s(:or_asgn,
                s(:lvasgn, :plural_name),
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "s"))),
              s(:send, nil, :add_have_children_element,
                s(:lvar, :name),
                s(:lvar, :plural_name)),
              s(:send, nil, :add_plural_form,
                s(:lvar, :name),
                s(:lvar, :plural_name)),
              s(:send, nil, :install_model,
                s(:lvar, :tag_name),
                s(:lvar, :uri),
                s(:lvar, :occurs),
                s(:lvar, :plural_name),
                s(:true)),
              s(:send, nil, :def_children_accessor,
                s(:lvar, :name),
                s(:lvar, :plural_name)),
              s(:block,
                s(:send, nil, :install_element,
                  s(:lvar, :name),
                  s(:str, "s")),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :elem_name)),
                s(:dstr,
                  s(:str, "        rv = []\n"),
                  s(:str, "        @"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, ".each do |x|\n"),
                  s(:str, "          value = \"\#{x.to_s(need_convert, indent)}\"\n"),
                  s(:str, "          rv << value if /\\A\\s*\\z/ !~ value\n"),
                  s(:str, "        end\n"),
                  s(:str, "        rv.join(\"\n\")\n"))))),
          s(:def, :install_text_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :uri),
              s(:arg, :occurs),
              s(:optarg, :name,
                s(:nil)),
              s(:optarg, :type,
                s(:nil)),
              s(:optarg, :disp_name,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :name),
                s(:lvar, :tag_name)),
              s(:or_asgn,
                s(:lvasgn, :disp_name),
                s(:lvar, :name)),
              s(:if,
                s(:send,
                  s(:const,
                    s(:self), :ELEMENTS), :include?,
                  s(:lvar, :name)), nil,
                s(:send,
                  s(:const,
                    s(:self), :ELEMENTS), :<<,
                  s(:lvar, :name))),
              s(:send, nil, :add_need_initialize_variable,
                s(:lvar, :name)),
              s(:send, nil, :install_model,
                s(:lvar, :tag_name),
                s(:lvar, :uri),
                s(:lvar, :occurs),
                s(:lvar, :name)),
              s(:send, nil, :def_corresponded_attr_writer,
                s(:lvar, :name),
                s(:lvar, :type),
                s(:lvar, :disp_name)),
              s(:send, nil, :def_corresponded_attr_reader,
                s(:lvar, :name),
                s(:or,
                  s(:lvar, :type),
                  s(:sym, :convert))),
              s(:block,
                s(:send, nil, :install_element,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :elem_name)),
                s(:dstr,
                  s(:str, "        if respond_to?(:"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, "_content)\n"),
                  s(:str, "          content = "),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, "_content\n"),
                  s(:str, "        else\n"),
                  s(:str, "          content = @"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, "\n"),
                  s(:str, "        end\n"),
                  s(:str, "        if content\n"),
                  s(:str, "          rv = \"\#{indent}<"),
                  s(:begin,
                    s(:lvar, :elem_name)),
                  s(:str, ">\"\n"),
                  s(:str, "          value = html_escape(content)\n"),
                  s(:str, "          if need_convert\n"),
                  s(:str, "            rv << convert(value)\n"),
                  s(:str, "          else\n"),
                  s(:str, "            rv << value\n"),
                  s(:str, "          end\n"),
                  s(:str, "            rv << \"</"),
                  s(:begin,
                    s(:lvar, :elem_name)),
                  s(:str, ">\"\n"),
                  s(:str, "          rv\n"),
                  s(:str, "        else\n"),
                  s(:str, "          ''\n"),
                  s(:str, "        end\n"))))),
          s(:def, :install_date_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :uri),
              s(:arg, :occurs),
              s(:optarg, :name,
                s(:nil)),
              s(:optarg, :type,
                s(:nil)),
              s(:optarg, :disp_name,
                s(:nil))),
            s(:begin,
              s(:or_asgn,
                s(:lvasgn, :name),
                s(:lvar, :tag_name)),
              s(:or_asgn,
                s(:lvasgn, :type),
                s(:sym, :w3cdtf)),
              s(:or_asgn,
                s(:lvasgn, :disp_name),
                s(:lvar, :name)),
              s(:send,
                s(:const,
                  s(:self), :ELEMENTS), :<<,
                s(:lvar, :name)),
              s(:send, nil, :add_need_initialize_variable,
                s(:lvar, :name)),
              s(:send, nil, :install_model,
                s(:lvar, :tag_name),
                s(:lvar, :uri),
                s(:lvar, :occurs),
                s(:lvar, :name)),
              s(:send, nil, :convert_attr_reader,
                s(:lvar, :name)),
              s(:send, nil, :date_writer,
                s(:lvar, :name),
                s(:lvar, :type),
                s(:lvar, :disp_name)),
              s(:block,
                s(:send, nil, :install_element,
                  s(:lvar, :name)),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :elem_name)),
                s(:dstr,
                  s(:str, "        if @"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, "\n"),
                  s(:str, "          rv = \"\#{indent}<"),
                  s(:begin,
                    s(:lvar, :elem_name)),
                  s(:str, ">\"\n"),
                  s(:str, "          value = html_escape(@"),
                  s(:begin,
                    s(:lvar, :n)),
                  s(:str, "."),
                  s(:begin,
                    s(:lvar, :type)),
                  s(:str, ")\n"),
                  s(:str, "          if need_convert\n"),
                  s(:str, "            rv << convert(value)\n"),
                  s(:str, "          else\n"),
                  s(:str, "            rv << value\n"),
                  s(:str, "          end\n"),
                  s(:str, "            rv << \"</"),
                  s(:begin,
                    s(:lvar, :elem_name)),
                  s(:str, ">\"\n"),
                  s(:str, "          rv\n"),
                  s(:str, "        else\n"),
                  s(:str, "          ''\n"),
                  s(:str, "        end\n"))))),
          s(:send, nil, :private),
          s(:def, :install_element,
            s(:args,
              s(:arg, :name),
              s(:optarg, :postfix,
                s(:str, ""))),
            s(:begin,
              s(:lvasgn, :elem_name,
                s(:send,
                  s(:lvar, :name), :sub,
                  s(:str, "_"),
                  s(:str, ":"))),
              s(:lvasgn, :method_name,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "_element"),
                  s(:begin,
                    s(:lvar, :postfix)))),
              s(:send, nil, :add_to_element_method,
                s(:lvar, :method_name)),
              s(:send, nil, :module_eval,
                s(:dstr,
                  s(:str, "      def "),
                  s(:begin,
                    s(:lvar, :method_name)),
                  s(:str, "(need_convert=true, indent='')\n"),
                  s(:str, "        "),
                  s(:begin,
                    s(:yield,
                      s(:lvar, :name),
                      s(:lvar, :elem_name))),
                  s(:str, "\n"),
                  s(:str, "      end\n"),
                  s(:str, "      private :"),
                  s(:begin,
                    s(:lvar, :method_name)),
                  s(:str, "\n")),
                s(:splat,
                  s(:send, nil, :get_file_and_line_from_caller,
                    s(:int, 2)))))),
          s(:def, :inherit_convert_attr_reader,
            s(:args,
              s(:restarg, :attrs)),
            s(:block,
              s(:send,
                s(:lvar, :attrs), :each),
              s(:args,
                s(:arg, :attr)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :attr), :kind_of?,
                    s(:const, nil, :Integer)),
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:lvar, :attr), :id2name)), nil),
                s(:send, nil, :module_eval,
                  s(:dstr,
                    s(:str, "        def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "_without_inherit\n"),
                    s(:str, "          convert(@"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "        end\n"),
                    s(:str, "\n"),
                    s(:str, "        def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "\n"),
                    s(:str, "          if @"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "\n"),
                    s(:str, "            "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "_without_inherit\n"),
                    s(:str, "          elsif @parent\n"),
                    s(:str, "            @parent."),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "\n"),
                    s(:str, "          else\n"),
                    s(:str, "            nil\n"),
                    s(:str, "          end\n"),
                    s(:str, "        end\n")),
                  s(:splat,
                    s(:send, nil, :get_file_and_line_from_caller,
                      s(:int, 2))))))),
          s(:def, :uri_convert_attr_reader,
            s(:args,
              s(:restarg, :attrs)),
            s(:block,
              s(:send,
                s(:lvar, :attrs), :each),
              s(:args,
                s(:arg, :attr)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :attr), :kind_of?,
                    s(:const, nil, :Integer)),
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:lvar, :attr), :id2name)), nil),
                s(:send, nil, :module_eval,
                  s(:dstr,
                    s(:str, "        def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "_without_base\n"),
                    s(:str, "          convert(@"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "        end\n"),
                    s(:str, "\n"),
                    s(:str, "        def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "\n"),
                    s(:str, "          value = "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "_without_base\n"),
                    s(:str, "          return nil if value.nil?\n"),
                    s(:str, "          if /\\A[a-z][a-z0-9+.\\-]*:/i =~ value\n"),
                    s(:str, "            value\n"),
                    s(:str, "          else\n"),
                    s(:str, "            \"\#{base}\#{value}\"\n"),
                    s(:str, "          end\n"),
                    s(:str, "        end\n")),
                  s(:splat,
                    s(:send, nil, :get_file_and_line_from_caller,
                      s(:int, 2))))))),
          s(:def, :convert_attr_reader,
            s(:args,
              s(:restarg, :attrs)),
            s(:block,
              s(:send,
                s(:lvar, :attrs), :each),
              s(:args,
                s(:arg, :attr)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :attr), :kind_of?,
                    s(:const, nil, :Integer)),
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:lvar, :attr), :id2name)), nil),
                s(:send, nil, :module_eval,
                  s(:dstr,
                    s(:str, "        def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "\n"),
                    s(:str, "          convert(@"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "        end\n")),
                  s(:splat,
                    s(:send, nil, :get_file_and_line_from_caller,
                      s(:int, 2))))))),
          s(:def, :yes_clean_other_attr_reader,
            s(:args,
              s(:restarg, :attrs)),
            s(:block,
              s(:send,
                s(:lvar, :attrs), :each),
              s(:args,
                s(:arg, :attr)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :attr), :kind_of?,
                    s(:const, nil, :Integer)),
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:lvar, :attr), :id2name)), nil),
                s(:send, nil, :module_eval,
                  s(:dstr,
                    s(:str, "          attr_reader(:"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "          def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "?\n"),
                    s(:str, "            YesCleanOther.parse(@"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "          end\n")),
                  s(:str, "(string)"),
                  s(:send,
                    s(:int, 383), :+,
                    s(:int, 1)))))),
          s(:def, :yes_other_attr_reader,
            s(:args,
              s(:restarg, :attrs)),
            s(:block,
              s(:send,
                s(:lvar, :attrs), :each),
              s(:args,
                s(:arg, :attr)),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :attr), :kind_of?,
                    s(:const, nil, :Integer)),
                  s(:lvasgn, :attr,
                    s(:send,
                      s(:lvar, :attr), :id2name)), nil),
                s(:send, nil, :module_eval,
                  s(:dstr,
                    s(:str, "          attr_reader(:"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "          def "),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, "?\n"),
                    s(:str, "            Utils::YesOther.parse(@"),
                    s(:begin,
                      s(:lvar, :attr)),
                    s(:str, ")\n"),
                    s(:str, "          end\n")),
                  s(:str, "(string)"),
                  s(:send,
                    s(:int, 395), :+,
                    s(:int, 1)))))),
          s(:def, :csv_attr_reader,
            s(:args,
              s(:restarg, :attrs)),
            s(:begin,
              s(:lvasgn, :separator,
                s(:nil)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :attrs), :last), :is_a?,
                  s(:const, nil, :Hash)),
                s(:begin,
                  s(:lvasgn, :options,
                    s(:send,
                      s(:lvar, :attrs), :pop)),
                  s(:lvasgn, :separator,
                    s(:send,
                      s(:lvar, :options), :[],
                      s(:sym, :separator)))), nil),
              s(:or_asgn,
                s(:lvasgn, :separator),
                s(:str, ", ")),
              s(:block,
                s(:send,
                  s(:lvar, :attrs), :each),
                s(:args,
                  s(:arg, :attr)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :attr), :kind_of?,
                      s(:const, nil, :Integer)),
                    s(:lvasgn, :attr,
                      s(:send,
                        s(:lvar, :attr), :id2name)), nil),
                  s(:send, nil, :module_eval,
                    s(:dstr,
                      s(:str, "          attr_reader(:"),
                      s(:begin,
                        s(:lvar, :attr)),
                      s(:str, ")\n"),
                      s(:str, "          def "),
                      s(:begin,
                        s(:lvar, :attr)),
                      s(:str, "_content\n"),
                      s(:str, "            if @"),
                      s(:begin,
                        s(:lvar, :attr)),
                      s(:str, ".nil?\n"),
                      s(:str, "              @"),
                      s(:begin,
                        s(:lvar, :attr)),
                      s(:str, "\n"),
                      s(:str, "            else\n"),
                      s(:str, "              @"),
                      s(:begin,
                        s(:lvar, :attr)),
                      s(:str, ".join("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :separator), :dump)),
                      s(:str, ")\n"),
                      s(:str, "            end\n"),
                      s(:str, "          end\n")),
                    s(:str, "(string)"),
                    s(:send,
                      s(:int, 413), :+,
                      s(:int, 1))))))),
          s(:def, :date_writer,
            s(:args,
              s(:arg, :name),
              s(:arg, :type),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "        if new_value.nil?\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "        elsif new_value.kind_of?(Time)\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value.dup\n"),
                s(:str, "        else\n"),
                s(:str, "          if @do_validate\n"),
                s(:str, "            begin\n"),
                s(:str, "              @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = Time.__send__('"),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, "', new_value)\n"),
                s(:str, "            rescue ArgumentError\n"),
                s(:str, "              raise NotAvailableValueError.new('"),
                s(:begin,
                  s(:lvar, :disp_name)),
                s(:str, "', new_value)\n"),
                s(:str, "            end\n"),
                s(:str, "          else\n"),
                s(:str, "            @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = nil\n"),
                s(:str, "            if /\\A\\s*\\z/ !~ new_value.to_s\n"),
                s(:str, "              begin\n"),
                s(:str, "                unless Date._parse(new_value, false).empty?\n"),
                s(:str, "                  @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = Time.parse(new_value)\n"),
                s(:str, "                end\n"),
                s(:str, "              rescue ArgumentError\n"),
                s(:str, "              end\n"),
                s(:str, "            end\n"),
                s(:str, "          end\n"),
                s(:str, "        end\n"),
                s(:str, "\n"),
                s(:str, "        # Is it need?\n"),
                s(:str, "        if @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "\n"),
                s(:str, "          class << @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "\n"),
                s(:str, "            undef_method(:to_s)\n"),
                s(:str, "            alias_method(:to_s, :"),
                s(:begin,
                  s(:lvar, :type)),
                s(:str, ")\n"),
                s(:str, "          end\n"),
                s(:str, "        end\n"),
                s(:str, "\n"),
                s(:str, "      end\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 2))))),
          s(:def, :integer_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "        if new_value.nil?\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "        else\n"),
                s(:str, "          if @do_validate\n"),
                s(:str, "            begin\n"),
                s(:str, "              @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = Integer(new_value)\n"),
                s(:str, "            rescue ArgumentError\n"),
                s(:str, "              raise NotAvailableValueError.new('"),
                s(:begin,
                  s(:lvar, :disp_name)),
                s(:str, "', new_value)\n"),
                s(:str, "            end\n"),
                s(:str, "          else\n"),
                s(:str, "            @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value.to_i\n"),
                s(:str, "          end\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 2))))),
          s(:def, :positive_integer_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "        if new_value.nil?\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "        else\n"),
                s(:str, "          if @do_validate\n"),
                s(:str, "            begin\n"),
                s(:str, "              tmp = Integer(new_value)\n"),
                s(:str, "              raise ArgumentError if tmp <= 0\n"),
                s(:str, "              @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = tmp\n"),
                s(:str, "            rescue ArgumentError\n"),
                s(:str, "              raise NotAvailableValueError.new('"),
                s(:begin,
                  s(:lvar, :disp_name)),
                s(:str, "', new_value)\n"),
                s(:str, "            end\n"),
                s(:str, "          else\n"),
                s(:str, "            @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value.to_i\n"),
                s(:str, "          end\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 2))))),
          s(:def, :boolean_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "        if new_value.nil?\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "        else\n"),
                s(:str, "          if @do_validate and\n"),
                s(:str, "              ![true, false, \"true\", \"false\"].include?(new_value)\n"),
                s(:str, "            raise NotAvailableValueError.new('"),
                s(:begin,
                  s(:lvar, :disp_name)),
                s(:str, "', new_value)\n"),
                s(:str, "          end\n"),
                s(:str, "          if [true, false].include?(new_value)\n"),
                s(:str, "            @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "          else\n"),
                s(:str, "            @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value == \"true\"\n"),
                s(:str, "          end\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 2))))),
          s(:def, :text_type_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "        if @do_validate and\n"),
                s(:str, "            ![\"text\", \"html\", \"xhtml\", nil].include?(new_value)\n"),
                s(:str, "          raise NotAvailableValueError.new('"),
                s(:begin,
                  s(:lvar, :disp_name)),
                s(:str, "', new_value)\n"),
                s(:str, "        end\n"),
                s(:str, "        @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "      end\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 2))))),
          s(:def, :content_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:begin,
              s(:lvasgn, :klass_name,
                s(:dstr,
                  s(:str, "self.class::"),
                  s(:begin,
                    s(:send,
                      s(:const, nil, :Utils), :to_class_name,
                      s(:lvar, :name))))),
              s(:send, nil, :module_eval,
                s(:dstr,
                  s(:str, "      def "),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, "=(new_value)\n"),
                  s(:str, "        if new_value.is_a?("),
                  s(:begin,
                    s(:lvar, :klass_name)),
                  s(:str, ")\n"),
                  s(:str, "          @"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, " = new_value\n"),
                  s(:str, "        else\n"),
                  s(:str, "          @"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, " = "),
                  s(:begin,
                    s(:lvar, :klass_name)),
                  s(:str, ".new\n"),
                  s(:str, "          @"),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, ".content = new_value\n"),
                  s(:str, "        end\n"),
                  s(:str, "      end\n")),
                s(:splat,
                  s(:send, nil, :get_file_and_line_from_caller,
                    s(:int, 2)))))),
          s(:def, :yes_clean_other_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(value)\n"),
                s(:str, "          value = (value ? \"yes\" : \"no\") if [true, false].include?(value)\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = value\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 554), :+,
                s(:int, 1)))),
          s(:def, :yes_other_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "          if [true, false].include?(new_value)\n"),
                s(:str, "            new_value = new_value ? \"yes\" : \"no\"\n"),
                s(:str, "          end\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = new_value\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 563), :+,
                s(:int, 1)))),
          s(:def, :csv_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = Utils::CSV.parse(new_value)\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 574), :+,
                s(:int, 1)))),
          s(:def, :csv_integer_writer,
            s(:args,
              s(:arg, :name),
              s(:optarg, :disp_name,
                s(:lvar, :name))),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "        def "),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, "=(new_value)\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :name)),
                s(:str, " = Utils::CSV.parse(new_value) {|v| Integer(v)}\n"),
                s(:str, "        end\n")),
              s(:str, "(string)"),
              s(:send,
                s(:int, 582), :+,
                s(:int, 1)))),
          s(:def, :def_children_accessor,
            s(:args,
              s(:arg, :accessor_name),
              s(:arg, :plural_name)),
            s(:send, nil, :module_eval,
              s(:dstr,
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :plural_name)),
                s(:str, "\n"),
                s(:str, "        @"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, "\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, "(*args)\n"),
                s(:str, "        if args.empty?\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, ".first\n"),
                s(:str, "        else\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, "[*args]\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n"),
                s(:str, "\n"),
                s(:str, "      def "),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, "=(*args)\n"),
                s(:str, "        receiver = self.class.name\n"),
                s(:str, "        warn(\"Warning:\#{caller.first.sub(/:in `.*'z/, '')}: \" \n             \"Don't use `\#{receiver}#"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, " = XXX'/\" \n             \"`\#{receiver}#set_"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, "(XXX)'. \" \n             \"Those APIs are not sense of Ruby. \" \n             \"Use `\#{receiver}#"),
                s(:begin,
                  s(:lvar, :plural_name)),
                s(:str, " << XXX' instead of them.\")\n"),
                s(:str, "        if args.size == 1\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, ".push(args[0])\n"),
                s(:str, "        else\n"),
                s(:str, "          @"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, ".__send__(\"[]=\", *args)\n"),
                s(:str, "        end\n"),
                s(:str, "      end\n"),
                s(:str, "      alias_method(:set_"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, ", :"),
                s(:begin,
                  s(:lvar, :accessor_name)),
                s(:str, "=)\n")),
              s(:splat,
                s(:send, nil, :get_file_and_line_from_caller,
                  s(:int, 2))))))),
      s(:module,
        s(:const, nil, :SetupMaker),
        s(:begin,
          s(:def, :setup_maker,
            s(:args,
              s(:arg, :maker)),
            s(:begin,
              s(:lvasgn, :target,
                s(:send, nil, :maker_target,
                  s(:lvar, :maker))),
              s(:if,
                s(:send,
                  s(:lvar, :target), :nil?), nil,
                s(:begin,
                  s(:send, nil, :setup_maker_attributes,
                    s(:lvar, :target)),
                  s(:send, nil, :setup_maker_element,
                    s(:lvar, :target)),
                  s(:send, nil, :setup_maker_elements,
                    s(:lvar, :target)))))),
          s(:send, nil, :private),
          s(:def, :maker_target,
            s(:args,
              s(:arg, :maker)),
            s(:nil)),
          s(:def, :setup_maker_attributes,
            s(:args,
              s(:arg, :target)), nil),
          s(:def, :setup_maker_element,
            s(:args,
              s(:arg, :target)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :class), :need_initialize_variables), :each),
              s(:args,
                s(:arg, :var)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send, nil, :__send__,
                    s(:lvar, :var))),
                s(:if,
                  s(:send,
                    s(:lvar, :value), :nil?),
                  s(:next), nil),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:lvar, :value), :respond_to?,
                      s(:str, "setup_maker")),
                    s(:send,
                      s(:send,
                        s(:send, nil, :not_need_to_call_setup_maker_variables), :include?,
                        s(:lvar, :var)), :!)),
                  s(:send,
                    s(:lvar, :value), :setup_maker,
                    s(:lvar, :target)),
                  s(:begin,
                    s(:lvasgn, :setter,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :var)),
                        s(:str, "="))),
                    s(:if,
                      s(:send,
                        s(:lvar, :target), :respond_to?,
                        s(:lvar, :setter)),
                      s(:send,
                        s(:lvar, :target), :__send__,
                        s(:lvar, :setter),
                        s(:lvar, :value)), nil)))))),
          s(:def, :not_need_to_call_setup_maker_variables,
            s(:args),
            s(:array)),
          s(:def, :setup_maker_elements,
            s(:args,
              s(:arg, :parent)),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :class), :have_children_elements), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :plural_name)),
              s(:if,
                s(:send,
                  s(:lvar, :parent), :respond_to?,
                  s(:lvar, :plural_name)),
                s(:begin,
                  s(:lvasgn, :target,
                    s(:send,
                      s(:lvar, :parent), :__send__,
                      s(:lvar, :plural_name))),
                  s(:block,
                    s(:send,
                      s(:send, nil, :__send__,
                        s(:lvar, :plural_name)), :each),
                    s(:args,
                      s(:arg, :elem)),
                    s(:send,
                      s(:lvar, :elem), :setup_maker,
                      s(:lvar, :target)))), nil))))),
      s(:class,
        s(:const, nil, :Element), nil,
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :BaseModel)),
          s(:send, nil, :include,
            s(:const, nil, :Utils)),
          s(:send, nil, :extend,
            s(:const,
              s(:const, nil, :Utils), :InheritedReader)),
          s(:send, nil, :include,
            s(:const, nil, :SetupMaker)),
          s(:casgn, nil, :INDENT,
            s(:str, "  ")),
          s(:casgn, nil, :MUST_CALL_VALIDATORS,
            s(:hash)),
          s(:casgn, nil, :MODELS,
            s(:array)),
          s(:casgn, nil, :GET_ATTRIBUTES,
            s(:array)),
          s(:casgn, nil, :HAVE_CHILDREN_ELEMENTS,
            s(:array)),
          s(:casgn, nil, :TO_ELEMENT_METHODS,
            s(:array)),
          s(:casgn, nil, :NEED_INITIALIZE_VARIABLES,
            s(:array)),
          s(:casgn, nil, :PLURAL_FORMS,
            s(:hash)),
          s(:sclass,
            s(:self),
            s(:begin,
              s(:def, :must_call_validators,
                s(:args),
                s(:send, nil, :inherited_hash_reader,
                  s(:str, "MUST_CALL_VALIDATORS"))),
              s(:def, :models,
                s(:args),
                s(:send, nil, :inherited_array_reader,
                  s(:str, "MODELS"))),
              s(:def, :get_attributes,
                s(:args),
                s(:send, nil, :inherited_array_reader,
                  s(:str, "GET_ATTRIBUTES"))),
              s(:def, :have_children_elements,
                s(:args),
                s(:send, nil, :inherited_array_reader,
                  s(:str, "HAVE_CHILDREN_ELEMENTS"))),
              s(:def, :to_element_methods,
                s(:args),
                s(:send, nil, :inherited_array_reader,
                  s(:str, "TO_ELEMENT_METHODS"))),
              s(:def, :need_initialize_variables,
                s(:args),
                s(:send, nil, :inherited_array_reader,
                  s(:str, "NEED_INITIALIZE_VARIABLES"))),
              s(:def, :plural_forms,
                s(:args),
                s(:send, nil, :inherited_hash_reader,
                  s(:str, "PLURAL_FORMS"))),
              s(:def, :inherited_base,
                s(:args),
                s(:const,
                  s(:const,
                    s(:cbase), :RSS), :Element)),
              s(:def, :inherited,
                s(:args,
                  s(:arg, :klass)),
                s(:begin,
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :MUST_CALL_VALIDATORS),
                    s(:hash)),
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :MODELS),
                    s(:array)),
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :GET_ATTRIBUTES),
                    s(:array)),
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :HAVE_CHILDREN_ELEMENTS),
                    s(:array)),
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :TO_ELEMENT_METHODS),
                    s(:array)),
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :NEED_INITIALIZE_VARIABLES),
                    s(:array)),
                  s(:send,
                    s(:lvar, :klass), :const_set,
                    s(:sym, :PLURAL_FORMS),
                    s(:hash)),
                  s(:lvasgn, :tag_name,
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :klass), :name), :split,
                        s(:regexp,
                          s(:str, "::"),
                          s(:regopt))), :last)),
                  s(:send,
                    s(:lvar, :tag_name), :[]=,
                    s(:int, 0),
                    s(:int, 1),
                    s(:send,
                      s(:send,
                        s(:lvar, :tag_name), :[],
                        s(:int, 0),
                        s(:int, 1)), :downcase)),
                  s(:send,
                    s(:lvar, :klass), :instance_variable_set,
                    s(:sym, :@tag_name),
                    s(:lvar, :tag_name)),
                  s(:send,
                    s(:lvar, :klass), :instance_variable_set,
                    s(:sym, :@have_content),
                    s(:false)))),
              s(:def, :install_must_call_validator,
                s(:args,
                  s(:arg, :prefix),
                  s(:arg, :uri)),
                s(:send,
                  s(:const,
                    s(:self), :MUST_CALL_VALIDATORS), :[]=,
                  s(:lvar, :uri),
                  s(:lvar, :prefix))),
              s(:def, :install_model,
                s(:args,
                  s(:arg, :tag),
                  s(:arg, :uri),
                  s(:optarg, :occurs,
                    s(:nil)),
                  s(:optarg, :getter,
                    s(:nil)),
                  s(:optarg, :plural,
                    s(:false))),
                s(:begin,
                  s(:or_asgn,
                    s(:lvasgn, :getter),
                    s(:lvar, :tag)),
                  s(:if,
                    s(:lvasgn, :m,
                      s(:block,
                        s(:send,
                          s(:const,
                            s(:self), :MODELS), :find),
                        s(:args,
                          s(:arg, :t),
                          s(:arg, :u),
                          s(:arg, :o),
                          s(:arg, :g),
                          s(:arg, :p)),
                        s(:and,
                          s(:send,
                            s(:lvar, :t), :==,
                            s(:lvar, :tag)),
                          s(:send,
                            s(:lvar, :u), :==,
                            s(:lvar, :uri))))),
                    s(:send,
                      s(:lvar, :m), :[]=,
                      s(:int, 2),
                      s(:lvar, :occurs)),
                    s(:send,
                      s(:const,
                        s(:self), :MODELS), :<<,
                      s(:array,
                        s(:lvar, :tag),
                        s(:lvar, :uri),
                        s(:lvar, :occurs),
                        s(:lvar, :getter),
                        s(:lvar, :plural)))))),
              s(:def, :install_get_attribute,
                s(:args,
                  s(:arg, :name),
                  s(:arg, :uri),
                  s(:optarg, :required,
                    s(:true)),
                  s(:optarg, :type,
                    s(:nil)),
                  s(:optarg, :disp_name,
                    s(:nil)),
                  s(:optarg, :element_name,
                    s(:nil))),
                s(:begin,
                  s(:or_asgn,
                    s(:lvasgn, :disp_name),
                    s(:lvar, :name)),
                  s(:or_asgn,
                    s(:lvasgn, :element_name),
                    s(:lvar, :name)),
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :writer_type),
                      s(:lvasgn, :reader_type)),
                    s(:lvar, :type)),
                  s(:send, nil, :def_corresponded_attr_writer,
                    s(:lvar, :name),
                    s(:lvar, :writer_type),
                    s(:lvar, :disp_name)),
                  s(:send, nil, :def_corresponded_attr_reader,
                    s(:lvar, :name),
                    s(:lvar, :reader_type)),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :type), :==,
                        s(:sym, :boolean)),
                      s(:match_with_lvasgn,
                        s(:regexp,
                          s(:str, "^is"),
                          s(:regopt)),
                        s(:lvar, :name))),
                    s(:send, nil, :alias_method,
                      s(:dstr,
                        s(:begin,
                          s(:gvar, :$POSTMATCH)),
                        s(:str, "?")),
                      s(:lvar, :name)), nil),
                  s(:send,
                    s(:const,
                      s(:self), :GET_ATTRIBUTES), :<<,
                    s(:array,
                      s(:lvar, :name),
                      s(:lvar, :uri),
                      s(:lvar, :required),
                      s(:lvar, :element_name))),
                  s(:send, nil, :add_need_initialize_variable,
                    s(:lvar, :disp_name)))),
              s(:def, :def_corresponded_attr_writer,
                s(:args,
                  s(:arg, :name),
                  s(:optarg, :type,
                    s(:nil)),
                  s(:optarg, :disp_name,
                    s(:nil))),
                s(:begin,
                  s(:or_asgn,
                    s(:lvasgn, :disp_name),
                    s(:lvar, :name)),
                  s(:case,
                    s(:lvar, :type),
                    s(:when,
                      s(:sym, :integer),
                      s(:send, nil, :integer_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :positive_integer),
                      s(:send, nil, :positive_integer_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :boolean),
                      s(:send, nil, :boolean_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :w3cdtf),
                      s(:sym, :rfc822),
                      s(:sym, :rfc2822),
                      s(:send, nil, :date_writer,
                        s(:lvar, :name),
                        s(:lvar, :type),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :text_type),
                      s(:send, nil, :text_type_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :content),
                      s(:send, nil, :content_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :yes_clean_other),
                      s(:send, nil, :yes_clean_other_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :yes_other),
                      s(:send, nil, :yes_other_writer,
                        s(:lvar, :name),
                        s(:lvar, :disp_name))),
                    s(:when,
                      s(:sym, :csv),
                      s(:send, nil, :csv_writer,
                        s(:lvar, :name))),
                    s(:when,
                      s(:sym, :csv_integer),
                      s(:send, nil, :csv_integer_writer,
                        s(:lvar, :name))),
                    s(:send, nil, :attr_writer,
                      s(:lvar, :name))))),
              s(:def, :def_corresponded_attr_reader,
                s(:args,
                  s(:arg, :name),
                  s(:optarg, :type,
                    s(:nil))),
                s(:case,
                  s(:lvar, :type),
                  s(:when,
                    s(:sym, :inherit),
                    s(:send, nil, :inherit_convert_attr_reader,
                      s(:lvar, :name))),
                  s(:when,
                    s(:sym, :uri),
                    s(:send, nil, :uri_convert_attr_reader,
                      s(:lvar, :name))),
                  s(:when,
                    s(:sym, :yes_clean_other),
                    s(:send, nil, :yes_clean_other_attr_reader,
                      s(:lvar, :name))),
                  s(:when,
                    s(:sym, :yes_other),
                    s(:send, nil, :yes_other_attr_reader,
                      s(:lvar, :name))),
                  s(:when,
                    s(:sym, :csv),
                    s(:send, nil, :csv_attr_reader,
                      s(:lvar, :name))),
                  s(:when,
                    s(:sym, :csv_integer),
                    s(:send, nil, :csv_attr_reader,
                      s(:lvar, :name),
                      s(:hash,
                        s(:pair,
                          s(:sym, :separator),
                          s(:str, ","))))),
                  s(:send, nil, :convert_attr_reader,
                    s(:lvar, :name)))),
              s(:def, :content_setup,
                s(:args,
                  s(:optarg, :type,
                    s(:nil)),
                  s(:optarg, :disp_name,
                    s(:nil))),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :writer_type),
                      s(:lvasgn, :reader_type)),
                    s(:lvar, :type)),
                  s(:send, nil, :def_corresponded_attr_writer,
                    s(:sym, :content),
                    s(:lvar, :writer_type),
                    s(:lvar, :disp_name)),
                  s(:send, nil, :def_corresponded_attr_reader,
                    s(:sym, :content),
                    s(:lvar, :reader_type)),
                  s(:ivasgn, :@have_content,
                    s(:true)))),
              s(:def, :have_content?,
                s(:args),
                s(:ivar, :@have_content)),
              s(:def, :add_have_children_element,
                s(:args,
                  s(:arg, :variable_name),
                  s(:arg, :plural_name)),
                s(:send,
                  s(:const,
                    s(:self), :HAVE_CHILDREN_ELEMENTS), :<<,
                  s(:array,
                    s(:lvar, :variable_name),
                    s(:lvar, :plural_name)))),
              s(:def, :add_to_element_method,
                s(:args,
                  s(:arg, :method_name)),
                s(:send,
                  s(:const,
                    s(:self), :TO_ELEMENT_METHODS), :<<,
                  s(:lvar, :method_name))),
              s(:def, :add_need_initialize_variable,
                s(:args,
                  s(:arg, :variable_name)),
                s(:send,
                  s(:const,
                    s(:self), :NEED_INITIALIZE_VARIABLES), :<<,
                  s(:lvar, :variable_name))),
              s(:def, :add_plural_form,
                s(:args,
                  s(:arg, :singular),
                  s(:arg, :plural)),
                s(:send,
                  s(:const,
                    s(:self), :PLURAL_FORMS), :[]=,
                  s(:lvar, :singular),
                  s(:lvar, :plural))),
              s(:def, :required_prefix,
                s(:args),
                s(:nil)),
              s(:def, :required_uri,
                s(:args),
                s(:str, "")),
              s(:def, :need_parent?,
                s(:args),
                s(:false)),
              s(:def, :install_ns,
                s(:args,
                  s(:arg, :prefix),
                  s(:arg, :uri)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const,
                        s(:self), :NSPOOL), :has_key?,
                      s(:lvar, :prefix)),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :OverlappedPrefixError), :new,
                        s(:lvar, :prefix))), nil),
                  s(:send,
                    s(:const,
                      s(:self), :NSPOOL), :[]=,
                    s(:lvar, :prefix),
                    s(:lvar, :uri)))),
              s(:def, :tag_name,
                s(:args),
                s(:ivar, :@tag_name)))),
          s(:send, nil, :attr_accessor,
            s(:sym, :parent),
            s(:sym, :do_validate)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :do_validate,
                s(:true)),
              s(:optarg, :attrs,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@parent,
                s(:nil)),
              s(:ivasgn, :@converter,
                s(:nil)),
              s(:if,
                s(:and,
                  s(:send,
                    s(:lvar, :attrs), :nil?),
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:lvar, :do_validate), :is_a?,
                        s(:const, nil, :Hash)),
                      s(:send,
                        s(:lvar, :do_validate), :is_a?,
                        s(:const, nil, :Array))))),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :do_validate),
                    s(:lvasgn, :attrs)),
                  s(:array,
                    s(:true),
                    s(:lvar, :do_validate))), nil),
              s(:ivasgn, :@do_validate,
                s(:lvar, :do_validate)),
              s(:send, nil, :initialize_variables,
                s(:or,
                  s(:lvar, :attrs),
                  s(:hash))))),
          s(:def, :tag_name,
            s(:args),
            s(:send,
              s(:send,
                s(:self), :class), :tag_name)),
          s(:def, :full_name,
            s(:args),
            s(:send, nil, :tag_name)),
          s(:def, :converter=,
            s(:args,
              s(:arg, :converter)),
            s(:begin,
              s(:ivasgn, :@converter,
                s(:lvar, :converter)),
              s(:lvasgn, :targets,
                s(:send,
                  s(:send, nil, :children), :dup)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :have_children_elements), :each),
                s(:args,
                  s(:arg, :variable_name),
                  s(:arg, :plural_name)),
                s(:send,
                  s(:lvar, :targets), :concat,
                  s(:send, nil, :__send__,
                    s(:lvar, :plural_name)))),
              s(:block,
                s(:send,
                  s(:lvar, :targets), :each),
                s(:args,
                  s(:arg, :target)),
                s(:if,
                  s(:send,
                    s(:lvar, :target), :nil?), nil,
                  s(:send,
                    s(:lvar, :target), :converter=,
                    s(:lvar, :converter)))))),
          s(:def, :convert,
            s(:args,
              s(:arg, :value)),
            s(:if,
              s(:ivar, :@converter),
              s(:send,
                s(:ivar, :@converter), :convert,
                s(:lvar, :value)),
              s(:lvar, :value))),
          s(:def, :valid?,
            s(:args,
              s(:optarg, :ignore_unknown_element,
                s(:true))),
            s(:rescue,
              s(:begin,
                s(:send, nil, :validate,
                  s(:lvar, :ignore_unknown_element)),
                s(:true)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :RSS), :Error)), nil,
                s(:false)), nil)),
          s(:def, :validate,
            s(:args,
              s(:optarg, :ignore_unknown_element,
                s(:true))),
            s(:ensure,
              s(:begin,
                s(:lvasgn, :do_validate,
                  s(:ivar, :@do_validate)),
                s(:ivasgn, :@do_validate,
                  s(:true)),
                s(:send, nil, :validate_attribute),
                s(:send, nil, :__validate,
                  s(:lvar, :ignore_unknown_element))),
              s(:ivasgn, :@do_validate,
                s(:lvar, :do_validate)))),
          s(:def, :validate_for_stream,
            s(:args,
              s(:arg, :tags),
              s(:optarg, :ignore_unknown_element,
                s(:true))),
            s(:begin,
              s(:send, nil, :validate_attribute),
              s(:send, nil, :__validate,
                s(:lvar, :ignore_unknown_element),
                s(:lvar, :tags),
                s(:false)))),
          s(:def, :to_s,
            s(:args,
              s(:optarg, :need_convert,
                s(:true)),
              s(:optarg, :indent,
                s(:str, ""))),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:self), :class), :have_content?),
                s(:begin,
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send, nil, :empty_content?), :!),
                      s(:send,
                        s(:send, nil, :content_is_set?), :!)),
                    s(:return,
                      s(:str, "")), nil),
                  s(:lvasgn, :rv,
                    s(:block,
                      s(:send, nil, :tag,
                        s(:lvar, :indent)),
                      s(:args,
                        s(:arg, :next_indent)),
                      s(:if,
                        s(:send, nil, :empty_content?),
                        s(:str, ""),
                        s(:send, nil, :xmled_content))))),
                s(:lvasgn, :rv,
                  s(:block,
                    s(:send, nil, :tag,
                      s(:lvar, :indent)),
                    s(:args,
                      s(:arg, :next_indent)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:send,
                            s(:self), :class), :to_element_methods), :collect),
                      s(:args,
                        s(:arg, :method_name)),
                      s(:send, nil, :__send__,
                        s(:lvar, :method_name),
                        s(:false),
                        s(:lvar, :next_indent)))))),
              s(:if,
                s(:lvar, :need_convert),
                s(:lvasgn, :rv,
                  s(:send, nil, :convert,
                    s(:lvar, :rv))), nil),
              s(:lvar, :rv))),
          s(:def, :have_xml_content?,
            s(:args),
            s(:false)),
          s(:def, :need_base64_encode?,
            s(:args),
            s(:false)),
          s(:def, :set_next_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :next_element)),
            s(:begin,
              s(:lvasgn, :klass,
                s(:send,
                  s(:lvar, :next_element), :class)),
              s(:lvasgn, :prefix,
                s(:str, "")),
              s(:if,
                s(:send,
                  s(:lvar, :klass), :required_prefix),
                s(:send,
                  s(:lvar, :prefix), :<<,
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:lvar, :klass), :required_prefix)),
                    s(:str, "_"))), nil),
              s(:lvasgn, :key,
                s(:dstr,
                  s(:begin,
                    s(:lvar, :prefix)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :tag_name), :gsub,
                      s(:regexp,
                        s(:str, "-"),
                        s(:regopt)),
                      s(:str, "_"))))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :plural_forms), :has_key?,
                  s(:lvar, :key)),
                s(:begin,
                  s(:lvasgn, :ary,
                    s(:send, nil, :__send__,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:send,
                                s(:self), :class), :plural_forms), :[],
                            s(:lvar, :key)))))),
                  s(:send,
                    s(:lvar, :ary), :<<,
                    s(:lvar, :next_element))),
                s(:send, nil, :__send__,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :key)),
                    s(:str, "=")),
                  s(:lvar, :next_element))))),
          s(:send, nil, :protected),
          s(:def, :have_required_elements?,
            s(:args),
            s(:block,
              s(:send,
                s(:const,
                  s(:send,
                    s(:self), :class), :MODELS), :all?),
              s(:args,
                s(:arg, :tag),
                s(:arg, :uri),
                s(:arg, :occurs),
                s(:arg, :getter)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :occurs), :nil?),
                  s(:send,
                    s(:lvar, :occurs), :==,
                    s(:str, "+"))),
                s(:begin,
                  s(:lvasgn, :child,
                    s(:send, nil, :__send__,
                      s(:lvar, :getter))),
                  s(:if,
                    s(:send,
                      s(:lvar, :child), :is_a?,
                      s(:const, nil, :Array)),
                    s(:begin,
                      s(:lvasgn, :children,
                        s(:lvar, :child)),
                      s(:block,
                        s(:send,
                          s(:lvar, :children), :any?),
                        s(:args,
                          s(:arg, :c)),
                        s(:send,
                          s(:lvar, :c), :have_required_elements?))),
                    s(:send,
                      s(:send,
                        s(:send,
                          s(:lvar, :child), :to_s), :empty?), :!))),
                s(:true)))),
          s(:send, nil, :private),
          s(:def, :initialize_variables,
            s(:args,
              s(:arg, :attrs)),
            s(:begin,
              s(:lvasgn, :normalized_attrs,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :attrs), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :normalized_attrs), :[]=,
                  s(:send,
                    s(:lvar, :key), :to_s),
                  s(:lvar, :value))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :need_initialize_variables), :each),
                s(:args,
                  s(:arg, :variable_name)),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:send,
                      s(:lvar, :normalized_attrs), :[],
                      s(:send,
                        s(:lvar, :variable_name), :to_s))),
                  s(:if,
                    s(:lvar, :value),
                    s(:send, nil, :__send__,
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :variable_name)),
                        s(:str, "=")),
                      s(:lvar, :value)),
                    s(:send, nil, :instance_variable_set,
                      s(:dstr,
                        s(:str, "@"),
                        s(:begin,
                          s(:lvar, :variable_name))),
                      s(:nil))))),
              s(:send, nil, :initialize_have_children_elements),
              s(:if,
                s(:send,
                  s(:send,
                    s(:self), :class), :have_content?),
                s(:ivasgn, :@content,
                  s(:send,
                    s(:lvar, :normalized_attrs), :[],
                    s(:str, "content"))), nil))),
          s(:def, :initialize_have_children_elements,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :class), :have_children_elements), :each),
              s(:args,
                s(:arg, :variable_name),
                s(:arg, :plural_name)),
              s(:send, nil, :instance_variable_set,
                s(:dstr,
                  s(:str, "@"),
                  s(:begin,
                    s(:lvar, :variable_name))),
                s(:array)))),
          s(:def, :tag,
            s(:args,
              s(:arg, :indent),
              s(:optarg, :additional_attrs,
                s(:hash)),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :next_indent,
                s(:send,
                  s(:lvar, :indent), :+,
                  s(:const, nil, :INDENT))),
              s(:lvasgn, :attrs,
                s(:send, nil, :collect_attrs)),
              s(:if,
                s(:send,
                  s(:lvar, :attrs), :nil?),
                s(:return,
                  s(:str, "")), nil),
              s(:if,
                s(:send, nil, :have_required_elements?), nil,
                s(:return,
                  s(:str, ""))),
              s(:send,
                s(:lvar, :attrs), :update,
                s(:lvar, :additional_attrs)),
              s(:lvasgn, :start_tag,
                s(:send, nil, :make_start_tag,
                  s(:lvar, :indent),
                  s(:lvar, :next_indent),
                  s(:send,
                    s(:lvar, :attrs), :dup))),
              s(:if,
                s(:lvar, :block),
                s(:lvasgn, :content,
                  s(:send,
                    s(:lvar, :block), :call,
                    s(:lvar, :next_indent))),
                s(:lvasgn, :content,
                  s(:array))),
              s(:if,
                s(:send,
                  s(:lvar, :content), :is_a?,
                  s(:const, nil, :String)),
                s(:begin,
                  s(:lvasgn, :content,
                    s(:array,
                      s(:lvar, :content))),
                  s(:send,
                    s(:lvar, :start_tag), :<<,
                    s(:str, ">")),
                  s(:lvasgn, :end_tag,
                    s(:dstr,
                      s(:str, "</"),
                      s(:begin,
                        s(:send, nil, :full_name)),
                      s(:str, ">")))),
                s(:begin,
                  s(:lvasgn, :content,
                    s(:block,
                      s(:send,
                        s(:lvar, :content), :reject),
                      s(:args,
                        s(:arg, :x)),
                      s(:send,
                        s(:lvar, :x), :empty?))),
                  s(:if,
                    s(:send,
                      s(:lvar, :content), :empty?),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :attrs), :empty?),
                        s(:return,
                          s(:str, "")), nil),
                      s(:lvasgn, :end_tag,
                        s(:str, "/>"))),
                    s(:begin,
                      s(:send,
                        s(:lvar, :start_tag), :<<,
                        s(:str, ">\n")),
                      s(:lvasgn, :end_tag,
                        s(:dstr,
                          s(:str, "\n"),
                          s(:begin,
                            s(:lvar, :indent)),
                          s(:str, "</"),
                          s(:begin,
                            s(:send, nil, :full_name)),
                          s(:str, ">"))))))),
              s(:send,
                s(:send,
                  s(:lvar, :start_tag), :+,
                  s(:send,
                    s(:lvar, :content), :join,
                    s(:str, "\n"))), :+,
                s(:lvar, :end_tag)))),
          s(:def, :make_start_tag,
            s(:args,
              s(:arg, :indent),
              s(:arg, :next_indent),
              s(:arg, :attrs)),
            s(:begin,
              s(:lvasgn, :start_tag,
                s(:array,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :indent)),
                    s(:str, "<"),
                    s(:begin,
                      s(:send, nil, :full_name))))),
              s(:if,
                s(:send,
                  s(:lvar, :attrs), :empty?), nil,
                s(:send,
                  s(:lvar, :start_tag), :<<,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:lvar, :attrs), :collect),
                      s(:args,
                        s(:arg, :key),
                        s(:arg, :value)),
                      s(:dstr,
                        s(:begin,
                          s(:send, nil, :h,
                            s(:lvar, :key))),
                        s(:str, "=\""),
                        s(:begin,
                          s(:send, nil, :h,
                            s(:lvar, :value))),
                        s(:str, "\""))), :join,
                    s(:dstr,
                      s(:str, "\n"),
                      s(:begin,
                        s(:lvar, :next_indent)))))),
              s(:send,
                s(:lvar, :start_tag), :join,
                s(:str, " ")))),
          s(:def, :collect_attrs,
            s(:args),
            s(:begin,
              s(:lvasgn, :attrs,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send, nil, :_attrs), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :required),
                  s(:arg, :alias_name)),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:send, nil, :__send__,
                      s(:or,
                        s(:lvar, :alias_name),
                        s(:lvar, :name)))),
                  s(:if,
                    s(:and,
                      s(:lvar, :required),
                      s(:send,
                        s(:lvar, :value), :nil?)),
                    s(:return,
                      s(:nil)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :nil?),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :attrs), :has_key?,
                      s(:lvar, :name)),
                    s(:return,
                      s(:nil)), nil),
                  s(:send,
                    s(:lvar, :attrs), :[]=,
                    s(:lvar, :name),
                    s(:lvar, :value)))),
              s(:lvar, :attrs))),
          s(:def, :tag_name_with_prefix,
            s(:args,
              s(:arg, :prefix)),
            s(:dstr,
              s(:begin,
                s(:lvar, :prefix)),
              s(:str, ":"),
              s(:begin,
                s(:send, nil, :tag_name)))),
          s(:def, :calc_indent,
            s(:args),
            s(:str, "")),
          s(:def, :children,
            s(:args),
            s(:begin,
              s(:lvasgn, :rv,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :models), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :uri),
                  s(:arg, :occurs),
                  s(:arg, :getter)),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:send, nil, :__send__,
                      s(:lvar, :getter))),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :nil?),
                    s(:next), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :is_a?,
                      s(:const, nil, :Array)), nil,
                    s(:lvasgn, :value,
                      s(:array,
                        s(:lvar, :value)))),
                  s(:block,
                    s(:send,
                      s(:lvar, :value), :each),
                    s(:args,
                      s(:arg, :v)),
                    s(:if,
                      s(:send,
                        s(:lvar, :v), :is_a?,
                        s(:const, nil, :Element)),
                      s(:send,
                        s(:lvar, :rv), :<<,
                        s(:lvar, :v)), nil)))),
              s(:lvar, :rv))),
          s(:def, :_tags,
            s(:args),
            s(:begin,
              s(:lvasgn, :rv,
                s(:array)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :models), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :uri),
                  s(:arg, :occurs),
                  s(:arg, :getter),
                  s(:arg, :plural)),
                s(:begin,
                  s(:lvasgn, :value,
                    s(:send, nil, :__send__,
                      s(:lvar, :getter))),
                  s(:if,
                    s(:send,
                      s(:lvar, :value), :nil?),
                    s(:next), nil),
                  s(:if,
                    s(:and,
                      s(:lvar, :plural),
                      s(:send,
                        s(:lvar, :value), :is_a?,
                        s(:const, nil, :Array))),
                    s(:send,
                      s(:lvar, :rv), :concat,
                      s(:send,
                        s(:array,
                          s(:array,
                            s(:lvar, :uri),
                            s(:lvar, :name))), :*,
                        s(:send,
                          s(:lvar, :value), :size))),
                    s(:send,
                      s(:lvar, :rv), :<<,
                      s(:array,
                        s(:lvar, :uri),
                        s(:lvar, :name)))))),
              s(:lvar, :rv))),
          s(:def, :_attrs,
            s(:args),
            s(:block,
              s(:send,
                s(:send,
                  s(:send,
                    s(:self), :class), :get_attributes), :collect),
              s(:args,
                s(:arg, :name),
                s(:arg, :uri),
                s(:arg, :required),
                s(:arg, :element_name)),
              s(:array,
                s(:lvar, :element_name),
                s(:lvar, :required),
                s(:lvar, :name)))),
          s(:def, :__validate,
            s(:args,
              s(:arg, :ignore_unknown_element),
              s(:optarg, :tags,
                s(:send, nil, :_tags)),
              s(:optarg, :recursive,
                s(:true))),
            s(:begin,
              s(:if,
                s(:lvar, :recursive),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:send, nil, :children), :compact), :each),
                  s(:args,
                    s(:arg, :child)),
                  s(:send,
                    s(:lvar, :child), :validate)), nil),
              s(:lvasgn, :must_call_validators,
                s(:send,
                  s(:send,
                    s(:self), :class), :must_call_validators)),
              s(:lvasgn, :tags,
                s(:send, nil, :tag_filter,
                  s(:send,
                    s(:lvar, :tags), :dup))),
              s(:if,
                s(:const, nil, :DEBUG),
                s(:send, nil, :p,
                  s(:lvar, :tags)), nil),
              s(:block,
                s(:send,
                  s(:lvar, :must_call_validators), :each),
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :prefix)),
                s(:begin,
                  s(:send, nil, :_validate,
                    s(:lvar, :ignore_unknown_element),
                    s(:send,
                      s(:lvar, :tags), :[],
                      s(:lvar, :uri)),
                    s(:lvar, :uri)),
                  s(:lvasgn, :meth,
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :prefix)),
                      s(:str, "_validate"))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:send,
                          s(:lvar, :prefix), :empty?), :!),
                      s(:send, nil, :respond_to?,
                        s(:lvar, :meth),
                        s(:true))),
                    s(:send, nil, :__send__,
                      s(:lvar, :meth),
                      s(:lvar, :ignore_unknown_element),
                      s(:send,
                        s(:lvar, :tags), :[],
                        s(:lvar, :uri)),
                      s(:lvar, :uri)), nil))))),
          s(:def, :validate_attribute,
            s(:args),
            s(:block,
              s(:send,
                s(:send, nil, :_attrs), :each),
              s(:args,
                s(:arg, :a_name),
                s(:arg, :required),
                s(:arg, :alias_name)),
              s(:begin,
                s(:lvasgn, :value,
                  s(:send, nil, :instance_variable_get,
                    s(:dstr,
                      s(:str, "@"),
                      s(:begin,
                        s(:or,
                          s(:lvar, :alias_name),
                          s(:lvar, :a_name)))))),
                s(:if,
                  s(:and,
                    s(:lvar, :required),
                    s(:send,
                      s(:lvar, :value), :nil?)),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :MissingAttributeError), :new,
                      s(:send, nil, :tag_name),
                      s(:lvar, :a_name))), nil),
                s(:send, nil, :__send__,
                  s(:dstr,
                    s(:begin,
                      s(:or,
                        s(:lvar, :alias_name),
                        s(:lvar, :a_name))),
                    s(:str, "=")),
                  s(:lvar, :value))))),
          s(:def, :_validate,
            s(:args,
              s(:arg, :ignore_unknown_element),
              s(:arg, :tags),
              s(:arg, :uri),
              s(:optarg, :models,
                s(:send,
                  s(:send,
                    s(:self), :class), :models))),
            s(:begin,
              s(:lvasgn, :count,
                s(:int, 1)),
              s(:lvasgn, :do_redo,
                s(:false)),
              s(:lvasgn, :not_shift,
                s(:false)),
              s(:lvasgn, :tag,
                s(:nil)),
              s(:lvasgn, :models,
                s(:block,
                  s(:send,
                    s(:lvar, :models), :find_all),
                  s(:args,
                    s(:arg, :model)),
                  s(:send,
                    s(:send,
                      s(:lvar, :model), :[],
                      s(:int, 1)), :==,
                    s(:lvar, :uri)))),
              s(:lvasgn, :element_names,
                s(:block,
                  s(:send,
                    s(:lvar, :models), :collect),
                  s(:args,
                    s(:arg, :model)),
                  s(:send,
                    s(:lvar, :model), :[],
                    s(:int, 0)))),
              s(:if,
                s(:lvar, :tags),
                s(:begin,
                  s(:lvasgn, :tags_size,
                    s(:send,
                      s(:lvar, :tags), :size)),
                  s(:lvasgn, :tags,
                    s(:block,
                      s(:send,
                        s(:lvar, :tags), :sort_by),
                      s(:args,
                        s(:arg, :x)),
                      s(:or,
                        s(:send,
                          s(:lvar, :element_names), :index,
                          s(:lvar, :x)),
                        s(:lvar, :tags_size))))), nil),
              s(:block,
                s(:send,
                  s(:lvar, :models), :each_with_index),
                s(:args,
                  s(:arg, :model),
                  s(:arg, :i)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :name),
                      s(:lvasgn, :_),
                      s(:lvasgn, :occurs)),
                    s(:lvar, :model)),
                  s(:if,
                    s(:const, nil, :DEBUG),
                    s(:begin,
                      s(:send, nil, :p,
                        s(:str, "before")),
                      s(:send, nil, :p,
                        s(:lvar, :tags)),
                      s(:send, nil, :p,
                        s(:lvar, :model))), nil),
                  s(:if,
                    s(:lvar, :not_shift),
                    s(:lvasgn, :not_shift,
                      s(:false)),
                    s(:if,
                      s(:lvar, :tags),
                      s(:lvasgn, :tag,
                        s(:send,
                          s(:lvar, :tags), :shift)), nil)),
                  s(:if,
                    s(:const, nil, :DEBUG),
                    s(:begin,
                      s(:send, nil, :p,
                        s(:str, "mid")),
                      s(:send, nil, :p,
                        s(:lvar, :count))), nil),
                  s(:case,
                    s(:lvar, :occurs),
                    s(:when,
                      s(:str, "?"),
                      s(:if,
                        s(:send,
                          s(:lvar, :count), :>,
                          s(:int, 2)),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :TooMuchTagError), :new,
                            s(:lvar, :name),
                            s(:send, nil, :tag_name))),
                        s(:if,
                          s(:send,
                            s(:lvar, :name), :==,
                            s(:lvar, :tag)),
                          s(:lvasgn, :do_redo,
                            s(:true)),
                          s(:lvasgn, :not_shift,
                            s(:true))))),
                    s(:when,
                      s(:str, "*"),
                      s(:if,
                        s(:send,
                          s(:lvar, :name), :==,
                          s(:lvar, :tag)),
                        s(:lvasgn, :do_redo,
                          s(:true)),
                        s(:lvasgn, :not_shift,
                          s(:true)))),
                    s(:when,
                      s(:str, "+"),
                      s(:if,
                        s(:send,
                          s(:lvar, :name), :==,
                          s(:lvar, :tag)),
                        s(:lvasgn, :do_redo,
                          s(:true)),
                        s(:if,
                          s(:send,
                            s(:lvar, :count), :>,
                            s(:int, 1)),
                          s(:lvasgn, :not_shift,
                            s(:true)),
                          s(:send, nil, :raise,
                            s(:send,
                              s(:const, nil, :MissingTagError), :new,
                              s(:lvar, :name),
                              s(:send, nil, :tag_name)))))),
                    s(:if,
                      s(:send,
                        s(:lvar, :name), :==,
                        s(:lvar, :tag)),
                      s(:if,
                        s(:and,
                          s(:and,
                            s(:and,
                              s(:send,
                                s(:lvar, :models), :[],
                                s(:send,
                                  s(:lvar, :i), :+,
                                  s(:int, 1))),
                              s(:send,
                                s(:send,
                                  s(:send,
                                    s(:lvar, :models), :[],
                                    s(:send,
                                      s(:lvar, :i), :+,
                                      s(:int, 1))), :[],
                                  s(:int, 0)), :!=,
                                s(:lvar, :name))),
                            s(:lvar, :tags)),
                          s(:send,
                            s(:send,
                              s(:lvar, :tags), :first), :==,
                            s(:lvar, :name))),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :TooMuchTagError), :new,
                            s(:lvar, :name),
                            s(:send, nil, :tag_name))), nil),
                      s(:send, nil, :raise,
                        s(:send,
                          s(:const, nil, :MissingTagError), :new,
                          s(:lvar, :name),
                          s(:send, nil, :tag_name))))),
                  s(:if,
                    s(:const, nil, :DEBUG),
                    s(:begin,
                      s(:send, nil, :p,
                        s(:str, "after")),
                      s(:send, nil, :p,
                        s(:lvar, :not_shift)),
                      s(:send, nil, :p,
                        s(:lvar, :do_redo)),
                      s(:send, nil, :p,
                        s(:lvar, :tag))), nil),
                  s(:if,
                    s(:lvar, :do_redo),
                    s(:begin,
                      s(:lvasgn, :do_redo,
                        s(:false)),
                      s(:op_asgn,
                        s(:lvasgn, :count), :+,
                        s(:int, 1)),
                      s(:redo)),
                    s(:lvasgn, :count,
                      s(:int, 1))))),
              s(:if,
                s(:and,
                  s(:and,
                    s(:send,
                      s(:lvar, :ignore_unknown_element), :!),
                    s(:send,
                      s(:send,
                        s(:lvar, :tags), :nil?), :!)),
                  s(:send,
                    s(:send,
                      s(:lvar, :tags), :empty?), :!)),
                s(:send, nil, :raise,
                  s(:send,
                    s(:const, nil, :NotExpectedTagError), :new,
                    s(:send,
                      s(:lvar, :tags), :first),
                    s(:lvar, :uri),
                    s(:send, nil, :tag_name))), nil))),
          s(:def, :tag_filter,
            s(:args,
              s(:arg, :tags)),
            s(:begin,
              s(:lvasgn, :rv,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :tags), :each),
                s(:args,
                  s(:arg, :tag)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :rv), :has_key?,
                      s(:send,
                        s(:lvar, :tag), :[],
                        s(:int, 0))), nil,
                    s(:send,
                      s(:lvar, :rv), :[]=,
                      s(:send,
                        s(:lvar, :tag), :[],
                        s(:int, 0)),
                      s(:array))),
                  s(:send,
                    s(:send,
                      s(:lvar, :rv), :[],
                      s(:send,
                        s(:lvar, :tag), :[],
                        s(:int, 0))), :push,
                    s(:send,
                      s(:lvar, :tag), :[],
                      s(:int, 1))))),
              s(:lvar, :rv))),
          s(:def, :empty_content?,
            s(:args),
            s(:false)),
          s(:def, :content_is_set?,
            s(:args),
            s(:if,
              s(:send, nil, :have_xml_content?),
              s(:send, nil, :__send__,
                s(:send,
                  s(:send,
                    s(:self), :class), :xml_getter)),
              s(:send, nil, :content))),
          s(:def, :xmled_content,
            s(:args),
            s(:if,
              s(:send, nil, :have_xml_content?),
              s(:send,
                s(:send, nil, :__send__,
                  s(:send,
                    s(:send,
                      s(:self), :class), :xml_getter)), :to_s),
              s(:begin,
                s(:lvasgn, :_content,
                  s(:send, nil, :content)),
                s(:if,
                  s(:send, nil, :need_base64_encode?),
                  s(:lvasgn, :_content,
                    s(:send,
                      s(:send,
                        s(:array,
                          s(:lvar, :_content)), :pack,
                        s(:str, "m")), :delete,
                      s(:str, "\n"))), nil),
                s(:send, nil, :h,
                  s(:lvar, :_content))))))),
      s(:module,
        s(:const, nil, :RootElementMixin),
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :XMLStyleSheetMixin)),
          s(:send, nil, :attr_reader,
            s(:sym, :output_encoding)),
          s(:send, nil, :attr_reader,
            s(:sym, :feed_type),
            s(:sym, :feed_subtype),
            s(:sym, :feed_version)),
          s(:send, nil, :attr_accessor,
            s(:sym, :version),
            s(:sym, :encoding),
            s(:sym, :standalone)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :feed_version),
              s(:optarg, :version,
                s(:nil)),
              s(:optarg, :encoding,
                s(:nil)),
              s(:optarg, :standalone,
                s(:nil))),
            s(:begin,
              s(:super),
              s(:ivasgn, :@feed_type,
                s(:nil)),
              s(:ivasgn, :@feed_subtype,
                s(:nil)),
              s(:ivasgn, :@feed_version,
                s(:lvar, :feed_version)),
              s(:ivasgn, :@version,
                s(:or,
                  s(:lvar, :version),
                  s(:str, "1.0"))),
              s(:ivasgn, :@encoding,
                s(:lvar, :encoding)),
              s(:ivasgn, :@standalone,
                s(:lvar, :standalone)),
              s(:ivasgn, :@output_encoding,
                s(:nil)))),
          s(:def, :feed_info,
            s(:args),
            s(:array,
              s(:ivar, :@feed_type),
              s(:ivar, :@feed_version),
              s(:ivar, :@feed_subtype))),
          s(:def, :output_encoding=,
            s(:args,
              s(:arg, :enc)),
            s(:begin,
              s(:ivasgn, :@output_encoding,
                s(:lvar, :enc)),
              s(:send,
                s(:self), :converter=,
                s(:send,
                  s(:const, nil, :Converter), :new,
                  s(:ivar, :@output_encoding),
                  s(:ivar, :@encoding))))),
          s(:def, :setup_maker,
            s(:args,
              s(:arg, :maker)),
            s(:begin,
              s(:send,
                s(:lvar, :maker), :version=,
                s(:send, nil, :version)),
              s(:send,
                s(:lvar, :maker), :encoding=,
                s(:send, nil, :encoding)),
              s(:send,
                s(:lvar, :maker), :standalone=,
                s(:send, nil, :standalone)),
              s(:block,
                s(:send,
                  s(:send, nil, :xml_stylesheets), :each),
                s(:args,
                  s(:arg, :xss)),
                s(:send,
                  s(:lvar, :xss), :setup_maker,
                  s(:lvar, :maker))),
              s(:zsuper))),
          s(:def, :to_feed,
            s(:args,
              s(:arg, :type),
              s(:blockarg, :block)),
            s(:block,
              s(:send,
                s(:const, nil, :Maker), :make,
                s(:lvar, :type)),
              s(:args,
                s(:arg, :maker)),
              s(:begin,
                s(:send, nil, :setup_maker,
                  s(:lvar, :maker)),
                s(:if,
                  s(:lvar, :block),
                  s(:send,
                    s(:lvar, :block), :call,
                    s(:lvar, :maker)), nil)))),
          s(:def, :to_rss,
            s(:args,
              s(:arg, :type),
              s(:blockarg, :block)),
            s(:send, nil, :to_feed,
              s(:dstr,
                s(:str, "rss"),
                s(:begin,
                  s(:lvar, :type))),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :to_atom,
            s(:args,
              s(:arg, :type),
              s(:blockarg, :block)),
            s(:send, nil, :to_feed,
              s(:dstr,
                s(:str, "atom:"),
                s(:begin,
                  s(:lvar, :type))),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :to_xml,
            s(:args,
              s(:optarg, :type,
                s(:nil)),
              s(:blockarg, :block)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :type), :nil?),
                s(:send, nil, :same_feed_type?,
                  s(:lvar, :type))),
              s(:send, nil, :to_s),
              s(:send,
                s(:send, nil, :to_feed,
                  s(:lvar, :type),
                  s(:block_pass,
                    s(:lvar, :block))), :to_s))),
          s(:send, nil, :private),
          s(:def, :same_feed_type?,
            s(:args,
              s(:arg, :type)),
            s(:if,
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "^(atom|rss)?(\\d+\\.\\d+)?(?::(.+))?$"),
                  s(:regopt, :i)),
                s(:lvar, :type)),
              s(:begin,
                s(:lvasgn, :feed_type,
                  s(:send,
                    s(:begin,
                      s(:or,
                        s(:nth_ref, 1),
                        s(:ivar, :@feed_type))), :downcase)),
                s(:lvasgn, :feed_version,
                  s(:or,
                    s(:nth_ref, 2),
                    s(:ivar, :@feed_version))),
                s(:lvasgn, :feed_subtype,
                  s(:or,
                    s(:nth_ref, 3),
                    s(:ivar, :@feed_subtype))),
                s(:send,
                  s(:array,
                    s(:lvar, :feed_type),
                    s(:lvar, :feed_version),
                    s(:lvar, :feed_subtype)), :==,
                  s(:send, nil, :feed_info))),
              s(:false))),
          s(:def, :tag,
            s(:args,
              s(:arg, :indent),
              s(:optarg, :attrs,
                s(:hash)),
              s(:blockarg, :block)),
            s(:begin,
              s(:lvasgn, :rv,
                s(:super,
                  s(:lvar, :indent),
                  s(:send,
                    s(:send, nil, :ns_declarations), :merge,
                    s(:lvar, :attrs)),
                  s(:block_pass,
                    s(:lvar, :block)))),
              s(:if,
                s(:send,
                  s(:lvar, :rv), :empty?),
                s(:return,
                  s(:lvar, :rv)), nil),
              s(:dstr,
                s(:begin,
                  s(:send, nil, :xmldecl)),
                s(:begin,
                  s(:send, nil, :xml_stylesheet_pi)),
                s(:begin,
                  s(:lvar, :rv))))),
          s(:def, :xmldecl,
            s(:args),
            s(:begin,
              s(:lvasgn, :rv,
                s(:dstr,
                  s(:str, "<?xml version=\""),
                  s(:begin,
                    s(:ivar, :@version)),
                  s(:str, "\""))),
              s(:if,
                s(:or,
                  s(:ivar, :@output_encoding),
                  s(:ivar, :@encoding)),
                s(:send,
                  s(:lvar, :rv), :<<,
                  s(:dstr,
                    s(:str, " encoding=\""),
                    s(:begin,
                      s(:or,
                        s(:ivar, :@output_encoding),
                        s(:ivar, :@encoding))),
                    s(:str, "\""))), nil),
              s(:if,
                s(:ivar, :@standalone),
                s(:send,
                  s(:lvar, :rv), :<<,
                  s(:str, " standalone=\"yes\"")), nil),
              s(:send,
                s(:lvar, :rv), :<<,
                s(:str, "?>\n")),
              s(:lvar, :rv))),
          s(:def, :ns_declarations,
            s(:args),
            s(:begin,
              s(:lvasgn, :decls,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:const,
                    s(:send,
                      s(:self), :class), :NSPOOL), :collect),
                s(:args,
                  s(:arg, :prefix),
                  s(:arg, :uri)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:lvar, :prefix), :empty?), nil,
                    s(:lvasgn, :prefix,
                      s(:dstr,
                        s(:str, ":"),
                        s(:begin,
                          s(:lvar, :prefix))))),
                  s(:send,
                    s(:lvar, :decls), :[]=,
                    s(:dstr,
                      s(:str, "xmlns"),
                      s(:begin,
                        s(:lvar, :prefix))),
                    s(:lvar, :uri)))),
              s(:lvar, :decls))),
          s(:def, :maker_target,
            s(:args,
              s(:arg, :target)),
            s(:lvar, :target)))))))
