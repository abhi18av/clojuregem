s(:begin,
  s(:send, nil, :require,
    s(:str, "xmlscan/scanner")),
  s(:send, nil, :require,
    s(:str, "stringio")),
  s(:module,
    s(:const, nil, :RSS),
    s(:begin,
      s(:class,
        s(:const, nil, :XMLScanParser),
        s(:const, nil, :BaseParser),
        s(:begin,
          s(:sclass,
            s(:self),
            s(:def, :listener,
              s(:args),
              s(:const, nil, :XMLScanListener))),
          s(:send, nil, :private),
          s(:def, :_parse,
            s(:args),
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:ivar, :@rss), :is_a?,
                      s(:const, nil, :String)),
                    s(:lvasgn, :input,
                      s(:send,
                        s(:const, nil, :StringIO), :new,
                        s(:ivar, :@rss))),
                    s(:lvasgn, :input,
                      s(:ivar, :@rss))),
                  s(:lvasgn, :scanner,
                    s(:send,
                      s(:const,
                        s(:const, nil, :XMLScan), :XMLScanner), :new,
                      s(:ivar, :@listener))),
                  s(:send,
                    s(:lvar, :scanner), :parse,
                    s(:lvar, :input))),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:const, nil, :XMLScan), :Error)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:lvasgn, :lineno,
                      s(:or,
                        s(:or,
                          s(:send,
                            s(:lvar, :e), :lineno),
                          s(:send,
                            s(:lvar, :scanner), :lineno)),
                        s(:send,
                          s(:lvar, :input), :lineno))),
                    s(:send, nil, :raise,
                      s(:block,
                        s(:send,
                          s(:const, nil, :NotWellFormedError), :new,
                          s(:lvar, :lineno)),
                        s(:args),
                        s(:send,
                          s(:lvar, :e), :message))))), nil))))),
      s(:class,
        s(:const, nil, :XMLScanListener),
        s(:const, nil, :BaseListener),
        s(:begin,
          s(:send, nil, :include,
            s(:const,
              s(:const, nil, :XMLScan), :Visitor)),
          s(:send, nil, :include,
            s(:const, nil, :ListenerMixin)),
          s(:casgn, nil, :ENTITIES,
            s(:hash,
              s(:pair,
                s(:str, "lt"),
                s(:str, "<")),
              s(:pair,
                s(:str, "gt"),
                s(:str, ">")),
              s(:pair,
                s(:str, "amp"),
                s(:str, "&")),
              s(:pair,
                s(:str, "quot"),
                s(:str, "\"")),
              s(:pair,
                s(:str, "apos"),
                s(:str, "'")))),
          s(:def, :on_xmldecl_version,
            s(:args,
              s(:arg, :str)),
            s(:ivasgn, :@version,
              s(:lvar, :str))),
          s(:def, :on_xmldecl_encoding,
            s(:args,
              s(:arg, :str)),
            s(:ivasgn, :@encoding,
              s(:lvar, :str))),
          s(:def, :on_xmldecl_standalone,
            s(:args,
              s(:arg, :str)),
            s(:ivasgn, :@standalone,
              s(:lvar, :str))),
          s(:def, :on_xmldecl_end,
            s(:args),
            s(:send, nil, :xmldecl,
              s(:ivar, :@version),
              s(:ivar, :@encoding),
              s(:send,
                s(:ivar, :@standalone), :==,
                s(:str, "yes")))),
          s(:send, nil, :alias_method,
            s(:sym, :on_pi),
            s(:sym, :instruction)),
          s(:send, nil, :alias_method,
            s(:sym, :on_chardata),
            s(:sym, :text)),
          s(:send, nil, :alias_method,
            s(:sym, :on_cdata),
            s(:sym, :text)),
          s(:def, :on_etag,
            s(:args,
              s(:arg, :name)),
            s(:send, nil, :tag_end,
              s(:lvar, :name))),
          s(:def, :on_entityref,
            s(:args,
              s(:arg, :ref)),
            s(:send, nil, :text,
              s(:send, nil, :entity,
                s(:lvar, :ref)))),
          s(:def, :on_charref,
            s(:args,
              s(:arg, :code)),
            s(:send, nil, :text,
              s(:send,
                s(:array,
                  s(:lvar, :code)), :pack,
                s(:str, "U")))),
          s(:send, nil, :alias_method,
            s(:sym, :on_charref_hex),
            s(:sym, :on_charref)),
          s(:def, :on_stag,
            s(:args,
              s(:arg, :name)),
            s(:ivasgn, :@attrs,
              s(:hash))),
          s(:def, :on_attribute,
            s(:args,
              s(:arg, :name)),
            s(:send,
              s(:ivar, :@attrs), :[]=,
              s(:lvar, :name),
              s(:ivasgn, :@current_attr,
                s(:str, "")))),
          s(:def, :on_attr_value,
            s(:args,
              s(:arg, :str)),
            s(:send,
              s(:ivar, :@current_attr), :<<,
              s(:lvar, :str))),
          s(:def, :on_attr_entityref,
            s(:args,
              s(:arg, :ref)),
            s(:send,
              s(:ivar, :@current_attr), :<<,
              s(:send, nil, :entity,
                s(:lvar, :ref)))),
          s(:def, :on_attr_charref,
            s(:args,
              s(:arg, :code)),
            s(:send,
              s(:ivar, :@current_attr), :<<,
              s(:send,
                s(:array,
                  s(:lvar, :code)), :pack,
                s(:str, "U")))),
          s(:send, nil, :alias_method,
            s(:sym, :on_attr_charref_hex),
            s(:sym, :on_attr_charref)),
          s(:def, :on_stag_end,
            s(:args,
              s(:arg, :name)),
            s(:send, nil, :tag_start,
              s(:lvar, :name),
              s(:ivar, :@attrs))),
          s(:def, :on_stag_end_empty,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:send, nil, :tag_start,
                s(:lvar, :name),
                s(:ivar, :@attrs)),
              s(:send, nil, :tag_end,
                s(:lvar, :name)))),
          s(:send, nil, :private),
          s(:def, :entity,
            s(:args,
              s(:arg, :ref)),
            s(:begin,
              s(:lvasgn, :ent,
                s(:send,
                  s(:const, nil, :ENTITIES), :[],
                  s(:lvar, :ref))),
              s(:if,
                s(:lvar, :ent),
                s(:lvar, :ent),
                s(:send, nil, :wellformed_error,
                  s(:dstr,
                    s(:str, "undefined entity: "),
                    s(:begin,
                      s(:lvar, :ref))))))))))))
