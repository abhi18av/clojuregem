s(:begin,
  s(:send, nil, :require,
    s(:str, "rss/taxonomy")),
  s(:send, nil, :require,
    s(:str, "rss/maker/1.0")),
  s(:send, nil, :require,
    s(:str, "rss/maker/dublincore")),
  s(:module,
    s(:const, nil, :RSS),
    s(:module,
      s(:const, nil, :Maker),
      s(:begin,
        s(:module,
          s(:const, nil, :TaxonomyTopicsModel),
          s(:begin,
            s(:defs,
              s(:self), :append_features,
              s(:args,
                s(:arg, :klass)),
              s(:begin,
                s(:zsuper),
                s(:send,
                  s(:lvar, :klass), :def_classed_element,
                  s(:dstr,
                    s(:begin,
                      s(:const,
                        s(:const, nil, :RSS), :TAXO_PREFIX)),
                    s(:str, "_topics")),
                  s(:str, "TaxonomyTopics")))),
            s(:defs,
              s(:self), :install_taxo_topics,
              s(:args,
                s(:arg, :klass)),
              s(:send,
                s(:lvar, :klass), :module_eval,
                s(:dstr,
                  s(:str, "          class TaxonomyTopics < TaxonomyTopicsBase\n"),
                  s(:str, "            def to_feed(feed, current)\n"),
                  s(:str, "              if current.respond_to?(:taxo_topics)\n"),
                  s(:str, "                topics = current.class::TaxonomyTopics.new\n"),
                  s(:str, "                bag = topics.Bag\n"),
                  s(:str, "                @resources.each do |resource|\n"),
                  s(:str, "                  bag.lis << RDF::Bag::Li.new(resource)\n"),
                  s(:str, "                end\n"),
                  s(:str, "                current.taxo_topics = topics\n"),
                  s(:str, "              end\n"),
                  s(:str, "            end\n"),
                  s(:str, "          end\n")),
                s(:str, "(string)"),
                s(:send,
                  s(:int, 17), :+,
                  s(:int, 1)))),
            s(:class,
              s(:const, nil, :TaxonomyTopicsBase),
              s(:const, nil, :Base),
              s(:begin,
                s(:send, nil, :attr_reader,
                  s(:sym, :resources)),
                s(:send, nil, :def_array_element,
                  s(:str, "resource")),
                s(:send, nil, :remove_method,
                  s(:sym, :new_resource)))))),
        s(:module,
          s(:const, nil, :TaxonomyTopicModel),
          s(:begin,
            s(:defs,
              s(:self), :append_features,
              s(:args,
                s(:arg, :klass)),
              s(:begin,
                s(:zsuper),
                s(:lvasgn, :class_name,
                  s(:str, "TaxonomyTopics")),
                s(:send,
                  s(:lvar, :klass), :def_classed_elements,
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :TAXO_PREFIX)),
                    s(:str, "_topic")),
                  s(:str, "value"),
                  s(:lvar, :class_name)))),
            s(:defs,
              s(:self), :install_taxo_topic,
              s(:args,
                s(:arg, :klass)),
              s(:send,
                s(:lvar, :klass), :module_eval,
                s(:dstr,
                  s(:str, "          class TaxonomyTopics < TaxonomyTopicsBase\n"),
                  s(:str, "            class TaxonomyTopic < TaxonomyTopicBase\n"),
                  s(:str, "              DublinCoreModel.install_dublin_core(self)\n"),
                  s(:str, "              TaxonomyTopicsModel.install_taxo_topics(self)\n"),
                  s(:str, "\n"),
                  s(:str, "              def to_feed(feed, current)\n"),
                  s(:str, "                if current.respond_to?(:taxo_topics)\n"),
                  s(:str, "                  topic = current.class::TaxonomyTopic.new(value)\n"),
                  s(:str, "                  topic.taxo_link = value\n"),
                  s(:str, "                  taxo_topics.to_feed(feed, topic) if taxo_topics\n"),
                  s(:str, "                  current.taxo_topics << topic\n"),
                  s(:str, "                  setup_other_elements(feed, topic)\n"),
                  s(:str, "                end\n"),
                  s(:str, "              end\n"),
                  s(:str, "            end\n"),
                  s(:str, "          end\n")),
                s(:str, "(string)"),
                s(:send,
                  s(:int, 49), :+,
                  s(:int, 1)))),
            s(:class,
              s(:const, nil, :TaxonomyTopicsBase),
              s(:const, nil, :Base),
              s(:begin,
                s(:send, nil, :def_array_element,
                  s(:str, "topic"),
                  s(:nil),
                  s(:str, "TaxonomyTopic")),
                s(:send, nil, :alias_method,
                  s(:sym, :new_taxo_topic),
                  s(:sym, :new_topic)),
                s(:class,
                  s(:const, nil, :TaxonomyTopicBase),
                  s(:const, nil, :Base),
                  s(:begin,
                    s(:send, nil, :include,
                      s(:const, nil, :DublinCoreModel)),
                    s(:send, nil, :include,
                      s(:const, nil, :TaxonomyTopicsModel)),
                    s(:send, nil, :attr_accessor,
                      s(:sym, :value)),
                    s(:send, nil, :add_need_initialize_variable,
                      s(:str, "value")),
                    s(:send, nil, :alias_method,
                      s(:sym, :taxo_link),
                      s(:sym, :value)),
                    s(:send, nil, :alias_method,
                      s(:sym, :taxo_link=),
                      s(:sym, :value=)),
                    s(:def, :have_required_values?,
                      s(:args),
                      s(:ivar, :@value)))))))),
        s(:class,
          s(:const, nil, :RSSBase), nil,
          s(:send, nil, :include,
            s(:const, nil, :TaxonomyTopicModel))),
        s(:class,
          s(:const, nil, :ChannelBase), nil,
          s(:send, nil, :include,
            s(:const, nil, :TaxonomyTopicsModel))),
        s(:class,
          s(:const, nil, :ItemsBase), nil,
          s(:class,
            s(:const, nil, :ItemBase), nil,
            s(:send, nil, :include,
              s(:const, nil, :TaxonomyTopicsModel)))),
        s(:block,
          s(:send,
            s(:send, nil, :makers), :each),
          s(:args,
            s(:arg, :maker)),
          s(:send,
            s(:lvar, :maker), :module_eval,
            s(:dstr,
              s(:str, "        TaxonomyTopicModel.install_taxo_topic(self)\n"),
              s(:str, "\n"),
              s(:str, "        class Channel\n"),
              s(:str, "          TaxonomyTopicsModel.install_taxo_topics(self)\n"),
              s(:str, "        end\n"),
              s(:str, "\n"),
              s(:str, "        class Items\n"),
              s(:str, "          class Item\n"),
              s(:str, "            TaxonomyTopicsModel.install_taxo_topics(self)\n"),
              s(:str, "          end\n"),
              s(:str, "        end\n")),
            s(:str, "(string)"),
            s(:send,
              s(:int, 104), :+,
              s(:int, 1))))))))
