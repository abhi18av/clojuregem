s(:begin,
  s(:send, nil, :require,
    s(:str, "rss/dublincore")),
  s(:send, nil, :require,
    s(:str, "rss/maker/1.0")),
  s(:module,
    s(:const, nil, :RSS),
    s(:module,
      s(:const, nil, :Maker),
      s(:begin,
        s(:module,
          s(:const, nil, :DublinCoreModel),
          s(:begin,
            s(:defs,
              s(:self), :append_features,
              s(:args,
                s(:arg, :klass)),
              s(:begin,
                s(:zsuper),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const,
                        s(:const,
                          s(:cbase), :RSS), :DublinCoreModel), :ELEMENT_NAME_INFOS), :each),
                  s(:args,
                    s(:arg, :name),
                    s(:arg, :plural_name)),
                  s(:begin,
                    s(:or_asgn,
                      s(:lvasgn, :plural_name),
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :name)),
                        s(:str, "s"))),
                    s(:lvasgn, :full_name,
                      s(:dstr,
                        s(:begin,
                          s(:const,
                            s(:const, nil, :RSS), :DC_PREFIX)),
                        s(:str, "_"),
                        s(:begin,
                          s(:lvar, :name)))),
                    s(:lvasgn, :full_plural_name,
                      s(:dstr,
                        s(:begin,
                          s(:const,
                            s(:const, nil, :RSS), :DC_PREFIX)),
                        s(:str, "_"),
                        s(:begin,
                          s(:lvar, :plural_name)))),
                    s(:lvasgn, :plural_klass_name,
                      s(:dstr,
                        s(:str, "DublinCore"),
                        s(:begin,
                          s(:send,
                            s(:const, nil, :Utils), :to_class_name,
                            s(:lvar, :plural_name))))),
                    s(:send,
                      s(:lvar, :klass), :def_classed_elements,
                      s(:lvar, :full_name),
                      s(:str, "value"),
                      s(:lvar, :plural_klass_name),
                      s(:lvar, :full_plural_name),
                      s(:lvar, :name)),
                    s(:send,
                      s(:lvar, :klass), :module_eval,
                      s(:dstr,
                        s(:str, "            def new_"),
                        s(:begin,
                          s(:lvar, :full_name)),
                        s(:str, "(value=nil)\n"),
                        s(:str, "              _"),
                        s(:begin,
                          s(:lvar, :full_name)),
                        s(:str, " = "),
                        s(:begin,
                          s(:lvar, :full_plural_name)),
                        s(:str, ".new_"),
                        s(:begin,
                          s(:lvar, :name)),
                        s(:str, "\n"),
                        s(:str, "              _"),
                        s(:begin,
                          s(:lvar, :full_name)),
                        s(:str, ".value = value\n"),
                        s(:str, "              if block_given?\n"),
                        s(:str, "                yield _"),
                        s(:begin,
                          s(:lvar, :full_name)),
                        s(:str, "\n"),
                        s(:str, "              else\n"),
                        s(:str, "                _"),
                        s(:begin,
                          s(:lvar, :full_name)),
                        s(:str, "\n"),
                        s(:str, "              end\n"),
                        s(:str, "            end\n")),
                      s(:str, "(string)"),
                      s(:send,
                        s(:int, 18), :+,
                        s(:int, 1))))),
                s(:send,
                  s(:lvar, :klass), :module_eval,
                  s(:dstr,
                    s(:str, "          # For backward compatibility\n"),
                    s(:str, "          alias "),
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, "_rightses "),
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, "_rights_list\n")),
                  s(:str, "(string)"),
                  s(:send,
                    s(:int, 31), :+,
                    s(:int, 1))))),
            s(:block,
              s(:send,
                s(:const,
                  s(:const,
                    s(:const,
                      s(:cbase), :RSS), :DublinCoreModel), :ELEMENT_NAME_INFOS), :each),
              s(:args,
                s(:arg, :name),
                s(:arg, :plural_name)),
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :plural_name),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "s"))),
                s(:or_asgn,
                  s(:lvasgn, :full_name),
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, "_"),
                    s(:begin,
                      s(:lvar, :name)))),
                s(:or_asgn,
                  s(:lvasgn, :full_plural_name),
                  s(:dstr,
                    s(:begin,
                      s(:const, nil, :DC_PREFIX)),
                    s(:str, "_"),
                    s(:begin,
                      s(:lvar, :plural_name)))),
                s(:lvasgn, :klass_name,
                  s(:send,
                    s(:const, nil, :Utils), :to_class_name,
                    s(:lvar, :name))),
                s(:lvasgn, :full_klass_name,
                  s(:dstr,
                    s(:str, "DublinCore"),
                    s(:begin,
                      s(:lvar, :klass_name)))),
                s(:lvasgn, :plural_klass_name,
                  s(:dstr,
                    s(:str, "DublinCore"),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Utils), :to_class_name,
                        s(:lvar, :plural_name))))),
                s(:send, nil, :module_eval,
                  s(:dstr,
                    s(:str, "        class "),
                    s(:begin,
                      s(:lvar, :plural_klass_name)),
                    s(:str, "Base < Base\n"),
                    s(:str, "          def_array_element("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :name), :dump)),
                    s(:str, ", "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :full_plural_name), :dump)),
                    s(:str, ",\n"),
                    s(:str, "                            "),
                    s(:begin,
                      s(:send,
                        s(:lvar, :full_klass_name), :dump)),
                    s(:str, ")\n"),
                    s(:str, "\n"),
                    s(:str, "          class "),
                    s(:begin,
                      s(:lvar, :full_klass_name)),
                    s(:str, "Base < Base\n"),
                    s(:str, "            attr_accessor :value\n"),
                    s(:str, "            add_need_initialize_variable(\"value\")\n"),
                    s(:str, "            alias_method(:content, :value)\n"),
                    s(:str, "            alias_method(:content=, :value=)\n"),
                    s(:str, "\n"),
                    s(:str, "            def have_required_values?\n"),
                    s(:str, "              @value\n"),
                    s(:str, "            end\n"),
                    s(:str, "\n"),
                    s(:str, "            def to_feed(feed, current)\n"),
                    s(:str, "              if value and current.respond_to?(:"),
                    s(:begin,
                      s(:lvar, :full_name)),
                    s(:str, ")\n"),
                    s(:str, "                new_item = current.class::"),
                    s(:begin,
                      s(:lvar, :full_klass_name)),
                    s(:str, ".new(value)\n"),
                    s(:str, "                current."),
                    s(:begin,
                      s(:lvar, :full_plural_name)),
                    s(:str, " << new_item\n"),
                    s(:str, "              end\n"),
                    s(:str, "            end\n"),
                    s(:str, "          end\n"),
                    s(:str, "          "),
                    s(:begin,
                      s(:lvar, :klass_name)),
                    s(:str, "Base = "),
                    s(:begin,
                      s(:lvar, :full_klass_name)),
                    s(:str, "Base\n"),
                    s(:str, "        end\n")),
                  s(:str, "(string)"),
                  s(:send,
                    s(:int, 44), :+,
                    s(:int, 1))))),
            s(:defs,
              s(:self), :install_dublin_core,
              s(:args,
                s(:arg, :klass)),
              s(:block,
                s(:send,
                  s(:const,
                    s(:const,
                      s(:const,
                        s(:cbase), :RSS), :DublinCoreModel), :ELEMENT_NAME_INFOS), :each),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :plural_name)),
                s(:begin,
                  s(:or_asgn,
                    s(:lvasgn, :plural_name),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "s"))),
                  s(:lvasgn, :klass_name,
                    s(:send,
                      s(:const, nil, :Utils), :to_class_name,
                      s(:lvar, :name))),
                  s(:lvasgn, :full_klass_name,
                    s(:dstr,
                      s(:str, "DublinCore"),
                      s(:begin,
                        s(:lvar, :klass_name)))),
                  s(:lvasgn, :plural_klass_name,
                    s(:dstr,
                      s(:str, "DublinCore"),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Utils), :to_class_name,
                          s(:lvar, :plural_name))))),
                  s(:send,
                    s(:lvar, :klass), :module_eval,
                    s(:dstr,
                      s(:str, "          class "),
                      s(:begin,
                        s(:lvar, :plural_klass_name)),
                      s(:str, " < "),
                      s(:begin,
                        s(:lvar, :plural_klass_name)),
                      s(:str, "Base\n"),
                      s(:str, "            class "),
                      s(:begin,
                        s(:lvar, :full_klass_name)),
                      s(:str, " < "),
                      s(:begin,
                        s(:lvar, :full_klass_name)),
                      s(:str, "Base\n"),
                      s(:str, "            end\n"),
                      s(:str, "            "),
                      s(:begin,
                        s(:lvar, :klass_name)),
                      s(:str, " = "),
                      s(:begin,
                        s(:lvar, :full_klass_name)),
                      s(:str, "\n"),
                      s(:str, "          end\n")),
                    s(:str, "(string)"),
                    s(:send,
                      s(:int, 77), :+,
                      s(:int, 1)))))))),
        s(:class,
          s(:const, nil, :ChannelBase), nil,
          s(:send, nil, :include,
            s(:const, nil, :DublinCoreModel))),
        s(:class,
          s(:const, nil, :ImageBase), nil,
          s(:send, nil, :include,
            s(:const, nil, :DublinCoreModel))),
        s(:class,
          s(:const, nil, :ItemsBase), nil,
          s(:class,
            s(:const, nil, :ItemBase), nil,
            s(:send, nil, :include,
              s(:const, nil, :DublinCoreModel)))),
        s(:class,
          s(:const, nil, :TextinputBase), nil,
          s(:send, nil, :include,
            s(:const, nil, :DublinCoreModel))),
        s(:block,
          s(:send,
            s(:send, nil, :makers), :each),
          s(:args,
            s(:arg, :maker)),
          s(:send,
            s(:lvar, :maker), :module_eval,
            s(:dstr,
              s(:str, "        class Channel\n"),
              s(:str, "          DublinCoreModel.install_dublin_core(self)\n"),
              s(:str, "        end\n"),
              s(:str, "\n"),
              s(:str, "        class Image\n"),
              s(:str, "          DublinCoreModel.install_dublin_core(self)\n"),
              s(:str, "        end\n"),
              s(:str, "\n"),
              s(:str, "        class Items\n"),
              s(:str, "          class Item\n"),
              s(:str, "            DublinCoreModel.install_dublin_core(self)\n"),
              s(:str, "          end\n"),
              s(:str, "        end\n"),
              s(:str, "\n"),
              s(:str, "        class Textinput\n"),
              s(:str, "          DublinCoreModel.install_dublin_core(self)\n"),
              s(:str, "        end\n")),
            s(:str, "(string)"),
            s(:send,
              s(:int, 101), :+,
              s(:int, 1))))))))
