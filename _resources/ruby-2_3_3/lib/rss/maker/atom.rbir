s(:begin,
  s(:send, nil, :require,
    s(:str, "rss/atom")),
  s(:send, nil, :require,
    s(:str, "rss/maker/base")),
  s(:module,
    s(:const, nil, :RSS),
    s(:module,
      s(:const, nil, :Maker),
      s(:begin,
        s(:module,
          s(:const, nil, :AtomPersons),
          s(:begin,
            s(:send, nil, :module_function),
            s(:def, :def_atom_persons,
              s(:args,
                s(:arg, :klass),
                s(:arg, :name),
                s(:arg, :maker_name),
                s(:optarg, :plural,
                  s(:nil))),
              s(:begin,
                s(:or_asgn,
                  s(:lvasgn, :plural),
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "s"))),
                s(:lvasgn, :klass_name,
                  s(:send,
                    s(:const, nil, :Utils), :to_class_name,
                    s(:lvar, :name))),
                s(:lvasgn, :plural_klass_name,
                  s(:send,
                    s(:const, nil, :Utils), :to_class_name,
                    s(:lvar, :plural))),
                s(:send,
                  s(:lvar, :klass), :class_eval,
                  s(:dstr,
                    s(:str, "          class "),
                    s(:begin,
                      s(:lvar, :plural_klass_name)),
                    s(:str, " < "),
                    s(:begin,
                      s(:lvar, :plural_klass_name)),
                    s(:str, "Base\n"),
                    s(:str, "            class "),
                    s(:begin,
                      s(:lvar, :klass_name)),
                    s(:str, " < "),
                    s(:begin,
                      s(:lvar, :klass_name)),
                    s(:str, "Base\n"),
                    s(:str, "              def to_feed(feed, current)\n"),
                    s(:str, "                "),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, " = feed.class::"),
                    s(:begin,
                      s(:lvar, :klass_name)),
                    s(:str, ".new\n"),
                    s(:str, "                set = setup_values("),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ")\n"),
                    s(:str, "                unless set\n"),
                    s(:str, "                  raise NotSetError.new("),
                    s(:begin,
                      s(:send,
                        s(:lvar, :maker_name), :dump)),
                    s(:str, ",\n"),
                    s(:str, "                                        not_set_required_variables)\n"),
                    s(:str, "                end\n"),
                    s(:str, "                current."),
                    s(:begin,
                      s(:lvar, :plural)),
                    s(:str, " << "),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, "\n"),
                    s(:str, "                set_parent("),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ", current)\n"),
                    s(:str, "                setup_other_elements("),
                    s(:begin,
                      s(:lvar, :name)),
                    s(:str, ")\n"),
                    s(:str, "              end\n"),
                    s(:str, "\n"),
                    s(:str, "              private\n"),
                    s(:str, "              def required_variable_names\n"),
                    s(:str, "                %w(name)\n"),
                    s(:str, "              end\n"),
                    s(:str, "            end\n"),
                    s(:str, "          end\n")),
                  s(:str, "(string)"),
                  s(:send,
                    s(:int, 15), :+,
                    s(:int, 1))))))),
        s(:module,
          s(:const, nil, :AtomTextConstruct),
          s(:begin,
            s(:sclass,
              s(:self),
              s(:def, :def_atom_text_construct,
                s(:args,
                  s(:arg, :klass),
                  s(:arg, :name),
                  s(:arg, :maker_name),
                  s(:optarg, :klass_name,
                    s(:nil)),
                  s(:optarg, :atom_klass_name,
                    s(:nil))),
                s(:begin,
                  s(:or_asgn,
                    s(:lvasgn, :klass_name),
                    s(:send,
                      s(:const, nil, :Utils), :to_class_name,
                      s(:lvar, :name))),
                  s(:or_asgn,
                    s(:lvasgn, :atom_klass_name),
                    s(:send,
                      s(:const, nil, :Utils), :to_class_name,
                      s(:lvar, :name))),
                  s(:send,
                    s(:lvar, :klass), :class_eval,
                    s(:dstr,
                      s(:str, "            class "),
                      s(:begin,
                        s(:lvar, :klass_name)),
                      s(:str, " < "),
                      s(:begin,
                        s(:lvar, :klass_name)),
                      s(:str, "Base\n"),
                      s(:str, "              include "),
                      s(:begin,
                        s(:send,
                          s(:self), :name)),
                      s(:str, "\n"),
                      s(:str, "              def to_feed(feed, current)\n"),
                      s(:str, "                "),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, " = current.class::"),
                      s(:begin,
                        s(:lvar, :atom_klass_name)),
                      s(:str, ".new\n"),
                      s(:str, "                if setup_values("),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, ")\n"),
                      s(:str, "                  current."),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, " = "),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, "\n"),
                      s(:str, "                  set_parent("),
                      s(:begin,
                        s(:lvar, :name)),
                      s(:str, ", current)\n"),
                      s(:str, "                  setup_other_elements(feed)\n"),
                      s(:str, "                elsif variable_is_set?\n"),
                      s(:str, "                  raise NotSetError.new("),
                      s(:begin,
                        s(:send,
                          s(:lvar, :maker_name), :dump)),
                      s(:str, ",\n"),
                      s(:str, "                                        not_set_required_variables)\n"),
                      s(:str, "                end\n"),
                      s(:str, "              end\n"),
                      s(:str, "            end\n")),
                    s(:str, "(string)"),
                    s(:send,
                      s(:int, 47), :+,
                      s(:int, 1)))))),
            s(:send, nil, :private),
            s(:def, :required_variable_names,
              s(:args),
              s(:if,
                s(:send,
                  s(:send, nil, :type), :==,
                  s(:str, "xhtml")),
                s(:array,
                  s(:str, "xml_content")),
                s(:array,
                  s(:str, "content")))),
            s(:def, :variables,
              s(:args),
              s(:if,
                s(:send,
                  s(:send, nil, :type), :==,
                  s(:str, "xhtml")),
                s(:send,
                  s(:zsuper), :+,
                  s(:array,
                    s(:str, "xhtml"))),
                s(:zsuper))))),
        s(:module,
          s(:const, nil, :AtomCategory),
          s(:begin,
            s(:def, :to_feed,
              s(:args,
                s(:arg, :feed),
                s(:arg, :current)),
              s(:begin,
                s(:lvasgn, :category,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:lvar, :feed), :class), :Category), :new)),
                s(:lvasgn, :set,
                  s(:send, nil, :setup_values,
                    s(:lvar, :category))),
                s(:if,
                  s(:lvar, :set),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :current), :categories), :<<,
                      s(:lvar, :category)),
                    s(:send, nil, :set_parent,
                      s(:lvar, :category),
                      s(:lvar, :current)),
                    s(:send, nil, :setup_other_elements,
                      s(:lvar, :feed))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :NotSetError), :new,
                      s(:send,
                        s(:send,
                          s(:self), :class), :not_set_name),
                      s(:send, nil, :not_set_required_variables)))))),
            s(:send, nil, :private),
            s(:def, :required_variable_names,
              s(:args),
              s(:array,
                s(:str, "term"))),
            s(:def, :variables,
              s(:args),
              s(:send,
                s(:zsuper), :+,
                s(:array,
                  s(:str, "term"),
                  s(:str, "scheme")))))),
        s(:module,
          s(:const, nil, :AtomLink),
          s(:begin,
            s(:def, :to_feed,
              s(:args,
                s(:arg, :feed),
                s(:arg, :current)),
              s(:begin,
                s(:lvasgn, :link,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:lvar, :feed), :class), :Link), :new)),
                s(:lvasgn, :set,
                  s(:send, nil, :setup_values,
                    s(:lvar, :link))),
                s(:if,
                  s(:lvar, :set),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :current), :links), :<<,
                      s(:lvar, :link)),
                    s(:send, nil, :set_parent,
                      s(:lvar, :link),
                      s(:lvar, :current)),
                    s(:send, nil, :setup_other_elements,
                      s(:lvar, :feed))),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :NotSetError), :new,
                      s(:send,
                        s(:send,
                          s(:self), :class), :not_set_name),
                      s(:send, nil, :not_set_required_variables)))))),
            s(:send, nil, :private),
            s(:def, :required_variable_names,
              s(:args),
              s(:array,
                s(:str, "href"))))),
        s(:module,
          s(:const, nil, :AtomGenerator),
          s(:begin,
            s(:def, :to_feed,
              s(:args,
                s(:arg, :feed),
                s(:arg, :current)),
              s(:begin,
                s(:lvasgn, :generator,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:lvar, :current), :class), :Generator), :new)),
                s(:if,
                  s(:send, nil, :setup_values,
                    s(:lvar, :generator)),
                  s(:begin,
                    s(:send,
                      s(:lvar, :current), :generator=,
                      s(:lvar, :generator)),
                    s(:send, nil, :set_parent,
                      s(:lvar, :generator),
                      s(:lvar, :current)),
                    s(:send, nil, :setup_other_elements,
                      s(:lvar, :feed))),
                  s(:if,
                    s(:send, nil, :variable_is_set?),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :NotSetError), :new,
                        s(:send,
                          s(:send,
                            s(:self), :class), :not_set_name),
                        s(:send, nil, :not_set_required_variables))), nil)))),
            s(:send, nil, :private),
            s(:def, :required_variable_names,
              s(:args),
              s(:array,
                s(:str, "content"))))),
        s(:module,
          s(:const, nil, :AtomLogo),
          s(:begin,
            s(:def, :to_feed,
              s(:args,
                s(:arg, :feed),
                s(:arg, :current)),
              s(:begin,
                s(:lvasgn, :logo,
                  s(:send,
                    s(:const,
                      s(:send,
                        s(:lvar, :current), :class), :Logo), :new)),
                s(:sclass,
                  s(:lvar, :logo),
                  s(:send, nil, :alias_method,
                    s(:sym, :uri=),
                    s(:sym, :content=))),
                s(:lvasgn, :set,
                  s(:send, nil, :setup_values,
                    s(:lvar, :logo))),
                s(:sclass,
                  s(:lvar, :logo),
                  s(:send, nil, :remove_method,
                    s(:sym, :uri=))),
                s(:if,
                  s(:lvar, :set),
                  s(:begin,
                    s(:send,
                      s(:lvar, :current), :logo=,
                      s(:lvar, :logo)),
                    s(:send, nil, :set_parent,
                      s(:lvar, :logo),
                      s(:lvar, :current)),
                    s(:send, nil, :setup_other_elements,
                      s(:lvar, :feed))),
                  s(:if,
                    s(:send, nil, :variable_is_set?),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :NotSetError), :new,
                        s(:send,
                          s(:send,
                            s(:self), :class), :not_set_name),
                        s(:send, nil, :not_set_required_variables))), nil)))),
            s(:send, nil, :private),
            s(:def, :required_variable_names,
              s(:args),
              s(:array,
                s(:str, "uri")))))))))
