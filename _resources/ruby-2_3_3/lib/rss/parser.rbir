s(:begin,
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:send, nil, :require,
    s(:str, "open-uri")),
  s(:send, nil, :require,
    s(:str, "rss/rss")),
  s(:send, nil, :require,
    s(:str, "rss/xml")),
  s(:module,
    s(:const, nil, :RSS),
    s(:begin,
      s(:class,
        s(:const, nil, :NotWellFormedError),
        s(:const, nil, :Error),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :line),
            s(:sym, :element)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :line,
                s(:nil)),
              s(:optarg, :element,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :message,
                s(:str, "This is not well formed XML")),
              s(:if,
                s(:or,
                  s(:lvar, :element),
                  s(:lvar, :line)),
                s(:begin,
                  s(:send,
                    s(:lvar, :message), :<<,
                    s(:str, "\nerror occurred")),
                  s(:if,
                    s(:lvar, :element),
                    s(:send,
                      s(:lvar, :message), :<<,
                      s(:dstr,
                        s(:str, " in "),
                        s(:begin,
                          s(:lvar, :element)))), nil),
                  s(:if,
                    s(:lvar, :line),
                    s(:send,
                      s(:lvar, :message), :<<,
                      s(:dstr,
                        s(:str, " at about "),
                        s(:begin,
                          s(:lvar, :line)),
                        s(:str, " line"))), nil)), nil),
              s(:if,
                s(:send, nil, :block_given?),
                s(:send,
                  s(:lvar, :message), :<<,
                  s(:dstr,
                    s(:str, "\n"),
                    s(:begin,
                      s(:yield)))), nil),
              s(:super,
                s(:lvar, :message)))))),
      s(:class,
        s(:const, nil, :XMLParserNotFound),
        s(:const, nil, :Error),
        s(:def, :initialize,
          s(:args),
          s(:super,
            s(:send,
              s(:str, "available XML parser was not found in "), :<<,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :AVAILABLE_PARSER_LIBRARIES), :inspect)),
                s(:str, ".")))))),
      s(:class,
        s(:const, nil, :NotValidXMLParser),
        s(:const, nil, :Error),
        s(:def, :initialize,
          s(:args,
            s(:arg, :parser)),
          s(:super,
            s(:send,
              s(:send,
                s(:send,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :parser)),
                    s(:str, " is not an available XML parser. ")), :<<,
                  s(:str, "Available XML parser")), :<<,
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:send,
                        s(:const, nil, :AVAILABLE_PARSERS), :size), :>,
                      s(:int, 1)),
                    s(:str, "s are "),
                    s(:str, " is ")))), :<<,
              s(:dstr,
                s(:begin,
                  s(:send,
                    s(:const, nil, :AVAILABLE_PARSERS), :inspect)),
                s(:str, ".")))))),
      s(:class,
        s(:const, nil, :NSError),
        s(:const, nil, :InvalidRSSError),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :tag),
            s(:sym, :prefix),
            s(:sym, :uri)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :tag),
              s(:arg, :prefix),
              s(:arg, :require_uri)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@tag),
                  s(:ivasgn, :@prefix),
                  s(:ivasgn, :@uri)),
                s(:array,
                  s(:lvar, :tag),
                  s(:lvar, :prefix),
                  s(:lvar, :require_uri))),
              s(:super,
                s(:send,
                  s(:dstr,
                    s(:str, "prefix <"),
                    s(:begin,
                      s(:lvar, :prefix)),
                    s(:str, "> doesn't associate uri ")), :<<,
                  s(:dstr,
                    s(:str, "<"),
                    s(:begin,
                      s(:lvar, :require_uri)),
                    s(:str, "> in tag <"),
                    s(:begin,
                      s(:lvar, :tag)),
                    s(:str, ">")))))))),
      s(:class,
        s(:const, nil, :Parser), nil,
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :Forwardable)),
          s(:sclass,
            s(:self),
            s(:begin,
              s(:cvasgn, :@@default_parser,
                s(:nil)),
              s(:def, :default_parser,
                s(:args),
                s(:or,
                  s(:cvar, :@@default_parser),
                  s(:send,
                    s(:const, nil, :AVAILABLE_PARSERS), :first))),
              s(:def, :default_parser=,
                s(:args,
                  s(:arg, :new_value)),
                s(:if,
                  s(:send,
                    s(:const, nil, :AVAILABLE_PARSERS), :include?,
                    s(:lvar, :new_value)),
                  s(:cvasgn, :@@default_parser,
                    s(:lvar, :new_value)),
                  s(:send, nil, :raise,
                    s(:send,
                      s(:const, nil, :NotValidXMLParser), :new,
                      s(:lvar, :new_value))))),
              s(:def, :parse,
                s(:args,
                  s(:arg, :rss),
                  s(:optarg, :do_validate,
                    s(:true)),
                  s(:optarg, :ignore_unknown_element,
                    s(:true)),
                  s(:optarg, :parser_class,
                    s(:send, nil, :default_parser))),
                s(:begin,
                  s(:lvasgn, :parser,
                    s(:send, nil, :new,
                      s(:lvar, :rss),
                      s(:lvar, :parser_class))),
                  s(:send,
                    s(:lvar, :parser), :do_validate=,
                    s(:lvar, :do_validate)),
                  s(:send,
                    s(:lvar, :parser), :ignore_unknown_element=,
                    s(:lvar, :ignore_unknown_element)),
                  s(:send,
                    s(:lvar, :parser), :parse))))),
          s(:send, nil, :def_delegators,
            s(:sym, :@parser),
            s(:sym, :parse),
            s(:sym, :rss),
            s(:sym, :ignore_unknown_element),
            s(:sym, :ignore_unknown_element=),
            s(:sym, :do_validate),
            s(:sym, :do_validate=)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :rss),
              s(:optarg, :parser_class,
                s(:send,
                  s(:send,
                    s(:self), :class), :default_parser))),
            s(:ivasgn, :@parser,
              s(:send,
                s(:lvar, :parser_class), :new,
                s(:send, nil, :normalize_rss,
                  s(:lvar, :rss))))),
          s(:send, nil, :private),
          s(:def, :normalize_rss,
            s(:args,
              s(:arg, :rss)),
            s(:begin,
              s(:if,
                s(:send, nil, :maybe_xml?,
                  s(:lvar, :rss)),
                s(:return,
                  s(:lvar, :rss)), nil),
              s(:lvasgn, :uri,
                s(:send, nil, :to_uri,
                  s(:lvar, :rss))),
              s(:if,
                s(:send,
                  s(:lvar, :uri), :respond_to?,
                  s(:sym, :read)),
                s(:send,
                  s(:lvar, :uri), :read),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:send,
                        s(:lvar, :rss), :tainted?), :!),
                    s(:send,
                      s(:const, nil, :File), :readable?,
                      s(:lvar, :rss))),
                  s(:block,
                    s(:send,
                      s(:const, nil, :File), :open,
                      s(:lvar, :rss)),
                    s(:args,
                      s(:arg, :f)),
                    s(:send,
                      s(:lvar, :f), :read)),
                  s(:lvar, :rss))))),
          s(:def, :maybe_xml?,
            s(:args,
              s(:arg, :source)),
            s(:and,
              s(:send,
                s(:lvar, :source), :is_a?,
                s(:const, nil, :String)),
              s(:match_with_lvasgn,
                s(:regexp,
                  s(:str, "<"),
                  s(:regopt)),
                s(:lvar, :source)))),
          s(:def, :to_uri,
            s(:args,
              s(:arg, :rss)),
            s(:begin,
              s(:if,
                s(:send,
                  s(:lvar, :rss), :is_a?,
                  s(:const,
                    s(:const,
                      s(:cbase), :URI), :Generic)),
                s(:return,
                  s(:lvar, :rss)), nil),
              s(:kwbegin,
                s(:rescue,
                  s(:send,
                    s(:const,
                      s(:cbase), :URI), :parse,
                    s(:lvar, :rss)),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const,
                          s(:cbase), :URI), :Error)), nil,
                    s(:lvar, :rss)), nil)))))),
      s(:class,
        s(:const, nil, :BaseParser), nil,
        s(:begin,
          s(:sclass,
            s(:self),
            s(:def, :raise_for_undefined_entity?,
              s(:args),
              s(:send,
                s(:send, nil, :listener), :raise_for_undefined_entity?))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :rss)),
            s(:begin,
              s(:ivasgn, :@listener,
                s(:send,
                  s(:send,
                    s(:send,
                      s(:self), :class), :listener), :new)),
              s(:ivasgn, :@rss,
                s(:lvar, :rss)))),
          s(:def, :rss,
            s(:args),
            s(:send,
              s(:ivar, :@listener), :rss)),
          s(:def, :ignore_unknown_element,
            s(:args),
            s(:send,
              s(:ivar, :@listener), :ignore_unknown_element)),
          s(:def, :ignore_unknown_element=,
            s(:args,
              s(:arg, :new_value)),
            s(:send,
              s(:ivar, :@listener), :ignore_unknown_element=,
              s(:lvar, :new_value))),
          s(:def, :do_validate,
            s(:args),
            s(:send,
              s(:ivar, :@listener), :do_validate)),
          s(:def, :do_validate=,
            s(:args,
              s(:arg, :new_value)),
            s(:send,
              s(:ivar, :@listener), :do_validate=,
              s(:lvar, :new_value))),
          s(:def, :parse,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:send,
                    s(:ivar, :@listener), :rss), :nil?),
                s(:send, nil, :_parse), nil),
              s(:send,
                s(:ivar, :@listener), :rss))))),
      s(:class,
        s(:const, nil, :BaseListener), nil,
        s(:begin,
          s(:send, nil, :extend,
            s(:const, nil, :Utils)),
          s(:sclass,
            s(:self),
            s(:begin,
              s(:cvasgn, :@@accessor_bases,
                s(:hash)),
              s(:cvasgn, :@@registered_uris,
                s(:hash)),
              s(:cvasgn, :@@class_names,
                s(:hash)),
              s(:def, :setter,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :tag_name)),
                s(:begin,
                  s(:lvasgn, :_getter,
                    s(:send, nil, :getter,
                      s(:lvar, :uri),
                      s(:lvar, :tag_name))),
                  s(:if,
                    s(:lvar, :_getter),
                    s(:dstr,
                      s(:begin,
                        s(:lvar, :_getter)),
                      s(:str, "=")),
                    s(:nil)))),
              s(:def, :getter,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :tag_name)),
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:cvar, :@@accessor_bases), :[],
                        s(:lvar, :uri)),
                      s(:hash))), :[],
                  s(:lvar, :tag_name))),
              s(:def, :available_tags,
                s(:args,
                  s(:arg, :uri)),
                s(:send,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:cvar, :@@accessor_bases), :[],
                        s(:lvar, :uri)),
                      s(:hash))), :keys)),
              s(:def, :register_uri,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :name)),
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:cvar, :@@registered_uris), :[],
                      s(:lvar, :name)),
                    s(:hash)),
                  s(:send,
                    s(:send,
                      s(:cvar, :@@registered_uris), :[],
                      s(:lvar, :name)), :[]=,
                    s(:lvar, :uri),
                    s(:nil)))),
              s(:def, :uri_registered?,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :name)),
                s(:send,
                  s(:send,
                    s(:cvar, :@@registered_uris), :[],
                    s(:lvar, :name)), :has_key?,
                  s(:lvar, :uri))),
              s(:def, :install_class_name,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :tag_name),
                  s(:arg, :class_name)),
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:cvar, :@@class_names), :[],
                      s(:lvar, :uri)),
                    s(:hash)),
                  s(:send,
                    s(:send,
                      s(:cvar, :@@class_names), :[],
                      s(:lvar, :uri)), :[]=,
                    s(:lvar, :tag_name),
                    s(:lvar, :class_name)))),
              s(:def, :class_name,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :tag_name)),
                s(:begin,
                  s(:lvasgn, :name,
                    s(:send,
                      s(:begin,
                        s(:or,
                          s(:send,
                            s(:cvar, :@@class_names), :[],
                            s(:lvar, :uri)),
                          s(:hash))), :[],
                      s(:lvar, :tag_name))),
                  s(:if,
                    s(:lvar, :name),
                    s(:return,
                      s(:lvar, :name)), nil),
                  s(:lvasgn, :tag_name,
                    s(:block,
                      s(:send,
                        s(:lvar, :tag_name), :gsub,
                        s(:regexp,
                          s(:str, "[_\\-]([a-z]?)"),
                          s(:regopt))),
                      s(:args),
                      s(:send,
                        s(:nth_ref, 1), :upcase))),
                  s(:send,
                    s(:send,
                      s(:send,
                        s(:lvar, :tag_name), :[],
                        s(:int, 0),
                        s(:int, 1)), :upcase), :+,
                    s(:send,
                      s(:lvar, :tag_name), :[],
                      s(:irange,
                        s(:int, 1),
                        s(:int, -1)))))),
              s(:def, :install_get_text_element,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :name),
                  s(:arg, :accessor_base)),
                s(:begin,
                  s(:send, nil, :install_accessor_base,
                    s(:lvar, :uri),
                    s(:lvar, :name),
                    s(:lvar, :accessor_base)),
                  s(:send, nil, :def_get_text_element,
                    s(:lvar, :uri),
                    s(:lvar, :name),
                    s(:splat,
                      s(:send, nil, :get_file_and_line_from_caller,
                        s(:int, 1)))))),
              s(:def, :raise_for_undefined_entity?,
                s(:args),
                s(:true)),
              s(:send, nil, :private),
              s(:def, :install_accessor_base,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :tag_name),
                  s(:arg, :accessor_base)),
                s(:begin,
                  s(:or_asgn,
                    s(:send,
                      s(:cvar, :@@accessor_bases), :[],
                      s(:lvar, :uri)),
                    s(:hash)),
                  s(:send,
                    s(:send,
                      s(:cvar, :@@accessor_bases), :[],
                      s(:lvar, :uri)), :[]=,
                    s(:lvar, :tag_name),
                    s(:send,
                      s(:lvar, :accessor_base), :chomp,
                      s(:str, "="))))),
              s(:def, :def_get_text_element,
                s(:args,
                  s(:arg, :uri),
                  s(:arg, :element_name),
                  s(:arg, :file),
                  s(:arg, :line)),
                s(:begin,
                  s(:send, nil, :register_uri,
                    s(:lvar, :uri),
                    s(:lvar, :element_name)),
                  s(:lvasgn, :method_name,
                    s(:dstr,
                      s(:str, "start_"),
                      s(:begin,
                        s(:lvar, :element_name)))),
                  s(:if,
                    s(:send, nil, :private_method_defined?,
                      s(:lvar, :method_name)), nil,
                    s(:begin,
                      s(:block,
                        s(:send, nil, :define_method,
                          s(:lvar, :method_name)),
                        s(:args,
                          s(:arg, :name),
                          s(:arg, :prefix),
                          s(:arg, :attrs),
                          s(:arg, :ns)),
                        s(:begin,
                          s(:lvasgn, :uri,
                            s(:send, nil, :_ns,
                              s(:lvar, :ns),
                              s(:lvar, :prefix))),
                          s(:if,
                            s(:send,
                              s(:send,
                                s(:self), :class), :uri_registered?,
                              s(:lvar, :uri),
                              s(:lvar, :element_name)),
                            s(:send, nil, :start_get_text_element,
                              s(:lvar, :name),
                              s(:lvar, :prefix),
                              s(:lvar, :ns),
                              s(:lvar, :uri)),
                            s(:send, nil, :start_else_element,
                              s(:lvar, :name),
                              s(:lvar, :prefix),
                              s(:lvar, :attrs),
                              s(:lvar, :ns))))),
                      s(:send, nil, :private,
                        s(:lvar, :method_name)))))))))),
      s(:module,
        s(:const, nil, :ListenerMixin),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :rss)),
          s(:send, nil, :attr_accessor,
            s(:sym, :ignore_unknown_element)),
          s(:send, nil, :attr_accessor,
            s(:sym, :do_validate)),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@rss,
                s(:nil)),
              s(:ivasgn, :@ignore_unknown_element,
                s(:true)),
              s(:ivasgn, :@do_validate,
                s(:true)),
              s(:ivasgn, :@ns_stack,
                s(:array,
                  s(:hash,
                    s(:pair,
                      s(:str, "xml"),
                      s(:sym, :xml))))),
              s(:ivasgn, :@tag_stack,
                s(:array,
                  s(:array))),
              s(:ivasgn, :@text_stack,
                s(:array,
                  s(:str, ""))),
              s(:ivasgn, :@proc_stack,
                s(:array)),
              s(:ivasgn, :@last_element,
                s(:nil)),
              s(:ivasgn, :@version,
                s(:ivasgn, :@encoding,
                  s(:ivasgn, :@standalone,
                    s(:nil)))),
              s(:ivasgn, :@xml_stylesheets,
                s(:array)),
              s(:ivasgn, :@xml_child_mode,
                s(:false)),
              s(:ivasgn, :@xml_element,
                s(:nil)),
              s(:ivasgn, :@last_xml_element,
                s(:nil)))),
          s(:def, :xmldecl,
            s(:args,
              s(:arg, :version),
              s(:arg, :encoding),
              s(:arg, :standalone)),
            s(:masgn,
              s(:mlhs,
                s(:ivasgn, :@version),
                s(:ivasgn, :@encoding),
                s(:ivasgn, :@standalone)),
              s(:array,
                s(:lvar, :version),
                s(:lvar, :encoding),
                s(:lvar, :standalone)))),
          s(:def, :instruction,
            s(:args,
              s(:arg, :name),
              s(:arg, :content)),
            s(:if,
              s(:send,
                s(:lvar, :name), :==,
                s(:str, "xml-stylesheet")),
              s(:begin,
                s(:lvasgn, :params,
                  s(:send, nil, :parse_pi_content,
                    s(:lvar, :content))),
                s(:if,
                  s(:send,
                    s(:lvar, :params), :has_key?,
                    s(:str, "href")),
                  s(:send,
                    s(:ivar, :@xml_stylesheets), :<<,
                    s(:send,
                      s(:const, nil, :XMLStyleSheet), :new,
                      s(:lvar, :params))), nil)), nil)),
          s(:def, :tag_start,
            s(:args,
              s(:arg, :name),
              s(:arg, :attributes)),
            s(:begin,
              s(:send,
                s(:ivar, :@text_stack), :push,
                s(:str, "")),
              s(:lvasgn, :ns,
                s(:send,
                  s(:send,
                    s(:ivar, :@ns_stack), :last), :dup)),
              s(:lvasgn, :attrs,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :attributes), :each),
                s(:args,
                  s(:arg, :n),
                  s(:arg, :v)),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\Axmlns(?:\\z|:)"),
                      s(:regopt)),
                    s(:lvar, :n)),
                  s(:send,
                    s(:lvar, :ns), :[]=,
                    s(:gvar, :$POSTMATCH),
                    s(:lvar, :v)),
                  s(:send,
                    s(:lvar, :attrs), :[]=,
                    s(:lvar, :n),
                    s(:lvar, :v)))),
              s(:send,
                s(:ivar, :@ns_stack), :push,
                s(:lvar, :ns)),
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :prefix),
                  s(:lvasgn, :local)),
                s(:send, nil, :split_name,
                  s(:lvar, :name))),
              s(:send,
                s(:send,
                  s(:ivar, :@tag_stack), :last), :push,
                s(:array,
                  s(:send, nil, :_ns,
                    s(:lvar, :ns),
                    s(:lvar, :prefix)),
                  s(:lvar, :local))),
              s(:send,
                s(:ivar, :@tag_stack), :push,
                s(:array)),
              s(:if,
                s(:ivar, :@xml_child_mode),
                s(:begin,
                  s(:lvasgn, :previous,
                    s(:ivar, :@last_xml_element)),
                  s(:lvasgn, :element_attrs,
                    s(:send,
                      s(:lvar, :attributes), :dup)),
                  s(:if,
                    s(:lvar, :previous), nil,
                    s(:block,
                      s(:send,
                        s(:lvar, :ns), :each),
                      s(:args,
                        s(:arg, :ns_prefix),
                        s(:arg, :value)),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:lvar, :ns_prefix), :==,
                            s(:str, "xml")),
                          s(:next), nil),
                        s(:lvasgn, :key,
                          s(:if,
                            s(:send,
                              s(:lvar, :ns_prefix), :empty?),
                            s(:str, "xmlns"),
                            s(:dstr,
                              s(:str, "xmlns:"),
                              s(:begin,
                                s(:lvar, :ns_prefix))))),
                        s(:or_asgn,
                          s(:send,
                            s(:lvar, :element_attrs), :[],
                            s(:lvar, :key)),
                          s(:lvar, :value))))),
                  s(:lvasgn, :next_element,
                    s(:send,
                      s(:const,
                        s(:const, nil, :XML), :Element), :new,
                      s(:lvar, :local),
                      s(:if,
                        s(:send,
                          s(:lvar, :prefix), :empty?),
                        s(:nil),
                        s(:lvar, :prefix)),
                      s(:send, nil, :_ns,
                        s(:lvar, :ns),
                        s(:lvar, :prefix)),
                      s(:lvar, :element_attrs))),
                  s(:if,
                    s(:lvar, :previous),
                    s(:send,
                      s(:lvar, :previous), :<<,
                      s(:lvar, :next_element)), nil),
                  s(:ivasgn, :@last_xml_element,
                    s(:lvar, :next_element)),
                  s(:lvasgn, :pr,
                    s(:block,
                      s(:send,
                        s(:const, nil, :Proc), :new),
                      s(:args,
                        s(:arg, :text),
                        s(:arg, :tags)),
                      s(:if,
                        s(:lvar, :previous),
                        s(:ivasgn, :@last_xml_element,
                          s(:lvar, :previous)),
                        s(:begin,
                          s(:ivasgn, :@xml_element,
                            s(:ivar, :@last_xml_element)),
                          s(:ivasgn, :@last_xml_element,
                            s(:nil)))))),
                  s(:send,
                    s(:ivar, :@proc_stack), :push,
                    s(:lvar, :pr))),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:ivar, :@rss), :nil?),
                    s(:send, nil, :respond_to?,
                      s(:dstr,
                        s(:str, "initial_start_"),
                        s(:begin,
                          s(:lvar, :local))),
                      s(:true))),
                  s(:send, nil, :__send__,
                    s(:dstr,
                      s(:str, "initial_start_"),
                      s(:begin,
                        s(:lvar, :local))),
                    s(:lvar, :local),
                    s(:lvar, :prefix),
                    s(:lvar, :attrs),
                    s(:send,
                      s(:lvar, :ns), :dup)),
                  s(:if,
                    s(:send, nil, :respond_to?,
                      s(:dstr,
                        s(:str, "start_"),
                        s(:begin,
                          s(:lvar, :local))),
                      s(:true)),
                    s(:send, nil, :__send__,
                      s(:dstr,
                        s(:str, "start_"),
                        s(:begin,
                          s(:lvar, :local))),
                      s(:lvar, :local),
                      s(:lvar, :prefix),
                      s(:lvar, :attrs),
                      s(:send,
                        s(:lvar, :ns), :dup)),
                    s(:send, nil, :start_else_element,
                      s(:lvar, :local),
                      s(:lvar, :prefix),
                      s(:lvar, :attrs),
                      s(:send,
                        s(:lvar, :ns), :dup))))))),
          s(:def, :tag_end,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:if,
                s(:const, nil, :DEBUG),
                s(:begin,
                  s(:send, nil, :p,
                    s(:dstr,
                      s(:str, "end tag "),
                      s(:begin,
                        s(:lvar, :name)))),
                  s(:send, nil, :p,
                    s(:ivar, :@tag_stack))), nil),
              s(:lvasgn, :text,
                s(:send,
                  s(:ivar, :@text_stack), :pop)),
              s(:lvasgn, :tags,
                s(:send,
                  s(:ivar, :@tag_stack), :pop)),
              s(:lvasgn, :pr,
                s(:send,
                  s(:ivar, :@proc_stack), :pop)),
              s(:if,
                s(:send,
                  s(:lvar, :pr), :nil?), nil,
                s(:send,
                  s(:lvar, :pr), :call,
                  s(:lvar, :text),
                  s(:lvar, :tags))),
              s(:send,
                s(:ivar, :@ns_stack), :pop))),
          s(:def, :text,
            s(:args,
              s(:arg, :data)),
            s(:if,
              s(:ivar, :@xml_child_mode),
              s(:if,
                s(:ivar, :@last_xml_element),
                s(:send,
                  s(:ivar, :@last_xml_element), :<<,
                  s(:lvar, :data)), nil),
              s(:send,
                s(:send,
                  s(:ivar, :@text_stack), :last), :<<,
                s(:lvar, :data)))),
          s(:send, nil, :private),
          s(:def, :_ns,
            s(:args,
              s(:arg, :ns),
              s(:arg, :prefix)),
            s(:send,
              s(:lvar, :ns), :fetch,
              s(:lvar, :prefix),
              s(:str, ""))),
          s(:casgn, nil, :CONTENT_PATTERN,
            s(:regexp,
              s(:str, "\\s*([^=]+)=([\"'])([^\\2]+?)\\2"),
              s(:regopt))),
          s(:def, :parse_pi_content,
            s(:args,
              s(:arg, :content)),
            s(:begin,
              s(:lvasgn, :params,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:lvar, :content), :scan,
                  s(:const, nil, :CONTENT_PATTERN)),
                s(:args,
                  s(:arg, :name),
                  s(:arg, :quote),
                  s(:arg, :value)),
                s(:send,
                  s(:lvar, :params), :[]=,
                  s(:lvar, :name),
                  s(:lvar, :value))),
              s(:lvar, :params))),
          s(:def, :start_else_element,
            s(:args,
              s(:arg, :local),
              s(:arg, :prefix),
              s(:arg, :attrs),
              s(:arg, :ns)),
            s(:begin,
              s(:lvasgn, :class_name,
                s(:send,
                  s(:send,
                    s(:self), :class), :class_name,
                  s(:send, nil, :_ns,
                    s(:lvar, :ns),
                    s(:lvar, :prefix)),
                  s(:lvar, :local))),
              s(:lvasgn, :current_class,
                s(:send,
                  s(:ivar, :@last_element), :class)),
              s(:if,
                s(:send, nil, :known_class?,
                  s(:lvar, :current_class),
                  s(:lvar, :class_name)),
                s(:begin,
                  s(:lvasgn, :next_class,
                    s(:send,
                      s(:lvar, :current_class), :const_get,
                      s(:lvar, :class_name))),
                  s(:send, nil, :start_have_something_element,
                    s(:lvar, :local),
                    s(:lvar, :prefix),
                    s(:lvar, :attrs),
                    s(:lvar, :ns),
                    s(:lvar, :next_class))),
                s(:if,
                  s(:or,
                    s(:send,
                      s(:ivar, :@do_validate), :!),
                    s(:ivar, :@ignore_unknown_element)),
                  s(:send,
                    s(:ivar, :@proc_stack), :push,
                    s(:send, nil, :setup_next_element_in_unknown_element)),
                  s(:begin,
                    s(:lvasgn, :parent,
                      s(:str, "ROOT ELEMENT???")),
                    s(:if,
                      s(:send,
                        s(:lvar, :current_class), :tag_name),
                      s(:lvasgn, :parent,
                        s(:send,
                          s(:lvar, :current_class), :tag_name)), nil),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :NotExpectedTagError), :new,
                        s(:lvar, :local),
                        s(:send, nil, :_ns,
                          s(:lvar, :ns),
                          s(:lvar, :prefix)),
                        s(:lvar, :parent)))))))),
          s(:if,
            s(:send,
              s(:send,
                s(:send,
                  s(:const, nil, :Module), :method,
                  s(:sym, :const_defined?)), :arity), :==,
              s(:int, -1)),
            s(:def, :known_class?,
              s(:args,
                s(:arg, :target_class),
                s(:arg, :class_name)),
              s(:and,
                s(:lvar, :class_name),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :target_class), :const_defined?,
                      s(:lvar, :class_name),
                      s(:false)),
                    s(:send,
                      s(:send,
                        s(:lvar, :target_class), :constants), :include?,
                      s(:send,
                        s(:lvar, :class_name), :to_sym)))))),
            s(:def, :known_class?,
              s(:args,
                s(:arg, :target_class),
                s(:arg, :class_name)),
              s(:and,
                s(:lvar, :class_name),
                s(:begin,
                  s(:or,
                    s(:send,
                      s(:lvar, :target_class), :const_defined?,
                      s(:lvar, :class_name)),
                    s(:send,
                      s(:send,
                        s(:lvar, :target_class), :constants), :include?,
                      s(:lvar, :class_name))))))),
          s(:casgn, nil, :NAMESPLIT,
            s(:regexp,
              s(:str, "^(?:([\\w:][-\\w.]*):)?([\\w:][-\\w.]*)"),
              s(:regopt))),
          s(:def, :split_name,
            s(:args,
              s(:arg, :name)),
            s(:begin,
              s(:send,
                s(:lvar, :name), :=~,
                s(:const, nil, :NAMESPLIT)),
              s(:array,
                s(:or,
                  s(:nth_ref, 1),
                  s(:str, "")),
                s(:nth_ref, 2)))),
          s(:def, :check_ns,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :prefix),
              s(:arg, :ns),
              s(:arg, :require_uri),
              s(:optarg, :ignore_unknown_element,
                s(:nil))),
            s(:if,
              s(:send,
                s(:send, nil, :_ns,
                  s(:lvar, :ns),
                  s(:lvar, :prefix)), :==,
                s(:lvar, :require_uri)),
              s(:true),
              s(:begin,
                s(:if,
                  s(:send,
                    s(:lvar, :ignore_unknown_element), :nil?),
                  s(:lvasgn, :ignore_unknown_element,
                    s(:ivar, :@ignore_unknown_element)), nil),
                s(:if,
                  s(:lvar, :ignore_unknown_element),
                  s(:false),
                  s(:if,
                    s(:ivar, :@do_validate),
                    s(:send, nil, :raise,
                      s(:send,
                        s(:const, nil, :NSError), :new,
                        s(:lvar, :tag_name),
                        s(:lvar, :prefix),
                        s(:lvar, :require_uri))),
                    s(:begin,
                      s(:send,
                        s(:send,
                          s(:ivar, :@ns_stack), :last), :[]=,
                        s(:lvar, :prefix),
                        s(:lvar, :require_uri)),
                      s(:true))))))),
          s(:def, :start_get_text_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :prefix),
              s(:arg, :ns),
              s(:arg, :required_uri)),
            s(:begin,
              s(:lvasgn, :pr,
                s(:block,
                  s(:send,
                    s(:const, nil, :Proc), :new),
                  s(:args,
                    s(:arg, :text),
                    s(:arg, :tags)),
                  s(:begin,
                    s(:lvasgn, :setter,
                      s(:send,
                        s(:send,
                          s(:self), :class), :setter,
                        s(:lvar, :required_uri),
                        s(:lvar, :tag_name))),
                    s(:if,
                      s(:and,
                        s(:lvar, :setter),
                        s(:send,
                          s(:ivar, :@last_element), :respond_to?,
                          s(:lvar, :setter))),
                      s(:begin,
                        s(:if,
                          s(:ivar, :@do_validate),
                          s(:begin,
                            s(:lvasgn, :getter,
                              s(:send,
                                s(:send,
                                  s(:self), :class), :getter,
                                s(:lvar, :required_uri),
                                s(:lvar, :tag_name))),
                            s(:if,
                              s(:send,
                                s(:ivar, :@last_element), :__send__,
                                s(:lvar, :getter)),
                              s(:send, nil, :raise,
                                s(:send,
                                  s(:const, nil, :TooMuchTagError), :new,
                                  s(:lvar, :tag_name),
                                  s(:send,
                                    s(:ivar, :@last_element), :tag_name))), nil)), nil),
                        s(:send,
                          s(:ivar, :@last_element), :__send__,
                          s(:lvar, :setter),
                          s(:send,
                            s(:lvar, :text), :to_s))),
                      s(:if,
                        s(:and,
                          s(:ivar, :@do_validate),
                          s(:send,
                            s(:ivar, :@ignore_unknown_element), :!)),
                        s(:send, nil, :raise,
                          s(:send,
                            s(:const, nil, :NotExpectedTagError), :new,
                            s(:lvar, :tag_name),
                            s(:send, nil, :_ns,
                              s(:lvar, :ns),
                              s(:lvar, :prefix)),
                            s(:send,
                              s(:ivar, :@last_element), :tag_name))), nil))))),
              s(:send,
                s(:ivar, :@proc_stack), :push,
                s(:lvar, :pr)))),
          s(:def, :start_have_something_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :prefix),
              s(:arg, :attrs),
              s(:arg, :ns),
              s(:arg, :klass)),
            s(:if,
              s(:send, nil, :check_ns,
                s(:lvar, :tag_name),
                s(:lvar, :prefix),
                s(:lvar, :ns),
                s(:send,
                  s(:lvar, :klass), :required_uri)),
              s(:begin,
                s(:lvasgn, :attributes,
                  s(:send, nil, :collect_attributes,
                    s(:lvar, :tag_name),
                    s(:lvar, :prefix),
                    s(:lvar, :attrs),
                    s(:lvar, :ns),
                    s(:lvar, :klass))),
                s(:send,
                  s(:ivar, :@proc_stack), :push,
                  s(:send, nil, :setup_next_element,
                    s(:lvar, :tag_name),
                    s(:lvar, :klass),
                    s(:lvar, :attributes)))),
              s(:send,
                s(:ivar, :@proc_stack), :push,
                s(:send, nil, :setup_next_element_in_unknown_element)))),
          s(:def, :collect_attributes,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :prefix),
              s(:arg, :attrs),
              s(:arg, :ns),
              s(:arg, :klass)),
            s(:begin,
              s(:lvasgn, :attributes,
                s(:hash)),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :klass), :get_attributes), :each),
                s(:args,
                  s(:arg, :a_name),
                  s(:arg, :a_uri),
                  s(:arg, :required),
                  s(:arg, :element_name)),
                s(:begin,
                  s(:if,
                    s(:or,
                      s(:send,
                        s(:lvar, :a_uri), :is_a?,
                        s(:const, nil, :String)),
                      s(:send,
                        s(:send,
                          s(:lvar, :a_uri), :respond_to?,
                          s(:sym, :include?)), :!)),
                    s(:lvasgn, :a_uri,
                      s(:array,
                        s(:lvar, :a_uri))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :a_uri), :==,
                      s(:array,
                        s(:str, ""))), nil,
                    s(:for,
                      s(:mlhs,
                        s(:lvasgn, :prefix),
                        s(:lvasgn, :uri)),
                      s(:lvar, :ns),
                      s(:if,
                        s(:send,
                          s(:lvar, :a_uri), :include?,
                          s(:lvar, :uri)),
                        s(:begin,
                          s(:lvasgn, :val,
                            s(:send,
                              s(:lvar, :attrs), :[],
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :prefix)),
                                s(:str, ":"),
                                s(:begin,
                                  s(:lvar, :a_name))))),
                          s(:if,
                            s(:lvar, :val),
                            s(:break), nil)), nil))),
                  s(:if,
                    s(:and,
                      s(:send,
                        s(:lvar, :val), :nil?),
                      s(:send,
                        s(:lvar, :a_uri), :include?,
                        s(:str, ""))),
                    s(:lvasgn, :val,
                      s(:send,
                        s(:lvar, :attrs), :[],
                        s(:lvar, :a_name))), nil),
                  s(:if,
                    s(:and,
                      s(:and,
                        s(:ivar, :@do_validate),
                        s(:lvar, :required)),
                      s(:send,
                        s(:lvar, :val), :nil?)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :a_uri), :include?,
                          s(:str, "")), nil,
                        s(:for,
                          s(:mlhs,
                            s(:lvasgn, :prefix),
                            s(:lvasgn, :uri)),
                          s(:lvar, :ns),
                          s(:if,
                            s(:send,
                              s(:lvar, :a_uri), :include?,
                              s(:lvar, :uri)),
                            s(:lvasgn, :a_name,
                              s(:dstr,
                                s(:begin,
                                  s(:lvar, :prefix)),
                                s(:str, ":"),
                                s(:begin,
                                  s(:lvar, :a_name)))), nil))),
                      s(:send, nil, :raise,
                        s(:send,
                          s(:const, nil, :MissingAttributeError), :new,
                          s(:lvar, :tag_name),
                          s(:lvar, :a_name)))), nil),
                  s(:send,
                    s(:lvar, :attributes), :[]=,
                    s(:lvar, :a_name),
                    s(:lvar, :val)))),
              s(:lvar, :attributes))),
          s(:def, :setup_next_element,
            s(:args,
              s(:arg, :tag_name),
              s(:arg, :klass),
              s(:arg, :attributes)),
            s(:begin,
              s(:lvasgn, :previous,
                s(:ivar, :@last_element)),
              s(:lvasgn, :next_element,
                s(:send,
                  s(:lvar, :klass), :new,
                  s(:ivar, :@do_validate),
                  s(:lvar, :attributes))),
              s(:send,
                s(:lvar, :previous), :set_next_element,
                s(:lvar, :tag_name),
                s(:lvar, :next_element)),
              s(:ivasgn, :@last_element,
                s(:lvar, :next_element)),
              s(:if,
                s(:send,
                  s(:lvar, :klass), :need_parent?),
                s(:send,
                  s(:ivar, :@last_element), :parent=,
                  s(:lvar, :previous)), nil),
              s(:ivasgn, :@xml_child_mode,
                s(:send,
                  s(:ivar, :@last_element), :have_xml_content?)),
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args,
                  s(:arg, :text),
                  s(:arg, :tags)),
                s(:begin,
                  s(:if,
                    s(:const, nil, :DEBUG),
                    s(:send, nil, :p,
                      s(:send,
                        s(:ivar, :@last_element), :class)), nil),
                  s(:if,
                    s(:ivar, :@xml_child_mode),
                    s(:begin,
                      s(:send,
                        s(:ivar, :@last_element), :content=,
                        s(:send,
                          s(:ivar, :@xml_element), :to_s)),
                      s(:lvasgn, :xml_setter,
                        s(:send,
                          s(:send,
                            s(:ivar, :@last_element), :class), :xml_setter)),
                      s(:send,
                        s(:ivar, :@last_element), :__send__,
                        s(:lvar, :xml_setter),
                        s(:ivar, :@xml_element)),
                      s(:ivasgn, :@xml_element,
                        s(:nil)),
                      s(:ivasgn, :@xml_child_mode,
                        s(:false))),
                    s(:if,
                      s(:send,
                        s(:lvar, :klass), :have_content?),
                      s(:begin,
                        s(:if,
                          s(:send,
                            s(:ivar, :@last_element), :need_base64_encode?),
                          s(:lvasgn, :text,
                            s(:send,
                              s(:send,
                                s(:send,
                                  s(:lvar, :text), :lstrip), :unpack,
                                s(:str, "m")), :first)), nil),
                        s(:send,
                          s(:ivar, :@last_element), :content=,
                          s(:lvar, :text))), nil)),
                  s(:if,
                    s(:ivar, :@do_validate),
                    s(:send,
                      s(:ivar, :@last_element), :validate_for_stream,
                      s(:lvar, :tags),
                      s(:ivar, :@ignore_unknown_element)), nil),
                  s(:ivasgn, :@last_element,
                    s(:lvar, :previous)))))),
          s(:def, :setup_next_element_in_unknown_element,
            s(:args),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :current_element),
                  s(:ivasgn, :@last_element)),
                s(:array,
                  s(:ivar, :@last_element),
                  s(:nil))),
              s(:block,
                s(:send,
                  s(:const, nil, :Proc), :new),
                s(:args),
                s(:ivasgn, :@last_element,
                  s(:lvar, :current_element))))))),
      s(:if,
        s(:send, nil, :const_defined?,
          s(:sym, :AVAILABLE_PARSER_LIBRARIES)), nil,
        s(:casgn, nil, :AVAILABLE_PARSER_LIBRARIES,
          s(:array,
            s(:array,
              s(:str, "rss/xmlparser"),
              s(:sym, :XMLParserParser)),
            s(:array,
              s(:str, "rss/xmlscanner"),
              s(:sym, :XMLScanParser)),
            s(:array,
              s(:str, "rss/rexmlparser"),
              s(:sym, :REXMLParser))))),
      s(:casgn, nil, :AVAILABLE_PARSERS,
        s(:array)),
      s(:block,
        s(:send,
          s(:const, nil, :AVAILABLE_PARSER_LIBRARIES), :each),
        s(:args,
          s(:arg, :lib),
          s(:arg, :parser)),
        s(:kwbegin,
          s(:rescue,
            s(:begin,
              s(:send, nil, :require,
                s(:lvar, :lib)),
              s(:send,
                s(:const, nil, :AVAILABLE_PARSERS), :push,
                s(:send, nil, :const_get,
                  s(:lvar, :parser)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :LoadError)), nil, nil), nil))),
      s(:if,
        s(:send,
          s(:const, nil, :AVAILABLE_PARSERS), :empty?),
        s(:send, nil, :raise,
          s(:const, nil, :XMLParserNotFound)), nil))))
