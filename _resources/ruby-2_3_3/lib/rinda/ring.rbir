s(:begin,
  s(:send, nil, :require,
    s(:str, "drb/drb")),
  s(:send, nil, :require,
    s(:str, "rinda/rinda")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "ipaddr")),
  s(:module,
    s(:const, nil, :Rinda),
    s(:begin,
      s(:casgn, nil, :Ring_PORT,
        s(:int, 7647)),
      s(:class,
        s(:const, nil, :RingServer), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :DRbUndumped)),
          s(:class,
            s(:const, nil, :Renewer), nil,
            s(:begin,
              s(:send, nil, :include,
                s(:const, nil, :DRbUndumped)),
              s(:send, nil, :attr_writer,
                s(:sym, :renew)),
              s(:def, :initialize,
                s(:args),
                s(:ivasgn, :@renew,
                  s(:true))),
              s(:def, :renew,
                s(:args),
                s(:if,
                  s(:ivar, :@renew),
                  s(:int, 1),
                  s(:true))))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :ts),
              s(:optarg, :addresses,
                s(:array,
                  s(:const,
                    s(:const, nil, :Socket), :INADDR_ANY))),
              s(:optarg, :port,
                s(:const, nil, :Ring_PORT))),
            s(:begin,
              s(:ivasgn, :@port,
                s(:lvar, :port)),
              s(:if,
                s(:send,
                  s(:const, nil, :Integer), :===,
                  s(:lvar, :addresses)),
                s(:masgn,
                  s(:mlhs,
                    s(:lvasgn, :addresses),
                    s(:ivasgn, :@port)),
                  s(:array,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Socket), :INADDR_ANY)),
                    s(:lvar, :addresses))), nil),
              s(:ivasgn, :@renewer,
                s(:send,
                  s(:const, nil, :Renewer), :new)),
              s(:ivasgn, :@ts,
                s(:lvar, :ts)),
              s(:ivasgn, :@sockets,
                s(:array)),
              s(:block,
                s(:send,
                  s(:lvar, :addresses), :each),
                s(:args,
                  s(:arg, :address)),
                s(:if,
                  s(:send,
                    s(:const, nil, :Array), :===,
                    s(:lvar, :address)),
                  s(:send, nil, :make_socket,
                    s(:splat,
                      s(:lvar, :address))),
                  s(:send, nil, :make_socket,
                    s(:lvar, :address)))),
              s(:ivasgn, :@w_services,
                s(:send, nil, :write_services)),
              s(:ivasgn, :@r_service,
                s(:send, nil, :reply_service)))),
          s(:def, :make_socket,
            s(:args,
              s(:arg, :address),
              s(:optarg, :interface_address,
                s(:nil)),
              s(:optarg, :multicast_interface,
                s(:int, 0))),
            s(:begin,
              s(:lvasgn, :addrinfo,
                s(:send,
                  s(:const, nil, :Addrinfo), :udp,
                  s(:lvar, :address),
                  s(:ivar, :@port))),
              s(:lvasgn, :socket,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:send,
                    s(:lvar, :addrinfo), :pfamily),
                  s(:send,
                    s(:lvar, :addrinfo), :socktype),
                  s(:send,
                    s(:lvar, :addrinfo), :protocol))),
              s(:send,
                s(:ivar, :@sockets), :<<,
                s(:lvar, :socket)),
              s(:if,
                s(:or,
                  s(:send,
                    s(:lvar, :addrinfo), :ipv4_multicast?),
                  s(:send,
                    s(:lvar, :addrinfo), :ipv6_multicast?)),
                s(:begin,
                  s(:if,
                    s(:send,
                      s(:const, nil, :Socket), :const_defined?,
                      s(:sym, :SO_REUSEPORT)),
                    s(:send,
                      s(:lvar, :socket), :setsockopt,
                      s(:sym, :SOCKET),
                      s(:sym, :SO_REUSEPORT),
                      s(:true)),
                    s(:send,
                      s(:lvar, :socket), :setsockopt,
                      s(:sym, :SOCKET),
                      s(:sym, :SO_REUSEADDR),
                      s(:true))),
                  s(:if,
                    s(:send,
                      s(:lvar, :addrinfo), :ipv4_multicast?),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :interface_address), :nil?),
                        s(:lvasgn, :interface_address,
                          s(:str, "0.0.0.0")), nil),
                      s(:send,
                        s(:lvar, :socket), :bind,
                        s(:send,
                          s(:const, nil, :Addrinfo), :udp,
                          s(:lvar, :interface_address),
                          s(:ivar, :@port))),
                      s(:lvasgn, :mreq,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :IPAddr), :new,
                              s(:send,
                                s(:lvar, :addrinfo), :ip_address)), :hton), :+,
                          s(:send,
                            s(:send,
                              s(:const, nil, :IPAddr), :new,
                              s(:lvar, :interface_address)), :hton))),
                      s(:send,
                        s(:lvar, :socket), :setsockopt,
                        s(:sym, :IPPROTO_IP),
                        s(:sym, :IP_ADD_MEMBERSHIP),
                        s(:lvar, :mreq))),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :interface_address), :nil?),
                        s(:lvasgn, :interface_address,
                          s(:str, "::1")), nil),
                      s(:send,
                        s(:lvar, :socket), :bind,
                        s(:send,
                          s(:const, nil, :Addrinfo), :udp,
                          s(:lvar, :interface_address),
                          s(:ivar, :@port))),
                      s(:lvasgn, :mreq,
                        s(:send,
                          s(:send,
                            s(:send,
                              s(:const, nil, :IPAddr), :new,
                              s(:send,
                                s(:lvar, :addrinfo), :ip_address)), :hton), :+,
                          s(:send,
                            s(:array,
                              s(:lvar, :multicast_interface)), :pack,
                            s(:str, "I")))),
                      s(:send,
                        s(:lvar, :socket), :setsockopt,
                        s(:sym, :IPPROTO_IPV6),
                        s(:sym, :IPV6_JOIN_GROUP),
                        s(:lvar, :mreq))))),
                s(:send,
                  s(:lvar, :socket), :bind,
                  s(:lvar, :addrinfo))),
              s(:lvar, :socket))),
          s(:def, :write_services,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@sockets), :map),
              s(:args,
                s(:arg, :s)),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new,
                  s(:lvar, :s)),
                s(:args,
                  s(:arg, :socket)),
                s(:block,
                  s(:send, nil, :loop),
                  s(:args),
                  s(:begin,
                    s(:lvasgn, :msg,
                      s(:send,
                        s(:lvar, :socket), :recv,
                        s(:int, 1024))),
                    s(:send, nil, :do_write,
                      s(:lvar, :msg))))))),
          s(:def, :do_write,
            s(:args,
              s(:arg, :msg)),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:masgn,
                      s(:mlhs,
                        s(:lvasgn, :tuple),
                        s(:lvasgn, :sec)),
                      s(:send,
                        s(:const, nil, :Marshal), :load,
                        s(:lvar, :msg))),
                    s(:send,
                      s(:ivar, :@ts), :write,
                      s(:lvar, :tuple),
                      s(:lvar, :sec))),
                  s(:resbody, nil, nil, nil), nil)))),
          s(:def, :reply_service,
            s(:args),
            s(:block,
              s(:send,
                s(:const, nil, :Thread), :new),
              s(:args),
              s(:block,
                s(:send, nil, :loop),
                s(:args),
                s(:send, nil, :do_reply)))),
          s(:def, :do_reply,
            s(:args),
            s(:rescue,
              s(:begin,
                s(:lvasgn, :tuple,
                  s(:send,
                    s(:ivar, :@ts), :take,
                    s(:array,
                      s(:sym, :lookup_ring),
                      s(:nil)),
                    s(:ivar, :@renewer))),
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:rescue,
                    s(:send,
                      s(:send,
                        s(:lvar, :tuple), :[],
                        s(:int, 1)), :call,
                      s(:ivar, :@ts)),
                    s(:resbody, nil, nil,
                      s(:nil)), nil))),
              s(:resbody, nil, nil, nil), nil)),
          s(:def, :shutdown,
            s(:args),
            s(:begin,
              s(:send,
                s(:ivar, :@renewer), :renew=,
                s(:false)),
              s(:block,
                s(:send,
                  s(:ivar, :@w_services), :each),
                s(:args,
                  s(:arg, :thread)),
                s(:begin,
                  s(:send,
                    s(:lvar, :thread), :kill),
                  s(:send,
                    s(:lvar, :thread), :join))),
              s(:block,
                s(:send,
                  s(:ivar, :@sockets), :each),
                s(:args,
                  s(:arg, :socket)),
                s(:send,
                  s(:lvar, :socket), :close)),
              s(:send,
                s(:ivar, :@r_service), :kill),
              s(:send,
                s(:ivar, :@r_service), :join))))),
      s(:class,
        s(:const, nil, :RingFinger), nil,
        s(:begin,
          s(:cvasgn, :@@broadcast_list,
            s(:array,
              s(:str, "<broadcast>"),
              s(:str, "localhost"))),
          s(:cvasgn, :@@finger,
            s(:nil)),
          s(:defs,
            s(:self), :finger,
            s(:args),
            s(:begin,
              s(:if,
                s(:cvar, :@@finger), nil,
                s(:begin,
                  s(:cvasgn, :@@finger,
                    s(:send,
                      s(:self), :new)),
                  s(:send,
                    s(:cvar, :@@finger), :lookup_ring_any))),
              s(:cvar, :@@finger))),
          s(:defs,
            s(:self), :primary,
            s(:args),
            s(:send,
              s(:send, nil, :finger), :primary)),
          s(:defs,
            s(:self), :to_a,
            s(:args),
            s(:send,
              s(:send, nil, :finger), :to_a)),
          s(:send, nil, :attr_accessor,
            s(:sym, :broadcast_list)),
          s(:send, nil, :attr_accessor,
            s(:sym, :multicast_hops)),
          s(:send, nil, :attr_accessor,
            s(:sym, :multicast_interface)),
          s(:send, nil, :attr_accessor,
            s(:sym, :port)),
          s(:send, nil, :attr_accessor,
            s(:sym, :primary)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :broadcast_list,
                s(:cvar, :@@broadcast_list)),
              s(:optarg, :port,
                s(:const, nil, :Ring_PORT))),
            s(:begin,
              s(:ivasgn, :@broadcast_list,
                s(:or,
                  s(:lvar, :broadcast_list),
                  s(:array,
                    s(:str, "localhost")))),
              s(:ivasgn, :@port,
                s(:lvar, :port)),
              s(:ivasgn, :@primary,
                s(:nil)),
              s(:ivasgn, :@rings,
                s(:array)),
              s(:ivasgn, :@multicast_hops,
                s(:int, 1)),
              s(:ivasgn, :@multicast_interface,
                s(:int, 0)))),
          s(:def, :to_a,
            s(:args),
            s(:ivar, :@rings)),
          s(:def, :each,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@primary), nil,
                s(:send, nil, :lookup_ring_any)),
              s(:if,
                s(:ivar, :@primary), nil,
                s(:return)),
              s(:yield,
                s(:ivar, :@primary)),
              s(:block,
                s(:send,
                  s(:ivar, :@rings), :each),
                s(:args,
                  s(:arg, :x)),
                s(:yield,
                  s(:lvar, :x))))),
          s(:def, :lookup_ring,
            s(:args,
              s(:optarg, :timeout,
                s(:int, 5)),
              s(:blockarg, :block)),
            s(:begin,
              s(:if,
                s(:send, nil, :block_given?), nil,
                s(:return,
                  s(:send, nil, :lookup_ring_any,
                    s(:lvar, :timeout)))),
              s(:lvasgn, :msg,
                s(:send,
                  s(:const, nil, :Marshal), :dump,
                  s(:array,
                    s(:array,
                      s(:sym, :lookup_ring),
                      s(:send,
                        s(:const, nil, :DRbObject), :new,
                        s(:lvar, :block))),
                    s(:lvar, :timeout)))),
              s(:block,
                s(:send,
                  s(:ivar, :@broadcast_list), :each),
                s(:args,
                  s(:arg, :it)),
                s(:send, nil, :send_message,
                  s(:lvar, :it),
                  s(:lvar, :msg))),
              s(:send, nil, :sleep,
                s(:lvar, :timeout)))),
          s(:def, :lookup_ring_any,
            s(:args,
              s(:optarg, :timeout,
                s(:int, 5))),
            s(:begin,
              s(:lvasgn, :queue,
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:self), :lookup_ring,
                      s(:lvar, :timeout)),
                    s(:args,
                      s(:arg, :ts)),
                    s(:send,
                      s(:lvar, :queue), :push,
                      s(:lvar, :ts))),
                  s(:send,
                    s(:lvar, :queue), :push,
                    s(:nil)))),
              s(:ivasgn, :@primary,
                s(:send,
                  s(:lvar, :queue), :pop)),
              s(:if,
                s(:send,
                  s(:ivar, :@primary), :nil?),
                s(:send, nil, :raise,
                  s(:str, "RingNotFound")), nil),
              s(:block,
                s(:send,
                  s(:const, nil, :Thread), :new),
                s(:args),
                s(:while,
                  s(:lvasgn, :it,
                    s(:send,
                      s(:lvar, :queue), :pop)),
                  s(:send,
                    s(:ivar, :@rings), :push,
                    s(:lvar, :it)))),
              s(:ivar, :@primary))),
          s(:def, :make_socket,
            s(:args,
              s(:arg, :address)),
            s(:begin,
              s(:lvasgn, :addrinfo,
                s(:send,
                  s(:const, nil, :Addrinfo), :udp,
                  s(:lvar, :address),
                  s(:ivar, :@port))),
              s(:lvasgn, :soc,
                s(:send,
                  s(:const, nil, :Socket), :new,
                  s(:send,
                    s(:lvar, :addrinfo), :pfamily),
                  s(:send,
                    s(:lvar, :addrinfo), :socktype),
                  s(:send,
                    s(:lvar, :addrinfo), :protocol))),
              s(:kwbegin,
                s(:rescue,
                  s(:begin,
                    s(:if,
                      s(:send,
                        s(:lvar, :addrinfo), :ipv4_multicast?),
                      s(:begin,
                        s(:send,
                          s(:lvar, :soc), :setsockopt,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Socket), :Option), :ipv4_multicast_loop,
                            s(:int, 1))),
                        s(:send,
                          s(:lvar, :soc), :setsockopt,
                          s(:send,
                            s(:const,
                              s(:const, nil, :Socket), :Option), :ipv4_multicast_ttl,
                            s(:ivar, :@multicast_hops)))),
                      s(:if,
                        s(:send,
                          s(:lvar, :addrinfo), :ipv6_multicast?),
                        s(:begin,
                          s(:send,
                            s(:lvar, :soc), :setsockopt,
                            s(:sym, :IPPROTO_IPV6),
                            s(:sym, :IPV6_MULTICAST_LOOP),
                            s(:true)),
                          s(:send,
                            s(:lvar, :soc), :setsockopt,
                            s(:sym, :IPPROTO_IPV6),
                            s(:sym, :IPV6_MULTICAST_HOPS),
                            s(:send,
                              s(:array,
                                s(:ivar, :@multicast_hops)), :pack,
                              s(:str, "I"))),
                          s(:send,
                            s(:lvar, :soc), :setsockopt,
                            s(:sym, :IPPROTO_IPV6),
                            s(:sym, :IPV6_MULTICAST_IF),
                            s(:send,
                              s(:array,
                                s(:ivar, :@multicast_interface)), :pack,
                              s(:str, "I")))),
                        s(:send,
                          s(:lvar, :soc), :setsockopt,
                          s(:sym, :SOL_SOCKET),
                          s(:sym, :SO_BROADCAST),
                          s(:true)))),
                    s(:send,
                      s(:lvar, :soc), :connect,
                      s(:lvar, :addrinfo))),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)), nil,
                    s(:begin,
                      s(:send,
                        s(:lvar, :soc), :close),
                      s(:send, nil, :raise))), nil)),
              s(:lvar, :soc))),
          s(:def, :send_message,
            s(:args,
              s(:arg, :address),
              s(:arg, :message)),
            s(:ensure,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :soc,
                    s(:send, nil, :make_socket,
                      s(:lvar, :address))),
                  s(:send,
                    s(:lvar, :soc), :send,
                    s(:lvar, :message),
                    s(:int, 0))),
                s(:resbody, nil, nil,
                  s(:nil)), nil),
              s(:if,
                s(:lvar, :soc),
                s(:send,
                  s(:lvar, :soc), :close), nil))))),
      s(:class,
        s(:const, nil, :RingProvider), nil,
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :klass),
              s(:arg, :front),
              s(:arg, :desc),
              s(:optarg, :renewer,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@tuple,
                s(:array,
                  s(:sym, :name),
                  s(:lvar, :klass),
                  s(:lvar, :front),
                  s(:lvar, :desc))),
              s(:ivasgn, :@renewer,
                s(:or,
                  s(:lvar, :renewer),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Rinda), :SimpleRenewer), :new))))),
          s(:def, :provide,
            s(:args),
            s(:begin,
              s(:lvasgn, :ts,
                s(:send,
                  s(:const,
                    s(:const, nil, :Rinda), :RingFinger), :primary)),
              s(:send,
                s(:lvar, :ts), :write,
                s(:ivar, :@tuple),
                s(:ivar, :@renewer)))))))))
