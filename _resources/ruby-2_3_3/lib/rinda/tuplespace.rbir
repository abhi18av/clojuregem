s(:begin,
  s(:send, nil, :require,
    s(:str, "monitor")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:send, nil, :require,
    s(:str, "drb/drb")),
  s(:send, nil, :require,
    s(:str, "rinda/rinda")),
  s(:send, nil, :require,
    s(:str, "forwardable")),
  s(:module,
    s(:const, nil, :Rinda),
    s(:begin,
      s(:class,
        s(:const, nil, :TupleEntry), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :DRbUndumped)),
          s(:send, nil, :attr_accessor,
            s(:sym, :expires)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :ary),
              s(:optarg, :sec,
                s(:nil))),
            s(:begin,
              s(:ivasgn, :@cancel,
                s(:false)),
              s(:ivasgn, :@expires,
                s(:nil)),
              s(:ivasgn, :@tuple,
                s(:send, nil, :make_tuple,
                  s(:lvar, :ary))),
              s(:ivasgn, :@renewer,
                s(:nil)),
              s(:send, nil, :renew,
                s(:lvar, :sec)))),
          s(:def, :cancel,
            s(:args),
            s(:ivasgn, :@cancel,
              s(:true))),
          s(:def, :alive?,
            s(:args),
            s(:and,
              s(:send,
                s(:send, nil, :canceled?), :!),
              s(:send,
                s(:send, nil, :expired?), :!))),
          s(:def, :value,
            s(:args),
            s(:send,
              s(:ivar, :@tuple), :value)),
          s(:def, :canceled?,
            s(:args),
            s(:ivar, :@cancel)),
          s(:def, :expired?,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@expires), nil,
                s(:return,
                  s(:true))),
              s(:if,
                s(:send,
                  s(:ivar, :@expires), :>,
                  s(:send,
                    s(:const, nil, :Time), :now)),
                s(:return,
                  s(:false)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@renewer), :nil?),
                s(:return,
                  s(:true)), nil),
              s(:send, nil, :renew,
                s(:ivar, :@renewer)),
              s(:if,
                s(:ivar, :@expires), nil,
                s(:return,
                  s(:true))),
              s(:return,
                s(:send,
                  s(:ivar, :@expires), :<,
                  s(:send,
                    s(:const, nil, :Time), :now))))),
          s(:def, :renew,
            s(:args,
              s(:arg, :sec_or_renewer)),
            s(:begin,
              s(:masgn,
                s(:mlhs,
                  s(:lvasgn, :sec),
                  s(:ivasgn, :@renewer)),
                s(:send, nil, :get_renewer,
                  s(:lvar, :sec_or_renewer))),
              s(:ivasgn, :@expires,
                s(:send, nil, :make_expires,
                  s(:lvar, :sec))))),
          s(:def, :make_expires,
            s(:args,
              s(:optarg, :sec,
                s(:nil))),
            s(:case,
              s(:lvar, :sec),
              s(:when,
                s(:const, nil, :Numeric),
                s(:send,
                  s(:send,
                    s(:const, nil, :Time), :now), :+,
                  s(:lvar, :sec))),
              s(:when,
                s(:true),
                s(:send,
                  s(:const, nil, :Time), :at,
                  s(:int, 1))),
              s(:when,
                s(:nil),
                s(:send,
                  s(:const, nil, :Time), :at,
                  s(:send,
                    s(:send,
                      s(:int, 2), :**,
                      s(:int, 31)), :-,
                    s(:int, 1)))), nil)),
          s(:def, :[],
            s(:args,
              s(:arg, :key)),
            s(:send,
              s(:ivar, :@tuple), :[],
              s(:lvar, :key))),
          s(:def, :fetch,
            s(:args,
              s(:arg, :key)),
            s(:send,
              s(:ivar, :@tuple), :fetch,
              s(:lvar, :key))),
          s(:def, :size,
            s(:args),
            s(:send,
              s(:ivar, :@tuple), :size)),
          s(:def, :make_tuple,
            s(:args,
              s(:arg, :ary)),
            s(:send,
              s(:const,
                s(:const, nil, :Rinda), :Tuple), :new,
              s(:lvar, :ary))),
          s(:send, nil, :private),
          s(:def, :get_renewer,
            s(:args,
              s(:arg, :it)),
            s(:case,
              s(:lvar, :it),
              s(:when,
                s(:const, nil, :Numeric),
                s(:true),
                s(:nil),
                s(:return,
                  s(:lvar, :it),
                  s(:nil))),
              s(:kwbegin,
                s(:rescue,
                  s(:return,
                    s(:send,
                      s(:lvar, :it), :renew),
                    s(:lvar, :it)),
                  s(:resbody,
                    s(:array,
                      s(:const, nil, :Exception)), nil,
                    s(:return,
                      s(:lvar, :it),
                      s(:nil))), nil)))))),
      s(:class,
        s(:const, nil, :TemplateEntry),
        s(:const, nil, :TupleEntry),
        s(:begin,
          s(:def, :match,
            s(:args,
              s(:arg, :tuple)),
            s(:send,
              s(:ivar, :@tuple), :match,
              s(:lvar, :tuple))),
          s(:alias,
            s(:sym, :===),
            s(:sym, :match)),
          s(:def, :make_tuple,
            s(:args,
              s(:arg, :ary)),
            s(:send,
              s(:const,
                s(:const, nil, :Rinda), :Template), :new,
              s(:lvar, :ary))))),
      s(:class,
        s(:const, nil, :WaitTemplateEntry),
        s(:const, nil, :TemplateEntry),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :found)),
          s(:def, :initialize,
            s(:args,
              s(:arg, :place),
              s(:arg, :ary),
              s(:optarg, :expires,
                s(:nil))),
            s(:begin,
              s(:super,
                s(:lvar, :ary),
                s(:lvar, :expires)),
              s(:ivasgn, :@place,
                s(:lvar, :place)),
              s(:ivasgn, :@cond,
                s(:send,
                  s(:lvar, :place), :new_cond)),
              s(:ivasgn, :@found,
                s(:nil)))),
          s(:def, :cancel,
            s(:args),
            s(:begin,
              s(:zsuper),
              s(:send, nil, :signal))),
          s(:def, :wait,
            s(:args),
            s(:send,
              s(:ivar, :@cond), :wait)),
          s(:def, :read,
            s(:args,
              s(:arg, :tuple)),
            s(:begin,
              s(:ivasgn, :@found,
                s(:lvar, :tuple)),
              s(:send, nil, :signal))),
          s(:def, :signal,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@place), :synchronize),
              s(:args),
              s(:send,
                s(:ivar, :@cond), :signal))))),
      s(:class,
        s(:const, nil, :NotifyTemplateEntry),
        s(:const, nil, :TemplateEntry),
        s(:begin,
          s(:def, :initialize,
            s(:args,
              s(:arg, :place),
              s(:arg, :event),
              s(:arg, :tuple),
              s(:optarg, :expires,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :ary,
                s(:array,
                  s(:lvar, :event),
                  s(:send,
                    s(:const,
                      s(:const, nil, :Rinda), :Template), :new,
                    s(:lvar, :tuple)))),
              s(:super,
                s(:lvar, :ary),
                s(:lvar, :expires)),
              s(:ivasgn, :@queue,
                s(:send,
                  s(:const, nil, :Queue), :new)),
              s(:ivasgn, :@done,
                s(:false)))),
          s(:def, :notify,
            s(:args,
              s(:arg, :ev)),
            s(:send,
              s(:ivar, :@queue), :push,
              s(:lvar, :ev))),
          s(:def, :pop,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@done),
                s(:send, nil, :raise,
                  s(:const, nil, :RequestExpiredError)), nil),
              s(:lvasgn, :it,
                s(:send,
                  s(:ivar, :@queue), :pop)),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :it), :[],
                    s(:int, 0)), :==,
                  s(:str, "close")),
                s(:ivasgn, :@done,
                  s(:true)), nil),
              s(:return,
                s(:lvar, :it)))),
          s(:def, :each,
            s(:args),
            s(:ensure,
              s(:rescue,
                s(:while,
                  s(:send,
                    s(:ivar, :@done), :!),
                  s(:begin,
                    s(:lvasgn, :it,
                      s(:send, nil, :pop)),
                    s(:yield,
                      s(:lvar, :it)))),
                s(:resbody, nil, nil, nil), nil),
              s(:send, nil, :cancel))))),
      s(:class,
        s(:const, nil, :TupleBag), nil,
        s(:begin,
          s(:class,
            s(:const, nil, :TupleBin), nil,
            s(:begin,
              s(:send, nil, :extend,
                s(:const, nil, :Forwardable)),
              s(:send, nil, :def_delegators,
                s(:str, "@bin"),
                s(:sym, :find_all),
                s(:sym, :delete_if),
                s(:sym, :each),
                s(:sym, :empty?)),
              s(:def, :initialize,
                s(:args),
                s(:ivasgn, :@bin,
                  s(:array))),
              s(:def, :add,
                s(:args,
                  s(:arg, :tuple)),
                s(:send,
                  s(:ivar, :@bin), :push,
                  s(:lvar, :tuple))),
              s(:def, :delete,
                s(:args,
                  s(:arg, :tuple)),
                s(:begin,
                  s(:lvasgn, :idx,
                    s(:send,
                      s(:ivar, :@bin), :rindex,
                      s(:lvar, :tuple))),
                  s(:if,
                    s(:lvar, :idx),
                    s(:send,
                      s(:ivar, :@bin), :delete_at,
                      s(:lvar, :idx)), nil))),
              s(:def, :find,
                s(:args),
                s(:begin,
                  s(:block,
                    s(:send,
                      s(:ivar, :@bin), :reverse_each),
                    s(:args,
                      s(:arg, :x)),
                    s(:if,
                      s(:yield,
                        s(:lvar, :x)),
                      s(:return,
                        s(:lvar, :x)), nil)),
                  s(:nil))))),
          s(:def, :initialize,
            s(:args),
            s(:begin,
              s(:ivasgn, :@hash,
                s(:hash)),
              s(:ivasgn, :@enum,
                s(:send, nil, :enum_for,
                  s(:sym, :each_entry))))),
          s(:def, :has_expires?,
            s(:args),
            s(:block,
              s(:send,
                s(:ivar, :@enum), :find),
              s(:args,
                s(:arg, :tuple)),
              s(:send,
                s(:lvar, :tuple), :expires))),
          s(:def, :push,
            s(:args,
              s(:arg, :tuple)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send, nil, :bin_key,
                  s(:lvar, :tuple))),
              s(:or_asgn,
                s(:send,
                  s(:ivar, :@hash), :[],
                  s(:lvar, :key)),
                s(:send,
                  s(:const, nil, :TupleBin), :new)),
              s(:send,
                s(:send,
                  s(:ivar, :@hash), :[],
                  s(:lvar, :key)), :add,
                s(:lvar, :tuple)))),
          s(:def, :delete,
            s(:args,
              s(:arg, :tuple)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send, nil, :bin_key,
                  s(:lvar, :tuple))),
              s(:lvasgn, :bin,
                s(:send,
                  s(:ivar, :@hash), :[],
                  s(:lvar, :key))),
              s(:if,
                s(:lvar, :bin), nil,
                s(:return,
                  s(:nil))),
              s(:send,
                s(:lvar, :bin), :delete,
                s(:lvar, :tuple)),
              s(:if,
                s(:send,
                  s(:lvar, :bin), :empty?),
                s(:send,
                  s(:ivar, :@hash), :delete,
                  s(:lvar, :key)), nil),
              s(:lvar, :tuple))),
          s(:def, :find_all,
            s(:args,
              s(:arg, :template)),
            s(:block,
              s(:send,
                s(:send, nil, :bin_for_find,
                  s(:lvar, :template)), :find_all),
              s(:args,
                s(:arg, :tuple)),
              s(:and,
                s(:send,
                  s(:lvar, :tuple), :alive?),
                s(:send,
                  s(:lvar, :template), :match,
                  s(:lvar, :tuple))))),
          s(:def, :find,
            s(:args,
              s(:arg, :template)),
            s(:block,
              s(:send,
                s(:send, nil, :bin_for_find,
                  s(:lvar, :template)), :find),
              s(:args,
                s(:arg, :tuple)),
              s(:and,
                s(:send,
                  s(:lvar, :tuple), :alive?),
                s(:send,
                  s(:lvar, :template), :match,
                  s(:lvar, :tuple))))),
          s(:def, :find_all_template,
            s(:args,
              s(:arg, :tuple)),
            s(:block,
              s(:send,
                s(:ivar, :@enum), :find_all),
              s(:args,
                s(:arg, :template)),
              s(:and,
                s(:send,
                  s(:lvar, :template), :alive?),
                s(:send,
                  s(:lvar, :template), :match,
                  s(:lvar, :tuple))))),
          s(:def, :delete_unless_alive,
            s(:args),
            s(:begin,
              s(:lvasgn, :deleted,
                s(:array)),
              s(:block,
                s(:send,
                  s(:ivar, :@hash), :each),
                s(:args,
                  s(:arg, :key),
                  s(:arg, :bin)),
                s(:block,
                  s(:send,
                    s(:lvar, :bin), :delete_if),
                  s(:args,
                    s(:arg, :tuple)),
                  s(:if,
                    s(:send,
                      s(:lvar, :tuple), :alive?),
                    s(:false),
                    s(:begin,
                      s(:send,
                        s(:lvar, :deleted), :push,
                        s(:lvar, :tuple)),
                      s(:true))))),
              s(:lvar, :deleted))),
          s(:send, nil, :private),
          s(:def, :each_entry,
            s(:args,
              s(:blockarg, :blk)),
            s(:block,
              s(:send,
                s(:ivar, :@hash), :each),
              s(:args,
                s(:arg, :k),
                s(:arg, :v)),
              s(:send,
                s(:lvar, :v), :each,
                s(:block_pass,
                  s(:lvar, :blk))))),
          s(:def, :bin_key,
            s(:args,
              s(:arg, :tuple)),
            s(:begin,
              s(:lvasgn, :head,
                s(:send,
                  s(:lvar, :tuple), :[],
                  s(:int, 0))),
              s(:if,
                s(:send,
                  s(:send,
                    s(:lvar, :head), :class), :==,
                  s(:const, nil, :Symbol)),
                s(:return,
                  s(:lvar, :head)),
                s(:false)))),
          s(:def, :bin_for_find,
            s(:args,
              s(:arg, :template)),
            s(:begin,
              s(:lvasgn, :key,
                s(:send, nil, :bin_key,
                  s(:lvar, :template))),
              s(:if,
                s(:lvar, :key),
                s(:send,
                  s(:ivar, :@hash), :fetch,
                  s(:lvar, :key),
                  s(:array)),
                s(:ivar, :@enum)))))),
      s(:class,
        s(:const, nil, :TupleSpace), nil,
        s(:begin,
          s(:send, nil, :include,
            s(:const, nil, :DRbUndumped)),
          s(:send, nil, :include,
            s(:const, nil, :MonitorMixin)),
          s(:def, :initialize,
            s(:args,
              s(:optarg, :period,
                s(:int, 60))),
            s(:begin,
              s(:super),
              s(:ivasgn, :@bag,
                s(:send,
                  s(:const, nil, :TupleBag), :new)),
              s(:ivasgn, :@read_waiter,
                s(:send,
                  s(:const, nil, :TupleBag), :new)),
              s(:ivasgn, :@take_waiter,
                s(:send,
                  s(:const, nil, :TupleBag), :new)),
              s(:ivasgn, :@notify_waiter,
                s(:send,
                  s(:const, nil, :TupleBag), :new)),
              s(:ivasgn, :@period,
                s(:lvar, :period)),
              s(:ivasgn, :@keeper,
                s(:nil)))),
          s(:def, :write,
            s(:args,
              s(:arg, :tuple),
              s(:optarg, :sec,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :entry,
                s(:send, nil, :create_entry,
                  s(:lvar, :tuple),
                  s(:lvar, :sec))),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:if,
                  s(:send,
                    s(:lvar, :entry), :expired?),
                  s(:begin,
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:ivar, :@read_waiter), :find_all_template,
                          s(:lvar, :entry)), :each),
                      s(:args,
                        s(:arg, :template)),
                      s(:send,
                        s(:lvar, :template), :read,
                        s(:lvar, :tuple))),
                    s(:send, nil, :notify_event,
                      s(:str, "write"),
                      s(:send,
                        s(:lvar, :entry), :value)),
                    s(:send, nil, :notify_event,
                      s(:str, "delete"),
                      s(:send,
                        s(:lvar, :entry), :value))),
                  s(:begin,
                    s(:send,
                      s(:ivar, :@bag), :push,
                      s(:lvar, :entry)),
                    s(:if,
                      s(:send,
                        s(:lvar, :entry), :expires),
                      s(:send, nil, :start_keeper), nil),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:ivar, :@read_waiter), :find_all_template,
                          s(:lvar, :entry)), :each),
                      s(:args,
                        s(:arg, :template)),
                      s(:send,
                        s(:lvar, :template), :read,
                        s(:lvar, :tuple))),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:ivar, :@take_waiter), :find_all_template,
                          s(:lvar, :entry)), :each),
                      s(:args,
                        s(:arg, :template)),
                      s(:send,
                        s(:lvar, :template), :signal)),
                    s(:send, nil, :notify_event,
                      s(:str, "write"),
                      s(:send,
                        s(:lvar, :entry), :value))))),
              s(:lvar, :entry))),
          s(:def, :take,
            s(:args,
              s(:arg, :tuple),
              s(:optarg, :sec,
                s(:nil)),
              s(:blockarg, :block)),
            s(:send, nil, :move,
              s(:nil),
              s(:lvar, :tuple),
              s(:lvar, :sec),
              s(:block_pass,
                s(:lvar, :block)))),
          s(:def, :move,
            s(:args,
              s(:arg, :port),
              s(:arg, :tuple),
              s(:optarg, :sec,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :template,
                s(:send,
                  s(:const, nil, :WaitTemplateEntry), :new,
                  s(:self),
                  s(:lvar, :tuple),
                  s(:lvar, :sec))),
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:lvar, :template)), nil),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:lvasgn, :entry,
                    s(:send,
                      s(:ivar, :@bag), :find,
                      s(:lvar, :template))),
                  s(:if,
                    s(:lvar, :entry),
                    s(:begin,
                      s(:if,
                        s(:lvar, :port),
                        s(:send,
                          s(:lvar, :port), :push,
                          s(:send,
                            s(:lvar, :entry), :value)), nil),
                      s(:send,
                        s(:ivar, :@bag), :delete,
                        s(:lvar, :entry)),
                      s(:send, nil, :notify_event,
                        s(:str, "take"),
                        s(:send,
                          s(:lvar, :entry), :value)),
                      s(:return,
                        s(:if,
                          s(:lvar, :port),
                          s(:nil),
                          s(:send,
                            s(:lvar, :entry), :value)))), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :template), :expired?),
                    s(:send, nil, :raise,
                      s(:const, nil, :RequestExpiredError)), nil),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:ivar, :@take_waiter), :push,
                          s(:lvar, :template)),
                        s(:if,
                          s(:send,
                            s(:lvar, :template), :expires),
                          s(:send, nil, :start_keeper), nil),
                        s(:while,
                          s(:true),
                          s(:begin,
                            s(:if,
                              s(:send,
                                s(:lvar, :template), :canceled?),
                              s(:send, nil, :raise,
                                s(:const, nil, :RequestCanceledError)), nil),
                            s(:if,
                              s(:send,
                                s(:lvar, :template), :expired?),
                              s(:send, nil, :raise,
                                s(:const, nil, :RequestExpiredError)), nil),
                            s(:lvasgn, :entry,
                              s(:send,
                                s(:ivar, :@bag), :find,
                                s(:lvar, :template))),
                            s(:if,
                              s(:lvar, :entry),
                              s(:begin,
                                s(:if,
                                  s(:lvar, :port),
                                  s(:send,
                                    s(:lvar, :port), :push,
                                    s(:send,
                                      s(:lvar, :entry), :value)), nil),
                                s(:send,
                                  s(:ivar, :@bag), :delete,
                                  s(:lvar, :entry)),
                                s(:send, nil, :notify_event,
                                  s(:str, "take"),
                                  s(:send,
                                    s(:lvar, :entry), :value)),
                                s(:return,
                                  s(:if,
                                    s(:lvar, :port),
                                    s(:nil),
                                    s(:send,
                                      s(:lvar, :entry), :value)))), nil),
                            s(:send,
                              s(:lvar, :template), :wait)))),
                      s(:send,
                        s(:ivar, :@take_waiter), :delete,
                        s(:lvar, :template)))))))),
          s(:def, :read,
            s(:args,
              s(:arg, :tuple),
              s(:optarg, :sec,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :template,
                s(:send,
                  s(:const, nil, :WaitTemplateEntry), :new,
                  s(:self),
                  s(:lvar, :tuple),
                  s(:lvar, :sec))),
              s(:if,
                s(:send, nil, :block_given?),
                s(:yield,
                  s(:lvar, :template)), nil),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:lvasgn, :entry,
                    s(:send,
                      s(:ivar, :@bag), :find,
                      s(:lvar, :template))),
                  s(:if,
                    s(:lvar, :entry),
                    s(:return,
                      s(:send,
                        s(:lvar, :entry), :value)), nil),
                  s(:if,
                    s(:send,
                      s(:lvar, :template), :expired?),
                    s(:send, nil, :raise,
                      s(:const, nil, :RequestExpiredError)), nil),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:send,
                          s(:ivar, :@read_waiter), :push,
                          s(:lvar, :template)),
                        s(:if,
                          s(:send,
                            s(:lvar, :template), :expires),
                          s(:send, nil, :start_keeper), nil),
                        s(:send,
                          s(:lvar, :template), :wait),
                        s(:if,
                          s(:send,
                            s(:lvar, :template), :canceled?),
                          s(:send, nil, :raise,
                            s(:const, nil, :RequestCanceledError)), nil),
                        s(:if,
                          s(:send,
                            s(:lvar, :template), :expired?),
                          s(:send, nil, :raise,
                            s(:const, nil, :RequestExpiredError)), nil),
                        s(:return,
                          s(:send,
                            s(:lvar, :template), :found))),
                      s(:send,
                        s(:ivar, :@read_waiter), :delete,
                        s(:lvar, :template)))))))),
          s(:def, :read_all,
            s(:args,
              s(:arg, :tuple)),
            s(:begin,
              s(:lvasgn, :template,
                s(:send,
                  s(:const, nil, :WaitTemplateEntry), :new,
                  s(:self),
                  s(:lvar, :tuple),
                  s(:nil))),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:begin,
                  s(:lvasgn, :entry,
                    s(:send,
                      s(:ivar, :@bag), :find_all,
                      s(:lvar, :template))),
                  s(:block,
                    s(:send,
                      s(:lvar, :entry), :collect),
                    s(:args,
                      s(:arg, :e)),
                    s(:send,
                      s(:lvar, :e), :value)))))),
          s(:def, :notify,
            s(:args,
              s(:arg, :event),
              s(:arg, :tuple),
              s(:optarg, :sec,
                s(:nil))),
            s(:begin,
              s(:lvasgn, :template,
                s(:send,
                  s(:const, nil, :NotifyTemplateEntry), :new,
                  s(:self),
                  s(:lvar, :event),
                  s(:lvar, :tuple),
                  s(:lvar, :sec))),
              s(:block,
                s(:send, nil, :synchronize),
                s(:args),
                s(:send,
                  s(:ivar, :@notify_waiter), :push,
                  s(:lvar, :template))),
              s(:lvar, :template))),
          s(:send, nil, :private),
          s(:def, :create_entry,
            s(:args,
              s(:arg, :tuple),
              s(:arg, :sec)),
            s(:send,
              s(:const, nil, :TupleEntry), :new,
              s(:lvar, :tuple),
              s(:lvar, :sec))),
          s(:def, :keep_clean,
            s(:args),
            s(:block,
              s(:send, nil, :synchronize),
              s(:args),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@read_waiter), :delete_unless_alive), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :signal)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@take_waiter), :delete_unless_alive), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :signal)),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@notify_waiter), :delete_unless_alive), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:send,
                    s(:lvar, :e), :notify,
                    s(:array,
                      s(:str, "close")))),
                s(:block,
                  s(:send,
                    s(:send,
                      s(:ivar, :@bag), :delete_unless_alive), :each),
                  s(:args,
                    s(:arg, :e)),
                  s(:send, nil, :notify_event,
                    s(:str, "delete"),
                    s(:send,
                      s(:lvar, :e), :value)))))),
          s(:def, :notify_event,
            s(:args,
              s(:arg, :event),
              s(:arg, :tuple)),
            s(:begin,
              s(:lvasgn, :ev,
                s(:array,
                  s(:lvar, :event),
                  s(:lvar, :tuple))),
              s(:block,
                s(:send,
                  s(:send,
                    s(:ivar, :@notify_waiter), :find_all_template,
                    s(:lvar, :ev)), :each),
                s(:args,
                  s(:arg, :template)),
                s(:send,
                  s(:lvar, :template), :notify,
                  s(:lvar, :ev))))),
          s(:def, :start_keeper,
            s(:args),
            s(:begin,
              s(:if,
                s(:and,
                  s(:ivar, :@keeper),
                  s(:send,
                    s(:ivar, :@keeper), :alive?)),
                s(:return), nil),
              s(:ivasgn, :@keeper,
                s(:block,
                  s(:send,
                    s(:const, nil, :Thread), :new),
                  s(:args),
                  s(:while,
                    s(:true),
                    s(:begin,
                      s(:send, nil, :sleep,
                        s(:ivar, :@period)),
                      s(:block,
                        s(:send, nil, :synchronize),
                        s(:args),
                        s(:begin,
                          s(:if,
                            s(:send, nil, :need_keeper?), nil,
                            s(:break)),
                          s(:send, nil, :keep_clean))))))))),
          s(:def, :need_keeper?,
            s(:args),
            s(:begin,
              s(:if,
                s(:send,
                  s(:ivar, :@bag), :has_expires?),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@read_waiter), :has_expires?),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@take_waiter), :has_expires?),
                s(:return,
                  s(:true)), nil),
              s(:if,
                s(:send,
                  s(:ivar, :@notify_waiter), :has_expires?),
                s(:return,
                  s(:true)), nil))))))))
