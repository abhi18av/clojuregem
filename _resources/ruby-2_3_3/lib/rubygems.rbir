s(:begin,
  s(:send, nil, :require,
    s(:str, "rbconfig")),
  s(:send, nil, :require,
    s(:str, "thread")),
  s(:module,
    s(:const, nil, :Gem),
    s(:casgn, nil, :VERSION,
      s(:str, "2.5.2"))),
  s(:send, nil, :require,
    s(:str, "rubygems/compatibility")),
  s(:send, nil, :require,
    s(:str, "rubygems/defaults")),
  s(:send, nil, :require,
    s(:str, "rubygems/deprecate")),
  s(:send, nil, :require,
    s(:str, "rubygems/errors")),
  s(:module,
    s(:const, nil, :Gem),
    s(:begin,
      s(:casgn, nil, :RUBYGEMS_DIR,
        s(:send,
          s(:const, nil, :File), :dirname,
          s(:send,
            s(:const, nil, :File), :expand_path,
            s(:str, "(string)")))),
      s(:casgn, nil, :WIN_PATTERNS,
        s(:array,
          s(:regexp,
            s(:str, "bccwin"),
            s(:regopt, :i)),
          s(:regexp,
            s(:str, "cygwin"),
            s(:regopt, :i)),
          s(:regexp,
            s(:str, "djgpp"),
            s(:regopt, :i)),
          s(:regexp,
            s(:str, "mingw"),
            s(:regopt, :i)),
          s(:regexp,
            s(:str, "mswin"),
            s(:regopt, :i)),
          s(:regexp,
            s(:str, "wince"),
            s(:regopt, :i)))),
      s(:casgn, nil, :GEM_DEP_FILES,
        s(:array,
          s(:str, "gem.deps.rb"),
          s(:str, "Gemfile"),
          s(:str, "Isolate"))),
      s(:casgn, nil, :REPOSITORY_SUBDIRECTORIES,
        s(:array,
          s(:str, "build_info"),
          s(:str, "cache"),
          s(:str, "doc"),
          s(:str, "extensions"),
          s(:str, "gems"),
          s(:str, "specifications"))),
      s(:casgn, nil, :REPOSITORY_DEFAULT_GEM_SUBDIRECTORIES,
        s(:array,
          s(:str, "gems"),
          s(:str, "specifications/default"))),
      s(:cvasgn, :@@win_platform,
        s(:nil)),
      s(:ivasgn, :@configuration,
        s(:nil)),
      s(:ivasgn, :@gemdeps,
        s(:nil)),
      s(:ivasgn, :@loaded_specs,
        s(:hash)),
      s(:casgn, nil, :LOADED_SPECS_MUTEX,
        s(:send,
          s(:const, nil, :Mutex), :new)),
      s(:ivasgn, :@path_to_default_spec_map,
        s(:hash)),
      s(:ivasgn, :@platforms,
        s(:array)),
      s(:ivasgn, :@ruby,
        s(:nil)),
      s(:ivasgn, :@ruby_api_version,
        s(:nil)),
      s(:ivasgn, :@sources,
        s(:nil)),
      s(:or_asgn,
        s(:ivasgn, :@post_build_hooks),
        s(:array)),
      s(:or_asgn,
        s(:ivasgn, :@post_install_hooks),
        s(:array)),
      s(:or_asgn,
        s(:ivasgn, :@post_uninstall_hooks),
        s(:array)),
      s(:or_asgn,
        s(:ivasgn, :@pre_uninstall_hooks),
        s(:array)),
      s(:or_asgn,
        s(:ivasgn, :@pre_install_hooks),
        s(:array)),
      s(:or_asgn,
        s(:ivasgn, :@pre_reset_hooks),
        s(:array)),
      s(:or_asgn,
        s(:ivasgn, :@post_reset_hooks),
        s(:array)),
      s(:defs,
        s(:self), :try_activate,
        s(:args,
          s(:arg, :path)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Specification), :find_by_path,
              s(:lvar, :path))),
          s(:if,
            s(:lvar, :spec), nil,
            s(:return,
              s(:false))),
          s(:if,
            s(:send,
              s(:lvar, :spec), :activated?),
            s(:return,
              s(:true)), nil),
          s(:kwbegin,
            s(:rescue,
              s(:send,
                s(:lvar, :spec), :activate),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Gem), :LoadError)), nil,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :find_by_name,
                    s(:send,
                      s(:lvar, :spec), :name)), :activate)), nil)),
          s(:return,
            s(:true)))),
      s(:defs,
        s(:self), :needs,
        s(:args),
        s(:begin,
          s(:lvasgn, :rs,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new)),
          s(:yield,
            s(:lvar, :rs)),
          s(:send, nil, :finish_resolve,
            s(:lvar, :rs)))),
      s(:defs,
        s(:self), :finish_resolve,
        s(:args,
          s(:optarg, :request_set,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :RequestSet), :new))),
        s(:begin,
          s(:send,
            s(:lvar, :request_set), :import,
            s(:send,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Specification), :unresolved_deps), :values)),
          s(:block,
            s(:send,
              s(:send,
                s(:lvar, :request_set), :resolve_current), :each),
            s(:args,
              s(:arg, :s)),
            s(:send,
              s(:send,
                s(:lvar, :s), :full_spec), :activate)))),
      s(:defs,
        s(:self), :bin_path,
        s(:args,
          s(:arg, :name),
          s(:optarg, :exec_name,
            s(:nil)),
          s(:restarg, :requirements)),
        s(:begin,
          s(:if,
            s(:lvar, :exec_name), nil,
            s(:send, nil, :raise,
              s(:const, nil, :ArgumentError),
              s(:str, "you must supply exec_name"))),
          s(:if,
            s(:send,
              s(:lvar, :requirements), :empty?),
            s(:lvasgn, :requirements,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :Requirement), :default)), nil),
          s(:lvasgn, :dep,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name),
              s(:lvar, :requirements))),
          s(:lvasgn, :loaded,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :loaded_specs), :[],
              s(:lvar, :name))),
          s(:if,
            s(:and,
              s(:lvar, :loaded),
              s(:send,
                s(:lvar, :dep), :matches_spec?,
                s(:lvar, :loaded))),
            s(:return,
              s(:send,
                s(:lvar, :loaded), :bin_file,
                s(:lvar, :exec_name))), nil),
          s(:lvasgn, :specs,
            s(:send,
              s(:lvar, :dep), :matching_specs,
              s(:true))),
          s(:if,
            s(:send,
              s(:lvar, :specs), :empty?),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :Gem), :GemNotFoundException),
              s(:dstr,
                s(:str, "can't find gem "),
                s(:begin,
                  s(:lvar, :dep)))), nil),
          s(:if,
            s(:lvar, :exec_name),
            s(:lvasgn, :specs,
              s(:block,
                s(:send,
                  s(:lvar, :specs), :find_all),
                s(:args,
                  s(:arg, :spec)),
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :executables), :include?,
                  s(:lvar, :exec_name)))), nil),
          s(:if,
            s(:lvasgn, :spec,
              s(:send,
                s(:lvar, :specs), :last)), nil,
            s(:begin,
              s(:lvasgn, :msg,
                s(:dstr,
                  s(:str, "can't find gem "),
                  s(:begin,
                    s(:lvar, :name)),
                  s(:str, " ("),
                  s(:begin,
                    s(:lvar, :requirements)),
                  s(:str, ") with executable "),
                  s(:begin,
                    s(:lvar, :exec_name)))),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :Gem), :GemNotFoundException),
                s(:lvar, :msg)))),
          s(:send,
            s(:lvar, :spec), :bin_file,
            s(:lvar, :exec_name)))),
      s(:defs,
        s(:self), :binary_mode,
        s(:args),
        s(:str, "rb")),
      s(:defs,
        s(:self), :bindir,
        s(:args,
          s(:optarg, :install_dir,
            s(:send,
              s(:const, nil, :Gem), :dir))),
        s(:begin,
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :install_dir), :to_s), :==,
              s(:send,
                s(:send,
                  s(:const, nil, :Gem), :default_dir), :to_s)), nil,
            s(:return,
              s(:send,
                s(:const, nil, :File), :join,
                s(:lvar, :install_dir),
                s(:str, "bin")))),
          s(:send,
            s(:const, nil, :Gem), :default_bindir))),
      s(:defs,
        s(:self), :clear_paths,
        s(:args),
        s(:begin,
          s(:ivasgn, :@paths,
            s(:nil)),
          s(:ivasgn, :@user_home,
            s(:nil)),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :reset),
          s(:if,
            s(:defined?,
              s(:const,
                s(:const, nil, :Gem), :Security)),
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Security), :reset), nil))),
      s(:defs,
        s(:self), :config_file,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@config_file),
          s(:send,
            s(:const, nil, :File), :join,
            s(:send,
              s(:const, nil, :Gem), :user_home),
            s(:str, ".gemrc")))),
      s(:defs,
        s(:self), :configuration,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@configuration),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :ConfigFile), :new,
            s(:array)))),
      s(:defs,
        s(:self), :configuration=,
        s(:args,
          s(:arg, :config)),
        s(:ivasgn, :@configuration,
          s(:lvar, :config))),
      s(:defs,
        s(:self), :datadir,
        s(:args,
          s(:arg, :gem_name)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send,
              s(:ivar, :@loaded_specs), :[],
              s(:lvar, :gem_name))),
          s(:if,
            s(:send,
              s(:lvar, :spec), :nil?),
            s(:return,
              s(:nil)), nil),
          s(:send,
            s(:lvar, :spec), :datadir))),
      s(:defs,
        s(:self), :deflate,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "zlib")),
          s(:send,
            s(:const,
              s(:const, nil, :Zlib), :Deflate), :deflate,
            s(:lvar, :data)))),
      s(:defs,
        s(:self), :paths,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@paths),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :PathSupport), :new))),
      s(:defs,
        s(:self), :paths=,
        s(:args,
          s(:arg, :env)),
        s(:begin,
          s(:send, nil, :clear_paths),
          s(:ivasgn, :@paths,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :PathSupport), :new,
              s(:lvar, :env))),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Specification), :dirs=,
            s(:send,
              s(:ivar, :@paths), :path)))),
      s(:defs,
        s(:self), :dir,
        s(:args),
        s(:send,
          s(:send, nil, :paths), :home)),
      s(:defs,
        s(:self), :path,
        s(:args),
        s(:send,
          s(:send, nil, :paths), :path)),
      s(:defs,
        s(:self), :spec_cache_dir,
        s(:args),
        s(:send,
          s(:send, nil, :paths), :spec_cache_dir)),
      s(:defs,
        s(:self), :ensure_gem_subdirectories,
        s(:args,
          s(:optarg, :dir,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:optarg, :mode,
            s(:nil))),
        s(:send, nil, :ensure_subdirectories,
          s(:lvar, :dir),
          s(:lvar, :mode),
          s(:const, nil, :REPOSITORY_SUBDIRECTORIES))),
      s(:defs,
        s(:self), :ensure_default_gem_subdirectories,
        s(:args,
          s(:optarg, :dir,
            s(:send,
              s(:const, nil, :Gem), :dir)),
          s(:optarg, :mode,
            s(:nil))),
        s(:send, nil, :ensure_subdirectories,
          s(:lvar, :dir),
          s(:lvar, :mode),
          s(:const, nil, :REPOSITORY_DEFAULT_GEM_SUBDIRECTORIES))),
      s(:defs,
        s(:self), :ensure_subdirectories,
        s(:args,
          s(:arg, :dir),
          s(:arg, :mode),
          s(:arg, :subdirs)),
        s(:ensure,
          s(:begin,
            s(:lvasgn, :old_umask,
              s(:send,
                s(:const, nil, :File), :umask)),
            s(:send,
              s(:const, nil, :File), :umask,
              s(:send,
                s(:lvar, :old_umask), :|,
                s(:int, 2))),
            s(:send, nil, :require,
              s(:str, "fileutils")),
            s(:lvasgn, :options,
              s(:hash)),
            s(:if,
              s(:lvar, :mode),
              s(:send,
                s(:lvar, :options), :[]=,
                s(:sym, :mode),
                s(:lvar, :mode)), nil),
            s(:block,
              s(:send,
                s(:lvar, :subdirs), :each),
              s(:args,
                s(:arg, :name)),
              s(:begin,
                s(:lvasgn, :subdir,
                  s(:send,
                    s(:const, nil, :File), :join,
                    s(:lvar, :dir),
                    s(:lvar, :name))),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :exist?,
                    s(:lvar, :subdir)),
                  s(:next), nil),
                s(:rescue,
                  s(:send,
                    s(:const, nil, :FileUtils), :mkdir_p,
                    s(:lvar, :subdir),
                    s(:lvar, :options)),
                  s(:resbody, nil, nil,
                    s(:nil)), nil)))),
          s(:send,
            s(:const, nil, :File), :umask,
            s(:lvar, :old_umask)))),
      s(:defs,
        s(:self), :extension_api_version,
        s(:args),
        s(:if,
          s(:send,
            s(:str, "no"), :==,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "ENABLE_SHARED"))),
          s(:dstr,
            s(:begin,
              s(:send, nil, :ruby_api_version)),
            s(:str, "-static")),
          s(:send, nil, :ruby_api_version))),
      s(:defs,
        s(:self), :find_files,
        s(:args,
          s(:arg, :glob),
          s(:optarg, :check_load_path,
            s(:true))),
        s(:begin,
          s(:lvasgn, :files,
            s(:array)),
          s(:if,
            s(:lvar, :check_load_path),
            s(:lvasgn, :files,
              s(:send, nil, :find_files_from_load_path,
                s(:lvar, :glob))), nil),
          s(:send,
            s(:lvar, :files), :concat,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :stubs), :map),
                s(:args,
                  s(:arg, :spec)),
                s(:send,
                  s(:lvar, :spec), :matches_for_glob,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :glob)),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :suffix_pattern))))), :flatten)),
          s(:if,
            s(:lvar, :check_load_path),
            s(:send,
              s(:lvar, :files), :uniq!), nil),
          s(:return,
            s(:lvar, :files)))),
      s(:defs,
        s(:self), :find_files_from_load_path,
        s(:args,
          s(:arg, :glob)),
        s(:block,
          s(:send,
            s(:send,
              s(:block,
                s(:send,
                  s(:gvar, :$LOAD_PATH), :map),
                s(:args,
                  s(:arg, :load_path)),
                s(:send,
                  s(:const, nil, :Dir), :[],
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :glob),
                        s(:lvar, :load_path))),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :suffix_pattern))))), :flatten), :select),
          s(:args,
            s(:arg, :file)),
          s(:send,
            s(:const, nil, :File), :file?,
            s(:send,
              s(:lvar, :file), :untaint)))),
      s(:defs,
        s(:self), :find_latest_files,
        s(:args,
          s(:arg, :glob),
          s(:optarg, :check_load_path,
            s(:true))),
        s(:begin,
          s(:lvasgn, :files,
            s(:array)),
          s(:if,
            s(:lvar, :check_load_path),
            s(:lvasgn, :files,
              s(:send, nil, :find_files_from_load_path,
                s(:lvar, :glob))), nil),
          s(:send,
            s(:lvar, :files), :concat,
            s(:send,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Specification), :latest_specs,
                    s(:true)), :map),
                s(:args,
                  s(:arg, :spec)),
                s(:send,
                  s(:lvar, :spec), :matches_for_glob,
                  s(:dstr,
                    s(:begin,
                      s(:lvar, :glob)),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :suffix_pattern))))), :flatten)),
          s(:if,
            s(:lvar, :check_load_path),
            s(:send,
              s(:lvar, :files), :uniq!), nil),
          s(:return,
            s(:lvar, :files)))),
      s(:defs,
        s(:self), :find_home,
        s(:args),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :windows,
              s(:const,
                s(:const, nil, :File), :ALT_SEPARATOR)),
            s(:if,
              s(:or,
                s(:send,
                  s(:lvar, :windows), :!),
                s(:send,
                  s(:const, nil, :RUBY_VERSION), :>=,
                  s(:str, "1.9"))),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "~")),
              s(:begin,
                s(:block,
                  s(:send,
                    s(:array,
                      s(:str, "HOME"),
                      s(:str, "USERPROFILE")), :each),
                  s(:args,
                    s(:arg, :key)),
                  s(:if,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:lvar, :key)),
                    s(:return,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:lvar, :key)))), nil)),
                s(:if,
                  s(:and,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "HOMEDRIVE")),
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "HOMEPATH"))),
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:dstr,
                      s(:begin,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "HOMEDRIVE"))),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :ENV), :[],
                          s(:str, "HOMEPATH"))))), nil)))),
          s(:resbody, nil, nil,
            s(:if,
              s(:lvar, :windows),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:or,
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "HOMEDRIVE")),
                    s(:send,
                      s(:const, nil, :ENV), :[],
                      s(:str, "SystemDrive"))),
                  s(:str, "/"))),
              s(:send,
                s(:const, nil, :File), :expand_path,
                s(:str, "/")))), nil)),
      s(:send, nil, :private_class_method,
        s(:sym, :find_home)),
      s(:defs,
        s(:self), :gunzip,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/util")),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Util), :gunzip,
            s(:lvar, :data)))),
      s(:defs,
        s(:self), :gzip,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/util")),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Util), :gzip,
            s(:lvar, :data)))),
      s(:defs,
        s(:self), :inflate,
        s(:args,
          s(:arg, :data)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/util")),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :Util), :inflate,
            s(:lvar, :data)))),
      s(:defs,
        s(:self), :install,
        s(:args,
          s(:arg, :name),
          s(:optarg, :version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Requirement), :default)),
          s(:restarg, :options)),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/dependency_installer")),
          s(:lvasgn, :inst,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :DependencyInstaller), :new,
              s(:splat,
                s(:lvar, :options)))),
          s(:send,
            s(:lvar, :inst), :install,
            s(:lvar, :name),
            s(:lvar, :version)),
          s(:send,
            s(:lvar, :inst), :installed_gems))),
      s(:defs,
        s(:self), :host,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@host),
          s(:const,
            s(:const, nil, :Gem), :DEFAULT_HOST))),
      s(:defs,
        s(:self), :host=,
        s(:args,
          s(:arg, :host)),
        s(:ivasgn, :@host,
          s(:lvar, :host))),
      s(:defs,
        s(:self), :load_path_insert_index,
        s(:args),
        s(:begin,
          s(:block,
            s(:send,
              s(:gvar, :$LOAD_PATH), :each_with_index),
            s(:args,
              s(:arg, :path),
              s(:arg, :i)),
            s(:if,
              s(:send,
                s(:lvar, :path), :instance_variable_defined?,
                s(:sym, :@gem_prelude_index)),
              s(:return,
                s(:lvar, :i)), nil)),
          s(:lvasgn, :index,
            s(:send,
              s(:gvar, :$LOAD_PATH), :index,
              s(:send,
                s(:const,
                  s(:const, nil, :RbConfig), :CONFIG), :[],
                s(:str, "sitelibdir")))),
          s(:lvar, :index))),
      s(:ivasgn, :@yaml_loaded,
        s(:false)),
      s(:defs,
        s(:self), :load_yaml,
        s(:args),
        s(:begin,
          s(:if,
            s(:ivar, :@yaml_loaded),
            s(:return), nil),
          s(:if,
            s(:defined?,
              s(:send, nil, :gem)), nil,
            s(:return)),
          s(:lvasgn, :test_syck,
            s(:send,
              s(:const, nil, :ENV), :[],
              s(:str, "TEST_SYCK"))),
          s(:if,
            s(:match_with_lvasgn,
              s(:regexp,
                s(:str, "^1\\."),
                s(:regopt)),
              s(:const, nil, :RUBY_VERSION)), nil,
            s(:lvasgn, :test_syck,
              s(:false))),
          s(:if,
            s(:lvar, :test_syck), nil,
            s(:begin,
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :gem,
                    s(:str, "psych"),
                    s(:str, ">= 1.2.1")),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:const, nil, :Gem), :LoadError)), nil, nil), nil)),
              s(:kwbegin,
                s(:rescue,
                  s(:send, nil, :require,
                    s(:str, "psych")),
                  s(:resbody,
                    s(:array,
                      s(:const,
                        s(:cbase), :LoadError)), nil, nil),
                  s(:begin,
                    s(:if,
                      s(:and,
                        s(:defined?,
                          s(:const,
                            s(:const, nil, :YAML), :ENGINE)),
                        s(:send,
                          s(:send,
                            s(:const,
                              s(:const, nil, :YAML), :ENGINE), :yamler), :!=,
                          s(:str, "psych"))),
                      s(:send,
                        s(:const,
                          s(:const, nil, :YAML), :ENGINE), :yamler=,
                        s(:str, "psych")), nil),
                    s(:send, nil, :require,
                      s(:str, "rubygems/psych_additions")),
                    s(:send, nil, :require,
                      s(:str, "rubygems/psych_tree"))))))),
          s(:send, nil, :require,
            s(:str, "yaml")),
          s(:if,
            s(:and,
              s(:lvar, :test_syck),
              s(:defined?,
                s(:const,
                  s(:const, nil, :YAML), :ENGINE))),
            s(:if,
              s(:send,
                s(:const,
                  s(:const, nil, :YAML), :ENGINE), :syck?), nil,
              s(:send,
                s(:const,
                  s(:const, nil, :YAML), :ENGINE), :yamler=,
                s(:str, "syck"))), nil),
          s(:send, nil, :require,
            s(:str, "rubygems/syck_hack")),
          s(:ivasgn, :@yaml_loaded,
            s(:true)))),
      s(:defs,
        s(:self), :location_of_caller,
        s(:args),
        s(:begin,
          s(:send,
            s(:send,
              s(:send, nil, :caller), :[],
              s(:int, 1)), :=~,
            s(:regexp,
              s(:str, "(.*?):(\\d+).*?$"),
              s(:regopt, :i))),
          s(:lvasgn, :file,
            s(:nth_ref, 1)),
          s(:lvasgn, :lineno,
            s(:send,
              s(:nth_ref, 2), :to_i)),
          s(:array,
            s(:lvar, :file),
            s(:lvar, :lineno)))),
      s(:defs,
        s(:self), :marshal_version,
        s(:args),
        s(:dstr,
          s(:begin,
            s(:const,
              s(:const, nil, :Marshal), :MAJOR_VERSION)),
          s(:str, "."),
          s(:begin,
            s(:const,
              s(:const, nil, :Marshal), :MINOR_VERSION)))),
      s(:defs,
        s(:self), :platforms=,
        s(:args,
          s(:arg, :platforms)),
        s(:ivasgn, :@platforms,
          s(:lvar, :platforms))),
      s(:defs,
        s(:self), :platforms,
        s(:args),
        s(:begin,
          s(:or_asgn,
            s(:ivasgn, :@platforms),
            s(:array)),
          s(:if,
            s(:send,
              s(:ivar, :@platforms), :empty?),
            s(:ivasgn, :@platforms,
              s(:array,
                s(:const,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :RUBY),
                s(:send,
                  s(:const,
                    s(:const, nil, :Gem), :Platform), :local))), nil),
          s(:ivar, :@platforms))),
      s(:defs,
        s(:self), :post_build,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@post_build_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :post_install,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@post_install_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :done_installing,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@done_installing_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :post_reset,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@post_reset_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :post_uninstall,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@post_uninstall_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :pre_install,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@pre_install_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :pre_reset,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@pre_reset_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :pre_uninstall,
        s(:args,
          s(:blockarg, :hook)),
        s(:send,
          s(:ivar, :@pre_uninstall_hooks), :<<,
          s(:lvar, :hook))),
      s(:defs,
        s(:self), :prefix,
        s(:args),
        s(:begin,
          s(:lvasgn, :prefix,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:const, nil, :RUBYGEMS_DIR))),
          s(:if,
            s(:and,
              s(:and,
                s(:send,
                  s(:lvar, :prefix), :!=,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "sitelibdir")))),
                s(:send,
                  s(:lvar, :prefix), :!=,
                  s(:send,
                    s(:const, nil, :File), :expand_path,
                    s(:send,
                      s(:const,
                        s(:const, nil, :RbConfig), :CONFIG), :[],
                      s(:str, "libdir"))))),
              s(:send,
                s(:str, "lib"), :==,
                s(:send,
                  s(:const, nil, :File), :basename,
                  s(:const, nil, :RUBYGEMS_DIR)))),
            s(:lvar, :prefix), nil))),
      s(:defs,
        s(:self), :refresh,
        s(:args),
        s(:send,
          s(:const,
            s(:const, nil, :Gem), :Specification), :reset)),
      s(:defs,
        s(:self), :read_binary,
        s(:args,
          s(:arg, :path)),
        s(:rescue,
          s(:block,
            s(:send, nil, :open,
              s(:lvar, :path),
              s(:str, "rb+")),
            s(:args,
              s(:arg, :f)),
            s(:begin,
              s(:send,
                s(:lvar, :f), :flock,
                s(:const,
                  s(:const, nil, :File), :LOCK_EX)),
              s(:send,
                s(:lvar, :f), :read))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :EACCES)), nil,
            s(:block,
              s(:send, nil, :open,
                s(:lvar, :path),
                s(:str, "rb")),
              s(:args,
                s(:arg, :f)),
              s(:send,
                s(:lvar, :f), :read))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Errno), :ENOLCK)), nil,
            s(:if,
              s(:send,
                s(:send,
                  s(:const, nil, :Thread), :main), :!=,
                s(:send,
                  s(:const, nil, :Thread), :current)),
              s(:send, nil, :raise),
              s(:block,
                s(:send, nil, :open,
                  s(:lvar, :path),
                  s(:str, "rb")),
                s(:args,
                  s(:arg, :f)),
                s(:send,
                  s(:lvar, :f), :read)))), nil)),
      s(:defs,
        s(:self), :ruby,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:ivar, :@ruby), :nil?),
            s(:begin,
              s(:ivasgn, :@ruby,
                s(:send,
                  s(:const, nil, :File), :join,
                  s(:send,
                    s(:const,
                      s(:const, nil, :RbConfig), :CONFIG), :[],
                    s(:str, "bindir")),
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RbConfig), :CONFIG), :[],
                        s(:str, "ruby_install_name"))),
                    s(:begin,
                      s(:send,
                        s(:const,
                          s(:const, nil, :RbConfig), :CONFIG), :[],
                        s(:str, "EXEEXT")))))),
              s(:if,
                s(:send,
                  s(:ivar, :@ruby), :=~,
                  s(:regexp,
                    s(:str, "\\s"),
                    s(:regopt))),
                s(:ivasgn, :@ruby,
                  s(:dstr,
                    s(:str, "\""),
                    s(:begin,
                      s(:ivar, :@ruby)),
                    s(:str, "\""))), nil)), nil),
          s(:ivar, :@ruby))),
      s(:defs,
        s(:self), :ruby_api_version,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@ruby_api_version),
          s(:send,
            s(:send,
              s(:const,
                s(:const, nil, :RbConfig), :CONFIG), :[],
              s(:str, "ruby_version")), :dup))),
      s(:defs,
        s(:self), :latest_spec_for,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :dependency,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Dependency), :new,
              s(:lvar, :name))),
          s(:lvasgn, :fetcher,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SpecFetcher), :fetcher)),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :spec_tuples)),
            s(:send,
              s(:lvar, :fetcher), :spec_for_dependency,
              s(:lvar, :dependency))),
          s(:masgn,
            s(:mlhs,
              s(:lvasgn, :spec)),
            s(:send,
              s(:lvar, :spec_tuples), :first)),
          s(:lvar, :spec))),
      s(:defs,
        s(:self), :latest_rubygems_version,
        s(:args),
        s(:or,
          s(:send, nil, :latest_version_for,
            s(:str, "rubygems-update")),
          s(:send, nil, :raise,
            s(:str, "Can't find 'rubygems-update' in any repo. Check `gem source list`.")))),
      s(:defs,
        s(:self), :latest_version_for,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:lvasgn, :spec,
            s(:send, nil, :latest_spec_for,
              s(:lvar, :name))),
          s(:and,
            s(:lvar, :spec),
            s(:send,
              s(:lvar, :spec), :version)))),
      s(:defs,
        s(:self), :ruby_version,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@ruby_version)),
            s(:return,
              s(:ivar, :@ruby_version)), nil),
          s(:lvasgn, :version,
            s(:send,
              s(:const, nil, :RUBY_VERSION), :dup)),
          s(:if,
            s(:and,
              s(:defined?,
                s(:const, nil, :RUBY_PATCHLEVEL)),
              s(:send,
                s(:const, nil, :RUBY_PATCHLEVEL), :!=,
                s(:int, -1))),
            s(:send,
              s(:lvar, :version), :<<,
              s(:dstr,
                s(:str, "."),
                s(:begin,
                  s(:const, nil, :RUBY_PATCHLEVEL)))),
            s(:if,
              s(:defined?,
                s(:const, nil, :RUBY_REVISION)),
              s(:send,
                s(:lvar, :version), :<<,
                s(:dstr,
                  s(:str, ".dev."),
                  s(:begin,
                    s(:const, nil, :RUBY_REVISION)))), nil)),
          s(:ivasgn, :@ruby_version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:lvar, :version))))),
      s(:defs,
        s(:self), :rubygems_version,
        s(:args),
        s(:begin,
          s(:if,
            s(:defined?,
              s(:ivar, :@rubygems_version)),
            s(:return,
              s(:ivar, :@rubygems_version)), nil),
          s(:ivasgn, :@rubygems_version,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :Version), :new,
              s(:const,
                s(:const, nil, :Gem), :VERSION))))),
      s(:defs,
        s(:self), :sources,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@sources),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :SourceList), :from,
            s(:send, nil, :default_sources)))),
      s(:defs,
        s(:self), :sources=,
        s(:args,
          s(:arg, :new_sources)),
        s(:if,
          s(:send,
            s(:lvar, :new_sources), :!),
          s(:ivasgn, :@sources,
            s(:nil)),
          s(:ivasgn, :@sources,
            s(:send,
              s(:const,
                s(:const, nil, :Gem), :SourceList), :from,
              s(:lvar, :new_sources))))),
      s(:defs,
        s(:self), :suffix_pattern,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@suffix_pattern),
          s(:dstr,
            s(:str, "{"),
            s(:begin,
              s(:send,
                s(:send, nil, :suffixes), :join,
                s(:str, ","))),
            s(:str, "}")))),
      s(:defs,
        s(:self), :suffixes,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@suffixes),
          s(:send,
            s(:send,
              s(:array,
                s(:str, ""),
                s(:str, ".rb"),
                s(:splat,
                  s(:block,
                    s(:send,
                      s(:array,
                        s(:str, "DLEXT"),
                        s(:str, "DLEXT2")), :map),
                    s(:args,
                      s(:arg, :key)),
                    s(:begin,
                      s(:lvasgn, :val,
                        s(:send,
                          s(:const,
                            s(:const, nil, :RbConfig), :CONFIG), :[],
                          s(:lvar, :key))),
                      s(:if,
                        s(:and,
                          s(:lvar, :val),
                          s(:send,
                            s(:send,
                              s(:lvar, :val), :empty?), :!)), nil,
                        s(:next)),
                      s(:dstr,
                        s(:str, "."),
                        s(:begin,
                          s(:lvar, :val))))))), :compact), :uniq))),
      s(:defs,
        s(:self), :time,
        s(:args,
          s(:arg, :msg),
          s(:optarg, :width,
            s(:int, 0)),
          s(:optarg, :display,
            s(:send,
              s(:send,
                s(:const, nil, :Gem), :configuration), :verbose))),
        s(:begin,
          s(:lvasgn, :now,
            s(:send,
              s(:const, nil, :Time), :now)),
          s(:lvasgn, :value,
            s(:yield)),
          s(:lvasgn, :elapsed,
            s(:send,
              s(:send,
                s(:const, nil, :Time), :now), :-,
              s(:lvar, :now))),
          s(:if,
            s(:lvar, :display),
            s(:send,
              s(:send, nil, :ui), :say,
              s(:send,
                s(:str, "%2$*1$s: %3$3.3fs"), :%,
                s(:array,
                  s(:send,
                    s(:lvar, :width), :-@),
                  s(:lvar, :msg),
                  s(:lvar, :elapsed)))), nil),
          s(:lvar, :value))),
      s(:defs,
        s(:self), :ui,
        s(:args),
        s(:begin,
          s(:send, nil, :require,
            s(:str, "rubygems/user_interaction")),
          s(:send,
            s(:const,
              s(:const, nil, :Gem), :DefaultUserInteraction), :ui))),
      s(:defs,
        s(:self), :use_paths,
        s(:args,
          s(:arg, :home),
          s(:restarg, :paths)),
        s(:begin,
          s(:if,
            s(:send,
              s(:lvar, :paths), :==,
              s(:array,
                s(:nil))),
            s(:lvasgn, :paths,
              s(:nil)), nil),
          s(:if,
            s(:send,
              s(:const, nil, :Array), :===,
              s(:send,
                s(:send, nil, :Array,
                  s(:lvar, :paths)), :first)),
            s(:lvasgn, :paths,
              s(:send,
                s(:lvar, :paths), :first)), nil),
          s(:send,
            s(:self), :paths=,
            s(:hash,
              s(:pair,
                s(:str, "GEM_HOME"),
                s(:lvar, :home)),
              s(:pair,
                s(:str, "GEM_PATH"),
                s(:lvar, :paths)))))),
      s(:defs,
        s(:self), :user_home,
        s(:args),
        s(:or_asgn,
          s(:ivasgn, :@user_home),
          s(:send,
            s(:send, nil, :find_home), :untaint))),
      s(:defs,
        s(:self), :win_platform?,
        s(:args),
        s(:begin,
          s(:if,
            s(:send,
              s(:cvar, :@@win_platform), :nil?),
            s(:begin,
              s(:lvasgn, :ruby_platform,
                s(:send,
                  s(:const,
                    s(:const, nil, :RbConfig), :CONFIG), :[],
                  s(:str, "host_os"))),
              s(:cvasgn, :@@win_platform,
                s(:send,
                  s(:send,
                    s(:block,
                      s(:send,
                        s(:const, nil, :WIN_PATTERNS), :find),
                      s(:args,
                        s(:arg, :r)),
                      s(:send,
                        s(:lvar, :ruby_platform), :=~,
                        s(:lvar, :r))), :!), :!))), nil),
          s(:cvar, :@@win_platform))),
      s(:defs,
        s(:self), :load_plugin_files,
        s(:args,
          s(:arg, :plugins)),
        s(:block,
          s(:send,
            s(:lvar, :plugins), :each),
          s(:args,
            s(:arg, :plugin)),
          s(:begin,
            s(:if,
              s(:send,
                s(:lvar, :plugin), :=~,
                s(:regexp,
                  s(:str, "gemcutter-0\\.[0-3]"),
                  s(:regopt))),
              s(:next), nil),
            s(:kwbegin,
              s(:rescue,
                s(:send, nil, :load,
                  s(:lvar, :plugin)),
                s(:resbody,
                  s(:array,
                    s(:const,
                      s(:cbase), :Exception)),
                  s(:lvasgn, :e),
                  s(:begin,
                    s(:lvasgn, :details,
                      s(:dstr,
                        s(:begin,
                          s(:send,
                            s(:lvar, :plugin), :inspect)),
                        s(:str, ": "),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :message)),
                        s(:str, " ("),
                        s(:begin,
                          s(:send,
                            s(:lvar, :e), :class)),
                        s(:str, ")"))),
                    s(:send, nil, :warn,
                      s(:dstr,
                        s(:str, "Error loading RubyGems plugin "),
                        s(:begin,
                          s(:lvar, :details)))))), nil))))),
      s(:defs,
        s(:self), :load_plugins,
        s(:args),
        s(:if,
          s(:send,
            s(:const, nil, :ENV), :[],
            s(:str, "RUBYGEMS_LOAD_ALL_PLUGINS")),
          s(:send, nil, :load_plugin_files,
            s(:send, nil, :find_files,
              s(:str, "rubygems_plugin"),
              s(:false))),
          s(:send, nil, :load_plugin_files,
            s(:send, nil, :find_latest_files,
              s(:str, "rubygems_plugin"),
              s(:false))))),
      s(:defs,
        s(:self), :load_env_plugins,
        s(:args),
        s(:begin,
          s(:lvasgn, :path,
            s(:str, "rubygems_plugin")),
          s(:lvasgn, :files,
            s(:array)),
          s(:block,
            s(:send,
              s(:gvar, :$LOAD_PATH), :each),
            s(:args,
              s(:arg, :load_path)),
            s(:begin,
              s(:lvasgn, :globbed,
                s(:send,
                  s(:const, nil, :Dir), :[],
                  s(:dstr,
                    s(:begin,
                      s(:send,
                        s(:const, nil, :File), :expand_path,
                        s(:lvar, :path),
                        s(:lvar, :load_path))),
                    s(:begin,
                      s(:send,
                        s(:const, nil, :Gem), :suffix_pattern))))),
              s(:block,
                s(:send,
                  s(:lvar, :globbed), :each),
                s(:args,
                  s(:arg, :load_path_file)),
                s(:if,
                  s(:send,
                    s(:const, nil, :File), :file?,
                    s(:send,
                      s(:lvar, :load_path_file), :untaint)),
                  s(:send,
                    s(:lvar, :files), :<<,
                    s(:lvar, :load_path_file)), nil)))),
          s(:send, nil, :load_plugin_files,
            s(:lvar, :files)))),
      s(:defs,
        s(:self), :use_gemdeps,
        s(:args,
          s(:optarg, :path,
            s(:nil))),
        s(:rescue,
          s(:begin,
            s(:lvasgn, :raise_exception,
              s(:lvar, :path)),
            s(:or_asgn,
              s(:lvasgn, :path),
              s(:send,
                s(:const, nil, :ENV), :[],
                s(:str, "RUBYGEMS_GEMDEPS"))),
            s(:if,
              s(:lvar, :path), nil,
              s(:return)),
            s(:lvasgn, :path,
              s(:send,
                s(:lvar, :path), :dup)),
            s(:if,
              s(:send,
                s(:lvar, :path), :==,
                s(:str, "-")),
              s(:begin,
                s(:send, nil, :require,
                  s(:str, "rubygems/util")),
                s(:block,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Gem), :Util), :traverse_parents,
                    s(:send,
                      s(:const, nil, :Dir), :pwd)),
                  s(:args,
                    s(:arg, :directory)),
                  s(:begin,
                    s(:lvasgn, :dep_file,
                      s(:block,
                        s(:send,
                          s(:const, nil, :GEM_DEP_FILES), :find),
                        s(:args,
                          s(:arg, :f)),
                        s(:send,
                          s(:const, nil, :File), :file?,
                          s(:lvar, :f)))),
                    s(:if,
                      s(:lvar, :dep_file), nil,
                      s(:next)),
                    s(:lvasgn, :path,
                      s(:send,
                        s(:const, nil, :File), :join,
                        s(:lvar, :directory),
                        s(:lvar, :dep_file))),
                    s(:break)))), nil),
            s(:send,
              s(:lvar, :path), :untaint),
            s(:if,
              s(:send,
                s(:const, nil, :File), :file?,
                s(:lvar, :path)), nil,
              s(:begin,
                s(:if,
                  s(:lvar, :raise_exception), nil,
                  s(:return)),
                s(:send, nil, :raise,
                  s(:const, nil, :ArgumentError),
                  s(:dstr,
                    s(:str, "Unable to find gem dependencies file at "),
                    s(:begin,
                      s(:lvar, :path)))))),
            s(:lvasgn, :rs,
              s(:send,
                s(:const,
                  s(:const, nil, :Gem), :RequestSet), :new)),
            s(:ivasgn, :@gemdeps,
              s(:send,
                s(:lvar, :rs), :load_gemdeps,
                s(:lvar, :path))),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :rs), :resolve_current), :map),
              s(:args,
                s(:arg, :s)),
              s(:begin,
                s(:lvasgn, :sp,
                  s(:send,
                    s(:lvar, :s), :full_spec)),
                s(:send,
                  s(:lvar, :sp), :activate),
                s(:lvar, :sp)))),
          s(:resbody,
            s(:array,
              s(:const,
                s(:const, nil, :Gem), :LoadError),
              s(:const,
                s(:const, nil, :Gem), :UnsatisfiableDependencyError)),
            s(:lvasgn, :e),
            s(:begin,
              s(:send, nil, :warn,
                s(:send,
                  s(:lvar, :e), :message)),
              s(:send, nil, :warn,
                s(:str, "You may need to `gem install -g` to install missing gems")),
              s(:send, nil, :warn,
                s(:str, "")))), nil)),
      s(:sclass,
        s(:self),
        s(:alias,
          s(:sym, :detect_gemdeps),
          s(:sym, :use_gemdeps))),
      s(:sclass,
        s(:self),
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :loaded_specs)),
          s(:send, nil, :attr_reader,
            s(:sym, :gemdeps)),
          s(:def, :register_default_spec,
            s(:args,
              s(:arg, :spec)),
            s(:begin,
              s(:lvasgn, :new_format,
                s(:or,
                  s(:send,
                    s(:const, nil, :Gem), :default_gems_use_full_paths?),
                  s(:block,
                    s(:send,
                      s(:send,
                        s(:lvar, :spec), :require_paths), :any?),
                    s(:args,
                      s(:arg, :path)),
                    s(:block,
                      s(:send,
                        s(:send,
                          s(:lvar, :spec), :files), :any?),
                      s(:args,
                        s(:arg, :f)),
                      s(:send,
                        s(:lvar, :f), :start_with?,
                        s(:lvar, :path)))))),
              s(:if,
                s(:lvar, :new_format),
                s(:begin,
                  s(:lvasgn, :prefix_group,
                    s(:send,
                      s(:block,
                        s(:send,
                          s(:send,
                            s(:lvar, :spec), :require_paths), :map),
                        s(:args,
                          s(:arg, :f)),
                        s(:send,
                          s(:lvar, :f), :+,
                          s(:str, "/"))), :join,
                      s(:str, "|"))),
                  s(:lvasgn, :prefix_pattern,
                    s(:regexp,
                      s(:str, "^("),
                      s(:begin,
                        s(:lvar, :prefix_group)),
                      s(:str, ")"),
                      s(:regopt)))), nil),
              s(:block,
                s(:send,
                  s(:send,
                    s(:lvar, :spec), :files), :each),
                s(:args,
                  s(:arg, :file)),
                s(:begin,
                  s(:if,
                    s(:lvar, :new_format),
                    s(:begin,
                      s(:lvasgn, :file,
                        s(:send,
                          s(:lvar, :file), :sub,
                          s(:lvar, :prefix_pattern),
                          s(:str, ""))),
                      s(:if,
                        s(:gvar, :$~), nil,
                        s(:next))), nil),
                  s(:send,
                    s(:ivar, :@path_to_default_spec_map), :[]=,
                    s(:lvar, :file),
                    s(:lvar, :spec)))))),
          s(:def, :find_unresolved_default_spec,
            s(:args,
              s(:arg, :path)),
            s(:begin,
              s(:block,
                s(:send,
                  s(:send,
                    s(:const, nil, :Gem), :suffixes), :each),
                s(:args,
                  s(:arg, :suffix)),
                s(:begin,
                  s(:lvasgn, :spec,
                    s(:send,
                      s(:ivar, :@path_to_default_spec_map), :[],
                      s(:dstr,
                        s(:begin,
                          s(:lvar, :path)),
                        s(:begin,
                          s(:lvar, :suffix))))),
                  s(:if,
                    s(:lvar, :spec),
                    s(:return,
                      s(:lvar, :spec)), nil))),
              s(:nil))),
          s(:def, :remove_unresolved_default_spec,
            s(:args,
              s(:arg, :spec)),
            s(:block,
              s(:send,
                s(:send,
                  s(:lvar, :spec), :files), :each),
              s(:args,
                s(:arg, :file)),
              s(:send,
                s(:ivar, :@path_to_default_spec_map), :delete,
                s(:lvar, :file)))),
          s(:def, :clear_default_specs,
            s(:args),
            s(:send,
              s(:ivar, :@path_to_default_spec_map), :clear)),
          s(:send, nil, :attr_reader,
            s(:sym, :post_build_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :post_install_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :done_installing_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :post_reset_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :post_uninstall_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :pre_install_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :pre_reset_hooks)),
          s(:send, nil, :attr_reader,
            s(:sym, :pre_uninstall_hooks)))),
      s(:casgn, nil, :MARSHAL_SPEC_DIR,
        s(:dstr,
          s(:str, "quick/Marshal."),
          s(:begin,
            s(:send,
              s(:const, nil, :Gem), :marshal_version)),
          s(:str, "/"))),
      s(:send, nil, :autoload,
        s(:sym, :ConfigFile),
        s(:str, "rubygems/config_file")),
      s(:send, nil, :autoload,
        s(:sym, :Dependency),
        s(:str, "rubygems/dependency")),
      s(:send, nil, :autoload,
        s(:sym, :DependencyList),
        s(:str, "rubygems/dependency_list")),
      s(:send, nil, :autoload,
        s(:sym, :DependencyResolver),
        s(:str, "rubygems/resolver")),
      s(:send, nil, :autoload,
        s(:sym, :Installer),
        s(:str, "rubygems/installer")),
      s(:send, nil, :autoload,
        s(:sym, :Licenses),
        s(:str, "rubygems/util/licenses")),
      s(:send, nil, :autoload,
        s(:sym, :PathSupport),
        s(:str, "rubygems/path_support")),
      s(:send, nil, :autoload,
        s(:sym, :Platform),
        s(:str, "rubygems/platform")),
      s(:send, nil, :autoload,
        s(:sym, :RequestSet),
        s(:str, "rubygems/request_set")),
      s(:send, nil, :autoload,
        s(:sym, :Requirement),
        s(:str, "rubygems/requirement")),
      s(:send, nil, :autoload,
        s(:sym, :Resolver),
        s(:str, "rubygems/resolver")),
      s(:send, nil, :autoload,
        s(:sym, :Source),
        s(:str, "rubygems/source")),
      s(:send, nil, :autoload,
        s(:sym, :SourceList),
        s(:str, "rubygems/source_list")),
      s(:send, nil, :autoload,
        s(:sym, :SpecFetcher),
        s(:str, "rubygems/spec_fetcher")),
      s(:send, nil, :autoload,
        s(:sym, :Specification),
        s(:str, "rubygems/specification")),
      s(:send, nil, :autoload,
        s(:sym, :Version),
        s(:str, "rubygems/version")),
      s(:send, nil, :require,
        s(:str, "rubygems/specification")))),
  s(:send, nil, :require,
    s(:str, "rubygems/exceptions")),
  s(:and,
    s(:lvasgn, :gem_preluded,
      s(:const,
        s(:const, nil, :Gem), :GEM_PRELUDE_SUCKAGE)),
    s(:defined?,
      s(:const, nil, :Gem))),
  s(:if,
    s(:lvar, :gem_preluded), nil,
    s(:begin,
      s(:kwbegin,
        s(:rescue,
          s(:send, nil, :require,
            s(:str, "rubygems/defaults/operating_system")),
          s(:resbody,
            s(:array,
              s(:const, nil, :LoadError)), nil, nil), nil)),
      s(:if,
        s(:defined?,
          s(:const, nil, :RUBY_ENGINE)),
        s(:kwbegin,
          s(:rescue,
            s(:send, nil, :require,
              s(:dstr,
                s(:str, "rubygems/defaults/"),
                s(:begin,
                  s(:const, nil, :RUBY_ENGINE)))),
            s(:resbody,
              s(:array,
                s(:const, nil, :LoadError)), nil, nil), nil)), nil))),
  s(:send,
    s(:const,
      s(:const, nil, :Gem), :Specification), :load_defaults),
  s(:send, nil, :require,
    s(:str, "rubygems/core_ext/kernel_gem")),
  s(:send, nil, :require,
    s(:str, "rubygems/core_ext/kernel_require")),
  s(:send,
    s(:const, nil, :Gem), :use_gemdeps))
