s(:begin,
  s(:send, nil, :require,
    s(:str, "digest/md5")),
  s(:class,
    s(:const, nil, :PStore), nil,
    s(:begin,
      s(:casgn, nil, :RDWR_ACCESS,
        s(:send,
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :IO), :RDWR), :|,
                  s(:const,
                    s(:const, nil, :IO), :CREAT)), :|,
                s(:const,
                  s(:const, nil, :IO), :BINARY))),
            s(:pair,
              s(:sym, :encoding),
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT))), :freeze)),
      s(:casgn, nil, :RD_ACCESS,
        s(:send,
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:send,
                s(:const,
                  s(:const, nil, :IO), :RDONLY), :|,
                s(:const,
                  s(:const, nil, :IO), :BINARY))),
            s(:pair,
              s(:sym, :encoding),
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT))), :freeze)),
      s(:casgn, nil, :WR_ACCESS,
        s(:send,
          s(:hash,
            s(:pair,
              s(:sym, :mode),
              s(:send,
                s(:send,
                  s(:send,
                    s(:const,
                      s(:const, nil, :IO), :WRONLY), :|,
                    s(:const,
                      s(:const, nil, :IO), :CREAT)), :|,
                  s(:const,
                    s(:const, nil, :IO), :TRUNC)), :|,
                s(:const,
                  s(:const, nil, :IO), :BINARY))),
            s(:pair,
              s(:sym, :encoding),
              s(:const,
                s(:const, nil, :Encoding), :ASCII_8BIT))), :freeze)),
      s(:class,
        s(:const, nil, :Error),
        s(:const, nil, :StandardError), nil),
      s(:send, nil, :attr_accessor,
        s(:sym, :ultra_safe)),
      s(:def, :initialize,
        s(:args,
          s(:arg, :file),
          s(:optarg, :thread_safe,
            s(:false))),
        s(:begin,
          s(:lvasgn, :dir,
            s(:send,
              s(:const, nil, :File), :dirname,
              s(:lvar, :file))),
          s(:if,
            s(:send,
              s(:const, nil, :File), :directory?,
              s(:lvar, :dir)), nil,
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :PStore), :Error),
              s(:send, nil, :format,
                s(:str, "directory %s does not exist"),
                s(:lvar, :dir)))),
          s(:if,
            s(:and,
              s(:send,
                s(:const, nil, :File), :exist?,
                s(:lvar, :file)),
              s(:send,
                s(:send,
                  s(:const, nil, :File), :readable?,
                  s(:lvar, :file)), :!)),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :PStore), :Error),
              s(:send, nil, :format,
                s(:str, "file %s not readable"),
                s(:lvar, :file))), nil),
          s(:ivasgn, :@filename,
            s(:lvar, :file)),
          s(:ivasgn, :@abort,
            s(:false)),
          s(:ivasgn, :@ultra_safe,
            s(:false)),
          s(:ivasgn, :@thread_safe,
            s(:lvar, :thread_safe)),
          s(:ivasgn, :@lock,
            s(:send,
              s(:const, nil, :Mutex), :new)))),
      s(:def, :in_transaction,
        s(:args),
        s(:if,
          s(:send,
            s(:ivar, :@lock), :locked?), nil,
          s(:send, nil, :raise,
            s(:const,
              s(:const, nil, :PStore), :Error),
            s(:str, "not in transaction")))),
      s(:def, :in_transaction_wr,
        s(:args),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:if,
            s(:ivar, :@rdonly),
            s(:send, nil, :raise,
              s(:const,
                s(:const, nil, :PStore), :Error),
              s(:str, "in read-only transaction")), nil))),
      s(:send, nil, :private,
        s(:sym, :in_transaction),
        s(:sym, :in_transaction_wr)),
      s(:def, :[],
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:send,
            s(:ivar, :@table), :[],
            s(:lvar, :name)))),
      s(:def, :fetch,
        s(:args,
          s(:arg, :name),
          s(:optarg, :default,
            s(:const,
              s(:const, nil, :PStore), :Error))),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:if,
            s(:send,
              s(:ivar, :@table), :key?,
              s(:lvar, :name)), nil,
            s(:if,
              s(:send,
                s(:lvar, :default), :==,
                s(:const,
                  s(:const, nil, :PStore), :Error)),
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :PStore), :Error),
                s(:send, nil, :format,
                  s(:str, "undefined root name `%s'"),
                  s(:lvar, :name))),
              s(:return,
                s(:lvar, :default)))),
          s(:send,
            s(:ivar, :@table), :[],
            s(:lvar, :name)))),
      s(:def, :[]=,
        s(:args,
          s(:arg, :name),
          s(:arg, :value)),
        s(:begin,
          s(:send, nil, :in_transaction_wr),
          s(:send,
            s(:ivar, :@table), :[]=,
            s(:lvar, :name),
            s(:lvar, :value)))),
      s(:def, :delete,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :in_transaction_wr),
          s(:send,
            s(:ivar, :@table), :delete,
            s(:lvar, :name)))),
      s(:def, :roots,
        s(:args),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:send,
            s(:ivar, :@table), :keys))),
      s(:def, :root?,
        s(:args,
          s(:arg, :name)),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:send,
            s(:ivar, :@table), :key?,
            s(:lvar, :name)))),
      s(:def, :path,
        s(:args),
        s(:ivar, :@filename)),
      s(:def, :commit,
        s(:args),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:ivasgn, :@abort,
            s(:false)),
          s(:send, nil, :throw,
            s(:sym, :pstore_abort_transaction)))),
      s(:def, :abort,
        s(:args),
        s(:begin,
          s(:send, nil, :in_transaction),
          s(:ivasgn, :@abort,
            s(:true)),
          s(:send, nil, :throw,
            s(:sym, :pstore_abort_transaction)))),
      s(:def, :transaction,
        s(:args,
          s(:optarg, :read_only,
            s(:false))),
        s(:begin,
          s(:lvasgn, :value,
            s(:nil)),
          s(:if,
            s(:send,
              s(:ivar, :@thread_safe), :!),
            s(:if,
              s(:send,
                s(:ivar, :@lock), :try_lock), nil,
              s(:send, nil, :raise,
                s(:const,
                  s(:const, nil, :PStore), :Error),
                s(:str, "nested transaction"))),
            s(:kwbegin,
              s(:rescue,
                s(:send,
                  s(:ivar, :@lock), :lock),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :ThreadError)), nil,
                  s(:send, nil, :raise,
                    s(:const,
                      s(:const, nil, :PStore), :Error),
                    s(:str, "nested transaction"))), nil))),
          s(:kwbegin,
            s(:ensure,
              s(:begin,
                s(:ivasgn, :@rdonly,
                  s(:lvar, :read_only)),
                s(:ivasgn, :@abort,
                  s(:false)),
                s(:lvasgn, :file,
                  s(:send, nil, :open_and_lock_file,
                    s(:ivar, :@filename),
                    s(:lvar, :read_only))),
                s(:if,
                  s(:lvar, :file),
                  s(:kwbegin,
                    s(:ensure,
                      s(:begin,
                        s(:masgn,
                          s(:mlhs,
                            s(:ivasgn, :@table),
                            s(:lvasgn, :checksum),
                            s(:lvasgn, :original_data_size)),
                          s(:send, nil, :load_data,
                            s(:lvar, :file),
                            s(:lvar, :read_only))),
                        s(:block,
                          s(:send, nil, :catch,
                            s(:sym, :pstore_abort_transaction)),
                          s(:args),
                          s(:lvasgn, :value,
                            s(:yield,
                              s(:self)))),
                        s(:if,
                          s(:and,
                            s(:send,
                              s(:ivar, :@abort), :!),
                            s(:send,
                              s(:lvar, :read_only), :!)),
                          s(:send, nil, :save_data,
                            s(:lvar, :checksum),
                            s(:lvar, :original_data_size),
                            s(:lvar, :file)), nil)),
                      s(:if,
                        s(:send,
                          s(:send,
                            s(:lvar, :file), :closed?), :!),
                        s(:send,
                          s(:lvar, :file), :close), nil))),
                  s(:begin,
                    s(:ivasgn, :@table,
                      s(:hash)),
                    s(:block,
                      s(:send, nil, :catch,
                        s(:sym, :pstore_abort_transaction)),
                      s(:args),
                      s(:lvasgn, :value,
                        s(:yield,
                          s(:self))))))),
              s(:send,
                s(:ivar, :@lock), :unlock))),
          s(:lvar, :value))),
      s(:send, nil, :private),
      s(:casgn, nil, :EMPTY_STRING,
        s(:str, "")),
      s(:casgn, nil, :EMPTY_MARSHAL_DATA,
        s(:send,
          s(:const, nil, :Marshal), :dump,
          s(:hash))),
      s(:casgn, nil, :EMPTY_MARSHAL_CHECKSUM,
        s(:send,
          s(:const,
            s(:const, nil, :Digest), :MD5), :digest,
          s(:const, nil, :EMPTY_MARSHAL_DATA))),
      s(:def, :open_and_lock_file,
        s(:args,
          s(:arg, :filename),
          s(:arg, :read_only)),
        s(:if,
          s(:lvar, :read_only),
          s(:kwbegin,
            s(:rescue,
              s(:begin,
                s(:lvasgn, :file,
                  s(:send,
                    s(:const, nil, :File), :new,
                    s(:lvar, :filename),
                    s(:const, nil, :RD_ACCESS))),
                s(:kwbegin,
                  s(:rescue,
                    s(:begin,
                      s(:send,
                        s(:lvar, :file), :flock,
                        s(:const,
                          s(:const, nil, :File), :LOCK_SH)),
                      s(:return,
                        s(:lvar, :file))),
                    s(:resbody, nil, nil,
                      s(:begin,
                        s(:send,
                          s(:lvar, :file), :close),
                        s(:send, nil, :raise))), nil))),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ENOENT)), nil,
                s(:return,
                  s(:nil))), nil)),
          s(:begin,
            s(:lvasgn, :file,
              s(:send,
                s(:const, nil, :File), :new,
                s(:lvar, :filename),
                s(:const, nil, :RDWR_ACCESS))),
            s(:send,
              s(:lvar, :file), :flock,
              s(:const,
                s(:const, nil, :File), :LOCK_EX)),
            s(:return,
              s(:lvar, :file))))),
      s(:def, :load_data,
        s(:args,
          s(:arg, :file),
          s(:arg, :read_only)),
        s(:if,
          s(:lvar, :read_only),
          s(:begin,
            s(:kwbegin,
              s(:rescue,
                s(:begin,
                  s(:lvasgn, :table,
                    s(:send, nil, :load,
                      s(:lvar, :file))),
                  s(:if,
                    s(:send,
                      s(:lvar, :table), :is_a?,
                      s(:const, nil, :Hash)), nil,
                    s(:send, nil, :raise,
                      s(:const, nil, :Error),
                      s(:str, "PStore file seems to be corrupted.")))),
                s(:resbody,
                  s(:array,
                    s(:const, nil, :EOFError)), nil,
                  s(:lvasgn, :table,
                    s(:hash))), nil)),
            s(:lvar, :table)),
          s(:begin,
            s(:lvasgn, :data,
              s(:send,
                s(:lvar, :file), :read)),
            s(:if,
              s(:send,
                s(:lvar, :data), :empty?),
              s(:begin,
                s(:lvasgn, :table,
                  s(:hash)),
                s(:lvasgn, :checksum,
                  s(:send, nil, :empty_marshal_checksum)),
                s(:lvasgn, :size,
                  s(:send,
                    s(:send, nil, :empty_marshal_data), :bytesize))),
              s(:begin,
                s(:lvasgn, :table,
                  s(:send, nil, :load,
                    s(:lvar, :data))),
                s(:lvasgn, :checksum,
                  s(:send,
                    s(:const,
                      s(:const, nil, :Digest), :MD5), :digest,
                    s(:lvar, :data))),
                s(:lvasgn, :size,
                  s(:send,
                    s(:lvar, :data), :bytesize)),
                s(:if,
                  s(:send,
                    s(:lvar, :table), :is_a?,
                    s(:const, nil, :Hash)), nil,
                  s(:send, nil, :raise,
                    s(:const, nil, :Error),
                    s(:str, "PStore file seems to be corrupted."))))),
            s(:send,
              s(:lvar, :data), :replace,
              s(:const, nil, :EMPTY_STRING)),
            s(:array,
              s(:lvar, :table),
              s(:lvar, :checksum),
              s(:lvar, :size))))),
      s(:def, :on_windows?,
        s(:args),
        s(:begin,
          s(:lvasgn, :is_windows,
            s(:send,
              s(:const, nil, :RUBY_PLATFORM), :=~,
              s(:regexp,
                s(:str, "mswin|mingw|bccwin|wince"),
                s(:regopt)))),
          s(:block,
            s(:send,
              s(:send,
                s(:self), :class), :__send__,
              s(:sym, :define_method),
              s(:sym, :on_windows?)),
            s(:args),
            s(:lvar, :is_windows)),
          s(:lvar, :is_windows))),
      s(:def, :save_data,
        s(:args,
          s(:arg, :original_checksum),
          s(:arg, :original_file_size),
          s(:arg, :file)),
        s(:begin,
          s(:lvasgn, :new_data,
            s(:send, nil, :dump,
              s(:ivar, :@table))),
          s(:if,
            s(:or,
              s(:send,
                s(:send,
                  s(:lvar, :new_data), :bytesize), :!=,
                s(:lvar, :original_file_size)),
              s(:send,
                s(:send,
                  s(:const,
                    s(:const, nil, :Digest), :MD5), :digest,
                  s(:lvar, :new_data)), :!=,
                s(:lvar, :original_checksum))),
            s(:if,
              s(:and,
                s(:ivar, :@ultra_safe),
                s(:send,
                  s(:send, nil, :on_windows?), :!)),
              s(:send, nil, :save_data_with_atomic_file_rename_strategy,
                s(:lvar, :new_data),
                s(:lvar, :file)),
              s(:send, nil, :save_data_with_fast_strategy,
                s(:lvar, :new_data),
                s(:lvar, :file))), nil),
          s(:send,
            s(:lvar, :new_data), :replace,
            s(:const, nil, :EMPTY_STRING)))),
      s(:def, :save_data_with_atomic_file_rename_strategy,
        s(:args,
          s(:arg, :data),
          s(:arg, :file)),
        s(:begin,
          s(:lvasgn, :temp_filename,
            s(:dstr,
              s(:begin,
                s(:ivar, :@filename)),
              s(:str, ".tmp."),
              s(:begin,
                s(:send,
                  s(:const, nil, :Process), :pid)),
              s(:str, "."),
              s(:begin,
                s(:send, nil, :rand,
                  s(:int, 1000000))))),
          s(:lvasgn, :temp_file,
            s(:send,
              s(:const, nil, :File), :new,
              s(:lvar, :temp_filename),
              s(:const, nil, :WR_ACCESS))),
          s(:kwbegin,
            s(:ensure,
              s(:rescue,
                s(:begin,
                  s(:send,
                    s(:lvar, :temp_file), :flock,
                    s(:const,
                      s(:const, nil, :File), :LOCK_EX)),
                  s(:send,
                    s(:lvar, :temp_file), :write,
                    s(:lvar, :data)),
                  s(:send,
                    s(:lvar, :temp_file), :flush),
                  s(:send,
                    s(:const, nil, :File), :rename,
                    s(:lvar, :temp_filename),
                    s(:ivar, :@filename))),
                s(:resbody, nil, nil,
                  s(:begin,
                    s(:rescue,
                      s(:send,
                        s(:const, nil, :File), :unlink,
                        s(:lvar, :temp_file)),
                      s(:resbody, nil, nil,
                        s(:nil)), nil),
                    s(:send, nil, :raise))), nil),
              s(:send,
                s(:lvar, :temp_file), :close))))),
      s(:def, :save_data_with_fast_strategy,
        s(:args,
          s(:arg, :data),
          s(:arg, :file)),
        s(:begin,
          s(:send,
            s(:lvar, :file), :rewind),
          s(:send,
            s(:lvar, :file), :write,
            s(:lvar, :data)),
          s(:send,
            s(:lvar, :file), :truncate,
            s(:send,
              s(:lvar, :data), :bytesize)))),
      s(:def, :dump,
        s(:args,
          s(:arg, :table)),
        s(:send,
          s(:const, nil, :Marshal), :dump,
          s(:lvar, :table))),
      s(:def, :load,
        s(:args,
          s(:arg, :content)),
        s(:send,
          s(:const, nil, :Marshal), :load,
          s(:lvar, :content))),
      s(:def, :empty_marshal_data,
        s(:args),
        s(:const, nil, :EMPTY_MARSHAL_DATA)),
      s(:def, :empty_marshal_checksum,
        s(:args),
        s(:const, nil, :EMPTY_MARSHAL_CHECKSUM)))))
