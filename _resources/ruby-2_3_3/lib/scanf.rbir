s(:begin,
  s(:module,
    s(:const, nil, :Scanf),
    s(:begin,
      s(:class,
        s(:const, nil, :FormatSpecifier), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :re_string),
            s(:sym, :matched_string),
            s(:sym, :conversion),
            s(:sym, :matched)),
          s(:send, nil, :private),
          s(:def, :skip,
            s(:args),
            s(:send,
              s(:regexp,
                s(:str, "^\\s*%\\*"),
                s(:regopt)), :match,
              s(:ivar, :@spec_string))),
          s(:def, :extract_float,
            s(:args,
              s(:arg, :s)),
            s(:begin,
              s(:if,
                s(:and,
                  s(:lvar, :s),
                  s(:send,
                    s(:send, nil, :skip), :!)), nil,
                s(:return,
                  s(:nil))),
              s(:if,
                s(:match_with_lvasgn,
                  s(:regexp,
                    s(:str, "\\A(?<sign>[-+]?)0[xX](?<frac>\\.\\h+|\\h+(?:\\.\\h*)?)[pP](?<exp>[-+]\\d+)"),
                    s(:regopt)),
                  s(:lvar, :s)),
                s(:begin,
                  s(:masgn,
                    s(:mlhs,
                      s(:lvasgn, :f1),
                      s(:lvasgn, :f2)),
                    s(:send,
                      s(:lvar, :frac), :split,
                      s(:str, "."))),
                  s(:lvasgn, :f,
                    s(:send,
                      s(:lvar, :f1), :hex)),
                  s(:if,
                    s(:lvar, :f2),
                    s(:begin,
                      s(:lvasgn, :len,
                        s(:send,
                          s(:lvar, :f2), :length)),
                      s(:if,
                        s(:send,
                          s(:lvar, :len), :>,
                          s(:int, 0)),
                        s(:op_asgn,
                          s(:lvasgn, :f), :+,
                          s(:send,
                            s(:send,
                              s(:lvar, :f2), :hex), :/,
                            s(:begin,
                              s(:send,
                                s(:float, 16.0), :**,
                                s(:lvar, :len))))), nil)), nil),
                  s(:send,
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :sign), :==,
                          s(:str, "-")),
                        s(:int, -1),
                        s(:int, 1))), :*,
                    s(:send,
                      s(:const, nil, :Math), :ldexp,
                      s(:lvar, :f),
                      s(:send,
                        s(:lvar, :exp), :to_i)))),
                s(:if,
                  s(:match_with_lvasgn,
                    s(:regexp,
                      s(:str, "\\A([-+]?\\d+)\\.([eE][-+]\\d+)"),
                      s(:regopt)),
                    s(:lvar, :s)),
                  s(:send,
                    s(:begin,
                      s(:send,
                        s(:nth_ref, 1), :<<,
                        s(:nth_ref, 2))), :to_f),
                  s(:send,
                    s(:lvar, :s), :to_f))))),
          s(:def, :extract_decimal,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send, nil, :skip), :!)),
              s(:send,
                s(:lvar, :s), :to_i), nil)),
          s(:def, :extract_hex,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send, nil, :skip), :!)),
              s(:send,
                s(:lvar, :s), :hex), nil)),
          s(:def, :extract_octal,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send, nil, :skip), :!)),
              s(:send,
                s(:lvar, :s), :oct), nil)),
          s(:def, :extract_integer,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:and,
                s(:lvar, :s),
                s(:send,
                  s(:send, nil, :skip), :!)),
              s(:send, nil, :Integer,
                s(:lvar, :s)), nil)),
          s(:def, :extract_plain,
            s(:args,
              s(:arg, :s)),
            s(:if,
              s(:send, nil, :skip), nil,
              s(:lvar, :s))),
          s(:def, :nil_proc,
            s(:args,
              s(:arg, :s)),
            s(:nil)),
          s(:send, nil, :public),
          s(:def, :to_s,
            s(:args),
            s(:ivar, :@spec_string)),
          s(:def, :count_space?,
            s(:args),
            s(:send,
              s(:regexp,
                s(:str, "(?:\\A|\\S)%\\*?\\d*c|%\\d*\\["),
                s(:regopt)), :match,
              s(:ivar, :@spec_string))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:ivasgn, :@spec_string,
                s(:lvar, :str)),
              s(:lvasgn, :h,
                s(:str, "[A-Fa-f0-9]")),
              s(:masgn,
                s(:mlhs,
                  s(:ivasgn, :@re_string),
                  s(:ivasgn, :@handler)),
                s(:case,
                  s(:ivar, :@spec_string),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\[\\[:[a-z]+:\\]\\])"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "("),
                        s(:begin,
                          s(:nth_ref, 1)),
                        s(:str, "+)")),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)(\\[\\[:[a-z]+:\\]\\])"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "("),
                        s(:begin,
                          s(:nth_ref, 2)),
                        s(:str, "{1,"),
                        s(:begin,
                          s(:nth_ref, 1)),
                        s(:str, "})")),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?\\[([^\\]]*)\\]"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :yes,
                        s(:nth_ref, 1)),
                      s(:if,
                        s(:send,
                          s(:regexp,
                            s(:str, "^\\^"),
                            s(:regopt)), :match,
                          s(:lvar, :yes)),
                        s(:lvasgn, :no,
                          s(:send,
                            s(:lvar, :yes), :[],
                            s(:irange,
                              s(:int, 1),
                              s(:int, -1)))),
                        s(:lvasgn, :no,
                          s(:send,
                            s(:str, "^"), :+,
                            s(:lvar, :yes)))),
                      s(:array,
                        s(:dstr,
                          s(:str, "(["),
                          s(:begin,
                            s(:lvar, :yes)),
                          s(:str, "]+)(?=["),
                          s(:begin,
                            s(:lvar, :no)),
                          s(:str, "]|\\z)")),
                        s(:sym, :extract_plain)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)\\[([^\\]]*)\\]"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :yes,
                        s(:nth_ref, 2)),
                      s(:lvasgn, :w,
                        s(:nth_ref, 1)),
                      s(:array,
                        s(:dstr,
                          s(:str, "(["),
                          s(:begin,
                            s(:lvar, :yes)),
                          s(:str, "]{1,"),
                          s(:begin,
                            s(:lvar, :w)),
                          s(:str, "})")),
                        s(:sym, :extract_plain)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?i"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "([-+]?(?:(?:0[0-7]+)|(?:0[Xx]"),
                        s(:begin,
                          s(:lvar, :h)),
                        s(:str, "+)|(?:[1-9]\\d*)))")),
                      s(:sym, :extract_integer))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)i"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :n,
                        s(:send,
                          s(:nth_ref, 1), :to_i)),
                      s(:lvasgn, :s,
                        s(:str, "(")),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 1)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[1-9]\\d{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 1))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 1)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "0[0-7]{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 1))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 2)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[-+]0[0-7]{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 2))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 2)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[-+][1-9]\\d{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 2))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 2)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "0[Xx]"),
                            s(:begin,
                              s(:lvar, :h)),
                            s(:str, "{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 2))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 3)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[-+]0[Xx]"),
                            s(:begin,
                              s(:lvar, :h)),
                            s(:str, "{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 3))),
                            s(:str, "}|"))), nil),
                      s(:op_asgn,
                        s(:lvasgn, :s), :+,
                        s(:str, "\\d")),
                      s(:op_asgn,
                        s(:lvasgn, :s), :+,
                        s(:str, ")")),
                      s(:array,
                        s(:lvar, :s),
                        s(:sym, :extract_integer)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?[du]"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "([-+]?\\d+)"),
                      s(:sym, :extract_decimal))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)[du]"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :n,
                        s(:send,
                          s(:nth_ref, 1), :to_i)),
                      s(:lvasgn, :s,
                        s(:str, "(")),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 1)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[-+]\\d{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 1))),
                            s(:str, "}|"))), nil),
                      s(:op_asgn,
                        s(:lvasgn, :s), :+,
                        s(:dstr,
                          s(:str, "\\d{1,"),
                          s(:begin,
                            s(:nth_ref, 1)),
                          s(:str, "})"))),
                      s(:array,
                        s(:lvar, :s),
                        s(:sym, :extract_decimal)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?[Xx]"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "([-+]?(?:0[Xx])?"),
                        s(:begin,
                          s(:lvar, :h)),
                        s(:str, "+)")),
                      s(:sym, :extract_hex))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)[Xx]"),
                      s(:regopt)),
                    s(:begin,
                      s(:lvasgn, :n,
                        s(:send,
                          s(:nth_ref, 1), :to_i)),
                      s(:lvasgn, :s,
                        s(:str, "(")),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 3)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[-+]0[Xx]"),
                            s(:begin,
                              s(:lvar, :h)),
                            s(:str, "{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 3))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 2)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "0[Xx]"),
                            s(:begin,
                              s(:lvar, :h)),
                            s(:str, "{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 2))),
                            s(:str, "}|"))), nil),
                      s(:if,
                        s(:send,
                          s(:lvar, :n), :>,
                          s(:int, 1)),
                        s(:op_asgn,
                          s(:lvasgn, :s), :+,
                          s(:dstr,
                            s(:str, "[-+]"),
                            s(:begin,
                              s(:lvar, :h)),
                            s(:str, "{1,"),
                            s(:begin,
                              s(:send,
                                s(:lvar, :n), :-,
                                s(:int, 1))),
                            s(:str, "}|"))), nil),
                      s(:op_asgn,
                        s(:lvasgn, :s), :+,
                        s(:dstr,
                          s(:begin,
                            s(:lvar, :h)),
                          s(:str, "{1,"),
                          s(:begin,
                            s(:lvar, :n)),
                          s(:str, "}"))),
                      s(:op_asgn,
                        s(:lvasgn, :s), :+,
                        s(:str, ")")),
                      s(:array,
                        s(:lvar, :s),
                        s(:sym, :extract_hex)))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?o"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "([-+]?[0-7]+)"),
                      s(:sym, :extract_octal))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)o"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "([-+][0-7]{1,"),
                        s(:begin,
                          s(:send,
                            s(:send,
                              s(:nth_ref, 1), :to_i), :-,
                            s(:int, 1))),
                        s(:str, "}|[0-7]{1,"),
                        s(:begin,
                          s(:nth_ref, 1)),
                        s(:str, "})")),
                      s(:sym, :extract_octal))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?[aefgAEFG]"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "([-+]?(?:0[xX](?:\\.\\h+|\\h+(?:\\.\\h*)?)[pP][-+]\\d+|\\d+(?![\\d.])|\\d*\\.\\d*(?:[eE][-+]?\\d+)?))"),
                      s(:sym, :extract_float))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)[aefgAEFG]"),
                      s(:regopt)),
                    s(:array,
                      s(:send,
                        s(:str, "(?=[-+]?(?:0[xX](?:\\.\\h+|\\h+(?:\\.\\h*)?)[pP][-+]\\d+|\\d+(?![\\d.])|\\d*\\.\\d*(?:[eE][-+]?\\d+)?))"), :+,
                        s(:dstr,
                          s(:str, "(\\S{1,"),
                          s(:begin,
                            s(:nth_ref, 1)),
                          s(:str, "})"))),
                      s(:sym, :extract_float))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)s"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "(\\S{1,"),
                        s(:begin,
                          s(:nth_ref, 1)),
                        s(:str, "})")),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?s"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "(\\S+)"),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "\\s%\\*?c"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "\\s*(.)"),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?c"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "(.)"),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%\\*?(\\d+)c"),
                      s(:regopt)),
                    s(:array,
                      s(:dstr,
                        s(:str, "(.{1,"),
                        s(:begin,
                          s(:nth_ref, 1)),
                        s(:str, "})")),
                      s(:sym, :extract_plain))),
                  s(:when,
                    s(:regexp,
                      s(:str, "%%"),
                      s(:regopt)),
                    s(:array,
                      s(:str, "(\\s*%)"),
                      s(:sym, :nil_proc))),
                  s(:array,
                    s(:dstr,
                      s(:str, "("),
                      s(:begin,
                        s(:send,
                          s(:const, nil, :Regexp), :escape,
                          s(:ivar, :@spec_string))),
                      s(:str, ")")),
                    s(:sym, :nil_proc)))),
              s(:ivasgn, :@re_string,
                s(:send,
                  s(:str, "\\A"), :+,
                  s(:ivar, :@re_string))))),
          s(:def, :to_re,
            s(:args),
            s(:send,
              s(:const, nil, :Regexp), :new,
              s(:ivar, :@re_string),
              s(:const,
                s(:const, nil, :Regexp), :MULTILINE))),
          s(:def, :match,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:ivasgn, :@matched,
                s(:false)),
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :str), :dup)),
              s(:if,
                s(:send, nil, :count_space?), nil,
                s(:send,
                  s(:lvar, :s), :sub!,
                  s(:regexp,
                    s(:str, "\\A\\s+"),
                    s(:regopt)),
                  s(:str, ""))),
              s(:lvasgn, :res,
                s(:send,
                  s(:send, nil, :to_re), :match,
                  s(:lvar, :s))),
              s(:if,
                s(:lvar, :res),
                s(:begin,
                  s(:ivasgn, :@conversion,
                    s(:send, nil, :send,
                      s(:ivar, :@handler),
                      s(:send,
                        s(:lvar, :res), :[],
                        s(:int, 1)))),
                  s(:ivasgn, :@matched_string,
                    s(:send,
                      s(:ivar, :@conversion), :to_s)),
                  s(:ivasgn, :@matched,
                    s(:true))), nil),
              s(:lvar, :res))),
          s(:def, :letter,
            s(:args),
            s(:send,
              s(:ivar, :@spec_string), :[],
              s(:regexp,
                s(:str, "%\\*?\\d*([a-z\\[])"),
                s(:regopt)),
              s(:int, 1))),
          s(:def, :width,
            s(:args),
            s(:csend,
              s(:send,
                s(:ivar, :@spec_string), :[],
                s(:regexp,
                  s(:str, "%\\*?(\\d+)"),
                  s(:regopt)),
                s(:int, 1)), :to_i)),
          s(:def, :mid_match?,
            s(:args),
            s(:begin,
              s(:if,
                s(:ivar, :@matched), nil,
                s(:return,
                  s(:false))),
              s(:lvasgn, :cc_no_width,
                s(:and,
                  s(:send,
                    s(:send, nil, :letter), :==,
                    s(:str, "[")),
                  s(:send,
                    s(:send, nil, :width), :!))),
              s(:lvasgn, :c_or_cc_width,
                s(:and,
                  s(:begin,
                    s(:or,
                      s(:send,
                        s(:send, nil, :letter), :==,
                        s(:str, "c")),
                      s(:send,
                        s(:send, nil, :letter), :==,
                        s(:str, "[")))),
                  s(:send, nil, :width))),
              s(:lvasgn, :width_left,
                s(:and,
                  s(:lvar, :c_or_cc_width),
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:send, nil, :matched_string), :size), :<,
                      s(:send, nil, :width))))),
              s(:return,
                s(:or,
                  s(:lvar, :width_left),
                  s(:lvar, :cc_no_width))))))),
      s(:class,
        s(:const, nil, :FormatString), nil,
        s(:begin,
          s(:send, nil, :attr_reader,
            s(:sym, :string_left),
            s(:sym, :last_spec_tried),
            s(:sym, :last_match_tried),
            s(:sym, :matched_count),
            s(:sym, :space)),
          s(:casgn, nil, :SPECIFIERS,
            s(:str, "diuXxofFeEgGscaA")),
          s(:casgn, nil, :REGEX,
            s(:regexp,
              s(:str, "\n"),
              s(:str, "        # possible space, followed by...\n"),
              s(:str, "          (?:\\s*\n"),
              s(:str, "          # percent sign, followed by...\n"),
              s(:str, "            %\n"),
              s(:str, "            # another percent sign, or...\n"),
              s(:str, "              (?:%|\n"),
              s(:str, "                 # optional assignment suppression flag\n"),
              s(:str, "                 \\*?\n"),
              s(:str, "                 # optional maximum field width\n"),
              s(:str, "                 \\d*\n"),
              s(:str, "                   # named character class, ...\n"),
              s(:str, "                   (?:\\[\\[:\\w+:\\]\\]|\n"),
              s(:str, "                   # traditional character class, or...\n"),
              s(:str, "                      \\[[^\\]]*\\]|\n"),
              s(:str, "                   # specifier letter.\n"),
              s(:str, "                      ["),
              s(:begin,
                s(:const, nil, :SPECIFIERS)),
              s(:str, "])))|\n"),
              s(:str, "            # or miscellaneous characters\n"),
              s(:str, "              [^%\\s]+"),
              s(:regopt, :i, :x))),
          s(:def, :initialize,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:ivasgn, :@specs,
                s(:array)),
              s(:ivasgn, :@i,
                s(:int, 1)),
              s(:lvasgn, :s,
                s(:send,
                  s(:lvar, :str), :to_s)),
              s(:if,
                s(:send,
                  s(:regexp,
                    s(:str, "\\S"),
                    s(:regopt)), :match,
                  s(:lvar, :s)), nil,
                s(:return)),
              s(:if,
                s(:send,
                  s(:regexp,
                    s(:str, "\\s\\z"),
                    s(:regopt)), :match,
                  s(:lvar, :s)),
                s(:ivasgn, :@space,
                  s(:true)), nil),
              s(:send,
                s(:ivar, :@specs), :replace,
                s(:block,
                  s(:send,
                    s(:send,
                      s(:lvar, :s), :scan,
                      s(:const, nil, :REGEX)), :map),
                  s(:args,
                    s(:arg, :spec)),
                  s(:send,
                    s(:const, nil, :FormatSpecifier), :new,
                    s(:lvar, :spec)))))),
          s(:def, :to_s,
            s(:args),
            s(:send,
              s(:ivar, :@specs), :join,
              s(:str, ""))),
          s(:def, :prune,
            s(:args,
              s(:optarg, :n,
                s(:send, nil, :matched_count))),
            s(:block,
              s(:send,
                s(:lvar, :n), :times),
              s(:args),
              s(:send,
                s(:ivar, :@specs), :shift))),
          s(:def, :spec_count,
            s(:args),
            s(:send,
              s(:ivar, :@specs), :size)),
          s(:def, :last_spec,
            s(:args),
            s(:send,
              s(:ivar, :@i), :==,
              s(:send,
                s(:send, nil, :spec_count), :-,
                s(:int, 1)))),
          s(:def, :match,
            s(:args,
              s(:arg, :str)),
            s(:begin,
              s(:lvasgn, :accum,
                s(:array)),
              s(:ivasgn, :@string_left,
                s(:lvar, :str)),
              s(:ivasgn, :@matched_count,
                s(:int, 0)),
              s(:block,
                s(:send,
                  s(:ivar, :@specs), :each_with_index),
                s(:args,
                  s(:arg, :spec),
                  s(:arg, :i)),
                s(:begin,
                  s(:ivasgn, :@i,
                    s(:lvar, :i)),
                  s(:ivasgn, :@last_spec_tried,
                    s(:lvar, :spec)),
                  s(:ivasgn, :@last_match_tried,
                    s(:send,
                      s(:lvar, :spec), :match,
                      s(:ivar, :@string_left))),
                  s(:if,
                    s(:ivar, :@last_match_tried), nil,
                    s(:break)),
                  s(:op_asgn,
                    s(:ivasgn, :@matched_count), :+,
                    s(:int, 1)),
                  s(:send,
                    s(:lvar, :accum), :<<,
                    s(:send,
                      s(:lvar, :spec), :conversion)),
                  s(:ivasgn, :@string_left,
                    s(:send,
                      s(:ivar, :@last_match_tried), :post_match)),
                  s(:if,
                    s(:send,
                      s(:ivar, :@string_left), :empty?),
                    s(:break), nil))),
              s(:return,
                s(:send,
                  s(:lvar, :accum), :compact)))))))),
  s(:class,
    s(:const, nil, :IO), nil,
    s(:begin,
      s(:def, :scanf,
        s(:args,
          s(:arg, :str),
          s(:blockarg, :b)),
        s(:begin,
          s(:if,
            s(:lvar, :b),
            s(:return,
              s(:send, nil, :block_scanf,
                s(:lvar, :str),
                s(:block_pass,
                  s(:lvar, :b)))), nil),
          s(:if,
            s(:send,
              s(:send,
                s(:lvar, :str), :size), :>,
              s(:int, 0)), nil,
            s(:return,
              s(:array))),
          s(:lvasgn, :start_position,
            s(:rescue,
              s(:send, nil, :pos),
              s(:resbody, nil, nil,
                s(:int, 0)), nil)),
          s(:lvasgn, :matched_so_far,
            s(:int, 0)),
          s(:lvasgn, :source_buffer,
            s(:str, "")),
          s(:lvasgn, :result_buffer,
            s(:array)),
          s(:lvasgn, :final_result,
            s(:array)),
          s(:lvasgn, :fstr,
            s(:send,
              s(:const,
                s(:const, nil, :Scanf), :FormatString), :new,
              s(:lvar, :str))),
          s(:block,
            s(:send, nil, :loop),
            s(:args),
            s(:begin,
              s(:if,
                s(:or,
                  s(:send, nil, :eof),
                  s(:begin,
                    s(:and,
                      s(:send, nil, :tty?),
                      s(:send,
                        s(:send,
                          s(:lvar, :fstr), :match,
                          s(:lvar, :source_buffer)), :!)))),
                s(:begin,
                  s(:send,
                    s(:lvar, :final_result), :concat,
                    s(:lvar, :result_buffer)),
                  s(:break)), nil),
              s(:send,
                s(:lvar, :source_buffer), :<<,
                s(:send, nil, :gets)),
              s(:lvasgn, :current_match,
                s(:send,
                  s(:lvar, :fstr), :match,
                  s(:lvar, :source_buffer))),
              s(:lvasgn, :spec,
                s(:send,
                  s(:lvar, :fstr), :last_spec_tried)),
              s(:if,
                s(:send,
                  s(:lvar, :spec), :matched),
                s(:if,
                  s(:send,
                    s(:lvar, :spec), :mid_match?),
                  s(:begin,
                    s(:send,
                      s(:lvar, :result_buffer), :replace,
                      s(:lvar, :current_match)),
                    s(:next)), nil),
                s(:if,
                  s(:begin,
                    s(:send,
                      s(:send,
                        s(:lvar, :fstr), :matched_count), :==,
                      s(:send,
                        s(:send,
                          s(:lvar, :fstr), :spec_count), :-,
                        s(:int, 1)))),
                  s(:if,
                    s(:send,
                      s(:regexp,
                        s(:str, "\\A\\s*\\z"),
                        s(:regopt)), :match,
                      s(:send,
                        s(:lvar, :fstr), :string_left)),
                    s(:begin,
                      s(:if,
                        s(:send,
                          s(:lvar, :spec), :count_space?),
                        s(:break), nil),
                      s(:send,
                        s(:lvar, :result_buffer), :replace,
                        s(:lvar, :current_match)),
                      s(:next)), nil), nil)),
              s(:send,
                s(:lvar, :final_result), :concat,
                s(:lvar, :current_match)),
              s(:op_asgn,
                s(:lvasgn, :matched_so_far), :+,
                s(:send,
                  s(:lvar, :source_buffer), :size)),
              s(:send,
                s(:lvar, :source_buffer), :replace,
                s(:send,
                  s(:lvar, :fstr), :string_left)),
              s(:op_asgn,
                s(:lvasgn, :matched_so_far), :-,
                s(:send,
                  s(:lvar, :source_buffer), :size)),
              s(:if,
                s(:send,
                  s(:lvar, :fstr), :last_spec),
                s(:break), nil),
              s(:send,
                s(:lvar, :fstr), :prune))),
          s(:kwbegin,
            s(:rescue,
              s(:send, nil, :seek,
                s(:send,
                  s(:lvar, :start_position), :+,
                  s(:lvar, :matched_so_far)),
                s(:const,
                  s(:const, nil, :IO), :SEEK_SET)),
              s(:resbody,
                s(:array,
                  s(:const,
                    s(:const, nil, :Errno), :ESPIPE)), nil, nil), nil)),
          s(:if,
            s(:and,
              s(:send,
                s(:lvar, :fstr), :last_spec),
              s(:send,
                s(:lvar, :fstr), :space)),
            s(:send, nil, :soak_up_spaces), nil),
          s(:return,
            s(:lvar, :final_result)))),
      s(:send, nil, :private),
      s(:def, :soak_up_spaces,
        s(:args),
        s(:begin,
          s(:lvasgn, :c,
            s(:send, nil, :getc)),
          s(:if,
            s(:lvar, :c),
            s(:send, nil, :ungetc,
              s(:lvar, :c)), nil),
          s(:until,
            s(:or,
              s(:or,
                s(:send, nil, :eof),
                s(:send,
                  s(:lvar, :c), :!)),
              s(:send,
                s(:regexp,
                  s(:str, "\\S"),
                  s(:regopt)), :match,
                s(:send,
                  s(:lvar, :c), :chr))),
            s(:lvasgn, :c,
              s(:send, nil, :getc))),
          s(:if,
            s(:begin,
              s(:and,
                s(:lvar, :c),
                s(:send,
                  s(:regexp,
                    s(:str, "\\S"),
                    s(:regopt)), :match,
                  s(:send,
                    s(:lvar, :c), :chr)))),
            s(:send, nil, :ungetc,
              s(:lvar, :c)), nil))),
      s(:def, :block_scanf,
        s(:args,
          s(:arg, :str)),
        s(:begin,
          s(:lvasgn, :final,
            s(:array)),
          s(:lvasgn, :fstr,
            s(:send,
              s(:const,
                s(:const, nil, :Scanf), :FormatString), :new,
              s(:lvar, :str))),
          s(:lvasgn, :last_spec,
            s(:send,
              s(:lvar, :fstr), :last_spec)),
          s(:until_post,
            s(:or,
              s(:send, nil, :eof),
              s(:send,
                s(:send,
                  s(:lvar, :fstr), :last_spec_tried), :==,
                s(:lvar, :last_spec))),
            s(:kwbegin,
              s(:lvasgn, :current,
                s(:send, nil, :scanf,
                  s(:lvar, :str))),
              s(:if,
                s(:send,
                  s(:lvar, :current), :empty?),
                s(:break), nil),
              s(:send,
                s(:lvar, :final), :push,
                s(:yield,
                  s(:lvar, :current))))),
          s(:return,
            s(:lvar, :final)))))),
  s(:class,
    s(:const, nil, :String), nil,
    s(:begin,
      s(:def, :scanf,
        s(:args,
          s(:arg, :fstr),
          s(:blockarg, :b)),
        s(:if,
          s(:lvar, :b),
          s(:send, nil, :block_scanf,
            s(:lvar, :fstr),
            s(:block_pass,
              s(:lvar, :b))),
          s(:begin,
            s(:lvasgn, :fs,
              s(:if,
                s(:send,
                  s(:lvar, :fstr), :is_a?,
                  s(:const,
                    s(:const, nil, :Scanf), :FormatString)),
                s(:lvar, :fstr),
                s(:send,
                  s(:const,
                    s(:const, nil, :Scanf), :FormatString), :new,
                  s(:lvar, :fstr)))),
            s(:send,
              s(:lvar, :fs), :match,
              s(:self))))),
      s(:def, :block_scanf,
        s(:args,
          s(:arg, :fstr)),
        s(:begin,
          s(:lvasgn, :fs,
            s(:send,
              s(:const,
                s(:const, nil, :Scanf), :FormatString), :new,
              s(:lvar, :fstr))),
          s(:lvasgn, :str,
            s(:send,
              s(:self), :dup)),
          s(:lvasgn, :final,
            s(:array)),
          s(:until_post,
            s(:or,
              s(:send,
                s(:lvar, :current), :empty?),
              s(:send,
                s(:lvar, :str), :empty?)),
            s(:kwbegin,
              s(:lvasgn, :current,
                s(:send,
                  s(:lvar, :str), :scanf,
                  s(:lvar, :fs))),
              s(:if,
                s(:send,
                  s(:lvar, :current), :empty?), nil,
                s(:send,
                  s(:lvar, :final), :push,
                  s(:yield,
                    s(:lvar, :current)))),
              s(:lvasgn, :str,
                s(:send,
                  s(:lvar, :fs), :string_left)))),
          s(:return,
            s(:lvar, :final)))))),
  s(:module,
    s(:const, nil, :Kernel),
    s(:begin,
      s(:send, nil, :private),
      s(:def, :scanf,
        s(:args,
          s(:arg, :format),
          s(:blockarg, :b)),
        s(:send,
          s(:const, nil, :STDIN), :scanf,
          s(:lvar, :format),
          s(:block_pass,
            s(:lvar, :b)))))))
